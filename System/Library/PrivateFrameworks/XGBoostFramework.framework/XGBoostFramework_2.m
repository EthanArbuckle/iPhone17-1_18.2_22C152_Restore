uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<long long>,long long>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  std::ios_base::iostate v10;
  std::ios_base *v11;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  std::runtime_error *exception;
  std::string v32;
  void v33[33];
  uint64_t v34[12];
  char v35;
  uint64_t v36;

  std::istringstream::basic_istringstream[abi:ne180100](v34, (const std::string *)a3, 8);
  MEMORY[0x230FA7CB0](v34, a2 + *(void *)(a1 + 96));
  v6 = v34[0];
  v7 = *(_DWORD *)((char *)&v34[4] + *(void *)(v34[0] - 24));
  if ((v7 & 5) == 0 && (v7 & 2) == 0)
  {
    while (1)
    {
      v8 = std::istream::get();
      if (v8 == -1)
      {
        v10 = 0;
        v11 = (std::ios_base *)((char *)v34 + *(void *)(v34[0] - 24));
        goto LABEL_11;
      }
      if (v8 > 0x20u || ((1 << v8) & 0x100003600) == 0) {
        break;
      }
      v6 = v34[0];
      if ((*((unsigned char *)&v34[4] + *(void *)(v34[0] - 24)) & 2) != 0) {
        goto LABEL_12;
      }
    }
    v11 = (std::ios_base *)((char *)v34 + *(void *)(v34[0] - 24));
    v10 = v11->__rdstate_ | 4;
LABEL_11:
    std::ios_base::clear(v11, v10);
    v6 = v34[0];
  }
LABEL_12:
  if ((*((unsigned char *)&v34[4] + *(void *)(v6 - 24)) & 5) != 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid Parameter format for ", 29);
    v14 = *(char *)(a1 + 47);
    if (v14 >= 0) {
      v15 = a1 + 24;
    }
    else {
      v15 = *(void *)(a1 + 24);
    }
    if (v14 >= 0) {
      v16 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      v16 = *(void *)(a1 + 32);
    }
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" expect ", 8);
    v21 = *(void *)(a1 + 48);
    v20 = a1 + 48;
    v19 = v21;
    v22 = *(char *)(v20 + 23);
    if (v22 >= 0) {
      v23 = v20;
    }
    else {
      v23 = v19;
    }
    if (v22 >= 0) {
      v24 = *(unsigned __int8 *)(v20 + 23);
    }
    else {
      v24 = *(void *)(v20 + 8);
    }
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" but value='", 12);
    v27 = *(char *)(a3 + 23);
    if (v27 >= 0) {
      v28 = a3;
    }
    else {
      v28 = *(void *)a3;
    }
    if (v27 >= 0) {
      v29 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      v29 = *(void *)(a3 + 8);
    }
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v32.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v32, 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v32);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  v34[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  v34[2] = MEMORY[0x263F8C318] + 16;
  if (v35 < 0) {
    operator delete((void *)v34[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x230FA8020](&v36);
}

void sub_22E9CD4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v49 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      std::istringstream::~istringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v48);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<long long>,long long>::Check(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + *(void *)(result + 96));
  if (*(unsigned char *)(result + 112))
  {
    uint64_t v3 = *(void *)(result + 120);
    if (*(unsigned char *)(result + 113))
    {
      if (v2 < v3 || v2 > *(void *)(result + 128))
      {
        uint64_t v4 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
        v5 = (void *)std::ostream::operator<<();
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for Parameter ", 15);
        int v7 = *(char *)(v4 + 47);
        if (v7 >= 0) {
          uint64_t v8 = v4 + 24;
        }
        else {
          uint64_t v8 = *(void *)(v4 + 24);
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(v4 + 47);
        }
        else {
          uint64_t v9 = *(void *)(v4 + 32);
        }
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" exceed bound [", 15);
        v11 = (void *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v66, 1);
        v12 = (void *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 93;
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v66, 1);
        v66.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v66, 1);
        int v14 = *(char *)(v4 + 47);
        if (v14 >= 0) {
          uint64_t v15 = v4 + 24;
        }
        else {
          uint64_t v15 = *(void *)(v4 + 24);
        }
        if (v14 >= 0) {
          uint64_t v16 = *(unsigned __int8 *)(v4 + 47);
        }
        else {
          uint64_t v16 = *(void *)(v4 + 32);
        }
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v15, v16);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        uint64_t v21 = *(void *)(v4 + 72);
        uint64_t v20 = v4 + 72;
        uint64_t v19 = v21;
        int v22 = *(char *)(v20 + 23);
        if (v22 >= 0) {
          uint64_t v23 = v20;
        }
        else {
          uint64_t v23 = v19;
        }
        if (v22 >= 0) {
          uint64_t v24 = *(unsigned __int8 *)(v20 + 23);
        }
        else {
          uint64_t v24 = *(void *)(v20 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v66);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
      }
    }
    else if (v2 < v3)
    {
      uint64_t v46 = result;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
      v47 = (void *)std::ostream::operator<<();
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" for Parameter ", 15);
      int v49 = *(char *)(v46 + 47);
      if (v49 >= 0) {
        uint64_t v50 = v46 + 24;
      }
      else {
        uint64_t v50 = *(void *)(v46 + 24);
      }
      if (v49 >= 0) {
        uint64_t v51 = *(unsigned __int8 *)(v46 + 47);
      }
      else {
        uint64_t v51 = *(void *)(v46 + 32);
      }
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" should be greater equal to ", 28);
      v53 = (void *)std::ostream::operator<<();
      v66.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v66, 1);
      int v54 = *(char *)(v46 + 47);
      if (v54 >= 0) {
        uint64_t v55 = v46 + 24;
      }
      else {
        uint64_t v55 = *(void *)(v46 + 24);
      }
      if (v54 >= 0) {
        uint64_t v56 = *(unsigned __int8 *)(v46 + 47);
      }
      else {
        uint64_t v56 = *(void *)(v46 + 32);
      }
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v55, v56);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      uint64_t v61 = *(void *)(v46 + 72);
      uint64_t v60 = v46 + 72;
      uint64_t v59 = v61;
      int v62 = *(char *)(v60 + 23);
      if (v62 >= 0) {
        uint64_t v63 = v60;
      }
      else {
        uint64_t v63 = v59;
      }
      if (v62 >= 0) {
        uint64_t v64 = *(unsigned __int8 *)(v60 + 23);
      }
      else {
        uint64_t v64 = *(void *)(v60 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v63, v64);
      v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v65, &v66);
      v65->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
    }
  }
  else if (*(unsigned char *)(result + 113) && v2 > *(void *)(result + 128))
  {
    uint64_t v26 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
    v27 = (void *)std::ostream::operator<<();
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for Parameter ", 15);
    int v29 = *(char *)(v26 + 47);
    if (v29 >= 0) {
      uint64_t v30 = v26 + 24;
    }
    else {
      uint64_t v30 = *(void *)(v26 + 24);
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(v26 + 47);
    }
    else {
      uint64_t v31 = *(void *)(v26 + 32);
    }
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" should be smaller equal to ", 28);
    v33 = (void *)std::ostream::operator<<();
    v66.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v66, 1);
    int v34 = *(char *)(v26 + 47);
    if (v34 >= 0) {
      uint64_t v35 = v26 + 24;
    }
    else {
      uint64_t v35 = *(void *)(v26 + 24);
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(v26 + 47);
    }
    else {
      uint64_t v36 = *(void *)(v26 + 32);
    }
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v35, v36);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    uint64_t v41 = *(void *)(v26 + 72);
    uint64_t v40 = v26 + 72;
    uint64_t v39 = v41;
    int v42 = *(char *)(v40 + 23);
    if (v42 >= 0) {
      uint64_t v43 = v40;
    }
    else {
      uint64_t v43 = v39;
    }
    if (v42 >= 0) {
      uint64_t v44 = *(unsigned __int8 *)(v40 + 23);
    }
    else {
      uint64_t v44 = *(void *)(v40 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v43, v44);
    v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v45, &v66);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  return result;
}

void sub_22E9CD9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<long long>,long long>::GetStringValue(void *a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(void *, void *, void))(*a1 + 64))(a1, v5, *(void *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v5[1] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v7);
}

void sub_22E9CDB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<long long>,long long>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  int v4 = *(char *)(a1 + 71);
  if (v4 >= 0) {
    uint64_t v5 = a1 + 48;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 56);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(unsigned char *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  uint64_t v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)uint64_t v8 = v10;
  *(void *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v14);
}

void sub_22E9CDDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<long long>,long long>::PrintDefaultValueString(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, a2, a1[13]);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<long long>,long long>::PrintValue()
{
  return std::ostream::operator<<();
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<long long>,long long>::set_range(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 120) = a2;
  *(void *)(result + 128) = a3;
  *(_WORD *)(result + 112) = 257;
  return result;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<long long>,long long>::set_lower_bound(uint64_t result, uint64_t a2)
{
  *(void *)(result + 120) = a2;
  *(unsigned char *)(result + 112) = 1;
  return result;
}

void *std::vector<std::shared_ptr<xgboost::DMatrix>>::__init_with_size[abi:ne180100]<std::shared_ptr<xgboost::DMatrix>*,std::shared_ptr<xgboost::DMatrix>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<xgboost::DMatrix>>,std::shared_ptr<xgboost::DMatrix>*,std::shared_ptr<xgboost::DMatrix>*,std::shared_ptr<xgboost::DMatrix>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22E9CDEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<xgboost::DMatrix>>,std::shared_ptr<xgboost::DMatrix>*,std::shared_ptr<xgboost::DMatrix>*,std::shared_ptr<xgboost::DMatrix>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *int v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<xgboost::DMatrix>>,std::shared_ptr<xgboost::DMatrix>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<xgboost::DMatrix>>,std::shared_ptr<xgboost::DMatrix>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<xgboost::DMatrix>>,std::shared_ptr<xgboost::DMatrix>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<xgboost::DMatrix>>,std::shared_ptr<xgboost::DMatrix>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

uint64_t dmlc::Registry<xgboost::TreeUpdaterReg>::~Registry(uint64_t a1)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 127) < 0) {
          operator delete(*(void **)(v5 + 104));
        }
        std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::~__value_func[abi:ne180100]((void *)(v5 + 72));
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x1032C40EA5FD255);
        uint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t xgboost::TreeUpdater::Create(uint64_t a1, uint64_t a2, __int16 a3)
{
  dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  uint64_t v6 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)&qword_26AD72800, (const void **)a1);
  if (v6 == &qword_26AD72808 || (uint64_t v7 = v6[7]) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_updater.cc");
    uint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Unknown tree updater ", 21);
    int v11 = *(char *)(a1 + 23);
    if (v11 >= 0) {
      v12 = (const void *)a1;
    }
    else {
      v12 = *(const void **)a1;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    uint64_t v7 = 0;
  }
  uint64_t result = std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator()(v7 + 72, a3);
  *(void *)(result + 8) = a2;
  return result;
}

void sub_22E9CE190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator()(uint64_t a1, __int16 a2)
{
  __int16 v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 48))(v2, &v4);
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::DenseAdapter>(void *a1)
{
  *a1 = &unk_26E24C920;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 1));
}

void sub_22E9CE614(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xgboost::MetaInfo *a9, int a10, __int16 a11, char a12)
{
  uint64_t v14 = (std::__shared_weak_count *)v12[36];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  char v15 = (std::__shared_weak_count *)v12[34];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  int v16 = (std::__shared_weak_count *)v12[32];
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  v17 = (std::__shared_weak_count *)v12[30];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  v18 = (std::__shared_weak_count *)v12[28];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  xgboost::MetaInfo::~MetaInfo(v13);
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::ArrayAdapter>(void *a1)
{
  *a1 = &unk_26E24C920;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 1));
}

void sub_22E9CEAD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xgboost::MetaInfo *a9, int a10, __int16 a11, char a12)
{
  uint64_t v14 = (std::__shared_weak_count *)v12[36];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  char v15 = (std::__shared_weak_count *)v12[34];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  int v16 = (std::__shared_weak_count *)v12[32];
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  v17 = (std::__shared_weak_count *)v12[30];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  v18 = (std::__shared_weak_count *)v12[28];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  xgboost::MetaInfo::~MetaInfo(v13);
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::CSRAdapter>(void *a1)
{
  *a1 = &unk_26E24C920;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 1));
}

void sub_22E9CEF8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xgboost::MetaInfo *a9, int a10, __int16 a11, char a12)
{
  uint64_t v14 = (std::__shared_weak_count *)v12[36];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  char v15 = (std::__shared_weak_count *)v12[34];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  int v16 = (std::__shared_weak_count *)v12[32];
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  v17 = (std::__shared_weak_count *)v12[30];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  v18 = (std::__shared_weak_count *)v12[28];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  xgboost::MetaInfo::~MetaInfo(v13);
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::CSRArrayAdapter>(void *a1)
{
  *a1 = &unk_26E24C920;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 1));
}

void sub_22E9CF3D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xgboost::MetaInfo *a9)
{
  uint64_t v10 = (std::__shared_weak_count *)v9[36];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  int v11 = (std::__shared_weak_count *)v9[34];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  v12 = (std::__shared_weak_count *)v9[32];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)v9[30];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)v9[28];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  xgboost::MetaInfo::~MetaInfo(a9);
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::CSCAdapter>(void *a1)
{
  *a1 = &unk_26E24C920;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 1));
}

void sub_22E9CF824(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xgboost::MetaInfo *a9)
{
  int v11 = (std::__shared_weak_count *)v9[36];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  v12 = (std::__shared_weak_count *)v9[34];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)v9[32];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)v9[30];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  char v15 = (std::__shared_weak_count *)v9[28];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  xgboost::MetaInfo::~MetaInfo(v10);
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::DataTableAdapter>(void *a1)
{
  *a1 = &unk_26E24C920;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 1));
}

void sub_22E9CFCC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xgboost::MetaInfo *a9, int a10, __int16 a11, char a12)
{
  uint64_t v14 = (std::__shared_weak_count *)v12[36];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  char v15 = (std::__shared_weak_count *)v12[34];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  int v16 = (std::__shared_weak_count *)v12[32];
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  v17 = (std::__shared_weak_count *)v12[30];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  v18 = (std::__shared_weak_count *)v12[28];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  xgboost::MetaInfo::~MetaInfo(v13);
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::FileAdapter>(void *a1)
{
  *a1 = &unk_26E24C920;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 1));
}

void sub_22E9D03C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  xgboost::MetaInfo::~MetaInfo(v20);
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::IteratorAdapter<void *,int ()(void *,int (*)(void *,XGBoostBatchCSR),void *),XGBoostBatchCSR>>(void *a1)
{
  *a1 = &unk_26E24C920;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 1));
}

void sub_22E9D0B0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  xgboost::MetaInfo::~MetaInfo(v20);
}

uint64_t xgboost::data::SimpleDMatrix::Info(xgboost::data::SimpleDMatrix *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

void xgboost::data::SimpleDMatrix::Slice()
{
}

void sub_22E9D11F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xgboost::DMatrix *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  int v34 = *(std::__shared_weak_count **)(v32 - 112);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v32 - 96);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::data::SimpleDMatrix::GetRowBatches(xgboost::data::SimpleDMatrix *this)
{
}

void xgboost::data::SimpleDMatrix::GetColumnBatches(xgboost::data::SimpleDMatrix *this)
{
  if (!*((void *)this + 29)) {
    operator new();
  }
  operator new();
}

void sub_22E9D14D8()
{
}

void xgboost::data::SimpleDMatrix::GetSortedColumnBatches(xgboost::data::SimpleDMatrix *this)
{
  if (!*((void *)this + 31)) {
    operator new();
  }
  operator new();
}

void sub_22E9D16D4()
{
}

void xgboost::data::SimpleDMatrix::GetEllpackBatches(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 264))
  {
    int v4 = *(_DWORD *)a2;
    goto LABEL_13;
  }
  int v4 = *(_DWORD *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  if (*(void *)(a2 + 8))
  {
    if (v4 != -1 || v5 != 0 || *(void *)(a2 + 16) != 0) {
      goto LABEL_21;
    }
  }
  else if (v4 != -1 || v5 != 0)
  {
LABEL_21:
    if (!*(unsigned char *)(a2 + 24)
      && *(_DWORD *)(a1 + 296) == v4
      && *(_DWORD *)(a1 + 300) == v5
      && *(double *)(a1 + 328) == *(double *)(a2 + 32))
    {
      goto LABEL_25;
    }
LABEL_13:
    int v10 = 0;
    int v11 = v4;
    if ((v4 & 0x80000000) == 0)
    {
      int v8 = *(_DWORD *)(a2 + 4);
      int v10 = 2;
      int v11 = v8;
      if (v8 < 2) {
        dmlc::LogCheckFormat<int,int>();
      }
      operator new();
    }
    dmlc::LogCheckFormat<int,int>();
  }
LABEL_25:
  operator new();
}

void sub_22E9D1A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13)
{
  uint64_t v14 = a10;
  a10 = 0;
  if (v14) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a10, v14);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::data::anonymous namespace'::CheckEmpty(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(_DWORD *)a1 != -1 || *(_DWORD *)(a1 + 4) != 0;
  if (*(void *)(a1 + 8) && *(void *)(a1 + 16)) {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    BOOL v5 = *(_DWORD *)a2 == -1 && *(_DWORD *)(a2 + 4) == 0;
    if (*(void *)(a2 + 8))
    {
      if (*(void *)(a2 + 16)) {
        BOOL v5 = 0;
      }
      if (v5) {
        goto LABEL_24;
      }
    }
    else if (v5)
    {
LABEL_24:
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
      uint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: r != BatchParam{}", 31);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Batch parameter is not initialized.", 35);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
  }
}

void sub_22E9D1BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::data::SimpleDMatrix::GetGradientIndex(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 280))
  {
LABEL_20:
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v4) + 4) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v12, (uint64_t)__p, 102, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Generating new Gradient Index.", 30);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v12);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    LODWORD(__p[0]) = *(_DWORD *)(a2 + 4);
    int v13 = 2;
    if (SLODWORD(__p[0]) < 2) {
      dmlc::LogCheckFormat<int,int>();
    }
    LODWORD(__p[0]) = *(_DWORD *)a2;
    int v13 = -1;
    if (LODWORD(__p[0]) != -1) {
      dmlc::LogCheckFormat<int,int>();
    }
    operator new();
  }
  v4.n128_u64[0] = *(void *)(a1 + 328);
  int v6 = *(_DWORD *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  if (*(void *)(a2 + 8))
  {
    if (v6 == -1 && v5 == 0 && *(void *)(a2 + 16) == 0) {
      goto LABEL_28;
    }
  }
  else if (v6 == -1 && v5 == 0)
  {
    goto LABEL_28;
  }
  if (*(unsigned char *)(a2 + 24)
    || *(_DWORD *)(a1 + 296) != v6
    || *(_DWORD *)(a1 + 300) != v5
    || v4.n128_f64[0] != *(double *)(a2 + 32))
  {
    goto LABEL_20;
  }
LABEL_28:
  operator new();
}

void sub_22E9D217C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<xgboost::GHistIndexMatrix>::reset[abi:ne180100]<xgboost::GHistIndexMatrix,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<xgboost::GHistIndexMatrix>::shared_ptr[abi:ne180100]<xgboost::GHistIndexMatrix,void>(&v2, a2);
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix(xgboost::data::SimpleDMatrix *this, dmlc::Stream *a2)
{
  *(void *)this = &unk_26E24C920;
  xgboost::MetaInfo::MetaInfo((xgboost::data::SimpleDMatrix *)((char *)this + 8));
}

void sub_22E9D2608()
{
  long long v2 = (std::__shared_weak_count *)v0[36];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  BOOL v3 = (std::__shared_weak_count *)v0[34];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  __n128 v4 = (std::__shared_weak_count *)v0[32];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v5 = (std::__shared_weak_count *)v0[30];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = (std::__shared_weak_count *)v0[28];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  xgboost::MetaInfo::~MetaInfo(v1);
}

uint64_t xgboost::data::SimpleDMatrix::SaveToLocalFile(uint64_t a1, char *a2)
{
  if (a2[23] >= 0) {
    BOOL v3 = (dmlc::Stream *)a2;
  }
  else {
    BOOL v3 = *(dmlc::Stream **)a2;
  }
  uint64_t v4 = dmlc::Stream::Create(v3, "w", 0);
  int v8 = -21759;
  (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v4 + 8))(v4, &v8, 4);
  xgboost::MetaInfo::SaveBinary(a1 + 8, v4);
  int v5 = **(void ***)(a1 + 216);
  uint64_t v9 = (uint64_t)(v5[1] - *v5) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v4 + 8))(v4, &v9, 8);
  if (v9) {
    (*(void (**)(uint64_t, void, void))(*(void *)v4 + 8))(v4, *v5, v5[1] - *v5);
  }
  int v6 = *(void **)(*(void *)(a1 + 216) + 8);
  uint64_t v9 = (uint64_t)(v6[1] - *v6) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v4 + 8))(v4, &v9, 8);
  if (v9) {
    (*(void (**)(uint64_t, void, void))(*(void *)v4 + 8))(v4, *v6, v6[1] - *v6);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_22E9D2878(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::RecordBatchesIterAdapter>(void *a1)
{
  *a1 = &unk_26E24C920;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 1));
}

void sub_22E9D3488(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xgboost::MetaInfo *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  v28 = (std::__shared_weak_count *)a22[36];
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  int v29 = (std::__shared_weak_count *)a22[34];
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  uint64_t v30 = (std::__shared_weak_count *)a22[32];
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  uint64_t v31 = (std::__shared_weak_count *)a22[30];
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v32 = (std::__shared_weak_count *)a22[28];
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  xgboost::MetaInfo::~MetaInfo(a10);
}

uint64_t xgboost::data::SimpleDMatrix::Ctx(xgboost::data::SimpleDMatrix *this)
{
  return (uint64_t)this + 336;
}

uint64_t xgboost::data::SimpleDMatrix::SingleColBlock(xgboost::data::SimpleDMatrix *this)
{
  return 1;
}

void xgboost::data::SimpleDMatrix::~SimpleDMatrix(xgboost::data::SimpleDMatrix *this)
{
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *(void *)this = &unk_26E24C920;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  xgboost::MetaInfo::~MetaInfo((xgboost::data::SimpleDMatrix *)((char *)this + 8));
}

BOOL xgboost::data::SimpleDMatrix::EllpackExists(xgboost::data::SimpleDMatrix *this)
{
  return *((void *)this + 33) != 0;
}

uint64_t xgboost::data::SimpleDMatrix::SparsePageExists(xgboost::data::SimpleDMatrix *this)
{
  return 1;
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<signed char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24C9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<signed char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24C9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<signed char>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void xgboost::data::PrimitiveColumn<signed char>::~PrimitiveColumn()
{
}

uint64_t xgboost::data::PrimitiveColumn<signed char>::GetElement@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  uint64_t v6 = a1[1];
  uint64_t result = (*(uint64_t (**)(void *, unint64_t))(*a1 + 24))(a1, a2);
  if (result) {
    float v8 = (float)*(char *)(a1[5] + a2);
  }
  else {
    float v8 = NAN;
  }
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_22E9D37C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL xgboost::data::PrimitiveColumn<signed char>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)))
    && ((int v3 = *(char *)(*(void *)(a1 + 40) + a2),
         (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53 > 0x3FE)
      ? (BOOL v4 = COERCE__INT64((double)v3) == 0)
      : (BOOL v4 = 1),
        v4))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<signed char>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_", 19);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  std::vector<float>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(char **)(a1 + 40);
    uint64_t v7 = *a2;
    do
    {
      int v8 = *v6++;
      float result = (float)v8;
      *v7++ = (float)v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_22E9D3904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *xgboost::data::PrimitiveColumn<signed char>::AsUint64Vector@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_", 19);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  float result = std::vector<unsigned long long>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(char **)(a1 + 40);
    uint64_t v7 = (void *)*a2;
    do
    {
      uint64_t v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_22E9D39D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CA80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CA80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void xgboost::data::PrimitiveColumn<unsigned char>::~PrimitiveColumn()
{
}

uint64_t xgboost::data::PrimitiveColumn<unsigned char>::GetElement@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  uint64_t v6 = a1[1];
  uint64_t result = (*(uint64_t (**)(void *, unint64_t))(*a1 + 24))(a1, a2);
  if (result)
  {
    LOBYTE(v8) = *(unsigned char *)(a1[5] + a2);
    float v9 = (float)v8;
  }
  else
  {
    float v9 = NAN;
  }
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v9;
  return result;
}

void sub_22E9D3B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL xgboost::data::PrimitiveColumn<unsigned char>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)))
    && ((unsigned int v3 = *(unsigned __int8 *)(*(void *)(a1 + 40) + a2),
         unint64_t v4 = (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53,
         COERCE__INT64((double)v3) >= 0)
      ? (BOOL v5 = v4 > 0x3FE)
      : (BOOL v5 = 1),
        v5 ? (BOOL v6 = COERCE__INT64((double)v3) == 0) : (BOOL v6 = 1),
        v6))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<unsigned char>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_", 19);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  std::vector<float>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    BOOL v6 = *(unsigned __int8 **)(a1 + 40);
    uint64_t v7 = *a2;
    do
    {
      unsigned int v8 = *v6++;
      float result = (float)v8;
      *v7++ = (float)v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_22E9D3CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *xgboost::data::PrimitiveColumn<unsigned char>::AsUint64Vector@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_", 19);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  float result = std::vector<unsigned long long>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    BOOL v6 = *(unsigned __int8 **)(a1 + 40);
    uint64_t v7 = (void *)*a2;
    do
    {
      unsigned int v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_22E9D3DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<short>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CB28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<short>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CB28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<short>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void xgboost::data::PrimitiveColumn<short>::~PrimitiveColumn()
{
}

uint64_t xgboost::data::PrimitiveColumn<short>::GetElement@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  uint64_t v6 = a1[1];
  uint64_t result = (*(uint64_t (**)(void *, unint64_t))(*a1 + 24))(a1, a2);
  if (result) {
    float v8 = (float)*(__int16 *)(a1[5] + 2 * a2);
  }
  else {
    float v8 = NAN;
  }
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_22E9D3F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL xgboost::data::PrimitiveColumn<short>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)))
    && ((int v3 = *(__int16 *)(*(void *)(a1 + 40) + 2 * a2),
         (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53 > 0x3FE)
      ? (BOOL v4 = COERCE__INT64((double)v3) == 0)
      : (BOOL v4 = 1),
        v4))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<short>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(__int16 **)(a1 + 40);
    uint64_t v7 = *a2;
    uint64_t v8 = 2 * v5;
    do
    {
      int v9 = *v6++;
      float result = (float)v9;
      *v7++ = (float)v9;
      v8 -= 2;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D40BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *xgboost::data::PrimitiveColumn<short>::AsUint64Vector@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  float result = std::vector<unsigned long long>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(__int16 **)(a1 + 40);
    uint64_t v7 = (void *)*a2;
    uint64_t v8 = 2 * v5;
    do
    {
      uint64_t v9 = *v6++;
      *v7++ = v9;
      v8 -= 2;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D4194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned short>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CBD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned short>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CBD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned short>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void xgboost::data::PrimitiveColumn<unsigned short>::~PrimitiveColumn()
{
}

uint64_t xgboost::data::PrimitiveColumn<unsigned short>::GetElement@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  uint64_t v6 = a1[1];
  uint64_t result = (*(uint64_t (**)(void *, unint64_t))(*a1 + 24))(a1, a2);
  if (result)
  {
    LOWORD(v8) = *(_WORD *)(a1[5] + 2 * a2);
    float v9 = (float)v8;
  }
  else
  {
    float v9 = NAN;
  }
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v9;
  return result;
}

void sub_22E9D4358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL xgboost::data::PrimitiveColumn<unsigned short>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)))
    && ((unsigned int v3 = *(unsigned __int16 *)(*(void *)(a1 + 40) + 2 * a2),
         unint64_t v4 = (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53,
         COERCE__INT64((double)v3) >= 0)
      ? (BOOL v5 = v4 > 0x3FE)
      : (BOOL v5 = 1),
        v5 ? (BOOL v6 = COERCE__INT64((double)v3) == 0) : (BOOL v6 = 1),
        v6))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<unsigned short>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    BOOL v6 = *(unsigned __int16 **)(a1 + 40);
    uint64_t v7 = *a2;
    uint64_t v8 = 2 * v5;
    do
    {
      unsigned int v9 = *v6++;
      float result = (float)v9;
      *v7++ = (float)v9;
      v8 -= 2;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D44A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *xgboost::data::PrimitiveColumn<unsigned short>::AsUint64Vector@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  float result = std::vector<unsigned long long>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    BOOL v6 = *(unsigned __int16 **)(a1 + 40);
    uint64_t v7 = (void *)*a2;
    uint64_t v8 = 2 * v5;
    do
    {
      unsigned int v9 = *v6++;
      *v7++ = v9;
      v8 -= 2;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D4578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CC78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CC78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void xgboost::data::PrimitiveColumn<int>::~PrimitiveColumn()
{
}

uint64_t xgboost::data::PrimitiveColumn<int>::GetElement@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  uint64_t v6 = a1[1];
  uint64_t result = (*(uint64_t (**)(void *, unint64_t))(*a1 + 24))(a1, a2);
  if (result) {
    float v8 = (float)*(int *)(a1[5] + 4 * a2);
  }
  else {
    float v8 = NAN;
  }
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_22E9D473C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL xgboost::data::PrimitiveColumn<int>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)))
    && ((int v3 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * a2),
         (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53 > 0x3FE)
      ? (BOOL v4 = COERCE__INT64((double)v3) == 0)
      : (BOOL v4 = 1),
        v4))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<int>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(int **)(a1 + 40);
    uint64_t v7 = *a2;
    uint64_t v8 = 4 * v5;
    do
    {
      int v9 = *v6++;
      float result = (float)v9;
      *v7++ = (float)v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D487C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *xgboost::data::PrimitiveColumn<int>::AsUint64Vector@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  float result = std::vector<unsigned long long>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(int **)(a1 + 40);
    uint64_t v7 = (void *)*a2;
    uint64_t v8 = 4 * v5;
    do
    {
      uint64_t v9 = *v6++;
      *v7++ = v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D4954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CD20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CD20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void xgboost::data::PrimitiveColumn<unsigned int>::~PrimitiveColumn()
{
}

uint64_t xgboost::data::PrimitiveColumn<unsigned int>::GetElement@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  uint64_t v6 = a1[1];
  uint64_t result = (*(uint64_t (**)(void *, unint64_t))(*a1 + 24))(a1, a2);
  if (result) {
    float v8 = (float)*(unsigned int *)(a1[5] + 4 * a2);
  }
  else {
    float v8 = NAN;
  }
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_22E9D4B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL xgboost::data::PrimitiveColumn<unsigned int>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)))
    && ((unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * a2),
         unint64_t v4 = (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53,
         COERCE__INT64((double)v3) >= 0)
      ? (BOOL v5 = v4 > 0x3FE)
      : (BOOL v5 = 1),
        v5 ? (BOOL v6 = COERCE__INT64((double)v3) == 0) : (BOOL v6 = 1),
        v6))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<unsigned int>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    BOOL v6 = *(unsigned int **)(a1 + 40);
    uint64_t v7 = *a2;
    uint64_t v8 = 4 * v5;
    do
    {
      unsigned int v9 = *v6++;
      float result = (float)v9;
      *v7++ = (float)v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D4C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *xgboost::data::PrimitiveColumn<unsigned int>::AsUint64Vector@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  float result = std::vector<unsigned long long>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    BOOL v6 = *(unsigned int **)(a1 + 40);
    uint64_t v7 = (void *)*a2;
    uint64_t v8 = 4 * v5;
    do
    {
      unsigned int v9 = *v6++;
      *v7++ = v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D4D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CDC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CDC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void xgboost::data::PrimitiveColumn<long long>::~PrimitiveColumn()
{
}

uint64_t xgboost::data::PrimitiveColumn<long long>::GetElement@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  uint64_t v6 = a1[1];
  uint64_t result = (*(uint64_t (**)(void *, unint64_t))(*a1 + 24))(a1, a2);
  if (result) {
    float v8 = (float)*(uint64_t *)(a1[5] + 8 * a2);
  }
  else {
    float v8 = NAN;
  }
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_22E9D4EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL xgboost::data::PrimitiveColumn<long long>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)))
    && ((uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8 * a2),
         (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53 > 0x3FE)
      ? (BOOL v4 = COERCE__INT64((double)v3) == 0)
      : (BOOL v4 = 1),
        v4))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<long long>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 40);
    uint64_t v7 = *a2;
    uint64_t v8 = 8 * v5;
    do
    {
      uint64_t v9 = *v6++;
      float result = (float)v9;
      *v7++ = (float)v9;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D503C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *xgboost::data::PrimitiveColumn<long long>::AsUint64Vector@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  float result = std::vector<unsigned long long>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 40);
    uint64_t v7 = (void *)*a2;
    uint64_t v8 = 8 * v5;
    do
    {
      uint64_t v9 = *v6++;
      *v7++ = v9;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D5114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CE70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CE70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void xgboost::data::PrimitiveColumn<unsigned long long>::~PrimitiveColumn()
{
}

uint64_t xgboost::data::PrimitiveColumn<unsigned long long>::GetElement@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  uint64_t v6 = a1[1];
  uint64_t result = (*(uint64_t (**)(void *, unint64_t))(*a1 + 24))(a1, a2);
  if (result) {
    float v8 = (float)*(unint64_t *)(a1[5] + 8 * a2);
  }
  else {
    float v8 = NAN;
  }
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_22E9D52D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL xgboost::data::PrimitiveColumn<unsigned long long>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)))
    && ((unint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8 * a2),
         unint64_t v4 = (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53,
         COERCE__INT64((double)v3) >= 0)
      ? (BOOL v5 = v4 > 0x3FE)
      : (BOOL v5 = 1),
        v5 ? (BOOL v6 = COERCE__INT64((double)v3) == 0) : (BOOL v6 = 1),
        v6))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<unsigned long long>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    BOOL v6 = *(unint64_t **)(a1 + 40);
    uint64_t v7 = *a2;
    uint64_t v8 = 8 * v5;
    do
    {
      unint64_t v9 = *v6++;
      float result = (float)v9;
      *v7++ = (float)v9;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D5420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *xgboost::data::PrimitiveColumn<unsigned long long>::AsUint64Vector@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  float result = std::vector<unsigned long long>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    BOOL v6 = *(uint64_t **)(a1 + 40);
    uint64_t v7 = (void *)*a2;
    uint64_t v8 = 8 * v5;
    do
    {
      uint64_t v9 = *v6++;
      *v7++ = v9;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D54F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CF18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CF18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void xgboost::data::PrimitiveColumn<float>::~PrimitiveColumn()
{
}

uint64_t xgboost::data::PrimitiveColumn<float>::GetElement@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  uint64_t v6 = a1[1];
  uint64_t result = (*(uint64_t (**)(void *, unint64_t))(*a1 + 24))(a1, a2);
  if (result) {
    int v8 = *(_DWORD *)(a1[5] + 4 * a2);
  }
  else {
    int v8 = 2143289344;
  }
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

void sub_22E9D56B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL xgboost::data::PrimitiveColumn<float>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)))
    && ((float v3 = *(float *)(*(void *)(a1 + 40) + 4 * a2),
         double v4 = fabs(v3),
         (unint64_t)(*(void *)&v4 - 0x10000000000000) >> 53 > 0x3FE)
      ? (BOOL v5 = *(void *)&v4 == 0)
      : (BOOL v5 = 1),
        v5))
  {
    return v3 != *(float *)(a1 + 48);
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<float>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(float **)(a1 + 40);
    uint64_t v7 = *a2;
    uint64_t v8 = 4 * v5;
    do
    {
      float v9 = *v6++;
      float result = v9;
      *v7++ = v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D57F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

float xgboost::data::PrimitiveColumn<float>::AsUint64Vector@<S0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<unsigned long long>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(float **)(a1 + 40);
    uint64_t v7 = (void *)*a2;
    uint64_t v8 = 4 * v5;
    do
    {
      float v9 = *v6++;
      float result = v9;
      *v7++ = (unint64_t)v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D58CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CFC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24CFC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void xgboost::data::PrimitiveColumn<double>::~PrimitiveColumn()
{
}

uint64_t xgboost::data::PrimitiveColumn<double>::GetElement@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  uint64_t v6 = a1[1];
  uint64_t result = (*(uint64_t (**)(void *, unint64_t))(*a1 + 24))(a1, a2);
  if (result) {
    float v8 = *(double *)(a1[5] + 8 * a2);
  }
  else {
    float v8 = NAN;
  }
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_22E9D5A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL xgboost::data::PrimitiveColumn<double>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)) & 1) == 0
    || (*(void *)(*(void *)(a1 + 40) + 8 * a2) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0;
  }
  float v3 = *(double *)(*(void *)(a1 + 40) + 8 * a2);
  return *(float *)(a1 + 48) != v3;
}

float xgboost::data::PrimitiveColumn<double>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(double **)(a1 + 40);
    uint64_t v7 = *a2;
    uint64_t v8 = 8 * v5;
    do
    {
      double v9 = *v6++;
      float result = v9;
      *v7++ = result;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D5BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

double xgboost::data::PrimitiveColumn<double>::AsUint64Vector@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    char v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<unsigned long long>::vector(a2, *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(double **)(a1 + 40);
    uint64_t v7 = (void *)*a2;
    uint64_t v8 = 8 * v5;
    do
    {
      double v9 = *v6++;
      double result = v9;
      *v7++ = (unint64_t)v9;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_22E9D5C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *xgboost::data::SimpleBatchIteratorImpl<xgboost::SparsePage>::~SimpleBatchIteratorImpl(void *a1)
{
  *a1 = &unk_26E24D068;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void xgboost::data::SimpleBatchIteratorImpl<xgboost::SparsePage>::~SimpleBatchIteratorImpl(void *a1)
{
  *a1 = &unk_26E24D068;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::SparsePage>::operator*(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./simple_batch_iterator.h");
    double v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(void *)(a1 + 8);
  }
  return result;
}

void sub_22E9D5E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::SparsePage>::operator++(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

BOOL xgboost::data::SimpleBatchIteratorImpl<xgboost::SparsePage>::AtEnd(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::SparsePage>::Page@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *xgboost::data::SimpleBatchIteratorImpl<xgboost::CSCPage>::~SimpleBatchIteratorImpl(void *a1)
{
  *a1 = &unk_26E24D0C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void xgboost::data::SimpleBatchIteratorImpl<xgboost::CSCPage>::~SimpleBatchIteratorImpl(void *a1)
{
  *a1 = &unk_26E24D0C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::CSCPage>::operator*(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./simple_batch_iterator.h");
    double v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(void *)(a1 + 8);
  }
  return result;
}

void sub_22E9D6030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::CSCPage>::operator++(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

BOOL xgboost::data::SimpleBatchIteratorImpl<xgboost::CSCPage>::AtEnd(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::CSCPage>::Page@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *xgboost::data::SimpleBatchIteratorImpl<xgboost::SortedCSCPage>::~SimpleBatchIteratorImpl(void *a1)
{
  *a1 = &unk_26E24D118;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void xgboost::data::SimpleBatchIteratorImpl<xgboost::SortedCSCPage>::~SimpleBatchIteratorImpl(void *a1)
{
  *a1 = &unk_26E24D118;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::SortedCSCPage>::operator*(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./simple_batch_iterator.h");
    double v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(void *)(a1 + 8);
  }
  return result;
}

void sub_22E9D61E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::SortedCSCPage>::operator++(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

BOOL xgboost::data::SimpleBatchIteratorImpl<xgboost::SortedCSCPage>::AtEnd(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::SortedCSCPage>::Page@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__shared_ptr_pointer<xgboost::EllpackPage *,std::shared_ptr<xgboost::EllpackPage>::__shared_ptr_default_delete<xgboost::EllpackPage,xgboost::EllpackPage>,std::allocator<xgboost::EllpackPage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

xgboost::EllpackPage *std::__shared_ptr_pointer<xgboost::EllpackPage *,std::shared_ptr<xgboost::EllpackPage>::__shared_ptr_default_delete<xgboost::EllpackPage,xgboost::EllpackPage>,std::allocator<xgboost::EllpackPage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(xgboost::EllpackPage **)(a1 + 24);
  if (result)
  {
    xgboost::EllpackPage::~EllpackPage(result);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::EllpackPage *,std::shared_ptr<xgboost::EllpackPage>::__shared_ptr_default_delete<xgboost::EllpackPage,xgboost::EllpackPage>,std::allocator<xgboost::EllpackPage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<xgboost::GHistIndexMatrix>::shared_ptr[abi:ne180100]<xgboost::GHistIndexMatrix,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22E9D6394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<xgboost::GHistIndexMatrix>::reset[abi:ne180100]((xgboost::GHistIndexMatrix **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<xgboost::GHistIndexMatrix *,std::shared_ptr<xgboost::GHistIndexMatrix>::__shared_ptr_default_delete<xgboost::GHistIndexMatrix,xgboost::GHistIndexMatrix>,std::allocator<xgboost::GHistIndexMatrix>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

xgboost::GHistIndexMatrix *std::__shared_ptr_pointer<xgboost::GHistIndexMatrix *,std::shared_ptr<xgboost::GHistIndexMatrix>::__shared_ptr_default_delete<xgboost::GHistIndexMatrix,xgboost::GHistIndexMatrix>,std::allocator<xgboost::GHistIndexMatrix>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(xgboost::GHistIndexMatrix **)(a1 + 24);
  if (result) {
    xgboost::GHistIndexMatrix::~GHistIndexMatrix(result);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::GHistIndexMatrix *,std::shared_ptr<xgboost::GHistIndexMatrix>::__shared_ptr_default_delete<xgboost::GHistIndexMatrix,xgboost::GHistIndexMatrix>,std::allocator<xgboost::GHistIndexMatrix>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

xgboost::GHistIndexMatrix *std::unique_ptr<xgboost::GHistIndexMatrix>::reset[abi:ne180100](xgboost::GHistIndexMatrix **a1, xgboost::GHistIndexMatrix *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result) {
    xgboost::GHistIndexMatrix::~GHistIndexMatrix(result);
  }
  return result;
}

void *xgboost::data::SimpleBatchIteratorImpl<xgboost::GHistIndexMatrix>::~SimpleBatchIteratorImpl(void *a1)
{
  *a1 = &unk_26E24D260;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void xgboost::data::SimpleBatchIteratorImpl<xgboost::GHistIndexMatrix>::~SimpleBatchIteratorImpl(void *a1)
{
  *a1 = &unk_26E24D260;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::GHistIndexMatrix>::operator*(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./simple_batch_iterator.h");
    double v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(void *)(a1 + 8);
  }
  return result;
}

void sub_22E9D65FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::GHistIndexMatrix>::operator++(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

BOOL xgboost::data::SimpleBatchIteratorImpl<xgboost::GHistIndexMatrix>::AtEnd(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::GHistIndexMatrix>::Page@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::vector<unsigned long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    double v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22E9D66D0(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::Registry<xgboost::TreeGenReg>::~Registry(uint64_t a1)
{
  float v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 127) < 0) {
          operator delete(*(void **)(v5 + 104));
        }
        std::__function::__value_func<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::~__value_func[abi:ne180100]((void *)(v5 + 72));
        double v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x1032C40EA5FD255);
        float v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  char v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

void xgboost::RegTree::LoadCategoricalSplit<true>(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories_segments");
  unint64_t v4 = (_DWORD **)(*(uint64_t (**)(void, std::vector<unsigned int> *))(*(void *)*a2 + 24))(*a2, &__p);
  uint64_t v32 = xgboost::Cast<xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10> const,xgboost::Value>(*v4);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories_sizes");
  uint64_t v5 = (_DWORD **)(*(uint64_t (**)(void, std::vector<unsigned int> *))(*(void *)*a2 + 24))(*a2, &__p);
  uint64_t v31 = xgboost::Cast<xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10> const,xgboost::Value>(*v5);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories_nodes");
  char v6 = (_DWORD **)(*(uint64_t (**)(void, std::vector<unsigned int> *))(*(void *)*a2 + 24))(*a2, &__p);
  uint64_t v7 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v6);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories");
  uint64_t v8 = (_DWORD **)(*(uint64_t (**)(void, std::vector<unsigned int> *))(*(void *)*a2 + 24))(*a2, &__p);
  double v9 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v8);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  char v10 = (unsigned int *)v7[2];
  if (v10 == (unsigned int *)v7[3]) {
    uint64_t v11 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v11 = *v10;
  }
  int v12 = *(_DWORD *)(a1 + 12);
  if (v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    while (v13 != v11)
    {
      uint64_t v20 = (uint64_t *)(*(void *)(a1 + 280) + 16 * v13);
      *uint64_t v20 = (uint64_t)(v9[3] - v9[2]) >> 2;
      v20[1] = 0;
LABEL_38:
      if (++v13 >= v12) {
        return;
      }
    }
    uint64_t v15 = *(void *)(v32[2] + 8 * v14);
    uint64_t v16 = *(void *)(v31[2] + 8 * v14);
    uint64_t v17 = v16 + v15;
    *(void *)__x = v16;
    unsigned int v35 = 0;
    if (!v16) {
      dmlc::LogCheckFormat<long long,int>();
    }
    if (v16 < 1)
    {
      __x[0] = 0x80000000;
      unsigned int v35 = 0x80000000;
LABEL_26:
      dmlc::LogCheckFormat<int,int>();
    }
    signed int v18 = 0x80000000;
    uint64_t v19 = v15;
    do
    {
      if (v18 <= *(_DWORD *)(v9[2] + 4 * v19)) {
        signed int v18 = *(_DWORD *)(v9[2] + 4 * v19);
      }
      ++v19;
    }
    while (v19 < v17);
    __x[0] = 0x80000000;
    unsigned int v35 = v18;
    if (v18 == 0x80000000) {
      goto LABEL_26;
    }
    __x[0] = 0;
    std::vector<unsigned int>::vector(&__p, vcvtpd_u64_f64((double)(unint64_t)(v18 + 1) * 0.03125), __x);
    std::vector<unsigned int>::pointer begin = __p.__begin_;
    unint64_t v22 = __p.__end_ - __p.__begin_;
    uint64_t v23 = v9[2];
    do
    {
      unint64_t v24 = *(int *)(v23 + 4 * v15);
      if (v22 <= v24 >> 5) {
        std::terminate();
      }
      begin[v24 >> 5] |= 1 << ~(_BYTE)v24;
      ++v15;
    }
    while (v15 < v17);
    uint64_t v25 = *(void *)(a1 + 264) - *(void *)(a1 + 256);
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 256), v22 + (v25 >> 2));
    uint64_t v26 = v25 >> 2;
    v27 = __p.__begin_;
    if (__p.__end_ == __p.__begin_)
    {
      std::vector<unsigned int>::pointer end = __p.__begin_;
    }
    else
    {
      memmove((void *)(*(void *)(a1 + 256) + 4 * v26), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
      v27 = __p.__begin_;
      std::vector<unsigned int>::pointer end = __p.__end_;
    }
    int v29 = (uint64_t *)(*(void *)(a1 + 280) + 16 * v13);
    *int v29 = v26;
    v29[1] = end - v27;
    ++v14;
    uint64_t v30 = v7[2];
    if (v14 == (v7[3] - v30) >> 2)
    {
      uint64_t v11 = 0xFFFFFFFFLL;
      if (!v27) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v11 = *(unsigned int *)(v30 + 4 * v14);
      if (!v27)
      {
LABEL_37:
        int v12 = *(_DWORD *)(a1 + 12);
        goto LABEL_38;
      }
    }
    __p.__end_ = v27;
    operator delete(v27);
    goto LABEL_37;
  }
}

void sub_22E9D6CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::RegTree::LoadCategoricalSplit<false>(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories_segments");
  unint64_t v4 = (_DWORD **)(*(uint64_t (**)(void, std::vector<unsigned int> *))(*(void *)*a2 + 24))(*a2, &__p);
  uint64_t v31 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v4);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories_sizes");
  uint64_t v5 = (_DWORD **)(*(uint64_t (**)(void, std::vector<unsigned int> *))(*(void *)*a2 + 24))(*a2, &__p);
  uint64_t v30 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v5);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories_nodes");
  char v6 = (_DWORD **)(*(uint64_t (**)(void, std::vector<unsigned int> *))(*(void *)*a2 + 24))(*a2, &__p);
  uint64_t v32 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v6);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories");
  uint64_t v7 = (_DWORD **)(*(uint64_t (**)(void, std::vector<unsigned int> *))(*(void *)*a2 + 24))(*a2, &__p);
  uint64_t v8 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v7);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  double v9 = (_DWORD **)v32[2];
  if (v9 == (_DWORD **)v32[3]) {
    uint64_t v10 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v10 = *((unsigned int *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*v9) + 4);
  }
  int v11 = *(_DWORD *)(a1 + 12);
  if (v11 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    v33 = (std::vector<unsigned int> *)(a1 + 256);
    while (v12 != v10)
    {
      uint64_t v20 = (uint64_t *)(*(void *)(a1 + 280) + 16 * v12);
      *uint64_t v20 = (uint64_t)(v8[3] - v8[2]) >> 3;
      v20[1] = 0;
LABEL_36:
      if (++v12 >= v11) {
        return;
      }
    }
    uint64_t v14 = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v31[2] + 8 * v13)) + 2);
    uint64_t v15 = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v30[2] + 8 * v13)) + 2);
    uint64_t v16 = v15 + v14;
    *(void *)__x = v15;
    unsigned int v36 = 0;
    if (!v15) {
      dmlc::LogCheckFormat<long long,int>();
    }
    if (v15 < 1)
    {
      __x[0] = 0x80000000;
      unsigned int v36 = 0x80000000;
LABEL_26:
      dmlc::LogCheckFormat<int,int>();
    }
    signed int v17 = 0x80000000;
    uint64_t v18 = v14;
    do
    {
      signed int v19 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v8[2] + 8 * v18)) + 4);
      if (v17 <= v19) {
        signed int v17 = v19;
      }
      ++v18;
    }
    while (v18 < v16);
    __x[0] = 0x80000000;
    unsigned int v36 = v17;
    if (v17 == 0x80000000) {
      goto LABEL_26;
    }
    __x[0] = 0;
    std::vector<unsigned int>::vector(&__p, vcvtpd_u64_f64((double)(unint64_t)(v17 + 1) * 0.03125), __x);
    std::vector<unsigned int>::pointer begin = __p.__begin_;
    unint64_t v22 = __p.__end_ - __p.__begin_;
    do
    {
      uint64_t v23 = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v8[2] + 8 * v14)) + 2);
      if (v22 <= (unint64_t)(int)v23 >> 5) {
        std::terminate();
      }
      begin[(unint64_t)(int)v23 >> 5] |= 1 << ~(_BYTE)v23;
      ++v14;
    }
    while (v14 < v16);
    uint64_t v24 = *(void *)(a1 + 264) - *(void *)(a1 + 256);
    std::vector<unsigned int>::resize(v33, __p.__end_ - __p.__begin_ + (v24 >> 2));
    uint64_t v25 = v24 >> 2;
    uint64_t v26 = __p.__begin_;
    if (__p.__end_ == __p.__begin_)
    {
      std::vector<unsigned int>::pointer end = __p.__begin_;
    }
    else
    {
      memmove(&v33->__begin_[v25], __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
      uint64_t v26 = __p.__begin_;
      std::vector<unsigned int>::pointer end = __p.__end_;
    }
    v28 = (uint64_t *)(*(void *)(a1 + 280) + 16 * v12);
    uint64_t *v28 = v25;
    v28[1] = end - v26;
    ++v13;
    uint64_t v29 = v32[2];
    if (v13 == (v32[3] - v29) >> 3)
    {
      uint64_t v10 = 0xFFFFFFFFLL;
      if (!v26)
      {
LABEL_35:
        int v11 = *(_DWORD *)(a1 + 12);
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v10 = *((unsigned int *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v29 + 8 * v13))
            + 4);
      uint64_t v26 = __p.__begin_;
      if (!__p.__begin_) {
        goto LABEL_35;
      }
    }
    __p.__end_ = v26;
    operator delete(v26);
    goto LABEL_35;
  }
}

void sub_22E9D727C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::TreeGenerator::Create(uint64_t a1, uint64_t a2, std::string::value_type a3)
{
  std::string::size_type v6 = std::string::find((const std::string *)a1, 58, 0);
  memset(&__p, 0, sizeof(__p));
  memset(&i, 0, sizeof(i));
  if (v6 == -1)
  {
    std::string::operator=(&__p, (const std::string *)a1);
  }
  else
  {
    std::string::size_type v7 = v6;
    std::string::basic_string(&v24, (const std::string *)a1, 0, v6, (std::allocator<char> *)&v27);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v24;
    uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a1 + 8);
    }
    std::string::basic_string(&v24, (const std::string *)a1, v7 + 1, v8 + ~v7, (std::allocator<char> *)&v27);
    if (SHIBYTE(i.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(i.__r_.__value_.__l.__data_);
    }
    for (std::string i = v24; ; std::string::replace(&i, v9, 1uLL, "\""))
    {
      std::string::size_type v9 = std::string::find(&i, 39, 0);
      if (v9 == -1) {
        break;
      }
    }
  }
  dmlc::Registry<xgboost::TreeGenReg>::Get();
  dmlc::Registry<xgboost::TreeGenReg>::Get();
  uint64_t v10 = qword_26AD724C0;
  if (!qword_26AD724C0) {
    goto LABEL_20;
  }
  int v11 = &qword_26AD724C0;
  do
  {
    BOOL v12 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD724C8, (const void **)(v10 + 32), (const void **)&__p.__r_.__value_.__l.__data_);
    uint64_t v13 = (uint64_t *)(v10 + 8);
    if (!v12)
    {
      uint64_t v13 = (uint64_t *)v10;
      int v11 = (uint64_t *)v10;
    }
    uint64_t v10 = *v13;
  }
  while (*v13);
  if (v11 == &qword_26AD724C0
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD724C8, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)v11 + 4)|| (uint64_t v14 = v11[7]) == 0)
  {
LABEL_20:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
    uint64_t v16 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    signed int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Unknown Model Builder:", 22);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_p, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
    uint64_t v14 = 0;
  }
  if (SHIBYTE(i.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v23, i.__r_.__value_.__l.__data_, i.__r_.__value_.__l.__size_);
  }
  else {
    std::string v23 = i;
  }
  uint64_t v20 = *(void *)(v14 + 96);
  v24.__r_.__value_.__s.__data_[0] = a3;
  if (!v20) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *, std::string *))(*(void *)v20 + 48))(v20, a2, &v23, &v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(i.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(i.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v21;
}

void sub_22E9D75AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::GetSplitCategories(xgboost *this@<X0>, const xgboost::RegTree *a2@<X1>, char **a3@<X8>)
{
  unint64_t v4 = *((void *)this + 29);
  v21[2] = *((void *)this + 30) - v4;
  v21[3] = v4;
  uint64_t v5 = *((void *)this + 32);
  v22[0] = (*((void *)this + 33) - v5) >> 2;
  v22[1] = v5;
  uint64_t v6 = *((void *)this + 35);
  unint64_t v23 = (*((void *)this + 36) - v6) >> 4;
  uint64_t v24 = v6;
  if (v23 <= (int)a2) {
    goto LABEL_25;
  }
  xgboost::common::Span<float,18446744073709551615ul>::subspan(v22, *(void *)(v6 + 16 * (int)a2), *(void *)(v6 + 16 * (int)a2 + 8), v21);
  unint64_t v7 = v21[0];
  unint64_t v8 = v21[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (32 * v7)
  {
    std::string::size_type v9 = 0;
    unint64_t v10 = 0;
    int v11 = a3 + 2;
    while (v10 >> 5 < v7)
    {
      if ((*(_DWORD *)(v8 + 4 * (v10 >> 5)) & (1 << ~(_BYTE)v10)) != 0)
      {
        if ((unint64_t)v9 >= *v11)
        {
          uint64_t v13 = *a3;
          uint64_t v14 = (v9 - *a3) >> 2;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = *v11 - (void)v13;
          if (v16 >> 1 > v15) {
            unint64_t v15 = v16 >> 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v17);
            uint64_t v13 = *a3;
            std::string::size_type v9 = a3[1];
          }
          else
          {
            uint64_t v18 = 0;
          }
          signed int v19 = &v18[4 * v14];
          *(_DWORD *)signed int v19 = v10;
          BOOL v12 = v19 + 4;
          while (v9 != v13)
          {
            int v20 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          *a3 = v19;
          a3[1] = v12;
          a3[2] = &v18[4 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(_DWORD *)std::string::size_type v9 = v10;
          BOOL v12 = v9 + 4;
        }
        a3[1] = v12;
        std::string::size_type v9 = v12;
      }
      if (++v10 == 32 * v7) {
        return;
      }
    }
LABEL_25:
    std::terminate();
  }
}

void sub_22E9D77B8(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::PrintCatsAsSet(void *a1)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"{", 1);
  if (a1[1] != *a1)
  {
    unint64_t v2 = 0;
    do
    {
      std::ostream::operator<<();
      unint64_t v3 = (uint64_t)(a1[1] - *a1) >> 2;
      if (v2 != v3 - 1)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
        unint64_t v3 = (uint64_t)(a1[1] - *a1) >> 2;
      }
      ++v2;
    }
    while (v2 < v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"}", 1);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x230FA8020](&v9);
}

void sub_22E9D79CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::RegTree::DumpModel(uint64_t a1, uint64_t a2, std::string::value_type a3, uint64_t a4)
{
  uint64_t v5 = xgboost::TreeGenerator::Create(a4, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a1);
  std::stringbuf::str();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 80);

  return v6(v5);
}

void sub_22E9D7A88(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 80))(v1);
  _Unwind_Resume(a1);
}

uint64_t xgboost::RegTree::Equal(xgboost::RegTree *this, const xgboost::RegTree *a2)
{
  if (*((_DWORD *)this + 3) + ~*((_DWORD *)this + 4) != *((_DWORD *)a2 + 3) + ~*((_DWORD *)a2 + 4)) {
    return 0;
  }
  long long v23 = 0u;
  memset(v22, 0, sizeof(v22));
  std::deque<int>::push_back(v22, &xgboost::RegTree::kRoot);
  uint64_t v4 = *((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    while (1)
    {
      uint64_t v5 = v4 - 1;
      unint64_t v6 = *(int *)(*(void *)(*((void *)&v22[0] + 1) + (((unint64_t)(v23 + v5) >> 7) & 0x1FFFFFFFFFFFFF8))
                  + 4 * ((v23 + v5) & 0x3FF));
      *((void *)&v23 + 1) = v5;
      std::deque<int>::__maybe_remove_back_spare[abi:ne180100](v22, 1);
      uint64_t v7 = *((void *)this + 20);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 21) - v7) >> 2) <= v6
        || (uint64_t v8 = *((void *)a2 + 20), 0xCCCCCCCCCCCCCCCDLL * ((*((void *)a2 + 21) - v8) >> 2) <= v6))
      {
        std::vector<xgboost::FeatureType>::__throw_out_of_range[abi:ne180100]();
      }
      if (*(_DWORD *)(v7 + 20 * v6) != *(_DWORD *)(v8 + 20 * v6)) {
        break;
      }
      uint64_t v9 = v7 + 20 * v6;
      int v11 = *(_DWORD *)(v9 + 4);
      unint64_t v10 = (int *)(v9 + 4);
      if (v11 != *(_DWORD *)(v8 + 20 * v6 + 4)) {
        break;
      }
      uint64_t v12 = v7 + 20 * v6;
      int v14 = *(_DWORD *)(v12 + 8);
      uint64_t v13 = (int *)(v12 + 8);
      uint64_t v15 = v8 + 20 * v6;
      if (v14 != *(_DWORD *)(v15 + 8)
        || *(_DWORD *)(v7 + 20 * v6 + 12) != *(_DWORD *)(v15 + 12)
        || *(float *)(v7 + 20 * v6 + 16) != *(float *)(v8 + 20 * v6 + 16))
      {
        break;
      }
      int v21 = 0;
      int v16 = *v10;
      int v20 = 0;
      int v21 = v16;
      int v17 = *v13;
      int v20 = *v13;
      if (v16 != -1)
      {
        std::deque<int>::push_back(v22, &v21);
        int v17 = v20;
      }
      if (v17 != -1) {
        std::deque<int>::push_back(v22, &v20);
      }
      uint64_t v4 = *((void *)&v23 + 1);
      if (!*((void *)&v23 + 1)) {
        goto LABEL_15;
      }
    }
    uint64_t v18 = 0;
  }
  else
  {
LABEL_15:
    uint64_t v18 = 1;
  }
  std::deque<int>::~deque[abi:ne180100](v22);
  return v18;
}

void sub_22E9D7C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::RegTree::GetNumLeaves(xgboost::RegTree *this)
{
  long long v13 = 0u;
  memset(v12, 0, sizeof(v12));
  std::deque<int>::push_back(v12, &xgboost::RegTree::kRoot);
  uint64_t v2 = *((void *)&v13 + 1);
  if (*((void *)&v13 + 1))
  {
    LODWORD(v3) = 0;
    do
    {
      uint64_t v4 = v2 - 1;
      int v5 = *(_DWORD *)(*(void *)(*((void *)&v12[0] + 1) + (((unint64_t)(v13 + v4) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v13 + v4) & 0x3FF));
      *((void *)&v13 + 1) = v4;
      std::deque<int>::__maybe_remove_back_spare[abi:ne180100](v12, 1);
      uint64_t v6 = *((void *)this + 20) + 20 * v5;
      if (*(_DWORD *)(v6 + 4) == -1) {
        uint64_t v3 = (v3 + 1);
      }
      else {
        uint64_t v3 = v3;
      }
      int v11 = 0;
      int v7 = *(_DWORD *)(v6 + 4);
      int v10 = 0;
      int v11 = v7;
      int v8 = *(_DWORD *)(v6 + 8);
      int v10 = v8;
      if (v7 != -1)
      {
        std::deque<int>::push_back(v12, &v11);
        int v8 = v10;
      }
      if (v8 != -1) {
        std::deque<int>::push_back(v12, &v10);
      }
      uint64_t v2 = *((void *)&v13 + 1);
    }
    while (*((void *)&v13 + 1));
  }
  else
  {
    uint64_t v3 = 0;
  }
  std::deque<int>::~deque[abi:ne180100](v12);
  return v3;
}

void sub_22E9D7DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::RegTree::GetNumSplitNodes(xgboost::RegTree *this)
{
  long long v13 = 0u;
  memset(v12, 0, sizeof(v12));
  std::deque<int>::push_back(v12, &xgboost::RegTree::kRoot);
  uint64_t v2 = *((void *)&v13 + 1);
  if (*((void *)&v13 + 1))
  {
    LODWORD(v3) = 0;
    do
    {
      uint64_t v4 = v2 - 1;
      int v5 = *(_DWORD *)(*(void *)(*((void *)&v12[0] + 1) + (((unint64_t)(v13 + v4) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v13 + v4) & 0x3FF));
      *((void *)&v13 + 1) = v4;
      std::deque<int>::__maybe_remove_back_spare[abi:ne180100](v12, 1);
      uint64_t v6 = *((void *)this + 20) + 20 * v5;
      if (*(_DWORD *)(v6 + 4) == -1) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = (v3 + 1);
      }
      int v11 = 0;
      int v7 = *(_DWORD *)(v6 + 4);
      int v10 = 0;
      int v11 = v7;
      int v8 = *(_DWORD *)(v6 + 8);
      int v10 = v8;
      if (v7 != -1)
      {
        std::deque<int>::push_back(v12, &v11);
        int v8 = v10;
      }
      if (v8 != -1) {
        std::deque<int>::push_back(v12, &v10);
      }
      uint64_t v2 = *((void *)&v13 + 1);
    }
    while (*((void *)&v13 + 1));
  }
  else
  {
    uint64_t v3 = 0;
  }
  std::deque<int>::~deque[abi:ne180100](v12);
  return v3;
}

void sub_22E9D7EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void xgboost::RegTree::ExpandNode(xgboost::RegTree *this, int a2, unsigned int a3, float a4, int a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, int a13)
{
  int v26 = xgboost::RegTree::AllocNode(this);
  int v27 = xgboost::RegTree::AllocNode(this);
  uint64_t v28 = *((void *)this + 20);
  uint64_t v29 = v28 + 20 * a2;
  int v31 = *(_DWORD *)(v29 + 4);
  uint64_t v30 = (_DWORD *)(v29 + 4);
  uint64_t v32 = v28;
  if (v31 != -1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
    v45 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Check failed: node.IsLeaf()", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
    uint64_t v32 = *((void *)this + 20);
  }
  *uint64_t v30 = v26;
  uint64_t v33 = v28 + 20 * a2;
  *(_DWORD *)(v32 + 20 * v26) = a2 | 0x80000000;
  *(_DWORD *)(v32 + 20 * v27) = a2;
  unsigned int v34 = a3 | 0x80000000;
  if (!a5) {
    unsigned int v34 = a3;
  }
  *(_DWORD *)(v33 + 8) = v27;
  *(_DWORD *)(v33 + 12) = v34;
  *(float *)(v33 + 16) = a4;
  uint64_t v35 = *((void *)this + 20) + 20 * v26;
  *(float *)(v35 + 16) = a7;
  *(_DWORD *)(v35 + 4) = -1;
  *(_DWORD *)(v35 + 8) = a13;
  uint64_t v36 = *((void *)this + 20) + 20 * v27;
  *(float *)(v36 + 16) = a8;
  *(_DWORD *)(v36 + 4) = -1;
  *(_DWORD *)(v36 + 8) = a13;
  uint64_t v39 = *((void *)this + 29);
  v38 = (char *)this + 232;
  uint64_t v37 = v39;
  uint64_t v40 = *((void *)v38 - 3);
  uint64_t v41 = v40 + 16 * a2;
  *(float *)uint64_t v41 = a9;
  *(float *)(v41 + 4) = a10;
  *(float *)(v41 + 8) = a6;
  *(_DWORD *)(v41 + 12) = 0;
  uint64_t v42 = v40 + 16 * v26;
  *(_DWORD *)uint64_t v42 = 0;
  *(float *)(v42 + 4) = a11;
  *(float *)(v42 + 8) = a7;
  *(_DWORD *)(v42 + 12) = 0;
  uint64_t v43 = v40 + 16 * v27;
  *(_DWORD *)uint64_t v43 = 0;
  *(float *)(v43 + 4) = a12;
  *(float *)(v43 + 8) = a8;
  *(_DWORD *)(v43 + 12) = 0;
  if (*((void *)v38 + 1) - v39 <= (unint64_t)a2) {
    std::vector<xgboost::FeatureType>::__throw_out_of_range[abi:ne180100]();
  }
  *(unsigned char *)(v37 + a2) = 0;
}

void sub_22E9D80B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::RegTree::AllocNode(xgboost::RegTree *this)
{
  int v2 = *((_DWORD *)this + 4);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 24);
    uint64_t v4 = *(int *)(v3 - 4);
    *((void *)this + 24) = v3 - 4;
    *(_DWORD *)(*((void *)this + 20) + 20 * (int)v4 + 12) = 0;
    *((_DWORD *)this + 4) = v2 - 1;
  }
  else
  {
    uint64_t v4 = *((unsigned int *)this + 3);
    *((_DWORD *)this + 3) = v4 + 1;
    int v13 = 0x7FFFFFFF;
    int v14 = v4 + 1;
    if (v4 == 2147483646) {
      dmlc::LogCheckFormat<int,int>();
    }
    std::vector<xgboost::RegTree::Node>::resize((uint64_t)this + 160, *((int *)this + 3));
    std::vector<xgboost::RTreeNodeStat>::resize((uint64_t)this + 208, *((int *)this + 3));
    unint64_t v5 = *((int *)this + 3);
    uint64_t v7 = *((void *)this + 29);
    uint64_t v6 = *((void *)this + 30);
    LOBYTE(v12) = 0;
    unint64_t v8 = v6 - v7;
    BOOL v9 = v5 >= v8;
    unint64_t v10 = v5 - v8;
    if (v10 != 0 && v9)
    {
      std::vector<xgboost::FeatureType>::__append((unint64_t *)this + 29, v10, &v12);
      unint64_t v5 = *((int *)this + 3);
    }
    else if (!v9)
    {
      *((void *)this + 30) = v7 + v5;
    }
    std::vector<xgboost::RTreeNodeStat>::resize((uint64_t)this + 280, v5);
  }
  return v4;
}

void sub_22E9D8250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  uint64_t v12 = a9;
  a9 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::RegTree::ExpandCategorical(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  xgboost::RegTree::ExpandNode((xgboost::RegTree *)a1, a2, a3, NAN, a5, a6, a7, a8, a9, a10, a11, a12, -1);
  uint64_t v15 = (uint64_t)(*(void *)(a1 + 264) - *(void *)(a1 + 256)) >> 2;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 256), *(void *)a4 + v15);
  if (*(void *)a4) {
    memmove((void *)(*(void *)(a1 + 256) + 4 * v15), *(const void **)(a4 + 8), 4 * *(void *)a4);
  }
  uint64_t v17 = *(void *)(a1 + 232);
  uint64_t result = a1 + 232;
  if (*(void *)(a1 + 240) - v17 <= (unint64_t)a2) {
    std::vector<xgboost::FeatureType>::__throw_out_of_range[abi:ne180100]();
  }
  *(unsigned char *)(v17 + a2) = 1;
  uint64_t v18 = *(void *)(a1 + 280);
  if (a2 >= (unint64_t)((*(void *)(a1 + 288) - v18) >> 4)) {
    std::vector<xgboost::FeatureType>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v19 = *(void *)a4;
  int v20 = (uint64_t *)(v18 + 16 * a2);
  *int v20 = v15;
  v20[1] = v19;
  return result;
}

void xgboost::RegTree::Load(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  if ((**a2)(a2, a1 + 8, 148) != 148) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  std::vector<xgboost::RegTree::Node>::resize(a1 + 160, *(int *)(a1 + 12));
  std::vector<xgboost::RTreeNodeStat>::resize(a1 + 208, *(int *)(a1 + 12));
  if (!*(_DWORD *)(a1 + 12)) {
    dmlc::LogCheckFormat<int,int>();
  }
  uint64_t v5 = *(void *)(a1 + 160);
  uint64_t v4 = *(void *)(a1 + 168);
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 160);
  }
  if ((**a2)(a2, v6, v4 - v5) != *(void *)(a1 + 168) - *(void *)(a1 + 160)) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v8 = *(void *)(a1 + 208);
  uint64_t v7 = *(void *)(a1 + 216);
  if (v7 == v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(a1 + 208);
  }
  if ((**a2)(a2, v9, v7 - v8) != *(void *)(a1 + 216) - *(void *)(a1 + 208)) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  unint64_t v10 = (void **)(a1 + 184);
  std::vector<int>::resize((std::vector<int> *)(a1 + 184), 0);
  int v11 = *(_DWORD *)(a1 + 12);
  if (v11 >= 2)
  {
    for (uint64_t i = 1; i < v11; ++i)
    {
      if (*(_DWORD *)(*(void *)(a1 + 160) + 20 * i + 12) == -1)
      {
        int v14 = *(char **)(a1 + 192);
        unint64_t v13 = *(void *)(a1 + 200);
        if ((unint64_t)v14 >= v13)
        {
          int v16 = (char *)*v10;
          uint64_t v17 = (v14 - (unsigned char *)*v10) >> 2;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62) {
            std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v13 - (void)v16;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            int v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 200, v20);
            int v16 = *(char **)(a1 + 184);
            int v14 = *(char **)(a1 + 192);
          }
          else
          {
            int v21 = 0;
          }
          unint64_t v22 = &v21[4 * v17];
          *(_DWORD *)unint64_t v22 = i;
          uint64_t v15 = v22 + 4;
          while (v14 != v16)
          {
            int v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          *(void *)(a1 + 184) = v22;
          *(void *)(a1 + 192) = v15;
          *(void *)(a1 + 200) = &v21[4 * v20];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(_DWORD *)int v14 = i;
          uint64_t v15 = v14 + 4;
        }
        *(void *)(a1 + 192) = v15;
        int v11 = *(_DWORD *)(a1 + 12);
      }
    }
  }
  if (*(_DWORD *)(a1 + 16) != ((*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 2)) {
    dmlc::LogCheckFormat<int,int>();
  }
  unint64_t v24 = *(int *)(a1 + 12);
  uint64_t v26 = *(void *)(a1 + 232);
  uint64_t v25 = *(void *)(a1 + 240);
  LOBYTE(v30) = 0;
  unint64_t v27 = v25 - v26;
  BOOL v28 = v24 >= v27;
  unint64_t v29 = v24 - v27;
  if (v29 != 0 && v28)
  {
    std::vector<xgboost::FeatureType>::__append((unint64_t *)(a1 + 232), v29, &v30);
    unint64_t v24 = *(int *)(a1 + 12);
  }
  else if (!v28)
  {
    *(void *)(a1 + 240) = v26 + v24;
  }
  std::vector<xgboost::RTreeNodeStat>::resize(a1 + 280, v24);
}

void sub_22E9D894C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_22E9D897C(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E9D8960);
}

void sub_22E9D898C(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E9D8960);
}

void sub_22E9D899C(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E9D8960);
}

void sub_22E9D89AC(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E9D8960);
}

void sub_22E9D89BC(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E9D8960);
}

uint64_t xgboost::RegTree::Save(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  int v18 = -858993459 * ((*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 2);
  int v19 = v4;
  if (v4 != v18) {
    dmlc::LogCheckFormat<int,int>();
  }
  int v5 = *(_DWORD *)(a1 + 12);
  int v18 = (*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 4;
  int v19 = v5;
  if (v5 != v18) {
    dmlc::LogCheckFormat<int,int>();
  }
  int v6 = *(_DWORD *)(a1 + 8);
  int v18 = 1;
  int v19 = v6;
  if (v6 != 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  int v7 = *(_DWORD *)(a1 + 12);
  int v18 = 0;
  int v19 = v7;
  if (!v7) {
    dmlc::LogCheckFormat<int,int>();
  }
  if (*(void *)(a1 + 256) != *(void *)(a1 + 264))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
    int v14 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: !HasCategoricalSplit()", 36);
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Please use JSON/UBJSON for saving models with categorical splits.", 65);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a1 + 8, 148);
  uint64_t v9 = *(void *)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 168);
  if (v8 == v9) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)(a1 + 160);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, v10, v8 - v9);
  if (*(void *)(a1 + 216) == *(void *)(a1 + 208)) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 208);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)a2 + 8))(a2, v11, 0xCCCCCCCCCCCCCCD0 * ((*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 2));
}

void sub_22E9D8E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void sub_22E9D8E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
}

void sub_22E9D8E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
}

void sub_22E9D8E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
}

void sub_22E9D8E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
}

void xgboost::RegTree::SaveCategoricalSplit(xgboost::RegTree *this, xgboost::Json *a2)
{
  uint64_t v3 = (void *)*((int *)this + 3);
  v67 = (void *)(*((void *)this + 30) - *((void *)this + 29));
  if (v67 != v3) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  if ((uint64_t)(*((void *)this + 36) - *((void *)this + 35)) >> 4 != *((_DWORD *)this + 3)) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  v71[2] = 0xA00000000;
  v71[0] = 0;
  v71[1] = &unk_26E24D8C8;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  uint64_t v68 = 0xA00000000;
  v67 = &unk_26E24D8C8;
  v69 = 0;
  v70 = 0;
  v63[2] = 0x900000000;
  v63[0] = 0;
  v63[1] = &unk_26E24D880;
  uint64_t v64 = 0;
  v65 = 0;
  std::string v66 = 0;
  v60[3] = 0x900000000;
  v60[2] = &unk_26E24D880;
  std::string __p = 0;
  int v62 = 0;
  uint64_t v5 = *((void *)this + 20);
  uint64_t v4 = *((void *)this + 21);
  if (v4 != v5)
  {
    unint64_t v6 = 0;
    do
    {
      if (*(unsigned char *)(*((void *)this + 29) + v6) == 1)
      {
        int v7 = v62;
        if ((unint64_t)v62 >= v63[0])
        {
          uint64_t v9 = (char *)__p;
          uint64_t v10 = (v62 - (unsigned char *)__p) >> 2;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62) {
            std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v12 = v63[0] - (void)__p;
          if ((uint64_t)(v63[0] - (void)__p) >> 1 > v11) {
            unint64_t v11 = v12 >> 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v63, v13);
            uint64_t v9 = (char *)__p;
            int v7 = v62;
          }
          else
          {
            int v14 = 0;
          }
          uint64_t v15 = &v14[4 * v10];
          *(_DWORD *)uint64_t v15 = v6;
          uint64_t v8 = v15 + 4;
          while (v7 != v9)
          {
            int v16 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v15 - 1) = v16;
            v15 -= 4;
          }
          std::string __p = v15;
          int v62 = v8;
          v63[0] = &v14[4 * v13];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          *(_DWORD *)int v62 = v6;
          uint64_t v8 = v7 + 4;
        }
        int v62 = v8;
        uint64_t v17 = (v65 - (unsigned char *)v64) >> 2;
        int v18 = v73;
        if (v73 >= v74)
        {
          unint64_t v20 = v72;
          uint64_t v21 = v73 - v72;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61) {
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = (char *)v74 - (char *)v72;
          if (((char *)v74 - (char *)v72) >> 2 > v22) {
            unint64_t v22 = v23 >> 2;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v74, v24);
            unint64_t v20 = v72;
            int v18 = v73;
          }
          else
          {
            uint64_t v25 = 0;
          }
          uint64_t v26 = (uint64_t *)&v25[8 * v21];
          *uint64_t v26 = v17;
          int v19 = v26 + 1;
          while (v18 != v20)
          {
            uint64_t v27 = *--v18;
            *--uint64_t v26 = v27;
          }
          v72 = v26;
          v73 = v19;
          v74 = (uint64_t *)&v25[8 * v24];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          uint64_t *v73 = v17;
          int v19 = v18 + 1;
        }
        v73 = v19;
        BOOL v28 = (unint64_t *)(*((void *)this + 35) + 16 * v6);
        unint64_t v29 = *v28;
        unint64_t v30 = v28[1];
        uint64_t v31 = *((void *)this + 32);
        v60[0] = (*((void *)this + 33) - v31) >> 2;
        v60[1] = v31;
        xgboost::common::Span<float,18446744073709551615ul>::subspan(v60, v29, v30, (unint64_t *)v58);
        uint64_t v32 = v58[0];
        uint64_t v33 = 32 * (uint64_t)v58[0];
        if (32 * (uint64_t)v58[0])
        {
          unint64_t v34 = 0;
          uint64_t v35 = v58[1];
          do
          {
            if (v34 >> 5 >= (unint64_t)v32) {
              std::terminate();
            }
            if ((v35[v34 >> 5] & (1 << ~(_BYTE)v34)) != 0)
            {
              uint64_t v36 = v65;
              if (v65 >= v66)
              {
                v38 = (char *)v64;
                uint64_t v39 = (v65 - (unsigned char *)v64) >> 2;
                unint64_t v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 62) {
                  std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v41 = v66 - (unsigned char *)v64;
                if ((v66 - (unsigned char *)v64) >> 1 > v40) {
                  unint64_t v40 = v41 >> 1;
                }
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v42 = v40;
                }
                if (v42)
                {
                  uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66, v42);
                  v38 = (char *)v64;
                  uint64_t v36 = v65;
                }
                else
                {
                  uint64_t v43 = 0;
                }
                uint64_t v44 = &v43[4 * v39];
                *(_DWORD *)uint64_t v44 = v34;
                uint64_t v37 = v44 + 4;
                while (v36 != v38)
                {
                  int v45 = *((_DWORD *)v36 - 1);
                  v36 -= 4;
                  *((_DWORD *)v44 - 1) = v45;
                  v44 -= 4;
                }
                uint64_t v64 = v44;
                v65 = v37;
                std::string v66 = &v43[4 * v42];
                if (v38) {
                  operator delete(v38);
                }
              }
              else
              {
                *(_DWORD *)v65 = v34;
                uint64_t v37 = v36 + 4;
              }
              v65 = v37;
            }
            ++v34;
          }
          while (v34 != v33);
        }
        int64_t v46 = ((v65 - (unsigned char *)v64) >> 2) - v17;
        v60[0] = v46;
        char v47 = v70;
        if ((unint64_t)v70 >= v71[0])
        {
          int v49 = v69;
          uint64_t v50 = v70 - v69;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61) {
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v52 = v71[0] - (void)v69;
          if ((uint64_t)(v71[0] - (void)v69) >> 2 > v51) {
            unint64_t v51 = v52 >> 2;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            int v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v71, v53);
            int v49 = v69;
            char v47 = v70;
            int64_t v46 = v60[0];
          }
          else
          {
            int v54 = 0;
          }
          uint64_t v55 = (int64_t *)&v54[8 * v50];
          *uint64_t v55 = v46;
          v48 = v55 + 1;
          while (v47 != v49)
          {
            int64_t v56 = *--v47;
            *--uint64_t v55 = v56;
          }
          v69 = v55;
          v70 = v48;
          v71[0] = &v54[8 * v53];
          if (v49)
          {
            operator delete(v49);
            int64_t v46 = v60[0];
          }
        }
        else
        {
          int64_t *v70 = v46;
          v48 = v47 + 1;
        }
        v70 = v48;
        int v59 = 0;
        if (!v46) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        uint64_t v5 = *((void *)this + 20);
        uint64_t v4 = *((void *)this + 21);
      }
      ++v6;
    }
    while (v6 < 0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 2));
  }
  std::string::basic_string[abi:ne180100]<0>(v58, "categories_segments");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, v58);
  xgboost::Json::operator=<long long,(xgboost::Value::ValueKind)10>();
}

void sub_22E9D977C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,int a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  if (__p) {
    operator delete(__p);
  }
  if (a39) {
    operator delete(a39);
  }
  *(void *)(v40 - 168) = a16;
  unint64_t v42 = *(void **)(v40 - 152);
  if (v42)
  {
    *(void *)(v40 - 144) = v42;
    operator delete(v42);
  }
  *(void *)(v40 - 128) = a17;
  uint64_t v43 = *(void **)(v40 - 112);
  if (v43)
  {
    *(void *)(v40 - 104) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::Json::operator=<long long,(xgboost::Value::ValueKind)10>()
{
}

void xgboost::Json::operator=<int,(xgboost::Value::ValueKind)9>()
{
}

void *xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::~JsonTypedArray(void *a1)
{
  *a1 = &unk_26E24D880;
  int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void *xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::~JsonTypedArray(void *a1)
{
  *a1 = &unk_26E24D8C8;
  int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void xgboost::RegTree::LoadModel(xgboost::RegTree *this, const xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v215, "loss_changes");
  int v4 = *(_DWORD *)(*(void *)(*(uint64_t (**)(void, std::vector<std::pair<std::string, std::string>> *))(**(void **)a2 + 24))(*(void *)a2, &v215)+ 12);
  if (SHIBYTE(v215.__end_cap_.__value_) < 0) {
    operator delete(v215.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v215, "split_indices");
  int v5 = *(_DWORD *)(*(void *)(*(uint64_t (**)(void, std::vector<std::pair<std::string, std::string>> *))(**(void **)a2 + 24))(*(void *)a2, &v215)+ 12);
  if (SHIBYTE(v215.__end_cap_.__value_) < 0) {
    operator delete(v215.__begin_);
  }
  BOOL v6 = v4 == 7 && v5 == 10;
  v192 = this;
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v212, "tree_param");
    char v47 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    xgboost::FromJson<xgboost::TreeParam>(&v215, *v47, (uint64_t)this + 8);
    *(void *)std::string __p = &v215;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    int v211 = *((_DWORD *)this + 3);
    *(_DWORD *)std::string __p = v211;
    if (!v211) {
      dmlc::LogCheckFormat<int,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "loss_changes");
    v48 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    int v49 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v48);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v49[3] - v49[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "sum_hessian");
    uint64_t v50 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    unint64_t v51 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v50);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v51[3] - v51[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "base_weights");
    uint64_t v52 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v208 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v52);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v208[3] - v208[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "left_children");
    unint64_t v53 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v205 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v53);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v205[3] - v205[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "right_children");
    int v54 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v202 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v54);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v202[3] - v202[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "parents");
    uint64_t v55 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v198 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v55);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v198[3] - v198[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "split_indices");
    int64_t v56 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v194 = xgboost::Cast<xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10> const,xgboost::Value>(*v56);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v194[3] - v194[2]) >> 3;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "split_conditions");
    v57 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v58 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v57);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v58[3] - v58[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "default_left");
    int v59 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    uint64_t v60 = xgboost::Cast<xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8> const,xgboost::Value>(*v59);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = v60[3] - v60[2];
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    uint64_t v61 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
    std::string::basic_string[abi:ne180100]<0>(&v212, "split_type");
    uint64_t v62 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v61, (const void **)&v212);
    uint64_t v63 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 24;
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    uint64_t v212 = 0;
    uint64_t v213 = 0;
    uint64_t v214 = 0;
    if (v63 != (char *)v62)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "split_type");
      uint64_t v64 = (_DWORD **)(*(uint64_t (**)(void, unsigned char *))(**(void **)a2 + 24))(*(void *)a2, __p);
      v65 = (char **)xgboost::Cast<xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8> const,xgboost::Value>(*v64);
      if (&v212 != (uint64_t *)(v65 + 2)) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v212, v65[2], v65[3], v65[3] - v65[2]);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    v189 = v51;
    std::vector<xgboost::RTreeNodeStat>::vector(__p, v211);
    std::string v66 = (void *)((char *)v192 + 208);
    v67 = (void *)*((void *)v192 + 26);
    if (v67)
    {
      *((void *)v192 + 27) = v67;
      operator delete(v67);
      *std::string v66 = 0;
      *((void *)v192 + 27) = 0;
      *((void *)v192 + 28) = 0;
    }
    *((_OWORD *)v192 + 13) = *(_OWORD *)__p;
    *((void *)v192 + 28) = *(void *)&__p[16];
    std::vector<xgboost::RegTree::Node>::vector(__p, v211);
    uint64_t v68 = (void *)((char *)v192 + 160);
    v69 = (void *)*((void *)v192 + 20);
    if (v69)
    {
      *((void *)v192 + 21) = v69;
      operator delete(v69);
      *uint64_t v68 = 0;
      *((void *)v192 + 21) = 0;
      *((void *)v192 + 22) = 0;
    }
    *((_OWORD *)v192 + 10) = *(_OWORD *)__p;
    *((void *)v192 + 22) = *(void *)&__p[16];
    std::vector<xgboost::FeatureType>::vector(__p, v211);
    v70 = (void *)((char *)v192 + 232);
    v71 = (void *)*((void *)v192 + 29);
    if (v71)
    {
      *((void *)v192 + 30) = v71;
      operator delete(v71);
      void *v70 = 0;
      *((void *)v192 + 30) = 0;
      *((void *)v192 + 31) = 0;
    }
    *(_OWORD *)((char *)v192 + 232) = *(_OWORD *)__p;
    *((void *)v192 + 31) = *(void *)&__p[16];
    std::vector<xgboost::RegTree::Segment>::vector(__p, v211);
    v72 = (void *)*((void *)v192 + 35);
    if (v72)
    {
      *((void *)v192 + 36) = v72;
      operator delete(v72);
      *((void *)v192 + 35) = 0;
      *((void *)v192 + 36) = 0;
      *((void *)v192 + 37) = 0;
    }
    uint64_t v73 = *(void *)__p;
    *((void *)v192 + 35) = *(void *)__p;
    uint64_t v74 = *(void *)&__p[8];
    *((_OWORD *)v192 + 18) = *(_OWORD *)&__p[8];
    if ((v74 - v73) >> 4 != v211) {
      dmlc::LogCheckFormat<int,unsigned long>();
    }
    if (v211 >= 1)
    {
      uint64_t v101 = 0;
      uint64_t v102 = 0;
      for (uint64_t i = 0; i < v211; ++i)
      {
        v104 = (_DWORD *)(*v66 + v101);
        _DWORD *v104 = *(_DWORD *)(v49[2] + 4 * i);
        v104[1] = *(_DWORD *)(v189[2] + 4 * i);
        v104[2] = *(_DWORD *)(v208[2] + 4 * i);
        v105 = (unsigned int *)(*v68 + v102);
        unsigned int v106 = *(_DWORD *)(v205[2] + 4 * i);
        unsigned int v107 = *(_DWORD *)(v202[2] + 4 * i);
        uint64_t v108 = *(void *)(v194[2] + 8 * i);
        unsigned int v109 = *(_DWORD *)(v58[2] + 4 * i);
        if (*(unsigned char *)(v60[2] + i) == 1) {
          LODWORD(v108) = v108 | 0x80000000;
        }
        unsigned int *v105 = *(_DWORD *)(v198[2] + 4 * i) | 0x80000000;
        v105[1] = v106;
        v105[2] = v107;
        v105[3] = v108;
        v105[4] = v109;
        if (v63 != (char *)v62) {
          *(unsigned char *)(*v70 + i) = *(unsigned char *)(v212 + i);
        }
        v102 += 20;
        v101 += 16;
      }
    }
  }
  else
  {
    if (v4 != 7 || v5 == 10)
    {
      uint64_t v8 = (void **)((char *)this + 208);
      uint64_t v9 = (void **)((char *)this + 160);
      uint64_t v10 = (void **)((char *)this + 280);
      BOOL v11 = v4 != 7 && v5 == 10;
      v207 = (void **)((char *)this + 208);
      v201 = (void **)((char *)this + 232);
      v204 = (void **)((char *)this + 160);
      if (v11)
      {
        std::string::basic_string[abi:ne180100]<0>(&v212, "tree_param");
        v110 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        xgboost::FromJson<xgboost::TreeParam>(&v215, *v110, (uint64_t)this + 8);
        *(void *)std::string __p = &v215;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        int v211 = *((_DWORD *)this + 3);
        *(_DWORD *)std::string __p = v211;
        if (!v211) {
          dmlc::LogCheckFormat<int,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "loss_changes");
        v111 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v200 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v111);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v200[3] - v200[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "sum_hessian");
        v112 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v196 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v112);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v196[3] - v196[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "base_weights");
        v113 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v191 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v113);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v191[3] - v191[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "left_children");
        v114 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v187 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v114);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v187[3] - v187[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "right_children");
        v115 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v185 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v115);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v185[3] - v185[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "parents");
        v116 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v183 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v116);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v183[3] - v183[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "split_indices");
        v117 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v181 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v117);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v181[3] - v181[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "split_conditions");
        v118 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v179 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v118);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v179[3] - v179[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "default_left");
        v119 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v177 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v119);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v177[3] - v177[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        v120 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
        std::string::basic_string[abi:ne180100]<0>(&v212, "split_type");
        uint64_t v121 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v120, (const void **)&v212);
        v122 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 24;
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        uint64_t v212 = 0;
        uint64_t v213 = 0;
        uint64_t v214 = 0;
        if (v122 != (char *)v121)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "split_type");
          v123 = (_DWORD **)(*(uint64_t (**)(void, unsigned char *))(**(void **)a2 + 24))(*(void *)a2, __p);
          v124 = (uint64_t **)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v123);
          if (&v212 != (uint64_t *)(v124 + 2)) {
            std::vector<xgboost::Json>::__assign_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t)&v212, v124[2], v124[3], v124[3] - v124[2]);
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        std::vector<xgboost::RTreeNodeStat>::vector(__p, v211);
        v125 = *v8;
        if (*v8)
        {
          *((void *)this + 27) = v125;
          operator delete(v125);
          *uint64_t v8 = 0;
          *((void *)this + 27) = 0;
          *((void *)this + 28) = 0;
        }
        *((_OWORD *)this + 13) = *(_OWORD *)__p;
        *((void *)this + 28) = *(void *)&__p[16];
        std::vector<xgboost::RegTree::Node>::vector(__p, v211);
        v126 = *v9;
        if (*v9)
        {
          *((void *)this + 21) = v126;
          operator delete(v126);
          *uint64_t v9 = 0;
          *((void *)this + 21) = 0;
          *((void *)this + 22) = 0;
        }
        *((_OWORD *)this + 10) = *(_OWORD *)__p;
        *((void *)this + 22) = *(void *)&__p[16];
        std::vector<xgboost::FeatureType>::vector(__p, v211);
        v127 = *v201;
        if (*v201)
        {
          *((void *)this + 30) = v127;
          operator delete(v127);
          *v201 = 0;
          *((void *)this + 30) = 0;
          *((void *)this + 31) = 0;
        }
        *(_OWORD *)((char *)this + 232) = *(_OWORD *)__p;
        *((void *)this + 31) = *(void *)&__p[16];
        std::vector<xgboost::RegTree::Segment>::vector(__p, v211);
        v128 = *v10;
        if (*v10)
        {
          *((void *)this + 36) = v128;
          operator delete(v128);
          int *v10 = 0;
          *((void *)this + 36) = 0;
          *((void *)this + 37) = 0;
        }
        uint64_t v129 = *(void *)__p;
        *((void *)this + 35) = *(void *)__p;
        uint64_t v130 = *(void *)&__p[8];
        *((_OWORD *)this + 18) = *(_OWORD *)&__p[8];
        if ((v130 - v129) >> 4 != v211) {
          dmlc::LogCheckFormat<int,unsigned long>();
        }
        if (v211 >= 1)
        {
          uint64_t v131 = 0;
          uint64_t v132 = 0;
          uint64_t v133 = 0;
          do
          {
            v134 = (char *)*v8;
            *(_DWORD *)&v134[v131] = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v200[2] + 8 * v133))
                                     + 4);
            v135 = &v134[v131];
            *((_DWORD *)v135 + 1) = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v196[2] + 8 * v133))
                                    + 4);
            *((_DWORD *)v135 + 2) = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v191[2] + 8 * v133))
                                    + 4);
            v136 = (char *)*v9;
            unsigned int v137 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v187[2] + 8 * v133))
                   + 4);
            unsigned int v138 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v185[2] + 8 * v133))
                   + 4);
            int v139 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v183[2] + 8 * v133))
                   + 4);
            unsigned int v140 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v181[2] + 8 * v133))
                   + 4);
            unsigned int v141 = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v179[2] + 8 * v133))
                   + 4);
            BOOL v142 = xgboost::GetElem<xgboost::JsonBoolean,xgboost::Json>(v177[2], v133);
            v143 = (unsigned int *)&v136[v132];
            unsigned int *v143 = v139 | 0x80000000;
            v143[1] = v137;
            if (v142) {
              unsigned int v144 = v140 | 0x80000000;
            }
            else {
              unsigned int v144 = v140;
            }
            v143[2] = v138;
            v143[3] = v144;
            v143[4] = v141;
            if (v122 != (char *)v121) {
              *((unsigned char *)*v201 + v133) = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v212 + 8 * v133))
            }
                                         + 2);
            ++v133;
            v132 += 20;
            v131 += 16;
            this = v192;
            uint64_t v9 = v204;
            uint64_t v8 = v207;
          }
          while (v133 < v211);
        }
        *(void *)std::string __p = &v212;
        std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v122 == (char *)v121) {
          goto LABEL_285;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v212, "tree_param");
        uint64_t v12 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        xgboost::FromJson<xgboost::TreeParam>(&v215, *v12, (uint64_t)this + 8);
        *(void *)std::string __p = &v215;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        int v211 = *((_DWORD *)this + 3);
        *(_DWORD *)std::string __p = v211;
        if (!v211) {
          dmlc::LogCheckFormat<int,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "loss_changes");
        unint64_t v13 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v197 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v13);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v197[3] - v197[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "sum_hessian");
        int v14 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v193 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v14);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v193[3] - v193[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "base_weights");
        uint64_t v15 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v188 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v15);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v188[3] - v188[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "left_children");
        int v16 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v186 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v16);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v186[3] - v186[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "right_children");
        uint64_t v17 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v184 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v17);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v184[3] - v184[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "parents");
        int v18 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v182 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v18);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v182[3] - v182[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "split_indices");
        int v19 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v180 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v19);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v180[3] - v180[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "split_conditions");
        unint64_t v20 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v178 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v20);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v178[3] - v178[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        std::string::basic_string[abi:ne180100]<0>(&v212, "default_left");
        uint64_t v21 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
        v176 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v21);
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        *(void *)std::string __p = (uint64_t)(v176[3] - v176[2]) >> 3;
        if (*(void *)__p != v211) {
          dmlc::LogCheckFormat<unsigned long,int>();
        }
        unint64_t v22 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
        std::string::basic_string[abi:ne180100]<0>(&v212, "split_type");
        uint64_t v23 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v22, (const void **)&v212);
        int v175 = v4;
        unint64_t v24 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 24;
        if (SHIBYTE(v214) < 0) {
          operator delete((void *)v212);
        }
        uint64_t v212 = 0;
        uint64_t v213 = 0;
        uint64_t v214 = 0;
        if (v24 != (char *)v23)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "split_type");
          uint64_t v25 = (_DWORD **)(*(uint64_t (**)(void, unsigned char *))(**(void **)a2 + 24))(*(void *)a2, __p);
          uint64_t v26 = (uint64_t **)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v25);
          if (&v212 != (uint64_t *)(v26 + 2)) {
            std::vector<xgboost::Json>::__assign_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t)&v212, v26[2], v26[3], v26[3] - v26[2]);
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        std::vector<xgboost::RTreeNodeStat>::vector(__p, v211);
        uint64_t v27 = *v8;
        if (*v8)
        {
          *((void *)this + 27) = v27;
          operator delete(v27);
          *uint64_t v8 = 0;
          *((void *)this + 27) = 0;
          *((void *)this + 28) = 0;
        }
        *((_OWORD *)this + 13) = *(_OWORD *)__p;
        *((void *)this + 28) = *(void *)&__p[16];
        std::vector<xgboost::RegTree::Node>::vector(__p, v211);
        BOOL v28 = *v9;
        if (*v9)
        {
          *((void *)this + 21) = v28;
          operator delete(v28);
          *uint64_t v9 = 0;
          *((void *)this + 21) = 0;
          *((void *)this + 22) = 0;
        }
        *((_OWORD *)this + 10) = *(_OWORD *)__p;
        *((void *)this + 22) = *(void *)&__p[16];
        std::vector<xgboost::FeatureType>::vector(__p, v211);
        unint64_t v29 = *v201;
        if (*v201)
        {
          *((void *)this + 30) = v29;
          operator delete(v29);
          *v201 = 0;
          *((void *)this + 30) = 0;
          *((void *)this + 31) = 0;
        }
        *(_OWORD *)((char *)this + 232) = *(_OWORD *)__p;
        *((void *)this + 31) = *(void *)&__p[16];
        std::vector<xgboost::RegTree::Segment>::vector(__p, v211);
        unint64_t v30 = *v10;
        if (*v10)
        {
          *((void *)this + 36) = v30;
          operator delete(v30);
          int *v10 = 0;
          *((void *)this + 36) = 0;
          *((void *)this + 37) = 0;
        }
        uint64_t v31 = *(void *)__p;
        *((void *)this + 35) = *(void *)__p;
        uint64_t v32 = *(void *)&__p[8];
        *((_OWORD *)this + 18) = *(_OWORD *)&__p[8];
        if ((v32 - v31) >> 4 != v211) {
          dmlc::LogCheckFormat<int,unsigned long>();
        }
        if (v211 >= 1)
        {
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          do
          {
            uint64_t v36 = (char *)*v8;
            *(_DWORD *)&v36[v33] = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v197[2] + 8 * v35))
                                   + 4);
            uint64_t v37 = &v36[v33];
            *((_DWORD *)v37 + 1) = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v193[2] + 8 * v35))
                                   + 4);
            *((_DWORD *)v37 + 2) = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v188[2] + 8 * v35))
                                   + 4);
            v38 = (char *)*v9;
            unsigned int v39 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v186[2] + 8 * v35))
                  + 4);
            unsigned int v40 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v184[2] + 8 * v35))
                  + 4);
            int v41 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v182[2] + 8 * v35))
                  + 4);
            unsigned int v42 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v180[2] + 8 * v35))
                  + 4);
            unsigned int v43 = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v178[2] + 8 * v35))
                  + 4);
            BOOL v44 = xgboost::GetElem<xgboost::JsonBoolean,xgboost::Json>(v176[2], v35);
            int v45 = (unsigned int *)&v38[v34];
            unsigned int *v45 = v41 | 0x80000000;
            v45[1] = v39;
            if (v44) {
              unsigned int v46 = v42 | 0x80000000;
            }
            else {
              unsigned int v46 = v42;
            }
            v45[2] = v40;
            v45[3] = v46;
            v45[4] = v43;
            if (v24 != (char *)v23) {
              *((unsigned char *)*v201 + v35) = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v212 + 8 * v35))
            }
                                        + 2);
            ++v35;
            v34 += 20;
            v33 += 16;
            this = v192;
            uint64_t v9 = v204;
            uint64_t v8 = v207;
          }
          while (v35 < v211);
        }
        *(void *)std::string __p = &v212;
        std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v24 == (char *)v23) {
          goto LABEL_285;
        }
        if (v175 == 7) {
          goto LABEL_284;
        }
      }
      xgboost::RegTree::LoadCategoricalSplit<false>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "tree_param");
    v75 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    xgboost::FromJson<xgboost::TreeParam>(&v215, *v75, (uint64_t)this + 8);
    *(void *)std::string __p = &v215;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    int v211 = *((_DWORD *)this + 3);
    *(_DWORD *)std::string __p = v211;
    if (!v211) {
      dmlc::LogCheckFormat<int,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "loss_changes");
    v76 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v77 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v76);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v77[3] - v77[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "sum_hessian");
    v78 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v79 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v78);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v79[3] - v79[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "base_weights");
    v80 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v209 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v80);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v209[3] - v209[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "left_children");
    v81 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v206 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v81);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v206[3] - v206[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "right_children");
    v82 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v203 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v82);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v203[3] - v203[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "parents");
    v83 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v199 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v83);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v199[3] - v199[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "split_indices");
    v84 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v195 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v84);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v195[3] - v195[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "split_conditions");
    v85 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v86 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v85);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = (uint64_t)(v86[3] - v86[2]) >> 2;
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    std::string::basic_string[abi:ne180100]<0>(&v212, "default_left");
    v87 = (_DWORD **)(*(uint64_t (**)(void, uint64_t *))(**(void **)a2 + 24))(*(void *)a2, &v212);
    v88 = xgboost::Cast<xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8> const,xgboost::Value>(*v87);
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    *(void *)std::string __p = v88[3] - v88[2];
    if (*(void *)__p != v211) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    v89 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
    std::string::basic_string[abi:ne180100]<0>(&v212, "split_type");
    uint64_t v62 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v89, (const void **)&v212);
    uint64_t v63 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 24;
    if (SHIBYTE(v214) < 0) {
      operator delete((void *)v212);
    }
    uint64_t v212 = 0;
    uint64_t v213 = 0;
    uint64_t v214 = 0;
    if (v63 != (char *)v62)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "split_type");
      v90 = (_DWORD **)(*(uint64_t (**)(void, unsigned char *))(**(void **)a2 + 24))(*(void *)a2, __p);
      v91 = (char **)xgboost::Cast<xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8> const,xgboost::Value>(*v90);
      if (&v212 != (uint64_t *)(v91 + 2)) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v212, v91[2], v91[3], v91[3] - v91[2]);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    v190 = v79;
    std::vector<xgboost::RTreeNodeStat>::vector(__p, v211);
    v92 = (void *)((char *)v192 + 208);
    v93 = (void *)*((void *)v192 + 26);
    if (v93)
    {
      *((void *)v192 + 27) = v93;
      operator delete(v93);
      void *v92 = 0;
      *((void *)v192 + 27) = 0;
      *((void *)v192 + 28) = 0;
    }
    *((_OWORD *)v192 + 13) = *(_OWORD *)__p;
    *((void *)v192 + 28) = *(void *)&__p[16];
    std::vector<xgboost::RegTree::Node>::vector(__p, v211);
    v94 = (void *)((char *)v192 + 160);
    v95 = (void *)*((void *)v192 + 20);
    if (v95)
    {
      *((void *)v192 + 21) = v95;
      operator delete(v95);
      void *v94 = 0;
      *((void *)v192 + 21) = 0;
      *((void *)v192 + 22) = 0;
    }
    *((_OWORD *)v192 + 10) = *(_OWORD *)__p;
    *((void *)v192 + 22) = *(void *)&__p[16];
    std::vector<xgboost::FeatureType>::vector(__p, v211);
    v96 = (void *)((char *)v192 + 232);
    v97 = (void *)*((void *)v192 + 29);
    if (v97)
    {
      *((void *)v192 + 30) = v97;
      operator delete(v97);
      void *v96 = 0;
      *((void *)v192 + 30) = 0;
      *((void *)v192 + 31) = 0;
    }
    *(_OWORD *)((char *)v192 + 232) = *(_OWORD *)__p;
    *((void *)v192 + 31) = *(void *)&__p[16];
    std::vector<xgboost::RegTree::Segment>::vector(__p, v211);
    v98 = (void *)*((void *)v192 + 35);
    if (v98)
    {
      *((void *)v192 + 36) = v98;
      operator delete(v98);
      *((void *)v192 + 35) = 0;
      *((void *)v192 + 36) = 0;
      *((void *)v192 + 37) = 0;
    }
    uint64_t v99 = *(void *)__p;
    *((void *)v192 + 35) = *(void *)__p;
    uint64_t v100 = *(void *)&__p[8];
    *((_OWORD *)v192 + 18) = *(_OWORD *)&__p[8];
    if ((v100 - v99) >> 4 != v211) {
      dmlc::LogCheckFormat<int,unsigned long>();
    }
    if (v211 >= 1)
    {
      uint64_t v145 = 0;
      uint64_t v146 = 0;
      for (uint64_t j = 0; j < v211; ++j)
      {
        v148 = (_DWORD *)(*v92 + v145);
        _DWORD *v148 = *(_DWORD *)(v77[2] + 4 * j);
        v148[1] = *(_DWORD *)(v190[2] + 4 * j);
        v148[2] = *(_DWORD *)(v209[2] + 4 * j);
        v149 = (unsigned int *)(*v94 + v146);
        unsigned int v150 = *(_DWORD *)(v206[2] + 4 * j);
        unsigned int v151 = *(_DWORD *)(v203[2] + 4 * j);
        unsigned int v152 = *(_DWORD *)(v195[2] + 4 * j);
        unsigned int v153 = *(_DWORD *)(v86[2] + 4 * j);
        if (*(unsigned char *)(v88[2] + j) == 1) {
          v152 |= 0x80000000;
        }
        unsigned int *v149 = *(_DWORD *)(v199[2] + 4 * j) | 0x80000000;
        v149[1] = v150;
        v149[2] = v151;
        v149[3] = v152;
        v149[4] = v153;
        if (v63 != (char *)v62) {
          *(unsigned char *)(*v96 + j) = *(unsigned char *)(v212 + j);
        }
        v146 += 20;
        v145 += 16;
      }
    }
  }
  if (v212)
  {
    uint64_t v213 = v212;
    operator delete((void *)v212);
  }
  this = v192;
  if (v63 != (char *)v62) {
LABEL_284:
  }
    xgboost::RegTree::LoadCategoricalSplit<true>();
LABEL_285:
  std::vector<xgboost::RTreeNodeStat>::resize((uint64_t)this + 280, *((int *)this + 3));
  v154 = (void *)*((void *)this + 29);
  int64_t v155 = *((void *)this + 30) - (void)v154;
  if (v155 >= 1) {
    bzero(v154, v155);
  }
  v157 = (void **)((char *)this + 184);
  v156 = (char *)*((void *)this + 23);
  *((void *)this + 24) = v156;
  int v158 = *((_DWORD *)this + 3);
  if (v158 >= 2)
  {
    v159 = (void *)((char *)this + 200);
    for (uint64_t k = 1; k < v158; ++k)
    {
      if (*(_DWORD *)(*((void *)this + 20) + 20 * k + 12) == -1)
      {
        if ((unint64_t)v156 >= *v159)
        {
          v162 = (char *)*v157;
          uint64_t v163 = (v156 - (unsigned char *)*v157) >> 2;
          unint64_t v164 = v163 + 1;
          if ((unint64_t)(v163 + 1) >> 62) {
            std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v165 = *v159 - (void)v162;
          if (v165 >> 1 > v164) {
            unint64_t v164 = v165 >> 1;
          }
          if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v166 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v166 = v164;
          }
          if (v166)
          {
            v167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 200, v166);
            v162 = (char *)*((void *)this + 23);
            v156 = (char *)*((void *)this + 24);
          }
          else
          {
            v167 = 0;
          }
          v168 = &v167[4 * v163];
          *(_DWORD *)v168 = k;
          v161 = v168 + 4;
          while (v156 != v162)
          {
            int v169 = *((_DWORD *)v156 - 1);
            v156 -= 4;
            *((_DWORD *)v168 - 1) = v169;
            v168 -= 4;
          }
          *((void *)this + 23) = v168;
          *((void *)this + 24) = v161;
          *((void *)this + 25) = &v167[4 * v166];
          if (v162) {
            operator delete(v162);
          }
        }
        else
        {
          *(_DWORD *)v156 = k;
          v161 = v156 + 4;
        }
        *((void *)this + 24) = v161;
        int v158 = *((_DWORD *)this + 3);
        v156 = v161;
      }
    }
    if (v158 >= 2)
    {
      uint64_t v170 = *((void *)this + 20);
      v171 = (int *)(v170 + 20);
      for (uint64_t m = 1; m != v158; ++m)
      {
        int *v171 = *v171 & 0x7FFFFFFF | ((m == *(_DWORD *)(v170 + 20 * (*v171 & 0x7FFFFFFF) + 4)) << 31);
        v171 += 5;
      }
    }
  }
  unint64_t v173 = (unint64_t)&v156[-*((void *)this + 23)] >> 2;
  int v174 = *((_DWORD *)this + 4);
  LODWORD(v212) = v173;
  *(_DWORD *)std::string __p = v174;
  if (v174 != v173) {
    dmlc::LogCheckFormat<int,int>();
  }
  uint64_t v212 = (uint64_t)(*((void *)this + 36) - *((void *)this + 35)) >> 4;
  if (v212 != *((_DWORD *)this + 3)) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
}

void sub_22E9DDA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::string __p = (void *)(v30 - 152);
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void xgboost::RegTree::SaveModel(xgboost::RegTree *this, xgboost::Json *a2)
{
  int v3 = -858993459 * ((*((void *)this + 21) - *((void *)this + 20)) >> 2);
  LODWORD(v8) = *((_DWORD *)this + 3);
  LODWORD(v7.__r_.__value_.__l.__data_) = v3;
  if (v8 != v3) {
    dmlc::LogCheckFormat<int,int>();
  }
  uint64_t v4 = (*((void *)this + 27) - *((void *)this + 26)) >> 4;
  LODWORD(v8) = *((_DWORD *)this + 3);
  LODWORD(v7.__r_.__value_.__l.__data_) = v4;
  if (v8 != v4) {
    dmlc::LogCheckFormat<int,int>();
  }
  uint64_t v9 = 0x300000000;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v8 = &unk_26E24E128;
  uint64_t v10 = v11;
  xgboost::TreeParam::__MANAGER__(this);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&stru_26AD723B0, &v12);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v7, (const void **)&v12.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v12.__end_->first.__r_.__value_.__l.__data_);
  v6[0] = (long long *)&v12;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v6);
  std::string::size_type v5 = v7.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v7.__r_.__value_.__l.__data_ != &v7.__r_.__value_.__r.__words[1])
  {
    xgboost::JsonString::JsonString(&v12, (long long *)(v7.__r_.__value_.__r.__words[0] + 56));
    v6[0] = (long long *)(v5 + 32);
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v10, (const void **)(v5 + 32), (uint64_t)&std::piecewise_construct, v6);
    xgboost::Json::operator=();
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v7, (void *)v7.__r_.__value_.__l.__size_);
  std::string::basic_string[abi:ne180100]<0>(&v12, "tree_param");
  (*(void (**)(void, std::vector<std::pair<std::string, std::string>> *))(**(void **)a2 + 24))(*(void *)a2, &v12);
  xgboost::Json::operator=();
}

void sub_22E9DEE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a38) {
    operator delete(a38);
  }
  if (a43) {
    operator delete(a43);
  }
  *(void *)(v44 - 240) = &unk_26E24D880;
  unsigned int v46 = *(void **)(v44 - 224);
  if (v46)
  {
    *(void *)(v44 - 216) = v46;
    operator delete(v46);
  }
  *(void *)(v44 - 200) = &unk_26E248988;
  char v47 = *(void **)(v44 - 184);
  if (v47)
  {
    *(void *)(v44 - 176) = v47;
    operator delete(v47);
  }
  *(void *)(v44 - 160) = &unk_26E248988;
  v48 = *(void **)(v44 - 144);
  if (v48)
  {
    *(void *)(v44 - 136) = v48;
    operator delete(v48);
  }
  *(void *)(v44 - 120) = &unk_26E248988;
  int v49 = *(void **)(v44 - 104);
  if (v49)
  {
    *(void *)(v44 - 96) = v49;
    operator delete(v49);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::Json::operator=<unsigned char,(xgboost::Value::ValueKind)8>()
{
}

void *xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::~JsonTypedArray(void *a1)
{
  *a1 = &unk_26E24D838;
  int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void *xgboost::RegTree::CalculateContributionsApprox(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  std::string v7 = result;
  uint64_t v9 = *(float **)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  int v23 = 0;
  uint64_t v10 = v8 - (void)v9;
  uint64_t v24 = v10 >> 2;
  if (!v10) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  float v11 = **(float **)a3;
  *(float *)(a4 + a2[1] - *a2) = v11 + *(float *)(a4 + a2[1] - *a2);
  uint64_t v12 = result[20];
  if (*(_DWORD *)(v12 + 4) != -1)
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    uint64_t v15 = result[29];
    v22[0] = result[30] - v15;
    v22[1] = v15;
    uint64_t v16 = result[32];
    _OWORD v22[2] = (result[33] - v16) >> 2;
    v22[3] = v16;
    uint64_t v17 = result[35];
    v22[4] = (result[36] - v17) >> 4;
    v22[5] = v17;
    do
    {
      float v18 = v11;
      uint64_t v19 = v12 + 20 * v13;
      uint64_t v20 = *(_DWORD *)(v19 + 12) & 0x7FFFFFFF;
      uint64_t result = (void *)xgboost::predictor::GetNextNode<true,true>(v19, v14, *(_DWORD *)(*a2 + 4 * v20) == -1, v22, *(float *)(*a2 + 4 * v20));
      unsigned int v14 = result;
      uint64_t v13 = (int)result;
      float v11 = *(float *)(*(void *)a3 + 4 * (int)result);
      float v21 = *(float *)(a4 + 4 * v20) + (float)(v11 - v18);
      *(float *)(a4 + 4 * v20) = v21;
      uint64_t v12 = v7[20];
    }
    while (*(_DWORD *)(v12 + 20 * (int)result + 4) != -1);
    *(float *)(a4 + 4 * v20) = v21 + (float)(*(float *)(v12 + 20 * (int)result + 16) - v11);
  }
  return result;
}

void sub_22E9DF58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v17 = a9;
  a9 = 0;
  if (v17) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::ExtendPath(uint64_t result, int a2, int a3, float a4, float a5)
{
  uint64_t v5 = result + 16 * a2;
  *(_DWORD *)uint64_t v5 = a3;
  *(float *)(v5 + 4) = a4;
  *(float *)(v5 + 8) = a5;
  float v6 = 0.0;
  if (!a2) {
    float v6 = 1.0;
  }
  *(float *)(v5 + 12) = v6;
  if (a2 - 1 >= 0)
  {
    float v7 = (float)(a2 + 1);
    uint64_t v8 = 16 * (a2 - 1);
    uint64_t v9 = result + 12;
    unsigned int v10 = 1;
    do
    {
      *(float *)(result + 16 * a2 + 12) = *(float *)(result + 16 * a2 + 12)
                                          + (float)((float)((float)(*(float *)(v9 + v8) * a5) * (float)a2) / v7);
      *(float *)(v9 + v8) = (float)((float)(*(float *)(v9 + v8) * a4) * (float)v10) / v7;
      v8 -= 16;
      ++v10;
      --a2;
    }
    while (v8 != -16);
  }
  return result;
}

double xgboost::UnwindPath(uint64_t a1, unsigned int a2, unsigned int a3, double result)
{
  uint64_t v4 = a2 - 1;
  if ((int)(a2 - 1) >= 0)
  {
    uint64_t v5 = a1 + 16 * a3;
    float v6 = *(float *)(v5 + 4);
    LODWORD(result) = *(_DWORD *)(v5 + 8);
    float v7 = *(float *)(a1 + 16 * a2 + 12);
    float v8 = (float)(a2 + 1);
    uint64_t v9 = v4 + 1;
    unsigned int v10 = (float *)(a1 + 16 * v4 + 12);
    unsigned int v11 = 1;
    do
    {
      float v12 = *v10;
      if (*(float *)&result == 0.0)
      {
        float v13 = (float)(v12 * v8) / (float)(v6 * (float)v11);
      }
      else
      {
        float v13 = (float)(v7 * v8) / (float)(*(float *)&result * (float)(int)v9);
        float v7 = v12 - (float)((float)((float)(v6 * v13) * (float)v11) / v8);
      }
      float *v10 = v13;
      v10 -= 4;
      ++v11;
    }
    while (v9-- > 1);
  }
  if (a3 < a2)
  {
    uint64_t v15 = (double *)(a1 + 16 * a3 + 20);
    unint64_t v16 = a2 - (unint64_t)a3;
    do
    {
      *((_DWORD *)v15 - 5) = *((_DWORD *)v15 - 1);
      uint64_t result = *v15;
      *(v15 - 2) = *v15;
      v15 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

float xgboost::UnwoundPathSum(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a2 - 1;
  if ((int)(a2 - 1) < 0) {
    return 0.0;
  }
  uint64_t v4 = a1 + 16 * a3;
  float v6 = *(float *)(v4 + 4);
  float v5 = *(float *)(v4 + 8);
  float v7 = *(float *)(a1 + 16 * a2 + 12);
  float v8 = (float)(a2 + 1);
  uint64_t v9 = v3 + 1;
  unsigned int v10 = (float *)(a1 + 16 * v3 + 12);
  float v11 = 0.0;
  unsigned int v12 = 1;
  do
  {
    if (v5 == 0.0)
    {
      if (v6 == 0.0)
      {
        if (*v10 != 0.0)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)" (", 2);
          uint64_t v15 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" vs. ", 5);
          unint64_t v16 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") ", 2);
          operator new();
        }
      }
      else
      {
        float v11 = v11 + (float)((float)(*v10 / v6) / (float)((float)v12 / v8));
      }
    }
    else
    {
      float v13 = (float)(v7 * v8) / (float)(v5 * (float)(int)v9);
      float v11 = v11 + v13;
      float v7 = *v10 + (float)((float)-(float)(v13 * v6) * (float)((float)v12 / v8));
    }
    ++v12;
    v10 -= 4;
  }
  while (v9-- > 1);
  return v11;
}

void sub_22E9DFA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MEMORY[0x230FA80D0](v3, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::RegTree::TreeShap(void *a1, void *a2, uint64_t a3, signed int a4, unsigned int a5, char *a6, int a7, uint64_t a8, float a9, float a10, float a11, int a12)
{
  uint64_t v13 = a1[20] + 20 * a4;
  float v14 = *(float *)(v13 + 16);
  long long v52 = *(_OWORD *)v13;
  float v53 = v14;
  if (a11 != 0.0)
  {
    unsigned int v17 = a5;
    float v20 = a11;
    uint64_t v24 = &a6[16 * a5];
    uint64_t v25 = (uint64_t)(v24 + 16);
    if (16 * a5 != -16) {
      memmove(v24 + 16, a6, 16 * a5 + 16);
    }
    if (!a8 || a12 != a7) {
      xgboost::ExtendPath(v25, v17, a7, a9, a10);
    }
    if (DWORD1(v52) == -1)
    {
      if (v17)
      {
        unsigned int v42 = 1;
        float v43 = v53;
        do
        {
          *(float *)(a3 + 4 * *(int *)(v25 + 16 * v42)) = *(float *)(a3 + 4 * *(int *)(v25 + 16 * v42))
                                                            + (float)((float)(v43
                                                                            * (float)(xgboost::UnwoundPathSum(v25, v17, v42)* (float)(*(float *)(v25 + 16 * v42 + 8)- *(float *)(v25 + 16 * v42 + 4))))* v20);
          ++v42;
        }
        while (v42 <= v17);
      }
    }
    else
    {
      uint64_t v26 = HIDWORD(v52) & 0x7FFFFFFF;
      uint64_t v27 = a1[29];
      uint64_t v50 = a4;
      v51[0] = a1[30] - v27;
      uint64_t v28 = a1[32];
      uint64_t v29 = (a1[33] - v28) >> 2;
      v51[1] = v27;
      v51[2] = v29;
      uint64_t v30 = a1[35];
      uint64_t v31 = (a1[36] - v30) >> 4;
      v51[3] = v28;
      v51[4] = v31;
      v51[5] = v30;
      uint64_t Next = xgboost::predictor::GetNextNode<true,true>((uint64_t)&v52, a4, *(_DWORD *)(*a2 + 4 * v26) == -1, v51, *(float *)(*a2 + 4 * v26));
      uint64_t v34 = Next;
      unsigned int v35 = 0;
      if (Next == DWORD1(v52)) {
        uint64_t v36 = DWORD2(v52);
      }
      else {
        uint64_t v36 = DWORD1(v52);
      }
      uint64_t v37 = a1[26];
      LODWORD(v33) = *(_DWORD *)(v37 + 16 * v50 + 4);
      float v38 = *(float *)(v37 + 16 * (int)Next + 4) / *(float *)&v33;
      float v39 = *(float *)(v37 + 16 * (int)v36 + 4) / *(float *)&v33;
      do
      {
        if (*(_DWORD *)(v25 + 16 * v35) == v26) {
          break;
        }
        ++v35;
      }
      while (v35 <= v17);
      float v40 = 1.0;
      if (v35 == v17 + 1)
      {
        float v41 = 1.0;
      }
      else
      {
        uint64_t v44 = v25 + 16 * v35;
        float v40 = *(float *)(v44 + 4);
        float v41 = *(float *)(v44 + 8);
        xgboost::UnwindPath(v25, v17--, v35, v33);
      }
      if ((int)a8 >= 1 && v26 == a12)
      {
        unsigned int v45 = v17 - 1;
        float v46 = 0.0;
      }
      else
      {
        float v47 = v38 * v20;
        float v48 = v39 * v20;
        unsigned int v45 = v17 - 1;
        if (v26 != a12)
        {
          unsigned int v45 = v17;
          float v47 = v20;
          float v48 = v20;
        }
        if ((int)a8 < 0)
        {
          float v46 = v48;
        }
        else
        {
          unsigned int v45 = v17;
          float v46 = v20;
        }
        if ((int)a8 < 0) {
          float v20 = v47;
        }
      }
      uint64_t v49 = v45 + 1;
      xgboost::RegTree::TreeShap(a1, a2, a3, v34, v49, v25, v26, a8, v38 * v40, v41, v20, a12);
      xgboost::RegTree::TreeShap(a1, a2, a3, v36, v49, v25, v26, a8, v39 * v40, 0.0, v46, a12);
    }
  }
}

void xgboost::RegTree::CalculateContributions(xgboost::RegTree *this, void *a2, float **a3, uint64_t a4, uint64_t a5, int a6)
{
  if (!a5) {
    *(float *)(a4 + a2[1] - *a2) = **a3 + *(float *)(a4 + a2[1] - *a2);
  }
  int v11 = xgboost::RegTree::MaxDepth(this, 0);
  std::vector<xgboost::PathElement>::vector(__p, (uint64_t)((v11 + 2) * (v11 + 3) + ((v11 + 2) * (v11 + 3) < 0)) >> 1);
  xgboost::RegTree::TreeShap(this, a2, a4, 0, 0, (char *)__p[0], -1, a5, 1.0, 1.0, 1.0, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22E9DFE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::RegTree::~RegTree(xgboost::RegTree *this)
{
  *(void *)this = &unk_26E24D2B8;
  int v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 32);
  if (v3)
  {
    *((void *)this + 33) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 29);
  if (v4)
  {
    *((void *)this + 30) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 26);
  if (v5)
  {
    *((void *)this + 27) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 23);
  if (v6)
  {
    *((void *)this + 24) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 20);
  if (v7)
  {
    *((void *)this + 21) = v7;
    operator delete(v7);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_26E24D2B8;
  int v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 32);
  if (v3)
  {
    *((void *)this + 33) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 29);
  if (v4)
  {
    *((void *)this + 30) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 26);
  if (v5)
  {
    *((void *)this + 27) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 23);
  if (v6)
  {
    *((void *)this + 24) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 20);
  if (v7)
  {
    *((void *)this + 21) = v7;
    operator delete(v7);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::~JsonTypedArray(void *a1)
{
  *a1 = &unk_26E24D880;
  int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::~JsonTypedArray(void *a1)
{
  *a1 = &unk_26E24D8C8;
  int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x230FA80D0);
}

void std::vector<xgboost::FeatureType>::__throw_out_of_range[abi:ne180100]()
{
}

void xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::~JsonTypedArray(void *a1)
{
  *a1 = &unk_26E24D838;
  int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x230FA80D0);
}

void dmlc::parameter::FieldEntry<std::vector<int>>::~FieldEntry(dmlc::parameter::FieldAccessEntry *this)
{
  *(void *)this = &unk_26E24D388;
  int v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }

  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E24D388;
  int v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)this);

  JUMPOUT(0x230FA80D0);
}

char *dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::SetDefault(char *result, uint64_t a2)
{
  if (!result[8])
  {
    float v5 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
    float v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Required parameter ", 19);
    int v7 = v5[47];
    if (v7 >= 0) {
      uint64_t v8 = (uint64_t)(v5 + 24);
    }
    else {
      uint64_t v8 = *((void *)v5 + 3);
    }
    if (v7 >= 0) {
      uint64_t v9 = v5[47];
    }
    else {
      uint64_t v9 = *((void *)v5 + 4);
    }
    unsigned int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" of ", 4);
    uint64_t v14 = *((void *)v5 + 6);
    uint64_t v13 = (uint64_t)(v5 + 48);
    uint64_t v12 = v14;
    int v15 = *(char *)(v13 + 23);
    if (v15 >= 0) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = v12;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      uint64_t v17 = *(void *)(v13 + 8);
    }
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" is not presented", 17);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v20);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  int v2 = (char *)(a2 + *((void *)result + 12));
  if (v2 != result + 104)
  {
    uint64_t v3 = (char *)*((void *)result + 13);
    uint64_t v4 = *((void *)result + 14);
    return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v2, v3, v4, (v4 - (uint64_t)v3) >> 2);
  }
  return result;
}

void sub_22E9E038C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::istringstream::basic_istringstream[abi:ne180100](v34, (const std::string *)a3, 8);
  std::operator>>(v34, (char **)(a2 + *(void *)(a1 + 96)));
  uint64_t v6 = v34[0];
  int v7 = *(_DWORD *)((char *)&v34[4] + *(void *)(v34[0] - 24));
  if ((v7 & 5) == 0 && (v7 & 2) == 0)
  {
    while (1)
    {
      int v8 = std::istream::get();
      if (v8 == -1)
      {
        std::ios_base::iostate v10 = 0;
        int v11 = (std::ios_base *)((char *)v34 + *(void *)(v34[0] - 24));
        goto LABEL_11;
      }
      if (v8 > 0x20u || ((1 << v8) & 0x100003600) == 0) {
        break;
      }
      uint64_t v6 = v34[0];
      if ((*((unsigned char *)&v34[4] + *(void *)(v34[0] - 24)) & 2) != 0) {
        goto LABEL_12;
      }
    }
    int v11 = (std::ios_base *)((char *)v34 + *(void *)(v34[0] - 24));
    std::ios_base::iostate v10 = v11->__rdstate_ | 4;
LABEL_11:
    std::ios_base::clear(v11, v10);
    uint64_t v6 = v34[0];
  }
LABEL_12:
  if ((*((unsigned char *)&v34[4] + *(void *)(v6 - 24)) & 5) != 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid Parameter format for ", 29);
    int v14 = *(char *)(a1 + 47);
    if (v14 >= 0) {
      uint64_t v15 = a1 + 24;
    }
    else {
      uint64_t v15 = *(void *)(a1 + 24);
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v16 = *(void *)(a1 + 32);
    }
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" expect ", 8);
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v20 = a1 + 48;
    uint64_t v19 = v21;
    int v22 = *(char *)(v20 + 23);
    if (v22 >= 0) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = v19;
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(v20 + 23);
    }
    else {
      uint64_t v24 = *(void *)(v20 + 8);
    }
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" but value='", 12);
    int v27 = *(char *)(a3 + 23);
    if (v27 >= 0) {
      uint64_t v28 = a3;
    }
    else {
      uint64_t v28 = *(void *)a3;
    }
    if (v27 >= 0) {
      uint64_t v29 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v29 = *(void *)(a3 + 8);
    }
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v32.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v32, 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v32);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  v34[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  v34[2] = MEMORY[0x263F8C318] + 16;
  if (v35 < 0) {
    operator delete((void *)v34[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x230FA8020](&v36);
}

void sub_22E9E0748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v49 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      std::istringstream::~istringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v48);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::GetStringValue(void *a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  uint64_t v4 = a2 + a1[12];
  int v7 = 0;
  uint64_t v8 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 2);
  (*(void (**)(void *, void *, void **))(*a1 + 64))(a1, v9, &__p);
  if (__p)
  {
    int v7 = __p;
    operator delete(__p);
  }
  std::stringbuf::str();
  v9[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v9[1] = MEMORY[0x263F8C318] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v11);
}

void sub_22E9E093C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  int v4 = *(char *)(a1 + 71);
  if (v4 >= 0) {
    uint64_t v5 = a1 + 48;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 56);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(unsigned char *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  uint64_t v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)uint64_t v8 = v10;
  *(void *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v14);
}

void sub_22E9E0B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

void dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::PrintDefaultValueString(uint64_t a1, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 104), *(void *)(a1 + 112), (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

void sub_22E9E0C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::PrintValue(uint64_t a1, void *a2, uint64_t *a3)
{
  char v8 = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v8, 1);
  uint64_t v5 = *a3;
  if (*a3 == a3[1])
  {
    uint64_t v6 = *a3;
  }
  else
  {
    do
    {
      if (v5 != *a3)
      {
        char v9 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v9, 1);
      }
      v5 += 4;
      std::ostream::operator<<();
    }
    while (v5 != a3[1]);
    uint64_t v6 = *a3;
  }
  if (v5 - v6 == 4)
  {
    char v10 = 44;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v10, 1);
  }
  char v11 = 41;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v11, 1);
}

void dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::~FieldEntryBase(dmlc::parameter::FieldAccessEntry *this)
{
  *(void *)this = &unk_26E24D388;
  int v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }

  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E24D388;
  int v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)this);

  JUMPOUT(0x230FA80D0);
}

void dmlc::parameter::FieldEntry<double>::~FieldEntry(void **a1)
{
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(a1);

  JUMPOUT(0x230FA80D0);
}

double dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<double>,double>::SetDefault(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Required parameter ", 19);
    int v5 = *(char *)(a1 + 47);
    if (v5 >= 0) {
      uint64_t v6 = a1 + 24;
    }
    else {
      uint64_t v6 = *(void *)(a1 + 24);
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v7 = *(void *)(a1 + 32);
    }
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" of ", 4);
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v11 = a1 + 48;
    uint64_t v10 = v12;
    int v13 = *(char *)(v11 + 23);
    if (v13 >= 0) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v10;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v15 = *(void *)(v11 + 8);
    }
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is not presented", 17);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v18);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  double result = *(double *)(a1 + 104);
  *(double *)(a2 + *(void *)(a1 + 96)) = result;
  return result;
}

void sub_22E9E0F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

int *dmlc::parameter::FieldEntry<double>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  int v54 = 0;
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v7 = (unsigned char *)a3;
  }
  else {
    uint64_t v7 = *(unsigned char **)a3;
  }
  while (1)
  {
    unsigned int v8 = v7[v6];
    if (v8 > 0x20 || ((1 << v8) & 0x100003600) == 0) {
      break;
    }
    ++v6;
  }
  uint64_t v10 = 0;
  BOOL v11 = v8 == 45 || v8 == 43;
  uint64_t v12 = v11;
  if (v11) {
    int v13 = v7 + 1;
  }
  else {
    int v13 = v7;
  }
  uint64_t v14 = &v13[v6 + 8];
  while ((v13[v10 + v6] | 0x20) == aInfinity[v10])
  {
    if (++v10 == 8) {
      goto LABEL_24;
    }
  }
  uint64_t v14 = &v7[v12 + v6 + v10];
  if (v10 != 8 && v10 != 3)
  {
    uint64_t v22 = 0;
    uint64_t v14 = &v7[v12 + 3 + v6];
    while ((v7[v12 + v22 + v6] | 0x20) == aNan[v22])
    {
      if (++v22 == 3)
      {
        if (*v14 == 40)
        {
          for (uint64_t i = &v7[v12 + 4 + v6]; ; ++i)
          {
            int v24 = *i;
            if ((v24 - 48) >= 0xA && v24 != 95 && (v24 & 0xFFFFFFDF) - 65 > 0x19) {
              break;
            }
          }
          char v55 = 41;
          if (v24 != 41) {
            dmlc::LogCheckFormat<char,char>(i, &v55);
          }
          uint64_t v14 = i + 1;
        }
        uint64_t v35 = 0x7FF8000000000000;
        goto LABEL_66;
      }
    }
    uint64_t v26 = &v7[v12 + v6];
    unsigned int v27 = *v26;
    if (v27 - 48 > 9)
    {
      uint64_t v28 = 0;
    }
    else
    {
      uint64_t v28 = 0;
      do
      {
        uint64_t v28 = 10 * v28 + v27 - 48;
        unsigned int v29 = *++v26;
        unsigned int v27 = v29;
      }
      while (v29 - 48 < 0xA);
    }
    double v16 = (double)(unint64_t)v28;
    if (v27 == 46)
    {
      unsigned int v27 = v26[1];
      if (v27 - 48 > 9)
      {
        double v34 = 0.0;
        ++v26;
      }
      else
      {
        uint64_t v30 = 0;
        unint64_t v31 = 0;
        unint64_t v32 = 1;
        do
        {
          uint64_t v33 = 10 * v31 + v27 - 48;
          if (v30 < 0x13)
          {
            v32 *= 10;
            unint64_t v31 = v33;
          }
          unsigned int v27 = v26[v30++ + 2];
        }
        while (v27 - 48 < 0xA);
        double v34 = (double)v31 / (double)v32;
        v26 += v30 + 1;
      }
      double v16 = v34 + v16;
    }
    if ((v27 | 0x20) != 0x65)
    {
      uint64_t v14 = v26;
LABEL_95:
      if ((v27 | 0x20) == 0x66) {
        ++v14;
      }
      double v17 = -v16;
      BOOL v15 = v8 == 45;
      goto LABEL_25;
    }
    int v36 = v26[1];
    BOOL v37 = v36 == 45 || v36 == 43;
    uint64_t v38 = 1;
    if (v37)
    {
      uint64_t v38 = 2;
      uint64_t v14 = v26 + 2;
    }
    else
    {
      uint64_t v14 = v26 + 1;
    }
    unsigned int v27 = v26[v38];
    double v39 = 1.0;
    if (v27 - 48 > 9)
    {
LABEL_92:
      if (v36 == 45) {
        double v16 = v16 / v39;
      }
      else {
        double v16 = v16 * v39;
      }
      goto LABEL_95;
    }
    unsigned int v40 = 0;
    do
    {
      unsigned int v40 = v27 + 10 * v40 - 48;
      unsigned int v41 = *++v14;
      unsigned int v27 = v41;
    }
    while (v41 - 48 < 0xA);
    if (v40 >= 0x135)
    {
LABEL_80:
      *__error() = 34;
      uint64_t v35 = 0x7FF0000000000000;
LABEL_66:
      double v18 = *(double *)&v35;
      goto LABEL_28;
    }
    if (v40 == 308)
    {
      BOOL v42 = v16 > 1.79769313;
      if (v36 == 45) {
        BOOL v42 = v16 < 2.22507386;
      }
      if (v42) {
        goto LABEL_80;
      }
    }
    else
    {
      double v39 = 1.0;
      if (v40 <= 7) {
        goto LABEL_90;
      }
    }
    double v39 = 1.0;
    do
    {
      double v39 = v39 * 100000000.0;
      v40 -= 8;
    }
    while (v40 > 7);
LABEL_90:
    while (v40)
    {
      double v39 = v39 * 10.0;
      --v40;
    }
    goto LABEL_92;
  }
LABEL_24:
  BOOL v15 = v8 == 45;
  double v16 = INFINITY;
  double v17 = -INFINITY;
LABEL_25:
  if (v15) {
    double v18 = v17;
  }
  else {
    double v18 = v16;
  }
LABEL_28:
  double result = __error();
  if (*result == 34 && v18 == INFINITY)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Out of range value");
    uint64_t v44 = (void (*)(void *))MEMORY[0x263F8C068];
    unsigned int v45 = (struct type_info *)off_2649E1230;
    uint64_t v46 = MEMORY[0x263F8C390] + 16;
    goto LABEL_100;
  }
  if (v14 == v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No conversion could be performed");
    uint64_t v44 = (void (*)(void *))MEMORY[0x263F8C080];
    unsigned int v45 = (struct type_info *)off_2649E1238;
    uint64_t v46 = MEMORY[0x263F8C3A0] + 16;
LABEL_100:
    exception->__vftable = (std::logic_error_vtbl *)v46;
    __cxa_throw(exception, v45, v44);
  }
  int v54 = (unsigned char *)(v14 - v7);
  *(double *)(a2 + *(void *)(a1 + 96)) = v18;
  std::string::size_type v20 = *(unsigned __int8 *)(a3 + 23);
  if ((v20 & 0x80u) != 0) {
    std::string::size_type v20 = *(void *)(a3 + 8);
  }
  v52.__r_.__value_.__r.__words[0] = v20;
  if (v14 - v7 > v20) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  std::string::size_type v21 = *(unsigned __int8 *)(a3 + 23);
  if ((v21 & 0x80u) != 0) {
    std::string::size_type v21 = *(void *)(a3 + 8);
  }
  if ((unint64_t)v54 < v21)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v53);
    float v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Some trailing characters could not be parsed: '", 47);
    std::string::basic_string(&v52, (const std::string *)a3, (std::string::size_type)v54, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v56);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v48 = &v52;
    }
    else {
      float v48 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v52.__r_.__value_.__l.__size_;
    }
    uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"'", 1);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    unint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v51, &v52);
    v51->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  return result;
}

void sub_22E9E16C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_22E9E175C(void *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v27 = va_arg(va1, void);
  uint64_t v29 = va_arg(va1, void);
  uint64_t v30 = va_arg(va1, void);
  __cxa_free_exception(v5);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)va1);
    unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((uint64_t *)va1, (uint64_t)"Invalid Parameter format for ", 29);
    int v9 = *(char *)(v4 + 47);
    if (v9 >= 0) {
      uint64_t v10 = v4 + 24;
    }
    else {
      uint64_t v10 = *(void *)(v4 + 24);
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(v4 + 47);
    }
    else {
      uint64_t v11 = *(void *)(v4 + 32);
    }
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" expect ", 8);
    uint64_t v16 = *(void *)(v4 + 48);
    uint64_t v15 = v4 + 48;
    uint64_t v14 = v16;
    int v17 = *(char *)(v15 + 23);
    if (v17 >= 0) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = v14;
    }
    if (v17 >= 0) {
      uint64_t v19 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      uint64_t v19 = *(void *)(v15 + 8);
    }
    std::string::size_type v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v18, v19);
    std::string::size_type v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" but value='", 12);
    int v22 = *(char *)(v3 + 23);
    if (v22 >= 0) {
      uint64_t v23 = v3;
    }
    else {
      uint64_t v23 = *(void *)v3;
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(v3 + 23);
    }
    else {
      uint64_t v24 = *(void *)(v3 + 8);
    }
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
    LOBYTE(v27) = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)va, 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, (const std::string *)va);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  JUMPOUT(0x22E9E18D8);
}

void sub_22E9E1774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = a13;
  a13 = 0;
  if (v14) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  }
  _Unwind_Resume(a1);
}

void sub_22E9E17A0()
{
}

void sub_22E9E19D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<double>,double>::Check(uint64_t result, uint64_t a2)
{
  double v2 = *(double *)(a2 + *(void *)(result + 96));
  if (*(unsigned char *)(result + 112))
  {
    double v3 = *(double *)(result + 120);
    if (*(unsigned char *)(result + 113))
    {
      if (v2 < v3 || v2 > *(double *)(result + 128))
      {
        uint64_t v4 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
        int v5 = (void *)std::ostream::operator<<();
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for Parameter ", 15);
        int v7 = *(char *)(v4 + 47);
        if (v7 >= 0) {
          uint64_t v8 = v4 + 24;
        }
        else {
          uint64_t v8 = *(void *)(v4 + 24);
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(v4 + 47);
        }
        else {
          uint64_t v9 = *(void *)(v4 + 32);
        }
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" exceed bound [", 15);
        uint64_t v11 = (void *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v66, 1);
        uint64_t v12 = (void *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 93;
        int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v66, 1);
        v66.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v66, 1);
        int v14 = *(char *)(v4 + 47);
        if (v14 >= 0) {
          uint64_t v15 = v4 + 24;
        }
        else {
          uint64_t v15 = *(void *)(v4 + 24);
        }
        if (v14 >= 0) {
          uint64_t v16 = *(unsigned __int8 *)(v4 + 47);
        }
        else {
          uint64_t v16 = *(void *)(v4 + 32);
        }
        int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v15, v16);
        uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        uint64_t v21 = *(void *)(v4 + 72);
        uint64_t v20 = v4 + 72;
        uint64_t v19 = v21;
        int v22 = *(char *)(v20 + 23);
        if (v22 >= 0) {
          uint64_t v23 = v20;
        }
        else {
          uint64_t v23 = v19;
        }
        if (v22 >= 0) {
          uint64_t v24 = *(unsigned __int8 *)(v20 + 23);
        }
        else {
          uint64_t v24 = *(void *)(v20 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v66);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
      }
    }
    else if (v2 < v3)
    {
      uint64_t v46 = result;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
      float v47 = (void *)std::ostream::operator<<();
      float v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" for Parameter ", 15);
      int v49 = *(char *)(v46 + 47);
      if (v49 >= 0) {
        uint64_t v50 = v46 + 24;
      }
      else {
        uint64_t v50 = *(void *)(v46 + 24);
      }
      if (v49 >= 0) {
        uint64_t v51 = *(unsigned __int8 *)(v46 + 47);
      }
      else {
        uint64_t v51 = *(void *)(v46 + 32);
      }
      std::string v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" should be greater equal to ", 28);
      float v53 = (void *)std::ostream::operator<<();
      v66.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v66, 1);
      int v54 = *(char *)(v46 + 47);
      if (v54 >= 0) {
        uint64_t v55 = v46 + 24;
      }
      else {
        uint64_t v55 = *(void *)(v46 + 24);
      }
      if (v54 >= 0) {
        uint64_t v56 = *(unsigned __int8 *)(v46 + 47);
      }
      else {
        uint64_t v56 = *(void *)(v46 + 32);
      }
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v55, v56);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      uint64_t v61 = *(void *)(v46 + 72);
      uint64_t v60 = v46 + 72;
      uint64_t v59 = v61;
      int v62 = *(char *)(v60 + 23);
      if (v62 >= 0) {
        uint64_t v63 = v60;
      }
      else {
        uint64_t v63 = v59;
      }
      if (v62 >= 0) {
        uint64_t v64 = *(unsigned __int8 *)(v60 + 23);
      }
      else {
        uint64_t v64 = *(void *)(v60 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v63, v64);
      v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v65, &v66);
      v65->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
    }
  }
  else if (*(unsigned char *)(result + 113) && v2 > *(double *)(result + 128))
  {
    uint64_t v26 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
    uint64_t v27 = (void *)std::ostream::operator<<();
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for Parameter ", 15);
    int v29 = *(char *)(v26 + 47);
    if (v29 >= 0) {
      uint64_t v30 = v26 + 24;
    }
    else {
      uint64_t v30 = *(void *)(v26 + 24);
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(v26 + 47);
    }
    else {
      uint64_t v31 = *(void *)(v26 + 32);
    }
    unint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" should be smaller equal to ", 28);
    uint64_t v33 = (void *)std::ostream::operator<<();
    v66.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v66, 1);
    int v34 = *(char *)(v26 + 47);
    if (v34 >= 0) {
      uint64_t v35 = v26 + 24;
    }
    else {
      uint64_t v35 = *(void *)(v26 + 24);
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(v26 + 47);
    }
    else {
      uint64_t v36 = *(void *)(v26 + 32);
    }
    BOOL v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v35, v36);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    uint64_t v41 = *(void *)(v26 + 72);
    uint64_t v40 = v26 + 72;
    uint64_t v39 = v41;
    int v42 = *(char *)(v40 + 23);
    if (v42 >= 0) {
      uint64_t v43 = v40;
    }
    else {
      uint64_t v43 = v39;
    }
    if (v42 >= 0) {
      uint64_t v44 = *(unsigned __int8 *)(v40 + 23);
    }
    else {
      uint64_t v44 = *(void *)(v40 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v43, v44);
    unsigned int v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v45, &v66);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  return result;
}

void sub_22E9E1F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<double>,double>::GetStringValue(void *a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(void *, void *, double))(*a1 + 64))(a1, v5, *(double *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v5[1] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v7);
}

void sub_22E9E20C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<double>,double>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  int v4 = *(char *)(a1 + 71);
  if (v4 >= 0) {
    uint64_t v5 = a1 + 48;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 56);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(unsigned char *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  uint64_t v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)uint64_t v8 = v10;
  *(void *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v14);
}

void sub_22E9E22FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<double>,double>::PrintDefaultValueString(double *a1)
{
  return (*(uint64_t (**)(double))(*(void *)a1 + 64))(a1[13]);
}

uint64_t dmlc::parameter::FieldEntry<double>::PrintValue(uint64_t a1, void *a2)
{
  *(void *)((char *)a2 + *(void *)(*a2 - 24) + 16) = 17;
  return std::ostream::operator<<();
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<double>,double>::set_lower_bound(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  *(unsigned char *)(result + 112) = 1;
  return result;
}

void std::vector<xgboost::TreeGenReg const*>::__throw_length_error[abi:ne180100]()
{
}

void std::__function::__func<xgboost::$_1,std::allocator<xgboost::$_1>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::~__func()
{
}

void *std::__function::__func<xgboost::$_1,std::allocator<xgboost::$_1>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E24D490;
  return result;
}

void std::__function::__func<xgboost::$_1,std::allocator<xgboost::$_1>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator()()
{
}

void sub_22E9E247C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C405A4AFA71);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::$_1,std::allocator<xgboost::$_1>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::$_1,std::allocator<xgboost::$_1>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::target_type()
{
}

void xgboost::TextGenerator::Indicator(xgboost::FeatureMap **this@<X0>, const xgboost::RegTree *a2@<X1>, int __val@<W2>, std::string *a4@<X8>)
{
  v31[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72040, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72040))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72128, "{nid}:[{fname}] yes={yes},no={no}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72128, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72040);
  }
  uint64_t v8 = *((void *)a2 + 20) + 20 * __val;
  int v9 = *(_DWORD *)(v8 + 12);
  long long v10 = (int *)(v8 + 8);
  uint64_t v11 = (int *)(v8 + 4);
  if (v9 < 0) {
    uint64_t v11 = v10;
  }
  int v12 = *v11;
  std::to_string(&v22, __val);
  std::string::basic_string[abi:ne180100]<0>(v24, "{nid}");
  std::string v25 = v22;
  memset(&v22, 0, sizeof(v22));
  uint64_t v21 = xgboost::FeatureMap::Name(this[1], v9 & 0x7FFFFFFF);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const*,0>(v26, &v21);
  std::to_string(&v20, v12);
  std::string::basic_string[abi:ne180100]<0>(v27, "{yes}");
  std::string v28 = v20;
  memset(&v20, 0, sizeof(v20));
  uint64_t v13 = *((void *)a2 + 20) + 20 * __val;
  int v14 = *(_DWORD *)(v13 + 12);
  uint64_t v15 = (int *)(v13 + 4);
  uint64_t v16 = (int *)(v13 + 8);
  if (v14 < 0) {
    uint64_t v16 = v15;
  }
  std::to_string(&__p, *v16);
  std::string::basic_string[abi:ne180100]<0>(v29, "{no}");
  long long v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v31[0] = *((void *)&__p.__r_.__value_.__l + 2);
  memset(&__p, 0, sizeof(__p));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v23, v24, 4);
  xgboost::TreeGenerator::Match(a4, (uint64_t)qword_26AD72128, v23);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v23, (void *)v23[1]);
  for (uint64_t i = 0; i != -24; i -= 6)
  {
    int v18 = &v24[i];
    if (SHIBYTE(v31[i]) < 0) {
      operator delete((void *)v18[21]);
    }
    if (*((char *)v18 + 167) < 0) {
      operator delete((void *)v18[18]);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_22E9E2784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
}

void xgboost::TextGenerator::Categorical(xgboost::TextGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, xgboost::RegTree *a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  int v6 = (int)a3;
  xgboost::GetSplitCategories(a2, a3, (char **)v12);
  xgboost::PrintCatsAsSet(v12);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72048, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72048))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72140, "{tabs}{nid}:[{fname}:{cond}] yes={right},no={left},missing={missing}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72140, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72048);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v11;
  }
  xgboost::TextGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, v6, (uint64_t)qword_26AD72140, (long long *)&__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_22E9E29B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void xgboost::TextGenerator::Integer(xgboost::TextGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, int a4@<W3>, std::string *a5@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72050, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72050))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72158, "{tabs}{nid}:[{fname}<{cond}] yes={left},no={right},missing={missing}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72158, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72050);
  }
  float v10 = *(float *)(*((void *)a2 + 20) + 20 * a3 + 16);
  unsigned int v11 = vcvtms_s32_f32(v10);
  if (floorf(v10) == v10) {
    int v12 = v11;
  }
  else {
    int v12 = v11 + 1;
  }
  std::to_string(&v13, v12);
  xgboost::TextGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, a3, (uint64_t)qword_26AD72158, (long long *)&v13, a4);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_22E9E2B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void xgboost::TextGenerator::Quantitive(xgboost::TextGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, int a4@<W3>, std::string *a5@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72058, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72058))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72170, "{tabs}{nid}:[{fname}<{cond}] yes={left},no={right},missing={missing}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72170, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72058);
  }
  xgboost::TreeGenerator::ToStr<float>();
  xgboost::TextGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, a3, (uint64_t)qword_26AD72170, &__p, a4);
  if (v11 < 0) {
    operator delete((void *)__p);
  }
}

void sub_22E9E2C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void xgboost::TextGenerator::NodeStat(std::string *a1@<X8>)
{
  v16[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72060, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72060))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72188, ",gain={loss_chg},cover={sum_hess}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72188, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72060);
  }
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v11, "{loss_chg}");
  long long v12 = *(_OWORD *)v8;
  uint64_t v13 = v9;
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v14, "{sum_hess}");
  long long v15 = *(_OWORD *)__p;
  v16[0] = v7;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v10, v11, 2);
  xgboost::TreeGenerator::Match(a1, (uint64_t)qword_26AD72188, v10);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v10, (void *)v10[1]);
  for (uint64_t i = 0; i != -12; i -= 6)
  {
    uint64_t v5 = &v11[i];
    if (SHIBYTE(v16[i]) < 0) {
      operator delete((void *)v5[9]);
    }
    if (*((char *)v5 + 71) < 0) {
      operator delete((void *)v5[6]);
    }
  }
}

void sub_22E9E2E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
}

void xgboost::TextGenerator::PlainNode(xgboost::TextGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, int a4@<W3>, std::string *a5@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72068, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72068))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD721A0, "{tabs}{nid}:[f{fname}<{cond}] yes={left},no={right},missing={missing}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD721A0, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72068);
  }
  xgboost::TreeGenerator::ToStr<float>();
  xgboost::TextGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, a3, (uint64_t)qword_26AD721A0, &__p, a4);
  if (v11 < 0) {
    operator delete((void *)__p);
  }
}

void sub_22E9E301C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void xgboost::TreeGenerator::SplitNode(xgboost::TreeGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v10 = *(_DWORD *)(*((void *)a2 + 20) + 20 * (int)a3 + 12) & 0x7FFFFFFF;
  LODWORD(v28) = v10;
  a5[1] = 0;
  a5[2] = 0;
  int v11 = *(unsigned __int8 *)(*((void *)a2 + 29) + (int)a3);
  *a5 = 0;
  BOOL v27 = v11 == 1;
  long long v12 = (xgboost::FeatureMap *)*((void *)this + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v12 + 1) - *(void *)v12) >> 3) > v10)
  {
    *(void *)&long long v25 = &v27;
    *((void *)&v25 + 1) = this;
    uint64_t v26 = &v28;
    switch(xgboost::FeatureMap::TypeOf(v12, v10))
    {
      case 0u:
        xgboost::TreeGenerator::SplitNode(xgboost::RegTree const&,int,unsigned int)::{lambda(void)#2}::operator()((uint64_t)&v25);
        (**(void (***)(long long *__return_ptr, xgboost::TreeGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))this)(&v23, this, a2, a3, a4);
        goto LABEL_13;
      case 1u:
      case 3u:
        xgboost::TreeGenerator::SplitNode(xgboost::RegTree const&,int,unsigned int)::{lambda(void)#2}::operator()((uint64_t)&v25);
        (*(void (**)(long long *__return_ptr, xgboost::TreeGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(void *)this + 24))(&v23, this, a2, a3, a4);
        goto LABEL_13;
      case 2u:
        xgboost::TreeGenerator::SplitNode(xgboost::RegTree const&,int,unsigned int)::{lambda(void)#2}::operator()((uint64_t)&v25);
        (*(void (**)(long long *__return_ptr, xgboost::TreeGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(void *)this + 16))(&v23, this, a2, a3, a4);
        goto LABEL_13;
      case 4u:
        if (!v27)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
          int v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
          int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: is_categorical", 28);
          uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
          std::string v20 = xgboost::FeatureMap::Name(*((xgboost::FeatureMap **)this + 1), v28);
          size_t v21 = strlen(v20);
          std::string v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" in feature map is numerical but tree node is categorical.", 58);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
        }
        (*(void (**)(long long *__return_ptr, xgboost::TreeGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(void *)this + 8))(&v23, this, a2, a3, a4);
LABEL_13:
        *(_OWORD *)a5 = v23;
        uint64_t v13 = v24;
        goto LABEL_14;
      default:
        int v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
        dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        long long v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Unknown feature map type.", 25);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
        return;
    }
  }
  if (v11 == 1) {
    (*(void (**)(long long *__return_ptr, xgboost::TreeGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(void *)this + 8))(&v25, this, a2, a3, a4);
  }
  else {
    (*(void (**)(long long *__return_ptr, xgboost::TreeGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(void *)this + 40))(&v25, this, a2, a3, a4);
  }
  *(_OWORD *)a5 = v25;
  uint64_t v13 = v26;
LABEL_14:
  a5[2] = v13;
}

void sub_22E9E339C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void xgboost::TextGenerator::LeafNode(xgboost::TextGenerator *this@<X0>, int a2@<W2>, int a3@<W3>, std::string *a4@<X8>)
{
  v34[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72070, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72070))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD721B8, "{tabs}{nid}:leaf={leaf}{stats}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD721B8, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72070);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72078, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72078))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD721D0, ",cover={cover}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD721D0, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72078);
  }
  xgboost::TreeGenerator::Tabs(&v19, a3);
  std::string::basic_string[abi:ne180100]<0>(v25, "{tabs}");
  std::string v26 = v19;
  memset(&v19, 0, sizeof(v19));
  std::to_string(&v18, a2);
  std::string::basic_string[abi:ne180100]<0>(v27, "{nid}");
  std::string v28 = v18;
  memset(&v18, 0, sizeof(v18));
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v29, "{leaf}");
  long long v30 = *(_OWORD *)v16;
  uint64_t v31 = v17;
  v16[1] = 0;
  uint64_t v17 = 0;
  v16[0] = 0;
  int v9 = *((unsigned __int8 *)this + 296);
  if (v9)
  {
    xgboost::TreeGenerator::ToStr<float>();
    std::string::basic_string[abi:ne180100]<0>(v21, "{cover}");
    long long v23 = *(_OWORD *)v12;
    uint64_t v24 = v13;
    HIBYTE(v13) = 0;
    v12[0] = 0;
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v14, (const void **)v21, 1);
    xgboost::TreeGenerator::Match(&__p, (uint64_t)qword_26AD721D0, v14);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_22EA3D4EA);
  }
  std::string::basic_string[abi:ne180100]<0>(v32, "{stats}");
  long long v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v34[0] = *((void *)&__p.__r_.__value_.__l + 2);
  memset(&__p, 0, sizeof(__p));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v20, v25, 4);
  xgboost::TreeGenerator::Match(a4, (uint64_t)qword_26AD721B8, v20);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v20, (void *)v20[1]);
  for (uint64_t i = 0; i != -24; i -= 6)
  {
    int v11 = &v25[i];
    if (SHIBYTE(v34[i]) < 0) {
      operator delete((void *)v11[21]);
    }
    if (*((char *)v11 + 167) < 0) {
      operator delete((void *)v11[18]);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v14, (void *)v14[1]);
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)v23);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(v12[0]);
    }
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_22E9E3774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_22E9E38B8()
{
}

void sub_22E9E38C4()
{
}

void sub_22E9E38D4()
{
}

void xgboost::TextGenerator::BuildTree(xgboost::TextGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  v34[1] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*((void *)a2 + 20) + 20 * (int)a3 + 4) == -1)
  {
    unint64_t v10 = *(void (**)(void))(*(void *)this + 56);
    v10();
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72080, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AD72080))
    {
      std::string::basic_string[abi:ne180100]<0>(qword_26AD721E8, "{parent}{stat}\n{left}\n{right}");
      __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD721E8, &dword_22E895000);
      __cxa_guard_release(&qword_26AD72080);
    }
    (*(void (**)(void **__return_ptr, xgboost::TextGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(void *)this + 48))(v20, this, a2, a3, a4);
    std::string::basic_string[abi:ne180100]<0>(v23, "{parent}");
    long long v24 = *(_OWORD *)v20;
    uint64_t v25 = v21;
    v20[1] = 0;
    uint64_t v21 = 0;
    v20[0] = 0;
    if (*((unsigned char *)this + 296)) {
      (*(void (**)(void **__return_ptr, xgboost::TextGenerator *, const xgboost::RegTree *, uint64_t))(*(void *)this + 32))(v18, this, a2, a3);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v18, (char *)&unk_22EA3D4EA);
    }
    std::string::basic_string[abi:ne180100]<0>(v26, "{stat}");
    long long v27 = *(_OWORD *)v18;
    uint64_t v28 = v19;
    v18[1] = 0;
    uint64_t v19 = 0;
    v18[0] = 0;
    uint64_t v11 = (a4 + 1);
    (*(void (**)(void **__return_ptr, xgboost::TextGenerator *, const xgboost::RegTree *, void, uint64_t))(*(void *)this + 64))(v16, this, a2, *(unsigned int *)(*((void *)a2 + 20) + 20 * (int)a3 + 4), v11);
    std::string::basic_string[abi:ne180100]<0>(v29, "{left}");
    long long v30 = *(_OWORD *)v16;
    uint64_t v31 = v17;
    v16[1] = 0;
    uint64_t v17 = 0;
    v16[0] = 0;
    (*(void (**)(void **__return_ptr, xgboost::TextGenerator *, const xgboost::RegTree *, void, uint64_t))(*(void *)this + 64))(__p, this, a2, *(unsigned int *)(*((void *)a2 + 20) + 20 * (int)a3 + 8), v11);
    std::string::basic_string[abi:ne180100]<0>(v32, "{right}");
    long long v33 = *(_OWORD *)__p;
    v34[0] = v15;
    __p[1] = 0;
    uint64_t v15 = 0;
    __p[0] = 0;
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v22, v23, 4);
    xgboost::TreeGenerator::Match(a5, (uint64_t)qword_26AD721E8, v22);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v22, (void *)v22[1]);
    for (uint64_t i = 0; i != -24; i -= 6)
    {
      uint64_t v13 = &v23[i];
      if (SHIBYTE(v34[i]) < 0) {
        operator delete((void *)v13[21]);
      }
      if (*((char *)v13 + 167) < 0) {
        operator delete((void *)v13[18]);
      }
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[0]);
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(v18[0]);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
  }
}

void sub_22E9E3CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_22E9E3DCC()
{
}

void xgboost::TextGenerator::~TextGenerator(xgboost::TextGenerator *this)
{
  xgboost::TreeGenerator::~TreeGenerator(this);

  JUMPOUT(0x230FA80D0);
}

void xgboost::TextGenerator::BuildTree(xgboost::TextGenerator *this, const xgboost::RegTree *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72090, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72090))
  {
    std::string::basic_string[abi:ne180100]<0>(_ZGRZN7xgboost13TextGenerator9BuildTreeERKNS_7RegTreeEE13kTreeTemplate_, "{nodes}\n");
    __cxa_atexit(MEMORY[0x263F8C0B8], _ZGRZN7xgboost13TextGenerator9BuildTreeERKNS_7RegTreeEE13kTreeTemplate_, &dword_22E895000);
    qword_26AD72088 = (uint64_t)_ZGRZN7xgboost13TextGenerator9BuildTreeERKNS_7RegTreeEE13kTreeTemplate_;
    __cxa_guard_release(&qword_26AD72090);
  }
  uint64_t v4 = qword_26AD72088;
  (*(void (**)(void **__return_ptr, xgboost::TextGenerator *, const xgboost::RegTree *, void, void))(*(void *)this + 64))(v7, this, a2, 0, 0);
  std::string::basic_string[abi:ne180100]<0>(v11, "{nodes}");
  *(_OWORD *)std::string __p = *(_OWORD *)v7;
  uint64_t v14 = v8;
  v7[1] = 0;
  uint64_t v8 = 0;
  v7[0] = 0;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v9, (const void **)v11, 1);
  xgboost::TreeGenerator::Match(&v10, v4, v9);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v9, (void *)v9[1]);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v10;
  }
  else {
    uint64_t v5 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v10.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 4, (uint64_t)v5, size);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_22E9E3FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
}

void *xgboost::TreeGenerator::Indicator@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_22EA3D4EA);
}

void *xgboost::TreeGenerator::Integer@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_22EA3D4EA);
}

void *xgboost::TreeGenerator::Quantitive@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_22EA3D4EA);
}

void *xgboost::TreeGenerator::NodeStat@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_22EA3D4EA);
}

void xgboost::TreeGenerator::BuildTree(xgboost::TreeGenerator *this, const xgboost::RegTree *a2)
{
  double v2 = (void *)((char *)this + 32);
  (*(void (**)(void **__return_ptr))(*(void *)this + 64))(__p);
  if ((v6 & 0x80u) == 0) {
    double v3 = __p;
  }
  else {
    double v3 = (void **)__p[0];
  }
  if ((v6 & 0x80u) == 0) {
    uint64_t v4 = v6;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E9E4118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::TreeGenerator::Match(std::string *this, uint64_t a2, void *a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    *this = *(std::string *)a2;
  }
  uint64_t v7 = (void *)*a3;
  uint64_t v5 = a3 + 1;
  unsigned __int8 v6 = v7;
  if (v7 != v5)
  {
    do
    {
      std::string::size_type __pos = 0;
      int64_t size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) == 0) {
        int v9 = this;
      }
      else {
        int v9 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      int v10 = *((char *)v6 + 55);
      if (v10 >= 0) {
        uint64_t v11 = (char *)(v6 + 4);
      }
      else {
        uint64_t v11 = (char *)v6[4];
      }
      if (v10 >= 0) {
        int64_t v12 = *((unsigned __int8 *)v6 + 55);
      }
      else {
        int64_t v12 = v6[5];
      }
      if (v12)
      {
        if ((size & 0x80u) != 0) {
          int64_t size = this->__r_.__value_.__l.__size_;
        }
        if (size < v12) {
          goto LABEL_18;
        }
        std::string v20 = (char *)v9 + size;
        int v21 = *v11;
        char v22 = v9;
        while (1)
        {
          int64_t v23 = size - v12;
          if (v23 == -1) {
            goto LABEL_18;
          }
          long long v24 = (char *)memchr(v22, v21, v23 + 1);
          if (!v24) {
            goto LABEL_18;
          }
          uint64_t v25 = v24;
          if (!memcmp(v24, v11, v12)) {
            break;
          }
          char v22 = (std::string *)(v25 + 1);
          int64_t size = v20 - (v25 + 1);
          if (size < v12) {
            goto LABEL_18;
          }
        }
        if (v25 == v20 || (std::string::size_type __pos = v25 - (char *)v9, v25 - (char *)v9 == -1)) {
LABEL_18:
        }
          dmlc::LogCheckFormat<unsigned long,unsigned long>();
      }
      if (*((char *)v6 + 55) < 0) {
        std::string::size_type v13 = v6[5];
      }
      else {
        std::string::size_type v13 = *((unsigned __int8 *)v6 + 55);
      }
      int v14 = *((char *)v6 + 79);
      if (v14 >= 0) {
        uint64_t v15 = (const std::string::value_type *)(v6 + 7);
      }
      else {
        uint64_t v15 = (const std::string::value_type *)v6[7];
      }
      if (v14 >= 0) {
        std::string::size_type v16 = *((unsigned __int8 *)v6 + 79);
      }
      else {
        std::string::size_type v16 = v6[8];
      }
      std::string::replace(this, __pos, v13, v15, v16);
      uint64_t v17 = (void *)v6[1];
      if (v17)
      {
        do
        {
          std::string v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          std::string v18 = (void *)v6[2];
          BOOL v19 = *v18 == (void)v6;
          unsigned __int8 v6 = v18;
        }
        while (!v19);
      }
      unsigned __int8 v6 = v18;
    }
    while (v18 != v5);
  }
}

void sub_22E9E43A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

char *xgboost::FeatureMap::Name(xgboost::FeatureMap *this, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) <= a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  double result = (char *)(*(void *)this + 24 * a2);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

void sub_22E9E4514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const*,0>(void *a1, char **a2)
{
  uint64_t v4 = std::string::basic_string[abi:ne180100]<0>(a1, "{fname}");
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, *a2);
  return a1;
}

void sub_22E9E4588(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_22E9E4610(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void xgboost::TextGenerator::SplitNodeImpl(std::string *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, long long *a6, int a7)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  int v13 = *(_DWORD *)(*(void *)(a3 + 160) + 20 * a4 + 12);
  xgboost::TreeGenerator::Tabs(&v27, a7);
  std::string::basic_string[abi:ne180100]<0>(v29, "{tabs}");
  std::string v30 = v27;
  memset(&v27, 0, sizeof(v27));
  std::to_string(&v26, a4);
  std::string::basic_string[abi:ne180100]<0>(v31, "{nid}");
  std::string v32 = v26;
  memset(&v26, 0, sizeof(v26));
  uint64_t v14 = *(xgboost::FeatureMap **)(a2 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v14 + 1) - *(void *)v14) >> 3) <= (v13 & 0x7FFFFFFFu))
  {
    std::to_string(&v25, v13 & 0x7FFFFFFF);
  }
  else
  {
    uint64_t v15 = xgboost::FeatureMap::Name(v14, v13 & 0x7FFFFFFF);
    std::string::basic_string[abi:ne180100]<0>(&v25, v15);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "{fname}");
  std::string v34 = v25;
  memset(&v25, 0, sizeof(v25));
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(v35, a6);
  std::to_string(&v24, *(_DWORD *)(*(void *)(a3 + 160) + 20 * a4 + 4));
  std::string::basic_string[abi:ne180100]<0>(v36, "{left}");
  std::string v37 = v24;
  memset(&v24, 0, sizeof(v24));
  std::to_string(&v23, *(_DWORD *)(*(void *)(a3 + 160) + 20 * a4 + 8));
  std::string::basic_string[abi:ne180100]<0>(v38, "{right}");
  std::string v39 = v23;
  memset(&v23, 0, sizeof(v23));
  uint64_t v16 = *(void *)(a3 + 160) + 20 * a4;
  int v17 = *(_DWORD *)(v16 + 12);
  std::string v18 = (int *)(v16 + 4);
  BOOL v19 = (int *)(v16 + 8);
  if (v17 < 0) {
    BOOL v19 = v18;
  }
  std::to_string(&__p, *v19);
  std::string::basic_string[abi:ne180100]<0>(v40, "{missing}");
  std::string v41 = __p;
  memset(&__p, 0, sizeof(__p));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v28, v29, 7);
  xgboost::TreeGenerator::Match(a1, a5, v28);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v28, (void *)v28[1]);
  uint64_t v20 = 42;
  do
  {
    int v21 = &v29[v20];
    if (SHIBYTE(v29[v20 - 1]) < 0) {
      operator delete((void *)*(v21 - 3));
    }
    if (*((char *)v21 - 25) < 0) {
      operator delete((void *)*(v21 - 6));
    }
    v20 -= 6;
  }
  while (v20 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_22E9E4978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,void *a46,uint64_t a47,char a48)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a45, a46);
  for (uint64_t i = 288; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair((uint64_t)(&a48 + i));
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

void xgboost::TreeGenerator::Tabs(std::string *this, int a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    int v2 = a2;
    do
    {
      std::string::push_back(this, 9);
      --v2;
    }
    while (v2);
  }
}

void sub_22E9E4AF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(void *a1, long long *a2)
{
  uint64_t v4 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, "{cond}") + 3);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_22E9E4B6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::TreeGenerator::ToStr<float>()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  *(void *)((char *)&v3[2] + *(void *)(v3[0] - 24)) = 9;
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x263F8C2B8];
  uint64_t v0 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v3[0] = v0;
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x230FA8020](&v5);
}

void sub_22E9E4D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::FeatureMap::TypeOf(xgboost::FeatureMap *this, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) <= a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  return *(unsigned int *)(*((void *)this + 3) + 4 * a2);
}

void sub_22E9E4E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::TreeGenerator::SplitNode(xgboost::RegTree const&,int,unsigned int)::{lambda(void)#2}::operator()(uint64_t a1)
{
  if (**(unsigned char **)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
    char v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: is_numerical", 26);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    uint64_t v7 = xgboost::FeatureMap::Name(*(xgboost::FeatureMap **)(v2 + 8), **(unsigned int **)(a1 + 16));
    size_t v8 = strlen(v7);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" in feature map is categorical but tree node is numerical.", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
  }
}

void sub_22E9E4F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::TreeGenerator::~TreeGenerator(xgboost::TreeGenerator *this)
{
  *(void *)this = &unk_26E24D5A8;
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *((void *)this + 2) = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)((char *)this + *(void *)(v3 - 24) + 16) = *(void *)(v2 + 64);
  *((void *)this + 4) = v4;
  *((void *)this + 5) = MEMORY[0x263F8C318] + 16;
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x230FA8020]((char *)this + 144);
}

void std::__function::__func<xgboost::$_2,std::allocator<xgboost::$_2>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::~__func()
{
}

void *std::__function::__func<xgboost::$_2,std::allocator<xgboost::$_2>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E24D628;
  return result;
}

void std::__function::__func<xgboost::$_2,std::allocator<xgboost::$_2>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator()()
{
}

void sub_22E9E5194(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C405A4AFA71);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::$_2,std::allocator<xgboost::$_2>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::$_2,std::allocator<xgboost::$_2>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::target_type()
{
}

void xgboost::JsonGenerator::Indicator(xgboost::FeatureMap **this@<X0>, const xgboost::RegTree *a2@<X1>, int __val@<W2>, unsigned int a4@<W3>, std::string *a5@<X8>)
{
  v37[1] = *MEMORY[0x263EF8340];
  uint64_t v10 = *((void *)a2 + 20) + 20 * __val;
  int v11 = *(_DWORD *)(v10 + 12);
  uint64_t v12 = (int *)(v10 + 8);
  int v13 = (int *)(v10 + 4);
  if (v11 < 0) {
    int v13 = v12;
  }
  int v14 = *v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72098, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72098))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72200, " \"nodeid\": {nid}, \"depth\": {depth}, \"split\": \"{fname}\", \"yes\": {yes}, \"no\": {no}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72200, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72098);
  }
  int v15 = *(_DWORD *)(*((void *)a2 + 20) + 20 * __val + 12);
  std::to_string(&v26, __val);
  std::string::basic_string[abi:ne180100]<0>(v28, "{nid}");
  std::string v29 = v26;
  memset(&v26, 0, sizeof(v26));
  std::to_string(&v25, a4);
  std::string::basic_string[abi:ne180100]<0>(v30, "{depth}");
  std::string v31 = v25;
  memset(&v25, 0, sizeof(v25));
  std::string v24 = xgboost::FeatureMap::Name(this[1], v15 & 0x7FFFFFFF);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const*,0>(v32, &v24);
  std::to_string(&v23, v14);
  std::string::basic_string[abi:ne180100]<0>(v33, "{yes}");
  std::string v34 = v23;
  memset(&v23, 0, sizeof(v23));
  uint64_t v16 = *((void *)a2 + 20) + 20 * __val;
  int v17 = *(_DWORD *)(v16 + 12);
  std::string v18 = (int *)(v16 + 4);
  BOOL v19 = (int *)(v16 + 8);
  if (v17 < 0) {
    BOOL v19 = v18;
  }
  std::to_string(&v22, *v19);
  std::string::basic_string[abi:ne180100]<0>(v35, "{no}");
  long long v36 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
  v37[0] = *((void *)&v22.__r_.__value_.__l + 2);
  memset(&v22, 0, sizeof(v22));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v27, v28, 5);
  xgboost::TreeGenerator::Match(a5, (uint64_t)qword_26AD72200, v27);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v27, (void *)v27[1]);
  for (uint64_t i = 0; i != -30; i -= 6)
  {
    int v21 = &v28[i];
    if (SHIBYTE(v37[i]) < 0) {
      operator delete((void *)v21[27]);
    }
    if (*((char *)v21 + 215) < 0) {
      operator delete((void *)v21[24]);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_22E9E54FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38)
{
}

void xgboost::JsonGenerator::Categorical(xgboost::JsonGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, xgboost::RegTree *a3@<X2>, unsigned int a4@<W3>, std::string *a5@<X8>)
{
  int v6 = (int)a3;
  xgboost::GetSplitCategories(a2, a3, (char **)&v18);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD720A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD720A0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72218, " \"nodeid\": {nid}, \"depth\": {depth}, \"split\": \"{fname}\", \"split_condition\": {cond}, \"yes\": {right}, \"no\": {left}, \"missing\": {missing}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72218, &dword_22E895000);
    __cxa_guard_release(&qword_26AD720A0);
  }
  std::string::basic_string[abi:ne180100]<0>(&v17, "[");
  uint64_t v10 = v18;
  if (v19 != v18)
  {
    unint64_t v11 = 0;
    do
    {
      std::to_string(&v16, v10[v11]);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = &v16;
      }
      else {
        uint64_t v12 = (std::string *)v16.__r_.__value_.__r.__words[0];
      }
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v16.__r_.__value_.__l.__size_;
      }
      std::string::append(&v17, (const std::string::value_type *)v12, size);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      uint64_t v10 = v18;
      unint64_t v14 = (v19 - (unsigned char *)v18) >> 2;
      if (v11 != v14 - 1)
      {
        std::string::append(&v17, ", ");
        uint64_t v10 = v18;
        unint64_t v14 = (v19 - (unsigned char *)v18) >> 2;
      }
      ++v11;
    }
    while (v11 < v14);
  }
  std::string::append(&v17, "]");
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v17;
  }
  xgboost::JsonGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, v6, (uint64_t)qword_26AD72218, (long long *)&__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (v18)
  {
    BOOL v19 = v18;
    operator delete(v18);
  }
}

void sub_22E9E5800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::JsonGenerator::Integer(xgboost::JsonGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, std::string *a5@<X8>)
{
  float v10 = *(float *)(*((void *)a2 + 20) + 20 * a3 + 16);
  unsigned int v11 = vcvtms_s32_f32(v10);
  if (floorf(v10) == v10) {
    int v12 = v11;
  }
  else {
    int v12 = v11 + 1;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD720A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD720A8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72230, " \"nodeid\": {nid}, \"depth\": {depth}, \"split\": \"{fname}\", \"split_condition\": {cond}, \"yes\": {left}, \"no\": {right}, \"missing\": {missing}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72230, &dword_22E895000);
    __cxa_guard_release(&qword_26AD720A8);
  }
  std::to_string(&v13, v12);
  xgboost::JsonGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, a3, (uint64_t)qword_26AD72230, (long long *)&v13, a4);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_22E9E5990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void xgboost::JsonGenerator::Quantitive(xgboost::JsonGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, std::string *a5@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD720B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD720B0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72248, " \"nodeid\": {nid}, \"depth\": {depth}, \"split\": \"{fname}\", \"split_condition\": {cond}, \"yes\": {left}, \"no\": {right}, \"missing\": {missing}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72248, &dword_22E895000);
    __cxa_guard_release(&qword_26AD720B0);
  }
  xgboost::TreeGenerator::ToStr<float>();
  xgboost::JsonGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, a3, (uint64_t)qword_26AD72248, &__p, a4);
  if (v11 < 0) {
    operator delete((void *)__p);
  }
}

void sub_22E9E5AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void xgboost::JsonGenerator::NodeStat(std::string *a1@<X8>)
{
  v16[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD720B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD720B8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72260, ", \"gain\": {loss_chg}, \"cover\": {sum_hess}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72260, &dword_22E895000);
    __cxa_guard_release(&qword_26AD720B8);
  }
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v11, "{loss_chg}");
  long long v12 = *(_OWORD *)v8;
  uint64_t v13 = v9;
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v14, "{sum_hess}");
  long long v15 = *(_OWORD *)__p;
  v16[0] = v7;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v10, v11, 2);
  xgboost::TreeGenerator::Match(a1, (uint64_t)qword_26AD72260, v10);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v10, (void *)v10[1]);
  for (uint64_t i = 0; i != -12; i -= 6)
  {
    uint64_t v5 = &v11[i];
    if (SHIBYTE(v16[i]) < 0) {
      operator delete((void *)v5[9]);
    }
    if (*((char *)v5 + 71) < 0) {
      operator delete((void *)v5[6]);
    }
  }
}

void sub_22E9E5CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
}

void xgboost::JsonGenerator::PlainNode(xgboost::JsonGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, std::string *a5@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD720C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD720C0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72278, " \"nodeid\": {nid}, \"depth\": {depth}, \"split\": \"{fname}\", \"split_condition\": {cond}, \"yes\": {left}, \"no\": {right}, \"missing\": {missing}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72278, &dword_22E895000);
    __cxa_guard_release(&qword_26AD720C0);
  }
  xgboost::TreeGenerator::ToStr<float>();
  xgboost::JsonGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, a3, (uint64_t)qword_26AD72278, &__p, a4);
  if (v11 < 0) {
    operator delete((void *)__p);
  }
}

void sub_22E9E5E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void xgboost::JsonGenerator::SplitNode(xgboost::JsonGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  int v5 = a4;
  v35[1] = *MEMORY[0x263EF8340];
  xgboost::TreeGenerator::SplitNode(this, a2, a3, a4, &v21);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD720C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD720C8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72290, "{{properties} {stat}, \"children\": [{left}, {right}\n{indent}]}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72290, &dword_22E895000);
    __cxa_guard_release(&qword_26AD720C8);
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "{properties}");
  int v10 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v23, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else {
    std::string v23 = v21;
  }
  if (*((unsigned char *)this + 296)) {
    (*(void (**)(void **__return_ptr, xgboost::JsonGenerator *, const xgboost::RegTree *, uint64_t))(*(void *)this + 32))(v18, this, a2, a3);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(v18, (char *)&unk_22EA3D4EA);
  }
  std::string::basic_string[abi:ne180100]<0>(v24, "{stat}");
  long long v25 = *(_OWORD *)v18;
  uint64_t v26 = v19;
  v18[1] = 0;
  uint64_t v19 = 0;
  v18[0] = 0;
  (*(void (**)(void **__return_ptr, xgboost::JsonGenerator *, const xgboost::RegTree *, void, void))(*(void *)this + 64))(v16, this, a2, *(unsigned int *)(*((void *)a2 + 20) + 20 * (int)a3 + 4), (v5 + 1));
  std::string::basic_string[abi:ne180100]<0>(v27, "{left}");
  long long v28 = *(_OWORD *)v16;
  uint64_t v29 = v17;
  v16[1] = 0;
  uint64_t v17 = 0;
  v16[0] = 0;
  (*(void (**)(void **__return_ptr, xgboost::JsonGenerator *, const xgboost::RegTree *, void, void))(*(void *)this + 64))(v14, this, a2, *(unsigned int *)(*((void *)a2 + 20) + 20 * (int)a3 + 8), (v5 + 1));
  std::string::basic_string[abi:ne180100]<0>(v30, "{right}");
  long long v31 = *(_OWORD *)v14;
  uint64_t v32 = v15;
  v14[1] = 0;
  uint64_t v15 = 0;
  v14[0] = 0;
  xgboost::JsonGenerator::Indent(&__p, v5);
  std::string::basic_string[abi:ne180100]<0>(v33, "{indent}");
  long long v34 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v35[0] = *((void *)&__p.__r_.__value_.__l + 2);
  memset(&__p, 0, sizeof(__p));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v20, v22, 5);
  xgboost::TreeGenerator::Match(a5, (uint64_t)qword_26AD72290, v20);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v20, (void *)v20[1]);
  for (uint64_t i = 0; i != -30; i -= 6)
  {
    long long v12 = &v22[i];
    if (SHIBYTE(v35[i]) < 0) {
      operator delete((void *)v12[27]);
    }
    if (*((char *)v12 + 215) < 0) {
      operator delete((void *)v12[24]);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    if ((v10 & 0x80000000) == 0) {
      return;
    }
LABEL_24:
    operator delete(v21.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v18[0]);
  if (v10 < 0) {
    goto LABEL_24;
  }
}

void sub_22E9E6254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_22E9E6378()
{
}

void sub_22E9E6384()
{
}

void sub_22E9E638C()
{
}

void xgboost::JsonGenerator::LeafNode(xgboost::JsonGenerator *this@<X0>, int __val@<W2>, std::string *a3@<X8>)
{
  v29[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD720D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD720D0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD722A8, "{ \"nodeid\": {nid}, \"leaf\": {leaf} {stat}}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD722A8, &dword_22E895000);
    __cxa_guard_release(&qword_26AD720D0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD720D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD720D8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD722C0, ", \"cover\": {sum_hess} ");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD722C0, &dword_22E895000);
    __cxa_guard_release(&qword_26AD720D8);
  }
  std::to_string(&v16, __val);
  std::string::basic_string[abi:ne180100]<0>(v22, "{nid}");
  std::string v23 = v16;
  memset(&v16, 0, sizeof(v16));
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v24, "{leaf}");
  long long v25 = *(_OWORD *)v14;
  uint64_t v26 = v15;
  v14[1] = 0;
  uint64_t v15 = 0;
  v14[0] = 0;
  int v7 = *((unsigned __int8 *)this + 296);
  if (v7)
  {
    xgboost::TreeGenerator::ToStr<float>();
    std::string::basic_string[abi:ne180100]<0>(v18, "{sum_hess}");
    long long v20 = *(_OWORD *)v10;
    uint64_t v21 = v11;
    HIBYTE(v11) = 0;
    v10[0] = 0;
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v12, (const void **)v18, 1);
    xgboost::TreeGenerator::Match(&__p, (uint64_t)qword_26AD722C0, v12);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_22EA3D4EA);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "{stat}");
  long long v28 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v29[0] = *((void *)&__p.__r_.__value_.__l + 2);
  memset(&__p, 0, sizeof(__p));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v17, v22, 3);
  xgboost::TreeGenerator::Match(a3, (uint64_t)qword_26AD722A8, v17);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v17, (void *)v17[1]);
  for (uint64_t i = 0; i != -18; i -= 6)
  {
    uint64_t v9 = &v22[i];
    if (SHIBYTE(v29[i]) < 0) {
      operator delete((void *)v9[15]);
    }
    if (*((char *)v9 + 119) < 0) {
      operator delete((void *)v9[12]);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v12, (void *)v12[1]);
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)v20);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(v10[0]);
    }
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_22E9E66DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
}

void sub_22E9E681C()
{
}

void xgboost::JsonGenerator::BuildTree(xgboost::JsonGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  void (**v12)(void **__return_ptr, xgboost::JsonGenerator *, const xgboost::RegTree *, uint64_t, uint64_t);
  uint64_t i;
  const void **v14;
  void *__p[2];
  uint64_t v16;
  std::string v17;
  void v18[3];
  const void *v19[3];
  void v20[3];
  void v21[3];
  std::string v22;
  void v23[3];
  long long v24;
  void v25[2];

  v25[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD720E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD720E0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD722D8, "{newline}{indent}{nodes}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD722D8, &dword_22E895000);
    __cxa_guard_release(&qword_26AD720E0);
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "{newline}");
  if (a4) {
    int v10 = "\n";
  }
  else {
    int v10 = (char *)&unk_22EA3D4EA;
  }
  std::string::basic_string[abi:ne180100]<0>(v20, v10);
  xgboost::JsonGenerator::Indent(&v17, a4);
  std::string::basic_string[abi:ne180100]<0>(v21, "{indent}");
  std::string v22 = v17;
  memset(&v17, 0, sizeof(v17));
  uint64_t v11 = *(void *)this;
  if (*(_DWORD *)(*((void *)a2 + 20) + 20 * (int)a3 + 4) == -1) {
    long long v12 = (void (**)(void **__return_ptr, xgboost::JsonGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(v11 + 56);
  }
  else {
    long long v12 = (void (**)(void **__return_ptr, xgboost::JsonGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(v11 + 48);
  }
  (*v12)(__p, this, a2, a3, a4);
  std::string::basic_string[abi:ne180100]<0>(v23, "{nodes}");
  std::string v24 = *(_OWORD *)__p;
  v25[0] = v16;
  __p[1] = 0;
  std::string v16 = 0;
  __p[0] = 0;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v18, v19, 3);
  xgboost::TreeGenerator::Match(a5, (uint64_t)qword_26AD722D8, v18);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v18, (void *)v18[1]);
  for (uint64_t i = 0; i != -18; i -= 6)
  {
    unint64_t v14 = &v19[i];
    if (SHIBYTE(v25[i]) < 0) {
      operator delete((void *)v14[15]);
    }
    if (*((char *)v14 + 119) < 0) {
      operator delete((void *)v14[12]);
    }
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_22E9E6A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_22E9E6B64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x22E9E6B5CLL);
}

void sub_22E9E6B7C()
{
}

void xgboost::JsonGenerator::~JsonGenerator(xgboost::JsonGenerator *this)
{
  xgboost::TreeGenerator::~TreeGenerator(this);

  JUMPOUT(0x230FA80D0);
}

void xgboost::JsonGenerator::SplitNodeImpl(std::string *a1, uint64_t a2, uint64_t a3, int __val, uint64_t a5, long long *a6, unsigned int a7)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  int v14 = *(_DWORD *)(*(void *)(a3 + 160) + 20 * __val + 12);
  std::to_string(&v28, __val);
  std::string::basic_string[abi:ne180100]<0>(v30, "{nid}");
  std::string v31 = v28;
  memset(&v28, 0, sizeof(v28));
  std::to_string(&v27, a7);
  std::string::basic_string[abi:ne180100]<0>(v32, "{depth}");
  std::string v33 = v27;
  memset(&v27, 0, sizeof(v27));
  uint64_t v15 = *(xgboost::FeatureMap **)(a2 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 + 1) - *(void *)v15) >> 3) <= (v14 & 0x7FFFFFFFu))
  {
    std::to_string(&v26, v14 & 0x7FFFFFFF);
  }
  else
  {
    std::string v16 = xgboost::FeatureMap::Name(v15, v14 & 0x7FFFFFFF);
    std::string::basic_string[abi:ne180100]<0>(&v26, v16);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "{fname}");
  std::string v35 = v26;
  memset(&v26, 0, sizeof(v26));
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(v36, a6);
  std::to_string(&v25, *(_DWORD *)(*(void *)(a3 + 160) + 20 * __val + 4));
  std::string::basic_string[abi:ne180100]<0>(v37, "{left}");
  std::string v38 = v25;
  memset(&v25, 0, sizeof(v25));
  std::to_string(&v24, *(_DWORD *)(*(void *)(a3 + 160) + 20 * __val + 8));
  std::string::basic_string[abi:ne180100]<0>(v39, "{right}");
  std::string v40 = v24;
  memset(&v24, 0, sizeof(v24));
  uint64_t v17 = *(void *)(a3 + 160) + 20 * __val;
  int v18 = *(_DWORD *)(v17 + 12);
  char v19 = (int *)(v17 + 4);
  long long v20 = (int *)(v17 + 8);
  if (v18 < 0) {
    long long v20 = v19;
  }
  std::to_string(&v23, *v20);
  std::string::basic_string[abi:ne180100]<0>(v41, "{missing}");
  std::string v42 = v23;
  memset(&v23, 0, sizeof(v23));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v29, v30, 7);
  xgboost::TreeGenerator::Match(a1, a5, v29);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v29, (void *)v29[1]);
  uint64_t v21 = 42;
  do
  {
    std::string v22 = &v30[v21];
    if (SHIBYTE(v30[v21 - 1]) < 0) {
      operator delete((void *)*(v22 - 3));
    }
    if (*((char *)v22 - 25) < 0) {
      operator delete((void *)*(v22 - 6));
    }
    v21 -= 6;
  }
  while (v21 * 8);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_22E9E6F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,void *a47,uint64_t a48,char a49)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a46, a47);
  for (uint64_t i = 288; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair((uint64_t)(&a49 + i));
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  _Unwind_Resume(a1);
}

std::string *xgboost::JsonGenerator::Indent(std::string *this, int a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != -1)
  {
    uint64_t v2 = this;
    int v3 = a2 + 1;
    do
    {
      this = std::string::append(v2, "  ");
      --v3;
    }
    while (v3);
  }
  return this;
}

void sub_22E9E70A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::GraphvizParam::~GraphvizParam(void **this)
{
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void std::__function::__func<xgboost::$_3,std::allocator<xgboost::$_3>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::~__func()
{
}

void *std::__function::__func<xgboost::$_3,std::allocator<xgboost::$_3>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E24D730;
  return result;
}

void std::__function::__func<xgboost::$_3,std::allocator<xgboost::$_3>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  *(_OWORD *)int v3 = *(_OWORD *)a3;
  uint64_t v4 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  operator new();
}

void sub_22E9E81E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, xgboost::TreeGenerator *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_22E9E84CC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(&a60, a61);
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a23)
  {
    a24 = a23;
    operator delete(a23);
  }
  if (a2 == 1)
  {
    v70 = __cxa_begin_catch(a1);
    Entry = (dmlc::LogMessageFatal::Entry *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a20);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc", 566);
    uint64_t v72 = dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a20);
    uint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, "Failed to parse graphviz parameters:\n\t", 38);
    if ((a18 & 0x80u) == 0) {
      uint64_t v74 = &a13;
    }
    else {
      uint64_t v74 = a13;
    }
    if ((a18 & 0x80u) == 0) {
      uint64_t v75 = a18;
    }
    else {
      uint64_t v75 = a14;
    }
    uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, v74, v75);
    uint64_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, "\n", 1);
    uint64_t v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, "With error:\n", 12);
    v79 = (const char *)(*(uint64_t (**)(void *))(*(void *)v70 + 16))(v70);
    size_t v80 = strlen(v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, v79, v80);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
    __cxa_end_catch();
    JUMPOUT(0x22E9E7510);
  }
  JUMPOUT(0x22E9E8630);
}

void sub_22E9E84D8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,void *a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a60, a61);
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a23)
  {
    a24 = a23;
    operator delete(a23);
  }
  if (a2 == 1)
  {
    uint64_t v74 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a20);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
    uint64_t v76 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a20);
    uint64_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Failed to parse graphviz parameters:\n\t", 38);
    if ((a18 & 0x80u) == 0) {
      uint64_t v78 = &a13;
    }
    else {
      uint64_t v78 = a13;
    }
    if ((a18 & 0x80u) == 0) {
      uint64_t v79 = a18;
    }
    else {
      uint64_t v79 = a14;
    }
    size_t v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"\n", 1);
    v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"With error:\n", 12);
    v83 = (const char *)(*(uint64_t (**)(void *))(*(void *)v74 + 16))(v74);
    size_t v84 = strlen(v83);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
    __cxa_end_catch();
    JUMPOUT(0x22E9E7510);
  }
  JUMPOUT(0x22E9E8630);
}

void sub_22E9E8610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::istringstream::~istringstream(&a71);
  JUMPOUT(0x22E9E847CLL);
}

void sub_22E9E8618()
{
}

void sub_22E9E863C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22E9E84C4);
}

uint64_t std::__function::__func<xgboost::$_3,std::allocator<xgboost::$_3>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::$_3,std::allocator<xgboost::$_3>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::target_type()
{
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, const void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v3 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a1, v3 + 1);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v5 = (char *)result;
  }
  else {
    uint64_t v5 = *(char **)result;
  }
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v6 = a2;
    }
    else {
      int v6 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v5, v6, v3);
  }
  *(_WORD *)&v5[v3] = 61;
  return result;
}

uint64_t std::pair<std::string const,std::map<std::string,std::string>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void xgboost::GraphvizGenerator::Categorical(xgboost::GraphvizGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, xgboost::RegTree *a3@<X2>, std::string *a4@<X8>)
{
  v31[6] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD720F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD720F0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72308, "    {nid} [ label=\"{fname}:{cond}\" {params}]\n");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72308, &dword_22E895000);
    __cxa_guard_release(&qword_26AD720F0);
  }
  xgboost::GetSplitCategories(a2, a3, (char **)v26);
  xgboost::PrintCatsAsSet(v26);
  int v8 = *(_DWORD *)(*((void *)a2 + 20) + 20 * (int)a3 + 12);
  std::to_string(&v22, (int)a3);
  std::string::basic_string[abi:ne180100]<0>(v27, "{nid}");
  unint64_t v9 = v8 & 0x7FFFFFFF;
  v27[1] = v22;
  memset(&v22, 0, sizeof(v22));
  int v10 = (xgboost::FeatureMap *)*((void *)this + 1);
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v10 + 1) - *(void *)v10) >> 3);
  if (v11 <= v9)
  {
    std::to_string(&v20, v9);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v13.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v20;
    }
    else {
      v13.__i_ = (std::__wrap_iter<const char *>::iterator_type)v20.__r_.__value_.__r.__words[0];
    }
    std::string::insert(&v20, v13, 102);
    std::string __p = v20;
    memset(&v20, 0, sizeof(v20));
  }
  else
  {
    long long v12 = xgboost::FeatureMap::Name(v10, v9);
    std::string::basic_string[abi:ne180100]<0>(&__p, v12);
  }
  std::string::basic_string[abi:ne180100]<0>(v28, "{fname}");
  std::string v29 = __p;
  memset(&__p, 0, sizeof(__p));
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(v30, &v24);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string const&,0>(v31, (long long *)this + 24);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v23, (const void **)&v27[0].__r_.__value_.__l.__data_, 4);
  xgboost::TreeGenerator::Match(a4, (uint64_t)qword_26AD72308, v23);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v23, (void *)v23[1]);
  for (unint64_t i = 0; i != 0x1FFFFFFFFFFFFFE8; i -= 6)
  {
    uint64_t v15 = &v27[i / 3];
    if (SHIBYTE(v31[i + 5]) < 0) {
      operator delete(v15[7].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15[6].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15[6].__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11 <= v9 && SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  xgboost::GraphvizGenerator::BuildEdge<true>(v27, (uint64_t)this, (uint64_t)a2, (int)a3, *(_DWORD *)(*((void *)a2 + 20) + 20 * (int)a3 + 4), 1);
  if ((v27[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v16 = v27;
  }
  else {
    std::string v16 = (std::string *)v27[0].__r_.__value_.__r.__words[0];
  }
  if ((v27[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v27[0].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v27[0].__r_.__value_.__l.__size_;
  }
  std::string::append(a4, (const std::string::value_type *)v16, size);
  if (SHIBYTE(v27[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27[0].__r_.__value_.__l.__data_);
  }
  xgboost::GraphvizGenerator::BuildEdge<true>(v27, (uint64_t)this, (uint64_t)a2, (int)a3, *(_DWORD *)(*((void *)a2 + 20) + 20 * (int)a3 + 8), 0);
  if ((v27[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v18 = v27;
  }
  else {
    int v18 = (std::string *)v27[0].__r_.__value_.__r.__words[0];
  }
  if ((v27[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(v27[0].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = v27[0].__r_.__value_.__l.__size_;
  }
  std::string::append(a4, (const std::string::value_type *)v18, v19);
  if (SHIBYTE(v27[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27[0].__r_.__value_.__l.__data_);
  }
  if (v25 < 0) {
    operator delete((void *)v24);
  }
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
}

void sub_22E9E8AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
}

void xgboost::GraphvizGenerator::PlainNode(xgboost::GraphvizGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  v37[6] = *MEMORY[0x263EF8340];
  int v8 = *(_DWORD *)(*((void *)a2 + 20) + 20 * a3 + 12);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72100))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72338, "    {nid} [ label=\"{fname}{<}{cond}\" {params}]\n");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72338, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72100);
  }
  unint64_t v9 = v8 & 0x7FFFFFFF;
  int v10 = (xgboost::FeatureMap *)*((void *)this + 1);
  BOOL v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v10 + 1) - *(void *)v10) >> 3) <= v9
     || xgboost::FeatureMap::TypeOf(v10, v8 & 0x7FFFFFFF) != 0;
  std::to_string(&v27, a3);
  std::string::basic_string[abi:ne180100]<0>(v29, "{nid}");
  v29[1] = v27;
  memset(&v27, 0, sizeof(v27));
  long long v12 = (xgboost::FeatureMap *)*((void *)this + 1);
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v12 + 1) - *(void *)v12) >> 3);
  if (v13 <= v9)
  {
    std::to_string(&v25, v9);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v15.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v25;
    }
    else {
      v15.__i_ = (std::__wrap_iter<const char *>::iterator_type)v25.__r_.__value_.__r.__words[0];
    }
    std::string::insert(&v25, v15, 102);
    std::string v26 = v25;
    memset(&v25, 0, sizeof(v25));
  }
  else
  {
    int v14 = xgboost::FeatureMap::Name(v12, v9);
    std::string::basic_string[abi:ne180100]<0>(&v26, v14);
  }
  std::string::basic_string[abi:ne180100]<0>(v30, "{fname}");
  std::string v31 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string::basic_string[abi:ne180100]<0>(v32, "{<}");
  if (v11) {
    std::string v16 = "<";
  }
  else {
    std::string v16 = (char *)&unk_22EA3D4EA;
  }
  std::string::basic_string[abi:ne180100]<0>(v33, v16);
  if (v11) {
    xgboost::TreeGenerator::ToStr<float>();
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_22EA3D4EA);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "{cond}");
  long long v35 = *(_OWORD *)__p;
  uint64_t v36 = v24;
  __p[1] = 0;
  uint64_t v24 = 0;
  __p[0] = 0;
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string const&,0>(v37, (long long *)this + 24);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v28, (const void **)&v29[0].__r_.__value_.__l.__data_, 5);
  xgboost::TreeGenerator::Match(a4, (uint64_t)qword_26AD72338, v28);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v28, (void *)v28[1]);
  for (unint64_t i = 0; i != 0x1FFFFFFFFFFFFFE2; i -= 6)
  {
    int v18 = &v29[i / 3];
    if (SHIBYTE(v37[i + 5]) < 0) {
      operator delete(v18[9].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18[8].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18[8].__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v13 <= v9 && SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  xgboost::GraphvizGenerator::BuildEdge<false>(v29, (uint64_t)this, (uint64_t)a2, a3, *(_DWORD *)(*((void *)a2 + 20) + 20 * a3 + 4), 1);
  if ((v29[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = v29;
  }
  else {
    std::string::size_type v19 = (std::string *)v29[0].__r_.__value_.__r.__words[0];
  }
  if ((v29[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v29[0].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v29[0].__r_.__value_.__l.__size_;
  }
  std::string::append(a4, (const std::string::value_type *)v19, size);
  if (SHIBYTE(v29[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29[0].__r_.__value_.__l.__data_);
  }
  xgboost::GraphvizGenerator::BuildEdge<false>(v29, (uint64_t)this, (uint64_t)a2, a3, *(_DWORD *)(*((void *)a2 + 20) + 20 * a3 + 8), 0);
  if ((v29[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = v29;
  }
  else {
    uint64_t v21 = (std::string *)v29[0].__r_.__value_.__r.__words[0];
  }
  if ((v29[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(v29[0].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = v29[0].__r_.__value_.__l.__size_;
  }
  std::string::append(a4, (const std::string::value_type *)v21, v22);
  if (SHIBYTE(v29[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29[0].__r_.__value_.__l.__data_);
  }
}

void sub_22E9E908C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
}

void xgboost::GraphvizGenerator::LeafNode(xgboost::GraphvizGenerator *this@<X0>, int __val@<W2>, std::string *a3@<X8>)
{
  v18[6] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72110, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72110))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72368, "    {nid} [ label=\"leaf={leaf-value}\" {params}]\n");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72368, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72110);
  }
  std::to_string(&v11, __val);
  std::string::basic_string[abi:ne180100]<0>(v13, "{nid}");
  std::string v14 = v11;
  memset(&v11, 0, sizeof(v11));
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v15, "{leaf-value}");
  long long v16 = *(_OWORD *)__p;
  uint64_t v17 = v10;
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string const&,0>(v18, (long long *)((char *)this + 408));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v12, v13, 3);
  xgboost::TreeGenerator::Match(a3, (uint64_t)qword_26AD72368, v12);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v12, (void *)v12[1]);
  for (uint64_t i = 0; i != -18; i -= 6)
  {
    int v8 = &v13[i];
    if (SHIBYTE(v18[i + 5]) < 0) {
      operator delete((void *)v8[15]);
    }
    if (*((char *)v8 + 119) < 0) {
      operator delete((void *)v8[12]);
    }
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_22E9E93E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
}

void xgboost::GraphvizGenerator::BuildTree(xgboost::GraphvizGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  v28[1] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*((void *)a2 + 20) + 20 * (int)a3 + 4) == -1)
  {
    std::string v11 = *(void (**)(void))(*(void *)this + 56);
    v11();
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72118, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AD72118))
    {
      std::string::basic_string[abi:ne180100]<0>(qword_26AD72380, "{parent}\n{left}\n{right}");
      __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72380, &dword_22E895000);
      __cxa_guard_release(&qword_26AD72118);
    }
    uint64_t v10 = *(void *)this;
    if (*(unsigned char *)(*((void *)a2 + 29) + (int)a3) == 1) {
      (*(void (**)(void **__return_ptr, xgboost::GraphvizGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(v10 + 8))(v20, this, a2, a3, a4);
    }
    else {
      (*(void (**)(void **__return_ptr, xgboost::GraphvizGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(v10 + 40))(v20, this, a2, a3, a4);
    }
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string&,0>(v22, "{parent}", (long long *)v20);
    uint64_t v12 = (a4 + 1);
    (*(void (**)(void **__return_ptr, xgboost::GraphvizGenerator *, const xgboost::RegTree *, void, uint64_t))(*(void *)this + 64))(v17, this, a2, *(unsigned int *)(*((void *)a2 + 20) + 20 * (int)a3 + 4), v12);
    std::string::basic_string[abi:ne180100]<0>(v23, "{left}");
    long long v24 = *(_OWORD *)v17;
    uint64_t v25 = v18;
    v17[1] = 0;
    uint64_t v18 = 0;
    v17[0] = 0;
    (*(void (**)(void **__return_ptr, xgboost::GraphvizGenerator *, const xgboost::RegTree *, void, uint64_t))(*(void *)this + 64))(__p, this, a2, *(unsigned int *)(*((void *)a2 + 20) + 20 * (int)a3 + 8), v12);
    std::string::basic_string[abi:ne180100]<0>(v26, "{right}");
    long long v27 = *(_OWORD *)__p;
    v28[0] = v16;
    __p[1] = 0;
    uint64_t v16 = 0;
    __p[0] = 0;
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v19, v22, 3);
    xgboost::TreeGenerator::Match(a5, (uint64_t)qword_26AD72380, v19);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v19, (void *)v19[1]);
    for (uint64_t i = 0; i != -18; i -= 6)
    {
      std::string v14 = &v22[i];
      if (SHIBYTE(v28[i]) < 0) {
        operator delete((void *)v14[15]);
      }
      if (*((char *)v14 + 119) < 0) {
        operator delete((void *)v14[12]);
      }
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
  }
}

void sub_22E9E9840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
}

void xgboost::GraphvizGenerator::~GraphvizGenerator(void **this)
{
  xgboost::GraphvizGenerator::~GraphvizGenerator(this);

  JUMPOUT(0x230FA80D0);
}

{
  uint64_t vars8;

  *this = &unk_26E24D7A0;
  if (*((char *)this + 455) < 0) {
    operator delete(this[54]);
  }
  if (*((char *)this + 431) < 0) {
    operator delete(this[51]);
  }
  if (*((char *)this + 407) < 0) {
    operator delete(this[48]);
  }
  if (*((char *)this + 383) < 0) {
    operator delete(this[45]);
  }
  if (*((char *)this + 359) < 0) {
    operator delete(this[42]);
  }
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }

  xgboost::TreeGenerator::~TreeGenerator((xgboost::TreeGenerator *)this);
}

void xgboost::GraphvizGenerator::BuildTree(xgboost::GraphvizGenerator *this, const xgboost::RegTree *a2)
{
  v18[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72120, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72120))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72398, "digraph {\n    graph [ rankdir={rankdir} ]\n{graph_attrs}\n{nodes}}");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72398, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72120);
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "{rankdir}");
  if (*((char *)this + 383) < 0) {
    std::string::__init_copy_ctor_external(&v13, *((const std::string::value_type **)this + 45), *((void *)this + 46));
  }
  else {
    std::string v13 = *(std::string *)((unsigned char *)this + 15);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "{graph_attrs}");
  if (*((char *)this + 455) < 0) {
    std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)this + 54), *((void *)this + 55));
  }
  else {
    std::string v15 = *(std::string *)((unsigned char *)this + 18);
  }
  (*(void (**)(void **__return_ptr, xgboost::GraphvizGenerator *, const xgboost::RegTree *, void, void))(*(void *)this + 64))(__p, this, a2, 0, 0);
  std::string::basic_string[abi:ne180100]<0>(v16, "{nodes}");
  long long v17 = *(_OWORD *)__p;
  v18[0] = v9;
  __p[1] = 0;
  uint64_t v9 = 0;
  __p[0] = 0;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v10, v12, 3);
  xgboost::TreeGenerator::Match(&v11, (uint64_t)qword_26AD72398, v10);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v10, (void *)v10[1]);
  for (uint64_t i = 0; i != -18; i -= 6)
  {
    uint64_t v5 = &v12[i];
    if (SHIBYTE(v18[i]) < 0) {
      operator delete((void *)v5[15]);
    }
    if (*((char *)v5 + 119) < 0) {
      operator delete((void *)v5[12]);
    }
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v6 = &v11;
  }
  else {
    int v6 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v11.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 4, (uint64_t)v6, size);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_22E9E9BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

void dmlc::JSONReader::BeginObject(dmlc::JSONReader *this)
{
  uint64_t v2 = (char *)this + 8;
  size_t v3 = (char *)this + 16;
  uint64_t v4 = MEMORY[0x263EF8318];
  do
  {
    while (1)
    {
      unsigned int v5 = std::istream::get();
      unsigned int v6 = v5;
      int v7 = v3;
      if (v5 != 10)
      {
        int v7 = v2;
        if (v5 != 13) {
          break;
        }
      }
      ++*v7;
LABEL_5:
      if ((*(_DWORD *)(v4 + 4 * v5 + 60) & 0x4000) == 0) {
        goto LABEL_9;
      }
    }
    if (v5 <= 0x7F) {
      goto LABEL_5;
    }
  }
  while (__maskrune(v5, 0x4000uLL));
LABEL_9:
  unsigned int v22 = v6;
  LOBYTE(__p) = 123;
  if (v6 != 123) {
    dmlc::LogCheckFormat<int,char>((uint64_t)&v21, (uint64_t)&v22, (char *)&__p);
  }
  unint64_t v8 = *((void *)this + 5);
  uint64_t v9 = (char *)*((void *)this + 4);
  if ((unint64_t)v9 >= v8)
  {
    std::string v11 = (char *)*((void *)this + 3);
    uint64_t v12 = (v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = v8 - (void)v11;
    unint64_t v14 = (uint64_t)(v8 - (void)v11) >> 2;
    if (v14 <= v12 + 1) {
      unint64_t v14 = v12 + 1;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 40, v15);
      std::string v11 = (char *)*((void *)this + 3);
      uint64_t v9 = (char *)*((void *)this + 4);
    }
    else
    {
      uint64_t v16 = 0;
    }
    long long v17 = &v16[8 * v12];
    uint64_t v18 = &v16[8 * v15];
    *(void *)long long v17 = 0;
    uint64_t v10 = v17 + 8;
    while (v9 != v11)
    {
      uint64_t v19 = *((void *)v9 - 1);
      v9 -= 8;
      *((void *)v17 - 1) = v19;
      v17 -= 8;
    }
    *((void *)this + 3) = v17;
    *((void *)this + 4) = v10;
    *((void *)this + 5) = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(void *)uint64_t v9 = 0;
    uint64_t v10 = v9 + 8;
  }
  *((void *)this + 4) = v10;
}

void sub_22E9E9F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a18);
  uint64_t v20 = a19;
  a19 = 0;
  if (v20) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a19, v20);
  }
  _Unwind_Resume(a1);
}

uint64_t dmlc::JSONReader::NextObjectItem(void *a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x263EF8318];
  unsigned int v5 = a1 + 1;
  unsigned int v6 = a1 + 2;
  if (!*(void *)(a1[4] - 8))
  {
    while (1)
    {
      unsigned int v10 = std::istream::peek();
      unsigned int v11 = v10;
      uint64_t v12 = v6;
      if (v10 == 10 || (uint64_t v12 = v5, v10 == 13))
      {
        ++*v12;
      }
      else if (v10 > 0x7F)
      {
        if (!__maskrune(v10, 0x4000uLL)) {
          goto LABEL_21;
        }
        goto LABEL_13;
      }
      if ((*(_DWORD *)(v4 + 4 * v10 + 60) & 0x4000) == 0)
      {
LABEL_21:
        if (v11 != 125) {
          goto LABEL_24;
        }
        std::istream::get();
LABEL_23:
        uint64_t result = 0;
        a1[4] -= 8;
        return result;
      }
LABEL_13:
      std::istream::get();
    }
  }
  do
  {
    while (1)
    {
      unsigned int v7 = std::istream::get();
      unsigned int v8 = v7;
      uint64_t v9 = v6;
      if (v7 != 10)
      {
        uint64_t v9 = v5;
        if (v7 != 13) {
          break;
        }
      }
      ++*v9;
LABEL_5:
      if ((*(_DWORD *)(v4 + 4 * v7 + 60) & 0x4000) == 0) {
        goto LABEL_9;
      }
    }
    if (v7 <= 0x7F) {
      goto LABEL_5;
    }
  }
  while (__maskrune(v7, 0x4000uLL));
LABEL_9:
  unsigned int v19 = v8;
  if (v8 == -1 || v8 == 125) {
    goto LABEL_23;
  }
  LOBYTE(__p) = 44;
  if (v8 != 44) {
    dmlc::LogCheckFormat<int,char>((uint64_t)&v18, (uint64_t)&v19, (char *)&__p);
  }
LABEL_24:
  ++*(void *)(a1[4] - 8);
  dmlc::JSONReader::ReadString(a1, a2);
  while (2)
  {
    while (2)
    {
      unsigned int v14 = std::istream::get();
      unsigned int v15 = v14;
      uint64_t v16 = a1 + 2;
      if (v14 == 10 || (uint64_t v16 = a1 + 1, v14 == 13))
      {
        ++*v16;
        goto LABEL_28;
      }
      if (v14 <= 0x7F)
      {
LABEL_28:
        if ((*(_DWORD *)(v4 + 4 * v14 + 60) & 0x4000) == 0) {
          goto LABEL_32;
        }
        continue;
      }
      break;
    }
    if (__maskrune(v14, 0x4000uLL)) {
      continue;
    }
    break;
  }
LABEL_32:
  unsigned int v19 = v15;
  LOBYTE(__p) = 58;
  if (v15 != 58) {
    dmlc::LogCheckFormat<int,char>((uint64_t)&v18, (uint64_t)&v19, (char *)&__p);
  }
  return 1;
}

void sub_22E9EA3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a18);
  uint64_t v20 = a19;
  a19 = 0;
  if (v20) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a19, v20);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t dmlc::JSONReader::line_info(dmlc::JSONReader *this, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" Line ", 6);
  std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)(*a2 + *(void *)(*(void *)*a2 - 24)));
  size_t v3 = std::locale::use_facet(&v11, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v11);
  std::istream::getline();
  size_t v5 = strlen(__s);
  unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__s, v5);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v8[1] = MEMORY[0x263F8C318] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v10);
}

void sub_22E9EA758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void dmlc::LogCheckFormat<int,char>(uint64_t a1, uint64_t a2, char *a3)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)" (", 2);
  uint64_t v4 = (void *)std::ostream::operator<<();
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" vs. ", 5);
  char v8 = *a3;
  unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v8, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") ", 2);
  operator new();
}

void sub_22E9EA928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x230FA80D0](v9, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t dmlc::JSONReader::ReadString(void *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1;
  size_t v5 = a1 + 2;
  uint64_t v6 = MEMORY[0x263EF8318];
  do
  {
    while (1)
    {
      unsigned int v7 = std::istream::get();
      unsigned int v8 = v7;
      uint64_t v9 = v5;
      if (v7 != 10)
      {
        uint64_t v9 = v4;
        if (v7 != 13) {
          break;
        }
      }
      ++*v9;
LABEL_5:
      if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x4000) == 0) {
        goto LABEL_9;
      }
    }
    if (v7 <= 0x7F) {
      goto LABEL_5;
    }
  }
  while (__maskrune(v7, 0x4000uLL));
LABEL_9:
  unsigned int v30 = v8;
  LOBYTE(__p[0]) = 34;
  if (v8 != 34) {
    dmlc::LogCheckFormat<int,char>((uint64_t)v25, (uint64_t)&v30, (char *)__p);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  while (1)
  {
    while (1)
    {
      int v10 = std::istream::get();
      int v11 = v10;
      if (v10 != 92) {
        break;
      }
      char v19 = std::istream::get();
      if (v19 <= 109)
      {
        if (v19 == 34)
        {
          uint64_t v20 = "\"";
          goto LABEL_37;
        }
        if (v19 == 92)
        {
          uint64_t v20 = "\\"";
          goto LABEL_37;
        }
      }
      else
      {
        if (v19 == 110)
        {
          uint64_t v20 = "\n";
          goto LABEL_37;
        }
        uint64_t v20 = "\r";
        if (v19 == 114) {
          goto LABEL_37;
        }
        if (v19 == 116)
        {
          uint64_t v20 = "\t";
LABEL_37:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v20, 1);
          continue;
        }
      }
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v31);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././json.h");
      unsigned int v22 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v31);
      std::string v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"unknown string escape \\"", 23);
      LOBYTE(v25[0]) = v19;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, 1);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v31);
    }
    if (v10 == 34) {
      break;
    }
    LOBYTE(v25[0]) = v10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v25, 1);
    if ((v11 + 1) <= 0xE && ((1 << (v11 + 1)) & 0x4801) != 0)
    {
      uint64_t v13 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v31);
      dmlc::LogMessageFatal::Entry::Init(v13, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././json.h");
      unsigned int v14 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v31);
      unsigned int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Error at", 8);
      dmlc::JSONReader::line_info((dmlc::JSONReader *)v25, a1);
      if (v26 >= 0) {
        uint64_t v16 = v25;
      }
      else {
        uint64_t v16 = (void **)v25[0];
      }
      if (v26 >= 0) {
        uint64_t v17 = HIBYTE(v26);
      }
      else {
        uint64_t v17 = (uint64_t)v25[1];
      }
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", Expect '\"' but reach end of line ", 35);
      if (SHIBYTE(v26) < 0) {
        operator delete(v25[0]);
      }
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v31);
    }
  }
  std::stringbuf::str();
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = *(_OWORD *)v25;
  *(void *)(a2 + 16) = v26;
  __p[0] = *(void **)MEMORY[0x263F8C2C8];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
  __p[1] = (void *)(MEMORY[0x263F8C318] + 16);
  if (v28 < 0) {
    operator delete(__p[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v29);
}

void sub_22E9EAE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v21 - 97));
  uint64_t v23 = (uint64_t)a10;
  a10 = 0;
  if (v23) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a10, v23);
  }
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  size_t v5 = (void **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unsigned int v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    unsigned int v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    void v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *unsigned int v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((void *)v6 + 9) = 0;
    *((void *)v6 + 8) = 0;
    *((void *)v6 + 7) = v6 + 4;
    char v12 = 1;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__erase_unique<std::string>(void *a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (void *)v3)
  {
    uint64_t v4 = (uint64_t *)v3;
    size_t v5 = *(void **)(v3 + 8);
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        size_t v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      unsigned int v7 = (void *)v3;
      do
      {
        uint64_t v6 = (void *)v7[2];
        BOOL v8 = *v6 == (void)v7;
        unsigned int v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3) {
      *a1 = v6;
    }
    uint64_t v9 = (uint64_t *)a1[1];
    --a1[2];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],std::string const&,0>(void *a1, char *a2, long long *a3)
{
  size_t v5 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, a2) + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_22E9EB104(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::GraphvizGenerator::BuildEdge<true>(std::string *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  v41[6] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD720F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD720F8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72320, "    {nid} -> {child} [label=\"{branch}\" color=\"{color}\"]\n");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72320, &dword_22E895000);
    __cxa_guard_release(&qword_26AD720F8);
  }
  uint64_t v12 = *(void *)(a3 + 160) + 20 * a4;
  int v13 = *(_DWORD *)(v12 + 12);
  unsigned int v14 = (int *)(v12 + 4);
  unsigned int v15 = (int *)(v12 + 8);
  if (v13 < 0) {
    unsigned int v15 = v14;
  }
  int v16 = *v15;
  if (a6) {
    uint64_t v17 = "no";
  }
  else {
    uint64_t v17 = "yes";
  }
  std::string::basic_string[abi:ne180100]<0>(&v36, v17);
  if (v16 == a5) {
    uint64_t v18 = ", missing";
  }
  else {
    uint64_t v18 = (char *)&unk_22EA3D4EA;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v18);
  if ((v32 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v32 & 0x80u) == 0) {
    std::string::size_type v20 = v32;
  }
  else {
    std::string::size_type v20 = (std::string::size_type)v31;
  }
  uint64_t v21 = std::string::append(&v36, p_p, v20);
  uint64_t v23 = (void *)v21->__r_.__value_.__r.__words[0];
  std::string::size_type size = v21->__r_.__value_.__l.__size_;
  std::string::size_type v33 = v21->__r_.__value_.__r.__words[0];
  *(void *)long long v34 = size;
  *(void *)&v34[7] = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
  int v24 = SHIBYTE(v21->__r_.__value_.__r.__words[2]);
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  char v35 = v24;
  if ((char)v32 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  std::to_string(&v29, a4);
  std::string::basic_string[abi:ne180100]<0>(&v36, "{nid}");
  std::string v37 = v29;
  memset(&v29, 0, sizeof(v29));
  std::to_string(&v28, a5);
  std::string::basic_string[abi:ne180100]<0>(v38, "{child}");
  std::string v39 = v28;
  memset(&v28, 0, sizeof(v28));
  if (v16 == a5) {
    uint64_t v25 = (long long *)(a2 + 312);
  }
  else {
    uint64_t v25 = (long long *)(a2 + 336);
  }
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],std::string const&,0>(v40, "{color}", v25);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string&,0>(v41, "{branch}", (long long *)&v33);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&__p, (const void **)&v36.__r_.__value_.__l.__data_, 4);
  xgboost::TreeGenerator::Match(a1, (uint64_t)qword_26AD72320, &__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v31);
  for (uint64_t i = 0; i != -24; i -= 6)
  {
    long long v27 = (void **)((char *)&v36.__r_.__value_.__l.__data_ + i * 8);
    if (SHIBYTE(v41[i + 5]) < 0) {
      operator delete(v27[21]);
    }
    if (*((char *)v27 + 167) < 0) {
      operator delete(v27[18]);
    }
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v24 & 0x80000000) == 0) {
      return;
    }
LABEL_35:
    operator delete(v23);
    return;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if (v24 < 0) {
    goto LABEL_35;
  }
}

void sub_22E9EB420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string const&,0>(void *a1, long long *a2)
{
  uint64_t v4 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, "{params}") + 3);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_22E9EB588(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string&,0>(void *a1, char *a2, long long *a3)
{
  long long v5 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, a2) + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_22E9EB5F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::GraphvizGenerator::BuildEdge<false>(std::string *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  v41[6] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72108, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72108))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_26AD72350, "    {nid} -> {child} [label=\"{branch}\" color=\"{color}\"]\n");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26AD72350, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72108);
  }
  uint64_t v12 = *(void *)(a3 + 160) + 20 * a4;
  int v13 = *(_DWORD *)(v12 + 12);
  unsigned int v14 = (int *)(v12 + 4);
  unsigned int v15 = (int *)(v12 + 8);
  if (v13 < 0) {
    unsigned int v15 = v14;
  }
  int v16 = *v15;
  if (a6) {
    uint64_t v17 = "yes";
  }
  else {
    uint64_t v17 = "no";
  }
  std::string::basic_string[abi:ne180100]<0>(&v36, v17);
  if (v16 == a5) {
    uint64_t v18 = ", missing";
  }
  else {
    uint64_t v18 = (char *)&unk_22EA3D4EA;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v18);
  if ((v32 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v32 & 0x80u) == 0) {
    std::string::size_type v20 = v32;
  }
  else {
    std::string::size_type v20 = (std::string::size_type)v31;
  }
  uint64_t v21 = std::string::append(&v36, p_p, v20);
  uint64_t v23 = (void *)v21->__r_.__value_.__r.__words[0];
  std::string::size_type size = v21->__r_.__value_.__l.__size_;
  std::string::size_type v33 = v21->__r_.__value_.__r.__words[0];
  *(void *)long long v34 = size;
  *(void *)&v34[7] = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
  int v24 = SHIBYTE(v21->__r_.__value_.__r.__words[2]);
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  char v35 = v24;
  if ((char)v32 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  std::to_string(&v29, a4);
  std::string::basic_string[abi:ne180100]<0>(&v36, "{nid}");
  std::string v37 = v29;
  memset(&v29, 0, sizeof(v29));
  std::to_string(&v28, a5);
  std::string::basic_string[abi:ne180100]<0>(v38, "{child}");
  std::string v39 = v28;
  memset(&v28, 0, sizeof(v28));
  if (v16 == a5) {
    uint64_t v25 = (long long *)(a2 + 312);
  }
  else {
    uint64_t v25 = (long long *)(a2 + 336);
  }
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],std::string const&,0>(v40, "{color}", v25);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string&,0>(v41, "{branch}", (long long *)&v33);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&__p, (const void **)&v36.__r_.__value_.__l.__data_, 4);
  xgboost::TreeGenerator::Match(a1, (uint64_t)qword_26AD72350, &__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v31);
  for (uint64_t i = 0; i != -24; i -= 6)
  {
    long long v27 = (void **)((char *)&v36.__r_.__value_.__l.__data_ + i * 8);
    if (SHIBYTE(v41[i + 5]) < 0) {
      operator delete(v27[21]);
    }
    if (*((char *)v27 + 167) < 0) {
      operator delete(v27[18]);
    }
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v24 & 0x80000000) == 0) {
      return;
    }
LABEL_35:
    operator delete(v23);
    return;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if (v24 < 0) {
    goto LABEL_35;
  }
}

void sub_22E9EB914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
}

void *xgboost::Cast<xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10> const,xgboost::Value>(_DWORD *a1)
{
  if (a1[3] == 10)
  {
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    xgboost::Value::TypeStr((xgboost::Value *)a1, &v21);
    long long v5 = std::string::insert(&v21, 0, "Invalid cast, from ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unsigned int v7 = std::string::append(&v22, " to ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v15[1] = 0xA00000000;
    v15[0] = &unk_26E24D8C8;
    int v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
    if ((v20 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v10 = v20;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    int v11 = std::string::append(&v23, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v25 = v11->__r_.__value_.__r.__words[2];
    long long v24 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v25 >= 0) {
      int v13 = &v24;
    }
    else {
      int v13 = (long long *)v24;
    }
    if (v25 >= 0) {
      uint64_t v14 = HIBYTE(v25);
    }
    else {
      uint64_t v14 = *((void *)&v24 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
    v15[0] = &unk_26E24D8C8;
    if (v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
  }
}

void sub_22E9EBD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 41) < 0) {
    operator delete(*(void **)(v32 - 64));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (*(char *)(v32 - 73) < 0) {
    operator delete(*(void **)(v32 - 96));
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v32 - 33));
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(_DWORD *a1)
{
  if (a1[3] == 9)
  {
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    xgboost::Value::TypeStr((xgboost::Value *)a1, &v21);
    long long v5 = std::string::insert(&v21, 0, "Invalid cast, from ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unsigned int v7 = std::string::append(&v22, " to ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v15[1] = 0x900000000;
    v15[0] = &unk_26E24D880;
    int v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
    if ((v20 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v10 = v20;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    int v11 = std::string::append(&v23, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v25 = v11->__r_.__value_.__r.__words[2];
    long long v24 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v25 >= 0) {
      int v13 = &v24;
    }
    else {
      int v13 = (long long *)v24;
    }
    if (v25 >= 0) {
      uint64_t v14 = HIBYTE(v25);
    }
    else {
      uint64_t v14 = *((void *)&v24 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
    v15[0] = &unk_26E24D880;
    if (v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
  }
}

void sub_22E9EC068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 41) < 0) {
    operator delete(*(void **)(v32 - 64));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (*(char *)(v32 - 73) < 0) {
    operator delete(*(void **)(v32 - 96));
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v32 - 33));
  _Unwind_Resume(a1);
}

void xgboost::FromJson<xgboost::TreeParam>(std::vector<std::pair<std::string, std::string>> *a1, _DWORD *a2, uint64_t a3)
{
  long long v5 = (xgboost::TreeParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(a2);
  v14[0] = 0;
  v14[1] = 0;
  int v13 = (uint64_t *)v14;
  long long v6 = (void *)*((void *)v5 + 2);
  unsigned int v7 = (void *)((char *)v5 + 24);
  if (v6 != (void *)((char *)v5 + 24))
  {
    do
    {
      long long v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v6[7]);
      unsigned int v15 = (long long *)(v6 + 4);
      uint64_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      long long v5 = (xgboost::TreeParam *)std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      std::string::size_type v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          std::string::size_type v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          long long v6 = v11;
        }
        while (!v12);
      }
      long long v6 = v11;
    }
    while (v11 != v7);
  }
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  xgboost::TreeParam::__MANAGER__(v5);
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD723B0, a3, v13, v14, 0, a1, 0);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_22E9EC22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  long long v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(_DWORD *a1)
{
  if (a1[3] == 7)
  {
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    xgboost::Value::TypeStr((xgboost::Value *)a1, &v21);
    long long v5 = std::string::insert(&v21, 0, "Invalid cast, from ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v22, " to ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v15[1] = 0x700000000;
    v15[0] = &unk_26E248988;
    int v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
    if ((v20 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v10 = v20;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    int v11 = std::string::append(&v23, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v25 = v11->__r_.__value_.__r.__words[2];
    long long v24 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v25 >= 0) {
      int v13 = &v24;
    }
    else {
      int v13 = (long long *)v24;
    }
    if (v25 >= 0) {
      uint64_t v14 = HIBYTE(v25);
    }
    else {
      uint64_t v14 = *((void *)&v24 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
    v15[0] = &unk_26E248988;
    if (v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
  }
}

void sub_22E9EC4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 41) < 0) {
    operator delete(*(void **)(v32 - 64));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (*(char *)(v32 - 73) < 0) {
    operator delete(*(void **)(v32 - 96));
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v32 - 33));
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8> const,xgboost::Value>(_DWORD *a1)
{
  if (a1[3] == 8)
  {
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    xgboost::Value::TypeStr((xgboost::Value *)a1, &v21);
    long long v5 = std::string::insert(&v21, 0, "Invalid cast, from ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v22, " to ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v15[1] = 0x800000000;
    v15[0] = &unk_26E24D838;
    int v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
    if ((v20 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v10 = v20;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    int v11 = std::string::append(&v23, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v25 = v11->__r_.__value_.__r.__words[2];
    long long v24 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v25 >= 0) {
      int v13 = &v24;
    }
    else {
      int v13 = (long long *)v24;
    }
    if (v25 >= 0) {
      uint64_t v14 = HIBYTE(v25);
    }
    else {
      uint64_t v14 = *((void *)&v24 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
    v15[0] = &unk_26E24D838;
    if (v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
  }
}

void sub_22E9EC7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 41) < 0) {
    operator delete(*(void **)(v32 - 64));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (*(char *)(v32 - 73) < 0) {
    operator delete(*(void **)(v32 - 96));
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v32 - 33));
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = std::vector<char>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  long long v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      uint64_t result = memmove(v9, __src, v16);
    }
    unsigned int v15 = &v9[v16];
    goto LABEL_20;
  }
  uint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v13);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    uint64_t result = memmove(v9, v14, a3 - v14);
  }
  unsigned int v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void *std::vector<xgboost::RTreeNodeStat>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_22E9ECA04(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<xgboost::RegTree::Node>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::RegTree::Node>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (_OWORD *)a1[1];
    long long v5 = (char *)v4 + 20 * a2;
    uint64_t v6 = 20 * a2;
    do
    {
      *uint64_t v4 = xmmword_22EA1DF10;
      uint64_t v4 = (_OWORD *)((char *)v4 + 20);
      v6 -= 20;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_22E9ECA84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<xgboost::FeatureType>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::FeatureType>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    long long v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_22E9ECAF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<xgboost::RegTree::Segment>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_22E9ECB70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL xgboost::GetElem<xgboost::JsonBoolean,xgboost::Json>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 8 * a2);
  if (v2[3] == 5) {
    return *((unsigned char *)xgboost::Cast<xgboost::JsonBoolean const,xgboost::Value const>(v2) + 16) != 0;
  }
  else {
    return *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v2) + 2) == 1;
  }
}

uint64_t *std::vector<xgboost::Json>::__assign_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(atomic_uint ***)a1;
  if (a4 > (v8 - *(void *)a1) >> 3)
  {
    if (v10)
    {
      std::vector<xgboost::Json>::__base_destruct_at_end[abi:ne180100]((atomic_uint *)a1, *(void *)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 61) {
      std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<xgboost::Json>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::Json>,xgboost::Json*,xgboost::Json*,xgboost::Json*>(v9, v6, a3, *(uint64_t **)(a1 + 8));
LABEL_17:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t v14 = *(atomic_uint ***)(a1 + 8);
  unint64_t v15 = v14 - v10;
  if (v15 < a4)
  {
    size_t v16 = &a2[v15];
    if (v14 != v10)
    {
      uint64_t v17 = 8 * v15;
      do
      {
        uint64_t v18 = (atomic_uint *)*v6++;
        xgboost::IntrusivePtr<xgboost::Value>::operator=(v10++, v18);
        v17 -= 8;
      }
      while (v17);
      uint64_t v10 = *(atomic_uint ***)(a1 + 8);
    }
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::Json>,xgboost::Json*,xgboost::Json*,xgboost::Json*>(v9, v16, a3, (uint64_t *)v10);
    goto LABEL_17;
  }
  if (a2 == a3)
  {
    uint64_t v19 = *(void *)a1;
  }
  else
  {
    uint64_t v19 = *(void *)a1;
    do
    {
      unsigned __int8 v20 = (atomic_uint *)*v6++;
      xgboost::IntrusivePtr<xgboost::Value>::operator=(v10++, v20);
      v19 += 8;
    }
    while (v6 != a3);
  }

  return (uint64_t *)std::vector<xgboost::Json>::__base_destruct_at_end[abi:ne180100]((atomic_uint *)a1, v19);
}

void sub_22E9ECD5C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

atomic_uint **xgboost::IntrusivePtr<xgboost::Value>::operator=(atomic_uint **a1, atomic_uint *a2)
{
  if (a2) {
    atomic_fetch_add_explicit(a2 + 2, 1u, memory_order_relaxed);
  }
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::JsonTypedArray(uint64_t a1, std::vector<int>::size_type a2)
{
  *(void *)(a1 + 8) = 0x900000000;
  *(void *)a1 = &unk_26E24D880;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  std::vector<int>::resize((std::vector<int> *)(a1 + 16), a2);
  return a1;
}

void sub_22E9ECE4C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::JsonTypedArray(uint64_t a1, std::vector<char>::size_type a2)
{
  *(void *)(a1 + 8) = 0x800000000;
  *(void *)a1 = &unk_26E24D838;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (a2) {
    std::vector<char>::__append((std::vector<char> *)(a1 + 16), a2);
  }
  return a1;
}

void sub_22E9ECED4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::JsonTypedArray(void *a1, unint64_t a2)
{
  a1[1] = 0xA00000000;
  *a1 = &unk_26E24D8C8;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 2), a2);
  return a1;
}

void sub_22E9ECF58(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<xgboost::PathElement>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::PathElement>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_22E9ECFD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::PathElement>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<xgboost::TreeGenReg const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void dmlc::io::InputSplitBase::Init(dmlc::io::InputSplitBase *this, dmlc::io::FileSystem *a2, char *__s, unint64_t a4, char a5)
{
  *((void *)this + 1) = a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  dmlc::io::InputSplitBase::InitInputFileInfo((uint64_t)this, &__p, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::vector<unsigned long>::resize((uint64_t)this + 16, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3) + 1);
  **((void **)this + 2) = 0;
  uint64_t v9 = *((void *)this + 8);
  uint64_t v8 = *((void *)this + 9);
  if (v8 != v9)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 72;
    do
    {
      *(void *)(*((void *)this + 2) + 8 * v10 + 8) = *(void *)(v9 + v11)
                                                       + *(void *)(*((void *)this + 2) + 8 * v10);
      if (*(void *)(v9 + v11) % a4)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/input_split_base.cc");
        size_t v13 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: files_[i].size % align_bytes == 0", 47);
        unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"file do not align by ", 21);
        size_t v16 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" bytes", 6);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
        uint64_t v9 = *((void *)this + 8);
        uint64_t v8 = *((void *)this + 9);
      }
      ++v10;
      v11 += 88;
    }
    while (v10 < 0x2E8BA2E8BA2E8BA3 * ((v8 - v9) >> 3));
  }
  *((void *)this + 20) = a4;
}

void sub_22E9ED1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::io::InputSplitBase::InitInputFileInfo(uint64_t a1, const std::string *a2, char a3)
{
  dmlc::io::InputSplitBase::ConvertToURIs(a1, a2, &v31);
  if (v31.i64[1] != v31.i64[0])
  {
    unint64_t v4 = 0;
    do
    {
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 16))(v23);
      if (v30 == 1)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v5 = **(void **)(a1 + 8);
        if (a3) {
          uint64_t v6 = (void (**)(void))(v5 + 32);
        }
        else {
          uint64_t v6 = (void (**)(void))(v5 + 24);
        }
        (*v6)();
        uint64_t v10 = v20;
        uint64_t v9 = v21;
        if (v21 != v20)
        {
          uint64_t v11 = 0;
          unint64_t v12 = 0;
          do
          {
            uint64_t v13 = v10 + v11;
            if (*(void *)(v10 + v11 + 72) && !*(_DWORD *)(v13 + 80))
            {
              unint64_t v14 = *(void *)(a1 + 72);
              if (v14 >= *(void *)(a1 + 80))
              {
                uint64_t v15 = std::vector<dmlc::io::FileInfo>::__push_back_slow_path<dmlc::io::FileInfo const&>((uint64_t *)(a1 + 64), (long long *)(v10 + v11));
              }
              else
              {
                std::allocator<dmlc::io::FileInfo>::construct[abi:ne180100]<dmlc::io::FileInfo,dmlc::io::FileInfo const&>(a1 + 80, *(std::string **)(a1 + 72), (long long *)v13);
                uint64_t v15 = v14 + 88;
                *(void *)(a1 + 72) = v14 + 88;
              }
              *(void *)(a1 + 72) = v15;
              uint64_t v10 = v20;
              uint64_t v9 = v21;
            }
            ++v12;
            v11 += 88;
          }
          while (v12 < 0x2E8BA2E8BA2E8BA3 * ((v9 - v10) >> 3));
        }
        uint64_t v32 = (void **)&v20;
        std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100](&v32);
      }
      else if (v29)
      {
        unint64_t v7 = *(void *)(a1 + 72);
        if (v7 >= *(void *)(a1 + 80))
        {
          uint64_t v8 = std::vector<dmlc::io::FileInfo>::__push_back_slow_path<dmlc::io::FileInfo const&>((uint64_t *)(a1 + 64), (long long *)v23);
        }
        else
        {
          std::allocator<dmlc::io::FileInfo>::construct[abi:ne180100]<dmlc::io::FileInfo,dmlc::io::FileInfo const&>(a1 + 80, *(std::string **)(a1 + 72), (long long *)v23);
          uint64_t v8 = v7 + 88;
          *(void *)(a1 + 72) = v7 + 88;
        }
        *(void *)(a1 + 72) = v8;
      }
      if (v28 < 0) {
        operator delete(__p);
      }
      if (v26 < 0) {
        operator delete(v25);
      }
      if (v24 < 0) {
        operator delete(v23[0]);
      }
      ++v4;
    }
    while (v4 < 0x8E38E38E38E38E39 * ((v31.i64[1] - v31.i64[0]) >> 3));
  }
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 72);
  LODWORD(v32) = 0;
  uint64_t v18 = v16 - v17;
  uint64_t v20 = 0x2E8BA2E8BA2E8BA3 * (v18 >> 3);
  if (!v18) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  v23[0] = &v31;
  std::vector<dmlc::io::URI>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_22E9ED55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)(v15 - 120);
  std::vector<dmlc::io::URI>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void *dmlc::io::InputSplitBase::ResetPartition(void *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = (void *)this[3];
  unint64_t v4 = *(v3 - 1);
  unint64_t v5 = (this[20] + (v4 + a3 - 1) / a3 - 1) / this[20] * this[20];
  if (v4 >= v5 * a2) {
    unint64_t v6 = v5 * a2;
  }
  else {
    unint64_t v6 = *(v3 - 1);
  }
  unint64_t v7 = v5 * (a2 + 1);
  if (v4 >= v7) {
    unint64_t v4 = v7;
  }
  this[6] = v6;
  this[7] = v4;
  this[5] = v6;
  if (v6 != v4)
  {
    uint64_t v8 = (uint64_t)this;
    uint64_t v9 = (void *)this[2];
    if (v3 == v9)
    {
      this[12] = -1;
    }
    else
    {
      unint64_t v10 = v3 - v9;
      unint64_t v11 = v10;
      unint64_t v12 = (void *)this[2];
      do
      {
        unint64_t v13 = v11 >> 1;
        unint64_t v14 = &v12[v11 >> 1];
        unint64_t v16 = *v14;
        uint64_t v15 = v14 + 1;
        v11 += ~(v11 >> 1);
        if (v6 < v16) {
          unint64_t v11 = v13;
        }
        else {
          unint64_t v12 = v15;
        }
      }
      while (v11);
      this[12] = v12 - v9 - 1;
      uint64_t v3 = v9;
      do
      {
        unint64_t v17 = v10 >> 1;
        uint64_t v18 = &v3[v10 >> 1];
        unint64_t v20 = *v18;
        uint64_t v19 = v18 + 1;
        v10 += ~(v10 >> 1);
        if (v4 < v20) {
          unint64_t v10 = v17;
        }
        else {
          uint64_t v3 = v19;
        }
      }
      while (v10);
    }
    unint64_t v21 = v3 - v9 - 1;
    this[13] = v21;
    uint64_t v22 = this[11];
    if (v22)
    {
      (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
      *(void *)(v8 + 88) = 0;
      unint64_t v4 = *(void *)(v8 + 56);
      unint64_t v21 = *(void *)(v8 + 104);
      uint64_t v9 = *(void **)(v8 + 16);
    }
    unint64_t v23 = v9[v21];
    if (v4 != v23)
    {
      if (v4 <= v23)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/input_split_base.cc");
        int64_t v25 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
        char v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: offset_end_ >file_offset_[file_ptr_end_]", 54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v38);
        unint64_t v21 = *(void *)(v8 + 104);
      }
      uint64_t v27 = *(void *)(v8 + 64);
      if (v21 >= 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v8 + 72) - v27) >> 3))
      {
        char v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
        dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/input_split_base.cc");
        uint64_t v29 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
        int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: file_ptr_end_ < files_.size()", 43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
        unint64_t v21 = *(void *)(v8 + 104);
        uint64_t v27 = *(void *)(v8 + 64);
      }
      uint64_t v31 = (*(uint64_t (**)(void, unint64_t, void))(**(void **)(v8 + 8) + 48))(*(void *)(v8 + 8), v27 + 88 * v21, 0);
      *(void *)(v8 + 88) = v31;
      (*(void (**)(uint64_t, void))(*(void *)v31 + 32))(v31, *(void *)(v8 + 56) - *(void *)(*(void *)(v8 + 16) + 8 * *(void *)(v8 + 104)));
      *(void *)(v8 + 56) += (*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 112))(v8, *(void *)(v8 + 88));
      uint64_t v32 = *(void *)(v8 + 88);
      if (v32) {
        (*(void (**)(uint64_t))(*(void *)v32 + 24))(v32);
      }
    }
    uint64_t v33 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v8 + 8) + 48))(*(void *)(v8 + 8), *(void *)(v8 + 64) + 88 * *(void *)(v8 + 96), 0);
    *(void *)(v8 + 88) = v33;
    uint64_t v34 = *(void *)(v8 + 48);
    uint64_t v35 = *(void *)(*(void *)(v8 + 16) + 8 * *(void *)(v8 + 96));
    uint64_t v36 = v34 - v35;
    if (v34 != v35)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 32))(v33, v36);
      *(void *)(v8 + 48) += (*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 112))(v8, *(void *)(v8 + 88));
    }
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v36);
  }
  return this;
}

void sub_22E9ED9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
}

void *dmlc::io::InputSplitBase::BeforeFirst(void *this)
{
  unint64_t v1 = this[6];
  if (v1 < this[7])
  {
    uint64_t v2 = (uint64_t)this;
    uint64_t v3 = (void *)this[2];
    unint64_t v4 = (void *)this[3];
    if (v4 != v3)
    {
      unint64_t v5 = v4 - v3;
      unint64_t v4 = (void *)this[2];
      do
      {
        unint64_t v6 = v5 >> 1;
        unint64_t v7 = &v4[v5 >> 1];
        unint64_t v9 = *v7;
        uint64_t v8 = v7 + 1;
        v5 += ~(v5 >> 1);
        if (v1 < v9) {
          unint64_t v5 = v6;
        }
        else {
          unint64_t v4 = v8;
        }
      }
      while (v5);
    }
    uint64_t v10 = v4 - v3 - 1;
    uint64_t v11 = this[11];
    if (*(void *)(v2 + 96) != v10)
    {
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
      }
      *(void *)(v2 + 96) = v10;
      uint64_t v11 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v2 + 8) + 48))(*(void *)(v2 + 8), *(void *)(v2 + 64) + 88 * v10, 0);
      *(void *)(v2 + 88) = v11;
      unint64_t v1 = *(void *)(v2 + 48);
      uint64_t v10 = *(void *)(v2 + 96);
      uint64_t v3 = *(void **)(v2 + 16);
    }
    this = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v11 + 32))(v11, v1 - v3[v10]);
    *(void *)(v2 + 40) = *(void *)(v2 + 48);
    *(void *)(v2 + 112) = 0;
    *(void *)(v2 + 120) = 0;
    if (*(char *)(v2 + 191) < 0)
    {
      **(unsigned char **)(v2 + 168) = 0;
      *(void *)(v2 + 176) = 0;
    }
    else
    {
      *(unsigned char *)(v2 + 168) = 0;
      *(unsigned char *)(v2 + 191) = 0;
    }
  }
  return this;
}

void dmlc::io::InputSplitBase::~InputSplitBase(dmlc::io::InputSplitBase *this)
{
  *(void *)this = &unk_26E24D958;
  uint64_t v2 = *((void *)this + 11);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  unint64_t v5 = (void **)((char *)this + 64);
  std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    operator delete(v4);
  }
}

__n128 dmlc::io::InputSplitBase::StripEnd@<Q0>(std::string *this@<X1>, unsigned __int8 a2@<W2>, uint64_t a3@<X8>)
{
  int v5 = a2;
  while (1)
  {
    std::string::size_type v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      if (!size) {
        goto LABEL_12;
      }
    }
    else
    {
      if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
        goto LABEL_12;
      }
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    std::string::size_type v8 = size - 1;
    if ((v6 & 0x80) != 0) {
      break;
    }
    if (this->__r_.__value_.__s.__data_[v8] != v5) {
      goto LABEL_12;
    }
LABEL_11:
    std::string::resize(this, v6 - 1, 0);
  }
  if (*(unsigned __int8 *)(this->__r_.__value_.__r.__words[0] + v8) == v5)
  {
    std::string::size_type v6 = this->__r_.__value_.__l.__size_;
    goto LABEL_11;
  }
LABEL_12:
  __n128 result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_OWORD *)a3 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(void *)(a3 + 16) = *((void *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  return result;
}

void dmlc::io::InputSplitBase::ConvertToURIs(uint64_t a1@<X0>, const std::string *a2@<X1>, int64x2_t *a3@<X8>)
{
  dmlc::Split(a2, 0x3Bu, &v51);
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  a3[1].i64[0] = 0;
  uint64_t v4 = v51;
  if (v52 == v51) {
    goto LABEL_85;
  }
  unint64_t v5 = 0;
  int v34 = a3 + 16;
  do
  {
    std::string::size_type v6 = (char *)(v4 + 24 * v5);
    if (v6[23] < 0) {
      std::string::size_type v6 = *(char **)v6;
    }
    dmlc::io::URI::URI((dmlc::io::URI *)&__sz, v6);
    std::string::size_type v7 = std::string::rfind(&v50, 47, 0xFFFFFFFFFFFFFFFFLL);
    if (v7 == -1) {
      goto LABEL_9;
    }
    std::string::size_type v8 = v7;
    std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v50.__r_.__value_.__l.__size_;
    }
    if (v7 + 1 == size)
    {
LABEL_9:
      unint64_t v10 = a3->u64[1];
      if (v10 >= a3[1].i64[0])
      {
        uint64_t v11 = std::vector<dmlc::io::URI>::__push_back_slow_path<dmlc::io::URI const&>(a3, (long long *)&__sz);
      }
      else
      {
        std::allocator<dmlc::io::URI>::construct[abi:ne180100]<dmlc::io::URI,dmlc::io::URI const&>(v34, (std::string *)a3->i64[1], (long long *)&__sz);
        uint64_t v11 = v10 + 72;
        a3->i64[1] = v10 + 72;
      }
      a3->i64[1] = v11;
      goto LABEL_78;
    }
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v45, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    }
    else {
      std::string v45 = __sz;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v46, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v46 = __s;
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v50;
    }
    std::string::basic_string(&v53, &v50, 0, v8, (std::allocator<char> *)v54);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v53;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    (*(void (**)(void, std::string *, uint64_t *))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), &v45, &v42);
    uint64_t v12 = v42;
    if (v43 == v42)
    {
LABEL_65:
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v39, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
      }
      else {
        std::string v39 = v50;
      }
      std::regex_traits<char>::regex_traits(&v35);
      uint64_t v38 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>();
    }
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = v12 + 88 * v13;
      if (*(char *)(v14 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(v14 + 48), *(void *)(v14 + 56));
      }
      else
      {
        long long v15 = *(_OWORD *)(v14 + 48);
        v41.__r_.__value_.__r.__words[2] = *(void *)(v14 + 64);
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v15;
      }
      dmlc::io::InputSplitBase::StripEnd(&v41, 0x2Fu, (uint64_t)&v53);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v40, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
      }
      else {
        std::string v40 = v50;
      }
      dmlc::io::InputSplitBase::StripEnd(&v40, 0x2Fu, (uint64_t)v54);
      char v16 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v17 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v17 = v53.__r_.__value_.__l.__size_;
      }
      unint64_t v18 = v55;
      int v19 = (char)v55;
      if ((v55 & 0x80u) != 0) {
        unint64_t v18 = (unint64_t)v54[1];
      }
      if (v17 != v18)
      {
        BOOL v29 = 0;
        if (((char)v55 & 0x80000000) == 0) {
          goto LABEL_50;
        }
LABEL_58:
        operator delete(v54[0]);
        goto LABEL_50;
      }
      unint64_t v20 = (v55 & 0x80u) == 0 ? v54 : (void **)v54[0];
      if ((*((unsigned char *)&v53.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        BOOL v29 = memcmp(v53.__r_.__value_.__l.__data_, v20, v53.__r_.__value_.__l.__size_) == 0;
        if (v19 < 0) {
          goto LABEL_58;
        }
      }
      else if (*((unsigned char *)&v53.__r_.__value_.__s + 23))
      {
        uint64_t v21 = HIBYTE(v53.__r_.__value_.__r.__words[2]) - 1;
        uint64_t v22 = &v53;
        do
        {
          int v24 = v22->__r_.__value_.__s.__data_[0];
          uint64_t v22 = (std::string *)((char *)v22 + 1);
          int v23 = v24;
          int v26 = *(unsigned __int8 *)v20;
          unint64_t v20 = (void **)((char *)v20 + 1);
          int v25 = v26;
          BOOL v28 = v21-- != 0;
          BOOL v29 = v23 == v25;
        }
        while (v23 == v25 && v28);
        if ((char)v55 < 0) {
          goto LABEL_58;
        }
      }
      else
      {
        BOOL v29 = 1;
        if ((char)v55 < 0) {
          goto LABEL_58;
        }
      }
LABEL_50:
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v40.__r_.__value_.__l.__data_);
        if ((v16 & 0x80) == 0) {
          goto LABEL_52;
        }
      }
      else if ((v16 & 0x80) == 0)
      {
        goto LABEL_52;
      }
      operator delete(v53.__r_.__value_.__l.__data_);
LABEL_52:
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      if (v29) {
        break;
      }
      ++v13;
      uint64_t v12 = v42;
      if (v13 >= 0x2E8BA2E8BA2E8BA3 * ((v43 - v42) >> 3)) {
        goto LABEL_65;
      }
    }
    int v30 = (long long *)(v42 + 88 * v13);
    unint64_t v31 = a3->u64[1];
    if (v31 >= a3[1].i64[0])
    {
      uint64_t v32 = std::vector<dmlc::io::URI>::__push_back_slow_path<dmlc::io::URI const&>(a3, v30);
    }
    else
    {
      std::allocator<dmlc::io::URI>::construct[abi:ne180100]<dmlc::io::URI,dmlc::io::URI const&>(v34, (std::string *)a3->i64[1], v30);
      uint64_t v32 = v31 + 72;
      a3->i64[1] = v31 + 72;
    }
    a3->i64[1] = v32;
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
    std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
LABEL_78:
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__sz.__r_.__value_.__l.__data_);
    }
    ++v5;
    uint64_t v4 = v51;
  }
  while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v52 - v51) >> 3));
LABEL_85:
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
}

void sub_22E9EFA2C()
{
  if (v1 < 0) {
    operator delete(v0);
  }
  JUMPOUT(0x22E9EFA78);
}

void sub_22E9EFA34()
{
}

void sub_22E9EFA68(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  v8[0] = &v4;
  std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100](v8);
  dmlc::io::FileInfo::~FileInfo((dmlc::io::FileInfo *)&v5);
  dmlc::io::FileInfo::~FileInfo((dmlc::io::FileInfo *)&v6);
  v8[0] = v2;
  std::vector<dmlc::io::URI>::__destroy_vector::operator()[abi:ne180100](v8);
  v8[0] = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v8);
  _Unwind_Resume(a1);
}

void sub_22E9EFA80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a74 < 0) {
    operator delete(__p);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  JUMPOUT(0x22E9EFB48);
}

void sub_22E9EFAD8()
{
}

void sub_22E9EFAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  v71[0] = (void **)&v67;
  std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100](v71);
  dmlc::io::FileInfo::~FileInfo(&v68);
  dmlc::io::FileInfo::~FileInfo(&v69);
  v71[0] = a16;
  std::vector<dmlc::io::URI>::__destroy_vector::operator()[abi:ne180100](v71);
  v71[0] = (void **)&v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v71);
  _Unwind_Resume(a1);
}

void sub_22E9EFAE8(_Unwind_Exception *a1)
{
  v6[0] = &v2;
  std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100](v6);
  dmlc::io::FileInfo::~FileInfo((dmlc::io::FileInfo *)&v3);
  dmlc::io::FileInfo::~FileInfo((dmlc::io::FileInfo *)&v4);
  std::vector<dmlc::io::URI>::__destroy_vector::operator()[abi:ne180100](v6);
  v6[0] = &v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v6);
  _Unwind_Resume(a1);
}

void sub_22E9EFAF0()
{
}

void sub_22E9EFAF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  JUMPOUT(0x22E9EFB30);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }

  std::locale::~locale(this);
}

uint64_t (***dmlc::io::InputSplitBase::Read(dmlc::io::InputSplitBase *this, char *a2, uint64_t a3))(void, char *, uint64_t)
{
  void v28[3] = *(void **)MEMORY[0x263EF8340];
  int v6 = (*(uint64_t (**)(dmlc::io::InputSplitBase *))(*(void *)this + 88))(this);
  __n128 result = (uint64_t (***)(void, char *, uint64_t))*((void *)this + 11);
  if (result)
  {
    unint64_t v8 = *((void *)this + 7);
    if (*((void *)this + 6) >= v8) {
      return 0;
    }
    uint64_t v9 = *((void *)this + 5);
    unint64_t v10 = v9 + a3;
    uint64_t v11 = v8 - v9;
    if (v10 > v8) {
      a3 = v11;
    }
    if (a3)
    {
      uint64_t v12 = (**result)(result, a2, a3);
      uint64_t v13 = *((void *)this + 5) + v12;
      *((void *)this + 5) = v13;
      uint64_t v14 = a3 - v12;
      if (a3 != v12)
      {
        long long v15 = &a2[v12];
        do
        {
          if (v12)
          {
            char v16 = (uint64_t (***)(void, char *, uint64_t))*((void *)this + 11);
          }
          else
          {
            if (v6)
            {
              *v15++ = 10;
              --v14;
              uint64_t v13 = *((void *)this + 5);
            }
            unint64_t v17 = *((void *)this + 12) + 1;
            if (v13 != *(void *)(*((void *)this + 2) + 8 * v17))
            {
              dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/input_split_base.cc");
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28[0], (uint64_t)"curr=", 5);
              unint64_t v18 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)",begin=", 7);
              int v19 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)",end=", 5);
              unint64_t v20 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)",fileptr=", 9);
              uint64_t v21 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)",fileoffset=", 12);
              std::ostream::operator<<();
              dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v28);
              if (*((void *)this + 12))
              {
                unint64_t v22 = 0;
                do
                {
                  dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/input_split_base.cc");
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28[0], (uint64_t)"offset[", 7);
                  int v23 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]=", 2);
                  std::ostream::operator<<();
                  dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v28);
                  ++v22;
                }
                while (v22 < *((void *)this + 12));
              }
              Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v28);
              dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/input_split_base.cc");
              int v25 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v28);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"file offset not calculated correctly", 36);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v28);
              unint64_t v17 = *((void *)this + 12) + 1;
            }
            uint64_t v26 = *((void *)this + 8);
            if (v17 >= 0x2E8BA2E8BA2E8BA3 * ((*((void *)this + 9) - v26) >> 3)) {
              return (uint64_t (***)(void, char *, uint64_t))(a3 - v14);
            }
            *((void *)this + 12) = v17;
            uint64_t v27 = *((void *)this + 11);
            if (v27)
            {
              (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
              unint64_t v17 = *((void *)this + 12);
              uint64_t v26 = *((void *)this + 8);
            }
            char v16 = (uint64_t (***)(void, char *, uint64_t))(*(uint64_t (**)(void, unint64_t, void))(**((void **)this + 1) + 48))(*((void *)this + 1), v26 + 88 * v17, 0);
            *((void *)this + 11) = v16;
          }
          uint64_t v12 = (**v16)(v16, v15, v14);
          v15 += v12;
          uint64_t v13 = *((void *)this + 5) + v12;
          *((void *)this + 5) = v13;
          v14 -= v12;
        }
        while (v14);
      }
      return (uint64_t (***)(void, char *, uint64_t))(a3 - v14);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_22E9EFF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t dmlc::io::InputSplitBase::ReadChunk(dmlc::io::InputSplitBase *this, char *__dst, unint64_t *a3)
{
  size_t v6 = *a3;
  uint64_t v7 = (std::string *)((char *)this + 168);
  if (*((char *)this + 191) < 0)
  {
    size_t v8 = *((void *)this + 22);
    if (v6 > v8)
    {
      if (!v8)
      {
        uint64_t v11 = 0;
        goto LABEL_13;
      }
      uint64_t v9 = (char *)v7->__r_.__value_.__r.__words[0];
      goto LABEL_8;
    }
LABEL_10:
    *a3 = 0;
    return 1;
  }
  size_t v8 = *((unsigned __int8 *)this + 191);
  if (v6 <= v8) {
    goto LABEL_10;
  }
  uint64_t v9 = (char *)this + 168;
  if (!v8)
  {
    LOBYTE(v10) = 0;
    goto LABEL_9;
  }
LABEL_8:
  memcpy(__dst, v9, v8);
  int v10 = *((char *)this + 191);
  if (v10 < 0)
  {
    uint64_t v11 = *((void *)this + 22);
    goto LABEL_13;
  }
LABEL_9:
  uint64_t v11 = v10;
LABEL_13:
  std::string::resize(v7, 0, 0);
  uint64_t v12 = dmlc::io::InputSplitBase::Read(this, &__dst[v11], v6 - v11);
  unint64_t v13 = (unint64_t)v12 + v11;
  if (!v13) {
    return 0;
  }
  uint64_t v14 = v12;
  if ((*(unsigned int (**)(dmlc::io::InputSplitBase *))(*(void *)this + 88))(this))
  {
    if (v14)
    {
      size_t v6 = v13;
    }
    else
    {
      __dst[v13] = 10;
      size_t v6 = v13 + 1;
    }
  }
  else if (v13 != v6)
  {
    *a3 = v13;
    return 1;
  }
  char v16 = (unsigned char *)(*(uint64_t (**)(dmlc::io::InputSplitBase *, char *, char *))(*(void *)this + 120))(this, __dst, &__dst[v6]);
  *a3 = v16 - __dst;
  std::string::resize(v7, v6 - (v16 - __dst), 0);
  if ((*((char *)this + 191) & 0x80000000) == 0)
  {
    size_t v17 = *((unsigned __int8 *)this + 191);
    if (!*((unsigned char *)this + 191)) {
      return 1;
    }
    goto LABEL_26;
  }
  size_t v17 = *((void *)this + 22);
  if (v17)
  {
    uint64_t v7 = (std::string *)v7->__r_.__value_.__r.__words[0];
LABEL_26:
    memcpy(v7, v16, v17);
  }
  return 1;
}

uint64_t dmlc::io::InputSplitBase::Chunk::Load(dmlc::io::InputSplitBase::Chunk *this, dmlc::io::InputSplitBase *a2, uint64_t a3)
{
  uint64_t v5 = (std::vector<unsigned int> *)((char *)this + 16);
  for (std::vector<unsigned int>::size_type i = a3 + 1; ; std::vector<unsigned int>::size_type i = (v12 - v11) >> 1)
  {
    std::vector<unsigned int>::resize(v5, i);
    uint64_t v8 = *((void *)this + 2);
    uint64_t v7 = *((void *)this + 3);
    *(_DWORD *)(v7 - 4) = 0;
    uint64_t v14 = v7 - 4 - v8;
    uint64_t v9 = v7 == v8 ? 0 : v8;
    uint64_t result = (*(uint64_t (**)(dmlc::io::InputSplitBase *, uint64_t, uint64_t *))(*(void *)a2 + 72))(a2, v9, &v14);
    if ((result & 1) == 0) {
      break;
    }
    uint64_t v11 = *((void *)this + 2);
    uint64_t v12 = *((void *)this + 3);
    if (v14)
    {
      if (v12 == v11) {
        uint64_t v11 = 0;
      }
      uint64_t v13 = v11 + v14;
      *(void *)this = v11;
      *((void *)this + 1) = v13;
      return result;
    }
  }
  return result;
}

uint64_t dmlc::io::InputSplitBase::Chunk::Append(std::vector<unsigned int> *this, dmlc::io::InputSplitBase *a2, uint64_t a3)
{
  int64_t v6 = (char *)this->__end_ - (char *)this->__begin_;
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)&this->__end_cap_, a3 + this[1].__begin_ - this->__end_cap_.__value_);
  uint64_t v8 = 4 * a3;
  uint64_t v18 = v8;
  std::vector<unsigned int>::pointer begin = this[1].__begin_;
  *(begin - 1) = 0;
  if (begin == p_end_cap->__begin_) {
    std::vector<unsigned int>::pointer v10 = 0;
  }
  else {
    std::vector<unsigned int>::pointer v10 = p_end_cap->__begin_;
  }
  if (!(*(unsigned int (**)(dmlc::io::InputSplitBase *, int64_t, uint64_t *))(*(void *)a2 + 72))(a2, (int64_t)v10 + v6, &v18))return 0; {
  while (1)
  }
  {
    value = this->__end_cap_.__value_;
    std::vector<unsigned int>::pointer v12 = this[1].__begin_;
    if (v18) {
      break;
    }
    std::vector<unsigned int>::resize(p_end_cap, ((char *)v12 - (char *)value) >> 1);
    uint64_t v18 = v8;
    uint64_t v14 = this->__end_cap_.__value_;
    std::vector<unsigned int>::pointer v13 = this[1].__begin_;
    *(v13 - 1) = 0;
    if (v13 == v14) {
      long long v15 = 0;
    }
    else {
      long long v15 = v14;
    }
    if (((*(uint64_t (**)(dmlc::io::InputSplitBase *, int64_t, uint64_t *))(*(void *)a2 + 72))(a2, (int64_t)v15 + v6, &v18) & 1) == 0)return 0; {
  }
    }
  if (v12 == value) {
    value = 0;
  }
  size_t v17 = (unsigned int *)((char *)value + v6 + v18);
  this->__begin_ = value;
  this->__end_ = v17;
  return 1;
}

BOOL dmlc::io::InputSplitBase::ExtractNextChunk(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    *a2 = v3;
    a2[1] = v4 - v3;
    *a3 = v4;
  }
  return v3 != v4;
}

void std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<dmlc::io::URI>::__push_back_slow_path<dmlc::io::URI const&>(int64x2_t *a1, long long *a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  int v6 = a1 + 16;
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v7 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v7 = v3;
  }
  int v23 = a1 + 1;
  if (v7)
  {
    if (v7 > 0x38E38E38E38E38ELL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(72 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  unint64_t v20 = v8;
  v21.i64[0] = (uint64_t)&v8[72 * v2];
  v21.i64[1] = v21.i64[0];
  unint64_t v22 = &v8[72 * v7];
  std::allocator<dmlc::io::URI>::construct[abi:ne180100]<dmlc::io::URI,dmlc::io::URI const&>(v6, (std::string *)v21.i64[0], a2);
  uint64_t v9 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  uint64_t v11 = v21.i64[0];
  uint64_t v12 = v21.i64[0];
  if (v10 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v10);
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v10 - 72);
      *(void *)(v12 - 56) = *(void *)(v10 - 56);
      *(_OWORD *)(v12 - 72) = v13;
      *(void *)(v10 - 64) = 0;
      *(void *)(v10 - 56) = 0;
      *(void *)(v10 - 72) = 0;
      long long v14 = *(_OWORD *)(v10 - 48);
      *(void *)(v12 - 32) = *(void *)(v10 - 32);
      *(_OWORD *)(v12 - 48) = v14;
      *(void *)(v10 - 40) = 0;
      *(void *)(v10 - 32) = 0;
      *(void *)(v10 - 48) = 0;
      long long v15 = *(_OWORD *)(v10 - 24);
      *(void *)(v12 - 8) = *(void *)(v10 - 8);
      *(_OWORD *)(v12 - 24) = v15;
      v12 -= 72;
      *(void *)(v10 - 16) = 0;
      *(void *)(v10 - 8) = 0;
      *(void *)(v10 - 24) = 0;
      v10 -= 72;
    }
    while (v10 != v9);
    int64x2_t v16 = *a1;
  }
  uint64_t v17 = v11 + 72;
  a1->i64[0] = v12;
  a1->i64[1] = v11 + 72;
  int64x2_t v21 = v16;
  uint64_t v18 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v22;
  unint64_t v22 = v18;
  unint64_t v20 = (char *)v16.i64[0];
  std::__split_buffer<dmlc::io::URI>::~__split_buffer((uint64_t)&v20);
  return v17;
}

void sub_22E9F05C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<dmlc::io::URI>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<dmlc::io::URI>::construct[abi:ne180100]<dmlc::io::URI,dmlc::io::URI const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  unint64_t v7 = this + 2;
  if (*((char *)a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v8 = a3[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_22E9F068C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<dmlc::io::URI>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 72;
    std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100](v4, i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  unint64_t v2 = (const std::locale *)MEMORY[0x230FA7FA0]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x263F8C130]);
  return this;
}

void sub_22E9F0760(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>()
{
}

void sub_22E9F0BA8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 17);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F0C50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<unsigned int>::pointer end = a1->__end_;
  unint64_t v7 = a2;
  do
  {
    long long v8 = v7;
    unint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
    operator new();
  }
  if (v8 != a3)
  {
    while (*v8 == 124)
    {
      uint64_t v9 = a1->__end_;
      unint64_t v10 = v8 + 1;
      uint64_t v11 = v8 + 1;
      do
      {
        long long v8 = v11;
        uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v11, a3);
      }
      while (v8 != v11);
      if (v10 == v8) {
        operator new();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
      if (v8 == a3) {
        return a3;
      }
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      long long v6 = v3;
      uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(this, v3, v4);
    }
    while (v6 != v3);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<unsigned int>::pointer end = a1->__end_;
  unint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  long long v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    unint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)v8 + 1, a3);
    if (v8 + 1 == v10) {
      goto LABEL_9;
    }
    long long v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 14);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F0F5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x230FA80D0);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  JUMPOUT(0x230FA80D0);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  int v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_33;
      }
      int v17 = a2[1];
      if (v17 == 66)
      {
        BOOL v18 = 1;
      }
      else
      {
        if (v17 != 98) {
          goto LABEL_33;
        }
        BOOL v18 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v18);
      uint64_t v15 = 2;
      return &a2[v15];
    }
    if (v6 != 94) {
      goto LABEL_33;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_21:
    uint64_t v15 = 1;
    return &a2[v15];
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_21;
  }
  BOOL v9 = v6 == 40;
  long long v8 = (char *)(a2 + 1);
  BOOL v9 = !v9 || v8 == a3;
  if (!v9)
  {
    BOOL v9 = *v8 == 63;
    unint64_t v10 = (char *)(a2 + 2);
    if (v9 && v10 != a3)
    {
      int v12 = *v10;
      if (v12 == 33)
      {
        std::regex_traits<char>::regex_traits(&v43.__traits_);
        memset(&v43.__flags_, 0, 40);
        v43.__flags_ = a1->__flags_;
        long long v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v43, a2 + 3, a3);
        unsigned int marked_count = v43.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v43, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v13 == a3 || *v13 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      else
      {
        if (v12 != 61) {
          goto LABEL_33;
        }
        std::regex_traits<char>::regex_traits(&v43.__traits_);
        memset(&v43.__flags_, 0, 40);
        v43.__flags_ = a1->__flags_;
        long long v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v43, a2 + 3, a3);
        unsigned int v14 = v43.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v43, 0, a1->__marked_count_);
        a1->__marked_count_ += v14;
        if (v13 == a3 || *v13 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v43.__traits_.__loc_);
      uint64_t result = (unsigned __int8 *)(v13 + 1);
      if (v13 + 1 != (char *)a2) {
        return result;
      }
      int v7 = *a2;
    }
  }
LABEL_33:
  std::vector<unsigned int>::pointer end = a1->__end_;
  unsigned int v21 = a1->__marked_count_;
  if ((char)v7 <= 91)
  {
    uint64_t result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_58;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_98;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++a1->__open_count_;
          unint64_t v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 3, a3);
          if (v22 != a3 && *v22 == 41)
          {
            --a1->__open_count_;
            int v23 = (unsigned __int8 *)(v22 + 1);
            goto LABEL_94;
          }
LABEL_98:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v28 = a1->__marked_count_;
        ++a1->__open_count_;
        BOOL v29 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v29 == a3) {
          goto LABEL_98;
        }
        int v30 = v29;
        if (*v29 != 41) {
          goto LABEL_98;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v28);
        --a1->__open_count_;
        int v23 = (unsigned __int8 *)(v30 + 1);
        goto LABEL_94;
      case '*':
      case '+':
        goto LABEL_60;
      case '.':
        operator new();
      default:
        if ((char)v7 == 91)
        {
          int v23 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, a3);
          goto LABEL_94;
        }
        if ((char)v7 != 63) {
          goto LABEL_58;
        }
        goto LABEL_60;
    }
  }
  uint64_t v24 = ((char)v7 - 92);
  if (v24 <= 0x21)
  {
    if (((1 << (v7 - 92)) & 0x300000006) != 0) {
      return a2;
    }
    if ((char)v7 == 92)
    {
      int v23 = a2;
      if (v7 != 92) {
        goto LABEL_94;
      }
      int v25 = a2 + 1;
      if (a2 + 1 == (unsigned __int8 *)a3) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
      }
      int v26 = *v25;
      unsigned int v27 = v26 - 48;
      if (v26 == 48)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v27);
LABEL_93:
        int v23 = a2 + 2;
        goto LABEL_94;
      }
      if ((v26 - 49) <= 8)
      {
        int v23 = a2 + 2;
        if (a2 + 2 == (unsigned __int8 *)a3)
        {
          int v23 = (unsigned __int8 *)a3;
        }
        else
        {
          while (1)
          {
            int v31 = *v23;
            if ((v31 - 48) > 9) {
              break;
            }
            if (v27 >= 0x19999999) {
              goto LABEL_99;
            }
            ++v23;
            unsigned int v27 = v31 + 10 * v27 - 48;
            if (v23 == (unsigned __int8 *)a3)
            {
              int v23 = (unsigned __int8 *)a3;
              break;
            }
          }
          if (!v27) {
LABEL_99:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
        }
        if (v27 > v21) {
          goto LABEL_99;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v27);
        if (v25 != v23) {
          goto LABEL_94;
        }
        LOBYTE(v26) = *v25;
      }
      if ((char)v26 > 99)
      {
        if ((char)v26 == 119)
        {
          uint64_t v32 = a1;
          BOOL v33 = 0;
          goto LABEL_85;
        }
        if ((char)v26 == 115)
        {
          std::string v40 = a1;
          BOOL v41 = 0;
LABEL_91:
          started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v40, v41);
          int v37 = started->__mask_ | 0x4000;
          goto LABEL_92;
        }
        if ((char)v26 != 100) {
          goto LABEL_86;
        }
        int v34 = a1;
        BOOL v35 = 0;
      }
      else
      {
        if ((char)v26 != 68)
        {
          if ((char)v26 != 83)
          {
            if ((char)v26 == 87)
            {
              uint64_t v32 = a1;
              BOOL v33 = 1;
LABEL_85:
              uint64_t v38 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v32, v33);
              v38->__mask_ |= 0x500u;
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v38, 95);
              goto LABEL_93;
            }
LABEL_86:
            std::string v39 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
            if (v25 == (unsigned char *)v39) {
              int v23 = a2;
            }
            else {
              int v23 = (unsigned __int8 *)v39;
            }
LABEL_94:
            uint64_t result = a2;
            if (v23 == a2) {
              return result;
            }
            goto LABEL_95;
          }
          std::string v40 = a1;
          BOOL v41 = 1;
          goto LABEL_91;
        }
        int v34 = a1;
        BOOL v35 = 1;
      }
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v34, v35);
      int v37 = started->__mask_ | 0x400;
LABEL_92:
      started->__mask_ = v37;
      goto LABEL_93;
    }
    if (v24 == 31) {
LABEL_60:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
LABEL_58:
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  int v23 = a2 + 1;
LABEL_95:
  size_t v42 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v23, (unsigned __int8 *)a3, end, v21 + 1, v42);
}

void sub_22E9F1928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      long long v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        long long v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    long long v13 = a2;
    if (v12 != 123) {
      return v13;
    }
    uint64_t v15 = a2 + 1;
    int64x2_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            long long v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              long long v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              unsigned int v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            unsigned int v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        int v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          long long v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            long long v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        int v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v16 + 1, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            long long v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                long long v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            unsigned int v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    long long v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      long long v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  long long v13 = a2;
  if (v12 == 43)
  {
    long long v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      long long v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 6);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F1F28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E24DC18;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E24DC18;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26E24DC60;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26E24DC60;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }

  JUMPOUT(0x230FA80D0);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  memset(&v22, 0, 17);
  char v23 = 0;
  uint64_t v24 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  uint64_t v19 = v5;
  uint64_t v20 = v5;
  char v21 = 0;
  std::vector<std::csub_match>::value_type v22 = v18;
  uint64_t v24 = v5;
  char v23 = 1;
  uint64_t v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<std::csub_match>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<std::csub_match>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a1 + 80);
  uint64_t v13 = *(void *)(a2 + 32);
  unint64_t v14 = 1;
  do
  {
    uint64_t v15 = &begin[v14];
    uint64_t v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    unint64_t v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:

  operator delete(begin);
}

void sub_22E9F2710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int64x2_t v44 = 0uLL;
  unint64_t v45 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)std::string v40 = 0;
    memset(&v40[8], 0, 48);
    *(_OWORD *)std::vector<std::csub_match> __p = 0u;
    memset(v42, 0, 21);
    v44.i64[1] = (uint64_t)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(&v44, (uint64_t)v40);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (*(void *)&v40[32]) {
      operator delete(*(void **)&v40[32]);
    }
    uint64_t v38 = a4;
    uint64_t v13 = v44.i64[1];
    *(_DWORD *)(v44.i64[1] - 96) = 0;
    *(void *)(v13 - 88) = a2;
    *(void *)(v13 - 80) = a2;
    *(void *)(v13 - 72) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v44.i64[1] - 40), *(unsigned int *)(a1 + 32));
    uint64_t v14 = v44.i64[1];
    *(void *)(v44.i64[1] - 16) = v6;
    std::string v39 = a3;
    signed int v15 = a3 - a2;
    *(_DWORD *)(v14 - 8) = a5;
    *(unsigned char *)(v14 - 4) = a6;
    unsigned int v16 = 1;
    while (2)
    {
      if ((v16 & 0xFFF) != 0 || (int)(v16 >> 12) < v15)
      {
        std::vector<std::csub_match>::value_type v18 = (void *)(v14 - 16);
        uint64_t v17 = *(void *)(v14 - 16);
        uint64_t v19 = (_OWORD *)(v14 - 96);
        if (v17) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v14 - 96);
        }
        switch(*(_DWORD *)v19)
        {
          case 0xFFFFFC18:
            uint64_t v20 = *(const char **)(v14 - 80);
            if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v39) {
              goto LABEL_16;
            }
            uint64_t v29 = *v38;
            *(void *)uint64_t v29 = a2;
            *(void *)(v29 + 8) = v20;
            *(unsigned char *)(v29 + 16) = 1;
            uint64_t v30 = *(void *)(v14 - 64);
            uint64_t v31 = *(void *)(v14 - 56) - v30;
            if (v31)
            {
              unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
              BOOL v33 = (unsigned char *)(v30 + 16);
              unsigned int v34 = 1;
              do
              {
                uint64_t v35 = v29 + 24 * v34;
                *(_OWORD *)uint64_t v35 = *((_OWORD *)v33 - 1);
                char v36 = *v33;
                v33 += 24;
                *(unsigned char *)(v35 + 16) = v36;
              }
              while (v32 > v34++);
            }
            uint64_t v27 = 1;
            goto LABEL_25;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_23;
          case 0xFFFFFC1F:
LABEL_16:
            uint64_t v21 = v44.i64[1] - 96;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)(v44.i64[1] - 96));
            v44.i64[1] = v21;
            goto LABEL_23;
          case 0xFFFFFC20:
            long long v22 = *(_OWORD *)(v14 - 80);
            *(_OWORD *)std::string v40 = *v19;
            *(_OWORD *)&v40[16] = v22;
            memset(&v40[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v40[32], *(long long **)(v14 - 64), *(long long **)(v14 - 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v14 - 56) - *(void *)(v14 - 64)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v42[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v14 - 40), *(long long **)(v14 - 32), (uint64_t)(*(void *)(v14 - 32) - *(void *)(v14 - 40)) >> 4);
            uint64_t v23 = *v18;
            *(void *)((char *)&v42[1] + 5) = *(void *)(v14 - 11);
            v42[1] = v23;
            (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v18 + 24))(*v18, 1, v14 - 96);
            (*(void (**)(void, void, unsigned char *))(*(void *)v42[1] + 24))(v42[1], 0, v40);
            uint64_t v24 = v44.i64[1];
            if (v44.i64[1] >= v45)
            {
              v44.i64[1] = (uint64_t)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(&v44, (uint64_t)v40);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v25 = *(_OWORD *)&v40[16];
              *(_OWORD *)v44.i64[1] = *(_OWORD *)v40;
              *(_OWORD *)(v24 + 16) = v25;
              *(void *)(v24 + 32) = 0;
              *(void *)(v24 + 40) = 0;
              *(void *)(v24 + 48) = 0;
              *(void *)(v24 + 56) = 0;
              *(_OWORD *)(v24 + 32) = *(_OWORD *)&v40[32];
              *(void *)(v24 + 48) = *(void *)&v40[48];
              memset(&v40[32], 0, 24);
              *(void *)(v24 + 64) = 0;
              *(void *)(v24 + 72) = 0;
              *(_OWORD *)(v24 + 56) = *(_OWORD *)__p;
              *(void *)(v24 + 72) = v42[0];
              __p[0] = 0;
              __p[1] = 0;
              v42[0] = 0;
              uint64_t v26 = v42[1];
              *(void *)(v24 + 85) = *(void *)((char *)&v42[1] + 5);
              *(void *)(v24 + 80) = v26;
              v44.i64[1] = v24 + 96;
            }
            if (*(void *)&v40[32])
            {
              *(void *)&v40[40] = *(void *)&v40[32];
              operator delete(*(void **)&v40[32]);
            }
LABEL_23:
            uint64_t v14 = v44.i64[1];
            ++v16;
            if (v44.i64[0] == v44.i64[1]) {
              goto LABEL_24;
            }
            continue;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
      }
      break;
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
  }
LABEL_24:
  uint64_t v27 = 0;
LABEL_25:
  *(void *)std::string v40 = &v44;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  return v27;
}

void sub_22E9F2AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__state<char>::~__state(&a11);
  a11 = v16 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      std::vector<std::csub_match>::value_type v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      uint64_t v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    int v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      long long v25 = &end[v8];
      std::vector<std::csub_match>::size_type v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        std::pair<const char *, const char *> v27 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::csub_match>::size_type v12 = 2 * v11;
      if (2 * v11 <= __sz) {
        std::vector<std::csub_match>::size_type v12 = __sz;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::pair<const char *, const char *> v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v13);
      std::vector<std::csub_match>::size_type v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      std::vector<std::csub_match>::size_type v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      std::vector<std::csub_match>::value_type v18 = v16;
      std::vector<std::csub_match>::size_type v19 = 24 * __sz - 24 * v7;
      do
      {
        std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        std::pair<const char *, const char *> *v18 = v20;
        std::vector<std::csub_match>::value_type v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      std::pair<const char *, const char *> v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      std::vector<std::csub_match>::pointer v23 = this->__begin_;
      long long v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          std::pair<const char *, const char *> v24 = v22[-1].std::pair<const char *, const char *>;
          *(void *)&v16[-1].matched = *(void *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        long long v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
      {
        operator delete(v22);
      }
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    std::vector<std::csub_match>::value_type v18 = &begin[__sz];
    goto LABEL_19;
  }
  std::vector<std::pair<unsigned long, const char *>>::size_type v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    std::vector<std::csub_match>::value_type v18 = &end[v6];
LABEL_19:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v8 >> 3;
  if (v8 >> 3 <= __sz) {
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>>>(v10);
  std::vector<std::csub_match>::size_type v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  std::pair<const char *, const char *> v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[v6];
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = this->__begin_;
  std::vector<std::csub_match>::size_type v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    std::vector<std::csub_match>::size_type v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 12);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F30A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 16);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F30FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  std::pair<const char *, const char *> v27 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = &v7[96 * v2];
  *(_OWORD *)std::vector<std::pair<unsigned long, const char *>>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v13 = v9 + 96;
  v25.i64[1] = (uint64_t)(v9 + 96);
  std::vector<std::csub_match>::size_type v26 = v10;
  uint64_t v15 = a1->i64[0];
  unint64_t v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    int64x2_t v21 = vdupq_n_s64(v14);
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      std::vector<std::pair<unsigned long, const char *>>::pointer v17 = &v9[v16];
      uint64_t v18 = v14 + v16;
      long long v19 = *(_OWORD *)(v14 + v16 - 80);
      *((_OWORD *)v17 - 6) = *(_OWORD *)(v14 + v16 - 96);
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((void *)v17 - 8) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)(v14 + v16 - 64);
      *((void *)v17 - 6) = *(void *)(v14 + v16 - 48);
      *(void *)(v18 - 64) = 0;
      *(void *)(v18 - 56) = 0;
      *(void *)(v18 - 48) = 0;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)(v14 + v16 - 40);
      *((void *)v17 - 3) = *(void *)(v14 + v16 - 24);
      *(void *)(v18 - 40) = 0;
      *(void *)(v18 - 32) = 0;
      *(void *)(v18 - 24) = 0;
      uint64_t v20 = *(void *)(v14 + v16 - 16);
      *(void *)(v17 - 11) = *(void *)(v14 + v16 - 11);
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (v14 + v16 != v15);
    int64x2_t v21 = *a1;
    v9 += v16;
    uint64_t v13 = (char *)v25.i64[1];
    unint64_t v10 = v26;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v13;
  int64x2_t v25 = v21;
  long long v22 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v10;
  std::vector<std::csub_match>::size_type v26 = v22;
  uint64_t v24 = v21.i64[0];
  std::__split_buffer<std::__state<char>>::~__split_buffer((uint64_t)&v24);
  return v13;
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<std::__state<char>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)(i - 96));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_22E9F33E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_22E9F3458(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_223;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3) {
      goto LABEL_223;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3) {
      goto LABEL_223;
    }
    uint64_t v70 = (std::vector<std::pair<std::string, std::string>> *)(v7 + 88);
    uint64_t v71 = v7 + 16;
    uint64_t v72 = 4 - (void)a3;
    while (1)
    {
      long long v8 = (char *)v5;
      if ((char *)v5 == a3)
      {
        unint64_t v10 = a3;
        goto LABEL_132;
      }
      int v9 = *(unsigned __int8 *)v5;
      unint64_t v10 = (char *)v5;
      if (v9 != 93) {
        break;
      }
LABEL_132:
      uint64_t v5 = (uint64_t)v10;
LABEL_133:
      if (v8 == (char *)v5)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v8;
          }
          if (v8 != a3 && *v8 == 93) {
            return v8 + 1;
          }
        }
LABEL_223:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
    memset(&v76, 0, sizeof(v76));
    if ((char *)(v5 + 1) != a3 && v9 == 91)
    {
      int v11 = *(unsigned __int8 *)(v5 + 1);
      switch(v11)
      {
        case '.':
          unint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, (char *)(v5 + 2), a3, (uint64_t)&v76);
          uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
          std::string::size_type size = HIBYTE(v76.__r_.__value_.__r.__words[2]);
          if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v76.__r_.__value_.__l.__size_;
          }
          if (size)
          {
LABEL_34:
            if (v10 != a3)
            {
              int v15 = *v10;
              if (v15 != 93)
              {
                std::vector<std::pair<unsigned long, const char *>>::pointer v17 = v10 + 1;
                if (v10 + 1 != a3 && v15 == 45 && *v17 != 93)
                {
                  memset(&v75, 0, sizeof(v75));
                  uint64_t v18 = v10 + 2;
                  if (v10 + 2 != a3 && *v17 == 91 && *v18 == 46)
                  {
                    long long v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v10 + 3, a3, (uint64_t)&v75);
                    goto LABEL_136;
                  }
                  if ((v5 | 0x40) == 0x40)
                  {
                    LODWORD(v17) = *v17;
                    if (v17 == 92)
                    {
                      if (v5) {
                        long long v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10 + 2, a3, &v75);
                      }
                      else {
                        long long v19 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v10 + 2), (std::basic_regex<char> *)a3, &v75, v7);
                      }
LABEL_136:
                      uint64_t v18 = v19;
LABEL_137:
                      std::string v74 = v76;
                      std::string __p = v75;
                      memset(&v75, 0, sizeof(v75));
                      memset(&v76, 0, sizeof(v76));
                      if (*(unsigned char *)(v7 + 170))
                      {
                        if (*(unsigned char *)(v7 + 169))
                        {
                          BOOL v42 = (v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
                          std::string::size_type v43 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
                          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                            std::string::size_type v43 = v74.__r_.__value_.__l.__size_;
                          }
                          if (v43)
                          {
                            std::string::size_type v44 = 0;
                            do
                            {
                              if (v42) {
                                unint64_t v45 = (std::string *)v74.__r_.__value_.__r.__words[0];
                              }
                              else {
                                unint64_t v45 = &v74;
                              }
                              std::string::value_type v46 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), v45->__r_.__value_.__s.__data_[v44]);
                              if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                float v47 = &v74;
                              }
                              else {
                                float v47 = (std::string *)v74.__r_.__value_.__r.__words[0];
                              }
                              v47->__r_.__value_.__s.__data_[v44++] = v46;
                              BOOL v42 = (v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
                              std::string::size_type v48 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
                              if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                std::string::size_type v48 = v74.__r_.__value_.__l.__size_;
                              }
                            }
                            while (v44 < v48);
                          }
                          BOOL v49 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
                          std::string::size_type v50 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                            std::string::size_type v50 = __p.__r_.__value_.__l.__size_;
                          }
                          if (v50)
                          {
                            std::string::size_type v51 = 0;
                            do
                            {
                              if (v49) {
                                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                              }
                              else {
                                p_p = &__p;
                              }
                              std::string::value_type v53 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), p_p->__r_.__value_.__s.__data_[v51]);
                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                int v54 = &__p;
                              }
                              else {
                                int v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
                              }
                              v54->__r_.__value_.__s.__data_[v51++] = v53;
                              BOOL v49 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
                              std::string::size_type v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                std::string::size_type v55 = __p.__r_.__value_.__l.__size_;
                              }
                            }
                            while (v51 < v55);
                          }
                        }
                        std::string::size_type v56 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
                        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          v57 = &v74;
                        }
                        else {
                          v57 = (std::string *)v74.__r_.__value_.__r.__words[0];
                        }
                        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          std::string::size_type v56 = v74.__r_.__value_.__l.__size_;
                        }
                        std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v78, v71, (char *)v57, (char *)v57 + v56);
                        std::string::size_type v58 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          uint64_t v59 = &__p;
                        }
                        else {
                          uint64_t v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
                        }
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          std::string::size_type v58 = __p.__r_.__value_.__l.__size_;
                        }
                        std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&__s, v71, (char *)v59, (char *)v59 + v58);
                        std::string v79 = v78;
                        memset(&v78, 0, sizeof(v78));
                        std::string v80 = __s;
                        memset(&__s, 0, sizeof(__s));
                        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v70, (long long *)&v79);
                        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v80.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v79.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__s.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
                        {
                          uint64_t v60 = (void *)v78.__r_.__value_.__r.__words[0];
                          goto LABEL_207;
                        }
                      }
                      else
                      {
                        std::string::size_type v61 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
                        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          std::string::size_type v61 = v74.__r_.__value_.__l.__size_;
                        }
                        if (v61 != 1) {
                          goto LABEL_226;
                        }
                        std::string::size_type v62 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          std::string::size_type v62 = __p.__r_.__value_.__l.__size_;
                        }
                        if (v62 != 1) {
LABEL_226:
                        }
                          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
                        if (*(unsigned char *)(v7 + 169))
                        {
                          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            uint64_t v63 = &v74;
                          }
                          else {
                            uint64_t v63 = (std::string *)v74.__r_.__value_.__r.__words[0];
                          }
                          std::string::value_type v64 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), v63->__r_.__value_.__s.__data_[0]);
                          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            v65 = &v74;
                          }
                          else {
                            v65 = (std::string *)v74.__r_.__value_.__r.__words[0];
                          }
                          v65->__r_.__value_.__s.__data_[0] = v64;
                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            std::string v66 = &__p;
                          }
                          else {
                            std::string v66 = (std::string *)__p.__r_.__value_.__r.__words[0];
                          }
                          std::string::value_type v67 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), v66->__r_.__value_.__s.__data_[0]);
                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            uint64_t v68 = &__p;
                          }
                          else {
                            uint64_t v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
                          }
                          v68->__r_.__value_.__s.__data_[0] = v67;
                        }
                        std::string v79 = v74;
                        memset(&v74, 0, sizeof(v74));
                        std::string v80 = __p;
                        memset(&__p, 0, sizeof(__p));
                        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v70, (long long *)&v79);
                        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v80.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
                        {
                          uint64_t v60 = (void *)v79.__r_.__value_.__r.__words[0];
LABEL_207:
                          operator delete(v60);
                        }
                      }
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v74.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v75.__r_.__value_.__l.__data_);
                      }
                      char v28 = 1;
LABEL_129:
                      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v76.__r_.__value_.__l.__data_);
                      }
                      unint64_t v10 = v18;
                      if ((v28 & 1) == 0) {
                        goto LABEL_133;
                      }
                      goto LABEL_132;
                    }
                  }
                  else
                  {
                    LOBYTE(v17) = *v17;
                  }
                  std::string::operator=(&v75, (std::string::value_type)v17);
                  goto LABEL_137;
                }
              }
            }
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v76.__r_.__value_.__l.__size_)
              {
                if (v76.__r_.__value_.__l.__size_ == 1)
                {
                  uint64_t v16 = (std::string *)v76.__r_.__value_.__r.__words[0];
LABEL_43:
                  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v16->__r_.__value_.__s.__data_[0]);
LABEL_81:
                  char v28 = 1;
                  uint64_t v18 = v10;
                  goto LABEL_129;
                }
                uint64_t v16 = (std::string *)v76.__r_.__value_.__r.__words[0];
LABEL_80:
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
                goto LABEL_81;
              }
              operator delete(v76.__r_.__value_.__l.__data_);
            }
            else if (*((unsigned char *)&v76.__r_.__value_.__s + 23))
            {
              uint64_t v16 = &v76;
              if (HIBYTE(v76.__r_.__value_.__r.__words[2]) == 1) {
                goto LABEL_43;
              }
              goto LABEL_80;
            }
            goto LABEL_132;
          }
LABEL_28:
          if ((v5 | 0x40) == 0x40)
          {
            int v13 = *v10;
            if (v13 == 92)
            {
              unint64_t v14 = v10 + 1;
              if (v5)
              {
                unint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v14, a3, &v76);
              }
              else
              {
                unint64_t v10 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v14, (std::basic_regex<char> *)a3, &v76, v7);
                uint64_t v5 = 0;
              }
              goto LABEL_34;
            }
          }
          else
          {
            LOBYTE(v13) = *v10;
          }
          std::string::operator=(&v76, v13);
          ++v10;
          goto LABEL_34;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_222;
          }
          for (unint64_t i = 0; *(unsigned char *)(v5 + i + 2) != 58 || *(unsigned char *)(v5 + i + 3) != 93; ++i)
          {
            if (!(v72 + v5 + i)) {
              goto LABEL_222;
            }
          }
          long long v22 = (char *)(v5 + i + 2);
          if (v22 == a3) {
LABEL_222:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          int v23 = *(_DWORD *)(a1 + 24);
          std::string::__init_with_size[abi:ne180100]<char *,char *>(&v79, (char *)(v5 + 2), v22, i);
          std::string::size_type v24 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int64x2_t v25 = &v79;
          }
          else {
            int64x2_t v25 = (std::string *)v79.__r_.__value_.__r.__words[0];
          }
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v24 = v79.__r_.__value_.__l.__size_;
          }
          (*(void (**)(void, std::string *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v25, (char *)v25 + v24);
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::vector<std::csub_match>::size_type v26 = &v79;
          }
          else {
            std::vector<std::csub_match>::size_type v26 = (std::string *)v79.__r_.__value_.__r.__words[0];
          }
          std::regex_traits<char>::char_class_type classname = std::__get_classname((const char *)v26, v23 & 1);
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v79.__r_.__value_.__l.__data_);
          }
          if (!classname) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          }
          char v28 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          unint64_t v29 = v5 + i;
          goto LABEL_128;
        case '=':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_222;
          }
          for (uint64_t j = 0; *(unsigned char *)(v5 + j + 2) != 61 || *(unsigned char *)(v5 + j + 3) != 93; ++j)
          {
            if (!(v72 + v5 + j)) {
              goto LABEL_222;
            }
          }
          uint64_t v30 = (char *)(v5 + j + 2);
          if (v30 == a3) {
            goto LABEL_222;
          }
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v78, a1, (char *)(v5 + 2), v30);
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v31 = v78.__r_.__value_.__l.__size_;
            if (!v78.__r_.__value_.__l.__size_) {
LABEL_224:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            unint64_t v32 = (std::string *)v78.__r_.__value_.__r.__words[0];
          }
          else
          {
            std::string::size_type v31 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
            if (!*((unsigned char *)&v78.__r_.__value_.__s + 23)) {
              goto LABEL_224;
            }
            unint64_t v32 = &v78;
          }
          std::string::__init_with_size[abi:ne180100]<char *,char *>(&v79, (char *)v32, (char *)v32 + v31, v31);
          (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&__s);
          std::string::size_type v33 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v33 = __s.__r_.__value_.__l.__size_;
          }
          if (v33 != 1)
          {
            if (v33 == 12)
            {
              p_s = &__s;
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
              }
              p_s->__r_.__value_.__s.__data_[11] = p_s->__r_.__value_.__s.__data_[3];
            }
            else if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            {
              *__s.__r_.__value_.__l.__data_ = 0;
              __s.__r_.__value_.__l.__size_ = 0;
            }
            else
            {
              __s.__r_.__value_.__s.__data_[0] = 0;
              *((unsigned char *)&__s.__r_.__value_.__s + 23) = 0;
            }
          }
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v79.__r_.__value_.__l.__data_);
          }
          std::string::size_type v35 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v35 = __s.__r_.__value_.__l.__size_;
          }
          if (v35)
          {
            unint64_t v36 = *(void *)(v7 + 144);
            if (v36 >= *(void *)(v7 + 152))
            {
              uint64_t v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(v7 + 136), (long long *)&__s);
            }
            else
            {
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(v7 + 144), __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v37 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                *(void *)(v36 + 16) = *((void *)&__s.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v36 = v37;
              }
              uint64_t v40 = v36 + 24;
              *(void *)(v7 + 144) = v36 + 24;
            }
            *(void *)(v7 + 144) = v40;
          }
          else
          {
            std::string::size_type v38 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
            if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v38 = v78.__r_.__value_.__l.__size_;
            }
            if (v38 == 2)
            {
              BOOL v41 = &v78;
              if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                BOOL v41 = (std::string *)v78.__r_.__value_.__r.__words[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v41->__r_.__value_.__s.__data_[0], v41->__r_.__value_.__s.__data_[1]);
            }
            else
            {
              if (v38 != 1) {
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              }
              std::string v39 = &v78;
              if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string v39 = (std::string *)v78.__r_.__value_.__r.__words[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v39->__r_.__value_.__s.__data_[0]);
            }
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v78.__r_.__value_.__l.__data_);
          }
          char v28 = 0;
          unint64_t v29 = v5 + j;
LABEL_128:
          uint64_t v5 = v29 + 4;
          uint64_t v18 = v8;
          goto LABEL_129;
      }
    }
    uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    unint64_t v10 = v8;
    goto LABEL_28;
  }
  return a2;
}

void sub_22E9F3FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 11);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F4274(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x230FA80D0);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 3);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F43C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  uint64_t v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            unint64_t v6 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            unint64_t v6 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            unint64_t v6 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            int v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              uint64_t v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                int v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6) {
                  goto LABEL_23;
                }
              }
            }
          }
          goto LABEL_64;
        case 'v':
          if (a4)
          {
            unint64_t v6 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_64;
          }
          char v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_28;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u) {
            goto LABEL_64;
          }
          char v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_64;
          }
          char v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_33;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u) {
            goto LABEL_64;
          }
          char v13 = -87;
LABEL_33:
          std::string::value_type v14 = v12 + 16 * (v10 + v11) + v13;
          if (a4) {
            std::string::operator=(a4, v14);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        unint64_t v6 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_50;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          unint64_t v6 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_50:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      uint64_t v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if (v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          unint64_t v6 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_64;
    }
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65) {
      goto LABEL_64;
    }
    unsigned int v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v15 >= 0x5B && (v15 - 97) > 0x19u) {
      goto LABEL_64;
    }
    std::string::value_type v16 = v15 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v16);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_22E9F4840(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  uint64_t v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  MEMORY[0x230FA80D0](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 4);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F48FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E24DCF0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E24DCF0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E24DD38;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E24DD38;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E24DDC8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E24DDC8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E24DE10;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E24DE10;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      char v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x230FA80D0);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_22E9F5620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  unsigned int v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::string::value_type v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  uint64_t v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  void *v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  MEMORY[0x230FA80D0](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        int64x2_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          long long v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      int64x2_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        int64x2_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          std::string::size_type v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  unsigned int v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  int64x2_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    unint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  JUMPOUT(0x230FA80D0);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v10 = 0;
    BOOL negate = this->__negate_;
LABEL_220:
    int v127 = negate;
    goto LABEL_221;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_65;
  }
  char v6 = *current;
  LOBYTE(v129) = *current;
  char v7 = current[1];
  HIBYTE(v129) = v7;
  if (this->__icase_)
  {
    LOBYTE(v129) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v129) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v129;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v130, (const char *)&__s);
  std::string __p = v130;
  std::string::size_type size = HIBYTE(v130.__r_.__value_.__r.__words[2]);
  int v9 = SHIBYTE(v130.__r_.__value_.__r.__words[2]);
  if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v130.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    goto LABEL_14;
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)this->__traits_.__col_ + 32))(&v130);
  if (v9 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v130;
  if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v130.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v130.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_173;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_173:
    std::string::operator=(&__p, &__s);
    goto LABEL_9;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
LABEL_14:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_16;
    }
LABEL_65:
    int v127 = 0;
    uint64_t v10 = 1;
    goto LABEL_66;
  }
  std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v41) {
    goto LABEL_65;
  }
LABEL_16:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v13 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v13)
  {
    uint64_t v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1) {
      uint64_t v14 = 1;
    }
    p_second = &begin->second;
    do
    {
      if (v129 == *(p_second - 1) && HIBYTE(v129) == *p_second) {
        goto LABEL_248;
      }
      p_second += 2;
      --v14;
    }
    while (v14);
  }
  p_traits = &this->__traits_;
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    int v127 = 0;
    goto LABEL_182;
  }
  std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v129, (char *)&v130);
  std::vector<std::pair<std::string, std::string>>::pointer v18 = this->__ranges_.__begin_;
  char v19 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v20 = (char *)this->__ranges_.__end_ - (char *)v18;
  if (v20)
  {
    uint64_t v21 = 0;
    unint64_t v22 = v20 / 48;
    char v120 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = __s.__r_.__value_.__l.__size_;
    }
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_s = &__s;
    }
    else {
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if (v22 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v20 / 48;
    }
    unint64_t v26 = (unsigned __int8 *)&v18->second.__r_.__value_.__r.__words[2] + 7;
    BOOL v27 = 1;
    while (1)
    {
      int v28 = (char)*(v26 - 24);
      if (v28 >= 0) {
        size_t v29 = *(v26 - 24);
      }
      else {
        size_t v29 = *(void *)(v26 - 39);
      }
      if (v28 >= 0) {
        char v30 = (char *)(v26 - 47);
      }
      else {
        char v30 = *(char **)(v26 - 47);
      }
      if (v29 >= v23) {
        size_t v31 = v23;
      }
      else {
        size_t v31 = v29;
      }
      int v32 = memcmp(p_s, v30, v31);
      BOOL v33 = v23 >= v29;
      if (v32) {
        BOOL v33 = v32 >= 0;
      }
      if (v33)
      {
        int v34 = (char)*v26;
        if (v34 >= 0) {
          size_t v35 = *v26;
        }
        else {
          size_t v35 = *(void *)(v26 - 15);
        }
        if (v34 >= 0) {
          unint64_t v36 = (char *)(v26 - 23);
        }
        else {
          unint64_t v36 = *(char **)(v26 - 23);
        }
        if (v23 >= v35) {
          size_t v37 = v35;
        }
        else {
          size_t v37 = v23;
        }
        int v38 = memcmp(v36, p_s, v37);
        BOOL v39 = v35 >= v23;
        if (v38) {
          BOOL v39 = v38 >= 0;
        }
        if (v39) {
          break;
        }
      }
      BOOL v27 = ++v21 < v22;
      v26 += 48;
      if (v25 == v21)
      {
        int v127 = 0;
        char v40 = 1;
        goto LABEL_176;
      }
    }
    char v40 = 0;
    int v127 = 1;
LABEL_176:
    p_traits = &this->__traits_;
    char v19 = v120;
  }
  else
  {
    BOOL v27 = 0;
    int v127 = 0;
    char v40 = 1;
  }
  if (v19 < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (!v27)
  {
LABEL_182:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
      goto LABEL_230;
    }
    std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)p_traits, (char *)&v129, (char *)&v130);
    std::vector<std::string>::pointer v93 = this->__equivalences_.__begin_;
    uint64_t v94 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    int64_t v95 = (char *)this->__equivalences_.__end_ - (char *)v93;
    if (v95)
    {
      unint64_t v96 = 0;
      unint64_t v97 = v95 / 24;
      size_t v99 = __s.__r_.__value_.__l.__size_;
      v98 = (const void *)__s.__r_.__value_.__r.__words[0];
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v100 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v100 = __s.__r_.__value_.__l.__size_;
      }
      if (v97 <= 1) {
        uint64_t v101 = 1;
      }
      else {
        uint64_t v101 = v95 / 24;
      }
      for (BOOL i = 1; ; BOOL i = v96 < v97)
      {
        v103 = &v93[v96];
        std::string::size_type v104 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
        int v105 = (char)v104;
        if ((v104 & 0x80u) != 0) {
          std::string::size_type v104 = v103->__r_.__value_.__l.__size_;
        }
        if (v100 != v104) {
          goto LABEL_203;
        }
        unsigned int v106 = v105 >= 0 ? &v93[v96] : (std::string *)v103->__r_.__value_.__r.__words[0];
        if ((v94 & 0x80) == 0) {
          break;
        }
        v126 = v93;
        unint64_t v108 = v97;
        unsigned int v109 = v98;
        size_t v110 = v99;
        if (!memcmp(v98, v106, v99))
        {
          operator delete(__s.__r_.__value_.__l.__data_);
LABEL_228:
          if (!i)
          {
            int v127 = 1;
            goto LABEL_230;
          }
LABEL_248:
          int v119 = 1;
LABEL_249:
          int v127 = v119;
LABEL_250:
          uint64_t v10 = 2;
          goto LABEL_221;
        }
        ++v96;
        size_t v99 = v110;
        v98 = v109;
        unint64_t v97 = v108;
        std::vector<std::string>::pointer v93 = v126;
        if (v96 == v101) {
          goto LABEL_209;
        }
LABEL_207:
        ;
      }
      if (!v94) {
        goto LABEL_228;
      }
      uint64_t v107 = 0;
      while (__s.__r_.__value_.__s.__data_[v107] == v106->__r_.__value_.__s.__data_[v107])
      {
        if (v94 == ++v107) {
          goto LABEL_228;
        }
      }
LABEL_203:
      if (++v96 == v101) {
        goto LABEL_208;
      }
      goto LABEL_207;
    }
LABEL_208:
    if ((v94 & 0x80) != 0) {
LABEL_209:
    }
      operator delete(__s.__r_.__value_.__l.__data_);
LABEL_230:
    if ((char)v129 < 0)
    {
      neg_masuint64_t k = this->__neg_mask_;
    }
    else
    {
      masuint64_t k = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v117 = tab[v129];
      if (((v117 & mask) != 0 || v129 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v129) & 0x80000000) == 0
        && ((tab[HIBYTE(v129)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v129) == 95))
      {
        goto LABEL_248;
      }
      neg_masuint64_t k = this->__neg_mask_;
      if ((neg_mask & v117) != 0 || v129 == 95 && (neg_mask & 0x80) != 0) {
        goto LABEL_247;
      }
    }
    if (SHIBYTE(v129) < 0) {
      goto LABEL_248;
    }
    if ((this->__traits_.__ct_->__tab_[HIBYTE(v129)] & neg_mask) == 0)
    {
      int v119 = 1;
      if (HIBYTE(v129) != 95 || (neg_mask & 0x80) == 0) {
        goto LABEL_249;
      }
    }
LABEL_247:
    int v119 = v127;
    goto LABEL_249;
  }
  if ((v40 & 1) == 0) {
    goto LABEL_250;
  }
  uint64_t v10 = 2;
LABEL_66:
  unsigned __int8 v42 = *v2->__current_;
  v130.__r_.__value_.__s.__data_[0] = v42;
  if (this->__icase_)
  {
    unsigned __int8 v42 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v42);
    v130.__r_.__value_.__s.__data_[0] = v42;
  }
  std::vector<char>::pointer v43 = this->__chars_.__begin_;
  unint64_t v44 = this->__chars_.__end_ - v43;
  if (v44)
  {
    if (v44 <= 1) {
      unint64_t v44 = 1;
    }
    do
    {
      int v45 = *v43++;
      if (v45 == v42) {
        goto LABEL_219;
      }
    }
    while (--v44);
  }
  std::regex_traits<char>::char_class_type v46 = this->__neg_mask_;
  if (v46 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v42 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v42] & v46) == 0)
    {
      int v48 = (v46 >> 7) & 1;
      char v47 = v42 == 95 ? v48 : 0;
    }
    else
    {
      char v47 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v50 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v42, end - this->__neg_chars_.__begin_);
    std::string::size_type v51 = v50 ? v50 : end;
    if ((v47 & 1) == 0 && v51 == end)
    {
LABEL_219:
      BOOL negate = 1;
      goto LABEL_220;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v52 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v53 = this->__ranges_.__end_;
  if (v52 != v53)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v130, &v130.__r_.__value_.__s.__data_[1]);
      std::vector<std::pair<std::string, std::string>>::pointer v52 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v53 = this->__ranges_.__end_;
      unsigned int v54 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      unsigned int v54 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v42;
    }
    int64_t v55 = (char *)v53 - (char *)v52;
    if (v55)
    {
      uint64_t v124 = v10;
      uint64_t v56 = 0;
      unint64_t v57 = v55 / 48;
      char v122 = v54;
      if ((v54 & 0x80u) == 0) {
        std::string::size_type v58 = v54;
      }
      else {
        std::string::size_type v58 = __s.__r_.__value_.__l.__size_;
      }
      if ((v54 & 0x80u) == 0) {
        uint64_t v59 = &__s;
      }
      else {
        uint64_t v59 = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if (v57 <= 1) {
        uint64_t v60 = 1;
      }
      else {
        uint64_t v60 = v55 / 48;
      }
      std::string::size_type v61 = (unsigned __int8 *)&v52->second.__r_.__value_.__r.__words[2] + 7;
      BOOL v62 = 1;
      while (1)
      {
        int v63 = (char)*(v61 - 24);
        if (v63 >= 0) {
          size_t v64 = *(v61 - 24);
        }
        else {
          size_t v64 = *(void *)(v61 - 39);
        }
        if (v63 >= 0) {
          v65 = (char *)(v61 - 47);
        }
        else {
          v65 = *(char **)(v61 - 47);
        }
        if (v64 >= v58) {
          size_t v66 = v58;
        }
        else {
          size_t v66 = v64;
        }
        int v67 = memcmp(v59, v65, v66);
        BOOL v68 = v58 >= v64;
        if (v67) {
          BOOL v68 = v67 >= 0;
        }
        if (v68)
        {
          int v69 = (char)*v61;
          if (v69 >= 0) {
            size_t v70 = *v61;
          }
          else {
            size_t v70 = *(void *)(v61 - 15);
          }
          if (v69 >= 0) {
            uint64_t v71 = (char *)(v61 - 23);
          }
          else {
            uint64_t v71 = *(char **)(v61 - 23);
          }
          if (v58 >= v70) {
            size_t v72 = v70;
          }
          else {
            size_t v72 = v58;
          }
          int v73 = memcmp(v71, v59, v72);
          BOOL v74 = v70 >= v58;
          if (v73) {
            BOOL v74 = v73 >= 0;
          }
          if (v74) {
            break;
          }
        }
        BOOL v62 = ++v56 < v57;
        v61 += 48;
        if (v60 == v56) {
          goto LABEL_138;
        }
      }
      int v127 = 1;
LABEL_138:
      uint64_t v10 = v124;
      if ((v122 & 0x80) == 0) {
        goto LABEL_140;
      }
    }
    else
    {
      BOOL v62 = 0;
      if ((v54 & 0x80) == 0) {
        goto LABEL_140;
      }
    }
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_140:
    if (v62) {
      goto LABEL_221;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_214;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v130, &v130.__r_.__value_.__s.__data_[1]);
  std::vector<std::string>::pointer v75 = this->__equivalences_.__begin_;
  uint64_t v76 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v77 = (char *)this->__equivalences_.__end_ - (char *)v75;
  if (!v77)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
LABEL_214:
    if (v130.__r_.__value_.__s.__data_[0] < 0) {
      goto LABEL_221;
    }
    std::regex_traits<char>::char_class_type v111 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v130.__r_.__value_.__s.__data_[0]] & v111) == 0)
    {
      int v112 = (v111 >> 7) & 1;
      if (v130.__r_.__value_.__s.__data_[0] != 95) {
        int v112 = 0;
      }
      if (v112 != 1) {
        goto LABEL_221;
      }
    }
    goto LABEL_219;
  }
  uint64_t v125 = v10;
  unint64_t v78 = 0;
  unint64_t v79 = v77 / 24;
  size_t v81 = __s.__r_.__value_.__l.__size_;
  std::string v80 = (const void *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v82 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v82 = __s.__r_.__value_.__l.__size_;
  }
  if (v79 <= 1) {
    uint64_t v83 = 1;
  }
  else {
    uint64_t v83 = v77 / 24;
  }
  for (BOOL j = 1; ; BOOL j = v78 < v79)
  {
    v85 = &v75[v78];
    std::string::size_type v86 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
    int v87 = (char)v86;
    if ((v86 & 0x80u) != 0) {
      std::string::size_type v86 = v85->__r_.__value_.__l.__size_;
    }
    if (v82 == v86) {
      break;
    }
LABEL_162:
    if (++v78 == v83)
    {
      if ((v76 & 0x80) != 0) {
LABEL_212:
      }
        operator delete(__s.__r_.__value_.__l.__data_);
      uint64_t v10 = v125;
      goto LABEL_214;
    }
LABEL_166:
    ;
  }
  if (v87 >= 0) {
    v88 = &v75[v78];
  }
  else {
    v88 = (std::string *)v85->__r_.__value_.__r.__words[0];
  }
  if ((v76 & 0x80) == 0)
  {
    if (!v76)
    {
LABEL_167:
      int v127 = 1;
      uint64_t v10 = v125;
      if (!j) {
        goto LABEL_214;
      }
      goto LABEL_221;
    }
    uint64_t v89 = 0;
    while (__s.__r_.__value_.__s.__data_[v89] == v88->__r_.__value_.__s.__data_[v89])
    {
      if (v76 == ++v89) {
        goto LABEL_167;
      }
    }
    goto LABEL_162;
  }
  BOOL v121 = j;
  v123 = v2;
  v90 = v75;
  v91 = v80;
  size_t v92 = v81;
  if (memcmp(v80, v88, v81))
  {
    ++v78;
    size_t v81 = v92;
    std::string v80 = v91;
    std::vector<std::string>::pointer v75 = v90;
    char v2 = v123;
    if (v78 == v83) {
      goto LABEL_212;
    }
    goto LABEL_166;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  int v127 = 1;
  char v2 = v123;
  uint64_t v10 = v125;
  if (!v121) {
    goto LABEL_214;
  }
LABEL_221:
  if (v127 == this->__negate_)
  {
    first = 0;
    int v114 = -993;
  }
  else
  {
    v2->__current_ += v10;
    first = this->__first_;
    int v114 = -995;
  }
  v2->__do_ = v114;
  v2->__node_ = first;
}

void sub_22E9F63C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  char v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  std::basic_regex<char>::value_type locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  char v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E9F658C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char *,char *>(void *result, char *a2, char *a3, unint64_t a4)
{
  unint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *unint64_t v4 = result;
    unint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)unint64_t v4 = v10;
    unint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)unint64_t v4 = 0;
  return result;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    char v7 = __p;
  }
  else {
    char v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = (unsigned char *)a1;
      }
      else {
        char v10 = *(unsigned char **)a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E9F6750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 5);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F67B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  unint64_t v5 = a3 - 2;
  unint64_t v6 = a2;
  char v7 = a2;
  for (i = a2; ; char v7 = i)
  {
    int v9 = *i++;
    if (v9 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    ++v6;
    --v5;
  }
  if (v7 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v13, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 97)
  {
    if (locale_low <= 82)
    {
      if (LOBYTE(this->__traits_.__loc_.__locale_))
      {
        if (locale_low == 68)
        {
          int v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_23:
          *(_DWORD *)(a5 + 164) = v8;
          return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
        }
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      }
      std::string::value_type v15 = 0;
      unint64_t v16 = a4;
      goto LABEL_21;
    }
    if (locale_low == 83)
    {
      int v8 = *(_DWORD *)(a5 + 164) | 0x4000;
      goto LABEL_23;
    }
    if (locale_low != 87) {
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(unsigned char *)(a5 + 169))
    {
      char v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a5 + 24) + 40))(*(void *)(a5 + 24), 95);
      char v11 = v10;
      long long v13 = *(unsigned char **)(a5 + 72);
      unint64_t v12 = *(void *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        unsigned char *v13 = v10;
        uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_55:
        *(void *)(a5 + 72) = v14;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      unint64_t v27 = *(void *)(a5 + 64);
      int v28 = &v13[-v27];
      uint64_t v29 = (uint64_t)&v13[-v27 + 1];
      if (v29 >= 0)
      {
        unint64_t v30 = v12 - v27;
        if (2 * v30 > v29) {
          uint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v31 = v29;
        }
        if (v31) {
          int v32 = operator new(v31);
        }
        else {
          int v32 = 0;
        }
        int v34 = &v32[v31];
        v28[(void)v32] = v11;
        uint64_t v14 = (uint64_t)&v28[(void)v32 + 1];
        if (v13 == (unsigned char *)v27)
        {
          int v32 = &v28[(void)v32];
        }
        else
        {
          size_t v35 = &v13[~v27];
          do
          {
            char v36 = *--v13;
            (v35--)[(void)v32] = v36;
          }
          while (v13 != (unsigned char *)v27);
          long long v13 = *(unsigned char **)(a5 + 64);
        }
        *(void *)(a5 + 64) = v32;
        *(void *)(a5 + 72) = v14;
        *(void *)(a5 + 80) = v34;
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_55;
      }
LABEL_80:
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    std::vector<std::pair<std::string, std::string>>::pointer v18 = (unint64_t *)(a5 + 64);
    int64_t v20 = *(unsigned char **)(a5 + 72);
    unint64_t v19 = *(void *)(a5 + 80);
    if (*(unsigned char *)(a5 + 170))
    {
      if ((unint64_t)v20 >= v19)
      {
        unint64_t v21 = *v18;
        unint64_t v22 = &v20[-*v18];
        unint64_t v23 = (unint64_t)(v22 + 1);
        if ((uint64_t)(v22 + 1) < 0) {
          goto LABEL_80;
        }
        unint64_t v24 = v19 - v21;
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v25 = v23;
        }
        if (v25) {
          unint64_t v26 = operator new(v25);
        }
        else {
          unint64_t v26 = 0;
        }
        unsigned __int8 v42 = &v22[(void)v26];
        std::vector<char>::pointer v43 = (char *)v26 + v25;
        v22[(void)v26] = 95;
        uint64_t v33 = (uint64_t)&v22[(void)v26 + 1];
        if (v20 != (unsigned char *)v21)
        {
          unint64_t v44 = &v20[~v21];
          do
          {
            char v45 = *--v20;
            (v44--)[(void)v26] = v45;
          }
          while (v20 != (unsigned char *)v21);
LABEL_73:
          int64_t v20 = (unsigned char *)*v18;
          goto LABEL_75;
        }
        goto LABEL_74;
      }
    }
    else if ((unint64_t)v20 >= v19)
    {
      unint64_t v37 = *v18;
      int v38 = &v20[-*v18];
      unint64_t v39 = (unint64_t)(v38 + 1);
      if ((uint64_t)(v38 + 1) < 0) {
        goto LABEL_80;
      }
      unint64_t v40 = v19 - v37;
      if (2 * v40 > v39) {
        unint64_t v39 = 2 * v40;
      }
      if (v40 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v41 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v41 = v39;
      }
      if (v41) {
        unint64_t v26 = operator new(v41);
      }
      else {
        unint64_t v26 = 0;
      }
      unsigned __int8 v42 = &v38[(void)v26];
      std::vector<char>::pointer v43 = (char *)v26 + v41;
      v38[(void)v26] = 95;
      uint64_t v33 = (uint64_t)&v38[(void)v26 + 1];
      if (v20 != (unsigned char *)v37)
      {
        std::regex_traits<char>::char_class_type v46 = &v20[~v37];
        do
        {
          char v47 = *--v20;
          (v46--)[(void)v26] = v47;
        }
        while (v20 != (unsigned char *)v37);
        goto LABEL_73;
      }
LABEL_74:
      unint64_t v26 = v42;
LABEL_75:
      *(void *)(a5 + 64) = v26;
      *(void *)(a5 + 72) = v33;
      *(void *)(a5 + 80) = v43;
      if (v20) {
        operator delete(v20);
      }
      goto LABEL_77;
    }
    *int64_t v20 = 95;
    uint64_t v33 = (uint64_t)(v20 + 1);
LABEL_77:
    *(void *)(a5 + 72) = v33;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 114)
  {
    if (locale_low == 98)
    {
      unint64_t v16 = a4;
      std::string::value_type v15 = 8;
LABEL_21:
      std::string::operator=(v16, v15);
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    }
    if (locale_low != 100) {
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    int v9 = *(_DWORD *)(a5 + 160) | 0x400;
LABEL_25:
    *(_DWORD *)(a5 + 160) = v9;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low == 115)
  {
    int v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    goto LABEL_25;
  }
  if (locale_low != 119) {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
  }
  *(_DWORD *)(a5 + 160) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            unint64_t v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            unint64_t v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        unint64_t v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      unint64_t v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    int v8 = *(_WORD **)(a1 + 120);
    unint64_t v16 = *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a1 + 112);
      uint64_t v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        size_t v25 = (_WORD *)(v22 + 2 * v19);
        uint64_t v26 = v22 + 2 * v23;
        *size_t v25 = v6;
        unint64_t v24 = v25 + 1;
        unint64_t v37 = *(char **)(a1 + 112);
        unint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v37) {
          goto LABEL_46;
        }
        do
        {
          __int16 v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--size_t v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v30 = *(void *)(a1 + 112);
      uint64_t v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        uint64_t v32 = v31 >> 1;
        unint64_t v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1) {
          unint64_t v34 = v32 + 1;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        size_t v25 = (_WORD *)(v35 + 2 * v32);
        uint64_t v26 = v35 + 2 * v36;
        *size_t v25 = v6;
        unint64_t v24 = v25 + 1;
        unint64_t v39 = *(char **)(a1 + 112);
        unint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v39) {
          goto LABEL_46;
        }
        do
        {
          __int16 v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--size_t v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
  int v8 = *(_WORD **)(a1 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *int v8 = v6;
    unint64_t v24 = v8 + 1;
    goto LABEL_48;
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3) {
    goto LABEL_49;
  }
  uint64_t v11 = v10 >> 1;
  unint64_t v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1) {
    unint64_t v13 = v11 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    uint64_t v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v14);
  }
  else {
    uint64_t v15 = 0;
  }
  size_t v25 = (_WORD *)(v14 + 2 * v11);
  uint64_t v26 = v14 + 2 * v15;
  *size_t v25 = v6;
  unint64_t v24 = v25 + 1;
  int v28 = *(char **)(a1 + 112);
  unint64_t v27 = *(char **)(a1 + 120);
  if (v27 == v28) {
    goto LABEL_46;
  }
  do
  {
    __int16 v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--size_t v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  unint64_t v27 = *(char **)(a1 + 112);
LABEL_46:
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v26;
  if (v27) {
    operator delete(v27);
  }
LABEL_48:
  *(void *)(a1 + 120) = v24;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 1);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F70BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_22E9F7258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 2);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F72D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    __int16 v6 = __p;
  }
  else {
    __int16 v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E9F738C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 9);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F73EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_22E9F77E4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          int v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2) {
            return a2;
          }
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 8);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F78FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 7);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F7954(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x230FA80D0);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *int v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *int v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x230FA80D0);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26E24DFD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unint64_t v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - 1) = v5;
      *unint64_t v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x230FA80D0);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x230FA7AC0](exception, 15);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_22E9F7CD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  std::vector<char>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  int v9 = a2 + 1;
  int v8 = *a2;
  if (a2 + 1 != a3 || v8 != 36)
  {
    if ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      uint64_t v10 = v3 + 1;
      goto LABEL_17;
    }
    if (v9 != a3 && v8 == 92)
    {
      int v12 = *v9;
      if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x580000000000441) != 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v12);
        uint64_t v10 = v3 + 2;
        goto LABEL_17;
      }
    }
    if (*a2 == 46) {
      operator new();
    }
  }
  uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
LABEL_17:
  if (v3 == v10)
  {
    if (v9 == a3 || *v3 != 92) {
      return v3;
    }
    int v15 = *v9;
    if (v15 == 40)
    {
      uint64_t v16 = (uint64_t)(v3 + 2);
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      unsigned int v17 = a1->__marked_count_;
      do
      {
        uint64_t v18 = (char *)v16;
        uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, v16, a3);
      }
      while (v18 != (char *)v16);
      if (v18 == a3 || v18 + 1 == a3 || *v18 != 92 || v18[1] != 41) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      uint64_t v10 = v18 + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v17);
    }
    else
    {
      BOOL v27 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v15);
      uint64_t v28 = 2;
      if (!v27) {
        uint64_t v28 = 0;
      }
      uint64_t v10 = &v3[v28];
    }
  }
  if (v10 != v3)
  {
    if (v10 == a3) {
      return a3;
    }
    size_t v13 = a1->__marked_count_ + 1;
    int v14 = *v10;
    if (v14 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
      return ++v10;
    }
    if (v10 + 1 == a3 || v14 != 92 || v10[1] != 123) {
      return v10;
    }
    unint64_t v20 = (unsigned __int8 *)(v10 + 2);
    int v31 = 0;
    unint64_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v20, (unsigned __int8 *)a3, &v31);
    if (v20 == v21) {
LABEL_47:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    if (v21 != (unsigned __int8 *)a3)
    {
      uint64_t v22 = (char *)(v21 + 1);
      int v23 = *v21;
      if (v23 == 44)
      {
        int v30 = -1;
        unint64_t v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v21 + 1, (unsigned __int8 *)a3, &v30);
        if (v24 != (unsigned __int8 *)a3 && v24 + 1 != (unsigned __int8 *)a3 && *v24 == 92 && v24[1] == 125)
        {
          size_t v26 = v30;
          size_t v25 = v31;
          if (v30 == -1)
          {
            size_t v26 = -1;
          }
          else if (v30 < v31)
          {
            goto LABEL_47;
          }
          uint64_t v10 = (char *)&v24[2 * (v24[1] == 125)];
          __int16 v29 = a1;
LABEL_57:
          std::basic_regex<char,std::regex_traits<char>>::__push_loop(v29, v25, v26, end, marked_count + 1, v13, 1);
          return v10;
        }
      }
      else if (v22 != a3 && v23 == 92 && *v22 == 125)
      {
        uint64_t v10 = (char *)(v21 + 2);
        size_t v25 = v31;
        __int16 v29 = a1;
        size_t v26 = v31;
        goto LABEL_57;
      }
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    int v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  int v9 = *a2;
  uint64_t v10 = (v8 - 36);
  if (v10 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v10 == 5)
    {
      if (*(_DWORD *)(a1 + 36)) {
        goto LABEL_4;
      }
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v9);
LABEL_32:
      int v14 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
LABEL_13:
    if ((v8 - 123) < 2) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
LABEL_4:
  std::string v11 = a2 + 1;
  if (a2 + 1 == a3 || v9 != 92)
  {
LABEL_22:
    if (v9 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v12 = *v11;
  char v13 = *v11;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
    {
      int v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2 + 1, a3, 0);
    }
    else
    {
      BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
      uint64_t v17 = 2;
      if (!v16) {
        uint64_t v17 = 0;
      }
      int v15 = &a2[v17];
    }
    if (v15 != a2)
    {
LABEL_25:
      if (v15 == a2 && v15 != a3)
      {
        int v18 = *a2;
        if (v18 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor((std::basic_regex<char> *)a1);
          goto LABEL_32;
        }
        if (v18 != 40)
        {
          if (v18 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor((std::basic_regex<char> *)a1);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
        unsigned int v19 = *(_DWORD *)(a1 + 28);
        ++*(_DWORD *)(a1 + 36);
        unint64_t v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v20 == a3 || (unint64_t v21 = v20, *v20 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v19);
        --*(_DWORD *)(a1 + 36);
        int v15 = v21 + 1;
      }
      int v14 = (unsigned __int8 *)v15;
      if (v15 != a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    int v9 = *a2;
    goto LABEL_22;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
  int v14 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v22 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), v22);
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 42 * v6 - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x2A)
    {
      int v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v6 >= v24 >> 3)
      {
        if (v23 == (char *)*a1) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v24 >> 2;
        }
        int v87 = a1 + 3;
        uint64_t v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v25);
        size_t v84 = &v83[8 * v6];
        v85 = v84;
        std::string::size_type v86 = &v83[8 * v26];
        std::string::size_type v82 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v83, &v82);
        uint64_t v28 = v83;
        BOOL v27 = v84;
        __int16 v29 = v85;
        int v30 = v86;
        uint64_t v31 = a1[2];
        if (v31 == a1[1])
        {
          char v47 = v84;
        }
        else
        {
          do
          {
            if (v27 == v28)
            {
              if (v29 >= v30)
              {
                if (v30 == v27) {
                  unint64_t v37 = 1;
                }
                else {
                  unint64_t v37 = (v30 - v27) >> 2;
                }
                __int16 v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v37);
                uint64_t v28 = v38;
                uint64_t v32 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
                uint64_t v41 = v29 - v27;
                BOOL v40 = v29 == v27;
                __int16 v29 = v32;
                if (!v40)
                {
                  __int16 v29 = &v32[v41 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v42 = 8 * (v41 >> 3);
                  std::vector<char>::pointer v43 = v32;
                  unint64_t v44 = v27;
                  do
                  {
                    uint64_t v45 = *(void *)v44;
                    v44 += 8;
                    *(void *)std::vector<char>::pointer v43 = v45;
                    v43 += 8;
                    v42 -= 8;
                  }
                  while (v42);
                }
                int v30 = &v38[8 * v39];
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                uint64_t v33 = (v30 - v29) >> 3;
                if (v33 >= -1) {
                  uint64_t v34 = v33 + 1;
                }
                else {
                  uint64_t v34 = v33 + 2;
                }
                uint64_t v35 = v34 >> 1;
                uint64_t v32 = &v27[8 * (v34 >> 1)];
                uint64_t v36 = v27;
                if (v29 != v27)
                {
                  memmove(v32, v27, v29 - v27);
                  uint64_t v36 = v29;
                }
                __int16 v29 = &v36[8 * v35];
                uint64_t v28 = v27;
              }
            }
            else
            {
              uint64_t v32 = v27;
            }
            uint64_t v46 = *(void *)(v31 - 8);
            v31 -= 8;
            *((void *)v32 - 1) = v46;
            char v47 = v32 - 8;
            BOOL v27 = v47;
          }
          while (v31 != a1[1]);
        }
        BOOL v62 = (char *)*a1;
        *a1 = v28;
        a1[1] = v47;
        a1[2] = v29;
        a1[3] = v30;
        if (v62) {
          operator delete(v62);
        }
        goto LABEL_54;
      }
      if (v23 != v5)
      {
        uint64_t v83 = (char *)operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v83);
LABEL_54:
        uint64_t v4 = (char *)a1[1];
        unint64_t v9 = a1[5] + a1[4];
        goto LABEL_55;
      }
      uint64_t v83 = (char *)operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v83);
      uint64_t v59 = (void *)a1[1];
      uint64_t v5 = (char *)a1[2];
      uint64_t v61 = *v59;
      uint64_t v60 = (char *)(v59 + 1);
      uint64_t v11 = v61;
      a1[1] = v60;
      if (v5 == (char *)a1[3])
      {
        uint64_t v67 = (uint64_t)&v60[-*a1];
        if ((unint64_t)v60 > *a1)
        {
          uint64_t v68 = v67 >> 3;
          BOOL v15 = v67 >> 3 < -1;
          uint64_t v69 = (v67 >> 3) + 2;
          if (v15) {
            uint64_t v70 = v69;
          }
          else {
            uint64_t v70 = v68 + 1;
          }
          uint64_t v71 = -(v70 >> 1);
          uint64_t v72 = v70 >> 1;
          int v73 = &v60[-8 * v72];
          int64_t v74 = v5 - v60;
          if (v5 != v60)
          {
            memmove(&v60[-8 * v72], v60, v5 - v60);
            uint64_t v60 = (char *)a1[1];
          }
          uint64_t v5 = &v73[v74];
          size_t v22 = &v60[8 * v71];
          goto LABEL_14;
        }
        if (v5 == (char *)*a1) {
          unint64_t v75 = 1;
        }
        else {
          unint64_t v75 = (uint64_t)&v5[-*a1] >> 2;
        }
        BOOL v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
        std::vector<char>::pointer v50 = &v49[8 * (v75 >> 2)];
        std::vector<std::pair<std::string, std::string>>::pointer v52 = &v49[8 * v76];
        int64_t v77 = (uint64_t *)a1[1];
        uint64_t v5 = v50;
        uint64_t v78 = a1[2] - (void)v77;
        if (v78)
        {
          uint64_t v5 = &v50[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          std::string v80 = &v49[8 * (v75 >> 2)];
          do
          {
            uint64_t v81 = *v77++;
            *(void *)std::string v80 = v81;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
LABEL_47:
        std::string::size_type v58 = (char *)*a1;
        *a1 = v49;
        a1[1] = v50;
        a1[2] = v5;
        a1[3] = v52;
        if (v58)
        {
          operator delete(v58);
          uint64_t v5 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 42;
      uint64_t v12 = *(void *)v4;
      uint64_t v10 = v4 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          unint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            uint64_t v5 = (char *)a1[1];
          }
          size_t v22 = &v5[8 * v18];
          uint64_t v5 = &v20[v21];
LABEL_14:
          a1[1] = v22;
          a1[2] = v5;
          goto LABEL_50;
        }
        if (v5 == (char *)*a1) {
          unint64_t v48 = 1;
        }
        else {
          unint64_t v48 = (uint64_t)&v5[-*a1] >> 2;
        }
        BOOL v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v48);
        std::vector<char>::pointer v50 = &v49[8 * (v48 >> 2)];
        std::vector<std::pair<std::string, std::string>>::pointer v52 = &v49[8 * v51];
        std::vector<std::pair<std::string, std::string>>::pointer v53 = (uint64_t *)a1[1];
        uint64_t v5 = v50;
        uint64_t v54 = a1[2] - (void)v53;
        if (v54)
        {
          uint64_t v5 = &v50[v54 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = 8 * (v54 >> 3);
          uint64_t v56 = &v49[8 * (v48 >> 2)];
          do
          {
            uint64_t v57 = *v53++;
            *(void *)uint64_t v56 = v57;
            v56 += 8;
            v55 -= 8;
          }
          while (v55);
        }
        goto LABEL_47;
      }
    }
LABEL_50:
    *(void *)uint64_t v5 = v11;
    a1[2] += 8;
    goto LABEL_54;
  }
LABEL_55:
  unint64_t v63 = *(void *)&v4[8 * (v9 / 0x2A)] + 96 * (v9 % 0x2A);
  long long v64 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v63 = *(_OWORD *)a2;
  *(_OWORD *)(v63 + 16) = v64;
  *(void *)(v63 + 40) = 0;
  *(void *)(v63 + 48) = 0;
  *(void *)(v63 + 32) = 0;
  *(_OWORD *)(v63 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v63 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v63 + 56) = 0;
  *(void *)(v63 + 64) = 0;
  *(void *)(v63 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v63 + 56) = result;
  *(void *)(v63 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v66 = *(void *)(a2 + 80);
  *(void *)(v63 + 85) = *(void *)(a2 + 85);
  *(void *)(v63 + 80) = v66;
  ++a1[5];
  return result;
}

void sub_22E9F89A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(v10);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)(*(void *)(a1[1] + 8 * (v2 / 0x2A))
                                                                     + 96 * (v2 % 0x2A)));
  uint64_t v3 = a1[2];
  BOOL v4 = v3 == a1[1];
  uint64_t v5 = 42 * ((v3 - a1[1]) >> 3) - 1;
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  a1[5] = v6 - 1;
  if (v4) {
    uint64_t v5 = 0;
  }
  if ((unint64_t)(v5 - (v6 + v7) - 83) <= 0xFFFFFFFFFFFFFFABLL)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(void *a1, void *a2)
{
  BOOL v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      unint64_t v20 = (uint64_t *)a1[1];
      BOOL v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        BOOL v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        int v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)int v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        BOOL v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        BOOL v4 = (char *)a1[1];
      }
      BOOL v15 = &v4[8 * v11];
      BOOL v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)BOOL v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, void *a2)
{
  BOOL v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      BOOL v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        BOOL v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(*(void *)(a1 + 40) + v4) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v6);
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          uint64_t v8 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *(void *)(a1 + 40) = 0;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v10 = v9 >> 3;
  if (v10 == 1)
  {
    uint64_t v11 = 21;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    uint64_t v11 = 42;
LABEL_14:
    *(void *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13 != v14) {
      *(void *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<dmlc::io::FileInfo>::__push_back_slow_path<dmlc::io::FileInfo const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v6 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  uint64_t v11 = (std::string *)&v7[88 * v3];
  uint64_t v13 = &v7[88 * v6];
  std::allocator<dmlc::io::FileInfo>::construct[abi:ne180100]<dmlc::io::FileInfo,dmlc::io::FileInfo const&>(a1 + 16, v11, a2);
  uint64_t v12 = &v11[3].__r_.__value_.__s.__data_[16];
  std::vector<dmlc::io::FileInfo>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<dmlc::io::FileInfo>::~__split_buffer(&v10);
  return v8;
}

void sub_22E9F8F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<dmlc::io::FileInfo>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<dmlc::io::FileInfo>::construct[abi:ne180100]<dmlc::io::FileInfo,dmlc::io::FileInfo const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  unint64_t v7 = this + 2;
  if (*((char *)a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v8 = a3[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  std::string::size_type v9 = *((void *)a3 + 9);
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a3 + 20);
  this[3].__r_.__value_.__r.__words[0] = v9;
}

void sub_22E9F9000(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::JsonTypedArray(void *a1)
{
  *(void *)&double result = 0x700000000;
  a1[1] = 0x700000000;
  *a1 = &unk_26E248988;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

{
  double result;

  *(void *)&double result = 0x700000000;
  a1[1] = 0x700000000;
  *a1 = &unk_26E248988;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

__n128 xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::JsonTypedArray(__n128 *a1, __n128 *a2)
{
  a1->n128_u64[1] = 0x700000000;
  a1->n128_u64[0] = (unint64_t)&unk_26E248988;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2[2].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[1] = 0x700000000;
  a1->n128_u64[0] = (unint64_t)&unk_26E248988;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2[2].n128_u64[0] = 0;
  return result;
}

BOOL xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::operator==(uint64_t a1, _DWORD *a2)
{
  if (a2[3] == 7
    && (uint64_t v3 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value const>(a2),
        uint64_t v4 = *(void *)(a1 + 16),
        uint64_t v5 = *(void *)(a1 + 24),
        unint64_t v6 = (v5 - v4) >> 2,
        uint64_t v7 = v3[2],
        v6 == (v3[3] - v7) >> 2))
  {
    if (v5 == v4)
    {
      return 1;
    }
    else
    {
      BOOL v8 = 0;
      uint64_t v9 = 0;
      if (v6 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v6;
      }
      do
      {
        float v11 = *(float *)(v4 + 4 * v9);
        float v12 = *(float *)(v7 + 4 * v9);
        if (fabsf(v11) == INFINITY)
        {
          if (fabsf(v12) != INFINITY) {
            return v8;
          }
        }
        else if ((float)(v12 - v11) != 0.0)
        {
          return v8;
        }
        BOOL v8 = ++v9 >= v6;
      }
      while (v10 != v9);
    }
  }
  else
  {
    return 0;
  }
  return v8;
}

uint64_t xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::GetArray(uint64_t a1)
{
  return a1 + 16;
}

{
  return a1 + 16;
}

{
  return a1 + 16;
}

uint64_t xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::Set(uint64_t result, uint64_t a2, float a3)
{
  *(float *)(*(void *)(result + 16) + 4 * a2) = a3;
  return result;
}

uint64_t xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2;
}

uint64_t xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::Save(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1);
}

BOOL xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::IsClassOf(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 7;
}

double xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::JsonTypedArray(void *a1)
{
  *(void *)&double result = 0x800000000;
  a1[1] = 0x800000000;
  *a1 = &unk_26E24D838;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

{
  double result;

  *(void *)&double result = 0x800000000;
  a1[1] = 0x800000000;
  *a1 = &unk_26E24D838;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

__n128 xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::JsonTypedArray(__n128 *a1, __n128 *a2)
{
  a1->n128_u64[1] = 0x800000000;
  a1->n128_u64[0] = (unint64_t)&unk_26E24D838;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2[2].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[1] = 0x800000000;
  a1->n128_u64[0] = (unint64_t)&unk_26E24D838;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2[2].n128_u64[0] = 0;
  return result;
}

BOOL xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::operator==(uint64_t a1, _DWORD *lpsrc)
{
  if (lpsrc[3] == 8
  {
    return memcmp(v6, v4, v5) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::GetArray(uint64_t a1)
{
  return a1 + 16;
}

{
  return a1 + 16;
}

{
  return a1 + 16;
}

uint64_t xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::Set(uint64_t result, uint64_t a2, char a3)
{
  *(unsigned char *)(*(void *)(result + 16) + a2) = a3;
  return result;
}

uint64_t xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::Size(uint64_t a1)
{
  return *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::Save(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a1);
}

BOOL xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::IsClassOf(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 8;
}

double xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::JsonTypedArray(void *a1)
{
  *(void *)&double result = 0x900000000;
  a1[1] = 0x900000000;
  *a1 = &unk_26E24D880;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

{
  double result;

  *(void *)&double result = 0x900000000;
  a1[1] = 0x900000000;
  *a1 = &unk_26E24D880;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

__n128 xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::JsonTypedArray(__n128 *a1, __n128 *a2)
{
  a1->n128_u64[1] = 0x900000000;
  a1->n128_u64[0] = (unint64_t)&unk_26E24D880;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2[2].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[1] = 0x900000000;
  a1->n128_u64[0] = (unint64_t)&unk_26E24D880;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2[2].n128_u64[0] = 0;
  return result;
}

BOOL xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::operator==(uint64_t a1, _DWORD *lpsrc)
{
  if (lpsrc[3] == 9
  {
    return memcmp(v6, v4, v5) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::GetArray(uint64_t a1)
{
  return a1 + 16;
}

{
  return a1 + 16;
}

{
  return a1 + 16;
}

uint64_t xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::Set(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(*(void *)(result + 16) + 4 * a2) = a3;
  return result;
}

uint64_t xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2;
}

uint64_t xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::Save(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 48))(a2, a1);
}

BOOL xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::IsClassOf(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 9;
}

double xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::JsonTypedArray(void *a1)
{
  *(void *)&double result = 0xA00000000;
  a1[1] = 0xA00000000;
  *a1 = &unk_26E24D8C8;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

{
  double result;

  *(void *)&double result = 0xA00000000;
  a1[1] = 0xA00000000;
  *a1 = &unk_26E24D8C8;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

__n128 xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::JsonTypedArray(__n128 *a1, __n128 *a2)
{
  a1->n128_u64[1] = 0xA00000000;
  a1->n128_u64[0] = (unint64_t)&unk_26E24D8C8;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2[2].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[1] = 0xA00000000;
  a1->n128_u64[0] = (unint64_t)&unk_26E24D8C8;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2[2].n128_u64[0] = 0;
  return result;
}

BOOL xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::operator==(uint64_t a1, _DWORD *lpsrc)
{
  if (lpsrc[3] == 10
  {
    return memcmp(v6, v4, v5) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::GetArray(uint64_t a1)
{
  return a1 + 16;
}

{
  return a1 + 16;
}

{
  return a1 + 16;
}

uint64_t xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::Set(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 16) + 8 * a2) = a3;
  return result;
}

uint64_t xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
}

uint64_t xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::Save(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a1);
}

BOOL xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::IsClassOf(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 10;
}

uint64_t xgboost::JsonWriter::Save(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, a1);
}

void xgboost::JsonWriter::Visit(void *a1, uint64_t a2)
{
  uint64_t v4 = (unint64_t *)a1[1];
  unint64_t v6 = (unsigned char *)v4[1];
  unint64_t v5 = v4[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    uint64_t v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
LABEL_67:
    }
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = 91;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      BOOL v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      unint64_t v6 = (unsigned char *)*v4;
    }
    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    unsigned char *v6 = 91;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  uint64_t v17 = *(void *)(a2 + 24) - *(void *)(a2 + 16);
  if (v17)
  {
    uint64_t v18 = 0;
    unint64_t v19 = v17 >> 3;
    unint64_t v20 = v19 - 1;
    if (v19 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v19;
    }
    do
    {
      uint64_t v22 = *(void *)(*(void *)(a2 + 16) + 8 * v18);
      uint64_t v51 = v22;
      if (v22) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 8), 1u, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t *))(*a1 + 16))(a1, &v51);
      uint64_t v23 = v51;
      if (v51 && atomic_fetch_add_explicit((atomic_uint *volatile)(v51 + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
      if (v18 != v20)
      {
        uint64_t v24 = (unint64_t *)a1[1];
        uint64_t v26 = (unsigned char *)v24[1];
        unint64_t v25 = v24[2];
        if ((unint64_t)v26 >= v25)
        {
          unint64_t v28 = *v24;
          __int16 v29 = &v26[-*v24];
          unint64_t v30 = (unint64_t)(v29 + 1);
          if ((uint64_t)(v29 + 1) < 0) {
            goto LABEL_67;
          }
          unint64_t v31 = v25 - v28;
          if (2 * v31 > v30) {
            unint64_t v30 = 2 * v31;
          }
          if (v31 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v32 = v30;
          }
          if (v32) {
            uint64_t v33 = (char *)operator new(v32);
          }
          else {
            uint64_t v33 = 0;
          }
          uint64_t v34 = &v29[(void)v33];
          uint64_t v35 = &v29[(void)v33];
          *uint64_t v35 = 44;
          BOOL v27 = v35 + 1;
          if (v26 != (unsigned char *)v28)
          {
            uint64_t v36 = &v26[~v28];
            do
            {
              char v37 = *--v26;
              (v36--)[(void)v33] = v37;
            }
            while (v26 != (unsigned char *)v28);
            uint64_t v26 = (unsigned char *)*v24;
            uint64_t v34 = v33;
          }
          *uint64_t v24 = (unint64_t)v34;
          v24[1] = (unint64_t)v27;
          v24[2] = (unint64_t)&v33[v32];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *uint64_t v26 = 44;
          BOOL v27 = v26 + 1;
        }
        v24[1] = (unint64_t)v27;
      }
      ++v18;
    }
    while (v18 != v21);
  }
  __int16 v38 = (unint64_t *)a1[1];
  BOOL v40 = (unsigned char *)v38[1];
  unint64_t v39 = v38[2];
  if ((unint64_t)v40 >= v39)
  {
    unint64_t v42 = *v38;
    std::vector<char>::pointer v43 = &v40[-*v38];
    unint64_t v44 = (unint64_t)(v43 + 1);
    if ((uint64_t)(v43 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v45 = v39 - v42;
    if (2 * v45 > v44) {
      unint64_t v44 = 2 * v45;
    }
    if (v45 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v46 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v46 = v44;
    }
    if (v46) {
      unint64_t v47 = (unint64_t)operator new(v46);
    }
    else {
      unint64_t v47 = 0;
    }
    unint64_t v48 = (char *)(v47 + v46);
    v43[v47] = 93;
    uint64_t v41 = (uint64_t)&v43[v47 + 1];
    if (v40 == (unsigned char *)v42)
    {
      v47 += (unint64_t)v43;
    }
    else
    {
      BOOL v49 = &v40[~v42];
      do
      {
        char v50 = *--v40;
        (v49--)[v47] = v50;
      }
      while (v40 != (unsigned char *)v42);
      BOOL v40 = (unsigned char *)*v38;
    }
    unint64_t *v38 = v47;
    v38[1] = v41;
    v38[2] = (unint64_t)v48;
    if (v40) {
      operator delete(v40);
    }
  }
  else
  {
    *BOOL v40 = 93;
    uint64_t v41 = (uint64_t)(v40 + 1);
  }
  v38[1] = v41;
}

void sub_22E9F9C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void xgboost::JsonWriter::Visit(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unint64_t **)(a1 + 8);
  unint64_t v5 = (unsigned char *)v3[1];
  unint64_t v4 = v3[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *v3;
    uint64_t v9 = &v5[-*v3];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v4 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = 91;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v5 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      BOOL v15 = &v5[~v8];
      do
      {
        char v16 = *--v5;
        (v15--)[v13] = v16;
      }
      while (v5 != (unsigned char *)v8);
      unint64_t v5 = (unsigned char *)*v3;
    }
    *uint64_t v3 = v13;
    v3[1] = v7;
    v3[2] = (unint64_t)v14;
    uint64_t v6 = a2;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    uint64_t v6 = a2;
    unsigned char *v5 = 91;
    uint64_t v7 = (uint64_t)(v5 + 1);
  }
  v3[1] = v7;
  if (*(void *)(v6 + 24) != *(void *)(v6 + 16)) {
    operator new();
  }
  uint64_t v17 = *(unint64_t **)(a1 + 8);
  unint64_t v19 = (unsigned char *)v17[1];
  unint64_t v18 = v17[2];
  if ((unint64_t)v19 >= v18)
  {
    unint64_t v21 = *v17;
    uint64_t v22 = &v19[-*v17];
    unint64_t v23 = (unint64_t)(v22 + 1);
    if ((uint64_t)(v22 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = v18 - v21;
    if (2 * v24 > v23) {
      unint64_t v23 = 2 * v24;
    }
    if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v25 = v23;
    }
    if (v25) {
      unint64_t v26 = (unint64_t)operator new(v25);
    }
    else {
      unint64_t v26 = 0;
    }
    BOOL v27 = (char *)(v26 + v25);
    v22[v26] = 93;
    uint64_t v20 = (uint64_t)&v22[v26 + 1];
    if (v19 == (unsigned char *)v21)
    {
      v26 += (unint64_t)v22;
    }
    else
    {
      unint64_t v28 = &v19[~v21];
      do
      {
        char v29 = *--v19;
        (v28--)[v26] = v29;
      }
      while (v19 != (unsigned char *)v21);
      unint64_t v19 = (unsigned char *)*v17;
    }
    unint64_t *v17 = v26;
    v17[1] = v20;
    v17[2] = (unint64_t)v27;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unint64_t v19 = 93;
    uint64_t v20 = (uint64_t)(v19 + 1);
  }
  v17[1] = v20;
}

{
  unint64_t *v3;
  unint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned char *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  unsigned char *v15;
  char v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned char *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned char *v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  unsigned char *v28;
  char v29;

  uint64_t v3 = *(unint64_t **)(a1 + 8);
  unint64_t v5 = (unsigned char *)v3[1];
  unint64_t v4 = v3[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *v3;
    uint64_t v9 = &v5[-*v3];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v4 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = 91;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v5 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      BOOL v15 = &v5[~v8];
      do
      {
        char v16 = *--v5;
        (v15--)[v13] = v16;
      }
      while (v5 != (unsigned char *)v8);
      unint64_t v5 = (unsigned char *)*v3;
    }
    *uint64_t v3 = v13;
    v3[1] = v7;
    v3[2] = (unint64_t)v14;
    uint64_t v6 = a2;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    uint64_t v6 = a2;
    unsigned char *v5 = 91;
    uint64_t v7 = (uint64_t)(v5 + 1);
  }
  v3[1] = v7;
  if (*(void *)(v6 + 24) != *(void *)(v6 + 16)) {
    operator new();
  }
  uint64_t v17 = *(unint64_t **)(a1 + 8);
  unint64_t v19 = (unsigned char *)v17[1];
  unint64_t v18 = v17[2];
  if ((unint64_t)v19 >= v18)
  {
    unint64_t v21 = *v17;
    uint64_t v22 = &v19[-*v17];
    unint64_t v23 = (unint64_t)(v22 + 1);
    if ((uint64_t)(v22 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = v18 - v21;
    if (2 * v24 > v23) {
      unint64_t v23 = 2 * v24;
    }
    if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v25 = v23;
    }
    if (v25) {
      unint64_t v26 = (unint64_t)operator new(v25);
    }
    else {
      unint64_t v26 = 0;
    }
    BOOL v27 = (char *)(v26 + v25);
    v22[v26] = 93;
    uint64_t v20 = (uint64_t)&v22[v26 + 1];
    if (v19 == (unsigned char *)v21)
    {
      v26 += (unint64_t)v22;
    }
    else
    {
      unint64_t v28 = &v19[~v21];
      do
      {
        char v29 = *--v19;
        (v28--)[v26] = v29;
      }
      while (v19 != (unsigned char *)v21);
      unint64_t v19 = (unsigned char *)*v17;
    }
    unint64_t *v17 = v26;
    v17[1] = v20;
    v17[2] = (unint64_t)v27;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unint64_t v19 = 93;
    uint64_t v20 = (uint64_t)(v19 + 1);
  }
  v17[1] = v20;
}

{
  unint64_t *v3;
  unint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned char *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  unsigned char *v15;
  char v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned char *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned char *v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  unsigned char *v28;
  char v29;

  uint64_t v3 = *(unint64_t **)(a1 + 8);
  unint64_t v5 = (unsigned char *)v3[1];
  unint64_t v4 = v3[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *v3;
    uint64_t v9 = &v5[-*v3];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v4 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = 91;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v5 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      BOOL v15 = &v5[~v8];
      do
      {
        char v16 = *--v5;
        (v15--)[v13] = v16;
      }
      while (v5 != (unsigned char *)v8);
      unint64_t v5 = (unsigned char *)*v3;
    }
    *uint64_t v3 = v13;
    v3[1] = v7;
    v3[2] = (unint64_t)v14;
    uint64_t v6 = a2;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    uint64_t v6 = a2;
    unsigned char *v5 = 91;
    uint64_t v7 = (uint64_t)(v5 + 1);
  }
  v3[1] = v7;
  if (*(void *)(v6 + 24) != *(void *)(v6 + 16)) {
    operator new();
  }
  uint64_t v17 = *(unint64_t **)(a1 + 8);
  unint64_t v19 = (unsigned char *)v17[1];
  unint64_t v18 = v17[2];
  if ((unint64_t)v19 >= v18)
  {
    unint64_t v21 = *v17;
    uint64_t v22 = &v19[-*v17];
    unint64_t v23 = (unint64_t)(v22 + 1);
    if ((uint64_t)(v22 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = v18 - v21;
    if (2 * v24 > v23) {
      unint64_t v23 = 2 * v24;
    }
    if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v25 = v23;
    }
    if (v25) {
      unint64_t v26 = (unint64_t)operator new(v25);
    }
    else {
      unint64_t v26 = 0;
    }
    BOOL v27 = (char *)(v26 + v25);
    v22[v26] = 93;
    uint64_t v20 = (uint64_t)&v22[v26 + 1];
    if (v19 == (unsigned char *)v21)
    {
      v26 += (unint64_t)v22;
    }
    else
    {
      unint64_t v28 = &v19[~v21];
      do
      {
        char v29 = *--v19;
        (v28--)[v26] = v29;
      }
      while (v19 != (unsigned char *)v21);
      unint64_t v19 = (unsigned char *)*v17;
    }
    unint64_t *v17 = v26;
    v17[1] = v20;
    v17[2] = (unint64_t)v27;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unint64_t v19 = 93;
    uint64_t v20 = (uint64_t)(v19 + 1);
  }
  v17[1] = v20;
}

{
  unint64_t *v3;
  unint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned char *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  unsigned char *v15;
  char v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned char *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned char *v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  unsigned char *v28;
  char v29;

  uint64_t v3 = *(unint64_t **)(a1 + 8);
  unint64_t v5 = (unsigned char *)v3[1];
  unint64_t v4 = v3[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *v3;
    uint64_t v9 = &v5[-*v3];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v4 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = 91;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v5 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      BOOL v15 = &v5[~v8];
      do
      {
        char v16 = *--v5;
        (v15--)[v13] = v16;
      }
      while (v5 != (unsigned char *)v8);
      unint64_t v5 = (unsigned char *)*v3;
    }
    *uint64_t v3 = v13;
    v3[1] = v7;
    v3[2] = (unint64_t)v14;
    uint64_t v6 = a2;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    uint64_t v6 = a2;
    unsigned char *v5 = 91;
    uint64_t v7 = (uint64_t)(v5 + 1);
  }
  v3[1] = v7;
  if (*(void *)(v6 + 24) != *(void *)(v6 + 16)) {
    operator new();
  }
  uint64_t v17 = *(unint64_t **)(a1 + 8);
  unint64_t v19 = (unsigned char *)v17[1];
  unint64_t v18 = v17[2];
  if ((unint64_t)v19 >= v18)
  {
    unint64_t v21 = *v17;
    uint64_t v22 = &v19[-*v17];
    unint64_t v23 = (unint64_t)(v22 + 1);
    if ((uint64_t)(v22 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = v18 - v21;
    if (2 * v24 > v23) {
      unint64_t v23 = 2 * v24;
    }
    if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v25 = v23;
    }
    if (v25) {
      unint64_t v26 = (unint64_t)operator new(v25);
    }
    else {
      unint64_t v26 = 0;
    }
    BOOL v27 = (char *)(v26 + v25);
    v22[v26] = 93;
    uint64_t v20 = (uint64_t)&v22[v26 + 1];
    if (v19 == (unsigned char *)v21)
    {
      v26 += (unint64_t)v22;
    }
    else
    {
      unint64_t v28 = &v19[~v21];
      do
      {
        char v29 = *--v19;
        (v28--)[v26] = v29;
      }
      while (v19 != (unsigned char *)v21);
      unint64_t v19 = (unsigned char *)*v17;
    }
    unint64_t *v17 = v26;
    v17[1] = v20;
    v17[2] = (unint64_t)v27;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unint64_t v19 = 93;
    uint64_t v20 = (uint64_t)(v19 + 1);
  }
  v17[1] = v20;
}

void sub_22E9FA094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_22E9FA4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_22E9FA8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_22E9FAD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void xgboost::JsonWriter::Visit(void *a1, void *a2)
{
  unint64_t v4 = (unint64_t *)a1[1];
  uint64_t v6 = (unsigned char *)v4[1];
  unint64_t v5 = v4[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    uint64_t v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = 123;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      BOOL v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      uint64_t v6 = (unsigned char *)*v4;
    }
    *unint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    unsigned char *v6 = 123;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  uint64_t v17 = (long long *)a2[2];
  unint64_t v18 = (long long *)(a2 + 3);
  if (v17 != (long long *)(a2 + 3))
  {
    uint64_t v19 = 0;
    uint64_t v20 = a2[4] - 1;
    do
    {
      xgboost::JsonString::JsonString(v68, v17 + 2);
      (*(void (**)(void *, void *))(*a1 + 96))(a1, v68);
      unint64_t v21 = (unint64_t *)a1[1];
      unint64_t v23 = (unsigned char *)v21[1];
      unint64_t v22 = v21[2];
      if ((unint64_t)v23 >= v22)
      {
        unint64_t v25 = *v21;
        unint64_t v26 = &v23[-*v21];
        unint64_t v27 = (unint64_t)(v26 + 1);
        if ((uint64_t)(v26 + 1) < 0) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v28 = v22 - v25;
        if (2 * v28 > v27) {
          unint64_t v27 = 2 * v28;
        }
        if (v28 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v29 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v29 = v27;
        }
        if (v29) {
          unint64_t v30 = (char *)operator new(v29);
        }
        else {
          unint64_t v30 = 0;
        }
        unint64_t v31 = &v26[(void)v30];
        size_t v32 = &v26[(void)v30];
        unsigned char *v32 = 58;
        unint64_t v24 = v32 + 1;
        if (v23 != (unsigned char *)v25)
        {
          uint64_t v33 = &v23[~v25];
          do
          {
            char v34 = *--v23;
            (v33--)[(void)v30] = v34;
          }
          while (v23 != (unsigned char *)v25);
          unint64_t v23 = (unsigned char *)*v21;
          unint64_t v31 = v30;
        }
        *unint64_t v21 = (unint64_t)v31;
        v21[1] = (unint64_t)v24;
        v21[2] = (unint64_t)&v30[v29];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *unint64_t v23 = 58;
        unint64_t v24 = v23 + 1;
      }
      v21[1] = (unint64_t)v24;
      uint64_t v35 = *((void *)v17 + 7);
      uint64_t v67 = v35;
      if (v35) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 + 8), 1u, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t *))(*a1 + 16))(a1, &v67);
      uint64_t v36 = v67;
      if (v67 && atomic_fetch_add_explicit((atomic_uint *volatile)(v67 + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
      }
      if (v19 != v20)
      {
        char v37 = (unint64_t *)a1[1];
        unint64_t v39 = (unsigned char *)v37[1];
        unint64_t v38 = v37[2];
        if ((unint64_t)v39 >= v38)
        {
          unint64_t v41 = *v37;
          unint64_t v42 = &v39[-*v37];
          unint64_t v43 = (unint64_t)(v42 + 1);
          if ((uint64_t)(v42 + 1) < 0) {
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v44 = v38 - v41;
          if (2 * v44 > v43) {
            unint64_t v43 = 2 * v44;
          }
          if (v44 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v45 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v45 = v43;
          }
          if (v45) {
            size_t v46 = (char *)operator new(v45);
          }
          else {
            size_t v46 = 0;
          }
          unint64_t v47 = &v42[(void)v46];
          unint64_t v48 = &v42[(void)v46];
          unsigned char *v48 = 44;
          BOOL v40 = v48 + 1;
          if (v39 != (unsigned char *)v41)
          {
            BOOL v49 = &v39[~v41];
            do
            {
              char v50 = *--v39;
              (v49--)[(void)v46] = v50;
            }
            while (v39 != (unsigned char *)v41);
            unint64_t v39 = (unsigned char *)*v37;
            unint64_t v47 = v46;
          }
          unint64_t *v37 = (unint64_t)v47;
          v37[1] = (unint64_t)v40;
          void v37[2] = (unint64_t)&v46[v45];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *unint64_t v39 = 44;
          BOOL v40 = v39 + 1;
        }
        v37[1] = (unint64_t)v40;
      }
      v68[0] = &unk_26E24E210;
      if (v69 < 0) {
        operator delete((void *)v68[2]);
      }
      uint64_t v51 = (long long *)*((void *)v17 + 1);
      if (v51)
      {
        do
        {
          std::vector<std::pair<std::string, std::string>>::pointer v52 = v51;
          uint64_t v51 = *(long long **)v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          std::vector<std::pair<std::string, std::string>>::pointer v52 = (long long *)*((void *)v17 + 2);
          BOOL v53 = *(void *)v52 == (void)v17;
          uint64_t v17 = v52;
        }
        while (!v53);
      }
      ++v19;
      uint64_t v17 = v52;
    }
    while (v52 != v18);
  }
  uint64_t v54 = (unint64_t *)a1[1];
  uint64_t v56 = (unsigned char *)v54[1];
  unint64_t v55 = v54[2];
  if ((unint64_t)v56 >= v55)
  {
    unint64_t v58 = *v54;
    uint64_t v59 = &v56[-*v54];
    unint64_t v60 = (unint64_t)(v59 + 1);
    if ((uint64_t)(v59 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v61 = v55 - v58;
    if (2 * v61 > v60) {
      unint64_t v60 = 2 * v61;
    }
    if (v61 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v62 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v62 = v60;
    }
    if (v62) {
      unint64_t v63 = (unint64_t)operator new(v62);
    }
    else {
      unint64_t v63 = 0;
    }
    long long v64 = (char *)(v63 + v62);
    v59[v63] = 125;
    uint64_t v57 = (uint64_t)&v59[v63 + 1];
    if (v56 == (unsigned char *)v58)
    {
      v63 += (unint64_t)v59;
    }
    else
    {
      v65 = &v56[~v58];
      do
      {
        char v66 = *--v56;
        (v65--)[v63] = v66;
      }
      while (v56 != (unsigned char *)v58);
      uint64_t v56 = (unsigned char *)*v54;
    }
    *uint64_t v54 = v63;
    v54[1] = v57;
    v54[2] = (unint64_t)v64;
    if (v56) {
      operator delete(v56);
    }
  }
  else
  {
    *uint64_t v56 = 125;
    uint64_t v57 = (uint64_t)(v56 + 1);
  }
  v54[1] = v57;
}

void sub_22E9FB238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::Json::~Json(atomic_uint **this)
{
  uint64_t v1 = *this;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)v1 + 8))(v1);
    }
  }
}

void xgboost::JsonString::~JsonString(void **this)
{
  *this = &unk_26E24E210;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26E24E210;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }

  JUMPOUT(0x230FA80D0);
}

void *xgboost::JsonWriter::Visit(xgboost::JsonWriter *this, const xgboost::JsonNumber *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = &v11;
  int v4 = xgboost::detail::ToCharsFloatImpl((xgboost::detail *)__src, *((float *)a2 + 4), (char *)a2);
  if (&__src[v4] < (unsigned char *)&v11) {
    uint64_t v3 = (uint64_t *)&__src[v4];
  }
  unint64_t v5 = (std::vector<char> *)*((void *)this + 1);
  std::vector<char>::pointer begin = v5->__begin_;
  unint64_t v7 = v5->__end_ - v5->__begin_;
  unint64_t v8 = (char *)v3 + v7 - __src;
  if (v3 != (uint64_t *)__src && v8 >= v7)
  {
    std::vector<char>::__append(v5, (char *)v3 - __src);
    std::vector<char>::pointer begin = (std::vector<char>::pointer)**((void **)this + 1);
  }
  else if (v8 < v7)
  {
    v5->__end_ = &begin[v8];
  }
  return memcpy(&begin[v7], __src, (char *)v3 - __src);
}

void *xgboost::JsonWriter::Visit(xgboost::JsonWriter *this, const xgboost::JsonInteger *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a2 + 2);
  if (v3)
  {
    p_src = (xgboost::detail *)&__src;
    if (v3 < 0)
    {
      char __src = 45;
      p_src = (xgboost::detail *)v17;
      uint64_t v3 = -v3;
    }
    unint64_t v5 = xgboost::detail::ToCharsUnsignedImpl(p_src, (xgboost::detail *)&v18, (char *)v3);
    if (v6)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/json.cc");
      unint64_t v8 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: ret.ec == std::errc()", 35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
  }
  else
  {
    char __src = 48;
    unint64_t v5 = v17;
  }
  std::vector<char>::size_type v10 = v5 - &__src;
  uint64_t v11 = (std::vector<char> *)*((void *)this + 1);
  std::vector<char>::pointer begin = v11->__begin_;
  unint64_t v13 = v11->__end_ - v11->__begin_;
  if (v13 >= v13 + v10)
  {
    if (v13 > v13 + v10) {
      v11->__end_ = &begin[v13 + v10];
    }
  }
  else
  {
    std::vector<char>::__append(v11, v10);
    std::vector<char>::pointer begin = (std::vector<char>::pointer)**((void **)this + 1);
  }
  return memcpy(&begin[v13], &__src, v10);
}

void sub_22E9FB58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, char a10)
{
}

std::vector<char> *xgboost::JsonWriter::Visit(uint64_t a1)
{
  __n128 result = *(std::vector<char> **)(a1 + 8);
  std::vector<char>::pointer begin = result->__begin_;
  unint64_t v4 = result->__end_ - result->__begin_;
  if (v4 > 0xFFFFFFFFFFFFFFFBLL)
  {
    result->__end_ = &begin[v4 + 4];
  }
  else
  {
    std::vector<char>::__append(result, 4uLL);
    __n128 result = *(std::vector<char> **)(a1 + 8);
    std::vector<char>::pointer begin = result->__begin_;
  }
  begin[v4] = 110;
  result->__begin_[v4 + 1] = 117;
  result->__begin_[v4 + 2] = 108;
  result->__begin_[v4 + 3] = 108;
  return result;
}

void xgboost::JsonWriter::Visit(xgboost::JsonWriter *this, const xgboost::JsonString *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  memset(&v18, 0, sizeof(v18));
  std::string::push_back(&v18, 34);
  unint64_t v3 = 0;
  unint64_t v4 = (char **)((char *)a2 + 16);
  while (1)
  {
    unint64_t v5 = *((char *)a2 + 39) < 0 ? *((void *)a2 + 3) : *((unsigned __int8 *)a2 + 39);
    if (v3 >= v5) {
      break;
    }
    int v6 = (char *)a2 + 16;
    if ((*((unsigned char *)a2 + 39) & 0x80) != 0) {
      int v6 = *v4;
    }
    int v7 = v6[v3];
    switch(v7)
    {
      case 8:
        unint64_t v8 = "\\b";
        goto LABEL_29;
      case 9:
        unint64_t v8 = "\\t";
        goto LABEL_29;
      case 10:
        unint64_t v8 = "\\n";
        goto LABEL_29;
      case 11:
        goto LABEL_14;
      case 12:
        unint64_t v8 = "\\f";
        goto LABEL_29;
      case 13:
        unint64_t v8 = "\\r";
        goto LABEL_29;
      default:
        if (v7 == 34)
        {
          unint64_t v8 = "\\\"";
LABEL_29:
          std::string::append(&v18, v8);
          goto LABEL_30;
        }
        if (v7 == 92)
        {
          if ((*((unsigned char *)a2 + 39) & 0x80) != 0) {
            unint64_t v9 = *((void *)a2 + 3);
          }
          else {
            unint64_t v9 = *((unsigned __int8 *)a2 + 39);
          }
          unint64_t v8 = "\\\\"";
          if (v3 < v9)
          {
            std::vector<char>::size_type v10 = (char *)a2 + 16;
            if ((*((unsigned char *)a2 + 39) & 0x80) != 0) {
              std::vector<char>::size_type v10 = *v4;
            }
            if (v10[v3 + 1] == 117) {
              unint64_t v8 = "\\"";
            }
            else {
              unint64_t v8 = "\\\\"";
            }
          }
          goto LABEL_29;
        }
LABEL_14:
        if ((char)v7 > 0x1F)
        {
          std::string::push_back(&v18, v7);
        }
        else
        {
          snprintf(__str, 8uLL, "\\u%04x", (char)v7);
          std::string::append(&v18, __str);
        }
LABEL_30:
        ++v3;
        break;
    }
  }
  std::string::push_back(&v18, 34);
  uint64_t v11 = (std::vector<char> *)*((void *)this + 1);
  std::vector<char>::pointer begin = v11->__begin_;
  unint64_t v13 = v11->__end_ - v11->__begin_;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::vector<char>::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::vector<char>::size_type size = v18.__r_.__value_.__l.__size_;
  }
  if (v13 >= size + v13)
  {
    if (v13 > size + v13) {
      v11->__end_ = &begin[size + v13];
    }
  }
  else
  {
    std::vector<char>::__append(v11, size);
    std::vector<char>::pointer begin = (std::vector<char>::pointer)**((void **)this + 1);
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v15 = &v18;
  }
  else {
    char v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v16 = v18.__r_.__value_.__l.__size_;
  }
  memcpy(&begin[v13], v15, v16);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_22E9FB8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<char> *xgboost::JsonWriter::Visit(uint64_t a1, uint64_t a2)
{
  __n128 result = *(std::vector<char> **)(a1 + 8);
  std::vector<char>::pointer begin = result->__begin_;
  unint64_t v5 = result->__end_ - result->__begin_;
  if (*(unsigned char *)(a2 + 16))
  {
    if (v5 > 0xFFFFFFFFFFFFFFFBLL)
    {
      result->__end_ = &begin[v5 + 4];
    }
    else
    {
      std::vector<char>::__append(result, 4uLL);
      __n128 result = *(std::vector<char> **)(a1 + 8);
      std::vector<char>::pointer begin = result->__begin_;
    }
    begin[v5] = 116;
    char v6 = 117;
    char v7 = 114;
    uint64_t v8 = 3;
    uint64_t v9 = 2;
    uint64_t v10 = 1;
  }
  else
  {
    if (v5 > 0xFFFFFFFFFFFFFFFALL)
    {
      result->__end_ = &begin[v5 + 5];
    }
    else
    {
      std::vector<char>::__append(result, 5uLL);
      __n128 result = *(std::vector<char> **)(a1 + 8);
      std::vector<char>::pointer begin = result->__begin_;
    }
    begin[v5] = 102;
    char v6 = 115;
    result->__begin_[v5 + 1] = 97;
    char v7 = 108;
    uint64_t v8 = 4;
    uint64_t v9 = 3;
    uint64_t v10 = 2;
  }
  result->__begin_[v10 + v5] = v7;
  result->__begin_[v9 + v5] = v6;
  result->__begin_[v8 + v5] = 101;
  return result;
}

void *xgboost::Value::TypeStr@<X0>(xgboost::Value *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((int *)this + 3);
  if (v4 > 0xA) {
    unint64_t v5 = (char *)&str_23;
  }
  else {
    unint64_t v5 = (&off_2649E12E0)[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

uint64_t *xgboost::DummyJsonObject(xgboost *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72518, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72518))
  {
    operator new();
  }
  return &_MergedGlobals_19;
}

void sub_22E9FBAF8(_Unwind_Exception *a1)
{
}

uint64_t *xgboost::Value::operator[](xgboost::Value *a1)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/json.cc");
  unint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Object of type ", 15);
  xgboost::Value::TypeStr(a1, __p);
  if ((v11 & 0x80u) == 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v6 = v11;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" can not be indexed by string.", 30);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v12);
  xgboost::DummyJsonObject(v8);
  return &_MergedGlobals_19;
}

{
  std::string *Entry;
  void *v3;
  void *v4;
  void **v5;
  uint64_t v6;
  void *v7;
  xgboost *v8;
  void *__p[2];
  unsigned __int8 v11;
  char v12;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/json.cc");
  unint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Object of type ", 15);
  xgboost::Value::TypeStr(a1, __p);
  if ((v11 & 0x80u) == 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v6 = v11;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" can not be indexed by Integer.", 31);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v12);
  xgboost::DummyJsonObject(v8);
  return &_MergedGlobals_19;
}

void sub_22E9FBBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_22E9FBCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
}

void *xgboost::JsonObject::JsonObject(void *a1, uint64_t a2)
{
  a1[1] = 0x300000000;
  *a1 = &unk_26E24E128;
  a1[4] = 0;
  a1[3] = 0;
  a1[2] = a1 + 3;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::swap((uint64_t *)(a2 + 16), (uint64_t)(a1 + 2));
  return a1;
}

{
  a1[1] = 0x300000000;
  *a1 = &unk_26E24E128;
  a1[4] = 0;
  a1[3] = 0;
  a1[2] = a1 + 3;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::swap((uint64_t *)(a2 + 16), (uint64_t)(a1 + 2));
  return a1;
}

void *xgboost::JsonObject::JsonObject(void *result, void *a2)
{
  result[1] = 0x300000000;
  *__n128 result = &unk_26E24E128;
  result[2] = *a2;
  unint64_t v2 = a2 + 1;
  uint64_t v3 = a2[1];
  result[3] = v3;
  uint64_t v4 = result + 3;
  uint64_t v5 = a2[2];
  result[4] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *a2 = v2;
    *unint64_t v2 = 0;
    a2[2] = 0;
  }
  else
  {
    result[2] = v4;
  }
  return result;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  result[1] = 0x300000000;
  *__n128 result = &unk_26E24E128;
  result[2] = *a2;
  unint64_t v2 = a2 + 1;
  uint64_t v3 = a2[1];
  result[3] = v3;
  uint64_t v4 = result + 3;
  uint64_t v5 = a2[2];
  result[4] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *a2 = v2;
    *unint64_t v2 = 0;
    a2[2] = 0;
  }
  else
  {
    result[2] = v4;
  }
  return result;
}

uint64_t xgboost::JsonObject::operator==(void *a1, _DWORD *a2)
{
  if (a2[3] == 3)
  {
    uint64_t v3 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(a2);
    if (a1[4] == v3[4])
    {
      uint64_t v4 = (void *)a1[2];
      uint64_t v5 = a1 + 3;
      if (v4 == v5) {
        return 1;
      }
      uint64_t v6 = (void *)v3[2];
      while (1)
      {
        uint64_t v7 = *((unsigned __int8 *)v4 + 55);
        if ((v7 & 0x80u) == 0) {
          uint64_t v8 = *((unsigned __int8 *)v4 + 55);
        }
        else {
          uint64_t v8 = v4[5];
        }
        uint64_t v9 = *((unsigned __int8 *)v6 + 55);
        int v10 = (char)v9;
        if ((v9 & 0x80u) != 0) {
          uint64_t v9 = v6[5];
        }
        if (v8 != v9) {
          break;
        }
        unsigned __int8 v11 = (const void **)(v4 + 4);
        if (v10 >= 0) {
          char v12 = (unsigned __int8 *)(v6 + 4);
        }
        else {
          char v12 = (unsigned __int8 *)v6[4];
        }
        if ((v7 & 0x80) != 0)
        {
          if (memcmp(*v11, v12, v4[5])) {
            return 0;
          }
        }
        else if (*((unsigned char *)v4 + 55))
        {
          while (*(unsigned __int8 *)v11 == *v12)
          {
            unsigned __int8 v11 = (const void **)((char *)v11 + 1);
            ++v12;
            if (!--v7) {
              goto LABEL_20;
            }
          }
          return 0;
        }
LABEL_20:
        uint64_t result = (*(uint64_t (**)(void, void))(*(void *)v4[7] + 40))(v4[7], v6[7]);
        if (result)
        {
          uint64_t v14 = (void *)v4[1];
          char v15 = v4;
          if (v14)
          {
            do
            {
              uint64_t v4 = v14;
              uint64_t v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              uint64_t v4 = (void *)v15[2];
              BOOL v16 = *v4 == (void)v15;
              char v15 = v4;
            }
            while (!v16);
          }
          uint64_t v17 = (void *)v6[1];
          if (v17)
          {
            do
            {
              std::string v18 = v17;
              uint64_t v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              std::string v18 = (void *)v6[2];
              BOOL v16 = *v18 == (void)v6;
              uint64_t v6 = v18;
            }
            while (!v16);
          }
          uint64_t result = 1;
          uint64_t v6 = v18;
          if (v4 != v5) {
            continue;
          }
        }
        return result;
      }
    }
  }
  return 0;
}

uint64_t xgboost::JsonObject::Save(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, a1);
}

uint64_t xgboost::JsonString::operator==(uint64_t a1, xgboost::Value *a2)
{
  if (*((_DWORD *)a2 + 3)) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(a2);
  uint64_t v4 = v3[39];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v3[39];
  }
  else {
    uint64_t v5 = *((void *)v3 + 3);
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 39);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 24);
  }
  if (v5 != v6) {
    return 0;
  }
  uint64_t v8 = (const void **)(v3 + 16);
  unsigned __int8 v11 = *(unsigned __int8 **)(a1 + 16);
  int v10 = (unsigned __int8 *)(a1 + 16);
  uint64_t v9 = v11;
  if (v7 >= 0) {
    char v12 = v10;
  }
  else {
    char v12 = v9;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*v8, v12, *((void *)v3 + 3)) == 0;
  }
  if (!v3[39]) {
    return 1;
  }
  uint64_t v13 = v4 - 1;
  do
  {
    int v15 = *(unsigned __int8 *)v8;
    uint64_t v8 = (const void **)((char *)v8 + 1);
    int v14 = v15;
    int v17 = *v12++;
    int v16 = v17;
    BOOL v19 = v13-- != 0;
    uint64_t result = v14 == v16;
  }
  while (v14 == v16 && v19);
  return result;
}

uint64_t xgboost::JsonString::Save(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 96))(a2, a1);
}

double xgboost::JsonArray::JsonArray(void *a1, void *a2)
{
  *(void *)&double result = 0x400000000;
  a1[1] = 0x400000000;
  *a1 = &unk_26E24E170;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  uint64_t v3 = a2[2];
  a2[2] = 0;
  a1[2] = v3;
  uint64_t v4 = a2[3];
  a2[3] = a1[3];
  a1[3] = v4;
  uint64_t v5 = a2[4];
  a2[4] = a1[4];
  a1[4] = v5;
  return result;
}

{
  double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(void *)&double result = 0x400000000;
  a1[1] = 0x400000000;
  *a1 = &unk_26E24E170;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  uint64_t v3 = a2[2];
  a2[2] = 0;
  a1[2] = v3;
  uint64_t v4 = a2[3];
  a2[3] = a1[3];
  a1[3] = v4;
  uint64_t v5 = a2[4];
  a2[4] = a1[4];
  a1[4] = v5;
  return result;
}

uint64_t xgboost::JsonArray::operator==(uint64_t a1, _DWORD *a2)
{
  if (a2[3] != 4) {
    return 0;
  }
  uint64_t v3 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(a2);
  uint64_t v5 = a1 + 16;
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  if (*(void *)(v5 + 8) - (void)v4 != v7 - v6) {
    return 0;
  }
  if (v6 == v7) {
    return 1;
  }
  uint64_t v8 = v6 + 8;
  do
  {
    uint64_t v9 = *v4++;
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v8 - 8) + 40))(*(void *)(v8 - 8), v9);
    if (result) {
      BOOL v11 = v8 == v7;
    }
    else {
      BOOL v11 = 1;
    }
    v8 += 8;
  }
  while (!v11);
  return result;
}

uint64_t xgboost::JsonArray::Save(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a1);
}

BOOL xgboost::JsonNumber::operator==(uint64_t a1, _DWORD *a2)
{
  if (a2[3] != 1) {
    return 0;
  }
  float v3 = *((float *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(a2) + 4);
  float v4 = *(float *)(a1 + 16);
  if (fabsf(v4) == INFINITY) {
    return fabsf(v3) == INFINITY;
  }
  else {
    return (float)(v4 - v3) == 0.0;
  }
}

uint64_t xgboost::JsonNumber::Save(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1);
}

BOOL xgboost::JsonInteger::operator==(uint64_t a1, _DWORD *a2)
{
  if (a2[3] != 2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  return v2 == *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(a2) + 2);
}

uint64_t xgboost::JsonInteger::Save(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a1);
}

BOOL xgboost::JsonNull::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 12) == 6;
}

uint64_t xgboost::JsonNull::Save(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1);
}

BOOL xgboost::JsonBoolean::operator==(uint64_t a1, _DWORD *a2)
{
  if (a2[3] != 5) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a1 + 16);
  return v2 == *((unsigned __int8 *)xgboost::Cast<xgboost::JsonBoolean const,xgboost::Value const>(a2) + 16);
}

uint64_t xgboost::JsonBoolean::Save(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a1);
}

uint64_t xgboost::JsonReader::Parse(xgboost::JsonReader *this)
{
  uint64_t v2 = MEMORY[0x263EF8318];
  while (1)
  {
    unint64_t v3 = *((void *)this + 3);
    unint64_t v4 = *((void *)this + 1);
    if (v4 < v3)
    {
      uint64_t v5 = *((void *)this + 2);
      while (1)
      {
        unsigned int v6 = *(unsigned __int8 *)(v5 + v4);
        BOOL v7 = v6 > 0x20;
        uint64_t v8 = (1 << v6) & 0x100002600;
        if (v7 || v8 == 0) {
          break;
        }
        *((void *)this + 1) = ++v4;
        if (v3 == v4) {
          goto LABEL_29;
        }
      }
    }
    if (v4 == v3) {
LABEL_29:
    }
      operator new();
    int v10 = *(unsigned __int8 *)(*((void *)this + 2) + v4);
    if (v10 > 122)
    {
      if (v10 == 255) {
        goto LABEL_29;
      }
      if (v10 == 123) {
        return (*(uint64_t (**)(xgboost::JsonReader *))(*(void *)this + 8))(this);
      }
    }
    else
    {
      if (v10 == 45) {
        return (*(uint64_t (**)(xgboost::JsonReader *))(*(void *)this + 24))(this);
      }
      if (v10 == 91) {
        return (*(uint64_t (**)(xgboost::JsonReader *))(*(void *)this + 16))(this);
      }
    }
    if (((char)v10 & 0x80000000) == 0 && (*(_DWORD *)(v2 + 4 * (char)v10 + 60) & 0x400) != 0) {
      return (*(uint64_t (**)(xgboost::JsonReader *))(*(void *)this + 24))(this);
    }
    if (v10 > 0x65u) {
      break;
    }
    if (v10 == 34) {
      return (**(uint64_t (***)(xgboost::JsonReader *))this)(this);
    }
    if (v10 == 73 || v10 == 78) {
      return (*(uint64_t (**)(xgboost::JsonReader *))(*(void *)this + 24))(this);
    }
LABEL_27:
    std::string::basic_string[abi:ne180100]<0>(__p, "Unknown construct");
    xgboost::JsonReader::Error((unint64_t *)this, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v10 == 102) {
    return (*(uint64_t (**)(xgboost::JsonReader *))(*(void *)this + 32))(this);
  }
  if (v10 != 110)
  {
    if (v10 == 116) {
      return (*(uint64_t (**)(xgboost::JsonReader *))(*(void *)this + 32))(this);
    }
    goto LABEL_27;
  }
  return (*(uint64_t (**)(xgboost::JsonReader *))(*(void *)this + 40))(this);
}

void sub_22E9FC798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *xgboost::JsonReader::SkipSpaces(void *this)
{
  unint64_t v1 = this[3];
  unint64_t v2 = this[1];
  if (v2 < v1)
  {
    uint64_t v3 = this[2];
    do
    {
      unsigned int v4 = *(unsigned __int8 *)(v3 + v2);
      BOOL v5 = v4 > 0x20;
      uint64_t v6 = (1 << v4) & 0x100002600;
      if (v5 || v6 == 0) {
        break;
      }
      this[1] = ++v2;
    }
    while (v1 != v2);
  }
  return this;
}

uint64_t xgboost::JsonReader::Error(unint64_t *a1, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v45);
  unint64_t v4 = xgboost::StringView::substr((xgboost::StringView *)(a1 + 2), 0);
  uint64_t v6 = v5;
  if (v5)
  {
    unint64_t v7 = v4;
    do
    {
      std::ostream::put();
      ++v7;
      --v6;
    }
    while (v6);
  }
  std::to_string(&v43, a1[1]);
  uint64_t v8 = std::string::insert(&v43, 0, ", around character position: ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)a2, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::string::push_back((std::string *)a2, 10);
  uint64_t v12 = a1[1];
  if (!v12)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/json.cc");
    int v14 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
    int v15 = *(char *)(a2 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a2;
    }
    else {
      uint64_t v16 = *(void *)a2;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a2 + 8);
    }
    std::string v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    BOOL v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", \"", 3);
    std::stringbuf::str();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = &__p;
    }
    else {
      uint64_t v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
    }
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" \"", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v43);
    uint64_t v12 = a1[1];
  }
  if (v12 >= 8) {
    unint64_t v23 = v12 - 8;
  }
  else {
    unint64_t v23 = 0;
  }
  unint64_t v24 = v12 + 8;
  if (v24 >= a1[3]) {
    unint64_t v25 = a1[3];
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = xgboost::StringView::substr((xgboost::StringView *)(a1 + 2), v23);
  uint64_t v28 = v27;
  memset(&__p, 0, sizeof(__p));
  if (v27)
  {
    size_t v29 = (unsigned char *)v26;
    do
    {
      int v30 = *v29;
      if (*v29)
      {
        if (v30 != 10)
        {
          std::string::push_back(&__p, v30);
          goto LABEL_44;
        }
        unint64_t v31 = "\\n";
      }
      else
      {
        unint64_t v31 = "\\0";
      }
      std::string::append(&__p, v31);
LABEL_44:
      ++v29;
      --v28;
    }
    while (v28);
  }
  std::string::append((std::string *)a2, "    ");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v32 = &__p;
  }
  else {
    size_t v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)a2, (const std::string::value_type *)v32, v33);
  std::string::push_back((std::string *)a2, 10);
  std::string::append((std::string *)a2, "    ");
  while (v23 < a1[1] - 1)
  {
    std::string::push_back((std::string *)a2, 126);
    ++v23;
  }
  std::string::push_back((std::string *)a2, 94);
  unint64_t v34 = a1[1];
  unint64_t v35 = v25 - v34;
  if (v25 > v34)
  {
    do
    {
      std::string::push_back((std::string *)a2, 126);
      --v35;
    }
    while (v35);
  }
  uint64_t v36 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
  dmlc::LogMessageFatal::Entry::Init(v36, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/json.cc");
  char v37 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
  int v38 = *(char *)(a2 + 23);
  if (v38 >= 0) {
    uint64_t v39 = a2;
  }
  else {
    uint64_t v39 = *(void *)a2;
  }
  if (v38 >= 0) {
    uint64_t v40 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v40 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v45[0] = *MEMORY[0x263F8C2B8];
  uint64_t v41 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v45 + *(void *)(v45[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v45[2] = v41;
  v45[3] = MEMORY[0x263F8C318] + 16;
  if (v46 < 0) {
    operator delete((void *)v45[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x230FA8020](&v47);
}

void sub_22E9FCC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

unint64_t xgboost::StringView::substr(xgboost::StringView *this, unint64_t a2)
{
  if (*((void *)this + 1) < a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  return *(void *)this + a2;
}

void sub_22E9FCE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::ParseStr(uint64_t *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = a1[1];
  }
  if (v1)
  {
    std::string::size_type v3 = 0;
    if (v2 >= 0) {
      unint64_t v4 = a1;
    }
    else {
      unint64_t v4 = (uint64_t *)*a1;
    }
    while (!v3 || *((unsigned char *)v4 + v3) != 34 || *((unsigned char *)v4 + v3 - 1) == 92)
    {
      if (v1 == ++v3) {
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    std::string::size_type v3 = 0;
  }
  memset(&v5, 0, sizeof(v5));
  std::string::resize(&v5, v3, 0);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_22E9FCEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::JsonReader::ParseString(xgboost::JsonReader *this)
{
  xgboost::JsonReader::GetConsecutiveChar(this, 0x22u);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
  memset(&v11, 0, sizeof(v11));
  while (1)
  {
    while (1)
    {
LABEL_2:
      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 3);
      if (v2 == v3)
      {
        int v5 = 255;
        goto LABEL_5;
      }
      uint64_t v4 = *((void *)this + 2);
      int v5 = *(unsigned __int8 *)(v4 + v2);
      uint64_t v6 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      if (v5 == 92) {
        break;
      }
      if (v5 == 34)
      {
        memset(&v11, 0, sizeof(v11));
        operator new();
      }
LABEL_5:
      std::string::push_back(&v11, v5);
      if (v5 == 10 || v5 == 255 || v5 == 13) {
        xgboost::JsonReader::Expect(this, 34, (char)v5);
      }
    }
    if (v6 == v3) {
      goto LABEL_15;
    }
    int v7 = *(char *)(v4 + v6);
    *((void *)this + 1) = v2 + 2;
    uint64_t v8 = "\r";
    switch(v7)
    {
      case 'n':
        uint64_t v8 = "\n";
        goto LABEL_20;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_15;
      case 'r':
        goto LABEL_20;
      case 't':
        uint64_t v8 = "\t";
        goto LABEL_20;
      case 'u':
        std::string::push_back(&v11, 92);
        std::string::push_back(&v11, 117);
        goto LABEL_2;
      default:
        if (v7 == 34)
        {
          uint64_t v8 = "\"";
LABEL_20:
          std::string::append(&v11, v8);
        }
        else
        {
          if (v7 == 92)
          {
            uint64_t v8 = "\\"";
            goto LABEL_20;
          }
LABEL_15:
          std::string::basic_string[abi:ne180100]<0>(__p, "Unknown escape");
          xgboost::JsonReader::Error((unint64_t *)this, (uint64_t)__p);
          if (v10 < 0) {
            operator delete(__p[0]);
          }
        }
        break;
    }
  }
}

void sub_22E9FD25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  std::ostringstream::~ostringstream((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void xgboost::JsonReader::GetConsecutiveChar(xgboost::JsonReader *this, unsigned __int8 a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 == *((void *)this + 3))
  {
    int v3 = 255;
  }
  else
  {
    int v3 = *(unsigned __int8 *)(*((void *)this + 2) + v2);
    *((void *)this + 1) = v2 + 1;
  }
  if (v3 != a2) {
    xgboost::JsonReader::Expect(this, a2, (char)v3);
  }
}

void xgboost::JsonReader::Expect(xgboost::JsonReader *this, std::string::value_type a2, int a3)
{
  uint64_t v6 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v16, "Expecting: \"");
  std::string::push_back(v6, a2);
  std::string::append(&v16, "\", got: \"");
  if (!a3)
  {
    int v7 = "\\0\"";
    goto LABEL_5;
  }
  if (a3 == -1)
  {
    int v7 = "EOF\"";
LABEL_5:
    std::string::append(&v16, v7);
    goto LABEL_16;
  }
  *((unsigned char *)&v13.__r_.__value_.__s + 23) = 1;
  LOWORD(v13.__r_.__value_.__l.__data_) = a3;
  uint64_t v8 = std::string::append(&v13, " \"");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v15 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v15 >= 0) {
    char v10 = __p;
  }
  else {
    char v10 = (void **)__p[0];
  }
  if (v15 >= 0) {
    std::string::size_type v11 = HIBYTE(v15);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(&v16, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
LABEL_16:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v12, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string v12 = v16;
  }
  xgboost::JsonReader::Error((unint64_t *)this, (uint64_t)&v12);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_22E9FD46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  _Unwind_Resume(exception_object);
}

void xgboost::JsonReader::ParseNull(xgboost::JsonReader *this)
{
  *((unsigned char *)&v8.__r_.__value_.__s + 23) = 1;
  LOWORD(v8.__r_.__value_.__l.__data_) = xgboost::JsonReader::GetNextNonSpaceChar(this);
  uint64_t v2 = 3;
  do
  {
    uint64_t v3 = *((void *)this + 1);
    if (v3 == *((void *)this + 3))
    {
      std::string::value_type v4 = -1;
    }
    else
    {
      std::string::value_type v4 = *(unsigned char *)(*((void *)this + 2) + v3);
      *((void *)this + 1) = v3 + 1;
    }
    std::string::push_back(&v8, v4);
    --v2;
  }
  while (v2);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v8.__r_.__value_.__l.__size_ == 4)
    {
      int v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
LABEL_12:
      if (LODWORD(v5->__r_.__value_.__l.__data_) == 1819047278) {
        goto LABEL_15;
      }
    }
  }
  else if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) == 4)
  {
    int v5 = &v8;
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Expecting null value \"null\"");
  xgboost::JsonReader::Error((unint64_t *)this, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
LABEL_15:
  operator new();
}

void sub_22E9FD64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::JsonReader::GetNextNonSpaceChar(xgboost::JsonReader *this)
{
  unint64_t v1 = *((void *)this + 3);
  unint64_t v2 = *((void *)this + 1);
  if (v2 < v1)
  {
    uint64_t v3 = *((void *)this + 2);
    while (1)
    {
      unsigned int v4 = *(unsigned __int8 *)(v3 + v2);
      BOOL v5 = v4 > 0x20;
      uint64_t v6 = (1 << v4) & 0x100002600;
      if (v5 || v6 == 0) {
        break;
      }
      *((void *)this + 1) = ++v2;
      if (v1 == v2) {
        return -1;
      }
    }
  }
  if (v2 == v1)
  {
    return -1;
  }
  else
  {
    char v8 = *(unsigned char *)(*((void *)this + 2) + v2);
    *((void *)this + 1) = v2 + 1;
  }
  return v8;
}

void xgboost::JsonReader::ParseArray(xgboost::JsonReader *this)
{
  long long v16 = 0uLL;
  v17[0] = 0;
  xgboost::JsonReader::GetConsecutiveChar(this, 0x5Bu);
  while (1)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2 != *((void *)this + 3) && *(unsigned char *)(*((void *)this + 2) + v2) == 93)
    {
      xgboost::JsonReader::GetConsecutiveChar(this, 0x5Du);
      uint64_t v20 = 0x400000000;
      BOOL v19 = &unk_26E24E170;
      long long v21 = v16;
      unint64_t v22 = (void *)v17[0];
      long long v16 = 0uLL;
      v17[0] = 0;
      operator new();
    }
    xgboost::JsonReader::Parse(&v18, this);
    uint64_t v3 = *((void *)&v16 + 1);
    if (*((void *)&v16 + 1) >= v17[0])
    {
      uint64_t v6 = (uint64_t)(*((void *)&v16 + 1) - v16) >> 3;
      unint64_t v7 = v6 + 1;
      if ((unint64_t)(v6 + 1) >> 61) {
        std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = v17[0] - v16;
      if ((uint64_t)(v17[0] - v16) >> 2 > v7) {
        unint64_t v7 = v8 >> 2;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v7;
      }
      unint64_t v22 = v17;
      if (v9) {
        char v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v17, v9);
      }
      else {
        char v10 = 0;
      }
      std::string::size_type v11 = &v10[8 * v6];
      BOOL v19 = v10;
      uint64_t v20 = (uint64_t)v11;
      *((void *)&v21 + 1) = &v10[8 * v9];
      uint64_t v12 = v18;
      *(void *)std::string::size_type v11 = v18;
      if (v12) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 1u, memory_order_relaxed);
      }
      *(void *)&long long v21 = v11 + 8;
      std::vector<xgboost::Json>::__swap_out_circular_buffer((uint64_t *)&v16, &v19);
      uint64_t v5 = *((void *)&v16 + 1);
      std::__split_buffer<xgboost::Json>::~__split_buffer((uint64_t)&v19);
    }
    else
    {
      uint64_t v4 = v18;
      **((void **)&v16 + 1) = v18;
      if (v4) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
      }
      uint64_t v5 = v3 + 8;
    }
    *((void *)&v16 + 1) = v5;
    int NextNonSpaceChar = xgboost::JsonReader::GetNextNonSpaceChar(this);
    if (NextNonSpaceChar == 44) {
      goto LABEL_24;
    }
    if (NextNonSpaceChar != 93) {
      break;
    }
    char v14 = 0;
LABEL_25:
    uint64_t v15 = v18;
    if (v18 && atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    if ((v14 & 1) == 0)
    {
      uint64_t v20 = 0x400000000;
      BOOL v19 = &unk_26E24E170;
      long long v21 = v16;
      unint64_t v22 = (void *)v17[0];
      long long v16 = 0uLL;
      v17[0] = 0;
      operator new();
    }
  }
  xgboost::JsonReader::Expect(this, 44, NextNonSpaceChar);
LABEL_24:
  char v14 = 1;
  goto LABEL_25;
}

void sub_22E9FDA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void xgboost::JsonArray::~JsonArray(xgboost::JsonArray *this)
{
  *(void *)this = &unk_26E24E170;
  unint64_t v1 = (void **)((char *)this + 16);
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26E24E170;
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x230FA80D0](this, 0x10A1C405897D53FLL);
}

void xgboost::JsonReader::ParseObject(xgboost::JsonReader *this)
{
  xgboost::JsonReader::GetConsecutiveChar(this, 0x7Bu);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = &v28;
  unint64_t v2 = *((void *)this + 3);
  unint64_t v3 = *((void *)this + 1);
  if (v3 < v2)
  {
    uint64_t v4 = *((void *)this + 2);
    while (1)
    {
      unsigned int v5 = *(unsigned __int8 *)(v4 + v3);
      BOOL v6 = v5 > 0x20;
      uint64_t v7 = (1 << v5) & 0x100002600;
      if (v6 || v7 == 0) {
        break;
      }
      *((void *)this + 1) = ++v3;
      if (v2 == v3) {
        goto LABEL_13;
      }
    }
  }
  if (v3 != v2 && *(unsigned char *)(*((void *)this + 2) + v3) == 125)
  {
    xgboost::JsonReader::GetConsecutiveChar(this, 0x7Du);
    uint64_t v31 = 0x300000000;
    int v30 = (const void **)&unk_26E24E128;
    size_t v32 = v27;
    uint64_t v33 = v28;
    uint64_t v34 = v29;
    if (v29)
    {
      *(void *)(v28 + 16) = &v33;
      uint64_t v27 = &v28;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
    }
    else
    {
      size_t v32 = &v33;
    }
    xgboost::Json::Json();
  }
  while (1)
  {
LABEL_13:
    unint64_t v9 = *((void *)this + 3);
    unint64_t v10 = *((void *)this + 1);
    if (v10 < v9)
    {
      uint64_t v11 = *((void *)this + 2);
      while (1)
      {
        unsigned int v12 = *(unsigned __int8 *)(v11 + v10);
        BOOL v6 = v12 > 0x20;
        uint64_t v13 = (1 << v12) & 0x100002600;
        if (v6 || v13 == 0) {
          break;
        }
        *((void *)this + 1) = ++v10;
        if (v9 == v10) {
          goto LABEL_25;
        }
      }
    }
    if (v10 == v9 || (int v15 = *(unsigned __int8 *)(*((void *)this + 2) + v10), v15 == 255))
    {
LABEL_25:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
      long long v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)" (", 2);
      LOBYTE(v25) = -1;
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v25, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" vs. ", 5);
      uint64_t v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)") ", 2);
      operator new();
    }
    if (v15 != 34) {
      xgboost::JsonReader::Expect(this, 34, (char)v15);
    }
    (**(void (***)(atomic_uint **__return_ptr, xgboost::JsonReader *))this)(&v26, this);
    int NextNonSpaceChar = xgboost::JsonReader::GetNextNonSpaceChar(this);
    if (NextNonSpaceChar != 58) {
      xgboost::JsonReader::Expect(this, 58, NextNonSpaceChar);
    }
    xgboost::JsonReader::Parse((uint64_t *)&v25, this);
    int v30 = (const void **)((char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v26)
                        + 16);
    uint64_t v20 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v27, v30, (uint64_t)&std::piecewise_construct, (long long **)&v30);
    long long v21 = *(atomic_uint **)(v20 + 56);
    *(void *)(v20 + 56) = v25;
    unint64_t v25 = v21;
    int v22 = xgboost::JsonReader::GetNextNonSpaceChar(this);
    if (v22 == 44) {
      goto LABEL_34;
    }
    if (v22 != 125) {
      break;
    }
    char v23 = 0;
    if (!v21) {
      goto LABEL_37;
    }
LABEL_35:
    if (atomic_fetch_add_explicit(v21 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)v21 + 8))(v21);
    }
LABEL_37:
    unint64_t v24 = v26;
    if (v26 && atomic_fetch_add_explicit(v26 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)v24 + 8))(v24);
    }
    if ((v23 & 1) == 0)
    {
      uint64_t v31 = 0x300000000;
      int v30 = (const void **)&unk_26E24E128;
      size_t v32 = v27;
      uint64_t v33 = v28;
      uint64_t v34 = v29;
      if (v29)
      {
        *(void *)(v28 + 16) = &v33;
        uint64_t v27 = &v28;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
      }
      else
      {
        size_t v32 = &v33;
      }
      xgboost::Json::Json();
    }
  }
  xgboost::JsonReader::Expect(this, 44, v22);
  long long v21 = v25;
LABEL_34:
  char v23 = 1;
  if (!v21) {
    goto LABEL_37;
  }
  goto LABEL_35;
}

void sub_22E9FE108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v20, a20);
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void xgboost::JsonObject::~JsonObject(xgboost::JsonObject *this)
{
  *(void *)this = &unk_26E24E128;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E24E128;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)this + 16, *((void **)this + 3));

  JUMPOUT(0x230FA80D0);
}

void xgboost::JsonReader::ParseNumber(xgboost::JsonReader *this, uint64_t a2, uint64_t a3, float *a4)
{
  v34[1] = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 1);
  BOOL v6 = (char *)(*((void *)this + 2) + v5);
  int v7 = *v6;
  switch(v7)
  {
    case 'N':
      xgboost::JsonReader::GetConsecutiveChar(this, 0x4Eu);
      xgboost::JsonReader::GetConsecutiveChar(this, 0x61u);
      xgboost::JsonReader::GetConsecutiveChar(this, 0x4Eu);
      uint64_t v32 = 0x100000000;
      uint64_t v31 = &unk_26E24E2A0;
      int v33 = 2143289344;
      operator new();
    case '-':
      int v8 = 1;
      break;
    case '+':
      int v8 = 0;
      break;
    default:
      int v8 = 0;
      int v9 = *v6;
      unint64_t v10 = (char *)(*((void *)this + 2) + v5);
LABEL_8:
      if (v9 == 48)
      {
        int v13 = *++v10;
        int v9 = v13;
      }
      else if (v9 == 73)
      {
        uint64_t v11 = 0;
        *((void *)this + 1) = (v10 - v6) + v5;
        v34[0] = 0x7974696E69666E49;
        do
          xgboost::JsonReader::GetConsecutiveChar(this, *((unsigned char *)v34 + v11++));
        while (v11 != 8);
        float v12 = INFINITY;
        if (v8) {
          float v12 = -INFINITY;
        }
        uint64_t v29 = 0x100000000;
        uint64_t v28 = &unk_26E24E2A0;
        float v30 = v12;
        operator new();
      }
      if ((v9 - 48) > 9)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = 0;
        do
        {
          uint64_t v14 = 10 * v14 + v9 - 48;
          int v15 = *++v10;
          int v9 = v15;
        }
        while ((v15 - 48) < 0xA);
      }
      if (v9 == 46)
      {
        int v17 = *++v10;
        int v16 = v17;
        if ((v17 - 48) <= 9)
        {
          do
          {
            uint64_t v14 = v16 - 48 + 10 * v14;
            int v18 = *++v10;
            int v16 = v18;
          }
          while ((v18 - 48) < 0xA);
        }
      }
      else
      {
        int v16 = v9;
      }
      if ((v16 | 0x20) == 0x65)
      {
        int v19 = v10[1];
        if (v19 == 45 || v19 == 43)
        {
          int v22 = v10[2];
          long long v21 = v10 + 2;
          int v20 = v22;
        }
        else
        {
          int v20 = v10[1];
          long long v21 = v10 + 1;
        }
        if ((v20 - 48) > 9)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "Expecting digit");
          xgboost::JsonReader::Error((unint64_t *)this, (uint64_t)__p);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          do
            int v24 = *++v21;
          while ((v24 - 48) < 0xA);
        }
        char v23 = (const char *)(v21 - v6);
        *((void *)this + 1) += (v21 - v6);
      }
      else
      {
        char v23 = (const char *)(v10 - v6);
        *((void *)this + 1) = v5 + (v10 - v6);
        if (v9 != 46) {
          operator new();
        }
      }
      LODWORD(v34[0]) = 0;
      xgboost::detail::FromCharFloatImpl(v6, v23, (float *)v34, a4);
      if (v25) {
        LODWORD(v34[0]) = strtof(v6, 0);
      }
      operator new();
  }
  unint64_t v10 = v6 + 1;
  int v9 = v6[1];
  goto LABEL_8;
}

void sub_22E9FE6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::JsonReader::ParseBoolean(xgboost::JsonReader *this)
{
  int NextNonSpaceChar = xgboost::JsonReader::GetNextNonSpaceChar(this);
  std::string::basic_string[abi:ne180100]<0>(&v5, "true");
  std::string::basic_string[abi:ne180100]<0>(&__p, "false");
  if (NextNonSpaceChar == 116)
  {
    xgboost::JsonReader::GetConsecutiveChar(this, 0x72u);
    unsigned __int8 v3 = 117;
  }
  else
  {
    xgboost::JsonReader::GetConsecutiveChar(this, 0x61u);
    xgboost::JsonReader::GetConsecutiveChar(this, 0x6Cu);
    unsigned __int8 v3 = 115;
  }
  xgboost::JsonReader::GetConsecutiveChar(this, v3);
  xgboost::JsonReader::GetConsecutiveChar(this, 0x65u);
  operator new();
}

void sub_22E9FE83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::Json::Load()
{
}

void sub_22E9FE9C8(_Unwind_Exception *exception_object)
{
  if (atomic_fetch_add_explicit(v1 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(atomic_uint *))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::Json::Load(xgboost::Json *this, xgboost::JsonReader *a2)
{
  return (*(uint64_t (**)(void))(*(void *)this + 64))();
}

void xgboost::Json::Dump(atomic_uint **a1, std::string *a2, char a3)
{
  int v7 = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v4 = *a1;
  BOOL v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(v4 + 2, 1u, memory_order_relaxed);
  }
  xgboost::Json::Dump(&v6, &v7, a3);
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  std::string::resize(a2, v8 - v7, 0);
  uint64_t v5 = v7;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v8 != v7)
  {
    memmove(a2, v7, v8 - v7);
    uint64_t v5 = v7;
  }
  if (v5)
  {
    int v8 = v5;
    operator delete(v5);
  }
}

void sub_22E9FEB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::Json::Dump(atomic_uint **a1, void *a2, char a3)
{
  a2[1] = *a2;
  if ((a3 & 4) != 0)
  {
    uint64_t v5 = &unk_26E24E588;
    BOOL v6 = a2;
    unsigned __int8 v3 = *a1;
    if (*a1) {
      atomic_fetch_add_explicit(v3 + 2, 1u, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v5 = &unk_26E24E488;
    BOOL v6 = a2;
    unsigned __int8 v3 = *a1;
    if (*a1) {
      atomic_fetch_add_explicit(v3 + 2, 1u, memory_order_relaxed);
    }
  }
  uint64_t result = (*(uint64_t (**)(atomic_uint *, void **))(*(void *)v3 + 16))(v3, &v5);
  if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    return (*(uint64_t (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return result;
}

void sub_22E9FECC0(_Unwind_Exception *exception_object)
{
  if (atomic_fetch_add_explicit(v1 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(atomic_uint *))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::UBJWriter::Save(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, a1);
}

uint64_t xgboost::Json::Dump(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 16))(a2, &v4);
  uint64_t result = v4;
  if (v4)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_22E9FEDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void xgboost::UBJReader::ParseArray(xgboost::UBJReader *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 3);
  if (v2 == v3)
  {
    memset(&v67, 0, sizeof(v67));
  }
  else
  {
    uint64_t v15 = *((void *)this + 2);
    int v16 = *(unsigned __int8 *)(v15 + v2);
    if (v16 == 36)
    {
      *((void *)this + 1) = v2 + 1;
      if (v2 + 1 == v3)
      {
        char v17 = -1;
      }
      else
      {
        char v17 = *(unsigned char *)(v15 + v2 + 1);
        *((void *)this + 1) = v2 + 2;
      }
      xgboost::JsonReader::GetConsecutiveChar(this, 0x23u);
      xgboost::JsonReader::GetConsecutiveChar(this, 0x4Cu);
      uint64_t v18 = 0;
      uint64_t v20 = *((void *)this + 1);
      uint64_t v19 = *((void *)this + 2);
      long long v21 = *(void **)(v19 + v20);
      uint64_t v22 = v20 + 8;
      *((void *)this + 1) = v22;
      __p[0] = v21;
      uint64_t v23 = 7;
      do
      {
        char v24 = *((unsigned char *)__p + v23);
        *((unsigned char *)__p + v23) = *((unsigned char *)__p + v18);
        *((unsigned char *)__p + v18++) = v24;
        --v23;
      }
      while (v18 != 4);
      uint64_t v25 = (uint64_t)__p[0];
      if (v22 == *((void *)this + 3)) {
        int v16 = 255;
      }
      else {
        int v16 = *(unsigned __int8 *)(v19 + v22);
      }
      if (v17 > 99)
      {
        if (v17 == 108)
        {
          xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::JsonTypedArray((uint64_t)__p, (std::vector<int>::size_type)__p[0]);
          if (v25 >= 1)
          {
            unint64_t v60 = (_DWORD *)v70;
            uint64_t v62 = *((void *)this + 1);
            uint64_t v61 = *((void *)this + 2);
            do
            {
              unsigned int v63 = *(_DWORD *)(v61 + v62);
              v62 += 4;
              *((void *)this + 1) = v62;
              *v60++ = bswap32(v63);
              --v25;
            }
            while (v25);
          }
          operator new();
        }
        if (v17 == 100)
        {
          xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::JsonTypedArray(__p, (unint64_t)__p[0]);
          if (v25 >= 1)
          {
            uint64_t v29 = (_DWORD *)v70;
            uint64_t v31 = *((void *)this + 1);
            uint64_t v30 = *((void *)this + 2);
            do
            {
              unsigned int v32 = *(_DWORD *)(v30 + v31);
              v31 += 4;
              *((void *)this + 1) = v31;
              *v29++ = bswap32(v32);
              --v25;
            }
            while (v25);
          }
          operator new();
        }
      }
      else
      {
        if (v17 == 76)
        {
          xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::JsonTypedArray(__p, (unint64_t)__p[0]);
          if (v25 >= 1)
          {
            uint64_t v52 = 0;
            uint64_t v53 = v70;
            uint64_t v55 = *((void *)this + 1);
            uint64_t v54 = *((void *)this + 2);
            do
            {
              uint64_t v56 = 0;
              std::string::size_type v57 = *(void *)(v54 + v55);
              v55 += 8;
              *((void *)this + 1) = v55;
              v67.__r_.__value_.__r.__words[0] = v57;
              uint64_t v58 = 7;
              do
              {
                std::string::value_type v59 = v67.__r_.__value_.__s.__data_[v58];
                v67.__r_.__value_.__s.__data_[v58] = v67.__r_.__value_.__s.__data_[v56];
                v67.__r_.__value_.__s.__data_[v56++] = v59;
                --v58;
              }
              while (v56 != 4);
              *(void *)(v53 + 8 * v52++) = v67.__r_.__value_.__r.__words[0];
            }
            while (v52 != v25);
          }
          operator new();
        }
        if (v17 == 85)
        {
          xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::JsonTypedArray((uint64_t)__p, (std::vector<char>::size_type)__p[0]);
          if (v25 >= 1)
          {
            for (uint64_t i = 0; i != v25; ++i)
            {
              uint64_t v27 = *((void *)this + 1);
              char v28 = *(unsigned char *)(*((void *)this + 2) + v27);
              *((void *)this + 1) = v27 + 1;
              *(unsigned char *)(v70 + i) = v28;
            }
          }
          operator new();
        }
      }
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v68);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/json.cc");
      uint64_t v34 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v68);
      *((unsigned char *)&v66.__r_.__value_.__s + 23) = 1;
      LOWORD(v66.__r_.__value_.__l.__data_) = v17;
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      *(void *)&long long v70 = *((void *)&v37->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v70) & 0x80u) == 0) {
        uint64_t v39 = __p;
      }
      else {
        uint64_t v39 = (void **)__p[0];
      }
      if ((SBYTE7(v70) & 0x80u) == 0) {
        uint64_t v40 = BYTE7(v70);
      }
      else {
        uint64_t v40 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v39, v40);
      if (SBYTE7(v70) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v68);
    }
    memset(&v67, 0, sizeof(v67));
    if (v16 == 35)
    {
      uint64_t v41 = *((void *)this + 1);
      if (v41 != *((void *)this + 3)) {
        *((void *)this + 1) = v41 + 1;
      }
      xgboost::JsonReader::GetConsecutiveChar(this, 0x4Cu);
      uint64_t v42 = 0;
      uint64_t v43 = *((void *)this + 1);
      unint64_t v44 = *(void **)(*((void *)this + 2) + v43);
      *((void *)this + 1) = v43 + 8;
      __p[0] = v44;
      uint64_t v45 = 7;
      do
      {
        char v46 = *((unsigned char *)__p + v45);
        *((unsigned char *)__p + v45) = *((unsigned char *)__p + v42);
        *((unsigned char *)__p + v42++) = v46;
        --v45;
      }
      while (v42 != 4);
      uint64_t v47 = (uint64_t)__p[0];
      unint64_t v48 = (uint64_t)(v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]) >> 3;
      if (__p[0] <= (void *)v48)
      {
        if (__p[0] < (void *)v48) {
          std::vector<xgboost::Json>::__base_destruct_at_end[abi:ne180100]((atomic_uint *)&v67, v67.__r_.__value_.__r.__words[0] + 8 * (uint64_t)__p[0]);
        }
      }
      else
      {
        if ((char *)__p[0] - v48 > (void *)((uint64_t)(v67.__r_.__value_.__r.__words[2] - v67.__r_.__value_.__l.__size_) >> 3))
        {
          if (!((unint64_t)__p[0] >> 61))
          {
            unint64_t v49 = (uint64_t)(v67.__r_.__value_.__r.__words[2] - v67.__r_.__value_.__r.__words[0]) >> 2;
            if ((void *)v49 <= __p[0]) {
              unint64_t v49 = (unint64_t)__p[0];
            }
            if (v67.__r_.__value_.__r.__words[2] - v67.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v50 = v49;
            }
            uint64_t v71 = &v67.__r_.__value_.__s.__data_[16];
            __p[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v67.__r_.__value_.__r.__words[2], v50);
            __p[1] = (char *)__p[0] + 8 * v48;
            *(void **)&long long v70 = __p[1];
            *((void *)&v70 + 1) = (char *)__p[0] + 8 * v51;
            operator new();
          }
          std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
        }
        std::vector<xgboost::Json>::__construct_at_end((uint64_t)&v67, (uint64_t)__p[0] - v48);
      }
      if (v47 >= 1)
      {
        for (uint64_t j = 0; j != v47; ++j)
        {
          xgboost::UBJReader::Parse((uint64_t *)__p, this);
          v65 = *(atomic_uint **)(v67.__r_.__value_.__r.__words[0] + 8 * j);
          *(void **)(v67.__r_.__value_.__r.__words[0] + 8 * j) = __p[0];
          __p[0] = v65;
          if (v65 && atomic_fetch_add_explicit(v65 + 2, 0xFFFFFFFF, memory_order_release) == 1)
          {
            __dmb(9u);
            (*(void (**)(atomic_uint *))(*(void *)v65 + 8))(v65);
          }
        }
      }
LABEL_22:
      __p[1] = (void *)0x400000000;
      __p[0] = &unk_26E24E170;
      long long v70 = 0uLL;
      uint64_t v71 = 0;
      std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)&v70, (uint64_t *)v67.__r_.__value_.__l.__data_, (uint64_t *)v67.__r_.__value_.__l.__size_, (uint64_t)(v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]) >> 3);
      operator new();
    }
    if (v16 == 93)
    {
LABEL_21:
      xgboost::JsonReader::GetConsecutiveChar(this, 0x5Du);
      goto LABEL_22;
    }
  }
  do
  {
    xgboost::UBJReader::Parse((uint64_t *)&v66, this);
    std::string::size_type size = (void *)v67.__r_.__value_.__l.__size_;
    if (v67.__r_.__value_.__l.__size_ >= v67.__r_.__value_.__r.__words[2])
    {
      uint64_t v5 = (uint64_t)(v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]) >> 3;
      unint64_t v6 = v5 + 1;
      if ((unint64_t)(v5 + 1) >> 61) {
        std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
      }
      int64_t v7 = v67.__r_.__value_.__r.__words[2] - v67.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v67.__r_.__value_.__r.__words[2] - v67.__r_.__value_.__r.__words[0]) >> 2 > v6) {
        unint64_t v6 = v7 >> 2;
      }
      if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v8 = v6;
      }
      uint64_t v71 = &v67.__r_.__value_.__s.__data_[16];
      if (v8) {
        uint64_t v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v67.__r_.__value_.__r.__words[2], v8);
      }
      else {
        uint64_t v9 = 0;
      }
      unint64_t v10 = &v9[8 * v5];
      __p[0] = v9;
      __p[1] = v10;
      *((void *)&v70 + 1) = &v9[8 * v8];
      *(void *)unint64_t v10 = 0;
      *(void *)unint64_t v10 = v66.__r_.__value_.__r.__words[0];
      v66.__r_.__value_.__r.__words[0] = 0;
      *(void *)&long long v70 = v10 + 8;
      std::vector<xgboost::Json>::__swap_out_circular_buffer((uint64_t *)&v67, __p);
      std::string::size_type v11 = v67.__r_.__value_.__l.__size_;
      std::__split_buffer<xgboost::Json>::~__split_buffer((uint64_t)__p);
      std::string::size_type v12 = v66.__r_.__value_.__r.__words[0];
      v67.__r_.__value_.__l.__size_ = v11;
      if (v66.__r_.__value_.__r.__words[0]
        && atomic_fetch_add_explicit((atomic_uint *volatile)(v66.__r_.__value_.__r.__words[0] + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        (*(void (**)(std::string::size_type))(*(void *)v12 + 8))(v12);
      }
    }
    else
    {
      *(void *)v67.__r_.__value_.__l.__size_ = 0;
      *std::string::size_type size = v66.__r_.__value_.__r.__words[0];
      v67.__r_.__value_.__l.__size_ = (std::string::size_type)(size + 1);
    }
    uint64_t v13 = *((void *)this + 1);
    if (v13 == *((void *)this + 3)) {
      int v14 = 255;
    }
    else {
      int v14 = *(unsigned __int8 *)(*((void *)this + 2) + v13);
    }
  }
  while (v14 != 93);
  goto LABEL_21;
}

void sub_22E9FF6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
  a10 = &a16;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t xgboost::UBJReader::Parse(xgboost::UBJReader *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1 == *((void *)this + 3)) {
LABEL_2:
  }
    operator new();
  while (1)
  {
    uint64_t v3 = *((void *)this + 2);
    int v4 = *(char *)(v3 + v1);
    if (v4 == -1) {
      goto LABEL_2;
    }
    uint64_t v5 = v1 + 1;
    *((void *)this + 1) = v1 + 1;
    if (v4 <= 99)
    {
      switch(v4)
      {
        case 'C':
          uint64_t v11 = *(char *)(v3 + v5);
          *((void *)this + 1) = v1 + 2;
          uint64_t v24 = 0x200000000;
          uint64_t v23 = &unk_26E24E300;
          uint64_t v25 = v11;
          operator new();
        case 'D':
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v41);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/json.cc");
          int64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"f64 is not supported.", 21);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v41);
          goto LABEL_7;
        case 'F':
          uint64_t v48 = 0x500000000;
          uint64_t v47 = &unk_26E24E3C0;
          char v49 = 1;
          operator new();
        case 'H':
LABEL_7:
          unint64_t v8 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v41);
          dmlc::LogMessageFatal::Entry::Init(v8, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/json.cc");
          uint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"High precision number is not supported.", 39);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v41);
          goto LABEL_8;
        case 'I':
          unsigned int v12 = *(unsigned __int16 *)(v3 + v5);
          *((void *)this + 1) = v1 + 3;
          uint64_t v33 = 0x200000000;
          unsigned int v32 = &unk_26E24E300;
          uint64_t v34 = (__int16)(bswap32(v12) >> 16);
          operator new();
        case 'L':
          uint64_t v13 = 0;
          uint64_t v14 = *(void *)(v3 + v5);
          *((void *)this + 1) = v1 + 9;
          v41[0] = v14;
          uint64_t v15 = 7;
          do
          {
            char v16 = *((unsigned char *)v41 + v15);
            *((unsigned char *)v41 + v15) = *((unsigned char *)v41 + v13);
            *((unsigned char *)v41 + v13++) = v16;
            --v15;
          }
          while (v13 != 4);
          uint64_t v27 = 0x200000000;
          uint64_t v26 = &unk_26E24E300;
          uint64_t v28 = v41[0];
          operator new();
        case 'S':
          xgboost::UBJReader::DecodeStr(this, (uint64_t)&v43);
          v41[0] = &unk_26E24E210;
          v41[1] = 0;
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v42, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
          }
          else {
            std::string v42 = v43;
          }
          operator new();
        case 'T':
          uint64_t v51 = 0x500000000;
          unint64_t v50 = &unk_26E24E3C0;
          char v52 = 1;
          operator new();
        case 'U':
          uint64_t v17 = *(unsigned __int8 *)(v3 + v5);
          *((void *)this + 1) = v1 + 2;
          uint64_t v36 = 0x200000000;
          unint64_t v35 = &unk_26E24E300;
          uint64_t v37 = v17;
          operator new();
        case 'Z':
          uint64_t v54 = 0x600000000;
          uint64_t v53 = &unk_26E24E360;
          operator new();
        case '[':
          return (*(uint64_t (**)(xgboost::UBJReader *))(*(void *)this + 16))(this);
        default:
          goto LABEL_8;
      }
    }
    if (v4 > 107) {
      break;
    }
    if (v4 == 100)
    {
      unsigned int v18 = *(_DWORD *)(v3 + v5);
      *((void *)this + 1) = v1 + 5;
      uint64_t v45 = 0x100000000;
      unint64_t v44 = &unk_26E24E2A0;
      unsigned int v46 = bswap32(v18);
      operator new();
    }
    if (v4 == 105)
    {
      uint64_t v19 = *(char *)(v3 + v5);
      *((void *)this + 1) = v1 + 2;
      uint64_t v39 = 0x200000000;
      long long v38 = &unk_26E24E300;
      uint64_t v40 = v19;
      operator new();
    }
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(__p, "Unknown construct");
    xgboost::JsonReader::Error((unint64_t *)this, (uint64_t)__p);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v1 = *((void *)this + 1);
    if (v1 == *((void *)this + 3)) {
      goto LABEL_2;
    }
  }
  if (v4 == 108)
  {
    unsigned int v20 = *(_DWORD *)(v3 + v5);
    *((void *)this + 1) = v1 + 5;
    uint64_t v30 = 0x200000000;
    uint64_t v29 = &unk_26E24E300;
    uint64_t v31 = (int)bswap32(v20);
    operator new();
  }
  if (v4 != 123) {
    goto LABEL_8;
  }
  return (*(uint64_t (**)(xgboost::UBJReader *))(*(void *)this + 8))(this);
}

void sub_22EA000D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 169) < 0) {
    operator delete(*(void **)(v40 - 192));
  }
  _Unwind_Resume(exception_object);
}

void *xgboost::UBJReader::DecodeStr@<X0>(xgboost::UBJReader *this@<X0>, uint64_t a2@<X8>)
{
  xgboost::JsonReader::GetConsecutiveChar(this, 0x4Cu);
  uint64_t v4 = 0;
  uint64_t v5 = *((void *)this + 1);
  std::string::size_type v6 = *(void *)(*((void *)this + 2) + v5);
  *((void *)this + 1) = v5 + 8;
  std::string::size_type __n = v6;
  uint64_t v7 = 7;
  do
  {
    char v8 = *((unsigned char *)&__n + v7);
    *((unsigned char *)&__n + v7) = *((unsigned char *)&__n + v4);
    *((unsigned char *)&__n + v4++) = v8;
    --v7;
  }
  while (v4 != 4);
  std::string::size_type v9 = __n;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::string::resize((std::string *)a2, v9, 0);
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v10 = (void *)a2;
  }
  else {
    unint64_t v10 = *(void **)a2;
  }
  uint64_t result = memcpy(v10, (const void *)(*((void *)this + 2) + *((void *)this + 1)), v9);
  *((void *)this + 1) += v9;
  return result;
}

void sub_22EA00268(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::UBJReader::ParseObject(xgboost::UBJReader *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 == *((void *)this + 3))
  {
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = &v20;
  }
  else
  {
    int v3 = *(unsigned __int8 *)(*((void *)this + 2) + v2);
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = &v20;
    if (v3 == 125) {
      goto LABEL_20;
    }
  }
  do
  {
    xgboost::UBJReader::DecodeStr(this, (uint64_t)__p);
    xgboost::UBJReader::Parse(&v16, this);
    uint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)&v19, &v22, (const void **)__p);
    if (!*v4)
    {
      uint64_t v5 = (char *)operator new(0x40uLL);
      unsigned int v12 = (uint64_t *)v5;
      uint64_t v13 = (uint64_t)&v20;
      LOBYTE(v14) = 0;
      std::string::size_type v6 = (std::string *)(v5 + 32);
      if (SHIBYTE(v18) < 0)
      {
        std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        uint64_t v7 = v12;
      }
      else
      {
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        *((void *)v5 + 6) = v18;
        uint64_t v7 = (uint64_t *)v5;
      }
      *((void *)v5 + 7) = v16;
      uint64_t v16 = 0;
      LOBYTE(v14) = 1;
      uint64_t v8 = v22;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = v8;
      *uint64_t v4 = v7;
      if (*v19)
      {
        uint64_t v19 = (uint64_t **)*v19;
        uint64_t v7 = *v4;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v20, v7);
      ++v21;
      unsigned int v12 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>>>>::reset[abi:ne180100]((uint64_t)&v12, 0);
    }
    uint64_t v9 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = *((void *)this + 1);
    if (v10 == *((void *)this + 3)) {
      int v11 = 255;
    }
    else {
      int v11 = *(unsigned __int8 *)(*((void *)this + 2) + v10);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
  }
  while (v11 != 125);
LABEL_20:
  xgboost::JsonReader::GetConsecutiveChar(this, 0x7Du);
  uint64_t v13 = 0x300000000;
  unsigned int v12 = (uint64_t *)&unk_26E24E128;
  uint64_t v14 = v19;
  v15[0] = v20;
  v15[1] = v21;
  if (v21)
  {
    v20[2] = (uint64_t)v15;
    uint64_t v19 = &v20;
    unsigned int v20 = 0;
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v14 = (uint64_t **)v15;
  }
  xgboost::Json::Json();
}

void sub_22EA004F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v23, a13);
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void xgboost::UBJWriter::Visit(xgboost::UBJWriter *this, const xgboost::JsonArray *a2)
{
  uint64_t v4 = (unint64_t *)*((void *)this + 1);
  std::string::size_type v6 = (unsigned char *)v4[1];
  unint64_t v5 = v4[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    uint64_t v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      goto LABEL_63;
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = 91;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      uint64_t v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      std::string::size_type v6 = (unsigned char *)*v4;
    }
    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    unsigned char *v6 = 91;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  uint64_t v18 = *((void *)a2 + 2);
  uint64_t v17 = *((void *)a2 + 3);
  uint64_t v19 = (unint64_t *)*((void *)this + 1);
  uint64_t v21 = (unsigned char *)v19[1];
  unint64_t v20 = v19[2];
  if ((unint64_t)v21 >= v20)
  {
    unint64_t v23 = *v19;
    uint64_t v24 = &v21[-*v19];
    unint64_t v25 = (unint64_t)(v24 + 1);
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_63;
    }
    unint64_t v26 = v20 - v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27) {
      unint64_t v28 = (unint64_t)operator new(v27);
    }
    else {
      unint64_t v28 = 0;
    }
    uint64_t v29 = (char *)(v28 + v27);
    v24[v28] = 35;
    uint64_t v22 = (uint64_t)&v24[v28 + 1];
    if (v21 == (unsigned char *)v23)
    {
      v28 += (unint64_t)v24;
    }
    else
    {
      uint64_t v30 = &v21[~v23];
      do
      {
        char v31 = *--v21;
        (v30--)[v28] = v31;
      }
      while (v21 != (unsigned char *)v23);
      uint64_t v21 = (unsigned char *)*v19;
    }
    *uint64_t v19 = v28;
    v19[1] = v22;
    v19[2] = (unint64_t)v29;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *uint64_t v21 = 35;
    uint64_t v22 = (uint64_t)(v21 + 1);
  }
  v19[1] = v22;
  unsigned int v32 = (unint64_t *)*((void *)this + 1);
  uint64_t v34 = (unsigned char *)v32[1];
  unint64_t v33 = v32[2];
  if ((unint64_t)v34 < v33)
  {
    *uint64_t v34 = 76;
    uint64_t v35 = (uint64_t)(v34 + 1);
    goto LABEL_55;
  }
  unint64_t v36 = *v32;
  uint64_t v37 = &v34[-*v32];
  unint64_t v38 = (unint64_t)(v37 + 1);
  if ((uint64_t)(v37 + 1) < 0) {
LABEL_63:
  }
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  unint64_t v39 = v33 - v36;
  if (2 * v39 > v38) {
    unint64_t v38 = 2 * v39;
  }
  if (v39 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v40 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v40 = v38;
  }
  if (v40) {
    unint64_t v41 = (unint64_t)operator new(v40);
  }
  else {
    unint64_t v41 = 0;
  }
  std::string v42 = (char *)(v41 + v40);
  v37[v41] = 76;
  uint64_t v35 = (uint64_t)&v37[v41 + 1];
  if (v34 == (unsigned char *)v36)
  {
    v41 += (unint64_t)v37;
  }
  else
  {
    std::string v43 = &v34[~v36];
    do
    {
      char v44 = *--v34;
      (v43--)[v41] = v44;
    }
    while (v34 != (unsigned char *)v36);
    uint64_t v34 = (unsigned char *)*v32;
  }
  unint64_t *v32 = v41;
  v32[1] = v35;
  v32[2] = (unint64_t)v42;
  if (v34) {
    operator delete(v34);
  }
LABEL_55:
  v32[1] = v35;
  unsigned int v46 = (uint64_t *)*((void *)a2 + 2);
  for (uint64_t i = (uint64_t *)*((void *)a2 + 3); v46 != i; ++v46)
  {
    uint64_t v47 = *v46;
    uint64_t v49 = v47;
    if (v47) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v47 + 8), 1u, memory_order_relaxed);
    }
    (*(void (**)(xgboost::UBJWriter *, uint64_t *))(*(void *)this + 16))(this, &v49);
    uint64_t v48 = v49;
    if (v49)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
      }
    }
  }
}

void sub_22EA008F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void xgboost::anonymous namespace'::WritePrimitive<long long>(uint64_t a1, std::vector<char> *this)
{
  uint64_t v3 = 0;
  uint64_t v9 = a1;
  uint64_t v4 = 7;
  do
  {
    char v5 = *((unsigned char *)&v9 + v4);
    *((unsigned char *)&v9 + v4) = *((unsigned char *)&v9 + v3);
    *((unsigned char *)&v9 + v3++) = v5;
    --v4;
  }
  while (v3 != 4);
  uint64_t v6 = v9;
  std::vector<char>::pointer begin = this->__begin_;
  unint64_t v8 = this->__end_ - this->__begin_;
  if (v8 > 0xFFFFFFFFFFFFFFF7)
  {
    this->__end_ = &begin[v8 + 8];
  }
  else
  {
    std::vector<char>::__append(this, 8uLL);
    std::vector<char>::pointer begin = this->__begin_;
  }
  *(void *)&begin[v8] = v6;
}

void xgboost::UBJWriter::Visit(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::vector<char> **)(a1 + 8);
  std::vector<char>::pointer end = v3->__end_;
  value = v3->__end_cap_.__value_;
  if (end >= value)
  {
    std::vector<char>::pointer begin = v3->__begin_;
    int64_t v8 = end - v3->__begin_;
    unint64_t v9 = v8 + 1;
    if (v8 + 1 < 0) {
      goto LABEL_101;
    }
    unint64_t v10 = value - begin;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      size_t v12 = (char *)operator new(v11);
    }
    else {
      size_t v12 = 0;
    }
    unint64_t v13 = &v12[v11];
    v12[v8] = 91;
    uint64_t v6 = &v12[v8 + 1];
    if (end == begin)
    {
      v12 += v8;
    }
    else
    {
      uint64_t v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v12] = v15;
      }
      while (end != begin);
      std::vector<char>::pointer end = v3->__begin_;
    }
    v3->__begin_ = v12;
    v3->__end_ = v6;
    v3->__end_cap_.__value_ = v13;
    if (end) {
      operator delete(end);
    }
  }
  else
  {
    *std::vector<char>::pointer end = 91;
    uint64_t v6 = end + 1;
  }
  v3->__end_ = v6;
  char v16 = v3->__end_cap_.__value_;
  if (v6 < v16)
  {
    char *v6 = 36;
    uint64_t v17 = v6 + 1;
    goto LABEL_37;
  }
  std::vector<char>::pointer v18 = v3->__begin_;
  int64_t v19 = v6 - v3->__begin_;
  unint64_t v20 = v19 + 1;
  if (v19 + 1 < 0) {
    goto LABEL_101;
  }
  unint64_t v21 = v16 - v18;
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v20;
  }
  if (v22) {
    unint64_t v23 = (char *)operator new(v22);
  }
  else {
    unint64_t v23 = 0;
  }
  uint64_t v24 = &v23[v22];
  v23[v19] = 36;
  uint64_t v17 = &v23[v19 + 1];
  if (v6 == v18)
  {
    v3->__begin_ = &v23[v19];
    v3->__end_ = v17;
    v3->__end_cap_.__value_ = v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }
  unint64_t v25 = &v6[~(unint64_t)v18];
  do
  {
    char v26 = *--v6;
    (v25--)[(void)v23] = v26;
  }
  while (v6 != v18);
  uint64_t v6 = v3->__begin_;
  v3->__begin_ = v23;
  v3->__end_ = v17;
  v3->__end_cap_.__value_ = v24;
  if (v6) {
    goto LABEL_36;
  }
LABEL_37:
  v3->__end_ = v17;
  size_t v27 = v3->__end_cap_.__value_;
  if (v17 < v27)
  {
    char *v17 = 100;
    unint64_t v28 = v17 + 1;
    goto LABEL_55;
  }
  std::vector<char>::pointer v29 = v3->__begin_;
  int64_t v30 = v17 - v3->__begin_;
  unint64_t v31 = v30 + 1;
  if (v30 + 1 < 0) {
    goto LABEL_101;
  }
  unint64_t v32 = v27 - v29;
  if (2 * v32 > v31) {
    unint64_t v31 = 2 * v32;
  }
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v33 = v31;
  }
  if (v33) {
    uint64_t v34 = (char *)operator new(v33);
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = &v34[v33];
  v34[v30] = 100;
  unint64_t v28 = &v34[v30 + 1];
  if (v17 == v29)
  {
    v3->__begin_ = &v34[v30];
    v3->__end_ = v28;
    v3->__end_cap_.__value_ = v35;
LABEL_54:
    operator delete(v17);
    goto LABEL_55;
  }
  unint64_t v36 = &v17[~(unint64_t)v29];
  do
  {
    char v37 = *--v17;
    (v36--)[(void)v34] = v37;
  }
  while (v17 != v29);
  uint64_t v17 = v3->__begin_;
  v3->__begin_ = v34;
  v3->__end_ = v28;
  v3->__end_cap_.__value_ = v35;
  if (v17) {
    goto LABEL_54;
  }
LABEL_55:
  v3->__end_ = v28;
  unint64_t v38 = v3->__end_cap_.__value_;
  if (v28 < v38)
  {
    char *v28 = 35;
    unint64_t v39 = v28 + 1;
    goto LABEL_73;
  }
  std::vector<char>::pointer v40 = v3->__begin_;
  int64_t v41 = v28 - v3->__begin_;
  unint64_t v42 = v41 + 1;
  if (v41 + 1 < 0) {
    goto LABEL_101;
  }
  unint64_t v43 = v38 - v40;
  if (2 * v43 > v42) {
    unint64_t v42 = 2 * v43;
  }
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v44 = v42;
  }
  if (v44) {
    uint64_t v45 = (char *)operator new(v44);
  }
  else {
    uint64_t v45 = 0;
  }
  unsigned int v46 = &v45[v44];
  v45[v41] = 35;
  unint64_t v39 = &v45[v41 + 1];
  if (v28 == v40)
  {
    v3->__begin_ = &v45[v41];
    v3->__end_ = v39;
    v3->__end_cap_.__value_ = v46;
LABEL_72:
    operator delete(v28);
    goto LABEL_73;
  }
  uint64_t v47 = &v28[~(unint64_t)v40];
  do
  {
    char v48 = *--v28;
    (v47--)[(void)v45] = v48;
  }
  while (v28 != v40);
  unint64_t v28 = v3->__begin_;
  v3->__begin_ = v45;
  v3->__end_ = v39;
  v3->__end_cap_.__value_ = v46;
  if (v28) {
    goto LABEL_72;
  }
LABEL_73:
  v3->__end_ = v39;
  uint64_t v49 = v3->__end_cap_.__value_;
  if (v39 < v49)
  {
    *unint64_t v39 = 76;
    uint64_t v50 = (uint64_t)(v39 + 1);
    goto LABEL_91;
  }
  std::vector<char>::pointer v51 = v3->__begin_;
  int64_t v52 = v39 - v3->__begin_;
  unint64_t v53 = v52 + 1;
  if (v52 + 1 < 0) {
LABEL_101:
  }
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  unint64_t v54 = v49 - v51;
  if (2 * v54 > v53) {
    unint64_t v53 = 2 * v54;
  }
  if (v54 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v55 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v55 = v53;
  }
  if (v55) {
    uint64_t v56 = (char *)operator new(v55);
  }
  else {
    uint64_t v56 = 0;
  }
  std::string::size_type v57 = &v56[v55];
  v56[v52] = 76;
  uint64_t v50 = (uint64_t)&v56[v52 + 1];
  if (v39 == v51)
  {
    v3->__begin_ = &v56[v52];
    v3->__end_ = (std::vector<char>::pointer)v50;
    v3->__end_cap_.__value_ = v57;
LABEL_90:
    operator delete(v39);
    goto LABEL_91;
  }
  uint64_t v58 = &v39[~(unint64_t)v51];
  do
  {
    char v59 = *--v39;
    (v58--)[(void)v56] = v59;
  }
  while (v39 != v51);
  unint64_t v39 = v3->__begin_;
  v3->__begin_ = v56;
  v3->__end_ = (std::vector<char>::pointer)v50;
  v3->__end_cap_.__value_ = v57;
  if (v39) {
    goto LABEL_90;
  }
LABEL_91:
  v3->__end_ = (std::vector<char>::pointer)v50;
  uint64_t v61 = *(void *)(a2 + 16);
  uint64_t v60 = *(void *)(a2 + 24);
  unint64_t v62 = v3->__end_ - v3->__begin_;
  std::vector<char>::size_type v63 = *(void *)(a2 + 24) - *(void *)(a2 + 16);
  if (v62 >= v63 + v62)
  {
    if (v62 > v63 + v62) {
      v3->__end_ = &v3->__begin_[v63 + v62];
    }
  }
  else
  {
    std::vector<char>::__append(v3, v63);
  }
  if (v60 != v61)
  {
    uint64_t v64 = 0;
    if ((unint64_t)((v60 - v61) >> 2) <= 1) {
      uint64_t v65 = 1;
    }
    else {
      uint64_t v65 = (v60 - v61) >> 2;
    }
    do
    {
      *(_DWORD *)&v3->__begin_[4 * v64 + v62] = bswap32(*(_DWORD *)(*(void *)(a2 + 16) + 4 * v64));
      ++v64;
    }
    while (v65 != v64);
  }
}

{
  std::vector<char> *v3;
  char *value;
  std::vector<char>::pointer end;
  char *v6;
  std::vector<char>::pointer begin;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;
  char *v16;
  char *v17;
  std::vector<char>::pointer v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  char *v27;
  char *v28;
  std::vector<char>::pointer v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  char v37;
  char *v38;
  char *v39;
  std::vector<char>::pointer v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  char *v47;
  char v48;
  char *v49;
  uint64_t v50;
  std::vector<char>::pointer v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  size_t v55;
  char *v56;
  char *v57;
  char *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  std::vector<char>::size_type v63;
  uint64_t v64;
  uint64_t v65;

  uint64_t v3 = *(std::vector<char> **)(a1 + 8);
  std::vector<char>::pointer end = v3->__end_;
  value = v3->__end_cap_.__value_;
  if (end >= value)
  {
    std::vector<char>::pointer begin = v3->__begin_;
    int64_t v8 = end - v3->__begin_;
    unint64_t v9 = v8 + 1;
    if (v8 + 1 < 0) {
      goto LABEL_101;
    }
    unint64_t v10 = value - begin;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      size_t v12 = (char *)operator new(v11);
    }
    else {
      size_t v12 = 0;
    }
    unint64_t v13 = &v12[v11];
    v12[v8] = 91;
    uint64_t v6 = &v12[v8 + 1];
    if (end == begin)
    {
      v12 += v8;
    }
    else
    {
      uint64_t v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v12] = v15;
      }
      while (end != begin);
      std::vector<char>::pointer end = v3->__begin_;
    }
    v3->__begin_ = v12;
    v3->__end_ = v6;
    v3->__end_cap_.__value_ = v13;
    if (end) {
      operator delete(end);
    }
  }
  else
  {
    *std::vector<char>::pointer end = 91;
    uint64_t v6 = end + 1;
  }
  v3->__end_ = v6;
  char v16 = v3->__end_cap_.__value_;
  if (v6 < v16)
  {
    char *v6 = 36;
    uint64_t v17 = v6 + 1;
    goto LABEL_37;
  }
  std::vector<char>::pointer v18 = v3->__begin_;
  int64_t v19 = v6 - v3->__begin_;
  unint64_t v20 = v19 + 1;
  if (v19 + 1 < 0) {
    goto LABEL_101;
  }
  unint64_t v21 = v16 - v18;
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v20;
  }
  if (v22) {
    unint64_t v23 = (char *)operator new(v22);
  }
  else {
    unint64_t v23 = 0;
  }
  uint64_t v24 = &v23[v22];
  v23[v19] = 36;
  uint64_t v17 = &v23[v19 + 1];
  if (v6 == v18)
  {
    v3->__begin_ = &v23[v19];
    v3->__end_ = v17;
    v3->__end_cap_.__value_ = v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }
  unint64_t v25 = &v6[~(unint64_t)v18];
  do
  {
    char v26 = *--v6;
    (v25--)[(void)v23] = v26;
  }
  while (v6 != v18);
  uint64_t v6 = v3->__begin_;
  v3->__begin_ = v23;
  v3->__end_ = v17;
  v3->__end_cap_.__value_ = v24;
  if (v6) {
    goto LABEL_36;
  }
LABEL_37:
  v3->__end_ = v17;
  size_t v27 = v3->__end_cap_.__value_;
  if (v17 < v27)
  {
    char *v17 = 85;
    unint64_t v28 = v17 + 1;
    goto LABEL_55;
  }
  std::vector<char>::pointer v29 = v3->__begin_;
  int64_t v30 = v17 - v3->__begin_;
  unint64_t v31 = v30 + 1;
  if (v30 + 1 < 0) {
    goto LABEL_101;
  }
  unint64_t v32 = v27 - v29;
  if (2 * v32 > v31) {
    unint64_t v31 = 2 * v32;
  }
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v33 = v31;
  }
  if (v33) {
    uint64_t v34 = (char *)operator new(v33);
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = &v34[v33];
  v34[v30] = 85;
  unint64_t v28 = &v34[v30 + 1];
  if (v17 == v29)
  {
    v3->__begin_ = &v34[v30];
    v3->__end_ = v28;
    v3->__end_cap_.__value_ = v35;
LABEL_54:
    operator delete(v17);
    goto LABEL_55;
  }
  unint64_t v36 = &v17[~(unint64_t)v29];
  do
  {
    char v37 = *--v17;
    (v36--)[(void)v34] = v37;
  }
  while (v17 != v29);
  uint64_t v17 = v3->__begin_;
  v3->__begin_ = v34;
  v3->__end_ = v28;
  v3->__end_cap_.__value_ = v35;
  if (v17) {
    goto LABEL_54;
  }
LABEL_55:
  v3->__end_ = v28;
  unint64_t v38 = v3->__end_cap_.__value_;
  if (v28 < v38)
  {
    char *v28 = 35;
    unint64_t v39 = v28 + 1;
    goto LABEL_73;
  }
  std::vector<char>::pointer v40 = v3->__begin_;
  int64_t v41 = v28 - v3->__begin_;
  unint64_t v42 = v41 + 1;
  if (v41 + 1 < 0) {
    goto LABEL_101;
  }
  unint64_t v43 = v38 - v40;
  if (2 * v43 > v42) {
    unint64_t v42 = 2 * v43;
  }
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v44 = v42;
  }
  if (v44) {
    uint64_t v45 = (char *)operator new(v44);
  }
  else {
    uint64_t v45 = 0;
  }
  unsigned int v46 = &v45[v44];
  v45[v41] = 35;
  unint64_t v39 = &v45[v41 + 1];
  if (v28 == v40)
  {
    v3->__begin_ = &v45[v41];
    v3->__end_ = v39;
    v3->__end_cap_.__value_ = v46;
LABEL_72:
    operator delete(v28);
    goto LABEL_73;
  }
  uint64_t v47 = &v28[~(unint64_t)v40];
  do
  {
    char v48 = *--v28;
    (v47--)[(void)v45] = v48;
  }
  while (v28 != v40);
  unint64_t v28 = v3->__begin_;
  v3->__begin_ = v45;
  v3->__end_ = v39;
  v3->__end_cap_.__value_ = v46;
  if (v28) {
    goto LABEL_72;
  }
LABEL_73:
  v3->__end_ = v39;
  uint64_t v49 = v3->__end_cap_.__value_;
  if (v39 < v49)
  {
    *unint64_t v39 = 76;
    uint64_t v50 = (uint64_t)(v39 + 1);
    goto LABEL_91;
  }
  std::vector<char>::pointer v51 = v3->__begin_;
  int64_t v52 = v39 - v3->__begin_;
  unint64_t v53 = v52 + 1;
  if (v52 + 1 < 0) {
LABEL_101:
  }
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  unint64_t v54 = v49 - v51;
  if (2 * v54 > v53) {
    unint64_t v53 = 2 * v54;
  }
  if (v54 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v55 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v55 = v53;
  }
  if (v55) {
    uint64_t v56 = (char *)operator new(v55);
  }
  else {
    uint64_t v56 = 0;
  }
  std::string::size_type v57 = &v56[v55];
  v56[v52] = 76;
  uint64_t v50 = (uint64_t)&v56[v52 + 1];
  if (v39 == v51)
  {
    v3->__begin_ = &v56[v52];
    v3->__end_ = (std::vector<char>::pointer)v50;
    v3->__end_cap_.__value_ = v57;
LABEL_90:
    operator delete(v39);
    goto LABEL_91;
  }
  uint64_t v58 = &v39[~(unint64_t)v51];
  do
  {
    char v59 = *--v39;
    (v58--)[(void)v56] = v59;
  }
  while (v39 != v51);
  unint64_t v39 = v3->__begin_;
  v3->__begin_ = v56;
  v3->__end_ = (std::vector<char>::pointer)v50;
  v3->__end_cap_.__value_ = v57;
  if (v39) {
    goto LABEL_90;
  }
LABEL_91:
  v3->__end_ = (std::vector<char>::pointer)v50;
  uint64_t v61 = *(void *)(a2 + 16);
  uint64_t v60 = *(void *)(a2 + 24);
  unint64_t v62 = v3->__end_ - v3->__begin_;
  std::vector<char>::size_type v63 = *(void *)(a2 + 24) - *(void *)(a2 + 16);
  if (v62 >= v63 + v62)
  {
    if (v62 > v63 + v62) {
      v3->__end_ = &v3->__begin_[v63 + v62];
    }
  }
  else
  {
    std::vector<char>::__append(v3, v63);
  }
  if (v60 != v61)
  {
    uint64_t v64 = 0;
    if ((unint64_t)(v60 - v61) <= 1) {
      uint64_t v65 = 1;
    }
    else {
      uint64_t v65 = v60 - v61;
    }
    do
    {
      v3->__begin_[v62 + v64] = *(unsigned char *)(*(void *)(a2 + 16) + v64);
      ++v64;
    }
    while (v65 != v64);
  }
}

{
  std::vector<char> *v3;
  char *value;
  std::vector<char>::pointer end;
  char *v6;
  std::vector<char>::pointer begin;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;
  char *v16;
  char *v17;
  std::vector<char>::pointer v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  char *v27;
  char *v28;
  std::vector<char>::pointer v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  char v37;
  char *v38;
  char *v39;
  std::vector<char>::pointer v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  char *v47;
  char v48;
  char *v49;
  uint64_t v50;
  std::vector<char>::pointer v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  size_t v55;
  char *v56;
  char *v57;
  char *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  std::vector<char>::size_type v63;
  uint64_t v64;
  uint64_t v65;

  uint64_t v3 = *(std::vector<char> **)(a1 + 8);
  std::vector<char>::pointer end = v3->__end_;
  value = v3->__end_cap_.__value_;
  if (end >= value)
  {
    std::vector<char>::pointer begin = v3->__begin_;
    int64_t v8 = end - v3->__begin_;
    unint64_t v9 = v8 + 1;
    if (v8 + 1 < 0) {
      goto LABEL_101;
    }
    unint64_t v10 = value - begin;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      size_t v12 = (char *)operator new(v11);
    }
    else {
      size_t v12 = 0;
    }
    unint64_t v13 = &v12[v11];
    v12[v8] = 91;
    uint64_t v6 = &v12[v8 + 1];
    if (end == begin)
    {
      v12 += v8;
    }
    else
    {
      uint64_t v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v12] = v15;
      }
      while (end != begin);
      std::vector<char>::pointer end = v3->__begin_;
    }
    v3->__begin_ = v12;
    v3->__end_ = v6;
    v3->__end_cap_.__value_ = v13;
    if (end) {
      operator delete(end);
    }
  }
  else
  {
    *std::vector<char>::pointer end = 91;
    uint64_t v6 = end + 1;
  }
  v3->__end_ = v6;
  char v16 = v3->__end_cap_.__value_;
  if (v6 < v16)
  {
    char *v6 = 36;
    uint64_t v17 = v6 + 1;
    goto LABEL_37;
  }
  std::vector<char>::pointer v18 = v3->__begin_;
  int64_t v19 = v6 - v3->__begin_;
  unint64_t v20 = v19 + 1;
  if (v19 + 1 < 0) {
    goto LABEL_101;
  }
  unint64_t v21 = v16 - v18;
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v20;
  }
  if (v22) {
    unint64_t v23 = (char *)operator new(v22);
  }
  else {
    unint64_t v23 = 0;
  }
  uint64_t v24 = &v23[v22];
  v23[v19] = 36;
  uint64_t v17 = &v23[v19 + 1];
  if (v6 == v18)
  {
    v3->__begin_ = &v23[v19];
    v3->__end_ = v17;
    v3->__end_cap_.__value_ = v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }
  unint64_t v25 = &v6[~(unint64_t)v18];
  do
  {
    char v26 = *--v6;
    (v25--)[(void)v23] = v26;
  }
  while (v6 != v18);
  uint64_t v6 = v3->__begin_;
  v3->__begin_ = v23;
  v3->__end_ = v17;
  v3->__end_cap_.__value_ = v24;
  if (v6) {
    goto LABEL_36;
  }
LABEL_37:
  v3->__end_ = v17;
  size_t v27 = v3->__end_cap_.__value_;
  if (v17 < v27)
  {
    char *v17 = 108;
    unint64_t v28 = v17 + 1;
    goto LABEL_55;
  }
  std::vector<char>::pointer v29 = v3->__begin_;
  int64_t v30 = v17 - v3->__begin_;
  unint64_t v31 = v30 + 1;
  if (v30 + 1 < 0) {
    goto LABEL_101;
  }
  unint64_t v32 = v27 - v29;
  if (2 * v32 > v31) {
    unint64_t v31 = 2 * v32;
  }
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v33 = v31;
  }
  if (v33) {
    uint64_t v34 = (char *)operator new(v33);
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = &v34[v33];
  v34[v30] = 108;
  unint64_t v28 = &v34[v30 + 1];
  if (v17 == v29)
  {
    v3->__begin_ = &v34[v30];
    v3->__end_ = v28;
    v3->__end_cap_.__value_ = v35;
LABEL_54:
    operator delete(v17);
    goto LABEL_55;
  }
  unint64_t v36 = &v17[~(unint64_t)v29];
  do
  {
    char v37 = *--v17;
    (v36--)[(void)v34] = v37;
  }
  while (v17 != v29);
  uint64_t v17 = v3->__begin_;
  v3->__begin_ = v34;
  v3->__end_ = v28;
  v3->__end_cap_.__value_ = v35;
  if (v17) {
    goto LABEL_54;
  }
LABEL_55:
  v3->__end_ = v28;
  unint64_t v38 = v3->__end_cap_.__value_;
  if (v28 < v38)
  {
    char *v28 = 35;
    unint64_t v39 = v28 + 1;
    goto LABEL_73;
  }
  std::vector<char>::pointer v40 = v3->__begin_;
  int64_t v41 = v28 - v3->__begin_;
  unint64_t v42 = v41 + 1;
  if (v41 + 1 < 0) {
    goto LABEL_101;
  }
  unint64_t v43 = v38 - v40;
  if (2 * v43 > v42) {
    unint64_t v42 = 2 * v43;
  }
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v44 = v42;
  }
  if (v44) {
    uint64_t v45 = (char *)operator new(v44);
  }
  else {
    uint64_t v45 = 0;
  }
  unsigned int v46 = &v45[v44];
  v45[v41] = 35;
  unint64_t v39 = &v45[v41 + 1];
  if (v28 == v40)
  {
    v3->__begin_ = &v45[v41];
    v3->__end_ = v39;
    v3->__end_cap_.__value_ = v46;
LABEL_72:
    operator delete(v28);
    goto LABEL_73;
  }
  uint64_t v47 = &v28[~(unint64_t)v40];
  do
  {
    char v48 = *--v28;
    (v47--)[(void)v45] = v48;
  }
  while (v28 != v40);
  unint64_t v28 = v3->__begin_;
  v3->__begin_ = v45;
  v3->__end_ = v39;
  v3->__end_cap_.__value_ = v46;
  if (v28) {
    goto LABEL_72;
  }
LABEL_73:
  v3->__end_ = v39;
  uint64_t v49 = v3->__end_cap_.__value_;
  if (v39 < v49)
  {
    *unint64_t v39 = 76;
    uint64_t v50 = (uint64_t)(v39 + 1);
    goto LABEL_91;
  }
  std::vector<char>::pointer v51 = v3->__begin_;
  int64_t v52 = v39 - v3->__begin_;
  unint64_t v53 = v52 + 1;
  if (v52 + 1 < 0) {
LABEL_101:
  }
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  unint64_t v54 = v49 - v51;
  if (2 * v54 > v53) {
    unint64_t v53 = 2 * v54;
  }
  if (v54 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v55 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v55 = v53;
  }
  if (v55) {
    uint64_t v56 = (char *)operator new(v55);
  }
  else {
    uint64_t v56 = 0;
  }
  std::string::size_type v57 = &v56[v55];
  v56[v52] = 76;
  uint64_t v50 = (uint64_t)&v56[v52 + 1];
  if (v39 == v51)
  {
    v3->__begin_ = &v56[v52];
    v3->__end_ = (std::vector<char>::pointer)v50;
    v3->__end_cap_.__value_ = v57;
LABEL_90:
    operator delete(v39);
    goto LABEL_91;
  }
  uint64_t v58 = &v39[~(unint64_t)v51];
  do
  {
    char v59 = *--v39;
    (v58--)[(void)v56] = v59;
  }
  while (v39 != v51);
  unint64_t v39 = v3->__begin_;
  v3->__begin_ = v56;
  v3->__end_ = (std::vector<char>::pointer)v50;
  v3->__end_cap_.__value_ = v57;
  if (v39) {
    goto LABEL_90;
  }
LABEL_91:
  v3->__end_ = (std::vector<char>::pointer)v50;
  uint64_t v61 = *(void *)(a2 + 16);
  uint64_t v60 = *(void *)(a2 + 24);
  unint64_t v62 = v3->__end_ - v3->__begin_;
  std::vector<char>::size_type v63 = *(void *)(a2 + 24) - *(void *)(a2 + 16);
  if (v62 >= v63 + v62)
  {
    if (v62 > v63 + v62) {
      v3->__end_ = &v3->__begin_[v63 + v62];
    }
  }
  else
  {
    std::vector<char>::__append(v3, v63);
  }
  if (v60 != v61)
  {
    uint64_t v64 = 0;
    if ((unint64_t)((v60 - v61) >> 2) <= 1) {
      uint64_t v65 = 1;
    }
    else {
      uint64_t v65 = (v60 - v61) >> 2;
    }
    do
    {
      *(_DWORD *)&v3->__begin_[4 * v64 + v62] = bswap32(*(_DWORD *)(*(void *)(a2 + 16) + 4 * v64));
      ++v64;
    }
    while (v65 != v64);
  }
}

{
  std::vector<char> *v3;
  char *value;
  std::vector<char>::pointer end;
  char *v6;
  std::vector<char>::pointer begin;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;
  char *v16;
  char *v17;
  std::vector<char>::pointer v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  char *v27;
  char *v28;
  std::vector<char>::pointer v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  char v37;
  char *v38;
  char *v39;
  std::vector<char>::pointer v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  char *v47;
  char v48;
  char *v49;
  uint64_t v50;
  std::vector<char>::pointer v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  size_t v55;
  char *v56;
  char *v57;
  char *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  std::vector<char>::size_type v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;

  uint64_t v3 = *(std::vector<char> **)(a1 + 8);
  std::vector<char>::pointer end = v3->__end_;
  value = v3->__end_cap_.__value_;
  if (end >= value)
  {
    std::vector<char>::pointer begin = v3->__begin_;
    int64_t v8 = end - v3->__begin_;
    unint64_t v9 = v8 + 1;
    if (v8 + 1 < 0) {
      goto LABEL_103;
    }
    unint64_t v10 = value - begin;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      size_t v12 = (char *)operator new(v11);
    }
    else {
      size_t v12 = 0;
    }
    unint64_t v13 = &v12[v11];
    v12[v8] = 91;
    uint64_t v6 = &v12[v8 + 1];
    if (end == begin)
    {
      v12 += v8;
    }
    else
    {
      uint64_t v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v12] = v15;
      }
      while (end != begin);
      std::vector<char>::pointer end = v3->__begin_;
    }
    v3->__begin_ = v12;
    v3->__end_ = v6;
    v3->__end_cap_.__value_ = v13;
    if (end) {
      operator delete(end);
    }
  }
  else
  {
    *std::vector<char>::pointer end = 91;
    uint64_t v6 = end + 1;
  }
  v3->__end_ = v6;
  char v16 = v3->__end_cap_.__value_;
  if (v6 < v16)
  {
    char *v6 = 36;
    uint64_t v17 = v6 + 1;
    goto LABEL_37;
  }
  std::vector<char>::pointer v18 = v3->__begin_;
  int64_t v19 = v6 - v3->__begin_;
  unint64_t v20 = v19 + 1;
  if (v19 + 1 < 0) {
    goto LABEL_103;
  }
  unint64_t v21 = v16 - v18;
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v20;
  }
  if (v22) {
    unint64_t v23 = (char *)operator new(v22);
  }
  else {
    unint64_t v23 = 0;
  }
  uint64_t v24 = &v23[v22];
  v23[v19] = 36;
  uint64_t v17 = &v23[v19 + 1];
  if (v6 == v18)
  {
    v3->__begin_ = &v23[v19];
    v3->__end_ = v17;
    v3->__end_cap_.__value_ = v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }
  unint64_t v25 = &v6[~(unint64_t)v18];
  do
  {
    char v26 = *--v6;
    (v25--)[(void)v23] = v26;
  }
  while (v6 != v18);
  uint64_t v6 = v3->__begin_;
  v3->__begin_ = v23;
  v3->__end_ = v17;
  v3->__end_cap_.__value_ = v24;
  if (v6) {
    goto LABEL_36;
  }
LABEL_37:
  v3->__end_ = v17;
  size_t v27 = v3->__end_cap_.__value_;
  if (v17 < v27)
  {
    char *v17 = 76;
    unint64_t v28 = v17 + 1;
    goto LABEL_55;
  }
  std::vector<char>::pointer v29 = v3->__begin_;
  int64_t v30 = v17 - v3->__begin_;
  unint64_t v31 = v30 + 1;
  if (v30 + 1 < 0) {
    goto LABEL_103;
  }
  unint64_t v32 = v27 - v29;
  if (2 * v32 > v31) {
    unint64_t v31 = 2 * v32;
  }
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v33 = v31;
  }
  if (v33) {
    uint64_t v34 = (char *)operator new(v33);
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = &v34[v33];
  v34[v30] = 76;
  unint64_t v28 = &v34[v30 + 1];
  if (v17 == v29)
  {
    v3->__begin_ = &v34[v30];
    v3->__end_ = v28;
    v3->__end_cap_.__value_ = v35;
LABEL_54:
    operator delete(v17);
    goto LABEL_55;
  }
  unint64_t v36 = &v17[~(unint64_t)v29];
  do
  {
    char v37 = *--v17;
    (v36--)[(void)v34] = v37;
  }
  while (v17 != v29);
  uint64_t v17 = v3->__begin_;
  v3->__begin_ = v34;
  v3->__end_ = v28;
  v3->__end_cap_.__value_ = v35;
  if (v17) {
    goto LABEL_54;
  }
LABEL_55:
  v3->__end_ = v28;
  unint64_t v38 = v3->__end_cap_.__value_;
  if (v28 < v38)
  {
    char *v28 = 35;
    unint64_t v39 = v28 + 1;
    goto LABEL_73;
  }
  std::vector<char>::pointer v40 = v3->__begin_;
  int64_t v41 = v28 - v3->__begin_;
  unint64_t v42 = v41 + 1;
  if (v41 + 1 < 0) {
    goto LABEL_103;
  }
  unint64_t v43 = v38 - v40;
  if (2 * v43 > v42) {
    unint64_t v42 = 2 * v43;
  }
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v44 = v42;
  }
  if (v44) {
    uint64_t v45 = (char *)operator new(v44);
  }
  else {
    uint64_t v45 = 0;
  }
  unsigned int v46 = &v45[v44];
  v45[v41] = 35;
  unint64_t v39 = &v45[v41 + 1];
  if (v28 == v40)
  {
    v3->__begin_ = &v45[v41];
    v3->__end_ = v39;
    v3->__end_cap_.__value_ = v46;
LABEL_72:
    operator delete(v28);
    goto LABEL_73;
  }
  uint64_t v47 = &v28[~(unint64_t)v40];
  do
  {
    char v48 = *--v28;
    (v47--)[(void)v45] = v48;
  }
  while (v28 != v40);
  unint64_t v28 = v3->__begin_;
  v3->__begin_ = v45;
  v3->__end_ = v39;
  v3->__end_cap_.__value_ = v46;
  if (v28) {
    goto LABEL_72;
  }
LABEL_73:
  v3->__end_ = v39;
  uint64_t v49 = v3->__end_cap_.__value_;
  if (v39 < v49)
  {
    *unint64_t v39 = 76;
    uint64_t v50 = (uint64_t)(v39 + 1);
    goto LABEL_91;
  }
  std::vector<char>::pointer v51 = v3->__begin_;
  int64_t v52 = v39 - v3->__begin_;
  unint64_t v53 = v52 + 1;
  if (v52 + 1 < 0) {
LABEL_103:
  }
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  unint64_t v54 = v49 - v51;
  if (2 * v54 > v53) {
    unint64_t v53 = 2 * v54;
  }
  if (v54 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v55 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v55 = v53;
  }
  if (v55) {
    uint64_t v56 = (char *)operator new(v55);
  }
  else {
    uint64_t v56 = 0;
  }
  std::string::size_type v57 = &v56[v55];
  v56[v52] = 76;
  uint64_t v50 = (uint64_t)&v56[v52 + 1];
  if (v39 == v51)
  {
    v3->__begin_ = &v56[v52];
    v3->__end_ = (std::vector<char>::pointer)v50;
    v3->__end_cap_.__value_ = v57;
LABEL_90:
    operator delete(v39);
    goto LABEL_91;
  }
  uint64_t v58 = &v39[~(unint64_t)v51];
  do
  {
    char v59 = *--v39;
    (v58--)[(void)v56] = v59;
  }
  while (v39 != v51);
  unint64_t v39 = v3->__begin_;
  v3->__begin_ = v56;
  v3->__end_ = (std::vector<char>::pointer)v50;
  v3->__end_cap_.__value_ = v57;
  if (v39) {
    goto LABEL_90;
  }
LABEL_91:
  v3->__end_ = (std::vector<char>::pointer)v50;
  uint64_t v61 = *(void *)(a2 + 16);
  uint64_t v60 = *(void *)(a2 + 24);
  unint64_t v62 = v3->__end_ - v3->__begin_;
  std::vector<char>::size_type v63 = *(void *)(a2 + 24) - *(void *)(a2 + 16);
  if (v62 >= v63 + v62)
  {
    if (v62 > v63 + v62) {
      v3->__end_ = &v3->__begin_[v63 + v62];
    }
  }
  else
  {
    std::vector<char>::__append(v3, v63);
  }
  if (v60 != v61)
  {
    uint64_t v64 = 0;
    if ((unint64_t)((v60 - v61) >> 3) <= 1) {
      uint64_t v65 = 1;
    }
    else {
      uint64_t v65 = (v60 - v61) >> 3;
    }
    do
    {
      std::string v66 = 0;
      char v69 = *(void *)(*(void *)(a2 + 16) + 8 * v64);
      std::string v67 = 7;
      do
      {
        char v68 = *((unsigned char *)&v69 + v67);
        *((unsigned char *)&v69 + v67) = *((unsigned char *)&v69 + v66);
        *((unsigned char *)&v69 + v66++) = v68;
        --v67;
      }
      while (v66 != 4);
      *(void *)&v3->__begin_[v62] = v69;
      v62 += 8;
      ++v64;
    }
    while (v64 != v65);
  }
}

void xgboost::UBJWriter::Visit(xgboost::UBJWriter *this, const xgboost::JsonObject *a2)
{
  uint64_t v4 = (unint64_t *)*((void *)this + 1);
  uint64_t v6 = (unsigned char *)v4[1];
  unint64_t v5 = v4[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    unint64_t v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = 123;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      char v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      uint64_t v6 = (unsigned char *)*v4;
    }
    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    unsigned char *v6 = 123;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  uint64_t v17 = (const void **)*((void *)a2 + 2);
  std::vector<char>::pointer v18 = (char *)a2 + 24;
  if (v17 != (const void **)v18)
  {
    do
    {
      int64_t v19 = (atomic_uint *)v17[7];
      char v37 = v19;
      if (v19) {
        atomic_fetch_add_explicit(v19 + 2, 1u, memory_order_relaxed);
      }
      (*(void (**)(xgboost::UBJWriter *, atomic_uint **))(*(void *)this + 16))(this, &v37);
      unint64_t v20 = v37;
      if (v37 && atomic_fetch_add_explicit(v37 + 2, 0xFFFFFFFF, memory_order_release) == 1)
      {
        __dmb(9u);
        (*(void (**)(atomic_uint *))(*(void *)v20 + 8))(v20);
      }
      unint64_t v21 = (char *)v17[1];
      if (v21)
      {
        do
        {
          size_t v22 = v21;
          unint64_t v21 = *(char **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          size_t v22 = (char *)v17[2];
          BOOL v23 = *(void *)v22 == (void)v17;
          uint64_t v17 = (const void **)v22;
        }
        while (!v23);
      }
      uint64_t v17 = (const void **)v22;
    }
    while (v22 != v18);
  }
  uint64_t v24 = (unint64_t *)*((void *)this + 1);
  char v26 = (unsigned char *)v24[1];
  unint64_t v25 = v24[2];
  if ((unint64_t)v26 >= v25)
  {
    unint64_t v28 = *v24;
    std::vector<char>::pointer v29 = &v26[-*v24];
    unint64_t v30 = (unint64_t)(v29 + 1);
    if ((uint64_t)(v29 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v31 = v25 - v28;
    if (2 * v31 > v30) {
      unint64_t v30 = 2 * v31;
    }
    if (v31 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v32 = v30;
    }
    if (v32) {
      unint64_t v33 = (unint64_t)operator new(v32);
    }
    else {
      unint64_t v33 = 0;
    }
    uint64_t v34 = (char *)(v33 + v32);
    v29[v33] = 125;
    uint64_t v27 = (uint64_t)&v29[v33 + 1];
    if (v26 == (unsigned char *)v28)
    {
      v33 += (unint64_t)v29;
    }
    else
    {
      uint64_t v35 = &v26[~v28];
      do
      {
        char v36 = *--v26;
        (v35--)[v33] = v36;
      }
      while (v26 != (unsigned char *)v28);
      char v26 = (unsigned char *)*v24;
    }
    *uint64_t v24 = v33;
    v24[1] = v27;
    v24[2] = (unint64_t)v34;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *char v26 = 125;
    uint64_t v27 = (uint64_t)(v26 + 1);
  }
  v24[1] = v27;
}

void sub_22EA01EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void *xgboost::anonymous namespace'::EncodeStr(std::vector<char> *this, const void **a2)
{
  std::vector<char>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    std::vector<char>::pointer begin = this->__begin_;
    int64_t v8 = end - this->__begin_;
    unint64_t v9 = v8 + 1;
    if (v8 + 1 < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = value - begin;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      size_t v12 = (char *)operator new(v11);
    }
    else {
      size_t v12 = 0;
    }
    unint64_t v13 = &v12[v11];
    v12[v8] = 76;
    uint64_t v6 = &v12[v8 + 1];
    if (end == begin)
    {
      v12 += v8;
    }
    else
    {
      uint64_t v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v12] = v15;
      }
      while (end != begin);
      std::vector<char>::pointer end = this->__begin_;
    }
    this->__begin_ = v12;
    this->__end_ = v6;
    this->__end_cap_.__value_ = v13;
    if (end) {
      operator delete(end);
    }
  }
  else
  {
    *std::vector<char>::pointer end = 76;
    uint64_t v6 = end + 1;
  }
  this->__end_ = v6;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v16 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v16 = (uint64_t)a2[1];
  }
  std::vector<char>::pointer v17 = this->__begin_;
  unint64_t v18 = this->__end_ - this->__begin_;
  if (*((char *)a2 + 23) >= 0) {
    std::vector<char>::size_type v19 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::vector<char>::size_type v19 = (std::vector<char>::size_type)a2[1];
  }
  if (v18 >= v19 + v18)
  {
    if (v18 > v19 + v18) {
      this->__end_ = &v17[v19 + v18];
    }
  }
  else
  {
    std::vector<char>::__append(this, v19);
    std::vector<char>::pointer v17 = this->__begin_;
  }
  int v20 = *((char *)a2 + 23);
  if (v20 >= 0) {
    unint64_t v21 = a2;
  }
  else {
    unint64_t v21 = *a2;
  }
  if (v20 >= 0) {
    size_t v22 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v22 = (size_t)a2[1];
  }

  return memcpy(&v17[v18], v21, v22);
}

void xgboost::UBJWriter::Visit(xgboost::UBJWriter *this, const xgboost::JsonNumber *a2)
{
  uint64_t v4 = (unint64_t *)*((void *)this + 1);
  uint64_t v6 = (unsigned char *)v4[1];
  unint64_t v5 = v4[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    unint64_t v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = 100;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      char v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      uint64_t v6 = (unsigned char *)*v4;
    }
    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    unsigned char *v6 = 100;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  unsigned int v17 = *((_DWORD *)a2 + 4);
  unint64_t v18 = (std::vector<char> *)*((void *)this + 1);
  std::vector<char>::pointer begin = v18->__begin_;
  unint64_t v20 = v18->__end_ - v18->__begin_;
  if (v20 > 0xFFFFFFFFFFFFFFFBLL)
  {
    v18->__end_ = &begin[v20 + 4];
  }
  else
  {
    std::vector<char>::__append(v18, 4uLL);
    std::vector<char>::pointer begin = v18->__begin_;
  }
  *(_DWORD *)&begin[v20] = bswap32(v17);
}

void xgboost::UBJWriter::Visit(xgboost::UBJWriter *this, const xgboost::JsonInteger *a2)
{
  uint64_t v3 = *((void *)a2 + 2);
  if (v3 < -127)
  {
    if ((unint64_t)v3 > 0xFFFFFFFFFFFF8000)
    {
LABEL_10:
      size_t v12 = (unint64_t *)*((void *)this + 1);
      uint64_t v14 = (unsigned char *)v12[1];
      unint64_t v13 = v12[2];
      if ((unint64_t)v14 >= v13)
      {
        unint64_t v16 = *v12;
        unsigned int v17 = &v14[-*v12];
        unint64_t v18 = (unint64_t)(v17 + 1);
        if ((uint64_t)(v17 + 1) < 0) {
          goto LABEL_94;
        }
        unint64_t v19 = v13 - v16;
        if (2 * v19 > v18) {
          unint64_t v18 = 2 * v19;
        }
        if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v20 = v18;
        }
        if (v20) {
          unint64_t v21 = (unint64_t)operator new(v20);
        }
        else {
          unint64_t v21 = 0;
        }
        size_t v44 = (char *)(v21 + v20);
        v17[v21] = 73;
        uint64_t v15 = (uint64_t)&v17[v21 + 1];
        if (v14 == (unsigned char *)v16)
        {
          v21 += (unint64_t)v17;
        }
        else
        {
          uint64_t v45 = &v14[~v16];
          do
          {
            char v46 = *--v14;
            (v45--)[v21] = v46;
          }
          while (v14 != (unsigned char *)v16);
          uint64_t v14 = (unsigned char *)*v12;
        }
        unint64_t *v12 = v21;
        v12[1] = v15;
        _OWORD v12[2] = (unint64_t)v44;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *uint64_t v14 = 73;
        uint64_t v15 = (uint64_t)(v14 + 1);
      }
      v12[1] = v15;
      uint64_t v47 = (std::vector<char> *)*((void *)this + 1);
      std::vector<char>::pointer begin = v47->__begin_;
      unint64_t v49 = v47->__end_ - v47->__begin_;
      if (v49 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v47->__end_ = &begin[v49 + 2];
      }
      else
      {
        std::vector<char>::__append(v47, 2uLL);
        std::vector<char>::pointer begin = v47->__begin_;
      }
      *(_WORD *)&begin[v49] = bswap32(v3) >> 16;
      return;
    }
    if ((unint64_t)v3 <= 0xFFFFFFFF80000000) {
      goto LABEL_29;
    }
LABEL_7:
    unint64_t v8 = (unint64_t *)*((void *)this + 1);
    unint64_t v10 = (unsigned char *)v8[1];
    unint64_t v9 = v8[2];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v32 = *v8;
      unint64_t v33 = &v10[-*v8];
      unint64_t v34 = (unint64_t)(v33 + 1);
      if ((uint64_t)(v33 + 1) < 0) {
        goto LABEL_94;
      }
      unint64_t v35 = v9 - v32;
      if (2 * v35 > v34) {
        unint64_t v34 = 2 * v35;
      }
      if (v35 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v36 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v36 = v34;
      }
      if (v36) {
        unint64_t v37 = (unint64_t)operator new(v36);
      }
      else {
        unint64_t v37 = 0;
      }
      uint64_t v56 = (char *)(v37 + v36);
      v33[v37] = 108;
      uint64_t v11 = (uint64_t)&v33[v37 + 1];
      if (v10 == (unsigned char *)v32)
      {
        v37 += (unint64_t)v33;
      }
      else
      {
        std::string::size_type v57 = &v10[~v32];
        do
        {
          char v58 = *--v10;
          (v57--)[v37] = v58;
        }
        while (v10 != (unsigned char *)v32);
        unint64_t v10 = (unsigned char *)*v8;
      }
      *unint64_t v8 = v37;
      v8[1] = v11;
      v8[2] = (unint64_t)v56;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      unsigned char *v10 = 108;
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v8[1] = v11;
    unint64_t v62 = (std::vector<char> *)*((void *)this + 1);
    std::vector<char>::pointer v63 = v62->__begin_;
    unint64_t v64 = v62->__end_ - v62->__begin_;
    if (v64 > 0xFFFFFFFFFFFFFFFBLL)
    {
      v62->__end_ = &v63[v64 + 4];
    }
    else
    {
      std::vector<char>::__append(v62, 4uLL);
      std::vector<char>::pointer v63 = v62->__begin_;
    }
    *(_DWORD *)&v63[v64] = bswap32(v3);
    return;
  }
  if (v3 <= 126)
  {
    uint64_t v4 = (unint64_t *)*((void *)this + 1);
    uint64_t v6 = (unsigned char *)v4[1];
    unint64_t v5 = v4[2];
    if ((unint64_t)v6 < v5)
    {
      unsigned char *v6 = 105;
      uint64_t v7 = (uint64_t)(v6 + 1);
LABEL_67:
      v4[1] = v7;
      unint64_t v53 = (std::vector<char> *)*((void *)this + 1);
      unint64_t v54 = v53->__begin_;
      int64_t v55 = v53->__end_ - v53->__begin_;
      if (v55 == -1)
      {
        v53->__end_ = v54;
      }
      else
      {
        std::vector<char>::__append(v53, 1uLL);
        unint64_t v54 = v53->__begin_;
      }
      v54[v55] = v3;
      return;
    }
    unint64_t v22 = *v4;
    BOOL v23 = &v6[-*v4];
    unint64_t v24 = (unint64_t)(v23 + 1);
    if ((uint64_t)(v23 + 1) >= 0)
    {
      unint64_t v25 = v5 - v22;
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v26 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v26 = v24;
      }
      if (v26) {
        unint64_t v27 = (unint64_t)operator new(v26);
      }
      else {
        unint64_t v27 = 0;
      }
      uint64_t v50 = (char *)(v27 + v26);
      v23[v27] = 105;
      uint64_t v7 = (uint64_t)&v23[v27 + 1];
      if (v6 == (unsigned char *)v22)
      {
        v27 += (unint64_t)v23;
      }
      else
      {
        std::vector<char>::pointer v51 = &v6[~v22];
        do
        {
          char v52 = *--v6;
          (v51--)[v27] = v52;
        }
        while (v6 != (unsigned char *)v22);
        uint64_t v6 = (unsigned char *)*v4;
      }
      *uint64_t v4 = v27;
      v4[1] = v7;
      v4[2] = (unint64_t)v50;
      if (v6) {
        operator delete(v6);
      }
      goto LABEL_67;
    }
LABEL_94:
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  if ((unint64_t)v3 <= 0x7FFE) {
    goto LABEL_10;
  }
  if ((unint64_t)v3 <= 0x7FFFFFFE) {
    goto LABEL_7;
  }
LABEL_29:
  unint64_t v28 = (unint64_t *)*((void *)this + 1);
  unint64_t v30 = (unsigned char *)v28[1];
  unint64_t v29 = v28[2];
  if ((unint64_t)v30 >= v29)
  {
    unint64_t v38 = *v28;
    unint64_t v39 = &v30[-*v28];
    unint64_t v40 = (unint64_t)(v39 + 1);
    if ((uint64_t)(v39 + 1) < 0) {
      goto LABEL_94;
    }
    unint64_t v41 = v29 - v38;
    if (2 * v41 > v40) {
      unint64_t v40 = 2 * v41;
    }
    if (v41 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v42 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v42 = v40;
    }
    if (v42) {
      unint64_t v43 = (unint64_t)operator new(v42);
    }
    else {
      unint64_t v43 = 0;
    }
    char v59 = (char *)(v43 + v42);
    v39[v43] = 76;
    uint64_t v31 = (uint64_t)&v39[v43 + 1];
    if (v30 == (unsigned char *)v38)
    {
      v43 += (unint64_t)v39;
    }
    else
    {
      uint64_t v60 = &v30[~v38];
      do
      {
        char v61 = *--v30;
        (v60--)[v43] = v61;
      }
      while (v30 != (unsigned char *)v38);
      unint64_t v30 = (unsigned char *)*v28;
    }
    unint64_t *v28 = v43;
    v28[1] = v31;
    void v28[2] = (unint64_t)v59;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *unint64_t v30 = 76;
    uint64_t v31 = (uint64_t)(v30 + 1);
  }
  v28[1] = v31;
  uint64_t v65 = (std::vector<char> *)*((void *)this + 1);
}

void xgboost::UBJWriter::Visit(xgboost::UBJWriter *this, const xgboost::JsonNull *a2)
{
  uint64_t v2 = (unint64_t *)*((void *)this + 1);
  uint64_t v4 = (unsigned char *)v2[1];
  unint64_t v3 = v2[2];
  if ((unint64_t)v4 >= v3)
  {
    unint64_t v6 = *v2;
    uint64_t v7 = &v4[-*v2];
    unint64_t v8 = (unint64_t)(v7 + 1);
    if ((uint64_t)(v7 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v3 - v6;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    size_t v12 = (char *)(v11 + v10);
    v7[v11] = 90;
    uint64_t v5 = (uint64_t)&v7[v11 + 1];
    if (v4 == (unsigned char *)v6)
    {
      v11 += (unint64_t)v7;
    }
    else
    {
      unint64_t v13 = &v4[~v6];
      do
      {
        char v14 = *--v4;
        (v13--)[v11] = v14;
      }
      while (v4 != (unsigned char *)v6);
      uint64_t v4 = (unsigned char *)*v2;
    }
    *uint64_t v2 = v11;
    v2[1] = v5;
    void v2[2] = (unint64_t)v12;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *uint64_t v4 = 90;
    uint64_t v5 = (uint64_t)(v4 + 1);
  }
  v2[1] = v5;
}

void *xgboost::UBJWriter::Visit(xgboost::UBJWriter *this, const void **a2)
{
  uint64_t v4 = (unint64_t *)*((void *)this + 1);
  unint64_t v6 = (unsigned char *)v4[1];
  unint64_t v5 = v4[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    unint64_t v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    char v14 = (char *)(v13 + v12);
    v9[v13] = 83;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      uint64_t v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      unint64_t v6 = (unsigned char *)*v4;
    }
    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    unsigned char *v6 = 83;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  unsigned int v17 = (std::vector<char> *)*((void *)this + 1);
}

void xgboost::UBJWriter::Visit(xgboost::UBJWriter *this, const xgboost::JsonBoolean *a2)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (*((unsigned char *)a2 + 16)) {
    char v3 = 84;
  }
  else {
    char v3 = 70;
  }
  unint64_t v5 = (char *)v2[1];
  unint64_t v4 = v2[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (char *)*v2;
    unint64_t v8 = &v5[-*v2];
    unint64_t v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v4 - (void)v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      size_t v12 = (char *)operator new(v11);
    }
    else {
      size_t v12 = 0;
    }
    unint64_t v13 = &v12[v11];
    v8[(void)v12] = v3;
    uint64_t v6 = (uint64_t)&v8[(void)v12 + 1];
    if (v5 == v7)
    {
      size_t v12 = &v8[(void)v12];
    }
    else
    {
      char v14 = &v5[~(unint64_t)v7];
      do
      {
        char v15 = *--v5;
        (v14--)[(void)v12] = v15;
      }
      while (v5 != v7);
      unint64_t v5 = (char *)*v2;
    }
    *uint64_t v2 = v12;
    v2[1] = v6;
    void v2[2] = v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    char *v5 = v3;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  v2[1] = v6;
}

uint64_t *xgboost::JsonArray::operator[](xgboost::Value *a1)
{
  return &_MergedGlobals_19;
}

uint64_t xgboost::JsonArray::operator[](uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (a2 >= (unint64_t)((*(void *)(a1 + 24) - v2) >> 3)) {
    std::vector<xgboost::Json>::__throw_out_of_range[abi:ne180100]();
  }
  return v2 + 8 * a2;
}

uint64_t xgboost::JsonObject::operator[](uint64_t a1, long long *a2)
{
  char v3 = a2;
  return std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 16, (const void **)a2, (uint64_t)&std::piecewise_construct, &v3)+ 56;
}

uint64_t *xgboost::JsonObject::operator[](xgboost::Value *a1)
{
  return &_MergedGlobals_19;
}

void xgboost::JsonNumber::~JsonNumber(xgboost::JsonNumber *this)
{
}

void xgboost::JsonInteger::~JsonInteger(xgboost::JsonInteger *this)
{
}

void xgboost::JsonNull::~JsonNull(xgboost::JsonNull *this)
{
}

void xgboost::JsonBoolean::~JsonBoolean(xgboost::JsonBoolean *this)
{
}

void xgboost::JsonReader::~JsonReader(xgboost::JsonReader *this)
{
}

void xgboost::JsonWriter::~JsonWriter(xgboost::JsonWriter *this)
{
}

void xgboost::UBJReader::~UBJReader(xgboost::UBJReader *this)
{
}

void xgboost::UBJWriter::~UBJWriter(xgboost::UBJWriter *this)
{
}

void xgboost::Json::Json()
{
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  char v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (result[2]) {
    uint64_t result = (uint64_t *)(*v3 + 16);
  }
  *uint64_t result = (uint64_t)v3;
  uint64_t v6 = (void *)(*(void *)(a2 + 8) + 16);
  if (!v4) {
    uint64_t v6 = (void *)a2;
  }
  void *v6 = a2 + 8;
  return result;
}

uint64_t dmlc::io::FileSystem::ListDirectoryRecursive(uint64_t a1, long long *a2, uint64_t *a3)
{
  int64x2_t v23 = 0u;
  memset(v22, 0, sizeof(v22));
  std::deque<dmlc::io::URI>::push_back(v22, a2);
  while (v23.i64[1])
  {
    unint64_t v19 = 0;
    size_t v20 = 0;
    uint64_t v21 = 0;
    (*(void (**)(uint64_t, unint64_t, long long **))(*(void *)a1 + 24))(a1, *(void *)(*((void *)&v22[0] + 1) + 8 * (v23.i64[0] / 0x38uLL)) + 72 * (v23.i64[0] % 0x38uLL), &v19);
    std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100]((uint64_t)&v23.i64[1], *(void *)(*((void *)&v22[0] + 1) + 8 * (v23.i64[0] / 0x38uLL)) + 72 * (v23.i64[0] % 0x38uLL));
    int64x2_t v23 = vaddq_s64(v23, (int64x2_t)xmmword_22EA18F80);
    if (v23.i64[0] >= 0x70uLL)
    {
      operator delete(**((void ***)&v22[0] + 1));
      *((void *)&v22[0] + 1) += 8;
      v23.i64[0] -= 56;
    }
    uint64_t v5 = v19;
    uint64_t v6 = v20;
    while (v5 != v6)
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v7 = *v5;
        v14.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
        *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
      }
      if (*((char *)v5 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)v5 + 3), *((void *)v5 + 4));
      }
      else
      {
        long long v8 = *(long long *)((char *)v5 + 24);
        v15.__r_.__value_.__r.__words[2] = *((void *)v5 + 5);
        *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
      }
      if (*((char *)v5 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v5 + 6), *((void *)v5 + 7));
      }
      else
      {
        long long v9 = v5[3];
        __p.__r_.__value_.__r.__words[2] = *((void *)v5 + 8);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      uint64_t v10 = *((void *)v5 + 9);
      int v18 = *((_DWORD *)v5 + 20);
      uint64_t v17 = v10;
      if (v18 == 1)
      {
        std::deque<dmlc::io::URI>::push_back(v22, (long long *)&v14);
      }
      else
      {
        unint64_t v11 = a3[1];
        if (v11 >= a3[2])
        {
          uint64_t v12 = std::vector<dmlc::io::FileInfo>::__push_back_slow_path<dmlc::io::FileInfo const&>(a3, (long long *)&v14);
        }
        else
        {
          std::allocator<dmlc::io::FileInfo>::construct[abi:ne180100]<dmlc::io::FileInfo,dmlc::io::FileInfo const&>(a3 + 16, (std::string *)a3[1], (long long *)&v14);
          uint64_t v12 = v11 + 88;
          a3[1] = v11 + 88;
        }
        a3[1] = v12;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      uint64_t v5 = (long long *)((char *)v5 + 88);
    }
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
    std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  }
  return std::deque<dmlc::io::URI>::~deque[abi:ne180100]((uint64_t)v22);
}

void sub_22EA02F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
}

void dmlc::TemporaryDirectory::RecursiveDelete(uint64_t a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (a2[23] < 0) {
    a2 = *(char **)a2;
  }
  dmlc::io::URI::URI((dmlc::io::URI *)v43, a2);
  Instance = dmlc::io::FileSystem::GetInstance((dmlc::io::FileSystem *)v43, v4);
  unint64_t v40 = 0;
  unint64_t v41 = 0;
  uint64_t v42 = 0;
  (*(void (**)(uint64_t *, void **, long long **))(*Instance + 24))(Instance, v43, &v40);
  uint64_t v6 = v40;
  for (i = v41; v6 != i; uint64_t v6 = (long long *)((char *)v6 + 88))
  {
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v6, *((void *)v6 + 1));
    }
    else
    {
      long long v8 = *v6;
      v35.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v8;
    }
    if (*((char *)v6 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v36, *((const std::string::value_type **)v6 + 3), *((void *)v6 + 4));
    }
    else
    {
      long long v9 = *(long long *)((char *)v6 + 24);
      v36.__r_.__value_.__r.__words[2] = *((void *)v6 + 5);
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v9;
    }
    if (*((char *)v6 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 6), *((void *)v6 + 7));
    }
    else
    {
      long long v10 = v6[3];
      __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 8);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t v11 = *((void *)v6 + 9);
    int v39 = *((_DWORD *)v6 + 20);
    uint64_t v38 = v11;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v13 = lstat((const char *)p_p, &v51);
    int v49 = 0;
    int v50 = v13;
    if (v13) {
      dmlc::LogCheckFormat<int,int>();
    }
    if ((v51.st_mode & 0xF000) == 0xA000)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/filesys.cc");
      char v16 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: !IsSymlink(info.path.name)", 40);
      int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Symlink not supported in TemporaryDirectory", 43);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v51);
    }
    if (v39 == 1)
    {
      dmlc::TemporaryDirectory::RecursiveDelete(a1, &__p);
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v19 = (const std::__fs::filesystem::path *)&__p;
      }
      else {
        unint64_t v19 = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
      }
      if (remove(v19, v14))
      {
        dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v51, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/filesys.cc");
        size_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)&v51.st_dev, (uint64_t)"Couldn't remove file ", 21);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v21 = &__p;
        }
        else {
          uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        int64x2_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; you may want to remove it manually",
          36);
        dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v51);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  if (v2[23] >= 0) {
    unint64_t v24 = v2;
  }
  else {
    unint64_t v24 = *(const char **)v2;
  }
  if (rmdir(v24))
  {
    dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v51, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/filesys.cc");
    unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)&v51.st_dev, (uint64_t)"~TemporaryDirectory(): ", 23);
    size_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Could not remove temporary directory ", 37);
    int v27 = v2[23];
    if (v27 >= 0) {
      uint64_t v28 = (uint64_t)v2;
    }
    else {
      uint64_t v28 = *(void *)v2;
    }
    if (v27 >= 0) {
      uint64_t v29 = v2[23];
    }
    else {
      uint64_t v29 = *((void *)v2 + 1);
    }
    unint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"; you may want to remove it manually",
      36);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 24)) {
      goto LABEL_60;
    }
    dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v51, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/filesys.cc");
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)&v51.st_dev, (uint64_t)"Successfully deleted temporary directory ", 41);
    int v32 = v2[23];
    if (v32 >= 0) {
      uint64_t v33 = (uint64_t)v2;
    }
    else {
      uint64_t v33 = *(void *)v2;
    }
    if (v32 >= 0) {
      uint64_t v34 = v2[23];
    }
    else {
      uint64_t v34 = *((void *)v2 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
  }
  dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v51);
LABEL_60:
  *(void *)&v51.st_dev = &v40;
  std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  if (v48 < 0) {
    operator delete(v47);
  }
  if (v46 < 0) {
    operator delete(v45);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
}

void sub_22EA03494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,char a41,__int16 a42,char a43,char a44)
{
  a9 = &a27;
  std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  dmlc::io::FileInfo::~FileInfo(&a30);
  _Unwind_Resume(a1);
}

uint64_t std::deque<dmlc::io::URI>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 40);
  char v3 = *(void ***)(a1 + 8);
  uint64_t v4 = *(void ***)(a1 + 16);
  if (v4 == v3)
  {
    uint64_t v4 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v3[v5 / 0x38];
    uint64_t v7 = (uint64_t)*v6 + 72 * (v5 % 0x38);
    unint64_t v8 = (unint64_t)v3[(*(void *)(a1 + 40) + v5) / 0x38] + 72 * ((*(void *)(a1 + 40) + v5) % 0x38);
    if (v7 != v8)
    {
      do
      {
        std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 72;
        if (v7 - (void)*v6 == 4032)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      char v3 = *(void ***)(a1 + 8);
      uint64_t v4 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v4 = *(void ***)(a1 + 16);
      char v3 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 28;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 56;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v3 != v4)
  {
    do
    {
      int v13 = *v3++;
      operator delete(v13);
    }
    while (v3 != v4);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::deque<dmlc::io::URI>::push_back(void *a1, long long *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1 + 5;
  unint64_t v5 = (char *)a1[1];
  uint64_t v6 = (char *)a1[2];
  unint64_t v7 = (v6 - v5) >> 3;
  if (v6 == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 56 * v7 - 1;
  }
  unint64_t v9 = a1[4];
  if (v8 != a1[5] + v9) {
    goto LABEL_38;
  }
  BOOL v10 = v9 >= 0x38;
  unint64_t v11 = v9 - 56;
  if (v10)
  {
    a1[4] = v11;
    uint64_t v14 = *(void *)v5;
    uint64_t v12 = v5 + 8;
    uint64_t v13 = v14;
    a1[1] = v12;
    if (v6 == (char *)a1[3])
    {
      uint64_t v15 = (uint64_t)&v12[-*a1];
      if ((unint64_t)v12 <= *a1)
      {
        if (v6 == (char *)*a1) {
          unint64_t v41 = 1;
        }
        else {
          unint64_t v41 = (uint64_t)&v6[-*a1] >> 2;
        }
        uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
        char v44 = &v42[8 * (v41 >> 2)];
        uint64_t v45 = (uint64_t *)a1[1];
        uint64_t v6 = v44;
        uint64_t v46 = a1[2] - (void)v45;
        if (v46)
        {
          uint64_t v6 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v47 = 8 * (v46 >> 3);
          char v48 = &v42[8 * (v41 >> 2)];
          do
          {
            uint64_t v49 = *v45++;
            *(void *)char v48 = v49;
            v48 += 8;
            v47 -= 8;
          }
          while (v47);
        }
        int v50 = (char *)*a1;
        *a1 = v42;
        a1[1] = v44;
        a1[2] = v6;
        a1[3] = &v42[8 * v43];
        if (v50)
        {
          operator delete(v50);
          uint64_t v6 = (char *)a1[2];
        }
      }
      else
      {
        uint64_t v16 = v15 >> 3;
        BOOL v17 = v15 >> 3 < -1;
        uint64_t v18 = (v15 >> 3) + 2;
        if (v17) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = v16 + 1;
        }
        uint64_t v20 = -(v19 >> 1);
        uint64_t v21 = v19 >> 1;
        unint64_t v22 = &v12[-8 * v21];
        int64_t v23 = v6 - v12;
        if (v6 != v12)
        {
          memmove(&v12[-8 * v21], v12, v6 - v12);
          uint64_t v6 = (char *)a1[1];
        }
        unint64_t v24 = &v6[8 * v20];
        uint64_t v6 = &v22[v23];
        a1[1] = v24;
        a1[2] = &v22[v23];
      }
    }
    *(void *)uint64_t v6 = v13;
  }
  else
  {
    unint64_t v25 = (char *)a1[3];
    size_t v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v7 >= v27 >> 3)
    {
      uint64_t v30 = v27 >> 2;
      if (v25 == v26) {
        unint64_t v31 = 1;
      }
      else {
        unint64_t v31 = v30;
      }
      int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
      uint64_t v34 = v33;
      std::string v35 = operator new(0xFC0uLL);
      std::string v36 = &v32[8 * v7];
      unint64_t v37 = &v32[8 * v34];
      if (v7 == v34)
      {
        uint64_t v38 = 8 * v7;
        if (v6 - v5 < 1)
        {
          unint64_t v75 = v35;
          uint64_t v76 = v38 >> 2;
          if (v6 == v5) {
            unint64_t v77 = 1;
          }
          else {
            unint64_t v77 = v76;
          }
          uint64_t v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v77);
          std::string v36 = &v78[8 * (v77 >> 2)];
          unint64_t v37 = &v78[8 * v79];
          if (v32) {
            operator delete(v32);
          }
          int v32 = v78;
          std::string v35 = v75;
        }
        else
        {
          uint64_t v39 = v38 >> 3;
          if (v39 >= -1) {
            unint64_t v40 = v39 + 1;
          }
          else {
            unint64_t v40 = v39 + 2;
          }
          v36 -= 8 * (v40 >> 1);
        }
      }
      *(void *)std::string v36 = v35;
      uint64_t v6 = v36 + 8;
      for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
      {
        if (v36 == v32)
        {
          if (v6 >= v37)
          {
            if (v37 == v32) {
              unint64_t v85 = 1;
            }
            else {
              unint64_t v85 = (v37 - v32) >> 2;
            }
            std::string::size_type v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v85);
            v88 = v86;
            std::string v36 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = v6 - v32;
            BOOL v89 = v6 == v32;
            uint64_t v6 = v36;
            if (!v89)
            {
              uint64_t v6 = &v36[v90 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v91 = 8 * (v90 >> 3);
              size_t v92 = v36;
              std::vector<std::string>::pointer v93 = v32;
              do
              {
                uint64_t v94 = *(void *)v93;
                v93 += 8;
                *(void *)size_t v92 = v94;
                v92 += 8;
                v91 -= 8;
              }
              while (v91);
            }
            unint64_t v37 = &v86[8 * v87];
            if (v32) {
              operator delete(v32);
            }
            int v32 = v88;
          }
          else
          {
            uint64_t v81 = (v37 - v6) >> 3;
            if (v81 >= -1) {
              uint64_t v82 = v81 + 1;
            }
            else {
              uint64_t v82 = v81 + 2;
            }
            uint64_t v83 = v82 >> 1;
            std::string v36 = &v32[8 * (v82 >> 1)];
            size_t v84 = v32;
            if (v6 != v32)
            {
              memmove(v36, v32, v6 - v32);
              size_t v84 = v6;
            }
            uint64_t v6 = &v84[8 * v83];
          }
        }
        uint64_t v95 = *(void *)(i - 8);
        *((void *)v36 - 1) = v95;
        v36 -= 8;
      }
      unint64_t v96 = (char *)*a1;
      *a1 = v32;
      a1[1] = v36;
      a1[2] = v6;
      a1[3] = v37;
      uint64_t v2 = a2;
      if (v96)
      {
        operator delete(v96);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_37;
    }
    uint64_t v28 = operator new(0xFC0uLL);
    uint64_t v29 = v28;
    if (v25 == v6)
    {
      if (v5 == v26)
      {
        if (v6 == v5) {
          unint64_t v53 = 1;
        }
        else {
          unint64_t v53 = (v25 - v5) >> 2;
        }
        uint64_t v54 = 2 * v53;
        int64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v53);
        unint64_t v5 = &v55[(v54 + 6) & 0xFFFFFFFFFFFFFFF8];
        std::string::size_type v57 = (uint64_t *)a1[1];
        char v58 = v5;
        uint64_t v59 = a1[2] - (void)v57;
        if (v59)
        {
          char v58 = &v5[v59 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v60 = 8 * (v59 >> 3);
          char v61 = &v55[(v54 + 6) & 0xFFFFFFFFFFFFFFF8];
          do
          {
            uint64_t v62 = *v57++;
            *(void *)char v61 = v62;
            v61 += 8;
            v60 -= 8;
          }
          while (v60);
        }
        std::vector<char>::pointer v63 = (char *)*a1;
        *a1 = v55;
        a1[1] = v5;
        a1[2] = v58;
        a1[3] = &v55[8 * v56];
        if (v63)
        {
          operator delete(v63);
          unint64_t v5 = (char *)a1[1];
        }
      }
      *((void *)v5 - 1) = v29;
      unint64_t v64 = (char *)a1[1];
      uint64_t v65 = (char *)a1[2];
      a1[1] = v64 - 8;
      uint64_t v66 = *((void *)v64 - 1);
      a1[1] = v64;
      if (v65 == (char *)a1[3])
      {
        uint64_t v67 = (uint64_t)&v64[-*a1];
        if ((unint64_t)v64 <= *a1)
        {
          if (v65 == (char *)*a1) {
            unint64_t v97 = 1;
          }
          else {
            unint64_t v97 = (uint64_t)&v65[-*a1] >> 2;
          }
          v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v97);
          std::string::size_type v100 = &v98[8 * (v97 >> 2)];
          uint64_t v101 = (uint64_t *)a1[1];
          uint64_t v65 = v100;
          uint64_t v102 = a1[2] - (void)v101;
          if (v102)
          {
            uint64_t v65 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v103 = 8 * (v102 >> 3);
            std::string::size_type v104 = &v98[8 * (v97 >> 2)];
            do
            {
              uint64_t v105 = *v101++;
              *(void *)std::string::size_type v104 = v105;
              v104 += 8;
              v103 -= 8;
            }
            while (v103);
          }
          unsigned int v106 = (char *)*a1;
          *a1 = v98;
          a1[1] = v100;
          a1[2] = v65;
          a1[3] = &v98[8 * v99];
          if (v106)
          {
            operator delete(v106);
            uint64_t v65 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v68 = v67 >> 3;
          BOOL v17 = v67 >> 3 < -1;
          uint64_t v69 = (v67 >> 3) + 2;
          if (v17) {
            uint64_t v70 = v69;
          }
          else {
            uint64_t v70 = v68 + 1;
          }
          uint64_t v71 = -(v70 >> 1);
          uint64_t v72 = v70 >> 1;
          int v73 = &v64[-8 * v72];
          int64_t v74 = v65 - v64;
          if (v65 != v64)
          {
            memmove(&v64[-8 * v72], v64, v65 - v64);
            unint64_t v64 = (char *)a1[1];
          }
          uint64_t v65 = &v73[v74];
          a1[1] = &v64[8 * v71];
          a1[2] = &v73[v74];
        }
      }
      *(void *)uint64_t v65 = v66;
    }
    else
    {
      *(void *)uint64_t v6 = v28;
    }
  }
  uint64_t v6 = (char *)(a1[2] + 8);
  a1[2] = v6;
LABEL_37:
  unint64_t v5 = (char *)a1[1];
LABEL_38:
  if (v6 == v5)
  {
    uint64_t v52 = 0;
  }
  else
  {
    unint64_t v51 = a1[5] + a1[4];
    uint64_t v52 = (std::string *)(*(void *)&v5[8 * (v51 / 0x38)] + 72 * (v51 % 0x38));
  }
  std::allocator<dmlc::io::URI>::construct[abi:ne180100]<dmlc::io::URI,dmlc::io::URI const&>((int)v4, v52, v2);
  ++*v4;
}

void sub_22EA03C20(_Unwind_Exception *a1)
{
  operator delete(v1);
  if (v2) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t xgboost::gbm::GBTreeModel::Save(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 16) != ((*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3)) {
    dmlc::LogCheckFormat<int,int>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a1 + 16, 160);
  unint64_t v5 = *(uint64_t **)(a1 + 176);
  uint64_t v6 = *(uint64_t **)(a1 + 184);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    uint64_t result = xgboost::RegTree::Save(v7, a2);
  }
  if (*(void *)(a1 + 232) != *(void *)(a1 + 224)) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  return result;
}

void sub_22EA03DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  uint64_t v12 = a9;
  a9 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBTreeModel::Load(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  if ((**a2)(a2, a1 + 16, 160) != 160) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  std::vector<std::unique_ptr<xgboost::RegTree>>::__clear[abi:ne180100]((void *)(a1 + 176));
  std::vector<std::unique_ptr<xgboost::RegTree>>::__clear[abi:ne180100]((void *)(a1 + 200));
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4 >= 1) {
    operator new();
  }
  std::vector<int>::resize((std::vector<int> *)(a1 + 224), v4);
  uint64_t v5 = *(int *)(a1 + 16);
  if (v5)
  {
    if (*(void *)(a1 + 232) == *(void *)(a1 + 224)) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = *(void *)(a1 + 224);
    }
    if ((**a2)(a2, v6, 4 * v5) != 4 * *(int *)(a1 + 16)) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
  }
}

void sub_22EA04148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBTreeModel::SaveModel(xgboost::gbm::GBTreeModel *this, xgboost::Json *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = (*((void *)this + 23) - *((void *)this + 22)) >> 3;
  LODWORD(__p[0]) = *((_DWORD *)this + 4);
  LODWORD(v4) = v3;
  if (LODWORD(__p[0]) != v3) {
    dmlc::LogCheckFormat<int,int>();
  }
  xgboost::ToJson<xgboost::gbm::GBTreeModelParam>((xgboost::gbm::GBTreeModel *)((char *)this + 16), &v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "gbtree_model_param");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22EA04960(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v2);
  std::exception_ptr::~exception_ptr(v4);
  v4[0].__ptr_ = &v3;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
  _Unwind_Resume(a1);
}

void sub_22EA049C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
}

void sub_22EA049D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22EA049DCLL);
}

void sub_22EA04A04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  JUMPOUT(0x22EA04A80);
}

void sub_22EA04A30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&a35, a36);
  JUMPOUT(0x22EA04AA0);
}

void sub_22EA04A74()
{
}

void xgboost::gbm::GBTreeModel::LoadModel(xgboost::gbm::GBTreeModel *this, const xgboost::Json *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "gbtree_model_param");
  uint64_t v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  uint64_t v5 = (xgboost::gbm::GBTreeModelParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v4);
  v34.__m_.__sig = 0;
  *(void *)v34.__m_.__opaque = 0;
  v33.__ptr_ = &v34;
  std::exception_ptr v6 = (const void **)*((void *)v5 + 2);
  uint64_t v7 = (const void ***)((char *)v5 + 24);
  if (v6 != (const void **)((char *)v5 + 24))
  {
    do
    {
      uint64_t v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v6[7]);
      v32.__ptr_ = v6 + 4;
      unint64_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v33, v6 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v32);
      uint64_t v5 = (xgboost::gbm::GBTreeModelParam *)std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      BOOL v10 = (const void **)v6[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = (const void ***)v10;
          BOOL v10 = (const void **)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = (const void ***)v6[2];
          BOOL v12 = *v11 == v6;
          std::exception_ptr v6 = (const void **)v11;
        }
        while (!v12);
      }
      std::exception_ptr v6 = (const void **)v11;
    }
    while (v11 != v7);
  }
  memset(&v29, 0, sizeof(v29));
  uint64_t v13 = xgboost::gbm::GBTreeModelParam::__MANAGER__(v5);
  uint64_t v14 = (int *)((char *)this + 16);
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v13, (uint64_t)this + 16, v33.__ptr_, &v34, 0, &v29, 0);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v33, v34.__m_.__sig);
  v33.__ptr_ = &v29;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::unique_ptr<xgboost::RegTree>>::__clear[abi:ne180100]((void *)this + 22);
  std::vector<std::unique_ptr<xgboost::RegTree>>::__clear[abi:ne180100]((void *)this + 25);
  std::string::basic_string[abi:ne180100]<0>(&v33, "trees");
  uint64_t v15 = (_DWORD **)(*(uint64_t (**)(void, std::exception_ptr *))(**(void **)a2 + 24))(*(void *)a2, &v33);
  uint64_t v16 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v15);
  if (v34.__m_.__opaque[7] < 0) {
    operator delete(v33.__ptr_);
  }
  std::vector<std::unique_ptr<xgboost::RegTree>>::resize((uint64_t *)this + 22, (uint64_t)(v16[3] - v16[2]) >> 3);
  if (!*((void *)this + 31))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree_model.cc");
    uint64_t v27 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: ctx_", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v33);
  }
  uint64_t v18 = v16[2];
  uint64_t v17 = v16[3];
  v33.__ptr_ = 0;
  v34.__m_.__sig = 850045863;
  memset(v34.__m_.__opaque, 0, sizeof(v34.__m_.__opaque));
  if (v17 != v18)
  {
    uint64_t v19 = (void *)v16[2];
    std::string::basic_string[abi:ne180100]<0>(__p, "id");
    uint64_t v20 = (_DWORD **)(*(uint64_t (**)(void, void **))(*(void *)*v19 + 24))(*v19, __p);
    unint64_t v21 = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*v20) + 2);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < (uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 3) {
      operator new();
    }
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
  }
  dmlc::OMPException::Rethrow(&v33);
  std::mutex::~mutex(&v34);
  std::exception_ptr::~exception_ptr(&v33);
  unint64_t v22 = (void *)((char *)this + 224);
  std::vector<int>::resize((std::vector<int> *)((char *)this + 224), *((int *)this + 4));
  std::string::basic_string[abi:ne180100]<0>(&v33, "tree_info");
  int64_t v23 = (_DWORD **)(*(uint64_t (**)(void, std::exception_ptr *))(**(void **)a2 + 24))(*(void *)a2, &v33);
  unint64_t v24 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v23);
  if (v34.__m_.__opaque[7] < 0) {
    operator delete(v33.__ptr_);
  }
  if (*v14 >= 1)
  {
    uint64_t v25 = 0;
    do
    {
      *(_DWORD *)(*v22 + 4 * v25) = *((void *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v24[2] + 8 * v25))
                                    + 2);
      ++v25;
    }
    while (v25 < *v14);
  }
}

void sub_22EA04FF8(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v2);
  std::exception_ptr::~exception_ptr(&v3);
  _Unwind_Resume(a1);
}

void sub_22EA05050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::data::GradientIndexPageSource::Fetch(xgboost::data::GradientIndexPageSource *this)
{
  if (*((unsigned char *)this + 88))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_source.h");
    std::mutex v34 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Check failed: !at_end_", 22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  if (!**((unsigned char **)this + 14))
  {
    int v20 = *((_DWORD *)this + 26);
    if (v20 && !*((unsigned char *)this + 160))
    {
      xgboost::data::SparsePageSource::operator++(*((void *)this + 18));
      int v20 = *((_DWORD *)this + 26);
    }
    LODWORD(v39) = *(_DWORD *)(*((void *)this + 18) + 104);
    if (v20 != v39) {
      dmlc::LogCheckFormat<unsigned int,unsigned int>();
    }
    (*(void (**)(pthread_t *__return_ptr))(**((void **)this + 18) + 40))(&v36);
    operator new();
  }
  uint64_t v2 = *((void *)this + 16);
  if (v2)
  {
    *((void *)this + 16) = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    uint64_t v3 = *((void *)this + 17);
    unint64_t v4 = *((unsigned int *)this + 27);
    std::exception_ptr v6 = *(void **)v3;
    uint64_t v5 = *(void **)(v3 + 8);
    unint64_t v7 = ((uint64_t)v5 - *(void *)v3) >> 3;
    if (v4 <= v7)
    {
      if (v4 < v7) {
        std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__base_destruct_at_end[abi:ne180100](*((atomic_ullong **)this + 17), (atomic_ullong)&v6[v4]);
      }
    }
    else
    {
      unint64_t v8 = v4 - v7;
      uint64_t v9 = *(void *)(v3 + 16);
      if (v4 - v7 <= (v9 - (uint64_t)v5) >> 3)
      {
        bzero(*(void **)(v3 + 8), 8 * v8);
        *(void *)(v3 + 8) = &v5[v8];
      }
      else
      {
        uint64_t v10 = v9 - (void)v6;
        if (v10 >> 2 > v4) {
          unint64_t v4 = v10 >> 2;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v4;
        }
        if (v11 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        BOOL v12 = (char *)operator new(8 * v11);
        uint64_t v13 = &v12[8 * v7];
        uint64_t v14 = &v12[8 * v11];
        bzero(v13, 8 * v8);
        uint64_t v15 = &v13[8 * v8];
        if (v5 == v6)
        {
          *(void *)uint64_t v3 = v13;
          *(void *)(v3 + 8) = v15;
          *(void *)(v3 + 16) = v14;
        }
        else
        {
          do
          {
            uint64_t v16 = *--v5;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
            void *v5 = 0;
          }
          while (v5 != v6);
          uint64_t v5 = *(void **)v3;
          uint64_t v17 = *(void **)(v3 + 8);
          *(void *)uint64_t v3 = v13;
          *(void *)(v3 + 8) = v15;
          *(void *)(v3 + 16) = v14;
          while (v17 != v5)
          {
            uint64_t v19 = (atomic_ullong *)*--v17;
            uint64_t v18 = v19;
            if (v19 && !atomic_fetch_add(v18 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
              (*(void (**)(atomic_ullong *))(*v18 + 16))(v18);
            }
          }
        }
        if (v5) {
          operator delete(v5);
        }
      }
    }
  }
  LODWORD(v21) = *((_DWORD *)this + 27);
  if (v21 >= 4) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = v21;
  }
  uint64_t v38 = (char *)v21;
  LODWORD(v39) = 0;
  if (!v21) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  unint64_t v22 = *((unsigned int *)this + 26);
  unint64_t v37 = v22;
  if (v38)
  {
    for (unint64_t i = 0; i < (unint64_t)v38; ++i)
    {
      unint64_t v24 = v22 % *((unsigned int *)this + 27);
      unint64_t v37 = v24;
      uint64_t v25 = **((void **)this + 17);
      if (v24 >= (*(void *)(*((void *)this + 17) + 8) - v25) >> 3) {
        std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
      }
      if (!*(void *)(v25 + 8 * v24))
      {
        if (v24 >= (uint64_t)(*(void *)(*((void *)this + 14) + 64) - *(void *)(*((void *)this + 14) + 56)) >> 3) {
          dmlc::LogCheckFormat<unsigned long,unsigned long>();
        }
        operator new();
      }
      unint64_t v22 = v24 + 1;
      unint64_t v37 = v22;
    }
  }
  uint64_t v26 = *((void *)this + 17);
  uint64_t v27 = *(void **)v26;
  uint64_t v28 = *(void **)(v26 + 8);
  if (v27 == v28)
  {
    std::vector<std::pair<std::string, std::string>> v29 = 0;
  }
  else
  {
    std::vector<std::pair<std::string, std::string>> v29 = 0;
    do
    {
      if (*v27++) {
        ++v29;
      }
    }
    while (v27 != v28);
  }
  uint64_t v39 = v29;
  if (v29 != v38) {
    dmlc::LogCheckFormat<long,unsigned long>();
  }
  std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>::get((atomic_ullong **)(**((void **)this + 17) + 8 * *((unsigned int *)this + 26)), __p);
  long long v31 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  std::exception_ptr v32 = (std::__shared_weak_count *)*((void *)this + 10);
  *(_OWORD *)((char *)this + 72) = v31;
  if (v32)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
}

void sub_22EA05FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22EA05FACLL);
}

void sub_22EA05FC8()
{
}

void xgboost::data::GradientIndexPageSource::~GradientIndexPageSource(xgboost::data::GradientIndexPageSource *this)
{
  *(void *)this = &unk_26E24E6C0;
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

{
  *(void *)this = &unk_26E24E6C0;
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

void std::__async_assoc_state<std::shared_ptr<xgboost::GHistIndexMatrix>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::ReadCache(void)::{lambda(void)#1}>>::~__async_assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__async_assoc_state<std::shared_ptr<xgboost::GHistIndexMatrix>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::ReadCache(void)::{lambda(void)#1}>>::__on_zero_shared(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);

  return std::__assoc_state<std::shared_ptr<xgboost::CSCPage>>::__on_zero_shared((uint64_t)a1);
}

void std::__async_assoc_state<std::shared_ptr<xgboost::GHistIndexMatrix>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::ReadCache(void)::{lambda(void)#1}>>::__execute(uint64_t a1)
{
  xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::ReadCache(void)::{lambda(void)#1}::operator()((uint64_t)v1, (void *)(a1 + 160));
}

void sub_22EA0627C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v14.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v12, v14);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x22EA0626CLL);
}

void sub_22EA062C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void std::__assoc_state<std::shared_ptr<xgboost::GHistIndexMatrix>>::set_value<std::shared_ptr<xgboost::GHistIndexMatrix>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, uint64_t v5 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_22EA06370(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::ReadCache(void)::{lambda(void)#1}::operator()(uint64_t a1, void *a2)
{
  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  std::string::basic_string[abi:ne180100]<0>(__p, "raw");
  xgboost::data::CreatePageFormat<xgboost::GHistIndexMatrix>((uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  xgboost::data::Cache::ShardName(*(xgboost::data::Cache **)(a2[1] + 112), (uint64_t)v12);
  unint64_t v11 = 0;
  uint64_t v3 = *(void *)(a2[1] + 112);
  uint64_t v4 = *(void *)(v3 + 56);
  if (*a2 < (unint64_t)((*(void *)(v3 + 64) - v4) >> 3))
  {
    unint64_t v11 = *(void **)(v4 + 8 * *a2);
    if (v13 >= 0) {
      uint64_t v5 = (dmlc::SeekStream *)v12;
    }
    else {
      uint64_t v5 = (dmlc::SeekStream *)v12[0];
    }
    uint64_t v6 = dmlc::SeekStream::CreateForRead(v5, 0);
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 32))(v6, v11);
    unint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    if (v8 != v11) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    unint64_t v7 = operator new(0xE0uLL);
    v7[1] = 0;
    v7[2] = 0;
    *unint64_t v7 = &unk_26E24E788;
    xgboost::GHistIndexMatrix::GHistIndexMatrix((xgboost::GHistIndexMatrix *)(v7 + 3));
  }
  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
}

void sub_22EA066F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a16);
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
  if (*(char *)(v24 - 49) < 0) {
    operator delete(*(void **)(v24 - 72));
  }
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  _Unwind_Resume(a1);
}

void sub_22EA06804(uint64_t a1, ...)
{
  va_start(va, a1);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22EA06810);
}

uint64_t xgboost::data::CreatePageFormat<xgboost::GHistIndexMatrix>(uint64_t a1)
{
  dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix>>::Get();
  uint64_t v2 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix>>::Get();
  uint64_t v3 = (const void **)v2 + 7;
  uint64_t v4 = (char *)*((void *)v2 + 7);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = (uint64_t)(v2 + 4);
  uint64_t v6 = (const void **)v2 + 7;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)v4 + 4, (const void **)a1);
    unint64_t v8 = (char **)(v4 + 8);
    if (!v7)
    {
      unint64_t v8 = (char **)v4;
      uint64_t v6 = (const void **)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v6 == v3
    || std::less<std::string>::operator()[abi:ne180100](v5, (const void **)a1, v6 + 4)
    || (uint64_t v9 = v6[7]) == 0)
  {
LABEL_13:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_writer.h");
    std::exception_ptr v14 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Unknown format type ", 20);
    int v16 = *(char *)(a1 + 23);
    if (v16 >= 0) {
      uint64_t v17 = (const void *)a1;
    }
    else {
      uint64_t v17 = *(const void **)a1;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v18 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v19);
    return 0;
  }
  else
  {
    uint64_t v10 = v9[12];
    if (!v10) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    unint64_t v11 = *(uint64_t (**)(void))(*(void *)v10 + 48);
    return v11();
  }
}

void sub_22EA06978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__shared_ptr_emplace<xgboost::GHistIndexMatrix>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24E788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::GHistIndexMatrix>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E24E788;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

void std::__shared_ptr_emplace<xgboost::GHistIndexMatrix>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::GHistIndexMatrix>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::GHistIndexMatrix>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::ReadCache(void)::{lambda(void)#1}>>*>>(uint64_t *a1)
{
  unint64_t v8 = a1;
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[2];
  uint64_t v5 = (void (*)(void *))a1[1];
  uint64_t v6 = (void *)(a1[3] + (v4 >> 1));
  if (v4) {
    uint64_t v5 = *(void (**)(void *))(*v6 + v5);
  }
  v5(v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100](&v8);
  return 0;
}

void sub_22EA06AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::metric::__dmlc_registry_file_tag_survival_metric__(xgboost::metric *this)
{
  return 0;
}

void xgboost::metric::AFTNLogLikDispatcher::~AFTNLogLikDispatcher(xgboost::metric::AFTNLogLikDispatcher *this)
{
  *(void *)this = &unk_26E24E848;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E24E848;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::metric::AFTNLogLikDispatcher::LoadConfig(xgboost::metric::AFTNLogLikDispatcher *this, const xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "aft_loss_param");
  uint64_t v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::FromJson<xgboost::common::AFTParam>(v4, (xgboost::metric::AFTNLogLikDispatcher *)((char *)this + 16), &v7);
  unint64_t v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22EA06D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::metric::AFTNLogLikDispatcher::SaveConfig(xgboost::metric::AFTNLogLikDispatcher *this, xgboost::Json *a2)
{
  uint64_t v3 = (char *)(*(uint64_t (**)(xgboost::metric::AFTNLogLikDispatcher *))(*(void *)this + 48))(this);
  std::string::basic_string[abi:ne180100]<0>(v5, v3);
  std::vector<std::pair<std::string, std::string>> v7 = &unk_26E24E210;
  uint64_t v8 = 0;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v5;
  uint64_t v10 = v6;
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v6 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22EA06F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29)
{
}

uint64_t xgboost::metric::AFTNLogLikDispatcher::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::common::AFTParam *)(a1 + 16), a2, v8);
  uint64_t v9 = (void **)v8;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v9);
  int v4 = *(_DWORD *)(a1 + 20);
  switch(v4)
  {
    case 2:
      operator new();
    case 1:
      operator new();
    case 0:
      operator new();
  }
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/survival_metric.cu");
  uint64_t v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unknown probability distribution", 32);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v9);
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32), a2);
}

void sub_22EA07160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::metric::AFTNLogLikDispatcher::Eval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/survival_metric.cu");
    unint64_t v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    BOOL v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: metric_", 21);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"AFT metric must be configured first, with distribution type and scale", 69);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
    uint64_t v8 = *(void *)(a1 + 32);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 40))(v8, a2, a3, a4);
}

void sub_22EA0724C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

const char *xgboost::metric::AFTNLogLikDispatcher::Name(xgboost::metric::AFTNLogLikDispatcher *this)
{
  return "aft-nloglik";
}

void xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalAFTNLogLik<xgboost::common::NormalDistribution>>::~EvalEWiseSurvivalBase()
{
}

void xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalAFTNLogLik<xgboost::common::NormalDistribution>>::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::common::AFTParam *)(a1 + 16), a2, v8);
  uint64_t v9 = (void **)v8;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v9);
  int v3 = *(_DWORD *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 28) = *(void *)(a1 + 16);
  *(_DWORD *)(a1 + 36) = v3;
  if (!v4)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/survival_metric.cu");
    uint64_t v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    std::vector<std::pair<std::string, std::string>> v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: tparam_", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v8);
  }
}

void sub_22EA0732C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalAFTNLogLik<xgboost::common::NormalDistribution>>::Eval(float *a1, float ***a2, void *a3, int a4)
{
  std::vector<std::pair<std::string, std::string>> v7 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  std::string __p = (void *)((*a2)[1] - **a2);
  uint64_t v48 = (uint64_t)(*(void *)(a3[13] + 8) - *(void *)a3[13]) >> 2;
  if (__p != (void *)v48) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  std::string __p = (void *)((*a2)[1] - **a2);
  uint64_t v48 = (uint64_t)(*(void *)(a3[14] + 8) - *(void *)a3[14]) >> 2;
  if (__p != (void *)v48) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v8 = *((void *)a1 + 1);
  if (!v8)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v53);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/survival_metric.cu");
    uint64_t v45 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v53);
    uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Check failed: tparam_", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v53);
    uint64_t v8 = *((void *)v7 + 1);
  }
  double v9 = 0.0;
  double v10 = 0.0;
  if ((*(_DWORD *)(v8 + 24) & 0x80000000) != 0)
  {
    unint64_t v11 = (void *)a3[14];
    uint64_t v52 = (uint64_t)(*(void *)(a3[13] + 8) - *(void *)a3[13]) >> 2;
    std::string __p = (void *)((uint64_t)(v11[1] - *v11) >> 2);
    if ((void *)v52 != __p) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    char v13 = (float **)a3[13];
    BOOL v12 = (float **)a3[14];
    char v14 = (float **)a3[9];
    uint64_t v15 = *a2;
    v53.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v53);
    int v47 = a4;
    v53.__ptr_ = 0;
    std::vector<double>::vector(&v48, 1uLL, &v53);
    uint64_t v16 = v52;
    v53.__ptr_ = 0;
    v54.__m_.__sig = 850045863;
    memset(v54.__m_.__opaque, 0, sizeof(v54.__m_.__opaque));
    if (v52)
    {
      uint64_t v17 = *v14;
      uint64_t v18 = v14[1];
      char v19 = *v13;
      int v20 = *v12;
      uint64_t v21 = *v15;
      double v22 = v7[9];
      int64_t v23 = (long double *)__p;
      uint64_t v24 = v17;
      uint64_t v25 = (double *)v48;
      do
      {
        double v26 = 1.0;
        if (v17 != v18) {
          double v26 = *v24;
        }
        float v27 = *v19;
        long double v28 = *v19;
        float v29 = *v20;
        long double v30 = *v20;
        double v31 = *v21;
        double v32 = log(v28);
        double v33 = log(v30);
        if (v27 == v29)
        {
          double v34 = exp((v32 - v31) / v22 * ((v32 - v31) / v22) * -0.5) / 2.50662827 / (v22 * v28);
        }
        else
        {
          double v35 = 1.0;
          if (fabs(v30) != INFINITY) {
            double v35 = (erf((v33 - v31) / v22 / 1.41421356) + 1.0) * 0.5;
          }
          double v36 = 0.0;
          if (v27 > 0.0) {
            double v36 = (erf((v32 - v31) / v22 / 1.41421356) + 1.0) * 0.5;
          }
          double v34 = v35 - v36;
        }
        *int64_t v23 = *v23 - log(fmax(v34, 1.0e-12)) * v26;
        ++v21;
        *uint64_t v25 = v26 + *v25;
        ++v20;
        ++v19;
        ++v24;
        --v16;
      }
      while (v16);
    }
    dmlc::OMPException::Rethrow(&v53);
    std::mutex::~mutex(&v54);
    std::exception_ptr::~exception_ptr(&v53);
    a1 = (float *)__p;
    double v10 = 0.0;
    double v9 = 0.0;
    a4 = v47;
    if (__p != v51)
    {
      unint64_t v37 = (double *)__p;
      do
      {
        double v38 = *v37++;
        double v9 = v9 + v38;
      }
      while (v37 != (double *)v51);
    }
    if ((double *)v48 != v49)
    {
      double v10 = 0.0;
      uint64_t v39 = (double *)v48;
      do
      {
        double v40 = *v39++;
        double v10 = v10 + v40;
      }
      while (v39 != v49);
    }
    if (v48)
    {
      uint64_t v49 = (double *)v48;
      operator delete((void *)v48);
      a1 = (float *)__p;
    }
    if (a1)
    {
      unint64_t v51 = a1;
      operator delete(a1);
    }
  }
  v53.__ptr_ = *(void **)&v9;
  *(double *)&v54.__m_.__sig = v10;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)a1);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v53, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v9 = *(double *)&v53.__ptr_;
    double v10 = *(double *)&v54.__m_.__sig;
  }
  double v42 = 1.0;
  if (v10 != 0.0) {
    double v42 = v10;
  }
  return v9 / v42;
}

void sub_22EA07988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
}

const char *xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalAFTNLogLik<xgboost::common::NormalDistribution>>::Name()
{
  return "aft-nloglik";
}

void xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalAFTNLogLik<xgboost::common::LogisticDistribution>>::~EvalEWiseSurvivalBase()
{
}

void xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalAFTNLogLik<xgboost::common::LogisticDistribution>>::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::common::AFTParam *)(a1 + 16), a2, v8);
  double v9 = (void **)v8;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v9);
  int v3 = *(_DWORD *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 28) = *(void *)(a1 + 16);
  *(_DWORD *)(a1 + 36) = v3;
  if (!v4)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/survival_metric.cu");
    uint64_t v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    std::vector<std::pair<std::string, std::string>> v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: tparam_", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v8);
  }
}

void sub_22EA07B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalAFTNLogLik<xgboost::common::LogisticDistribution>>::Eval(float *a1, float ***a2, void *a3, int a4)
{
  std::vector<std::pair<std::string, std::string>> v7 = a1;
  uint64_t v60 = *MEMORY[0x263EF8340];
  std::string __p = (void *)((*a2)[1] - **a2);
  uint64_t v53 = (uint64_t)(*(void *)(a3[13] + 8) - *(void *)a3[13]) >> 2;
  if (__p != (void *)v53) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  std::string __p = (void *)((*a2)[1] - **a2);
  uint64_t v53 = (uint64_t)(*(void *)(a3[14] + 8) - *(void *)a3[14]) >> 2;
  if (__p != (void *)v53) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v8 = *((void *)a1 + 1);
  if (!v8)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v58);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/survival_metric.cu");
    int v50 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v58);
    unint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Check failed: tparam_", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v58);
    uint64_t v8 = *((void *)v7 + 1);
  }
  double v9 = 0.0;
  double v10 = 0.0;
  if ((*(_DWORD *)(v8 + 24) & 0x80000000) != 0)
  {
    unint64_t v11 = (void *)a3[14];
    uint64_t v57 = (uint64_t)(*(void *)(a3[13] + 8) - *(void *)a3[13]) >> 2;
    std::string __p = (void *)((uint64_t)(v11[1] - *v11) >> 2);
    if ((void *)v57 != __p) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    char v13 = (float **)a3[13];
    BOOL v12 = (float **)a3[14];
    char v14 = (float **)a3[9];
    uint64_t v15 = *a2;
    v58.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v58);
    int v52 = a4;
    v58.__ptr_ = 0;
    std::vector<double>::vector(&v53, 1uLL, &v58);
    uint64_t v16 = v57;
    v58.__ptr_ = 0;
    v59.__m_.__sig = 850045863;
    memset(v59.__m_.__opaque, 0, sizeof(v59.__m_.__opaque));
    if (v57)
    {
      uint64_t v17 = *v14;
      uint64_t v18 = v14[1];
      char v19 = *v13;
      int v20 = *v12;
      uint64_t v21 = *v15;
      double v22 = v7[9];
      int64_t v23 = (long double *)__p;
      uint64_t v24 = (double *)v53;
      uint64_t v25 = v17;
      do
      {
        double v26 = 1.0;
        if (v17 != v18) {
          double v26 = *v25;
        }
        float v27 = *v19;
        long double v28 = *v19;
        float v29 = *v20;
        long double v30 = *v20;
        double v31 = *v21;
        double v32 = log(v28);
        double v33 = log(v30);
        if (v27 == v29)
        {
          double v34 = exp((v32 - v31) / v22);
          double v35 = 0.0;
          if (v34 != INFINITY && v34 * v34 != INFINITY) {
            double v35 = v34 / ((v34 + 1.0) * (v34 + 1.0));
          }
          double v37 = v35 / (v22 * v28);
        }
        else
        {
          double v38 = 1.0;
          if (fabs(v30) != INFINITY)
          {
            double v39 = exp((v33 - v31) / v22);
            if (v39 != INFINITY) {
              double v38 = v39 / (v39 + 1.0);
            }
          }
          double v40 = 0.0;
          if (v27 > 0.0)
          {
            double v41 = exp((v32 - v31) / v22);
            double v40 = 1.0;
            if (v41 != INFINITY) {
              double v40 = v41 / (v41 + 1.0);
            }
          }
          double v37 = v38 - v40;
        }
        *int64_t v23 = *v23 - log(fmax(v37, 1.0e-12)) * v26;
        ++v21;
        *uint64_t v24 = v26 + *v24;
        ++v20;
        ++v19;
        ++v25;
        --v16;
      }
      while (v16);
    }
    dmlc::OMPException::Rethrow(&v58);
    std::mutex::~mutex(&v59);
    std::exception_ptr::~exception_ptr(&v58);
    a1 = (float *)__p;
    double v10 = 0.0;
    double v9 = 0.0;
    if (__p != v56)
    {
      double v42 = (double *)__p;
      do
      {
        double v43 = *v42++;
        double v9 = v9 + v43;
      }
      while (v42 != (double *)v56);
    }
    a4 = v52;
    if ((double *)v53 != v54)
    {
      double v10 = 0.0;
      char v44 = (double *)v53;
      do
      {
        double v45 = *v44++;
        double v10 = v10 + v45;
      }
      while (v44 != v54);
    }
    if (v53)
    {
      std::mutex v54 = (double *)v53;
      operator delete((void *)v53);
      a1 = (float *)__p;
    }
    if (a1)
    {
      uint64_t v56 = a1;
      operator delete(a1);
    }
  }
  v58.__ptr_ = *(void **)&v9;
  *(double *)&v59.__m_.__sig = v10;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)a1);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v58, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v9 = *(double *)&v58.__ptr_;
    double v10 = *(double *)&v59.__m_.__sig;
  }
  double v47 = 1.0;
  if (v10 != 0.0) {
    double v47 = v10;
  }
  return v9 / v47;
}

void sub_22EA0816C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
}

const char *xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalAFTNLogLik<xgboost::common::LogisticDistribution>>::Name()
{
  return "aft-nloglik";
}

void xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalAFTNLogLik<xgboost::common::ExtremeDistribution>>::~EvalEWiseSurvivalBase()
{
}

void xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalAFTNLogLik<xgboost::common::ExtremeDistribution>>::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::common::AFTParam *)(a1 + 16), a2, v8);
  double v9 = (void **)v8;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v9);
  int v3 = *(_DWORD *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 28) = *(void *)(a1 + 16);
  *(_DWORD *)(a1 + 36) = v3;
  if (!v4)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/survival_metric.cu");
    uint64_t v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    std::vector<std::pair<std::string, std::string>> v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: tparam_", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v8);
  }
}

void sub_22EA082F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalAFTNLogLik<xgboost::common::ExtremeDistribution>>::Eval(float *a1, float ***a2, void *a3, int a4)
{
  std::vector<std::pair<std::string, std::string>> v7 = a1;
  uint64_t v59 = *MEMORY[0x263EF8340];
  std::string __p = (void *)((*a2)[1] - **a2);
  uint64_t v52 = (uint64_t)(*(void *)(a3[13] + 8) - *(void *)a3[13]) >> 2;
  if (__p != (void *)v52) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  std::string __p = (void *)((*a2)[1] - **a2);
  uint64_t v52 = (uint64_t)(*(void *)(a3[14] + 8) - *(void *)a3[14]) >> 2;
  if (__p != (void *)v52) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v8 = *((void *)a1 + 1);
  if (!v8)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v57);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/survival_metric.cu");
    uint64_t v49 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v57);
    int v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Check failed: tparam_", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v57);
    uint64_t v8 = *((void *)v7 + 1);
  }
  double v9 = 0.0;
  double v10 = 0.0;
  if ((*(_DWORD *)(v8 + 24) & 0x80000000) != 0)
  {
    unint64_t v11 = (void *)a3[14];
    uint64_t v56 = (uint64_t)(*(void *)(a3[13] + 8) - *(void *)a3[13]) >> 2;
    std::string __p = (void *)((uint64_t)(v11[1] - *v11) >> 2);
    if ((void *)v56 != __p) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    char v13 = (float **)a3[13];
    BOOL v12 = (float **)a3[14];
    char v14 = (float **)a3[9];
    uint64_t v15 = *a2;
    v57.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v57);
    int v51 = a4;
    v57.__ptr_ = 0;
    std::vector<double>::vector(&v52, 1uLL, &v57);
    uint64_t v16 = v56;
    v57.__ptr_ = 0;
    v58.__m_.__sig = 850045863;
    memset(v58.__m_.__opaque, 0, sizeof(v58.__m_.__opaque));
    if (v56)
    {
      uint64_t v17 = *v14;
      uint64_t v18 = v14[1];
      char v19 = *v13;
      int v20 = *v12;
      uint64_t v21 = *v15;
      double v22 = v7[9];
      int64_t v23 = (long double *)__p;
      uint64_t v24 = (double *)v52;
      uint64_t v25 = v17;
      do
      {
        double v26 = 1.0;
        if (v17 != v18) {
          double v26 = *v25;
        }
        float v27 = *v19;
        long double v28 = *v19;
        float v29 = *v20;
        long double v30 = *v20;
        double v31 = *v21;
        double v32 = log(v28);
        double v33 = log(v30);
        if (v27 == v29)
        {
          double v34 = exp((v32 - v31) / v22);
          double v35 = 0.0;
          if (v34 != INFINITY) {
            double v35 = v34 * exp(-v34);
          }
          double v36 = v35 / (v22 * v28);
        }
        else
        {
          double v37 = 1.0;
          if (fabs(v30) != INFINITY)
          {
            long double v38 = exp((v33 - v31) / v22);
            double v37 = 1.0 - exp(-v38);
          }
          double v39 = 0.0;
          if (v27 > 0.0)
          {
            long double v40 = exp((v32 - v31) / v22);
            double v39 = 1.0 - exp(-v40);
          }
          double v36 = v37 - v39;
        }
        *int64_t v23 = *v23 - log(fmax(v36, 1.0e-12)) * v26;
        ++v21;
        *uint64_t v24 = v26 + *v24;
        ++v20;
        ++v19;
        ++v25;
        --v16;
      }
      while (v16);
    }
    dmlc::OMPException::Rethrow(&v57);
    std::mutex::~mutex(&v58);
    std::exception_ptr::~exception_ptr(&v57);
    a1 = (float *)__p;
    double v10 = 0.0;
    double v9 = 0.0;
    if (__p != v55)
    {
      double v41 = (double *)__p;
      do
      {
        double v42 = *v41++;
        double v9 = v9 + v42;
      }
      while (v41 != (double *)v55);
    }
    a4 = v51;
    if ((double *)v52 != v53)
    {
      double v10 = 0.0;
      double v43 = (double *)v52;
      do
      {
        double v44 = *v43++;
        double v10 = v10 + v44;
      }
      while (v43 != v53);
    }
    if (v52)
    {
      uint64_t v53 = (double *)v52;
      operator delete((void *)v52);
      a1 = (float *)__p;
    }
    if (a1)
    {
      uint64_t v55 = a1;
      operator delete(a1);
    }
  }
  v57.__ptr_ = *(void **)&v9;
  *(double *)&v58.__m_.__sig = v10;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)a1);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v57, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v9 = *(double *)&v57.__ptr_;
    double v10 = *(double *)&v58.__m_.__sig;
  }
  double v46 = 1.0;
  if (v10 != 0.0) {
    double v46 = v10;
  }
  return v9 / v46;
}

void sub_22EA08938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
}

const char *xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalAFTNLogLik<xgboost::common::ExtremeDistribution>>::Name()
{
  return "aft-nloglik";
}

void xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalIntervalRegressionAccuracy>::~EvalEWiseSurvivalBase()
{
}

void xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalIntervalRegressionAccuracy>::Configure(uint64_t a1)
{
  if (!*(void *)(a1 + 8))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/survival_metric.cu");
    uint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
    int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Check failed: tparam_", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
  }
}

void sub_22EA08B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

double xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalIntervalRegressionAccuracy>::Eval(void *a1, float ***a2, void *a3, int a4)
{
  std::vector<std::pair<std::string, std::string>> v7 = a1;
  uint64_t v52 = *MEMORY[0x263EF8340];
  std::string __p = (void *)((*a2)[1] - **a2);
  uint64_t v45 = (uint64_t)(*(void *)(a3[13] + 8) - *(void *)a3[13]) >> 2;
  if (__p != (void *)v45) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  std::string __p = (void *)((*a2)[1] - **a2);
  uint64_t v45 = (uint64_t)(*(void *)(a3[14] + 8) - *(void *)a3[14]) >> 2;
  if (__p != (void *)v45) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v8 = a1[1];
  if (!v8)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/survival_metric.cu");
    double v42 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
    double v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Check failed: tparam_", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v50);
    uint64_t v8 = v7[1];
  }
  double v9 = 0.0;
  double v10 = 0.0;
  if ((*(_DWORD *)(v8 + 24) & 0x80000000) != 0)
  {
    unint64_t v11 = (void *)a3[14];
    uint64_t v49 = (uint64_t)(*(void *)(a3[13] + 8) - *(void *)a3[13]) >> 2;
    std::string __p = (void *)((uint64_t)(v11[1] - *v11) >> 2);
    if ((void *)v49 != __p) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    BOOL v12 = (float **)a3[13];
    char v13 = (float **)a3[14];
    char v14 = (float **)a3[9];
    uint64_t v15 = *a2;
    v50.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v50);
    int v44 = a4;
    v50.__ptr_ = 0;
    std::vector<double>::vector(&v45, 1uLL, &v50);
    uint64_t v16 = v49;
    v50.__ptr_ = 0;
    v51.__m_.__sig = 850045863;
    memset(v51.__m_.__opaque, 0, sizeof(v51.__m_.__opaque));
    if (v49)
    {
      uint64_t v17 = *v14;
      uint64_t v18 = v14[1];
      char v19 = *v12;
      int v20 = *v13;
      uint64_t v21 = *v15;
      double v22 = (double *)__p;
      int64_t v23 = (double *)v45;
      uint64_t v24 = *v14;
      do
      {
        double v25 = 1.0;
        if (v17 != v18) {
          double v25 = *v24;
        }
        float v26 = *v19++;
        double v27 = v26;
        float v28 = *v20++;
        double v29 = v28;
        float v30 = *v21++;
        double v31 = exp(v30);
        if (v31 > v29 || v31 < v27) {
          double v33 = 0.0;
        }
        else {
          double v33 = 1.0;
        }
        *double v22 = *v22 + v33 * v25;
        *int64_t v23 = v25 + *v23;
        ++v24;
        --v16;
      }
      while (v16);
    }
    dmlc::OMPException::Rethrow(&v50);
    std::mutex::~mutex(&v51);
    std::exception_ptr::~exception_ptr(&v50);
    a1 = __p;
    double v10 = 0.0;
    double v9 = 0.0;
    a4 = v44;
    if (__p != v48)
    {
      double v34 = (double *)__p;
      do
      {
        double v35 = *v34++;
        double v9 = v9 + v35;
      }
      while (v34 != v48);
    }
    if ((double *)v45 != v46)
    {
      double v10 = 0.0;
      double v36 = (double *)v45;
      do
      {
        double v37 = *v36++;
        double v10 = v10 + v37;
      }
      while (v36 != v46);
    }
    if (v45)
    {
      double v46 = (double *)v45;
      operator delete((void *)v45);
      a1 = __p;
    }
    if (a1)
    {
      uint64_t v48 = a1;
      operator delete(a1);
    }
  }
  v50.__ptr_ = *(void **)&v9;
  *(double *)&v51.__m_.__sig = v10;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)a1);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v50, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v9 = *(double *)&v50.__ptr_;
    double v10 = *(double *)&v51.__m_.__sig;
  }
  double v39 = 1.0;
  if (v10 != 0.0) {
    double v39 = v10;
  }
  return v9 / v39;
}

void sub_22EA090F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, std::exception_ptr a18)
{
}

const char *xgboost::metric::EvalEWiseSurvivalBase<xgboost::metric::EvalIntervalRegressionAccuracy>::Name()
{
  return "interval-regression-accuracy";
}

char *XGBGetLastError()
{
  {
    uint64_t v2 = (void *)dmlc::ThreadLocalStore<XGBAPIErrorEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<XGBAPIErrorEntry>::Get(void)::inst);
    *uint64_t v2 = 0;
    v2[1] = 0;
    void v2[2] = 0;
    _tlv_atexit((void (__cdecl *)(void *))XGBAPIErrorEntry::~XGBAPIErrorEntry, v2);
  }
  uint64_t result = (char *)dmlc::ThreadLocalStore<XGBAPIErrorEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<XGBAPIErrorEntry>::Get(void)::inst);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

void XGBAPISetLastError(const char *a1)
{
  {
    uint64_t v2 = (void *)dmlc::ThreadLocalStore<XGBAPIErrorEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<XGBAPIErrorEntry>::Get(void)::inst);
    *uint64_t v2 = 0;
    v2[1] = 0;
    void v2[2] = 0;
    _tlv_atexit((void (__cdecl *)(void *))XGBAPIErrorEntry::~XGBAPIErrorEntry, v2);
  }
  dmlc::ThreadLocalStore<XGBAPIErrorEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<XGBAPIErrorEntry>::Get(void)::inst);

  JUMPOUT(0x230FA7B10);
}

void XGBAPIErrorEntry::~XGBAPIErrorEntry(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t xgboost::data::__dmlc_registry_file_tag_sparse_page_raw_format__(xgboost::data *this)
{
  return 0;
}

void std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::SparsePage> * ()(void)>::~__func()
{
}

void *std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::SparsePage> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E24EAB8;
  return result;
}

void std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::SparsePage> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E24EAB8;
}

void std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::SparsePage> * ()(void)>::operator()()
{
}

uint64_t std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::SparsePage> * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::SparsePage> * ()(void)>::target_type()
{
}

void *xgboost::data::SparsePageRawFormat<xgboost::SparsePage>::~SparsePageRawFormat(void *a1)
{
  *a1 = &unk_26E24EB38;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void xgboost::data::SparsePageRawFormat<xgboost::SparsePage>::~SparsePageRawFormat(void *a1)
{
  *a1 = &unk_26E24EB38;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t xgboost::data::SparsePageRawFormat<xgboost::SparsePage>::Read(uint64_t a1, uint64_t **a2, uint64_t (***a3)(void, unint64_t *, uint64_t))
{
  uint64_t v5 = (unint64_t **)*a2;
  unint64_t v17 = 0;
  if ((**a3)(a3, &v17, 8) != 8) {
    return 0;
  }
  unint64_t v6 = v17;
  std::vector<unsigned long>::resize((uint64_t)v5, v17);
  if (v17)
  {
    if ((**a3)(a3, *v5, 8 * v6) != 8 * v6) {
      return 0;
    }
  }
  std::vector<std::pair<std::string, std::string>> v7 = (unint64_t **)a2[1];
  uint64_t v8 = **a2;
  uint64_t v9 = (*a2)[1];
  LODWORD(v15) = 0;
  uint64_t v10 = v9 - v8;
  uint64_t v16 = v10 >> 3;
  if (!v10) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  std::vector<xgboost::Entry>::resize((uint64_t)v7, *(v5[1] - 1));
  uint64_t v11 = *a2[1];
  uint64_t v12 = a2[1][1];
  if (v12 != v11)
  {
    if (v7[1] == *v7) {
      char v13 = 0;
    }
    else {
      char v13 = *v7;
    }
    unint64_t v17 = (**a3)(a3, v13, v12 - v11);
    uint64_t v15 = a2[1][1] - *a2[1];
    if (v17 != v15) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
  }
  (**a3)(a3, (unint64_t *)a2 + 2, 8);
  return 1;
}

void sub_22EA09824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a11;
  a11 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v13);
  }
  _Unwind_Resume(exception_object);
}

unint64_t xgboost::data::SparsePageRawFormat<xgboost::SparsePage>::Write(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)*a2;
  unint64_t v6 = a2[1];
  uint64_t v8 = (uint64_t *)**a2;
  std::vector<std::pair<std::string, std::string>> v7 = (uint64_t *)(*a2)[1];
  if (v7 == v8 || (uint64_t v9 = *v8, v10 = a2[1], v9))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_raw_format.cc");
    char v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: page.offset.Size() != 0 && offset_vec[0] == 0", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
    std::vector<std::pair<std::string, std::string>> v7 = v5[1];
    uint64_t v10 = a2[1];
  }
  if (*(v7 - 1) != (v10[1] - *v10) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v21 = v5[1] - *v5;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a3 + 8))(a3, &v21, 8);
  if (v21) {
    (*(void (**)(uint64_t, uint64_t *, int64_t))(*(void *)a3 + 8))(a3, *v5, (char *)v5[1] - (char *)*v5);
  }
  uint64_t v12 = **a2;
  uint64_t v11 = (*a2)[1];
  uint64_t v14 = *a2[1];
  uint64_t v13 = a2[1][1];
  uint64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v6[1] == *v6) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = *v6;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 8))(a3, v16, v15);
  }
  (*(void (**)(uint64_t, uint64_t **, uint64_t))(*(void *)a3 + 8))(a3, a2 + 2, 8);
  return ((v11 - v12 + v15) & 0xFFFFFFFFFFFFFFF8) + 16;
}

void sub_22EA09AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::data::$_1,std::allocator<xgboost::data::$_1>,xgboost::data::SparsePageFormat<xgboost::CSCPage> * ()(void)>::~__func()
{
}

void *std::__function::__func<xgboost::data::$_1,std::allocator<xgboost::data::$_1>,xgboost::data::SparsePageFormat<xgboost::CSCPage> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E24EBA0;
  return result;
}

void std::__function::__func<xgboost::data::$_1,std::allocator<xgboost::data::$_1>,xgboost::data::SparsePageFormat<xgboost::CSCPage> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E24EBA0;
}

void std::__function::__func<xgboost::data::$_1,std::allocator<xgboost::data::$_1>,xgboost::data::SparsePageFormat<xgboost::CSCPage> * ()(void)>::operator()()
{
}

uint64_t std::__function::__func<xgboost::data::$_1,std::allocator<xgboost::data::$_1>,xgboost::data::SparsePageFormat<xgboost::CSCPage> * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::data::$_1,std::allocator<xgboost::data::$_1>,xgboost::data::SparsePageFormat<xgboost::CSCPage> * ()(void)>::target_type()
{
}

void *xgboost::data::SparsePageRawFormat<xgboost::CSCPage>::~SparsePageRawFormat(void *a1)
{
  *a1 = &unk_26E24EC20;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void xgboost::data::SparsePageRawFormat<xgboost::CSCPage>::~SparsePageRawFormat(void *a1)
{
  *a1 = &unk_26E24EC20;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t xgboost::data::SparsePageRawFormat<xgboost::CSCPage>::Read(uint64_t a1, uint64_t **a2, uint64_t (***a3)(void, unint64_t *, uint64_t))
{
  uint64_t v5 = (unint64_t **)*a2;
  unint64_t v17 = 0;
  if ((**a3)(a3, &v17, 8) != 8) {
    return 0;
  }
  unint64_t v6 = v17;
  std::vector<unsigned long>::resize((uint64_t)v5, v17);
  if (v17)
  {
    if ((**a3)(a3, *v5, 8 * v6) != 8 * v6) {
      return 0;
    }
  }
  std::vector<std::pair<std::string, std::string>> v7 = (unint64_t **)a2[1];
  uint64_t v8 = **a2;
  uint64_t v9 = (*a2)[1];
  LODWORD(v15) = 0;
  uint64_t v10 = v9 - v8;
  uint64_t v16 = v10 >> 3;
  if (!v10) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  std::vector<xgboost::Entry>::resize((uint64_t)v7, *(v5[1] - 1));
  uint64_t v11 = *a2[1];
  uint64_t v12 = a2[1][1];
  if (v12 != v11)
  {
    if (v7[1] == *v7) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = *v7;
    }
    unint64_t v17 = (**a3)(a3, v13, v12 - v11);
    uint64_t v15 = a2[1][1] - *a2[1];
    if (v17 != v15) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
  }
  (**a3)(a3, (unint64_t *)a2 + 2, 8);
  return 1;
}

void sub_22EA09FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a11;
  a11 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v13);
  }
  _Unwind_Resume(exception_object);
}

unint64_t xgboost::data::SparsePageRawFormat<xgboost::CSCPage>::Write(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)*a2;
  unint64_t v6 = a2[1];
  uint64_t v8 = (uint64_t *)**a2;
  std::vector<std::pair<std::string, std::string>> v7 = (uint64_t *)(*a2)[1];
  if (v7 == v8 || (uint64_t v9 = *v8, v10 = a2[1], v9))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_raw_format.cc");
    char v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: page.offset.Size() != 0 && offset_vec[0] == 0", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
    std::vector<std::pair<std::string, std::string>> v7 = v5[1];
    uint64_t v10 = a2[1];
  }
  if (*(v7 - 1) != (v10[1] - *v10) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v21 = v5[1] - *v5;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a3 + 8))(a3, &v21, 8);
  if (v21) {
    (*(void (**)(uint64_t, uint64_t *, int64_t))(*(void *)a3 + 8))(a3, *v5, (char *)v5[1] - (char *)*v5);
  }
  uint64_t v12 = **a2;
  uint64_t v11 = (*a2)[1];
  uint64_t v14 = *a2[1];
  uint64_t v13 = a2[1][1];
  uint64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v6[1] == *v6) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = *v6;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 8))(a3, v16, v15);
  }
  (*(void (**)(uint64_t, uint64_t **, uint64_t))(*(void *)a3 + 8))(a3, a2 + 2, 8);
  return ((v11 - v12 + v15) & 0xFFFFFFFFFFFFFFF8) + 16;
}

void sub_22EA0A2BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::data::$_2,std::allocator<xgboost::data::$_2>,xgboost::data::SparsePageFormat<xgboost::SortedCSCPage> * ()(void)>::~__func()
{
}

void *std::__function::__func<xgboost::data::$_2,std::allocator<xgboost::data::$_2>,xgboost::data::SparsePageFormat<xgboost::SortedCSCPage> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E24EC88;
  return result;
}

void std::__function::__func<xgboost::data::$_2,std::allocator<xgboost::data::$_2>,xgboost::data::SparsePageFormat<xgboost::SortedCSCPage> * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E24EC88;
}

void std::__function::__func<xgboost::data::$_2,std::allocator<xgboost::data::$_2>,xgboost::data::SparsePageFormat<xgboost::SortedCSCPage> * ()(void)>::operator()()
{
}

uint64_t std::__function::__func<xgboost::data::$_2,std::allocator<xgboost::data::$_2>,xgboost::data::SparsePageFormat<xgboost::SortedCSCPage> * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::data::$_2,std::allocator<xgboost::data::$_2>,xgboost::data::SparsePageFormat<xgboost::SortedCSCPage> * ()(void)>::target_type()
{
}

void *xgboost::data::SparsePageRawFormat<xgboost::SortedCSCPage>::~SparsePageRawFormat(void *a1)
{
  *a1 = &unk_26E24ED08;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void xgboost::data::SparsePageRawFormat<xgboost::SortedCSCPage>::~SparsePageRawFormat(void *a1)
{
  *a1 = &unk_26E24ED08;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t xgboost::data::SparsePageRawFormat<xgboost::SortedCSCPage>::Read(uint64_t a1, uint64_t **a2, uint64_t (***a3)(void, unint64_t *, uint64_t))
{
  uint64_t v5 = (unint64_t **)*a2;
  unint64_t v17 = 0;
  if ((**a3)(a3, &v17, 8) != 8) {
    return 0;
  }
  unint64_t v6 = v17;
  std::vector<unsigned long>::resize((uint64_t)v5, v17);
  if (v17)
  {
    if ((**a3)(a3, *v5, 8 * v6) != 8 * v6) {
      return 0;
    }
  }
  std::vector<std::pair<std::string, std::string>> v7 = (unint64_t **)a2[1];
  uint64_t v8 = **a2;
  uint64_t v9 = (*a2)[1];
  LODWORD(v15) = 0;
  uint64_t v10 = v9 - v8;
  uint64_t v16 = v10 >> 3;
  if (!v10) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  std::vector<xgboost::Entry>::resize((uint64_t)v7, *(v5[1] - 1));
  uint64_t v11 = *a2[1];
  uint64_t v12 = a2[1][1];
  if (v12 != v11)
  {
    if (v7[1] == *v7) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = *v7;
    }
    unint64_t v17 = (**a3)(a3, v13, v12 - v11);
    uint64_t v15 = a2[1][1] - *a2[1];
    if (v17 != v15) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
  }
  (**a3)(a3, (unint64_t *)a2 + 2, 8);
  return 1;
}

void sub_22EA0A7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a11;
  a11 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v13);
  }
  _Unwind_Resume(exception_object);
}

unint64_t xgboost::data::SparsePageRawFormat<xgboost::SortedCSCPage>::Write(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)*a2;
  unint64_t v6 = a2[1];
  uint64_t v8 = (uint64_t *)**a2;
  std::vector<std::pair<std::string, std::string>> v7 = (uint64_t *)(*a2)[1];
  if (v7 == v8 || (uint64_t v9 = *v8, v10 = a2[1], v9))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_raw_format.cc");
    char v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: page.offset.Size() != 0 && offset_vec[0] == 0", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
    std::vector<std::pair<std::string, std::string>> v7 = v5[1];
    uint64_t v10 = a2[1];
  }
  if (*(v7 - 1) != (v10[1] - *v10) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v21 = v5[1] - *v5;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a3 + 8))(a3, &v21, 8);
  if (v21) {
    (*(void (**)(uint64_t, uint64_t *, int64_t))(*(void *)a3 + 8))(a3, *v5, (char *)v5[1] - (char *)*v5);
  }
  uint64_t v12 = **a2;
  uint64_t v11 = (*a2)[1];
  uint64_t v14 = *a2[1];
  uint64_t v13 = a2[1][1];
  uint64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v6[1] == *v6) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = *v6;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 8))(a3, v16, v15);
  }
  (*(void (**)(uint64_t, uint64_t **, uint64_t))(*(void *)a3 + 8))(a3, a2 + 2, 8);
  return ((v11 - v12 + v15) & 0xFFFFFFFFFFFFFFF8) + 16;
}

void sub_22EA0AA8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::RecordIOSplitter::SeekRecordBegin(uint64_t a1, uint64_t (***a2)(void, uint64_t *, uint64_t))
{
  uint64_t v10 = 0;
  uint64_t v3 = 0;
  while ((**a2)(a2, (uint64_t *)((char *)&v10 + 4), 4))
  {
    if (HIDWORD(v10) == -824761590)
    {
      if (!(**a2)(a2, &v10, 4))
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/recordio_split.cc");
        uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
        unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: fi->Read(&lrec, sizeof(lrec)) != 0", 48);
        std::vector<std::pair<std::string, std::string>> v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"invalid record io format", 24);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v9);
      }
      if (!(v10 >> 30)) {
        return v3;
      }
      v3 += 8;
    }
    else
    {
      v3 += 4;
    }
  }
  return v3;
}

void sub_22EA0AC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

const char *dmlc::io::RecordIOSplitter::FindLastRecordBegin(dmlc::io::RecordIOSplitter *this, const char *a2, const char *a3)
{
  char v4 = a2;
  if ((a2 & 3) != 0) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if ((a3 & 3) != 0) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if (a2 + 8 > a3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/recordio_split.cc");
    unint64_t v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    std::vector<std::pair<std::string, std::string>> v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: p >= pbegin + 2", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
  }
  uint64_t v8 = a3 - 8;
  if (a3 - 8 != v4)
  {
    while (*(_DWORD *)v8 != -824761590 || *((_DWORD *)v8 + 1) >> 30)
    {
      v8 -= 4;
      if (v8 == v4) {
        return v4;
      }
    }
    return v8;
  }
  return v4;
}

void sub_22EA0AE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

BOOL dmlc::io::RecordIOSplitter::ExtractNextRecord(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v35 = a3[1];
  if (*a3 != v35)
  {
    LOBYTE(v6) = *a3;
    if (v3 + 8 > v35)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/recordio_split.cc");
      uint64_t v8 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: chunk->begin + 2 * sizeof(uint32_t) <= chunk->end", 63);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Invalid RecordIO Format", 23);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
      unint64_t v6 = *a3;
    }
    if ((v6 & 3) != 0) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    if ((a3[1] & 3) != 0) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    unsigned int v11 = *(_DWORD *)(*a3 + 4);
    uint64_t v12 = v11 & 0x1FFFFFFF;
    uint64_t v13 = *a3 + 8;
    *a2 = v13;
    unint64_t v14 = v13 + ((v12 + 3) & 0x3FFFFFFC);
    *a3 = v14;
    if (v14 > a3[1])
    {
      uint64_t v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/recordio_split.cc");
      uint64_t v16 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: chunk->begin <= chunk->end", 40);
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Invalid RecordIO Format", 23);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
    }
    unsigned int v19 = v11 >> 29;
    a2[1] = v12;
    if (v19)
    {
      if (v19 == 1
        || (int v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36),
            dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/recordio_split.cc"), uint64_t v21 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36), v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: cflag == 1U", 25), v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2), std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Invalid RecordIO Format", 23), dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36), v19 != 3))
      {
        uint64_t v24 = (_DWORD *)*a3;
        do
        {
          if ((unint64_t)(v24 + 2) > a3[1])
          {
            double v25 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
            dmlc::LogMessageFatal::Entry::Init(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/recordio_split.cc");
            float v26 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
            double v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: chunk->begin + 2 * sizeof(uint32_t) <= chunk->end", 63);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
            uint64_t v24 = (_DWORD *)*a3;
          }
          if (*v24 != -824761590)
          {
            float v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
            dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/recordio_split.cc");
            double v29 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
            float v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: p[0] == RecordIOWriter::kMagic", 44);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
          }
          unsigned int v31 = v24[1];
          *(_DWORD *)(*a2 + a2[1]) = -824761590;
          uint64_t v32 = a2[1] + 4;
          a2[1] = v32;
          uint64_t v33 = v31 & 0x1FFFFFFF;
          if ((v31 & 0x1FFFFFFF) != 0)
          {
            memmove((void *)(*a2 + v32), (const void *)(*a3 + 8), v31 & 0x1FFFFFFF);
            a2[1] += v33;
          }
          uint64_t v24 = (_DWORD *)(*a3 + ((v33 + 3) & 0x3FFFFFFCu) + 8);
          *a3 = (unint64_t)v24;
        }
        while (v31 >> 29 != 3);
      }
    }
  }
  return v3 != v35;
}

void sub_22EA0B354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::io::RecordIOSplitter::~RecordIOSplitter(dmlc::io::RecordIOSplitter *this)
{
  dmlc::io::InputSplitBase::~InputSplitBase(this);

  JUMPOUT(0x230FA80D0);
}

void sub_22EA0B438(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B3C40F1CB0773);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::RecordIOSplitter::IsTextParser(dmlc::io::RecordIOSplitter *this)
{
  return 0;
}

void xgboost::common::ColumnSampler::ColSample(uint64_t *a1@<X1>, void *a2@<X8>, float a3@<S0>)
{
  uint64_t v4 = *a1;
  if (a3 != 1.0)
  {
    if (*(void *)(*(void *)v4 + 8) != **(void **)v4) {
      _ZNSt3__115allocate_sharedB8ne180100IN7xgboost16HostDeviceVectorIjEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
    }
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  uint64_t v5 = a1[1];
  *a2 = v4;
  a2[1] = v5;
  *a1 = 0;
  a1[1] = 0;
}

void sub_22EA0B904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v21 = (uint64_t)a18;
  a18 = 0;
  if (v21) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a18, v21);
  }
  double v22 = *(std::__shared_weak_count **)(v19 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *result, unint64_t *a2, unint64_t **a3, unint64_t a4, unint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = (char *)result;
    if (a4 == 2)
    {
      unint64_t v9 = *(a2 - 1);
      unint64_t v10 = **a3;
      if (v10 > v9)
      {
        unint64_t v11 = *result;
        if (v10 > *result)
        {
          if (*(float *)((*a3)[1] + 4 * v9) > *(float *)((*a3)[1] + 4 * v11))
          {
            *uint64_t result = v9;
            *(a2 - 1) = v11;
          }
          return result;
        }
      }
LABEL_46:
      std::terminate();
    }
    if ((uint64_t)a4 > 128)
    {
      double v25 = (char *)a5;
      unint64_t v26 = a4 >> 1;
      double v27 = &result[a4 >> 1];
      unint64_t v28 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(result, v27, a3, v28, a5);
        double v29 = (unint64_t *)&v25[8 * v26];
        uint64_t result = std::__stable_sort_move<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>((unint64_t *)&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v29);
        float v30 = &v25[8 * a4];
        unsigned int v31 = *a3;
        uint64_t v32 = v29;
        while (v32 != (unint64_t *)v30)
        {
          uint64_t v33 = v32;
          unint64_t v34 = *v32;
          if (*v31 <= v34) {
            goto LABEL_46;
          }
          unint64_t v35 = *(void *)v25;
          if (*v31 <= *(void *)v25) {
            goto LABEL_46;
          }
          unint64_t v36 = v31[1];
          float v37 = *(float *)(v36 + 4 * v34);
          float v38 = *(float *)(v36 + 4 * v35);
          if (v37 > v38) {
            unint64_t v35 = v34;
          }
          v25 += 8 * (v37 <= v38);
          uint64_t v32 = &v33[v37 > v38];
          *(void *)uint64_t v8 = v35;
          v8 += 8;
          if (v25 == (char *)v29)
          {
            if (v32 != (unint64_t *)v30)
            {
              uint64_t v39 = 0;
              if (v37 > v38) {
                char v40 = 1;
              }
              else {
                char v40 = 2;
              }
              double v41 = &v33[v40 & 1];
              do
              {
                *(void *)&v8[v39 * 8] = v41[v39];
                ++v39;
              }
              while (&v41[v39] != (unint64_t *)v30);
            }
            return result;
          }
        }
        if (v25 != (char *)v29)
        {
          uint64_t v42 = 0;
          do
          {
            *(void *)&v8[v42] = *(void *)&v25[v42];
            v42 += 8;
          }
          while (&v25[v42] != (char *)v29);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(result, v27, a3, v28, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v25, a6);
        return (unint64_t *)std::__inplace_merge<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(v8, &v8[8 * (a4 >> 1)], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v25, a6);
      }
    }
    else if (result != a2)
    {
      uint64_t v13 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v14 = 0;
        uint64_t v15 = *a3;
        uint64_t v16 = result;
        while (1)
        {
          unint64_t v17 = v13;
          unint64_t v18 = *v13;
          if (*v15 <= v18) {
            goto LABEL_46;
          }
          unint64_t v19 = *v16;
          if (*v15 <= *v16) {
            goto LABEL_46;
          }
          unint64_t v20 = v15[1];
          float v21 = *(float *)(v20 + 4 * v18);
          if (v21 > *(float *)(v20 + 4 * v19))
          {
            uint64_t v22 = v14;
            while (1)
            {
              *(unint64_t *)((char *)result + v22 + 8) = v19;
              if (!v22) {
                break;
              }
              if (*v15 <= v18) {
                goto LABEL_46;
              }
              unint64_t v19 = *(unint64_t *)((char *)result + v22 - 8);
              if (*v15 <= v19) {
                goto LABEL_46;
              }
              v22 -= 8;
              if (v21 <= *(float *)(v20 + 4 * v19))
              {
                int64_t v23 = (unint64_t *)((char *)result + v22 + 8);
                goto LABEL_21;
              }
            }
            int64_t v23 = result;
LABEL_21:
            *int64_t v23 = v18;
          }
          uint64_t v13 = v17 + 1;
          v14 += 8;
          uint64_t v16 = v17;
          if (v17 + 1 == a2) {
            return result;
          }
        }
      }
    }
  }
  return result;
}

unint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *result, unint64_t *a2, unint64_t **a3, unint64_t a4, unint64_t *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    std::vector<std::pair<std::string, std::string>> v7 = result;
    if (a4 == 1)
    {
LABEL_10:
      unint64_t *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      unint64_t v10 = *(a2 - 1);
      unint64_t v11 = **a3;
      if (v11 > v10 && v11 > *result)
      {
        unint64_t v12 = (*a3)[1];
        float v13 = *(float *)(v12 + 4 * v10);
        float v14 = *(float *)(v12 + 4 * *result);
        if (v13 <= v14) {
          unint64_t v10 = *result;
        }
        *a5 = v10;
        uint64_t v5 = a5 + 1;
        if (v13 <= v14) {
          std::vector<std::pair<std::string, std::string>> v7 = a2 - 1;
        }
        goto LABEL_10;
      }
LABEL_46:
      std::terminate();
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v26 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(result, v26, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = (unint64_t *)std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      double v27 = *a3;
      unint64_t v28 = &v7[a4 >> 1];
      while (v28 != a2)
      {
        double v29 = v28;
        unint64_t v30 = *v28;
        if (*v27 <= v30) {
          goto LABEL_46;
        }
        unint64_t v31 = *v7;
        if (*v27 <= *v7) {
          goto LABEL_46;
        }
        unint64_t v32 = v27[1];
        float v33 = *(float *)(v32 + 4 * v30);
        float v34 = *(float *)(v32 + 4 * v31);
        if (v33 > v34) {
          unint64_t v31 = v30;
        }
        unint64_t v28 = &v29[v33 > v34];
        v7 += v33 <= v34;
        *v5++ = v31;
        if (v7 == v26)
        {
          if (v28 != a2)
          {
            uint64_t v35 = 0;
            unint64_t v36 = &v29[v33 > v34];
            do
            {
              v5[v35] = v36[v35];
              ++v35;
            }
            while (&v36[v35] != a2);
          }
          return result;
        }
      }
      if (v7 != v26)
      {
        uint64_t v37 = 0;
        do
        {
          v5[v37] = v7[v37];
          ++v37;
        }
        while (&v7[v37] != v26);
      }
    }
    else if (result != a2)
    {
      uint64_t v15 = *a3;
      uint64_t v16 = (uint64_t *)(result + 1);
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v17 = 0;
        unint64_t v18 = (uint64_t *)a5;
        while (1)
        {
          uint64_t v19 = *v16;
          if (*v15 <= *v16) {
            goto LABEL_46;
          }
          uint64_t v20 = *v18;
          if (*v15 <= *v18) {
            goto LABEL_46;
          }
          float v21 = v18 + 1;
          unint64_t v22 = v15[1];
          if (*(float *)(v22 + 4 * v19) <= *(float *)(v22 + 4 * v20))
          {
            *float v21 = v19;
          }
          else
          {
            v18[1] = v20;
            int64_t v23 = a5;
            if (v18 != (uint64_t *)a5)
            {
              uint64_t v24 = v17;
              while (1)
              {
                if (*v15 <= *v16) {
                  goto LABEL_46;
                }
                unint64_t v25 = *(unint64_t *)((char *)a5 + v24 - 8);
                if (*v15 <= v25) {
                  goto LABEL_46;
                }
                if (*(float *)(v22 + 4 * *v16) <= *(float *)(v22 + 4 * v25)) {
                  break;
                }
                *(unint64_t *)((char *)a5 + v24) = v25;
                v24 -= 8;
                if (!v24)
                {
                  int64_t v23 = a5;
                  goto LABEL_28;
                }
              }
              int64_t v23 = (unint64_t *)((char *)a5 + v24);
            }
LABEL_28:
            *int64_t v23 = *v16;
          }
          ++v16;
          v17 += 8;
          unint64_t v18 = v21;
          if (v16 == (uint64_t *)a2) {
            return result;
          }
        }
      }
    }
  }
  return result;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_22EA0BF8C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

rabit::engine::AllreduceBase *rabit::engine::AllreduceBase::AllreduceBase(rabit::engine::AllreduceBase *this)
{
  *(void *)this = &unk_26E24EE18;
  *((void *)this + 1) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v2 = (std::vector<std::string> *)((char *)this + 104);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  unint64_t v3 = (char *)this + 152;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_WORD *)this + 142) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 27) = 0;
  *((void *)this + 36) = 1800;
  *((_WORD *)this + 148) = 0;
  unint64_t v36 = (char *)this + 128;
  MEMORY[0x230FA7B10]((char *)this + 176);
  *((_DWORD *)this + 56) = 9000;
  MEMORY[0x230FA7B10](v3, &unk_22EA3D4EA);
  *(void *)((char *)this + 228) = 0x3E800002332;
  *((void *)this + 34) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 70) = 5;
  *((unsigned char *)this + 16) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_OWORD *)this + 16) = xmmword_22EA20560;
  MEMORY[0x230FA7B10](v36, "NULL");
  *((void *)this + 7) = 0;
  MEMORY[0x230FA7B10]((char *)this + 200, "worker");
  (*(void (**)(rabit::engine::AllreduceBase *, const char *, const char *))(*(void *)this + 136))(this, "rabit_reduce_buffer", "256MB");
  unint64_t v4 = *((void *)this + 15);
  unint64_t v5 = *((void *)this + 14);
  if (v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (unint64_t)v2->__begin_) >> 3);
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_56;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (unint64_t)v2->__begin_) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 120);
    if (v10) {
      unint64_t v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)this + 120, v10);
    }
    else {
      unint64_t v11 = 0;
    }
    __v.__first_ = v11;
    __v.__begin_ = v11 + v7;
    __v.__end_cap_.__value_ = &v11[v10];
    std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, "DMLC_TASK_ID");
    __v.__end_ = __v.__begin_ + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v2, &__v);
    unint64_t v6 = (void *)*((void *)this + 14);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(*((void **)this + 14), "DMLC_TASK_ID");
    unint64_t v6 = (void *)(v5 + 24);
    *((void *)this + 14) = v6;
  }
  *((void *)this + 14) = v6;
  unint64_t v12 = *((void *)this + 15);
  if ((unint64_t)v6 >= v12)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v2->__begin_) >> 3);
    if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_56;
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (unint64_t)v2->__begin_) >> 3);
    uint64_t v16 = 2 * v15;
    if (2 * v15 <= v14 + 1) {
      uint64_t v16 = v14 + 1;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v16;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 120);
    if (v17) {
      unint64_t v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)this + 120, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    __v.__first_ = v18;
    __v.__begin_ = v18 + v14;
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v18[v17];
    std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, "DMLC_ROLE");
    ++__v.__end_;
    std::vector<std::string>::__swap_out_circular_buffer(v2, &__v);
    float v13 = (void *)*((void *)this + 14);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "DMLC_ROLE");
    float v13 = v6 + 3;
    *((void *)this + 14) = v13;
  }
  *((void *)this + 14) = v13;
  if ((unint64_t)v13 >= *((void *)this + 15))
  {
    uint64_t v19 = (void *)std::vector<std::string>::__emplace_back_slow_path<char const(&)[17]>((uint64_t *)v2, "DMLC_NUM_ATTEMPT");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "DMLC_NUM_ATTEMPT");
    uint64_t v19 = v13 + 3;
    *((void *)this + 14) = v19;
  }
  *((void *)this + 14) = v19;
  if ((unint64_t)v19 >= *((void *)this + 15))
  {
    uint64_t v20 = (char *)std::vector<std::string>::__emplace_back_slow_path<char const(&)[17]>((uint64_t *)v2, "DMLC_TRACKER_URI");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "DMLC_TRACKER_URI");
    uint64_t v20 = (char *)(v19 + 3);
    *((void *)this + 14) = v20;
  }
  *((void *)this + 14) = v20;
  unint64_t v21 = *((void *)this + 15);
  if ((unint64_t)v20 >= v21)
  {
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (char *)v2->__begin_) >> 3);
    if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_56;
    }
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (unint64_t)v2->__begin_) >> 3);
    uint64_t v25 = 2 * v24;
    if (2 * v24 <= v23 + 1) {
      uint64_t v25 = v23 + 1;
    }
    if (v24 >= 0x555555555555555) {
      unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v26 = v25;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 120);
    if (v26) {
      double v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)this + 120, v26);
    }
    else {
      double v27 = 0;
    }
    __v.__first_ = v27;
    __v.__begin_ = v27 + v23;
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v27[v26];
    std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, "DMLC_TRACKER_PORT");
    ++__v.__end_;
    std::vector<std::string>::__swap_out_circular_buffer(v2, &__v);
    unint64_t v22 = (char *)*((void *)this + 14);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "DMLC_TRACKER_PORT");
    unint64_t v22 = v20 + 24;
    *((void *)this + 14) = v22;
  }
  *((void *)this + 14) = v22;
  unint64_t v28 = *((void *)this + 15);
  if ((unint64_t)v22 < v28)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "DMLC_WORKER_CONNECT_RETRY");
    double v29 = v22 + 24;
    *((void *)this + 14) = v22 + 24;
    goto LABEL_55;
  }
  unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (char *)v2->__begin_) >> 3);
  if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_56:
  }
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (unint64_t)v2->__begin_) >> 3);
  uint64_t v32 = 2 * v31;
  if (2 * v31 <= v30 + 1) {
    uint64_t v32 = v30 + 1;
  }
  if (v31 >= 0x555555555555555) {
    unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v33 = v32;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 120);
  if (v33) {
    float v34 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)this + 120, v33);
  }
  else {
    float v34 = 0;
  }
  __v.__first_ = v34;
  __v.__begin_ = v34 + v30;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v34[v33];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, "DMLC_WORKER_CONNECT_RETRY");
  ++__v.__end_;
  std::vector<std::string>::__swap_out_circular_buffer(v2, &__v);
  double v29 = (void *)*((void *)this + 14);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
LABEL_55:
  *((void *)this + 14) = v29;
  return this;
}

void sub_22EA0C508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__split_buffer<std::string> *a4, void **a5, void **a6, ...)
{
  va_start(va, a6);
  *(void *)(v6 + 112) = v9;
  if (*(char *)(v6 + 223) < 0) {
    operator delete(*v8);
  }
  if (*(char *)(v6 + 199) < 0) {
    operator delete(*a5);
  }
  if (*(char *)(v6 + 175) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v6 + 151) < 0) {
    operator delete(*a6);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  unint64_t v12 = *v10;
  if (*v10)
  {
    *(void *)(v6 + 72) = v12;
    operator delete(v12);
  }
  std::vector<rabit::engine::AllreduceBase::LinkRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t rabit::engine::AllreduceBase::Init(rabit::engine::AllreduceBase *this, int a2, const char **a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 13);
  uint64_t v7 = *((void *)this + 14);
  while (v6 != v7)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      uint64_t v9 = *(const char **)v6;
      unint64_t v10 = getenv(*(const char **)v6);
      if (!v10) {
        goto LABEL_9;
      }
      unint64_t v8 = v10;
LABEL_8:
      (*(void (**)(rabit::engine::AllreduceBase *, const char *, char *))(*(void *)this + 136))(this, v9, v8);
      goto LABEL_9;
    }
    unint64_t v8 = getenv((const char *)v6);
    uint64_t v9 = (const char *)v6;
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    v6 += 24;
  }
  if (a2 >= 1)
  {
    uint64_t v11 = a2;
    do
    {
      if (sscanf(*a3, "%[^=]=%s", &v34, &v32) == 2) {
        (*(void (**)(rabit::engine::AllreduceBase *, std::string *, long long *))(*(void *)this + 136))(this, &v34, &v32);
      }
      ++a3;
      --v11;
    }
    while (v11);
  }
  float v13 = getenv("mapred_tip_id");
  if (!v13) {
    float v13 = getenv("mapreduce_task_id");
  }
  if (*((unsigned char *)this + 16)) {
    rabit::utils::Check((rabit::utils *)(v13 != 0), "hadoop_mode is set but cannot find mapred_task_id", v12);
  }
  if (v13)
  {
    (*(void (**)(rabit::engine::AllreduceBase *, const char *, char *))(*(void *)this + 136))(this, "rabit_task_id", v13);
    (*(void (**)(rabit::engine::AllreduceBase *, const char *, const char *))(*(void *)this + 136))(this, "rabit_hadoop_mode", "1");
  }
  unint64_t v14 = getenv("mapred_task_id");
  if (v14)
  {
    unint64_t v15 = strrchr(v14, 95);
    LODWORD(v34.__r_.__value_.__l.__data_) = 0;
    if (v15)
    {
      uint64_t v16 = v15 + 1;
      if (sscanf(v15 + 1, "%d", &v34) == 1) {
        (*(void (**)(rabit::engine::AllreduceBase *, const char *, char *))(*(void *)this + 136))(this, "rabit_num_trial", v16);
      }
    }
  }
  unint64_t v18 = getenv("mapred_map_tasks");
  if (!v18) {
    unint64_t v18 = getenv("mapreduce_job_maps");
  }
  if (*((unsigned char *)this + 16)) {
    rabit::utils::Check((rabit::utils *)(v18 != 0), "hadoop_mode is set but cannot find mapred_map_tasks", v17);
  }
  if (v18) {
    (*(void (**)(rabit::engine::AllreduceBase *, const char *, char *))(*(void *)this + 136))(this, "rabit_world_size", v18);
  }
  uint64_t v19 = (char *)this + 200;
  int v20 = *((char *)this + 223);
  if (v20 < 0)
  {
    if (*((void *)this + 26) != 6) {
      goto LABEL_40;
    }
    uint64_t v19 = *(char **)v19;
  }
  else if (v20 != 6)
  {
    goto LABEL_40;
  }
  int v21 = *(_DWORD *)v19;
  int v22 = *((unsigned __int16 *)v19 + 2);
  if (v21 != 1802661751 || v22 != 29285)
  {
LABEL_40:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v34);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/allreduce_base.cc");
    uint64_t v25 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Rabit Module currently only work with dmlc worker", 49);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v34);
  }
  *((_DWORD *)this + 68) = -1;
  rabit::utils::Assert((rabit::utils *)(*((void *)this + 5) == *((void *)this + 4)), "can only call Init once", v17);
  memset(&v34, 0, sizeof(v34));
  std::string::resize(&v34, 0x100uLL, 0);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v26 = &v34;
  }
  else {
    unint64_t v26 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  BOOL v27 = gethostname((char *)v26, 0x100uLL) != -1;
  rabit::utils::Check((rabit::utils *)v27, "fail to get host name", v28);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v29 = &v34;
  }
  else {
    double v29 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  std::string::basic_string[abi:ne180100]<0>(&v32, (char *)v29);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  unint64_t v30 = (void **)((char *)this + 152);
  if (*((char *)this + 175) < 0) {
    operator delete(*v30);
  }
  *(_OWORD *)unint64_t v30 = v32;
  *((void *)this + 21) = v33;
  return rabit::engine::AllreduceBase::ReConnectLinks(this, "start");
}

void sub_22EA0CA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
}

uint64_t rabit::engine::AllreduceBase::ReConnectLinks(rabit::engine::AllreduceBase *this, char *a2)
{
  unint64_t v3 = this;
  v333[1] = *MEMORY[0x263EF8340];
  unint64_t v4 = (void *)((char *)this + 176);
  int v5 = *((char *)this + 199);
  if (v5 < 0)
  {
    if (*((void *)this + 23) != 4) {
      goto LABEL_7;
    }
    unint64_t v4 = (void *)*v4;
  }
  else if (v5 != 4)
  {
    goto LABEL_7;
  }
  if (*(_DWORD *)v4 == 1280070990)
  {
    *((void *)this + 34) = 0x100000000;
    return 1;
  }
LABEL_7:
  int v6 = rabit::engine::AllreduceBase::ConnectTracker(this);
  int v330 = v6;
  uint64_t v307 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v7);
  if (*(int *)(v307 + 4) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/allreduce_base.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v324, (uint64_t)&__p, 276, 2);
    unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v324, (uint64_t)"task ", 5);
    int v9 = *((char *)v3 + 151);
    uint64_t v10 = v9 >= 0 ? (uint64_t)v3 + 128 : *((void *)v3 + 16);
    uint64_t v11 = v9 >= 0 ? *((unsigned __int8 *)v3 + 151) : *((void *)v3 + 17);
    unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" connected to the tracker", 25);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v324);
    if (SHIBYTE(v323) < 0) {
      operator delete(__p);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v324, a2);
  rabit::utils::TCPSocket::SendStr(&v330, (char **)v324);
  if (v325 < 0) {
    operator delete(v324[0]);
  }
  unint64_t v13 = 0;
  v322 = 0;
  uint64_t v323 = 0;
  uint64_t v320 = 0;
  std::string __p = &v322;
  uint64_t v319 = 0;
  unint64_t v14 = (char *)&v319 + 4;
  do
  {
    ssize_t v15 = recv(v6, v14, 4 - v13, 64);
    ssize_t v17 = v15;
    if (v15 == -1)
    {
      if (*__error() == 35) {
        break;
      }
      unint64_t v18 = __error();
      uint64_t v19 = strerror(*v18);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v20, "RecvAll", v19);
    }
    else if (!v15)
    {
      break;
    }
    v14 += v17;
    v13 += v17;
  }
  while (v13 < 4);
  rabit::utils::Assert((rabit::utils *)(v13 == 4), "ReConnectLink failure 4", v16);
  unint64_t v21 = 0;
  int v22 = (char *)v3 + 24;
  v306 = (_DWORD *)((char *)v3 + 24);
  do
  {
    ssize_t v23 = recv(v6, v22, 4 - v21, 64);
    ssize_t v25 = v23;
    if (v23 == -1)
    {
      if (*__error() == 35) {
        break;
      }
      unint64_t v26 = __error();
      BOOL v27 = strerror(*v26);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v28, "RecvAll", v27);
    }
    else if (!v23)
    {
      break;
    }
    v22 += v25;
    v21 += v25;
  }
  while (v21 < 4);
  rabit::utils::Assert((rabit::utils *)(v21 == 4), "ReConnectLink failure 4", v24);
  unint64_t v29 = 0;
  unint64_t v30 = (char *)v3 + 276;
  do
  {
    ssize_t v31 = recv(v6, v30, 4 - v29, 64);
    ssize_t v33 = v31;
    if (v31 == -1)
    {
      if (*__error() == 35) {
        break;
      }
      std::string v34 = __error();
      uint64_t v35 = strerror(*v34);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v36, "RecvAll", v35);
    }
    else if (!v31)
    {
      break;
    }
    v30 += v33;
    v29 += v33;
  }
  while (v29 < 4);
  rabit::utils::Assert((rabit::utils *)(v29 == 4), "ReConnectLink failure 4", v32);
  int v38 = *((_DWORD *)v3 + 68);
  BOOL v40 = v38 == -1 || HIDWORD(v319) == v38;
  rabit::utils::Assert((rabit::utils *)v40, "must keep rank to same if the node already have one", v37);
  int v41 = HIDWORD(v319);
  v309 = (char *)v3 + 272;
  *((_DWORD *)v3 + 68) = HIDWORD(v319);
  if (v41 == -1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v324);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/allreduce_base.cc");
    double v43 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v324);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"tracker got overwhelmed and not able to assign correct rank", 59);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v324);
  }
  xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v324);
  int v329 = 4;
  int v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v324, (uint64_t)"task ", 5);
  int v45 = *((char *)v3 + 151);
  if (v45 >= 0) {
    uint64_t v46 = (uint64_t)v3 + 128;
  }
  else {
    uint64_t v46 = *((void *)v3 + 16);
  }
  if (v45 >= 0) {
    uint64_t v47 = *((unsigned __int8 *)v3 + 151);
  }
  else {
    uint64_t v47 = *((void *)v3 + 17);
  }
  uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" got new rank ", 14);
  std::ostream::operator<<();
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v324);
  unint64_t v49 = 0;
  std::exception_ptr v50 = &v319;
  do
  {
    ssize_t v51 = recv(v6, v50, 4 - v49, 64);
    ssize_t v53 = v51;
    if (v51 == -1)
    {
      if (*__error() == 35) {
        break;
      }
      std::mutex v54 = __error();
      uint64_t v55 = strerror(*v54);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v56, "RecvAll", v55);
    }
    else if (!v51)
    {
      break;
    }
    std::exception_ptr v50 = (uint64_t *)((char *)v50 + v53);
    v49 += v53;
  }
  while (v49 < 4);
  rabit::utils::Assert((rabit::utils *)(v49 == 4), "ReConnectLink failure 4", v52);
  v310 = v3;
  if ((int)v319 > 0)
  {
    int v57 = 0;
    do
    {
      unint64_t v58 = 0;
      LODWORD(v324[0]) = 0;
      uint64_t v59 = v324;
      do
      {
        ssize_t v60 = recv(v6, v59, 4 - v58, 64);
        ssize_t v62 = v60;
        if (v60 == -1)
        {
          if (*__error() == 35) {
            break;
          }
          std::vector<char>::pointer v63 = __error();
          unint64_t v64 = strerror(*v63);
          rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v65, "RecvAll", v64);
        }
        else if (!v60)
        {
          break;
        }
        uint64_t v59 = (void **)((char *)v59 + v62);
        v58 += v62;
      }
      while (v58 < 4);
      rabit::utils::Assert((rabit::utils *)(v58 == 4), "ReConnectLink failure 4", v61);
      int v66 = (int)v324[0];
      uint64_t v67 = v322;
      for (unint64_t i = &v322; ; v67 = *i)
      {
        uint64_t v69 = i;
        if (!v67) {
          break;
        }
        while (1)
        {
          unint64_t i = (uint64_t **)v67;
          int v70 = *((_DWORD *)v67 + 7);
          if (v70 > SLODWORD(v324[0])) {
            break;
          }
          if (v70 >= SLODWORD(v324[0]))
          {
            uint64_t v71 = i;
            goto LABEL_80;
          }
          uint64_t v67 = i[1];
          if (!v67)
          {
            uint64_t v69 = i + 1;
            goto LABEL_77;
          }
        }
      }
LABEL_77:
      uint64_t v71 = operator new(0x28uLL);
      v71[7] = v66;
      v71[8] = 0;
      *(void *)uint64_t v71 = 0;
      *((void *)v71 + 1) = 0;
      *((void *)v71 + 2) = i;
      void *v69 = (uint64_t *)v71;
      uint64_t v72 = (uint64_t *)v71;
      if (*(void *)__p)
      {
        std::string __p = *(void **)__p;
        uint64_t v72 = *v69;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v322, v72);
      ++v323;
LABEL_80:
      unint64_t v3 = v310;
      v71[8] = 1;
      ++v57;
    }
    while (v57 < (int)v319);
  }
  unint64_t v73 = 0;
  int64_t v74 = (char *)&v320 + 4;
  do
  {
    ssize_t v75 = recv(v6, v74, 4 - v73, 64);
    ssize_t v77 = v75;
    if (v75 == -1)
    {
      if (*__error() == 35) {
        break;
      }
      uint64_t v78 = __error();
      uint64_t v79 = strerror(*v78);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v80, "RecvAll", v79);
    }
    else if (!v75)
    {
      break;
    }
    v74 += v77;
    v73 += v77;
  }
  while (v73 < 4);
  rabit::utils::Assert((rabit::utils *)(v73 == 4), "ReConnectLink failure 4", v76);
  unint64_t v81 = 0;
  uint64_t v82 = &v320;
  do
  {
    ssize_t v83 = recv(v6, v82, 4 - v81, 64);
    ssize_t v85 = v83;
    if (v83 == -1)
    {
      if (*__error() == 35) {
        break;
      }
      std::string::size_type v86 = __error();
      uint64_t v87 = strerror(*v86);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v88, "RecvAll", v87);
    }
    else if (!v83)
    {
      break;
    }
    uint64_t v82 = (uint64_t *)((char *)v82 + v85);
    v81 += v85;
  }
  while (v81 < 4);
  rabit::utils::Assert((rabit::utils *)(v81 == 4), "ReConnectLink failure 4", v84);
  int v90 = socket(2, 1, 0);
  if (v90 == -1)
  {
    uint64_t v91 = __error();
    size_t v92 = strerror(*v91);
    rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v93, "Create", v92);
  }
  unsigned int v318 = 0;
  int v94 = *((_DWORD *)v3 + 58);
  if (v94 < 1)
  {
LABEL_103:
    unsigned int v95 = -1;
  }
  else
  {
    unsigned int v95 = *((_DWORD *)v3 + 57);
    while (1)
    {
      rabit::utils::SockAddr::SockAddr((rabit::utils::SockAddr *)&v332, "0.0.0.0", v95);
      if (!bind(v90, &v332, 0x10u)) {
        break;
      }
      if (*__error() != 48)
      {
        unint64_t v96 = __error();
        unint64_t v97 = strerror(*v96);
        rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v98, "TryBindHost", v97);
      }
      ++v95;
      if (!--v94) {
        goto LABEL_103;
      }
    }
  }
  unsigned int v318 = v95;
  rabit::utils::Check((rabit::utils *)(v95 != -1), "ReConnectLink fail to bind the ports specified", v89);
  listen(v90, 16);
  int v316 = 0;
  int v317 = 0;
  v308 = (int64x2_t *)((char *)v3 + 32);
  int v315 = 1;
  do
  {
    *(void *)&v332.sa_len = 0;
    *(void *)&v332.sa_data[6] = 0;
    v333[0] = 0;
    uint64_t v99 = (int *)*((void *)v310 + 4);
    std::string::size_type v100 = (int *)*((void *)v310 + 5);
    if (v99 == v100)
    {
      uint64_t v118 = 0;
      uint64_t v117 = 0;
    }
    else
    {
      do
      {
        int v101 = *v99;
        if (*v99 != -1)
        {
          LODWORD(v311.__r_.__value_.__l.__data_) = 0;
          *(_DWORD *)&v331.sa_len = 4;
          if (getsockopt(v101, 0xFFFF, 4103, &v311, (socklen_t *)&v331.sa_len))
          {
            uint64_t v102 = __error();
            uint64_t v103 = strerror(*v102);
            rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v104, "GetSockError", v103);
          }
          if (LODWORD(v311.__r_.__value_.__l.__data_) == 4 || LODWORD(v311.__r_.__value_.__l.__data_) == 9)
          {
            if (*v99 != -1)
            {
              close(*v99);
              *uint64_t v99 = -1;
            }
          }
          else
          {
            int v106 = v99[1];
            uint64_t v107 = *(char **)&v332.sa_data[6];
            if (*(void *)&v332.sa_data[6] >= v333[0])
            {
              unsigned int v109 = *(char **)&v332.sa_len;
              uint64_t v110 = (uint64_t)(*(void *)&v332.sa_data[6] - *(void *)&v332.sa_len) >> 2;
              unint64_t v111 = v110 + 1;
              if ((unint64_t)(v110 + 1) >> 62) {
                std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v112 = v333[0] - *(void *)&v332.sa_len;
              if ((uint64_t)(v333[0] - *(void *)&v332.sa_len) >> 1 > v111) {
                unint64_t v111 = v112 >> 1;
              }
              if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v113 = v111;
              }
              if (v113)
              {
                int v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v333, v113);
                unsigned int v109 = *(char **)&v332.sa_len;
                uint64_t v107 = *(char **)&v332.sa_data[6];
              }
              else
              {
                int v114 = 0;
              }
              v115 = (int *)&v114[4 * v110];
              int *v115 = v106;
              unint64_t v108 = v115 + 1;
              while (v107 != v109)
              {
                int v116 = *((_DWORD *)v107 - 1);
                v107 -= 4;
                *--v115 = v116;
              }
              *(void *)&v332.sa_len = v115;
              *(void *)&v332.sa_data[6] = v108;
              v333[0] = &v114[4 * v113];
              if (v109) {
                operator delete(v109);
              }
            }
            else
            {
              **(_DWORD **)&v332.sa_data[6] = v106;
              unint64_t v108 = v107 + 4;
            }
            *(void *)&v332.sa_data[6] = v108;
          }
        }
        v99 += 16;
      }
      while (v99 != v100);
      uint64_t v118 = *(void *)&v332.sa_len;
      uint64_t v117 = *(void *)&v332.sa_data[6];
      int v6 = v330;
    }
    unint64_t v119 = 0;
    int v314 = (unint64_t)(v117 - v118) >> 2;
    char v120 = &v314;
    do
    {
      ssize_t v122 = send(v6, v120, 4 - v119, 0);
      if (v122 == -1)
      {
        if (*__error() == 35) {
          break;
        }
        v123 = __error();
        uint64_t v124 = strerror(*v123);
        rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v125, "SendAll", v124);
      }
      char v120 = (int *)((char *)v120 + v122);
      v119 += v122;
    }
    while (v119 < 4);
    rabit::utils::Assert((rabit::utils *)(v119 == 4), "ReConnectLink failure 5", v121);
    v126 = *(char **)&v332.sa_len;
    int v127 = *(char **)&v332.sa_data[6];
    while (v126 != v127)
    {
      unint64_t v128 = 0;
      __int16 v129 = v126;
      do
      {
        ssize_t v131 = send(v6, v129, 4 - v128, 0);
        if (v131 == -1)
        {
          if (*__error() == 35) {
            break;
          }
          uint64_t v132 = __error();
          uint64_t v133 = strerror(*v132);
          rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v134, "SendAll", v133);
        }
        v129 += v131;
        v128 += v131;
      }
      while (v128 < 4);
      rabit::utils::Assert((rabit::utils *)(v128 == 4), "ReConnectLink failure 6", v130);
      v126 += 4;
    }
    unint64_t v135 = 0;
    v136 = &v317;
    do
    {
      ssize_t v137 = recv(v6, v136, 4 - v135, 64);
      ssize_t v139 = v137;
      if (v137 == -1)
      {
        if (*__error() == 35) {
          break;
        }
        unsigned int v140 = __error();
        unsigned int v141 = strerror(*v140);
        rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v142, "RecvAll", v141);
      }
      else if (!v137)
      {
        break;
      }
      v136 = (int *)((char *)v136 + v139);
      v135 += v139;
    }
    while (v135 < 4);
    rabit::utils::Assert((rabit::utils *)(v135 == 4), "ReConnectLink failure 7", v138);
    unint64_t v143 = 0;
    unsigned int v144 = &v316;
    do
    {
      ssize_t v145 = recv(v6, v144, 4 - v143, 64);
      ssize_t v147 = v145;
      if (v145 == -1)
      {
        if (*__error() == 35) {
          break;
        }
        v148 = __error();
        v149 = strerror(*v148);
        rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v150, "RecvAll", v149);
      }
      else if (!v145)
      {
        break;
      }
      unsigned int v144 = (int *)((char *)v144 + v147);
      v143 += v147;
    }
    while (v143 < 4);
    rabit::utils::Assert((rabit::utils *)(v143 == 4), "ReConnectLink failure 8", v146);
    int v315 = 0;
    if (v317 >= 1)
    {
      int v151 = 0;
      int v6 = v330;
      do
      {
        unint64_t v152 = 0;
        LODWORD(v324[0]) = -1;
        long long v326 = 0u;
        long long v327 = 0u;
        uint64_t v328 = 0;
        int v312 = 0;
        int v313 = 0;
        memset(&v311, 0, sizeof(v311));
        unsigned int v153 = &v331;
        *(_DWORD *)&v331.sa_len = 0;
        do
        {
          ssize_t v154 = recv(v6, v153, 4 - v152, 64);
          ssize_t v156 = v154;
          if (v154 == -1)
          {
            if (*__error() == 35) {
              break;
            }
            v157 = __error();
            int v158 = strerror(*v157);
            rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v159, "RecvAll", v158);
          }
          else if (!v154)
          {
            break;
          }
          unsigned int v153 = (sockaddr *)((char *)v153 + v156);
          v152 += v156;
        }
        while (v152 < 4);
        rabit::utils::Assert((rabit::utils *)(v152 == 4), "error during send RecvStr", v155);
        std::string::resize(&v311, *(int *)&v331.sa_len, 0);
        unint64_t v160 = *(int *)&v331.sa_len;
        if (*(_DWORD *)&v331.sa_len)
        {
          unint64_t v161 = 0;
          if ((v311.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v162 = &v311;
          }
          else {
            v162 = (std::string *)v311.__r_.__value_.__r.__words[0];
          }
          do
          {
            ssize_t v163 = recv(v6, v162, v160 - v161, 64);
            ssize_t v165 = v163;
            if (v163 == -1)
            {
              if (*__error() == 35) {
                break;
              }
              unint64_t v166 = __error();
              v167 = strerror(*v166);
              rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v168, "RecvAll", v167);
            }
            else if (!v163)
            {
              break;
            }
            v162 = (std::string *)((char *)v162 + v165);
            v161 += v165;
          }
          while (v161 < v160);
          std::string::size_type size = HIBYTE(v311.__r_.__value_.__r.__words[2]);
          if ((v311.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v311.__r_.__value_.__l.__size_;
          }
          rabit::utils::Assert((rabit::utils *)(v161 == size), "error during send SendStr", v164);
        }
        unint64_t v170 = 0;
        v171 = &v313;
        do
        {
          ssize_t v172 = recv(v6, v171, 4 - v170, 64);
          ssize_t v174 = v172;
          if (v172 == -1)
          {
            if (*__error() == 35) {
              break;
            }
            int v175 = __error();
            v176 = strerror(*v175);
            rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v177, "RecvAll", v176);
          }
          else if (!v172)
          {
            break;
          }
          v171 = (int *)((char *)v171 + v174);
          v170 += v174;
        }
        while (v170 < 4);
        rabit::utils::Assert((rabit::utils *)(v170 == 4), "ReConnectLink failure 9", v173);
        unint64_t v178 = 0;
        v179 = &v312;
        do
        {
          ssize_t v180 = recv(v6, v179, 4 - v178, 64);
          ssize_t v182 = v180;
          if (v180 == -1)
          {
            if (*__error() == 35) {
              break;
            }
            v183 = __error();
            v184 = strerror(*v183);
            rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v185, "RecvAll", v184);
          }
          else if (!v180)
          {
            break;
          }
          v179 = (int *)((char *)v179 + v182);
          v178 += v182;
        }
        while (v178 < 4);
        rabit::utils::Assert((rabit::utils *)(v178 == 4), "ReConnectLink failure 10", v181);
        LODWORD(v324[0]) = socket(2, 1, 0);
        if (LODWORD(v324[0]) == -1)
        {
          v186 = __error();
          v187 = strerror(*v186);
          rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v188, "Create", v187);
        }
        if ((v311.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v189 = &v311;
        }
        else {
          v189 = (std::string *)v311.__r_.__value_.__r.__words[0];
        }
        rabit::utils::SockAddr::SockAddr((rabit::utils::SockAddr *)&v331, (const char *)v189, v313);
        if (connect((int)v324[0], &v331, 0x10u))
        {
          ++v315;
          if (LODWORD(v324[0]) == -1)
          {
            v210 = __error();
            int v211 = strerror(*v210);
            rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v212, "Socket::Close double close the socket or close without create", v211);
          }
          else
          {
            close((int)v324[0]);
            LODWORD(v324[0]) = -1;
          }
        }
        else
        {
          unint64_t v190 = 0;
          v191 = v309;
          do
          {
            ssize_t v193 = send((int)v324[0], v191, 4 - v190, 0);
            if (v193 == -1)
            {
              if (*__error() == 35) {
                break;
              }
              v194 = __error();
              v195 = strerror(*v194);
              rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v196, "SendAll", v195);
            }
            v191 += v193;
            v190 += v193;
          }
          while (v190 < 4);
          rabit::utils::Assert((rabit::utils *)(v190 == 4), "ReConnectLink failure 12", v192);
          unint64_t v197 = 0;
          v198 = (char *)v324 + 4;
          do
          {
            ssize_t v199 = recv((int)v324[0], v198, 4 - v197, 64);
            ssize_t v201 = v199;
            if (v199 == -1)
            {
              if (*__error() == 35) {
                break;
              }
              v202 = __error();
              v203 = strerror(*v202);
              rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v204, "RecvAll", v203);
            }
            else if (!v199)
            {
              break;
            }
            v198 += v201;
            v197 += v201;
          }
          while (v197 < 4);
          rabit::utils::Assert((rabit::utils *)(v197 == 4), "ReConnectLink failure 13", v200);
          rabit::utils::Check((rabit::utils *)(v312 == HIDWORD(v324[0])), "ReConnectLink failure, link rank inconsistent", v205);
          v208 = (_DWORD *)*((void *)v310 + 4);
          v207 = (_DWORD *)*((void *)v310 + 5);
          if (v208 == v207)
          {
LABEL_222:
            if ((unint64_t)v207 >= *((void *)v310 + 6))
            {
              uint64_t v209 = std::vector<rabit::engine::AllreduceBase::LinkRecord>::__push_back_slow_path<rabit::engine::AllreduceBase::LinkRecord const&>(v308, (uint64_t)v324);
            }
            else
            {
              std::vector<rabit::engine::AllreduceBase::LinkRecord>::__construct_one_at_end[abi:ne180100]<rabit::engine::AllreduceBase::LinkRecord const&>((uint64_t)v308, (long long *)v324);
              uint64_t v209 = (uint64_t)(v207 + 16);
            }
            *((void *)v310 + 5) = v209;
          }
          else
          {
            while (v208[1] != v312)
            {
              v208 += 16;
              if (v208 == v207) {
                goto LABEL_222;
              }
            }
            rabit::utils::Assert((rabit::utils *)(*v208 == -1), "Override a link that is active", v206);
            _DWORD *v208 = v324[0];
          }
        }
        if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v311.__r_.__value_.__l.__data_);
        }
        if ((void)v327)
        {
          *((void *)&v327 + 1) = v327;
          operator delete((void *)v327);
        }
        ++v151;
      }
      while (v151 < v317);
    }
    unint64_t v213 = 0;
    uint64_t v214 = &v315;
    do
    {
      ssize_t v216 = send(v6, v214, 4 - v213, 0);
      if (v216 == -1)
      {
        if (*__error() == 35) {
          break;
        }
        v217 = __error();
        v218 = strerror(*v217);
        rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v219, "SendAll", v218);
      }
      uint64_t v214 = (int *)((char *)v214 + v216);
      v213 += v216;
    }
    while (v213 < 4);
    rabit::utils::Assert((rabit::utils *)(v213 == 4), "ReConnectLink failure 14", v215);
    if (*(void *)&v332.sa_len)
    {
      *(void *)&v332.sa_data[6] = *(void *)&v332.sa_len;
      operator delete(*(void **)&v332.sa_len);
    }
  }
  while (v315);
  unint64_t v220 = 0;
  v221 = &v318;
  v222 = v310;
  do
  {
    ssize_t v224 = send(v6, v221, 4 - v220, 0);
    if (v224 == -1)
    {
      if (*__error() == 35) {
        break;
      }
      v225 = __error();
      v226 = strerror(*v225);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v227, "SendAll", v226);
    }
    v221 = (unsigned int *)((char *)v221 + v224);
    v220 += v224;
  }
  while (v220 < 4);
  rabit::utils::Assert((rabit::utils *)(v220 == 4), "ReConnectLink failure 14", v223);
  if (v6 == -1)
  {
    v228 = __error();
    v229 = strerror(*v228);
    rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v230, "Socket::Close double close the socket or close without create", v229);
  }
  else
  {
    close(v6);
    int v330 = -1;
  }
  if (v316 >= 1)
  {
    for (int j = 0; j < v316; ++j)
    {
      LODWORD(v324[0]) = -1;
      long long v326 = 0u;
      long long v327 = 0u;
      uint64_t v328 = 0;
      int v232 = accept(v90, 0, 0);
      if (v232 == -1)
      {
        v233 = __error();
        v234 = strerror(*v233);
        rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v235, "Accept", v234);
      }
      unint64_t v236 = 0;
      LODWORD(v324[0]) = v232;
      v237 = v309;
      do
      {
        ssize_t v239 = send((int)v324[0], v237, 4 - v236, 0);
        if (v239 == -1)
        {
          if (*__error() == 35) {
            break;
          }
          v240 = __error();
          v241 = strerror(*v240);
          rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v242, "SendAll", v241);
        }
        v237 += v239;
        v236 += v239;
      }
      while (v236 < 4);
      rabit::utils::Assert((rabit::utils *)(v236 == 4), "ReConnectLink failure 15", v238);
      unint64_t v243 = 0;
      v244 = (char *)v324 + 4;
      do
      {
        ssize_t v245 = recv((int)v324[0], v244, 4 - v243, 64);
        ssize_t v247 = v245;
        if (v245 == -1)
        {
          if (*__error() == 35) {
            break;
          }
          v248 = __error();
          v249 = strerror(*v248);
          rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v250, "RecvAll", v249);
        }
        else if (!v245)
        {
          break;
        }
        v244 += v247;
        v243 += v247;
      }
      while (v243 < 4);
      rabit::utils::Assert((rabit::utils *)(v243 == 4), "ReConnectLink failure 15", v246);
      v222 = v310;
      v253 = (_DWORD *)*((void *)v310 + 4);
      v252 = (_DWORD *)*((void *)v310 + 5);
      if (v253 == v252)
      {
LABEL_268:
        if ((unint64_t)v252 >= *((void *)v310 + 6))
        {
          uint64_t v254 = std::vector<rabit::engine::AllreduceBase::LinkRecord>::__push_back_slow_path<rabit::engine::AllreduceBase::LinkRecord const&>(v308, (uint64_t)v324);
        }
        else
        {
          std::vector<rabit::engine::AllreduceBase::LinkRecord>::__construct_one_at_end[abi:ne180100]<rabit::engine::AllreduceBase::LinkRecord const&>((uint64_t)v308, (long long *)v324);
          uint64_t v254 = (uint64_t)(v252 + 16);
        }
        *((void *)v310 + 5) = v254;
      }
      else
      {
        while (v253[1] != HIDWORD(v324[0]))
        {
          v253 += 16;
          if (v253 == v252) {
            goto LABEL_268;
          }
        }
        rabit::utils::Assert((rabit::utils *)(*v253 == -1), "Override a link that is active", v251);
        _DWORD *v253 = v324[0];
      }
      if ((void)v327)
      {
        *((void *)&v327 + 1) = v327;
        operator delete((void *)v327);
      }
    }
  }
  if (v90 == -1)
  {
    v256 = __error();
    v257 = strerror(*v256);
    rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v258, "Socket::Close double close the socket or close without create", v257);
  }
  else
  {
    close(v90);
  }
  *((_DWORD *)v222 + 5) = -1;
  *((void *)v222 + 9) = *((void *)v222 + 8);
  v259 = (int *)*((void *)v222 + 4);
  v260 = (int *)*((void *)v222 + 5);
  if (v259 != v260)
  {
    v261 = "ReConnectLink: bad socket";
    v262 = "SetNonBlock-1";
    v263 = "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/allreduce_base.cc";
    do
    {
      int v264 = *v259;
      if (*v259 == -1)
      {
        BOOL v269 = 1;
      }
      else
      {
        *(_DWORD *)&v332.sa_len = 0;
        LODWORD(v311.__r_.__value_.__l.__data_) = 4;
        if (getsockopt(v264, 0xFFFF, 4103, &v332, (socklen_t *)&v311))
        {
          v265 = __error();
          v266 = strerror(*v265);
          rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v267, "GetSockError", v266);
        }
        BOOL v269 = *(_DWORD *)&v332.sa_len == 9 || *(_DWORD *)&v332.sa_len == 4;
      }
      rabit::utils::Assert((rabit::utils *)!v269, v261, v255);
      int v270 = fcntl(*v259, 3, 0);
      if (v270 == -1)
      {
        v271 = __error();
        v272 = strerror(*v271);
        rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v273, v262, v272);
      }
      if (fcntl(*v259, 4, v270 | 4u) == -1)
      {
        v274 = __error();
        v275 = strerror(*v274);
        rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v276, "SetNonBlock-2", v275);
      }
      int v277 = *v259;
      *(_DWORD *)&v332.sa_len = 1;
      if (setsockopt(v277, 0xFFFF, 8, &v332, 4u) < 0)
      {
        v278 = __error();
        v279 = strerror(*v278);
        rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v280, "SetKeepAlive", v279);
      }
      if (*((unsigned char *)v310 + 297))
      {
        if (*(int *)(v307 + 4) >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v332, v263);
          xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v324, (uint64_t)&v332, 426, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v324, (uint64_t)"tcp no delay is not implemented on non unix platforms", 53);
          xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v324);
          if (SHIBYTE(v333[0]) < 0) {
            operator delete(*(void **)&v332.sa_len);
          }
        }
      }
      v281 = v322;
      for (int k = v259[1]; v281; v281 = (uint64_t *)*v281)
      {
        int v283 = *((_DWORD *)v281 + 7);
        if (k >= v283)
        {
          if (v283 >= k)
          {
            v284 = v261;
            v285 = (int **)*((void *)v310 + 9);
            if (k == *((_DWORD *)v310 + 6)) {
              *((_DWORD *)v310 + 5) = ((unint64_t)v285 - *((void *)v310 + 8)) >> 3;
            }
            v286 = v263;
            unint64_t v287 = *((void *)v310 + 10);
            if ((unint64_t)v285 >= v287)
            {
              v289 = v262;
              v290 = (void *)*((void *)v310 + 8);
              uint64_t v291 = v285 - (int **)v290;
              unint64_t v292 = v291 + 1;
              if ((unint64_t)(v291 + 1) >> 61) {
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v293 = v287 - (void)v290;
              if (v293 >> 2 > v292) {
                unint64_t v292 = v293 >> 2;
              }
              if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v294 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v294 = v292;
              }
              if (v294)
              {
                if (v294 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v295 = (char *)operator new(8 * v294);
              }
              else
              {
                v295 = 0;
              }
              v296 = (int **)&v295[8 * v291];
              *v296 = v259;
              v288 = v296 + 1;
              if (v285 == v290)
              {
                v298 = v310;
              }
              else
              {
                do
                {
                  v297 = *--v285;
                  *--v296 = v297;
                }
                while (v285 != v290);
                v298 = v310;
                v285 = (int **)*((void *)v310 + 8);
              }
              *((void *)v298 + 8) = v296;
              *((void *)v298 + 9) = v288;
              *((void *)v298 + 10) = &v295[8 * v294];
              v262 = v289;
              if (v285) {
                operator delete(v285);
              }
            }
            else
            {
              *v285 = v259;
              v288 = v285 + 1;
            }
            *((void *)v310 + 9) = v288;
            int k = v259[1];
            v263 = v286;
            v261 = v284;
            break;
          }
          ++v281;
        }
      }
      if (k == HIDWORD(v320)) {
        *((void *)v310 + 11) = v259;
      }
      if (k == v320) {
        *((void *)v310 + 12) = v259;
      }
      v259 += 16;
    }
    while (v259 != v260);
  }
  if (*v306 == -1)
  {
    BOOL v300 = 1;
    v299 = v310;
  }
  else
  {
    v299 = v310;
    BOOL v300 = *((_DWORD *)v310 + 5) != -1;
  }
  rabit::utils::Assert((rabit::utils *)v300, "cannot find parent in the link", v255);
  unint64_t v302 = HIDWORD(v320) == -1 || *((void *)v299 + 11) != 0;
  rabit::utils::Assert((rabit::utils *)v302, "cannot find prev ring in the link", v301);
  unint64_t v304 = v320 == -1 || *((void *)v299 + 12) != 0;
  rabit::utils::Assert((rabit::utils *)v304, "cannot find next ring in the link", v303);
  std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(v322);
  return 1;
}

void sub_22EA0E288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    std::exception_ptr v50 = __cxa_begin_catch(exception_object);
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v51) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/allreduce_base.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&a39, (uint64_t)&__p, 446, 1);
      uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a39, (uint64_t)"failed in ReconnectLink ", 24);
      ssize_t v53 = (const char *)(*(uint64_t (**)(void *))(*(void *)v50 + 16))(v50);
      size_t v54 = strlen(v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a39);
      if (a38 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x22EA0E230);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rabit::engine::AllreduceBase::Shutdown(rabit::engine::AllreduceBase *this)
{
  unint64_t v3 = (int *)*((void *)this + 4);
  unint64_t v4 = (int *)*((void *)this + 5);
  for (unint64_t i = (uint64_t *)((char *)this + 32); v3 != v4; v3 += 16)
  {
    if (*v3 != -1)
    {
      close(*v3);
      *unint64_t v3 = -1;
    }
  }
  std::vector<rabit::engine::AllreduceBase::LinkRecord>::__clear[abi:ne180100](i);
  *((void *)this + 9) = *((void *)this + 8);
  int v5 = (_DWORD *)((char *)this + 176);
  int v6 = *((char *)this + 199);
  if ((v6 & 0x80000000) == 0)
  {
    if (v6 != 4) {
      goto LABEL_11;
    }
LABEL_10:
    if (*v5 == 1280070990) {
      return 1;
    }
    goto LABEL_11;
  }
  if (*((void *)this + 23) == 4)
  {
    int v5 = *(_DWORD **)v5;
    goto LABEL_10;
  }
LABEL_11:
  int v7 = rabit::engine::AllreduceBase::ConnectTracker(this);
  v12[0] = v7;
  std::string::basic_string[abi:ne180100]<0>(__p, "shutdown");
  rabit::utils::TCPSocket::SendStr(v12, (char **)__p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v7 == -1)
  {
    unint64_t v8 = __error();
    int v9 = strerror(*v8);
    rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v10, "Socket::Close double close the socket or close without create", v9);
  }
  else
  {
    close(v7);
  }
  return 1;
}

void sub_22EA0E6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    ssize_t v25 = __cxa_begin_catch(exception_object);
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v26) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&a12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/allreduce_base.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&__p, (uint64_t)&a12, 139, 1);
      BOOL v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to shutdown due to", 25);
      unint64_t v28 = (const char *)(*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
      size_t v29 = strlen(v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&__p);
      if (a17 < 0) {
        operator delete(a12);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x22EA0E694);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rabit::engine::AllreduceBase::ConnectTracker(rabit::engine::AllreduceBase *this)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  int v59 = 65433;
  uint64_t v2 = socket(2, 1, 0);
  int v60 = v2;
  if (v2 == -1)
  {
    unint64_t v4 = __error();
    int v5 = strerror(*v4);
    rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v6, "Create", v5);
  }
  uint64_t v7 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v3);
  int v8 = 1;
  for (unsigned int i = 2; ; i += 2)
  {
    uint64_t v10 = (char *)this + 176;
    if (*((char *)this + 199) < 0) {
      uint64_t v10 = (const char *)*((void *)this + 22);
    }
    rabit::utils::SockAddr::SockAddr((rabit::utils::SockAddr *)&v61, v10, *((_DWORD *)this + 56));
    if (!connect(v2, &v61, 0x10u)) {
      break;
    }
    int v11 = *(_DWORD *)(v7 + 4);
    if (v8 >= *((_DWORD *)this + 70))
    {
      if (v11 >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/allreduce_base.cc");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v61, (uint64_t)__p, 237, 1);
        unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Connect to (failed): [", 22);
        int v19 = *((char *)this + 199);
        int v20 = v19 >= 0
            ? (rabit::engine::AllreduceBase *)((char *)this + 176)
            : (rabit::engine::AllreduceBase *)*((void *)this + 22);
        uint64_t v21 = v19 >= 0 ? *((unsigned __int8 *)this + 199) : *((void *)this + 23);
        int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"]\n", 2);
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v61);
        if (v58 < 0) {
          operator delete(__p[0]);
        }
      }
      ssize_t v23 = __error();
      unint64_t v24 = strerror(*v23);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v25, "Connect", v24);
      break;
    }
    if (v11 >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/allreduce_base.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v61, (uint64_t)__p, 240, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Retry connect to ip(retry time ", 31);
      unint64_t v12 = (void *)std::ostream::operator<<();
      unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"): [", 4);
      int v14 = *((char *)this + 199);
      if (v14 >= 0) {
        ssize_t v15 = (char *)this + 176;
      }
      else {
        ssize_t v15 = (char *)*((void *)this + 22);
      }
      if (v14 >= 0) {
        uint64_t v16 = *((unsigned __int8 *)this + 199);
      }
      else {
        uint64_t v16 = *((void *)this + 23);
      }
      ssize_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"]\n", 2);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v61);
      if (v58 < 0) {
        operator delete(__p[0]);
      }
    }
    sleep(i);
    ++v8;
  }
  unint64_t v26 = 0;
  BOOL v27 = &v59;
  do
  {
    ssize_t v29 = send(v2, v27, 4 - v26, 0);
    if (v29 == -1)
    {
      if (*__error() == 35) {
        break;
      }
      unint64_t v30 = __error();
      ssize_t v31 = strerror(*v30);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v32, "SendAll", v31);
    }
    BOOL v27 = (int *)((char *)v27 + v29);
    v26 += v29;
  }
  while (v26 < 4);
  rabit::utils::Assert((rabit::utils *)(v26 == 4), "ReConnectLink failure 1", v28);
  unint64_t v33 = 0;
  std::string v34 = &v59;
  do
  {
    ssize_t v35 = recv(v2, v34, 4 - v33, 64);
    ssize_t v37 = v35;
    if (v35 == -1)
    {
      if (*__error() == 35) {
        break;
      }
      int v38 = __error();
      uint64_t v39 = strerror(*v38);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v40, "RecvAll", v39);
    }
    else if (!v35)
    {
      break;
    }
    std::string v34 = (int *)((char *)v34 + v37);
    v33 += v37;
  }
  while (v33 < 4);
  rabit::utils::Assert((rabit::utils *)(v33 == 4), "ReConnectLink failure 2", v36);
  rabit::utils::Check((rabit::utils *)(v59 == 65433), "sync::Invalid tracker message, init failure", v41);
  unint64_t v42 = 0;
  double v43 = (char *)this + 272;
  do
  {
    ssize_t v45 = send(v2, v43, 4 - v42, 0);
    if (v45 == -1)
    {
      if (*__error() == 35) {
        break;
      }
      uint64_t v46 = __error();
      uint64_t v47 = strerror(*v46);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v48, "SendAll", v47);
    }
    v43 += v45;
    v42 += v45;
  }
  while (v42 < 4);
  rabit::utils::Assert((rabit::utils *)(v42 == 4), "ReConnectLink failure 3", v44);
  unint64_t v49 = 0;
  std::exception_ptr v50 = (char *)this + 276;
  do
  {
    ssize_t v52 = send(v2, v50, 4 - v49, 0);
    if (v52 == -1)
    {
      if (*__error() == 35) {
        break;
      }
      ssize_t v53 = __error();
      size_t v54 = strerror(*v53);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v55, "SendAll", v54);
    }
    v50 += v52;
    v49 += v52;
  }
  while (v49 < 4);
  rabit::utils::Assert((rabit::utils *)(v49 == 4), "ReConnectLink failure 3", v51);
  rabit::utils::TCPSocket::SendStr(&v60, (char **)this + 16);
  return v2;
}

void sub_22EA0ECB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rabit::utils::TCPSocket::SendStr(int *a1, char **a2)
{
  unint64_t v4 = 0;
  LODWORD(v5) = *((unsigned __int8 *)a2 + 23);
  if ((char)v5 < 0) {
    int v5 = a2[1];
  }
  int v23 = (int)v5;
  int v6 = &v23;
  do
  {
    ssize_t v8 = send(*a1, v6, 4 - v4, 0);
    if (v8 == -1)
    {
      if (*__error() == 35) {
        break;
      }
      int v9 = __error();
      uint64_t v10 = strerror(*v9);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v11, "SendAll", v10);
    }
    int v6 = (int *)((char *)v6 + v8);
    v4 += v8;
  }
  while (v4 < 4);
  rabit::utils::Assert((rabit::utils *)(v4 == 4), "error during send SendStr", v7);
  if (v23)
  {
    unint64_t v13 = (char *)*((unsigned __int8 *)a2 + 23);
    char v14 = (char)v13;
    ssize_t v15 = a2[1];
    unint64_t v16 = 0;
    if ((char)v13 >= 0) {
      ssize_t v17 = (char *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      ssize_t v17 = a2[1];
    }
    if (v17)
    {
      if ((char)v13 >= 0) {
        unint64_t v18 = (char *)a2;
      }
      else {
        unint64_t v18 = *a2;
      }
      do
      {
        ssize_t v19 = send(*a1, v18, (size_t)&v17[-v16], 0);
        if (v19 == -1)
        {
          if (*__error() == 35) {
            break;
          }
          int v20 = __error();
          uint64_t v21 = strerror(*v20);
          rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v22, "SendAll", v21);
        }
        v18 += v19;
        v16 += v19;
      }
      while (v16 < (unint64_t)v17);
      unint64_t v13 = (char *)*((unsigned __int8 *)a2 + 23);
      ssize_t v15 = a2[1];
      char v14 = *((unsigned char *)a2 + 23);
    }
    if (v14 < 0) {
      unint64_t v13 = v15;
    }
    rabit::utils::Assert((rabit::utils *)(v16 == (void)v13), "error during send SendStr", v12);
  }
}

void rabit::engine::AllreduceBase::TrackerPrint(uint64_t a1, char *a2)
{
  __n128 v3 = (void *)(a1 + 176);
  int v4 = *(char *)(a1 + 199);
  if (v4 < 0)
  {
    if (*(void *)(a1 + 184) != 4) {
      goto LABEL_7;
    }
    __n128 v3 = (void *)*v3;
  }
  else if (v4 != 4)
  {
    goto LABEL_7;
  }
  if (*(_DWORD *)v3 == 1280070990)
  {
    if (a2[23] >= 0) {
      int v9 = (uint64_t *)a2;
    }
    else {
      int v9 = *(uint64_t **)a2;
    }
    rabit::utils::Printf((rabit::utils *)a1, a2, v9);
    return;
  }
LABEL_7:
  int v5 = rabit::engine::AllreduceBase::ConnectTracker((rabit::engine::AllreduceBase *)a1);
  int v12 = v5;
  std::string::basic_string[abi:ne180100]<0>(__p, "print");
  rabit::utils::TCPSocket::SendStr(&v12, (char **)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  rabit::utils::TCPSocket::SendStr(&v12, (char **)a2);
  if (v5 == -1)
  {
    int v6 = __error();
    uint64_t v7 = strerror(*v6);
    rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v8, "Socket::Close double close the socket or close without create", v7);
  }
  else
  {
    close(v5);
  }
}

void sub_22EA0EF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rabit::utils::Printf(rabit::utils *this, const char *a2, ...)
{
  va_start(va, a2);
  uint64_t v2 = operator new(0x1008uLL);
  bzero(v2, 0x1001uLL);
  va_copy(v5, va);
  vsnprintf((char *)v2, 0x1000uLL, "%s", va);
  xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v3);
  int v4 = 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v2, 4096);
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v3);
  operator delete(v2);
}

void sub_22EA0F034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t rabit::engine::AllreduceBase::SetParam(rabit::engine::AllreduceBase *this, const char *__s1, const char *a3)
{
  if (!strcmp(__s1, "rabit_tracker_uri")) {
    MEMORY[0x230FA7B10]((char *)this + 176, a3);
  }
  if (!strcmp(__s1, "rabit_tracker_port")) {
    *((_DWORD *)this + 56) = atoi(a3);
  }
  if (!strcmp(__s1, "rabit_task_id")) {
    MEMORY[0x230FA7B10]((char *)this + 128, a3);
  }
  if (!strcmp(__s1, "DMLC_TRACKER_URI")) {
    MEMORY[0x230FA7B10]((char *)this + 176, a3);
  }
  if (!strcmp(__s1, "DMLC_TRACKER_PORT")) {
    *((_DWORD *)this + 56) = atoi(a3);
  }
  if (!strcmp(__s1, "DMLC_TASK_ID")) {
    MEMORY[0x230FA7B10]((char *)this + 128, a3);
  }
  if (!strcmp(__s1, "DMLC_ROLE")) {
    MEMORY[0x230FA7B10]((char *)this + 200, a3);
  }
  if (!strcmp(__s1, "rabit_world_size")) {
    *((_DWORD *)this + 69) = atoi(a3);
  }
  if (!strcmp(__s1, "rabit_hadoop_mode"))
  {
    BOOL v6 = !strcasecmp(a3, "true") || atoi(a3) != 0;
    *((unsigned char *)this + 16) = v6;
  }
  if (!strcmp(__s1, "rabit_tree_reduce_minsize")) {
    *((void *)this + 33) = atoi(a3);
  }
  if (!strcmp(__s1, "rabit_reduce_ring_mincount"))
  {
    int v7 = atoi(a3);
    *((void *)this + 32) = v7;
    rabit::utils::Assert((rabit::utils *)(v7 != 0), "rabit_reduce_ring_mincount should be greater than 0", v8);
  }
  if (!strcmp(__s1, "rabit_reduce_buffer"))
  {
    char v19 = 0;
    uint64_t v18 = 0;
    int v9 = sscanf(a3, "%lu%c", &v18, &v19);
    uint64_t v11 = v18;
    if (v9 != 1)
    {
      if (v9 != 2)
      {
        rabit::utils::Error((rabit::utils *)"invalid format for %s,shhould be {integer}{unit}, unit can be {B, KB, MB, GB}", v10, __s1);
LABEL_34:
        uint64_t v11 = 0;
        goto LABEL_35;
      }
      if (v19 > 74)
      {
        if (v19 == 77)
        {
          uint64_t v11 = v18 << 20;
          goto LABEL_35;
        }
        if (v19 == 75)
        {
          uint64_t v11 = v18 << 10;
          goto LABEL_35;
        }
LABEL_62:
        rabit::utils::Error((rabit::utils *)"invalid format for %s", v10, __s1);
        goto LABEL_34;
      }
      if (v19 != 66)
      {
        if (v19 == 71)
        {
          uint64_t v11 = v18 << 30;
          goto LABEL_35;
        }
        goto LABEL_62;
      }
    }
LABEL_35:
    *((void *)this + 30) = (unint64_t)(v11 + 7) >> 3;
  }
  if (!strcmp(__s1, "DMLC_WORKER_CONNECT_RETRY")) {
    *((_DWORD *)this + 70) = atoi(a3);
  }
  if (!strcmp(__s1, "rabit_bootstrap_cache"))
  {
    BOOL v12 = !strcasecmp(a3, "true") || atoi(a3) != 0;
    *((unsigned char *)this + 284) = v12;
  }
  if (!strcmp(__s1, "rabit_debug"))
  {
    BOOL v13 = !strcasecmp(a3, "true") || atoi(a3) != 0;
    *((unsigned char *)this + 285) = v13;
  }
  if (!strcmp(__s1, "rabit_timeout"))
  {
    BOOL v14 = !strcasecmp(a3, "true") || atoi(a3) != 0;
    *((unsigned char *)this + 296) = v14;
  }
  if (!strcmp(__s1, "rabit_timeout_sec"))
  {
    int v15 = atoi(a3);
    *((void *)this + 36) = v15;
    rabit::utils::Assert((rabit::utils *)(v15 >= 0), "rabit_timeout_sec should be non negative second", v16);
  }
  uint64_t result = strcmp(__s1, "rabit_enable_tcp_no_delay");
  if (!result)
  {
    uint64_t result = strcmp(a3, "true");
    *((unsigned char *)this + 297) = result == 0;
  }
  return result;
}

uint64_t rabit::engine::AllreduceBase::TryAllreduce(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, void (*a5)(unint64_t, unint64_t, unint64_t, unint64_t *))
{
  if (*(void *)(a1 + 256) >= a4) {
    return rabit::engine::AllreduceBase::TryAllreduceTree(a1, (uint64_t)a2, a3, a4, (void (*)(unint64_t, const char *, unint64_t, unint64_t *))a5);
  }
  else {
    return rabit::engine::AllreduceBase::TryAllreduceRing(a1, a2, a3, a4, a5);
  }
}

uint64_t rabit::engine::AllreduceBase::TryAllreduceRing(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, void (*a5)(unint64_t, unint64_t, unint64_t, unint64_t *))
{
  uint64_t result = rabit::engine::AllreduceBase::TryReduceScatterRing(a1, (uint64_t)a2, a3, a4, a5);
  if (!result)
  {
    unint64_t v10 = (a4 + *(int *)(a1 + 276) - 1) / *(int *)(a1 + 276);
    unint64_t v11 = v10 * *(int *)(a1 + 272);
    if (v11 >= a4) {
      unint64_t v12 = a4;
    }
    else {
      unint64_t v12 = v10 * *(int *)(a1 + 272);
    }
    unint64_t v13 = v10 + v11;
    if (v13 >= a4) {
      unint64_t v13 = a4;
    }
    BOOL v14 = (const char *)(v13 * a3);
    unint64_t v15 = v10 * *(int *)(*(void *)(a1 + 88) + 4);
    unint64_t v16 = v10 + v15;
    if (v16 >= a4) {
      unint64_t v16 = a4;
    }
    if (v15 >= a4) {
      unint64_t v15 = a4;
    }
    return rabit::engine::AllreduceBase::TryAllgatherRing((rabit::engine::AllreduceBase *)a1, a2, (const char *)(a4 * a3), (const char *)(v12 * a3), v14, (v16 - v15) * a3);
  }
  return result;
}

uint64_t rabit::engine::AllreduceBase::TryAllreduceTree(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(unint64_t, const char *, unint64_t, unint64_t *))
{
  uint64_t v5 = 0;
  if (!a4) {
    return v5;
  }
  unint64_t v7 = *(void *)(a1 + 72) - *(void *)(a1 + 64);
  if (!v7) {
    return v5;
  }
  unint64_t v8 = v7 >> 3;
  if ((int)(v7 >> 3) <= 0)
  {
    long long v91 = 0u;
    long long v92 = 0u;
    int v93 = 1065353216;
    goto LABEL_103;
  }
  uint64_t v10 = 0;
  unint64_t v11 = (const char *)(a4 * a3);
  unint64_t v82 = *(void *)(a1 + 264) / a3 * a3;
  uint64_t v12 = (v7 >> 3);
  do
  {
    uint64_t v13 = *(void *)(a1 + 64);
    if (v10 != *(_DWORD *)(a1 + 20))
    {
      rabit::engine::AllreduceBase::LinkRecord::InitBuffer(*(rabit::engine::AllreduceBase::LinkRecord **)(v13 + 8 * v10), a3, a4, *(void *)(a1 + 240));
      uint64_t v13 = *(void *)(a1 + 64);
    }
    uint64_t v14 = *(void *)(v13 + 8 * v10);
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0;
    ++v10;
  }
  while (v12 != v10);
  uint64_t v87 = 0;
  unint64_t v15 = 0;
  int v81 = v8;
  if (v8 == (*(_DWORD *)(a1 + 20) != -1)) {
    unint64_t v16 = v11;
  }
  else {
    unint64_t v16 = 0;
  }
  long long v91 = 0uLL;
  long long v92 = 0uLL;
  int v93 = 1065353216;
  unint64_t v17 = v82;
LABEL_12:
  uint64_t v18 = 0;
  char v19 = v16;
  unint64_t v86 = (unint64_t)v15;
  BOOL v21 = v15 != v11 && v15 < v16;
  char v22 = 1;
  do
  {
    while (1)
    {
      if (v18 == *(_DWORD *)(a1 + 20))
      {
        if (v11 != v87)
        {
          LODWORD(v90) = **(_DWORD **)(*(void *)(a1 + 64) + 8 * v18);
          int v23 = v90;
          unint64_t v24 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v91, v90, &v90);
          *((_DWORD *)v24 + 5) = v23;
          *((_WORD *)v24 + 12) |= 1u;
          LODWORD(v90) = **(_DWORD **)(*(void *)(a1 + 64) + 8 * v18);
          int v25 = v90;
          unint64_t v26 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v91, v90, &v90);
          char v22 = 0;
          *((_DWORD *)v26 + 5) = v25;
          *((_WORD *)v26 + 12) |= 2u;
        }
        if (v21)
        {
          LODWORD(v90) = **(_DWORD **)(*(void *)(a1 + 64) + 8 * v18);
          int v27 = v90;
          unint64_t v28 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v91, v90, &v90);
          *((_DWORD *)v28 + 5) = v27;
          *((_WORD *)v28 + 12) |= 4u;
        }
        break;
      }
      uint64_t v29 = *(void *)(*(void *)(a1 + 64) + 8 * v18);
      if (*(const char **)(v29 + 8) != v11)
      {
        LODWORD(v90) = *(_DWORD *)v29;
        int v30 = v90;
        ssize_t v31 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v91, v90, &v90);
        *((_DWORD *)v31 + 5) = v30;
        *((_WORD *)v31 + 12) |= 1u;
        uint64_t v29 = *(void *)(*(void *)(a1 + 64) + 8 * v18);
      }
      long long v32 = *(const char **)(v29 + 16);
      if (v32 == v11) {
        break;
      }
      if (v32 < v87)
      {
        LODWORD(v90) = *(_DWORD *)v29;
        int v33 = v90;
        std::string v34 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v91, v90, &v90);
        *((_DWORD *)v34 + 5) = v33;
        *((_WORD *)v34 + 12) |= 4u;
        uint64_t v29 = *(void *)(*(void *)(a1 + 64) + 8 * v18);
      }
      LODWORD(v90) = *(_DWORD *)v29;
      int v35 = v90;
      unint64_t v36 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v91, v90, &v90);
      char v22 = 0;
      *((_DWORD *)v36 + 5) = v35;
      *((_WORD *)v36 + 12) |= 2u;
      if (++v18 == v12) {
        goto LABEL_34;
      }
    }
    ++v18;
  }
  while (v18 != v12);
  if (v22)
  {
LABEL_103:
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v91);
    return 0;
  }
LABEL_34:
  rabit::utils::PollHelper::Poll((float *)&v91, *(void *)(a1 + 288));
  uint64_t v38 = 0;
  uint64_t v39 = v19;
  do
  {
    if (v38 != *(_DWORD *)(a1 + 20))
    {
      BOOL v40 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::find<int>(v91, *((unint64_t *)&v91 + 1), **(_DWORD **)(*(void *)(a1 + 64) + 8 * v38));
      if (v40)
      {
        if (v40[3])
        {
          while (1)
          {
            int v41 = *(rabit::engine::AllreduceBase::LinkRecord **)(*(void *)(a1 + 64) + 8 * v38);
            unint64_t v42 = *((void *)v41 + 1);
            if (v42 >= (unint64_t)v11 || v42 - (unint64_t)v19 >= v17) {
              break;
            }
            uint64_t v5 = rabit::engine::AllreduceBase::LinkRecord::ReadToRingBuffer(v41, v86, v11);
            if (v5) {
              goto LABEL_115;
            }
          }
        }
      }
    }
    ++v38;
  }
  while (v38 != v12);
  int v44 = *(_DWORD *)(a1 + 20);
  if (v81 > (v44 != -1))
  {
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    unint64_t v47 = (unint64_t)v11;
    do
    {
      if (v45 != *(_DWORD *)(a1 + 20))
      {
        uint64_t v48 = *(void *)(*(void *)(a1 + 64) + 8 * v45);
        if (*(void *)(v48 + 8) < v47) {
          unint64_t v47 = *(void *)(v48 + 8);
        }
        if (v46) {
          BOOL v49 = v46 == *(void *)(v48 + 32);
        }
        else {
          BOOL v49 = 1;
        }
        rabit::utils::Assert((rabit::utils *)v49, "buffer size inconsistent", v37);
        unint64_t v46 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8 * v45) + 32);
      }
      ++v45;
    }
    while (v12 != v45);
    rabit::utils::Assert((rabit::utils *)(v46 != 0), "must assign buffer_size", v37);
    uint64_t v39 = v19;
    unint64_t v51 = v47 / a3 * a3;
    if (v51 < (unint64_t)v11) {
      unint64_t v51 = v51 / v17 * v17;
    }
    if ((unint64_t)v19 < v51)
    {
      do
      {
        unint64_t v52 = (unint64_t)v39 % v46;
        unint64_t v53 = v51;
        unint64_t v54 = v51 - (void)v39;
        if (v54 >= v46 - (unint64_t)v39 % v46) {
          unint64_t v55 = v46 - (unint64_t)v39 % v46;
        }
        else {
          unint64_t v55 = v54;
        }
        rabit::utils::Assert((rabit::utils *)(v55 % a3 == 0), "Allreduce: size check", v50);
        uint64_t v56 = 0;
        ssize_t v83 = v39;
        int v57 = &v39[a2];
        do
        {
          if (v56 != *(_DWORD *)(a1 + 20))
          {
            uint64_t v58 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8 * v56) + 24);
            unint64_t v90 = a3;
            a5(v58 + v52, v57, v55 / a3, &v90);
          }
          ++v56;
        }
        while (v12 != v56);
        uint64_t v39 = &v83[v55];
        unint64_t v51 = v53;
      }
      while ((unint64_t)&v83[v55] < v53);
    }
    int v44 = *(_DWORD *)(a1 + 20);
    unint64_t v17 = v82;
  }
  int v59 = v39;
  size_t v84 = v39;
  unint64_t v60 = v86;
  if (v44 == -1) {
    goto LABEL_93;
  }
  if ((unint64_t)v39 > v86)
  {
    ssize_t v61 = send(**(_DWORD **)(*(void *)(a1 + 64) + 8 * v44), (const void *)(a2 + v86), (size_t)&v39[-v86], 0);
    if (v61 == -1)
    {
      int v62 = *__error();
      if (v62 && v62 != 35)
      {
        if (v62 == 54) {
          uint64_t v5 = 1;
        }
        else {
          uint64_t v5 = 3;
        }
        goto LABEL_112;
      }
    }
    else
    {
      unint64_t v60 = v61 + v86;
    }
  }
  std::vector<char>::pointer v63 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::find<int>(v91, *((unint64_t *)&v91 + 1), **(_DWORD **)(*(void *)(a1 + 64) + 8 * *(int *)(a1 + 20)));
  if (!v63
    || (v63[3] & 1) == 0
    || (unint64_t v64 = (const char *)(v11 - v87), v11 <= v87)
    || (v17 >= (unint64_t)v64 ? (uint64_t v65 = (const char *)(v11 - v87)) : (uint64_t v65 = (const char *)v17), !v65))
  {
LABEL_92:
    int v59 = (const char *)v60;
    uint64_t v39 = v87;
LABEL_93:
    uint64_t v38 = 0;
    while (1)
    {
      if (v38 != *(_DWORD *)(a1 + 20))
      {
        uint64_t v72 = *(void *)(*(void *)(a1 + 64) + 8 * v38);
        unint64_t v73 = *(void *)(v72 + 16);
        if ((unint64_t)v39 > v73)
        {
          ssize_t v74 = send(*(_DWORD *)v72, (const void *)(a2 + v73), (size_t)&v39[-v73], 0);
          if (v74 == -1)
          {
            int v75 = *__error();
            if (v75 && v75 != 35)
            {
              if (v75 == 54) {
                uint64_t v5 = 1;
              }
              else {
                uint64_t v5 = 3;
              }
              goto LABEL_115;
            }
          }
          else
          {
            *(void *)(v72 + 16) += v74;
          }
        }
      }
      if (v12 == ++v38)
      {
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v91);
        long long v91 = 0u;
        long long v92 = 0u;
        uint64_t v87 = v39;
        unint64_t v15 = v59;
        int v93 = 1065353216;
        unint64_t v16 = v84;
        goto LABEL_12;
      }
    }
  }
  unint64_t v66 = 0;
  while (1)
  {
    ssize_t v67 = recv(**(_DWORD **)(*(void *)(a1 + 64) + 8 * *(int *)(a1 + 20)), (void *)&v87[a2], v11 - v87, 0);
    ssize_t v69 = v67;
    if (v67 != -1) {
      break;
    }
    int v71 = *__error();
    if (v71 && v71 != 35)
    {
      if (v71 == 54) {
        uint64_t v5 = 1;
      }
      else {
        uint64_t v5 = 3;
      }
LABEL_112:
      uint64_t v38 = *(int *)(a1 + 20);
      goto LABEL_115;
    }
LABEL_91:
    if (v66 >= (unint64_t)v65) {
      goto LABEL_92;
    }
  }
  if (v67)
  {
    v87 += v67;
    rabit::utils::Assert((rabit::utils *)((unint64_t)v87 <= v60), "Allreduce: boundary error", v68);
    v66 += v69;
    while (v66 > (unint64_t)v65)
    {
      int64_t v70 = v64 - v65;
      if (v17 < v64 - v65) {
        int64_t v70 = v17;
      }
      v65 += v70;
    }
    goto LABEL_91;
  }
  uint64_t v76 = *(int **)(*(void *)(a1 + 64) + 8 * *(int *)(a1 + 20));
  if (*v76 == -1)
  {
    ssize_t v77 = __error();
    uint64_t v78 = strerror(*v77);
    rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v79, "Socket::Close double close the socket or close without create", v78);
  }
  else
  {
    close(*v76);
    *uint64_t v76 = -1;
  }
  uint64_t v38 = *(int *)(a1 + 20);
  uint64_t v5 = 2;
LABEL_115:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 64) + 8 * v38);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v91);
  return v5;
}

void sub_22EA0FC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void rabit::engine::AllreduceBase::LinkRecord::InitBuffer(rabit::engine::AllreduceBase::LinkRecord *this, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a3 * a2 + 7;
  if (a4 >= v6 >> 3) {
    unint64_t v7 = v6 >> 3;
  }
  else {
    unint64_t v7 = a4;
  }
  std::vector<unsigned long>::resize((uint64_t)this + 40, v7);
  unint64_t v8 = ((*((void *)this + 6) - *((void *)this + 5)) & 0xFFFFFFFFFFFFFFF8) / a2 * a2;
  *((void *)this + 4) = v8;
  rabit::utils::Assert((rabit::utils *)(v8 >= a2), "too large type_nbytes=%lu, buffer_size=%lu", v9, a2, v8);
  if (*((void *)this + 6) == *((void *)this + 5)) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *((void *)this + 5);
  }
  *((void *)this + 3) = v10;
}

void rabit::utils::PollHelper::Poll(float *a1, int a2)
{
  unint64_t v3 = *((void *)a1 + 3);
  if (v3)
  {
    if (v3 >> 61) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    int v4 = (pollfd *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v3);
    unint64_t v6 = &v4[v5];
  }
  else
  {
    int v4 = 0;
    unint64_t v6 = 0;
  }
  unint64_t v7 = (void *)*((void *)a1 + 2);
  if (v7)
  {
    unint64_t v8 = (char *)v4;
    do
    {
      pollfd v9 = *(pollfd *)((char *)v7 + 20);
      if (v8 >= (char *)v6)
      {
        uint64_t v11 = (v8 - (char *)v4) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v6 - (char *)v4) >> 2 > v12) {
          unint64_t v12 = ((char *)v6 - (char *)v4) >> 2;
        }
        if ((unint64_t)((char *)v6 - (char *)v4) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        unint64_t v15 = (pollfd *)(v13 + 8 * v11);
        *unint64_t v15 = v9;
        uint64_t v10 = v15 + 1;
        while (v8 != (char *)v4)
        {
          pollfd v16 = (pollfd)*((void *)v8 - 1);
          v8 -= 8;
          v15[-1] = v16;
          --v15;
        }
        unint64_t v6 = (pollfd *)(v13 + 8 * v14);
        if (v4) {
          operator delete(v4);
        }
        int v4 = v15;
      }
      else
      {
        *(pollfd *)unint64_t v8 = v9;
        uint64_t v10 = (pollfd *)(v8 + 8);
      }
      unint64_t v7 = (void *)*v7;
      unint64_t v8 = (char *)v10;
    }
    while (v7);
  }
  else
  {
    uint64_t v10 = v4;
  }
  int v17 = poll(v4, (unint64_t)((char *)v10 - (char *)v4) >> 3, 1000 * a2);
  if (v17)
  {
    if (v17 < 0)
    {
      uint64_t v38 = __error();
      uint64_t v39 = strerror(*v38);
      rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v40, "Poll", v39);
    }
    else if (v4 != v10)
    {
      uint64_t v18 = v4;
      do
      {
        int revents = (unsigned __int16)v18->revents;
        int events = (unsigned __int16)v18->events;
        unint64_t fd = v18->fd;
        if ((events & revents) != 0)
        {
          *((_WORD *)std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, fd, v18)+ 12) = events & revents;
          goto LABEL_33;
        }
        int8x8_t v22 = *(int8x8_t *)(a1 + 2);
        if (v22)
        {
          uint8x8_t v23 = (uint8x8_t)vcnt_s8(v22);
          v23.i16[0] = vaddlv_u8(v23);
          if (v23.u32[0] > 1uLL)
          {
            uint64_t v24 = v18->fd;
            if (*(void *)&v22 <= fd) {
              uint64_t v24 = fd % *(void *)&v22;
            }
          }
          else
          {
            uint64_t v24 = (*(void *)&v22 - 1) & fd;
          }
          uint64_t v25 = *(void *)a1;
          unint64_t v26 = *(uint64_t ***)(*(void *)a1 + 8 * v24);
          if (v26)
          {
            int v27 = *v26;
            if (*v26)
            {
              uint64_t v28 = *(void *)&v22 - 1;
              do
              {
                unint64_t v29 = v27[1];
                if (v29 == fd)
                {
                  if (*((_DWORD *)v27 + 4) == fd)
                  {
                    if (v23.u32[0] > 1uLL)
                    {
                      if (*(void *)&v22 <= fd) {
                        fd %= *(void *)&v22;
                      }
                    }
                    else
                    {
                      fd &= v28;
                    }
                    uint64_t v30 = *v27;
                    ssize_t v31 = *(uint64_t **)(v25 + 8 * fd);
                    do
                    {
                      long long v32 = v31;
                      ssize_t v31 = (uint64_t *)*v31;
                    }
                    while (v31 != v27);
                    if (v32 == (uint64_t *)(a1 + 4)) {
                      goto LABEL_70;
                    }
                    unint64_t v33 = v32[1];
                    if (v23.u32[0] > 1uLL)
                    {
                      if (v33 >= *(void *)&v22) {
                        v33 %= *(void *)&v22;
                      }
                    }
                    else
                    {
                      v33 &= v28;
                    }
                    if (v33 == fd)
                    {
LABEL_72:
                      if (v30)
                      {
                        unint64_t v34 = *(void *)(v30 + 8);
                        goto LABEL_74;
                      }
                    }
                    else
                    {
LABEL_70:
                      if (!v30) {
                        goto LABEL_71;
                      }
                      unint64_t v34 = *(void *)(v30 + 8);
                      if (v23.u32[0] > 1uLL)
                      {
                        unint64_t v35 = *(void *)(v30 + 8);
                        if (v34 >= *(void *)&v22) {
                          unint64_t v35 = v34 % *(void *)&v22;
                        }
                      }
                      else
                      {
                        unint64_t v35 = v34 & v28;
                      }
                      if (v35 != fd)
                      {
LABEL_71:
                        *(void *)(v25 + 8 * fd) = 0;
                        uint64_t v30 = *v27;
                        goto LABEL_72;
                      }
LABEL_74:
                      if (v23.u32[0] > 1uLL)
                      {
                        if (v34 >= *(void *)&v22) {
                          v34 %= *(void *)&v22;
                        }
                      }
                      else
                      {
                        v34 &= v28;
                      }
                      if (v34 != fd)
                      {
                        *(void *)(*(void *)a1 + 8 * v34) = v32;
                        uint64_t v30 = *v27;
                      }
                    }
                    uint64_t *v32 = v30;
                    uint64_t *v27 = 0;
                    --*((void *)a1 + 3);
                    operator delete(v27);
                    break;
                  }
                }
                else
                {
                  if (v23.u32[0] > 1uLL)
                  {
                    if (v29 >= *(void *)&v22) {
                      v29 %= *(void *)&v22;
                    }
                  }
                  else
                  {
                    v29 &= v28;
                  }
                  if (v29 != v24) {
                    break;
                  }
                }
                int v27 = (uint64_t *)*v27;
              }
              while (v27);
            }
          }
        }
LABEL_33:
        ++v18;
      }
      while (v18 != v10);
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/rabit/internal/socket.h");
    ssize_t v37 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Poll timeout", 12);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v42);
  }
  if (v4) {
    operator delete(v4);
  }
}

void sub_22EA100EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a17);
  if (v17) {
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t rabit::engine::AllreduceBase::LinkRecord::ReadToRingBuffer(rabit::engine::AllreduceBase::LinkRecord *this, uint64_t a2, const char *a3)
{
  rabit::utils::Assert((rabit::utils *)(*((void *)this + 3) != 0), "ReadToRingBuffer: buffer not allocated", a3);
  rabit::utils::Assert((rabit::utils *)(*((void *)this + 1) <= (unint64_t)a3), "ReadToRingBuffer: max_size_read check", v6);
  unint64_t v7 = *((void *)this + 1) - a2;
  rabit::utils::Assert((rabit::utils *)(v7 <= *((void *)this + 4)), "Allreduce: boundary check", v8);
  unint64_t v9 = *((void *)this + 1);
  unint64_t v10 = *((void *)this + 4);
  unint64_t v11 = v9 % v10;
  unint64_t v12 = &a3[-v9];
  if ((unint64_t)v12 >= v10 - v7) {
    unint64_t v12 = (const char *)(v10 - v7);
  }
  size_t v13 = v10 - v11;
  if ((unint64_t)v12 >= v13) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = (size_t)v12;
  }
  if (!v14) {
    return 0;
  }
  ssize_t v15 = recv(*(_DWORD *)this, (void *)(*((void *)this + 3) + v11), v14, 0);
  if (v15 == -1)
  {
    uint64_t v18 = __error();
    uint64_t result = 0;
    int v19 = *v18;
    if (v19 && v19 != 35)
    {
      if (v19 == 54) {
        return 1;
      }
      else {
        return 3;
      }
    }
  }
  else
  {
    ssize_t v16 = v15;
    if (v15)
    {
      uint64_t result = 0;
      *((void *)this + 1) += v16;
    }
    else
    {
      if (*(_DWORD *)this == -1)
      {
        int v20 = __error();
        BOOL v21 = strerror(*v20);
        rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v22, "Socket::Close double close the socket or close without create", v21);
      }
      else
      {
        close(*(_DWORD *)this);
        *(_DWORD *)this = -1;
      }
      return 2;
    }
  }
  return result;
}

uint64_t rabit::engine::AllreduceBase::TryBroadcast(rabit::engine::AllreduceBase *this, char *a2, const char *a3, unsigned int a4)
{
  uint64_t v4 = 0;
  if (!a3 || *((void *)this + 9) == *((void *)this + 8)) {
    return v4;
  }
  uint64_t v8 = a4;
  rabit::utils::Check((rabit::utils *)(*((_DWORD *)this + 69) > (int)a4), "Broadcast: root should be smaller than world size", a3);
  unint64_t v9 = *((void *)this + 9) - *((void *)this + 8);
  if ((int)(v9 >> 3) <= 0)
  {
    long long v55 = 0u;
    long long v56 = 0u;
    int v57 = 1065353216;
    goto LABEL_60;
  }
  uint64_t v10 = 0;
  uint64_t v11 = (v9 >> 3);
  uint64_t v12 = 8 * v11;
  do
  {
    uint64_t v13 = *(void *)(*((void *)this + 8) + v10);
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0;
    v10 += 8;
  }
  while (v12 != v10);
  unint64_t v54 = a2;
  uint64_t v14 = *((unsigned int *)this + 68);
  long long v55 = 0u;
  long long v56 = 0u;
  int v57 = 1065353216;
  if (v14 == v8) {
    ssize_t v15 = a3;
  }
  else {
    ssize_t v15 = 0;
  }
  if (v14 == v8) {
    uint64_t v16 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v16 = 4294967294;
  }
  while (2)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 8 * v16;
    char v19 = 1;
    do
    {
      if (v16 == 4294967294)
      {
        int v58 = **(_DWORD **)(*((void *)this + 8) + v17);
        int v20 = v58;
        BOOL v21 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v55, v58, &v58);
        *((_DWORD *)v21 + 5) = v20;
        *((_WORD *)v21 + 12) |= 1u;
        if (v18 == v17)
        {
          char v19 = 0;
          uint64_t v22 = *((void *)this + 8);
LABEL_17:
          uint64_t v23 = *(void *)(v22 + 8 * v16);
          if (*(const char **)(v23 + 8) == a3) {
            goto LABEL_24;
          }
          int v58 = *(_DWORD *)v23;
          int v24 = v58;
          uint64_t v25 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v55, v58, &v58);
          char v19 = 0;
          *((_DWORD *)v25 + 5) = v24;
          __int16 v26 = *((_WORD *)v25 + 12) | 1;
LABEL_22:
          *((_WORD *)v25 + 12) = v26;
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v22 = *((void *)this + 8);
        if (v18 == v17) {
          goto LABEL_17;
        }
        uint64_t v27 = *(void *)(v22 + v17);
        uint64_t v28 = *(const char **)(v27 + 16);
        if (v28 == a3) {
          goto LABEL_24;
        }
        if (v28 < v15)
        {
          int v58 = *(_DWORD *)v27;
          int v29 = v58;
          uint64_t v25 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v55, v58, &v58);
          char v19 = 0;
          *((_DWORD *)v25 + 5) = v29;
          __int16 v26 = *((_WORD *)v25 + 12) | 4;
          goto LABEL_22;
        }
      }
      char v19 = 0;
LABEL_24:
      int v58 = **(_DWORD **)(*((void *)this + 8) + v17);
      int v30 = v58;
      ssize_t v31 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v55, v58, &v58);
      *((_DWORD *)v31 + 5) = v30;
      *((_WORD *)v31 + 12) |= 2u;
      v17 += 8;
    }
    while (v12 != v17);
    if (v19)
    {
LABEL_60:
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v55);
      return 0;
    }
    rabit::utils::PollHelper::Poll((float *)&v55, *((void *)this + 36));
    if (v16 == 4294967294)
    {
      uint64_t v16 = 0;
      uint64_t v32 = *((void *)this + 8);
      while (1)
      {
        uint64_t v33 = *(void *)(v32 + 8 * v16);
        int v34 = *(_DWORD *)v33;
        unint64_t v35 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::find<int>(v55, *((unint64_t *)&v55 + 1), *(_DWORD *)v33);
        if (v35 && (v35[3] & 1) != 0)
        {
          unint64_t v36 = *(const char **)(v33 + 8);
          if (a3 != v36)
          {
            ssize_t v37 = recv(v34, (void *)&v36[(void)v54], a3 - v36, 0);
            if (v37 == -1)
            {
              int v38 = *__error();
              if (v38 && v38 != 35)
              {
                if (v38 == 54) {
                  uint64_t v4 = 1;
                }
                else {
                  uint64_t v4 = 3;
                }
                goto LABEL_72;
              }
            }
            else
            {
              if (!v37)
              {
                int v49 = *(_DWORD *)v33;
                if (*(_DWORD *)v33 != -1) {
                  goto LABEL_66;
                }
LABEL_70:
                std::exception_ptr v50 = __error();
                unint64_t v51 = strerror(*v50);
                rabit::utils::Error((rabit::utils *)"Socket %s Error:%s", v52, "Socket::Close double close the socket or close without create", v51);
                goto LABEL_71;
              }
              *(void *)(v33 + 8) += v37;
            }
          }
          uint64_t v32 = *((void *)this + 8);
          ssize_t v15 = *(const char **)(*(void *)(v32 + 8 * v16) + 8);
          if (v15)
          {
            uint64_t v16 = v16;
            goto LABEL_50;
          }
        }
        if (v11 == ++v16)
        {
          uint64_t v16 = 4294967294;
          goto LABEL_50;
        }
      }
    }
    if ((v16 & 0x80000000) == 0)
    {
      uint64_t v33 = *(void *)(*((void *)this + 8) + 8 * v16);
      int v39 = *(_DWORD *)v33;
      BOOL v40 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::find<int>(v55, *((unint64_t *)&v55 + 1), *(_DWORD *)v33);
      if (v40)
      {
        if (v40[3])
        {
          int v41 = *(const char **)(v33 + 8);
          if (a3 != v41)
          {
            ssize_t v42 = recv(v39, (void *)&v41[(void)v54], a3 - v41, 0);
            if (v42 == -1)
            {
              int v43 = *__error();
              if (v43 && v43 != 35)
              {
                if (v43 == 54) {
                  uint64_t v4 = 1;
                }
                else {
                  uint64_t v4 = 3;
                }
                goto LABEL_72;
              }
            }
            else
            {
              if (!v42)
              {
                int v49 = *(_DWORD *)v33;
                if (*(_DWORD *)v33 == -1) {
                  goto LABEL_70;
                }
LABEL_66:
                close(v49);
                *(_DWORD *)uint64_t v33 = -1;
LABEL_71:
                uint64_t v4 = 2;
                goto LABEL_72;
              }
              *(void *)(v33 + 8) += v42;
            }
          }
          ssize_t v15 = *(const char **)(*(void *)(*((void *)this + 8) + 8 * v16) + 8);
        }
      }
    }
LABEL_50:
    uint64_t v44 = 0;
LABEL_51:
    if (v16 == v44) {
      goto LABEL_57;
    }
    uint64_t v45 = *(void *)(*((void *)this + 8) + 8 * v44);
    unint64_t v46 = *(void *)(v45 + 16);
    if ((unint64_t)v15 <= v46) {
      goto LABEL_57;
    }
    ssize_t v47 = send(*(_DWORD *)v45, &v54[v46], (size_t)&v15[-v46], 0);
    if (v47 != -1)
    {
      *(void *)(v45 + 16) += v47;
      goto LABEL_57;
    }
    int v48 = *__error();
    if (!v48 || v48 == 35)
    {
LABEL_57:
      if (v11 == ++v44)
      {
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v55);
        long long v55 = 0u;
        long long v56 = 0u;
        int v57 = 1065353216;
        continue;
      }
      goto LABEL_51;
    }
    break;
  }
  if (v48 == 54) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = 3;
  }
  uint64_t v16 = v44;
LABEL_72:
  *((void *)this + 7) = *(void *)(*((void *)this + 8) + 8 * v16);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v55);
  return v4;
}

void sub_22EA10764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t rabit::engine::AllreduceBase::TryAllgatherRing(rabit::engine::AllreduceBase *this, void *a2, const char *a3, const char *a4, const char *a5, uint64_t a6)
{
  uint64_t v11 = (int *)*((void *)this + 12);
  int v12 = *((_DWORD *)this + 68);
  int v13 = *((_DWORD *)this + 69);
  unint64_t v35 = (int *)*((void *)this + 11);
  if (v11[1] == (v12 + 1) % v13) {
    uint64_t v14 = (rabit::utils *)(v12 == (*(_DWORD *)(*((void *)this + 11) + 4) + 1) % v13);
  }
  else {
    uint64_t v14 = 0;
  }
  rabit::utils::Assert(v14, "need to assume rank structure", a3, a2);
  ssize_t v15 = &a3[(void)a4];
  uint64_t v16 = &a3[(void)a4 - a6];
  while (1)
  {
    uint64_t v17 = a5;
    memset(v36, 0, sizeof(v36));
    int v37 = 1065353216;
    if (v15 == a5)
    {
      if (a4 == v16)
      {
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v36);
        return 0;
      }
    }
    else
    {
      int v38 = *v11;
      int v18 = v38;
      char v19 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)v36, v38, &v38);
      *((_DWORD *)v19 + 5) = v18;
      *((_WORD *)v19 + 12) |= 1u;
      if (a4 == v16)
      {
        char v20 = 1;
        goto LABEL_13;
      }
    }
    if (a4 >= v17)
    {
      char v20 = 0;
    }
    else
    {
      int v38 = *v35;
      int v21 = v38;
      uint64_t v22 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)v36, v38, &v38);
      char v20 = 0;
      *((_DWORD *)v22 + 5) = v21;
      *((_WORD *)v22 + 12) |= 4u;
    }
LABEL_13:
    rabit::utils::PollHelper::Poll((float *)v36, *((void *)this + 36));
    a5 = v15;
    if (v15 != v17)
    {
      int v23 = *v11;
      int v24 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::find<int>(*(uint64_t *)&v36[0], *((unint64_t *)&v36[0] + 1), *v11);
      if (v24 && (v24[3] & 1) != 0)
      {
        if (&v15[-((unint64_t)v17 / (unint64_t)a3 * (void)a3)] <= a3) {
          size_t v25 = v15 - v17;
        }
        else {
          size_t v25 = (size_t)&a3[-((unint64_t)v17 % (unint64_t)a3)];
        }
        ssize_t v26 = recv(v23, (void *)(v34 + (unint64_t)v17 % (unint64_t)a3), v25, 0);
        if (v26 != -1)
        {
          a5 = &v17[v26];
          goto LABEL_24;
        }
        int v27 = *__error();
        if (v27)
        {
          a5 = v17;
          if (v27 != 35) {
            goto LABEL_40;
          }
          goto LABEL_24;
        }
      }
      a5 = v17;
    }
LABEL_24:
    char v28 = a4 >= a5 ? 1 : v20;
    if ((v28 & 1) == 0)
    {
      if (v16 >= a5) {
        int v29 = a5;
      }
      else {
        int v29 = v16;
      }
      if (&v29[-((unint64_t)a4 / (unint64_t)a3 * (void)a3)] <= a3) {
        size_t v30 = v29 - a4;
      }
      else {
        size_t v30 = (size_t)&a3[-((unint64_t)a4 % (unint64_t)a3)];
      }
      ssize_t v31 = send(*v35, (const void *)(v34 + (unint64_t)a4 % (unint64_t)a3), v30, 0);
      if (v31 != -1)
      {
        a4 += v31;
        goto LABEL_38;
      }
      int v27 = *__error();
      if (v27)
      {
        if (v27 != 35) {
          break;
        }
      }
    }
LABEL_38:
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v36);
  }
  uint64_t v11 = v35;
LABEL_40:
  uint64_t v32 = 3;
  if (v27 == 54) {
    uint64_t v32 = 1;
  }
  *((void *)this + 7) = v11;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v36);
  return v32;
}

void sub_22EA10A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t rabit::engine::AllreduceBase::TryReduceScatterRing(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, void (*a5)(unint64_t, unint64_t, unint64_t, unint64_t *))
{
  uint64_t v7 = a1;
  uint64_t v8 = *(int **)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 96);
  int v10 = *(_DWORD *)(a1 + 272);
  int v11 = *(_DWORD *)(a1 + 276);
  if (*(_DWORD *)(v9 + 4) == (v10 + 1) % v11) {
    int v12 = (rabit::utils *)(v10 == (v8[1] + 1) % v11);
  }
  else {
    int v12 = 0;
  }
  rabit::utils::Assert(v12, "need to assume rank structure", (const char *)a3);
  unint64_t v14 = a4 * a3;
  unint64_t v15 = (a4 + *(int *)(v7 + 276) - 1) / *(int *)(v7 + 276);
  unint64_t v16 = v15 * *(int *)(v9 + 4);
  if (v16 >= a4) {
    unint64_t v17 = a4;
  }
  else {
    unint64_t v17 = v15 * *(int *)(v9 + 4);
  }
  unint64_t v18 = v17 * a3;
  unint64_t v19 = v15 + v16;
  if (v19 >= a4) {
    unint64_t v19 = a4;
  }
  unint64_t v20 = v19 * a3;
  unint64_t v21 = v15 * *(int *)(v7 + 272);
  if (v21 >= a4) {
    unint64_t v21 = a4;
  }
  uint64_t v22 = (const char *)(v18 + v14);
  unint64_t v23 = v21 * a3;
  unint64_t v47 = v21 * a3 + v14;
  if (v47 > v18 + v14)
  {
    rabit::utils::Assert((rabit::utils *)(v18 <= v23), "write ptr boundary check", v13);
    unint64_t v47 = v23;
  }
  rabit::engine::AllreduceBase::LinkRecord::InitBuffer((rabit::engine::AllreduceBase::LinkRecord *)v9, a3, v15, *(void *)(v7 + 240));
  *(void *)(v9 + 8) = v20;
  unint64_t v24 = v20;
  uint64_t v45 = v7;
  unint64_t v46 = (const char *)(v18 + v14);
  uint64_t v44 = v8;
  while (1)
  {
    memset(v51, 0, sizeof(v51));
    int v52 = 1065353216;
    if ((const char *)v24 == v22)
    {
      if (v18 == v47)
      {
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v51);
        return 0;
      }
LABEL_19:
      if (v18 >= v20)
      {
        char v27 = 0;
      }
      else
      {
        LODWORD(v50) = *v8;
        int v28 = v50;
        int v29 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)v51, v50, &v50);
        char v27 = 0;
        *((_DWORD *)v29 + 5) = v28;
        *((_WORD *)v29 + 12) |= 4u;
      }
      goto LABEL_22;
    }
    LODWORD(v50) = *(_DWORD *)v9;
    int v25 = v50;
    ssize_t v26 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)v51, v50, &v50);
    *((_DWORD *)v26 + 5) = v25;
    *((_WORD *)v26 + 12) |= 1u;
    if (v18 != v47) {
      goto LABEL_19;
    }
    char v27 = 1;
LABEL_22:
    rabit::utils::PollHelper::Poll((float *)v51, *(void *)(v7 + 288));
    uint64_t v22 = v46;
    if ((const char *)v24 == v46)
    {
      unint64_t v24 = (unint64_t)v46;
    }
    else
    {
      size_t v30 = std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::find<int>(*(uint64_t *)&v51[0], *((unint64_t *)&v51[0] + 1), *(_DWORD *)v9);
      if (v30 && (v30[3] & 1) != 0)
      {
        uint64_t v42 = rabit::engine::AllreduceBase::LinkRecord::ReadToRingBuffer((rabit::engine::AllreduceBase::LinkRecord *)v9, v20, v46);
        if (v42)
        {
          uint64_t v8 = (int *)v9;
          goto LABEL_55;
        }
        unint64_t v24 = *(void *)(v9 + 8);
        rabit::utils::Assert((rabit::utils *)(v24 <= (unint64_t)v46), "[%d] read_ptr boundary check", v31, *(unsigned int *)(v7 + 272));
        unint64_t v32 = v24 / a3 * a3;
        if (v20 < v32)
        {
          unint64_t v33 = *(void *)(v9 + 32);
          do
          {
            unint64_t v34 = v33 - v20 % v33;
            if (v32 - v20 < v34) {
              unint64_t v34 = v32 - v20;
            }
            if (v14 - v20 % v14 >= v34) {
              unint64_t v35 = v34;
            }
            else {
              unint64_t v35 = v14 - v20 % v14;
            }
            uint64_t v36 = *(void *)(v9 + 24);
            unint64_t v50 = a3;
            a5(v36 + v20 % v33, a2 + v20 % v14, v35 / a3, &v50);
            v20 += v35;
          }
          while (v20 < v32);
          uint64_t v8 = v44;
          uint64_t v7 = v45;
        }
        uint64_t v22 = v46;
      }
    }
    char v37 = v18 >= v20 ? 1 : v27;
    if ((v37 & 1) == 0)
    {
      unint64_t v38 = v47;
      if (v47 >= v20) {
        unint64_t v38 = v20;
      }
      if (v38 - v18 / v14 * v14 <= v14) {
        size_t v39 = v38 - v18;
      }
      else {
        size_t v39 = v14 - v18 % v14;
      }
      ssize_t v40 = send(*v8, (const void *)(a2 + v18 % v14), v39, 0);
      if (v40 != -1)
      {
        v18 += v40;
        goto LABEL_50;
      }
      int v41 = *__error();
      if (v41)
      {
        if (v41 != 35) {
          break;
        }
      }
    }
LABEL_50:
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v51);
  }
  if (v41 == 54) {
    uint64_t v42 = 1;
  }
  else {
    uint64_t v42 = 3;
  }
LABEL_55:
  *(void *)(v7 + 56) = v8;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v51);
  return v42;
}

void sub_22EA10DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void rabit::engine::AllreduceBase::Allgather(rabit::engine::AllreduceBase *this, void *a2, const char *a3, const char *a4, const char *a5, uint64_t a6)
{
  int v6 = *((_DWORD *)this + 69);
  if (v6 != -1 && v6 != 1)
  {
    BOOL v8 = rabit::engine::AllreduceBase::TryAllgatherRing(this, a2, a3, a4, a5, a6) == 0;
    rabit::utils::Assert((rabit::utils *)v8, "AllgatherRing failed", v9);
  }
}

void rabit::engine::AllreduceBase::Allreduce(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, void (*a5)(unint64_t, unint64_t, unint64_t, unint64_t *), void (*a6)(uint64_t), uint64_t a7)
{
  if (a6) {
    a6(a7);
  }
  int v12 = *(_DWORD *)(a1 + 276);
  if (v12 != -1 && v12 != 1)
  {
    BOOL v14 = rabit::engine::AllreduceBase::TryAllreduce(a1, a2, a3, a4, a5) == 0;
    rabit::utils::Assert((rabit::utils *)v14, "Allreduce failed", v15);
  }
}

void rabit::engine::AllreduceBase::Broadcast(rabit::engine::AllreduceBase *this, char *a2, const char *a3, unsigned int a4)
{
  int v4 = *((_DWORD *)this + 69);
  if (v4 != -1 && v4 != 1)
  {
    BOOL v6 = rabit::engine::AllreduceBase::TryBroadcast(this, a2, a3, a4) == 0;
    rabit::utils::Assert((rabit::utils *)v6, "Broadcast failed", v7);
  }
}

uint64_t rabit::engine::AllreduceBase::LoadCheckPoint()
{
  return 0;
}

uint64_t rabit::engine::AllreduceBase::CheckPoint(uint64_t result)
{
  return result;
}

uint64_t rabit::engine::AllreduceBase::LazyCheckPoint(uint64_t result)
{
  return result;
}

uint64_t rabit::engine::AllreduceBase::VersionNumber(rabit::engine::AllreduceBase *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t rabit::engine::AllreduceBase::GetRingPrevRank(rabit::engine::AllreduceBase *this)
{
  return *(unsigned int *)(*((void *)this + 11) + 4);
}

uint64_t rabit::engine::AllreduceBase::GetRank(rabit::engine::AllreduceBase *this)
{
  return *((unsigned int *)this + 68);
}

uint64_t rabit::engine::AllreduceBase::GetWorldSize(rabit::engine::AllreduceBase *this)
{
  unsigned int v1 = *((_DWORD *)this + 69);
  if (v1 == -1) {
    return 1;
  }
  else {
    return v1;
  }
}

BOOL rabit::engine::AllreduceBase::IsDistributed(rabit::engine::AllreduceBase *this)
{
  unsigned int v1 = (_DWORD *)((char *)this + 176);
  int v2 = *((char *)this + 199);
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 != 4) {
      return 1;
    }
    return *v1 != 1280070990;
  }
  if (*((void *)this + 23) == 4)
  {
    unsigned int v1 = *(_DWORD **)v1;
    return *v1 != 1280070990;
  }
  return 1;
}

void rabit::engine::AllreduceBase::GetHost(rabit::engine::AllreduceBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 175) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 19), *((void *)this + 20));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 152);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 21);
  }
}

rabit::utils::SockAddr *rabit::utils::SockAddr::SockAddr(rabit::utils::SockAddr *this, const char *a2, unsigned int a3)
{
  memset(&v13, 0, sizeof(v13));
  v13.ai_family = 2;
  v13.ai_protocol = 1;
  int v12 = 0;
  if (getaddrinfo(a2, 0, &v13, &v12)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v12 == 0;
  }
  uint64_t v8 = !v7;
  rabit::utils::Check((rabit::utils *)v8, "cannot obtain address of %s", v6, a2);
  rabit::utils::Check((rabit::utils *)(v12->ai_family == 2), "Does not support IPv6", v9);
  int v10 = v12;
  memcpy(this, v12->ai_addr, v12->ai_addrlen);
  *((_WORD *)this + 1) = bswap32(a3) >> 16;
  freeaddrinfo(v10);
  return this;
}

void *std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(float *a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x20uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(void *)((char *)v10 + 20) = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v18 = operator new(8 * *(void *)&prime);
          unint64_t v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          unint64_t v21 = (void *)*((void *)a1 + 2);
          if (v21)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
            char v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *unint64_t v21 = *v27;
                  void *v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  char v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_55:
                unint64_t v21 = v27;
                char v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v33 = *(void **)a1;
        *(void *)a1 = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  int v29 = *(void **)a1;
  size_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    void *v10 = *v30;
LABEL_72:
    *size_t v30 = v10;
    goto LABEL_73;
  }
  void *v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    size_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_22EA114F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,pollfd>,std::__unordered_map_hasher<int,std::__hash_value_type<int,pollfd>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,pollfd>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,pollfd>>>::find<int>(uint64_t a1, unint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  uint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(*a1);
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void *std::vector<rabit::engine::AllreduceBase::LinkRecord>::__construct_one_at_end[abi:ne180100]<rabit::engine::AllreduceBase::LinkRecord const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(v3 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 40) = 0;
  uint64_t result = std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)(v3 + 40), *((const void **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3);
  *(void *)(a1 + 8) = v3 + 64;
  return result;
}

void sub_22EA11658(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<rabit::engine::AllreduceBase::LinkRecord>::__push_back_slow_path<rabit::engine::AllreduceBase::LinkRecord const&>(int64x2_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1->i64[1] - a1->i64[0]) >> 6;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[1].i64[0] - a1->i64[0];
  if (v6 >> 5 > v3) {
    unint64_t v3 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint8x8_t v25 = a1 + 1;
  if (v7)
  {
    if (v7 >> 58) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint8x8_t v8 = (char *)operator new(v7 << 6);
  }
  else
  {
    uint8x8_t v8 = 0;
  }
  uint64_t v9 = &v8[64 * v2];
  unint64_t v22 = v8;
  v23.i64[0] = (uint64_t)v9;
  v23.i64[1] = (uint64_t)v9;
  unint64_t v24 = &v8[64 * v7];
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v10;
  unint64_t v11 = *(const void **)(a2 + 40);
  *((void *)v9 + 4) = *(void *)(a2 + 32);
  *((void *)v9 + 6) = 0;
  *((void *)v9 + 7) = 0;
  uint64_t v12 = *(void *)(a2 + 48);
  *((void *)v9 + 5) = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)v9 + 5, v11, v12, (v12 - (uint64_t)v11) >> 3);
  uint64_t v13 = v23.i64[0];
  uint64_t v14 = v23.i64[1] + 64;
  v23.i64[1] += 64;
  uint64_t v16 = a1->i64[0];
  unint64_t v15 = a1->u64[1];
  if (v15 == a1->i64[0])
  {
    int64x2_t v19 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      long long v17 = *(_OWORD *)(v15 - 48);
      uint64_t v18 = *(void *)(v15 - 32);
      *(_OWORD *)(v13 - 64) = *(_OWORD *)(v15 - 64);
      *(_OWORD *)(v13 - 48) = v17;
      *(void *)(v13 - 32) = v18;
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 8) = 0;
      *(_OWORD *)(v13 - 24) = *(_OWORD *)(v15 - 24);
      *(void *)(v13 - 8) = *(void *)(v15 - 8);
      v13 -= 64;
      *(void *)(v15 - 24) = 0;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 8) = 0;
      v15 -= 64;
    }
    while (v15 != v16);
    int64x2_t v19 = *a1;
    uint64_t v14 = v23.i64[1];
  }
  a1->i64[0] = v13;
  a1->i64[1] = v14;
  int64x2_t v23 = v19;
  uint64_t v20 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v24;
  unint64_t v24 = v20;
  unint64_t v22 = (char *)v19.i64[0];
  std::__split_buffer<rabit::engine::AllreduceBase::LinkRecord>::~__split_buffer((uint64_t)&v22);
  return v14;
}

void sub_22EA117C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<rabit::engine::AllreduceBase::LinkRecord>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<rabit::engine::AllreduceBase::LinkRecord>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 64;
    long long v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *dmlc::io::FileSystem::GetInstance(dmlc::io::FileSystem *this, const dmlc::io::URI *a2)
{
  int v3 = *((unsigned __int8 *)this + 23);
  if (*((char *)this + 23) < 0)
  {
    uint64_t v5 = *((void *)this + 1);
    if (v5)
    {
      if (v5 != 7)
      {
        if (v5 != 9) {
          goto LABEL_44;
        }
        long long v4 = *(dmlc::io::FileSystem **)this;
LABEL_10:
        uint64_t v6 = *(void *)v4;
        int v7 = *((unsigned __int8 *)v4 + 8);
        if (v6 != 0x2F3A736677656976 || v7 != 47)
        {
          if ((v3 & 0x80) == 0) {
            goto LABEL_15;
          }
LABEL_43:
          uint64_t v5 = *((void *)this + 1);
LABEL_44:
          if (v5 == 5)
          {
            if (**(_DWORD **)this != 792343411 || *(unsigned char *)(*(void *)this + 4) != 47) {
              goto LABEL_78;
            }
            goto LABEL_72;
          }
          if (v5 != 7)
          {
            if (v5 != 8)
            {
LABEL_74:
              if (v5 != 8)
              {
LABEL_78:
                Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
                dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io.cc");
                size_t v30 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
                std::operator+<char>();
                if ((v35 & 0x80u) == 0) {
                  unint64_t v31 = __p;
                }
                else {
                  unint64_t v31 = (void **)__p[0];
                }
                if ((v35 & 0x80u) == 0) {
                  uint64_t v32 = v35;
                }
                else {
                  uint64_t v32 = (uint64_t)__p[1];
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
                if ((char)v35 < 0) {
                  operator delete(__p[0]);
                }
                dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
                return 0;
              }
              uint64_t v20 = *(dmlc::io::FileSystem **)this;
LABEL_76:
              if (*(void *)v20 == 0x2F2F3A6572757A61)
              {
                char v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
                dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io.cc");
                unint64_t v28 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Please compile with DMLC_USE_AZURE=1 to use Azure", 49);
                dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
              }
              goto LABEL_78;
            }
            uint64_t v9 = *(dmlc::io::FileSystem **)this;
LABEL_48:
            if (*(void *)v9 != 0x2F2F3A7370747468)
            {
              if ((v3 & 0x80) == 0) {
                goto LABEL_50;
              }
LABEL_73:
              uint64_t v5 = *((void *)this + 1);
              goto LABEL_74;
            }
LABEL_72:
            uint8x8_t v25 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io.cc");
            uint64_t v26 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Please compile with DMLC_USE_S3=1 to use S3", 43);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            int v3 = *((unsigned __int8 *)this + 23);
            if ((v3 & 0x80) == 0) {
              goto LABEL_50;
            }
            goto LABEL_73;
          }
LABEL_55:
          if (**(_DWORD **)this != 1886680168 || *(_DWORD *)(*(void *)this + 3) != 791624304) {
            goto LABEL_78;
          }
          goto LABEL_72;
        }
LABEL_42:
        uint64_t v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io.cc");
        int64x2_t v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Please compile with DMLC_USE_HDFS=1 to use hdfs", 47);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        int v3 = *((unsigned __int8 *)this + 23);
        if ((v3 & 0x80) == 0) {
          goto LABEL_15;
        }
        goto LABEL_43;
      }
      uint64_t v13 = *(int **)this;
      if (**(_DWORD **)this != 1701603686 || *(_DWORD *)(*(void *)this + 3) != 791624293)
      {
        int v15 = *v13;
        int v16 = *(int *)((char *)v13 + 3);
        if (v15 != 1936090216 || v16 != 791624307) {
          goto LABEL_55;
        }
        goto LABEL_42;
      }
    }
  }
  else if (*((unsigned char *)this + 23))
  {
    if (v3 != 7)
    {
      long long v4 = this;
      if (v3 != 9)
      {
LABEL_15:
        if (v3 == 5)
        {
          if (*(_DWORD *)this != 792343411 || *((unsigned char *)this + 4) != 47) {
            goto LABEL_78;
          }
          goto LABEL_72;
        }
        if (v3 != 7)
        {
          uint64_t v9 = this;
          if (v3 != 8)
          {
LABEL_50:
            uint64_t v20 = this;
            if (v3 != 8) {
              goto LABEL_78;
            }
            goto LABEL_76;
          }
          goto LABEL_48;
        }
LABEL_27:
        if (*(_DWORD *)this != 1886680168 || *(_DWORD *)((char *)this + 3) != 791624304) {
          goto LABEL_78;
        }
        goto LABEL_72;
      }
      goto LABEL_10;
    }
    if (*(_DWORD *)this != 1701603686 || *(_DWORD *)((char *)this + 3) != 791624293)
    {
      if (*(_DWORD *)this != 1936090216 || *(_DWORD *)((char *)this + 3) != 791624307) {
        goto LABEL_27;
      }
      goto LABEL_42;
    }
  }
  unint64_t v21 = &_MergedGlobals_22;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72590, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72590))
  {
    _MergedGlobals_22 = (uint64_t)&unk_26E2485B8;
    __cxa_atexit((void (*)(void *))dmlc::io::LocalFileSystem::~LocalFileSystem, &_MergedGlobals_22, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72590);
  }
  return v21;
}

void sub_22EA11C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
}

void dmlc::InputSplit::Create(dmlc::InputSplit *this, const char *a2, unsigned int a3, const char *a4, const char *a5)
{
  dmlc::InputSplit::Create(this, 0, a2, a3, a4, 0, 0, 256, 0, v5);
}

void dmlc::InputSplit::Create(dmlc::InputSplit *this, char *a2, const char *a3, unsigned int a4, const char *a5, const char *a6, BOOL a7, int a8, BOOL a9, BOOL a10)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)this);
  dmlc::io::URISpec::URISpec(v30, &__p, (uint64_t)a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v14 = v31;
  int v15 = (char *)v30[0];
  if (v31 >= 0) {
    int v16 = v30;
  }
  else {
    int v16 = (void **)v30[0];
  }
  if (strcmp((const char *)v16, "stdin"))
  {
    if (a3 >= a4)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io.cc");
      uint64_t v18 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      int64x2_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: part < nsplit", 27);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"invalid input parameter for InputSplit::Create", 46);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      char v14 = v31;
      int v15 = (char *)v30[0];
    }
    if (v14 >= 0) {
      unint64_t v21 = (char *)v30;
    }
    else {
      unint64_t v21 = v15;
    }
    dmlc::io::URI::URI((dmlc::io::URI *)&__p, v21);
    if (strcmp(a5, "text"))
    {
      if (!strcmp(a5, "indexed_recordio"))
      {
        if (a2)
        {
          std::string::basic_string[abi:ne180100]<0>(&v35, a2);
          dmlc::io::URISpec::URISpec(&v34, &v35, (uint64_t)a3, a4);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
          operator new();
        }
        uint64_t v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v34);
        dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io.cc");
        char v27 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"need to pass index file to use IndexedRecordIO", 46);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v34);
      }
      else
      {
        if (!strcmp(a5, "recordio")) {
          operator new();
        }
        unint64_t v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v34);
        dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io.cc");
        int64x2_t v23 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v34);
        unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"unknown input split type ", 25);
        size_t v25 = strlen(a5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)a5, v25);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v34);
      }
      uint64_t v28 = v33;
      if ((v33 & 0x80u) != 0) {
        uint64_t v28 = v32;
      }
      if (v28) {
        operator new();
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_22EA1281C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  if (*(char *)(v30 - 105) < 0) {
    operator delete(*(void **)(v30 - 128));
  }
  uint64_t v32 = (void *)*((void *)v28 + 27);
  if (v32)
  {
    *((void *)v28 + 28) = v32;
    operator delete(v32);
  }
  unsigned __int8 v33 = *v29;
  if (*v29)
  {
    *((void *)v28 + 25) = v33;
    operator delete(v33);
  }
  dmlc::io::InputSplitBase::~InputSplitBase(v28);
  MEMORY[0x230FA80D0](v28, 0x10B3C408F76FF71);
  dmlc::io::URISpec::~URISpec(&a28);
  dmlc::io::FileInfo::~FileInfo(&a10);
  dmlc::io::URISpec::~URISpec(&a19);
  _Unwind_Resume(a1);
}

void sub_22EA12A3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x22EA12A34);
}

void sub_22EA12A54()
{
}

void sub_22EA12A5C(uint64_t a1, ...)
{
  va_start(va, a1);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22EA12A2CLL);
}

uint64_t dmlc::Stream::Create(dmlc::Stream *this, const char *a2, const char *a3)
{
  dmlc::io::URI::URI((dmlc::io::URI *)v9, (char *)this);
  Instance = dmlc::io::FileSystem::GetInstance((dmlc::io::FileSystem *)v9, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t *, void **, const char *, const char *))(*Instance + 40))(Instance, v9, a2, a3);
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  return v7;
}

void sub_22EA12B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::io::FileInfo::~FileInfo((void **)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::SeekStream::CreateForRead(dmlc::SeekStream *this, const char *a2)
{
  dmlc::io::URI::URI((dmlc::io::URI *)v7, (char *)this);
  Instance = dmlc::io::FileSystem::GetInstance((dmlc::io::FileSystem *)v7, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t *, void **, const char *))(*Instance + 48))(Instance, v7, a2);
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  return v5;
}

void sub_22EA12BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::io::FileInfo::~FileInfo((void **)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::SingleFileSplit::HintChunkSize(uint64_t this, unint64_t a2)
{
  unint64_t v2 = *(void *)(this + 72);
  if (v2 <= a2) {
    unint64_t v2 = a2;
  }
  *(void *)(this + 72) = v2;
  return this;
}

off_t dmlc::io::SingleFileSplit::GetTotalSize(FILE **this)
{
  int v1 = fileno(this[1]);
  fstat(v1, &v3);
  return v3.st_size;
}

uint64_t dmlc::io::SingleFileSplit::BeforeFirst(FILE **this)
{
  return fseek(this[1], 0, 0);
}

BOOL dmlc::io::SingleFileSplit::NextRecord(std::string *this, unsigned __int8 **a2)
{
  std::string::size_type size = (unsigned __int8 *)this[3].__r_.__value_.__l.__size_;
  uint64_t v5 = (unsigned __int8 *)this[3].__r_.__value_.__r.__words[2];
  if (size == v5)
  {
    BOOL result = dmlc::io::SingleFileSplit::LoadChunk(this);
    if (!result) {
      return result;
    }
    std::string::size_type size = (unsigned __int8 *)this[3].__r_.__value_.__l.__size_;
    uint64_t v5 = (unsigned __int8 *)this[3].__r_.__value_.__r.__words[2];
  }
  if (size != v5)
  {
    uint64_t v7 = size;
    while (1)
    {
      int v8 = *v7;
      if (v8 == 10 || v8 == 13) {
        break;
      }
      if (++v7 == v5)
      {
        uint64_t v7 = v5;
        break;
      }
    }
    while (v7 != v5)
    {
      int v10 = *v7;
      if (v10 != 13 && v10 != 10)
      {
        uint64_t v5 = v7;
        break;
      }
      ++v7;
    }
  }
  *a2 = size;
  a2[1] = (unsigned __int8 *)(v5 - size);
  this[3].__r_.__value_.__l.__size_ = (std::string::size_type)v5;
  return 1;
}

BOOL dmlc::io::SingleFileSplit::NextChunk(std::string *this, std::string::size_type *a2)
{
  std::string::size_type size = this[3].__r_.__value_.__l.__size_;
  std::string::size_type v4 = this[3].__r_.__value_.__r.__words[2];
  if (size == v4)
  {
    BOOL result = dmlc::io::SingleFileSplit::LoadChunk(this);
    if (!result) {
      return result;
    }
    std::string::size_type size = this[3].__r_.__value_.__l.__size_;
    std::string::size_type v4 = this[3].__r_.__value_.__r.__words[2];
  }
  *a2 = size;
  a2[1] = v4 - size;
  this[3].__r_.__value_.__l.__size_ = v4;
  return 1;
}

void dmlc::io::SingleFileSplit::~SingleFileSplit(dmlc::io::SingleFileSplit *this)
{
  dmlc::io::SingleFileSplit::~SingleFileSplit(this);

  JUMPOUT(0x230FA80D0);
}

{
  *(void *)this = &unk_26E24EEE0;
  if (!*((unsigned char *)this + 16)) {
    fclose(*((FILE **)this + 1));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

uint64_t dmlc::io::SingleFileSplit::ResetPartition(dmlc::io::SingleFileSplit *this, int a2, int a3)
{
  if (a2 || a3 != 1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/single_file_split.h");
    uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: part_index == 0 && num_parts == 1", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v8);
  }
  return (*(uint64_t (**)(dmlc::io::SingleFileSplit *))(*(void *)this + 16))(this);
}

void sub_22EA12E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

size_t dmlc::io::SingleFileSplit::Read(FILE **this, void *__ptr, size_t a3)
{
  return fread(__ptr, 1uLL, a3, this[1]);
}

void dmlc::io::SingleFileSplit::Write(dmlc::io::SingleFileSplit *this, const void *a2)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/single_file_split.h");
  stat v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"InputSplit do not support write", 31);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
}

void sub_22EA12E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL dmlc::io::SingleFileSplit::LoadChunk(std::string *this)
{
  unint64_t v2 = this + 2;
  if (SHIBYTE(this[2].__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = this[2].__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(this[2].__r_.__value_.__r.__words[2]);
  }
  std::string::size_type v4 = this[3].__r_.__value_.__r.__words[0];
  if (size < v4) {
    std::string::resize(this + 2, v4, 0);
  }
  uint64_t v5 = this + 1;
  while (1)
  {
    LODWORD(v6) = SHIBYTE(this[2].__r_.__value_.__r.__words[2]);
    if ((v6 & 0x80000000) != 0)
    {
      size_t v7 = this[2].__r_.__value_.__l.__size_;
      char v8 = v7 ? (std::string *)this[2].__r_.__value_.__r.__words[0] : 0;
    }
    else
    {
      size_t v7 = HIBYTE(this[2].__r_.__value_.__r.__words[2]);
      char v8 = *((unsigned char *)&this[2].__r_.__value_.__s + 23) ? v2 : 0;
    }
    if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
    {
      size_t v9 = this[1].__r_.__value_.__l.__size_;
      if (v7 <= v9) {
        goto LABEL_44;
      }
      if (!v9)
      {
LABEL_23:
        std::string::size_type v11 = 0;
        goto LABEL_25;
      }
      int v10 = (std::string *)v5->__r_.__value_.__r.__words[0];
    }
    else
    {
      size_t v9 = HIBYTE(this[1].__r_.__value_.__r.__words[2]);
      if (v7 <= v9) {
        goto LABEL_44;
      }
      int v10 = this + 1;
      if (!v9) {
        goto LABEL_23;
      }
    }
    memcpy(v8, v10, v9);
    std::string::size_type v11 = SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0
        ? this[1].__r_.__value_.__l.__size_
        : HIBYTE(this[1].__r_.__value_.__r.__words[2]);
LABEL_25:
    std::string::resize(this + 1, 0, 0);
    uint64_t v12 = (*(uint64_t (**)(std::string *, char *, size_t))(this->__r_.__value_.__r.__words[0] + 72))(this, (char *)v8 + v11, v7 - v11);
    std::string::size_type v13 = v12 + v11;
    if (!(v12 + v11)) {
      return v13 != 0;
    }
    if (v13 != v7) {
      break;
    }
    size_t v14 = v7;
    while (1)
    {
      size_t v15 = v14 - 1;
      if (v14 == 1) {
        break;
      }
      int v16 = v8->__r_.__value_.__s.__data_[v14 - 1];
      BOOL v17 = v16 == 13 || v16 == 10;
      size_t v14 = v15;
      if (v17)
      {
        uint64_t v18 = (std::string *)((char *)&v8->__r_.__value_.__l.__data_ + v15 + 1);
        goto LABEL_36;
      }
    }
    uint64_t v18 = v8;
LABEL_36:
    int64_t v19 = (char *)v18 - (char *)v8;
    std::string::resize(this + 1, v7 - v19, 0);
    if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
    {
      size_t v20 = this[1].__r_.__value_.__l.__size_;
      if (v20)
      {
        unint64_t v21 = (std::string *)v5->__r_.__value_.__r.__words[0];
        goto LABEL_41;
      }
    }
    else
    {
      size_t v20 = HIBYTE(this[1].__r_.__value_.__r.__words[2]);
      if (*((unsigned char *)&this[1].__r_.__value_.__s + 23))
      {
        unint64_t v21 = this + 1;
LABEL_41:
        memcpy(v21, v18, v20);
      }
    }
    if (v19) {
      goto LABEL_49;
    }
    LOBYTE(v6) = *((unsigned char *)&this[2].__r_.__value_.__s + 23);
LABEL_44:
    if ((v6 & 0x80) != 0) {
      std::string::size_type v6 = this[2].__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v6 = v6;
    }
    std::string::resize(v2, 2 * v6, 0);
  }
  int64_t v19 = v12 + v11;
LABEL_49:
  if (SHIBYTE(this[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[2].__r_.__value_.__l.__size_) {
      data = (std::string *)this[2].__r_.__value_.__l.__data_;
    }
    else {
      data = 0;
    }
  }
  else if (*((unsigned char *)&this[2].__r_.__value_.__s + 23))
  {
    data = v2;
  }
  else
  {
    data = 0;
  }
  this[3].__r_.__value_.__l.__size_ = (std::string::size_type)data;
  this[3].__r_.__value_.__r.__words[2] = (std::string::size_type)data + v19;
  return v13 != 0;
}

dmlc::io::InputSplitBase *dmlc::io::InputSplitBase::InputSplitBase(dmlc::io::InputSplitBase *this)
{
  *(void *)this = &unk_26E24D958;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((_OWORD *)this + 5) = 0u;
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)((char *)this + 128), 0x200001uLL);
  *(_OWORD *)((char *)this + 152) = xmmword_22EA205D0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  return this;
}

void sub_22EA131C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::string::size_type v4 = v3;
  std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::string::size_type v6 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  atomic_store(0, (unsigned int *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  std::string::size_type v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v7.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 392), &v7);
  std::exception_ptr::~exception_ptr(&v7);
  std::mutex::unlock(v6);
  v7.__ptr_ = (void *)a1;
  std::__function::__value_func<BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::__value_func[abi:ne180100]((uint64_t)&v8, a2);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  operator new();
}

void sub_22EA133D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::thread::~thread((std::thread *)&a9);
  MEMORY[0x230FA80D0](v12, 0xA1C40BD48D6D6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::~__value_func[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::ThreadedInputSplit::HintChunkSize(uint64_t this, unint64_t a2)
{
  unint64_t v2 = a2 >> 2;
  if (a2 >> 2 <= *(void *)(this + 8)) {
    unint64_t v2 = *(void *)(this + 8);
  }
  *(void *)(this + 8) = v2;
  return this;
}

uint64_t dmlc::io::ThreadedInputSplit::GetTotalSize(dmlc::io::ThreadedInputSplit *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 8))();
}

void dmlc::io::ThreadedInputSplit::BeforeFirst(dmlc::io::ThreadedInputSplit *this)
{
  unint64_t v2 = (char *)this + 32;
  dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::BeforeFirst((uint64_t)this + 32);
  if (*((void *)this + 54))
  {
    dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet((uint64_t)v2);
    std::mutex::lock((std::mutex *)((char *)this + 88));
    std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back((void *)this + 47, (void *)this + 54);
    *((void *)this + 54) = 0;
    if (*((_DWORD *)this + 55))
    {
      unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)this + 72, memory_order_acquire);
      std::mutex::unlock((std::mutex *)((char *)this + 88));
      if ((explicit & 1) == 0) {
        std::condition_variable::notify_one((std::condition_variable *)((char *)this + 224));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)((char *)this + 88));
    }
    dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet((uint64_t)v2);
  }
}

void sub_22EA135A8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::ThreadedInputSplit::NextRecord(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4 = (void *)(a1 + 432);
  if (!*(void *)(a1 + 432) && !dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Next(a1 + 32, v4)) {
    return 0;
  }
  do
  {
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), a2, *(void *)(a1 + 432));
    if (v5) {
      break;
    }
    dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(a1 + 32);
    std::mutex::lock((std::mutex *)(a1 + 88));
    std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back((void *)(a1 + 376), v4);
    *(void *)(a1 + 432) = 0;
    if (*(_DWORD *)(a1 + 220))
    {
      unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 72), memory_order_acquire);
      std::mutex::unlock((std::mutex *)(a1 + 88));
      if ((explicit & 1) == 0) {
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 224));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 88));
    }
    dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(a1 + 32);
  }
  while ((dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Next(a1 + 32, v4) & 1) != 0);
  return v5;
}

void sub_22EA136D8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::ThreadedInputSplit::NextChunk(uint64_t a1, void *a2)
{
  std::string::size_type v4 = (uint64_t **)(a1 + 432);
  if (*(void *)(a1 + 432)
    || (uint64_t result = dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Next(a1 + 32, v4), result))
  {
    while (1)
    {
      std::string::size_type v6 = *v4;
      uint64_t v8 = **v4;
      uint64_t v7 = (*v4)[1];
      if (v8 != v7) {
        break;
      }
      dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(a1 + 32);
      std::mutex::lock((std::mutex *)(a1 + 88));
      std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back((void *)(a1 + 376), v4);
      *(void *)(a1 + 432) = 0;
      if (*(_DWORD *)(a1 + 220))
      {
        unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 72), memory_order_acquire);
        std::mutex::unlock((std::mutex *)(a1 + 88));
        if ((explicit & 1) == 0) {
          std::condition_variable::notify_one((std::condition_variable *)(a1 + 224));
        }
      }
      else
      {
        std::mutex::unlock((std::mutex *)(a1 + 88));
      }
      dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(a1 + 32);
      if ((dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Next(a1 + 32, v4) & 1) == 0) {
        return 0;
      }
    }
    *a2 = v8;
    a2[1] = v7 - v8;
    uint64_t *v6 = v7;
    return 1;
  }
  return result;
}

void sub_22EA137E4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void dmlc::io::ThreadedInputSplit::~ThreadedInputSplit(dmlc::io::ThreadedInputSplit *this)
{
  dmlc::io::ThreadedInputSplit::~ThreadedInputSplit(this);

  JUMPOUT(0x230FA80D0);
}

{
  char *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *(void *)this = &unk_26E24EF60;
  unint64_t v2 = (char *)this + 32;
  dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Destroy((uint64_t)this + 32);
  stat v3 = *((void *)this + 54);
  if (v3)
  {
    std::string::size_type v4 = *(void **)(v3 + 16);
    if (v4)
    {
      *(void *)(v3 + 24) = v4;
      operator delete(v4);
    }
    MEMORY[0x230FA80D0](v3, 0x10C40512A2CE0);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }
  dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::~ThreadedIter((uint64_t)v2);
}

void sub_22EA13844(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10A1C408D47FA16);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::ThreadedInputSplit::ResetPartition(dmlc::io::ThreadedInputSplit *this)
{
  (*(void (**)(void))(**((void **)this + 3) + 64))(*((void *)this + 3));
  unint64_t v2 = *(uint64_t (**)(dmlc::io::ThreadedInputSplit *))(*(void *)this + 16);

  return v2(this);
}

void dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::~ThreadedIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22EA1392C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(void *)(a1 + 288))
  {
    std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      stat v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      std::string::size_type v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      uint64_t v5 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(v5, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      std::string::size_type v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire) & 1) == 0)
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 40));
      BOOL v9 = (v8 & 1) == 0;
    }
    else
    {
      BOOL v9 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v9) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_22EA13AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Next(uint64_t a1)
{
  unint64_t v2 = (void *)(a1 + 288);
  if (*(void *)(a1 + 288))
  {
    dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back((void *)(a1 + 344), v2);
    *(void *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire);
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((explicit & 1) == 0) {
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(a1);
  }

  return dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Next(a1, v2);
}

void sub_22EA13BE8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Value(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    std::string::size_type v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    std::string::size_type v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(void *)(a1 + 288);
  }
  return result;
}

void sub_22EA13C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(uint64_t a1)
{
  v5.__ptr_ = 0;
  unint64_t v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(void *)(a1 + 392)) {
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  }
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_22EA13D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    BOOL v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    int64_t v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    size_t v20 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    size_t v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x22EA13CECLL);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back(void *a1, void *a2)
{
  std::exception_ptr v4 = (char *)a1[1];
  std::exception_ptr v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      uint64_t v24 = v6 >> 3;
      size_t v25 = (char *)a1[3];
      uint64_t v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        uint64_t v34 = v33;
        std::string v35 = operator new(0x1000uLL);
        uint64_t v36 = &v32[8 * v24];
        char v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          uint64_t v38 = 8 * v24;
          if (v6 < 1)
          {
            unint64_t v73 = v35;
            uint64_t v74 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            uint64_t v36 = &v76[8 * (v75 >> 2)];
            char v37 = &v76[8 * v77];
            if (v32) {
              operator delete(v32);
            }
            uint64_t v32 = v76;
            std::string v35 = v73;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)uint64_t v36 = v35;
        uint64_t v78 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v37 - v32) >> 2;
              }
              ssize_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              uint64_t v87 = v85;
              uint64_t v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v32;
              BOOL v88 = v78 == v32;
              uint64_t v78 = v36;
              if (!v88)
              {
                uint64_t v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                long long v91 = v36;
                long long v92 = (uint64_t *)v32;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)long long v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              char v37 = &v85[8 * v86];
              if (v32) {
                operator delete(v32);
              }
              uint64_t v32 = v87;
            }
            else
            {
              uint64_t v80 = (v37 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              uint64_t v36 = &v32[8 * (v81 >> 1)];
              ssize_t v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                ssize_t v83 = v78;
              }
              uint64_t v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v36 - 1) = v94;
          v36 -= 8;
        }
        unsigned int v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      uint64_t v28 = operator new(0x1000uLL);
      int v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v25 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          unint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          std::exception_ptr v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          long long v55 = (uint64_t *)a1[1];
          long long v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            long long v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            int v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)int v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          ssize_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            std::exception_ptr v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        int v62 = (char *)a1[1];
        std::vector<char>::pointer v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            unint64_t v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            uint64_t v99 = &v97[8 * (v96 >> 2)];
            std::string::size_type v100 = (uint64_t *)a1[1];
            std::vector<char>::pointer v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              std::vector<char>::pointer v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              uint64_t v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)uint64_t v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            uint64_t v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              std::vector<char>::pointer v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v16 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v16) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            int v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              int v62 = (char *)a1[1];
            }
            std::vector<char>::pointer v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)std::vector<char>::pointer v63 = v64;
      }
      else
      {
        *(void *)std::exception_ptr v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v4;
      std::string::size_type v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          uint64_t v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          std::exception_ptr v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            std::exception_ptr v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            int v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)int v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          unint64_t v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            std::exception_ptr v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          size_t v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            std::exception_ptr v5 = (char *)a1[1];
          }
          int64x2_t v23 = &v5[8 * v19];
          std::exception_ptr v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)std::exception_ptr v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    std::exception_ptr v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = a1[4] + v8;
  }
  *(void *)(*(void *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_22EA142B0(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Next(uint64_t a1, void *a2)
{
  unint64_t v2 = (atomic_uint *)(a1 + 24);
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) == 2) {
    return 0;
  }
  dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load_explicit(v2, memory_order_acquire))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
  }
  int v10 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v10 + 1;
  uint64_t v11 = *(void *)(a1 + 336);
  if (v11)
  {
LABEL_9:
    *(_DWORD *)(a1 + 184) = v10;
  }
  else
  {
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      uint64_t v11 = *(void *)(a1 + 336);
      if (v11)
      {
        int v10 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v11)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
      {
        uint64_t v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
        dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        BOOL v16 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
        uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(a1);
      uint64_t v3 = 0;
      goto LABEL_18;
    }
  }
  unint64_t v12 = *(void *)(a1 + 328);
  *a2 = *(void *)(*(void *)(*(void *)(a1 + 304) + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF));
  *(void *)(a1 + 328) = v12 + 1;
  *(void *)(a1 + 336) = v11 - 1;
  if (v12 + 1 >= 0x400)
  {
    operator delete(**(void ***)(a1 + 304));
    *(void *)(a1 + 304) += 8;
    *(void *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188)) {
    BOOL v13 = (atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0;
  }
  else {
    BOOL v13 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v13) {
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  }
  dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(a1);
  uint64_t v3 = 1;
LABEL_18:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v3;
}

void sub_22EA14510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Init(std::function<BOOL ()(dmlc::io::InputSplitBase::Chunk**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  unint64_t v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[1];
  do
  {
    uint64_t v18 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        && (*(void *)(v4 + 336) < *(void *)(v4 + 48) || *(void *)(v4 + 384)))
      {
        break;
      }
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire);
    if (explicit)
    {
      if (atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire) == 1)
      {
        uint64_t v6 = a1[9];
        if (!v6) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
        if (*(void *)(v4 + 336))
        {
          unint64_t v7 = *(void *)(v4 + 328);
          do
          {
            std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back((void *)(v4 + 344), (void *)(*(void *)(*(void *)(v4 + 304) + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)));
            uint64_t v8 = *(void *)(v4 + 336) - 1;
            unint64_t v7 = *(void *)(v4 + 328) + 1;
            *(void *)(v4 + 328) = v7;
            *(void *)(v4 + 336) = v8;
            if (v7 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(void *)(v4 + 304) += 8;
              uint64_t v8 = *(void *)(v4 + 336);
              unint64_t v7 = *(void *)(v4 + 328) - 512;
              *(void *)(v4 + 328) = v7;
            }
          }
          while (v8);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        int v9 = 2;
      }
      else
      {
        int v9 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      uint64_t v10 = *(void *)(v4 + 384);
      if (v10
        && (uint64_t v11 = *(void ***)(v4 + 352),
            unint64_t v12 = *(void *)(v4 + 376),
            uint64_t v18 = (*(void **)((char *)v11 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)))[v12 & 0x1FF],
            ++v12,
            *(void *)(v4 + 376) = v12,
            *(void *)(v4 + 384) = v10 - 1,
            v12 >= 0x400))
      {
        operator delete(*v11);
        int v9 = 0;
        *(void *)(v4 + 352) += 8;
        *(void *)(v4 + 376) -= 512;
      }
      else
      {
        int v9 = 0;
      }
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (!explicit)
    {
      uint64_t v13 = a1[5];
      uint64_t v19 = &v18;
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v13 + 48))(v13, &v19) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      uint64_t v14 = (void *)(v4 + 296);
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        || (uint64_t v14 = (void *)(v4 + 344), v18))
      {
        std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back(v14, &v18);
      }
      int v15 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v15) {
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      }
      int v9 = 0;
    }
  }
  while (v9 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Init(std::function<BOOL ()(dmlc::io::InputSplitBase::Chunk**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_22EA14914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12) {
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Init(std::function<BOOL ()(dmlc::io::InputSplitBase::Chunk**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    }
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(void *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) == 1)
  {
    while (*(void *)(v17 + 336))
    {
      std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back(v15, (void *)(*(void *)(*(void *)(v17 + 304) + ((*(void *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(void *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_22EA18F80);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) {
         || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
  }
             int v20 = *(_DWORD *)(v17 + 184),
             std::unique_lock<std::mutex>::unlock(&a12),
             !v20))
  {
LABEL_10:
    if (a12.__owns_) {
      std::mutex::unlock(a12.__m_);
    }
    __cxa_end_catch();
    JUMPOUT(0x22EA148D8);
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

uint64_t *std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Init(std::function<BOOL ()(dmlc::io::InputSplitBase::Chunk**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](result + 6);
    std::__function::__value_func<BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::~__value_func[abi:ne180100](v1 + 2);
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

void std::__function::__func<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::~__func()
{
}

void *std::__function::__func<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E24F030;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E24F030;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::operator()(uint64_t a1, void **a2)
{
  if (!**a2) {
    operator new();
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 24) + 104);

  return v2();
}

void sub_22EA14C6C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10C40512A2CE0);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::target_type()
{
}

void std::__function::__func<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(void)#1},std::allocator<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(void)#1},std::allocator<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E24F0C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(void)#1},std::allocator<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E24F0C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(void)#1},std::allocator<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(void)#1},std::allocator<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(void)#1},std::allocator<dmlc::io::ThreadedInputSplit::ThreadedInputSplit(dmlc::io::InputSplitBase *,unsigned long)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::~ThreadedIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E24EFD0;
  dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_22EA14F18(_Unwind_Exception *a1)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Destroy(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    std::mutex::lock((std::mutex *)(a1 + 56));
    atomic_store(2u, (unsigned int *)(a1 + 24));
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    std::mutex::unlock((std::mutex *)(a1 + 56));
    uint64_t v2 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  uint64_t v3 = *(void *)(a1 + 384);
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 376);
    do
    {
      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 352) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
      if (v5)
      {
        uint64_t v6 = *(void **)(v5 + 16);
        if (v6)
        {
          *(void *)(v5 + 24) = v6;
          operator delete(v6);
        }
        MEMORY[0x230FA80D0](v5, 0x10C40512A2CE0);
        unint64_t v4 = *(void *)(a1 + 376);
        uint64_t v3 = *(void *)(a1 + 384);
      }
      --v3;
      *(void *)(a1 + 376) = ++v4;
      *(void *)(a1 + 384) = v3;
      if (v4 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 352));
        *(void *)(a1 + 352) += 8;
        uint64_t v3 = *(void *)(a1 + 384);
        unint64_t v4 = *(void *)(a1 + 376) - 512;
        *(void *)(a1 + 376) = v4;
      }
    }
    while (v3);
  }
  uint64_t v7 = *(void *)(a1 + 336);
  if (v7)
  {
    unint64_t v8 = *(void *)(a1 + 328);
    do
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
      if (v9)
      {
        uint64_t v10 = *(void **)(v9 + 16);
        if (v10)
        {
          *(void *)(v9 + 24) = v10;
          operator delete(v10);
        }
        MEMORY[0x230FA80D0](v9, 0x10C40512A2CE0);
        unint64_t v8 = *(void *)(a1 + 328);
        uint64_t v7 = *(void *)(a1 + 336);
      }
      --v7;
      *(void *)(a1 + 328) = ++v8;
      *(void *)(a1 + 336) = v7;
      if (v8 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 304));
        *(void *)(a1 + 304) += 8;
        uint64_t v7 = *(void *)(a1 + 336);
        unint64_t v8 = *(void *)(a1 + 328) - 512;
        *(void *)(a1 + 328) = v8;
      }
    }
    while (v7);
  }
  if (*(void *)(a1 + 8))
  {
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  uint64_t v12 = *(void *)(a1 + 288);
  if (v12)
  {
    uint64_t v13 = *(void **)(v12 + 16);
    if (v13)
    {
      *(void *)(v12 + 24) = v13;
      operator delete(v13);
    }
    MEMORY[0x230FA80D0](v12, 0x10C40512A2CE0);
    *(void *)(a1 + 288) = 0;
  }
}

void sub_22EA15244(_Unwind_Exception *a1)
{
  dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::~ThreadedIter(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::CachedInputSplit::HintChunkSize(uint64_t this, unint64_t a2)
{
  unint64_t v2 = a2 >> 2;
  if (a2 >> 2 <= *(void *)(this + 8)) {
    unint64_t v2 = *(void *)(this + 8);
  }
  *(void *)(this + 8) = v2;
  return this;
}

uint64_t dmlc::io::CachedInputSplit::GetTotalSize(dmlc::io::CachedInputSplit *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7) + 8))();
}

void dmlc::io::CachedInputSplit::BeforeFirst(dmlc::io::CachedInputSplit *this)
{
  v18[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    uint64_t v3 = (void *)((char *)this + 64);
    if (*((void *)this + 8))
    {
      dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(*((void *)this + 9));
      std::mutex::lock((std::mutex *)(v2 + 56));
      std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back((void *)(v2 + 344), (void *)this + 8);
      *uint64_t v3 = 0;
      if (*(_DWORD *)(v2 + 188))
      {
        unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(v2 + 40), memory_order_acquire);
        std::mutex::unlock((std::mutex *)(v2 + 56));
        if ((explicit & 1) == 0) {
          std::condition_variable::notify_one((std::condition_variable *)(v2 + 192));
        }
      }
      else
      {
        std::mutex::unlock((std::mutex *)(v2 + 56));
      }
      dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(v2);
      uint64_t v2 = *((void *)this + 9);
    }
    int v5 = dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Next(v2, (void *)this + 8);
    uint64_t v6 = *((void *)this + 9);
    if (v5)
    {
      do
      {
        dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(v6);
        std::mutex::lock((std::mutex *)(v6 + 56));
        std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back((void *)(v6 + 344), (void *)this + 8);
        *uint64_t v3 = 0;
        if (*(_DWORD *)(v6 + 188))
        {
          unsigned __int8 v7 = atomic_load_explicit((atomic_uchar *volatile)(v6 + 40), memory_order_acquire);
          std::mutex::unlock((std::mutex *)(v6 + 56));
          if ((v7 & 1) == 0) {
            std::condition_variable::notify_one((std::condition_variable *)(v6 + 192));
          }
        }
        else
        {
          std::mutex::unlock((std::mutex *)(v6 + 56));
        }
        dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(v6);
        char v8 = dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Next(*((void *)this + 9), (void *)this + 8);
        uint64_t v6 = *((void *)this + 9);
      }
      while ((v8 & 1) != 0);
    }
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v9 = *((void *)this + 5);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
    }
    *((void *)this + 9) = 0;
    *((void *)this + 5) = 0;
    uint64_t v10 = (dmlc::io::CachedInputSplit *)((char *)this + 16);
    if (*((char *)this + 39) < 0) {
      uint64_t v10 = *(dmlc::SeekStream **)v10;
    }
    uint64_t v11 = dmlc::SeekStream::CreateForRead(v10, (const char *)1);
    *((void *)this + 6) = v11;
    if (v11)
    {
      v18[0] = &unk_26E24F1B0;
      v18[1] = this;
      v18[3] = v18;
      v17[0] = &unk_26E24F230;
      v17[1] = this;
      v17[3] = v17;
      dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Init((uint64_t)this + 80, (uint64_t)v18, (uint64_t)v17);
    }
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v18);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/cached_input_split.h");
    uint64_t v13 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v18);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: this->InitCachedIter()", 36);
    int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Failed to initialize CachedIter", 31);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v18);
  }
  else
  {
    dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::BeforeFirst((uint64_t)this + 80);
  }
  if (*((void *)this + 8))
  {
    dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet((uint64_t)this + 80);
    std::mutex::lock((std::mutex *)((char *)this + 136));
    std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back((void *)this + 53, (void *)this + 8);
    *((void *)this + 8) = 0;
    if (*((_DWORD *)this + 67))
    {
      unsigned __int8 v16 = atomic_load_explicit((atomic_uchar *volatile)this + 120, memory_order_acquire);
      std::mutex::unlock((std::mutex *)((char *)this + 136));
      if ((v16 & 1) == 0) {
        std::condition_variable::notify_one((std::condition_variable *)((char *)this + 272));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)((char *)this + 136));
    }
    dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet((uint64_t)this + 80);
  }
}

void sub_22EA155B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::CachedInputSplit::NextRecord(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)(a1 + 64);
  if (*(void *)(a1 + 72)) {
    uint64_t v5 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v5 = a1 + 80;
  }
  if (!*(void *)(a1 + 64) && !dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Next(v5, v4)) {
    return 0;
  }
  do
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56), a2, *(void *)(a1 + 64));
    if (v6) {
      break;
    }
    dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(v5);
    std::mutex::lock((std::mutex *)(v5 + 56));
    std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back((void *)(v5 + 344), v4);
    *unint64_t v4 = 0;
    if (*(_DWORD *)(v5 + 188))
    {
      unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(v5 + 40), memory_order_acquire);
      std::mutex::unlock((std::mutex *)(v5 + 56));
      if ((explicit & 1) == 0) {
        std::condition_variable::notify_one((std::condition_variable *)(v5 + 192));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)(v5 + 56));
    }
    dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(v5);
  }
  while ((dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Next(v5, v4) & 1) != 0);
  return v6;
}

void sub_22EA15738(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::CachedInputSplit::NextChunk(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 64);
  if (*(void *)(a1 + 72)) {
    uint64_t v4 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v4 = a1 + 80;
  }
  if (*(void *)(a1 + 64)
    || (uint64_t result = dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Next(v4, v3), result))
  {
    while (1)
    {
      uint64_t v6 = *v3;
      uint64_t v8 = **v3;
      uint64_t v7 = (*v3)[1];
      if (v8 != v7) {
        break;
      }
      dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(v4);
      std::mutex::lock((std::mutex *)(v4 + 56));
      std::deque<dmlc::io::InputSplitBase::Chunk *>::push_back((void *)(v4 + 344), v3);
      *uint64_t v3 = 0;
      if (*(_DWORD *)(v4 + 188))
      {
        unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire);
        std::mutex::unlock((std::mutex *)(v4 + 56));
        if ((explicit & 1) == 0) {
          std::condition_variable::notify_one((std::condition_variable *)(v4 + 192));
        }
      }
      else
      {
        std::mutex::unlock((std::mutex *)(v4 + 56));
      }
      dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::ThrowExceptionIfSet(v4);
      if ((dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Next(v4, v3) & 1) == 0) {
        return 0;
      }
    }
    *a2 = v8;
    a2[1] = v7 - v8;
    uint64_t *v6 = v7;
    return 1;
  }
  return result;
}

void sub_22EA15848(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void dmlc::io::CachedInputSplit::~CachedInputSplit(dmlc::io::CachedInputSplit *this)
{
  dmlc::io::CachedInputSplit::~CachedInputSplit(this);

  JUMPOUT(0x230FA80D0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_26E24F140;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::Destroy((uint64_t)this + 80);
  uint64_t v4 = *((void *)this + 8);
  if (v4)
  {
    uint64_t v5 = *(void **)(v4 + 16);
    if (v5)
    {
      *(void *)(v4 + 24) = v5;
      operator delete(v5);
    }
    MEMORY[0x230FA80D0](v4, 0x10C40512A2CE0);
  }
  uint64_t v6 = *((void *)this + 7);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::~ThreadedIter((uint64_t)this + 80);
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

void sub_22EA158A8(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B3C4005E97F15);
  _Unwind_Resume(a1);
}

void dmlc::io::CachedInputSplit::ResetPartition(dmlc::io::CachedInputSplit *this)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/cached_input_split.h");
  uint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"ResetPartition is not supported in CachedInputSplit", 51);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
}

void sub_22EA15928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__function::__func<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::~__func()
{
}

void *std::__function::__func<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E24F1B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E24F1B0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = **a2;
  if (!v3) {
    operator new();
  }
  unint64_t v30 = 0;
  uint64_t v4 = (***(uint64_t (****)(void, unint64_t *, uint64_t))(v2 + 48))(*(void *)(v2 + 48), &v30, 8);
  uint64_t v5 = v4;
  if (v4)
  {
    if (v4 != 8)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/cached_input_split.h");
      uint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: nread == sizeof(size)", 35);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
      int v10 = *(char *)(v2 + 39);
      if (v10 >= 0) {
        uint64_t v11 = v2 + 16;
      }
      else {
        uint64_t v11 = *(void *)(v2 + 16);
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(v2 + 39);
      }
      else {
        uint64_t v12 = *(void *)(v2 + 24);
      }
      uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" has invalid cache file format", 30);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
    }
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v3 + 16), (v30 >> 3) + 1);
    if (*(void *)(v3 + 24) == *(void *)(v3 + 16)) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = *(void *)(v3 + 16);
    }
    uint64_t v15 = v14 + v30;
    *(void *)uint64_t v3 = v14;
    *(void *)(v3 + 8) = v15;
    if ((***(uint64_t (****)(void))(v2 + 48))() != v30)
    {
      unsigned __int8 v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/cached_input_split.h");
      uint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: fi_->Read(p->begin, size) == size", 47);
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
      uint64_t v22 = *(void *)(v2 + 16);
      uint64_t v21 = v2 + 16;
      uint64_t v20 = v22;
      int v23 = *(char *)(v21 + 23);
      if (v23 >= 0) {
        uint64_t v24 = v21;
      }
      else {
        uint64_t v24 = v20;
      }
      if (v23 >= 0) {
        uint64_t v25 = *(unsigned __int8 *)(v21 + 23);
      }
      else {
        uint64_t v25 = *(void *)(v21 + 8);
      }
      uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" has invalid cache file format", 30);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
    }
  }
  return v5 != 0;
}

void sub_22EA15BF0(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10C40512A2CE0);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::target_type()
{
}

void std::__function::__func<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(void)#1},std::allocator<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(void)#1},std::allocator<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E24F230;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(void)#1},std::allocator<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E24F230;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(void)#1},std::allocator<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 48) + 32))(*(void *)(*(void *)(a1 + 8) + 48), 0);
}

uint64_t std::__function::__func<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(void)#1},std::allocator<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(void)#1},std::allocator<dmlc::io::CachedInputSplit::InitCachedIter(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void dmlc::ThreadedIter<dmlc::io::InputSplitBase::Chunk>::NotImplemented()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BeforeFirst is not supported", 28);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_22EA15DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__function::__func<dmlc::io::CachedInputSplit::InitPreprocIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::CachedInputSplit::InitPreprocIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::~__func()
{
}

void *std::__function::__func<dmlc::io::CachedInputSplit::InitPreprocIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::CachedInputSplit::InitPreprocIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E24F2B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::io::CachedInputSplit::InitPreprocIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::CachedInputSplit::InitPreprocIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E24F2B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::io::CachedInputSplit::InitPreprocIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::CachedInputSplit::InitPreprocIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)**a2;
  if (!v3) {
    operator new();
  }
  uint64_t v4 = (*(uint64_t (**)(void, void *))(**(void **)(v2 + 56) + 96))(*(void *)(v2 + 56), v3);
  if (v4)
  {
    uint64_t v6 = v3[1] - *v3;
    (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(v2 + 40) + 8))(*(void *)(v2 + 40), &v6, 8);
    (*(void (**)(void, void, uint64_t))(**(void **)(v2 + 40) + 8))(*(void *)(v2 + 40), *v3, v6);
  }
  return v4;
}

void sub_22EA15FA0(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10C40512A2CE0);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::io::CachedInputSplit::InitPreprocIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::CachedInputSplit::InitPreprocIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::io::CachedInputSplit::InitPreprocIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1},std::allocator<dmlc::io::CachedInputSplit::InitPreprocIter(void)::{lambda(dmlc::io::InputSplitBase::Chunk **)#1}>,BOOL ()(dmlc::io::InputSplitBase::Chunk **)>::target_type()
{
}

void std::__function::__func<void (*)(void),std::allocator<void (*)(void)>,void ()(void)>::~__func()
{
}

void *std::__function::__func<void (*)(void),std::allocator<void (*)(void)>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E24F330;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(void),std::allocator<void (*)(void)>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E24F330;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(void),std::allocator<void (*)(void)>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t std::__function::__func<void (*)(void),std::allocator<void (*)(void)>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<void (*)(void),std::allocator<void (*)(void)>,void ()(void)>::target_type()
{
}

void sub_22EA1623C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::Registry<xgboost::ObjFunctionReg>::~Registry(uint64_t a1)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 127) < 0) {
          operator delete(*(void **)(v5 + 104));
        }
        std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100]((void *)(v5 + 72));
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x1032C40EA5FD255);
        uint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t xgboost::ObjFunction::Create(const void **a1, uint64_t a2)
{
  dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  uint64_t v4 = qword_26AD725D8;
  if (!qword_26AD725D8) {
    goto LABEL_11;
  }
  uint64_t v5 = &qword_26AD725D8;
  do
  {
    BOOL v6 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD725E0, (const void **)(v4 + 32), a1);
    uint64_t v7 = (uint64_t *)(v4 + 8);
    if (!v6)
    {
      uint64_t v7 = (uint64_t *)v4;
      uint64_t v5 = (uint64_t *)v4;
    }
    uint64_t v4 = *v7;
  }
  while (*v7);
  if (v5 == &qword_26AD725D8
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD725E0, a1, (const void **)v5 + 4)
    || (uint64_t v8 = v5[7]) == 0)
  {
LABEL_11:
    uint64_t v11 = v34;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
    dmlc::Registry<xgboost::ObjFunctionReg>::Get();
    uint64_t v12 = (uint64_t **)qword_26AD725B8;
    uint64_t v13 = (uint64_t **)unk_26AD725C0;
    if (qword_26AD725B8 != unk_26AD725C0) {
      goto LABEL_29;
    }
    while (1)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/objective.cc");
      uint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
      int v17 = *((char *)a1 + 23);
      if (v17 >= 0) {
        uint64_t v18 = a1;
      }
      else {
        uint64_t v18 = (void *)*a1;
      }
      if (v17 >= 0) {
        uint64_t v19 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        uint64_t v19 = (uint64_t)a1[1];
      }
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
      a1 = (const void **)v35;
      std::stringbuf::str();
      if ((v32 & 0x80u) == 0) {
        uint64_t v22 = __p;
      }
      else {
        uint64_t v22 = (void **)__p[0];
      }
      if ((v32 & 0x80u) == 0) {
        uint64_t v23 = v32;
      }
      else {
        uint64_t v23 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      if ((char)v32 < 0) {
        operator delete(__p[0]);
      }
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v33);
      uint64_t v11 = (void *)MEMORY[0x263F8C2B8];
      v34[0] = *MEMORY[0x263F8C2B8];
      uint64_t v24 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
      void v34[2] = v24;
      v35[0] = MEMORY[0x263F8C318] + 16;
      if (v36 < 0) {
        operator delete((void *)v35[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x230FA8020](&v37);
      __break(1u);
LABEL_29:
      uint64_t v25 = v11 + 2;
      do
      {
        uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Objective candidate: ", 21);
        int v27 = *((char *)*v12 + 23);
        if (v27 >= 0) {
          uint64_t v28 = (uint64_t)*v12;
        }
        else {
          uint64_t v28 = **v12;
        }
        if (v27 >= 0) {
          uint64_t v29 = *((unsigned __int8 *)*v12 + 23);
        }
        else {
          uint64_t v29 = (*v12)[1];
        }
        unint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n", 1);
        ++v12;
      }
      while (v12 != v13);
    }
  }
  uint64_t v9 = *(void *)(v8 + 96);
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
  *(void *)(result + 8) = a2;
  return result;
}

void sub_22EA16690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void xgboost::SparsePage::Push<xgboost::data::CSCAdapterBatch>()
{
  while (1)
    ;
}

void xgboost::SparsePage::Push<xgboost::data::CSRAdapterBatch>()
{
  while (1)
    ;
}

void xgboost::SparsePage::Push<xgboost::data::FileAdapterBatch>()
{
  while (1)
    ;
}

void xgboost::SparsePage::Push<xgboost::data::ArrayAdapterBatch>()
{
  while (1)
    ;
}

void xgboost::SparsePage::Push<xgboost::data::DenseAdapterBatch>()
{
  while (1)
    ;
}

void xgboost::SparsePage::Push<xgboost::data::CSRArrayAdapterBatch>()
{
  while (1)
    ;
}

void xgboost::SparsePage::Push<xgboost::data::DataTableAdapterBatch>()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::Copy()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::Resize()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::~HostDeviceVector()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::operator=()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::~HostDeviceVector()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::~HostDeviceVector()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<double>::~HostDeviceVector()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<float>::Copy()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<float>::Extend()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<float>::~HostDeviceVector()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<float>::operator=()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<unsigned char>::~HostDeviceVector()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<int>::~HostDeviceVector()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<unsigned int>::Copy()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<unsigned int>::~HostDeviceVector()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<unsigned int>::operator=()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector()
{
  while (1)
    ;
}

void xgboost::HostDeviceVector<unsigned long long>::~HostDeviceVector()
{
  while (1)
    ;
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::CSCAdapter>()
{
  while (1)
    ;
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::CSRAdapter>()
{
  while (1)
    ;
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::FileAdapter>()
{
  while (1)
    ;
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::ArrayAdapter>()
{
  while (1)
    ;
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::DenseAdapter>()
{
  while (1)
    ;
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::CSRArrayAdapter>()
{
  while (1)
    ;
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::IteratorAdapter<void *,int ()(void *,int (*)(void *,XGBoostBatchCSR),void *),XGBoostBatchCSR>>()
{
  while (1)
    ;
}

void xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::DataTableAdapter>()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<double>::ExpandTree()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<double>::UpdateTree()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<double>::InitSampling()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<double>::BuildHistogram()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<double>::InitData()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<double>::InitRoot()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<float>::ExpandTree()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<float>::UpdateTree()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<float>::InitSampling()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<float>::BuildHistogram()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<float>::InitData()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<float>::InitRoot()
{
  while (1)
    ;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::LoadBalance()
{
  while (1)
    ;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::PushRowPage()
{
  while (1)
    ;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize()
{
  while (1)
    ;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::GatherSketchInfo()
{
  while (1)
    ;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::AllReduce()
{
  while (1)
    ;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::SketchContainerImpl()
{
  while (1)
    ;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::LoadBalance()
{
  while (1)
    ;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::CalcColumnSize()
{
  while (1)
    ;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::GatherSketchInfo()
{
  while (1)
    ;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::AllReduce()
{
  while (1)
    ;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::SketchContainerImpl()
{
  while (1)
    ;
}

void xgboost::RegTree::LoadCategoricalSplit<false>()
{
  while (1)
    ;
}

void xgboost::RegTree::LoadCategoricalSplit<true>()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<double>::UpdatePredictionCache()
{
  while (1)
    ;
}

void xgboost::tree::QuantileHistMaker::Builder<float>::UpdatePredictionCache()
{
  while (1)
    ;
}

void xgboost::common::GHistBuilder<double>::BuildHist<false>()
{
  while (1)
    ;
}

void xgboost::common::GHistBuilder<double>::BuildHist<true>()
{
  while (1)
    ;
}

void xgboost::common::GHistBuilder<float>::BuildHist<false>()
{
  while (1)
    ;
}

void xgboost::common::GHistBuilder<float>::BuildHist<true>()
{
  while (1)
    ;
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x270F98200](this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98238](this, __c, __pos);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98240](this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x270F982D8](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98318](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::exception_ptr *__cdecl std::exception_ptr::exception_ptr(std::exception_ptr *this, const std::exception_ptr *a2)
{
  return (std::exception_ptr *)MEMORY[0x270F98398](this, a2);
}

void std::exception_ptr::~exception_ptr(std::exception_ptr *this)
{
}

std::exception_ptr *__cdecl std::exception_ptr::operator=(std::exception_ptr *this, const std::exception_ptr *a2)
{
  return (std::exception_ptr *)MEMORY[0x270F983A8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983D0](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x270F98440](this, *(void *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string::reference std::string::at(std::string *this, std::string::size_type __n)
{
  return (std::string::reference)MEMORY[0x270F98478](this, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return (std::string::iterator)MEMORY[0x270F984D8](this, __pos.__i_, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984E0](this, __pos, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98500](this, __pos, __n1, __s);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x270F98508](this, __pos, __n1, __s, __n2);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x270F98568](this, __c);
}

std::future_error *__cdecl std::future_error::future_error(std::future_error *this, std::error_code __ec)
{
  return (std::future_error *)MEMORY[0x270F985E0](this, *(void *)&__ec.__val_, __ec.__cat_);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::get()
{
  return MEMORY[0x270F98668]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x270F98670]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x270F98690]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x270F98698]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::getline()
{
  return MEMORY[0x270F986B8]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x270F986E8]();
}

{
  return MEMORY[0x270F986F0]();
}

{
  return MEMORY[0x270F986F8]();
}

{
  return MEMORY[0x270F98708]();
}

{
  return MEMORY[0x270F98720]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98778]();
}

{
  return MEMORY[0x270F98788]();
}

{
  return MEMORY[0x270F98790]();
}

{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987B8]();
}

{
  return MEMORY[0x270F987C0]();
}

{
  return MEMORY[0x270F987D8]();
}

{
  return MEMORY[0x270F987E0]();
}

void std::__shared_count::~__shared_count(std::__shared_count *this)
{
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x270F98890](__s, __icase);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x270F98898](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

const std::error_category *std::future_category(void)
{
  return (const std::error_category *)MEMORY[0x270F988E0]();
}

void std::__assoc_sub_state::__sub_wait(std::__assoc_sub_state *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::__assoc_sub_state::set_exception(std::__assoc_sub_state *this, std::exception_ptr __p)
{
}

void std::__assoc_sub_state::wait(std::__assoc_sub_state *this)
{
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x270F989F8]();
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x270F98A00](retstr, __s);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x270F98B78](__str, __idx, *(void *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

BOOL std::mutex::try_lock(std::mutex *this)
{
  return MEMORY[0x270F98BB0](this);
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x270F98BE8]();
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x270F98BF0]();
}

uint64_t std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>()
{
  return MEMORY[0x270F98BF8]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x270F98C18]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::thread::join(std::thread *this)
{
}

void std::thread::detach(std::thread *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x270F98E58](this);
}

void std::exception::~exception(std::exception *this)
{
}

std::exception_ptr std::current_exception(void)
{
  return (std::exception_ptr)MEMORY[0x270F98E98]();
}

void std::rethrow_exception(std::exception_ptr a1)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return (char *)MEMORY[0x270F98EE8](lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

void _tlv_atexit(void (__cdecl *termFunc)(void *), void *objAddr)
{
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x270ED8478](*(void *)&a1, a2, a3);
}

double atof(const char *a1)
{
  MEMORY[0x270ED86E0](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

uint64_t atoll(const char *a1)
{
  return MEMORY[0x270ED86F8](a1);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x270ED8718](a1, *(void *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x270ED8730](a1, *(void *)&a2);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x270ED8758](*(void *)&a1, a2, *(void *)&a3);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x270ED8F30](a1);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x270ED8F58](*(void *)&a1, a2, *(void *)&a3);
}

long double erf(long double __x)
{
  MEMORY[0x270ED9780](__x);
  return result;
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x270ED98D0](*(void *)&a1, *(void *)&a2);
}

int feof(FILE *a1)
{
  return MEMORY[0x270ED9910](a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x270ED9978](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

void freeaddrinfo(addrinfo *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x270ED9AC0](a1, a2, *(void *)&a3);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x270ED9AF0](*(void *)&a1, a2);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x270ED9B18](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return MEMORY[0x270ED9B98](a1, a2, a3, a4);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

int gethostname(char *a1, size_t a2)
{
  return MEMORY[0x270ED9C58](a1, a2);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x270ED9D90](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, a5);
}

float lgammaf(float a1)
{
  MEMORY[0x270EDA058](a1);
  return result;
}

int listen(int a1, int a2)
{
  return MEMORY[0x270EDA078](*(void *)&a1, *(void *)&a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x270EDA0A0](a1, a2);
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

float log1pf(float a1)
{
  MEMORY[0x270EDA0C8](a1);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x270EDA0D8](__x);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x270EDA0E0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDA120](a1, a2);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

double nan(const char *a1)
{
  MEMORY[0x270EDA600](a1);
  return result;
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x270EDA858](a1);
}

int poll(pollfd *a1, nfds_t a2, int a3)
{
  return MEMORY[0x270EDAC40](a1, *(void *)&a2, *(void *)&a3);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x270EDAEA0](a1, a2, a3, a4);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x270EDB048](a1, a2);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x270EDB128](a1);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x270EDB190](*(void *)&a1, a2, a3, *(void *)&a4);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x270EDB1E8](__p, __ec);
}

int rmdir(const char *a1)
{
  return MEMORY[0x270EDB268](a1);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x270EDB3B0](*(void *)&a1, a2, a3, *(void *)&a4);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x270EDB440](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, *(void *)&a5);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x270EDB508](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x270EDB520](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x270EDB590](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x270EDB5C0](__dst, __src);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB680](__s, *(void *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB6A0](__s1, __s2);
}

float strtof(const char *a1, char **a2)
{
  MEMORY[0x270EDB6B8](a1, a2);
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6E8](__str, __endptr, *(void *)&__base);
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}