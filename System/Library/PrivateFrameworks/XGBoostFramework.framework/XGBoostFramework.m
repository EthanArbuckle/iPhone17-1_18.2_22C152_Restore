long long *xgboost::PesudoHuberParam::__MANAGER__(xgboost::PesudoHuberParam *this)
{
  std::string __p;

  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_11, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_11))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "PesudoHuberParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::PesudoHuberParam>::ParamManagerSingleton(&__p);
  }
  return &xmmword_26AD71BC0;
}

void sub_22E896300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_11);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::LearnerTrainParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71FB0 = 0;
  qword_26AD71FB8 = 0;
  *(_OWORD *)&stru_26AD71F78.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD71F78.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD71F98 = 0u;
  qword_26AD71FA8 = (uint64_t)&qword_26AD71FB0;
  std::string::operator=(&stru_26AD71F78, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "dsplit");
  operator new();
}

void sub_22E896908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (*(char *)(v29 - 65) < 0) {
    operator delete(*(void **)(v29 - 88));
  }
  if (*(char *)(v29 - 17) < 0) {
    operator delete(*(void **)(v29 - 40));
  }
  if (*(char *)(v29 - 41) < 0) {
    operator delete(*(void **)(v29 - 64));
  }
  xgboost::LearnerTrainParam::~LearnerTrainParam(&a10);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD71F78);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBTreeTrainParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71EC0 = 0;
  qword_26AD71EC8 = 0;
  *(_OWORD *)&stru_26AD71E88.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD71E88.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD71EA8 = 0u;
  qword_26AD71EB8 = (uint64_t)&qword_26AD71EC0;
  std::string::operator=(&stru_26AD71E88, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "updater_seq");
  operator new();
}

void sub_22E89719C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v33 - 65) < 0) {
    operator delete(*(void **)(v33 - 88));
  }
  if (*(char *)(v33 - 17) < 0) {
    operator delete(*(void **)(v33 - 40));
  }
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD71E88);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntry<int>::add_enum(uint64_t a1, const void **a2, int a3)
{
  int v32 = a3;
  v6 = (uint64_t **)(a1 + 128);
  if (*(void *)(a1 + 144)
    && std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>(a1 + 128, a2))
  {
LABEL_9:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Enum ", 5);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
    int v13 = *((char *)a2 + 23);
    if (v13 >= 0) {
      uint64_t v14 = (uint64_t)a2;
    }
    else {
      uint64_t v14 = (uint64_t)*a2;
    }
    if (v13 >= 0) {
      uint64_t v15 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v15 = (uint64_t)a2[1];
    }
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    v17 = (void *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" exisit!", 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")\n", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Enums: ", 7);
    v19 = *(void **)(a1 + 128);
    if (v19 != (void *)(a1 + 136))
    {
      do
      {
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
        int v22 = *((char *)v19 + 55);
        if (v22 >= 0) {
          uint64_t v23 = (uint64_t)(v19 + 4);
        }
        else {
          uint64_t v23 = v19[4];
        }
        if (v22 >= 0) {
          uint64_t v24 = *((unsigned __int8 *)v19 + 55);
        }
        else {
          uint64_t v24 = v19[5];
        }
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
        v26 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"), ", 3);
        v27 = (void *)v19[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (void *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (void *)v19[2];
            BOOL v29 = *v28 == (void)v19;
            v19 = v28;
          }
          while (!v29);
        }
        v19 = v28;
      }
      while (v28 != (void *)(a1 + 136));
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v30);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  for (i = *(uint64_t **)(a1 + 160); i; i = (uint64_t *)*i)
  {
    int v8 = *((_DWORD *)i + 8);
    if (v8 <= a3)
    {
      if (v8 >= a3) {
        goto LABEL_9;
      }
      ++i;
    }
  }
  v31[0] = (long long *)a2;
  *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, v31)+ 14) = a3;
  v31[0] = (long long *)&v32;
  v9 = std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 152), &v32, (uint64_t)&std::piecewise_construct, (_DWORD **)v31);
  std::string::operator=((std::string *)(v9 + 5), (const std::string *)a2);
  *(unsigned char *)(a1 + 120) = 1;
  return a1;
}

void sub_22E8975A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t **std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        v6 = *v9;
        v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_22E8977E0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void xgboost::tree::TrainParam::__DECLARE__()
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "learning_rate");
  operator new();
}

void sub_22E899838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *dmlc::parameter::ParamManager::AddEntry(uint64_t a1, const void **a2, uint64_t a3)
{
  v6 = (char **)(a1 + 24);
  *(void *)(a3 + 16) = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
  v7 = (uint64_t **)(a1 + 48);
  if (std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>(a1 + 48, a2))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/./parameter.h");
    long long v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
    int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"key ", 4);
    int v11 = *((char *)a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (uint64_t)a2;
    }
    else {
      uint64_t v12 = (uint64_t)*a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v13 = (uint64_t)a2[1];
    }
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" has already been registered in ", 32);
    int v16 = *(char *)(a1 + 23);
    if (v16 >= 0) {
      uint64_t v17 = a1;
    }
    else {
      uint64_t v17 = *(void *)a1;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v18 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v33);
  }
  unint64_t v19 = *(void *)(a1 + 40);
  v20 = *(uint64_t **)(a1 + 32);
  if ((unint64_t)v20 >= v19)
  {
    uint64_t v22 = ((char *)v20 - *v6) >> 3;
    if ((unint64_t)(v22 + 1) >> 61) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = v19 - (void)*v6;
    uint64_t v24 = v23 >> 2;
    if (v23 >> 2 <= (unint64_t)(v22 + 1)) {
      uint64_t v24 = v22 + 1;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25) {
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 40, v25);
    }
    else {
      uint64_t v26 = 0;
    }
    v27 = (uint64_t *)&v26[8 * v22];
    v28 = &v26[8 * v25];
    uint64_t *v27 = a3;
    v21 = v27 + 1;
    std::string v30 = *(char **)(a1 + 24);
    BOOL v29 = *(char **)(a1 + 32);
    if (v29 != v30)
    {
      do
      {
        uint64_t v31 = *((void *)v29 - 1);
        v29 -= 8;
        *--v27 = v31;
      }
      while (v29 != v30);
      BOOL v29 = *v6;
    }
    *(void *)(a1 + 24) = v27;
    *(void *)(a1 + 32) = v21;
    *(void *)(a1 + 40) = v28;
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    uint64_t *v20 = a3;
    v21 = v20 + 1;
  }
  *(void *)(a1 + 32) = v21;
  v34 = a2;
  result = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, a2, (uint64_t)&std::piecewise_construct, (long long **)&v34);
  result[7] = a3;
  return result;
}

void sub_22E899BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11)
{
}

uint64_t *std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

void *std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        int v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    int v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    int v6 = a2;
  }
  else {
    int v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  size_t v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_22E89A138(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<float>,float>::set_lower_bound(uint64_t result, float a2)
{
  *(float *)(result + 112) = a2;
  *(unsigned char *)(result + 108) = 1;
  return result;
}

uint64_t *dmlc::parameter::ParamManager::AddAlias(uint64_t a1, const void **a2, const void **a3)
{
  int v6 = (uint64_t **)(a1 + 48);
  if (!std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>(a1 + 48, a2))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/./parameter.h");
    uint64_t v8 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
    long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"key ", 4);
    int v10 = *((char *)a2 + 23);
    if (v10 >= 0) {
      uint64_t v11 = (uint64_t)a2;
    }
    else {
      uint64_t v11 = (uint64_t)*a2;
    }
    if (v10 >= 0) {
      uint64_t v12 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v12 = (uint64_t)a2[1];
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" has not been registered in ", 28);
    int v15 = *(char *)(a1 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = *(void *)a1;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v31);
  }
  if (std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v6, a3))
  {
    uint64_t v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
    dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/./parameter.h");
    unint64_t v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Alias ", 6);
    int v21 = *((char *)a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = (uint64_t)a3;
    }
    else {
      uint64_t v22 = (uint64_t)*a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v23 = (uint64_t)a3[1];
    }
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
    unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" has already been registered in ", 32);
    int v26 = *(char *)(a1 + 23);
    if (v26 >= 0) {
      uint64_t v27 = a1;
    }
    else {
      uint64_t v27 = *(void *)a1;
    }
    if (v26 >= 0) {
      uint64_t v28 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v28 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v31);
  }
  uint64_t v31 = a2;
  uint64_t v29 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v31)[7];
  uint64_t v31 = a3;
  result = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a3, (uint64_t)&std::piecewise_construct, (long long **)&v31);
  result[7] = v29;
  return result;
}

void sub_22E89A33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<float>,float>::set_range(uint64_t result, float a2, float a3)
{
  *(float *)(result + 112) = a2;
  *(float *)(result + 116) = a3;
  *(_WORD *)(result + 108) = 257;
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::set_lower_bound(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  *(unsigned char *)(result + 108) = 1;
  return result;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  std::string::size_type v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

void dmlc::parameter::ParamManagerSingleton<xgboost::PesudoHuberParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71BF8 = 0;
  qword_26AD71C00 = 0;
  xmmword_26AD71BC0 = 0u;
  *(_OWORD *)algn_26AD71BD0 = 0u;
  xmmword_26AD71BE0 = 0u;
  qword_26AD71BF0 = (uint64_t)&qword_26AD71BF8;
  std::string::operator=((std::string *)&xmmword_26AD71BC0, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "huber_slope");
  operator new();
}

void sub_22E89A6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD71BC0);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<double>,double>::set_range(uint64_t result, double a2, double a3)
{
  *(double *)(result + 120) = a2;
  *(double *)(result + 128) = a3;
  *(_WORD *)(result + 112) = 257;
  return result;
}

void _GLOBAL__sub_I_survival_metric_cc()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "aft-nloglik");
  v1 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Negative log likelihood of Accelerated Failure Time model.");
  std::string::operator=(v1 + 1, &__str);
  v7[0] = &unk_26E24E7D8;
  uint64_t v8 = v7;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v7);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v7);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_AFTNLogLik__ = (uint64_t)v1;
  v2 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "interval-regression-accuracy");
  uint64_t v3 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v2, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_22EA3D4EA);
  std::string::operator=(v3 + 1, &__str);
  v7[0] = &unk_26E24E9D8;
  uint64_t v8 = v7;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v3[3].__r_.__value_.__r.__words, (uint64_t)v7);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v7);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_IntervalRegressionAccuracy__ = (uint64_t)v3;
}

void sub_22E89A8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_auc_cc()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "auc");
  v1 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Receiver Operating Characteristic Area Under the Curve.");
  std::string::operator=(v1 + 1, &__str);
  v7[0] = &unk_26E24A548;
  uint64_t v8 = v7;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v7);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v7);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_EvalAUC__ = (uint64_t)v1;
  v2 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "aucpr");
  uint64_t v3 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v2, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Area under PR curve for both classification and rank.");
  std::string::operator=(v3 + 1, &__str);
  v7[0] = &unk_26E24A640;
  uint64_t v8 = v7;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v3[3].__r_.__value_.__r.__words, (uint64_t)v7);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v7);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_AUCPR__ = (uint64_t)v3;
}

void sub_22E89AAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_multiclass_metric_cc()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "merror");
  v1 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Multiclass classification error.");
  std::string::operator=(v1 + 1, &__str);
  v7[0] = &unk_26E24ADF0;
  uint64_t v8 = v7;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v7);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v7);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_MatchError__ = (uint64_t)v1;
  v2 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "mlogloss");
  uint64_t v3 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v2, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Multiclass negative loglikelihood.");
  std::string::operator=(v3 + 1, &__str);
  v7[0] = &unk_26E24AEE8;
  uint64_t v8 = v7;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v3[3].__r_.__value_.__r.__words, (uint64_t)v7);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v7);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_MultiLogLoss__ = (uint64_t)v3;
}

void sub_22E89AC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_rank_metric_cc()
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "ams");
  v1 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "AMS metric for higgs.");
  std::string::operator=(v1 + 1, &__str);
  v13[0] = &unk_26E245E10;
  uint64_t v14 = v13;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v13);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v13);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_AMS__ = (uint64_t)v1;
  v2 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "pre");
  uint64_t v3 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v2, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "precision@k for rank.");
  std::string::operator=(v3 + 1, &__str);
  v13[0] = &unk_26E245F18;
  uint64_t v14 = v13;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v3[3].__r_.__value_.__r.__words, (uint64_t)v13);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v13);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_Precision__ = (uint64_t)v3;
  int v4 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "ndcg");
  uint64_t v5 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v4, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "ndcg@k for rank.");
  std::string::operator=(v5 + 1, &__str);
  v13[0] = &unk_26E246098;
  uint64_t v14 = v13;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v5[3].__r_.__value_.__r.__words, (uint64_t)v13);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v13);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_NDCG__ = (uint64_t)v5;
  char v6 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "map");
  std::string::size_type v7 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v6, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "map@k for rank.");
  std::string::operator=(v7 + 1, &__str);
  v13[0] = &unk_26E246180;
  uint64_t v14 = v13;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v7[3].__r_.__value_.__r.__words, (uint64_t)v13);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v13);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_MAP__ = (uint64_t)v7;
  uint64_t v8 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "cox-nloglik");
  uint64_t v9 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v8, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Negative log partial likelihood of Cox proportional hazards model.");
  std::string::operator=(v9 + 1, &__str);
  v13[0] = &unk_26E246268;
  uint64_t v14 = v13;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v9[3].__r_.__value_.__r.__words, (uint64_t)v13);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v13);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_Cox__ = (uint64_t)v9;
}

void sub_22E89B080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_elementwise_metric_cc()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "rmse");
  v1 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Rooted mean square error.");
  std::string::operator=(v1 + 1, &__str);
  v25[0] = &unk_26E248B90;
  int v26 = v25;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v25);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v25);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_RMSE__ = (uint64_t)v1;
  v2 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "rmsle");
  uint64_t v3 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v2, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Rooted mean square log error.");
  std::string::operator=(v3 + 1, &__str);
  v25[0] = &unk_26E248C70;
  int v26 = v25;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v3[3].__r_.__value_.__r.__words, (uint64_t)v25);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v25);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_RMSLE__ = (uint64_t)v3;
  int v4 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "mae");
  uint64_t v5 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v4, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Mean absolute error.");
  std::string::operator=(v5 + 1, &__str);
  v25[0] = &unk_26E248D50;
  int v26 = v25;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v5[3].__r_.__value_.__r.__words, (uint64_t)v25);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v25);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_MAE__ = (uint64_t)v5;
  char v6 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "mape");
  std::string::size_type v7 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v6, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Mean absolute percentage error.");
  std::string::operator=(v7 + 1, &__str);
  v25[0] = &unk_26E248E30;
  int v26 = v25;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v7[3].__r_.__value_.__r.__words, (uint64_t)v25);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v25);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_MAPE__ = (uint64_t)v7;
  uint64_t v8 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "logloss");
  uint64_t v9 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v8, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Negative loglikelihood for logistic regression.");
  std::string::operator=(v9 + 1, &__str);
  v25[0] = &unk_26E248F10;
  int v26 = v25;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v9[3].__r_.__value_.__r.__words, (uint64_t)v25);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v25);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_LogLoss__ = (uint64_t)v9;
  uint64_t v10 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "mphe");
  unint64_t v11 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v10, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Mean Pseudo-huber error.");
  std::string::operator=(v11 + 1, &__str);
  v25[0] = &unk_26E248FF0;
  int v26 = v25;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v11[3].__r_.__value_.__r.__words, (uint64_t)v25);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v25);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_PseudoErrorLoss__ = (uint64_t)v11;
  char v12 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "poisson-nloglik");
  uint64_t v13 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v12, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Negative loglikelihood for poisson regression.");
  std::string::operator=(v13 + 1, &__str);
  v25[0] = &unk_26E2490D0;
  int v26 = v25;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v13[3].__r_.__value_.__r.__words, (uint64_t)v25);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v25);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_PossionNegLoglik__ = (uint64_t)v13;
  uint64_t v14 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "gamma-deviance");
  uint64_t v15 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v14, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Residual deviance for gamma regression.");
  std::string::operator=(v15 + 1, &__str);
  v25[0] = &unk_26E2491B0;
  int v26 = v25;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v15[3].__r_.__value_.__r.__words, (uint64_t)v25);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v25);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_GammaDeviance__ = (uint64_t)v15;
  uint64_t v16 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "gamma-nloglik");
  size_t v17 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v16, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Negative log-likelihood for gamma regression.");
  std::string::operator=(v17 + 1, &__str);
  v25[0] = &unk_26E249290;
  int v26 = v25;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v17[3].__r_.__value_.__r.__words, (uint64_t)v25);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v25);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_GammaNLogLik__ = (uint64_t)v17;
  uint64_t v18 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "error");
  unint64_t v19 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v18, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Binary classification error.");
  std::string::operator=(v19 + 1, &__str);
  v25[0] = &unk_26E249370;
  int v26 = v25;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v19[3].__r_.__value_.__r.__words, (uint64_t)v25);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v25);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_Error__ = (uint64_t)v19;
  v20 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "tweedie-nloglik");
  int v21 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t)v20, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "tweedie-nloglik@rho for tweedie regression.");
  std::string::operator=(v21 + 1, &__str);
  v25[0] = &unk_26E249450;
  int v26 = v25;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v21[3].__r_.__value_.__r.__words, (uint64_t)v25);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v25);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  xgboost::metric::__make_MetricReg_TweedieNLogLik__ = (uint64_t)v21;
}

void sub_22E89B86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void *std::function<xgboost::Metric * ()(char const*)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<xgboost::Metric * ()(char const*)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<xgboost::Metric * ()(char const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<xgboost::Metric * ()(char const*)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22E89BD4C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

long long *dmlc::Registry<xgboost::MetricReg>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_12, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_12))
  {
    qword_26AD71C50 = 0;
    xmmword_26AD71C28 = 0u;
    unk_26AD71C38 = 0u;
    xmmword_26AD71C18 = 0u;
    qword_26AD71C48 = (uint64_t)&qword_26AD71C50;
    qword_26AD71C58 = 0;
    unk_26AD71C60 = 850045863;
    xmmword_26AD71C68 = 0u;
    unk_26AD71C78 = 0u;
    xmmword_26AD71C88 = 0u;
    qword_26AD71C98 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::MetricReg>::~Registry, &xmmword_26AD71C18, &dword_22E895000);
    __cxa_guard_release(&_MergedGlobals_12);
  }
  return &xmmword_26AD71C18;
}

uint64_t dmlc::Registry<xgboost::MetricReg>::__REGISTER__(uint64_t a1, const void **a2)
{
  int v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (!std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>(a1 + 48, a2))operator new(); {
  std::string::size_type v7 = a2;
  }
  uint64_t v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), a2, (uint64_t)&std::piecewise_construct, (long long **)&v7)[7];
  std::mutex::unlock(v4);
  return v5;
}

void sub_22E89C054(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E245F18;
}

{
  *a2 = &unk_26E248C70;
}

{
  *a2 = &unk_26E24A548;
}

{
  *a2 = &unk_26E24AEE8;
}

{
  *a2 = &unk_26E24E9D8;
}

void std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E245E10;
}

{
  *a2 = &unk_26E248B90;
}

{
  *a2 = &unk_26E24ADF0;
}

{
  *a2 = &unk_26E24E7D8;
}

void std::__function::__func<xgboost::metric::$_2,std::allocator<xgboost::metric::$_2>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E246098;
}

{
  *a2 = &unk_26E248D50;
}

{
  *a2 = &unk_26E24A640;
}

void std::__function::__func<xgboost::metric::$_4,std::allocator<xgboost::metric::$_4>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E246268;
}

{
  *a2 = &unk_26E248F10;
}

void std::__function::__func<xgboost::metric::$_3,std::allocator<xgboost::metric::$_3>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E246180;
}

{
  *a2 = &unk_26E248E30;
}

void std::__function::__func<xgboost::metric::$_10,std::allocator<xgboost::metric::$_10>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E249450;
}

void std::__function::__func<xgboost::metric::$_9,std::allocator<xgboost::metric::$_9>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E249370;
}

void std::__function::__func<xgboost::metric::$_8,std::allocator<xgboost::metric::$_8>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E249290;
}

void std::__function::__func<xgboost::metric::$_7,std::allocator<xgboost::metric::$_7>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E2491B0;
}

void std::__function::__func<xgboost::metric::$_6,std::allocator<xgboost::metric::$_6>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E2490D0;
}

void std::__function::__func<xgboost::metric::$_5,std::allocator<xgboost::metric::$_5>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E248FF0;
}

void _GLOBAL__sub_I_hinge_cc()
{
  v5[4] = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "binary:hinge");
  v1 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Hinge loss. Expects labels to be in [0,1f]");
  std::string::operator=(v1 + 1, &__str);
  v5[0] = &unk_26E24AA70;
  v5[3] = v5;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v5);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  xgboost::obj::__make_ObjFunctionReg_HingeObj__ = (uint64_t)v1;
}

void sub_22E89C478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_aft_obj_cc()
{
  v5[4] = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "survival:aft");
  v1 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "AFT loss function");
  std::string::operator=(v1 + 1, &__str);
  v5[0] = &unk_26E248A88;
  v5[3] = v5;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v5);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  xgboost::obj::__make_ObjFunctionReg_AFTObj__ = (uint64_t)v1;
}

void sub_22E89C5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_multiclass_obj_cc(xgboost::obj::SoftmaxMultiClassParam *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  xgboost::obj::SoftmaxMultiClassParam::__MANAGER__(a1);
  v1 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "multi:softmax");
  v2 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v1, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Softmax for multi-class classification, output class index.");
  std::string::operator=(v2 + 1, &__str);
  v8[0] = &unk_26E24AC68;
  uint64_t v9 = v8;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v2[3].__r_.__value_.__r.__words, (uint64_t)v8);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v8);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD71D30 = (uint64_t)v2;
  uint64_t v3 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "multi:softprob");
  char v4 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v3, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Softmax for multi-class classification, output probability distribution.");
  std::string::operator=(v4 + 1, &__str);
  v8[0] = &unk_26E24AD70;
  uint64_t v9 = v8;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v4[3].__r_.__value_.__r.__words, (uint64_t)v8);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v8);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD71D38 = (uint64_t)v4;
}

void sub_22E89C7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

long long *xgboost::obj::SoftmaxMultiClassParam::__MANAGER__(xgboost::obj::SoftmaxMultiClassParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_13, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_13))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "SoftmaxMultiClassParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::obj::SoftmaxMultiClassParam>::ParamManagerSingleton(&__p);
  }
  return &xmmword_26AD71D40;
}

void sub_22E89C8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_13);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::obj::SoftmaxMultiClassParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71D78 = 0;
  qword_26AD71D80 = 0;
  xmmword_26AD71D40 = 0u;
  *(_OWORD *)algn_26AD71D50 = 0u;
  xmmword_26AD71D60 = 0u;
  qword_26AD71D70 = (uint64_t)&qword_26AD71D78;
  std::string::operator=((std::string *)&xmmword_26AD71D40, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_class");
  operator new();
}

void sub_22E89CA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD71D40);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_rank_obj_cc(xgboost::obj::LambdaRankParam *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  xgboost::obj::LambdaRankParam::__MANAGER__(a1);
  v1 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "rank:pairwise");
  v2 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v1, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Pairwise rank objective.");
  std::string::operator=(v2 + 1, &__str);
  v10[0] = &unk_26E249750;
  unint64_t v11 = v10;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v2[3].__r_.__value_.__r.__words, (uint64_t)v10);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD71B18 = (uint64_t)v2;
  uint64_t v3 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "rank:ndcg");
  char v4 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v3, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "LambdaRank with NDCG as objective.");
  std::string::operator=(v4 + 1, &__str);
  v10[0] = &unk_26E249858;
  unint64_t v11 = v10;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v4[3].__r_.__value_.__r.__words, (uint64_t)v10);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD71B20 = (uint64_t)v4;
  uint64_t v5 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "rank:map");
  char v6 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v5, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "LambdaRank with MAP as objective.");
  std::string::operator=(v6 + 1, &__str);
  v10[0] = &unk_26E249960;
  unint64_t v11 = v10;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v6[3].__r_.__value_.__r.__words, (uint64_t)v10);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD71B28 = (uint64_t)v6;
}

void sub_22E89CD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

std::string *xgboost::obj::LambdaRankParam::__MANAGER__(xgboost::obj::LambdaRankParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_9, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_9))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LambdaRankParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::obj::LambdaRankParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD71B30;
}

void sub_22E89CE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_9);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::obj::LambdaRankParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71B68 = 0;
  qword_26AD71B70 = 0;
  *(_OWORD *)&stru_26AD71B30.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD71B30.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD71B50 = 0u;
  qword_26AD71B60 = (uint64_t)&qword_26AD71B68;
  std::string::operator=(&stru_26AD71B30, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_pairsample");
  operator new();
}

void sub_22E89D14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_26AD71B30);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::set_lower_bound(uint64_t result, uint64_t a2)
{
  *(void *)(result + 120) = a2;
  *(unsigned char *)(result + 112) = 1;
  return result;
}

void _GLOBAL__sub_I_regression_obj_cc(xgboost::obj::RegLossParam *a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  xgboost::obj::RegLossParam::__MANAGER__(a1);
  v1 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:squarederror");
  v2 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v1, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Regression with squared error.");
  std::string::operator=(v2 + 1, &__str);
  v28[0] = &unk_26E2448D8;
  uint64_t v29 = v28;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v2[3].__r_.__value_.__r.__words, (uint64_t)v28);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD70F58 = (uint64_t)v2;
  uint64_t v3 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:squaredlogerror");
  char v4 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v3, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Regression with root mean squared logarithmic error.");
  std::string::operator=(v4 + 1, &__str);
  v28[0] = &unk_26E244A08;
  uint64_t v29 = v28;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v4[3].__r_.__value_.__r.__words, (uint64_t)v28);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD70F60 = (uint64_t)v4;
  uint64_t v5 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:logistic");
  char v6 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v5, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Logistic regression for probability regression task.");
  std::string::operator=(v6 + 1, &__str);
  v28[0] = &unk_26E244B10;
  uint64_t v29 = v28;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v6[3].__r_.__value_.__r.__words, (uint64_t)v28);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD70F68 = (uint64_t)v6;
  char v7 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "binary:logistic");
  uint64_t v8 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v7, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Logistic regression for binary classification task.");
  std::string::operator=(v8 + 1, &__str);
  v28[0] = &unk_26E244C18;
  uint64_t v29 = v28;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v8[3].__r_.__value_.__r.__words, (uint64_t)v28);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD70F70 = (uint64_t)v8;
  char v9 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "binary:logitraw");
  uint64_t v10 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v9, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Logistic regression for classification, output score before logistic transformation.");
  std::string::operator=(v10 + 1, &__str);
  v28[0] = &unk_26E244D20;
  uint64_t v29 = v28;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v10[3].__r_.__value_.__r.__words, (uint64_t)v28);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD70F78 = (uint64_t)v10;
  unint64_t v11 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:linear");
  uint64_t v12 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v11, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Regression with squared error.");
  std::string::operator=(v12 + 1, &__str);
  v28[0] = &unk_26E244E28;
  uint64_t v29 = v28;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v12[3].__r_.__value_.__r.__words, (uint64_t)v28);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD70F80 = (uint64_t)v12;
  uint64_t v13 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:pseudohubererror");
  uint64_t v14 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v13, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Regression Pseudo Huber error.");
  std::string::operator=(v14 + 1, &__str);
  v28[0] = &unk_26E244EA8;
  uint64_t v29 = v28;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v14[3].__r_.__value_.__r.__words, (uint64_t)v28);
  uint64_t v15 = (xgboost::obj::PoissonRegressionParam *)std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD70F88 = (uint64_t)v14;
  xgboost::obj::PoissonRegressionParam::__MANAGER__(v15);
  uint64_t v16 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "count:poisson");
  size_t v17 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v16, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Poisson regression for count data.");
  std::string::operator=(v17 + 1, &__str);
  v28[0] = &unk_26E244FB0;
  uint64_t v29 = v28;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v17[3].__r_.__value_.__r.__words, (uint64_t)v28);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD70F98 = (uint64_t)v17;
  uint64_t v18 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "survival:cox");
  unint64_t v19 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v18, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Cox regression for censored survival data (negative labels are considered censored).");
  std::string::operator=(v19 + 1, &__str);
  v28[0] = &unk_26E2450B8;
  uint64_t v29 = v28;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v19[3].__r_.__value_.__r.__words, (uint64_t)v28);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD70FA0 = (uint64_t)v19;
  v20 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:gamma");
  int v21 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v20, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Gamma regression for severity data.");
  std::string::operator=(v21 + 1, &__str);
  v28[0] = &unk_26E2451C0;
  uint64_t v29 = v28;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v21[3].__r_.__value_.__r.__words, (uint64_t)v28);
  uint64_t v22 = (xgboost::obj::TweedieRegressionParam *)std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD70FA8 = (uint64_t)v21;
  xgboost::obj::TweedieRegressionParam::__MANAGER__(v22);
  uint64_t v23 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:tweedie");
  char v24 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t)v23, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Tweedie regression for insurance data.");
  std::string::operator=(v24 + 1, &__str);
  v28[0] = &unk_26E2452C8;
  uint64_t v29 = v28;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v24[3].__r_.__value_.__r.__words, (uint64_t)v28);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD70FB8 = (uint64_t)v24;
}

void sub_22E89D91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void *std::function<xgboost::ObjFunction * ()(void)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<xgboost::ObjFunction * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<xgboost::ObjFunction * ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    char v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22E89DDFC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

long long *dmlc::Registry<xgboost::ObjFunctionReg>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_23, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_23))
  {
    qword_26AD725D8 = 0;
    unk_26AD725B0 = 0u;
    unk_26AD725C0 = 0u;
    xmmword_26AD725A0 = 0u;
    qword_26AD725D0 = (uint64_t)&qword_26AD725D8;
    qword_26AD725E0 = 0;
    unk_26AD725E8 = 850045863;
    unk_26AD725F0 = 0u;
    unk_26AD72600 = 0u;
    unk_26AD72610 = 0u;
    qword_26AD72620 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::ObjFunctionReg>::~Registry, &xmmword_26AD725A0, &dword_22E895000);
    __cxa_guard_release(&_MergedGlobals_23);
  }
  return &xmmword_26AD725A0;
}

uint64_t dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__(uint64_t a1, const void **a2)
{
  char v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (!std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>(a1 + 48, a2))operator new(); {
  char v7 = a2;
  }
  uint64_t v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), a2, (uint64_t)&std::piecewise_construct, (long long **)&v7)[7];
  std::mutex::unlock(v4);
  return v5;
}

void sub_22E89E10C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E2448D8;
}

{
  *a2 = &unk_26E248A88;
}

{
  *a2 = &unk_26E249750;
}

{
  *a2 = &unk_26E24AA70;
}

{
  *a2 = &unk_26E24AC68;
}

void std::__function::__func<xgboost::obj::$_1,std::allocator<xgboost::obj::$_1>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E244A08;
}

{
  *a2 = &unk_26E249858;
}

{
  *a2 = &unk_26E24AD70;
}

void std::__function::__func<xgboost::obj::$_2,std::allocator<xgboost::obj::$_2>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E244B10;
}

{
  *a2 = &unk_26E249960;
}

void std::__function::__func<xgboost::obj::$_10,std::allocator<xgboost::obj::$_10>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E2452C8;
}

void std::__function::__func<xgboost::obj::$_9,std::allocator<xgboost::obj::$_9>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E2451C0;
}

void std::__function::__func<xgboost::obj::$_8,std::allocator<xgboost::obj::$_8>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E2450B8;
}

void std::__function::__func<xgboost::obj::$_7,std::allocator<xgboost::obj::$_7>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E244FB0;
}

void std::__function::__func<xgboost::obj::$_6,std::allocator<xgboost::obj::$_6>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E244EA8;
}

void std::__function::__func<xgboost::obj::$_5,std::allocator<xgboost::obj::$_5>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E244E28;
}

void std::__function::__func<xgboost::obj::$_4,std::allocator<xgboost::obj::$_4>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E244D20;
}

void std::__function::__func<xgboost::obj::$_3,std::allocator<xgboost::obj::$_3>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E244C18;
}

std::string *xgboost::obj::TweedieRegressionParam::__MANAGER__(xgboost::obj::TweedieRegressionParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD70FB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD70FB0))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "TweedieRegressionParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::obj::TweedieRegressionParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD71050;
}

void sub_22E89E450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26AD70FB0);
  _Unwind_Resume(a1);
}

std::string *xgboost::obj::PoissonRegressionParam::__MANAGER__(xgboost::obj::PoissonRegressionParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD70F90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD70F90))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "PoissonRegressionParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::obj::PoissonRegressionParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD71008;
}

void sub_22E89E524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26AD70F90);
  _Unwind_Resume(a1);
}

long long *xgboost::obj::RegLossParam::__MANAGER__(xgboost::obj::RegLossParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "RegLossParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::obj::RegLossParam>::ParamManagerSingleton(&__p);
  }
  return &xmmword_26AD70FC0;
}

void sub_22E89E5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::obj::TweedieRegressionParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71088 = 0;
  qword_26AD71090 = 0;
  *(_OWORD *)&stru_26AD71050.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD71050.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD71070 = 0u;
  qword_26AD71080 = (uint64_t)&qword_26AD71088;
  std::string::operator=(&stru_26AD71050, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "tweedie_variance_power");
  operator new();
}

void sub_22E89E7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_26AD71050);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::obj::PoissonRegressionParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71040 = 0;
  qword_26AD71048 = 0;
  *(_OWORD *)&stru_26AD71008.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD71008.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD71028 = 0u;
  qword_26AD71038 = (uint64_t)&qword_26AD71040;
  std::string::operator=(&stru_26AD71008, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "max_delta_step");
  operator new();
}

void sub_22E89E9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_26AD71008);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::obj::RegLossParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD70FF8 = 0;
  qword_26AD71000 = 0;
  xmmword_26AD70FC0 = 0u;
  *(_OWORD *)algn_26AD70FD0 = 0u;
  xmmword_26AD70FE0 = 0u;
  qword_26AD70FF0 = (uint64_t)&qword_26AD70FF8;
  std::string::operator=((std::string *)&xmmword_26AD70FC0, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale_pos_weight");
  operator new();
}

void sub_22E89EBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD70FC0);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_updater_sync_cc()
{
  v5[4] = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "sync");
  v1 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Syncher that synchronize the tree in all distributed nodes.");
  std::string::operator=(v1 + 1, &__str);
  v5[0] = &unk_26E24AB78;
  v5[3] = v5;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v5);
  std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::~__value_func[abi:ne180100](v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  xgboost::tree::__make_TreeUpdaterReg_TreeSyncher__ = (uint64_t)v1;
}

void sub_22E89ECEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_updater_histmaker_cc()
{
  v5[4] = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "grow_local_histmaker");
  v1 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Tree constructor that uses approximate histogram construction.");
  std::string::operator=(v1 + 1, &__str);
  v5[0] = &unk_26E24B060;
  v5[3] = v5;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v5);
  std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::~__value_func[abi:ne180100](v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  xgboost::tree::__make_TreeUpdaterReg_LocalHistMaker__ = (uint64_t)v1;
}

void sub_22E89EE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_updater_refresh_cc()
{
  v5[4] = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "refresh");
  v1 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Refresher that refreshes the weight and statistics according to data.");
  std::string::operator=(v1 + 1, &__str);
  v5[0] = &unk_26E24A900;
  v5[3] = v5;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v5);
  std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::~__value_func[abi:ne180100](v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  xgboost::tree::__make_TreeUpdaterReg_TreeRefresher__ = (uint64_t)v1;
}

void sub_22E89EF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_updater_approx_cc()
{
  v5[4] = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "grow_histmaker");
  v1 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Tree constructor that uses approximate histogram construction for each node.");
  std::string::operator=(v1 + 1, &__str);
  v5[0] = &unk_26E24BA40;
  v5[3] = v5;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v5);
  std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::~__value_func[abi:ne180100](v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  xgboost::tree::__make_TreeUpdaterReg_GlobalHistMaker__ = (uint64_t)v1;
}

void sub_22E89F0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_updater_quantile_hist_cc()
{
  v5[4] = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "grow_quantile_histmaker");
  v1 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Grow tree using quantized histogram.");
  std::string::operator=(v1 + 1, &__str);
  v5[0] = &unk_26E24C028;
  v5[3] = v5;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v5);
  std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::~__value_func[abi:ne180100](v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  xgboost::tree::__make_TreeUpdaterReg_QuantileHistMaker__ = (uint64_t)v1;
}

void sub_22E89F1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_updater_prune_cc()
{
  v5[4] = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "prune");
  v1 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Pruner that prune the tree according to statistics.");
  std::string::operator=(v1 + 1, &__str);
  v5[0] = &unk_26E245570;
  v5[3] = v5;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v5);
  std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::~__value_func[abi:ne180100](v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  xgboost::tree::__make_TreeUpdaterReg_TreePruner__ = (uint64_t)v1;
}

void sub_22E89F340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_updater_colmaker_cc(xgboost::tree::ColMakerTrainParam *a1)
{
  void v6[4] = *MEMORY[0x263EF8340];
  xgboost::tree::ColMakerTrainParam::__MANAGER__(a1);
  v1 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "grow_colmaker");
  v2 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t)v1, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Grow tree with parallelization over columns.");
  std::string::operator=(v2 + 1, &__str);
  v6[0] = &unk_26E247E68;
  v6[3] = v6;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v2[3].__r_.__value_.__r.__words, (uint64_t)v6);
  std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::~__value_func[abi:ne180100](v6);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  xgboost::tree::__make_TreeUpdaterReg_ColMaker__ = (uint64_t)v2;
}

void sub_22E89F488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void *std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E245570;
}

{
  *a2 = &unk_26E247E68;
}

{
  *a2 = &unk_26E24A900;
}

{
  *a2 = &unk_26E24AB78;
}

{
  *a2 = &unk_26E24B060;
}

{
  *a2 = &unk_26E24BA40;
}

{
  *a2 = &unk_26E24C028;
}

void *std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    char v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22E89F9A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

long long *dmlc::Registry<xgboost::TreeUpdaterReg>::Get()
{
  {
    qword_26AD72808 = 0;
    dmlc::Registry<xgboost::TreeUpdaterReg>::Get(void)::inst = 0u;
    unk_26AD727E0 = 0u;
    xmmword_26AD727F0 = 0u;
    qword_26AD72800 = (uint64_t)&qword_26AD72808;
    qword_26AD72810 = 0;
    unk_26AD72818 = 850045863;
    xmmword_26AD72820 = 0u;
    unk_26AD72830 = 0u;
    xmmword_26AD72840 = 0u;
    qword_26AD72850 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::TreeUpdaterReg>::~Registry, &dmlc::Registry<xgboost::TreeUpdaterReg>::Get(void)::inst, &dword_22E895000);
  }
  return &dmlc::Registry<xgboost::TreeUpdaterReg>::Get(void)::inst;
}

uint64_t dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__(uint64_t a1, const void **a2)
{
  char v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (!std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>(a1 + 48, a2))operator new(); {
  char v7 = a2;
  }
  uint64_t v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), a2, (uint64_t)&std::piecewise_construct, (long long **)&v7)[7];
  std::mutex::unlock(v4);
  return v5;
}

void sub_22E89FCC8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

long long *xgboost::tree::ColMakerTrainParam::__MANAGER__(xgboost::tree::ColMakerTrainParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_3, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_3))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ColMakerTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::tree::ColMakerTrainParam>::ParamManagerSingleton(&__p);
  }
  return &xmmword_26AD715E0;
}

void sub_22E89FD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_3);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::tree::ColMakerTrainParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71618 = 0;
  qword_26AD71620 = 0;
  xmmword_26AD715E0 = 0u;
  *(_OWORD *)algn_26AD715F0 = 0u;
  xmmword_26AD71600 = 0u;
  qword_26AD71610 = (uint64_t)&qword_26AD71618;
  std::string::operator=((std::string *)&xmmword_26AD715E0, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "opt_dense_col");
  operator new();
}

void sub_22E8A0134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD715E0);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_gblinear_cc(xgboost::gbm::GBLinearTrainParam *a1)
{
  void v6[4] = *MEMORY[0x263EF8340];
  xgboost::gbm::GBLinearTrainParam::__MANAGER__(a1);
  v1 = dmlc::Registry<xgboost::GradientBoosterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "gblinear");
  v2 = (std::string *)dmlc::Registry<xgboost::GradientBoosterReg>::__REGISTER__((uint64_t)v1, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Linear booster, implement generalized linear model.");
  std::string::operator=(v2 + 1, &__str);
  v6[0] = &unk_26E245738;
  v6[3] = v6;
  std::function<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator=(v2[3].__r_.__value_.__r.__words, (uint64_t)v6);
  std::__function::__value_func<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::~__value_func[abi:ne180100](v6);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  xgboost::gbm::__make_GradientBoosterReg_GBLinear__ = (uint64_t)v2;
}

void sub_22E8A02D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

long long *xgboost::gbm::GBLinearTrainParam::__MANAGER__(xgboost::gbm::GBLinearTrainParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_0))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "GBLinearTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBLinearTrainParam>::ParamManagerSingleton(&__p);
  }
  return &xmmword_26AD710A0;
}

void sub_22E8A03CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_0);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBLinearTrainParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD710D8 = 0;
  qword_26AD710E0 = 0;
  xmmword_26AD710A0 = 0u;
  *(_OWORD *)algn_26AD710B0 = 0u;
  xmmword_26AD710C0 = 0u;
  qword_26AD710D0 = (uint64_t)&qword_26AD710D8;
  std::string::operator=((std::string *)&xmmword_26AD710A0, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "updater");
  operator new();
}

void sub_22E8A0800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD710A0);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_gbtree_cc(xgboost::gbm::GBTreeModelParam *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v1 = xgboost::gbm::GBTreeModelParam::__MANAGER__(a1);
  v2 = xgboost::gbm::GBTreeTrainParam::__MANAGER__((xgboost::gbm::GBTreeTrainParam *)v1);
  xgboost::gbm::DartTrainParam::__MANAGER__((xgboost::gbm::DartTrainParam *)v2);
  uint64_t v3 = dmlc::Registry<xgboost::GradientBoosterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "gbtree");
  char v4 = (std::string *)dmlc::Registry<xgboost::GradientBoosterReg>::__REGISTER__((uint64_t)v3, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Tree booster, gradient boosted trees.");
  std::string::operator=(v4 + 1, &__str);
  v10[0] = &unk_26E24B7A8;
  unint64_t v11 = v10;
  std::function<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator=(v4[3].__r_.__value_.__r.__words, (uint64_t)v10);
  std::__function::__value_func<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::~__value_func[abi:ne180100](v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD71E30 = (uint64_t)v4;
  char v5 = dmlc::Registry<xgboost::GradientBoosterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "dart");
  char v6 = (std::string *)dmlc::Registry<xgboost::GradientBoosterReg>::__REGISTER__((uint64_t)v5, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Tree booster, dart.");
  std::string::operator=(v6 + 1, &__str);
  v10[0] = &unk_26E24B828;
  unint64_t v11 = v10;
  std::function<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator=(v6[3].__r_.__value_.__r.__words, (uint64_t)v10);
  std::__function::__value_func<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::~__value_func[abi:ne180100](v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD71E38 = (uint64_t)v6;
}

void sub_22E8A0A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void *std::function<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    char v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22E8A0E74(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

long long *dmlc::Registry<xgboost::GradientBoosterReg>::Get()
{
  {
    qword_26AD72918 = 0;
    dmlc::Registry<xgboost::GradientBoosterReg>::Get(void)::inst = 0u;
    *(_OWORD *)algn_26AD728F0 = 0u;
    xmmword_26AD72900 = 0u;
    qword_26AD72910 = (uint64_t)&qword_26AD72918;
    qword_26AD72920 = 0;
    unk_26AD72928 = 850045863;
    xmmword_26AD72930 = 0u;
    unk_26AD72940 = 0u;
    xmmword_26AD72950 = 0u;
    qword_26AD72960 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::GradientBoosterReg>::~Registry, &dmlc::Registry<xgboost::GradientBoosterReg>::Get(void)::inst, &dword_22E895000);
  }
  return &dmlc::Registry<xgboost::GradientBoosterReg>::Get(void)::inst;
}

uint64_t dmlc::Registry<xgboost::GradientBoosterReg>::__REGISTER__(uint64_t a1, const void **a2)
{
  char v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (!std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>(a1 + 48, a2))operator new(); {
  char v7 = a2;
  }
  uint64_t v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), a2, (uint64_t)&std::piecewise_construct, (long long **)&v7)[7];
  std::mutex::unlock(v4);
  return v5;
}

void sub_22E8A1178(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::gbm::$_7,std::allocator<xgboost::gbm::$_7>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E24B828;
}

void std::__function::__func<xgboost::gbm::$_6,std::allocator<xgboost::gbm::$_6>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E24B7A8;
}

void std::__function::__func<xgboost::gbm::$_0,std::allocator<xgboost::gbm::$_0>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E245738;
}

std::string *xgboost::gbm::GBTreeTrainParam::__MANAGER__(xgboost::gbm::GBTreeTrainParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71E20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71E20))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "GBTreeTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBTreeTrainParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD71E88;
}

void sub_22E8A12A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26AD71E20);
  _Unwind_Resume(a1);
}

long long *xgboost::gbm::GBTreeModelParam::__MANAGER__(xgboost::gbm::GBTreeModelParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_16, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "GBTreeModelParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBTreeModelParam>::ParamManagerSingleton(&__p);
  }
  return &xmmword_26AD71E40;
}

void sub_22E8A1374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_16);
  _Unwind_Resume(a1);
}

std::string *xgboost::gbm::DartTrainParam::__MANAGER__(xgboost::gbm::DartTrainParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71E28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71E28))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "DartTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::gbm::DartTrainParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD71ED0;
}

void sub_22E8A1448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26AD71E28);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::gbm::DartTrainParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71F08 = 0;
  qword_26AD71F10 = 0;
  *(_OWORD *)&stru_26AD71ED0.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD71ED0.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD71EF0 = 0u;
  qword_26AD71F00 = (uint64_t)&qword_26AD71F08;
  std::string::operator=(&stru_26AD71ED0, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "sample_type");
  operator new();
}

void sub_22E8A1D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_26AD71ED0);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_updater_shotgun_cc()
{
  v5[4] = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::LinearUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "shotgun");
  v1 = (std::string *)dmlc::Registry<xgboost::LinearUpdaterReg>::__REGISTER__((uint64_t)v0, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Update linear model according to shotgun coordinate descent algorithm.");
  std::string::operator=(v1 + 1, &__str);
  v5[0] = &unk_26E248060;
  v5[3] = v5;
  std::function<xgboost::LinearUpdater * ()(void)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v5);
  std::__function::__value_func<xgboost::LinearUpdater * ()(void)>::~__value_func[abi:ne180100](v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  xgboost::linear::__make_LinearUpdaterReg_ShotgunUpdater__ = (uint64_t)v1;
}

void sub_22E8A1F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_updater_coordinate_cc(xgboost::linear::CoordinateParam *a1)
{
  void v6[4] = *MEMORY[0x263EF8340];
  xgboost::linear::CoordinateParam::__MANAGER__(a1);
  v1 = dmlc::Registry<xgboost::LinearUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "coord_descent");
  v2 = (std::string *)dmlc::Registry<xgboost::LinearUpdaterReg>::__REGISTER__((uint64_t)v1, (const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Update linear model according to coordinate descent algorithm.");
  std::string::operator=(v2 + 1, &__str);
  v6[0] = &unk_26E245A70;
  v6[3] = v6;
  std::function<xgboost::LinearUpdater * ()(void)>::operator=(v2[3].__r_.__value_.__r.__words, (uint64_t)v6);
  std::__function::__value_func<xgboost::LinearUpdater * ()(void)>::~__value_func[abi:ne180100](v6);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  xgboost::linear::__make_LinearUpdaterReg_CoordinateUpdater__ = (uint64_t)v2;
}

void sub_22E8A20B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void *std::function<xgboost::LinearUpdater * ()(void)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<xgboost::LinearUpdater * ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<xgboost::LinearUpdater * ()(void)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<xgboost::LinearUpdater * ()(void)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<xgboost::LinearUpdater * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<xgboost::LinearUpdater * ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<xgboost::linear::$_0,std::allocator<xgboost::linear::$_0>,xgboost::LinearUpdater * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E245A70;
}

{
  *a2 = &unk_26E248060;
}

void *std::__function::__value_func<xgboost::LinearUpdater * ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    char v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22E8A2538(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

long long *dmlc::Registry<xgboost::LinearUpdaterReg>::Get()
{
  {
    qword_26AD72890 = 0;
    dmlc::Registry<xgboost::LinearUpdaterReg>::Get(void)::inst = 0u;
    unk_26AD72868 = 0u;
    xmmword_26AD72878 = 0u;
    qword_26AD72888 = (uint64_t)&qword_26AD72890;
    qword_26AD72898 = 0;
    unk_26AD728A0 = 850045863;
    xmmword_26AD728A8 = 0u;
    unk_26AD728B8 = 0u;
    xmmword_26AD728C8 = 0u;
    qword_26AD728D8 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::LinearUpdaterReg>::~Registry, &dmlc::Registry<xgboost::LinearUpdaterReg>::Get(void)::inst, &dword_22E895000);
  }
  return &dmlc::Registry<xgboost::LinearUpdaterReg>::Get(void)::inst;
}

uint64_t dmlc::Registry<xgboost::LinearUpdaterReg>::__REGISTER__(uint64_t a1, const void **a2)
{
  char v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (!std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>(a1 + 48, a2))operator new(); {
  char v7 = a2;
  }
  uint64_t v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), a2, (uint64_t)&std::piecewise_construct, (long long **)&v7)[7];
  std::mutex::unlock(v4);
  return v5;
}

void sub_22E8A283C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::string *xgboost::linear::CoordinateParam::__MANAGER__(xgboost::linear::CoordinateParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_1, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_1))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "CoordinateParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::linear::CoordinateParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD710F0;
}

void sub_22E8A28F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_1);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::linear::CoordinateParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71128 = 0;
  qword_26AD71130 = 0;
  *(_OWORD *)&stru_26AD710F0.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD710F0.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD71110 = 0u;
  qword_26AD71120 = (uint64_t)&qword_26AD71128;
  std::string::operator=(&stru_26AD710F0, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "top_k");
  operator new();
}

void sub_22E8A2AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_26AD710F0);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_learner_cc(xgboost::LearnerModelParamLegacy *a1)
{
  v1 = xgboost::LearnerModelParamLegacy::__MANAGER__(a1);
  v2 = xgboost::LearnerTrainParam::__MANAGER__((xgboost::LearnerTrainParam *)v1);
  xgboost::GenericParameter::__MANAGER__((xgboost::GenericParameter *)v2);
  std::string::basic_string[abi:ne180100]<0>(&xgboost::LearnerConfiguration::kEvalMetric, "eval_metric");
  uint64_t v3 = (void (*)(void *))MEMORY[0x263F8C0B8];

  return __cxa_atexit(v3, &xgboost::LearnerConfiguration::kEvalMetric, &dword_22E895000);
}

std::string *xgboost::LearnerModelParamLegacy::__MANAGER__(xgboost::LearnerModelParamLegacy *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_17, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_17))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LearnerModelParamLegacy");
    dmlc::parameter::ParamManagerSingleton<xgboost::LearnerModelParamLegacy>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD71F30;
}

void sub_22E8A2C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_17);
  _Unwind_Resume(a1);
}

std::string *xgboost::LearnerTrainParam::__MANAGER__(xgboost::LearnerTrainParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71F20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71F20))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LearnerTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::LearnerTrainParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD71F78;
}

void sub_22E8A2D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26AD71F20);
  _Unwind_Resume(a1);
}

long long *xgboost::GenericParameter::__MANAGER__(xgboost::GenericParameter *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71F28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71F28))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "GenericParameter");
    dmlc::parameter::ParamManagerSingleton<xgboost::GenericParameter>::ParamManagerSingleton(&__p);
  }
  return &xmmword_26AD71FC0;
}

void sub_22E8A2DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26AD71F28);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::LearnerModelParamLegacy>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71F68 = 0;
  qword_26AD71F70 = 0;
  *(_OWORD *)&stru_26AD71F30.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD71F30.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD71F50 = 0u;
  qword_26AD71F60 = (uint64_t)&qword_26AD71F68;
  std::string::operator=(&stru_26AD71F30, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "base_score");
  operator new();
}

void sub_22E8A3360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_26AD71F30);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::GenericParameter>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71FF8 = 0;
  qword_26AD72000 = 0;
  xmmword_26AD71FC0 = 0u;
  *(_OWORD *)algn_26AD71FD0 = 0u;
  xmmword_26AD71FE0 = 0u;
  qword_26AD71FF0 = (uint64_t)&qword_26AD71FF8;
  std::string::operator=((std::string *)&xmmword_26AD71FC0, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "seed");
  operator new();
}

void sub_22E8A3BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD71FC0);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_tree_model_cc(xgboost::TreeParam *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v1 = xgboost::TreeParam::__MANAGER__(a1);
  xgboost::tree::TrainParam::__MANAGER__((xgboost::tree::TrainParam *)v1);
  dmlc::Registry<xgboost::TreeGenReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "text");
  v2 = (std::string *)dmlc::Registry<xgboost::TreeGenReg>::__REGISTER__((const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Dump text representation of tree");
  std::string::operator=(v2 + 1, &__str);
  v9[0] = &unk_26E24D490;
  uint64_t v10 = v9;
  std::function<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator=(v2[3].__r_.__value_.__r.__words, v9);
  std::__function::__value_func<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::~__value_func[abi:ne180100](v9);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD72020 = (uint64_t)v2;
  dmlc::Registry<xgboost::TreeGenReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  uint64_t v3 = (std::string *)dmlc::Registry<xgboost::TreeGenReg>::__REGISTER__((const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Dump json representation of tree");
  std::string::operator=(v3 + 1, &__str);
  v9[0] = &unk_26E24D628;
  uint64_t v10 = v9;
  std::function<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator=(v3[3].__r_.__value_.__r.__words, v9);
  char v4 = (xgboost::GraphvizParam *)std::__function::__value_func<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::~__value_func[abi:ne180100](v9);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD72028 = (uint64_t)v3;
  xgboost::GraphvizParam::__MANAGER__(v4);
  dmlc::Registry<xgboost::TreeGenReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "dot");
  uint64_t v5 = (std::string *)dmlc::Registry<xgboost::TreeGenReg>::__REGISTER__((const void **)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Dump graphviz representation of tree");
  std::string::operator=(v5 + 1, &__str);
  v9[0] = &unk_26E24D730;
  uint64_t v10 = v9;
  std::function<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator=(v5[3].__r_.__value_.__r.__words, v9);
  std::__function::__value_func<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::~__value_func[abi:ne180100](v9);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD72038 = (uint64_t)v5;
}

void sub_22E8A3EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void *std::function<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator=(void *a1, void *a2)
{
  void v9[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      char v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      char v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    char v8 = 0;
  }
  if (v7 != a1)
  {
    char v4 = v8;
    uint64_t v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        char v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        char v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        char v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      char v8 = v7;
    }
    else
    {
      char v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  std::__function::__value_func<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void sub_22E8A4248(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

long long *dmlc::Registry<xgboost::TreeGenReg>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72018, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72018))
  {
    qword_26AD724C8 = 0;
    qword_26AD724C0 = 0;
    xmmword_26AD72488 = 0u;
    xmmword_26AD72498 = 0u;
    xmmword_26AD724A8 = 0u;
    qword_26AD724B8 = (uint64_t)&qword_26AD724C0;
    qword_26AD724D0 = 850045863;
    xmmword_26AD724D8 = 0u;
    xmmword_26AD724E8 = 0u;
    xmmword_26AD724F8 = 0u;
    qword_26AD72508 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::TreeGenReg>::~Registry, &xmmword_26AD72488, &dword_22E895000);
    __cxa_guard_release(&qword_26AD72018);
  }
  return &xmmword_26AD72488;
}

uint64_t dmlc::Registry<xgboost::TreeGenReg>::__REGISTER__(const void **a1)
{
  std::mutex::lock((std::mutex *)&qword_26AD724D0);
  uint64_t v2 = qword_26AD724C0;
  if (!qword_26AD724C0) {
LABEL_6:
  }
    operator new();
  while (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD724C8, a1, (const void **)(v2 + 32)))
  {
LABEL_5:
    uint64_t v2 = *(void *)v2;
    if (!v2) {
      goto LABEL_6;
    }
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD724C8, (const void **)(v2 + 32), a1))
  {
    v2 += 8;
    goto LABEL_5;
  }
  uint64_t v5 = a1;
  uint64_t v3 = std::__tree<std::__value_type<std::string,xgboost::TreeGenReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::TreeGenReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::TreeGenReg *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (long long **)&v5)[7];
  std::mutex::unlock((std::mutex *)&qword_26AD724D0);
  return v3;
}

void sub_22E8A4630(_Unwind_Exception *a1)
{
}

void *std::__tree<std::__value_type<std::string,xgboost::TreeGenReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::TreeGenReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::TreeGenReg *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, long long **a2)
{
  uint64_t v3 = qword_26AD724C0;
  if (!qword_26AD724C0)
  {
    uint64_t v5 = &qword_26AD724C0;
    char v6 = &qword_26AD724C0;
LABEL_10:
    char v8 = *a2;
    char v9 = operator new(0x40uLL);
    uint64_t v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v11 = *v8;
      v9[6] = *((void *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *char v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *uint64_t v5 = (uint64_t)v9;
    uint64_t v12 = v9;
    if (*(void *)qword_26AD724B8)
    {
      qword_26AD724B8 = *(void *)qword_26AD724B8;
      uint64_t v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_26AD724C0, v12);
    ++qword_26AD724C8;
    return v9;
  }
  uint64_t v5 = &qword_26AD724C0;
  while (1)
  {
    while (1)
    {
      char v6 = (uint64_t *)v3;
      char v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD724C8, a1, (const void **)(v3 + 32))) {
        break;
      }
      uint64_t v3 = *v6;
      uint64_t v5 = v6;
      if (!*v6) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD724C8, v7, a1)) {
      break;
    }
    uint64_t v5 = v6 + 1;
    uint64_t v3 = v6[1];
    if (!v3) {
      goto LABEL_10;
    }
  }
  char v9 = (void *)*v5;
  if (!*v5) {
    goto LABEL_10;
  }
  return v9;
}

void sub_22E8A4788(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::$_3,std::allocator<xgboost::$_3>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E24D730;
}

void std::__function::__func<xgboost::$_2,std::allocator<xgboost::$_2>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E24D628;
}

void std::__function::__func<xgboost::$_1,std::allocator<xgboost::$_1>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E24D490;
}

std::string *xgboost::TreeParam::__MANAGER__(xgboost::TreeParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_18))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "TreeParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::TreeParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD723B0;
}

void sub_22E8A48AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_18);
  _Unwind_Resume(a1);
}

std::string *xgboost::tree::TrainParam::__MANAGER__(xgboost::tree::TrainParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72010, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72010))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "TrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::tree::TrainParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD723F8;
}

void sub_22E8A4980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26AD72010);
  _Unwind_Resume(a1);
}

long long *xgboost::GraphvizParam::__MANAGER__(xgboost::GraphvizParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD72030, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD72030))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "GraphvizParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::GraphvizParam>::ParamManagerSingleton(&__p);
  }
  return &xmmword_26AD72440;
}

void sub_22E8A4A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26AD72030);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::TreeParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD723E8 = 0;
  qword_26AD723F0 = 0;
  *(_OWORD *)&stru_26AD723B0.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD723B0.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD723D0 = 0u;
  qword_26AD723E0 = (uint64_t)&qword_26AD723E8;
  std::string::operator=(&stru_26AD723B0, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_nodes");
  operator new();
}

void sub_22E8A4F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_26AD723B0);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::tree::TrainParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD72430 = 0;
  qword_26AD72438 = 0;
  *(_OWORD *)&stru_26AD723F8.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD723F8.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD72418 = 0u;
  qword_26AD72428 = (uint64_t)&qword_26AD72430;
  std::string::operator=(&stru_26AD723F8, __str);
  xgboost::tree::TrainParam::__DECLARE__();
}

void sub_22E8A5068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  xgboost::tree::TrainParam::~TrainParam((void **)va);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_26AD723F8);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBTreeModelParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71E78 = 0;
  qword_26AD71E80 = 0;
  xmmword_26AD71E40 = 0u;
  *(_OWORD *)algn_26AD71E50 = 0u;
  xmmword_26AD71E60 = 0u;
  qword_26AD71E70 = (uint64_t)&qword_26AD71E78;
  std::string::operator=((std::string *)&xmmword_26AD71E40, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_trees");
  operator new();
}

void sub_22E8A5524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD71E40);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<int>,int>::set_lower_bound(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  *(unsigned char *)(result + 108) = 1;
  return result;
}

void dmlc::parameter::ParamManagerSingleton<xgboost::GraphvizParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD72480 = 0;
  qword_26AD72478 = 0;
  xmmword_26AD72440 = 0u;
  *(_OWORD *)algn_26AD72450 = 0u;
  xmmword_26AD72460 = 0u;
  qword_26AD72470 = (uint64_t)&qword_26AD72478;
  std::string::operator=((std::string *)&xmmword_26AD72440, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "yes_color");
  operator new();
}

void sub_22E8A5DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (*(char *)(v9 - 81) < 0) {
    operator delete(*(void **)(v9 - 104));
  }
  if (*(char *)(v9 - 33) < 0) {
    operator delete(*(void **)(v9 - 56));
  }
  if (*(char *)(v9 - 57) < 0) {
    operator delete(*(void **)(v9 - 80));
  }
  xgboost::GraphvizParam::~GraphvizParam(&a9);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD72440);
  _Unwind_Resume(a1);
}

long long *xgboost::gbm::DeprecatedGBLinearModelParam::__MANAGER__(xgboost::gbm::DeprecatedGBLinearModelParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_5, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_5))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "DeprecatedGBLinearModelParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::gbm::DeprecatedGBLinearModelParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::gbm::DeprecatedGBLinearModelParam>::~ParamManagerSingleton, &xmmword_26AD71680, &dword_22E895000);
    __cxa_guard_release(&_MergedGlobals_5);
  }
  return &xmmword_26AD71680;
}

void sub_22E8A5F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_5);
  _Unwind_Resume(a1);
}

std::string *dmlc::parameter::ParamManagerSingleton<xgboost::gbm::DeprecatedGBLinearModelParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD716B8 = 0;
  qword_26AD716C0 = 0;
  xmmword_26AD71680 = 0u;
  *(_OWORD *)algn_26AD71690 = 0u;
  xmmword_26AD716A0 = 0u;
  qword_26AD716B0 = (uint64_t)&qword_26AD716B8;
  return std::string::operator=((std::string *)&xmmword_26AD71680, __str);
}

void sub_22E8A5FA8(_Unwind_Exception *a1)
{
}

void _GLOBAL__sub_I_cpu_predictor_cc()
{
  void v10[3] = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::PredictorReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__str, "cpu_predictor");
  std::mutex::lock((std::mutex *)((char *)v0 + 72));
  v1 = (const void **)*((void *)v0 + 7);
  if (!v1) {
LABEL_6:
  }
    operator new();
  while (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v0 + 4), (const void **)&__str.__r_.__value_.__l.__data_, v1 + 4))
  {
LABEL_5:
    v1 = (const void **)*v1;
    if (!v1) {
      goto LABEL_6;
    }
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v0 + 4), v1 + 4, (const void **)&__str.__r_.__value_.__l.__data_))
  {
    ++v1;
    goto LABEL_5;
  }
  v8[0] = (long long *)&__str;
  uint64_t v2 = std::__tree<std::__value_type<std::string,xgboost::PredictorReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::PredictorReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::PredictorReg *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v0 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v8)[7];
  std::mutex::unlock((std::mutex *)((char *)v0 + 72));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Make predictions using CPU.");
  std::string::operator=((std::string *)(v2 + 24), &__p);
  v7[0] = &unk_26E24A738;
  void v7[3] = v7;
  uint64_t v3 = v2 + 72;
  uint64_t v9 = v8;
  v8[0] = (long long *)&unk_26E24A738;
  if (v8 != (long long **)(v2 + 72))
  {
    char v4 = *(long long ***)(v2 + 96);
    if (v4 == (long long **)v3)
    {
      v10[0] = &unk_26E24A738;
      uint64_t v9 = 0;
      (*(void (**)(uint64_t, long long **))(*(void *)v3 + 24))(v2 + 72, v8);
      (*(void (**)(void))(**(void **)(v2 + 96) + 32))(*(void *)(v2 + 96));
      *(void *)(v2 + 96) = 0;
      uint64_t v9 = v8;
      (*(void (**)(void *, uint64_t))(v10[0] + 24))(v10, v2 + 72);
      (*(void (**)(void *))(v10[0] + 32))(v10);
    }
    else
    {
      *(void *)(v2 + 72) = &unk_26E24A738;
      uint64_t v9 = v4;
    }
    *(void *)(v2 + 96) = v3;
  }
  std::__function::__value_func<xgboost::Predictor * ()(xgboost::GenericParameter const*)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<xgboost::Predictor * ()(xgboost::GenericParameter const*)>::~__value_func[abi:ne180100](v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  xgboost::predictor::__make_PredictorReg_CPUPredictor__ = v2;
}

void sub_22E8A6440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::mutex::unlock(v20);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<xgboost::Predictor * ()(xgboost::GenericParameter const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::PredictorReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::PredictorReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::PredictorReg *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  char v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    char v8 = a1 + 1;
LABEL_9:
    uint64_t v10 = *a3;
    long long v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v13 = *v10;
      v11[6] = *((void *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    uint64_t *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    uint64_t *v6 = v11;
    uint64_t v14 = (uint64_t *)**a1;
    uint64_t v15 = v11;
    if (v14)
    {
      *a1 = v14;
      uint64_t v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      char v8 = (uint64_t **)v5;
      uint64_t v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      uint64_t v5 = *v8;
      char v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2)) {
      break;
    }
    char v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  long long v11 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v11;
}

void sub_22E8A6650(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

long long *dmlc::Registry<xgboost::PredictorReg>::Get()
{
  {
    qword_26AD72780 = 0;
    dmlc::Registry<xgboost::PredictorReg>::Get(void)::inst = 0u;
    unk_26AD72758 = 0u;
    xmmword_26AD72768 = 0u;
    qword_26AD72778 = (uint64_t)&qword_26AD72780;
    qword_26AD72788 = 0;
    unk_26AD72790 = 850045863;
    xmmword_26AD72798 = 0u;
    unk_26AD727A8 = 0u;
    xmmword_26AD727B8 = 0u;
    qword_26AD727C8 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::PredictorReg>::~Registry, &dmlc::Registry<xgboost::PredictorReg>::Get(void)::inst, &dword_22E895000);
  }
  return &dmlc::Registry<xgboost::PredictorReg>::Get(void)::inst;
}

void _GLOBAL__sub_I_gradient_index_format_cc()
{
  void v10[3] = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__str, "raw");
  std::mutex::lock((std::mutex *)((char *)v0 + 72));
  v1 = (const void **)*((void *)v0 + 7);
  if (!v1) {
LABEL_6:
  }
    operator new();
  while (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v0 + 4), (const void **)&__str.__r_.__value_.__l.__data_, v1 + 4))
  {
LABEL_5:
    v1 = (const void **)*v1;
    if (!v1) {
      goto LABEL_6;
    }
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v0 + 4), v1 + 4, (const void **)&__str.__r_.__value_.__l.__data_))
  {
    ++v1;
    goto LABEL_5;
  }
  v8[0] = (long long *)&__str;
  uint64_t v2 = std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v0 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v8)[7];
  std::mutex::unlock((std::mutex *)((char *)v0 + 72));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Raw GHistIndex binary data format.");
  std::string::operator=((std::string *)(v2 + 24), &__p);
  v7[0] = &unk_26E24BCA8;
  void v7[3] = v7;
  uint64_t v3 = v2 + 72;
  uint64_t v9 = v8;
  v8[0] = (long long *)&unk_26E24BCA8;
  if (v8 != (long long **)(v2 + 72))
  {
    char v4 = *(long long ***)(v2 + 96);
    if (v4 == (long long **)v3)
    {
      v10[0] = &unk_26E24BCA8;
      uint64_t v9 = 0;
      (*(void (**)(uint64_t, long long **))(*(void *)v3 + 24))(v2 + 72, v8);
      (*(void (**)(void))(**(void **)(v2 + 96) + 32))(*(void *)(v2 + 96));
      *(void *)(v2 + 96) = 0;
      uint64_t v9 = v8;
      (*(void (**)(void *, uint64_t))(v10[0] + 24))(v10, v2 + 72);
      (*(void (**)(void *))(v10[0] + 32))(v10);
    }
    else
    {
      *(void *)(v2 + 72) = &unk_26E24BCA8;
      uint64_t v9 = v4;
    }
    *(void *)(v2 + 96) = v3;
  }
  std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::~__value_func[abi:ne180100](v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  xgboost::data::__make_GHistIndexPageFmt_raw__ = v2;
}

void sub_22E8A6B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::mutex::unlock(v20);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  char v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    char v8 = a1 + 1;
LABEL_9:
    uint64_t v10 = *a3;
    long long v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v13 = *v10;
      v11[6] = *((void *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    uint64_t *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    uint64_t *v6 = v11;
    uint64_t v14 = (uint64_t *)**a1;
    uint64_t v15 = v11;
    if (v14)
    {
      *a1 = v14;
      uint64_t v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      char v8 = (uint64_t **)v5;
      uint64_t v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      uint64_t v5 = *v8;
      char v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2)) {
      break;
    }
    char v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  long long v11 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v11;
}

void sub_22E8A6D98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

long long *dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix>>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71860, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71860))
  {
    qword_26AD71AC8 = 0;
    qword_26AD71AC0 = 0;
    xmmword_26AD71A88 = 0u;
    unk_26AD71A98 = 0u;
    xmmword_26AD71AA8 = 0u;
    qword_26AD71AB8 = (uint64_t)&qword_26AD71AC0;
    qword_26AD71AD0 = 850045863;
    qword_26AD71B08 = 0;
    xmmword_26AD71AD8 = 0u;
    unk_26AD71AE8 = 0u;
    xmmword_26AD71AF8 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix>>::~Registry, &xmmword_26AD71A88, &dword_22E895000);
    __cxa_guard_release(&qword_26AD71860);
  }
  return &xmmword_26AD71A88;
}

void _GLOBAL__sub_I_sparse_page_raw_format_cc()
{
  v21[3] = *MEMORY[0x263EF8340];
  v0 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__str, "raw");
  std::mutex::lock((std::mutex *)((char *)v0 + 72));
  v1 = (const void **)*((void *)v0 + 7);
  if (!v1) {
LABEL_6:
  }
    operator new();
  while (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v0 + 4), (const void **)&__str.__r_.__value_.__l.__data_, v1 + 4))
  {
LABEL_5:
    v1 = (const void **)*v1;
    if (!v1) {
      goto LABEL_6;
    }
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v0 + 4), v1 + 4, (const void **)&__str.__r_.__value_.__l.__data_))
  {
    ++v1;
    goto LABEL_5;
  }
  v19[0] = (long long *)&__str;
  uint64_t v2 = std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v0 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v19)[7];
  std::mutex::unlock((std::mutex *)((char *)v0 + 72));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Raw binary data format.");
  std::string::operator=((std::string *)(v2 + 24), &__p);
  v17[0] = &unk_26E24EAB8;
  uint64_t v18 = v17;
  uint64_t v3 = v2 + 72;
  v20 = v19;
  v19[0] = (long long *)&unk_26E24EAB8;
  if (v19 != (long long **)(v2 + 72))
  {
    char v4 = *(long long ***)(v2 + 96);
    if (v4 == (long long **)v3)
    {
      v21[0] = &unk_26E24EAB8;
      v20 = 0;
      (*(void (**)(uint64_t, long long **))(*(void *)v3 + 24))(v2 + 72, v19);
      (*(void (**)(void))(**(void **)(v2 + 96) + 32))(*(void *)(v2 + 96));
      *(void *)(v2 + 96) = 0;
      v20 = v19;
      (*(void (**)(void *, uint64_t))(v21[0] + 24))(v21, v2 + 72);
      (*(void (**)(void *))(v21[0] + 32))(v21);
    }
    else
    {
      *(void *)(v2 + 72) = &unk_26E24EAB8;
      v20 = v4;
    }
    *(void *)(v2 + 96) = v3;
  }
  std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::SparsePage> * ()(void)>::~__value_func[abi:ne180100](v19);
  std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::SparsePage> * ()(void)>::~__value_func[abi:ne180100](v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  _MergedGlobals_21 = v2;
  uint64_t v5 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__str, "raw");
  std::mutex::lock((std::mutex *)((char *)v5 + 72));
  char v6 = (const void **)*((void *)v5 + 7);
  if (!v6) {
LABEL_21:
  }
    operator new();
  while (2)
  {
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v5 + 4), (const void **)&__str.__r_.__value_.__l.__data_, v6 + 4))
    {
LABEL_20:
      char v6 = (const void **)*v6;
      if (!v6) {
        goto LABEL_21;
      }
      continue;
    }
    break;
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v5 + 4), v6 + 4, (const void **)&__str.__r_.__value_.__l.__data_))
  {
    ++v6;
    goto LABEL_20;
  }
  v19[0] = (long long *)&__str;
  uint64_t v7 = std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v5 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v19)[7];
  std::mutex::unlock((std::mutex *)((char *)v5 + 72));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Raw binary data format.");
  std::string::operator=((std::string *)(v7 + 24), &__p);
  v17[0] = &unk_26E24EBA0;
  uint64_t v18 = v17;
  uint64_t v8 = v7 + 72;
  v20 = v19;
  v19[0] = (long long *)&unk_26E24EBA0;
  if (v19 != (long long **)(v7 + 72))
  {
    uint64_t v9 = *(long long ***)(v7 + 96);
    if (v9 == (long long **)v8)
    {
      v21[0] = &unk_26E24EBA0;
      v20 = 0;
      (*(void (**)(uint64_t, long long **))(*(void *)v8 + 24))(v7 + 72, v19);
      (*(void (**)(void))(**(void **)(v7 + 96) + 32))(*(void *)(v7 + 96));
      *(void *)(v7 + 96) = 0;
      v20 = v19;
      (*(void (**)(void *, uint64_t))(v21[0] + 24))(v21, v7 + 72);
      (*(void (**)(void *))(v21[0] + 32))(v21);
    }
    else
    {
      *(void *)(v7 + 72) = &unk_26E24EBA0;
      v20 = v9;
    }
    *(void *)(v7 + 96) = v8;
  }
  std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::CSCPage> * ()(void)>::~__value_func[abi:ne180100](v19);
  std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::CSCPage> * ()(void)>::~__value_func[abi:ne180100](v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  qword_26AD72578 = v7;
  uint64_t v10 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__str, "raw");
  std::mutex::lock((std::mutex *)((char *)v10 + 72));
  long long v11 = (const void **)*((void *)v10 + 7);
  if (!v11) {
LABEL_36:
  }
    operator new();
  while (2)
  {
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v10 + 4), (const void **)&__str.__r_.__value_.__l.__data_, v11 + 4))
    {
LABEL_35:
      long long v11 = (const void **)*v11;
      if (!v11) {
        goto LABEL_36;
      }
      continue;
    }
    break;
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v10 + 4), v11 + 4, (const void **)&__str.__r_.__value_.__l.__data_))
  {
    ++v11;
    goto LABEL_35;
  }
  v19[0] = (long long *)&__str;
  uint64_t v12 = std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v10 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v19)[7];
  std::mutex::unlock((std::mutex *)((char *)v10 + 72));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Raw binary data format.");
  std::string::operator=((std::string *)(v12 + 24), &__p);
  v17[0] = &unk_26E24EC88;
  uint64_t v18 = v17;
  uint64_t v13 = v12 + 72;
  v20 = v19;
  v19[0] = (long long *)&unk_26E24EC88;
  if (v19 != (long long **)(v12 + 72))
  {
    uint64_t v14 = *(long long ***)(v12 + 96);
    if (v14 == (long long **)v13)
    {
      v21[0] = &unk_26E24EC88;
      v20 = 0;
      (*(void (**)(uint64_t, long long **))(*(void *)v13 + 24))(v12 + 72, v19);
      (*(void (**)(void))(**(void **)(v12 + 96) + 32))(*(void *)(v12 + 96));
      *(void *)(v12 + 96) = 0;
      v20 = v19;
      (*(void (**)(void *, uint64_t))(v21[0] + 24))(v21, v12 + 72);
      (*(void (**)(void *))(v21[0] + 32))(v21);
    }
    else
    {
      *(void *)(v12 + 72) = &unk_26E24EC88;
      v20 = v14;
    }
    *(void *)(v12 + 96) = v13;
  }
  std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::SortedCSCPage> * ()(void)>::~__value_func[abi:ne180100](v19);
  std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::SortedCSCPage> * ()(void)>::~__value_func[abi:ne180100](v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  qword_26AD72580 = v12;
}

void sub_22E8A7B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::mutex::unlock(v20);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::CSCPage> * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::SortedCSCPage> * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<xgboost::data::SparsePageFormat<xgboost::SparsePage> * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  char v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    uint64_t v8 = a1 + 1;
LABEL_9:
    uint64_t v10 = *a3;
    long long v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v13 = *v10;
      v11[6] = *((void *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    uint64_t *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    uint64_t *v6 = v11;
    uint64_t v14 = (uint64_t *)**a1;
    uint64_t v15 = v11;
    if (v14)
    {
      *a1 = v14;
      uint64_t v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v5;
      uint64_t v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      uint64_t v5 = *v8;
      char v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2)) {
      break;
    }
    char v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  long long v11 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v11;
}

void sub_22E8A7E50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  char v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    uint64_t v8 = a1 + 1;
LABEL_9:
    uint64_t v10 = *a3;
    long long v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v13 = *v10;
      v11[6] = *((void *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    uint64_t *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    uint64_t *v6 = v11;
    uint64_t v14 = (uint64_t *)**a1;
    uint64_t v15 = v11;
    if (v14)
    {
      *a1 = v14;
      uint64_t v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v5;
      uint64_t v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      uint64_t v5 = *v8;
      char v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2)) {
      break;
    }
    char v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  long long v11 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v11;
}

void sub_22E8A7F8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  char v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    uint64_t v8 = a1 + 1;
LABEL_9:
    uint64_t v10 = *a3;
    long long v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v13 = *v10;
      v11[6] = *((void *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    uint64_t *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    uint64_t *v6 = v11;
    uint64_t v14 = (uint64_t *)**a1;
    uint64_t v15 = v11;
    if (v14)
    {
      *a1 = v14;
      uint64_t v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v5;
      uint64_t v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      uint64_t v5 = *v8;
      char v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2)) {
      break;
    }
    char v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  long long v11 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v11;
}

void sub_22E8A80C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

long long *dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71848, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71848))
  {
    qword_26AD71928 = 0;
    unk_26AD71900 = 0u;
    unk_26AD71910 = 0u;
    xmmword_26AD718F0 = 0u;
    qword_26AD71920 = (uint64_t)&qword_26AD71928;
    qword_26AD71930 = 0;
    unk_26AD71938 = 850045863;
    unk_26AD71940 = 0u;
    qword_26AD71970 = 0;
    xmmword_26AD71950 = 0u;
    unk_26AD71960 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::~Registry, &xmmword_26AD718F0, &dword_22E895000);
    __cxa_guard_release(&qword_26AD71848);
  }
  return &xmmword_26AD718F0;
}

long long *dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71850, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71850))
  {
    xmmword_26AD71978 = 0u;
    unk_26AD71988 = 0u;
    xmmword_26AD71998 = 0u;
    qword_26AD719A8 = (uint64_t)&qword_26AD719B0;
    qword_26AD719B0 = 0;
    qword_26AD719B8 = 0;
    unk_26AD719C0 = 850045863;
    qword_26AD719F8 = 0;
    xmmword_26AD719C8 = 0u;
    unk_26AD719D8 = 0u;
    xmmword_26AD719E8 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::~Registry, &xmmword_26AD71978, &dword_22E895000);
    __cxa_guard_release(&qword_26AD71850);
  }
  return &xmmword_26AD71978;
}

long long *dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_8))
  {
    qword_26AD718A0 = 0;
    unk_26AD71878 = 0u;
    unk_26AD71888 = 0u;
    xmmword_26AD71868 = 0u;
    qword_26AD71898 = (uint64_t)&qword_26AD718A0;
    qword_26AD718A8 = 0;
    unk_26AD718B0 = 850045863;
    unk_26AD718B8 = 0u;
    unk_26AD718C8 = 0u;
    unk_26AD718D8 = 0u;
    qword_26AD718E8 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::~Registry, &xmmword_26AD71868, &dword_22E895000);
    __cxa_guard_release(&_MergedGlobals_8);
  }
  return &xmmword_26AD71868;
}

void _GLOBAL__sub_I_data_cc(dmlc::data::LibSVMParserParam *a1)
{
  v1 = dmlc::data::LibSVMParserParam::__MANAGER__(a1);
  uint64_t v2 = dmlc::data::LibFMParserParam::__MANAGER__((dmlc::data::LibFMParserParam *)v1);
  dmlc::data::CSVParserParam::__MANAGER__((dmlc::data::CSVParserParam *)v2);
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "libsvm");
  uint64_t v3 = dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::__REGISTER__((const void **)__p);
  *(void *)(v3 + 72) = &dmlc::data::CreateLibSVMParser<unsigned int,float>;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD71180 = v3;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "libsvm");
  uint64_t v4 = dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::__REGISTER__((const void **)__p);
  *(void *)(v4 + 72) = &dmlc::data::CreateLibSVMParser<unsigned long long,float>;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD71188 = v4;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "libfm");
  uint64_t v5 = dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::__REGISTER__((const void **)__p);
  *(void *)(v5 + 72) = &dmlc::data::CreateLibFMParser<unsigned int,float>;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD71190 = v5;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "libfm");
  uint64_t v6 = dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::__REGISTER__((const void **)__p);
  *(void *)(v6 + 72) = &dmlc::data::CreateLibFMParser<unsigned long long,float>;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD71198 = v6;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "csv");
  uint64_t v7 = dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::__REGISTER__((const void **)__p);
  *(void *)(v7 + 72) = &dmlc::data::CreateCSVParser<unsigned int,float>;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD711A0 = v7;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "csv");
  uint64_t v8 = dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::__REGISTER__((const void **)__p);
  *(void *)(v8 + 72) = &dmlc::data::CreateCSVParser<unsigned long long,float>;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD711A8 = v8;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,int>>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "csv");
  std::mutex::lock((std::mutex *)&qword_26AD71378);
  uint64_t v9 = qword_26AD71368;
  if (!qword_26AD71368) {
LABEL_18:
  }
    operator new();
  while (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71370, (const void **)__p, (const void **)(v9 + 32)))
  {
LABEL_17:
    uint64_t v9 = *(void *)v9;
    if (!v9) {
      goto LABEL_18;
    }
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71370, (const void **)(v9 + 32), (const void **)__p))
  {
    v9 += 8;
    goto LABEL_17;
  }
  unint64_t v19 = __p;
  uint64_t v10 = std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)__p, (long long **)&v19)[7];
  std::mutex::unlock((std::mutex *)&qword_26AD71378);
  *(void *)(v10 + 72) = &dmlc::data::CreateCSVParser<unsigned int,int>;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD711B0 = v10;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,int>>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "csv");
  std::mutex::lock((std::mutex *)&qword_26AD71510);
  uint64_t v11 = qword_26AD71500;
  if (!qword_26AD71500) {
LABEL_26:
  }
    operator new();
  while (2)
  {
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71508, (const void **)__p, (const void **)(v11 + 32)))
    {
LABEL_25:
      uint64_t v11 = *(void *)v11;
      if (!v11) {
        goto LABEL_26;
      }
      continue;
    }
    break;
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71508, (const void **)(v11 + 32), (const void **)__p))
  {
    v11 += 8;
    goto LABEL_25;
  }
  unint64_t v19 = __p;
  uint64_t v12 = std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)__p, (long long **)&v19)[7];
  std::mutex::unlock((std::mutex *)&qword_26AD71510);
  *(void *)(v12 + 72) = &dmlc::data::CreateCSVParser<unsigned long long,int>;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD711B8 = v12;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,long long>>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "csv");
  std::mutex::lock((std::mutex *)&qword_26AD71400);
  uint64_t v13 = qword_26AD713F0;
  if (!qword_26AD713F0) {
LABEL_34:
  }
    operator new();
  while (2)
  {
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD713F8, (const void **)__p, (const void **)(v13 + 32)))
    {
LABEL_33:
      uint64_t v13 = *(void *)v13;
      if (!v13) {
        goto LABEL_34;
      }
      continue;
    }
    break;
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD713F8, (const void **)(v13 + 32), (const void **)__p))
  {
    v13 += 8;
    goto LABEL_33;
  }
  unint64_t v19 = __p;
  uint64_t v14 = std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)__p, (long long **)&v19)[7];
  std::mutex::unlock((std::mutex *)&qword_26AD71400);
  *(void *)(v14 + 72) = &dmlc::data::CreateCSVParser<unsigned int,long long>;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD711C0 = v14;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,long long>>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "csv");
  std::mutex::lock((std::mutex *)&qword_26AD71598);
  uint64_t v15 = qword_26AD71588;
  if (!qword_26AD71588) {
LABEL_42:
  }
    operator new();
  while (2)
  {
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71590, (const void **)__p, (const void **)(v15 + 32)))
    {
LABEL_41:
      uint64_t v15 = *(void *)v15;
      if (!v15) {
        goto LABEL_42;
      }
      continue;
    }
    break;
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71590, (const void **)(v15 + 32), (const void **)__p))
  {
    v15 += 8;
    goto LABEL_41;
  }
  unint64_t v19 = __p;
  uint64_t v16 = std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)__p, (long long **)&v19)[7];
  std::mutex::unlock((std::mutex *)&qword_26AD71598);
  *(void *)(v16 + 72) = &dmlc::data::CreateCSVParser<unsigned long long,long long>;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  qword_26AD711C8 = v16;
}

void sub_22E8A8F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

long long *dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71168, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71168))
  {
    qword_26AD71480 = 0;
    qword_26AD71478 = 0;
    xmmword_26AD71440 = 0u;
    *(_OWORD *)&qword_26AD71450 = 0u;
    xmmword_26AD71460 = 0u;
    qword_26AD71470 = (uint64_t)&qword_26AD71478;
    qword_26AD71488 = 850045863;
    qword_26AD714C0 = 0;
    xmmword_26AD71490 = 0u;
    unk_26AD714A0 = 0u;
    xmmword_26AD714B0 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::~Registry, &xmmword_26AD71440, &dword_22E895000);
    __cxa_guard_release(&qword_26AD71168);
  }
  return &xmmword_26AD71440;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::__REGISTER__(const void **a1)
{
  std::mutex::lock((std::mutex *)&qword_26AD71488);
  uint64_t v2 = qword_26AD71478;
  if (!qword_26AD71478) {
LABEL_6:
  }
    operator new();
  while (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71480, a1, (const void **)(v2 + 32)))
  {
LABEL_5:
    uint64_t v2 = *(void *)v2;
    if (!v2) {
      goto LABEL_6;
    }
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71480, (const void **)(v2 + 32), a1))
  {
    v2 += 8;
    goto LABEL_5;
  }
  uint64_t v5 = a1;
  uint64_t v3 = std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (long long **)&v5)[7];
  std::mutex::unlock((std::mutex *)&qword_26AD71488);
  return v3;
}

void sub_22E8A9374(_Unwind_Exception *a1)
{
}

void *std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, long long **a2)
{
  uint64_t v3 = qword_26AD71478;
  if (!qword_26AD71478)
  {
    uint64_t v5 = &qword_26AD71478;
    uint64_t v6 = &qword_26AD71478;
LABEL_10:
    uint64_t v8 = *a2;
    uint64_t v9 = operator new(0x40uLL);
    uint64_t v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v11 = *v8;
      v9[6] = *((void *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *uint64_t v5 = (uint64_t)v9;
    uint64_t v12 = v9;
    if (*(void *)qword_26AD71470)
    {
      qword_26AD71470 = *(void *)qword_26AD71470;
      uint64_t v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_26AD71478, v12);
    ++qword_26AD71480;
    return v9;
  }
  uint64_t v5 = &qword_26AD71478;
  while (1)
  {
    while (1)
    {
      uint64_t v6 = (uint64_t *)v3;
      uint64_t v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71480, a1, (const void **)(v3 + 32))) {
        break;
      }
      uint64_t v3 = *v6;
      uint64_t v5 = v6;
      if (!*v6) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71480, v7, a1)) {
      break;
    }
    uint64_t v5 = v6 + 1;
    uint64_t v3 = v6[1];
    if (!v3) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = (void *)*v5;
  if (!*v5) {
    goto LABEL_10;
  }
  return v9;
}

void sub_22E8A94CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

long long *dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71150, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71150))
  {
    xmmword_26AD712A8 = 0u;
    *(_OWORD *)&qword_26AD712B8 = 0u;
    xmmword_26AD712C8 = 0u;
    qword_26AD712D8 = (uint64_t)&qword_26AD712E0;
    qword_26AD712E0 = 0;
    qword_26AD712E8 = 0;
    unk_26AD712F0 = 850045863;
    qword_26AD71328 = 0;
    xmmword_26AD712F8 = 0u;
    unk_26AD71308 = 0u;
    xmmword_26AD71318 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::~Registry, &xmmword_26AD712A8, &dword_22E895000);
    __cxa_guard_release(&qword_26AD71150);
  }
  return &xmmword_26AD712A8;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::__REGISTER__(const void **a1)
{
  std::mutex::lock((std::mutex *)&unk_26AD712F0);
  uint64_t v2 = qword_26AD712E0;
  if (!qword_26AD712E0) {
LABEL_6:
  }
    operator new();
  while (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD712E8, a1, (const void **)(v2 + 32)))
  {
LABEL_5:
    uint64_t v2 = *(void *)v2;
    if (!v2) {
      goto LABEL_6;
    }
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD712E8, (const void **)(v2 + 32), a1))
  {
    v2 += 8;
    goto LABEL_5;
  }
  uint64_t v5 = a1;
  uint64_t v3 = std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (long long **)&v5)[7];
  std::mutex::unlock((std::mutex *)&unk_26AD712F0);
  return v3;
}

void sub_22E8A982C(_Unwind_Exception *a1)
{
}

void *std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, long long **a2)
{
  uint64_t v3 = qword_26AD712E0;
  if (!qword_26AD712E0)
  {
    uint64_t v5 = &qword_26AD712E0;
    uint64_t v6 = &qword_26AD712E0;
LABEL_10:
    uint64_t v8 = *a2;
    uint64_t v9 = operator new(0x40uLL);
    uint64_t v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v11 = *v8;
      v9[6] = *((void *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *uint64_t v5 = (uint64_t)v9;
    uint64_t v12 = v9;
    if (*(void *)qword_26AD712D8)
    {
      qword_26AD712D8 = *(void *)qword_26AD712D8;
      uint64_t v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_26AD712E0, v12);
    ++qword_26AD712E8;
    return v9;
  }
  uint64_t v5 = &qword_26AD712E0;
  while (1)
  {
    while (1)
    {
      uint64_t v6 = (uint64_t *)v3;
      uint64_t v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD712E8, a1, (const void **)(v3 + 32))) {
        break;
      }
      uint64_t v3 = *v6;
      uint64_t v5 = v6;
      if (!*v6) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD712E8, v7, a1)) {
      break;
    }
    uint64_t v5 = v6 + 1;
    uint64_t v3 = v6[1];
    if (!v3) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = (void *)*v5;
  if (!*v5) {
    goto LABEL_10;
  }
  return v9;
}

void sub_22E8A9984(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, long long **a2)
{
  uint64_t v3 = qword_26AD71588;
  if (!qword_26AD71588)
  {
    uint64_t v5 = &qword_26AD71588;
    uint64_t v6 = &qword_26AD71588;
LABEL_10:
    uint64_t v8 = *a2;
    uint64_t v9 = operator new(0x40uLL);
    uint64_t v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v11 = *v8;
      v9[6] = *((void *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *uint64_t v5 = (uint64_t)v9;
    uint64_t v12 = v9;
    if (*(void *)qword_26AD71580)
    {
      qword_26AD71580 = *(void *)qword_26AD71580;
      uint64_t v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_26AD71588, v12);
    ++qword_26AD71590;
    return v9;
  }
  uint64_t v5 = &qword_26AD71588;
  while (1)
  {
    while (1)
    {
      uint64_t v6 = (uint64_t *)v3;
      uint64_t v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71590, a1, (const void **)(v3 + 32))) {
        break;
      }
      uint64_t v3 = *v6;
      uint64_t v5 = v6;
      if (!*v6) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71590, v7, a1)) {
      break;
    }
    uint64_t v5 = v6 + 1;
    uint64_t v3 = v6[1];
    if (!v3) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = (void *)*v5;
  if (!*v5) {
    goto LABEL_10;
  }
  return v9;
}

void sub_22E8A9AD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, long long **a2)
{
  uint64_t v3 = qword_26AD71500;
  if (!qword_26AD71500)
  {
    uint64_t v5 = &qword_26AD71500;
    uint64_t v6 = &qword_26AD71500;
LABEL_10:
    uint64_t v8 = *a2;
    uint64_t v9 = operator new(0x40uLL);
    uint64_t v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v11 = *v8;
      v9[6] = *((void *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *uint64_t v5 = (uint64_t)v9;
    uint64_t v12 = v9;
    if (*(void *)qword_26AD714F8)
    {
      qword_26AD714F8 = *(void *)qword_26AD714F8;
      uint64_t v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_26AD71500, v12);
    ++qword_26AD71508;
    return v9;
  }
  uint64_t v5 = &qword_26AD71500;
  while (1)
  {
    while (1)
    {
      uint64_t v6 = (uint64_t *)v3;
      uint64_t v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71508, a1, (const void **)(v3 + 32))) {
        break;
      }
      uint64_t v3 = *v6;
      uint64_t v5 = v6;
      if (!*v6) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71508, v7, a1)) {
      break;
    }
    uint64_t v5 = v6 + 1;
    uint64_t v3 = v6[1];
    if (!v3) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = (void *)*v5;
  if (!*v5) {
    goto LABEL_10;
  }
  return v9;
}

void sub_22E8A9C24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, long long **a2)
{
  uint64_t v3 = qword_26AD713F0;
  if (!qword_26AD713F0)
  {
    uint64_t v5 = &qword_26AD713F0;
    uint64_t v6 = &qword_26AD713F0;
LABEL_10:
    uint64_t v8 = *a2;
    uint64_t v9 = operator new(0x40uLL);
    uint64_t v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v11 = *v8;
      v9[6] = *((void *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *uint64_t v5 = (uint64_t)v9;
    uint64_t v12 = v9;
    if (*(void *)qword_26AD713E8)
    {
      qword_26AD713E8 = *(void *)qword_26AD713E8;
      uint64_t v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_26AD713F0, v12);
    ++qword_26AD713F8;
    return v9;
  }
  uint64_t v5 = &qword_26AD713F0;
  while (1)
  {
    while (1)
    {
      uint64_t v6 = (uint64_t *)v3;
      uint64_t v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD713F8, a1, (const void **)(v3 + 32))) {
        break;
      }
      uint64_t v3 = *v6;
      uint64_t v5 = v6;
      if (!*v6) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD713F8, v7, a1)) {
      break;
    }
    uint64_t v5 = v6 + 1;
    uint64_t v3 = v6[1];
    if (!v3) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = (void *)*v5;
  if (!*v5) {
    goto LABEL_10;
  }
  return v9;
}

void sub_22E8A9D74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, long long **a2)
{
  uint64_t v3 = qword_26AD71368;
  if (!qword_26AD71368)
  {
    uint64_t v5 = &qword_26AD71368;
    uint64_t v6 = &qword_26AD71368;
LABEL_10:
    uint64_t v8 = *a2;
    uint64_t v9 = operator new(0x40uLL);
    uint64_t v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v11 = *v8;
      v9[6] = *((void *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *uint64_t v5 = (uint64_t)v9;
    uint64_t v12 = v9;
    if (*(void *)qword_26AD71360)
    {
      qword_26AD71360 = *(void *)qword_26AD71360;
      uint64_t v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_26AD71368, v12);
    ++qword_26AD71370;
    return v9;
  }
  uint64_t v5 = &qword_26AD71368;
  while (1)
  {
    while (1)
    {
      uint64_t v6 = (uint64_t *)v3;
      uint64_t v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71370, a1, (const void **)(v3 + 32))) {
        break;
      }
      uint64_t v3 = *v6;
      uint64_t v5 = v6;
      if (!*v6) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71370, v7, a1)) {
      break;
    }
    uint64_t v5 = v6 + 1;
    uint64_t v3 = v6[1];
    if (!v3) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = (void *)*v5;
  if (!*v5) {
    goto LABEL_10;
  }
  return v9;
}

void sub_22E8A9EC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

long long *dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,long long>>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71178, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71178))
  {
    qword_26AD71590 = 0;
    qword_26AD71588 = 0;
    xmmword_26AD71550 = 0u;
    *(_OWORD *)&qword_26AD71560 = 0u;
    xmmword_26AD71570 = 0u;
    qword_26AD71580 = (uint64_t)&qword_26AD71588;
    qword_26AD71598 = 850045863;
    qword_26AD715D0 = 0;
    xmmword_26AD715A0 = 0u;
    unk_26AD715B0 = 0u;
    xmmword_26AD715C0 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,long long>>::~Registry, &xmmword_26AD71550, &dword_22E895000);
    __cxa_guard_release(&qword_26AD71178);
  }
  return &xmmword_26AD71550;
}

long long *dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,int>>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71170, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71170))
  {
    qword_26AD71508 = 0;
    qword_26AD71500 = 0;
    xmmword_26AD714C8 = 0u;
    *(_OWORD *)&qword_26AD714D8 = 0u;
    xmmword_26AD714E8 = 0u;
    qword_26AD714F8 = (uint64_t)&qword_26AD71500;
    qword_26AD71510 = 850045863;
    qword_26AD71548 = 0;
    xmmword_26AD71518 = 0u;
    unk_26AD71528 = 0u;
    xmmword_26AD71538 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,int>>::~Registry, &xmmword_26AD714C8, &dword_22E895000);
    __cxa_guard_release(&qword_26AD71170);
  }
  return &xmmword_26AD714C8;
}

long long *dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,long long>>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71160, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71160))
  {
    qword_26AD713F8 = 0;
    qword_26AD713F0 = 0;
    xmmword_26AD713B8 = 0u;
    *(_OWORD *)&qword_26AD713C8 = 0u;
    xmmword_26AD713D8 = 0u;
    qword_26AD713E8 = (uint64_t)&qword_26AD713F0;
    qword_26AD71400 = 850045863;
    qword_26AD71438 = 0;
    xmmword_26AD71408 = 0u;
    unk_26AD71418 = 0u;
    xmmword_26AD71428 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,long long>>::~Registry, &xmmword_26AD713B8, &dword_22E895000);
    __cxa_guard_release(&qword_26AD71160);
  }
  return &xmmword_26AD713B8;
}

long long *dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,int>>::Get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71158, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71158))
  {
    qword_26AD71370 = 0;
    qword_26AD71368 = 0;
    xmmword_26AD71330 = 0u;
    *(_OWORD *)&qword_26AD71340 = 0u;
    xmmword_26AD71350 = 0u;
    qword_26AD71360 = (uint64_t)&qword_26AD71368;
    qword_26AD71378 = 850045863;
    qword_26AD713B0 = 0;
    xmmword_26AD71380 = 0u;
    unk_26AD71390 = 0u;
    xmmword_26AD713A0 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,int>>::~Registry, &xmmword_26AD71330, &dword_22E895000);
    __cxa_guard_release(&qword_26AD71158);
  }
  return &xmmword_26AD71330;
}

std::string *dmlc::data::LibSVMParserParam::__MANAGER__(dmlc::data::LibSVMParserParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_2, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_2))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LibSVMParserParam");
    dmlc::parameter::ParamManagerSingleton<dmlc::data::LibSVMParserParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD711D0;
}

void sub_22E8AA224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_2);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<dmlc::data::LibSVMParserParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71208 = 0;
  qword_26AD71210 = 0;
  *(_OWORD *)&stru_26AD711D0.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD711D0.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD711F0 = 0u;
  qword_26AD71200 = (uint64_t)&qword_26AD71208;
  std::string::operator=(&stru_26AD711D0, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "format");
  operator new();
}

void sub_22E8AA524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_26AD711D0);
  _Unwind_Resume(a1);
}

std::string *dmlc::data::LibFMParserParam::__MANAGER__(dmlc::data::LibFMParserParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71140, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71140))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LibFMParserParam");
    dmlc::parameter::ParamManagerSingleton<dmlc::data::LibFMParserParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD71218;
}

void sub_22E8AA63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26AD71140);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<dmlc::data::LibFMParserParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71250 = 0;
  qword_26AD71258 = 0;
  *(_OWORD *)&stru_26AD71218.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD71218.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD71238 = 0u;
  qword_26AD71248 = (uint64_t)&qword_26AD71250;
  std::string::operator=(&stru_26AD71218, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "format");
  operator new();
}

void sub_22E8AA93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_26AD71218);
  _Unwind_Resume(a1);
}

long long *dmlc::data::CSVParserParam::__MANAGER__(dmlc::data::CSVParserParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD71148, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD71148))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "CSVParserParam");
    dmlc::parameter::ParamManagerSingleton<dmlc::data::CSVParserParam>::ParamManagerSingleton(&__p);
  }
  return &xmmword_26AD71260;
}

void sub_22E8AAA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26AD71148);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<dmlc::data::CSVParserParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71298 = 0;
  qword_26AD712A0 = 0;
  xmmword_26AD71260 = 0u;
  *(_OWORD *)algn_26AD71270 = 0u;
  xmmword_26AD71280 = 0u;
  qword_26AD71290 = (uint64_t)&qword_26AD71298;
  std::string::operator=((std::string *)&xmmword_26AD71260, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "format");
  operator new();
}

void sub_22E8AAFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  dmlc::data::CSVParserParam::~CSVParserParam(&a10);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD71260);
  _Unwind_Resume(a1);
}

std::string *xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(xgboost::tree::CPUHistMakerTrainParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_20))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "CPUHistMakerTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::tree::CPUHistMakerTrainParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD72528;
}

void sub_22E8AB130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_20);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::tree::CPUHistMakerTrainParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD72560 = 0;
  qword_26AD72568 = 0;
  *(_OWORD *)&stru_26AD72528.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD72528.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD72548 = 0u;
  qword_26AD72558 = (uint64_t)&qword_26AD72560;
  std::string::operator=(&stru_26AD72528, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "single_precision_histogram");
  operator new();
}

void sub_22E8AB2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD72528);
  _Unwind_Resume(a1);
}

std::string *xgboost::GlobalConfiguration::__MANAGER__(xgboost::GlobalConfiguration *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_24, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_24))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "GlobalConfiguration");
    dmlc::parameter::ParamManagerSingleton<xgboost::GlobalConfiguration>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD72630;
}

void sub_22E8AB3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_24);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::GlobalConfiguration>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD72668 = 0;
  qword_26AD72670 = 0;
  *(_OWORD *)&stru_26AD72630.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD72630.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD72650 = 0u;
  qword_26AD72660 = (uint64_t)&qword_26AD72668;
  std::string::operator=(&stru_26AD72630, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "verbosity");
  operator new();
}

void sub_22E8AB6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD72630);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<int>,int>::set_range(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 112) = a2;
  *(_DWORD *)(result + 116) = a3;
  *(_WORD *)(result + 108) = 257;
  return result;
}

std::string *xgboost::common::AFTParam::__MANAGER__(xgboost::common::AFTParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_14, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_14))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "AFTParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::common::AFTParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD71D90;
}

void sub_22E8AB7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_14);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::common::AFTParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71DC8 = 0;
  qword_26AD71DD0 = 0;
  *(_OWORD *)&stru_26AD71D90.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD71D90.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD71DB0 = 0u;
  qword_26AD71DC0 = (uint64_t)&qword_26AD71DC8;
  std::string::operator=(&stru_26AD71D90, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "aft_loss_distribution");
  operator new();
}

void sub_22E8ABB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD71D90);
  _Unwind_Resume(a1);
}

std::string *xgboost::linear::LinearTrainParam::__MANAGER__(xgboost::linear::LinearTrainParam *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_4, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_4))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LinearTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::linear::LinearTrainParam>::ParamManagerSingleton(&__p);
  }
  return &stru_26AD71630;
}

void sub_22E8ABC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_4);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::linear::LinearTrainParam>::ParamManagerSingleton(std::string *__str)
{
  qword_26AD71668 = 0;
  qword_26AD71670 = 0;
  *(_OWORD *)&stru_26AD71630.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_26AD71630.__r_.__value_.__r.__words[2] = 0u;
  xmmword_26AD71650 = 0u;
  qword_26AD71660 = (uint64_t)&qword_26AD71668;
  std::string::operator=(&stru_26AD71630, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "learning_rate");
  operator new();
}

void sub_22E8AC434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (*(char *)(v33 - 17) < 0) {
    operator delete(*(void **)(v33 - 40));
  }
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_26AD71630);
  _Unwind_Resume(a1);
}

void xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}::operator()(uint64_t a1, void *a2)
{
  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  std::string::basic_string[abi:ne180100]<0>(__p, "raw");
  xgboost::data::CreatePageFormat<xgboost::CSCPage>((uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  xgboost::data::Cache::ShardName(*(xgboost::data::Cache **)(a2[1] + 112), (uint64_t)v12);
  long long v11 = 0;
  uint64_t v3 = *(void *)(a2[1] + 112);
  uint64_t v4 = *(void *)(v3 + 56);
  if (*a2 < (unint64_t)((*(void *)(v3 + 64) - v4) >> 3))
  {
    long long v11 = *(void **)(v4 + 8 * *a2);
    if (v13 >= 0) {
      uint64_t v5 = (dmlc::SeekStream *)v12;
    }
    else {
      uint64_t v5 = (dmlc::SeekStream *)v12[0];
    }
    uint64_t v6 = dmlc::SeekStream::CreateForRead(v5, 0);
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 32))(v6, v11);
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    if (v8 != v11) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    uint64_t v7 = operator new(0x30uLL);
    v7[1] = 0;
    v7[2] = 0;
    void *v7 = &unk_26E24A148;
    xgboost::SparsePage::SparsePage((xgboost::SparsePage *)(v7 + 3));
  }
  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
}

void sub_22E8AC8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a16);
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
  if (*(char *)(v24 - 49) < 0) {
    operator delete(*(void **)(v24 - 72));
  }
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  _Unwind_Resume(a1);
}

void sub_22E8AC9EC(uint64_t a1, ...)
{
  va_start(va, a1);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E8AC9F8);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x230FA7CE0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      char v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x230FA7CF0](v13);
  return a1;
}

void sub_22E8ACB50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x230FA7CF0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x22E8ACB30);
}

void sub_22E8ACBA4(_Unwind_Exception *a1)
{
}

uint64_t xgboost::obj::__dmlc_registry_file_tag_regression_obj__(xgboost::obj *this)
{
  return 0;
}

void dmlc::parameter::ParamManager::~ParamManager(dmlc::parameter::ParamManager *this)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v2 = *((void *)this + 4);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        uint64_t v3 = *((void *)this + 3);
        uint64_t v2 = *((void *)this + 4);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy((uint64_t)this + 48, *((char **)this + 7));
  uint64_t v6 = (void *)*((void *)this + 3);
  if (v6)
  {
    *((void *)this + 4) = v6;
    operator delete(v6);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void __clang_call_terminate(void *a1)
{
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2649E1228, MEMORY[0x263F8C060]);
}

void sub_22E8ACD44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void dmlc::parameter::FieldEntry<float>::~FieldEntry(void **a1)
{
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(a1);

  JUMPOUT(0x230FA80D0);
}

float dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<float>,float>::SetDefault(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
    unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Required parameter ", 19);
    int v5 = *(char *)(a1 + 47);
    if (v5 >= 0) {
      uint64_t v6 = a1 + 24;
    }
    else {
      uint64_t v6 = *(void *)(a1 + 24);
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v7 = *(void *)(a1 + 32);
    }
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" of ", 4);
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v11 = a1 + 48;
    uint64_t v10 = v12;
    int v13 = *(char *)(v11 + 23);
    if (v13 >= 0) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v10;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v15 = *(void *)(v11 + 8);
    }
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is not presented", 17);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v18);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  float result = *(float *)(a1 + 104);
  *(float *)(a2 + *(void *)(a1 + 96)) = result;
  return result;
}

void sub_22E8ACF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void dmlc::parameter::FieldEntry<float>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v13 = 0;
  *(float *)(a2 + *(void *)(a1 + 96)) = dmlc::stof(a3, &v13);
  std::string::size_type v4 = *(unsigned __int8 *)(a3 + 23);
  if ((v4 & 0x80u) != 0) {
    std::string::size_type v4 = *(void *)(a3 + 8);
  }
  __p.__r_.__value_.__r.__words[0] = v4;
  if (v13 > v4) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  std::string::size_type v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0) {
    std::string::size_type v5 = *(void *)(a3 + 8);
  }
  if (v13 < v5)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Some trailing characters could not be parsed: '", 47);
    std::string::basic_string(&__p, (const std::string *)a3, v13, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"'", 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &__p);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
}

void sub_22E8AD198(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
}

void sub_22E8AD434(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v16)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a15);
    __cxa_end_catch();
    JUMPOUT(0x22E8AD4F4);
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_22E8AD4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<float>,float>::Check(uint64_t result, uint64_t a2)
{
  float v2 = *(float *)(a2 + *(void *)(result + 96));
  if (*(unsigned char *)(result + 108))
  {
    float v3 = *(float *)(result + 112);
    if (*(unsigned char *)(result + 109))
    {
      if (v2 < v3 || v2 > *(float *)(result + 116))
      {
        uint64_t v4 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
        std::string::size_type v5 = (void *)std::ostream::operator<<();
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for Parameter ", 15);
        int v7 = *(char *)(v4 + 47);
        if (v7 >= 0) {
          uint64_t v8 = v4 + 24;
        }
        else {
          uint64_t v8 = *(void *)(v4 + 24);
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(v4 + 47);
        }
        else {
          uint64_t v9 = *(void *)(v4 + 32);
        }
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" exceed bound [", 15);
        uint64_t v11 = (void *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v66, 1);
        uint64_t v12 = (void *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 93;
        std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v66, 1);
        v66.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v66, 1);
        int v14 = *(char *)(v4 + 47);
        if (v14 >= 0) {
          uint64_t v15 = v4 + 24;
        }
        else {
          uint64_t v15 = *(void *)(v4 + 24);
        }
        if (v14 >= 0) {
          uint64_t v16 = *(unsigned __int8 *)(v4 + 47);
        }
        else {
          uint64_t v16 = *(void *)(v4 + 32);
        }
        size_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v15, v16);
        std::string v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        uint64_t v21 = *(void *)(v4 + 72);
        uint64_t v20 = v4 + 72;
        uint64_t v19 = v21;
        int v22 = *(char *)(v20 + 23);
        if (v22 >= 0) {
          uint64_t v23 = v20;
        }
        else {
          uint64_t v23 = v19;
        }
        if (v22 >= 0) {
          uint64_t v24 = *(unsigned __int8 *)(v20 + 23);
        }
        else {
          uint64_t v24 = *(void *)(v20 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v66);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
      }
    }
    else if (v2 < v3)
    {
      uint64_t v46 = result;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
      v47 = (void *)std::ostream::operator<<();
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" for Parameter ", 15);
      int v49 = *(char *)(v46 + 47);
      if (v49 >= 0) {
        uint64_t v50 = v46 + 24;
      }
      else {
        uint64_t v50 = *(void *)(v46 + 24);
      }
      if (v49 >= 0) {
        uint64_t v51 = *(unsigned __int8 *)(v46 + 47);
      }
      else {
        uint64_t v51 = *(void *)(v46 + 32);
      }
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" should be greater equal to ", 28);
      v53 = (void *)std::ostream::operator<<();
      v66.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v66, 1);
      int v54 = *(char *)(v46 + 47);
      if (v54 >= 0) {
        uint64_t v55 = v46 + 24;
      }
      else {
        uint64_t v55 = *(void *)(v46 + 24);
      }
      if (v54 >= 0) {
        uint64_t v56 = *(unsigned __int8 *)(v46 + 47);
      }
      else {
        uint64_t v56 = *(void *)(v46 + 32);
      }
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v55, v56);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      uint64_t v61 = *(void *)(v46 + 72);
      uint64_t v60 = v46 + 72;
      uint64_t v59 = v61;
      int v62 = *(char *)(v60 + 23);
      if (v62 >= 0) {
        uint64_t v63 = v60;
      }
      else {
        uint64_t v63 = v59;
      }
      if (v62 >= 0) {
        uint64_t v64 = *(unsigned __int8 *)(v60 + 23);
      }
      else {
        uint64_t v64 = *(void *)(v60 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v63, v64);
      v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v65, &v66);
      v65->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
    }
  }
  else if (*(unsigned char *)(result + 109) && v2 > *(float *)(result + 116))
  {
    uint64_t v26 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
    uint64_t v27 = (void *)std::ostream::operator<<();
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for Parameter ", 15);
    int v29 = *(char *)(v26 + 47);
    if (v29 >= 0) {
      uint64_t v30 = v26 + 24;
    }
    else {
      uint64_t v30 = *(void *)(v26 + 24);
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(v26 + 47);
    }
    else {
      uint64_t v31 = *(void *)(v26 + 32);
    }
    int v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" should be smaller equal to ", 28);
    uint64_t v33 = (void *)std::ostream::operator<<();
    v66.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v66, 1);
    int v34 = *(char *)(v26 + 47);
    if (v34 >= 0) {
      uint64_t v35 = v26 + 24;
    }
    else {
      uint64_t v35 = *(void *)(v26 + 24);
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(v26 + 47);
    }
    else {
      uint64_t v36 = *(void *)(v26 + 32);
    }
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v35, v36);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    uint64_t v41 = *(void *)(v26 + 72);
    uint64_t v40 = v26 + 72;
    uint64_t v39 = v41;
    int v42 = *(char *)(v40 + 23);
    if (v42 >= 0) {
      uint64_t v43 = v40;
    }
    else {
      uint64_t v43 = v39;
    }
    if (v42 >= 0) {
      uint64_t v44 = *(unsigned __int8 *)(v40 + 23);
    }
    else {
      uint64_t v44 = *(void *)(v40 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v43, v44);
    v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v45, &v66);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  return result;
}

void sub_22E8AD984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<float>,float>::GetStringValue(void *a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(void *, void *, float))(*a1 + 64))(a1, v5, *(float *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v5[1] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v7);
}

void sub_22E8ADB4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<float>,float>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  int v4 = *(char *)(a1 + 71);
  if (v4 >= 0) {
    uint64_t v5 = a1 + 48;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 56);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(unsigned char *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  uint64_t v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)uint64_t v8 = v10;
  *(void *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v14);
}

void sub_22E8ADD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<float>,float>::PrintDefaultValueString(float *a1)
{
  return (*(uint64_t (**)(float))(*(void *)a1 + 64))(a1[26]);
}

uint64_t dmlc::parameter::FieldEntry<float>::PrintValue(uint64_t a1, void *a2)
{
  *(void *)((char *)a2 + *(void *)(*a2 - 24) + 16) = 9;
  return std::ostream::operator<<();
}

void dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(void **this)
{
  *this = &unk_26E245490;
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_22E8ADFE4(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x230FA8020](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x230FA8020](a1 + 112);
  return a1;
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      char v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_22E8AE394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void dmlc::ParamError::~ParamError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x230FA80D0);
}

void dmlc::Error::~Error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x230FA80D0);
}

float dmlc::stof(uint64_t a1, void *a2)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  uint64_t v10 = 0;
  float v4 = dmlc::ParseFloat<float,true>(v3, &v10);
  if (*__error() == 34 && v4 == INFINITY)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Out of range value");
    size_t v8 = (struct type_info *)off_2649E1230;
    uint64_t v9 = (void (*)(void *))MEMORY[0x263F8C068];
    goto LABEL_14;
  }
  if (v10 == v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "No conversion could be performed");
    size_t v8 = (struct type_info *)off_2649E1238;
    uint64_t v9 = (void (*)(void *))MEMORY[0x263F8C080];
LABEL_14:
    __cxa_throw(exception, v8, v9);
  }
  if (a2) {
    *a2 = v10 - v3;
  }
  return v4;
}

void sub_22E8AE5C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  float result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  float result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  return result;
}

float dmlc::ParseFloat<float,true>(uint64_t a1, uint64_t *a2)
{
  for (uint64_t i = a1 + 4; ; ++i)
  {
    unsigned int v4 = *(unsigned __int8 *)(i - 4);
    if (v4 > 0x20 || ((1 << v4) & 0x100003600) == 0) {
      break;
    }
  }
  uint64_t v6 = 0;
  BOOL v7 = v4 == 45 || v4 == 43;
  uint64_t v8 = v7;
  if (v7) {
    uint64_t v9 = i + 1;
  }
  else {
    uint64_t v9 = i;
  }
  uint64_t v10 = v9 + 4;
  while ((*(unsigned __int8 *)(v9 + v6 - 4) | 0x20) == aInfinity[v6])
  {
    if (++v6 == 8) {
      goto LABEL_22;
    }
  }
  uint64_t v10 = i + v8 + v6 - 4;
  if (v6 != 8 && v6 != 3)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (unsigned char *)(i + v8 - 1);
    while ((*(unsigned __int8 *)(i + v8 + v14 - 4) | 0x20) == aNan[v14])
    {
      if (++v14 == 3)
      {
        if (*v15 == 40)
        {
          for (j = (char *)(i + v8); ; ++j)
          {
            int v17 = *j;
            if ((v17 - 48) >= 0xA && v17 != 95 && (v17 & 0xFFFFFFDF) - 65 > 0x19) {
              break;
            }
          }
          char v40 = 41;
          if (v17 != 41) {
            dmlc::LogCheckFormat<char,char>(j, &v40);
          }
          uint64_t v15 = j + 1;
        }
        if (a2) {
          *a2 = (uint64_t)v15;
        }
        return NAN;
      }
    }
    uint64_t v19 = i + v8;
    unsigned int v22 = *(unsigned __int8 *)(v19 - 4);
    uint64_t v21 = v19 - 4;
    unsigned int v20 = v22;
    if (v22 - 48 > 9)
    {
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v23 = 0;
      do
      {
        uint64_t v23 = 10 * v23 + v20 - 48;
        unsigned int v24 = *(unsigned __int8 *)++v21;
        unsigned int v20 = v24;
      }
      while (v24 - 48 < 0xA);
    }
    float result = (float)(unint64_t)v23;
    if (v20 == 46)
    {
      unsigned int v20 = *(unsigned __int8 *)(v21 + 1);
      if (v20 - 48 > 9)
      {
        float v29 = 0.0;
        ++v21;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = 0;
        unint64_t v27 = 1;
        do
        {
          uint64_t v28 = 10 * v26 + v20 - 48;
          if (v25 < 0x13)
          {
            v27 *= 10;
            unint64_t v26 = v28;
          }
          unsigned int v20 = *(unsigned __int8 *)(v21 + v25++ + 2);
        }
        while (v20 - 48 < 0xA);
        float v29 = (double)v26 / (double)v27;
        v21 += v25 + 1;
      }
      float result = v29 + result;
    }
    if ((v20 | 0x20) != 0x65)
    {
      uint64_t v34 = v21;
      goto LABEL_88;
    }
    int v31 = *(unsigned __int8 *)(v21 + 1);
    BOOL v32 = v31 == 45 || v31 == 43;
    uint64_t v33 = 1;
    if (v32)
    {
      uint64_t v33 = 2;
      uint64_t v34 = v21 + 2;
    }
    else
    {
      uint64_t v34 = v21 + 1;
    }
    unsigned int v20 = *(unsigned __int8 *)(v21 + v33);
    float v35 = 1.0;
    if (v20 - 48 > 9)
    {
LABEL_85:
      if (v31 == 45) {
        float result = result / v35;
      }
      else {
        float result = result * v35;
      }
LABEL_88:
      if ((v20 | 0x20) == 0x66) {
        uint64_t v39 = v34 + 1;
      }
      else {
        uint64_t v39 = v34;
      }
      if (a2) {
        *a2 = v39;
      }
      float v13 = -result;
      BOOL v11 = v4 == 45;
      goto LABEL_25;
    }
    unsigned int v36 = 0;
    do
    {
      unsigned int v36 = v20 + 10 * v36 - 48;
      unsigned int v37 = *(unsigned __int8 *)++v34;
      unsigned int v20 = v37;
    }
    while (v37 - 48 < 0xA);
    if (v36 >= 0x27)
    {
LABEL_71:
      *__error() = 34;
      if (a2) {
        *a2 = v34;
      }
      return INFINITY;
    }
    if (v36 == 38)
    {
      BOOL v38 = result > 3.4028;
      if (v31 == 45) {
        BOOL v38 = result < 1.1755;
      }
      if (v38) {
        goto LABEL_71;
      }
    }
    else
    {
      float v35 = 1.0;
      if (v36 <= 7) {
        goto LABEL_83;
      }
    }
    float v35 = 1.0;
    do
    {
      float v35 = v35 * 100000000.0;
      v36 -= 8;
    }
    while (v36 > 7);
LABEL_83:
    while (v36)
    {
      float v35 = v35 * 10.0;
      --v36;
    }
    goto LABEL_85;
  }
LABEL_22:
  if (a2) {
    *a2 = v10;
  }
  BOOL v11 = v4 == 45;
  float result = INFINITY;
  float v13 = -INFINITY;
LABEL_25:
  if (v11) {
    return v13;
  }
  return result;
}

void sub_22E8AEA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::LogCheckFormat<char,char>(char *a1, char *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" (", 2);
  char v9 = *a1;
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v9, 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" vs. ", 5);
  char v9 = *a2;
  BOOL v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
  operator new();
}

void sub_22E8AEC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x230FA80D0](v9, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void dmlc::LogCheckFormat<unsigned long,unsigned long>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E8AEE2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *dmlc::LogMessageFatal::Entry::Init(std::string *this, const char *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_22EA3D4EA);
  std::string::operator=(this + 3, &__p);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)&this->__r_.__value_.__l.__size_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(this->__r_.__value_.__r.__words[0] - 24)), 0);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this, (uint64_t)"[", 1);
  unint64_t v5 = dmlc::DateLogger::HumanDate((dmlc::DateLogger *)v14);
  size_t v6 = strlen((const char *)v5);
  BOOL v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
  size_t v9 = strlen(a2);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)":", 1);
  BOOL v11 = (void *)std::ostream::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
}

void sub_22E8AEFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::LogMessageFatal::Entry::ThreadLocal(dmlc::LogMessageFatal::Entry *this)
{
  {
    uint64_t v3 = (void *)dmlc::LogMessageFatal::Entry::ThreadLocal(void)::result(&dmlc::LogMessageFatal::Entry::ThreadLocal(void)::result);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
    _tlv_atexit((void (__cdecl *)(void *))dmlc::LogMessageFatal::Entry::~Entry, v3);
  }
  return dmlc::LogMessageFatal::Entry::ThreadLocal(void)::result(&dmlc::LogMessageFatal::Entry::ThreadLocal(void)::result);
}

void dmlc::LogMessageFatal::Entry::~Entry(dmlc::LogMessageFatal::Entry *this)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)this = *MEMORY[0x263F8C2C8];
  *(void *)((char *)this + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *((void *)this + 1) = MEMORY[0x263F8C318] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x230FA8020]((char *)this + 112);
}

dmlc::DateLogger *dmlc::DateLogger::HumanDate(dmlc::DateLogger *this)
{
  time_t v5 = time(0);
  uint64_t v2 = localtime_r(&v5, &v4);
  snprintf((char *)this, 9uLL, "%02d:%02d:%02d", v2->tm_hour, v2->tm_min, v2->tm_sec);
  return this;
}

void dmlc::LogMessageFatal::~LogMessageFatal(dmlc::LogMessageFatal *this)
{
  Entry = (void *)dmlc::LogMessageFatal::GetEntry(this);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Entry, (uint64_t)"\n", 1);
  tm v4 = getenv("DMLC_LOG_STACK_TRACE_DEPTH");
  if (v4 && (uint64_t v12 = 0, sscanf(v4, "%zu", &v12) == 1)) {
    unint64_t v5 = v12 + 1;
  }
  else {
    unint64_t v5 = 10;
  }
  dmlc::StackTrace(1uLL, v5);
  if ((v11 & 0x80u) == 0) {
    size_t v6 = __p;
  }
  else {
    size_t v6 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v7 = v11;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  dmlc::LogMessageFatal::GetEntry(this);
  dmlc::LogMessageFatal::Entry::Finalize(exception);
}

void sub_22E8AF2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

uint64_t dmlc::StackTrace(unint64_t this, unint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  std::vector<void *>::vector(v18, a2);
  int v4 = backtrace(v18[0], a2);
  if (v4 > this) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Stack trace:\n", 13);
  }
  unint64_t v5 = backtrace_symbols(v18[0], v4);
  size_t v6 = v5;
  if (v5)
  {
    int v7 = v4 - this;
    if (v4 > (int)this)
    {
      unint64_t v8 = (int)this - this;
      size_t v9 = (dmlc **)&v5[(int)this];
      do
      {
        dmlc::Demangle(*v9, __p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"  [bt] (", 8);
        uint64_t v10 = (void *)std::ostream::operator<<();
        unsigned __int8 v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
        if ((v17 & 0x80u) == 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        if ((v17 & 0x80u) == 0) {
          uint64_t v13 = v17;
        }
        else {
          uint64_t v13 = (uint64_t)__p[1];
        }
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
        if ((char)v17 < 0) {
          operator delete(__p[0]);
        }
        ++v8;
        ++v9;
        --v7;
      }
      while (v7);
    }
  }
  free(v6);
  std::stringbuf::str();
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  v19[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v19[1] = MEMORY[0x263F8C318] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v21);
}

void sub_22E8AF554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
}

void dmlc::LogMessageFatal::Entry::Finalize(std::runtime_error *a1@<X8>)
{
  std::stringbuf::str();
  std::runtime_error::runtime_error(a1, &v3);
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_22E8AF60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::Demangle(dmlc *this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)this);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = __str.__r_.__value_.__l.__size_;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (size >= 2)
  {
    int v7 = (char *)p_str + size;
    int64_t v8 = size;
    size_t v9 = p_str;
    do
    {
      uint64_t v10 = (char *)memchr(v9, 95, v8 - 1);
      if (!v10) {
        break;
      }
      if (*(_WORD *)v10 == 23135)
      {
        if (v10 == v7) {
          break;
        }
        std::string::size_type v11 = v10 - (char *)p_str;
        if (v10 - (char *)p_str == -1) {
          break;
        }
        if (size <= v11)
        {
LABEL_25:
          unint64_t v14 = -1;
        }
        else
        {
          uint64_t v12 = (unsigned __int8 *)v10;
LABEL_17:
          uint64_t v13 = 0;
          while (*v12 != asc_22EA3D521[v13])
          {
            if (++v13 == 2)
            {
              if (++v12 != (unsigned __int8 *)v7) {
                goto LABEL_17;
              }
              goto LABEL_25;
            }
          }
          if (v12 == (unsigned __int8 *)v7) {
            goto LABEL_25;
          }
          unint64_t v14 = v12 - (unsigned __int8 *)p_str;
          if (!v14) {
            break;
          }
        }
        std::string::basic_string(&v36, &__str, 0, v11, (std::allocator<char> *)v26);
        std::string::basic_string(&v35, &__str, v11, v14 - v11, (std::allocator<char> *)v26);
        std::string::basic_string[abi:ne180100](__dst, (uint64_t *)&__str, v14);
        int status = 0;
        size_t outlen = -1;
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v15 = &v35;
        }
        else {
          uint64_t v15 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        uint64_t v16 = __cxa_demangle((const char *)v15, 0, &outlen, &status);
        unsigned __int8 v17 = v16;
        if (v16 && !status && outlen)
        {
          std::string::basic_string[abi:ne180100]<0>(v29, v16);
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v18 = &v36;
          }
          else {
            char v18 = (std::string *)v36.__r_.__value_.__r.__words[0];
          }
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v19 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v19 = v36.__r_.__value_.__l.__size_;
          }
          char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v18, v19);
          if ((v30 & 0x80u) == 0) {
            uint64_t v21 = v29;
          }
          else {
            uint64_t v21 = (void **)v29[0];
          }
          if ((v30 & 0x80u) == 0) {
            uint64_t v22 = v30;
          }
          else {
            uint64_t v22 = (uint64_t)v29[1];
          }
          uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          if ((v34 & 0x80u) == 0) {
            unsigned int v24 = __dst;
          }
          else {
            unsigned int v24 = (void **)__dst[0];
          }
          if ((v34 & 0x80u) == 0) {
            uint64_t v25 = v34;
          }
          else {
            uint64_t v25 = (uint64_t)__dst[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
          std::stringbuf::str();
          v26[0] = *MEMORY[0x263F8C2C8];
          *(void *)((char *)v26 + *(void *)(v26[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
          v26[1] = MEMORY[0x263F8C318] + 16;
          if (v27 < 0) {
            operator delete((void *)v26[9]);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x230FA8020](&v28);
          if ((char)v30 < 0) {
            operator delete(v29[0]);
          }
          free(v17);
          if ((char)v34 < 0) {
            operator delete(__dst[0]);
          }
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36.__r_.__value_.__l.__data_);
          }
          goto LABEL_69;
        }
        if (v16) {
          free(v16);
        }
        if ((char)v34 < 0) {
          operator delete(__dst[0]);
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        break;
      }
      size_t v9 = (std::string *)(v10 + 1);
      int64_t v8 = v7 - (char *)v9;
    }
    while (v7 - (char *)v9 >= 2);
  }
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)this);
LABEL_69:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_22E8AF9E0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 177) < 0) {
    operator delete(*(void **)(v2 - 200));
  }
  free(v1);
  if (*(char *)(v2 - 137) < 0) {
    operator delete(*(void **)(v2 - 160));
  }
  if (*(char *)(v2 - 113) < 0) {
    operator delete(*(void **)(v2 - 136));
  }
  if (*(char *)(v2 - 89) < 0) {
    operator delete(*(void **)(v2 - 112));
  }
  if (*(char *)(v2 - 65) < 0) {
    operator delete(*(void **)(v2 - 88));
  }
  _Unwind_Resume(a1);
}

void *std::vector<void *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22E8AFADC(_Unwind_Exception *exception_object)
{
  std::string v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<void *>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<void *>::__throw_length_error[abi:ne180100]()
{
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2649E1230, MEMORY[0x263F8C068]);
}

void sub_22E8AFBB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100](void *__dst, uint64_t *a2, unint64_t a3)
{
  uint64_t v4 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v6 = a2[1];
    if (v6 < a3) {
      goto LABEL_15;
    }
    uint64_t v4 = (uint64_t *)*a2;
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a2 + 23);
    if (v6 < a3) {
LABEL_15:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  size_t v7 = v6 - a3;
  if (v6 - a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    int64_t v8 = operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = v10 | 0x8000000000000000;
    *__dst = v8;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v7;
    int64_t v8 = __dst;
    if (v6 == a3) {
      goto LABEL_14;
    }
  }
  memmove(v8, (char *)v4 + a3, v7);
LABEL_14:
  *((unsigned char *)v8 + v7) = 0;
  return __dst;
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x230FA80D0);
  }
}

void dmlc::ParamFieldInfo::~ParamFieldInfo(void **this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::~__func()
{
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

void *std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E2448D8;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E248A88;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E249750;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E24AA70;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E24AC68;
  return result;
}

void std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::operator()()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_22E8AFE8C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10E1C407B1BEDF6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

{
}

{
}

{
}

{
}

void xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::~RegLossObj(void *a1)
{
  *a1 = &unk_26E244958;
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

{
  *a1 = &unk_26E244958;
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

void xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::LoadConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "reg_loss_param");
  uint64_t v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::RegLossParam>(&v7, *v4, (unsigned char *)(a1 + 24));
  int64_t v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E8B003C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::SaveConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "reg:squarederror");
  char v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)int64_t v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=();
}

void sub_22E8B01DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29)
{
}

void xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::obj::RegLossParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::RegLossParam *)v2, (unsigned char *)(a1 + 24), a2);
  std::string v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  unint64_t v9 = ((*a2)[1] - **a2) >> 2;
  v38.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v9, &v38);
  uint64_t v10 = *(float ***)(a1 + 16);
  int v11 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  uint64_t v12 = *v10;
  **uint64_t v10 = 1.0;
  uint64_t v13 = **(void **)(a3 + 72);
  uint64_t v14 = *(void *)(*(void *)(a3 + 72) + 8);
  float v15 = 0.0;
  if (v14 == v13) {
    float v15 = 1.0;
  }
  v12[1] = *(float *)(a1 + 28);
  void v12[2] = v15;
  if (v9 <= 1) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = v9;
  }
  if (v11 < 0) {
    unint64_t v16 = 1;
  }
  unint64_t v17 = v9 / v16;
  if (v9 % v16) {
    ++v17;
  }
  unint64_t v18 = *(void *)(a3 + 40);
  if (v18 <= 1) {
    unint64_t v18 = 1;
  }
  if (v11 < 0)
  {
    v38.__ptr_ = 0;
    v39.__m_.__sig = 850045863;
    memset(v39.__m_.__opaque, 0, sizeof(v39.__m_.__opaque));
    uint64_t v21 = v10[1];
    uint64_t v22 = *(void *)*a5;
    if (!v22 && *(void *)(*a5 + 8)
      || (uint64_t v23 = **a2) == 0 && (*a2)[1]
      || (unsigned int v24 = *(uint64_t **)(a3 + 24), (v25 = *v24) == 0) && v24[1]
      || !v13 && v14
      || (unint64_t)((char *)v21 - (char *)v12) < 5
      || (char *)v21 - (char *)v12 == 8)
    {
      std::terminate();
    }
    for (uint64_t i = 0; i != v16; ++i)
    {
      unint64_t v27 = i * v17;
      unint64_t v28 = i * v17 + v17;
      if (v28 >= v9) {
        unint64_t v28 = v9;
      }
      if (v27 < v28)
      {
        float v29 = v12[1];
        float v30 = v12[2];
        do
        {
          float v31 = 1.0;
          if (v30 == 0.0) {
            float v31 = *(float *)(v13 + 4 * (v27 / v18));
          }
          float v32 = *(float *)(v25 + 4 * v27);
          if (v32 == 1.0) {
            float v33 = v29;
          }
          else {
            float v33 = 1.0;
          }
          float v34 = v31 * v33;
          std::string v35 = (float *)(v22 + 8 * v27);
          *std::string v35 = (float)(*(float *)(v23 + 4 * v27) - v32) * v34;
          v35[1] = v34;
          ++v27;
        }
        while (v27 != v28);
      }
    }
    dmlc::OMPException::Rethrow(&v38);
    std::mutex::~mutex(&v39);
    std::exception_ptr::~exception_ptr(&v38);
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    char v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v38);
  }
  if (***(float ***)(a1 + 16) == 0.0)
  {
    std::string v36 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
    dmlc::LogMessageFatal::Entry::Init(v36, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
    unsigned int v37 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)&unk_22EA3D4EA, 0);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v38);
  }
}

void sub_22E8B0554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::DefaultEvalMetric()
{
  return "rmse";
}

void xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::PredTransform(uint64_t a1, uint64_t **a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a2;
  uint64_t v2 = (*a2)[1];
  v5.__ptr_ = 0;
  v6.__m_.__sig = 850045863;
  memset(v6.__m_.__opaque, 0, sizeof(v6.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v2 == 0;
    }
    if (!v4 || (unint64_t)(v2 - v3) < 4) {
      std::terminate();
    }
  }
  dmlc::OMPException::Rethrow(&v5);
  std::mutex::~mutex(&v6);
  std::exception_ptr::~exception_ptr(&v5);
}

void sub_22E8B066C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::ObjFunction::EvalTransform(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::Task()
{
  return 256;
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::Targets(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 40) <= 1uLL) {
    return 1;
  }
  else {
    return *(void *)(a2 + 40);
  }
}

uint64_t xgboost::ObjFunction::Targets(xgboost::ObjFunction *this, const xgboost::MetaInfo *a2)
{
  if (*((void *)a2 + 5) >= 2uLL)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/objective.h");
    uint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"multioutput is not supported by current objective function", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v5);
  }
  return 1;
}

void sub_22E8B073C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::FromJson<xgboost::obj::RegLossParam>(std::vector<std::pair<std::string, std::string>> *a1, _DWORD *a2, unsigned char *a3)
{
  char v5 = (xgboost::obj::RegLossParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(a2);
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v13 = (uint64_t *)v14;
  std::mutex v6 = (void *)*((void *)v5 + 2);
  uint64_t v7 = (void *)((char *)v5 + 24);
  if (v6 != (void *)((char *)v5 + 24))
  {
    do
    {
      int64_t v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v6[7]);
      float v15 = (long long *)(v6 + 4);
      unint64_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      char v5 = (xgboost::obj::RegLossParam *)std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      uint64_t v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          std::mutex v6 = v11;
        }
        while (!v12);
      }
      std::mutex v6 = v11;
    }
    while (v11 != v7);
  }
  if (*a3)
  {
    a1->__begin_ = 0;
    a1->__end_ = 0;
    a1->__end_cap_.__value_ = 0;
    xgboost::obj::RegLossParam::__MANAGER__(v5);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_26AD70FC0, (uint64_t)a3, v13, v14, 0, a1, 0);
  }
  else
  {
    a1->__begin_ = 0;
    a1->__end_ = 0;
    a1->__end_cap_.__value_ = 0;
    xgboost::obj::RegLossParam::__MANAGER__(v5);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_26AD70FC0, (uint64_t)a3, v13, v14, a1, 0);
    *a3 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_22E8B08B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  char v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(_DWORD *a1)
{
  if (a1[3] == 3)
  {
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    BOOL v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
    xgboost::Value::TypeStr((xgboost::Value *)a1, &v20);
    char v5 = std::string::insert(&v20, 0, "Invalid cast, from ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v21, " to ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v15[1] = 0x300000000;
    v17[0] = 0;
    v17[1] = 0;
    v15[0] = &unk_26E24E128;
    unint64_t v16 = v17;
    xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
    if ((v19 & 0x80u) == 0) {
      unint64_t v9 = __p;
    }
    else {
      unint64_t v9 = (void **)__p[0];
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v10 = v19;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    int v11 = std::string::append(&v22, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v24 = v11->__r_.__value_.__r.__words[2];
    long long v23 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v24 >= 0) {
      uint64_t v13 = &v23;
    }
    else {
      uint64_t v13 = (long long *)v23;
    }
    if (v24 >= 0) {
      uint64_t v14 = HIBYTE(v24);
    }
    else {
      uint64_t v14 = *((void *)&v23 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)v23);
    }
    if ((char)v19 < 0) {
      operator delete(__p[0]);
    }
    v15[0] = &unk_26E24E128;
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v16, v17[0]);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v25);
  }
}

void sub_22E8B0B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v32, a13);
  if (*(char *)(v33 - 89) < 0) {
    operator delete(*(void **)(v33 - 112));
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v33 - 49));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,xgboost::Json>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,xgboost::Json>,0>(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 24);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(xgboost::Value *a1)
{
  if (*((_DWORD *)a1 + 3))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    uint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    xgboost::Value::TypeStr(a1, &v21);
    BOOL v4 = std::string::insert(&v21, 0, "Invalid cast, from ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    long long v6 = std::string::append(&v22, " to ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v15[0] = &unk_26E24E210;
    v15[1] = 0;
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
    if ((v20 & 0x80u) == 0) {
      long long v8 = __p;
    }
    else {
      long long v8 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v9 = v20;
    }
    else {
      std::string::size_type v9 = (std::string::size_type)__p[1];
    }
    std::string::size_type v10 = std::string::append(&v23, (const std::string::value_type *)v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    int64_t v25 = v10->__r_.__value_.__r.__words[2];
    long long v24 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v25 >= 0) {
      long long v12 = &v24;
    }
    else {
      long long v12 = (long long *)v24;
    }
    if (v25 >= 0) {
      uint64_t v13 = HIBYTE(v25);
    }
    else {
      uint64_t v13 = *((void *)&v24 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v12, v13);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
    v15[0] = &unk_26E24E210;
    if (SHIBYTE(v18) < 0) {
      operator delete(v16);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
  }
  else
  {
  }
}

void sub_22E8B0F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (*(char *)(v35 - 73) < 0) {
    operator delete(*(void **)(v35 - 96));
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v35 - 33));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  long long v7 = (std::string *)(v6 + 4);
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_22E8B1130(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5, std::vector<std::pair<std::string, std::string>> *a6, uint64_t **a7)
{
  if (a3 != a4)
  {
    long long v9 = a3;
    uint64_t v10 = a1 + 48;
    uint64_t v11 = a1 + 56;
    while (1)
    {
      v47[0] = 0;
      long long v12 = (void **)(v9 + 4);
      uint64_t v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(v10, (const void **)v9 + 4);
      if (v11 == v13) {
        break;
      }
      uint64_t v14 = *(void *)(v13 + 56);
      v47[0] = v14;
      if (!v14) {
        goto LABEL_8;
      }
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v14 + 24))(v14, a2, v9 + 7);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v47[0] + 32))(v47[0], a2);
      if (a7) {
        std::__tree<dmlc::parameter::FieldAccessEntry *>::__emplace_unique_key_args<dmlc::parameter::FieldAccessEntry *,dmlc::parameter::FieldAccessEntry * const&>(a7, (unint64_t *)v47, v47);
      }
LABEL_47:
      float v30 = (void *)v9[1];
      if (v30)
      {
        do
        {
          float v31 = v30;
          float v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          float v31 = (void *)v9[2];
          BOOL v32 = *v31 == (void)v9;
          long long v9 = v31;
        }
        while (!v32);
      }
      long long v9 = v31;
      if (v31 == a4) {
        return;
      }
    }
    v47[0] = 0;
LABEL_8:
    if (a6)
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(&v44, (long long *)v9 + 2);
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a6, (long long *)&v44);
      if (v46 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
    }
    else if (a5)
    {
      if (a5 != 2) {
        goto LABEL_54;
      }
      uint64_t v15 = *((unsigned __int8 *)v9 + 55);
      if (*((char *)v9 + 55) < 0)
      {
        uint64_t v17 = v9[5];
        if (v17 <= 4) {
          goto LABEL_54;
        }
        uint64_t v18 = (char *)*v12;
        unint64_t v16 = (char *)*v12 + v17;
      }
      else
      {
        if (v15 < 5) {
          goto LABEL_54;
        }
        unint64_t v16 = (char *)v12 + v15;
        uint64_t v17 = *((unsigned __int8 *)v9 + 55);
        uint64_t v18 = (char *)(v9 + 4);
      }
      unsigned __int8 v19 = v18;
      while (1)
      {
        unsigned __int8 v20 = (char *)memchr(v19, 95, v17 - 1);
        if (!v20) {
          goto LABEL_54;
        }
        if (*(_WORD *)v20 == 24415) {
          break;
        }
        unsigned __int8 v19 = v20 + 1;
        uint64_t v17 = v16 - v19;
        if (v16 - v19 < 2) {
          goto LABEL_54;
        }
      }
      if (v20 == v16 || v20 != v18) {
        goto LABEL_54;
      }
      if ((v15 & 0x80) != 0)
      {
        std::string v21 = (unsigned char *)v9[4];
        uint64_t v22 = v9[5];
      }
      else
      {
        std::string v21 = v9 + 4;
        uint64_t v22 = v15;
      }
      std::string v23 = &v21[v22];
      if (v22)
      {
        long long v24 = v21;
        int64_t v25 = &v21[v22];
        do
        {
          if (*v24 == 95)
          {
            uint64_t v26 = 1u;
            while (v26 != 2)
            {
              if (&v24[v26] == v23) {
                goto LABEL_42;
              }
              int v27 = v24[v26];
              int v28 = asc_22EA3D6E7[v26++];
              if (v27 != v28) {
                goto LABEL_33;
              }
            }
            int64_t v25 = v24;
          }
LABEL_33:
          ++v24;
        }
        while (v24 != v23);
      }
      else
      {
        int64_t v25 = v21;
      }
LABEL_42:
      uint64_t v29 = v25 - v21;
      if (v25 == v23) {
        uint64_t v29 = -1;
      }
      if ((v15 & 0x80) != 0) {
        uint64_t v15 = v9[5];
      }
      if (v29 != v15 - 2)
      {
LABEL_54:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v44);
        uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Cannot find argument '", 22);
        int v34 = *((char *)v9 + 55);
        if (v34 >= 0) {
          uint64_t v35 = (uint64_t)(v9 + 4);
        }
        else {
          uint64_t v35 = v9[4];
        }
        if (v34 >= 0) {
          uint64_t v36 = *((unsigned __int8 *)v9 + 55);
        }
        else {
          uint64_t v36 = v9[5];
        }
        unsigned int v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"', Possible Arguments:\n", 23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"----------------\n", 17);
        dmlc::parameter::ParamManager::PrintDocString(a1, &v44);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v43);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
      }
    }
    goto LABEL_47;
  }
}

void sub_22E8B159C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  uint64_t v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14) {
      uint64_t v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)p_end_cap, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    long long v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_22E8B174C(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void dmlc::parameter::ParamManager::PrintDocString(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) != v2)
  {
    unint64_t v5 = 0;
    do
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v2 + 8 * v5) + 48))(v19);
      if ((v20 & 0x80u) == 0) {
        long long v6 = v19;
      }
      else {
        long long v6 = (void **)v19[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v7 = v20;
      }
      else {
        uint64_t v7 = (uint64_t)v19[1];
      }
      long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v6, v7);
      long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" : ", 3);
      if ((v24 & 0x80u) == 0) {
        uint64_t v10 = v23;
      }
      else {
        uint64_t v10 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v11 = v24;
      }
      else {
        uint64_t v11 = (uint64_t)v23[1];
      }
      unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      char v28 = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v28, 1);
      uint64_t v13 = v27;
      unsigned __int8 v14 = v27;
      if ((v27 & 0x80u) != 0) {
        uint64_t v13 = v26;
      }
      if (v13)
      {
        uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
        if ((v27 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v27 & 0x80u) == 0) {
          uint64_t v17 = v27;
        }
        else {
          uint64_t v17 = v26;
        }
        long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v17);
        char v28 = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v28, 1);
        unsigned __int8 v14 = v27;
      }
      if ((v14 & 0x80) != 0) {
        operator delete(__p);
      }
      if ((char)v24 < 0) {
        operator delete(v23[0]);
      }
      if (v22 < 0) {
        operator delete(v21);
      }
      if ((char)v20 < 0) {
        operator delete(v19[0]);
      }
      ++v5;
      uint64_t v2 = *(void *)(a1 + 24);
    }
    while (v5 < (*(void *)(a1 + 32) - v2) >> 3);
  }
}

void sub_22E8B194C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::ParamFieldInfo::~ParamFieldInfo((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    long long v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      long long v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

uint64_t *std::__tree<dmlc::parameter::FieldAccessEntry *>::__emplace_unique_key_args<dmlc::parameter::FieldAccessEntry *,dmlc::parameter::FieldAccessEntry * const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        long long v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    void v10[4] = *a3;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_22E8B1E00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t a1, uint64_t a2, void *a3, void *a4, std::vector<std::pair<std::string, std::string>> *a5, int a6)
{
  v26[0] = 0;
  v26[1] = 0;
  int64_t v25 = (uint64_t *)v26;
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, a2, a3, a4, a6, a5, &v25);
  long long v8 = *(void **)(a1 + 48);
  uint64_t v9 = (void *)(a1 + 56);
  if (v8 != (void *)(a1 + 56))
  {
    do
    {
      long long v10 = v26[0];
      unint64_t v11 = v8[7];
      if (!v26[0]) {
        goto LABEL_11;
      }
      unint64_t v12 = v26;
      do
      {
        uint64_t v13 = v10;
        char v14 = v12;
        unint64_t v15 = v10[4];
        long long v16 = v10 + 1;
        if (v15 >= v11)
        {
          long long v16 = v13;
          unint64_t v12 = (void **)v13;
        }
        long long v10 = (void *)*v16;
      }
      while (v10);
      if (v12 == v26) {
        goto LABEL_11;
      }
      if (v15 < v11) {
        uint64_t v13 = v14;
      }
      if (v11 < v13[4]) {
LABEL_11:
      }
        (*(void (**)(unint64_t, uint64_t))(*(void *)v11 + 16))(v11, a2);
      uint64_t v17 = (void *)v8[1];
      if (v17)
      {
        do
        {
          long long v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          long long v18 = (void *)v8[2];
          BOOL v19 = *v18 == (void)v8;
          long long v8 = v18;
        }
        while (!v19);
      }
      long long v8 = v18;
    }
    while (v18 != v9);
    long long v8 = *(void **)(a1 + 48);
  }
  if (v8 != v9)
  {
    do
    {
      unsigned __int8 v20 = v26[0];
      for (i = v8[7]; v20; unsigned __int8 v20 = (void *)*v20)
      {
        unint64_t v22 = v20[4];
        if (i >= v22)
        {
          if (v22 >= i) {
            goto LABEL_26;
          }
          ++v20;
        }
      }
      (*(void (**)(unint64_t, uint64_t))(*(void *)i + 16))(i, a2);
LABEL_26:
      std::string v23 = (void *)v8[1];
      if (v23)
      {
        do
        {
          unsigned __int8 v24 = v23;
          std::string v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          unsigned __int8 v24 = (void *)v8[2];
          BOOL v19 = *v24 == (void)v8;
          long long v8 = v24;
        }
        while (!v19);
      }
      long long v8 = v24;
    }
    while (v24 != v9);
  }
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy((uint64_t)&v25, v26[0]);
}

void sub_22E8B1FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(a1, *a2);
    std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void xgboost::Json::operator=()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void xgboost::ToJson<xgboost::obj::RegLossParam>(xgboost::obj::RegLossParam *a1)
{
  *((void *)a1 + 1) = 0x300000000;
  *(void *)a1 = &unk_26E24E128;
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 2) = (char *)a1 + 24;
  uint64_t v1 = (uint64_t)a1 + 16;
  *((void *)a1 + 4) = 0;
  xgboost::obj::RegLossParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&xmmword_26AD70FC0, &v3);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v4, (const void **)&v3.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v3.__end_->first.__r_.__value_.__l.__data_);
  long long v6 = &v3;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  uint64_t v2 = v4;
  if ((void **)v4 != &v5)
  {
    xgboost::JsonString::JsonString(&v3, (long long *)(v4 + 56));
    long long v6 = (std::vector<std::pair<std::string, std::string>> *)(v2 + 32);
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v1, (const void **)(v2 + 32), (uint64_t)&std::piecewise_construct, (long long **)&v6);
    xgboost::Json::operator=();
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v4, v5);
}

void sub_22E8B2398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(void *)uint64_t v21 = v22;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v23, *(void **)(v21 + 24));
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManager::GetDict(dmlc::parameter::ParamManager *this@<X0>, std::vector<std::pair<std::string, std::string>> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<std::pair<std::string, std::string>> v3 = (void *)*((void *)this + 6);
  uint64_t v4 = (char *)this + 56;
  if (v3 != (void *)((char *)this + 56))
  {
    do
    {
      (*(void (**)(void **__return_ptr))(*(void *)v3[7] + 40))(v9);
      if (*((char *)v3 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)v3[4], v3[5]);
      }
      else {
        std::string v11 = *(std::string *)(v3 + 4);
      }
      long long __p = *(_OWORD *)v9;
      uint64_t v13 = v10;
      v9[1] = 0;
      uint64_t v10 = 0;
      v9[0] = 0;
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a2, (long long *)&v11);
      if (SHIBYTE(v13) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v10) < 0) {
        operator delete(v9[0]);
      }
      long long v6 = (char *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          long long v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (char *)v3[2];
          BOOL v8 = *(void *)v7 == (void)v3;
          std::vector<std::pair<std::string, std::string>> v3 = v7;
        }
        while (!v8);
      }
      std::vector<std::pair<std::string, std::string>> v3 = v7;
    }
    while (v7 != v4);
  }
}

void sub_22E8B2640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string,std::string> &>((uint64_t **)a1, v4, v6, (long long *)v6);
      v6 += 6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22E8B26EC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string,std::string> &>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  long long v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string,std::string> &>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

const void **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      char v14 = (const void **)a2[1];
      do
      {
        unint64_t v15 = v14;
        char v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      long long v18 = (const void **)a2;
      do
      {
        unint64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        long long v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    unint64_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  uint64_t v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      unint64_t v12 = v11;
      uint64_t v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    long long v16 = a2;
    do
    {
      unint64_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      long long v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (const void **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string,std::string> &>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  float result = std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string,std::string,0>((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_22E8B299C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string,std::string,0>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_22E8B2A30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *xgboost::JsonString::JsonString(void *a1, long long *a2)
{
  *a1 = &unk_26E24E210;
  a1[1] = 0;
  std::vector<std::pair<std::string, std::string>> v3 = (std::string *)(a1 + 2);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = *std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>(a1, &v9, a2);
  if (!v6) {
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, a4, (uint64_t)v8);
  }
  return v6;
}

void std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::pair<std::string const,xgboost::Json>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
}

void sub_22E8B2BB4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::pair<std::string const,xgboost::Json>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v2 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v2;
  }
  operator new();
}

void sub_22E8B2C6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,xgboost::Json>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void xgboost::XGBoostParameter<xgboost::obj::RegLossParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::obj::RegLossParam *a1, unsigned char *a2, uint64_t *a3)
{
  if (*a2)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    xgboost::obj::RegLossParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_26AD70FC0, (uint64_t)a2, *a3, a3[1], 0, (uint64_t *)a1, 0);
  }
  else
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    xgboost::obj::RegLossParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_26AD70FC0, (uint64_t)a2, *a3, a3[1], (uint64_t *)a1, 0);
    *a2 = 1;
  }
}

void sub_22E8B2D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(void *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, uint64_t **a7)
{
  uint64_t v34 = (uint64_t)result;
  if (a3 != a4)
  {
    uint64_t v9 = a3;
    uint64_t v11 = (uint64_t)(result + 6);
    unint64_t v12 = result + 7;
    while (1)
    {
      v39[0] = 0;
      float result = (void *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(v11, (const void **)v9);
      if (v12 == result) {
        break;
      }
      float result = (void *)result[7];
      v39[0] = (uint64_t)result;
      if (!result) {
        goto LABEL_8;
      }
      (*(void (**)(void *, uint64_t, uint64_t))(*result + 24))(result, a2, v9 + 24);
      float result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v39[0] + 32))(v39[0], a2);
      if (a7) {
        float result = std::__tree<dmlc::parameter::FieldAccessEntry *>::__emplace_unique_key_args<dmlc::parameter::FieldAccessEntry *,dmlc::parameter::FieldAccessEntry * const&>(a7, (unint64_t *)v39, v39);
      }
LABEL_47:
      v9 += 48;
      if (v9 == a4) {
        return result;
      }
    }
    v39[0] = 0;
LABEL_8:
    if (a6)
    {
      unint64_t v13 = a6[1];
      if (v13 >= a6[2])
      {
        float result = (void *)std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>(a6, (long long *)v9);
      }
      else
      {
        std::pair<std::string,std::string>::pair[abi:ne180100]((std::string *)a6[1], (long long *)v9);
        float result = (void *)(v13 + 48);
        a6[1] = v13 + 48;
      }
      a6[1] = (uint64_t)result;
    }
    else if (a5)
    {
      if (a5 != 2) {
        goto LABEL_49;
      }
      uint64_t v14 = *(unsigned __int8 *)(v9 + 23);
      if (*(char *)(v9 + 23) < 0)
      {
        uint64_t v16 = *(void *)(v9 + 8);
        if (v16 <= 4) {
          goto LABEL_49;
        }
        BOOL v17 = *(void **)v9;
        unint64_t v15 = (char *)(*(void *)v9 + v16);
      }
      else
      {
        if (v14 < 5) {
          goto LABEL_49;
        }
        unint64_t v15 = (char *)(v9 + v14);
        uint64_t v16 = *(unsigned __int8 *)(v9 + 23);
        BOOL v17 = (void *)v9;
      }
      long long v18 = v17;
      while (1)
      {
        float result = memchr(v18, 95, v16 - 1);
        if (!result) {
          goto LABEL_49;
        }
        if (*(_WORD *)result == 24415) {
          break;
        }
        long long v18 = (char *)result + 1;
        uint64_t v16 = v15 - (unsigned char *)v18;
        if (v15 - (unsigned char *)v18 < 2) {
          goto LABEL_49;
        }
      }
      if (result == (void *)v15 || result != v17) {
        goto LABEL_49;
      }
      if ((v14 & 0x80) != 0)
      {
        BOOL v19 = *(char **)v9;
        uint64_t v20 = *(void *)(v9 + 8);
      }
      else
      {
        BOOL v19 = (char *)v9;
        uint64_t v20 = v14;
      }
      uint64_t v21 = &v19[v20];
      if (v20)
      {
        uint64_t v22 = v19;
        uint64_t v23 = &v19[v20];
        do
        {
          if (*v22 == 95)
          {
            uint64_t v24 = 1u;
            while (v24 != 2)
            {
              if (&v22[v24] == v21) {
                goto LABEL_42;
              }
              int v25 = v22[v24];
              int v26 = asc_22EA3D6E7[v24++];
              if (v25 != v26) {
                goto LABEL_33;
              }
            }
            uint64_t v23 = v22;
          }
LABEL_33:
          ++v22;
        }
        while (v22 != v21);
      }
      else
      {
        uint64_t v23 = v19;
      }
LABEL_42:
      uint64_t v27 = v23 - v19;
      if (v23 == v21) {
        uint64_t v27 = -1;
      }
      if ((v14 & 0x80) != 0) {
        uint64_t v14 = *(void *)(v9 + 8);
      }
      if (v27 != v14 - 2)
      {
LABEL_49:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v38);
        char v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Cannot find argument '", 22);
        int v29 = *(char *)(v9 + 23);
        if (v29 >= 0) {
          float v30 = (const void *)v9;
        }
        else {
          float v30 = *(const void **)v9;
        }
        if (v29 >= 0) {
          uint64_t v31 = *(unsigned __int8 *)(v9 + 23);
        }
        else {
          uint64_t v31 = *(void *)(v9 + 8);
        }
        BOOL v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"', Possible Arguments:\n", 23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"----------------\n", 17);
        dmlc::parameter::ParamManager::PrintDocString(v34, v38);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v37);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
      }
    }
    goto LABEL_47;
  }
  return result;
}

void sub_22E8B310C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

uint64_t std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_cap_.__value_ = &v10[v9];
  std::pair<std::string,std::string>::pair[abi:ne180100](&__v.__begin_->first, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer((std::vector<std::pair<std::string, std::string>> *)a1, &__v);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  return v11;
}

void sub_22E8B3254(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  unint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_22E8B32E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6)
{
  v26[0] = 0;
  v26[1] = 0;
  int v25 = (uint64_t *)v26;
  dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(a1, a2, a3, a4, a6, a5, &v25);
  unint64_t v8 = (void *)a1[6];
  unint64_t v9 = a1 + 7;
  if (v8 != a1 + 7)
  {
    do
    {
      uint64_t v10 = v26[0];
      unint64_t v11 = v8[7];
      if (!v26[0]) {
        goto LABEL_11;
      }
      unint64_t v12 = v26;
      do
      {
        unint64_t v13 = v10;
        uint64_t v14 = v12;
        unint64_t v15 = v10[4];
        uint64_t v16 = v10 + 1;
        if (v15 >= v11)
        {
          uint64_t v16 = v13;
          unint64_t v12 = (void **)v13;
        }
        uint64_t v10 = (void *)*v16;
      }
      while (v10);
      if (v12 == v26) {
        goto LABEL_11;
      }
      if (v15 < v11) {
        unint64_t v13 = v14;
      }
      if (v11 < v13[4]) {
LABEL_11:
      }
        (*(void (**)(unint64_t, uint64_t))(*(void *)v11 + 16))(v11, a2);
      BOOL v17 = (void *)v8[1];
      if (v17)
      {
        do
        {
          long long v18 = v17;
          BOOL v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          long long v18 = (void *)v8[2];
          BOOL v19 = *v18 == (void)v8;
          unint64_t v8 = v18;
        }
        while (!v19);
      }
      unint64_t v8 = v18;
    }
    while (v18 != v9);
    unint64_t v8 = (void *)a1[6];
  }
  if (v8 != v9)
  {
    do
    {
      int v20 = v26[0];
      for (i = v8[7]; v20; int v20 = (void *)*v20)
      {
        unint64_t v22 = v20[4];
        if (i >= v22)
        {
          if (v22 >= i) {
            goto LABEL_26;
          }
          ++v20;
        }
      }
      (*(void (**)(unint64_t, uint64_t))(*(void *)i + 16))(i, a2);
LABEL_26:
      uint64_t v23 = (void *)v8[1];
      if (v23)
      {
        do
        {
          uint64_t v24 = v23;
          uint64_t v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (void *)v8[2];
          BOOL v19 = *v24 == (void)v8;
          unint64_t v8 = v24;
        }
        while (!v19);
      }
      unint64_t v8 = v24;
    }
    while (v24 != v9);
  }
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy((uint64_t)&v25, v26[0]);
}

void sub_22E8B34C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void *xgboost::obj::anonymous namespace'::CheckRegInputs(void *result, uint64_t a2)
{
  if (result[4] != *result) {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>();
  }
  if ((uint64_t)(*(void *)(result[3] + 8) - *(void *)result[3]) >> 2 != (uint64_t)(*(void *)(*(void *)a2 + 8)
                                                                                      - **(void **)a2) >> 2)
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  uint64_t v2 = *(void *)(result[9] + 8) - *(void *)result[9];
  if (v2)
  {
    if (v2 >> 2 != *result) {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>();
    }
  }
  return result;
}

void sub_22E8B3794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::LogCheckFormat<unsigned long,unsigned long long>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E8B3988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void dmlc::OMPException::Rethrow(std::exception_ptr *this)
{
  if (this->__ptr_)
  {
    std::exception_ptr::exception_ptr(&v2, this);
    v1.__ptr_ = &v2;
    std::rethrow_exception(v1);
    __break(1u);
  }
}

void sub_22E8B3A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void dmlc::LogCheckFormat<int,int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  std::exception_ptr v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E8B3BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void std::__function::__func<xgboost::obj::$_1,std::allocator<xgboost::obj::$_1>,xgboost::ObjFunction * ()(void)>::~__func()
{
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

void *std::__function::__func<xgboost::obj::$_1,std::allocator<xgboost::obj::$_1>,xgboost::ObjFunction * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E244A08;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E249858;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E24AD70;
  return result;
}

void std::__function::__func<xgboost::obj::$_1,std::allocator<xgboost::obj::$_1>,xgboost::ObjFunction * ()(void)>::operator()()
{
}

{
  operator new();
}

{
  operator new();
}

void sub_22E8B3CF0(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10E1C407B1BEDF6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_1,std::allocator<xgboost::obj::$_1>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::obj::$_1,std::allocator<xgboost::obj::$_1>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

{
}

{
}

void xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::~RegLossObj(void *a1)
{
  *a1 = &unk_26E244A78;
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

{
  *a1 = &unk_26E244A78;
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

void xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::LoadConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "reg_loss_param");
  long long v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::RegLossParam>(&v7, *v4, (unsigned char *)(a1 + 24));
  unint64_t v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E8B3EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::SaveConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "reg:squaredlogerror");
  char v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=();
}

void sub_22E8B4040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29)
{
}

void xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::obj::RegLossParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::RegLossParam *)v2, (unsigned char *)(a1 + 24), a2);
  uint64_t v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::GetGradient(uint64_t a1, uint64_t **a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  unint64_t v9 = ((*a2)[1] - **a2) >> 2;
  v51.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v9, &v51);
  uint64_t v10 = *(void *)(a1 + 16);
  int v11 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  unint64_t v12 = *(float **)v10;
  **(_DWORD **)uint64_t v10 = 1065353216;
  uint64_t v13 = (uint64_t *)a3[9];
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  float v16 = 0.0;
  if (v14 == *v13) {
    float v16 = 1.0;
  }
  v12[1] = *(float *)(a1 + 28);
  void v12[2] = v16;
  if (v9 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = v9;
  }
  if (v11 < 0) {
    unint64_t v18 = 1;
  }
  else {
    unint64_t v18 = v17;
  }
  if (v9 % v18) {
    uint64_t v19 = v9 / v18 + 1;
  }
  else {
    uint64_t v19 = v9 / v18;
  }
  if (a3[5] <= 1uLL) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = a3[5];
  }
  if (v11 < 0)
  {
    v51.__ptr_ = 0;
    v52.__m_.__sig = 850045863;
    memset(v52.__m_.__opaque, 0, sizeof(v52.__m_.__opaque));
    uint64_t v23 = *(void *)(v10 + 8);
    uint64_t v24 = *a5;
    uint64_t v25 = *(void *)*a5;
    if (!v25 && *(void *)(v24 + 8)
      || (int v26 = *a2, (v27 = **a2) == 0) && v26[1]
      || (v28 = (uint64_t *)a3[3], (uint64_t v29 = *v28) == 0) && v28[1]
      || !v15 && v14
      || (unint64_t)(v23 - (void)v12) < 5
      || v23 - (void)v12 == 8)
    {
      std::terminate();
    }
    uint64_t v48 = a1;
    uint64_t v30 = 0;
    uint64_t v49 = v19;
    unint64_t v50 = v18;
    do
    {
      unint64_t v31 = v30 * v19;
      unint64_t v32 = v9;
      if (v30 * v19 + v19 < v9) {
        unint64_t v9 = v30 * v19 + v19;
      }
      if (v31 < v9)
      {
        float v34 = v12[1];
        float v33 = v12[2];
        do
        {
          float v35 = 1.0;
          if (v33 == 0.0) {
            float v35 = *(float *)(v15 + 4 * (v31 / v20));
          }
          float v36 = *(float *)(v27 + 4 * v31);
          float v37 = *(float *)(v29 + 4 * v31);
          if (v37 == 1.0) {
            float v38 = v34;
          }
          else {
            float v38 = 1.0;
          }
          if (v37 <= -1.0) {
            float *v12 = 0.0;
          }
          float v39 = v35 * v38;
          float v40 = fmaxf(v36, -1.0);
          float v41 = log1pf(v40);
          float v42 = log1pf(v37);
          float v43 = v39 * (float)((float)(v41 - v42) / (float)(v40 + 1.0));
          float v44 = (float)((float)(v42 - v41) + 1.0) / ((float)(v40 + 1.0) * (float)(v40 + 1.0));
          v45 = (float *)(v25 + 8 * v31);
          float *v45 = v43;
          v45[1] = v39 * fmaxf(v44, 0.000001);
          ++v31;
        }
        while (v31 != v9);
      }
      ++v30;
      uint64_t v19 = v49;
      unint64_t v9 = v32;
    }
    while (v30 != v50);
    dmlc::OMPException::Rethrow(&v51);
    std::mutex::~mutex(&v52);
    std::exception_ptr::~exception_ptr(&v51);
    a1 = v48;
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    unint64_t v22 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v51);
  }
  if (***(float ***)(a1 + 16) == 0.0)
  {
    char v46 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
    dmlc::LogMessageFatal::Entry::Init(v46, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
    v47 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"label must be greater than -1 for rmsle so that log(label + 1) can be valid.", 76);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v51);
  }
}

void sub_22E8B4474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14)
{
}

const char *xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::DefaultEvalMetric()
{
  return "rmsle";
}

void xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::PredTransform(uint64_t a1, uint64_t **a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a2;
  uint64_t v2 = (*a2)[1];
  v5.__ptr_ = 0;
  v6.__m_.__sig = 850045863;
  memset(v6.__m_.__opaque, 0, sizeof(v6.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v2 == 0;
    }
    if (!v4 || (unint64_t)(v2 - v3) < 4) {
      std::terminate();
    }
  }
  dmlc::OMPException::Rethrow(&v5);
  std::mutex::~mutex(&v6);
  std::exception_ptr::~exception_ptr(&v5);
}

void sub_22E8B458C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::Task()
{
  return 0;
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::Targets(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 40) <= 1uLL) {
    return 1;
  }
  else {
    return *(void *)(a2 + 40);
  }
}

void std::__function::__func<xgboost::obj::$_2,std::allocator<xgboost::obj::$_2>,xgboost::ObjFunction * ()(void)>::~__func()
{
}

{
  JUMPOUT(0x230FA80D0);
}

void *std::__function::__func<xgboost::obj::$_2,std::allocator<xgboost::obj::$_2>,xgboost::ObjFunction * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E244B10;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E249960;
  return result;
}

void std::__function::__func<xgboost::obj::$_2,std::allocator<xgboost::obj::$_2>,xgboost::ObjFunction * ()(void)>::operator()()
{
}

{
  operator new();
}

void sub_22E8B4684(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10E1C407B1BEDF6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_2,std::allocator<xgboost::obj::$_2>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::obj::$_2,std::allocator<xgboost::obj::$_2>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

{
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::~RegLossObj(void *a1)
{
  *a1 = &unk_26E244B80;
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

{
  *a1 = &unk_26E244B80;
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::LoadConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "reg_loss_param");
  BOOL v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::RegLossParam>(&v7, *v4, (unsigned char *)(a1 + 24));
  unint64_t v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E8B4834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::SaveConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "reg:logistic");
  char v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=();
}

void sub_22E8B49D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29)
{
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::obj::RegLossParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::RegLossParam *)v2, (unsigned char *)(a1 + 24), a2);
  uint64_t v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::GetGradient(uint64_t a1, uint64_t **a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  unint64_t v9 = ((*a2)[1] - **a2) >> 2;
  v49.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v9, &v49);
  uint64_t v10 = *(void *)(a1 + 16);
  int v11 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  unint64_t v12 = *(float **)v10;
  **(_DWORD **)uint64_t v10 = 1065353216;
  uint64_t v13 = (uint64_t *)a3[9];
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  float v16 = 0.0;
  if (v14 == *v13) {
    float v16 = 1.0;
  }
  v12[1] = *(float *)(a1 + 28);
  void v12[2] = v16;
  if (v9 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = v9;
  }
  if (v11 < 0) {
    unint64_t v18 = 1;
  }
  else {
    unint64_t v18 = v17;
  }
  if (v9 % v18) {
    uint64_t v19 = v9 / v18 + 1;
  }
  else {
    uint64_t v19 = v9 / v18;
  }
  if (a3[5] <= 1uLL) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = a3[5];
  }
  if (v11 < 0)
  {
    v49.__ptr_ = 0;
    v50.__m_.__sig = 850045863;
    memset(v50.__m_.__opaque, 0, sizeof(v50.__m_.__opaque));
    uint64_t v23 = *(void *)(v10 + 8);
    uint64_t v24 = *a5;
    uint64_t v25 = *(void *)*a5;
    if (!v25 && *(void *)(v24 + 8)
      || (int v26 = *a2, (v27 = **a2) == 0) && v26[1]
      || (v28 = (uint64_t *)a3[3], (uint64_t v29 = *v28) == 0) && v28[1]
      || !v15 && v14
      || (unint64_t)(v23 - (void)v12) < 5
      || v23 - (void)v12 == 8)
    {
      std::terminate();
    }
    uint64_t v46 = a1;
    uint64_t v30 = 0;
    uint64_t v47 = v19;
    unint64_t v48 = v18;
    do
    {
      unint64_t v31 = v30 * v19;
      unint64_t v32 = v9;
      if (v30 * v19 + v19 < v9) {
        unint64_t v9 = v30 * v19 + v19;
      }
      if (v31 < v9)
      {
        float v33 = v12[1];
        float v34 = v12[2];
        do
        {
          float v35 = *(float *)(v27 + 4 * v31);
          if (v35 >= -88.7) {
            float v36 = -v35;
          }
          else {
            float v36 = 88.7;
          }
          float v37 = expf(v36);
          float v38 = 1.0;
          if (v34 == 0.0) {
            float v38 = *(float *)(v15 + 4 * (v31 / v20));
          }
          float v39 = *(float *)(v29 + 4 * v31);
          if (v39 == 1.0) {
            float v40 = v33;
          }
          else {
            float v40 = 1.0;
          }
          if (v39 < 0.0 || v39 > 1.0) {
            float *v12 = 0.0;
          }
          float v42 = 1.0 / (float)((float)(v37 + 1.0) + 1.0e-16);
          float v43 = (float *)(v25 + 8 * v31);
          *float v43 = (float)(v42 - v39) * (float)(v38 * v40);
          v43[1] = fmaxf(v42 * (float)(1.0 - v42), 1.0e-16) * (float)(v38 * v40);
          ++v31;
        }
        while (v31 != v9);
      }
      ++v30;
      uint64_t v19 = v47;
      unint64_t v9 = v32;
    }
    while (v30 != v48);
    dmlc::OMPException::Rethrow(&v49);
    std::mutex::~mutex(&v50);
    std::exception_ptr::~exception_ptr(&v49);
    a1 = v46;
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    unint64_t v22 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
  }
  if (***(float ***)(a1 + 16) == 0.0)
  {
    float v44 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    dmlc::LogMessageFatal::Entry::Init(v44, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
    v45 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"label must be in [0,1] for logistic regression", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
  }
}

void sub_22E8B4DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, std::exception_ptr a14)
{
}

const char *xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::DefaultEvalMetric()
{
  return "rmse";
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::PredTransform(uint64_t a1, float ***a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a2;
  uint64_t v2 = (*a2)[1];
  v7.__ptr_ = 0;
  v8.__m_.__sig = 850045863;
  memset(v8.__m_.__opaque, 0, sizeof(v8.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v2 == 0;
    }
    if (v4)
    {
      uint64_t v5 = v2 - v3;
      while (v5)
      {
        if (*v3 >= -88.7) {
          float v6 = -*v3;
        }
        else {
          float v6 = 88.7;
        }
        *v3++ = 1.0 / (float)((float)(expf(v6) + 1.0) + 1.0e-16);
        if (!--v5) {
          goto LABEL_13;
        }
      }
    }
    std::terminate();
  }
LABEL_13:
  dmlc::OMPException::Rethrow(&v7);
  std::mutex::~mutex(&v8);
  std::exception_ptr::~exception_ptr(&v7);
}

void sub_22E8B4F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::Task()
{
  return 0;
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::Targets(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 40) <= 1uLL) {
    return 1;
  }
  else {
    return *(void *)(a2 + 40);
  }
}

float xgboost::obj::LogisticRegression::ProbToMargin(xgboost::obj::LogisticRegression *this, float a2)
{
  if (a2 <= 0.0 || a2 >= 1.0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/./regression_loss.h");
    float v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
    std::exception_ptr v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: base_score > 0.0f && base_score < 1.0f", 52);
    std::mutex v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"base_score must be in (0,1) for logistic loss, got: ", 52);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v9);
  }
  return -logf((float)(1.0 / a2) + -1.0);
}

void sub_22E8B504C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::__function::__func<xgboost::obj::$_3,std::allocator<xgboost::obj::$_3>,xgboost::ObjFunction * ()(void)>::~__func()
{
}

void *std::__function::__func<xgboost::obj::$_3,std::allocator<xgboost::obj::$_3>,xgboost::ObjFunction * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E244C18;
  return result;
}

void std::__function::__func<xgboost::obj::$_3,std::allocator<xgboost::obj::$_3>,xgboost::ObjFunction * ()(void)>::operator()()
{
}

void sub_22E8B5124(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10E1C407B1BEDF6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_3,std::allocator<xgboost::obj::$_3>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::obj::$_3,std::allocator<xgboost::obj::$_3>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::~RegLossObj(void *a1)
{
  *a1 = &unk_26E244C88;
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

{
  *a1 = &unk_26E244C88;
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::LoadConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "reg_loss_param");
  BOOL v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::RegLossParam>(&v7, *v4, (unsigned char *)(a1 + 24));
  std::mutex v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E8B52D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::SaveConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "binary:logistic");
  char v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)std::mutex v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=();
}

void sub_22E8B5474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29)
{
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::obj::RegLossParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::RegLossParam *)v2, (unsigned char *)(a1 + 24), a2);
  uint64_t v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::GetGradient(uint64_t a1, uint64_t **a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  unint64_t v9 = ((*a2)[1] - **a2) >> 2;
  v49.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v9, &v49);
  uint64_t v10 = *(void *)(a1 + 16);
  int v11 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  unint64_t v12 = *(float **)v10;
  **(_DWORD **)uint64_t v10 = 1065353216;
  uint64_t v13 = (uint64_t *)a3[9];
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  float v16 = 0.0;
  if (v14 == *v13) {
    float v16 = 1.0;
  }
  v12[1] = *(float *)(a1 + 28);
  void v12[2] = v16;
  if (v9 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = v9;
  }
  if (v11 < 0) {
    unint64_t v18 = 1;
  }
  else {
    unint64_t v18 = v17;
  }
  if (v9 % v18) {
    uint64_t v19 = v9 / v18 + 1;
  }
  else {
    uint64_t v19 = v9 / v18;
  }
  if (a3[5] <= 1uLL) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = a3[5];
  }
  if (v11 < 0)
  {
    v49.__ptr_ = 0;
    v50.__m_.__sig = 850045863;
    memset(v50.__m_.__opaque, 0, sizeof(v50.__m_.__opaque));
    uint64_t v23 = *(void *)(v10 + 8);
    uint64_t v24 = *a5;
    uint64_t v25 = *(void *)*a5;
    if (!v25 && *(void *)(v24 + 8)
      || (int v26 = *a2, (v27 = **a2) == 0) && v26[1]
      || (v28 = (uint64_t *)a3[3], (uint64_t v29 = *v28) == 0) && v28[1]
      || !v15 && v14
      || (unint64_t)(v23 - (void)v12) < 5
      || v23 - (void)v12 == 8)
    {
      std::terminate();
    }
    uint64_t v46 = a1;
    uint64_t v30 = 0;
    uint64_t v47 = v19;
    unint64_t v48 = v18;
    do
    {
      unint64_t v31 = v30 * v19;
      unint64_t v32 = v9;
      if (v30 * v19 + v19 < v9) {
        unint64_t v9 = v30 * v19 + v19;
      }
      if (v31 < v9)
      {
        float v33 = v12[1];
        float v34 = v12[2];
        do
        {
          float v35 = *(float *)(v27 + 4 * v31);
          if (v35 >= -88.7) {
            float v36 = -v35;
          }
          else {
            float v36 = 88.7;
          }
          float v37 = expf(v36);
          float v38 = 1.0;
          if (v34 == 0.0) {
            float v38 = *(float *)(v15 + 4 * (v31 / v20));
          }
          float v39 = *(float *)(v29 + 4 * v31);
          if (v39 == 1.0) {
            float v40 = v33;
          }
          else {
            float v40 = 1.0;
          }
          if (v39 < 0.0 || v39 > 1.0) {
            float *v12 = 0.0;
          }
          float v42 = 1.0 / (float)((float)(v37 + 1.0) + 1.0e-16);
          float v43 = (float *)(v25 + 8 * v31);
          *float v43 = (float)(v42 - v39) * (float)(v38 * v40);
          v43[1] = fmaxf(v42 * (float)(1.0 - v42), 1.0e-16) * (float)(v38 * v40);
          ++v31;
        }
        while (v31 != v9);
      }
      ++v30;
      uint64_t v19 = v47;
      unint64_t v9 = v32;
    }
    while (v30 != v48);
    dmlc::OMPException::Rethrow(&v49);
    std::mutex::~mutex(&v50);
    std::exception_ptr::~exception_ptr(&v49);
    a1 = v46;
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    unint64_t v22 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
  }
  if (***(float ***)(a1 + 16) == 0.0)
  {
    float v44 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    dmlc::LogMessageFatal::Entry::Init(v44, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
    v45 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"label must be in [0,1] for logistic regression", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
  }
}

void sub_22E8B588C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, std::exception_ptr a14)
{
}

const char *xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::DefaultEvalMetric()
{
  return "logloss";
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::PredTransform(uint64_t a1, float ***a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a2;
  uint64_t v2 = (*a2)[1];
  v7.__ptr_ = 0;
  v8.__m_.__sig = 850045863;
  memset(v8.__m_.__opaque, 0, sizeof(v8.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v2 == 0;
    }
    if (v4)
    {
      uint64_t v5 = v2 - v3;
      while (v5)
      {
        if (*v3 >= -88.7) {
          float v6 = -*v3;
        }
        else {
          float v6 = 88.7;
        }
        *v3++ = 1.0 / (float)((float)(expf(v6) + 1.0) + 1.0e-16);
        if (!--v5) {
          goto LABEL_13;
        }
      }
    }
    std::terminate();
  }
LABEL_13:
  dmlc::OMPException::Rethrow(&v7);
  std::mutex::~mutex(&v8);
  std::exception_ptr::~exception_ptr(&v7);
}

void sub_22E8B59FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::Task()
{
  return 1;
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::Targets(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 40) <= 1uLL) {
    return 1;
  }
  else {
    return *(void *)(a2 + 40);
  }
}

void std::__function::__func<xgboost::obj::$_4,std::allocator<xgboost::obj::$_4>,xgboost::ObjFunction * ()(void)>::~__func()
{
}

void *std::__function::__func<xgboost::obj::$_4,std::allocator<xgboost::obj::$_4>,xgboost::ObjFunction * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E244D20;
  return result;
}

void std::__function::__func<xgboost::obj::$_4,std::allocator<xgboost::obj::$_4>,xgboost::ObjFunction * ()(void)>::operator()()
{
}

void sub_22E8B5AF4(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10E1C407B1BEDF6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_4,std::allocator<xgboost::obj::$_4>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::obj::$_4,std::allocator<xgboost::obj::$_4>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::~RegLossObj(void *a1)
{
  *a1 = &unk_26E244D90;
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

{
  *a1 = &unk_26E244D90;
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::LoadConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "reg_loss_param");
  BOOL v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::RegLossParam>(&v7, *v4, (unsigned char *)(a1 + 24));
  std::mutex v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E8B5CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::SaveConfig(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "binary:logitraw");
  char v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)std::mutex v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=();
}

void sub_22E8B5E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29)
{
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::obj::RegLossParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::RegLossParam *)v2, (unsigned char *)(a1 + 24), a2);
  uint64_t v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::GetGradient(uint64_t a1, uint64_t **a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  unint64_t v9 = ((*a2)[1] - **a2) >> 2;
  v49.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v9, &v49);
  uint64_t v10 = *(void *)(a1 + 16);
  int v11 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  unint64_t v12 = *(float **)v10;
  **(_DWORD **)uint64_t v10 = 1065353216;
  uint64_t v13 = (uint64_t *)a3[9];
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  float v16 = 0.0;
  if (v14 == *v13) {
    float v16 = 1.0;
  }
  v12[1] = *(float *)(a1 + 28);
  void v12[2] = v16;
  if (v9 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = v9;
  }
  if (v11 < 0) {
    unint64_t v18 = 1;
  }
  else {
    unint64_t v18 = v17;
  }
  if (v9 % v18) {
    uint64_t v19 = v9 / v18 + 1;
  }
  else {
    uint64_t v19 = v9 / v18;
  }
  if (a3[5] <= 1uLL) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = a3[5];
  }
  if (v11 < 0)
  {
    v49.__ptr_ = 0;
    v50.__m_.__sig = 850045863;
    memset(v50.__m_.__opaque, 0, sizeof(v50.__m_.__opaque));
    uint64_t v23 = *(void *)(v10 + 8);
    uint64_t v24 = *a5;
    uint64_t v25 = *(void *)*a5;
    if (!v25 && *(void *)(v24 + 8)
      || (int v26 = *a2, (v27 = **a2) == 0) && v26[1]
      || (v28 = (uint64_t *)a3[3], (uint64_t v29 = *v28) == 0) && v28[1]
      || !v15 && v14
      || (unint64_t)(v23 - (void)v12) < 5
      || v23 - (void)v12 == 8)
    {
      std::terminate();
    }
    uint64_t v46 = a1;
    uint64_t v30 = 0;
    uint64_t v47 = v19;
    unint64_t v48 = v18;
    do
    {
      unint64_t v31 = v30 * v19;
      unint64_t v32 = v9;
      if (v30 * v19 + v19 < v9) {
        unint64_t v9 = v30 * v19 + v19;
      }
      if (v31 < v9)
      {
        float v33 = v12[1];
        float v34 = v12[2];
        do
        {
          float v35 = 1.0;
          if (v34 == 0.0) {
            float v35 = *(float *)(v15 + 4 * (v31 / v20));
          }
          float v36 = *(float *)(v27 + 4 * v31);
          float v37 = *(float *)(v29 + 4 * v31);
          if (v37 == 1.0) {
            float v38 = v33;
          }
          else {
            float v38 = 1.0;
          }
          if (v37 < 0.0 || v37 > 1.0) {
            float *v12 = 0.0;
          }
          float v40 = v35 * v38;
          float v41 = -v36;
          if (v36 < -88.7) {
            float v41 = 88.7;
          }
          float v42 = 1.0 / (float)((float)(expf(v41) + 1.0) + 1.0e-16);
          float v43 = (float *)(v25 + 8 * v31);
          *float v43 = (float)(v42 - v37) * v40;
          v43[1] = fmaxf(v42 * (float)(1.0 - v42), 1.0e-16) * v40;
          ++v31;
        }
        while (v31 != v9);
      }
      ++v30;
      uint64_t v19 = v47;
      unint64_t v9 = v32;
    }
    while (v30 != v48);
    dmlc::OMPException::Rethrow(&v49);
    std::mutex::~mutex(&v50);
    std::exception_ptr::~exception_ptr(&v49);
    a1 = v46;
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    unint64_t v22 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
  }
  if (***(float ***)(a1 + 16) == 0.0)
  {
    float v44 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    dmlc::LogMessageFatal::Entry::Init(v44, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
    v45 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"label must be in [0,1] for logistic regression", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
  }
}

void sub_22E8B6260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, std::exception_ptr a14)
{
}

const char *xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::DefaultEvalMetric()
{
  return "logloss";
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::PredTransform(uint64_t a1, uint64_t **a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a2;
  uint64_t v2 = (*a2)[1];
  v5.__ptr_ = 0;
  v6.__m_.__sig = 850045863;
  memset(v6.__m_.__opaque, 0, sizeof(v6.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v2 == 0;
    }
    if (!v4 || (unint64_t)(v2 - v3) < 4) {
      std::terminate();
    }
  }
  dmlc::OMPException::Rethrow(&v5);
  std::mutex::~mutex(&v6);
  std::exception_ptr::~exception_ptr(&v5);
}

void sub_22E8B6378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::Task()
{
  return 0;
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::Targets(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 40) <= 1uLL) {
    return 1;
  }
  else {
    return *(void *)(a2 + 40);
  }
}

void std::__function::__func<xgboost::obj::$_5,std::allocator<xgboost::obj::$_5>,xgboost::ObjFunction * ()(void)>::~__func()
{
}

void *std::__function::__func<xgboost::obj::$_5,std::allocator<xgboost::obj::$_5>,xgboost::ObjFunction * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E244E28;
  return result;
}

void std::__function::__func<xgboost::obj::$_5,std::allocator<xgboost::obj::$_5>,xgboost::ObjFunction * ()(void)>::operator()()
{
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v2, (uint64_t)__p, 203, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"reg:linear is now deprecated in favor of reg:squarederror.", 58);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v2);
    if (v1 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_22E8B64E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_5,std::allocator<xgboost::obj::$_5>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::obj::$_5,std::allocator<xgboost::obj::$_5>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void std::__function::__func<xgboost::obj::$_6,std::allocator<xgboost::obj::$_6>,xgboost::ObjFunction * ()(void)>::~__func()
{
}

void *std::__function::__func<xgboost::obj::$_6,std::allocator<xgboost::obj::$_6>,xgboost::ObjFunction * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E244EA8;
  return result;
}

void std::__function::__func<xgboost::obj::$_6,std::allocator<xgboost::obj::$_6>,xgboost::ObjFunction * ()(void)>::operator()()
{
}

uint64_t std::__function::__func<xgboost::obj::$_6,std::allocator<xgboost::obj::$_6>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::obj::$_6,std::allocator<xgboost::obj::$_6>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void xgboost::obj::PseudoHuberRegression::~PseudoHuberRegression(xgboost::obj::PseudoHuberRegression *this)
{
}

void xgboost::obj::PseudoHuberRegression::LoadConfig(xgboost::obj::PseudoHuberRegression *this, const xgboost::Json *a2)
{
  BOOL v4 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "pseduo_huber_param");
  uint64_t v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v4 + 16), (const void **)__p);
  std::mutex v6 = v4 + 24;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v6 != (char *)v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "pseduo_huber_param");
    uint64_t v7 = (_DWORD **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
    xgboost::FromJson<xgboost::PesudoHuberParam>(v7, (xgboost::obj::PseudoHuberRegression *)((char *)this + 16), &v8);
    int v11 = &v8;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_22E8B6774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::PseudoHuberRegression::SaveConfig(xgboost::obj::PseudoHuberRegression *this, xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "reg:pseudohubererror");
  std::mutex v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)std::vector<std::pair<std::string, std::string>> v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E8B6918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29)
{
}

void xgboost::obj::PseudoHuberRegression::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::PesudoHuberParam *)(a1 + 16), a2, v2);
  uint64_t v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::PseudoHuberRegression::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  float v78 = *(float *)(a1 + 20);
  v91.__ptr_ = 0;
  if (v78 == 0.0) {
    dmlc::LogCheckFormat<float,double>();
  }
  int v9 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  if (v9 < 0)
  {
    uint64_t v15 = *(uint64_t **)(a3 + 24);
    uint64_t v14 = *(void *)(a3 + 32);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1] - *v15;
    uint64_t v11 = v17 >> 2;
    uint64_t v13 = *(void **)(a3 + 40);
    if (v17) {
      uint64_t v12 = (void)v13 * v14;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v10 = *v15;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v14 = *(void *)(a3 + 32);
    uint64_t v13 = *(void **)(a3 + 40);
    uint64_t v15 = *(uint64_t **)(a3 + 24);
    uint64_t v16 = *v15;
  }
  unint64_t v18 = (v15[1] - v16) >> 2;
  v57[0] = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v18, v57);
  uint64_t v19 = *(void *)*a5;
  uint64_t v20 = *(void *)(*a5 + 8);
  if (!v19 && v20 || (v21 = **a2, uint64_t v22 = (*a2)[1], !v21) && v22) {
LABEL_53:
  }
    std::terminate();
  uint64_t v23 = (v20 - v19) >> 3;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v25 = (v22 - v21) >> 2;
  if (*(_DWORD *)(v24 + 24) == -1)
  {
    uint64_t v27 = **(void **)(a3 + 72);
    uint64_t v26 = (*(void *)(*(void *)(a3 + 72) + 8) - v27) >> 2;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  v57[0] = v13;
  v57[1] = 1;
  v58[0] = v14;
  v58[1] = v13;
  v58[2] = v11;
  v58[3] = v10;
  v58[4] = v10;
  v58[5] = v12;
  int v59 = v9;
  uint64_t v60 = 1;
  uint64_t v61 = v25;
  unint64_t v62 = v25;
  uint64_t v63 = v21;
  uint64_t v64 = v21;
  uint64_t v65 = v25;
  int v66 = -1;
  float v67 = v78;
  unint64_t v68 = v26;
  uint64_t v69 = v27;
  int v70 = 1065353216;
  uint64_t v71 = 1;
  uint64_t v72 = v23;
  unint64_t v73 = v23;
  uint64_t v74 = v19;
  uint64_t v75 = v19;
  uint64_t v76 = v23;
  int v77 = -1;
  if (*(_DWORD *)(v24 + 24) != -1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v91);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/common.h");
    uint64_t v29 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v91);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v91);
  }
  v79 = v13;
  uint64_t v80 = 1;
  v81[0] = v14;
  v81[1] = v13;
  unint64_t v82 = v11;
  uint64_t v83 = v10;
  uint64_t v84 = v10;
  uint64_t v85 = v12;
  int v86 = v9;
  if (v11 == v12) {
    goto LABEL_30;
  }
  uint64_t v30 = 0;
  v91.__ptr_ = v13;
  v92.__m_.__sig = 1;
  while (*(void **)((char *)&v79 + v30) == *(void **)((char *)&v91.__ptr_ + v30))
  {
    v30 += 8;
    if (v30 == 16) {
      goto LABEL_30;
    }
  }
  uint64_t v31 = 0;
  v91.__ptr_ = (void *)1;
  v92.__m_.__sig = v14;
  do
  {
    uint64_t v32 = *(uint64_t *)((char *)&v79 + v31);
    uint64_t v33 = *(uint64_t *)((char *)&v91.__ptr_ + v31);
    BOOL v34 = v32 != v33 || v31 == 8;
    v31 += 8;
  }
  while (!v34);
  if (v32 == v33)
  {
LABEL_30:
    v91.__ptr_ = 0;
    v92.__m_.__sig = 850045863;
    int8x8_t v35 = 0;
    memset(v92.__m_.__opaque, 0, sizeof(v92.__m_.__opaque));
    if (v12)
    {
      for (unint64_t i = 0; i != v12; ++i)
      {
        float v37 = *(float *)(v10 + 4 * i);
        uint64_t v89 = 2;
        v90 = v58;
        unint64_t v38 = xgboost::linalg::UnravelIndex<2ul>(i, &v89, v35);
        if (v60 * i >= v62) {
          goto LABEL_39;
        }
        float v39 = (float *)&v70;
        if (v68)
        {
          if (v68 <= v38) {
            goto LABEL_53;
          }
          float v39 = (float *)(v69 + 4 * v38);
        }
        if (v71 * i >= v73) {
LABEL_39:
        }
          __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
        float v40 = *(float *)(v64 + 4 * v60 * i) - v37;
        float v41 = sqrtf((float)((float)(v40 * v40) / (float)(v67 * v67)) + 1.0);
        float v42 = (float)((float)(v67 * v67) / (float)((float)((float)(v67 * v67) + (float)(v40 * v40)) * v41)) * *v39;
        *(float *)v35.i32 = (float)(v40 / v41) * *v39;
        uint64_t v43 = v75 + 8 * v71 * i;
        *(_DWORD *)uint64_t v43 = v35.i32[0];
        *(float *)(v43 + 4) = v42;
      }
    }
  }
  else
  {
    v91.__ptr_ = 0;
    v92.__m_.__sig = 850045863;
    int8x8_t v44 = 0;
    memset(v92.__m_.__opaque, 0, sizeof(v92.__m_.__opaque));
    if (v12)
    {
      for (unint64_t j = 0; j != v12; ++j)
      {
        v87.__ptr_ = (void *)2;
        v88 = v81;
        unint64_t v46 = xgboost::linalg::UnravelIndex<2ul>(j, &v87, v44);
        unint64_t v49 = (void)v79 * v46 + v80 * v48;
        if (v49 >= v82) {
          goto LABEL_51;
        }
        float v50 = *(float *)(v84 + 4 * v49);
        uint64_t v89 = 2;
        v90 = v58;
        unint64_t v51 = xgboost::linalg::UnravelIndex<2ul>(j, &v89, v47);
        if (v60 * j >= v62) {
          goto LABEL_51;
        }
        std::mutex v52 = (float *)&v70;
        if (v68)
        {
          if (v68 <= v51) {
            goto LABEL_53;
          }
          std::mutex v52 = (float *)(v69 + 4 * v51);
        }
        if (v71 * j >= v73) {
LABEL_51:
        }
          __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
        float v53 = *(float *)(v64 + 4 * v60 * j) - v50;
        float v54 = sqrtf((float)((float)(v53 * v53) / (float)(v67 * v67)) + 1.0);
        float v55 = (float)((float)(v67 * v67) / (float)((float)((float)(v67 * v67) + (float)(v53 * v53)) * v54)) * *v52;
        *(float *)v44.i32 = (float)(v53 / v54) * *v52;
        uint64_t v56 = v75 + 8 * v71 * j;
        *(_DWORD *)uint64_t v56 = v44.i32[0];
        *(float *)(v56 + 4) = v55;
      }
    }
  }
  dmlc::OMPException::Rethrow(&v91);
  std::mutex::~mutex(&v92);
  std::exception_ptr::~exception_ptr(&v91);
}

void sub_22E8B7084()
{
}

void sub_22E8B7090()
{
}

void sub_22E8B70A4()
{
}

void sub_22E8B70B0()
{
}

void sub_22E8B70C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(a1);
}

void sub_22E8B70D0(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v2 - 184));
  _Unwind_Resume(a1);
}

void sub_22E8B70E8(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 184));
  _Unwind_Resume(a1);
}

void sub_22E8B7100()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 184));
  JUMPOUT(0x22E8B710CLL);
}

void sub_22E8B7124(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const char *xgboost::obj::PseudoHuberRegression::DefaultEvalMetric(xgboost::obj::PseudoHuberRegression *this)
{
  return "mphe";
}

uint64_t xgboost::obj::PseudoHuberRegression::Task(xgboost::obj::PseudoHuberRegression *this)
{
  return 0;
}

uint64_t xgboost::obj::PseudoHuberRegression::Targets(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 40) <= 1uLL) {
    return 1;
  }
  else {
    return *(void *)(a2 + 40);
  }
}

void xgboost::FromJson<xgboost::PesudoHuberParam>(_DWORD **a1@<X0>, xgboost::PesudoHuberParam *a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  uint64_t v5 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*a1);
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v13 = (uint64_t *)v14;
  std::mutex v6 = (void *)v5[2];
  uint64_t v7 = v5 + 3;
  if (v6 != v5 + 3)
  {
    do
    {
      std::vector<std::pair<std::string, std::string>> v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v6[7]);
      uint64_t v15 = (long long *)(v6 + 4);
      int v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      uint64_t v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          std::mutex v6 = v11;
        }
        while (!v12);
      }
      std::mutex v6 = v11;
    }
    while (v11 != v7);
  }
  xgboost::XGBoostParameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(a2, (uint64_t)&v13, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_22E8B7258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void xgboost::XGBoostParameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::PesudoHuberParam *this@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  if (*(unsigned char *)this)
  {
    dmlc::Parameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(this, a2, a3);
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
    std::mutex v6 = xgboost::PesudoHuberParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)this, *(void **)a2, (void *)(a2 + 8), a3, 0);
    *(unsigned char *)this = 1;
  }
}

void sub_22E8B7310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void dmlc::Parameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::PesudoHuberParam *a1@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  std::mutex v6 = xgboost::PesudoHuberParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)a1, *(void **)a2, (void *)(a2 + 8), 0, a3, 0);
}

void sub_22E8B7388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::ToJson<xgboost::PesudoHuberParam>(xgboost::PesudoHuberParam *a1@<X0>, void *a2@<X8>)
{
  a2[1] = 0x300000000;
  *a2 = &unk_26E24E128;
  a2[3] = 0;
  a2[2] = a2 + 3;
  a2[4] = 0;
  uint64_t v3 = xgboost::PesudoHuberParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)v3, &v5);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v6, (const void **)&v5.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v5.__end_->first.__r_.__value_.__l.__data_);
  std::vector<std::pair<std::string, std::string>> v8 = &v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  uint64_t v4 = v6;
  if ((void **)v6 != &v7)
  {
    xgboost::JsonString::JsonString(&v5, (long long *)(v6 + 56));
    std::vector<std::pair<std::string, std::string>> v8 = (std::vector<std::pair<std::string, std::string>> *)(v4 + 32);
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 2), (const void **)(v4 + 32), (uint64_t)&std::piecewise_construct, (long long **)&v8);
    xgboost::Json::operator=();
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v6, v7);
}

void sub_22E8B7514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(void *)uint64_t v21 = v22;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v23, *(void **)(v21 + 24));
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::PesudoHuberParam *this@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)this)
  {
    dmlc::Parameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(this, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = xgboost::PesudoHuberParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)this, *a2, a2[1], a3, 0);
    *(unsigned char *)this = 1;
  }
}

void sub_22E8B762C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *dmlc::Parameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>@<X0>(xgboost::PesudoHuberParam *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = xgboost::PesudoHuberParam::__MANAGER__(a1);
  return dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)a1, *a2, a2[1], 0, a3, 0);
}

void sub_22E8B76A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void dmlc::LogCheckFormat<float,double>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E8B7850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t xgboost::linalg::UnravelIndex<2ul>(unint64_t a1, void *a2, int8x8_t a3)
{
  uint64_t v3 = a2[1];
  if (HIDWORD(a1))
  {
    v6[0] = *a2;
    v6[1] = v3;
    return xgboost::linalg::detail::UnravelImpl<unsigned long long,2>(a1, v6);
  }
  else
  {
    v5[0] = *a2;
    v5[1] = v3;
    return xgboost::linalg::detail::UnravelImpl<unsigned int,2>(a1, v5, a3);
  }
}

unint64_t xgboost::linalg::detail::UnravelImpl<unsigned long long,2>(unint64_t a1, void *a2)
{
  if (*a2 < 2uLL) {
    std::terminate();
  }
  unint64_t v2 = *(void *)(a2[1] + 8);
  char v3 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v2 - 1)));
  if ((v2 & (v2 - 1)) != 0) {
    return a1 / v2;
  }
  else {
    return a1 >> v3;
  }
}

uint64_t xgboost::linalg::detail::UnravelImpl<unsigned int,2>(unsigned int a1, void *a2, int8x8_t a3)
{
  if (*a2 < 2uLL) {
    std::terminate();
  }
  unsigned int v3 = *(_DWORD *)(a2[1] + 8);
  a3.i32[0] = v3 - 1;
  unsigned int v4 = a1 >> vaddlv_u8((uint8x8_t)vcnt_s8(a3));
  if ((v3 & (v3 - 1)) != 0) {
    return a1 / v3;
  }
  else {
    return v4;
  }
}

uint64_t xgboost::linalg::TensorView<float const,2>::operator()<unsigned long &,unsigned long &>(void *a1, void *a2, void *a3)
{
  unint64_t v3 = *a1 * *a2 + a1[1] * *a3;
  if (v3 >= a1[4]) {
    __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
  }
  return a1[6] + 4 * v3;
}

void std::__function::__func<xgboost::obj::$_7,std::allocator<xgboost::obj::$_7>,xgboost::ObjFunction * ()(void)>::~__func()
{
}

void *std::__function::__func<xgboost::obj::$_7,std::allocator<xgboost::obj::$_7>,xgboost::ObjFunction * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E244FB0;
  return result;
}

void std::__function::__func<xgboost::obj::$_7,std::allocator<xgboost::obj::$_7>,xgboost::ObjFunction * ()(void)>::operator()()
{
}

void sub_22E8B7AA4(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10E1C40F6D66BA0);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_7,std::allocator<xgboost::obj::$_7>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::obj::$_7,std::allocator<xgboost::obj::$_7>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void xgboost::obj::PoissonRegression::~PoissonRegression(xgboost::obj::PoissonRegression *this)
{
  *(void *)this = &unk_26E245020;
  xgboost::HostDeviceVector<int>::~HostDeviceVector();
}

{
  *(void *)this = &unk_26E245020;
  xgboost::HostDeviceVector<int>::~HostDeviceVector();
}

void xgboost::obj::PoissonRegression::LoadConfig(xgboost::obj::PoissonRegression *this, const xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "poisson_regression_param");
  unsigned int v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  std::vector<std::pair<std::string, std::string>> v5 = (xgboost::obj::PoissonRegressionParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v4);
  v19[0] = 0;
  v19[1] = 0;
  unint64_t v18 = (std::vector<std::pair<std::string, std::string>> *)v19;
  uint64_t v6 = (void *)*((void *)v5 + 2);
  uint64_t v7 = (void *)((char *)v5 + 24);
  if (v6 != (void *)((char *)v5 + 24))
  {
    do
    {
      std::vector<std::pair<std::string, std::string>> v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v6[7]);
      uint64_t v20 = (long long *)(v6 + 4);
      int v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v18, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v20);
      std::vector<std::pair<std::string, std::string>> v5 = (xgboost::obj::PoissonRegressionParam *)std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      uint64_t v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v12);
      }
      uint64_t v6 = v11;
    }
    while (v11 != v7);
  }
  int v14 = *((unsigned __int8 *)this + 16);
  uint64_t v13 = (char *)this + 16;
  memset(&v17, 0, sizeof(v17));
  xgboost::obj::PoissonRegressionParam::__MANAGER__(v5);
  if (v14)
  {
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD71008, (uint64_t)v13, v18, v19, 0, &v17, 0);
  }
  else
  {
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD71008, (uint64_t)v13, v18, v19, &v17, 0);
    *uint64_t v13 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19[0]);
  unint64_t v18 = &v17;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E8B7D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, void *a20)
{
  *(void *)(v20 - 56) = &a16;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::obj::PoissonRegression::SaveConfig(xgboost::obj::PoissonRegression *this, xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v3, "count:poisson");
  std::vector<std::pair<std::string, std::string>> v5 = &unk_26E24E210;
  uint64_t v6 = 0;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
  uint64_t v8 = v4;
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v4 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
  xgboost::Json::operator=();
}

void sub_22E8B805C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v31, a16);
  _Unwind_Resume(a1);
}

void xgboost::obj::PoissonRegression::Configure(unsigned char *a1, uint64_t *a2)
{
  unint64_t v3 = a1 + 16;
  if (a1[16])
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    xgboost::obj::PoissonRegressionParam::__MANAGER__((xgboost::obj::PoissonRegressionParam *)a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71008, (uint64_t)v3, *a2, a2[1], 0, &v4, 0);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    xgboost::obj::PoissonRegressionParam::__MANAGER__((xgboost::obj::PoissonRegressionParam *)a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71008, (uint64_t)v3, *a2, a2[1], &v4, 0);
    *unint64_t v3 = 1;
  }
  uint64_t v7 = (void **)&v4;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_22E8B81E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void xgboost::obj::PoissonRegression::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (*(void *)(*(void *)(a3 + 24) + 8) == **(void **)(a3 + 24)) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if (((*a2)[1] - **a2) >> 2 != (uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  unint64_t v51 = ((*a2)[1] - **a2) >> 2;
  *(void *)__x = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v51, __x);
  int v9 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  uint64_t v10 = *(std::vector<int> **)(a1 + 24);
  __x[0] = 0;
  std::vector<int>::resize(v10, 1uLL, __x);
  uint64_t v11 = **(void ***)(a1 + 24);
  uint64_t v12 = *(void *)(*(void *)(a1 + 24) + 8) - (void)v11;
  if (v12 >= 1) {
    memset_pattern16(v11, &unk_22EA18320, 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
  }
  unint64_t v13 = v51;
  uint64_t v49 = **(void **)(a3 + 72);
  uint64_t v50 = *(void *)(*(void *)(a3 + 72) + 8);
  if (v50 != v49)
  {
    if ((v50 - v49) >> 2 != v51) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    unint64_t v13 = v51;
  }
  if (v9 < 0)
  {
    uint64_t v46 = a1;
    float v16 = *(float *)(a1 + 20);
    *(void *)__x = 0;
    v53.__m_.__sig = 850045863;
    memset(v53.__m_.__opaque, 0, sizeof(v53.__m_.__opaque));
    if (v13)
    {
      uint64_t v17 = *(void *)(a1 + 24);
      uint64_t v19 = *(_DWORD **)v17;
      unint64_t v18 = *(_DWORD **)(v17 + 8);
      if (*(void *)v17 || !v18)
      {
        uint64_t v20 = *(void *)*a5;
        uint64_t v21 = *(void *)(*a5 + 8);
        if (v20 || !v21)
        {
          uint64_t v22 = *a2;
          uint64_t v24 = **a2;
          uint64_t v23 = v22[1];
          if (v24 || !v23)
          {
            uint64_t v25 = *(uint64_t **)(a3 + 24);
            uint64_t v27 = *v25;
            uint64_t v26 = v25[1];
            if (v27 || !v26)
            {
              int8x8_t v47 = v18;
              char v28 = *(uint64_t **)(a3 + 72);
              uint64_t v30 = *v28;
              uint64_t v29 = v28[1];
              uint64_t v48 = v30;
              if (v30 || !v29)
              {
                unint64_t v31 = 0;
                uint64_t v32 = (v21 - v20) >> 3;
                uint64_t v33 = (v23 - v24) >> 2;
                uint64_t v34 = (v26 - v27) >> 2;
                unint64_t v35 = (v29 - v30) >> 2;
                float v36 = (float *)(v20 + 4);
                while (v33 != v31)
                {
                  float v37 = *(float *)(v24 + 4 * v31);
                  if (v50 == v49)
                  {
                    float v38 = 1.0;
                  }
                  else
                  {
                    if (v35 <= v31) {
                      break;
                    }
                    float v38 = *(float *)(v48 + 4 * v31);
                  }
                  if (v34 == v31) {
                    break;
                  }
                  float v39 = *(float *)(v27 + 4 * v31);
                  if (v39 < 0.0)
                  {
                    if (v47 == v19) {
                      break;
                    }
                    _DWORD *v19 = 0;
                  }
                  if (v32 == v31) {
                    break;
                  }
                  float v40 = expf(v16 + v37) * v38;
                  *(v36 - 1) = v38 * (float)(expf(v37) - v39);
                  *float v36 = v40;
                  ++v31;
                  v36 += 2;
                  if (v13 == v31) {
                    goto LABEL_36;
                  }
                }
              }
            }
          }
        }
      }
      std::terminate();
    }
LABEL_36:
    dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
    std::mutex::~mutex(&v53);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
    a1 = v46;
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    uint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  uint64_t v41 = *(void *)(a1 + 24);
  float v42 = *(_DWORD **)v41;
  uint64_t v43 = *(_DWORD **)(v41 + 8);
  if (*(_DWORD **)v41 != v43)
  {
    do
    {
      if (!*v42)
      {
        int8x8_t v44 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        dmlc::LogMessageFatal::Entry::Init(v44, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
        v45 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"PoissonRegression: label must be nonnegative", 44);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
      }
      ++v42;
    }
    while (v42 != v43);
  }
}

void sub_22E8B87BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, std::exception_ptr a19)
{
  std::mutex::~mutex(v19);
  std::exception_ptr::~exception_ptr(&a19);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::PoissonRegression::DefaultEvalMetric(xgboost::obj::PoissonRegression *this)
{
  return "poisson-nloglik";
}

void xgboost::obj::PoissonRegression::PredTransform(uint64_t a1, float ***a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t v3 = **a2;
  unint64_t v2 = (*a2)[1];
  v6.__ptr_ = 0;
  v7.__m_.__sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v2 == 0;
    }
    if (v4)
    {
      uint64_t v5 = v2 - v3;
      while (v5)
      {
        *unint64_t v3 = expf(*v3);
        ++v3;
        if (!--v5) {
          goto LABEL_10;
        }
      }
    }
    std::terminate();
  }
LABEL_10:
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E8B893C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::PoissonRegression::EvalTransform(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t xgboost::obj::PoissonRegression::Task(xgboost::obj::PoissonRegression *this)
{
  return 0;
}

void dmlc::LogCheckFormat<unsigned long,unsigned int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E8B8B20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::obj::$_8,std::allocator<xgboost::obj::$_8>,xgboost::ObjFunction * ()(void)>::~__func()
{
}

void *std::__function::__func<xgboost::obj::$_8,std::allocator<xgboost::obj::$_8>,xgboost::ObjFunction * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E2450B8;
  return result;
}

void std::__function::__func<xgboost::obj::$_8,std::allocator<xgboost::obj::$_8>,xgboost::ObjFunction * ()(void)>::operator()()
{
}

uint64_t std::__function::__func<xgboost::obj::$_8,std::allocator<xgboost::obj::$_8>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::obj::$_8,std::allocator<xgboost::obj::$_8>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void xgboost::obj::CoxRegression::~CoxRegression(xgboost::obj::CoxRegression *this)
{
}

void xgboost::obj::CoxRegression::SaveConfig(xgboost::obj::CoxRegression *this, xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "survival:cox");
  std::exception_ptr v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E8B8D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::CoxRegression::GetGradient(uint64_t a1, uint64_t **a2, xgboost::MetaInfo *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *(void *)(*((void *)a3 + 3) + 8) - **((void **)a3 + 3);
  uint64_t v45 = v7 >> 2;
  if (!v7) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  uint64_t v45 = ((*a2)[1] - **a2) >> 2;
  if (v45 != (uint64_t)(*(void *)(*((void *)a3 + 3) + 8) - **((void **)a3 + 3)) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v8 = *a2;
  unint64_t v9 = ((*a2)[1] - **a2) >> 2;
  unint64_t v46 = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v9, &v46);
  uint64_t v10 = (void *)*a5;
  uint64_t v11 = xgboost::MetaInfo::LabelAbsSort(a3);
  uint64_t v12 = (v8[1] - *v8) >> 2;
  unint64_t v46 = v12;
  uint64_t v13 = *(void *)(*((void *)a3 + 9) + 8) - **((void **)a3 + 9);
  if (v13)
  {
    if (v13 >> 2 != v12) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    uint64_t v12 = v46;
  }
  if (v12)
  {
    int v14 = *(uint64_t **)v11;
    uint64_t v15 = *v8;
    double v16 = 0.0;
    do
    {
      uint64_t v17 = *v14++;
      double v16 = v16 + expf(*(float *)(v15 + 4 * v17));
      --v12;
    }
    while (v12);
    unint64_t v18 = 0;
    uint64_t v19 = (uint64_t *)*((void *)a3 + 3);
    uint64_t v20 = *v19;
    unint64_t v21 = (v19[1] - *v19) >> 2;
    uint64_t v22 = *((void *)a3 + 5);
    double v44 = 0.0;
    double v23 = 0.0;
    double v24 = 0.0;
    double v25 = 0.0;
    double v26 = 0.0;
    do
    {
      unint64_t v27 = *(void *)(*(void *)v11 + 8 * v18);
      double v28 = exp(*(float *)(*v8 + 4 * v27));
      uint64_t v29 = **((void **)a3 + 9);
      if (*(void *)(*((void *)a3 + 9) + 8) == v29) {
        float v30 = 1.0;
      }
      else {
        float v30 = *(float *)(v29 + 4 * v27);
      }
      if (v27 * v22 >= v21) {
        __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
      }
      float v43 = v30;
      float v31 = *(float *)(v20 + 4 * v27 * v22);
      double v32 = fabsf(v31);
      if (v23 >= v32)
      {
        double v44 = v44 + v24;
        double v33 = 1.0;
        if (v23 > v32)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v45);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
          float v39 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v45);
          float v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: last_abs_y <= abs_y", 33);
          uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
          float v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"CoxRegression: labels must be in sorted order, ", 47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"MetaInfo::LabelArgsort failed!", 30);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v45);
        }
      }
      else
      {
        double v16 = v16 - (v44 + v24);
        double v44 = 0.0;
        double v33 = 1.0;
      }
      if (v31 > 0.0)
      {
        double v26 = v26 + v33 / v16;
        double v25 = v25 + v33 / (v16 * v16);
      }
      if (v27 >= (uint64_t)(v10[1] - *v10) >> 3) {
        std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
      }
      double v35 = 0.0;
      if (v31 > 0.0) {
        double v35 = v33;
      }
      float v36 = -(v35 - v28 * v26) * v43;
      float v37 = (float *)(*v10 + 8 * v27);
      float *v37 = v36;
      float v34 = (-(v28 * v28) * v25 + v28 * v26) * v43;
      v37[1] = v34;
      ++v18;
      double v23 = v32;
      double v24 = v28;
    }
    while (v18 < v46);
  }
}

void sub_22E8B92D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
}

const char *xgboost::obj::CoxRegression::DefaultEvalMetric(xgboost::obj::CoxRegression *this)
{
  return "cox-nloglik";
}

void xgboost::obj::CoxRegression::PredTransform(uint64_t a1, float ***a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = **a2;
  uint64_t v3 = (char *)(*a2)[1] - (char *)v2;
  v5.__ptr_ = 0;
  v6.__m_.__sig = 850045863;
  memset(v6.__m_.__opaque, 0, sizeof(v6.__m_.__opaque));
  if (v3 >= 1)
  {
    uint64_t v4 = v3 >> 2;
    do
    {
      float *v2 = expf(*v2);
      ++v2;
      --v4;
    }
    while (v4);
  }
  dmlc::OMPException::Rethrow(&v5);
  std::mutex::~mutex(&v6);
  std::exception_ptr::~exception_ptr(&v5);
}

void sub_22E8B9430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::CoxRegression::EvalTransform(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t xgboost::obj::CoxRegression::Task(xgboost::obj::CoxRegression *this)
{
  return 0;
}

char *xgboost::MetaInfo::LabelAbsSort(xgboost::MetaInfo *this)
{
  uint64_t v1 = (char *)this + 184;
  unint64_t v2 = (uint64_t)(*(void *)(*((void *)this + 3) + 8) - **((void **)this + 3)) >> 2;
  if (v2 != (uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 3)
  {
    std::vector<unsigned long>::resize((uint64_t)this + 184, v2);
    uint64_t v4 = (uint64_t *)*((void *)this + 23);
    std::exception_ptr v5 = (uint64_t *)*((void *)this + 24);
    if (v4 != v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = (uint64_t *)*((void *)this + 23);
      do
        *v7++ = v6++;
      while (v7 != v5);
    }
    uint64_t v12 = (uint64_t *)*((void *)this + 3);
    if ((char *)v5 - (char *)v4 < 1025)
    {
      uint64_t v8 = 0;
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v8 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(v5 - v4);
      uint64_t v10 = v9;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v4, v5, &v12, v5 - v4, v8, v10);
    if (v8) {
      operator delete(v8);
    }
  }
  return v1;
}

void sub_22E8B9560(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  std::exception_ptr v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      int v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    double v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::get_temporary_buffer[abi:ne180100]<unsigned long>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  unint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    float result = operator new(8 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(uint64_t *a1, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v9 = *(a2 - 1);
      uint64_t v10 = *a1;
      if (fabsf(*(float *)(**a3 + 4 * v9)) < fabsf(*(float *)(**a3 + 4 * *a1)))
      {
        *a1 = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v14 = a4 >> 1;
      uint64_t v15 = &a1[a4 >> 1];
      unint64_t v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v14]);
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>>(a5, &a5[v14], &a5[v14], &a5[a4], a1, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>((char *)a1, (char *)&a1[a4 >> 1], (uint64_t)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, a2, a3);
    }
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t **a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = **a3;
      uint64_t v6 = result;
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = v3;
        uint64_t v8 = *v3;
        uint64_t v9 = *v7;
        float v10 = fabsf(*(float *)(v5 + 4 * v8));
        if (v10 < fabsf(*(float *)(v5 + 4 * v9)))
        {
          uint64_t v11 = v4;
          while (1)
          {
            *(uint64_t *)((char *)result + v11 + 8) = v9;
            if (!v11) {
              break;
            }
            uint64_t v9 = *(uint64_t *)((char *)result + v11 - 8);
            v11 -= 8;
            if (v10 >= fabsf(*(float *)(v5 + 4 * v9)))
            {
              uint64_t v12 = (uint64_t *)((char *)result + v11 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v12 = result;
LABEL_10:
          uint64_t *v12 = v8;
        }
        uint64_t v3 = v6 + 1;
        v4 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    uint64_t v9 = result;
    if (a4 == 2)
    {
      uint64_t v10 = *(a2 - 1);
      if (fabsf(*(float *)(**a3 + 4 * v10)) >= fabsf(*(float *)(**a3 + 4 * *result)))
      {
        *a5 = *result;
        uint64_t v11 = *(a2 - 1);
      }
      else
      {
        *a5 = v10;
        uint64_t v11 = *result;
      }
      a5[1] = v11;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(result, a2, a5, a3);
    }
  }
  return result;
}

uint64_t *std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5, void **a6)
{
  if (result == a2)
  {
LABEL_9:
    while (a3 != a4)
    {
      uint64_t v10 = *a3++;
      *a5++ = v10;
    }
  }
  else
  {
    uint64_t v6 = *a6;
    while (a3 != a4)
    {
      uint64_t v7 = *a3;
      float v8 = fabsf(*(float *)(*v6 + 4 * *a3));
      float v9 = fabsf(*(float *)(*v6 + 4 * *result));
      if (v8 >= v9) {
        uint64_t v7 = *result;
      }
      result += v8 >= v9;
      a3 += v8 < v9;
      *a5++ = v7;
      if (result == a2) {
        goto LABEL_9;
      }
    }
    if (result != a2)
    {
      uint64_t v11 = 0;
      do
      {
        a5[v11] = result[v11];
        ++v11;
      }
      while (&result[v11] != a2);
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(char *a1, char *a2, uint64_t a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v9 = a6;
    while (a5 > a8 && v9 > a8)
    {
      if (!a5) {
        return;
      }
      uint64_t v13 = 0;
      uint64_t v14 = **a4;
      float v15 = fabsf(*(float *)(v14 + 4 * *(void *)a2));
      uint64_t v16 = -a5;
      while (1)
      {
        uint64_t v17 = *(void *)&a1[v13];
        if (v15 < fabsf(*(float *)(v14 + 4 * v17))) {
          break;
        }
        v13 += 8;
        if (__CFADD__(v16++, 1)) {
          return;
        }
      }
      uint64_t v46 = a8;
      int8x8_t v47 = a4;
      uint64_t v45 = a3;
      if (-v16 >= v9)
      {
        if (v16 == -1)
        {
          *(void *)&a1[v13] = *(void *)a2;
          *(void *)a2 = v17;
          return;
        }
        if (v16 <= 0) {
          uint64_t v30 = -v16;
        }
        else {
          uint64_t v30 = 1 - v16;
        }
        uint64_t v29 = v30 >> 1;
        uint64_t v22 = &a1[8 * (v30 >> 1) + v13];
        unint64_t v21 = a2;
        if (a2 != (char *)a3)
        {
          unint64_t v31 = (a3 - (uint64_t)a2) >> 3;
          float v32 = fabsf(*(float *)(v14 + 4 * *(void *)v22));
          unint64_t v21 = a2;
          do
          {
            unint64_t v33 = v31 >> 1;
            float v34 = &v21[8 * (v31 >> 1)];
            uint64_t v36 = *(void *)v34;
            double v35 = v34 + 8;
            v31 += ~(v31 >> 1);
            if (fabsf(*(float *)(v14 + 4 * v36)) < v32) {
              unint64_t v21 = v35;
            }
            else {
              unint64_t v31 = v33;
            }
          }
          while (v31);
        }
        uint64_t v20 = (v21 - a2) >> 3;
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v19 = v9;
        }
        else {
          uint64_t v19 = v9 + 1;
        }
        uint64_t v20 = v19 >> 1;
        unint64_t v21 = &a2[8 * (v19 >> 1)];
        uint64_t v22 = a2;
        if (a2 - a1 != v13)
        {
          unint64_t v23 = (a2 - a1 - v13) >> 3;
          float v24 = fabsf(*(float *)(v14 + 4 * *(void *)v21));
          uint64_t v22 = &a1[v13];
          do
          {
            unint64_t v25 = v23 >> 1;
            double v26 = &v22[8 * (v23 >> 1)];
            uint64_t v28 = *(void *)v26;
            unint64_t v27 = v26 + 8;
            v23 += ~(v23 >> 1);
            if (v24 < fabsf(*(float *)(v14 + 4 * v28))) {
              unint64_t v23 = v25;
            }
            else {
              uint64_t v22 = v27;
            }
          }
          while (v23);
        }
        uint64_t v29 = (v22 - a1 - v13) >> 3;
      }
      a5 = -(v29 + v16);
      uint64_t v37 = v9 - v20;
      uint64_t v38 = v29;
      float v39 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(v22, a2, v21);
      uint64_t v40 = v38;
      uint64_t v41 = v39;
      if (v40 + v20 >= v9 - (v40 + v20) - v16)
      {
        uint64_t v44 = v40;
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v39, v21, v45, v47, a5, v37, a7, v46);
        a2 = v22;
        a4 = v47;
        uint64_t v37 = v20;
        a8 = v46;
        a5 = v44;
        a3 = (uint64_t)v41;
        a1 += v13;
      }
      else
      {
        float v42 = v22;
        a4 = v47;
        uint64_t v43 = v20;
        a8 = v46;
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[v13], v42, v39, v47, v40, v43, a7, v46);
        a1 = v41;
        a2 = v21;
        a3 = v45;
      }
      uint64_t v9 = v37;
      if (!v37) {
        return;
      }
    }
    std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, a2, a3, a4, a5, v9, a7);
  }
}

uint64_t *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  if (result != a2)
  {
    uint64_t v4 = *result++;
    *a3 = v4;
    if (result != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = **a4;
      uint64_t v7 = a3;
      float v8 = a3;
      do
      {
        uint64_t v10 = *v8++;
        uint64_t v9 = v10;
        if (fabsf(*(float *)(v6 + 4 * *result)) >= fabsf(*(float *)(v6 + 4 * v10)))
        {
          *float v8 = *result;
        }
        else
        {
          v7[1] = v9;
          uint64_t v11 = a3;
          if (v7 != a3)
          {
            uint64_t v12 = v5;
            while (1)
            {
              uint64_t v11 = (uint64_t *)((char *)a3 + v12);
              uint64_t v13 = *(uint64_t *)((char *)a3 + v12 - 8);
              if (fabsf(*(float *)(v6 + 4 * *result)) >= fabsf(*(float *)(v6 + 4 * v13))) {
                break;
              }
              uint64_t *v11 = v13;
              v12 -= 8;
              if (!v12)
              {
                uint64_t v11 = a3;
                break;
              }
            }
          }
          uint64_t *v11 = *result;
        }
        ++result;
        v5 += 8;
        uint64_t v7 = v8;
      }
      while (result != a2);
    }
  }
  return result;
}

uint64_t *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5, void **a6)
{
  if (result == a2)
  {
LABEL_9:
    while (a3 != a4)
    {
      uint64_t v10 = *a3++;
      *a5++ = v10;
    }
  }
  else
  {
    uint64_t v6 = *a6;
    while (a3 != a4)
    {
      uint64_t v7 = *a3;
      float v8 = fabsf(*(float *)(*v6 + 4 * *a3));
      float v9 = fabsf(*(float *)(*v6 + 4 * *result));
      if (v8 >= v9) {
        uint64_t v7 = *result;
      }
      a3 += v8 < v9;
      result += v8 >= v9;
      *a5++ = v7;
      if (result == a2) {
        goto LABEL_9;
      }
    }
    if (result != a2)
    {
      uint64_t v11 = 0;
      do
      {
        a5[v11] = result[v11];
        ++v11;
      }
      while (&result[v11] != a2);
    }
  }
  return result;
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(char *__dst, char *a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7 = a2;
  float v8 = __dst;
  if (a5 <= a6)
  {
    if (__dst != a2)
    {
      uint64_t v12 = 0;
      do
      {
        *(void *)&__src[v12] = *(void *)&__dst[v12];
        v12 += 8;
      }
      while (&__dst[v12] != a2);
      if (v12)
      {
        uint64_t v13 = *a4;
        uint64_t v14 = __src;
        while (v7 != (char *)a3)
        {
          uint64_t v15 = *(void *)v7;
          float v16 = fabsf(*(float *)(*v13 + 4 * *(void *)v7));
          float v17 = fabsf(*(float *)(*v13 + 4 * *(void *)v14));
          if (v16 >= v17) {
            uint64_t v15 = *(void *)v14;
          }
          v7 += 8 * (v16 < v17);
          v14 += 8 * (v16 >= v17);
          *(void *)float v8 = v15;
          v8 += 8;
          if (&__src[v12] == v14) {
            return;
          }
        }
        memmove(v8, v14, __src - v14 + v12);
      }
    }
  }
  else
  {
    float v9 = __src;
    if (a2 != (char *)a3)
    {
      float v9 = __src;
      uint64_t v10 = a2;
      do
      {
        uint64_t v11 = *(void *)v10;
        v10 += 8;
        *(void *)float v9 = v11;
        v9 += 8;
      }
      while (v10 != (char *)a3);
    }
    uint64_t v18 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>((uint64_t)v9, (uint64_t)v9, (uint64_t)__src, (uint64_t)__src, (uint64_t)a2, (uint64_t)a2, (uint64_t)v8, (uint64_t)v8, a3, a3, &v18);
  }
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(char *__src, char *a2, char *a3)
{
  uint64_t v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      uint64_t v6 = *(void *)__src;
      int64_t v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      uint64_t v4 = &__src[v7];
      *(void *)uint64_t v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      uint64_t v8 = *((void *)a3 - 1);
      uint64_t v4 = __src + 8;
      size_t v9 = a3 - 8 - __src;
      if (a3 - 8 != __src) {
        memmove(__src + 8, __src, v9);
      }
      *(void *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>>(__src, a2, a3);
    }
  }
  return v4;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void ***a11)
{
  if (a2 != a4)
  {
    uint64_t v11 = *a11;
    uint64_t v12 = (void *)(a10 - 8);
    while (a6 != a8)
    {
      uint64_t v13 = *(void *)(a2 - 8);
      if (fabsf(*(float *)(**v11 + 4 * v13)) >= fabsf(*(float *)(**v11 + 4 * *(void *)(a6 - 8))))
      {
        a2 -= 8;
      }
      else
      {
        uint64_t v13 = *(void *)(a6 - 8);
        a6 -= 8;
      }
      *v12-- = v13;
      if (a2 == a4) {
        return;
      }
    }
    uint64_t v14 = 0;
    do
    {
      v12[v14] = *(void *)(a2 + v14 * 8 - 8);
      --v14;
    }
    while (a2 + v14 * 8 != a4);
  }
}

void *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>>(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      uint64_t v4 = a1 + 1;
      uint64_t v5 = a2 + 1;
      do
      {
        uint64_t v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2) {
          break;
        }
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    uint64_t v8 = a3 - a2;
    uint64_t v9 = a2 - a1;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = v8;
      uint64_t v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      uint64_t v11 = &a1[v9];
      do
      {
        uint64_t v13 = *--v11;
        uint64_t v12 = v13;
        uint64_t v14 = &v11[v3];
        uint64_t v15 = v11;
        do
        {
          float v16 = v14;
          *uint64_t v15 = *v14;
          float v17 = &v14[v3];
          BOOL v18 = __OFSUB__(v3, a3 - v14);
          uint64_t v20 = v3 - (a3 - v14);
          char v19 = (v20 < 0) ^ v18;
          uint64_t v14 = &a1[v20];
          if (v19) {
            uint64_t v14 = v17;
          }
          uint64_t v15 = v16;
        }
        while (v14 != v11);
        void *v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

void std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__function::__func<xgboost::obj::$_9,std::allocator<xgboost::obj::$_9>,xgboost::ObjFunction * ()(void)>::~__func()
{
}

void *std::__function::__func<xgboost::obj::$_9,std::allocator<xgboost::obj::$_9>,xgboost::ObjFunction * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E2451C0;
  return result;
}

void std::__function::__func<xgboost::obj::$_9,std::allocator<xgboost::obj::$_9>,xgboost::ObjFunction * ()(void)>::operator()()
{
}

void sub_22E8BA3BC(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0xE1C400868AB68);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_9,std::allocator<xgboost::obj::$_9>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::obj::$_9,std::allocator<xgboost::obj::$_9>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void xgboost::obj::GammaRegression::~GammaRegression(xgboost::obj::GammaRegression *this)
{
  *(void *)this = &unk_26E245230;
  xgboost::HostDeviceVector<int>::~HostDeviceVector();
}

{
  *(void *)this = &unk_26E245230;
  xgboost::HostDeviceVector<int>::~HostDeviceVector();
}

void xgboost::obj::GammaRegression::SaveConfig(xgboost::obj::GammaRegression *this, xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "reg:gamma");
  uint64_t v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E8BA5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::GammaRegression::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = a1;
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (*(void *)(*(void *)(a3 + 24) + 8) == **(void **)(a3 + 24)) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if (((*a2)[1] - **a2) >> 2 != (uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  unint64_t v50 = ((*a2)[1] - **a2) >> 2;
  *(void *)__x = 0;
  int v9 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v50, __x);
  uint64_t v10 = *(std::vector<int> **)(v8 + 16);
  __x[0] = 0;
  std::vector<int>::resize(v10, 1uLL, __x);
  uint64_t v11 = **(void ***)(v8 + 16);
  uint64_t v12 = *(void *)(*(void *)(v8 + 16) + 8) - (void)v11;
  if (v12 >= 1) {
    memset_pattern16(v11, &unk_22EA18320, 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
  }
  unint64_t v13 = v50;
  uint64_t v48 = **(void **)(a3 + 72);
  uint64_t v49 = *(void *)(*(void *)(a3 + 72) + 8);
  if (v49 != v48)
  {
    if ((v49 - v48) >> 2 != v50) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    unint64_t v13 = v50;
  }
  if (v9 < 0)
  {
    uint64_t v45 = v8;
    *(void *)__x = 0;
    v52.__m_.__sig = 850045863;
    memset(v52.__m_.__opaque, 0, sizeof(v52.__m_.__opaque));
    if (v13)
    {
      uint64_t v16 = *(void *)(v8 + 16);
      BOOL v18 = *(_DWORD **)v16;
      float v17 = *(_DWORD **)(v16 + 8);
      if (*(void *)v16 || !v17)
      {
        uint64_t v19 = *(void *)*a5;
        uint64_t v20 = *(void *)(*a5 + 8);
        if (v19 || !v20)
        {
          unint64_t v21 = *a2;
          uint64_t v23 = **a2;
          uint64_t v22 = v21[1];
          if (v23 || !v22)
          {
            float v24 = *(uint64_t **)(a3 + 24);
            uint64_t v26 = *v24;
            uint64_t v25 = v24[1];
            if (v26 || !v25)
            {
              uint64_t v46 = v17;
              unint64_t v27 = *(uint64_t **)(a3 + 72);
              uint64_t v29 = *v27;
              uint64_t v28 = v27[1];
              uint64_t v47 = v29;
              if (v29 || !v28)
              {
                unint64_t v30 = 0;
                uint64_t v31 = (v20 - v19) >> 3;
                uint64_t v32 = (v22 - v23) >> 2;
                uint64_t v33 = (v25 - v26) >> 2;
                unint64_t v34 = (v28 - v29) >> 2;
                double v35 = (float *)(v19 + 4);
                while (v32 != v30)
                {
                  float v36 = *(float *)(v23 + 4 * v30);
                  if (v49 == v48)
                  {
                    float v37 = 1.0;
                  }
                  else
                  {
                    if (v34 <= v30) {
                      break;
                    }
                    float v37 = *(float *)(v47 + 4 * v30);
                  }
                  if (v33 == v30) {
                    break;
                  }
                  float v38 = *(float *)(v26 + 4 * v30);
                  if (v38 <= 0.0)
                  {
                    if (v46 == v18) {
                      break;
                    }
                    _DWORD *v18 = 0;
                  }
                  if (v31 == v30) {
                    break;
                  }
                  float v39 = v38 / expf(v36);
                  *(v35 - 1) = v37 * (float)(1.0 - v39);
                  *double v35 = v37 * v39;
                  ++v30;
                  v35 += 2;
                  if (v13 == v30) {
                    goto LABEL_36;
                  }
                }
              }
            }
          }
        }
      }
      std::terminate();
    }
LABEL_36:
    dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
    std::mutex::~mutex(&v52);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
    uint64_t v8 = v45;
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    uint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  uint64_t v40 = *(void *)(v8 + 16);
  uint64_t v41 = *(_DWORD **)v40;
  float v42 = *(_DWORD **)(v40 + 8);
  if (*(_DWORD **)v40 != v42)
  {
    do
    {
      if (!*v41)
      {
        uint64_t v43 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        dmlc::LogMessageFatal::Entry::Init(v43, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
        uint64_t v44 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"GammaRegression: label must be positive.", 40);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
      }
      ++v41;
    }
    while (v41 != v42);
  }
}

void sub_22E8BABBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, std::exception_ptr a19)
{
  std::mutex::~mutex(v19);
  std::exception_ptr::~exception_ptr(&a19);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::GammaRegression::DefaultEvalMetric(xgboost::obj::GammaRegression *this)
{
  return "gamma-nloglik";
}

void xgboost::obj::GammaRegression::PredTransform(uint64_t a1, float ***a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a2;
  unint64_t v2 = (*a2)[1];
  v6.__ptr_ = 0;
  v7.__m_.__sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v2 == 0;
    }
    if (v4)
    {
      uint64_t v5 = v2 - v3;
      while (v5)
      {
        *uint64_t v3 = expf(*v3);
        ++v3;
        if (!--v5) {
          goto LABEL_10;
        }
      }
    }
    std::terminate();
  }
LABEL_10:
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E8BAD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::GammaRegression::EvalTransform(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t xgboost::obj::GammaRegression::Task(xgboost::obj::GammaRegression *this)
{
  return 0;
}

void std::__function::__func<xgboost::obj::$_10,std::allocator<xgboost::obj::$_10>,xgboost::ObjFunction * ()(void)>::~__func()
{
}

void *std::__function::__func<xgboost::obj::$_10,std::allocator<xgboost::obj::$_10>,xgboost::ObjFunction * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E2452C8;
  return result;
}

void std::__function::__func<xgboost::obj::$_10,std::allocator<xgboost::obj::$_10>,xgboost::ObjFunction * ()(void)>::operator()()
{
}

void sub_22E8BAE70(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  MEMORY[0x230FA80D0](v1, 0x10F3C402E5B548ELL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_10,std::allocator<xgboost::obj::$_10>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::obj::$_10,std::allocator<xgboost::obj::$_10>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void xgboost::obj::TweedieRegression::~TweedieRegression(xgboost::obj::TweedieRegression *this)
{
  *(void *)this = &unk_26E245338;
  xgboost::HostDeviceVector<int>::~HostDeviceVector();
}

{
  *(void *)this = &unk_26E245338;
  xgboost::HostDeviceVector<int>::~HostDeviceVector();
}

void xgboost::obj::TweedieRegression::LoadConfig(xgboost::obj::TweedieRegression *this, const xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "tweedie_regression_param");
  BOOL v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  uint64_t v5 = (xgboost::obj::TweedieRegressionParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v4);
  v19[0] = 0;
  v19[1] = 0;
  BOOL v18 = (std::vector<std::pair<std::string, std::string>> *)v19;
  std::exception_ptr v6 = (void *)*((void *)v5 + 2);
  std::mutex v7 = (void *)((char *)v5 + 24);
  if (v6 != (void *)((char *)v5 + 24))
  {
    do
    {
      uint64_t v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v6[7]);
      uint64_t v20 = (long long *)(v6 + 4);
      int v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v18, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v20);
      uint64_t v5 = (xgboost::obj::TweedieRegressionParam *)std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      uint64_t v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          std::exception_ptr v6 = v11;
        }
        while (!v12);
      }
      std::exception_ptr v6 = v11;
    }
    while (v11 != v7);
  }
  int v14 = *((unsigned __int8 *)this + 40);
  unint64_t v13 = (char *)this + 40;
  memset(&v17, 0, sizeof(v17));
  xgboost::obj::TweedieRegressionParam::__MANAGER__(v5);
  if (v14)
  {
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD71050, (uint64_t)v13, v18, v19, 0, &v17, 0);
  }
  else
  {
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD71050, (uint64_t)v13, v18, v19, &v17, 0);
    *unint64_t v13 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19[0]);
  BOOL v18 = &v17;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E8BB168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, void *a20)
{
  *(void *)(v20 - 56) = &a16;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::obj::TweedieRegression::SaveConfig(xgboost::obj::TweedieRegression *this, xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v3, "reg:tweedie");
  uint64_t v5 = &unk_26E24E210;
  uint64_t v6 = 0;
  *(_OWORD *)std::mutex v7 = *(_OWORD *)v3;
  uint64_t v8 = v4;
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v4 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
  xgboost::Json::operator=();
}

void sub_22E8BB458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v31, a16);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::TweedieRegression::Configure(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 40);
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    xgboost::obj::TweedieRegressionParam::__MANAGER__((xgboost::obj::TweedieRegressionParam *)a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71050, (uint64_t)v4, *a2, a2[1], 0, &v12, 0);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    xgboost::obj::TweedieRegressionParam::__MANAGER__((xgboost::obj::TweedieRegressionParam *)a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD71050, (uint64_t)v4, *a2, a2[1], &v12, 0);
    unsigned char *v4 = 1;
  }
  v9[0] = (void **)&v12;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v9);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"tweedie-nloglik@", 16);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v5 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)uint64_t v5 = v7;
  *(void *)(a1 + 32) = v8;
  v9[0] = *(void ***)MEMORY[0x263F8C2C8];
  *(void ***)((char *)v9 + (unint64_t)*(v9[0] - 3)) = *(void ***)(MEMORY[0x263F8C2C8] + 24);
  v9[1] = (void **)(MEMORY[0x263F8C318] + 16);
  if (v10 < 0) {
    operator delete(v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v11);
}

void sub_22E8BB71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)(v13 - 56);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void xgboost::obj::TweedieRegression::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (*(void *)(*(void *)(a3 + 24) + 8) == **(void **)(a3 + 24)) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if (((*a2)[1] - **a2) >> 2 != (uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  unint64_t v54 = ((*a2)[1] - **a2) >> 2;
  *(void *)__x = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v54, __x);
  int v9 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  char v10 = *(std::vector<int> **)(a1 + 48);
  __x[0] = 0;
  std::vector<int>::resize(v10, 1uLL, __x);
  uint64_t v11 = **(void ***)(a1 + 48);
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8) - (void)v11;
  if (v12 >= 1) {
    memset_pattern16(v11, &unk_22EA18320, 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
  }
  unint64_t v13 = v54;
  uint64_t v52 = **(void **)(a3 + 72);
  uint64_t v53 = *(void *)(*(void *)(a3 + 72) + 8);
  if (v53 != v52)
  {
    if ((v53 - v52) >> 2 != v54) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    unint64_t v13 = v54;
  }
  if (v9 < 0)
  {
    uint64_t v49 = a1;
    float v16 = *(float *)(a1 + 44);
    *(void *)__x = 0;
    v56.__m_.__sig = 850045863;
    memset(v56.__m_.__opaque, 0, sizeof(v56.__m_.__opaque));
    if (v13)
    {
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v19 = *(_DWORD **)v17;
      BOOL v18 = *(_DWORD **)(v17 + 8);
      if (*(void *)v17 || !v18)
      {
        uint64_t v20 = *(void *)*a5;
        uint64_t v21 = *(void *)(*a5 + 8);
        if (v20 || !v21)
        {
          uint64_t v22 = *a2;
          uint64_t v24 = **a2;
          uint64_t v23 = v22[1];
          if (v24 || !v23)
          {
            uint64_t v25 = *(uint64_t **)(a3 + 24);
            uint64_t v27 = *v25;
            uint64_t v26 = v25[1];
            if (v27 || !v26)
            {
              unint64_t v50 = v18;
              uint64_t v28 = *(uint64_t **)(a3 + 72);
              uint64_t v30 = *v28;
              uint64_t v29 = v28[1];
              uint64_t v51 = v30;
              if (v30 || !v29)
              {
                unint64_t v31 = 0;
                uint64_t v32 = (v21 - v20) >> 3;
                uint64_t v33 = (v23 - v24) >> 2;
                uint64_t v34 = (v26 - v27) >> 2;
                unint64_t v35 = (v29 - v30) >> 2;
                float v36 = 1.0 - v16;
                float v37 = 2.0 - v16;
                float v38 = (float *)(v20 + 4);
                while (v33 != v31)
                {
                  float v39 = *(float *)(v24 + 4 * v31);
                  if (v53 == v52)
                  {
                    float v40 = 1.0;
                  }
                  else
                  {
                    if (v35 <= v31) {
                      break;
                    }
                    float v40 = *(float *)(v51 + 4 * v31);
                  }
                  if (v34 == v31) {
                    break;
                  }
                  float v41 = *(float *)(v27 + 4 * v31);
                  if (v41 < 0.0)
                  {
                    if (v50 == v19) {
                      break;
                    }
                    _DWORD *v19 = 0;
                  }
                  if (v32 == v31) {
                    break;
                  }
                  float v42 = expf(v36 * v39);
                  float v43 = expf(v37 * v39);
                  *(v38 - 1) = v40 * (float)(v43 - (float)(v41 * v42));
                  float *v38 = v40 * (float)((float)(v37 * v43) + (float)((float)-(float)(v41 * v36) * v42));
                  ++v31;
                  v38 += 2;
                  if (v13 == v31) {
                    goto LABEL_36;
                  }
                }
              }
            }
          }
        }
      }
      std::terminate();
    }
LABEL_36:
    dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
    std::mutex::~mutex(&v56);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
    a1 = v49;
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    uint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  uint64_t v44 = *(void *)(a1 + 48);
  uint64_t v45 = *(_DWORD **)v44;
  uint64_t v46 = *(_DWORD **)(v44 + 8);
  if (*(_DWORD **)v44 != v46)
  {
    do
    {
      if (!*v45)
      {
        uint64_t v47 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        dmlc::LogMessageFatal::Entry::Init(v47, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
        uint64_t v48 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"TweedieRegression: label must be nonnegative", 44);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
      }
      ++v45;
    }
    while (v45 != v46);
  }
}

void sub_22E8BBD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, std::exception_ptr a19)
{
  std::mutex::~mutex(v19);
  std::exception_ptr::~exception_ptr(&a19);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::TweedieRegression::DefaultEvalMetric(xgboost::obj::TweedieRegression *this)
{
  uint64_t result = (uint64_t)this + 16;
  if (*((char *)this + 39) < 0) {
    return *(void *)result;
  }
  return result;
}

void xgboost::obj::TweedieRegression::PredTransform(uint64_t a1, float ***a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a2;
  unint64_t v2 = (*a2)[1];
  v6.__ptr_ = 0;
  v7.__m_.__sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v2 == 0;
    }
    if (v4)
    {
      uint64_t v5 = v2 - v3;
      while (v5)
      {
        *uint64_t v3 = expf(*v3);
        ++v3;
        if (!--v5) {
          goto LABEL_10;
        }
      }
    }
    std::terminate();
  }
LABEL_10:
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E8BBEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::TweedieRegression::Task(xgboost::obj::TweedieRegression *this)
{
  return 0;
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_prune__(xgboost::tree *this)
{
  return 0;
}

void std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]()
{
}

void std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::~__func()
{
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

void *std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E245570;
  return result;
}

{
  void *result;

  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E247E68;
  return result;
}

{
  void *result;

  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E24A900;
  return result;
}

{
  void *result;

  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E24AB78;
  return result;
}

{
  void *result;

  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E24B060;
  return result;
}

{
  void *result;

  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E24BA40;
  return result;
}

{
  void *result;

  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E24C028;
  return result;
}

void std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator()()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_22E8BC08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  xgboost::common::Monitor::~Monitor(v17);
  xgboost::tree::TrainParam::~TrainParam(v16);
  uint64_t v19 = *(void *)(v15 + 16);
  *(void *)(v15 + 16) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  MEMORY[0x230FA80D0](v15, 0x10F3C40AD1C881BLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::target_type()
{
}

{
}

{
}

{
}

{
}

{
}

{
}

void xgboost::tree::TrainParam::~TrainParam(void **this)
{
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  unint64_t v2 = this[10];
  if (v2)
  {
    this[11] = v2;
    operator delete(v2);
  }
}

void xgboost::tree::TreePruner::~TreePruner(xgboost::tree::TreePruner *this)
{
  *(void *)this = &unk_26E2455F0;
  xgboost::common::Monitor::~Monitor((char **)this + 20);
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  unint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_26E2455F0;
  xgboost::common::Monitor::~Monitor((char **)this + 20);
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  unint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::tree::TreePruner::LoadConfig(xgboost::tree::TreePruner *this, const xgboost::Json *a2)
{
  uint64_t v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  BOOL v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::TrainParam>(v4, (xgboost::tree::TreePruner *)((char *)this + 24), &v7);
  uint64_t v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E8BC36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::TreePruner::SaveConfig(xgboost::tree::TreePruner *this, xgboost::Json *a2)
{
  xgboost::ToJson<xgboost::tree::TrainParam>((xgboost::tree::TreePruner *)((char *)this + 24), v4);
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E8BC43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

uint64_t xgboost::tree::TreePruner::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::TrainParam *)(a1 + 24), a2, v5);
  char v6 = (void **)v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2);
}

uint64_t xgboost::tree::TreePruner::CanModifyTree(xgboost::tree::TreePruner *this)
{
  return 1;
}

void xgboost::tree::TreePruner::Update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "PrunerUpdate");
  xgboost::common::Monitor::Start();
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  float v8 = *(float *)(a1 + 28);
  char v10 = *a4;
  int v9 = a4[1];
  uint64_t v24 = a4;
  *(float *)(a1 + 28) = v8 / (float)(unint64_t)(v9 - *a4);
  if (v9 != v10)
  {
    uint64_t v11 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst();
    do
    {
      uint64_t v12 = *v10;
      int v13 = *(_DWORD *)(*v10 + 12);
      if (v13 >= 1)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        do
        {
          uint64_t v16 = *(void *)(v12 + 160);
          uint64_t v17 = (int *)(v16 + 20 * v14);
          if (v17[1] == -1 && *(_DWORD *)(v16 + 20 * v14 + 12) != -1)
          {
            int v18 = *v17;
            if (*v17 == -1)
            {
              int v19 = 0;
            }
            else
            {
              int v19 = 0;
              do
              {
                ++v19;
                int v18 = *(_DWORD *)(v16 + 20 * (v18 & 0x7FFFFFFF));
              }
              while (v18 != -1);
            }
            uint64_t v15 = xgboost::tree::TreePruner::TryPruneLeaf((xgboost::tree::TreePruner *)a1, (xgboost::RegTree *)v12, v14, v19, v15);
            int v13 = *(_DWORD *)(v12 + 12);
          }
          ++v14;
        }
        while (v14 < v13);
      }
      if (*(int *)(v11 + 4) > 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_prune.cc");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)v25, 101, 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"tree pruning end, ", 18);
        uint64_t v20 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" extra nodes, ", 14);
        uint64_t v21 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" pruned nodes, max_depth=", 25);
        xgboost::RegTree::MaxDepth((xgboost::RegTree *)v12, 0);
        std::ostream::operator<<();
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
        if (v26 < 0) {
          operator delete(v25[0]);
        }
      }
      ++v10;
    }
    while (v10 != v9);
  }
  *(float *)(a1 + 28) = v8;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t **))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16), v22, v23, v24);
  std::string::basic_string[abi:ne180100]<0>(__p, "PrunerUpdate");
  xgboost::common::Monitor::Stop();
  if (v28 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E8BC7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::TreeUpdater::UpdatePredictionCache()
{
  return 0;
}

const char *xgboost::tree::TreePruner::Name(xgboost::tree::TreePruner *this)
{
  return "prune";
}

std::chrono::steady_clock::time_point *xgboost::common::Monitor::Monitor(std::chrono::steady_clock::time_point *this)
{
  unint64_t v2 = std::string::basic_string[abi:ne180100]<0>(this, (char *)&unk_22EA3D4EA);
  v2[4] = 0;
  uint64_t v2[3] = v2 + 4;
  v2[6] = 0;
  v2[7] = 0;
  v2[5] = 0;
  this[6].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  this[6].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  return this;
}

void xgboost::common::Monitor::~Monitor(char **this)
{
  this[7] += std::chrono::steady_clock::now().__d_.__rep_ - (void)this[6];
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy((uint64_t)(this + 3), this[4]);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void xgboost::FromJson<xgboost::tree::TrainParam>(_DWORD **a1@<X0>, xgboost::tree::TrainParam *a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  uint64_t v5 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*a1);
  v14[0] = 0;
  v14[1] = 0;
  int v13 = (uint64_t *)v14;
  char v6 = (void *)v5[2];
  std::vector<std::pair<std::string, std::string>> v7 = v5 + 3;
  if (v6 != v5 + 3)
  {
    do
    {
      float v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v6[7]);
      uint64_t v15 = (long long *)(v6 + 4);
      int v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      char v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          char v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          char v6 = v11;
        }
        while (!v12);
      }
      char v6 = v11;
    }
    while (v11 != v7);
  }
  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(a2, (uint64_t)&v13, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_22E8BC99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t std::map<std::string,xgboost::Json>::at(uint64_t a1, const void **a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 56;
}

void xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::tree::TrainParam *this@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  if (*(unsigned char *)this)
  {
    dmlc::Parameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(this, a2, a3);
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
    char v6 = xgboost::tree::TrainParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)this, *(void **)a2, (void *)(a2 + 8), a3, 0);
    *(unsigned char *)this = 1;
  }
}

void sub_22E8BCA94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void dmlc::Parameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::tree::TrainParam *a1@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  char v6 = xgboost::tree::TrainParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)a1, *(void **)a2, (void *)(a2 + 8), 0, a3, 0);
}

void sub_22E8BCB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::ToJson<xgboost::tree::TrainParam>(xgboost::tree::TrainParam *a1@<X0>, void *a2@<X8>)
{
  a2[1] = 0x300000000;
  *a2 = &unk_26E24E128;
  a2[3] = 0;
  a2[2] = a2 + 3;
  a2[4] = 0;
  uint64_t v3 = xgboost::tree::TrainParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)v3, &v5);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v6, (const void **)&v5.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v5.__end_->first.__r_.__value_.__l.__data_);
  float v8 = &v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  uint64_t v4 = v6;
  if ((void **)v6 != &v7)
  {
    xgboost::JsonString::JsonString(&v5, (long long *)(v6 + 56));
    float v8 = (std::vector<std::pair<std::string, std::string>> *)(v4 + 32);
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 2), (const void **)(v4 + 32), (uint64_t)&std::piecewise_construct, (long long **)&v8);
    xgboost::Json::operator=();
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v6, v7);
}

void sub_22E8BCC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(void *)uint64_t v21 = v22;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v23, *(void **)(v21 + 24));
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::tree::TrainParam *this@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)this)
  {
    dmlc::Parameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(this, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = xgboost::tree::TrainParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)this, *a2, a2[1], a3, 0);
    *(unsigned char *)this = 1;
  }
}

void sub_22E8BCDB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *dmlc::Parameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>@<X0>(xgboost::tree::TrainParam *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = xgboost::tree::TrainParam::__MANAGER__(a1);
  return dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)a1, *a2, a2[1], 0, a3, 0);
}

void sub_22E8BCE24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::TreePruner::TryPruneLeaf(xgboost::tree::TreePruner *this, xgboost::RegTree *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10 = *((void *)a2 + 20);
  if (*(_DWORD *)(v10 + 20 * a3 + 4) != -1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_prune.cc");
    uint64_t v22 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: tree[nid].IsLeaf()", 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
    uint64_t v10 = *((void *)a2 + 20);
  }
  int v11 = *(_DWORD *)(v10 + 20 * a3);
  if (v11 != -1)
  {
    uint64_t v12 = v11 & 0x7FFFFFFF;
    int v13 = *(_DWORD *)(v10 + 20 * v12 + 4);
    if (v13 == -1)
    {
      uint64_t v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
      dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_prune.cc");
      uint64_t v25 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
      char v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: !tree[pid].IsLeaf()", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v27);
      uint64_t v10 = *((void *)a2 + 20);
      int v13 = *(_DWORD *)(v10 + 20 * v12 + 4);
    }
    int v14 = *(_DWORD *)(v10 + 20 * v12 + 8);
    if (*(_DWORD *)(v10 + 20 * v13 + 4) == -1 && v14 != -1 && *(_DWORD *)(v10 + 20 * v14 + 4) == -1)
    {
      uint64_t v16 = *((void *)a2 + 26);
      if (*((float *)this + 8) > *(float *)(v16 + 16 * v12) || (int v17 = *((_DWORD *)this + 9)) != 0 && v17 < a4)
      {
        float v18 = *((float *)this + 7) * *(float *)(v16 + 16 * v12 + 8);
        xgboost::RegTree::DeleteNode(a2, v13);
        xgboost::RegTree::DeleteNode(a2, *(_DWORD *)(*((void *)a2 + 20) + 20 * v12 + 8));
        uint64_t v19 = *((void *)a2 + 20) + 20 * v12;
        *(float *)(v19 + 16) = v18;
        *(void *)(v19 + 4) = -1;
        return xgboost::tree::TreePruner::TryPruneLeaf(this, a2, v12, a4 - 1, (int)a5 + 2);
      }
    }
  }
  return a5;
}

void sub_22E8BD040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
}

void xgboost::RegTree::DeleteNode(xgboost::RegTree *this, int a2)
{
  int v19 = 1;
  int v20 = a2;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  unint64_t v4 = *((void *)this + 25);
  uint64_t v5 = *((void *)this + 20) + 20 * (*(_DWORD *)(*((void *)this + 20) + 20 * a2) & 0x7FFFFFFF);
  int v7 = *(_DWORD *)(v5 + 4);
  uint64_t v6 = (_DWORD *)(v5 + 4);
  if (v7 != a2) {
    ++v6;
  }
  _DWORD *v6 = -1;
  float v8 = (int *)*((void *)this + 24);
  if ((unint64_t)v8 >= v4)
  {
    uint64_t v10 = (int *)*((void *)this + 23);
    uint64_t v11 = v8 - v10;
    if ((unint64_t)(v11 + 1) >> 62) {
      std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = v4 - (void)v10;
    unint64_t v13 = (uint64_t)(v4 - (void)v10) >> 1;
    if (v13 <= v11 + 1) {
      unint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 200, v14);
      uint64_t v10 = (int *)*((void *)this + 23);
      float v8 = (int *)*((void *)this + 24);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (int *)&v15[4 * v11];
    int v17 = &v15[4 * v14];
    int *v16 = a2;
    int v9 = v16 + 1;
    while (v8 != v10)
    {
      int v18 = *--v8;
      *--uint64_t v16 = v18;
    }
    *((void *)this + 23) = v16;
    *((void *)this + 24) = v9;
    *((void *)this + 25) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *float v8 = a2;
    int v9 = v8 + 1;
  }
  *((void *)this + 24) = v9;
  *(_DWORD *)(*((void *)this + 20) + 20 * a2 + 12) = -1;
  ++*((_DWORD *)this + 4);
}

void sub_22E8BD260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  uint64_t v12 = a9;
  a9 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

uint64_t xgboost::RegTree::MaxDepth(xgboost::RegTree *this, int a2)
{
  if (*(_DWORD *)(*((void *)this + 20) + 20 * a2 + 4) == -1) {
    return 0;
  }
  unsigned int v4 = xgboost::RegTree::MaxDepth(this, *(_DWORD *)(*((void *)this + 20) + 20 * a2 + 4)) + 1;
  int v5 = xgboost::RegTree::MaxDepth(this, *(_DWORD *)(*((void *)this + 20) + 20 * a2 + 8));
  if ((int)v4 <= v5 + 1) {
    return (v5 + 1);
  }
  else {
    return v4;
  }
}

uint64_t xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::SketchContainerImpl(uint64_t a1, uint64_t a2, int a3, unint64_t *a4, char a5, int a6)
{
  uint64_t v10 = a1;
  uint64_t v52 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::vector<xgboost::FeatureType>::vector<xgboost::common::detail::SpanIterator<xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,true>,0>((void *)(a1 + 48), a4, 0, a4, *a4);
  *(void *)(v10 + 72) = 0;
  *(void *)(v10 + 80) = 0;
  v10 += 72;
  *(void *)(v10 + 16) = 0;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *(void *)(v10 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(v10 + 24) = a3;
  *(unsigned char *)(v10 + 28) = a5;
  *(_DWORD *)(v10 + 32) = a6;
  *(unsigned char *)(v10 + 36) = 0;
  xgboost::common::Monitor::Monitor((std::chrono::steady_clock::time_point *)(v10 + 40));
  uint64_t v11 = a1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "SketchContainerImpl");
  std::string::operator=((std::string *)(v10 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  int v56 = 0;
  uint64_t v14 = v12 - v13;
  uint64_t v57 = v14 >> 3;
  if (!v14) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  uint64_t v15 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
  unint64_t v16 = v15 >> 3;
  int v17 = *(char **)a1;
  int v18 = *(char **)(a1 + 8);
  unint64_t v19 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v18[-*(void *)a1] >> 3);
  unint64_t v20 = (v15 >> 3) - v19;
  if (v15 >> 3 <= v19)
  {
    if (v15 >> 3 < v19)
    {
      float v43 = &v17[136 * v16];
      while (v18 != v43)
      {
        v18 -= 136;
        std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100](a1 + 16, (uint64_t)v18);
      }
      *(void *)(a1 + 8) = v43;
    }
  }
  else
  {
    uint64_t v21 = *(char **)(a1 + 16);
    if (0xF0F0F0F0F0F0F0F1 * ((v21 - v18) >> 3) >= v20)
    {
      size_t v44 = 136 * ((136 * v20 - 136) / 0x88) + 136;
      bzero(v18, v44);
      *(void *)(a1 + 8) = &v18[v44];
    }
    else
    {
      if ((unint64_t)v15 >= 0xF0F0F0F0F0F0F09) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0xE1E1E1E1E1E1E1E2 * ((v21 - v17) >> 3) > v16) {
        unint64_t v16 = 0xE1E1E1E1E1E1E1E2 * ((v21 - v17) >> 3);
      }
      if (0xF0F0F0F0F0F0F0F1 * ((v21 - v17) >> 3) >= 0xF0F0F0F0F0F0F0) {
        unint64_t v22 = 0x1E1E1E1E1E1E1E1;
      }
      else {
        unint64_t v22 = v16;
      }
      uint64_t v61 = a1 + 16;
      if (v22 > 0x1E1E1E1E1E1E1E1) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v23 = (char *)operator new(136 * v22);
      uint64_t v24 = &v23[136 * v19];
      v58 = v23;
      v59.i64[0] = (uint64_t)v24;
      uint64_t v25 = &v23[136 * v22];
      uint64_t v60 = v25;
      size_t v26 = 136 * ((136 * v20 - 136) / 0x88) + 136;
      bzero(v24, v26);
      char v27 = &v24[v26];
      v59.i64[1] = (uint64_t)&v24[v26];
      if (v18 == v17)
      {
        int64x2_t v42 = vdupq_n_s64((unint64_t)v18);
        uint64_t v11 = a1;
      }
      else
      {
        uint64_t v28 = 0;
        do
        {
          uint64_t v29 = &v24[v28];
          uint64_t v30 = &v24[v28];
          *((void *)v30 - 17) = 0;
          *((void *)v30 - 16) = 0;
          unint64_t v31 = &v24[v28 - 136];
          *((void *)v31 + 2) = 0;
          std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__init_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Queue::QEntry*,xgboost::common::WQSummary<float,float>::Queue::QEntry*>(v31, *(const void **)&v18[v28 - 136], *(void *)&v18[v28 - 128], (uint64_t)(*(void *)&v18[v28 - 128] - *(void *)&v18[v28 - 136]) >> 3);
          *((void *)v29 - 14) = *(void *)&v18[v28 - 112];
          long long v32 = *(_OWORD *)&v18[v28 - 104];
          *((void *)v29 - 11) = 0;
          uint64_t v33 = &v24[v28 - 88];
          *((_OWORD *)v33 - 1) = v32;
          *((void *)v33 + 1) = 0;
          *((void *)v33 + 2) = 0;
          unint64_t v35 = *(unsigned char **)&v18[v28 - 88];
          uint64_t v34 = *(unsigned char **)&v18[v28 - 80];
          int64_t v36 = v34 - v35;
          if (v34 != v35)
          {
            if (v36 < 0) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            float v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>>>(v36 >> 4);
            float v38 = &v24[v28];
            *(void *)uint64_t v33 = v37;
            *((void *)v38 - 10) = v37;
            *((void *)v38 - 9) = &v37[16 * v39];
            memmove(v37, v35, v36);
            *((void *)v38 - 10) = &v37[16 * (v36 >> 4)];
          }
          float v40 = &v24[v28];
          *((void *)v40 - 8) = 0;
          *((void *)v40 - 7) = 0;
          float v41 = &v24[v28 - 64];
          *((void *)v41 + 2) = 0;
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__init_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry*,xgboost::common::WQSummary<float,float>::Entry*>(v41, *(const void **)&v18[v28 - 64], *(void *)&v18[v28 - 56], (uint64_t)(*(void *)&v18[v28 - 56] - *(void *)&v18[v28 - 64]) >> 4);
          xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer::SummaryContainer((uint64_t)&v24[v28 - 40], (uint64_t)&v18[v28 - 40]);
          v28 -= 136;
        }
        while (&v18[v28] != v17);
        uint64_t v11 = a1;
        int64x2_t v42 = *(int64x2_t *)a1;
        uint64_t v21 = *(char **)(a1 + 16);
        v24 += v28;
        char v27 = (char *)v59.i64[1];
        uint64_t v25 = v60;
      }
      *(void *)uint64_t v11 = v24;
      *(void *)(v11 + 8) = v27;
      int64x2_t v59 = v42;
      *(void *)(v11 + 16) = v25;
      uint64_t v60 = v21;
      v58 = (char *)v42.i64[0];
      std::__split_buffer<xgboost::common::WQuantileSketch<float,float>>::~__split_buffer((uint64_t)&v58);
    }
  }
  int v45 = *(_DWORD *)(v11 + 104);
  int v55 = 1;
  int v56 = v45;
  if (v45 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  std::vector<std::set<float>>::resize(v52, (uint64_t)(*(void *)(v11 + 80) - *(void *)(v11 + 72)) >> 3);
  uint64_t v47 = *(void *)(v11 + 48);
  uint64_t v46 = *(void *)(v11 + 56);
  if (v47 == v46)
  {
    BOOL v49 = 0;
  }
  else
  {
    uint64_t v48 = v47 + 1;
    do
    {
      BOOL v49 = *(unsigned char *)(v48 - 1) == 1;
      BOOL v50 = *(unsigned char *)(v48 - 1) == 1 || v48 == v46;
      ++v48;
    }
    while (!v50);
  }
  *(unsigned char *)(v11 + 108) = v49;
  return v11;
}

void sub_22E8BD894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xgboost::common::Monitor *a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  xgboost::common::Monitor::~Monitor(v23);
  uint64_t v25 = *a11;
  if (*a11)
  {
    *(void *)(a14 + 80) = v25;
    operator delete(v25);
  }
  size_t v26 = *a12;
  if (*a12)
  {
    *(void *)(a14 + 56) = v26;
    operator delete(v26);
  }
  a22 = a13;
  std::vector<std::set<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = a14;
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void std::vector<std::set<float>>::resize(void **a1, unint64_t a2)
{
  int v5 = (char *)*a1;
  unsigned int v4 = (char *)a1[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 > v6)
  {
    float v8 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3) >= v7)
    {
      char v27 = &v4[24 * v7];
      uint64_t v28 = 24 * a2 - 8 * ((v4 - (unsigned char *)*a1) >> 3);
      uint64_t v29 = v4 + 8;
      do
      {
        *uint64_t v29 = 0;
        v29[1] = 0;
        *(v29 - 1) = v29;
        v29 += 3;
        v28 -= 24;
      }
      while (v28);
      a1[1] = v27;
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v5) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a2) {
      uint64_t v10 = a2;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(24 * v11);
    uint64_t v13 = &v12[24 * v6];
    uint64_t v14 = &v12[24 * a2];
    uint64_t v15 = v13 + 8;
    uint64_t v16 = 24 * a2 - 24 * v6;
    do
    {
      *uint64_t v15 = 0;
      v15[1] = 0;
      *(v15 - 1) = v15;
      v15 += 3;
      v16 -= 24;
    }
    while (v16);
    int v17 = &v12[24 * v11];
    if (v4 == v5)
    {
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v17;
      if (!v4) {
        return;
      }
    }
    else
    {
      uint64_t v18 = 0;
      do
      {
        unint64_t v19 = &v13[v18];
        *((void *)v19 - 3) = *(void *)&v4[v18 - 24];
        unint64_t v20 = &v4[v18 - 16];
        uint64_t v21 = *(void *)v20;
        *(void *)&v13[v18 - 16] = *(void *)v20;
        uint64_t v22 = (uint64_t)&v13[v18 - 16];
        uint64_t v23 = *(void *)&v4[v18 - 8];
        *((void *)v19 - 1) = v23;
        if (v23)
        {
          *(void *)(v21 + 16) = v22;
          *(void *)&v4[v18 - 24] = v20;
          *(void *)unint64_t v20 = 0;
          *(void *)&v4[v18 - 8] = 0;
        }
        else
        {
          *((void *)v19 - 3) = v22;
        }
        v18 -= 24;
      }
      while (&v4[v18] != v5);
      unsigned int v4 = (char *)*a1;
      uint64_t v24 = (char *)a1[1];
      *a1 = &v13[v18];
      a1[1] = v14;
      a1[2] = v17;
      if (v24 != v4)
      {
        do
        {
          uint64_t v25 = v24 - 24;
          std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy((uint64_t)(v24 - 24), *((void **)v24 - 2));
          uint64_t v24 = v25;
        }
        while (v25 != v4);
      }
      if (!v4) {
        return;
      }
    }
    operator delete(v4);
    return;
  }
  if (a2 < v6)
  {
    for (unint64_t i = &v5[24 * a2]; v4 != i; v4 -= 24)
      std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
    a1[1] = i;
  }
}

BOOL xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::UseGroup(void *a1)
{
  return a1[7] - a1[6] >= 8uLL && *a1 != (uint64_t)(*(void *)(a1[9] + 8) - *(void *)a1[9]) >> 2;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(uint64_t **a1@<X0>, unsigned int a2@<W1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v4 = a3;
  unint64_t v7 = a1[1];
  uint64_t v8 = **a1;
  uint64_t v9 = ((*a1)[1] - v8) >> 3;
  v17[0] = v9;
  v17[1] = v8;
  unint64_t v11 = v7;
  uint64_t v10 = *v7;
  v17[2] = (v11[1] - v10) >> 3;
  void v17[3] = v10;
  std::vector<std::vector<unsigned long>>::vector(&v15, a3);
  uint64_t v12 = v15;
  for (unint64_t i = v16; v12 != i; v12 += 3)
  {
    uint64_t v18 = 0;
    std::vector<unsigned long>::resize((uint64_t)v12, a2, &v18);
  }
  if (v9) {
    uint64_t v14 = v9 - 1;
  }
  else {
    uint64_t v14 = 0;
  }
  xgboost::common::ParallelFor<unsigned long,xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1}>(v14, v4, 2, 0, (uint64_t)&v15, (uint64_t)v17);
  uint64_t v18 = 0;
  std::vector<unsigned long>::vector(a4, a2, &v18);
  xgboost::common::ParallelFor<unsigned int,xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda#1}>(a2, v4, 2, 0, &v15, a4);
  uint64_t v18 = (void **)&v15;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v18);
}

void sub_22E8BDD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  uint64_t v18 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v18;
    operator delete(v18);
  }
  a16 = (void **)&a9;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((void **)a1, a2 - v3, a3);
  }
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::LoadBalance(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t v9 = (uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 3;
  std::vector<std::vector<unsigned long>>::vector(&v7, a3);
  uint64_t v4 = v7;
  for (uint64_t i = v8; v4 != i; v4 += 24)
  {
    long long __p = 0;
    std::vector<unsigned long>::resize(v4, a2, &__p);
  }
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize();
}

void sub_22E8BE064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, char *__p, char *a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a16 = __p;
    operator delete(__p);
  }
  long long __p = &a18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::SearchGroupIndFromRow(uint64_t *a1, unint64_t a2)
{
  if (*(unsigned int *)(a1[1] - 4) <= a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  uint64_t v2 = a1[1] - 4;
  if (v2 != *a1)
  {
    unint64_t v3 = (v2 - *a1) >> 2;
    uint64_t v2 = *a1;
    do
    {
      unint64_t v4 = v3 >> 1;
      int v5 = (unsigned int *)(v2 + 4 * (v3 >> 1));
      unsigned int v7 = *v5;
      unint64_t v6 = v5 + 1;
      v3 += ~(v3 >> 1);
      if (a2 < v7) {
        unint64_t v3 = v4;
      }
      else {
        uint64_t v2 = (uint64_t)v6;
      }
    }
    while (v3);
  }
  return ((unint64_t)(v2 - *a1) >> 2) - 1;
}

void sub_22E8BE240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::GatherSketchInfo(uint64_t *a1, uint64_t *a2, char **a3, uint64_t *a4, uint64_t a5)
{
  *(void *)&long long v87 = 0;
  std::vector<unsigned long>::resize((uint64_t)a3, 1uLL, &v87);
  Engine = rabit::engine::GetEngine(v9);
  uint64_t v80 = (rabit::engine *)(*(uint64_t (**)(void *))(*(void *)Engine + 72))(Engine);
  unint64_t v11 = rabit::engine::GetEngine(v80);
  int v12 = (*(uint64_t (**)(void *))(*(void *)v11 + 64))(v11);
  uint64_t v81 = a1[1];
  int v78 = v12;
  uint64_t v79 = *a1;
  long long __p = 0;
  uint64_t v85 = 0;
  int v86 = 0;
  uint64_t v13 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = a1[6];
      unint64_t v17 = a1[7] - v16;
      if (v17)
      {
        if (v17 <= v15) {
LABEL_81:
        }
          std::terminate();
        int v18 = *(unsigned __int8 *)(v16 + v15);
        unint64_t v19 = (unint64_t)v86;
        if (v18 == 1)
        {
          if (v14 >= v86)
          {
            uint64_t v23 = (char *)__p;
            uint64_t v29 = (v14 - (unsigned char *)__p) >> 3;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61) {
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v31 = v86 - (unsigned char *)__p;
            if ((v86 - (unsigned char *)__p) >> 2 > v30) {
              unint64_t v30 = v31 >> 2;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v30;
            }
            if (v27)
            {
              uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v86, v27);
              uint64_t v23 = (char *)__p;
              uint64_t v14 = v85;
            }
            else
            {
              uint64_t v28 = 0;
            }
            long long v32 = &v28[8 * v29];
            *(void *)long long v32 = 0;
            uint64_t v22 = v32 + 8;
            while (v14 != v23)
            {
              uint64_t v34 = *((void *)v14 - 1);
              v14 -= 8;
              *((void *)v32 - 1) = v34;
              v32 -= 8;
            }
LABEL_36:
            long long __p = v32;
            uint64_t v85 = v22;
            int v86 = &v28[8 * v27];
            if (v23) {
              operator delete(v23);
            }
            goto LABEL_38;
          }
          *(void *)uint64_t v14 = 0;
          unint64_t v20 = v14 + 8;
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v19 = (unint64_t)v86;
      }
      uint64_t v21 = (void *)(v13 + 40 * v15 + 8);
      if ((unint64_t)v14 >= v19)
      {
        uint64_t v23 = (char *)__p;
        uint64_t v24 = (v14 - (unsigned char *)__p) >> 3;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = v19 - (void)__p;
        if (v26 >> 2 > v25) {
          unint64_t v25 = v26 >> 2;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v86, v27);
          uint64_t v23 = (char *)__p;
          uint64_t v14 = v85;
        }
        else
        {
          uint64_t v28 = 0;
        }
        long long v32 = &v28[8 * v24];
        *(void *)long long v32 = *v21;
        uint64_t v22 = v32 + 8;
        while (v14 != v23)
        {
          uint64_t v33 = *((void *)v14 - 1);
          v14 -= 8;
          *((void *)v32 - 1) = v33;
          v32 -= 8;
        }
        goto LABEL_36;
      }
      *(void *)uint64_t v14 = *v21;
      unint64_t v20 = v14 + 8;
LABEL_11:
      uint64_t v22 = v20;
LABEL_38:
      uint64_t v85 = v22;
      ++v15;
      uint64_t v13 = *a2;
      uint64_t v14 = v22;
    }
    while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  }
  unint64_t v35 = 0xF0F0F0F0F0F0F0F1 * ((v81 - v79) >> 3) + 1;
  *(void *)&long long v87 = 0;
  std::vector<unsigned long>::resize((uint64_t)a4, v35 * (int)v80, &v87);
  float v37 = v85;
  uint64_t v38 = *a4;
  if (__p != v85)
  {
    uint64_t v39 = v38 + 8 * v35 * v78;
    float v40 = (uint64_t *)((char *)__p + 8);
    uint64_t v41 = *(void *)__p;
    *(void *)(v39 + 8) = *(void *)__p;
    if (v40 != (uint64_t *)v37)
    {
      int64x2_t v42 = (void *)(v39 + 16);
      do
      {
        uint64_t v43 = *v40++;
        v41 += v43;
        *v42++ = v41;
      }
      while (v40 != (uint64_t *)v37);
    }
  }
  uint64_t v44 = a4[1];
  int v45 = rabit::engine::GetEngine(v36);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t *(*)(uint64_t *, void *, int), void, void))(*(void *)v45 + 8))(v45, v38, 8, (v44 - v38) >> 3, rabit::op::Reducer<rabit::op::Sum,unsigned long>, 0, 0);
  if ((int)v80 <= 0)
  {
    uint64_t v51 = a3[1];
  }
  else
  {
    uint64_t v46 = 0;
    do
    {
      unint64_t v47 = ++v46 * v35 - 1;
      if (v47 >= (a4[1] - *a4) >> 3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v48 = *(void *)(*a4 + 8 * v47);
      BOOL v50 = a3[1];
      unint64_t v49 = (unint64_t)a3[2];
      if ((unint64_t)v50 >= v49)
      {
        uint64_t v52 = *a3;
        uint64_t v53 = (v50 - *a3) >> 3;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v55 = v49 - (void)v52;
        if (v55 >> 2 > v54) {
          unint64_t v54 = v55 >> 2;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v54;
        }
        if (v56)
        {
          uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a3 + 2), v56);
          uint64_t v52 = *a3;
          BOOL v50 = a3[1];
        }
        else
        {
          uint64_t v57 = 0;
        }
        v58 = &v57[8 * v53];
        *(void *)v58 = v48;
        uint64_t v51 = v58 + 8;
        while (v50 != v52)
        {
          uint64_t v59 = *((void *)v50 - 1);
          v50 -= 8;
          *((void *)v58 - 1) = v59;
          v58 -= 8;
        }
        *a3 = v58;
        a3[1] = v51;
        a3[2] = &v57[8 * v56];
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        *(void *)BOOL v50 = v48;
        uint64_t v51 = v50 + 8;
      }
      a3[1] = v51;
    }
    while (v46 != v80);
  }
  uint64_t v60 = (uint64_t *)*a3;
  if (*a3 == v51)
  {
    v82[0] = 0;
    int v83 = 1;
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  uint64_t v61 = (char *)(v60 + 1);
  if (v60 + 1 != (uint64_t *)v51)
  {
    uint64_t v62 = *v60;
    do
    {
      v62 += *(void *)v61;
      *(void *)uint64_t v61 = v62;
      v61 += 8;
    }
    while (v61 != v51);
  }
  unint64_t v63 = *((void *)a3[1] - 1);
  long long v87 = 0uLL;
  std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((void **)a5, v63, &v87);
  uint64_t v64 = *(void **)a5;
  *(void *)&long long v87 = (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 4;
  *((void *)&v87 + 1) = v64;
  uint64_t v65 = xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>::subspan(v82, &v87, *(void *)&(*a3)[8 * v78], *(void *)&(*a3)[8 * v78 + 8] - *(void *)&(*a3)[8 * v78]);
  uint64_t v67 = *a2;
  uint64_t v66 = a2[1];
  if (v66 != *a2)
  {
    uint64_t v68 = 0;
    unint64_t v69 = 0;
    unint64_t v70 = 0;
    uint64_t v71 = v82;
    do
    {
      uint64_t v72 = a1[6];
      unint64_t v73 = a1[7] - v72;
      if (!v73) {
        goto LABEL_76;
      }
      if (v73 <= v69) {
        goto LABEL_81;
      }
      if (*(unsigned char *)(v72 + v69) != 1)
      {
LABEL_76:
        uint64_t v65 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry *,xgboost::common::WQSummary<float,float>::Entry *,xgboost::common::detail::SpanIterator<xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>,false>>(&v87, *(_OWORD **)(v67 + v68), (_OWORD *)(*(void *)(v67 + v68) + 16 * *(void *)(v67 + v68 + 8)), v71, v70);
        uint64_t v71 = (unint64_t *)*((void *)&v87 + 1);
        unint64_t v70 = v88;
        uint64_t v67 = *a2;
        uint64_t v66 = a2[1];
      }
      ++v69;
      v68 += 40;
    }
    while (v69 < 0xCCCCCCCCCCCCCCCDLL * ((v66 - v67) >> 3));
  }
  uint64_t v75 = *(void **)a5;
  uint64_t v74 = *(void *)(a5 + 8);
  uint64_t v76 = rabit::engine::GetEngine((rabit::engine *)v65);
  (*(void (**)(void *, void *, uint64_t, unint64_t, float (*)(float *, float *, int), void, void))(*(void *)v76 + 8))(v76, v75, 4, ((unint64_t)(v74 - (void)v75) >> 2) & 0x3FFFFFFFFFFFFFFCLL, rabit::op::Reducer<rabit::op::Sum,float>, 0, 0);
  if (__p)
  {
    uint64_t v85 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22E8BE908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(void **a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v6 = (char *)*a1;
  int v5 = (char *)a1[1];
  unint64_t v7 = (v5 - (unsigned char *)*a1) >> 4;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[16 * a2];
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = a1[2];
    if (a2 - v7 <= (v10 - v5) >> 4)
    {
      uint64_t v23 = &v5[16 * (a2 - v7)];
      uint64_t v24 = 16 * a2 - 16 * v7;
      do
      {
        *(_OWORD *)int v5 = *a3;
        v5 += 16;
        v24 -= 16;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v10 - v6;
      unint64_t v12 = (v10 - v6) >> 3;
      if (v12 <= a2) {
        unint64_t v12 = a2;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v9, v13);
      uint64_t v16 = &v14[16 * v7];
      unint64_t v17 = &v14[16 * a2];
      uint64_t v18 = 16 * a2 - 16 * v7;
      unint64_t v19 = v16;
      do
      {
        *(_OWORD *)unint64_t v19 = *a3;
        v19 += 16;
        v18 -= 16;
      }
      while (v18);
      unint64_t v20 = &v14[16 * v15];
      uint64_t v22 = (char *)*a1;
      uint64_t v21 = (char *)a1[1];
      if (v21 != *a1)
      {
        do
        {
          *((_OWORD *)v16 - 1) = *((_OWORD *)v21 - 1);
          v16 -= 16;
          v21 -= 16;
        }
        while (v21 != v22);
        uint64_t v21 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v20;
      if (v21)
      {
        operator delete(v21);
      }
    }
  }
}

unint64_t *xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>::subspan(unint64_t *result, void *a2, unint64_t a3, unint64_t a4)
{
  if (a4 == -1)
  {
    a4 = *a2 - a3;
    if (*a2 < a3) {
      goto LABEL_8;
    }
  }
  else if (a4 + a3 > *a2)
  {
    goto LABEL_8;
  }
  uint64_t v4 = a2[1];
  void *result = a4;
  result[1] = v4 + 16 * a3;
  if (a4 && !v4) {
LABEL_8:
  }
    std::terminate();
  return result;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::AllReduce(uint64_t *a1, char **a2, std::vector<int> *a3)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v93, "AllReduce");
  uint64_t v4 = (rabit::engine *)xgboost::common::Monitor::Start();
  if (v94.__m_.__opaque[7] < 0) {
    operator delete(v93.__ptr_);
  }
  unint64_t v87 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  Engine = rabit::engine::GetEngine(v4);
  (*(void (**)(void *, unint64_t *, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), void, void))(*(void *)Engine + 8))(Engine, &v87, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long>, 0, 0);
  v89[0].__ptr_ = (void *)(0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3));
  if ((void *)v87 != v89[0].__ptr_) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v6 = a1[6];
  v86[0] = a1[7] - v6;
  v86[1] = v6;
  std::vector<int>::pointer begin = a3->__begin_;
  std::vector<int>::pointer end = a3->__end_;
  LODWORD(v92[0].__ptr_) = 0;
  uint64_t v9 = (char *)end - (char *)begin;
  v89[0].__ptr_ = (void *)(v9 >> 2);
  if (v9) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  std::vector<int>::resize(a3, 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3));
  unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v11 = *a2;
  unint64_t v12 = a2[1];
  unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - *a2) >> 3);
  unint64_t v14 = v10 - v13;
  if (v10 <= v13)
  {
    if (v10 < v13)
    {
      uint64_t v24 = &v11[0xA5A5A5A5A5A5A5A8 * ((a1[1] - *a1) >> 3)];
      while (v12 != v24)
      {
        unint64_t v25 = (void *)*((void *)v12 - 3);
        if (v25)
        {
          *((void *)v12 - 2) = v25;
          operator delete(v25);
        }
        v12 -= 40;
      }
      a2[1] = v24;
    }
  }
  else
  {
    uint64_t v15 = a2[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v12) >> 3) >= v14)
    {
      size_t v26 = 40 * ((40 * v14 - 40) / 0x28) + 40;
      bzero(a2[1], v26);
      a2[1] = &v12[v26];
    }
    else
    {
      if (v10 > 0x666666666666666) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - v11) >> 3);
      if (2 * v16 > v10) {
        unint64_t v10 = 2 * v16;
      }
      if (v16 >= 0x333333333333333) {
        unint64_t v17 = 0x666666666666666;
      }
      else {
        unint64_t v17 = v10;
      }
      *(void *)&v94.__m_.__opaque[16] = a2 + 2;
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>(v17);
      unint64_t v19 = &v18[40 * v13];
      v93.__ptr_ = v18;
      v94.__m_.__sig = (uint64_t)v19;
      *(void *)&v94.__m_.__opaque[8] = &v18[40 * v20];
      size_t v21 = 40 * ((40 * v14 - 40) / 0x28) + 40;
      bzero(v19, v21);
      *(void *)v94.__m_.__opaque = &v19[v21];
      uint64_t v23 = *a2;
      uint64_t v22 = (uint64_t)a2[1];
      v92[0].__ptr_ = v19;
      v92[1].__ptr_ = v19;
      *(_OWORD *)uint64_t v84 = *(_OWORD *)&v92[0].__ptr_;
      v89[0].__ptr_ = a2 + 2;
      v89[1].__ptr_ = v84;
      __p[0] = v92;
      LOBYTE(__p[1]) = 0;
      while ((char *)v22 != v23)
      {
        v22 -= 40;
        xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer::SummaryContainer((uint64_t)(v19 - 40), v22);
        unint64_t v19 = (char *)v92[1].__ptr_ - 40;
        v92[1].__ptr_ = (char *)v92[1].__ptr_ - 40;
      }
      LOBYTE(__p[1]) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v89);
      unint64_t v27 = a2[2];
      long long v28 = *(_OWORD *)v94.__m_.__opaque;
      long long v29 = *(_OWORD *)a2;
      *a2 = v19;
      *(_OWORD *)&v94.__m_.__sig = v29;
      *(_OWORD *)(a2 + 1) = v28;
      *(void *)&v94.__m_.__opaque[8] = v27;
      v93.__ptr_ = (void *)v29;
      std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)&v93);
    }
  }
  v84[0] = 0;
  v84[1] = 0;
  uint64_t v85 = 0;
  unint64_t v30 = (rabit::engine *)std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v84, (const void *)a1[9], a1[10], (a1[10] - a1[9]) >> 3);
  uint64_t v31 = v84[0];
  long long v32 = v84[1];
  uint64_t v33 = rabit::engine::GetEngine(v30);
  (*(void (**)(void *, unsigned char *, uint64_t, int64_t, uint64_t *(*)(uint64_t *, void *, int), void, void))(*(void *)v33 + 8))(v33, v31, 8, (v32 - v31) >> 3, rabit::op::Reducer<rabit::op::Sum,unsigned long>, 0, 0);
  uint64_t v35 = *a1;
  uint64_t v34 = a1[1];
  LODWORD(v89[0].__ptr_) = *((_DWORD *)a1 + 26);
  LODWORD(v92[0].__ptr_) = 1;
  if (SLODWORD(v89[0].__ptr_) < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v93.__ptr_ = 0;
  v94.__m_.__sig = 850045863;
  memset(v94.__m_.__opaque, 0, sizeof(v94.__m_.__opaque));
  if (v34 != v35)
  {
    uint64_t v36 = 0;
    unint64_t v37 = 0xF0F0F0F0F0F0F0F1 * ((v34 - v35) >> 3);
    while (1)
    {
      unint64_t v38 = vcvts_n_u32_f32((float)*((int *)a1 + 24), 3uLL);
      unint64_t v39 = *((void *)v84[0] + v36);
      if (v39 >= v38) {
        LODWORD(v40) = v38;
      }
      else {
        uint64_t v40 = *((void *)v84[0] + v36);
      }
      if (!v39) {
        goto LABEL_87;
      }
      uint64_t v41 = a1[6];
      unint64_t v42 = a1[7] - v41;
      if (!v42) {
        break;
      }
      if (v42 <= v36) {
        std::terminate();
      }
      if (*(unsigned char *)(v41 + v36) != 1) {
        break;
      }
      uint64_t v40 = *(void *)(a1[3] + 24 * v36 + 16);
LABEL_86:
      a3->__begin_[v36] = v40;
LABEL_87:
      if (++v36 == v37) {
        goto LABEL_88;
      }
    }
    uint64_t v91 = 0;
    *(_OWORD *)&v89[0].__ptr_ = 0u;
    *(_OWORD *)long long __p = 0u;
    uint64_t v43 = (uint64_t *)(*a1 + 136 * v36);
    if (v43[7] == v43[6])
    {
      uint64_t v45 = v43[1] - *v43;
      if (!v45) {
        goto LABEL_47;
      }
      std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)__p, v45 >> 3);
    }
    else
    {
      unint64_t v44 = 2 * v43[5];
      if (!v44) {
        goto LABEL_47;
      }
      std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)__p, v44);
    }
    if (__p[1] == __p[0]) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = __p[0];
    }
    v89[0].__ptr_ = v46;
LABEL_47:
    unint64_t v47 = v43[3];
    unint64_t v48 = 126 - 2 * __clz(v47);
    if (v47) {
      uint64_t v49 = v48;
    }
    else {
      uint64_t v49 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,false>(*v43, (float *)(*v43 + 8 * v47), (uint64_t)&v88, v49, 1);
    v89[1].__ptr_ = 0;
    unint64_t v50 = v43[3];
    if (v50)
    {
      unint64_t v51 = 0;
      unint64_t v52 = 0;
      uint64_t v53 = *v43;
      ptr = (char *)v89[0].__ptr_;
      uint64_t v55 = *v43 + 12;
      float v56 = 0.0;
      do
      {
        uint64_t v57 = (float *)(v53 + 8 * v52);
        unint64_t v58 = v52 + 1;
        float v60 = *v57;
        float v59 = v57[1];
        if (v52 + 1 < v50)
        {
          uint64_t v61 = (float *)(v55 + 8 * v52);
          while (*(v61 - 1) == v60)
          {
            float v62 = *v61;
            v61 += 2;
            float v59 = v59 + v62;
            if (v50 == ++v58)
            {
              unint64_t v58 = v50;
              break;
            }
          }
        }
        unint64_t v63 = (float *)&ptr[16 * v51];
        *unint64_t v63 = v56;
        float v56 = v56 + v59;
        ++v51;
        v63[1] = v56;
        v63[2] = v59;
        v63[3] = v60;
        unint64_t v52 = v58;
      }
      while (v58 < v50);
      v89[1].__ptr_ = (void *)v51;
    }
    else
    {
      unint64_t v51 = 0;
    }
    uint64_t v64 = (void *)v43[6];
    unint64_t v65 = v43[5];
    if ((void *)v43[7] == v64)
    {
      if (v51 <= v65)
      {
LABEL_77:
        unint64_t v70 = *a2;
        uint64_t v71 = &(*a2)[40 * v36];
        uint64_t v72 = (uint64_t *)(v71 + 16);
        if ((int)v40 > (unint64_t)((uint64_t)(*((void *)v71 + 3) - *((void *)v71 + 2)) >> 4))
        {
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)v72, (int)v40);
          if (*((void *)v71 + 3) == *v72) {
            uint64_t v73 = 0;
          }
          else {
            uint64_t v73 = *v72;
          }
          *(void *)uint64_t v71 = v73;
          unint64_t v70 = *a2;
        }
        if (!*(void *)&v70[40 * v36])
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v92);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
          uint64_t v75 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v92);
          uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Check failed: reduced[i].data", 29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v92);
          unint64_t v70 = *a2;
        }
        xgboost::common::WQSummary<float,float>::SetPrune(&v70[40 * v36], (uint64_t)v89, (int)v40);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_86;
      }
      if (v65 > (v43[15] - v43[14]) >> 4)
      {
        std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(v43 + 14), v43[5]);
        if (v43[15] == v43[14]) {
          uint64_t v69 = 0;
        }
        else {
          uint64_t v69 = v43[14];
        }
        v43[12] = v69;
        unint64_t v65 = v43[5];
      }
      uint64_t v66 = (uint64_t)(v43 + 12);
      xgboost::common::WQSummary<float,float>::SetPrune(v43 + 12, (uint64_t)v89, v65);
    }
    else
    {
      xgboost::common::WQSummary<float,float>::SetPrune(v64, (uint64_t)v89, v65);
      uint64_t v66 = v43[6];
      if ((unint64_t)(v43[7] - v66) >= 0x11)
      {
        uint64_t v67 = 24;
        unint64_t v68 = 1;
        do
        {
          if (*(void *)(v66 + v67))
          {
            if (*(void *)(v66 + 8))
            {
              xgboost::common::WQSummary<float,float>::SetCombine((float32x2_t **)v89, (float32x2_t **)v66, v66 + v67 - 8);
              xgboost::common::WQSummary<float,float>::SetPrune((void *)v43[6], (uint64_t)v89, v43[5]);
            }
            else
            {
              xgboost::common::WQSummary<float,float>::CopyFrom((void *)v66, v66 + v67 - 8);
            }
          }
          ++v68;
          uint64_t v66 = v43[6];
          v67 += 16;
        }
        while (v68 < (v43[7] - v66) >> 4);
      }
    }
    xgboost::common::WQSummary<float,float>::CopyFrom(v89, v66);
    goto LABEL_77;
  }
LABEL_88:
  dmlc::OMPException::Rethrow(&v93);
  std::mutex::~mutex(&v94);
  std::exception_ptr::~exception_ptr(&v93);
  int v78 = rabit::engine::GetEngine(v77);
  int v79 = (*(uint64_t (**)(void *))(*(void *)v78 + 72))(v78);
  if (v79 != 1)
  {
    v93.__ptr_ = 0;
    std::vector<unsigned long>::vector(&v83, 1uLL, &v93);
    v93.__ptr_ = 0;
    std::vector<unsigned long>::vector(&v82, v79 * v87 + v79, &v93);
    xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::GatherSketchInfo();
  }
  std::string::basic_string[abi:ne180100]<0>(&v93, "AllReduce");
  xgboost::common::Monitor::Stop();
  if (v94.__m_.__opaque[7] < 0) {
    operator delete(v93.__ptr_);
  }
  if (v84[0])
  {
    v84[1] = v84[0];
    operator delete(v84[0]);
  }
}

void sub_22E8BFB48()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x22E8BFC24);
}

void sub_22E8BFB54()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x22E8BFC24);
}

void sub_22E8BFB68()
{
}

void sub_22E8BFBD4()
{
}

void sub_22E8BFBE0()
{
}

void sub_22E8BFBEC()
{
  if ((*(char *)(v0 - 145) & 0x80000000) == 0)
  {
    if (v1) {
      operator delete(v1);
    }
    JUMPOUT(0x22E8BFD54);
  }
  JUMPOUT(0x22E8BFC60);
}

void sub_22E8BFC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_22E8BFC6C()
{
  uint64_t v1 = *(void *)(v0 - 168);
  *(void *)(v0 - 168) = 0;
  if (v1) {
    std::default_delete<std::string>::operator()[abi:ne180100](v0 - 168, v1);
  }
  if (v2) {
    operator delete(v2);
  }
  JUMPOUT(0x22E8BFD54);
}

void sub_22E8BFC94(_Unwind_Exception *a1)
{
  if ((*(char *)(v1 - 145) & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x22E8BFD30);
}

void sub_22E8BFCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_22E8BFCD0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 168);
  *(void *)(v1 - 168) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v1 - 168, v3);
  }
  _Unwind_Resume(a1);
}

void sub_22E8BFD0C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22E8BFD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a41);
  std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer> &>::~__split_buffer(v41 - 168);
  _Unwind_Resume(a1);
}

void xgboost::common::anonymous namespace'::AllreduceCategories(rabit::engine *a1, int a2, void *a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  Engine = rabit::engine::GetEngine(a1);
  uint64_t v6 = (rabit::engine *)(*(uint64_t (**)(void *))(*(void *)Engine + 72))(Engine);
  unint64_t v7 = rabit::engine::GetEngine(v6);
  unsigned int v8 = (*(uint64_t (**)(void *))(*(void *)v7 + 64))(v7);
  int v55 = (int)v6;
  if (v6 != 1)
  {
    unsigned int v9 = v8;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) + 1;
    v80.__ptr_ = 0;
    std::vector<unsigned long>::vector(&v73, v10, &v80);
    unint64_t v11 = (uint64_t *)v73;
    if (a3[1] != *a3)
    {
      unint64_t v12 = (a3[1] - *a3) / 24;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      unint64_t v13 = (char *)v73 + 8;
      unint64_t v14 = (uint64_t *)(*a3 + 16);
      do
      {
        uint64_t v15 = *v14;
        v14 += 3;
        *v13++ = v15;
        --v12;
      }
      while (v12);
    }
    unint64_t v16 = v74;
    uint64_t v18 = v11 + 1;
    uint64_t v17 = *v11;
    BOOL v19 = v11 == v74 || v18 == v74;
    if (!v19)
    {
      do
      {
        v17 += *v18;
        *v18++ = v17;
      }
      while (v18 != v16);
      uint64_t v17 = *v11;
    }
    LODWORD(v58[0]) = 0;
    if (v17) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    v80.__ptr_ = 0;
    uint64_t v20 = (rabit::engine *)std::vector<unsigned long>::vector(&v71, (((char *)v74 - (unsigned char *)v73) >> 3) * (int)v6, &v80);
    if (v74 != v73) {
      uint64_t v20 = (rabit::engine *)memmove((char *)v71 + 8 * ((unint64_t)((char *)v74 - (unsigned char *)v73) >> 3) * (int)v9, v73, (char *)v74 - (unsigned char *)v73);
    }
    uint64_t v22 = v71;
    size_t v21 = v72;
    uint64_t v23 = rabit::engine::GetEngine(v20);
    (*(void (**)(void *, unsigned char *, uint64_t, int64_t, uint64_t *(*)(uint64_t *, void *, int), void, void))(*(void *)v23 + 8))(v23, v22, 8, (v21 - v22) >> 3, rabit::op::Reducer<rabit::op::Sum,unsigned long>, 0, 0);
    unint64_t v70 = 0;
    unint64_t v70 = *(v74 - 1);
    LODWORD(v80.__ptr_) = 0;
    std::vector<float>::vector(&v68, v70, &v80);
    uint64_t v24 = (void *)*a3;
    unint64_t v25 = (void *)a3[1];
    if ((void *)*a3 != v25)
    {
      size_t v26 = v68;
      do
      {
        unint64_t v27 = (void *)*v24;
        if ((void *)*v24 != v24 + 1)
        {
          do
          {
            _DWORD *v26 = *((_DWORD *)v27 + 7);
            long long v28 = (void *)v27[1];
            if (v28)
            {
              do
              {
                long long v29 = v28;
                long long v28 = (void *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                long long v29 = (void *)v27[2];
                BOOL v19 = *v29 == (void)v27;
                unint64_t v27 = v29;
              }
              while (!v19);
            }
            ++v26;
            unint64_t v27 = v29;
          }
          while (v29 != v24 + 1);
        }
        v24 += 3;
      }
      while (v24 != v25);
    }
    v80.__ptr_ = 0;
    unint64_t v30 = (rabit::engine *)std::vector<unsigned long>::vector(&v66, v55 + 1, &v80);
    uint64_t v31 = v66;
    *((void *)v66 + (int)v9 + 1) = v70;
    long long v32 = v67;
    uint64_t v33 = rabit::engine::GetEngine(v30);
    (*(void (**)(void *, unsigned char *, uint64_t, int64_t, uint64_t *(*)(uint64_t *, void *, int), void, void))(*(void *)v33 + 8))(v33, v31, 8, (v32 - v31) >> 3, rabit::op::Reducer<rabit::op::Sum,unsigned long>, 0, 0);
    uint64_t v34 = v67;
    if (v66 != v67)
    {
      uint64_t v35 = (char *)v66 + 8;
      if ((char *)v66 + 8 != v67)
      {
        uint64_t v36 = *(void *)v66;
        do
        {
          v36 += *v35;
          *v35++ = v36;
        }
        while (v35 != v34);
      }
    }
    unint64_t v37 = *(v34 - 1);
    LODWORD(v80.__ptr_) = 0;
    unint64_t v38 = (rabit::engine *)std::vector<float>::vector(&__p, v37, &v80);
    uint64_t v39 = *((void *)v66 + (int)v9);
    uint64_t v63 = 0;
    uint64_t v63 = *((void *)v66 + (int)v9 + 1) - v39;
    if (v63 != v70) {
      dmlc::LogCheckFormat<unsigned long,unsigned long>();
    }
    if (v69 != v68) {
      unint64_t v38 = (rabit::engine *)memmove((char *)__p + 4 * v39, v68, v69 - (unsigned char *)v68);
    }
    uint64_t v41 = __p;
    uint64_t v40 = v65;
    unint64_t v42 = rabit::engine::GetEngine(v38);
    (*(void (**)(void *, unsigned char *, uint64_t, int64_t, float (*)(float *, float *, int), void, void))(*(void *)v42 + 8))(v42, v41, 4, (v40 - v41) >> 2, rabit::op::Reducer<rabit::op::Sum,float>, 0, 0);
    v58[0] = (v65 - (unsigned char *)__p) >> 2;
    v58[1] = __p;
    unint64_t v59 = (v67 - (unsigned char *)v66) >> 3;
    float v60 = v66;
    v61[0] = (v72 - (unsigned char *)v71) >> 3;
    v61[1] = v71;
    uint64_t v44 = *a3;
    uint64_t v43 = a3[1];
    unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v43 - *a3) >> 3);
    unint64_t v62 = v54;
    LODWORD(v79[0]) = a2;
    LODWORD(v77) = 1;
    if (a2 < 1) {
      dmlc::LogCheckFormat<int,int>();
    }
    v80.__ptr_ = 0;
    v81.__m_.__sig = 850045863;
    memset(v81.__m_.__opaque, 0, sizeof(v81.__m_.__opaque));
    if (v43 != v44)
    {
      uint64_t v45 = 0;
      uint64_t v57 = v9;
      uint64_t v46 = v9 + 1;
      do
      {
        if (*(void *)a1)
        {
          if (*(void *)a1 <= (unint64_t)v45) {
            goto LABEL_67;
          }
          if (*(unsigned char *)(*((void *)a1 + 1) + v45) == 1 && v55 >= 1)
          {
            uint64_t v48 = 0;
            unint64_t v49 = (v45 + 1);
            while (1)
            {
              uint64_t v50 = v46;
              if (v48 != v57)
              {
                uint64_t v50 = v48 + 1;
                if (v59 <= v48 + 1) {
                  goto LABEL_67;
                }
                xgboost::common::Span<float,18446744073709551615ul>::subspan(v58, v60[v48], v60[v50] - v60[v48], v79);
                xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan(&v77, v61, (v62 + 1) * v48, v62 + 1);
                if (v77 <= v45 || v77 <= v49) {
                  goto LABEL_67;
                }
                xgboost::common::Span<float,18446744073709551615ul>::subspan(v79, *(void *)(v78 + 8 * v45), *(void *)(v78 + 8 * v49) - *(void *)(v78 + 8 * v45), &v75);
                unint64_t v51 = v75;
                if (v75) {
                  break;
                }
              }
LABEL_54:
              uint64_t v48 = v50;
              if (v50 >= v55) {
                goto LABEL_55;
              }
            }
            unint64_t v52 = 0;
            unint64_t v53 = v75;
            while (v52 < v53)
            {
              std::__tree<float>::__emplace_unique_key_args<float,float &>((uint64_t *)(*a3 + 24 * v45), *(float *)(v76 + 4 * v52), *(float *)(v76 + 4 * v52));
              unint64_t v53 = v75;
              if (v52 == v75) {
                break;
              }
              if (v51 == ++v52) {
                goto LABEL_54;
              }
            }
LABEL_67:
            std::terminate();
          }
        }
LABEL_55:
        ++v45;
      }
      while (v45 != v54);
    }
    dmlc::OMPException::Rethrow(&v80);
    std::mutex::~mutex(&v81);
    std::exception_ptr::~exception_ptr(&v80);
    if (__p)
    {
      unint64_t v65 = __p;
      operator delete(__p);
    }
    if (v66)
    {
      uint64_t v67 = v66;
      operator delete(v66);
    }
    if (v68)
    {
      uint64_t v69 = v68;
      operator delete(v68);
    }
    if (v71)
    {
      uint64_t v72 = v71;
      operator delete(v71);
    }
    if (v73)
    {
      uint64_t v74 = (uint64_t *)v73;
      operator delete(v73);
    }
  }
}

void sub_22E8C061C()
{
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x22E8C0704);
}

void sub_22E8C065C()
{
}

void sub_22E8C0684()
{
}

void sub_22E8C068C()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 184));
  uint64_t v1 = *(void *)(v0 - 168);
  *(void *)(v0 - 168) = 0;
  if (v1) {
    std::default_delete<std::string>::operator()[abi:ne180100](v0 - 168);
  }
  JUMPOUT(0x22E8C0704);
}

void sub_22E8C06A0()
{
  uint64_t v1 = *(void *)(v0 - 168);
  *(void *)(v0 - 168) = 0;
  if (v1) {
    std::default_delete<std::string>::operator()[abi:ne180100](v0 - 168, v1);
  }
  JUMPOUT(0x22E8C0754);
}

void sub_22E8C06A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E8C06B4);
}

void sub_22E8C06CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E8C06D8);
}

void sub_22E8C06F0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22E8C0764);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::PushRowPage(uint64_t a1, uint64_t a2, const xgboost::MetaInfo *a3, unint64_t *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "PushRowPage");
  xgboost::common::Monitor::Start();
  if (v15 < 0) {
    operator delete(__p);
  }
  unsigned int v13 = *((void *)a3 + 1);
  LODWORD(v10) = *(_DWORD *)(a1 + 104);
  if ((int)v10 >= 1)
  {
    unint64_t v10 = (void *)(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
    if (v10 != (void *)v13) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    if (*a4)
    {
      unint64_t v7 = a4[1];
      v9[0] = *a4;
      v9[1] = v7;
    }
    else if (*(unsigned char *)(a1 + 100))
    {
    }
    else
    {
      uint64_t v8 = *((void *)a3 + 9);
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      unint64_t v10 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v10, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
    }
    if (v10 != v11 && (v11 - (unsigned char *)v10) >> 2 != *(void *)a3) {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>();
    }
    xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::LoadBalance();
  }
  dmlc::LogCheckFormat<int,int>();
}

void sub_22E8C0D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,std::exception_ptr a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *xgboost::common::anonymous namespace'::UnrollGroupWeights(uint64_t *this, const xgboost::MetaInfo *a2)
{
  std::vector<int>::size_type v2 = this;
  uint64_t v3 = (uint64_t *)*((void *)a2 + 9);
  if (*v3 == v3[1])
  {
    *this = 0;
    this[1] = 0;
    this[2] = 0;
  }
  else
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v13 = *(void *)a2;
    std::vector<float>::vector(this, *(void *)a2);
    if (*((void *)a2 + 7) - *((void *)a2 + 6) < 8uLL) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    uint64_t v6 = *((void *)a2 + 7);
    int v7 = *(_DWORD *)(v6 - 4);
    this = (uint64_t *)(v6 - 4);
    if (v5 != v7) {
      dmlc::LogCheckFormat<unsigned int,unsigned long>();
    }
    if (v13)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = *v3;
      uint64_t v11 = *v2;
      uint64_t v12 = *((void *)a2 + 6);
      do
      {
        *(_DWORD *)(v11 + 4 * v8) = *(_DWORD *)(v10 + 4 * v9);
        if (v8 == *(_DWORD *)(v12 + 4 * (v9 + 1))) {
          ++v9;
        }
        ++v8;
      }
      while (v13 != v8);
    }
  }
  return this;
}

void sub_22E8C113C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::anonymous namespace'::MergeWeights(uint64_t *a1, void *a2, unint64_t *a3, int a4, int a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*a3 != *a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>();
  }
  std::vector<float>::vector(a1, *a3);
  uint64_t v10 = (uint64_t *)a2[9];
  if (a4)
  {
    if (a2[7] - a2[6] < 8uLL) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    if (*a3 != *(_DWORD *)(a2[7] - 4)) {
      dmlc::LogCheckFormat<unsigned int,unsigned long>();
    }
    unint64_t v11 = *a3;
    if (*a3)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      unint64_t v14 = a3[1];
      uint64_t v15 = *v10;
      uint64_t v16 = v10[1];
      uint64_t v17 = *a1;
      uint64_t v18 = a2[6];
      do
      {
        if (v15 == v16) {
          float v19 = 1.0;
        }
        else {
          float v19 = *(float *)(v15 + 4 * v13);
        }
        *(float *)(v17 + 4 * v12) = *(float *)(v14 + 4 * v12) * v19;
        if (v12 == *(_DWORD *)(v18 + 4 * (v13 + 1))) {
          ++v13;
        }
        ++v12;
      }
      while (v11 != v12);
    }
  }
  else
  {
    unint64_t v20 = *a3;
    if (a5 < 1) {
      dmlc::LogCheckFormat<int,int>();
    }
    v27.__ptr_ = 0;
    v28.__m_.__sig = 850045863;
    memset(v28.__m_.__opaque, 0, sizeof(v28.__m_.__opaque));
    if (v20)
    {
      uint64_t v21 = 0;
      unint64_t v22 = *a3;
      uint64_t v23 = *v10;
      uint64_t v24 = v10[1];
      uint64_t v25 = *a1;
      do
      {
        if (v22 == v21) {
          std::terminate();
        }
        if (v23 == v24) {
          float v26 = 1.0;
        }
        else {
          float v26 = *(float *)(v23 + 4 * v21);
        }
        *(float *)(v25 + 4 * v21) = *(float *)(a3[1] + 4 * v21) * v26;
        ++v21;
      }
      while (v20 != v21);
    }
    dmlc::OMPException::Rethrow(&v27);
    std::mutex::~mutex(&v28);
    std::exception_ptr::~exception_ptr(&v27);
  }
}

void sub_22E8C1608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception_ptr a11)
{
  uint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::MakeCuts()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "MakeCuts");
  xgboost::common::Monitor::Start();
  if (v7 < 0) {
    operator delete(__p);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::AllReduce();
}

{
  while (1)
    ;
}

void sub_22E8C20F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::mutex::~mutex(v27);
  std::exception_ptr::~exception_ptr(&v33);
  long long v32 = (void **)&v29;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&v32);
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  v30[0] = (void **)&v31;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

void sub_22E8C215C()
{
}

void sub_22E8C216C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x22E8C2244);
}

void sub_22E8C2188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
  uint64_t v23 = a22;
  a22 = 0;
  if (v23) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a22, v23);
  }
  std::exception_ptr v27 = (void **)&v24;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

void sub_22E8C21C0()
{
}

void sub_22E8C21CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
  uint64_t v23 = a23;
  a23 = 0;
  if (v23) {
    std::default_delete<std::string>::operator()[abi:ne180100](&a23);
  }
  JUMPOUT(0x22E8C2214);
}

void sub_22E8C21DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E8C21E8);
}

uint64_t sub_22E8C2200(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  return sub_22E8C2204();
}

void sub_22E8C2204()
{
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

float xgboost::common::AddCategories(unint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a1 + 1;
  unint64_t v4 = *a1;
  if ((unint64_t *)*a1 != a1 + 1)
  {
    uint64_t v6 = (float *)*a1;
    while (1)
    {
      float v7 = v6[7];
      if (v7 < 0.0 || v7 >= 16777000.0) {
        break;
      }
      uint64_t v9 = (unint64_t *)*((void *)v6 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (unint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (unint64_t *)*((void *)v6 + 2);
          BOOL v11 = *v10 == (void)v6;
          uint64_t v6 = (float *)v10;
        }
        while (!v11);
      }
      uint64_t v6 = (float *)v10;
      if (v10 == v5) {
        goto LABEL_14;
      }
    }
    xgboost::common::InvalidCategory((xgboost::common *)a1);
    unint64_t v4 = *a1;
  }
LABEL_14:
  if ((unint64_t *)v4 == v5)
  {
    unint64_t v4 = (unint64_t)v5;
  }
  else
  {
    uint64_t v12 = (float *)v4;
    while (1)
    {
      uint64_t v13 = (float *)*((void *)v12 + 1);
      unint64_t v14 = v12;
      if (v13)
      {
        do
        {
          uint64_t v12 = v13;
          uint64_t v13 = *(float **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v12 = (float *)*((void *)v14 + 2);
          BOOL v11 = *(void *)v12 == (void)v14;
          unint64_t v14 = v12;
        }
        while (!v11);
      }
      if (v12 == (float *)v5) {
        break;
      }
      if (*(float *)(v4 + 28) < v12[7]) {
        unint64_t v4 = (unint64_t)v12;
      }
    }
  }
  uint64_t v15 = *(void *)(a2 + 8);
  float v16 = *(float *)(v4 + 28);
  if ((float)(v16 + 1.0) < (float)a1[2])
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)" (", 2);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" vs. ", 5);
    uint64_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)") ", 2);
    operator new();
  }
  if (((int)v16 & 0x80000000) == 0)
  {
    int v19 = 0;
    unint64_t v20 = (void *)(v15 + 16);
    uint64_t v21 = *(float **)(v15 + 8);
    do
    {
      float v22 = (float)v19;
      if ((unint64_t)v21 >= *v20)
      {
        uint64_t v24 = *(float **)v15;
        uint64_t v25 = ((uint64_t)v21 - *(void *)v15) >> 2;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = *v20 - (void)v24;
        if (v27 >> 1 > v26) {
          unint64_t v26 = v27 >> 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v15 + 16, v28);
          uint64_t v24 = *(float **)v15;
          uint64_t v21 = *(float **)(v15 + 8);
        }
        else
        {
          uint64_t v29 = 0;
        }
        unint64_t v30 = (float *)&v29[4 * v25];
        *unint64_t v30 = v22;
        uint64_t v23 = v30 + 1;
        while (v21 != v24)
        {
          int v31 = *((_DWORD *)v21-- - 1);
          *((_DWORD *)v30-- - 1) = v31;
        }
        *(void *)uint64_t v15 = v30;
        *(void *)(v15 + 8) = v23;
        *(void *)(v15 + 16) = &v29[4 * v28];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        float *v21 = v22;
        uint64_t v23 = v21 + 1;
      }
      *(void *)(v15 + 8) = v23;
      uint64_t v21 = v23;
      BOOL v11 = v19++ == (int)v16;
    }
    while (!v11);
  }
  return v16;
}

void sub_22E8C2680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::SketchContainerImpl(uint64_t a1, uint64_t a2, int a3, unint64_t *a4, char a5, int a6)
{
  BOOL v11 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::vector<xgboost::FeatureType>::vector<xgboost::common::detail::SpanIterator<xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,true>,0>((void *)(a1 + 48), a4, 0, a4, *a4);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a2;
  *(void *)(a1 + 88) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 96) = a3;
  *(unsigned char *)(a1 + 100) = a5;
  *(_DWORD *)(a1 + 104) = a6;
  *(unsigned char *)(a1 + 108) = 0;
  xgboost::common::Monitor::Monitor((std::chrono::steady_clock::time_point *)(a1 + 112));
  std::string::basic_string[abi:ne180100]<0>(&__str, "SketchContainerImpl");
  std::string::operator=((std::string *)(a1 + 112), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  int v23 = 0;
  uint64_t v14 = v12 - v13;
  uint64_t v21 = v14 >> 3;
  if (!v14) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::resize((uint64_t *)a1, (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3);
  LODWORD(v21) = *(_DWORD *)(a1 + 104);
  int v23 = 1;
  if ((int)v21 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  std::vector<std::set<float>>::resize(v11, (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 56);
  if (v16 == v15)
  {
    BOOL v18 = 0;
  }
  else
  {
    uint64_t v17 = v16 + 1;
    do
    {
      BOOL v18 = *(unsigned char *)(v17 - 1) == 1;
      BOOL v19 = *(unsigned char *)(v17 - 1) == 1 || v17 == v15;
      ++v17;
    }
    while (!v19);
  }
  *(unsigned char *)(a1 + 108) = v18;
  return a1;
}

void sub_22E8C29A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  xgboost::common::Monitor::~Monitor(v19);
  float v22 = *v20;
  if (*v20)
  {
    *(void *)(v17 + 80) = v22;
    operator delete(v22);
  }
  int v23 = *v18;
  if (*v18)
  {
    *(void *)(v17 + 56) = v23;
    operator delete(v23);
  }
  std::vector<std::set<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = v17;
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void std::vector<xgboost::common::WXQuantileSketch<float,float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<xgboost::common::WXQuantileSketch<float,float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 136 * a2;
    while (v3 != v7)
    {
      v3 -= 136;
      std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

BOOL xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::UseGroup(void *a1)
{
  return a1[7] - a1[6] >= 8uLL && *a1 != (uint64_t)(*(void *)(a1[9] + 8) - *(void *)a1[9]) >> 2;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::CalcColumnSize(uint64_t **a1@<X0>, unsigned int a2@<W1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v4 = a3;
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v7 = **a1;
  uint64_t v8 = (*a1)[1];
  uint64_t v9 = *a1[1];
  std::vector<std::vector<unsigned long>>::vector(&v35, a3);
  uint64_t v10 = (uint64_t)v35;
  for (uint64_t i = v36; (uint64_t *)v10 != i; v10 += 24)
  {
    v39.__ptr_ = 0;
    std::vector<unsigned long>::resize(v10, a2, &v39);
  }
  unint64_t v12 = v8 - v7;
  uint64_t v13 = (v8 - v7) >> 3;
  BOOL v14 = v13 != 0;
  uint64_t v15 = v13 - 1;
  if (v14) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  int v37 = 1;
  int v38 = v4;
  if (v4 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v39.__ptr_ = 0;
  v40.__m_.__sig = 850045863;
  memset(v40.__m_.__opaque, 0, sizeof(v40.__m_.__opaque));
  if (v12 >= 0x10)
  {
    uint64_t v24 = 0;
    do
    {
      if (v36 == v35) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v25 = (uint64_t *)(v7 + 8 * v24);
      uint64_t v26 = *v25;
      uint64_t v27 = v25[1];
      uint64_t v28 = v27 - *v25;
      if (v28) {
        BOOL v29 = v9 == 0;
      }
      else {
        BOOL v29 = 0;
      }
      if (v29) {
        std::terminate();
      }
      if (v27 != v26)
      {
        unint64_t v30 = (unsigned int *)(v9 + 8 * v26);
        uint64_t v31 = *v35;
        unint64_t v32 = (v35[1] - *v35) >> 3;
        do
        {
          unsigned int v34 = *v30;
          v30 += 2;
          uint64_t v33 = v34;
          if (v32 <= v34) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          ++*(void *)(v31 + 8 * v33);
          --v28;
        }
        while (v28);
      }
      ++v24;
    }
    while (v24 != v16);
  }
  dmlc::OMPException::Rethrow(&v39);
  std::mutex::~mutex(&v40);
  std::exception_ptr::~exception_ptr(&v39);
  v39.__ptr_ = 0;
  std::vector<unsigned long>::vector(a4, a2, &v39);
  int v37 = 1;
  int v38 = v4;
  v39.__ptr_ = 0;
  v40.__m_.__sig = 850045863;
  memset(v40.__m_.__opaque, 0, sizeof(v40.__m_.__opaque));
  if (a2)
  {
    uint64_t v17 = 0;
    BOOL v18 = v35;
    BOOL v19 = v36;
    uint64_t v20 = *a4;
    do
    {
      if (v18 != v19)
      {
        uint64_t v21 = *(void *)(v20 + 8 * v17);
        float v22 = v18;
        do
        {
          uint64_t v23 = *v22;
          v22 += 3;
          v21 += *(void *)(v23 + 8 * v17);
          *(void *)(v20 + 8 * v17) = v21;
        }
        while (v22 != v19);
      }
      ++v17;
    }
    while (v17 != a2);
  }
  dmlc::OMPException::Rethrow(&v39);
  std::mutex::~mutex(&v40);
  std::exception_ptr::~exception_ptr(&v39);
  v39.__ptr_ = &v35;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
}

void sub_22E8C2F54()
{
}

void sub_22E8C2F60()
{
}

void sub_22E8C2F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  uint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  a13 = (void **)&a10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void sub_22E8C2F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = a15;
  a15 = 0;
  if (v16) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a15, v16);
  }
  uint64_t v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  JUMPOUT(0x22E8C3038);
}

void sub_22E8C2F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = a15;
  a15 = 0;
  if (v16) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a15, v16);
  }
  a13 = (void **)&a10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void sub_22E8C2F8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::mutex::~mutex(v16);
  std::exception_ptr::~exception_ptr(&a15);
  uint64_t v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  JUMPOUT(0x22E8C3038);
}

void sub_22E8C2FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, std::exception_ptr a15)
{
  std::mutex::~mutex(v15);
  std::exception_ptr::~exception_ptr(&a15);
  a13 = &a10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void sub_22E8C2FC0()
{
}

void sub_22E8C2FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E8C2FD4);
}

void sub_22E8C3000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E8C300CLL);
}

void sub_22E8C3024(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22E8C3048);
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::LoadBalance(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t v9 = (uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 3;
  std::vector<std::vector<unsigned long>>::vector(&v7, a3);
  uint64_t v4 = v7;
  for (uint64_t i = v8; v4 != i; v4 += 24)
  {
    long long __p = 0;
    std::vector<unsigned long>::resize(v4, a2, &__p);
  }
  xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::CalcColumnSize();
}

void sub_22E8C32D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, char *__p, char *a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a16 = __p;
    operator delete(__p);
  }
  long long __p = &a18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::SearchGroupIndFromRow(uint64_t *a1, unint64_t a2)
{
  if (*(unsigned int *)(a1[1] - 4) <= a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  uint64_t v2 = a1[1] - 4;
  if (v2 != *a1)
  {
    unint64_t v3 = (v2 - *a1) >> 2;
    uint64_t v2 = *a1;
    do
    {
      unint64_t v4 = v3 >> 1;
      BOOL v5 = (unsigned int *)(v2 + 4 * (v3 >> 1));
      unsigned int v7 = *v5;
      unint64_t v6 = v5 + 1;
      v3 += ~(v3 >> 1);
      if (a2 < v7) {
        unint64_t v3 = v4;
      }
      else {
        uint64_t v2 = (uint64_t)v6;
      }
    }
    while (v3);
  }
  return ((unint64_t)(v2 - *a1) >> 2) - 1;
}

void sub_22E8C34B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::GatherSketchInfo(uint64_t *a1, uint64_t *a2, char **a3, uint64_t *a4, uint64_t a5)
{
  *(void *)&long long v87 = 0;
  std::vector<unsigned long>::resize((uint64_t)a3, 1uLL, &v87);
  Engine = rabit::engine::GetEngine(v9);
  std::exception_ptr v80 = (rabit::engine *)(*(uint64_t (**)(void *))(*(void *)Engine + 72))(Engine);
  BOOL v11 = rabit::engine::GetEngine(v80);
  int v12 = (*(uint64_t (**)(void *))(*(void *)v11 + 64))(v11);
  uint64_t v81 = a1[1];
  int v78 = v12;
  uint64_t v79 = *a1;
  long long __p = 0;
  uint64_t v85 = 0;
  int v86 = 0;
  uint64_t v13 = *a2;
  if (a2[1] != *a2)
  {
    BOOL v14 = 0;
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = a1[6];
      unint64_t v17 = a1[7] - v16;
      if (v17)
      {
        if (v17 <= v15) {
LABEL_81:
        }
          std::terminate();
        int v18 = *(unsigned __int8 *)(v16 + v15);
        unint64_t v19 = (unint64_t)v86;
        if (v18 == 1)
        {
          if (v14 >= v86)
          {
            uint64_t v23 = (char *)__p;
            uint64_t v29 = (v14 - (unsigned char *)__p) >> 3;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61) {
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v31 = v86 - (unsigned char *)__p;
            if ((v86 - (unsigned char *)__p) >> 2 > v30) {
              unint64_t v30 = v31 >> 2;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v30;
            }
            if (v27)
            {
              uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v86, v27);
              uint64_t v23 = (char *)__p;
              BOOL v14 = v85;
            }
            else
            {
              uint64_t v28 = 0;
            }
            unint64_t v32 = &v28[8 * v29];
            *(void *)unint64_t v32 = 0;
            float v22 = v32 + 8;
            while (v14 != v23)
            {
              uint64_t v34 = *((void *)v14 - 1);
              v14 -= 8;
              *((void *)v32 - 1) = v34;
              v32 -= 8;
            }
LABEL_36:
            long long __p = v32;
            uint64_t v85 = v22;
            int v86 = &v28[8 * v27];
            if (v23) {
              operator delete(v23);
            }
            goto LABEL_38;
          }
          *(void *)BOOL v14 = 0;
          uint64_t v20 = v14 + 8;
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v19 = (unint64_t)v86;
      }
      uint64_t v21 = (void *)(v13 + 40 * v15 + 8);
      if ((unint64_t)v14 >= v19)
      {
        uint64_t v23 = (char *)__p;
        uint64_t v24 = (v14 - (unsigned char *)__p) >> 3;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = v19 - (void)__p;
        if (v26 >> 2 > v25) {
          unint64_t v25 = v26 >> 2;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v86, v27);
          uint64_t v23 = (char *)__p;
          BOOL v14 = v85;
        }
        else
        {
          uint64_t v28 = 0;
        }
        unint64_t v32 = &v28[8 * v24];
        *(void *)unint64_t v32 = *v21;
        float v22 = v32 + 8;
        while (v14 != v23)
        {
          uint64_t v33 = *((void *)v14 - 1);
          v14 -= 8;
          *((void *)v32 - 1) = v33;
          v32 -= 8;
        }
        goto LABEL_36;
      }
      *(void *)BOOL v14 = *v21;
      uint64_t v20 = v14 + 8;
LABEL_11:
      float v22 = v20;
LABEL_38:
      uint64_t v85 = v22;
      ++v15;
      uint64_t v13 = *a2;
      BOOL v14 = v22;
    }
    while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  }
  unint64_t v35 = 0xF0F0F0F0F0F0F0F1 * ((v81 - v79) >> 3) + 1;
  *(void *)&long long v87 = 0;
  std::vector<unsigned long>::resize((uint64_t)a4, v35 * (int)v80, &v87);
  int v37 = v85;
  uint64_t v38 = *a4;
  if (__p != v85)
  {
    uint64_t v39 = v38 + 8 * v35 * v78;
    std::mutex v40 = (uint64_t *)((char *)__p + 8);
    uint64_t v41 = *(void *)__p;
    *(void *)(v39 + 8) = *(void *)__p;
    if (v40 != (uint64_t *)v37)
    {
      unint64_t v42 = (void *)(v39 + 16);
      do
      {
        uint64_t v43 = *v40++;
        v41 += v43;
        *v42++ = v41;
      }
      while (v40 != (uint64_t *)v37);
    }
  }
  uint64_t v44 = a4[1];
  uint64_t v45 = rabit::engine::GetEngine(v36);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t *(*)(uint64_t *, void *, int), void, void))(*(void *)v45 + 8))(v45, v38, 8, (v44 - v38) >> 3, rabit::op::Reducer<rabit::op::Sum,unsigned long>, 0, 0);
  if ((int)v80 <= 0)
  {
    unint64_t v51 = a3[1];
  }
  else
  {
    uint64_t v46 = 0;
    do
    {
      unint64_t v47 = ++v46 * v35 - 1;
      if (v47 >= (a4[1] - *a4) >> 3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v48 = *(void *)(*a4 + 8 * v47);
      uint64_t v50 = a3[1];
      unint64_t v49 = (unint64_t)a3[2];
      if ((unint64_t)v50 >= v49)
      {
        unint64_t v52 = *a3;
        uint64_t v53 = (v50 - *a3) >> 3;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v55 = v49 - (void)v52;
        if (v55 >> 2 > v54) {
          unint64_t v54 = v55 >> 2;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v54;
        }
        if (v56)
        {
          uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a3 + 2), v56);
          unint64_t v52 = *a3;
          uint64_t v50 = a3[1];
        }
        else
        {
          uint64_t v57 = 0;
        }
        unint64_t v58 = &v57[8 * v53];
        *(void *)unint64_t v58 = v48;
        unint64_t v51 = v58 + 8;
        while (v50 != v52)
        {
          uint64_t v59 = *((void *)v50 - 1);
          v50 -= 8;
          *((void *)v58 - 1) = v59;
          v58 -= 8;
        }
        *a3 = v58;
        a3[1] = v51;
        a3[2] = &v57[8 * v56];
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        *(void *)uint64_t v50 = v48;
        unint64_t v51 = v50 + 8;
      }
      a3[1] = v51;
    }
    while (v46 != v80);
  }
  float v60 = (uint64_t *)*a3;
  if (*a3 == v51)
  {
    v82[0] = 0;
    int v83 = 1;
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  uint64_t v61 = (char *)(v60 + 1);
  if (v60 + 1 != (uint64_t *)v51)
  {
    uint64_t v62 = *v60;
    do
    {
      v62 += *(void *)v61;
      *(void *)uint64_t v61 = v62;
      v61 += 8;
    }
    while (v61 != v51);
  }
  unint64_t v63 = *((void *)a3[1] - 1);
  long long v87 = 0uLL;
  std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((void **)a5, v63, &v87);
  uint64_t v64 = *(void **)a5;
  *(void *)&long long v87 = (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 4;
  *((void *)&v87 + 1) = v64;
  unint64_t v65 = xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>::subspan(v82, &v87, *(void *)&(*a3)[8 * v78], *(void *)&(*a3)[8 * v78 + 8] - *(void *)&(*a3)[8 * v78]);
  uint64_t v67 = *a2;
  uint64_t v66 = a2[1];
  if (v66 != *a2)
  {
    uint64_t v68 = 0;
    unint64_t v69 = 0;
    unint64_t v70 = 0;
    uint64_t v71 = v82;
    do
    {
      uint64_t v72 = a1[6];
      unint64_t v73 = a1[7] - v72;
      if (!v73) {
        goto LABEL_76;
      }
      if (v73 <= v69) {
        goto LABEL_81;
      }
      if (*(unsigned char *)(v72 + v69) != 1)
      {
LABEL_76:
        unint64_t v65 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry *,xgboost::common::WQSummary<float,float>::Entry *,xgboost::common::detail::SpanIterator<xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>,false>>(&v87, *(_OWORD **)(v67 + v68), (_OWORD *)(*(void *)(v67 + v68) + 16 * *(void *)(v67 + v68 + 8)), v71, v70);
        uint64_t v71 = (unint64_t *)*((void *)&v87 + 1);
        unint64_t v70 = v88;
        uint64_t v67 = *a2;
        uint64_t v66 = a2[1];
      }
      ++v69;
      v68 += 40;
    }
    while (v69 < 0xCCCCCCCCCCCCCCCDLL * ((v66 - v67) >> 3));
  }
  unint64_t v75 = *(void **)a5;
  uint64_t v74 = *(void *)(a5 + 8);
  uint64_t v76 = rabit::engine::GetEngine((rabit::engine *)v65);
  (*(void (**)(void *, void *, uint64_t, unint64_t, float (*)(float *, float *, int), void, void))(*(void *)v76 + 8))(v76, v75, 4, ((unint64_t)(v74 - (void)v75) >> 2) & 0x3FFFFFFFFFFFFFFCLL, rabit::op::Reducer<rabit::op::Sum,float>, 0, 0);
  if (__p)
  {
    uint64_t v85 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22E8C3B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::AllReduce(uint64_t *a1, uint64_t *a2, std::vector<int> *a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v48, "AllReduce");
  unint64_t v3 = (rabit::engine *)xgboost::common::Monitor::Start();
  if (v49.__m_.__opaque[7] < 0) {
    operator delete(v48.__ptr_);
  }
  unint64_t v44 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  Engine = rabit::engine::GetEngine(v3);
  (*(void (**)(void *, unint64_t *, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), void, void))(*(void *)Engine + 8))(Engine, &v44, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long>, 0, 0);
  v45[0].__ptr_ = (void *)(0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3));
  if ((void *)v44 != v45[0].__ptr_) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v5 = a1[6];
  v43[0] = a1[7] - v5;
  v43[1] = v5;
  std::vector<int>::pointer begin = a3->__begin_;
  std::vector<int>::pointer end = a3->__end_;
  LODWORD(v40) = 0;
  uint64_t v8 = (char *)end - (char *)begin;
  v45[0].__ptr_ = (void *)(v8 >> 2);
  if (v8) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  std::vector<int>::resize(a3, 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3));
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::resize(a2, 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3));
  std::mutex v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v9 = (rabit::engine *)std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v40, (const void *)a1[9], a1[10], (a1[10] - a1[9]) >> 3);
  BOOL v11 = v40;
  uint64_t v10 = v41;
  int v12 = rabit::engine::GetEngine(v9);
  (*(void (**)(void *, unsigned char *, uint64_t, int64_t, uint64_t *(*)(uint64_t *, void *, int), void, void))(*(void *)v12 + 8))(v12, v11, 8, (v10 - v11) >> 3, rabit::op::Reducer<rabit::op::Sum,unsigned long>, 0, 0);
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  LODWORD(v45[0].__ptr_) = *((_DWORD *)a1 + 26);
  LODWORD(v39) = 1;
  if (SLODWORD(v45[0].__ptr_) < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v48.__ptr_ = 0;
  v49.__m_.__sig = 850045863;
  memset(v49.__m_.__opaque, 0, sizeof(v49.__m_.__opaque));
  if (v13 != v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = (v13 - v14) / 136;
    uint64_t v19 = 16;
    do
    {
      unint64_t v20 = vcvts_n_u32_f32((float)*((int *)a1 + 24), 3uLL);
      unint64_t v21 = *((void *)v40 + v17);
      if (v21 >= v20) {
        LODWORD(v22) = v20;
      }
      else {
        uint64_t v22 = *((void *)v40 + v17);
      }
      if (v21)
      {
        uint64_t v23 = a1[6];
        unint64_t v24 = a1[7] - v23;
        if (!v24) {
          goto LABEL_18;
        }
        if (v24 <= v17) {
          std::terminate();
        }
        if (*(unsigned char *)(v23 + v17) == 1)
        {
          uint64_t v22 = *(void *)(a1[3] + v19);
        }
        else
        {
LABEL_18:
          uint64_t v47 = 0;
          *(_OWORD *)&v45[0].__ptr_ = 0u;
          long long v46 = 0u;
          xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::GetSummary((uint64_t *)(*a1 + v15), (uint64_t *)v45);
          uint64_t v25 = *a2;
          uint64_t v26 = *a2 + v16;
          unint64_t v27 = (uint64_t *)(v26 + 16);
          if ((int)v22 > (unint64_t)((uint64_t)(*(void *)(v26 + 24) - *(void *)(v26 + 16)) >> 4))
          {
            std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)v27, (int)v22);
            if (*(void *)(v26 + 24) == *v27) {
              uint64_t v28 = 0;
            }
            else {
              uint64_t v28 = *v27;
            }
            *(void *)(v25 + v16) = v28;
            uint64_t v25 = *a2;
          }
          if (!*(void *)(v25 + v16))
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
            unint64_t v30 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
            uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: reduced[i].data", 29);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v39);
            uint64_t v25 = *a2;
          }
          xgboost::common::WXQSummary<float,float>::SetPrune((void *)(v25 + v16), (uint64_t *)v45, (int)v22);
          if ((void)v46)
          {
            *((void *)&v46 + 1) = v46;
            operator delete((void *)v46);
          }
        }
        a3->__begin_[v17] = v22;
      }
      ++v17;
      v19 += 24;
      v16 += 40;
      v15 += 136;
    }
    while (v18 != v17);
  }
  dmlc::OMPException::Rethrow(&v48);
  std::mutex::~mutex(&v49);
  std::exception_ptr::~exception_ptr(&v48);
  uint64_t v33 = rabit::engine::GetEngine(v32);
  int v34 = (*(uint64_t (**)(void *))(*(void *)v33 + 72))(v33);
  if (v34 != 1)
  {
    v48.__ptr_ = 0;
    std::vector<unsigned long>::vector(&v39, 1uLL, &v48);
    v48.__ptr_ = 0;
    std::vector<unsigned long>::vector(&v38, v34 * v44 + v34, &v48);
    xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::GatherSketchInfo();
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, "AllReduce");
  xgboost::common::Monitor::Stop();
  if (v49.__m_.__opaque[7] < 0) {
    operator delete(v48.__ptr_);
  }
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
}

void sub_22E8C47A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *a10, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35)
{
  __cxa_end_catch();
  sub_22E8C4818(a1, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35);
}

void sub_22E8C47CC()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x22E8C4980);
}

void sub_22E8C47D8()
{
  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x22E8C4980);
}

void sub_22E8C47EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35)
{
  a35 = (void **)&a17;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&a35);
  if (a20)
  {
    a21 = a20;
    operator delete(a20);
  }
  if (a23)
  {
    a24 = a23;
    operator delete(a23);
  }
  if (a26)
  {
    a27 = a26;
    operator delete(a26);
  }
  JUMPOUT(0x22E8C4980);
}

void sub_22E8C4818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35)
{
  std::mutex::~mutex(a12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v35 - 168));
  a35 = &a17;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

void sub_22E8C4830()
{
}

void sub_22E8C483C()
{
}

void sub_22E8C4848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  if ((*(char *)(v29 - 145) & 0x80000000) == 0)
  {
    if (a29) {
      operator delete(a29);
    }
    JUMPOUT(0x22E8C4998);
  }
  JUMPOUT(0x22E8C48BCLL);
}

void sub_22E8C4860()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 224));
  JUMPOUT(0x22E8C486CLL);
}

void sub_22E8C48C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  uint64_t v30 = *(void *)(v29 - 168);
  *(void *)(v29 - 168) = 0;
  if (v30) {
    std::default_delete<std::string>::operator()[abi:ne180100](v29 - 168, v30);
  }
  if (a29) {
    operator delete(a29);
  }
  JUMPOUT(0x22E8C4998);
}

void sub_22E8C48F0(_Unwind_Exception *a1)
{
  if ((*(char *)(v1 - 145) & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x22E8C498CLL);
}

void sub_22E8C4904()
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 224));
  JUMPOUT(0x22E8C4910);
}

void sub_22E8C492C(_Unwind_Exception *a1)
{
  uint64_t v2 = *(void *)(v1 - 168);
  *(void *)(v1 - 168) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v1 - 168, v2);
  }
  _Unwind_Resume(a1);
}

void sub_22E8C4968(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 40 * a2;
    while (v3 != v7)
    {
      uint64_t v8 = *(void **)(v3 - 24);
      if (v8)
      {
        *(void *)(v3 - 16) = v8;
        operator delete(v8);
      }
      v3 -= 40;
    }
    a1[1] = v7;
  }
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::PushRowPage(uint64_t a1, uint64_t a2, const xgboost::MetaInfo *a3, unint64_t *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "PushRowPage");
  xgboost::common::Monitor::Start();
  if (v15 < 0) {
    operator delete(__p);
  }
  unsigned int v13 = *((void *)a3 + 1);
  LODWORD(v10) = *(_DWORD *)(a1 + 104);
  if ((int)v10 >= 1)
  {
    uint64_t v10 = (void *)(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
    if (v10 != (void *)v13) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    if (*a4)
    {
      unint64_t v7 = a4[1];
      v9[0] = *a4;
      v9[1] = v7;
    }
    else if (*(unsigned char *)(a1 + 100))
    {
    }
    else
    {
      uint64_t v8 = *((void *)a3 + 9);
      BOOL v11 = 0;
      uint64_t v12 = 0;
      uint64_t v10 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v10, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
    }
    if (v10 != v11 && (v11 - (unsigned char *)v10) >> 2 != *(void *)a3) {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>();
    }
    xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::LoadBalance();
  }
  dmlc::LogCheckFormat<int,int>();
}

void sub_22E8C503C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,std::exception_ptr a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::MakeCuts()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "MakeCuts");
  xgboost::common::Monitor::Start();
  if (v7 < 0) {
    operator delete(__p);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::AllReduce();
}

{
  while (1)
    ;
}

void sub_22E8C5BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::mutex::~mutex(v27);
  std::exception_ptr::~exception_ptr(&v33);
  unint64_t v32 = (void **)&v29;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&v32);
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  v30[0] = (void **)&v31;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

void sub_22E8C5C40()
{
}

void sub_22E8C5C50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x22E8C5D28);
}

void sub_22E8C5C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
  uint64_t v23 = a22;
  a22 = 0;
  if (v23) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a22, v23);
  }
  unint64_t v27 = (void **)&v24;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

void sub_22E8C5CA4()
{
}

void sub_22E8C5CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
  uint64_t v23 = a23;
  a23 = 0;
  if (v23) {
    std::default_delete<std::string>::operator()[abi:ne180100](&a23);
  }
  JUMPOUT(0x22E8C5CF8);
}

void sub_22E8C5CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E8C5CCCLL);
}

uint64_t sub_22E8C5CE4(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  return sub_22E8C5CE8();
}

void sub_22E8C5CE8()
{
}

void xgboost::common::InvalidCategory(xgboost::common *this)
{
  std::to_string(&v8, 0x1000000);
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/categorical.h");
  uint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  std::operator+<char>();
  if ((v6 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v6 & 0x80u) == 0) {
    uint64_t v4 = v6;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v6 < 0) {
    operator delete(__p[0]);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_22E8C5DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void xgboost::common::HostSketchContainer::HostSketchContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __p[14] = *(void **)MEMORY[0x263EF8340];
  memset(__p, 0, 24);
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  uint64_t v5 = **(void **)(a3 + 168);
  uint64_t v6 = *(void *)(*(void *)(a3 + 168) + 8) - v5;
  uint64_t v7 = v5;
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::SketchContainerImpl();
}

void sub_22E8C624C()
{
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr(&v3);
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::~SketchContainerImpl(v0);
  _Unwind_Resume(v2);
}

void sub_22E8C6290(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::~SketchContainerImpl(v15);
  _Unwind_Resume(v16);
}

void sub_22E8C62A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x22E8C6308);
}

void sub_22E8C62C0()
{
}

void sub_22E8C62C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E8C62D4);
}

uint64_t xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::~SketchContainerImpl(uint64_t a1)
{
  xgboost::common::Monitor::~Monitor((char **)(a1 + 112));
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  std::exception_ptr v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  uint64_t v5 = (void **)(a1 + 24);
  std::vector<std::set<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)a1;
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

void xgboost::common::SortedSketchContainer::PushColPage(uint64_t a1, uint64_t **a2, const xgboost::MetaInfo *a3, unint64_t *a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "PushColPage");
  xgboost::common::Monitor::Start();
  if (v44.__m_.__opaque[7] < 0) {
    operator delete(__p);
  }
  if (*a4)
  {
    unint64_t v8 = a4[1];
    v37[0] = *a4;
    v37[1] = v8;
  }
  else if (*(unsigned char *)(a1 + 100))
  {
  }
  else
  {
    uint64_t v9 = *((void *)a3 + 9);
    int v39 = 0;
    uint64_t v40 = 0;
    int v38 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v38, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
  }
  v42.__ptr_ = (void *)((v39 - (unsigned char *)v38) >> 2);
  if (v42.__ptr_ != *(void **)a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>();
  }
  uint64_t v10 = **a2;
  uint64_t v11 = (*a2)[1] - v10;
  uint64_t v12 = *a2[1];
  uint64_t v13 = (v11 >> 3) - 1;
  if (!(v11 >> 3)) {
    uint64_t v13 = 0;
  }
  uint64_t v36 = v13;
  int v14 = *(_DWORD *)(a1 + 104);
  int v41 = 1;
  LODWORD(v42.__ptr_) = v14;
  if (v14 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  long long __p = 0;
  v44.__m_.__sig = 850045863;
  memset(v44.__m_.__opaque, 0, sizeof(v44.__m_.__opaque));
  if ((unint64_t)v11 >= 0x10)
  {
    uint64_t v15 = 0;
    uint64_t v35 = v12 + 4;
    while (1)
    {
      uint64_t v16 = (uint64_t *)(v10 + 8 * v15);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      if (!v12 && v18 != v17) {
LABEL_51:
      }
        std::terminate();
      uint64_t v19 = (xgboost::common::SortedQuantile *)(*(void *)(a1 + 176) + 48 * v15);
      int v20 = *(_DWORD *)(a1 + 96);
      *((void *)v19 + 4) = 0xBFF0000000000000;
      unint64_t v21 = (void *)*((void *)v19 + 5);
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      unint64_t v22 = (v20 + 1);
      if (v22 > (uint64_t)(v21[15] - v21[14]) >> 4)
      {
        std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(v21 + 14), v22);
        if (v21[15] == v21[14]) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v21[14];
        }
        v21[12] = v23;
        unint64_t v21 = (void *)*((void *)v19 + 5);
      }
      uint64_t v24 = v18 - v17;
      v21[13] = 0;
      *(void *)uint64_t v19 = 0;
      if (v18 != v17)
      {
        uint64_t v25 = (unsigned int *)(v12 + 8 * v17);
        double v26 = 0.0;
        uint64_t v27 = v18 - v17;
        do
        {
          unsigned int v28 = *v25;
          v25 += 2;
          double v26 = v26 + *((float *)v38 + v28);
          --v27;
        }
        while (v27);
        *(double *)uint64_t v19 = v26;
      }
      uint64_t v29 = *(void *)(a1 + 48);
      unint64_t v30 = *(void *)(a1 + 56) - v29;
      if (!v30) {
        goto LABEL_54;
      }
      if (v30 <= v15) {
        goto LABEL_51;
      }
      if (*(unsigned char *)(v29 + v15) == 1)
      {
        if (v18 != v17)
        {
          uint64_t v31 = (float *)(v35 + 8 * v17);
          do
          {
            std::__tree<float>::__emplace_unique_key_args<float,float &>((uint64_t *)(*(void *)(a1 + 24) + 24 * v15), *v31, *v31);
            v31 += 2;
            --v24;
          }
          while (v24);
        }
      }
      else
      {
LABEL_54:
        if (v18 != v17)
        {
          unint64_t v32 = (float *)(v35 + 8 * v17);
          do
          {
            xgboost::common::SortedQuantile::Push(v19, *v32, *((float *)v38 + *((unsigned int *)v32 - 1)), *(_DWORD *)(a1 + 96));
            v32 += 2;
            --v24;
          }
          while (v24);
        }
      }
      uint64_t v33 = *(void *)(a1 + 48);
      unint64_t v34 = *(void *)(a1 + 56) - v33;
      if (v34) {
        break;
      }
      if (v18 != v17) {
        goto LABEL_47;
      }
LABEL_48:
      if (++v15 == v36) {
        goto LABEL_14;
      }
    }
    if (v34 <= v15) {
      goto LABEL_51;
    }
    if (v18 == v17 || *(unsigned char *)(v33 + v15) == 1) {
      goto LABEL_48;
    }
LABEL_47:
    xgboost::common::SortedQuantile::Finalize(v19, *(_DWORD *)(a1 + 96));
    goto LABEL_48;
  }
LABEL_14:
  dmlc::OMPException::Rethrow((std::exception_ptr *)&__p);
  std::mutex::~mutex(&v44);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "PushColPage");
  xgboost::common::Monitor::Stop();
  if (v44.__m_.__opaque[7] < 0) {
    operator delete(__p);
  }
  if (v38)
  {
    int v39 = v38;
    operator delete(v38);
  }
}

void sub_22E8C68D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  __cxa_end_catch();
  sub_22E8C6928(a1, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

void sub_22E8C68F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15) {
    operator delete(a15);
  }
  JUMPOUT(0x22E8C69B0);
}

void sub_22E8C6928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_22E8C6940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a25 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x22E8C6994);
}

void sub_22E8C6954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  uint64_t v20 = a20;
  a20 = 0;
  if (v20) {
    std::default_delete<std::string>::operator()[abi:ne180100](&a20);
  }
  JUMPOUT(0x22E8C6988);
}

void sub_22E8C6968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E8C6974);
}

void sub_22E8C699C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_22E8C6A14(_Unwind_Exception *exception_object)
{
  std::exception_ptr v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
}

void dmlc::LogCheckFormat<unsigned int,unsigned long>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E8C6C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_22E8C6CC0(_Unwind_Exception *exception_object)
{
  std::exception_ptr v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *xgboost::common::Span<float,18446744073709551615ul>::subspan@<X0>(void *result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  if (a3 == -1)
  {
    a3 = *result - a2;
    if (*result < a2) {
      goto LABEL_8;
    }
  }
  else if (a3 + a2 > *result)
  {
    goto LABEL_8;
  }
  uint64_t v4 = result[1];
  *a4 = a3;
  a4[1] = v4 + 4 * a2;
  if (a3 && !v4) {
LABEL_8:
  }
    std::terminate();
  return result;
}

unint64_t *xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan(unint64_t *result, void *a2, unint64_t a3, unint64_t a4)
{
  if (a4 == -1)
  {
    a4 = *a2 - a3;
    if (*a2 < a3) {
      goto LABEL_8;
    }
  }
  else if (a4 + a3 > *a2)
  {
    goto LABEL_8;
  }
  uint64_t v4 = a2[1];
  char *result = a4;
  result[1] = v4 + 8 * a3;
  if (a4 && !v4) {
LABEL_8:
  }
    std::terminate();
  return result;
}

uint64_t *std::__tree<float>::__emplace_unique_key_args<float,float &>(uint64_t *result, float a2, float a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        float v8 = *(float *)(v5 + 28);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *(void *)v5;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (float *)operator new(0x20uLL);
    v9[7] = a3;
    return std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<void *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22E8C6E9C(_Unwind_Exception *exception_object)
{
  std::exception_ptr v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::exception_ptr v3 = *(void **)(a2 + 112);
  if (v3)
  {
    *(void *)(a2 + 120) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 72);
  if (v4)
  {
    *(void *)(a2 + 80) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a2 + 48);
  if (v5)
  {
    *(void *)(a2 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v6;
    operator delete(v6);
  }
}

void std::vector<std::set<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 24;
        std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void dmlc::LogCheckFormat<unsigned long,int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E8C71EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<unsigned long>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_22E8C72B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)v2);
    std::exception_ptr v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<unsigned long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<unsigned long>::__append(void **a1, unint64_t a2, void *a3)
{
  size_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = &v15[8 * v12];
    uint64_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    int v21 = v18;
    do
    {
      *(void *)int v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    int v22 = &v15[8 * v14];
    int v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_22E8C7598(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22E8C7614(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *rabit::op::Reducer<rabit::op::Sum,unsigned long>(uint64_t *result, void *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      uint64_t v4 = *result++;
      *a2++ += v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

float rabit::op::Reducer<rabit::op::Sum,float>(float *a1, float *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      float v4 = *a1++;
      float result = v4 + *a2;
      *a2++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *std::vector<xgboost::FeatureType>::vector<xgboost::common::detail::SpanIterator<xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,true>,0>(void *a1, unint64_t *a2, unint64_t a3, unint64_t *a4, uint64_t a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a4 != a2) {
LABEL_9:
  }
    std::terminate();
  unint64_t v6 = a3;
  if (a5 != a3)
  {
    std::vector<xgboost::FeatureType>::__vallocate[abi:ne180100](a1, a5 - a3);
    uint64_t v9 = (unsigned char *)a1[1];
    unint64_t v10 = *a4;
    if (v6 > *a4) {
      unint64_t v10 = v6;
    }
    do
    {
      if (v10 == v6) {
        goto LABEL_9;
      }
      *v9++ = *(unsigned char *)(a4[1] + v6++);
    }
    while (a5 != v6);
    a1[1] = v9;
  }
  return a1;
}

void sub_22E8C7714(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::FeatureType>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__init_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Queue::QEntry*,xgboost::common::WQSummary<float,float>::Queue::QEntry*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float result = std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22E8C77D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

void *std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__init_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry*,xgboost::common::WQSummary<float,float>::Entry*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float result = std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22E8C78CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer::SummaryContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (a1 == a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__assign_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry*,xgboost::common::WQSummary<float,float>::Entry*>((char *)(a1 + 16), *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 24);
  }
  if (v5 == v4) {
    uint64_t v4 = 0;
  }
  *(void *)a1 = v4;
  return a1;
}

void sub_22E8C79E0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__assign_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry*,xgboost::common::WQSummary<float,float>::Entry*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    float result = std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    float result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    float result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

uint64_t std::__split_buffer<xgboost::common::WQuantileSketch<float,float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 136;
    std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100](v4, i - 136);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]()
{
}

void xgboost::common::ParallelFor<unsigned long,xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1}>(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v15.__ptr_ = 0;
  v16.__m_.__sig = 850045863;
  memset(v16.__m_.__opaque, 0, sizeof(v16.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        for (uint64_t i = 0; i != a1; ++i)
          dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v15, a5, a6, i);
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          for (uint64_t j = 0; j != a1; ++j)
            dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v15, a5, a6, j);
        }
      }
      else if (a1)
      {
        for (uint64_t k = 0; k != a1; ++k)
          dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v15, a5, a6, k);
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          for (uint64_t m = 0; m != a1; ++m)
            dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v15, a5, a6, m);
        }
      }
      else if (a1)
      {
        for (uint64_t n = 0; n != a1; ++n)
          dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v15, a5, a6, n);
      }
      break;
    case 3:
      if (a1)
      {
        for (iuint64_t i = 0; ii != a1; ++ii)
          dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v15, a5, a6, ii);
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v15);
  std::mutex::~mutex(&v16);
  std::exception_ptr::~exception_ptr(&v15);
}

void sub_22E8C7E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, std::exception_ptr a12)
{
}

uint64_t *dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float result = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) == *(void *)a2) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v5 = (uint64_t *)(*(void *)(a3 + 8) + 8 * a4);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = v7 - *v5;
  uint64_t v9 = *(void *)(a3 + 24);
  if (v8) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10) {
    std::terminate();
  }
  if (v7 != v6)
  {
    unint64_t v11 = (unsigned int *)(v9 + 8 * v6);
    uint64_t v12 = *result;
    unint64_t v13 = (result[1] - *result) >> 3;
    do
    {
      unsigned int v15 = *v11;
      v11 += 2;
      uint64_t v14 = v15;
      if (v13 <= v15) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      ++*(void *)(v12 + 8 * v14);
      --v8;
    }
    while (v8);
  }
  return result;
}

void xgboost::common::ParallelFor<unsigned int,xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned int)#1}>(int a1, int a2, int a3, uint64_t a4, uint64_t **a5, uint64_t *a6)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v48.__ptr_ = 0;
  v49.__m_.__sig = 850045863;
  memset(v49.__m_.__opaque, 0, sizeof(v49.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = *a5;
        uint64_t v8 = a5[1];
        do
        {
          if (v7 != v8)
          {
            uint64_t v9 = *a6;
            uint64_t v10 = *(void *)(*a6 + 8 * v6);
            unint64_t v11 = v7;
            do
            {
              uint64_t v12 = *v11;
              v11 += 3;
              v10 += *(void *)(v12 + 8 * v6);
              *(void *)(v9 + 8 * v6) = v10;
            }
            while (v11 != v8);
          }
          ++v6;
        }
        while (v6 != a1);
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          uint64_t v13 = 0;
          uint64_t v14 = *a5;
          unsigned int v15 = a5[1];
          do
          {
            if (v14 != v15)
            {
              uint64_t v16 = *a6;
              uint64_t v17 = *(void *)(*a6 + 8 * v13);
              uint64_t v18 = v14;
              do
              {
                uint64_t v19 = *v18;
                v18 += 3;
                v17 += *(void *)(v19 + 8 * v13);
                *(void *)(v16 + 8 * v13) = v17;
              }
              while (v18 != v15);
            }
            ++v13;
          }
          while (v13 != a1);
        }
      }
      else if (a1)
      {
        uint64_t v34 = 0;
        uint64_t v35 = *a5;
        uint64_t v36 = a5[1];
        do
        {
          if (v35 != v36)
          {
            uint64_t v37 = *a6;
            uint64_t v38 = *(void *)(*a6 + 8 * v34);
            int v39 = v35;
            do
            {
              uint64_t v40 = *v39;
              v39 += 3;
              v38 += *(void *)(v40 + 8 * v34);
              *(void *)(v37 + 8 * v34) = v38;
            }
            while (v39 != v36);
          }
          ++v34;
        }
        while (v34 != a1);
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          uint64_t v20 = 0;
          int v21 = *a5;
          int v22 = a5[1];
          do
          {
            if (v21 != v22)
            {
              uint64_t v23 = *a6;
              uint64_t v24 = *(void *)(*a6 + 8 * v20);
              uint64_t v25 = v21;
              do
              {
                uint64_t v26 = *v25;
                v25 += 3;
                v24 += *(void *)(v26 + 8 * v20);
                *(void *)(v23 + 8 * v20) = v24;
              }
              while (v25 != v22);
            }
            ++v20;
          }
          while (v20 != a1);
        }
      }
      else if (a1)
      {
        uint64_t v41 = 0;
        std::exception_ptr v42 = *a5;
        uint64_t v43 = a5[1];
        do
        {
          if (v42 != v43)
          {
            uint64_t v44 = *a6;
            uint64_t v45 = *(void *)(*a6 + 8 * v41);
            long long v46 = v42;
            do
            {
              uint64_t v47 = *v46;
              v46 += 3;
              v45 += *(void *)(v47 + 8 * v41);
              *(void *)(v44 + 8 * v41) = v45;
            }
            while (v46 != v43);
          }
          ++v41;
        }
        while (v41 != a1);
      }
      break;
    case 3:
      if (a1)
      {
        uint64_t v27 = 0;
        unsigned int v28 = *a5;
        uint64_t v29 = a5[1];
        do
        {
          if (v28 != v29)
          {
            uint64_t v30 = *a6;
            uint64_t v31 = *(void *)(*a6 + 8 * v27);
            unint64_t v32 = v28;
            do
            {
              uint64_t v33 = *v32;
              v32 += 3;
              v31 += *(void *)(v33 + 8 * v27);
              *(void *)(v30 + 8 * v27) = v31;
            }
            while (v32 != v29);
          }
          ++v27;
        }
        while (v27 != a1);
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v48);
  std::mutex::~mutex(&v49);
  std::exception_ptr::~exception_ptr(&v48);
}

void sub_22E8C832C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, std::exception_ptr a12)
{
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, const std::vector<unsigned int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    uint64_t v7 = &end[__n];
    std::vector<unsigned int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_22E8C8408(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry *,xgboost::common::WQSummary<float,float>::Entry *,xgboost::common::detail::SpanIterator<xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>,false>>(void *result, _OWORD *a2, _OWORD *a3, unint64_t *a4, unint64_t a5)
{
  if (a2 != a3)
  {
    unint64_t v5 = *a4;
    uint64_t v6 = 16 * a5;
    do
    {
      if (a5 >= v5 || (*(_OWORD *)(a4[1] + v6) = *a2, unint64_t v5 = *a4, a5 == *a4)) {
        std::terminate();
      }
      ++a2;
      ++a5;
      v6 += 16;
    }
    while (a2 != a3);
    a2 = a3;
  }
  uint64_t *result = a2;
  result[1] = a4;
  result[2] = a5;
  return result;
}

unint64_t *rabit::op::Reducer<rabit::op::Max,unsigned long>(unint64_t *result, unint64_t *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      unint64_t v5 = *result++;
      unint64_t v4 = v5;
      if (*a2 < v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v5 = value;
  std::vector<unsigned int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      std::vector<unsigned int>::pointer end = this->__end_;
    }
    else
    {
      uint64_t v14 = 0;
    }
    unsigned int v15 = &v14[4 * v11];
    uint64_t v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8);
    for (uint64_t i = *(void *)(*(void *)(a1 + 16) + 8); i != v3; i += 40)
    {
      unint64_t v5 = *(void **)(i + 16);
      if (v5)
      {
        *(void *)(i + 24) = v5;
        operator delete(v5);
      }
    }
  }
  return a1;
}

uint64_t std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 40;
    unint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 xgboost::common::WQSummary<float,float>::SetPrune(void *result, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 <= a3)
  {
    xgboost::common::WQSummary<float,float>::CopyFrom(result, a2);
  }
  else
  {
    v4.n128_u32[0] = *(_DWORD *)(*(void *)a2 + 4);
    float v5 = *(float *)(*(void *)a2 + 16 * v3 - 16);
    unint64_t v6 = a3 - 1;
    *(_OWORD *)uint64_t *result = *(_OWORD *)*(void *)a2;
    result[1] = 1;
    if (a3 - 1 < 2)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      float v8 = v5 - v4.n128_f32[0];
      unint64_t v9 = 1;
      uint64_t v10 = 1;
      do
      {
        unint64_t v11 = v10;
        float v12 = (float)(v4.n128_f32[0] + (float)((float)(v8 * (float)v9) / (float)v6))
            + (float)(v4.n128_f32[0] + (float)((float)(v8 * (float)v9) / (float)v6));
        uint64_t v14 = *(_OWORD **)a2;
        uint64_t v13 = *(void *)(a2 + 8);
        uint64_t v15 = v13 - 1;
        if (v11 <= v13 - 1) {
          uint64_t v10 = v13 - 1;
        }
        else {
          uint64_t v10 = v11;
        }
        uint64_t v16 = (float *)&v14[v11 + 1] + 1;
        while (v10 != v11)
        {
          ++v11;
          float v17 = *v16 + *(v16 - 1);
          v16 += 4;
          if (v12 < v17)
          {
            uint64_t v10 = v11 - 1;
            break;
          }
        }
        if (v10 == v15) {
          break;
        }
        int v18 = (float *)&v14[v10];
        uint64_t v19 = (float *)&v14[v10 + 1];
        if (v12 >= (float)((float)(*v18 + v18[2]) + (float)(v19[1] - v19[2])))
        {
          if (v10 + 1 != v7)
          {
            uint64_t v22 = *result;
            uint64_t v23 = result[1];
            result[1] = v23 + 1;
            *(_OWORD *)(v22 + 16 * v23) = *(_OWORD *)v19;
            uint64_t v7 = v10 + 1;
          }
        }
        else if (v10 != v7)
        {
          uint64_t v20 = *result;
          uint64_t v21 = result[1];
          result[1] = v21 + 1;
          *(_OWORD *)(v20 + 16 * v21) = *(_OWORD *)v18;
          uint64_t v7 = v10;
        }
        ++v9;
      }
      while (v9 != v6);
    }
    uint64_t v24 = *(void *)(a2 + 8) - 1;
    if (v7 != v24)
    {
      uint64_t v25 = *(_OWORD **)a2;
      uint64_t v26 = *result;
      uint64_t v27 = result[1];
      result[1] = v27 + 1;
      __n128 v4 = (__n128)v25[v24];
      *(__n128 *)(v26 + 16 * v27) = v4;
    }
  }
  return v4;
}

void *xgboost::common::WQSummary<float,float>::CopyFrom(void *result, uint64_t a2)
{
  unint64_t v3 = result;
  __n128 v4 = *(const void **)a2;
  if (v4)
  {
    float result = (void *)*result;
    if (*v3)
    {
      uint64_t v5 = *(void *)(a2 + 8);
      v3[1] = v5;
      return memcpy(result, v4, 16 * v5);
    }
    else
    {
      uint64_t v7 = v3[1];
      int v9 = 0;
      if (v7) {
        dmlc::LogCheckFormat<unsigned long,int>();
      }
      uint64_t v8 = *(void *)(a2 + 8);
      int v9 = 0;
      if (v8) {
        dmlc::LogCheckFormat<unsigned long,int>();
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    int v9 = 0;
    if (v6) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
    result[1] = 0;
  }
  return result;
}

void sub_22E8C8AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::WQSummary<float,float>::SetCombine(float32x2_t **a1, float32x2_t **a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  if (v5)
  {
    uint64_t v6 = a2;
    uint64_t v7 = *(void *)(a3 + 8);
    if (v7)
    {
      uint64_t v8 = 0;
      int v9 = *a2;
      uint64_t v10 = (uint64_t)&(*a2)[2 * (void)v5];
      unint64_t v11 = *(float32x2_t **)a3;
      uint64_t v12 = *(void *)a3 + 16 * v7;
      uint64_t v13 = *a1;
      float v14 = 0.0;
      float v15 = 0.0;
      while (1)
      {
        float v16 = v9[1].f32[1];
        float v17 = v11[1].f32[1];
        if (v16 == v17)
        {
          float32_t v18 = v9[1].f32[0] + v11[1].f32[0];
          uint64_t v19 = &v13[v8];
          float32x2_t *v19 = vadd_f32(*v9, *v11);
          v19[1].f32[0] = v18;
          v19[1].f32[1] = v16;
          float v15 = v9->f32[0] + v9[1].f32[0];
          float v14 = v11->f32[0] + v11[1].f32[0];
          v9 += 2;
        }
        else
        {
          uint64_t v20 = &v13[v8];
          if (v16 < v17)
          {
            float32_t v21 = v9->f32[1] + (float)(v11->f32[1] - v11[1].f32[0]);
            __int32 v22 = v9[1].i32[0];
            v13[v8].f32[0] = v14 + v9->f32[0];
            v20->f32[1] = v21;
            v20[1].i32[0] = v22;
            v20[1].f32[1] = v16;
            float v15 = v9->f32[0] + v9[1].f32[0];
            v9 += 2;
            goto LABEL_10;
          }
          float32_t v23 = v11->f32[1] + (float)(v9->f32[1] - v9[1].f32[0]);
          __int32 v24 = v11[1].i32[0];
          v13[v8].f32[0] = v15 + v11->f32[0];
          v20->f32[1] = v23;
          v20[1].i32[0] = v24;
          v20[1].f32[1] = v17;
          float v14 = v11->f32[0] + v11[1].f32[0];
        }
        v11 += 2;
LABEL_10:
        v8 += 2;
        if (v9 == (float32x2_t *)v10 || v11 == (float32x2_t *)v12)
        {
          if (v9 == (float32x2_t *)v10)
          {
            uint64_t v31 = &v13[v8];
          }
          else
          {
            uint64_t v25 = 0;
            float v26 = *(float *)(v12 - 12);
            do
            {
              uint64_t v27 = &v9[v25];
              unsigned int v28 = &v13[v25 + v8];
              float32_t v29 = v26 + v9[v25].f32[1];
              float32x2_t v30 = v9[v25 + 1];
              v28->f32[0] = v14 + v9[v25].f32[0];
              v28->f32[1] = v29;
              v28[1] = v30;
              v25 += 2;
            }
            while (&v27[2] != (float32x2_t *)v10);
            uint64_t v31 = &v13[v8 + v25];
          }
          if (v11 != (float32x2_t *)v12)
          {
            float v32 = *(float *)(v10 - 12);
            do
            {
              float32_t v33 = v32 + v11->f32[1];
              float32x2_t v34 = v11[1];
              v31->f32[0] = v15 + v11->f32[0];
              v31->f32[1] = v33;
              v31[1] = v34;
              v31 += 2;
              v11 += 2;
            }
            while (v11 != (float32x2_t *)v12);
          }
          unint64_t v35 = ((char *)v31 - (char *)v13) >> 4;
          a1[1] = (float32x2_t *)v35;
          if (v31 == v13)
          {
            float v37 = 0.0;
            float v39 = 0.0;
            float v40 = 0.0;
          }
          else
          {
            uint64_t v36 = (float *)v13 + 1;
            float v37 = 0.0;
            unint64_t v38 = v35;
            float v39 = 0.0;
            float v40 = 0.0;
            float v41 = 0.0;
            float v42 = 0.0;
            do
            {
              if (*(v36 - 1) >= v42)
              {
                float v42 = *(v36 - 1);
              }
              else
              {
                *(v36 - 1) = v42;
                if (v37 < (float)(v42 - v42)) {
                  float v37 = v42 - v42;
                }
              }
              if (*v36 >= v41)
              {
                float v41 = *v36;
              }
              else
              {
                *uint64_t v36 = v41;
                if (v39 < (float)(v41 - v41)) {
                  float v39 = v41 - v41;
                }
              }
              float v43 = v42 + v36[1];
              if (v41 < v43)
              {
                *uint64_t v36 = v43;
                if (v40 < (float)(v43 - v43)) {
                  float v40 = v43 - v43;
                }
                float v41 = v43;
              }
              v36 += 4;
              --v38;
            }
            while (v38);
          }
          BOOL v45 = v37 <= 10.0 && v39 <= 10.0 && v40 <= 10.0;
          if (!v45 && *(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
            xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v54, (uint64_t)__p, 308, 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"mingap=", 7);
            long long v46 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", maxgap=", 9);
            uint64_t v47 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", wgap=", 7);
            std::ostream::operator<<();
            xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v54);
            if (v53 < 0) {
              operator delete(__p[0]);
            }
            unint64_t v35 = (unint64_t)a1[1];
          }
          if (v35 > (unint64_t)v6[1] + *(void *)(a3 + 8))
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v54);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
            std::mutex v49 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v54);
            uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Check failed: size <= sa.size + sb.size", 39);
            unint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"bug in combine", 14);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v54);
          }
          return;
        }
      }
    }
  }
  else
  {
    a2 = (float32x2_t **)a3;
  }

  xgboost::common::WQSummary<float,float>::CopyFrom(a1, (uint64_t)a2);
}

void sub_22E8C8F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,false>(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = ((uint64_t)a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (*(a2 - 2) < *(float *)v11)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)uint64_t v11 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          float result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)v11, (float *)(v11 + 8), a2 - 2);
          break;
        case 4uLL:
          float result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)v11, (float *)(v11 + 8), (float *)(v11 + 16), (void *)a2 - 1);
          break;
        case 5uLL:
          float result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)v11, (float *)(v11 + 8), (float *)(v11 + 16), (uint64_t *)(v11 + 24), (uint64_t *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if ((float *)v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    float v17 = (float *)(v11 + 8 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)v11, (float *)(v11 + 8 * (v15 >> 1)), a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)(v11 + 8), v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)(v11 + 16), (float *)(v11 + 8 + 8 * v16), a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(v17 - 2, v17, (float *)(v11 + 8 + 8 * v16));
      uint64_t v18 = *(void *)v11;
      *(void *)uint64_t v11 = *(void *)v17;
      *(void *)float v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)(v11 + 8 * (v15 >> 1)), (float *)v11, a2 - 2);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(float *)(v11 - 8) >= *(float *)v11)
    {
      float result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::common::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>((float *)v11, a2);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::common::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>((float *)v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(v11, (uint64_t)v19);
    uint64_t v11 = (uint64_t)(v19 + 2);
    float result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((uint64_t)(v19 + 2), (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      float result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t)(v19 + 2);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(v11, (uint64_t)a2);
  }
  else if ((float *)v11 != a2)
  {
    float32_t v23 = (float *)(v11 + 8);
    while (v23 != a2)
    {
      __int32 v24 = v23;
      float v25 = *(float *)(v10 + 8);
      if (v25 < *(float *)v10)
      {
        int v26 = *(_DWORD *)(v10 + 12);
        uint64_t v27 = v24;
        do
        {
          unsigned int v28 = v27;
          uint64_t v29 = *((void *)v27 - 1);
          v27 -= 2;
          *(void *)unsigned int v28 = v29;
        }
        while (*(v28 - 4) > v25);
        float *v27 = v25;
        *((_DWORD *)v27 + 1) = v26;
      }
      float32_t v23 = v24 + 2;
      uint64_t v10 = (uint64_t)v24;
    }
  }
  return result;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 8;
    if (result + 8 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        float v6 = *(float *)(v4 + 8);
        if (v6 < *(float *)v4)
        {
          int v7 = *(_DWORD *)(v4 + 12);
          uint64_t v8 = v3;
          while (1)
          {
            *(void *)(result + v8 + 8) = *(void *)(result + v8);
            if (!v8) {
              break;
            }
            float v9 = *(float *)(result + v8 - 8);
            v8 -= 8;
            if (v9 <= v6)
            {
              uint64_t v10 = result + v8 + 8;
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *(float *)uint64_t v10 = v6;
          *(_DWORD *)(v10 + 4) = v7;
        }
        uint64_t v2 = v5 + 8;
        v3 += 8;
        uint64_t v4 = v5;
      }
      while (v5 + 8 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a3;
  if (*a2 < *a1)
  {
    uint64_t v5 = *(void *)a1;
    if (v4 < v3)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v5;
      return 1;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v5;
    if (*a3 >= *(float *)&v5) {
      return 1;
    }
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v5;
    return 2;
  }
  if (v4 < v3)
  {
    uint64_t v6 = *(void *)a2;
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v6;
    if (*a2 >= *a1) {
      return 1;
    }
    uint64_t v7 = *(void *)a1;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v7;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::common::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>(float *a1, float *a2)
{
  uint64_t v2 = *(void *)a1;
  if (*(a2 - 2) <= COERCE_FLOAT(*(void *)a1))
  {
    uint64_t v5 = a1 + 2;
    do
    {
      float v3 = v5;
      if (v5 >= a2) {
        break;
      }
      v5 += 2;
    }
    while (*v3 <= *(float *)&v2);
  }
  else
  {
    float v3 = a1;
    do
    {
      float v4 = v3[2];
      v3 += 2;
    }
    while (v4 <= *(float *)&v2);
  }
  if (v3 < a2)
  {
    do
    {
      float v6 = *(a2 - 2);
      a2 -= 2;
    }
    while (v6 > *(float *)&v2);
  }
  while (v3 < a2)
  {
    uint64_t v7 = *(void *)v3;
    *(void *)float v3 = *(void *)a2;
    *(void *)a2 = v7;
    do
    {
      float v8 = v3[2];
      v3 += 2;
    }
    while (v8 <= *(float *)&v2);
    do
    {
      float v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 > *(float *)&v2);
  }
  if (v3 - 2 != a1) {
    *(void *)a1 = *((void *)v3 - 1);
  }
  *((void *)v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::common::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>(float *a1, float *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)a1;
  do
  {
    float v4 = a1[v2 + 2];
    v2 += 2;
  }
  while (v4 < *(float *)&v3);
  uint64_t v5 = &a1[v2];
  float v6 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      float v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= *(float *)&v3);
  }
  else
  {
    do
    {
      float v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= *(float *)&v3);
  }
  if (v5 < a2)
  {
    float v9 = &a1[v2];
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = *(void *)v9;
      *(void *)float v9 = *(void *)v10;
      *(void *)uint64_t v10 = v11;
      do
      {
        float v12 = v9[2];
        v9 += 2;
      }
      while (v12 < *(float *)&v3);
      do
      {
        float v13 = *(v10 - 2);
        v10 -= 2;
      }
      while (v13 >= *(float *)&v3);
    }
    while (v9 < v10);
    float v6 = v9 - 2;
  }
  if (v6 != a1) {
    *(void *)a1 = *(void *)v6;
  }
  *(void *)float v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (void *)(a2 - 8));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 8));
      return 1;
    default:
      float v7 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v8 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    float v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      int v12 = *(_DWORD *)(v8 + 4);
      uint64_t v13 = v9;
      while (1)
      {
        *(void *)(a1 + v13 + 24) = *(void *)(a1 + v13 + 16);
        if (v13 == -16) {
          break;
        }
        float v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          uint64_t v15 = a1 + v13 + 24;
          goto LABEL_12;
        }
      }
      uint64_t v15 = a1;
LABEL_12:
      *(float *)uint64_t v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8) {
        return v8 + 8 == a2;
      }
    }
    float v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3, void *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      uint64_t v10 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      if (*a2 < *a1)
      {
        uint64_t v11 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(a1, a2, a3, a4);
  if (*(float *)a5 < *(float *)a4)
  {
    uint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(float *)a4 < *a3)
    {
      uint64_t v12 = *(void *)a3;
      *(void *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        uint64_t v13 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v13;
        if (*a2 < *a1)
        {
          uint64_t v14 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v14;
        }
      }
    }
  }
  return result;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          uint64_t v15 = *(void *)v14;
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = a1;
        do
        {
          char v20 = v19;
          v19 += 2 * v17 + 2;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            uint64_t v17 = v22;
          }
          *(void *)char v20 = *(void *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(void *)uint64_t v19 = v18;
        }
        else
        {
          *(void *)uint64_t v19 = *(void *)v6;
          *(void *)uint64_t v6 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (float *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[2])
      {
        v8 += 2;
        uint64_t v7 = v9;
      }
      float v10 = *a4;
      if (*v8 >= *a4)
      {
        int v11 = *((_DWORD *)a4 + 1);
        do
        {
          uint64_t v12 = a4;
          a4 = v8;
          *(void *)uint64_t v12 = *(void *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (float *)(result + 8 * v7);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *v8 < v8[2])
          {
            v8 += 2;
            uint64_t v7 = v14;
          }
        }
        while (*v8 >= v10);
        *a4 = v10;
        *((_DWORD *)a4 + 1) = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (void *)(result + 8 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 8);
    float v8 = *(float *)(a2 - 8);
    if (*(float *)v6 < v8)
    {
      int v9 = *(_DWORD *)(a2 - 4);
      do
      {
        float v10 = v7;
        uint64_t v7 = v6;
        *float v10 = *v6;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (void *)(result + 8 * v5);
      }
      while (*(float *)v6 < v8);
      *(float *)uint64_t v7 = v8;
      *((_DWORD *)v7 + 1) = v9;
    }
  }
  return result;
}

void std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = a1[2];
  uint64_t v6 = a1[1];
  if (a2 <= (v5 - v6) >> 4)
  {
    a1[1] = &v6[16 * a2];
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v8 = v6 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - v7;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v4, v12);
      uint64_t v7 = *a1;
      uint64_t v6 = a1[1];
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    uint64_t v16 = &v14[16 * a2];
    if (v6 != v7)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v7);
      uint64_t v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void *std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>(a2);
    *a1 = v4;
    a1[2] = &v4[40 * v5];
    size_t v6 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v6);
    a1[1] = &v4[v6];
  }
  return a1;
}

void sub_22E8C9DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        size_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t *xgboost::common::anonymous namespace'::QuantileAllreduce<xgboost::common::WQSummary<float,float>::Entry>::Values(unint64_t *a1, void *a2, int a3, unsigned int a4)
{
  uint64_t v4 = a3;
  unint64_t v5 = a3 + 1;
  unint64_t v6 = a2[2];
  if (v6 <= v5
    || v6 <= a3
    || (xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>::subspan(v14, a2, *(void *)(a2[3] + 8 * a3), *(void *)(a2[3] + 8 * v5) - *(void *)(a2[3] + 8 * a3)), xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan(&v12, a2 + 4, (a2[6] + 1) * v4, a2[6] + 1), v12 <= a4)|| (unint64_t v10 = a4 + 1, v12 <= v10))
  {
    std::terminate();
  }
  return xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>::subspan(a1, v14, *(void *)(v13 + 8 * a4), *(void *)(v13 + 8 * v10) - *(void *)(v13 + 8 * a4));
}

void xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::Push(uint64_t a1, float a2, float a3)
{
  if (a3 != 0.0)
  {
    unint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = *(void *)a1;
    uint64_t v9 = *(void *)(a1 + 8) - v7;
    if (v6 == v9 >> 3 && *(float *)(v7 + 8 * v6 - 8) != a2)
    {
      if (v9 == 8)
      {
        std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::resize(a1, 2 * *(void *)(a1 + 40));
      }
      else
      {
        unint64_t v10 = 2 * *(void *)(a1 + 40);
        if (v10 > (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 4)
        {
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(a1 + 112, v10);
          if (*(void *)(a1 + 120) == *(void *)(a1 + 112)) {
            uint64_t v11 = 0;
          }
          else {
            uint64_t v11 = *(void *)(a1 + 112);
          }
          *(void *)(a1 + 96) = v11;
          uint64_t v7 = *(void *)a1;
          unint64_t v6 = *(void *)(a1 + 24);
        }
        unint64_t v12 = 126 - 2 * __clz(v6);
        if (v6) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,false>(v7, (float *)(v7 + 8 * v6), (uint64_t)&v60, v13, 1);
        *(void *)(a1 + 104) = 0;
        unint64_t v14 = *(void *)(a1 + 24);
        if (v14)
        {
          uint64_t v15 = 0;
          unint64_t v16 = 0;
          uint64_t v17 = *(void *)a1;
          uint64_t v18 = *(void *)(a1 + 96);
          uint64_t v19 = *(void *)a1 + 12;
          float v20 = 0.0;
          do
          {
            uint64_t v21 = (float *)(v17 + 8 * v16);
            unint64_t v22 = v16 + 1;
            float v24 = *v21;
            float v23 = v21[1];
            if (v16 + 1 < v14)
            {
              float v25 = (float *)(v19 + 8 * v16);
              while (*(v25 - 1) == v24)
              {
                float v26 = *v25;
                v25 += 2;
                float v23 = v23 + v26;
                if (v14 == ++v22)
                {
                  unint64_t v22 = v14;
                  break;
                }
              }
            }
            uint64_t v27 = (float *)(v18 + 16 * v15);
            float *v27 = v20;
            float v20 = v20 + v23;
            ++v15;
            v27[1] = v20;
            v27[2] = v23;
            v27[3] = v24;
            unint64_t v16 = v22;
          }
          while (v22 < v14);
          *(void *)(a1 + 104) = v15;
        }
        unsigned int v28 = (float32x2_t **)(a1 + 96);
        *(void *)(a1 + 24) = 0;
        unint64_t v29 = 2 * *(void *)(a1 + 40);
        if (v29 > (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 4)
        {
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(a1 + 112, v29);
          if (*(void *)(a1 + 120) == *(void *)(a1 + 112)) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = *(void *)(a1 + 112);
          }
          *(void *)(a1 + 96) = v30;
        }
        uint64_t v31 = 0;
        uint64_t v32 = a1 + 72;
        float32_t v33 = *(char **)(a1 + 48);
        for (uint64_t i = 1; ; ++i)
        {
          unint64_t v35 = i + 1;
          if (i + 1 > (unint64_t)((uint64_t)(*(void *)(a1 + 56) - (void)v33) >> 4))
          {
            std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(v32, *(void *)(a1 + 40) * v35);
            uint64_t v36 = *(void *)(a1 + 48);
            float32_t v33 = *(char **)(a1 + 56);
            float v37 = &v33[-v36];
            unint64_t v38 = (uint64_t)&v33[-v36] >> 4;
            if (v35 <= v38)
            {
              if (v35 < v38)
              {
                float32_t v33 = (char *)(v36 + 16 * v35);
                *(void *)(a1 + 56) = v33;
              }
            }
            else
            {
              uint64_t v39 = 16 * v31 + 16;
              uint64_t v40 = *(void *)(a1 + 64);
              if (v35 - v38 <= (v40 - (uint64_t)v33) >> 4)
              {
                bzero(*(void **)(a1 + 56), ((v39 - (void)v37) & 0xFFFFFFFFFFFFFFF0) + 16);
                v33 += 16 * (v35 - v38);
                *(void *)(a1 + 56) = v33;
                uint64_t v32 = a1 + 72;
              }
              else
              {
                if (v35 >> 60) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v41 = v40 - v36;
                uint64_t v42 = v41 >> 3;
                if (v41 >> 3 <= v35) {
                  uint64_t v42 = i + 1;
                }
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v43 = v42;
                }
                uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>>>(v43);
                uint64_t v46 = v45;
                uint64_t v47 = &v44[16 * v38];
                bzero(v47, ((v39 - (void)v37) & 0xFFFFFFFFFFFFFFF0) + 16);
                std::mutex v49 = *(char **)(a1 + 48);
                std::exception_ptr v48 = *(char **)(a1 + 56);
                if (v48 == v49)
                {
                  uint64_t v32 = a1 + 72;
                }
                else
                {
                  uint64_t v32 = a1 + 72;
                  do
                  {
                    *((_OWORD *)v47 - 1) = *((_OWORD *)v48 - 1);
                    v47 -= 16;
                    v48 -= 16;
                  }
                  while (v48 != v49);
                  std::exception_ptr v48 = *(char **)(a1 + 48);
                }
                uint64_t v50 = v46;
                float32_t v33 = &v44[16 * v35];
                *(void *)(a1 + 48) = v47;
                *(void *)(a1 + 56) = v33;
                *(void *)(a1 + 64) = &v44[16 * v50];
                if (v48)
                {
                  operator delete(v48);
                  float32_t v33 = *(char **)(a1 + 56);
                }
              }
            }
            unint64_t v51 = *(char **)(a1 + 48);
            if (v33 != v51)
            {
              unint64_t v52 = (v33 - v51) >> 4;
              if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
                uint64_t v53 = 0;
              }
              else {
                uint64_t v53 = *(void *)(a1 + 72);
              }
              if (v52 <= 1) {
                unint64_t v52 = 1;
              }
              uint64_t v54 = 16 * *(void *)(a1 + 40);
              uint64_t v55 = *(void **)(a1 + 48);
              do
              {
                *uint64_t v55 = v53;
                v55 += 2;
                v53 += v54;
                --v52;
              }
              while (v52);
              float32_t v33 = v51;
            }
          }
          unint64_t v56 = &v33[16 * i];
          if (!*((void *)v56 + 1))
          {
            xgboost::common::WQSummary<float,float>::SetPrune(v56, (uint64_t)v28, *(void *)(a1 + 40));
            goto LABEL_62;
          }
          xgboost::common::WQSummary<float,float>::SetPrune(v33, (uint64_t)v28, *(void *)(a1 + 40));
          xgboost::common::WQSummary<float,float>::SetCombine(v28, *(float32x2_t ***)(a1 + 48), *(void *)(a1 + 48) + 16 * i);
          float32_t v33 = *(char **)(a1 + 48);
          if (*(void *)(a1 + 104) <= *(void *)(a1 + 40)) {
            break;
          }
          *(void *)&v33[16 * i + 8] = 0;
          ++v31;
        }
        xgboost::common::WQSummary<float,float>::CopyFrom(&v33[16 * i], (uint64_t)v28);
      }
    }
LABEL_62:
    uint64_t v57 = *(void *)(a1 + 24);
    uint64_t v58 = *(void *)a1;
    if (v57 && *(float *)(v58 + 8 * (v57 - 1)) == a2)
    {
      *(float *)(v58 + 8 * (v57 - 1) + 4) = *(float *)(v58 + 8 * (v57 - 1) + 4) + a3;
    }
    else
    {
      *(void *)(a1 + 24) = v57 + 1;
      uint64_t v59 = (float *)(v58 + 8 * v57);
      *uint64_t v59 = a2;
      v59[1] = a3;
    }
  }
}

void std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    unint64_t v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  unint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = &v15[4 * v12];
    uint64_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_DWORD *)uint64_t v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    unint64_t v22 = &v15[4 * v14];
    float v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void dmlc::LogCheckFormat<unsigned int,unsigned int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E8CA70C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<xgboost::common::WXQuantileSketch<float,float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xF0F0F0F0F0F0F0F1 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 136 * ((136 * a2 - 136) / 0x88) + 136;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1E1E1E1E1E1E1E1) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xF0F0F0F0F0F0F0) {
      unint64_t v11 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WXQuantileSketch<float,float>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[136 * v8];
    uint64_t v18 = &v12[136 * v11];
    size_t v14 = 136 * ((136 * a2 - 136) / 0x88) + 136;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<xgboost::common::WXQuantileSketch<float,float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<xgboost::common::WXQuantileSketch<float,float>>::~__split_buffer(&v15);
  }
}

void sub_22E8CA894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<xgboost::common::WXQuantileSketch<float,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::common::WXQuantileSketch<float,float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::common::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WXQuantileSketch<float,float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(136 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::common::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 136;
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::QuantileSketchTemplate(v7 - 136, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 136;
      *((void *)&v15 + 1) -= 136;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_22E8CAA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::QuantileSketchTemplate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__init_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Queue::QEntry*,xgboost::common::WQSummary<float,float>::Queue::QEntry*>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<xgboost::common::WXQSummary<float,float>>::__init_with_size[abi:ne180100]<xgboost::common::WXQSummary<float,float>*,xgboost::common::WXQSummary<float,float>*>((void *)(a1 + 48), *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 4);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__init_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry*,xgboost::common::WQSummary<float,float>::Entry*>((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 4);
  xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::SummaryContainer(a1 + 96, a2 + 96);
  return a1;
}

void sub_22E8CAACC(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<xgboost::common::WXQSummary<float,float>>::__init_with_size[abi:ne180100]<xgboost::common::WXQSummary<float,float>*,xgboost::common::WXQSummary<float,float>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22E8CAB78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::SummaryContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (a1 == a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__assign_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry*,xgboost::common::WQSummary<float,float>::Entry*>((char *)(a1 + 16), *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 24);
  }
  if (v5 == v4) {
    uint64_t v4 = 0;
  }
  *(void *)a1 = v4;
  return a1;
}

void sub_22E8CAC10(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100](v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<xgboost::common::WXQuantileSketch<float,float>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<xgboost::common::WXQuantileSketch<float,float>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 136;
    std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100](v4, i - 136);
  }
}

void std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    long long v15 = v12;
    uint64_t v16 = &v12[40 * v8];
    uint64_t v18 = &v12[40 * v11];
    size_t v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_22E8CAE88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 40;
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::SummaryContainer(v7 - 40, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 40;
      *((void *)&v15 + 1) -= 40;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_22E8CB004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(void *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 40;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
}

void *xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::GetSummary(uint64_t *a1, uint64_t *a2)
{
  if (a1[7] == a1[6]) {
    unint64_t v4 = (a1[1] - *a1) >> 3;
  }
  else {
    unint64_t v4 = 2 * a1[5];
  }
  if (v4 > (a2[3] - a2[2]) >> 4)
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(a2 + 2), v4);
    if (a2[3] == a2[2]) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = a2[2];
    }
    *a2 = v5;
  }
  unint64_t v6 = a1[3];
  unint64_t v7 = 126 - 2 * __clz(v6);
  if (v6) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,false>(*a1, (float *)(*a1 + 8 * v6), (uint64_t)&v29, v8, 1);
  a2[1] = 0;
  unint64_t v9 = a1[3];
  if (v9)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = *a1;
    uint64_t v13 = *a2;
    uint64_t v14 = *a1 + 12;
    float v15 = 0.0;
    do
    {
      uint64_t v16 = (float *)(v12 + 8 * v11);
      unint64_t v17 = v11 + 1;
      float v19 = *v16;
      float v18 = v16[1];
      if (v11 + 1 < v9)
      {
        uint64_t v20 = (float *)(v14 + 8 * v11);
        while (*(v20 - 1) == v19)
        {
          float v21 = *v20;
          v20 += 2;
          float v18 = v18 + v21;
          if (v9 == ++v17)
          {
            unint64_t v17 = v9;
            break;
          }
        }
      }
      unint64_t v22 = (float *)(v13 + 16 * v10);
      *unint64_t v22 = v15;
      float v15 = v15 + v18;
      ++v10;
      v22[1] = v15;
      v22[2] = v18;
      v22[3] = v19;
      unint64_t v11 = v17;
    }
    while (v17 < v9);
    a2[1] = v10;
  }
  else
  {
    unint64_t v10 = 0;
  }
  uint64_t result = (void *)a1[6];
  unint64_t v24 = a1[5];
  if ((void *)a1[7] == result)
  {
    if (v10 <= v24) {
      return result;
    }
    uint64_t v25 = (uint64_t)(a1 + 12);
    if (v24 > (a1[15] - a1[14]) >> 4)
    {
      std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(a1 + 14), a1[5]);
      if (a1[15] == a1[14]) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = a1[14];
      }
      a1[12] = v28;
      unint64_t v24 = a1[5];
    }
    xgboost::common::WXQSummary<float,float>::SetPrune(a1 + 12, a2, v24);
  }
  else
  {
    xgboost::common::WXQSummary<float,float>::SetPrune(result, a2, v24);
    uint64_t v25 = a1[6];
    if ((unint64_t)(a1[7] - v25) >= 0x11)
    {
      unint64_t v26 = 1;
      uint64_t v27 = 24;
      do
      {
        if (*(void *)(v25 + v27))
        {
          if (*(void *)(v25 + 8))
          {
            xgboost::common::WQSummary<float,float>::SetCombine((float32x2_t **)a2, (float32x2_t **)v25, v25 + v27 - 8);
            xgboost::common::WXQSummary<float,float>::SetPrune((void *)a1[6], a2, a1[5]);
          }
          else
          {
            xgboost::common::WQSummary<float,float>::CopyFrom((void *)v25, v25 + v27 - 8);
          }
        }
        ++v26;
        uint64_t v25 = a1[6];
        v27 += 16;
      }
      while (v26 < (a1[7] - v25) >> 4);
    }
  }
  return xgboost::common::WQSummary<float,float>::CopyFrom(a2, v25);
}

void xgboost::common::WXQSummary<float,float>::SetPrune(void *a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v5 = a2[1];
  if (v5 <= a3)
  {
    xgboost::common::WQSummary<float,float>::CopyFrom(a1, (uint64_t)a2);
  }
  else
  {
    uint64_t v6 = *a2;
    if (a3 < 3 || (v7 = *(float *)(v6 + 4), unint64_t v8 = v5 - 1, v9 = *(float *)(v6 + 16 * (v5 - 1)) - v7, v9 == 0.0))
    {
      *(_OWORD *)*a1 = *(_OWORD *)v6;
      *(_OWORD *)(*a1 + 16) = *(_OWORD *)(*a2 + 16 * a2[1] - 16);
      a1[1] = 2;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      unint64_t v13 = a3 - 2;
      if (v9 >= 0.001) {
        float v14 = *(float *)(v6 + 16 * (v5 - 1)) - v7;
      }
      else {
        float v14 = 0.001;
      }
      float v15 = (float)(v14 + v14) / (float)v13;
      unint64_t v16 = v5 - 2;
      unint64_t v17 = (float *)(v6 + 24);
      float v18 = 0.0;
      do
      {
        uint64_t v19 = v10 + 1;
        float v20 = *(v17 - 1) - *v17;
        if ((float)(*(v17 - 2) + *v17) > (float)(v15 + v20))
        {
          if (v10 != v11) {
            float v18 = v18 + (float)(v20 - (float)(*(float *)(v6 + 16 * v11) + *(float *)(v6 + 16 * v11 + 8)));
          }
          ++v12;
          uint64_t v11 = v10 + 1;
        }
        v17 += 4;
        ++v10;
      }
      while (v16 != v19);
      if (v11 != v16) {
        float v18 = v18
      }
            + (float)((float)(*(float *)(v6 + 16 * v8 + 4) - *(float *)(v6 + 16 * v8 + 8))
                    - (float)(*(float *)(v6 + 16 * v11) + *(float *)(v6 + 16 * v11 + 8)));
      unint64_t v21 = v13 - v12;
      if (v13 <= v12)
      {
        uint64_t v22 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst();
        if (*(int *)(v22 + 4) >= 2)
        {
          uint64_t v23 = v22;
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
          xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v53, (uint64_t)__p, 425, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" check quantile stats, nbig=", 28);
          unint64_t v24 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", n=", 4);
          std::ostream::operator<<();
          xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v53);
          if (v52 < 0) {
            operator delete(__p[0]);
          }
          if (*(int *)(v23 + 4) >= 2)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
            xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v53, (uint64_t)__p, 426, 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" srcsize=", 9);
            uint64_t v25 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", maxsize=", 10);
            unint64_t v26 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", range=", 8);
            uint64_t v27 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", chunk=", 8);
            std::ostream::operator<<();
            xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v53);
            if (v52 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        xgboost::common::WQSummary<float,float>::Print((uint64_t)a2);
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v53);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
        char v29 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v53);
        uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: nbig < n", 22);
        uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"quantile: too many large chunk", 30);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v53);
        uint64_t v6 = *a2;
      }
      *(_OWORD *)*a1 = *(_OWORD *)v6;
      a1[1] = 1;
      unint64_t v32 = a2[1];
      if (v32 >= 2)
      {
        unint64_t v33 = 0;
        unint64_t v34 = 0;
        uint64_t v35 = *a2;
        unint64_t v36 = 1;
        unint64_t v37 = 1;
        do
        {
          if (v36 == v32 - 1
            || (float)(*(float *)(v35 + 16 * v36) + *(float *)(v35 + 16 * v36 + 8)) > (float)(v15
                                                                                            + (float)(*(float *)(v35 + 16 * v36 + 4) - *(float *)(v35 + 16 * v36 + 8))))
          {
            if (v34 != v36 - 1 && v37 < v21)
            {
              float v38 = (float)(*(float *)(v35 + 16 * v36 + 4) - *(float *)(v35 + 16 * v36 + 8))
                  + (float)(*(float *)(v35 + 16 * v36 + 4) - *(float *)(v35 + 16 * v36 + 8));
              while (1)
              {
                float v39 = (float)(v7 + (float)((float)(v18 * (float)v37) / (float)v21))
                    + (float)(v7 + (float)((float)(v18 * (float)v37) / (float)v21));
                uint64_t v35 = *a2;
                if (v39 >= v38) {
                  break;
                }
                unint64_t v40 = v34 <= v36 ? v36 : v34;
                uint64_t v41 = (float *)(v35 + 16 * v34 + 20);
                while (v40 != v34)
                {
                  ++v34;
                  float v42 = *v41 + *(v41 - 1);
                  v41 += 4;
                  if (v39 < v42)
                  {
                    --v34;
                    goto LABEL_39;
                  }
                }
                unint64_t v34 = v40;
LABEL_39:
                if (v34 == v36) {
                  break;
                }
                uint64_t v43 = v35 + 16 * v34;
                uint64_t v44 = v35 + 16 * (v34 + 1);
                if (v39 >= (float)((float)(*(float *)v43 + *(float *)(v43 + 8))
                                  + (float)(*(float *)(v44 + 4) - *(float *)(v44 + 8))))
                {
                  if (v34 + 1 != v33)
                  {
                    uint64_t v47 = *a1;
                    uint64_t v48 = a1[1];
                    a1[1] = v48 + 1;
                    *(_OWORD *)(v47 + 16 * v48) = *(_OWORD *)v44;
                    unint64_t v33 = v34 + 1;
                  }
                }
                else if (v34 != v33)
                {
                  uint64_t v45 = *a1;
                  uint64_t v46 = a1[1];
                  a1[1] = v46 + 1;
                  *(_OWORD *)(v45 + 16 * v46) = *(_OWORD *)v43;
                  unint64_t v33 = v34;
                }
                if (++v37 >= v21)
                {
                  uint64_t v35 = *a2;
                  unint64_t v37 = v13 - v12;
                  break;
                }
              }
            }
            if (v33 != v36)
            {
              uint64_t v49 = *a1;
              uint64_t v50 = a1[1];
              a1[1] = v50 + 1;
              *(_OWORD *)(v49 + 16 * v50) = *(_OWORD *)(v35 + 16 * v36);
              uint64_t v35 = *a2;
            }
            float v7 = v7
               + (float)((float)(*(float *)(v35 + 16 * v36) + *(float *)(v35 + 16 * v36 + 8))
                       - (float)(*(float *)(v35 + 16 * v36 + 4) - *(float *)(v35 + 16 * v36 + 8)));
            unint64_t v32 = a2[1];
            unint64_t v34 = v36;
            unint64_t v33 = v36;
          }
          ++v36;
        }
        while (v36 < v32);
      }
    }
  }
}

void sub_22E8CB86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::WQSummary<float,float>::Print(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v8);
      int v9 = 4;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"[", 1);
      unint64_t v4 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"] rmin=", 7);
      unint64_t v5 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", rmax=", 7);
      uint64_t v6 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", wmin=", 7);
      float v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", v=", 4);
      std::ostream::operator<<();
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v8);
      ++v3;
      v2 += 16;
    }
    while (v3 < *(void *)(a1 + 8));
  }
}

void sub_22E8CB9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>((uint64_t)(a1 + 2), a2);
    *a1 = v4;
    a1[2] = &v4[40 * v5];
    size_t v6 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v6);
    a1[1] = &v4[v6];
  }
  return a1;
}

void sub_22E8CBAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    unint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)(a3 - 8) >> 4;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v6 = a1 + 16;
  if (v5 > (v8 - v7) >> 4)
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(v6, v5);
    if (*(void *)(a1 + 24) == *(void *)(a1 + 16)) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 16);
    }
    *(void *)a1 = v9;
  }
  uint64_t v14 = 0;
  long long v12 = 0u;
  *(_OWORD *)long long __p = 0u;
  unint64_t v10 = *(void *)(a2 + 8) + *(void *)(a1 + 8);
  if (v10)
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)__p, v10);
    if (__p[1] == __p[0]) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = __p[0];
    }
    *(void *)&long long v12 = v11;
  }
  xgboost::common::WQSummary<float,float>::SetCombine((float32x2_t **)&v12, (float32x2_t **)a1, a2);
  xgboost::common::WXQSummary<float,float>::SetPrune((void *)a1, (uint64_t *)&v12, (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22E8CBC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::Push(uint64_t *a1, float a2, float a3)
{
  if (a3 != 0.0)
  {
    uint64_t v36 = v6;
    uint64_t v37 = v5;
    uint64_t v38 = v3;
    uint64_t v39 = v4;
    unint64_t v10 = a1[3];
    uint64_t v11 = *a1;
    uint64_t v13 = a1[1] - v11;
    if (v10 == v13 >> 3 && *(float *)(v11 + 8 * v10 - 8) != a2)
    {
      if (v13 == 8)
      {
        std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::resize((uint64_t)a1, 2 * a1[5]);
      }
      else
      {
        unint64_t v14 = 2 * a1[5];
        if (v14 > (a1[15] - a1[14]) >> 4)
        {
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(a1 + 14), v14);
          if (a1[15] == a1[14]) {
            uint64_t v15 = 0;
          }
          else {
            uint64_t v15 = a1[14];
          }
          a1[12] = v15;
          uint64_t v11 = *a1;
          unint64_t v10 = a1[3];
        }
        unint64_t v16 = 126 - 2 * __clz(v10);
        if (v10) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,false>(v11, (float *)(v11 + 8 * v10), (uint64_t)&v35, v17, 1);
        a1[13] = 0;
        unint64_t v18 = a1[3];
        if (v18)
        {
          uint64_t v19 = 0;
          unint64_t v20 = 0;
          uint64_t v21 = *a1;
          uint64_t v22 = a1[12];
          uint64_t v23 = *a1 + 12;
          float v24 = 0.0;
          do
          {
            uint64_t v25 = (float *)(v21 + 8 * v20);
            unint64_t v26 = v20 + 1;
            float v28 = *v25;
            float v27 = v25[1];
            if (v20 + 1 < v18)
            {
              char v29 = (float *)(v23 + 8 * v20);
              while (*(v29 - 1) == v28)
              {
                float v30 = *v29;
                v29 += 2;
                float v27 = v27 + v30;
                if (v18 == ++v26)
                {
                  unint64_t v26 = v18;
                  break;
                }
              }
            }
            uint64_t v31 = (float *)(v22 + 16 * v19);
            *uint64_t v31 = v24;
            float v24 = v24 + v27;
            ++v19;
            v31[1] = v24;
            v31[2] = v27;
            v31[3] = v28;
            unint64_t v20 = v26;
          }
          while (v26 < v18);
          a1[13] = v19;
        }
        a1[3] = 0;
        xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::PushTemp((uint64_t)a1);
      }
    }
    uint64_t v32 = a1[3];
    uint64_t v33 = *a1;
    if (v32 && *(float *)(v33 + 8 * (v32 - 1)) == a2)
    {
      *(float *)(v33 + 8 * (v32 - 1) + 4) = *(float *)(v33 + 8 * (v32 - 1) + 4) + a3;
    }
    else
    {
      a1[3] = v32 + 1;
      unint64_t v34 = (float *)(v33 + 8 * v32);
      *unint64_t v34 = a2;
      v34[1] = a3;
    }
  }
}

void xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::PushTemp(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = (uint64_t *)(v2 - 16);
  unint64_t v5 = 2 * *(void *)(v2 - 72);
  if (v5 > (*(void *)(v2 + 8) - v3) >> 4)
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(v2, v5);
    if (*(void *)(a1 + 120) == *(void *)(a1 + 112)) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = *(void *)(a1 + 112);
    }
    *(void *)(a1 + 96) = v6;
  }
  uint64_t v7 = *(char **)(a1 + 48);
  for (uint64_t i = 1; ; ++i)
  {
    if (i + 1 > (unint64_t)((uint64_t)(*(void *)(a1 + 56) - (void)v7) >> 4))
    {
      std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(a1 + 72, *(void *)(a1 + 40) * (i + 1));
      long long v15 = 0uLL;
      std::vector<xgboost::common::WXQSummary<float,float>>::resize(a1 + 48, i + 1, &v15);
      uint64_t v7 = *(char **)(a1 + 48);
      uint64_t v9 = *(char **)(a1 + 56);
      if (v9 == v7)
      {
        uint64_t v7 = *(char **)(a1 + 56);
      }
      else
      {
        unint64_t v10 = (v9 - v7) >> 4;
        if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = *(void *)(a1 + 72);
        }
        if (v10 <= 1) {
          unint64_t v10 = 1;
        }
        uint64_t v12 = 16 * *(void *)(a1 + 40);
        uint64_t v13 = *(void **)(a1 + 48);
        do
        {
          *uint64_t v13 = v11;
          v13 += 2;
          v11 += v12;
          --v10;
        }
        while (v10);
      }
    }
    unint64_t v14 = *(void *)(a1 + 40);
    if (!*(void *)&v7[16 * i + 8])
    {
      xgboost::common::WXQSummary<float,float>::SetPrune(&v7[16 * i], v4, v14);
      return;
    }
    xgboost::common::WXQSummary<float,float>::SetPrune(v7, v4, v14);
    xgboost::common::WQSummary<float,float>::SetCombine((float32x2_t **)v4, *(float32x2_t ***)(a1 + 48), *(void *)(a1 + 48) + 16 * i);
    uint64_t v7 = *(char **)(a1 + 48);
    if (*(void *)(a1 + 104) <= *(void *)(a1 + 40)) {
      break;
    }
    *(void *)&v7[16 * i + 8] = 0;
  }
  xgboost::common::WQSummary<float,float>::CopyFrom(&v7[16 * i], (uint64_t)v4);
}

void std::vector<xgboost::common::WXQSummary<float,float>>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<xgboost::common::WXQSummary<float,float>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<xgboost::common::WXQSummary<float,float>>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 4)
  {
    if (a2)
    {
      uint64_t v16 = 16 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 4);
    if (v11 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 4;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 3 > v11) {
      unint64_t v11 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v6, v14);
    }
    else {
      long long v15 = 0;
    }
    unint64_t v18 = &v15[16 * v12];
    uint64_t v19 = &v18[16 * a2];
    uint64_t v20 = 16 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_OWORD *)uint64_t v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    uint64_t v22 = &v15[16 * v14];
    float v24 = (char *)*a1;
    uint64_t v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      uint64_t v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void xgboost::common::SortedQuantile::Push(xgboost::common::SortedQuantile *this, float a2, float a3, unsigned int a4)
{
  unsigned int v29 = a4;
  double v7 = *((double *)this + 4);
  if (v7 == -1.0)
  {
    *((void *)this + 4) = 0;
    *((float *)this + 6) = a2;
    double v8 = a3;
LABEL_3:
    *((double *)this + 2) = v8;
    return;
  }
  float v9 = *((float *)this + 6);
  if (v9 == a2)
  {
    double v8 = *((double *)this + 2) + a3;
    goto LABEL_3;
  }
  double v11 = *((double *)this + 1);
  double v10 = *((double *)this + 2);
  double v12 = v11 + v10;
  if (v11 + v10 >= v7)
  {
    unint64_t v13 = *(void *)(*((void *)this + 5) + 104);
    if (v13 == a4)
    {
      if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 3)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v28, (uint64_t)__p, 835, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"INFO: rmax=", 11);
        unint64_t v14 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", sum_total=", 12);
        long long v15 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", naxt_goal=", 12);
        uint64_t v16 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", size=", 7);
        std::ostream::operator<<();
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v28);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      uint64_t v17 = a4;
      uint64_t v18 = *(void *)(*((void *)this + 5) + 96);
      if (!v13 || v9 > *(float *)(v18 + 16 * v13 - 4))
      {
        float v19 = v11;
        float v20 = v12;
        uint64_t v21 = (float *)(v18 + 16 * v13);
        float *v21 = v19;
        v21[1] = v20;
        float v22 = v10;
        v21[2] = v22;
        v21[3] = v9;
        if (v13 >= a4) {
          dmlc::LogCheckFormat<unsigned long,unsigned int>();
        }
        uint64_t v23 = *((void *)this + 5);
        unint64_t v13 = *(void *)(v23 + 104) + 1;
        *(void *)(v23 + 104) = v13;
        uint64_t v17 = v29;
        a4 = v29;
      }
      if (v13 == v17)
      {
        double v24 = *(double *)this * 2.0 + 0.00000999999975;
      }
      else
      {
        float v25 = *(double *)this * (double)v13 / (double)a4;
        double v24 = v25;
      }
      *((double *)this + 4) = v24;
    }
  }
  *((double *)this + 1) = v12;
  *((double *)this + 2) = a3;
  *((float *)this + 6) = a2;
}

void sub_22E8CC3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::SortedQuantile::Finalize(xgboost::common::SortedQuantile *this, unsigned int a2)
{
  double v3 = *((double *)this + 1);
  double v4 = *((double *)this + 2);
  uint64_t v5 = *((void *)this + 5);
  unint64_t v6 = *(void *)(v5 + 104);
  if (!v6 || *((float *)this + 6) > *(float *)(*(void *)(v5 + 96) + 16 * v6 - 4))
  {
    if (v6 > a2) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    float v7 = *((double *)this + 1);
    float v8 = v3 + v4;
    float v9 = *((double *)this + 2);
    int v10 = *((_DWORD *)this + 6);
    uint64_t v5 = *((void *)this + 5);
    uint64_t v11 = *(void *)(v5 + 104);
    uint64_t v12 = *(void *)(v5 + 96) + 16 * v11;
    *(float *)uint64_t v12 = v7;
    *(float *)(v12 + 4) = v8;
    *(float *)(v12 + 8) = v9;
    *(_DWORD *)(v12 + 12) = v10;
    *(void *)(v5 + 104) = v11 + 1;
  }
  xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::PushTemp(v5);
}

void sub_22E8CC590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::gbm::__dmlc_registry_file_tag_gblinear__(xgboost::gbm *this)
{
  return 0;
}

uint64_t xgboost::gbm::LinearCheckLayer(uint64_t this)
{
  int v2 = this;
  int v1 = 0;
  if (this) {
    dmlc::LogCheckFormat<unsigned int,int>();
  }
  return this;
}

void sub_22E8CC6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::LogCheckFormat<unsigned int,int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  int v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E8CC880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void dmlc::parameter::FieldEntry<std::string>::~FieldEntry(void **this)
{
  *this = &unk_26E245A18;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }

  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(this);
}

{
  uint64_t vars8;

  *this = &unk_26E245A18;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(this);

  JUMPOUT(0x230FA80D0);
}

std::string *dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::SetDefault(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Required parameter ", 19);
    int v6 = *(char *)(a1 + 47);
    if (v6 >= 0) {
      uint64_t v7 = a1 + 24;
    }
    else {
      uint64_t v7 = *(void *)(a1 + 24);
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v8 = *(void *)(a1 + 32);
    }
    float v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" of ", 4);
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v12 = a1 + 48;
    uint64_t v11 = v13;
    int v14 = *(char *)(v12 + 23);
    if (v14 >= 0) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = v11;
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      uint64_t v16 = *(void *)(v12 + 8);
    }
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is not presented", 17);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v19);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  double v3 = (std::string *)(a2 + *(void *)(a1 + 96));

  return std::string::operator=(v3, (const std::string *)(a1 + 104));
}

void sub_22E8CCAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

std::string *dmlc::parameter::FieldEntry<std::string>::Set(uint64_t a1, uint64_t a2, std::string *__str)
{
  return std::string::operator=((std::string *)(a2 + *(void *)(a1 + 96)), __str);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::GetStringValue(void *a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  uint64_t v4 = a2 + a1[12];
  if (*(char *)(v4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
  }
  else {
    std::string __p = *(std::string *)v4;
  }
  (*(void (**)(void *, void *, std::string *))(*a1 + 64))(a1, v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  v7[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v7[1] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v9);
}

void sub_22E8CCCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  int v4 = *(char *)(a1 + 71);
  if (v4 >= 0) {
    uint64_t v5 = a1 + 48;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 56);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(unsigned char *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  char v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)char v8 = v10;
  *(void *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v14);
}

void sub_22E8CCF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

void *dmlc::parameter::FieldEntry<std::string>::PrintDefaultValueString(uint64_t a1, void *a2)
{
  char v12 = 39;
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v12, 1);
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v5 = a1 + 104;
  uint64_t v4 = v6;
  int v7 = *(char *)(v5 + 23);
  if (v7 >= 0) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v4;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v9 = *(void *)(v5 + 8);
  }
  long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v8, v9);
  char v13 = 39;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v13, 1);
}

void *dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::PrintValue(uint64_t a1, void *a2, uint64_t a3)
{
  int v4 = *(char *)(a3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = *(void *)a3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v5, v6);
}

void dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::~FieldEntryBase(void **this)
{
  *this = &unk_26E245A18;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }

  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(this);
}

{
  uint64_t vars8;

  *this = &unk_26E245A18;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(this);

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::istringstream::basic_istringstream[abi:ne180100](v34, (const std::string *)a3, 8);
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v34, a2 + *(void *)(a1 + 96));
  uint64_t v6 = v34[0];
  int v7 = *(_DWORD *)((char *)&v34[4] + *(void *)(v34[0] - 24));
  if ((v7 & 5) == 0 && (v7 & 2) == 0)
  {
    while (1)
    {
      int v8 = std::istream::get();
      if (v8 == -1)
      {
        std::ios_base::iostate v10 = 0;
        uint64_t v11 = (std::ios_base *)((char *)v34 + *(void *)(v34[0] - 24));
        goto LABEL_11;
      }
      if (v8 > 0x20u || ((1 << v8) & 0x100003600) == 0) {
        break;
      }
      uint64_t v6 = v34[0];
      if ((*((unsigned char *)&v34[4] + *(void *)(v34[0] - 24)) & 2) != 0) {
        goto LABEL_12;
      }
    }
    uint64_t v11 = (std::ios_base *)((char *)v34 + *(void *)(v34[0] - 24));
    std::ios_base::iostate v10 = v11->__rdstate_ | 4;
LABEL_11:
    std::ios_base::clear(v11, v10);
    uint64_t v6 = v34[0];
  }
LABEL_12:
  if ((*((unsigned char *)&v34[4] + *(void *)(v6 - 24)) & 5) != 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid Parameter format for ", 29);
    int v14 = *(char *)(a1 + 47);
    if (v14 >= 0) {
      uint64_t v15 = a1 + 24;
    }
    else {
      uint64_t v15 = *(void *)(a1 + 24);
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v16 = *(void *)(a1 + 32);
    }
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" expect ", 8);
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v20 = a1 + 48;
    uint64_t v19 = v21;
    int v22 = *(char *)(v20 + 23);
    if (v22 >= 0) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = v19;
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(v20 + 23);
    }
    else {
      uint64_t v24 = *(void *)(v20 + 8);
    }
    float v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
    unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" but value='", 12);
    int v27 = *(char *)(a3 + 23);
    if (v27 >= 0) {
      uint64_t v28 = a3;
    }
    else {
      uint64_t v28 = *(void *)a3;
    }
    if (v27 >= 0) {
      uint64_t v29 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v29 = *(void *)(a3 + 8);
    }
    float v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v32.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v32, 1);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v32);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  v34[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  v34[2] = MEMORY[0x263F8C318] + 16;
  if (v35 < 0) {
    operator delete((void *)v34[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x230FA8020](&v36);
}

void sub_22E8CD414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v49 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      std::istringstream::~istringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v48);
  goto LABEL_6;
}

void dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::PrintDefaultValueString(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 127) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 104), *(void *)(a1 + 112));
  }
  else {
    std::string __p = *(std::string *)(a1 + 104);
  }
  (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a1 + 64))(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22E8CD510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C338] + 64;
  a1[15] = MEMORY[0x263F8C338] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 24)) = v8;
  a1[1] = 0;
  std::ios_base::iostate v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x263F8C338] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100](v7, a2, a3 | 8);
  return a1;
}

void sub_22E8CD688(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x230FA8020](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  MEMORY[0x230FA7C40](&v20, a1, 0);
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  uint64_t v7 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    uint64_t v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    char v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    int v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_22E8CD8D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x22E8CD88CLL);
  }
  __cxa_rethrow();
}

void sub_22E8CD96C(_Unwind_Exception *a1)
{
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x230FA8020](a1 + 120);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_22E8CDB00(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void dmlc::parameter::FieldEntry<unsigned long>::~FieldEntry(void **a1)
{
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::SetDefault(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (!*(unsigned char *)(result + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Required parameter ", 19);
    int v4 = *(char *)(v2 + 47);
    if (v4 >= 0) {
      uint64_t v5 = v2 + 24;
    }
    else {
      uint64_t v5 = *(void *)(v2 + 24);
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(v2 + 47);
    }
    else {
      uint64_t v6 = *(void *)(v2 + 32);
    }
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" of ", 4);
    uint64_t v11 = *(void *)(v2 + 48);
    uint64_t v10 = v2 + 48;
    uint64_t v9 = v11;
    int v12 = *(char *)(v10 + 23);
    if (v12 >= 0) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = v9;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v10 + 8);
    }
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not presented", 17);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  *(void *)(a2 + *(void *)(result + 96)) = *(void *)(result + 104);
  return result;
}

void sub_22E8CDC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::istringstream::basic_istringstream[abi:ne180100](v34, (const std::string *)a3, 8);
  MEMORY[0x230FA7CA0](v34, a2 + *(void *)(a1 + 96));
  uint64_t v6 = v34[0];
  int v7 = *(_DWORD *)((char *)&v34[4] + *(void *)(v34[0] - 24));
  if ((v7 & 5) == 0 && (v7 & 2) == 0)
  {
    while (1)
    {
      int v8 = std::istream::get();
      if (v8 == -1)
      {
        std::ios_base::iostate v10 = 0;
        uint64_t v11 = (std::ios_base *)((char *)v34 + *(void *)(v34[0] - 24));
        goto LABEL_11;
      }
      if (v8 > 0x20u || ((1 << v8) & 0x100003600) == 0) {
        break;
      }
      uint64_t v6 = v34[0];
      if ((*((unsigned char *)&v34[4] + *(void *)(v34[0] - 24)) & 2) != 0) {
        goto LABEL_12;
      }
    }
    uint64_t v11 = (std::ios_base *)((char *)v34 + *(void *)(v34[0] - 24));
    std::ios_base::iostate v10 = v11->__rdstate_ | 4;
LABEL_11:
    std::ios_base::clear(v11, v10);
    uint64_t v6 = v34[0];
  }
LABEL_12:
  if ((*((unsigned char *)&v34[4] + *(void *)(v6 - 24)) & 5) != 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid Parameter format for ", 29);
    int v14 = *(char *)(a1 + 47);
    if (v14 >= 0) {
      uint64_t v15 = a1 + 24;
    }
    else {
      uint64_t v15 = *(void *)(a1 + 24);
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v16 = *(void *)(a1 + 32);
    }
    std::string v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" expect ", 8);
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v20 = a1 + 48;
    uint64_t v19 = v21;
    int v22 = *(char *)(v20 + 23);
    if (v22 >= 0) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = v19;
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(v20 + 23);
    }
    else {
      uint64_t v24 = *(void *)(v20 + 8);
    }
    float v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
    unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" but value='", 12);
    int v27 = *(char *)(a3 + 23);
    if (v27 >= 0) {
      uint64_t v28 = a3;
    }
    else {
      uint64_t v28 = *(void *)a3;
    }
    if (v27 >= 0) {
      uint64_t v29 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v29 = *(void *)(a3 + 8);
    }
    float v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v32.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v32, 1);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v32);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  v34[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  v34[2] = MEMORY[0x263F8C318] + 16;
  if (v35 < 0) {
    operator delete((void *)v34[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x230FA8020](&v36);
}

void sub_22E8CE04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v49 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      std::istringstream::~istringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v48);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::Check(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + *(void *)(result + 96));
  if (*(unsigned char *)(result + 112))
  {
    unint64_t v3 = *(void *)(result + 120);
    if (*(unsigned char *)(result + 113))
    {
      if (v2 < v3 || v2 > *(void *)(result + 128))
      {
        uint64_t v4 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
        uint64_t v5 = (void *)std::ostream::operator<<();
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for Parameter ", 15);
        int v7 = *(char *)(v4 + 47);
        if (v7 >= 0) {
          uint64_t v8 = v4 + 24;
        }
        else {
          uint64_t v8 = *(void *)(v4 + 24);
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(v4 + 47);
        }
        else {
          uint64_t v9 = *(void *)(v4 + 32);
        }
        std::ios_base::iostate v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" exceed bound [", 15);
        uint64_t v11 = (void *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v66, 1);
        int v12 = (void *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 93;
        uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v66, 1);
        v66.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v66, 1);
        int v14 = *(char *)(v4 + 47);
        if (v14 >= 0) {
          uint64_t v15 = v4 + 24;
        }
        else {
          uint64_t v15 = *(void *)(v4 + 24);
        }
        if (v14 >= 0) {
          uint64_t v16 = *(unsigned __int8 *)(v4 + 47);
        }
        else {
          uint64_t v16 = *(void *)(v4 + 32);
        }
        std::string v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v15, v16);
        uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        uint64_t v21 = *(void *)(v4 + 72);
        uint64_t v20 = v4 + 72;
        uint64_t v19 = v21;
        int v22 = *(char *)(v20 + 23);
        if (v22 >= 0) {
          uint64_t v23 = v20;
        }
        else {
          uint64_t v23 = v19;
        }
        if (v22 >= 0) {
          uint64_t v24 = *(unsigned __int8 *)(v20 + 23);
        }
        else {
          uint64_t v24 = *(void *)(v20 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v66);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
      }
    }
    else if (v2 < v3)
    {
      uint64_t v46 = result;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
      uint64_t v47 = (void *)std::ostream::operator<<();
      uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" for Parameter ", 15);
      int v49 = *(char *)(v46 + 47);
      if (v49 >= 0) {
        uint64_t v50 = v46 + 24;
      }
      else {
        uint64_t v50 = *(void *)(v46 + 24);
      }
      if (v49 >= 0) {
        uint64_t v51 = *(unsigned __int8 *)(v46 + 47);
      }
      else {
        uint64_t v51 = *(void *)(v46 + 32);
      }
      char v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" should be greater equal to ", 28);
      uint64_t v53 = (void *)std::ostream::operator<<();
      v66.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v66, 1);
      int v54 = *(char *)(v46 + 47);
      if (v54 >= 0) {
        uint64_t v55 = v46 + 24;
      }
      else {
        uint64_t v55 = *(void *)(v46 + 24);
      }
      if (v54 >= 0) {
        uint64_t v56 = *(unsigned __int8 *)(v46 + 47);
      }
      else {
        uint64_t v56 = *(void *)(v46 + 32);
      }
      uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v55, v56);
      uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      uint64_t v61 = *(void *)(v46 + 72);
      uint64_t v60 = v46 + 72;
      uint64_t v59 = v61;
      int v62 = *(char *)(v60 + 23);
      if (v62 >= 0) {
        uint64_t v63 = v60;
      }
      else {
        uint64_t v63 = v59;
      }
      if (v62 >= 0) {
        uint64_t v64 = *(unsigned __int8 *)(v60 + 23);
      }
      else {
        uint64_t v64 = *(void *)(v60 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v63, v64);
      unint64_t v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v65, &v66);
      v65->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
    }
  }
  else if (*(unsigned char *)(result + 113) && v2 > *(void *)(result + 128))
  {
    uint64_t v26 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
    int v27 = (void *)std::ostream::operator<<();
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for Parameter ", 15);
    int v29 = *(char *)(v26 + 47);
    if (v29 >= 0) {
      uint64_t v30 = v26 + 24;
    }
    else {
      uint64_t v30 = *(void *)(v26 + 24);
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(v26 + 47);
    }
    else {
      uint64_t v31 = *(void *)(v26 + 32);
    }
    std::string v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" should be smaller equal to ", 28);
    uint64_t v33 = (void *)std::ostream::operator<<();
    v66.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v66, 1);
    int v34 = *(char *)(v26 + 47);
    if (v34 >= 0) {
      uint64_t v35 = v26 + 24;
    }
    else {
      uint64_t v35 = *(void *)(v26 + 24);
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(v26 + 47);
    }
    else {
      uint64_t v36 = *(void *)(v26 + 32);
    }
    uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v35, v36);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    uint64_t v41 = *(void *)(v26 + 72);
    uint64_t v40 = v26 + 72;
    uint64_t v39 = v41;
    int v42 = *(char *)(v40 + 23);
    if (v42 >= 0) {
      uint64_t v43 = v40;
    }
    else {
      uint64_t v43 = v39;
    }
    if (v42 >= 0) {
      uint64_t v44 = *(unsigned __int8 *)(v40 + 23);
    }
    else {
      uint64_t v44 = *(void *)(v40 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v43, v44);
    uint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v45, &v66);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  return result;
}

void sub_22E8CE528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::GetStringValue(void *a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(void *, void *, void))(*a1 + 64))(a1, v5, *(void *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v5[1] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v7);
}

void sub_22E8CE6F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  int v4 = *(char *)(a1 + 71);
  if (v4 >= 0) {
    uint64_t v5 = a1 + 48;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 56);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(unsigned char *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  uint64_t v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)uint64_t v8 = v10;
  *(void *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v14);
}

void sub_22E8CE924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::PrintDefaultValueString(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, a2, a1[13]);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::PrintValue()
{
  return std::ostream::operator<<();
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::set_range(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 120) = a2;
  *(void *)(result + 128) = a3;
  *(_WORD *)(result + 112) = 257;
  return result;
}

void std::__function::__func<xgboost::gbm::$_0,std::allocator<xgboost::gbm::$_0>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::~__func()
{
}

void *std::__function::__func<xgboost::gbm::$_0,std::allocator<xgboost::gbm::$_0>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E245738;
  return result;
}

void std::__function::__func<xgboost::gbm::$_0,std::allocator<xgboost::gbm::$_0>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator()()
{
}

void sub_22E8CEB4C(_Unwind_Exception *a1)
{
  uint64_t v11 = *v9;
  *uint64_t v9 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  if (*(char *)(v1 + 431) < 0) {
    operator delete(*v8);
  }
  void *v6 = v3;
  int v12 = *v7;
  if (*v7)
  {
    *(void *)(v1 + 384) = v12;
    operator delete(v12);
  }
  void *v4 = v2;
  char v13 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 200) = v13;
    operator delete(v13);
  }
  MEMORY[0x230FA80D0](v1, 0x10F3C40B0671724);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::gbm::$_0,std::allocator<xgboost::gbm::$_0>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::gbm::$_0,std::allocator<xgboost::gbm::$_0>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::target_type()
{
}

void xgboost::gbm::GBLinear::~GBLinear(xgboost::gbm::GBLinear *this)
{
  *(void *)this = &unk_26E2457B8;
  *((void *)this + 1) = &unk_26E245878;
  xgboost::common::Monitor::~Monitor((char **)this + 59);
  uint64_t v2 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 431) < 0) {
    operator delete(*((void **)this + 51));
  }
  *((void *)this + 27) = &unk_26E248940;
  uint64_t v3 = (void *)*((void *)this + 47);
  if (v3)
  {
    *((void *)this + 48) = v3;
    operator delete(v3);
  }
  *((void *)this + 4) = &unk_26E248940;
  int v4 = (void *)*((void *)this + 24);
  if (v4)
  {
    *((void *)this + 25) = v4;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26E2457B8;
  *((void *)this + 1) = &unk_26E245878;
  xgboost::common::Monitor::~Monitor((char **)this + 59);
  uint64_t v2 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 431) < 0) {
    operator delete(*((void **)this + 51));
  }
  *((void *)this + 27) = &unk_26E248940;
  uint64_t v3 = (void *)*((void *)this + 47);
  if (v3)
  {
    *((void *)this + 48) = v3;
    operator delete(v3);
  }
  *((void *)this + 4) = &unk_26E248940;
  int v4 = (void *)*((void *)this + 24);
  if (v4)
  {
    *((void *)this + 25) = v4;
    operator delete(v4);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::gbm::GBLinear::LoadModel(void **this, const xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  int v4 = (xgboost::Value **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  uint64_t v5 = xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  uint64_t v6 = v5 + 2;
  int v7 = *((char *)v5 + 39);
  if (v7 < 0)
  {
    if (v5[3] != 8) {
      goto LABEL_7;
    }
    uint64_t v8 = (void *)*v6;
  }
  else
  {
    uint64_t v8 = v5 + 2;
    if (v7 != 8) {
LABEL_7:
    }
      dmlc::LogCheckFormat<std::string,char [9]>((uint64_t)&v21, (uint64_t)v6);
  }
  if (*v8 != 0x7261656E696C6267) {
    goto LABEL_7;
  }
  uint64_t v21 = 0;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v21)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
    long long v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
    int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"get<String>(in[\"name\"]) == \"gblinear\"", 37);
    int v13 = *(char *)(v21 + 23);
    uint64_t v14 = v13 >= 0 ? v21 : *(void *)v21;
    uint64_t v15 = v13 >= 0 ? *(unsigned __int8 *)(v21 + 23) : *(void *)(v21 + 8);
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
    uint64_t v17 = v21;
    uint64_t v21 = 0;
    if (v17) {
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v21, v17);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model");
  uint64_t v18 = (const xgboost::Json *)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  xgboost::gbm::GBLinearModel::LoadModel(this + 4, v18);
}

void sub_22E8CF01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBLinear::SaveModel(xgboost::gbm::GBLinear *this, xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "gblinear");
  uint64_t v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E8CF264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBLinear::Configure(uint64_t a1, uint64_t *a2)
{
  int v4 = (xgboost::gbm::GBLinearTrainParam *)(a1 + 400);
  xgboost::XGBoostParameter<xgboost::gbm::GBLinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::gbm::GBLinearTrainParam *)v8, (unsigned char *)(a1 + 400), a2);
  uint64_t v9 = (void **)v8;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v9);
  xgboost::gbm::GBLinearTrainParam::CheckGPUSupport(v4);
  uint64_t v5 = xgboost::LinearUpdater::Create(a1 + 408, *(void *)(a1 + 16));
  uint64_t v6 = *(void *)(a1 + 448);
  *(void *)(a1 + 448) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t v5 = *(void *)(a1 + 448);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 32))(v5, a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "GBLinear");
  std::string::operator=((std::string *)(a1 + 472), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_22E8CF3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBLinear::Load(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  if ((**a2)(a2, a1 + 40, 136) != 136) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  unint64_t v6 = 0;
  if ((**a2)(a2, (uint64_t)&v6, 8) == 8)
  {
    int v4 = (uint64_t *)(a1 + 192);
    unint64_t v5 = v6;
    std::vector<float>::resize((uint64_t)v4, v6);
    if (v6) {
      (**a2)(a2, *v4, 4 * v5);
    }
  }
}

void sub_22E8CF5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::gbm::GBLinear::Save(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a1 + 40, 136);
  uint64_t v5 = (uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 192), *(void *)(a1 + 200) - *(void *)(a1 + 192));
  }
  return result;
}

void xgboost::GradientBooster::Slice(xgboost::GradientBooster *this, int a2, int a3, int a4, xgboost::GradientBooster *a5, BOOL *a6)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/gbm.h");
  uint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Slice is not supported by current booster.", 42);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v8);
}

void sub_22E8CF70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::GradientBooster::AllowLazyCheckPoint(xgboost::GradientBooster *this)
{
  return 0;
}

uint64_t xgboost::gbm::GBLinear::BoostedRounds(xgboost::gbm::GBLinear *this)
{
  return *((unsigned int *)this + 44);
}

void xgboost::gbm::GBLinear::DoBoost(uint64_t a1, uint64_t (***a2)(void), uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "DoBoost");
  xgboost::common::Monitor::Start();
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (*(void *)(a1 + 192) == *(void *)(a1 + 200))
  {
    std::vector<float>::resize(a1 + 192, (*(_DWORD *)(*(void *)(a1 + 184) + 8)+ *(_DWORD *)(*(void *)(a1 + 184) + 8) * *(_DWORD *)(*(void *)(a1 + 184) + 4)));
    unint64_t v6 = *(void **)(a1 + 192);
    uint64_t v7 = *(void *)(a1 + 200) - (void)v6;
    if (v7 >= 1) {
      bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
    }
  }
  if (!*(unsigned char *)(a1 + 464))
  {
    uint64_t v8 = (**a2)(a2);
    uint64_t v9 = *(void *)v8;
    if (*(void *)v8)
    {
      double v10 = *(double *)(a1 + 456);
      uint64_t v11 = **(float ***)(v8 + 72);
      do
      {
        if (*(void *)(*(void *)(v8 + 72) + 8) == **(void **)(v8 + 72)) {
          float v12 = 1.0;
        }
        else {
          float v12 = *v11;
        }
        double v10 = v10 + v12;
        ++v11;
        --v9;
      }
      while (v9);
      *(double *)(a1 + 456) = v10;
    }
    *(unsigned char *)(a1 + 464) = 1;
  }
  if (*(float *)(a1 + 432) == 0.0) {
    goto LABEL_16;
  }
  if (!*(unsigned char *)(a1 + 536))
  {
    uint64_t v13 = (char *)(a1 + 376);
    uint64_t v14 = *(float **)(a1 + 376);
    unint64_t v15 = (uint64_t)(*(void *)(a1 + 384) - (void)v14) >> 2;
    int v16 = *(char **)(a1 + 192);
    uint64_t v17 = *(void *)(a1 + 200);
    if (v15 == (v17 - (uint64_t)v16) >> 2)
    {
      if ((char *)v17 == v16)
      {
        float v19 = 0.0;
      }
      else
      {
        if (v15 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = (uint64_t)(*(void *)(a1 + 384) - (void)v14) >> 2;
        }
        float v19 = 0.0;
        char v20 = *(float **)(a1 + 192);
        do
        {
          float v21 = *v20++;
          float v22 = v21;
          float v23 = *v14++;
          float v24 = vabds_f32(v22, v23);
          if (v19 < v24) {
            float v19 = v24;
          }
          --v18;
        }
        while (v18);
      }
      long long v29 = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 136);
      *(_OWORD *)(a1 + 336) = v29;
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 168);
      *(void *)(a1 + 368) = *(void *)(a1 + 184);
      long long v30 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 272) = v30;
      long long v31 = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 104);
      *(_OWORD *)(a1 + 304) = v31;
      long long v32 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 40);
      *(_OWORD *)(a1 + 240) = v32;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v13, v16, v17, v15);
      float v33 = *(float *)(a1 + 432);
      *(unsigned char *)(a1 + 536) = v19 <= v33;
      if (v19 <= v33) {
        goto LABEL_18;
      }
    }
    else
    {
      long long v25 = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 136);
      *(_OWORD *)(a1 + 336) = v25;
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 168);
      *(void *)(a1 + 368) = *(void *)(a1 + 184);
      long long v26 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 272) = v26;
      long long v27 = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 104);
      *(_OWORD *)(a1 + 304) = v27;
      long long v28 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 40);
      *(_OWORD *)(a1 + 240) = v28;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v13, v16, v17, (v17 - (uint64_t)v16) >> 2);
    }
LABEL_16:
    (*(void (**)(void, uint64_t, uint64_t (***)(void), uint64_t, double))(**(void **)(a1 + 448)
                                                                                               + 40))(*(void *)(a1 + 448), a3, a2, a1 + 32, *(double *)(a1 + 456));
  }
LABEL_18:
  ++*(_DWORD *)(a1 + 176);
  std::string::basic_string[abi:ne180100]<0>(__p, "DoBoost");
  xgboost::common::Monitor::Stop();
  if (v35 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E8CFA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBLinear::PredictBatch(xgboost::gbm::GBLinear *this, xgboost::DMatrix *a2, xgboost::PredictionCacheEntry *a3, BOOL a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "PredictBatch");
  xgboost::common::Monitor::Start();
  if (v18 < 0) {
    operator delete(__p);
  }
  xgboost::gbm::LinearCheckLayer(a5);
  uint64_t v9 = *(void *)a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "PredictBatchInternal");
  xgboost::common::Monitor::Start();
  if (v18 < 0) {
    operator delete(__p);
  }
  if (*((void *)this + 24) == *((void *)this + 25))
  {
    std::vector<float>::resize((uint64_t)this + 192, (*(_DWORD *)(*((void *)this + 23) + 8)+ *(_DWORD *)(*((void *)this + 23) + 8) * *(_DWORD *)(*((void *)this + 23) + 4)));
    double v10 = (void *)*((void *)this + 24);
    uint64_t v11 = *((void *)this + 25) - (void)v10;
    if (v11 >= 1) {
      bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
    }
  }
  (**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
  int v12 = *(_DWORD *)(*((void *)this + 23) + 8);
  uint64_t v13 = (void *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
  std::vector<float>::resize(v9, *v13 * v12);
  (*(void (**)(uint64_t *__return_ptr, xgboost::DMatrix *))(*(void *)a2 + 72))(&v15, a2);
  unint64_t v14[2] = v15;
  v14[3] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(v14, 0);
}

void sub_22E8CFF74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x22E8D0050);
}

void sub_22E8CFFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v25 = a24;
  a24 = 0;
  if (v25) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a24, v25);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(a1);
}

void sub_22E8CFFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E8CFFF4);
}

void xgboost::GradientBooster::InplacePredict()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/gbm.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Inplace predict is not supported by current booster.", 52);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_22E8D00B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::gbm::GBLinear::PredictInstance(void *a1, uint64_t *a2, uint64_t *a3, xgboost::gbm *this)
{
  uint64_t result = xgboost::gbm::LinearCheckLayer((uint64_t)this);
  uint64_t v8 = a1[23];
  uint64_t v9 = *(unsigned int *)(v8 + 8);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    if (a3[1] == *a3) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = *a3;
    }
    int v12 = (float *)a1[3];
    uint64_t v13 = a1[24];
    uint64_t v14 = *a2;
    unsigned int v15 = *(_DWORD *)(v8 + 4);
    do
    {
      float v16 = *v12 + *(float *)(v13 + 4 * v9 * v15 + 4 * v10);
      if (v14)
      {
        uint64_t v17 = (float *)(a2[1] + 4);
        uint64_t result = v14;
        do
        {
          unsigned int v18 = *((_DWORD *)v17 - 1);
          if (v18 < v15) {
            float v16 = v16 + (float)(*v17 * *(float *)(v13 + 4 * v10 + 4 * v18 * (unint64_t)v9));
          }
          v17 += 2;
          --result;
        }
        while (result);
      }
      *(float *)(v11 + 4 * v10++) = v16;
    }
    while (v10 != v9);
  }
  return result;
}

void xgboost::gbm::GBLinear::PredictLeaf()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"gblinear does not support prediction of leaf index", 50);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_22E8D01F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::gbm::GBLinear::PredictContribution(void *a1, uint64_t a2, uint64_t *a3, xgboost::gbm *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v9 = a1[24];
  uint64_t v10 = a1[25];
  uint64_t v8 = (uint64_t)(a1 + 24);
  if (v9 == v10)
  {
    std::vector<float>::resize(v8, (*(_DWORD *)(a1[23] + 8) + *(_DWORD *)(a1[23] + 8) * *(_DWORD *)(a1[23] + 4)));
    uint64_t v11 = (void *)a1[24];
    uint64_t v12 = a1[25] - (void)v11;
    if (v12 >= 1) {
      bzero(v11, 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
    }
  }
  xgboost::gbm::LinearCheckLayer((uint64_t)this);
  (**(uint64_t (***)(uint64_t))a2)(a2);
  uint64_t v13 = *(int *)(a1[23] + 8);
  uint64_t v14 = (*(_DWORD *)(a1[23] + 4) + 1);
  uint64_t v15 = *a3;
  float v16 = (void *)(**(uint64_t (***)(uint64_t))a2)(a2);
  std::vector<float>::resize(v15, v14 * v13 * *v16);
  uint64_t v17 = *(void *)(v15 + 8) - *(void *)v15;
  if (v17 >= 1) {
    bzero(*(void **)v15, 4 * (((unint64_t)v17 >> 2) - ((unint64_t)v17 > 3)) + 4);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 72))(&v19, a2);
  v18[2] = v19;
  v18[3] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(v18, 0);
}

void sub_22E8D0658()
{
}

void sub_22E8D0664()
{
}

void sub_22E8D0670(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22E8D06D8);
}

void sub_22E8D0680()
{
}

void sub_22E8D0688()
{
}

void sub_22E8D0690()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x22E8D06B4);
}

void sub_22E8D06AC()
{
}

void xgboost::gbm::GBLinear::PredictInteractionContributions(uint64_t a1, uint64_t (***a2)(void), void ***a3, xgboost::gbm *this)
{
  xgboost::gbm::LinearCheckLayer((uint64_t)this);
  uint64_t v7 = *a3;
  uint64_t v8 = (*(_DWORD *)(*(void *)(a1 + 184) + 4) * *(_DWORD *)(*(void *)(a1 + 184) + 4));
  uint64_t v9 = (void *)(**a2)(a2);
  std::vector<float>::resize((uint64_t)v7, *v9 * v8 * *(unsigned int *)(*(void *)(a1 + 184) + 8));
  uint64_t v10 = *v7;
  uint64_t v11 = (unsigned char *)v7[1] - (unsigned char *)*v7;
  if (v11 >= 1)
  {
    bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
  }
}

void xgboost::gbm::GBLinear::DumpModel(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v53 = *(std::string *)a2;
  }
  uint64_t v51 = *(unsigned int *)(*(void *)(a1 + 184) + 4);
  uint64_t v52 = *(unsigned int *)(*(void *)(a1 + 184) + 8);
  std::string::basic_string[abi:ne180100]<0>(&v61, (char *)&unk_22EA3D4EA);
  uint64_t v5 = MEMORY[0x263F8C328] + 104;
  v60[0] = MEMORY[0x263F8C328] + 104;
  uint64_t v6 = MEMORY[0x263F8C328] + 64;
  uint64_t v57 = MEMORY[0x263F8C328] + 64;
  uint64_t v7 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  v56[0] = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)((char *)v56 + *(void *)(v56[0] - 24)) = v8;
  v56[1] = 0;
  uint64_t v9 = (std::ios_base *)((char *)v56 + *(void *)(v56[0] - 24));
  std::ios_base::init(v9, v58);
  uint64_t v10 = MEMORY[0x263F8C328] + 24;
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  uint64_t v11 = v7[5];
  uint64_t v57 = v7[4];
  *(void *)((char *)&v58[-1] + *(void *)(v57 - 24)) = v11;
  v56[0] = v7[1];
  *(void *)((char *)v56 + *(void *)(v56[0] - 24)) = v7[6];
  v60[0] = v5;
  v56[0] = v10;
  uint64_t v57 = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100]((uint64_t)v58, (const std::string *)&v61, 24);
  if (SHIBYTE(v61.__end_) < 0) {
    operator delete(v61.__first_);
  }
  uint64_t v50 = a3;
  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) == 4)
    {
      uint64_t v12 = &v53;
      goto LABEL_11;
    }
LABEL_12:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"bias:\n", 6);
    if ((int)v52 >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        uint64_t v15 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
        float v16 = std::locale::use_facet((const std::locale *)&v61, v14);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale((std::locale *)&v61);
        std::ostream::put();
        std::ostream::flush();
        v13 += 4;
      }
      while (4 * v52 != v13);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"weight:\n", 8);
    if (v51)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        if ((int)v52 >= 1)
        {
          uint64_t v20 = 0;
          do
          {
            uint64_t v21 = (void *)std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
            float v22 = std::locale::use_facet((const std::locale *)&v61, v19);
            ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
            std::locale::~locale((std::locale *)&v61);
            std::ostream::put();
            std::ostream::flush();
            v20 += 4;
          }
          while (4 * v52 != v20);
        }
        ++v18;
        v17 += 4;
      }
      while (v18 != v51);
    }
    goto LABEL_36;
  }
  if (v53.__r_.__value_.__l.__size_ != 4) {
    goto LABEL_12;
  }
  uint64_t v12 = (std::string *)v53.__r_.__value_.__r.__words[0];
LABEL_11:
  if (LODWORD(v12->__r_.__value_.__l.__data_) != 1852797802) {
    goto LABEL_12;
  }
  float v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"  { \"bias\": [", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  float v24 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)&v61);
  std::ostream::put();
  std::ostream::flush();
  if ((int)v52 >= 1)
  {
    uint64_t v25 = 0;
    long long v26 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      if (v25)
      {
        long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
        long long v28 = std::locale::use_facet((const std::locale *)&v61, v26);
        ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale((std::locale *)&v61);
        std::ostream::put();
        std::ostream::flush();
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"      ", 6);
      std::ostream::operator<<();
      v25 += 4;
    }
    while (4 * v52 != v25);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v58[-1] + *(void *)(v57 - 24)));
  long long v29 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale((std::locale *)&v61);
  std::ostream::put();
  std::ostream::flush();
  long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"    ],", 6);
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24)));
  long long v31 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale((std::locale *)&v61);
  std::ostream::put();
  std::ostream::flush();
  long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"    \"weight\": [", 15);
  std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
  float v33 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
  std::locale::~locale((std::locale *)&v61);
  std::ostream::put();
  std::ostream::flush();
  if (v51)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      if ((int)v52 >= 1)
      {
        for (uint64_t i = 0; i != v52; ++i)
        {
          if (i | v35)
          {
            uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)",", 1);
            std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
            uint64_t v39 = std::locale::use_facet((const std::locale *)&v61, v36);
            ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
            std::locale::~locale((std::locale *)&v61);
            std::ostream::put();
            std::ostream::flush();
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"      ", 6);
          std::ostream::operator<<();
        }
      }
      ++v35;
      v34 += 4;
    }
    while (v35 != v51);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v58[-1] + *(void *)(v57 - 24)));
  uint64_t v40 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
  std::locale::~locale((std::locale *)&v61);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"    ]", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
  int v42 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
  std::locale::~locale((std::locale *)&v61);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"  }", 3);
LABEL_36:
  *(void *)uint64_t v50 = 0;
  *(void *)(v50 + 8) = 0;
  *(void *)(v50 + 16) = 0;
  std::stringbuf::str();
  v61.__end_cap_.__value_ = (std::allocator<std::string> *)(v50 + 16);
  uint64_t v43 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v50 + 16, 1uLL);
  uint64_t v44 = (void *)MEMORY[0x263F8C2B8];
  v61.__first_ = v43;
  v61.__begin_ = v43;
  v61.__end_cap_.__value_ = &v43[v45];
  long long v46 = *(_OWORD *)__p;
  v43->__r_.__value_.__r.__words[2] = v55;
  *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v46;
  __p[1] = 0;
  std::string::size_type v55 = 0;
  __p[0] = 0;
  v61.__end_ = v43 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v50, &v61);
  uint64_t v47 = *(void *)(v50 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&v61);
  int v48 = SHIBYTE(v55);
  *(void *)(v50 + 8) = v47;
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  v56[0] = *v44;
  uint64_t v49 = v44[9];
  *(void *)((char *)v56 + *(void *)(v56[0] - 24)) = v44[8];
  uint64_t v57 = v49;
  v58[0] = MEMORY[0x263F8C318] + 16;
  if (v59 < 0) {
    operator delete((void *)v58[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x230FA8020](v60);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
}

void sub_22E8D1394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::locale::~locale((std::locale *)(v28 - 128));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBLinear::FeatureScore(void *a1, uint64_t a2, void *a3, std::vector<unsigned int> *this, uint64_t *a5)
{
  if (a1[24] == a1[25])
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
    long long v30 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: !model_.weight.empty()", 36);
    long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Model is not initialized", 24);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  if (*a3)
  {
    float v33 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(v33, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
    uint64_t v34 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Check failed: trees.empty()", 27);
    uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"gblinear doesn't support number of trees for feature importance.", 64);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  int v10 = *(char *)(a2 + 23);
  if (v10 < 0)
  {
    if (*(void *)(a2 + 8) != 6) {
      goto LABEL_14;
    }
    uint64_t v11 = *(void *)a2;
  }
  else
  {
    uint64_t v11 = a2;
    if (v10 != 6) {
      goto LABEL_14;
    }
  }
  int v12 = *(_DWORD *)v11;
  int v13 = *(unsigned __int16 *)(v11 + 4);
  if (v12 != 1734960503 || v13 != 29800) {
LABEL_14:
  }
    dmlc::LogCheckFormat<std::string,char [7]>(a2, "weight");
  std::vector<unsigned int>::size_type v15 = *(unsigned int *)(a1[3] + 4);
  __x[0] = 0;
  std::vector<unsigned int>::resize(this, v15, __x);
  std::vector<unsigned int>::pointer begin = this->__begin_;
  std::vector<unsigned int>::pointer end = this->__end_;
  if (this->__begin_ != end)
  {
    unsigned int v18 = 0;
    do
      *begin++ = v18++;
    while (begin != end);
  }
  unint64_t v19 = ((uint64_t)(a1[25] - a1[24]) >> 2) - *(unsigned int *)(a1[3] + 8);
  __x[0] = 0;
  std::vector<float>::resize((uint64_t)a5, v19, __x);
  uint64_t v20 = a1[3];
  uint64_t v21 = *(unsigned int *)(v20 + 4);
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = *(unsigned int *)(v20 + 8);
    uint64_t v26 = *a5;
    unint64_t v27 = (a5[1] - *a5) >> 2;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          if (v22 + i >= v27) {
            __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
          }
          *(_DWORD *)(v26 + 4 * i) = *(_DWORD *)(a1[24] + v23 * *(unsigned int *)(a1[23] + 8) + 4 * i);
        }
      }
      ++v24;
      v23 += 4;
      v26 += 4 * v25;
      v22 += v25;
    }
    while (v24 != v21);
  }
}

void sub_22E8D1784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

BOOL xgboost::gbm::GBLinear::UseGPU(xgboost::gbm::GBLinear *this)
{
  std::exception_ptr v1 = (char *)this + 408;
  int v2 = *((char *)this + 431);
  if (v2 < 0)
  {
    if (*((void *)this + 52) != 17) {
      return 0;
    }
    std::exception_ptr v1 = *(char **)v1;
  }
  else if (v2 != 17)
  {
    return 0;
  }
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *((void *)v1 + 1);
  int v5 = v1[16];
  return v3 == 0x726F6F635F757067 && v4 == 0x6E65637365645F64 && v5 == 116;
}

void xgboost::gbm::GBLinear::LoadConfig(xgboost::gbm::GBLinear *this, const xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  uint64_t v4 = (xgboost::Value **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
  int v5 = xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  uint64_t v6 = v5 + 2;
  int v7 = *((char *)v5 + 39);
  if (v7 < 0)
  {
    if (v5[3] != 8) {
      goto LABEL_7;
    }
    uint64_t v8 = (void *)*v6;
  }
  else
  {
    uint64_t v8 = v5 + 2;
    if (v7 != 8) {
LABEL_7:
    }
      dmlc::LogCheckFormat<std::string,char [9]>((uint64_t)v21, (uint64_t)v6);
  }
  if (*v8 != 0x7261656E696C6267) {
    goto LABEL_7;
  }
  v21[0] = 0;
  if (SHIBYTE(v26) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v21, "gblinear_train_param");
  uint64_t v9 = (_DWORD **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, v21);
  int v10 = (xgboost::gbm::GBLinearTrainParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v9);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  std::string __p = &v25;
  uint64_t v11 = (void *)*((void *)v10 + 2);
  int v12 = (void *)((char *)v10 + 24);
  if (v11 != (void *)((char *)v10 + 24))
  {
    do
    {
      int v13 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v11[7]);
      unint64_t v27 = (long long *)(v11 + 4);
      uint64_t v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, (const void **)v11 + 4, (uint64_t)&std::piecewise_construct, &v27);
      int v10 = (xgboost::gbm::GBLinearTrainParam *)std::string::operator=((std::string *)(v14 + 7), (const std::string *)(v13 + 16));
      std::vector<unsigned int>::size_type v15 = (void *)v11[1];
      if (v15)
      {
        do
        {
          float v16 = v15;
          std::vector<unsigned int>::size_type v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          float v16 = (void *)v11[2];
          BOOL v17 = *v16 == (void)v11;
          uint64_t v11 = v16;
        }
        while (!v17);
      }
      uint64_t v11 = v16;
    }
    while (v16 != v12);
  }
  if (*((unsigned char *)this + 400))
  {
    memset(&v23, 0, sizeof(v23));
    xgboost::gbm::GBLinearTrainParam::__MANAGER__(v10);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_26AD710A0, (uint64_t)this + 400, __p, &v25, 0, &v23, 0);
  }
  else
  {
    memset(&v23, 0, sizeof(v23));
    xgboost::gbm::GBLinearTrainParam::__MANAGER__(v10);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_26AD710A0, (uint64_t)this + 400, __p, &v25, &v23, 0);
    *((unsigned char *)this + 400) = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v25);
  std::string __p = &v23;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  xgboost::gbm::GBLinearTrainParam::CheckGPUSupport((xgboost::gbm::GBLinear *)((char *)this + 400));
  uint64_t v18 = xgboost::LinearUpdater::Create((uint64_t)this + 408, *((void *)this + 2));
  uint64_t v19 = *((void *)this + 56);
  *((void *)this + 56) = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    uint64_t v18 = *((void *)this + 56);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "updater");
  uint64_t v20 = (*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v20);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p);
  }
}

void sub_22E8D1C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,int a21,__int16 a22,char a23,char a24)
{
  *(void *)(v24 - 72) = &a16;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 72));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBLinear::SaveConfig(xgboost::gbm::GBLinear *this, xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v3, "gblinear");
  int v5 = &unk_26E24E210;
  uint64_t v6 = 0;
  *(_OWORD *)int v7 = *(_OWORD *)v3;
  uint64_t v8 = v4;
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v4 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
  xgboost::Json::operator=();
}

void sub_22E8D20B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

void non-virtual thunk to'xgboost::gbm::GBLinear::~GBLinear(xgboost::gbm::GBLinear *this)
{
  *((void *)this - 1) = &unk_26E2457B8;
  *(void *)this = &unk_26E245878;
  xgboost::common::Monitor::~Monitor((char **)this + 58);
  uint64_t v2 = *((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  *((void *)this + 26) = &unk_26E248940;
  uint64_t v3 = (void *)*((void *)this + 46);
  if (v3)
  {
    *((void *)this + 47) = v3;
    operator delete(v3);
  }
  *((void *)this + 3) = &unk_26E248940;
  uint64_t v4 = (void *)*((void *)this + 23);
  if (v4)
  {
    *((void *)this + 24) = v4;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *((void *)this - 1) = &unk_26E2457B8;
  *(void *)this = &unk_26E245878;
  xgboost::common::Monitor::~Monitor((char **)this + 58);
  uint64_t v2 = *((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  *((void *)this + 26) = &unk_26E248940;
  uint64_t v3 = (void *)*((void *)this + 46);
  if (v3)
  {
    *((void *)this + 47) = v3;
    operator delete(v3);
  }
  *((void *)this + 3) = &unk_26E248940;
  uint64_t v4 = (void *)*((void *)this + 23);
  if (v4)
  {
    *((void *)this + 24) = v4;
    operator delete(v4);
  }

  JUMPOUT(0x230FA80D0);
}

void non-virtual thunk to'xgboost::gbm::GBLinear::LoadConfig(xgboost::gbm::GBLinear *this, const xgboost::Json *a2)
{
}

void non-virtual thunk to'xgboost::gbm::GBLinear::SaveConfig(xgboost::gbm::GBLinear *this, xgboost::Json *a2)
{
}

void dmlc::LogCheckFormat<std::string,char [9]>(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)" (", 2);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" vs. ", 5);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"gblinear", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
  operator new();
}

void sub_22E8D25D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::gbm::GBLinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::gbm::GBLinearTrainParam *a1, unsigned char *a2, uint64_t *a3)
{
  if (*a2)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    xgboost::gbm::GBLinearTrainParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_26AD710A0, (uint64_t)a2, *a3, a3[1], 0, (uint64_t *)a1, 0);
  }
  else
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    xgboost::gbm::GBLinearTrainParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_26AD710A0, (uint64_t)a2, *a3, a3[1], (uint64_t *)a1, 0);
    *a2 = 1;
  }
}

void sub_22E8D26A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBLinearTrainParam::CheckGPUSupport(xgboost::gbm::GBLinearTrainParam *this)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)this + 8;
  int v3 = *((char *)this + 31);
  if (v3 < 0)
  {
    if (*((void *)this + 2) != 17) {
      return;
    }
    uint64_t v2 = *(char **)v2;
  }
  else if (v3 != 17)
  {
    return;
  }
  uint64_t v4 = *(void *)v2;
  uint64_t v5 = *((void *)v2 + 1);
  int v6 = v2[16];
  if (v4 == 0x726F6F635F757067 && v5 == 0x6E65637365645F64 && v6 == 116)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
    uint64_t v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v17);
    std::string::basic_string[abi:ne180100]<0>(v17, "updater");
    std::string::basic_string[abi:ne180100]<0>(&__p, "coord_descent");
    uint64_t v11 = 0;
    int v12 = 0;
    int v13 = 0;
    std::vector<unsigned int>::size_type v15 = &v11;
    char v16 = 0;
    uint64_t v11 = operator new(0x30uLL);
    int v12 = v11;
    int v13 = (char *)v11 + 48;
    int v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v13, (long long *)v17, v21, (std::string *)v11);
    xgboost::XGBoostParameter<xgboost::gbm::GBLinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::gbm::GBLinearTrainParam *)v14, this, (uint64_t *)&v11);
    std::vector<unsigned int>::size_type v15 = (void **)v14;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v15);
    std::vector<unsigned int>::size_type v15 = &v11;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if (v20 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v17, (uint64_t)&v11, 46, 1);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v17);
      if (SHIBYTE(v13) < 0) {
        operator delete(v11);
      }
    }
  }
}

void sub_22E8D28E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      uint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_22E8D2A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  std::exception_ptr v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v13);
      uint64_t v8 = *a1;
      int v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    std::vector<unsigned int>::size_type v15 = &v14[4 * v11];
    char v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    BOOL v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  char v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

uint64_t xgboost::BatchIterator<xgboost::SparsePage>::operator!=(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    uint64_t v2 = *a1;
  }
  return (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2) ^ 1;
}

void sub_22E8D2DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::BatchIterator<xgboost::SparsePage>::operator*(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    uint64_t v2 = *a1;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
}

void sub_22E8D2E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t *xgboost::BatchIterator<xgboost::SparsePage>::operator++(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    uint64_t v2 = *a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return a1;
}

void sub_22E8D2F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SparsePage>,void>((uint64_t)a1, a2);
}

void sub_22E8D2F70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SparsePage>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SparsePage>,void>(&v2, a2);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SparsePage>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22E8D3038(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::SparsePage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::SparsePage>,xgboost::BatchIteratorImpl<xgboost::SparsePage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::SparsePage>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::SparsePage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::SparsePage>,xgboost::BatchIteratorImpl<xgboost::SparsePage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::SparsePage>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::SparsePage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::SparsePage>,xgboost::BatchIteratorImpl<xgboost::SparsePage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::SparsePage>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x230FA8020](a1 + 128);
  return a1;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<unsigned int>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::size_type v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v3, __x);
  }
}

void dmlc::LogCheckFormat<std::string,char [7]>(uint64_t a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)" (", 2);
  int v5 = *(char *)(a1 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)a1;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" vs. ", 5);
  size_t v10 = strlen(a2);
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)a2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 2);
  operator new();
}

void sub_22E8D3788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      std::vector<unsigned int>::size_type v16 = 4 * __n;
      size_t v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (char *)this->__begin_;
    unint64_t v11 = __n + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v14);
    }
    else {
      long long v15 = 0;
    }
    int v18 = (unsigned int *)&v15[4 * v12];
    uint64_t v19 = &v18[__n];
    std::vector<unsigned int>::size_type v20 = 4 * __n;
    uint64_t v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    uint64_t v22 = (unsigned int *)&v15[4 * v14];
    std::vector<unsigned int>::pointer begin = this->__begin_;
    for (std::vector<unsigned int>::pointer i = this->__end_; i != begin; --i)
    {
      unsigned int v25 = *(i - 1);
      *--int v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t xgboost::linear::__dmlc_registry_file_tag_updater_coordinate__(xgboost::linear *this)
{
  return 0;
}

void dmlc::parameter::FieldEntry<int>::~FieldEntry(uint64_t a1)
{
  *(void *)a1 = &unk_26E245D60;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));

  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E245D60;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::SetDefault(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (!*(unsigned char *)(result + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    std::vector<unsigned int>::size_type v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Required parameter ", 19);
    int v4 = *(char *)(v2 + 47);
    if (v4 >= 0) {
      uint64_t v5 = v2 + 24;
    }
    else {
      uint64_t v5 = *(void *)(v2 + 24);
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(v2 + 47);
    }
    else {
      uint64_t v6 = *(void *)(v2 + 32);
    }
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" of ", 4);
    uint64_t v11 = *(void *)(v2 + 48);
    uint64_t v10 = v2 + 48;
    uint64_t v9 = v11;
    int v12 = *(char *)(v10 + 23);
    if (v12 >= 0) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = v9;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v10 + 8);
    }
    long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not presented", 17);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  *(_DWORD *)(a2 + *(void *)(result + 96)) = *(_DWORD *)(result + 104);
  return result;
}

void sub_22E8D3AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntry<int>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v6 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1 + 128, (const void **)a3);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
    if (a1 + 136 == v6)
    {
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Invalid Input: '", 16);
      int v9 = *(char *)(a3 + 23);
      if (v9 >= 0) {
        uint64_t v10 = a3;
      }
      else {
        uint64_t v10 = *(void *)a3;
      }
      if (v9 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v11 = *(void *)(a3 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"', valid values are: ", 21);
      dmlc::parameter::FieldEntry<int>::PrintEnums(a1, v14);
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &__p);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
    }
    std::ostream::operator<<();
    std::stringbuf::str();
    dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::Set(a1, a2, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v14[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v14[1] = MEMORY[0x263F8C318] + 16;
    if (v15 < 0) {
      operator delete((void *)v14[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x230FA8020](&v16);
  }
  else
  {
    return dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::Set(a1, a2, a3);
  }
}

void sub_22E8D3DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<int>,int>::Check(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + *(void *)(result + 96));
  if (*(unsigned char *)(result + 108))
  {
    int v3 = *(_DWORD *)(result + 112);
    if (*(unsigned char *)(result + 109))
    {
      if (v2 < v3 || v2 > *(_DWORD *)(result + 116))
      {
        uint64_t v4 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
        uint64_t v5 = (void *)std::ostream::operator<<();
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for Parameter ", 15);
        int v7 = *(char *)(v4 + 47);
        if (v7 >= 0) {
          uint64_t v8 = v4 + 24;
        }
        else {
          uint64_t v8 = *(void *)(v4 + 24);
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(v4 + 47);
        }
        else {
          uint64_t v9 = *(void *)(v4 + 32);
        }
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" exceed bound [", 15);
        uint64_t v11 = (void *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v66, 1);
        int v12 = (void *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 93;
        uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v66, 1);
        v66.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v66, 1);
        int v14 = *(char *)(v4 + 47);
        if (v14 >= 0) {
          uint64_t v15 = v4 + 24;
        }
        else {
          uint64_t v15 = *(void *)(v4 + 24);
        }
        if (v14 >= 0) {
          uint64_t v16 = *(unsigned __int8 *)(v4 + 47);
        }
        else {
          uint64_t v16 = *(void *)(v4 + 32);
        }
        std::string v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v15, v16);
        int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        uint64_t v21 = *(void *)(v4 + 72);
        uint64_t v20 = v4 + 72;
        uint64_t v19 = v21;
        int v22 = *(char *)(v20 + 23);
        if (v22 >= 0) {
          uint64_t v23 = v20;
        }
        else {
          uint64_t v23 = v19;
        }
        if (v22 >= 0) {
          uint64_t v24 = *(unsigned __int8 *)(v20 + 23);
        }
        else {
          uint64_t v24 = *(void *)(v20 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v66);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
      }
    }
    else if (v2 < v3)
    {
      uint64_t v46 = result;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
      uint64_t v47 = (void *)std::ostream::operator<<();
      int v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" for Parameter ", 15);
      int v49 = *(char *)(v46 + 47);
      if (v49 >= 0) {
        uint64_t v50 = v46 + 24;
      }
      else {
        uint64_t v50 = *(void *)(v46 + 24);
      }
      if (v49 >= 0) {
        uint64_t v51 = *(unsigned __int8 *)(v46 + 47);
      }
      else {
        uint64_t v51 = *(void *)(v46 + 32);
      }
      uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" should be greater equal to ", 28);
      std::string v53 = (void *)std::ostream::operator<<();
      v66.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v66, 1);
      int v54 = *(char *)(v46 + 47);
      if (v54 >= 0) {
        uint64_t v55 = v46 + 24;
      }
      else {
        uint64_t v55 = *(void *)(v46 + 24);
      }
      if (v54 >= 0) {
        uint64_t v56 = *(unsigned __int8 *)(v46 + 47);
      }
      else {
        uint64_t v56 = *(void *)(v46 + 32);
      }
      uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v55, v56);
      uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      uint64_t v61 = *(void *)(v46 + 72);
      uint64_t v60 = v46 + 72;
      uint64_t v59 = v61;
      int v62 = *(char *)(v60 + 23);
      if (v62 >= 0) {
        uint64_t v63 = v60;
      }
      else {
        uint64_t v63 = v59;
      }
      if (v62 >= 0) {
        uint64_t v64 = *(unsigned __int8 *)(v60 + 23);
      }
      else {
        uint64_t v64 = *(void *)(v60 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v63, v64);
      unint64_t v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v65, &v66);
      v65->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
    }
  }
  else if (*(unsigned char *)(result + 109) && v2 > *(_DWORD *)(result + 116))
  {
    uint64_t v26 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
    unint64_t v27 = (void *)std::ostream::operator<<();
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for Parameter ", 15);
    int v29 = *(char *)(v26 + 47);
    if (v29 >= 0) {
      uint64_t v30 = v26 + 24;
    }
    else {
      uint64_t v30 = *(void *)(v26 + 24);
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(v26 + 47);
    }
    else {
      uint64_t v31 = *(void *)(v26 + 32);
    }
    long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" should be smaller equal to ", 28);
    float v33 = (void *)std::ostream::operator<<();
    v66.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v66, 1);
    int v34 = *(char *)(v26 + 47);
    if (v34 >= 0) {
      uint64_t v35 = v26 + 24;
    }
    else {
      uint64_t v35 = *(void *)(v26 + 24);
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(v26 + 47);
    }
    else {
      uint64_t v36 = *(void *)(v26 + 32);
    }
    uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v35, v36);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    uint64_t v41 = *(void *)(v26 + 72);
    uint64_t v40 = v26 + 72;
    uint64_t v39 = v41;
    int v42 = *(char *)(v40 + 23);
    if (v42 >= 0) {
      uint64_t v43 = v40;
    }
    else {
      uint64_t v43 = v39;
    }
    if (v42 >= 0) {
      uint64_t v44 = *(unsigned __int8 *)(v40 + 23);
    }
    else {
      uint64_t v44 = *(void *)(v40 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v43, v44);
    uint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v45, &v66);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  return result;
}

void sub_22E8D4298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::GetStringValue(void *a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(void *, void *, void))(*a1 + 64))(a1, v5, *(unsigned int *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v5[1] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v7);
}

void sub_22E8D4460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntry<int>::GetFieldInfo@<X0>(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1[5].__r_.__value_.__s.__data_[0])
  {
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
    std::string::operator=((std::string *)a2, a1 + 1);
    std::string::operator=((std::string *)(a2 + 24), a1 + 2);
    dmlc::parameter::FieldEntry<int>::PrintEnums((uint64_t)a1, v9);
    if (a1->__r_.__value_.__s.__data_[8])
    {
      LOBYTE(v7) = 44;
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v7, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"optional, default=", 18);
      (*(void (**)(const std::string *, void *))(a1->__r_.__value_.__r.__words[0] + 56))(a1, v9);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", required", 10);
    }
    std::stringbuf::str();
    char v6 = (void **)(a2 + 48);
    if (*(char *)(a2 + 71) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)char v6 = v7;
    *(void *)(a2 + 64) = v8;
    std::string::operator=((std::string *)(a2 + 72), a1 + 3);
    v9[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v9[1] = MEMORY[0x263F8C318] + 16;
    if (v10 < 0) {
      operator delete((void *)v9[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x230FA8020](&v11);
  }
  else
  {
    return dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::GetFieldInfo((uint64_t)a1, a2);
  }
}

void sub_22E8D46B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

void *dmlc::parameter::FieldEntry<int>::PrintDefaultValueString(unsigned int *a1, void *a2)
{
  char v5 = 39;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v5, 1);
  (*(void (**)(unsigned int *, void *, void))(*(void *)a1 + 64))(a1, a2, a1[26]);
  char v6 = 39;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v6, 1);
}

void *dmlc::parameter::FieldEntry<int>::PrintValue(uint64_t a1, void *a2, int a3)
{
  int v11 = a3;
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v4 = *(uint64_t **)(a1 + 160);
    if (!v4) {
LABEL_8:
    }
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    while (1)
    {
      int v5 = *((_DWORD *)v4 + 8);
      if (v5 <= a3)
      {
        if (v5 >= a3)
        {
          char v6 = std::map<int,std::string>::at(a1 + 152, &v11);
          int v7 = *((char *)v6 + 23);
          if (v7 >= 0) {
            uint64_t v8 = (uint64_t)v6;
          }
          else {
            uint64_t v8 = *v6;
          }
          if (v7 >= 0) {
            uint64_t v9 = *((unsigned __int8 *)v6 + 23);
          }
          else {
            uint64_t v9 = v6[1];
          }
          return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v8, v9);
        }
        ++v4;
      }
      uint64_t v4 = (uint64_t *)*v4;
      if (!v4) {
        goto LABEL_8;
      }
    }
  }

  return (void *)std::ostream::operator<<();
}

void sub_22E8D48D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::istringstream::basic_istringstream[abi:ne180100](v34, (const std::string *)a3, 8);
  MEMORY[0x230FA7C80](v34, a2 + *(void *)(a1 + 96));
  uint64_t v6 = v34[0];
  int v7 = *(_DWORD *)((char *)&v34[4] + *(void *)(v34[0] - 24));
  if ((v7 & 5) == 0 && (v7 & 2) == 0)
  {
    while (1)
    {
      int v8 = std::istream::get();
      if (v8 == -1)
      {
        std::ios_base::iostate v10 = 0;
        int v11 = (std::ios_base *)((char *)v34 + *(void *)(v34[0] - 24));
        goto LABEL_11;
      }
      if (v8 > 0x20u || ((1 << v8) & 0x100003600) == 0) {
        break;
      }
      uint64_t v6 = v34[0];
      if ((*((unsigned char *)&v34[4] + *(void *)(v34[0] - 24)) & 2) != 0) {
        goto LABEL_12;
      }
    }
    int v11 = (std::ios_base *)((char *)v34 + *(void *)(v34[0] - 24));
    std::ios_base::iostate v10 = v11->__rdstate_ | 4;
LABEL_11:
    std::ios_base::clear(v11, v10);
    uint64_t v6 = v34[0];
  }
LABEL_12:
  if ((*((unsigned char *)&v34[4] + *(void *)(v6 - 24)) & 5) != 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid Parameter format for ", 29);
    int v14 = *(char *)(a1 + 47);
    if (v14 >= 0) {
      uint64_t v15 = a1 + 24;
    }
    else {
      uint64_t v15 = *(void *)(a1 + 24);
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v16 = *(void *)(a1 + 32);
    }
    std::string v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" expect ", 8);
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v20 = a1 + 48;
    uint64_t v19 = v21;
    int v22 = *(char *)(v20 + 23);
    if (v22 >= 0) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = v19;
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(v20 + 23);
    }
    else {
      uint64_t v24 = *(void *)(v20 + 8);
    }
    unsigned int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" but value='", 12);
    int v27 = *(char *)(a3 + 23);
    if (v27 >= 0) {
      uint64_t v28 = a3;
    }
    else {
      uint64_t v28 = *(void *)a3;
    }
    if (v27 >= 0) {
      uint64_t v29 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v29 = *(void *)(a3 + 8);
    }
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v32.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v32, 1);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v32);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26E245548;
  }
  v34[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  v34[2] = MEMORY[0x263F8C318] + 16;
  if (v35 < 0) {
    operator delete((void *)v34[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x230FA8020](&v36);
}

void sub_22E8D4C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v49 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      std::istringstream::~istringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v48);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  int v4 = *(char *)(a1 + 71);
  if (v4 >= 0) {
    uint64_t v5 = a1 + 48;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 56);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(unsigned char *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  int v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)int v8 = v10;
  *(void *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v14);
}

void sub_22E8D4F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

void *dmlc::parameter::FieldEntry<int>::PrintEnums(uint64_t a1, void *a2)
{
  char v14 = 123;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v14, 1);
  int v4 = *(void **)(a1 + 128);
  if (v4 != (void *)(a1 + 136))
  {
    do
    {
      if (v4 != *(void **)(a1 + 128)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
      }
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"'", 1);
      int v6 = *((char *)v4 + 55);
      if (v6 >= 0) {
        uint64_t v7 = (uint64_t)(v4 + 4);
      }
      else {
        uint64_t v7 = v4[4];
      }
      if (v6 >= 0) {
        uint64_t v8 = *((unsigned __int8 *)v4 + 55);
      }
      else {
        uint64_t v8 = v4[5];
      }
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
      char v16 = 39;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v16, 1);
      long long v10 = (void *)v4[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v4[2];
          BOOL v12 = *v11 == (void)v4;
          int v4 = v11;
        }
        while (!v12);
      }
      int v4 = v11;
    }
    while (v11 != (void *)(a1 + 136));
  }
  char v15 = 125;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v15, 1);
}

uint64_t *std::map<int,std::string>::at(uint64_t a1, int *a2)
{
  int v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      int v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    int v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

void std::__function::__func<xgboost::linear::$_0,std::allocator<xgboost::linear::$_0>,xgboost::LinearUpdater * ()(void)>::~__func()
{
}

{
  JUMPOUT(0x230FA80D0);
}

void *std::__function::__func<xgboost::linear::$_0,std::allocator<xgboost::linear::$_0>,xgboost::LinearUpdater * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E245A70;
  return result;
}

{
  void *result;

  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E248060;
  return result;
}

void std::__function::__func<xgboost::linear::$_0,std::allocator<xgboost::linear::$_0>,xgboost::LinearUpdater * ()(void)>::operator()()
{
}

{
  operator new();
}

void sub_22E8D51E0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  MEMORY[0x230FA80D0](v1, 0x10F3C401EC50B1ELL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::linear::$_0,std::allocator<xgboost::linear::$_0>,xgboost::LinearUpdater * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::linear::$_0,std::allocator<xgboost::linear::$_0>,xgboost::LinearUpdater * ()(void)>::target_type()
{
}

{
}

void xgboost::linear::CoordinateUpdater::~CoordinateUpdater(char **this)
{
  *this = (char *)&unk_26E245AF0;
  xgboost::common::Monitor::~Monitor(this + 8);
  int v2 = this[7];
  this[7] = 0;
  if (v2) {
    (*(void (**)(char *))(*(void *)v2 + 8))(v2);
  }
}

{
  char *v2;
  uint64_t vars8;

  *this = (char *)&unk_26E245AF0;
  xgboost::common::Monitor::~Monitor(this + 8);
  int v2 = this[7];
  this[7] = 0;
  if (v2) {
    (*(void (**)(char *))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::linear::CoordinateUpdater::LoadConfig(xgboost::linear::CoordinateUpdater *this, const xgboost::Json *a2)
{
  uint64_t v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(&__p, "linear_train_param");
  int v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)&__p);
  xgboost::FromJson<xgboost::linear::LinearTrainParam>(v4, (xgboost::linear::CoordinateUpdater *)((char *)this + 24), &v19);
  v16[0] = &v19;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "coordinate_param");
  uint64_t v5 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)v16);
  int v6 = (xgboost::linear::CoordinateParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v5);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  std::string __p = &v21;
  uint64_t v7 = (void *)*((void *)v6 + 2);
  uint64_t v8 = (void *)((char *)v6 + 24);
  if (v7 != (void *)((char *)v6 + 24))
  {
    do
    {
      uint64_t v9 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v7[7]);
      uint64_t v23 = (long long *)(v7 + 4);
      long long v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, (const void **)v7 + 4, (uint64_t)&std::piecewise_construct, &v23);
      int v6 = (xgboost::linear::CoordinateParam *)std::string::operator=((std::string *)(v10 + 7), (const std::string *)(v9 + 16));
      uint64_t v11 = (void *)v7[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)v7[2];
          BOOL v13 = *v12 == (void)v7;
          uint64_t v7 = v12;
        }
        while (!v13);
      }
      uint64_t v7 = v12;
    }
    while (v12 != v8);
  }
  int v15 = *((unsigned __int8 *)this + 16);
  char v14 = (char *)this + 16;
  memset(&v18, 0, sizeof(v18));
  xgboost::linear::CoordinateParam::__MANAGER__(v6);
  if (v15)
  {
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD710F0, (uint64_t)v14, __p, &v21, 0, &v18, 0);
  }
  else
  {
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_26AD710F0, (uint64_t)v14, __p, &v21, &v18, 0);
    *char v14 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v21);
  std::string __p = &v18;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
}

void sub_22E8D5568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,int a23,__int16 a24,char a25,char a26)
{
  *(void *)(v26 - 56) = &a15;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a21, a22);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::linear::CoordinateUpdater::SaveConfig(xgboost::linear::CoordinateUpdater *this, xgboost::Json *a2)
{
  xgboost::ToJson<xgboost::linear::LinearTrainParam>((xgboost::linear::CoordinateUpdater *)((char *)this + 24), &v4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "linear_train_param");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
  xgboost::Json::operator=();
}

void sub_22E8D5834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v30, a16);
  _Unwind_Resume(a1);
}

void xgboost::linear::CoordinateUpdater::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::linear::LinearTrainParam *)(a1 + 24), a2, &v10);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    xgboost::linear::CoordinateParam::__MANAGER__(v3);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD710F0, a1 + 16, v10, v11, 0, &v7, 0);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    xgboost::linear::CoordinateParam::__MANAGER__(v3);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_26AD710F0, a1 + 16, v10, v11, &v7, 0);
    *(unsigned char *)(a1 + 16) = 1;
  }
  BOOL v12 = (void **)&v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v4 = xgboost::linear::FeatureSelector::Create((xgboost::linear::FeatureSelector *)*(unsigned int *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "CoordinateUpdater");
  std::string::operator=((std::string *)(a1 + 64), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  BOOL v12 = (void **)&v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_22E8D5A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  *(void *)(v18 - 24) = &a15;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 24));
  *(void *)(v18 - 24) = &a18;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 24));
  _Unwind_Resume(a1);
}

void xgboost::linear::CoordinateUpdater::Update(uint64_t a1, uint64_t *a2, uint64_t (***a3)(void), uint64_t a4, double a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  __n128 v7 = (__n128)vcvtq_f64_f32(*(float32x2_t *)(a1 + 32));
  __n128 v6 = (__n128)vmulq_n_f64((float64x2_t)v7, a5);
  v7.n128_u64[0] = (unint64_t)vcvt_f32_f64((float64x2_t)v6);
  *(void *)(a1 + 44) = v7.n128_u64[0];
  uint64_t v8 = *(unsigned int *)(*(void *)(a4 + 152) + 8);
  if ((int)v8 < 1)
  {
    v6.n128_u32[0] = v7.n128_u32[1];
    uint64_t v13 = a1;
  }
  else
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      v6.n128_f64[0] = xgboost::linear::GetBiasGradientParallel(i, v8, *a2, a3, 1);
      v6.n128_f64[0] = -v6.n128_f64[0] / v7.n128_f64[0] * *(float *)(a1 + 28);
      v6.n128_f32[0] = v6.n128_f64[0];
      uint64_t v10 = *(void *)(a4 + 160)
          + 4 * (*(_DWORD *)(*(void *)(a4 + 152) + 8) * *(_DWORD *)(*(void *)(a4 + 152) + 4));
      *(float *)(v10 + 4 * i) = *(float *)(v10 + 4 * i) + v6.n128_f32[0];
      uint64_t v11 = (void *)*a2;
      LODWORD(v20) = i;
      LODWORD(v22) = v8;
      LODWORD(v19[0]) = v6.n128_u32[0];
      std::string __p = v11;
      if (v6.n128_f32[0] != 0.0)
      {
        unsigned int v12 = *(_DWORD *)(**a3)(a3);
        v24.__ptr_ = &__p;
        unsigned int v25 = &v22;
        uint64_t v26 = &v20;
        int v27 = v19;
        xgboost::common::ParallelFor<unsigned int,xgboost::linear::UpdateBiasResidualParallel(int,int,float,std::vector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,int)::{lambda#1}>(v12, 1, 2, 0, (uint64_t ***)&v24);
      }
    }
    uint64_t v13 = a1;
    v7.n128_u32[0] = *(_DWORD *)(a1 + 44);
    v6.n128_u32[0] = *(_DWORD *)(a1 + 48);
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t (***)(void), void, __n128, __n128))(**(void **)(v13 + 56) + 16))(*(void *)(v13 + 56), a4, *a2, a3, *(unsigned int *)(v13 + 20), v6, v7);
  if ((int)v8 > 0)
  {
    for (uint64_t j = 0; j != v8; ++j)
    {
      if (*(_DWORD *)(*(void *)(a4 + 152) + 4)
        && ((*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t (***)(void), float, float))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56), 0, a4, j, *a2, a3, *(float *)(a1 + 48), *(float *)(a1 + 44)) & 0x80000000) == 0)
      {
        v24.__ptr_ = 0;
        std::vector<double>::vector(&__p, 1uLL, &v24);
        v24.__ptr_ = 0;
        std::vector<double>::vector(&v20, 1uLL, &v24);
        ((void (*)(uint64_t *__return_ptr, uint64_t (***)(void)))(*a3)[10])(&v22, a3);
        v19[0] = v22;
        v19[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
        xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(&v18, 0);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, "UpdateFeature");
  xgboost::common::Monitor::Stop();
  if (SHIBYTE(v26) < 0) {
    operator delete(v24.__ptr_);
  }
}

void sub_22E8D6158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::FromJson<xgboost::linear::LinearTrainParam>(_DWORD **a1@<X0>, xgboost::linear::LinearTrainParam *a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  uint64_t v5 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*a1);
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v13 = (uint64_t *)v14;
  __n128 v6 = (void *)v5[2];
  __n128 v7 = v5 + 3;
  if (v6 != v5 + 3)
  {
    do
    {
      uint64_t v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v6[7]);
      int v15 = (long long *)(v6 + 4);
      uint64_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      uint64_t v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          __n128 v6 = v11;
        }
        while (!v12);
      }
      __n128 v6 = v11;
    }
    while (v11 != v7);
  }
  xgboost::XGBoostParameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(a2, (uint64_t)&v13, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_22E8D633C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void xgboost::XGBoostParameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::linear::LinearTrainParam *this@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  if (*(unsigned char *)this)
  {
    dmlc::Parameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(this, a2, a3);
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
    __n128 v6 = xgboost::linear::LinearTrainParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)this, *(void **)a2, (void *)(a2 + 8), a3, 0);
    *(unsigned char *)this = 1;
  }
}

void sub_22E8D63F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void dmlc::Parameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::linear::LinearTrainParam *a1@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  __n128 v6 = xgboost::linear::LinearTrainParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)a1, *(void **)a2, (void *)(a2 + 8), 0, a3, 0);
}

void sub_22E8D646C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::ToJson<xgboost::linear::LinearTrainParam>(xgboost::linear::LinearTrainParam *a1@<X0>, void *a2@<X8>)
{
  a2[1] = 0x300000000;
  *a2 = &unk_26E24E128;
  a2[3] = 0;
  a2[2] = a2 + 3;
  a2[4] = 0;
  uint64_t v3 = xgboost::linear::LinearTrainParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)v3, &v5);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v6, (const void **)&v5.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v5.__end_->first.__r_.__value_.__l.__data_);
  uint64_t v8 = &v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  uint64_t v4 = v6;
  if ((void **)v6 != &v7)
  {
    xgboost::JsonString::JsonString(&v5, (long long *)(v6 + 56));
    uint64_t v8 = (std::vector<std::pair<std::string, std::string>> *)(v4 + 32);
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 2), (const void **)(v4 + 32), (uint64_t)&std::piecewise_construct, (long long **)&v8);
    xgboost::Json::operator=();
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v6, v7);
}

void sub_22E8D65F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(void *)uint64_t v21 = v22;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v23, *(void **)(v21 + 24));
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::linear::LinearTrainParam *this@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)this)
  {
    dmlc::Parameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(this, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = xgboost::linear::LinearTrainParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)this, *a2, a2[1], a3, 0);
    *(unsigned char *)this = 1;
  }
}

void sub_22E8D6710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::linear::FeatureSelector::Create(xgboost::linear::FeatureSelector *this)
{
  switch((int)this)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    default:
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/linear/coordinate_common.h");
      int v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"unknown coordinate selector: ", 29);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
      return 0;
  }
}

void sub_22E8D6910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *dmlc::Parameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>@<X0>(xgboost::linear::LinearTrainParam *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = xgboost::linear::LinearTrainParam::__MANAGER__(a1);
  return dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)a1, *a2, a2[1], 0, a3, 0);
}

void sub_22E8D6998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::linear::CyclicFeatureSelector::~CyclicFeatureSelector(xgboost::linear::CyclicFeatureSelector *this)
{
}

uint64_t xgboost::linear::CyclicFeatureSelector::NextFeature(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return a2 % *(_DWORD *)(*(void *)(a3 + 152) + 4);
}

void xgboost::linear::ShuffleFeatureSelector::~ShuffleFeatureSelector(xgboost::linear::ShuffleFeatureSelector *this)
{
  *(void *)this = &unk_26E245BB8;
  int v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E245BB8;
  int v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x230FA80D0);
}

uint64_t xgboost::linear::ShuffleFeatureSelector::Setup(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v3 = (std::vector<unsigned int> *)(a1 + 16);
  if (v5 == v4)
  {
    std::vector<unsigned int>::resize(v3, *(unsigned int *)(*(void *)(a2 + 152) + 4));
    unint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 24);
    if (v4 == v5)
    {
      uint64_t v5 = *(void *)(a1 + 16);
    }
    else
    {
      int v6 = 0;
      __n128 v7 = *(_DWORD **)(a1 + 16);
      do
        *v7++ = v6++;
      while (v7 != (_DWORD *)v5);
    }
  }
  uint64_t v8 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();

  return std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u> &>(v4, v5, v8);
}

uint64_t xgboost::linear::ShuffleFeatureSelector::NextFeature(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return *(unsigned int *)(*(void *)(a1 + 16) + 4 * (a2 % *(_DWORD *)(*(void *)(a3 + 152) + 4)));
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  std::vector<unsigned int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      std::vector<unsigned int>::pointer begin = this->__begin_;
      std::vector<unsigned int>::pointer end = this->__end_;
    }
    else
    {
      char v14 = 0;
    }
    int v15 = &v14[4 * v11];
    char v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    char v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u> &>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((uint64_t)(a2 - a1) >= 5)
  {
    unint64_t v4 = (int *)a1;
    long long v12 = xmmword_22EA18860;
    unint64_t v5 = a2 - 4;
    if (a2 - 4 > a1)
    {
      uint64_t v7 = ((a2 - a1) >> 2) - 1;
      do
      {
        v11[0] = 0;
        v11[1] = v7;
        uint64_t v8 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v12, a3, v11);
        if (v8)
        {
          int v9 = *v4;
          int *v4 = v4[v8];
          v4[v8] = v9;
        }
        ++v4;
        --v7;
      }
      while ((unint64_t)v4 < v5);
    }
  }
  return a2;
}

uint64_t std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = a3[1];
  uint64_t v4 = result - *a3;
  if (result != *a3)
  {
    unint64_t v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      unint64_t v7 = __clz(v5);
      uint64_t v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v8 = 64;
      }
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        unint64_t v9 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0) {
    unint64_t v3 = (a3 >> 5) + 1;
  }
  else {
    unint64_t v3 = a3 >> 5;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16) = a3 / v3;
  *(void *)(result + 24) = v3;
  unint64_t v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40) {
    unint64_t v5 = 0;
  }
  *(void *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16) = a3 / v3;
    *(void *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      unint64_t v6 = 0;
      *(void *)(result + 32) = v3 + v4 * v3 - a3;
      *(void *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(void *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(void *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = 0x80000000uLL >> v4 << (v4 + 1);
  }
LABEL_13:
  *(void *)(result + 48) = v6;
  unsigned int v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4) {
    unsigned int v7 = 0;
  }
  if (v4 >= 0x1F) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      do
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(void *)(a1 + 40) <= (unint64_t)v4);
      unint64_t v5 = *(void *)(a1 + 16);
      if (v5 >= 0x40) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = v2 << v5;
      }
      uint64_t v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      unint64_t v7 = *(void *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v7 = 0;
  }
  for (; v7 < *(void *)(a1 + 24); ++v7)
  {
    do
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(void *)(a1 + 48) <= (unint64_t)v8);
    unint64_t v9 = *(void *)(a1 + 16);
    if (v9 >= 0x3F) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v2 << (v9 + 1);
    }
    uint64_t v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

void xgboost::linear::ThriftyFeatureSelector::~ThriftyFeatureSelector(xgboost::linear::ThriftyFeatureSelector *this)
{
  *(void *)this = &unk_26E245C00;
  size_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_26E245C00;
  size_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::linear::ThriftyFeatureSelector::Setup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 < 1) {
    int v7 = -1;
  }
  else {
    int v7 = a5;
  }
  *(_DWORD *)(a1 + 12) = v7;
  int v8 = *(_DWORD *)(*(void *)(a2 + 152) + 4);
  std::vector<unsigned int>::size_type v9 = *(unsigned int *)(*(void *)(a2 + 152) + 8);
  int v19 = v8;
  int v20 = v9;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v10 = a1 + 16;
  if (v12 == v11)
  {
    unint64_t v13 = (v8 * v9);
    std::vector<float>::resize(v10, v13);
    std::vector<unsigned long>::resize(a1 + 40, v13);
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 64), v9);
    std::vector<std::pair<double,double>>::resize(a1 + 88, v13);
  }
  char v14 = *(void **)(a1 + 88);
  uint64_t v15 = *(void *)(a1 + 96) - (void)v14;
  if (v15 >= 1) {
    bzero(v14, 16 * (((unint64_t)v15 >> 4) - ((unint64_t)v15 > 0xF)) + 16);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a4 + 80))(&v17, a4);
  v16[2] = v17;
  v16[3] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(v16, 0);
}

void sub_22E8D747C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::linear::ThriftyFeatureSelector::NextFeature(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(unsigned int *)(v4 + 4 * a4);
  *(_DWORD *)(v4 + 4 * a4) = v5 + 1;
  if (v5 >= *(_DWORD *)(a1 + 12)) {
    return 0xFFFFFFFFLL;
  }
  int v6 = *(_DWORD *)(*(void *)(a3 + 152) + 4);
  if (v5 + 1 == v6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(void *)(*(void *)(a1 + 40) + 8 * ((v6 * a4) + v5)) - v6 * a4;
  }
}

void std::vector<std::pair<double,double>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<std::pair<double,double>>::__append((void **)a1, a2 - v2);
  }
}

uint64_t xgboost::BatchIterator<xgboost::CSCPage>::operator!=(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    uint64_t v2 = *a1;
  }
  return (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2) ^ 1;
}

void sub_22E8D75E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::BatchIterator<xgboost::CSCPage>::operator*(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    uint64_t v2 = *a1;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
}

void sub_22E8D769C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t *xgboost::BatchIterator<xgboost::CSCPage>::operator++(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    uint64_t v2 = *a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return a1;
}

void sub_22E8D775C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void std::vector<std::pair<double,double>>::__append(void **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  char v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    char v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    char v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::CSCPage>,void>((uint64_t)a1, a2);
}

void sub_22E8D78C0(_Unwind_Exception *exception_object)
{
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::CSCPage>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::CSCPage>,void>(&v2, a2);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::CSCPage>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22E8D7988(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::CSCPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::CSCPage>,xgboost::BatchIteratorImpl<xgboost::CSCPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::CSCPage>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::CSCPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::CSCPage>,xgboost::BatchIteratorImpl<xgboost::CSCPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::CSCPage>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::CSCPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::CSCPage>,xgboost::BatchIteratorImpl<xgboost::CSCPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::CSCPage>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void xgboost::common::ParallelFor<unsigned int,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned int)#1}>(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v31 = 1;
  int v32 = a2;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v33.__ptr_ = 0;
  v34.__m_.__sig = 850045863;
  memset(v34.__m_.__opaque, 0, sizeof(v34.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        for (unsigned int i = 0; i != a1; ++i)
        {
          long long v8 = *(_OWORD *)(a5 + 16);
          v29[0] = *(_OWORD *)a5;
          v29[1] = v8;
          uint64_t v30 = *(void *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_((uint64_t)&v33, (uint64_t)v29, i);
        }
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          for (unsigned int j = 0; j != a1; ++j)
          {
            long long v10 = *(_OWORD *)(a5 + 16);
            v25[0] = *(_OWORD *)a5;
            v25[1] = v10;
            uint64_t v26 = *(void *)(a5 + 32);
            _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_((uint64_t)&v33, (uint64_t)v25, j);
          }
        }
      }
      else if (a1)
      {
        for (unsigned int k = 0; k != a1; ++k)
        {
          long long v16 = *(_OWORD *)(a5 + 16);
          v27[0] = *(_OWORD *)a5;
          v27[1] = v16;
          uint64_t v28 = *(void *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_((uint64_t)&v33, (uint64_t)v27, k);
        }
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          for (unsigned int m = 0; m != a1; ++m)
          {
            long long v12 = *(_OWORD *)(a5 + 16);
            v21[0] = *(_OWORD *)a5;
            v21[1] = v12;
            uint64_t v22 = *(void *)(a5 + 32);
            _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_((uint64_t)&v33, (uint64_t)v21, m);
          }
        }
      }
      else if (a1)
      {
        for (unsigned int n = 0; n != a1; ++n)
        {
          long long v18 = *(_OWORD *)(a5 + 16);
          v23[0] = *(_OWORD *)a5;
          v23[1] = v18;
          uint64_t v24 = *(void *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_((uint64_t)&v33, (uint64_t)v23, n);
        }
      }
      break;
    case 3:
      if (a1)
      {
        for (iunsigned int i = 0; ii != a1; ++ii)
        {
          long long v14 = *(_OWORD *)(a5 + 16);
          v19[0] = *(_OWORD *)a5;
          v19[1] = v14;
          uint64_t v20 = *(void *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_((uint64_t)&v33, (uint64_t)v19, ii);
        }
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v33);
  std::mutex::~mutex(&v34);
  std::exception_ptr::~exception_ptr(&v33);
}

void sub_22E8D7D54(_Unwind_Exception *exception_object)
{
}

void _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_(uint64_t a1, uint64_t a2, unsigned int a3)
{
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = (uint64_t *)(*(void *)(*(void *)a2 + 8) + 8 * a3);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1] - *v3;
  uint64_t v6 = *(void *)(*(void *)a2 + 24);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    goto LABEL_15;
  }
  uint64_t v8 = **(unsigned int **)(a2 + 8);
  if (v8)
  {
    uint64_t v9 = 0;
    int v10 = **(_DWORD **)(a2 + 24);
    uint64_t v11 = *(void *)(*(void *)(a2 + 16) + 88);
    uint64_t v12 = v6 + 8 * v4 + 4;
    while (!v5)
    {
LABEL_13:
      if (++v9 == v8) {
        return;
      }
    }
    uint64_t v13 = v5;
    uint64_t v14 = v5;
    uint64_t v15 = (float *)v12;
    while (v13)
    {
      uint64_t v16 = (v9 + *((_DWORD *)v15 - 1) * v8);
      uint64_t v17 = **(void **)(a2 + 32);
      float v18 = *(float *)(v17 + 8 * v16 + 4);
      if (v18 >= 0.0)
      {
        v19.i32[0] = *(_DWORD *)(v17 + 8 * v16);
        v19.f32[1] = v18 * *v15;
        *(float64x2_t *)(v11 + 16 * (a3 + v10 * v9)) = vaddq_f64(*(float64x2_t *)(v11 + 16 * (a3 + v10 * v9)), vcvtq_f64_f32(vmul_n_f32(v19, *v15)));
      }
      v15 += 2;
      --v13;
      if (!--v14) {
        goto LABEL_13;
      }
    }
LABEL_15:
    std::terminate();
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    int v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *(a2 - 1);
          uint64_t v23 = *v11;
          if (fabsf(*(float *)(*a3 + 4 * v22)) > fabsf(*(float *)(*a3 + 4 * *v11)))
          {
            uint64_t *v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, v11 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, &v11[v15 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11 + 1, v17 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v17 - 1, v17, &v11[v16 + 1], a3);
      uint64_t v18 = *v11;
      uint64_t *v11 = *v17;
      uint64_t *v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (fabsf(*(float *)(*a3 + 4 * *(v11 - 1))) <= fabsf(*(float *)(*a3 + 4 * *v11)))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &>(v11, a2, a3);
      uint64_t v11 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    float32x2_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &>(v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, v19, a3);
    uint64_t v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v19 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, a2, a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, a2, a3);
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  if (result != a2)
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = *a3;
      uint64_t v5 = 8;
      char v6 = result;
      do
      {
        uint64_t v8 = *v6;
        uint64_t v7 = v6[1];
        char v6 = v3;
        float v9 = fabsf(*(float *)(v4 + 4 * v7));
        if (v9 > fabsf(*(float *)(v4 + 4 * v8)))
        {
          uint64_t v10 = v5;
          while (1)
          {
            *(uint64_t *)((char *)result + v10) = v8;
            uint64_t v11 = v10 - 8;
            if (v10 == 8) {
              break;
            }
            uint64_t v8 = *(uint64_t *)((char *)result + v10 - 16);
            v10 -= 8;
            if (v9 <= fabsf(*(float *)(v4 + 4 * v8)))
            {
              uint64_t v12 = (uint64_t *)((char *)result + v11);
              goto LABEL_10;
            }
          }
          uint64_t v12 = result;
LABEL_10:
          uint64_t *v12 = v7;
        }
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = v6 + 1;
        v5 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  if (result != a2)
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = *a3;
      do
      {
        uint64_t v6 = *result;
        uint64_t v5 = result[1];
        uint64_t result = v3;
        float v7 = fabsf(*(float *)(v4 + 4 * v5));
        if (v7 > fabsf(*(float *)(v4 + 4 * v6)))
        {
          do
          {
            *std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = v6;
            uint64_t v6 = *(v3 - 2);
            --v3;
          }
          while (v7 > fabsf(*(float *)(v4 + 4 * v6)));
          *std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = v5;
        }
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  uint64_t v6 = *a4;
  float v7 = fabsf(*(float *)(*a4 + 4 * *a2));
  float v8 = fabsf(*(float *)(*a4 + 4 * *a1));
  uint64_t v9 = *a3;
  float v10 = fabsf(*(float *)(*a4 + 4 * *a3));
  if (v7 > v8)
  {
    if (v10 > v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    if (fabsf(*(float *)(v6 + 4 * *a3)) <= v8) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v10 > v7)
  {
    *a2 = v9;
    *a3 = v4;
    uint64_t v11 = *a1;
    if (fabsf(*(float *)(v6 + 4 * *a2)) <= fabsf(*(float *)(v6 + 4 * *a1))) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v11;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a3;
  float v5 = fabsf(*(float *)(*a3 + 4 * *a1));
  if (v5 <= fabsf(*(float *)(*a3 + 4 * *(a2 - 1))))
  {
    float v8 = a1 + 1;
    do
    {
      uint64_t v6 = v8;
      if (v8 >= a2) {
        break;
      }
      ++v8;
    }
    while (v5 <= fabsf(*(float *)(v4 + 4 * *v6)));
  }
  else
  {
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = v6[1];
      ++v6;
    }
    while (v5 <= fabsf(*(float *)(v4 + 4 * v7)));
  }
  if (v6 < a2)
  {
    do
      uint64_t v9 = *--a2;
    while (v5 > fabsf(*(float *)(v4 + 4 * v9)));
  }
  if (v6 < a2)
  {
    uint64_t v10 = *v6;
    uint64_t v11 = *a2;
    do
    {
      uint64_t *v6 = v11;
      *a2 = v10;
      do
      {
        uint64_t v12 = v6[1];
        ++v6;
        uint64_t v10 = v12;
      }
      while (v5 <= fabsf(*(float *)(v4 + 4 * v12)));
      do
      {
        uint64_t v13 = *--a2;
        uint64_t v11 = v13;
      }
      while (v5 > fabsf(*(float *)(v4 + 4 * v13)));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1) {
    *a1 = *(v6 - 1);
  }
  *(v6 - 1) = v3;
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = *a3;
  float v6 = fabsf(*(float *)(*a3 + 4 * *a1));
  do
    uint64_t v7 = a1[++v3];
  while (fabsf(*(float *)(v5 + 4 * v7)) > v6);
  float v8 = &a1[v3];
  uint64_t v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      uint64_t v11 = *--a2;
    }
    while (fabsf(*(float *)(v5 + 4 * v11)) <= v6);
  }
  else
  {
    do
      uint64_t v10 = *--a2;
    while (fabsf(*(float *)(v5 + 4 * v10)) <= v6);
  }
  if (v8 < a2)
  {
    uint64_t v12 = *a2;
    uint64_t v13 = &a1[v3];
    uint64_t v14 = a2;
    do
    {
      *uint64_t v13 = v12;
      *uint64_t v14 = v7;
      do
      {
        uint64_t v15 = v13[1];
        ++v13;
        uint64_t v7 = v15;
      }
      while (fabsf(*(float *)(v5 + 4 * v15)) > v6);
      do
      {
        uint64_t v16 = *--v14;
        uint64_t v12 = v16;
      }
      while (fabsf(*(float *)(v5 + 4 * v16)) <= v6);
    }
    while (v13 < v14);
    uint64_t v9 = v13 - 1;
  }
  if (v9 != a1) {
    *a1 = *v9;
  }
  *uint64_t v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (fabsf(*(float *)(*a3 + 4 * v8)) > fabsf(*(float *)(*a3 + 4 * *a1)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = fabsf(*(float *)(v13 + 4 * *v11));
    if (v17 > fabsf(*(float *)(v13 + 4 * *v10)))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 <= fabsf(*(float *)(v13 + 4 * v16)))
        {
          char v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      char v20 = a1;
LABEL_12:
      uint64_t *v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a2, a3, a5);
  uint64_t v11 = *a5;
  uint64_t v12 = *a3;
  if (fabsf(*(float *)(*a5 + 4 * *a4)) > fabsf(*(float *)(*a5 + 4 * *a3)))
  {
    *a3 = *a4;
    *a4 = v12;
    uint64_t v13 = *a2;
    if (fabsf(*(float *)(v11 + 4 * *a3)) > fabsf(*(float *)(v11 + 4 * *a2)))
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *a1;
      if (fabsf(*(float *)(v11 + 4 * *a2)) > fabsf(*(float *)(v11 + 4 * *a1)))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a2, a3, a4, a6);
  uint64_t v13 = *a6;
  uint64_t v14 = *a4;
  if (fabsf(*(float *)(*a6 + 4 * *a5)) > fabsf(*(float *)(*a6 + 4 * *a4)))
  {
    *a4 = *a5;
    *a5 = v14;
    uint64_t v15 = *a3;
    if (fabsf(*(float *)(v13 + 4 * *a4)) > fabsf(*(float *)(v13 + 4 * *a3)))
    {
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = *a2;
      if (fabsf(*(float *)(v13 + 4 * *a3)) > fabsf(*(float *)(v13 + 4 * *a2)))
      {
        *a2 = *a3;
        *a3 = v16;
        uint64_t v17 = *a1;
        if (fabsf(*(float *)(v13 + 4 * *a2)) > fabsf(*(float *)(v13 + 4 * *a1)))
        {
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *v14;
        if (fabsf(*(float *)(*a4 + 4 * *v14)) > fabsf(*(float *)(*a4 + 4 * *a1)))
        {
          *uint64_t v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      uint64_t v17 = a2 - 1;
      do
      {
        uint64_t v18 = *a1;
        uint64_t v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a4, v16);
        if (v17 == v19)
        {
          uint64_t *v19 = v18;
        }
        else
        {
          uint64_t *v19 = *v17;
          uint64_t *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v5 = ((uint64_t)a4 - result) >> 2;
      uint64_t v6 = v5 + 1;
      uint64_t v7 = (uint64_t *)(result + 8 * (v5 + 1));
      uint64_t v8 = v5 + 2;
      uint64_t v9 = *a2;
      if (v8 < a3 && fabsf(*(float *)(v9 + 4 * *v7)) > fabsf(*(float *)(v9 + 4 * v7[1])))
      {
        ++v7;
        uint64_t v6 = v8;
      }
      uint64_t v10 = *v7;
      uint64_t v11 = *a4;
      float v12 = fabsf(*(float *)(v9 + 4 * *a4));
      if (fabsf(*(float *)(v9 + 4 * *v7)) <= v12)
      {
        do
        {
          uint64_t v13 = v7;
          *a4 = v10;
          if (v4 < v6) {
            break;
          }
          uint64_t v14 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (uint64_t *)(result + 8 * v6);
          uint64_t v15 = v14 + 2;
          if (v15 < a3 && fabsf(*(float *)(v9 + 4 * *v7)) > fabsf(*(float *)(v9 + 4 * v7[1])))
          {
            ++v7;
            uint64_t v6 = v15;
          }
          uint64_t v10 = *v7;
          a4 = v13;
        }
        while (fabsf(*(float *)(v9 + 4 * *v7)) <= v12);
        *uint64_t v13 = v11;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(void *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  uint64_t v6 = *a2;
  do
  {
    uint64_t v7 = result;
    result += v3 + 1;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3 && fabsf(*(float *)(v6 + 4 * *result)) > fabsf(*(float *)(v6 + 4 * result[1])))
    {
      ++result;
      uint64_t v3 = v9;
    }
    void *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (void *)(result + 8 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v7 = (void *)(a2 - 8);
    uint64_t v8 = v9;
    uint64_t v10 = *a3;
    float v11 = fabsf(*(float *)(*a3 + 4 * v9));
    if (fabsf(*(float *)(*a3 + 4 * *v5)) > v11)
    {
      do
      {
        float v12 = v5;
        void *v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (void *)(result + 8 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = v12;
      }
      while (fabsf(*(float *)(v10 + 4 * *v5)) > v11);
      void *v12 = v8;
    }
  }
  return result;
}

void xgboost::linear::GreedyFeatureSelector::~GreedyFeatureSelector(xgboost::linear::GreedyFeatureSelector *this)
{
  *(void *)this = &unk_26E245CC0;
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26E245CC0;
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::linear::GreedyFeatureSelector::Setup(std::vector<unsigned int> *this, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  std::vector<unsigned int>::size_type v5 = *(unsigned int *)(*(void *)(a2 + 152) + 8);
  if (a5 < 1) {
    int v6 = -1;
  }
  else {
    int v6 = a5;
  }
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  HIDWORD(this->__end_) = v6;
  if (this[1].__begin_ == value)
  {
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)&this->__end_cap_, v5);
    std::vector<std::pair<double,double>>::resize((uint64_t)&this[1].__end_cap_, (*(_DWORD *)(*(void *)(a2 + 152) + 4) * v5));
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  uint64_t v9 = p_end_cap->__value_;

  bzero(v9, 4 * v5);
}

uint64_t xgboost::linear::GreedyFeatureSelector::NextFeature(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  int v21 = a4;
  uint64_t v6 = *(void *)(a1 + 16);
  unsigned int v7 = *(_DWORD *)(v6 + 4 * a4);
  unsigned int v8 = v7 + 1;
  *(_DWORD *)(v6 + 4 * a4) = v7 + 1;
  if (v7 < *(_DWORD *)(a1 + 12))
  {
    uint64_t v9 = *(void *)(a3 + 152);
    if (v8 != *(_DWORD *)(v9 + 4))
    {
      int v13 = *(_DWORD *)(v9 + 8);
      int v19 = *(_DWORD *)(v9 + 4);
      int v20 = v13;
      uint64_t v14 = *(void **)(a1 + 40);
      uint64_t v15 = *(void *)(a1 + 48) - (void)v14;
      if (v15 >= 1) {
        bzero(v14, 16 * (((unint64_t)v15 >> 4) - ((unint64_t)v15 > 0xF)) + 16);
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a6 + 80))(&v17, a6);
      v16[2] = v17;
      v16[3] = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(v16, 0);
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_22E8D9104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor<unsigned int,xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda(unsigned int)#1}>(int a1, int a2, int a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v25 = 1;
  int v26 = a2;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v27.__ptr_ = 0;
  v28.__m_.__sig = 850045863;
  memset(v28.__m_.__opaque, 0, sizeof(v28.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        for (unsigned int i = 0; i != a1; ++i)
        {
          long long v8 = a5[1];
          v24[0] = *a5;
          v24[1] = v8;
          v24[2] = a5[2];
          dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda#1},unsigned int>((uint64_t)&v27, (uint64_t)v24, i);
        }
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          for (unsigned int j = 0; j != a1; ++j)
          {
            long long v10 = a5[1];
            v22[0] = *a5;
            v22[1] = v10;
            v22[2] = a5[2];
            dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda#1},unsigned int>((uint64_t)&v27, (uint64_t)v22, j);
          }
        }
      }
      else if (a1)
      {
        for (unsigned int k = 0; k != a1; ++k)
        {
          long long v16 = a5[1];
          v23[0] = *a5;
          v23[1] = v16;
          _OWORD v23[2] = a5[2];
          dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda#1},unsigned int>((uint64_t)&v27, (uint64_t)v23, k);
        }
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          for (unsigned int m = 0; m != a1; ++m)
          {
            long long v12 = a5[1];
            v20[0] = *a5;
            v20[1] = v12;
            v20[2] = a5[2];
            dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda#1},unsigned int>((uint64_t)&v27, (uint64_t)v20, m);
          }
        }
      }
      else if (a1)
      {
        for (unsigned int n = 0; n != a1; ++n)
        {
          long long v18 = a5[1];
          v21[0] = *a5;
          v21[1] = v18;
          _OWORD v21[2] = a5[2];
          dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda#1},unsigned int>((uint64_t)&v27, (uint64_t)v21, n);
        }
      }
      break;
    case 3:
      if (a1)
      {
        for (iunsigned int i = 0; ii != a1; ++ii)
        {
          long long v14 = a5[1];
          v19[0] = *a5;
          v19[1] = v14;
          _OWORD v19[2] = a5[2];
          dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda#1},unsigned int>((uint64_t)&v27, (uint64_t)v19, ii);
        }
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v27);
  std::mutex::~mutex(&v28);
  std::exception_ptr::~exception_ptr(&v27);
}

void sub_22E8D9428(_Unwind_Exception *exception_object)
{
}

void dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda(unsigned int)#1},unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = (uint64_t *)(*(void *)(*(void *)a2 + 8) + 8 * a3);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1] - *v3;
  uint64_t v6 = *(void *)(*(void *)a2 + 24);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v5;
  if (v5)
  {
    int v9 = **(_DWORD **)(a2 + 16);
    uint64_t v10 = a3 + **(_DWORD **)(a2 + 24) * v9;
    uint64_t v11 = *(void *)(*(void *)(a2 + 8) + 40);
    long long v12 = (float *)(v6 + 8 * v4 + 4);
    while (v5)
    {
      uint64_t v13 = (v9 + **(_DWORD **)(a2 + 40) * *((_DWORD *)v12 - 1));
      uint64_t v14 = **(void **)(a2 + 32);
      float v15 = *(float *)(v14 + 8 * v13 + 4);
      if (v15 >= 0.0)
      {
        v16.i32[0] = *(_DWORD *)(v14 + 8 * v13);
        v16.f32[1] = v15 * *v12;
        *(float64x2_t *)(v11 + 16 * v10) = vaddq_f64(*(float64x2_t *)(v11 + 16 * v10), vcvtq_f64_f32(vmul_n_f32(v16, *v12)));
      }
      v12 += 2;
      --v5;
      if (!--v8) {
        return;
      }
    }
LABEL_12:
    std::terminate();
  }
}

void xgboost::linear::RandomFeatureSelector::~RandomFeatureSelector(xgboost::linear::RandomFeatureSelector *this)
{
}

uint64_t xgboost::linear::RandomFeatureSelector::NextFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
  return std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v4)
       % *(_DWORD *)(*(void *)(a3 + 152) + 4);
}

double xgboost::linear::GetBiasGradientParallel(int a1, int a2, uint64_t a3, uint64_t (***a4)(void), int a5)
{
  int v20 = a2;
  int v21 = a1;
  uint64_t v7 = *(void *)(**a4)(a4);
  v22[0] = 0;
  std::vector<double>::vector(&__p, a5, v22);
  v22[0] = 0;
  std::vector<double>::vector(&v16, a5, v22);
  v22[0] = a3;
  v22[1] = &v20;
  v22[2] = &v21;
  _OWORD v22[3] = &__p;
  v22[4] = &v16;
  xgboost::common::ParallelFor<unsigned int,xgboost::linear::GetBiasGradientParallel(int,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,int)::{lambda#1}>(v7, a5, 2, 0, (uint64_t)v22);
  uint64_t v8 = __p;
  double v9 = 0.0;
  if (__p != v19)
  {
    uint64_t v10 = (double *)__p;
    do
    {
      double v11 = *v10++;
      double v9 = v9 + v11;
    }
    while (v10 != v19);
  }
  if (v16 != v17)
  {
    double v12 = 0.0;
    uint64_t v13 = v16;
    do
    {
      double v14 = *v13++;
      double v12 = v12 + v14;
    }
    while (v13 != v17);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
    uint64_t v8 = __p;
  }
  if (v8)
  {
    int v19 = v8;
    operator delete(v8);
  }
  return v9;
}

void sub_22E8D9708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<double>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_22E8D97A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor<unsigned int,xgboost::linear::GetBiasGradientParallel(int,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,int)::{lambda(unsigned int)#1}>(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v31 = 1;
  int v32 = a2;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v33.__ptr_ = 0;
  v34.__m_.__sig = 850045863;
  memset(v34.__m_.__opaque, 0, sizeof(v34.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        for (int i = 0; i != a1; ++i)
        {
          long long v8 = *(_OWORD *)(a5 + 16);
          v29[0] = *(_OWORD *)a5;
          v29[1] = v8;
          uint64_t v30 = *(void *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_((uint64_t)&v33, (uint64_t **)v29, i);
        }
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          for (int j = 0; j != a1; ++j)
          {
            long long v10 = *(_OWORD *)(a5 + 16);
            v25[0] = *(_OWORD *)a5;
            v25[1] = v10;
            uint64_t v26 = *(void *)(a5 + 32);
            _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_((uint64_t)&v33, (uint64_t **)v25, j);
          }
        }
      }
      else if (a1)
      {
        for (int k = 0; k != a1; ++k)
        {
          long long v16 = *(_OWORD *)(a5 + 16);
          v27[0] = *(_OWORD *)a5;
          v27[1] = v16;
          uint64_t v28 = *(void *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_((uint64_t)&v33, (uint64_t **)v27, k);
        }
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          for (int m = 0; m != a1; ++m)
          {
            long long v12 = *(_OWORD *)(a5 + 16);
            v21[0] = *(_OWORD *)a5;
            v21[1] = v12;
            uint64_t v22 = *(void *)(a5 + 32);
            _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_((uint64_t)&v33, (uint64_t **)v21, m);
          }
        }
      }
      else if (a1)
      {
        for (int n = 0; n != a1; ++n)
        {
          long long v18 = *(_OWORD *)(a5 + 16);
          v23[0] = *(_OWORD *)a5;
          v23[1] = v18;
          uint64_t v24 = *(void *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_((uint64_t)&v33, (uint64_t **)v23, n);
        }
      }
      break;
    case 3:
      if (a1)
      {
        for (iint i = 0; ii != a1; ++ii)
        {
          long long v14 = *(_OWORD *)(a5 + 16);
          v19[0] = *(_OWORD *)a5;
          v19[1] = v14;
          uint64_t v20 = *(void *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_((uint64_t)&v33, (uint64_t **)v19, ii);
        }
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v33);
  std::mutex::~mutex(&v34);
  std::exception_ptr::~exception_ptr(&v33);
}

void sub_22E8D9AA4(_Unwind_Exception *exception_object)
{
}

double _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_(uint64_t a1, uint64_t **a2, int a3)
{
  uint64_t v3 = (*(_DWORD *)a2[2] + *(_DWORD *)a2[1] * a3);
  uint64_t v4 = **a2;
  LODWORD(result) = *(_DWORD *)(v4 + 8 * v3 + 4);
  if (*(float *)&result >= 0.0)
  {
    double v6 = *(float *)(v4 + 8 * v3);
    uint64_t v7 = (double **)a2[4];
    *(double *)*a2[3] = *(double *)*a2[3] + v6;
    double result = **v7 + *(float *)&result;
    double **v7 = result;
  }
  return result;
}

void xgboost::common::ParallelFor<unsigned int,xgboost::linear::UpdateBiasResidualParallel(int,int,float,std::vector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,int)::{lambda(unsigned int)#1}>(unsigned int a1, int a2, int a3, uint64_t a4, uint64_t ***a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v59.__ptr_ = 0;
  v60.__m_.__sig = 850045863;
  memset(v60.__m_.__opaque, 0, sizeof(v60.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        int v5 = *(_DWORD *)a5[1];
        unsigned int v6 = *(_DWORD *)a5[2];
        uint64_t v7 = ***a5;
        uint64_t v8 = a1;
        do
        {
          uint64_t v9 = v6;
          uint64_t v10 = v7 + 8 * v6;
          float v12 = *(float *)(v10 + 4);
          double v11 = (float *)(v10 + 4);
          float v13 = v12;
          if (v12 >= 0.0)
          {
            *(float *)(v7 + 8 * v9) = (float)(v13 * *(float *)a5[3]) + *(float *)(v7 + 8 * v9);
            float *v11 = v13 + 0.0;
          }
          unsigned int v6 = v9 + v5;
          --v8;
        }
        while (v8);
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          int v14 = *(_DWORD *)a5[1];
          unsigned int v15 = *(_DWORD *)a5[2];
          uint64_t v16 = ***a5;
          uint64_t v17 = a1;
          do
          {
            uint64_t v18 = v15;
            uint64_t v19 = v16 + 8 * v15;
            float v21 = *(float *)(v19 + 4);
            uint64_t v20 = (float *)(v19 + 4);
            float v22 = v21;
            if (v21 >= 0.0)
            {
              *(float *)(v16 + 8 * v18) = (float)(v22 * *(float *)a5[3]) + *(float *)(v16 + 8 * v18);
              float *v20 = v22 + 0.0;
            }
            unsigned int v15 = v18 + v14;
            --v17;
          }
          while (v17);
        }
      }
      else if (a1)
      {
        int v41 = *(_DWORD *)a5[1];
        unsigned int v42 = *(_DWORD *)a5[2];
        uint64_t v43 = ***a5;
        uint64_t v44 = a1;
        do
        {
          uint64_t v45 = v42;
          uint64_t v46 = v43 + 8 * v42;
          float v48 = *(float *)(v46 + 4);
          uint64_t v47 = (float *)(v46 + 4);
          float v49 = v48;
          if (v48 >= 0.0)
          {
            *(float *)(v43 + 8 * v45) = (float)(v49 * *(float *)a5[3]) + *(float *)(v43 + 8 * v45);
            float *v47 = v49 + 0.0;
          }
          unsigned int v42 = v45 + v41;
          --v44;
        }
        while (v44);
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          int v23 = *(_DWORD *)a5[1];
          unsigned int v24 = *(_DWORD *)a5[2];
          uint64_t v25 = ***a5;
          uint64_t v26 = a1;
          do
          {
            uint64_t v27 = v24;
            uint64_t v28 = v25 + 8 * v24;
            float v30 = *(float *)(v28 + 4);
            uint64_t v29 = (float *)(v28 + 4);
            float v31 = v30;
            if (v30 >= 0.0)
            {
              *(float *)(v25 + 8 * v27) = (float)(v31 * *(float *)a5[3]) + *(float *)(v25 + 8 * v27);
              *uint64_t v29 = v31 + 0.0;
            }
            unsigned int v24 = v27 + v23;
            --v26;
          }
          while (v26);
        }
      }
      else if (a1)
      {
        int v50 = *(_DWORD *)a5[1];
        unsigned int v51 = *(_DWORD *)a5[2];
        uint64_t v52 = ***a5;
        uint64_t v53 = a1;
        do
        {
          uint64_t v54 = v51;
          uint64_t v55 = v52 + 8 * v51;
          float v57 = *(float *)(v55 + 4);
          uint64_t v56 = (float *)(v55 + 4);
          float v58 = v57;
          if (v57 >= 0.0)
          {
            *(float *)(v52 + 8 * v54) = (float)(v58 * *(float *)a5[3]) + *(float *)(v52 + 8 * v54);
            *uint64_t v56 = v58 + 0.0;
          }
          unsigned int v51 = v54 + v50;
          --v53;
        }
        while (v53);
      }
      break;
    case 3:
      if (a1)
      {
        int v32 = *(_DWORD *)a5[1];
        unsigned int v33 = *(_DWORD *)a5[2];
        uint64_t v34 = ***a5;
        uint64_t v35 = a1;
        do
        {
          uint64_t v36 = v33;
          uint64_t v37 = v34 + 8 * v33;
          float v39 = *(float *)(v37 + 4);
          uint64_t v38 = (float *)(v37 + 4);
          float v40 = v39;
          if (v39 >= 0.0)
          {
            *(float *)(v34 + 8 * v36) = (float)(v40 * *(float *)a5[3]) + *(float *)(v34 + 8 * v36);
            float *v38 = v40 + 0.0;
          }
          unsigned int v33 = v36 + v32;
          --v35;
        }
        while (v35);
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v59);
  std::mutex::~mutex(&v60);
  std::exception_ptr::~exception_ptr(&v59);
}

void sub_22E8D9FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, std::exception_ptr a12)
{
}

uint64_t xgboost::metric::__dmlc_registry_file_tag_rank_metric__(xgboost::metric *this)
{
  return 0;
}

void std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::~__func()
{
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

void *std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26E245E10;
  return result;
}

{
  void *result;

  double result = operator new(0x10uLL);
  void *result = &unk_26E248B90;
  return result;
}

{
  void *result;

  double result = operator new(0x10uLL);
  void *result = &unk_26E24ADF0;
  return result;
}

{
  void *result;

  double result = operator new(0x10uLL);
  void *result = &unk_26E24E7D8;
  return result;
}

void std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::operator()()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_22E8DA298(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  MEMORY[0x230FA80D0](v1, 0x10F3C40C9E233A4);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::target_type()
{
}

{
}

{
}

{
}

void xgboost::metric::EvalAMS::~EvalAMS(void **this)
{
  *this = &unk_26E245E90;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26E245E90;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::Metric::SaveConfig(xgboost::Metric *this, xgboost::Json *a2)
{
  uint64_t v3 = (char *)(*(uint64_t (**)(xgboost::Metric *))(*(void *)this + 48))(this);
  std::string::basic_string[abi:ne180100]<0>(v5, v3);
  uint64_t v7 = &unk_26E24E210;
  uint64_t v8 = 0;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v5;
  uint64_t v10 = v6;
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v6 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E8DA514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

double xgboost::metric::EvalAMS::Eval(uint64_t a1, uint64_t **a2, void *a3, int a4)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (a4)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/rank_metric.cc");
    int v41 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
    unsigned int v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: !distributed", 26);
    uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"metric AMS do not support distributed evaluation", 48);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v51);
  }
  uint64_t v7 = (uint64_t)(*(void *)(a3[3] + 8) - *(void *)a3[3]) >> 2;
  float v48 = 0;
  float v49 = 0;
  int v50 = 0;
  if (v7)
  {
    float v48 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v50, v7);
    int v50 = (char *)v48 + 8 * v8;
    bzero(v48, 8 * v7);
    float v49 = (char *)v48 + 8 * v7;
  }
  uint64_t v9 = *a2;
  v51.__ptr_ = 0;
  v52[0].__m_.__sig = 850045863;
  memset(v52[0].__m_.__opaque, 0, sizeof(v52[0].__m_.__opaque));
  if (v7)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *v9;
    float v12 = (char *)v48 + 4;
    do
    {
      *(v12 - 1) = *(_DWORD *)(v11 + 4 * v10);
      _DWORD *v12 = v10;
      v12 += 2;
      ++v10;
    }
    while (v7 != v10);
  }
  dmlc::OMPException::Rethrow(&v51);
  std::mutex::~mutex(v52);
  std::exception_ptr::~exception_ptr(&v51);
  unint64_t v13 = 126 - 2 * __clz((v49 - (unsigned char *)v48) >> 3);
  v51.__ptr_ = xgboost::common::CmpFirst;
  if (v49 == v48) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,false>((int *)v48, (int *)v49, (uint64_t (**)(int *, int *))&v51, v14, 1);
  if ((float)(*(float *)(a1 + 40) * (float)v7)) {
    unsigned int v15 = (float)(*(float *)(a1 + 40) * (float)v7);
  }
  else {
    unsigned int v15 = v7;
  }
  int v45 = v7;
  unsigned int v44 = v15;
  if ((int)v7 - 1 >= v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = (v7 - 1);
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = (uint64_t *)a3[3];
    uint64_t v19 = *v18;
    unint64_t v20 = (v18[1] - *v18) >> 2;
    uint64_t v21 = a3[5];
    float v22 = (uint64_t *)a3[9];
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = (float *)((char *)v48 + 8);
    double v26 = 0.0;
    double v27 = 0.0;
    double v28 = 0.0;
    do
    {
      uint64_t v29 = *((unsigned int *)v25 - 1);
      if (v23 == v24) {
        float v30 = 1.0;
      }
      else {
        float v30 = *(float *)(v24 + 4 * v29);
      }
      unint64_t v31 = v21 * v29;
      if (v31 >= v20) {
        __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
      }
      float v32 = *(float *)(v19 + 4 * v31);
      double v33 = v30;
      if (v32 <= 0.5) {
        double v34 = -0.0;
      }
      else {
        double v34 = v33;
      }
      double v28 = v28 + v34;
      if (v32 > 0.5) {
        double v33 = -0.0;
      }
      double v27 = v27 + v33;
      if (*(v25 - 2) != *v25)
      {
        long double v35 = log(v28 / (v27 + 10.0) + 1.0);
        double v36 = sqrt(-(v28 - (v28 + v27 + 10.0) * v35) - (v28 - (v28 + v27 + 10.0) * v35));
        if (v26 < v36) {
          double v26 = v36;
        }
      }
      ++v17;
      v25 += 2;
    }
    while (v16 != v17);
  }
  else
  {
    double v28 = 0.0;
    double v27 = 0.0;
    double v26 = 0.0;
  }
  if (v44 == v45)
  {
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/rank_metric.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v51, (uint64_t)__p, 140, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"best-ams-ratio=", 15);
      std::ostream::operator<<();
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v51);
      if (v47 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    long double v37 = log(v28 / (v27 + 10.0) + 1.0);
    double v26 = sqrt(-(v28 - (v28 + v27 + 10.0) * v37) - (v28 - (v28 + v27 + 10.0) * v37));
  }
  if (v48)
  {
    float v49 = (char *)v48;
    operator delete(v48);
  }
  return (float)v26;
}

void sub_22E8DA968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
}

uint64_t xgboost::metric::EvalAMS::Name(xgboost::metric::EvalAMS *this)
{
  uint64_t result = (uint64_t)this + 16;
  if (*((char *)this + 39) < 0) {
    return *(void *)result;
  }
  return result;
}

BOOL xgboost::common::CmpFirst(float *a1, float *a2)
{
  return *a1 > *a2;
}

{
  return *a1 > *a2;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,false>(int *a1, int *a2, uint64_t (**a3)(int *, int *), uint64_t a4, char a5)
{
  while (2)
  {
    float v12 = a2 - 2;
    uint64_t v72 = a2;
    uint64_t v74 = a2 - 4;
    uint64_t v71 = a2 - 6;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          unint64_t v15 = ((char *)a2 - (char *)v13) >> 3;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if ((*a3)(v12, a1))
                {
                  int v32 = *a1;
                  *a1 = *(a2 - 2);
                  *(a2 - 2) = v32;
                  int v33 = a1[1];
                  a1[1] = *(a2 - 1);
                  *(a2 - 1) = v33;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, v12, a3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, a1 + 4, v12, a3);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, a1 + 4, a1 + 6, v12, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v14 <= 191)
          {
            if (a5)
            {
              if (a1 != a2)
              {
                double v34 = a1 + 2;
                if (a1 + 2 != a2)
                {
                  uint64_t v35 = 0;
                  double v36 = a1;
                  do
                  {
                    long double v37 = v36;
                    double v36 = v34;
                    if ((*a3)(v34, v37))
                    {
                      uint64_t v76 = *(void *)v36;
                      uint64_t v38 = v35;
                      while (1)
                      {
                        float v39 = (char *)a1 + v38;
                        *((_DWORD *)v39 + 2) = *(int *)((char *)a1 + v38);
                        *((_DWORD *)v39 + 3) = *(int *)((char *)a1 + v38 + 4);
                        if (!v38) {
                          break;
                        }
                        v38 -= 8;
                        if (((*a3)((int *)&v76, (int *)((char *)a1 + v38)) & 1) == 0)
                        {
                          float v40 = (int *)((char *)a1 + v38 + 8);
                          goto LABEL_74;
                        }
                      }
                      float v40 = a1;
LABEL_74:
                      *(void *)float v40 = v76;
                    }
                    double v34 = v36 + 2;
                    v35 += 8;
                  }
                  while (v36 + 2 != a2);
                }
              }
            }
            else if (a1 != a2)
            {
              std::string v66 = a1 + 2;
              if (a1 + 2 != a2)
              {
                uint64_t v67 = a1 - 2;
                do
                {
                  uint64_t v68 = a1;
                  a1 = v66;
                  if ((*a3)(v66, v68))
                  {
                    uint64_t v76 = *(void *)a1;
                    unint64_t v69 = v67;
                    do
                    {
                      v69[4] = v69[2];
                      v69[5] = v69[3];
                      char v70 = (*a3)((int *)&v76, v69);
                      v69 -= 2;
                    }
                    while ((v70 & 1) != 0);
                    *((void *)v69 + 2) = v76;
                  }
                  std::string v66 = a1 + 2;
                  v67 += 2;
                }
                while (a1 + 2 != a2);
              }
            }
            return;
          }
          if (!a4)
          {
            if (a1 != a2)
            {
              int64_t v41 = (v15 - 2) >> 1;
              int64_t v75 = v41;
              do
              {
                int64_t v42 = v41;
                if (v75 >= v41)
                {
                  uint64_t v43 = (2 * v41) | 1;
                  unsigned int v44 = &a1[2 * v43];
                  if (2 * v41 + 2 < (uint64_t)v15 && (*a3)(&a1[2 * v43], v44 + 2))
                  {
                    v44 += 2;
                    uint64_t v43 = 2 * v42 + 2;
                  }
                  int v45 = &a1[2 * v42];
                  if (((*a3)(v44, v45) & 1) == 0)
                  {
                    uint64_t v76 = *(void *)v45;
                    do
                    {
                      uint64_t v46 = v44;
                      int *v45 = *v44;
                      v45[1] = v44[1];
                      if (v75 < v43) {
                        break;
                      }
                      uint64_t v47 = (2 * v43) | 1;
                      unsigned int v44 = &a1[2 * v47];
                      uint64_t v48 = 2 * v43 + 2;
                      if (v48 < (uint64_t)v15 && (*a3)(&a1[2 * v47], v44 + 2))
                      {
                        v44 += 2;
                        uint64_t v47 = v48;
                      }
                      int v45 = v46;
                      uint64_t v43 = v47;
                    }
                    while (!(*a3)(v44, (int *)&v76));
                    *(void *)uint64_t v46 = v76;
                  }
                }
                int64_t v41 = v42 - 1;
              }
              while (v42);
              uint64_t v49 = (unint64_t)v14 >> 3;
              int v50 = v72;
              do
              {
                uint64_t v51 = 0;
                int v52 = *a1;
                int v73 = a1[1];
                uint64_t v53 = v49 - 2;
                if (v49 < 2) {
                  uint64_t v53 = v49 - 1;
                }
                uint64_t v54 = v53 >> 1;
                uint64_t v55 = a1;
                do
                {
                  uint64_t v56 = &v55[2 * v51 + 2];
                  uint64_t v57 = (2 * v51) | 1;
                  uint64_t v58 = 2 * v51 + 2;
                  if (v58 < v49 && (*a3)(&v55[2 * v51 + 2], &v55[2 * v51 + 4]))
                  {
                    v56 += 2;
                    uint64_t v57 = v58;
                  }
                  *uint64_t v55 = *v56;
                  v55[1] = v56[1];
                  uint64_t v55 = v56;
                  uint64_t v51 = v57;
                }
                while (v57 <= v54);
                std::exception_ptr v59 = v50 - 2;
                if (v56 == v50 - 2)
                {
                  *uint64_t v56 = v52;
                  v56[1] = v73;
                  uint64_t v61 = v49 - 1;
                }
                else
                {
                  *uint64_t v56 = *(v50 - 2);
                  v56[1] = *(v50 - 1);
                  *(v50 - 2) = v52;
                  *(v50 - 1) = v73;
                  uint64_t v60 = (char *)v56 - (char *)a1 + 8;
                  uint64_t v61 = v49 - 1;
                  if (v60 >= 9)
                  {
                    unint64_t v62 = (((unint64_t)v60 >> 3) - 2) >> 1;
                    uint64_t v63 = &a1[2 * v62];
                    if ((*a3)(v63, v56))
                    {
                      uint64_t v76 = *(void *)v56;
                      do
                      {
                        uint64_t v64 = v63;
                        *uint64_t v56 = *v63;
                        v56[1] = v63[1];
                        if (!v62) {
                          break;
                        }
                        unint64_t v62 = (v62 - 1) >> 1;
                        uint64_t v63 = &a1[2 * v62];
                        uint64_t v56 = v64;
                      }
                      while (((*a3)(v63, (int *)&v76) & 1) != 0);
                      *(void *)uint64_t v64 = v76;
                    }
                  }
                }
                int v50 = v59;
                BOOL v65 = v49 <= 2;
                uint64_t v49 = v61;
              }
              while (!v65);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = &a1[2 * (v15 >> 1)];
          if ((unint64_t)v14 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, &a1[2 * (v15 >> 1)], v12, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1 + 2, v17 - 2, v74, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1 + 4, &a1[2 * v16 + 2], v71, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v17 - 2, v17, &a1[2 * v16 + 2], a3);
            int v18 = *a1;
            *a1 = *v17;
            int *v17 = v18;
            int v19 = a1[1];
            a1[1] = v17[1];
            v17[1] = v19;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(&a1[2 * (v15 >> 1)], a1, v12, a3);
          }
          --a4;
          if (a5 & 1) != 0 || ((*a3)(a1 - 2, a1)) {
            break;
          }
          uint64_t v76 = *(void *)a1;
          if ((*a3)((int *)&v76, v12))
          {
            unint64_t v13 = a1;
            do
              v13 += 2;
            while (((*a3)((int *)&v76, v13) & 1) == 0);
          }
          else
          {
            double v27 = a1 + 2;
            do
            {
              unint64_t v13 = v27;
              if (v27 >= a2) {
                break;
              }
              int v28 = (*a3)((int *)&v76, v27);
              double v27 = v13 + 2;
            }
            while (!v28);
          }
          uint64_t v29 = a2;
          if (v13 < a2)
          {
            uint64_t v29 = a2;
            do
              v29 -= 2;
            while (((*a3)((int *)&v76, v29) & 1) != 0);
          }
          while (v13 < v29)
          {
            int v30 = *v13;
            *unint64_t v13 = *v29;
            *uint64_t v29 = v30;
            int v31 = v13[1];
            v13[1] = v29[1];
            v29[1] = v31;
            do
              v13 += 2;
            while (!(*a3)((int *)&v76, v13));
            do
              v29 -= 2;
            while (((*a3)((int *)&v76, v29) & 1) != 0);
          }
          BOOL v5 = v13 - 2 >= a1;
          BOOL v6 = v13 - 2 == a1;
          if (v13 - 2 != a1)
          {
            *a1 = *(v13 - 2);
            a1[1] = *(v13 - 1);
          }
          a5 = 0;
          *((void *)v13 - 1) = v76;
        }
        uint64_t v20 = 0;
        uint64_t v76 = *(void *)a1;
        do
          v20 += 2;
        while (((*a3)(&a1[v20], (int *)&v76) & 1) != 0);
        uint64_t v21 = &a1[v20];
        float v22 = v72;
        if (v20 == 2)
        {
          float v22 = v72;
          do
          {
            if (v21 >= v22) {
              break;
            }
            v22 -= 2;
          }
          while (((*a3)(v22, (int *)&v76) & 1) == 0);
        }
        else
        {
          do
            v22 -= 2;
          while (!(*a3)(v22, (int *)&v76));
        }
        unint64_t v13 = &a1[v20];
        if (v21 < v22)
        {
          uint64_t v23 = v22;
          do
          {
            int v24 = *v13;
            *unint64_t v13 = *v23;
            *uint64_t v23 = v24;
            int v25 = v13[1];
            v13[1] = v23[1];
            v23[1] = v25;
            do
              v13 += 2;
            while (((*a3)(v13, (int *)&v76) & 1) != 0);
            do
              v23 -= 2;
            while (!(*a3)(v23, (int *)&v76));
          }
          while (v13 < v23);
        }
        if (v13 - 2 != a1)
        {
          *a1 = *(v13 - 2);
          a1[1] = *(v13 - 1);
        }
        *((void *)v13 - 1) = v76;
        BOOL v5 = v21 >= v22;
        a2 = v72;
        if (v5) {
          break;
        }
LABEL_31:
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,false>(a1, v13 - 2, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, v13 - 2, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v13, v72, a3))
      {
        break;
      }
      if (!v26) {
        goto LABEL_31;
      }
    }
    a2 = v13 - 2;
    if (!v26) {
      continue;
    }
    break;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(int *a1, int *a2, int *a3, uint64_t (**a4)(int *, int *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    int v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      uint64_t v11 = a3 + 1;
      float v12 = a1 + 1;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      int v17 = a1[1];
      a1[1] = a2[1];
      a2[1] = v17;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      int v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      uint64_t v11 = a3 + 1;
      float v12 = a2 + 1;
    }
    unint64_t v15 = v11;
    goto LABEL_10;
  }
  if (result)
  {
    int v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    unint64_t v15 = a2 + 1;
    int v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      int v16 = *a1;
      *a1 = *a2;
      float v12 = a1 + 1;
      *a2 = v16;
LABEL_10:
      int v19 = *v12;
      int *v12 = *v15;
      *unint64_t v15 = v19;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(int *a1, int *a2, uint64_t (**a3)(int *, int *))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        int v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        int v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      int v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, a1 + 4, a3);
      uint64_t v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      uint64_t v17 = *(void *)v11;
      uint64_t v14 = v12;
      while (1)
      {
        unint64_t v15 = (int *)((char *)a1 + v14);
        v15[6] = *(int *)((char *)a1 + v14 + 16);
        v15[7] = *(int *)((char *)a1 + v14 + 20);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if (((*a3)((int *)&v17, v15 + 2) & 1) == 0)
        {
          int v16 = (int *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      int v16 = a1;
LABEL_12:
      *(void *)int v16 = v17;
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    int v10 = v11;
    v12 += 8;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(int *a1, int *a2, int *a3, int *a4, uint64_t (**a5)(int *, int *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    int v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    int v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    if ((*a5)(a3, a2))
    {
      int v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      int v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      if ((*a5)(a2, a1))
      {
        float result = *(float *)a1;
        *a1 = *a2;
        *(float *)a2 = result;
        int v15 = a1[1];
        a1[1] = a2[1];
        a2[1] = v15;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t (**a6)(int *, int *))
{
  float v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(int *, int *, float))*a6)(a5, a4, v12))
  {
    int v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    int v15 = a4[1];
    a4[1] = a5[1];
    a5[1] = v15;
    if ((*a6)(a4, a3))
    {
      int v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      int v17 = a3[1];
      a3[1] = a4[1];
      a4[1] = v17;
      if ((*a6)(a3, a2))
      {
        int v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        int v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        if ((*a6)(a2, a1))
        {
          float result = *(float *)a1;
          *a1 = *a2;
          *(float *)a2 = result;
          int v20 = a1[1];
          a1[1] = a2[1];
          a2[1] = v20;
        }
      }
    }
  }
  return result;
}

void std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::~__func()
{
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

void *std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E245F18;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E248C70;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E24A548;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E24AEE8;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E24E9D8;
  return result;
}

void std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::operator()()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_22E8DB8E0(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C40B92A2B82);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::target_type()
{
}

{
}

{
}

{
}

{
}

xgboost::metric::EvalRank *xgboost::metric::EvalRank::EvalRank(xgboost::metric::EvalRank *this, const char *a2, const char *a3)
{
  *((_DWORD *)this + 4) = -1;
  BOOL v5 = (char *)this + 16;
  *((void *)this + 3) = 0;
  uint64_t v6 = (char *)this + 24;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 0;
  *(void *)this = &unk_26E246038;
  *((void *)this + 7) = 0;
  if (a3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    int v8 = sscanf(a3, "%u[-]?", v5);
    size_t v9 = strlen(a2);
    if (v8 == 1)
    {
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)a2, v9);
      LOBYTE(v16) = 64;
      int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v16, 1);
      size_t v12 = strlen(a3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a3, v12);
      std::stringbuf::str();
    }
    else
    {
      int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)a2, v9);
      size_t v14 = strlen(a3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)a3, v14);
      std::stringbuf::str();
    }
    if (*((char *)this + 47) < 0) {
      operator delete(*(void **)v6);
    }
    *(_OWORD *)uint64_t v6 = v16;
    *((void *)v6 + 2) = v17;
    if (a3[strlen(a3) - 1] == 45) {
      *((unsigned char *)this + 48) = 1;
    }
    v18[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v18[1] = MEMORY[0x263F8C318] + 16;
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x230FA8020](&v20);
  }
  else
  {
    MEMORY[0x230FA7B10]((char *)this + 24, a2);
  }
  return this;
}

void sub_22E8DBBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::ostringstream::~ostringstream((uint64_t)va);
  uint64_t v9 = *(void *)(v6 + 56);
  *(void *)(v6 + 56) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (*(char *)(v6 + 47) < 0) {
    operator delete(*v7);
  }
  _Unwind_Resume(a1);
}

void xgboost::metric::EvalPrecision::~EvalPrecision(xgboost::metric::EvalPrecision *this)
{
  *(void *)this = &unk_26E246038;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E246038;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }

  JUMPOUT(0x230FA80D0);
}

double xgboost::metric::EvalRank::Eval(uint64_t *a1, uint64_t **a2, std::vector<unsigned int> *a3, uint64_t a4)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  std::string __p = (void *)(((*a2)[1] - **a2) >> 2);
  v60.__begin_ = (std::vector<unsigned int>::pointer)((uint64_t)(*((void *)a3[1].__begin_ + 1)
                                                              - *(void *)a3[1].__begin_) >> 2);
  if (__p != v60.__begin_) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  __x[0] = 0;
  std::vector<unsigned int>::vector(&v60, 2uLL, __x);
  std::vector<unsigned int>::pointer begin = v60.__begin_;
  v60.__begin_[1] = (unint64_t)((*a2)[1] - **a2) >> 2;
  uint64_t v9 = a3 + 2;
  std::vector<unsigned int>::pointer v10 = a3[2].__begin_;
  std::vector<unsigned int>::pointer end = a3[2].__end_;
  if (end == v10) {
    uint64_t v9 = &v60;
  }
  else {
    std::vector<unsigned int>::pointer begin = a3[2].__begin_;
  }
  uint64_t v57 = v9;
  if (end == v10) {
    p_std::vector<unsigned int>::pointer end = &v60.__end_;
  }
  else {
    p_std::vector<unsigned int>::pointer end = &a3[2].__end_;
  }
  std::vector<unsigned int>::pointer v13 = *p_end;
  LODWORD(v58) = 0;
  uint64_t v14 = (char *)v13 - (char *)begin;
  std::string __p = (void *)(v14 >> 2);
  if (!v14) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  int v15 = (void *)*(*p_end - 1);
  std::string __p = (void *)(((*a2)[1] - **a2) >> 2);
  if (__p != v15) {
    dmlc::LogCheckFormat<unsigned int,unsigned long>();
  }
  std::vector<unsigned int>::pointer v16 = *p_end;
  std::vector<unsigned int>::pointer v17 = v57->__begin_;
  if ((*(_DWORD *)(a1[1] + 24) & 0x80000000) != 0)
  {
    double v22 = 0.0;
  }
  else
  {
    uint64_t v18 = a1[7];
    if (v18) {
      goto LABEL_19;
    }
    char v19 = (char *)(*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
    std::string::basic_string[abi:ne180100]<0>(__x, v19);
    uint64_t GPUMetric = xgboost::GPUMetric::CreateGPUMetric((uint64_t)__x, a1[1]);
    uint64_t v21 = a1[7];
    a1[7] = GPUMetric;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    if (v65.__m_.__opaque[7] < 0) {
      operator delete(*(void **)__x);
    }
    uint64_t v18 = a1[7];
    if (v18) {
LABEL_19:
    }
      double v22 = (*(double (**)(uint64_t, uint64_t **, std::vector<unsigned int> *, uint64_t))(*(void *)v18 + 40))(v18, a2, a3, a4);
    else {
      double v22 = 0.0;
    }
    if (!a1[1])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/rank_metric.cc");
      int v24 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: tparam_", 21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
    }
  }
  *(double *)__x = 0.0;
  BOOL v26 = (rabit::engine *)std::vector<double>::vector(&v58, 1uLL, __x);
  uint64_t v56 = ((unint64_t)((char *)v16 - (char *)v17) >> 2) - 1;
  if (!a1[7] || (*(_DWORD *)(a1[1] + 24) & 0x80000000) != 0)
  {
    uint64_t v29 = a3[1].__begin_;
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    value = a3[1].__end_cap_.__value_;
    int v33 = *a2;
    *(double *)__x = 0.0;
    v65.__m_.__sig = 850045863;
    memset(v65.__m_.__opaque, 0, sizeof(v65.__m_.__opaque));
    std::string __p = 0;
    unint64_t v62 = 0;
    uint64_t v63 = 0;
    if (((unint64_t)((char *)v16 - (char *)v17) >> 2) != 1)
    {
      uint64_t v55 = a1;
      int v54 = a4;
      uint64_t v34 = 0;
      unint64_t v35 = (v30 - v31) >> 2;
      do
      {
        double v36 = (char *)__p;
        unint64_t v62 = (char *)__p;
        unint64_t v37 = v57->__begin_[v34++];
        if (v37 < v57->__begin_[v34])
        {
          do
          {
            if (v37 * (unint64_t)value >= v35) {
              __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
            }
            uint64_t v38 = *v33;
            int v39 = (int)*(float *)(v31 + 4 * v37 * (void)value);
            if (v36 >= v63)
            {
              uint64_t v40 = (v36 - (unsigned char *)__p) >> 3;
              if ((unint64_t)(v40 + 1) >> 61) {
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v41 = (v63 - (unsigned char *)__p) >> 2;
              if (v41 <= v40 + 1) {
                unint64_t v41 = v40 + 1;
              }
              if ((unint64_t)(v63 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v41;
              }
              uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v63, v42);
              int v45 = &v43[8 * v40];
              *(_DWORD *)int v45 = *(_DWORD *)(v38 + 4 * v37);
              *((_DWORD *)v45 + 1) = v39;
              uint64_t v47 = (char *)__p;
              uint64_t v46 = v62;
              uint64_t v48 = v45;
              if (v62 != __p)
              {
                do
                {
                  uint64_t v49 = *((void *)v46 - 1);
                  v46 -= 8;
                  *((void *)v48 - 1) = v49;
                  v48 -= 8;
                }
                while (v46 != v47);
                uint64_t v46 = (char *)__p;
              }
              double v36 = v45 + 8;
              std::string __p = v48;
              unint64_t v62 = v45 + 8;
              uint64_t v63 = &v43[8 * v44];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(_DWORD *)double v36 = *(_DWORD *)(v38 + 4 * v37);
              *((_DWORD *)v36 + 1) = v39;
              v36 += 8;
            }
            unint64_t v62 = v36;
            ++v37;
          }
          while (v37 < v57->__begin_[v34]);
        }
        double v50 = (*(double (**)(uint64_t *, void **))(*v55 + 56))(v55, &__p);
        *(double *)uint64_t v58 = v50 + *(double *)v58;
      }
      while (v34 != v56);
      LODWORD(a4) = v54;
      if (__p)
      {
        unint64_t v62 = (char *)__p;
        operator delete(__p);
      }
    }
    uint64_t v51 = (double *)v58;
    double v22 = 0.0;
    while (v51 != v59)
    {
      double v52 = *v51++;
      double v22 = v22 + v52;
    }
    dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
    std::mutex::~mutex(&v65);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
    if (a4) {
      goto LABEL_27;
    }
  }
  else if (a4)
  {
LABEL_27:
    *(double *)__x = v22;
    *(double *)&v65.__m_.__sig = (double)v56;
    Engine = rabit::engine::GetEngine(v26);
    (*(void (**)(void *, std::vector<unsigned int>::value_type *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, __x, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v28 = *(double *)__x / *(double *)&v65.__m_.__sig;
    goto LABEL_57;
  }
  double v28 = v22 / (double)v56;
LABEL_57:
  if (v58)
  {
    std::exception_ptr v59 = (double *)v58;
    operator delete(v58);
  }
  if (v60.__begin_)
  {
    v60.__end_ = v60.__begin_;
    operator delete(v60.__begin_);
  }
  return v28;
}

void sub_22E8DC574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  if (v15) {
    operator delete(v15);
  }
  JUMPOUT(0x22E8DC744);
}

void sub_22E8DC584(void *a1, int a2)
{
  __cxa_end_catch();
  if (v6[0].__ptr_)
  {
    v6[1] = v6[0];
    operator delete(v6[0].__ptr_);
  }
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v5);
    if (!v7.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v7, v6);
      std::exception_ptr::~exception_ptr(v6);
    }
    std::mutex::unlock(v5);
    __cxa_end_catch();
    JUMPOUT(0x22E8DC4BCLL);
  }
  JUMPOUT(0x22E8DC684);
}

void sub_22E8DC598(void *a1, int a2)
{
  __cxa_end_catch();
  if (v6[0].__ptr_)
  {
    v6[1] = v6[0];
    operator delete(v6[0].__ptr_);
  }
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v5);
    if (!v7.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v7, v6);
      std::exception_ptr::~exception_ptr(v6);
    }
    std::mutex::unlock(v5);
    __cxa_end_catch();
    JUMPOUT(0x22E8DC4BCLL);
  }
  JUMPOUT(0x22E8DC684);
}

void sub_22E8DC5B4()
{
}

void sub_22E8DC63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::mutex *a10)
{
  __cxa_end_catch();
  std::mutex::~mutex(a10);
  std::exception_ptr::~exception_ptr(&v10);
  JUMPOUT(0x22E8DC6B0);
}

void sub_22E8DC65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if ((a29 & 0x80000000) == 0)
  {
    if (v29) {
      operator delete(v29);
    }
    JUMPOUT(0x22E8DC744);
  }
  JUMPOUT(0x22E8DC6BCLL);
}

void sub_22E8DC698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24 = a24;
  a24 = 0;
  if (v24) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a24, v24);
  }
  if (v25) {
    operator delete(v25);
  }
  JUMPOUT(0x22E8DC744);
}

void sub_22E8DC6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v25 = a24;
  a24 = 0;
  if (v25) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a24, v25);
  }
  _Unwind_Resume(a1);
}

void sub_22E8DC6C4()
{
  if (v0) {
    operator delete(v0);
  }
  JUMPOUT(0x22E8DC744);
}

void sub_22E8DC6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
  uint64_t v24 = a24;
  a24 = 0;
  if (v24) {
    std::default_delete<std::string>::operator()[abi:ne180100](&a24);
  }
  JUMPOUT(0x22E8DC704);
}

void sub_22E8DC6DC(_Unwind_Exception *a1)
{
}

void sub_22E8DC6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E8DC6F0);
}

void sub_22E8DC718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E8DC724);
}

void sub_22E8DC73C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x22E8DC744);
  }
  __clang_call_terminate(a1);
}

uint64_t xgboost::metric::EvalRank::Name(xgboost::metric::EvalRank *this)
{
  uint64_t result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0) {
    return *(void *)result;
  }
  return result;
}

double xgboost::metric::EvalPrecision::EvalGroup(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (void *)a2[1];
  char v19 = xgboost::common::CmpFirst;
  if ((uint64_t)v6 - v5 < 1)
  {
    std::exception_ptr v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    std::exception_ptr v7 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((uint64_t)v6 - v5) >> 3);
    uint64_t v9 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(v5, v6, (uint64_t (**)(uint64_t *, uint64_t *))&v19, ((uint64_t)v6 - v5) >> 3, v7, v9, a3);
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[1];
  uint64_t v11 = v10 - *a2;
  if (v10 == *a2)
  {
    unsigned int v12 = 0;
    unsigned int v14 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    unsigned int v12 = 0;
    unint64_t v13 = v11 >> 3;
    unsigned int v14 = *(_DWORD *)(a1 + 16);
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    int v15 = (int *)(*a2 + 4);
    uint64_t v16 = *(unsigned int *)(a1 + 16);
    do
    {
      if (!v16) {
        break;
      }
      int v17 = *v15;
      v15 += 2;
      if (v17) {
        ++v12;
      }
      --v16;
      --v13;
    }
    while (v13);
  }
  return (double)v12 / (double)v14;
}

void sub_22E8DC86C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

double rabit::op::Reducer<rabit::op::Sum,double>(double *a1, double *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      double v4 = *a1++;
      double result = v4 + *a2;
      *a2++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

float std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t a1, void *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5, uint64_t a6, float result)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      if ((*a3)(a2 - 1, (uint64_t *)a1))
      {
        double result = *(float *)a1;
        *(_DWORD *)a1 = *((_DWORD *)a2 - 2);
        *((float *)a2 - 2) = result;
        int v10 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(a1, a2, (uint64_t (**)(void *, void))a3);
    }
    else
    {
      unint64_t v14 = a4 >> 1;
      int v15 = (uint64_t *)(a1 + 8 * (a4 >> 1));
      unint64_t v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t *)a1, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t *)(a1 + 8 * (a4 >> 1)), a2, a3, a4 - (a4 >> 1), &a5[v14]);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,std::pair<float,unsigned int>*,std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t)a5, (uint64_t)&a5[v14], (uint64_t)&a5[v14], (uint64_t)&a5[a4], (_DWORD *)a1, (uint64_t (**)(uint64_t, uint64_t))a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(a1, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(a1 + 8 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t *)a1, a1 + 8 * (a4 >> 1), (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3, a4 >> 1, a4 - (a4 >> 1), (uint64_t)a5, a6, v17);
      }
    }
  }
  return result;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t result, void *a2, uint64_t (**a3)(void *, void))
{
  if ((void *)result != a2)
  {
    v15[7] = v3;
    v15[8] = v4;
    uint64_t v6 = (void *)result;
    std::exception_ptr v7 = (void *)(result + 8);
    if ((void *)(result + 8) != a2)
    {
      uint64_t v9 = 0;
      int v10 = (void *)result;
      do
      {
        uint64_t v11 = v10;
        int v10 = v7;
        double result = (*a3)(v7, v11);
        if (result)
        {
          v15[0] = *v10;
          uint64_t v12 = v9;
          while (1)
          {
            unint64_t v13 = (char *)v6 + v12;
            *((_DWORD *)v13 + 2) = *(_DWORD *)((char *)v6 + v12);
            *((_DWORD *)v13 + 3) = *(_DWORD *)((char *)v6 + v12 + 4);
            if (!v12) {
              break;
            }
            v12 -= 8;
            double result = (*a3)(v15, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              unint64_t v14 = (void *)((char *)v6 + v12 + 8);
              goto LABEL_10;
            }
          }
          unint64_t v14 = v6;
LABEL_10:
          *unint64_t v14 = v15[0];
        }
        std::exception_ptr v7 = v10 + 1;
        v9 += 8;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    uint64_t v9 = result;
    if (a4 == 2)
    {
      int v10 = a2 - 1;
      double result = (uint64_t *)(*a3)(a2 - 1, result);
      if (result)
      {
        *a5 = *v10;
        uint64_t v11 = *v9;
      }
      else
      {
        *a5 = *v9;
        uint64_t v11 = *v10;
      }
      a5[1] = v11;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return (uint64_t *)std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>,std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t)v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(result, a2, a5, (uint64_t (**)(void, void))a3);
    }
  }
  return result;
}

float std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,std::pair<float,unsigned int>*,std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  if (a1 == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      float result = *(float *)a3;
      *a5 = *(_DWORD *)a3;
      a5[1] = *(_DWORD *)(a3 + 4);
      a3 += 8;
      a5 += 2;
    }
  }
  else
  {
    uint64_t v11 = a1;
    while (a3 != a4)
    {
      unsigned int v12 = (*a6)(a3, v11);
      if (v12) {
        uint64_t v13 = a3;
      }
      else {
        uint64_t v13 = v11;
      }
      v11 += 8 * (v12 ^ 1);
      int v14 = *(_DWORD *)(v13 + 4);
      float result = *(float *)v13;
      a3 += 8 * v12;
      *a5 = *(_DWORD *)v13;
      a5[1] = v14;
      a5 += 2;
      if (v11 == a2) {
        goto LABEL_10;
      }
    }
    if (v11 != a2)
    {
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = v11 + v16;
        uint64_t v18 = (float *)&a5[v16 / 4];
        float result = *(float *)(v11 + v16);
        float *v18 = result;
        v18[1] = *(float *)(v11 + v16 + 4);
        v16 += 8;
      }
      while (v17 + 8 != a2);
    }
  }
  return result;
}

float std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float result)
{
  uint64_t v45 = a6;
  if (a6)
  {
    uint64_t v10 = a5;
    uint64_t v11 = a4;
    uint64_t v12 = a3;
    while (1)
    {
      uint64_t v13 = v45;
      if (v10 <= a8 || v45 <= a8) {
        break;
      }
      if (!v10) {
        return result;
      }
      int v14 = 0;
      uint64_t v15 = -v10;
      while (1)
      {
        unint64_t v16 = a1;
        uint64_t v17 = (int *)&v14[(void)a1];
        uint64_t v18 = (int *)a2;
        if (((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t (**)(uint64_t, uint64_t), uint64_t, uint64_t))*v11)(a2, &v14[(void)a1], a3, a4, a5, v13))break; {
        v14 += 8;
        }
        BOOL v19 = __CFADD__(v15++, 1);
        a1 = v16;
        a2 = (uint64_t)v18;
        if (v19) {
          return result;
        }
      }
      uint64_t v20 = -v15;
      uint64_t v21 = v45;
      uint64_t v48 = v11;
      uint64_t v43 = a8;
      if (-v15 >= v45)
      {
        if (v15 == -1)
        {
          uint64_t v38 = (int *)&v14[(void)v16];
          float result = *(float *)&v14[(void)v16];
          int *v38 = *v18;
          *(float *)uint64_t v18 = result;
          int v39 = *(_DWORD *)&v14[(void)v16 + 4];
          v38[1] = v18[1];
          v18[1] = v39;
          return result;
        }
        if (v15 > 0) {
          uint64_t v20 = 1 - v15;
        }
        uint64_t v25 = v16;
        uint64_t v40 = v20 >> 1;
        BOOL v26 = (int *)((char *)&v16[v20 >> 1] + (void)v14);
        uint64_t v23 = v18;
        uint64_t v24 = v18;
        if (v18 != (int *)v12)
        {
          uint64_t v47 = *v48;
          uint64_t v42 = v12;
          unint64_t v29 = (v12 - (uint64_t)v18) >> 3;
          uint64_t v24 = v18;
          do
          {
            uint64_t v30 = &v24[2 * (v29 >> 1)];
            int v31 = v47((uint64_t)v30, (uint64_t)v26);
            if (v31) {
              v29 += ~(v29 >> 1);
            }
            else {
              v29 >>= 1;
            }
            if (v31) {
              uint64_t v24 = v30 + 2;
            }
          }
          while (v29);
          uint64_t v12 = v42;
          uint64_t v21 = v45;
          uint64_t v25 = v16;
          uint64_t v23 = v18;
        }
        uint64_t v46 = ((char *)v24 - (char *)v23) >> 3;
        uint64_t v28 = v40;
      }
      else
      {
        if (v45 >= 0) {
          uint64_t v22 = v45;
        }
        else {
          uint64_t v22 = v45 + 1;
        }
        uint64_t v23 = v18;
        uint64_t v46 = v22 >> 1;
        uint64_t v24 = &v18[2 * (v22 >> 1)];
        uint64_t v25 = v16;
        BOOL v26 = v18;
        if ((char *)((char *)v18 - (char *)v16) != v14)
        {
          uint64_t v41 = v12;
          unint64_t v27 = ((char *)v18 - (char *)v16 - (uint64_t)v14) >> 3;
          BOOL v26 = v17;
          do
          {
            if ((*v48)((uint64_t)v24, (uint64_t)&v26[2 * (v27 >> 1)]))
            {
              v27 >>= 1;
            }
            else
            {
              v26 += 2 * (v27 >> 1) + 2;
              v27 += ~(v27 >> 1);
            }
          }
          while (v27);
          uint64_t v12 = v41;
          uint64_t v21 = v45;
          uint64_t v25 = v16;
          uint64_t v23 = v18;
        }
        uint64_t v28 = ((char *)v26 - (char *)v25 - (uint64_t)v14) >> 3;
      }
      if (v26 == v23)
      {
        int v33 = v24;
      }
      else if (v24 == v23)
      {
        int v33 = v26;
      }
      else
      {
        int v32 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<float,unsigned int> *>>(v26, v23, v24);
        uint64_t v21 = v45;
        int v33 = v32;
        uint64_t v25 = v16;
      }
      uint64_t v10 = -(v28 + v15);
      uint64_t v34 = v21 - v46;
      if (v28 + v46 >= v21 - (v28 + v46) - v15)
      {
        double v36 = v24;
        uint64_t v37 = (uint64_t)v33;
        a8 = v43;
        std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(v33, v36, v12, v48, v10, v34, a7, v43);
        a2 = (uint64_t)v26;
        uint64_t v11 = v48;
        uint64_t v34 = v46;
        uint64_t v10 = v28;
        uint64_t v12 = v37;
      }
      else
      {
        unint64_t v35 = v26;
        uint64_t v17 = v33;
        uint64_t v11 = v48;
        std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(&v14[(void)v25], v35, v33, v48, v28, v46, a7, v43);
        a2 = (uint64_t)v24;
        a8 = v43;
      }
      uint64_t v45 = v34;
      a1 = (uint64_t *)v17;
      if (!v34) {
        return result;
      }
    }
    return std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(a1, a2, v12, v11, v10, v45, a7, result);
  }
  return result;
}

void *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(void *result, _DWORD *a2, void *a3, uint64_t (**a4)(void, void))
{
  if (result != (void *)a2)
  {
    uint64_t v6 = result;
    std::exception_ptr v7 = result + 1;
    *a3 = *result;
    if (result + 1 != (void *)a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = a3;
      do
      {
        uint64_t v11 = v7;
        float result = (void *)(*a4)(v7, v10);
        if (result)
        {
          v10[1] = *v10;
          uint64_t v12 = a3;
          if (v10 != a3)
          {
            uint64_t v13 = v9;
            while (1)
            {
              uint64_t v12 = (_DWORD *)((char *)a3 + v13);
              float result = (void *)(*a4)(v11, (char *)a3 + v13 - 8);
              if (!result) {
                break;
              }
              _DWORD *v12 = *(_DWORD *)((char *)a3 + v13 - 8);
              v12[1] = *(v12 - 1);
              v13 -= 8;
              if (!v13)
              {
                uint64_t v12 = a3;
                break;
              }
            }
          }
          _DWORD *v12 = *v11;
          v12[1] = *((_DWORD *)v6 + 3);
        }
        else
        {
          v10[1] = *(void *)v11;
        }
        std::exception_ptr v7 = v11 + 2;
        v9 += 8;
        ++v10;
        uint64_t v6 = v11;
      }
      while (v11 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>,std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  if ((uint64_t *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      uint64_t v13 = *a3++;
      *a5++ = v13;
    }
  }
  else
  {
    uint64_t v11 = (uint64_t *)result;
    while (a3 != a4)
    {
      float result = (*a6)(a3, v11);
      if (result) {
        uint64_t v12 = a3;
      }
      else {
        uint64_t v12 = v11;
      }
      a3 += result;
      v11 += result ^ 1;
      *a5++ = *v12;
      if (v11 == a2) {
        goto LABEL_10;
      }
    }
    if (v11 != a2)
    {
      uint64_t v14 = 0;
      do
      {
        a5[v14] = v11[v14];
        ++v14;
      }
      while (&v11[v14] != a2);
    }
  }
  return result;
}

float std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, float result)
{
  uint64_t v10 = a2;
  if (a5 <= a6)
  {
    uint64_t v18 = (void *)a7;
    if (a1 != (uint64_t *)v10)
    {
      uint64_t v18 = (void *)a7;
      BOOL v19 = a1;
      do
      {
        uint64_t v20 = *v19++;
        *v18++ = v20;
      }
      while (v19 != (uint64_t *)v10);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,std::pair<float,unsigned int>*,std::__wrap_iter<std::pair<float,unsigned int>*>,std::__wrap_iter<std::pair<float,unsigned int>*>,std::__wrap_iter<std::pair<float,unsigned int>*>>(a7, (uint64_t)v18, v10, a3, a1, a4);
  }
  else if (a2 != a3)
  {
    uint64_t v12 = 0;
    do
    {
      *(void *)(a7 + v12) = *(void *)(a2 + v12);
      v12 += 8;
    }
    while (a2 + v12 != a3);
    if (v12)
    {
      uint64_t v13 = a7 + v12;
      uint64_t v14 = (float *)(a3 - 4);
      while ((uint64_t *)v10 != a1)
      {
        char v15 = (*a4)(v13 - 8, v10 - 8);
        if (v15) {
          uint64_t v16 = v10;
        }
        else {
          uint64_t v16 = v13;
        }
        if (v15) {
          v10 -= 8;
        }
        int v17 = *(_DWORD *)(v16 - 4);
        float result = *(float *)(v16 - 8);
        if ((v15 & 1) == 0) {
          v13 -= 8;
        }
        *(v14 - 1) = result;
        *(_DWORD *)uint64_t v14 = v17;
        v14 -= 2;
        if (v13 == a7) {
          return result;
        }
      }
      unint64_t v21 = 0;
      do
      {
        uint64_t v22 = &v14[v21 / 4];
        float result = *(float *)(v13 + v21 - 8);
        *(v22 - 1) = result;
        *uint64_t v22 = *(float *)(v13 + v21 - 4);
        v21 -= 8;
      }
      while (v13 + v21 != a7);
    }
  }
  return result;
}

float std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,std::pair<float,unsigned int>*,std::__wrap_iter<std::pair<float,unsigned int>*>,std::__wrap_iter<std::pair<float,unsigned int>*>,std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v11 = a1;
    while (a3 != a4)
    {
      unsigned int v12 = (*a6)(a3, v11);
      if (v12) {
        uint64_t v13 = a3;
      }
      else {
        uint64_t v13 = v11;
      }
      a3 += 8 * v12;
      int v14 = *(_DWORD *)(v13 + 4);
      float result = *(float *)v13;
      v11 += 8 * (v12 ^ 1);
      *a5 = *(_DWORD *)v13;
      a5[1] = v14;
      a5 += 2;
      if (v11 == a2) {
        return result;
      }
    }
    unint64_t v16 = 0;
    do
    {
      int v17 = (float *)&a5[v16 / 4];
      uint64_t v18 = v11 + v16;
      float result = *(float *)(v11 + v16);
      float *v17 = result;
      v17[1] = *(float *)(v11 + v16 + 4);
      v16 += 8;
    }
    while (v18 + 8 != a2);
  }
  return result;
}

int *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<float,unsigned int> *>>(int *a1, int *a2, int *a3)
{
  int v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  int v4 = a1[1];
  a1[1] = a2[1];
  a2[1] = v4;
  float result = a1 + 2;
  for (int i = a2 + 2; i != a3; i += 2)
  {
    if (result == a2) {
      a2 = i;
    }
    int v7 = *result;
    int *result = *i;
    int *i = v7;
    int v8 = result[1];
    result[1] = i[1];
    i[1] = v8;
    result += 2;
  }
  if (result != a2)
  {
    uint64_t v9 = result;
    uint64_t v10 = a2;
    do
    {
      while (1)
      {
        int v11 = *v9;
        *uint64_t v9 = *v10;
        *uint64_t v10 = v11;
        int v12 = v9[1];
        v9[1] = v10[1];
        v10[1] = v12;
        v9 += 2;
        v10 += 2;
        if (v10 == a3) {
          break;
        }
        if (v9 == a2) {
          a2 = v10;
        }
      }
      uint64_t v10 = a2;
    }
    while (v9 != a2);
  }
  return result;
}

void std::__function::__func<xgboost::metric::$_2,std::allocator<xgboost::metric::$_2>,xgboost::Metric * ()(char const*)>::~__func()
{
}

{
  JUMPOUT(0x230FA80D0);
}

{
  JUMPOUT(0x230FA80D0);
}

void *std::__function::__func<xgboost::metric::$_2,std::allocator<xgboost::metric::$_2>,xgboost::Metric * ()(char const*)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E246098;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E248D50;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E24A640;
  return result;
}

void std::__function::__func<xgboost::metric::$_2,std::allocator<xgboost::metric::$_2>,xgboost::Metric * ()(char const*)>::operator()()
{
}

{
  operator new();
}

{
  operator new();
}

void sub_22E8DD67C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C40B92A2B82);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::metric::$_2,std::allocator<xgboost::metric::$_2>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::metric::$_2,std::allocator<xgboost::metric::$_2>,xgboost::Metric * ()(char const*)>::target_type()
{
}

{
}

{
}

void xgboost::metric::EvalNDCG::~EvalNDCG(xgboost::metric::EvalNDCG *this)
{
  *(void *)this = &unk_26E246038;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E246038;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::metric::EvalNDCG::EvalGroup(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (void *)a2[1];
  unint64_t v16 = (uint64_t (*)(uint64_t *, uint64_t *))xgboost::common::CmpFirst;
  if ((uint64_t)v6 - v5 < 1)
  {
    int v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    int v7 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((uint64_t)v6 - v5) >> 3);
    uint64_t v9 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(v5, v6, &v16, ((uint64_t)v6 - v5) >> 3, v7, v9, a3);
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = *a2;
  int v11 = (void *)a2[1];
  double v12 = xgboost::metric::EvalNDCG::CalcDCG(a1, *a2, (uint64_t)v11);
  unint64_t v16 = (uint64_t (*)(uint64_t *, uint64_t *))xgboost::common::CmpSecond;
  if ((uint64_t)v11 - v10 < 1)
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v13 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((uint64_t)v11 - v10) >> 3);
    uint64_t v15 = v14;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(v10, v11, &v16, ((uint64_t)v11 - v10) >> 3, v13, v15, *(float *)&v12);
  if (v13) {
    operator delete(v13);
  }
  xgboost::metric::EvalNDCG::CalcDCG(a1, *a2, a2[1]);
}

void sub_22E8DD95C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

double xgboost::metric::EvalNDCG::CalcDCG(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == a2) {
    return 0.0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if ((unint64_t)((a3 - a2) >> 3) <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = (a3 - a2) >> 3;
  }
  uint64_t v6 = (int *)(a2 + 4);
  double v7 = 0.0;
  do
  {
    if (v4 == v3) {
      break;
    }
    if (*v6)
    {
      int v8 = *v6;
      double v7 = v7 + (double)~(-1 << v8) / log2((double)v3 + 2.0);
    }
    ++v3;
    v6 += 2;
  }
  while (v5 != v3);
  return v7;
}

BOOL xgboost::common::CmpSecond(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 4) > *(_DWORD *)(a2 + 4);
}

void std::__function::__func<xgboost::metric::$_3,std::allocator<xgboost::metric::$_3>,xgboost::Metric * ()(char const*)>::~__func()
{
}

{
  JUMPOUT(0x230FA80D0);
}

void *std::__function::__func<xgboost::metric::$_3,std::allocator<xgboost::metric::$_3>,xgboost::Metric * ()(char const*)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_26E246180;
  return result;
}

{
  void *result;

  float result = operator new(0x10uLL);
  void *result = &unk_26E248E30;
  return result;
}

void std::__function::__func<xgboost::metric::$_3,std::allocator<xgboost::metric::$_3>,xgboost::Metric * ()(char const*)>::operator()()
{
}

{
  operator new();
}

void sub_22E8DDB00(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C40B92A2B82);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::metric::$_3,std::allocator<xgboost::metric::$_3>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::metric::$_3,std::allocator<xgboost::metric::$_3>,xgboost::Metric * ()(char const*)>::target_type()
{
}

{
}

void xgboost::metric::EvalMAP::~EvalMAP(xgboost::metric::EvalMAP *this)
{
  *(void *)this = &unk_26E246038;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E246038;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }

  JUMPOUT(0x230FA80D0);
}

double xgboost::metric::EvalMAP::EvalGroup(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (void *)a2[1];
  BOOL v19 = xgboost::common::CmpFirst;
  if ((uint64_t)v6 - v5 < 1)
  {
    double v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    double v7 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((uint64_t)v6 - v5) >> 3);
    uint64_t v9 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(v5, v6, (uint64_t (**)(uint64_t *, uint64_t *))&v19, ((uint64_t)v6 - v5) >> 3, v7, v9, a3);
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[1];
  uint64_t v11 = v10 - *a2;
  if (v10 != *a2)
  {
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unint64_t v14 = v11 >> 3;
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    uint64_t v15 = (int *)(*a2 + 4);
    double v16 = 0.0;
    do
    {
      int v17 = *v15;
      v15 += 2;
      if (v17)
      {
        ++v13;
        if (v12 < *(unsigned int *)(a1 + 16)) {
          double v16 = v16 + (double)v13 / (double)(v12 + 1);
        }
      }
      ++v12;
    }
    while (v14 != v12);
    if (v13) {
      return v16 / (double)v13;
    }
  }
  double result = 0.0;
  if (!*(unsigned char *)(a1 + 48)) {
    return 1.0;
  }
  return result;
}

void sub_22E8DDDB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<xgboost::metric::$_4,std::allocator<xgboost::metric::$_4>,xgboost::Metric * ()(char const*)>::~__func()
{
}

{
  JUMPOUT(0x230FA80D0);
}

void *std::__function::__func<xgboost::metric::$_4,std::allocator<xgboost::metric::$_4>,xgboost::Metric * ()(char const*)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26E246268;
  return result;
}

{
  void *result;

  double result = operator new(0x10uLL);
  void *result = &unk_26E248F10;
  return result;
}

void std::__function::__func<xgboost::metric::$_4,std::allocator<xgboost::metric::$_4>,xgboost::Metric * ()(char const*)>::operator()()
{
}

{
  operator new();
}

uint64_t std::__function::__func<xgboost::metric::$_4,std::allocator<xgboost::metric::$_4>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<xgboost::metric::$_4,std::allocator<xgboost::metric::$_4>,xgboost::Metric * ()(char const*)>::target_type()
{
}

{
}

void xgboost::metric::EvalCox::~EvalCox(xgboost::metric::EvalCox *this)
{
}

double xgboost::metric::EvalCox::Eval(int a1, float ***a2, xgboost::MetaInfo *this, int a4)
{
  if (a4)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/rank_metric.cc");
    uint64_t v30 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
    int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: !distributed", 26);
    int v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Cox metric does not support distributed evaluation", 50);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v33);
  }
  uint64_t v6 = (uint64_t)(*(void *)(*((void *)this + 3) + 8) - **((void **)this + 3)) >> 2;
  double v7 = xgboost::MetaInfo::LabelAbsSort(this);
  uint64_t v8 = v6;
  if (v6)
  {
    uint64_t v9 = **a2;
    double v10 = 0.0;
    uint64_t v11 = v9;
    uint64_t v12 = v6;
    do
    {
      float v13 = *v11++;
      double v10 = v10 + v13;
      --v12;
    }
    while (v12);
    unsigned int v14 = 0;
    uint64_t v15 = (uint64_t *)*((void *)this + 3);
    uint64_t v16 = *v15;
    unint64_t v17 = (v15[1] - *v15) >> 2;
    uint64_t v18 = *((void *)this + 5);
    uint64_t v19 = (v6 - 1);
    uint64_t v20 = (void *)(*(void *)v7 + 8);
    double v21 = 0.0;
    double v22 = 0.0;
    do
    {
      uint64_t v23 = *(v20 - 1);
      if (v23 * v18 >= v17) {
LABEL_18:
      }
        __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
      float v24 = *(float *)(v16 + 4 * v23 * v18);
      float v25 = v9[v23];
      if (v24 > 0.0)
      {
        double v26 = logf(v9[v23]);
        double v22 = v22 - (v26 - log(v10));
        ++v14;
      }
      double v21 = v21 + v25;
      if (!v19) {
        goto LABEL_13;
      }
      unint64_t v27 = *v20 * v18;
      if (v27 >= v17) {
        goto LABEL_18;
      }
      if (fabsf(v24) < fabsf(*(float *)(v16 + 4 * v27)))
      {
LABEL_13:
        double v10 = v10 - v21;
        double v21 = 0.0;
      }
      ++v20;
      --v19;
      --v8;
    }
    while (v8);
  }
  else
  {
    unsigned int v14 = 0;
    double v22 = 0.0;
  }
  return v22 / (double)v14;
}

void sub_22E8DE0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

const char *xgboost::metric::EvalCox::Name(xgboost::metric::EvalCox *this)
{
  return "cox-nloglik";
}

void dmlc::RowBlockIter<unsigned int,float>::Create(char *__s, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  dmlc::io::URISpec::URISpec(v9, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 >= 0) {
    double v7 = (char *)v9;
  }
  else {
    double v7 = (char *)v9[0];
  }
  dmlc::data::CreateParser_<unsigned int,float>(v7, a2, a3, a4);
  uint64_t v8 = v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v8 = v11;
  }
  if (v8) {
    operator new();
  }
  operator new();
}

void sub_22E8DEC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::~ThreadedIter(a12);
  if (*(char *)(v53 + 31) < 0) {
    operator delete(*a11);
  }
  MEMORY[0x230FA80D0](v53, 0x10F3C408E4C9560);
  if (a27 < 0) {
    operator delete(a22);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

void dmlc::RowBlockIter<unsigned long long,float>::Create(char *__s, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  dmlc::io::URISpec::URISpec(v9, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 >= 0) {
    double v7 = (char *)v9;
  }
  else {
    double v7 = (char *)v9[0];
  }
  dmlc::data::CreateParser_<unsigned long long,float>(v7, a2, a3, a4);
  uint64_t v8 = v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v8 = v11;
  }
  if (v8) {
    operator new();
  }
  operator new();
}

void sub_22E8DF900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  if (__p)
  {
    a55 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a48)
  {
    a49 = (uint64_t)a48;
    operator delete(a48);
  }
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::~ThreadedIter(a13);
  if (*(char *)(v55 + 31) < 0) {
    operator delete(*a12);
  }
  MEMORY[0x230FA80D0](v55, 0x10F3C408E4C9560);
  if (a29 < 0) {
    operator delete(a24);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a21, a22);
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void dmlc::RowBlockIter<unsigned int,int>::Create(char *__s, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  dmlc::io::URISpec::URISpec(v9, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 >= 0) {
    double v7 = (char *)v9;
  }
  else {
    double v7 = (char *)v9[0];
  }
  dmlc::data::CreateParser_<unsigned int,int>(v7, a2, a3, a4);
  uint64_t v8 = v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v8 = v11;
  }
  if (v8) {
    operator new();
  }
  operator new();
}

void sub_22E8E05EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::~ThreadedIter(a12);
  if (*(char *)(v53 + 31) < 0) {
    operator delete(*a11);
  }
  MEMORY[0x230FA80D0](v53, 0x10F3C404D6CCE2ELL);
  if (a27 < 0) {
    operator delete(a22);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

void dmlc::RowBlockIter<unsigned long long,int>::Create(char *__s, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  dmlc::io::URISpec::URISpec(v9, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 >= 0) {
    double v7 = (char *)v9;
  }
  else {
    double v7 = (char *)v9[0];
  }
  dmlc::data::CreateParser_<unsigned long long,int>(v7, a2, a3, a4);
  uint64_t v8 = v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v8 = v11;
  }
  if (v8) {
    operator new();
  }
  operator new();
}

void sub_22E8E12DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  if (__p)
  {
    a55 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a48)
  {
    a49 = (uint64_t)a48;
    operator delete(a48);
  }
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::~ThreadedIter(a13);
  if (*(char *)(v55 + 31) < 0) {
    operator delete(*a12);
  }
  MEMORY[0x230FA80D0](v55, 0x10F3C404D6CCE2ELL);
  if (a29 < 0) {
    operator delete(a24);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a21, a22);
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void dmlc::RowBlockIter<unsigned int,long long>::Create(char *__s, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  dmlc::io::URISpec::URISpec(v9, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 >= 0) {
    double v7 = (char *)v9;
  }
  else {
    double v7 = (char *)v9[0];
  }
  dmlc::data::CreateParser_<unsigned int,long long>(v7, a2, a3, a4);
  uint64_t v8 = v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v8 = v11;
  }
  if (v8) {
    operator new();
  }
  operator new();
}

void sub_22E8E1FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::~ThreadedIter(a12);
  if (*(char *)(v53 + 31) < 0) {
    operator delete(*a11);
  }
  MEMORY[0x230FA80D0](v53, 0x10F3C404D6CCE2ELL);
  if (a27 < 0) {
    operator delete(a22);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

void dmlc::RowBlockIter<unsigned long long,long long>::Create(char *__s, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  dmlc::io::URISpec::URISpec(v9, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 >= 0) {
    double v7 = (char *)v9;
  }
  else {
    double v7 = (char *)v9[0];
  }
  dmlc::data::CreateParser_<unsigned long long,long long>(v7, a2, a3, a4);
  uint64_t v8 = v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v8 = v11;
  }
  if (v8) {
    operator new();
  }
  operator new();
}

void sub_22E8E2CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  if (__p)
  {
    a55 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a48)
  {
    a49 = (uint64_t)a48;
    operator delete(a48);
  }
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::~ThreadedIter(a13);
  if (*(char *)(v55 + 31) < 0) {
    operator delete(*a12);
  }
  MEMORY[0x230FA80D0](v55, 0x10F3C404D6CCE2ELL);
  if (a29 < 0) {
    operator delete(a24);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a21, a22);
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void dmlc::data::CreateParser_<unsigned int,float>(char *a1, uint64_t a2, uint64_t a3, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&v26, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  dmlc::io::URISpec::URISpec(v22, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 4) {
      goto LABEL_9;
    }
    double v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 4) {
      goto LABEL_9;
    }
    double v7 = &v26;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) != 1869903201) {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  uint64_t v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v14 = v13;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13) {
      goto LABEL_26;
    }
LABEL_29:
    MEMORY[0x230FA7B10](&v26, "libsvm");
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v14) {
    goto LABEL_29;
  }
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  uint64_t v15 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  std::string::operator=(&v26, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_9:
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::Get();
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::Get();
  uint64_t v8 = qword_26AD712E0;
  if (!qword_26AD712E0) {
    goto LABEL_30;
  }
  uint64_t v9 = &qword_26AD712E0;
  do
  {
    BOOL v10 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD712E8, (const void **)(v8 + 32), (const void **)&v26.__r_.__value_.__l.__data_);
    uint64_t v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      uint64_t v11 = (uint64_t *)v8;
      uint64_t v9 = (uint64_t *)v8;
    }
    uint64_t v8 = *v11;
  }
  while (*v11);
  if (v9 == &qword_26AD712E0
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD712E8, (const void **)&v26.__r_.__value_.__l.__data_, (const void **)v9 + 4)|| (uint64_t v12 = v9[7]) == 0)
  {
LABEL_30:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data.cc");
    unint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown data type ", 18);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v26;
    }
    else {
      uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __break(1u);
  }
  else
  {
    (*(void (**)(void **, void **, uint64_t, uint64_t))(v12 + 72))(v22, v24, a2, a3);
    if (v25 < 0) {
      operator delete(v24[3]);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, v24[1]);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22E8E3120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  dmlc::io::URISpec::~URISpec(&a16);
  if (*(char *)(v16 - 49) < 0) {
    operator delete(*(void **)(v16 - 72));
  }
  _Unwind_Resume(a1);
}

void dmlc::data::CreateParser_<unsigned long long,float>(char *a1, uint64_t a2, uint64_t a3, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&v26, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  dmlc::io::URISpec::URISpec(v22, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 4) {
      goto LABEL_9;
    }
    double v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 4) {
      goto LABEL_9;
    }
    double v7 = &v26;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) != 1869903201) {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  uint64_t v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v14 = v13;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13) {
      goto LABEL_26;
    }
LABEL_29:
    MEMORY[0x230FA7B10](&v26, "libsvm");
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v14) {
    goto LABEL_29;
  }
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  uint64_t v15 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  std::string::operator=(&v26, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_9:
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::Get();
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::Get();
  uint64_t v8 = qword_26AD71478;
  if (!qword_26AD71478) {
    goto LABEL_30;
  }
  uint64_t v9 = &qword_26AD71478;
  do
  {
    BOOL v10 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71480, (const void **)(v8 + 32), (const void **)&v26.__r_.__value_.__l.__data_);
    uint64_t v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      uint64_t v11 = (uint64_t *)v8;
      uint64_t v9 = (uint64_t *)v8;
    }
    uint64_t v8 = *v11;
  }
  while (*v11);
  if (v9 == &qword_26AD71478
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71480, (const void **)&v26.__r_.__value_.__l.__data_, (const void **)v9 + 4)|| (uint64_t v12 = v9[7]) == 0)
  {
LABEL_30:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data.cc");
    unint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown data type ", 18);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v26;
    }
    else {
      uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __break(1u);
  }
  else
  {
    (*(void (**)(void **, void **, uint64_t, uint64_t))(v12 + 72))(v22, v24, a2, a3);
    if (v25 < 0) {
      operator delete(v24[3]);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, v24[1]);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22E8E3428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  dmlc::io::URISpec::~URISpec(&a16);
  if (*(char *)(v16 - 49) < 0) {
    operator delete(*(void **)(v16 - 72));
  }
  _Unwind_Resume(a1);
}

void dmlc::data::CreateParser_<unsigned int,int>(char *a1, uint64_t a2, uint64_t a3, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&v26, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  dmlc::io::URISpec::URISpec(v22, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 4) {
      goto LABEL_9;
    }
    double v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 4) {
      goto LABEL_9;
    }
    double v7 = &v26;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) != 1869903201) {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  uint64_t v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v14 = v13;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13) {
      goto LABEL_26;
    }
LABEL_29:
    MEMORY[0x230FA7B10](&v26, "libsvm");
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v14) {
    goto LABEL_29;
  }
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  uint64_t v15 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  std::string::operator=(&v26, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_9:
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,int>>::Get();
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,int>>::Get();
  uint64_t v8 = qword_26AD71368;
  if (!qword_26AD71368) {
    goto LABEL_30;
  }
  uint64_t v9 = &qword_26AD71368;
  do
  {
    BOOL v10 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71370, (const void **)(v8 + 32), (const void **)&v26.__r_.__value_.__l.__data_);
    uint64_t v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      uint64_t v11 = (uint64_t *)v8;
      uint64_t v9 = (uint64_t *)v8;
    }
    uint64_t v8 = *v11;
  }
  while (*v11);
  if (v9 == &qword_26AD71368
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71370, (const void **)&v26.__r_.__value_.__l.__data_, (const void **)v9 + 4)|| (uint64_t v12 = v9[7]) == 0)
  {
LABEL_30:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data.cc");
    unint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown data type ", 18);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v26;
    }
    else {
      uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __break(1u);
  }
  else
  {
    (*(void (**)(void **, void **, uint64_t, uint64_t))(v12 + 72))(v22, v24, a2, a3);
    if (v25 < 0) {
      operator delete(v24[3]);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, v24[1]);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22E8E3730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  dmlc::io::URISpec::~URISpec(&a16);
  if (*(char *)(v16 - 49) < 0) {
    operator delete(*(void **)(v16 - 72));
  }
  _Unwind_Resume(a1);
}

void dmlc::data::CreateParser_<unsigned long long,int>(char *a1, uint64_t a2, uint64_t a3, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&v26, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  dmlc::io::URISpec::URISpec(v22, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 4) {
      goto LABEL_9;
    }
    double v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 4) {
      goto LABEL_9;
    }
    double v7 = &v26;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) != 1869903201) {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  uint64_t v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v14 = v13;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13) {
      goto LABEL_26;
    }
LABEL_29:
    MEMORY[0x230FA7B10](&v26, "libsvm");
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v14) {
    goto LABEL_29;
  }
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  uint64_t v15 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  std::string::operator=(&v26, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_9:
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,int>>::Get();
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,int>>::Get();
  uint64_t v8 = qword_26AD71500;
  if (!qword_26AD71500) {
    goto LABEL_30;
  }
  uint64_t v9 = &qword_26AD71500;
  do
  {
    BOOL v10 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71508, (const void **)(v8 + 32), (const void **)&v26.__r_.__value_.__l.__data_);
    uint64_t v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      uint64_t v11 = (uint64_t *)v8;
      uint64_t v9 = (uint64_t *)v8;
    }
    uint64_t v8 = *v11;
  }
  while (*v11);
  if (v9 == &qword_26AD71500
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71508, (const void **)&v26.__r_.__value_.__l.__data_, (const void **)v9 + 4)|| (uint64_t v12 = v9[7]) == 0)
  {
LABEL_30:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data.cc");
    unint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown data type ", 18);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v26;
    }
    else {
      uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __break(1u);
  }
  else
  {
    (*(void (**)(void **, void **, uint64_t, uint64_t))(v12 + 72))(v22, v24, a2, a3);
    if (v25 < 0) {
      operator delete(v24[3]);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, v24[1]);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22E8E3A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  dmlc::io::URISpec::~URISpec(&a16);
  if (*(char *)(v16 - 49) < 0) {
    operator delete(*(void **)(v16 - 72));
  }
  _Unwind_Resume(a1);
}

void dmlc::data::CreateParser_<unsigned int,long long>(char *a1, uint64_t a2, uint64_t a3, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&v26, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  dmlc::io::URISpec::URISpec(v22, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 4) {
      goto LABEL_9;
    }
    double v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 4) {
      goto LABEL_9;
    }
    double v7 = &v26;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) != 1869903201) {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  uint64_t v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v14 = v13;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13) {
      goto LABEL_26;
    }
LABEL_29:
    MEMORY[0x230FA7B10](&v26, "libsvm");
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v14) {
    goto LABEL_29;
  }
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  uint64_t v15 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  std::string::operator=(&v26, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_9:
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,long long>>::Get();
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,long long>>::Get();
  uint64_t v8 = qword_26AD713F0;
  if (!qword_26AD713F0) {
    goto LABEL_30;
  }
  uint64_t v9 = &qword_26AD713F0;
  do
  {
    BOOL v10 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD713F8, (const void **)(v8 + 32), (const void **)&v26.__r_.__value_.__l.__data_);
    uint64_t v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      uint64_t v11 = (uint64_t *)v8;
      uint64_t v9 = (uint64_t *)v8;
    }
    uint64_t v8 = *v11;
  }
  while (*v11);
  if (v9 == &qword_26AD713F0
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD713F8, (const void **)&v26.__r_.__value_.__l.__data_, (const void **)v9 + 4)|| (uint64_t v12 = v9[7]) == 0)
  {
LABEL_30:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data.cc");
    unint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown data type ", 18);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v26;
    }
    else {
      uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __break(1u);
  }
  else
  {
    (*(void (**)(void **, void **, uint64_t, uint64_t))(v12 + 72))(v22, v24, a2, a3);
    if (v25 < 0) {
      operator delete(v24[3]);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, v24[1]);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22E8E3D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  dmlc::io::URISpec::~URISpec(&a16);
  if (*(char *)(v16 - 49) < 0) {
    operator delete(*(void **)(v16 - 72));
  }
  _Unwind_Resume(a1);
}

void dmlc::data::CreateParser_<unsigned long long,long long>(char *a1, uint64_t a2, uint64_t a3, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&v26, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  dmlc::io::URISpec::URISpec(v22, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 4) {
      goto LABEL_9;
    }
    double v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 4) {
      goto LABEL_9;
    }
    double v7 = &v26;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) != 1869903201) {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  uint64_t v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v14 = v13;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13) {
      goto LABEL_26;
    }
LABEL_29:
    MEMORY[0x230FA7B10](&v26, "libsvm");
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v14) {
    goto LABEL_29;
  }
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  uint64_t v15 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  std::string::operator=(&v26, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_9:
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,long long>>::Get();
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,long long>>::Get();
  uint64_t v8 = qword_26AD71588;
  if (!qword_26AD71588) {
    goto LABEL_30;
  }
  uint64_t v9 = &qword_26AD71588;
  do
  {
    BOOL v10 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71590, (const void **)(v8 + 32), (const void **)&v26.__r_.__value_.__l.__data_);
    uint64_t v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      uint64_t v11 = (uint64_t *)v8;
      uint64_t v9 = (uint64_t *)v8;
    }
    uint64_t v8 = *v11;
  }
  while (*v11);
  if (v9 == &qword_26AD71588
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_26AD71590, (const void **)&v26.__r_.__value_.__l.__data_, (const void **)v9 + 4)|| (uint64_t v12 = v9[7]) == 0)
  {
LABEL_30:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data.cc");
    unint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown data type ", 18);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v26;
    }
    else {
      uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __break(1u);
  }
  else
  {
    (*(void (**)(void **, void **, uint64_t, uint64_t))(v12 + 72))(v22, v24, a2, a3);
    if (v25 < 0) {
      operator delete(v24[3]);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, v24[1]);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22E8E4048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  dmlc::io::URISpec::~URISpec(&a16);
  if (*(char *)(v16 - 49) < 0) {
    operator delete(*(void **)(v16 - 72));
  }
  _Unwind_Resume(a1);
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::~Registry(uint64_t a1)
{
  unint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 103) < 0) {
          operator delete(*(void **)(v5 + 80));
        }
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x10B2C40920FD5BALL);
        unint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  double v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,int>>::~Registry(uint64_t a1)
{
  unint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 103) < 0) {
          operator delete(*(void **)(v5 + 80));
        }
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x10B2C40920FD5BALL);
        unint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  double v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,long long>>::~Registry(uint64_t a1)
{
  unint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 103) < 0) {
          operator delete(*(void **)(v5 + 80));
        }
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x10B2C40920FD5BALL);
        unint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  double v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::~Registry(uint64_t a1)
{
  unint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 103) < 0) {
          operator delete(*(void **)(v5 + 80));
        }
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x10B2C40920FD5BALL);
        unint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  double v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,int>>::~Registry(uint64_t a1)
{
  unint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 103) < 0) {
          operator delete(*(void **)(v5 + 80));
        }
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x10B2C40920FD5BALL);
        unint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  double v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,long long>>::~Registry(uint64_t a1)
{
  unint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 103) < 0) {
          operator delete(*(void **)(v5 + 80));
        }
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x10B2C40920FD5BALL);
        unint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  double v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

void dmlc::data::CreateLibSVMParser<unsigned int,float>(char *a1, uint64_t a2, const char *a3, unsigned int a4)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v4);
}

void sub_22E8E4850(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 223) < 0) {
    operator delete(*v2);
  }
  dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(v1);
  MEMORY[0x230FA80D0](v1, 0x10F3C402E84ECB5);
  _Unwind_Resume(a1);
}

void dmlc::data::CreateLibSVMParser<unsigned long long,float>(char *a1, uint64_t a2, const char *a3, unsigned int a4)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v4);
}

void sub_22E8E4AF4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 231) < 0) {
    operator delete(*v2);
  }
  dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(v1);
  MEMORY[0x230FA80D0](v1, 0x10F3C40E19BAD78);
  _Unwind_Resume(a1);
}

void dmlc::data::CreateLibFMParser<unsigned int,float>(char *a1, uint64_t a2, const char *a3, unsigned int a4)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v4);
}

void sub_22E8E4D88(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 223) < 0) {
    operator delete(*v2);
  }
  dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(v1);
  MEMORY[0x230FA80D0](v1, 0x10F3C402E84ECB5);
  _Unwind_Resume(a1);
}

void dmlc::data::CreateLibFMParser<unsigned long long,float>(char *a1, uint64_t a2, const char *a3, unsigned int a4)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v4);
}

void sub_22E8E5024(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 231) < 0) {
    operator delete(*v2);
  }
  dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(v1);
  MEMORY[0x230FA80D0](v1, 0x10F3C40E19BAD78);
  _Unwind_Resume(a1);
}

void dmlc::data::CreateCSVParser<unsigned int,float>(char *a1, uint64_t a2, const char *a3, unsigned int a4)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v4);
}

void sub_22E8E5304(_Unwind_Exception *a1)
{
  dmlc::data::CSVParserParam::~CSVParserParam(v2);
  dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(v1);
  MEMORY[0x230FA80D0](v1, 0x10F3C40CF2D762DLL);
  _Unwind_Resume(a1);
}

void dmlc::data::CreateCSVParser<unsigned long long,float>(char *a1, uint64_t a2, const char *a3, unsigned int a4)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v4);
}

void sub_22E8E55E0(_Unwind_Exception *a1)
{
  dmlc::data::CSVParserParam::~CSVParserParam(v2);
  dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(v1);
  MEMORY[0x230FA80D0](v1, 0x10F3C40478103D4);
  _Unwind_Resume(a1);
}

void dmlc::data::CreateCSVParser<unsigned int,int>(char *a1, uint64_t a2, const char *a3, unsigned int a4)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v4);
}

void sub_22E8E58B4(_Unwind_Exception *a1)
{
  dmlc::data::CSVParserParam::~CSVParserParam(v2);
  dmlc::data::TextParserBase<unsigned int,int>::~TextParserBase(v1);
  MEMORY[0x230FA80D0](v1, 0x10F3C405F535ED3);
  _Unwind_Resume(a1);
}

void dmlc::data::CreateCSVParser<unsigned long long,int>(char *a1, uint64_t a2, const char *a3, unsigned int a4)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v4);
}

void sub_22E8E5B90(_Unwind_Exception *a1)
{
  dmlc::data::CSVParserParam::~CSVParserParam(v2);
  dmlc::data::TextParserBase<unsigned long long,int>::~TextParserBase(v1);
  MEMORY[0x230FA80D0](v1, 0x10F3C40C231C275);
  _Unwind_Resume(a1);
}

void dmlc::data::CreateCSVParser<unsigned int,long long>(char *a1, uint64_t a2, const char *a3, unsigned int a4)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v4);
}

void sub_22E8E5E64(_Unwind_Exception *a1)
{
  dmlc::data::CSVParserParam::~CSVParserParam(v2);
  dmlc::data::TextParserBase<unsigned int,long long>::~TextParserBase(v1);
  MEMORY[0x230FA80D0](v1, 0x10F3C405F535ED3);
  _Unwind_Resume(a1);
}

void dmlc::data::CreateCSVParser<unsigned long long,long long>(char *a1, uint64_t a2, const char *a3, unsigned int a4)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v4);
}

void sub_22E8E6140(_Unwind_Exception *a1)
{
  dmlc::data::CSVParserParam::~CSVParserParam(v2);
  dmlc::data::TextParserBase<unsigned long long,long long>::~TextParserBase(v1);
  MEMORY[0x230FA80D0](v1, 0x10F3C40C231C275);
  _Unwind_Resume(a1);
}

void dmlc::data::CSVParserParam::~CSVParserParam(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void dmlc::io::URISpec::~URISpec(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 3), this[4]);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *dmlc::io::URISpec::URISpec(void *a1, const std::string *a2, uint64_t a3, int a4)
{
  uint64_t v5 = (std::string *)a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[4] = 0;
  a1[3] = a1 + 4;
  uint64_t v34 = (uint64_t **)(a1 + 3);
  a1[5] = 0;
  a1[6] = 0;
  uint64_t v6 = (void **)(a1 + 6);
  a1[7] = 0;
  a1[8] = 0;
  dmlc::Split(a2, 0x23u, (uint64_t *)&v47);
  uint64_t v7 = v48 - (void)v47;
  if (v48 - (void)v47 == 48)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v38);
    int v8 = SHIBYTE(v47[1].__r_.__value_.__r.__words[2]);
    if (v8 >= 0) {
      data = v47 + 1;
    }
    else {
      data = (const std::string *)v47[1].__r_.__value_.__l.__data_;
    }
    if (v8 >= 0) {
      std::string::size_type size = HIBYTE(v47[1].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47[1].__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)data, size);
    if (a4 != 1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)".split", 6);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".part", 5);
      std::ostream::operator<<();
    }
    std::stringbuf::str();
    if (SHIBYTE(v5[2].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v35;
    void v6[2] = v36[0];
    v38[0] = *(void ***)MEMORY[0x263F8C2C8];
    *(void ***)((char *)v38 + (unint64_t)*(v38[0] - 3)) = *(void ***)(MEMORY[0x263F8C2C8] + 24);
    v38[1] = (void **)(MEMORY[0x263F8C318] + 16);
    if (v39 < 0) {
      operator delete(v38[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x230FA8020](&v41);
  }
  else
  {
    v35[0] = (void *)(0xAAAAAAAAAAAAAAABLL * (v7 >> 3));
    LODWORD(v45) = 1;
    if (v7 != 24) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
  }
  dmlc::Split(v47, 0x3Fu, (uint64_t *)&v45);
  uint64_t v12 = v46 - (void)v45;
  if (v46 - (void)v45 == 48)
  {
    char v33 = v5;
    dmlc::Split(v45 + 1, 0x26u, &v43);
    uint64_t v13 = v43;
    if (v44 != v43)
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      uint64_t v16 = (void **)*MEMORY[0x263F8C2C0];
      unint64_t v17 = *(void ***)(MEMORY[0x263F8C2C0] + 24);
      do
      {
        std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)v38, (const std::string *)(v13 + v14), 8);
        *(_OWORD *)double v36 = 0u;
        long long v37 = 0u;
        *(_OWORD *)unint64_t v35 = 0u;
        uint64_t v18 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38, (uint64_t)v35, 0x3Du);
        if ((*((unsigned char *)v18 + *(void *)(*v18 - 24) + 32) & 5) != 0)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/uri_spec.h");
          uint64_t v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
          double v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: std::getline(is, kv.first, '=')", 45);
          double v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
          char v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Invalid uri argument format", 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" for key in arg ", 16);
          std::ostream::operator<<();
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)v38 + (unint64_t)*(v38[0] - 3)));
        float v24 = std::locale::use_facet(&v49, MEMORY[0x263F8C108]);
        unsigned __int8 v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
        std::locale::~locale(&v49);
        std::string v26 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38, (uint64_t)&v36[1], v25);
        if ((*((unsigned char *)v26 + *(void *)(*v26 - 24) + 32) & 5) != 0)
        {
          unint64_t v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
          dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/uri_spec.h");
          uint64_t v28 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
          unint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: std::getline(is, kv.second)", 41);
          uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
          int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Invalid uri argument format", 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" for value in arg ", 18);
          std::ostream::operator<<();
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string> &>(v34, (const void **)v35, (long long *)v35);
        if (SHIBYTE(v37) < 0) {
          operator delete(v36[1]);
        }
        if (SHIBYTE(v36[0]) < 0) {
          operator delete(v35[0]);
        }
        v38[0] = v16;
        *(void ***)((char *)v38 + (void)*(v16 - 3)) = v17;
        v38[2] = (void **)(MEMORY[0x263F8C318] + 16);
        if (v40 < 0) {
          operator delete(v38[10]);
        }
        std::streambuf::~streambuf();
        std::istream::~istream();
        MEMORY[0x230FA8020](&v42);
        ++v15;
        uint64_t v13 = v43;
        v14 += 24;
      }
      while (v15 < 0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 3));
    }
    v38[0] = (void **)&v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v38);
    uint64_t v5 = v33;
  }
  else
  {
    v35[0] = (void *)(0xAAAAAAAAAAAAAAABLL * (v12 >> 3));
    LODWORD(v43) = 1;
    if (v12 != 24) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
  }
  std::string::operator=(v5, v45);
  v38[0] = (void **)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v38);
  v38[0] = (void **)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v38);
  return v5;
}

void sub_22E8E69C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  a20 = (void **)(v22 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a20);
  a20 = (void **)(v22 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (*(char *)(v20 + 71) < 0) {
    operator delete(*v21);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a12, *(void **)(v20 + 32));
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(a1);
}

void dmlc::Split(const std::string *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  std::istringstream::basic_istringstream[abi:ne180100](v9, a1, 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  while (1)
  {
    uint64_t v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (uint64_t)&v12, a2);
    if ((*((unsigned char *)v5 + *(void *)(*v5 - 24) + 32) & 5) != 0) {
      break;
    }
    unint64_t v6 = a3[1];
    if (v6 >= a3[2])
    {
      uint64_t v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, &v12);
    }
    else
    {
      if (SHIBYTE(v13) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)v12, *((std::string::size_type *)&v12 + 1));
      }
      else
      {
        long long v7 = v12;
        *(void *)(v6 + 16) = v13;
        *(_OWORD *)unint64_t v6 = v7;
      }
      uint64_t v8 = v6 + 24;
      a3[1] = v6 + 24;
    }
    a3[1] = v8;
  }
  v9[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  unint64_t v9[2] = MEMORY[0x263F8C318] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x230FA8020](&v11);
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)v12);
  }
}

void sub_22E8E6D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  *(void *)(v11 - 56) = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 56));
  std::istringstream::~istringstream((uint64_t)&a9);
  if (*(char *)(v11 - 57) < 0) {
    operator delete(*(void **)(v11 - 80));
  }
  _Unwind_Resume(a1);
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x230FA7C40](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    long long v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      void v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_22E8E6EBC(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x22E8E6E7CLL);
  }
  __cxa_rethrow();
}

void sub_22E8E6F38(_Unwind_Exception *a1)
{
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_22E8E705C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string> &>(uint64_t **a1, const void **a2, long long *a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string,std::string> &>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void dmlc::data::DiskRowIter<unsigned int,float>::~DiskRowIter(uint64_t a1)
{
  dmlc::data::DiskRowIter<unsigned int,float>::~DiskRowIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8E7154(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C408E4C9560);
  _Unwind_Resume(a1);
}

void dmlc::data::DiskRowIter<unsigned int,float>::BeforeFirst(uint64_t a1)
{
}

uint64_t dmlc::data::DiskRowIter<unsigned int,float>::Next(_OWORD *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 7);
  uint64_t v3 = dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Next((uint64_t)(a1 + 7));
  if (v3)
  {
    unint64_t v4 = (uint64_t *)dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Value(v2);
    dmlc::data::RowBlockContainer<unsigned int,float>::GetBlock(v8, v4);
    long long v5 = v8[1];
    a1[3] = v8[0];
    a1[4] = v5;
    long long v6 = v8[3];
    a1[5] = v8[2];
    a1[6] = v6;
  }
  return v3;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,float>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,float>::NumCol(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::~ThreadedIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8E7244(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(void *)(a1 + 288))
  {
    std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      uint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      long long v5 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(v5, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      long long v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire) & 1) == 0)
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 40));
      BOOL v9 = (v8 & 1) == 0;
    }
    else
    {
      BOOL v9 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v9) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_22E8E740C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Next(uint64_t a1)
{
  if (*(void *)(a1 + 288))
  {
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire);
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((explicit & 1) == 0) {
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) == 2) {
    return 0;
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    long long v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  int v8 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v8 + 1;
  uint64_t v9 = *(void *)(a1 + 336);
  if (v9)
  {
LABEL_15:
    *(_DWORD *)(a1 + 184) = v8;
  }
  else
  {
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      uint64_t v9 = *(void *)(a1 + 336);
      if (v9)
      {
        int v8 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_15;
      }
    }
    uint64_t v9 = *(void *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v9)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
      {
        uint64_t v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
        dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        unint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
      uint64_t v3 = 0;
      goto LABEL_24;
    }
  }
  char v10 = *(void ***)(a1 + 304);
  unint64_t v11 = *(void *)(a1 + 328);
  *(void *)(a1 + 288) = (*(void **)((char *)v10 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)))[v11 & 0x1FF];
  *(void *)(a1 + 328) = ++v11;
  *(void *)(a1 + 336) = v9 - 1;
  if (v11 >= 0x400)
  {
    operator delete(*v10);
    *(void *)(a1 + 304) += 8;
    *(void *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188)) {
    BOOL v12 = (atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v12) {
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
  uint64_t v3 = 1;
LABEL_24:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v3;
}

void sub_22E8E76F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Value(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    unint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(void *)(a1 + 288);
  }
  return result;
}

void sub_22E8E77D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(uint64_t a1)
{
  v5.__ptr_ = 0;
  uint64_t v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(void *)(a1 + 392)) {
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  }
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_22E8E7868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    char v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    uint64_t v20 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    size_t v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x22E8E7838);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back();
  }
}

void std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back(void *a1, void *a2)
{
  std::exception_ptr v4 = (char *)a1[1];
  std::exception_ptr v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      uint64_t v24 = v6 >> 3;
      unsigned __int8 v25 = (char *)a1[3];
      std::string v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        uint64_t v34 = v33;
        unint64_t v35 = operator new(0x1000uLL);
        double v36 = &v32[8 * v24];
        long long v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          uint64_t v38 = 8 * v24;
          if (v6 < 1)
          {
            int v73 = v35;
            uint64_t v74 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            double v36 = &v76[8 * (v75 >> 2)];
            long long v37 = &v76[8 * v77];
            if (v32) {
              operator delete(v32);
            }
            int v32 = v76;
            unint64_t v35 = v73;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)double v36 = v35;
        int v78 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v37 - v32) >> 2;
              }
              uint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              long long v87 = v85;
              double v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v32;
              BOOL v88 = v78 == v32;
              int v78 = v36;
              if (!v88)
              {
                int v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                uint64_t v91 = v36;
                std::mutex v92 = (uint64_t *)v32;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)uint64_t v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              long long v37 = &v85[8 * v86];
              if (v32) {
                operator delete(v32);
              }
              int v32 = v87;
            }
            else
            {
              uint64_t v80 = (v37 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              double v36 = &v32[8 * (v81 >> 1)];
              int v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                int v83 = v78;
              }
              int v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v36 - 1) = v94;
          v36 -= 8;
        }
        uint64_t v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      uint64_t v28 = operator new(0x1000uLL);
      unint64_t v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v25 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          std::exception_ptr v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          uint64_t v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            uint64_t v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            std::exception_ptr v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)std::exception_ptr v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            std::exception_ptr v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        unint64_t v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            uint64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              uint64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v16 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v16) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            uint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              unint64_t v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)std::exception_ptr v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v4;
      unint64_t v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          uint64_t v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          std::exception_ptr v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            std::exception_ptr v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          double v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            std::exception_ptr v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          size_t v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            std::exception_ptr v5 = (char *)a1[1];
          }
          char v23 = &v5[8 * v19];
          std::exception_ptr v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)std::exception_ptr v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    std::exception_ptr v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = a1[4] + v8;
  }
  *(void *)(*(void *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_22E8E7E40(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1)
{
  if (*(void *)(a1 + 32) >= 0x400uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v9[4] = *MEMORY[0x263EF8340];
  atomic_store(0, (unsigned int *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  uint64_t v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v7.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 392), &v7);
  std::exception_ptr::~exception_ptr(&v7);
  std::mutex::unlock(v6);
  v7.__ptr_ = (void *)a1;
  std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::__value_func[abi:ne180100]((uint64_t)&v8, a2);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  operator new();
}

void sub_22E8E80D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::thread::~thread((std::thread *)&a9);
  MEMORY[0x230FA80D0](v12, 0xA1C40BD48D6D6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::~__value_func[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[1];
  do
  {
    uint64_t v18 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        && (*(void *)(v4 + 336) < *(void *)(v4 + 48) || *(void *)(v4 + 384)))
      {
        break;
      }
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire);
    if (explicit)
    {
      if (atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire) == 1)
      {
        uint64_t v6 = a1[9];
        if (!v6) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
        if (*(void *)(v4 + 336))
        {
          unint64_t v7 = *(void *)(v4 + 328);
          do
          {
            std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back((void *)(v4 + 344), (void *)(*(void *)(*(void *)(v4 + 304) + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)));
            uint64_t v8 = *(void *)(v4 + 336) - 1;
            unint64_t v7 = *(void *)(v4 + 328) + 1;
            *(void *)(v4 + 328) = v7;
            *(void *)(v4 + 336) = v8;
            if (v7 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(void *)(v4 + 304) += 8;
              uint64_t v8 = *(void *)(v4 + 336);
              unint64_t v7 = *(void *)(v4 + 328) - 512;
              *(void *)(v4 + 328) = v7;
            }
          }
          while (v8);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        int v9 = 2;
      }
      else
      {
        int v9 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      uint64_t v10 = *(void *)(v4 + 384);
      if (v10
        && (unint64_t v11 = *(void ***)(v4 + 352),
            unint64_t v12 = *(void *)(v4 + 376),
            uint64_t v18 = (*(void **)((char *)v11 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)))[v12 & 0x1FF],
            ++v12,
            *(void *)(v4 + 376) = v12,
            *(void *)(v4 + 384) = v10 - 1,
            v12 >= 0x400))
      {
        operator delete(*v11);
        int v9 = 0;
        *(void *)(v4 + 352) += 8;
        *(void *)(v4 + 376) -= 512;
      }
      else
      {
        int v9 = 0;
      }
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (!explicit)
    {
      uint64_t v13 = a1[5];
      uint64_t v19 = &v18;
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v13 + 48))(v13, &v19) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      uint64_t v14 = (void *)(v4 + 296);
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        || (uint64_t v14 = (void *)(v4 + 344), v18))
      {
        std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back(v14, &v18);
      }
      int v15 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v15) {
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      }
      int v9 = 0;
    }
  }
  while (v9 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_22E8E8604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12) {
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    }
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(void *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) == 1)
  {
    while (*(void *)(v17 + 336))
    {
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back(v15, (void *)(*(void *)(*(void *)(v17 + 304) + ((*(void *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(void *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_22EA18F80);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) {
         || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
  }
             int v20 = *(_DWORD *)(v17 + 184),
             std::unique_lock<std::mutex>::unlock(&a12),
             !v20))
  {
LABEL_10:
    if (a12.__owns_) {
      std::mutex::unlock(a12.__m_);
    }
    __cxa_end_catch();
    JUMPOUT(0x22E8E85C8);
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptioint n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x230FA80D0);
}

uint64_t *std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](result + 6);
    std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::~__value_func[abi:ne180100](v1 + 2);
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x230FA7DF0]();
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

void *dmlc::ScopedThread::ScopedThread(void *this, std::thread a2)
{
  *this = &unk_26E247E28;
  this[1] = a2.__t_->__sig;
  a2.__t_->__sig = 0;
  if (!this[1])
  {
    exceptioint n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No thread");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  return this;
}

void sub_22E8E89A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::thread *a10)
{
}

void dmlc::ScopedThread::~ScopedThread(std::thread *this)
{
  dmlc::ScopedThread::~ScopedThread(this);

  JUMPOUT(0x230FA80D0);
}

{
  std::thread *v1;

  this->__t_ = (std::__libcpp_thread_t)&unk_26E247E28;
  uint64_t v1 = this + 1;
  std::thread::join(this + 1);
  std::thread::~thread(v1);
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::~__func()
{
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E246428;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E246428;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::operator()(uint64_t a1, std::vector<unsigned int> ***a2)
{
  uint64_t v2 = **a2;
  if (!v2) {
    operator new();
  }
  uint64_t v3 = *(uint64_t (****)(void, std::vector<unsigned int>::size_type *, uint64_t))(a1 + 8);
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8) {
    return 0;
  }
  std::vector<unsigned int>::size_type v4 = __sz;
  std::vector<unsigned long>::resize((uint64_t)v2, __sz);
  if (__sz)
  {
    if ((**v3)(v3, (std::vector<unsigned int>::size_type *)v2->__begin_, 8 * v4) != 8 * v4) {
      return 0;
    }
  }
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<unsigned int>::size_type v5 = __sz, std::vector<float>::resize((uint64_t)&v2[1], __sz), __sz)
    && (**v3)(v3, (std::vector<unsigned int>::size_type *)v2[1].__begin_, 4 * v5) != 4 * v5)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: fi->Read(&label)", 30);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<unsigned int>::size_type v10 = __sz, std::vector<float>::resize((uint64_t)&v2[2], __sz), __sz)
    && (**v3)(v3, (std::vector<unsigned int>::size_type *)v2[2].__begin_, 4 * v10) != 4 * v10)
  {
    unint64_t v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v12 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: fi->Read(&weight)", 31);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<unsigned int>::size_type v15 = __sz, std::vector<unsigned long>::resize((uint64_t)&v2[3], __sz), __sz)
    && (**v3)(v3, (std::vector<unsigned int>::size_type *)v2[3].__begin_, 8 * v15) != 8 * v15)
  {
    BOOL v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: fi->Read(&qid)", 28);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<unsigned int>::size_type v20 = __sz, std::vector<unsigned int>::resize(v2 + 4, __sz), __sz)
    && (**v3)(v3, (std::vector<unsigned int>::size_type *)v2[4].__begin_, 4 * v20) != 4 * v20)
  {
    size_t v21 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v21, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int64_t v22 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    char v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: fi->Read(&field)", 30);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<unsigned int>::size_type v25 = __sz, std::vector<unsigned int>::resize(v2 + 5, __sz), __sz)
    && (**v3)(v3, (std::vector<unsigned int>::size_type *)v2[5].__begin_, 4 * v25) != 4 * v25)
  {
    std::string v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v27 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: fi->Read(&index)", 30);
    unint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<unsigned int>::size_type v30 = __sz, std::vector<float>::resize((uint64_t)&v2[6], __sz), __sz)
    && (**v3)(v3, (std::vector<unsigned int>::size_type *)v2[6].__begin_, 4 * v30) != 4 * v30)
  {
    unint64_t v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int v32 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: fi->Read(&value)", 30);
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v3)(v3, (std::vector<unsigned int>::size_type *)&v2[7], 4))
  {
    unint64_t v35 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v35, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    double v36 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: fi->Read(&max_field, sizeof(IndexType))", 53);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v3)(v3, (std::vector<unsigned int>::size_type *)((char *)&v2[7].__begin_ + 4), 4))
  {
    uint64_t v39 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v39, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v40 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: fi->Read(&max_index, sizeof(IndexType))", 53);
    uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  return 1;
}

void sub_22E8E92B4(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x1090C40D149B244);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E2464B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E2464B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 0);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void dmlc::data::RowBlockContainer<unsigned int,float>::Push<unsigned int>(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned int>::size_type v4 = (uint64_t *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  std::vector<float>::resize(a1 + 24, *(void *)a2 + (v5 >> 2));
  if (v4[1] == *v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v4;
  }
  memcpy((void *)(v6 + v5), *(const void **)(a2 + 16), 4 * *(void *)a2);
  unint64_t v7 = *(char **)(a2 + 24);
  if (v7) {
    std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(a1 + 48, *(void *)(a1 + 56), v7, &v7[4 * *(void *)a2], *(void *)a2);
  }
  uint64_t v8 = *(char **)(a2 + 32);
  if (v8) {
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(a1 + 72, *(void *)(a1 + 80), v8, &v8[8 * *(void *)a2], *(void *)a2);
  }
  int v9 = *(uint64_t **)(a2 + 8);
  uint64_t v10 = v9[*(void *)a2];
  uint64_t v11 = *v9;
  uint64_t v12 = v10 - *v9;
  if (*(void *)(a2 + 40))
  {
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 96), v12 + ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 2));
    uint64_t v13 = *(void *)(a1 + 104) == *(void *)(a1 + 96) ? 0 : *(void *)(a1 + 96);
    if (v10 != v11)
    {
      uint64_t v14 = (unsigned int *)(v13 + 4 * *(void *)(*(void *)(a1 + 8) - 8));
      std::vector<unsigned int>::size_type v15 = *(unsigned int **)(a2 + 40);
      uint64_t v16 = v12;
      do
      {
        unsigned int v18 = *v15++;
        unsigned int v17 = v18;
        *v14++ = v18;
        if (*(_DWORD *)(a1 + 168) > v18) {
          unsigned int v17 = *(_DWORD *)(a1 + 168);
        }
        *(_DWORD *)(a1 + 168) = v17;
        --v16;
      }
      while (v16);
    }
  }
  uint64_t v19 = v5 >> 2;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 120), v12 + ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 2));
  uint64_t v20 = *(void *)(a1 + 120);
  if (*(void *)(a1 + 128) == v20) {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(void *)(a1 + 8);
  if (v10 != v11)
  {
    int64_t v22 = (unsigned int *)(v20 + 4 * *(void *)(v21 - 8));
    char v23 = *(unsigned int **)(a2 + 48);
    uint64_t v24 = v12;
    do
    {
      unsigned int v26 = *v23++;
      unsigned int v25 = v26;
      *v22++ = v26;
      if (*(_DWORD *)(a1 + 172) > v26) {
        unsigned int v25 = *(_DWORD *)(a1 + 172);
      }
      *(_DWORD *)(a1 + 172) = v25;
      --v24;
    }
    while (v24);
  }
  if (*(void *)(a2 + 56))
  {
    std::vector<float>::resize(a1 + 144, v12 + ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2));
    uint64_t v27 = *(void *)(a1 + 144);
    uint64_t v28 = *(void *)(a1 + 152) - v27;
    if (!v28) {
      uint64_t v27 = 0;
    }
    memcpy((void *)(v27 + v28 - 4 * v12), *(const void **)(a2 + 56), 4 * v12);
    uint64_t v21 = *(void *)(a1 + 8);
  }
  uint64_t v29 = *(void *)(*(void *)a1 + 8 * v19);
  std::vector<unsigned long>::resize(a1, *(void *)a2 + ((v21 - *(void *)a1) >> 3));
  if (*(void *)(a1 + 8) == *(void *)a1) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *(void *)a1;
  }
  if (*(void *)a2)
  {
    uint64_t v31 = v30 + 8 * v19;
    int v32 = *(void **)(a2 + 8);
    unint64_t v33 = 1;
    do
      *(void *)(v31 + 8 * v33) = v32[v33] + v29 - *v32;
    while (v33++ < *(void *)a2);
  }
}

uint64_t dmlc::data::RowBlockContainer<unsigned int,float>::Save(void *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1[1] - *a1) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *a1, a1[1] - *a1);
  }
  uint64_t v5 = (uint64_t)(a1[4] - a1[3]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[3], a1[4] - a1[3]);
  }
  uint64_t v5 = (uint64_t)(a1[7] - a1[6]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[6], a1[7] - a1[6]);
  }
  uint64_t v5 = (uint64_t)(a1[10] - a1[9]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[9], a1[10] - a1[9]);
  }
  uint64_t v5 = (uint64_t)(a1[13] - a1[12]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[12], a1[13] - a1[12]);
  }
  uint64_t v5 = (uint64_t)(a1[16] - a1[15]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[15], a1[16] - a1[15]);
  }
  uint64_t v5 = (uint64_t)(a1[19] - a1[18]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[18], a1[19] - a1[18]);
  }
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 8))(a2, a1 + 21, 4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, (uint64_t)a1 + 172, 4);
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      unsigned int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v9, v17);
    }
    else {
      unsigned int v18 = 0;
    }
    uint64_t v28 = &v18[4 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    double v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)uint64_t v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    unint64_t v35 = v30;
    uint64_t v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[4 * a5];
    char v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[4 * a5];
    unsigned int v25 = &v23[-4 * a5];
    unsigned int v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      unsigned int v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)unsigned int v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  char v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_22E8E9D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

char *std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      unsigned int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v9, v17);
    }
    else {
      unsigned int v18 = 0;
    }
    uint64_t v28 = &v18[8 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    double v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    uint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)uint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    unint64_t v35 = v30;
    uint64_t v5 = std::vector<unsigned long long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[8 * a5];
    char v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[8 * a5];
    unsigned int v25 = &v23[-8 * a5];
    unsigned int v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      unsigned int v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)unsigned int v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  char v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_22E8EA06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

dmlc::LogMessage *dmlc::LogMessage::LogMessage(dmlc::LogMessage *this, const char *a2)
{
  std::vector<unsigned int>::size_type v4 = (void *)MEMORY[0x263F8C0F8];
  *(void *)this = MEMORY[0x263F8C0F8];
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"[", 1);
  uint64_t v6 = dmlc::DateLogger::HumanDate((dmlc::LogMessage *)((char *)this + 8));
  size_t v7 = strlen((const char *)v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
  size_t v10 = strlen(a2);
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)a2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)":", 1);
  int64_t v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
  return this;
}

void dmlc::LogMessage::~LogMessage(dmlc::LogMessage *this)
{
  uint64_t v1 = *(void **)this;
  char v2 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v2, 1);
}

uint64_t dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(uint64_t a1)
{
  char v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(void *)(a1 + 152) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(void *)(a1 + 128) = v3;
    operator delete(v3);
  }
  std::vector<unsigned int>::size_type v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(void *)(a1 + 80) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(void *)(a1 + 56) = v6;
    operator delete(v6);
  }
  size_t v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(void *)(a1 + 32) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::~ThreadedIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E2463C8;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_22E8EA3D4(_Unwind_Exception *a1)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::vector<unsigned int>::size_type v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Destroy(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    std::mutex::lock((std::mutex *)(a1 + 56));
    atomic_store(2u, (unsigned int *)(a1 + 24));
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    std::mutex::unlock((std::mutex *)(a1 + 56));
    uint64_t v2 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  uint64_t v3 = *(void *)(a1 + 384);
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 376);
    do
    {
      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 352) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
      if (v5)
      {
        uint64_t v6 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v5);
        MEMORY[0x230FA80D0](v6, 0x1090C40D149B244);
        unint64_t v4 = *(void *)(a1 + 376);
        uint64_t v3 = *(void *)(a1 + 384);
      }
      --v3;
      *(void *)(a1 + 376) = ++v4;
      *(void *)(a1 + 384) = v3;
      if (v4 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 352));
        *(void *)(a1 + 352) += 8;
        uint64_t v3 = *(void *)(a1 + 384);
        unint64_t v4 = *(void *)(a1 + 376) - 512;
        *(void *)(a1 + 376) = v4;
      }
    }
    while (v3);
  }
  uint64_t v7 = *(void *)(a1 + 336);
  if (v7)
  {
    unint64_t v8 = *(void *)(a1 + 328);
    do
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
      if (v9)
      {
        uint64_t v10 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v9);
        MEMORY[0x230FA80D0](v10, 0x1090C40D149B244);
        unint64_t v8 = *(void *)(a1 + 328);
        uint64_t v7 = *(void *)(a1 + 336);
      }
      --v7;
      *(void *)(a1 + 328) = ++v8;
      *(void *)(a1 + 336) = v7;
      if (v8 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 304));
        *(void *)(a1 + 304) += 8;
        uint64_t v7 = *(void *)(a1 + 336);
        unint64_t v8 = *(void *)(a1 + 328) - 512;
        *(void *)(a1 + 328) = v8;
      }
    }
    while (v7);
  }
  if (*(void *)(a1 + 8))
  {
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  uint64_t result = *(void *)(a1 + 288);
  if (result)
  {
    uint64_t v13 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(result);
    uint64_t result = MEMORY[0x230FA80D0](v13, 0x1090C40D149B244);
    *(void *)(a1 + 288) = 0;
  }
  return result;
}

uint64_t std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,float>::~DiskRowIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E246348;
  uint64_t v2 = a1 + 112;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Destroy(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::~ThreadedIter(v2);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_22E8EA778(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void dmlc::data::RowBlockContainer<unsigned int,float>::GetBlock(void *a1, uint64_t *a2)
{
  uint64_t v4 = a2[4] - a2[3];
  if (v4 && (v4 >> 2) + 1 != (a2[1] - *a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(a2[1] - 8) != (a2[16] - a2[15]) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[18];
  uint64_t v6 = a2[19];
  if (v6 != v7 && *(void *)(v5 - 8) != (v6 - v7) >> 2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: offset.back() == value.size() || value.size() == 0", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
    uint64_t v5 = a2[1];
    uint64_t v7 = a2[18];
    uint64_t v6 = a2[19];
  }
  uint64_t v11 = *a2;
  uint64_t v13 = v5 - *a2;
  BOOL v12 = v13 == 0;
  uint64_t v14 = v13 >> 3;
  if (v12) {
    uint64_t v11 = 0;
  }
  *a1 = v14 - 1;
  a1[1] = v11;
  if (a2[4] == a2[3]) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = a2[3];
  }
  if (a2[7] == a2[6]) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = a2[6];
  }
  a1[2] = v15;
  a1[3] = v16;
  if (a2[10] == a2[9]) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = a2[9];
  }
  if (a2[13] == a2[12]) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = a2[12];
  }
  a1[4] = v17;
  a1[5] = v18;
  if (a2[16] == a2[15]) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = a2[15];
  }
  if (v6 == v7) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v7;
  }
  a1[6] = v19;
  a1[7] = v20;
}

void sub_22E8EAA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void *dmlc::data::BasicRowIter<unsigned int,float>::~BasicRowIter(void *a1)
{
  *a1 = &unk_26E246538;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  return a1;
}

void dmlc::data::BasicRowIter<unsigned int,float>::~BasicRowIter(void *a1)
{
  *a1 = &unk_26E246538;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::data::BasicRowIter<unsigned int,float>::BeforeFirst(uint64_t result)
{
  *(unsigned char *)(result + 8) = 1;
  return result;
}

BOOL dmlc::data::BasicRowIter<unsigned int,float>::Next(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    *(unsigned char *)(a1 + 8) = 0;
  }
  return v1 != 0;
}

uint64_t dmlc::data::BasicRowIter<unsigned int,float>::Value(uint64_t a1)
{
  return a1 + 16;
}

uint64_t dmlc::data::BasicRowIter<unsigned int,float>::NumCol(uint64_t a1)
{
  return *(unsigned int *)(a1 + 252) + 1;
}

void dmlc::data::DiskRowIter<unsigned long long,float>::~DiskRowIter(uint64_t a1)
{
  dmlc::data::DiskRowIter<unsigned long long,float>::~DiskRowIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8EABC4(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C408E4C9560);
  _Unwind_Resume(a1);
}

void dmlc::data::DiskRowIter<unsigned long long,float>::BeforeFirst(uint64_t a1)
{
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,float>::Next(_OWORD *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 7);
  uint64_t v3 = dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Next((uint64_t)(a1 + 7));
  if (v3)
  {
    uint64_t v4 = (uint64_t *)dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Value(v2);
    dmlc::data::RowBlockContainer<unsigned long long,float>::GetBlock(v8, v4);
    long long v5 = v8[1];
    a1[3] = v8[0];
    a1[4] = v5;
    long long v6 = v8[3];
    a1[5] = v8[2];
    a1[6] = v6;
  }
  return v3;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,float>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,float>::NumCol(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::~ThreadedIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8EACB4(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(void *)(a1 + 288))
  {
    std::deque<dmlc::data::RowBlockContainer<unsigned long long,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,float> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      uint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      long long v5 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(v5, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      long long v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire) & 1) == 0)
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 40));
      BOOL v9 = (v8 & 1) == 0;
    }
    else
    {
      BOOL v9 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v9) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_22E8EAE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Next(uint64_t a1)
{
  if (*(void *)(a1 + 288))
  {
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<dmlc::data::RowBlockContainer<unsigned long long,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,float> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire);
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((explicit & 1) == 0) {
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) == 2) {
    return 0;
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    long long v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  int v8 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v8 + 1;
  uint64_t v9 = *(void *)(a1 + 336);
  if (v9)
  {
LABEL_15:
    *(_DWORD *)(a1 + 184) = v8;
  }
  else
  {
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      uint64_t v9 = *(void *)(a1 + 336);
      if (v9)
      {
        int v8 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_15;
      }
    }
    uint64_t v9 = *(void *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v9)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
      {
        uint64_t v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
        dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        uint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
      uint64_t v3 = 0;
      goto LABEL_24;
    }
  }
  char v10 = *(void ***)(a1 + 304);
  unint64_t v11 = *(void *)(a1 + 328);
  *(void *)(a1 + 288) = (*(void **)((char *)v10 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)))[v11 & 0x1FF];
  *(void *)(a1 + 328) = ++v11;
  *(void *)(a1 + 336) = v9 - 1;
  if (v11 >= 0x400)
  {
    operator delete(*v10);
    *(void *)(a1 + 304) += 8;
    *(void *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188)) {
    BOOL v12 = (atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v12) {
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
  uint64_t v3 = 1;
LABEL_24:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v3;
}

void sub_22E8EB160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Value(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(void *)(a1 + 288);
  }
  return result;
}

void sub_22E8EB244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(uint64_t a1)
{
  v5.__ptr_ = 0;
  uint64_t v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(void *)(a1 + 392)) {
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  }
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_22E8EB2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    char v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    uint64_t v20 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    size_t v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x22E8EB2A8);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<dmlc::data::RowBlockContainer<unsigned long long,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,float> *>>::push_back(void *a1, void *a2)
{
  std::exception_ptr v4 = (char *)a1[1];
  std::exception_ptr v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      uint64_t v24 = v6 >> 3;
      unsigned int v25 = (char *)a1[3];
      unsigned int v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        uint64_t v34 = v33;
        unint64_t v35 = operator new(0x1000uLL);
        double v36 = &v32[8 * v24];
        uint64_t v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          uint64_t v38 = 8 * v24;
          if (v6 < 1)
          {
            int v73 = v35;
            uint64_t v74 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            double v36 = &v76[8 * (v75 >> 2)];
            uint64_t v37 = &v76[8 * v77];
            if (v32) {
              operator delete(v32);
            }
            int v32 = v76;
            unint64_t v35 = v73;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)double v36 = v35;
        int v78 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v37 - v32) >> 2;
              }
              uint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              long long v87 = v85;
              double v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v32;
              BOOL v88 = v78 == v32;
              int v78 = v36;
              if (!v88)
              {
                int v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                uint64_t v91 = v36;
                std::mutex v92 = (uint64_t *)v32;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)uint64_t v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              uint64_t v37 = &v85[8 * v86];
              if (v32) {
                operator delete(v32);
              }
              int v32 = v87;
            }
            else
            {
              uint64_t v80 = (v37 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              double v36 = &v32[8 * (v81 >> 1)];
              int v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                int v83 = v78;
              }
              int v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v36 - 1) = v94;
          v36 -= 8;
        }
        uint64_t v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      uint64_t v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v25 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          std::exception_ptr v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          uint64_t v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            uint64_t v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            std::exception_ptr v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)std::exception_ptr v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            std::exception_ptr v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        unint64_t v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            uint64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              uint64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v16 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v16) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            uint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              unint64_t v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)std::exception_ptr v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v4;
      unint64_t v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          uint64_t v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          std::exception_ptr v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            std::exception_ptr v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          double v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            std::exception_ptr v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          size_t v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            std::exception_ptr v5 = (char *)a1[1];
          }
          char v23 = &v5[8 * v19];
          std::exception_ptr v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)std::exception_ptr v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    std::exception_ptr v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = a1[4] + v8;
  }
  *(void *)(*(void *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_22E8EB86C(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v9[4] = *MEMORY[0x263EF8340];
  atomic_store(0, (unsigned int *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  uint64_t v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v7.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 392), &v7);
  std::exception_ptr::~exception_ptr(&v7);
  std::mutex::unlock(v6);
  v7.__ptr_ = (void *)a1;
  std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::__value_func[abi:ne180100]((uint64_t)&v8, a2);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  operator new();
}

void sub_22E8EBA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::thread::~thread((std::thread *)&a9);
  MEMORY[0x230FA80D0](v12, 0xA1C40BD48D6D6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::~__value_func[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[1];
  do
  {
    uint64_t v18 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        && (*(void *)(v4 + 336) < *(void *)(v4 + 48) || *(void *)(v4 + 384)))
      {
        break;
      }
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire);
    if (explicit)
    {
      if (atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire) == 1)
      {
        uint64_t v6 = a1[9];
        if (!v6) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
        if (*(void *)(v4 + 336))
        {
          unint64_t v7 = *(void *)(v4 + 328);
          do
          {
            std::deque<dmlc::data::RowBlockContainer<unsigned long long,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,float> *>>::push_back((void *)(v4 + 344), (void *)(*(void *)(*(void *)(v4 + 304) + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)));
            uint64_t v8 = *(void *)(v4 + 336) - 1;
            unint64_t v7 = *(void *)(v4 + 328) + 1;
            *(void *)(v4 + 328) = v7;
            *(void *)(v4 + 336) = v8;
            if (v7 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(void *)(v4 + 304) += 8;
              uint64_t v8 = *(void *)(v4 + 336);
              unint64_t v7 = *(void *)(v4 + 328) - 512;
              *(void *)(v4 + 328) = v7;
            }
          }
          while (v8);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        int v9 = 2;
      }
      else
      {
        int v9 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      uint64_t v10 = *(void *)(v4 + 384);
      if (v10
        && (unint64_t v11 = *(void ***)(v4 + 352),
            unint64_t v12 = *(void *)(v4 + 376),
            uint64_t v18 = (*(void **)((char *)v11 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)))[v12 & 0x1FF],
            ++v12,
            *(void *)(v4 + 376) = v12,
            *(void *)(v4 + 384) = v10 - 1,
            v12 >= 0x400))
      {
        operator delete(*v11);
        int v9 = 0;
        *(void *)(v4 + 352) += 8;
        *(void *)(v4 + 376) -= 512;
      }
      else
      {
        int v9 = 0;
      }
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (!explicit)
    {
      uint64_t v13 = a1[5];
      uint64_t v19 = &v18;
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v13 + 48))(v13, &v19) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      uint64_t v14 = (void *)(v4 + 296);
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        || (uint64_t v14 = (void *)(v4 + 344), v18))
      {
        std::deque<dmlc::data::RowBlockContainer<unsigned long long,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,float> *>>::push_back(v14, &v18);
      }
      int v15 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v15) {
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      }
      int v9 = 0;
    }
  }
  while (v9 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_22E8EBF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12) {
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    }
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(void *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) == 1)
  {
    while (*(void *)(v17 + 336))
    {
      std::deque<dmlc::data::RowBlockContainer<unsigned long long,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,float> *>>::push_back(v15, (void *)(*(void *)(*(void *)(v17 + 304) + ((*(void *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(void *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_22EA18F80);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) {
         || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
  }
             int v20 = *(_DWORD *)(v17 + 184),
             std::unique_lock<std::mutex>::unlock(&a12),
             !v20))
  {
LABEL_10:
    if (a12.__owns_) {
      std::mutex::unlock(a12.__m_);
    }
    __cxa_end_catch();
    JUMPOUT(0x22E8EBED4);
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

uint64_t *std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](result + 6);
    std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::~__value_func[abi:ne180100](v1 + 2);
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::~__func()
{
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E246670;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E246670;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::operator()(uint64_t a1, void ***a2)
{
  uint64_t v2 = **a2;
  if (!v2) {
    operator new();
  }
  uint64_t v3 = *(uint64_t (****)(void, unint64_t *, uint64_t))(a1 + 8);
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8) {
    return 0;
  }
  unint64_t v4 = v44;
  std::vector<unsigned long>::resize((uint64_t)v2, v44);
  if (v44)
  {
    if ((**v3)(v3, (unint64_t *)*v2, 8 * v4) != 8 * v4) {
      return 0;
    }
  }
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8
    || (unint64_t v5 = v44, std::vector<float>::resize((uint64_t)(v2 + 3), v44), v44)
    && (**v3)(v3, (unint64_t *)v2[3], 4 * v5) != 4 * v5)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: fi->Read(&label)", 30);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8
    || (unint64_t v10 = v44, std::vector<float>::resize((uint64_t)(v2 + 6), v44), v44)
    && (**v3)(v3, (unint64_t *)v2[6], 4 * v10) != 4 * v10)
  {
    unint64_t v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v12 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: fi->Read(&weight)", 31);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8
    || (unint64_t v15 = v44, std::vector<unsigned long>::resize((uint64_t)(v2 + 9), v44), v44)
    && (**v3)(v3, (unint64_t *)v2[9], 8 * v15) != 8 * v15)
  {
    BOOL v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: fi->Read(&qid)", 28);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8
    || (unint64_t v20 = v44, std::vector<unsigned long>::resize((uint64_t)(v2 + 12), v44), v44)
    && (**v3)(v3, (unint64_t *)v2[12], 8 * v20) != 8 * v20)
  {
    size_t v21 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v21, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int64_t v22 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    char v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: fi->Read(&field)", 30);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8
    || (unint64_t v25 = v44, std::vector<unsigned long>::resize((uint64_t)(v2 + 15), v44), v44)
    && (**v3)(v3, (unint64_t *)v2[15], 8 * v25) != 8 * v25)
  {
    unsigned int v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v27 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: fi->Read(&index)", 30);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8
    || (unint64_t v30 = v44, std::vector<float>::resize((uint64_t)(v2 + 18), v44), v44)
    && (**v3)(v3, (unint64_t *)v2[18], 4 * v30) != 4 * v30)
  {
    unint64_t v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int v32 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: fi->Read(&value)", 30);
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  if (!(**v3)(v3, v2 + 21, 8))
  {
    unint64_t v35 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v35, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    double v36 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: fi->Read(&max_field, sizeof(IndexType))", 53);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  if (!(**v3)(v3, v2 + 22, 8))
  {
    uint64_t v39 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v39, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v40 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: fi->Read(&max_index, sizeof(IndexType))", 53);
    uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  return 1;
}

void sub_22E8EC998(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x1090C40783A93ABLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E246700;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E246700;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 0);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void dmlc::data::RowBlockContainer<unsigned long long,float>::Push<unsigned long long>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1 + 3;
  uint64_t v5 = a1[4] - a1[3];
  std::vector<float>::resize((uint64_t)(a1 + 3), *(void *)a2 + (v5 >> 2));
  if (v4[1] == *v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v4;
  }
  memcpy((void *)(v6 + v5), *(const void **)(a2 + 16), 4 * *(void *)a2);
  unint64_t v7 = *(char **)(a2 + 24);
  if (v7) {
    std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>((uint64_t)(a1 + 6), a1[7], v7, &v7[4 * *(void *)a2], *(void *)a2);
  }
  uint64_t v8 = *(char **)(a2 + 32);
  if (v8) {
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)(a1 + 9), a1[10], v8, &v8[8 * *(void *)a2], *(void *)a2);
  }
  int v9 = *(uint64_t **)(a2 + 8);
  uint64_t v10 = v9[*(void *)a2];
  uint64_t v11 = *v9;
  uint64_t v12 = v10 - *v9;
  if (*(void *)(a2 + 40))
  {
    std::vector<unsigned long>::resize((uint64_t)(a1 + 12), v12 + ((a1[13] - a1[12]) >> 3));
    uint64_t v13 = a1[13] == a1[12] ? 0 : a1[12];
    if (v10 != v11)
    {
      uint64_t v14 = (unint64_t *)(v13 + 8 * *(void *)(a1[1] - 8));
      unint64_t v15 = *(unint64_t **)(a2 + 40);
      uint64_t v16 = v12;
      do
      {
        unint64_t v18 = *v15++;
        unint64_t v17 = v18;
        *v14++ = v18;
        if (a1[21] > v18) {
          unint64_t v17 = a1[21];
        }
        a1[21] = v17;
        --v16;
      }
      while (v16);
    }
  }
  uint64_t v19 = v5 >> 2;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 15), v12 + ((a1[16] - a1[15]) >> 3));
  uint64_t v20 = a1[15];
  if (a1[16] == v20) {
    uint64_t v20 = 0;
  }
  uint64_t v21 = a1[1];
  if (v10 != v11)
  {
    int64_t v22 = (unint64_t *)(v20 + 8 * *(void *)(v21 - 8));
    char v23 = *(unint64_t **)(a2 + 48);
    uint64_t v24 = v12;
    do
    {
      unint64_t v26 = *v23++;
      unint64_t v25 = v26;
      *v22++ = v26;
      if (a1[22] > v26) {
        unint64_t v25 = a1[22];
      }
      a1[22] = v25;
      --v24;
    }
    while (v24);
  }
  if (*(void *)(a2 + 56))
  {
    std::vector<float>::resize((uint64_t)(a1 + 18), v12 + ((a1[19] - a1[18]) >> 2));
    uint64_t v27 = a1[18];
    uint64_t v28 = a1[19] - v27;
    if (!v28) {
      uint64_t v27 = 0;
    }
    memcpy((void *)(v27 + v28 - 4 * v12), *(const void **)(a2 + 56), 4 * v12);
    uint64_t v21 = a1[1];
  }
  uint64_t v29 = *(void *)(*a1 + 8 * v19);
  std::vector<unsigned long>::resize((uint64_t)a1, *(void *)a2 + ((v21 - *a1) >> 3));
  if (a1[1] == *a1) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *a1;
  }
  if (*(void *)a2)
  {
    uint64_t v31 = v30 + 8 * v19;
    int v32 = *(void **)(a2 + 8);
    unint64_t v33 = 1;
    do
      *(void *)(v31 + 8 * v33) = v32[v33] + v29 - *v32;
    while (v33++ < *(void *)a2);
  }
}

uint64_t dmlc::data::RowBlockContainer<unsigned long long,float>::Save(void *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1[1] - *a1) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *a1, a1[1] - *a1);
  }
  uint64_t v5 = (uint64_t)(a1[4] - a1[3]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[3], a1[4] - a1[3]);
  }
  uint64_t v5 = (uint64_t)(a1[7] - a1[6]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[6], a1[7] - a1[6]);
  }
  uint64_t v5 = (uint64_t)(a1[10] - a1[9]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[9], a1[10] - a1[9]);
  }
  uint64_t v5 = (uint64_t)(a1[13] - a1[12]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[12], a1[13] - a1[12]);
  }
  uint64_t v5 = (uint64_t)(a1[16] - a1[15]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[15], a1[16] - a1[15]);
  }
  uint64_t v5 = (uint64_t)(a1[19] - a1[18]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[18], a1[19] - a1[18]);
  }
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 8))(a2, a1 + 21, 8);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 8))(a2, a1 + 22, 8);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::~ThreadedIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E246610;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_22E8ED2D4(_Unwind_Exception *a1)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Destroy(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    std::mutex::lock((std::mutex *)(a1 + 56));
    atomic_store(2u, (unsigned int *)(a1 + 24));
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    std::mutex::unlock((std::mutex *)(a1 + 56));
    uint64_t v2 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  uint64_t v3 = *(void *)(a1 + 384);
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 376);
    do
    {
      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 352) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
      if (v5)
      {
        uint64_t v6 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v5);
        MEMORY[0x230FA80D0](v6, 0x1090C40783A93ABLL);
        unint64_t v4 = *(void *)(a1 + 376);
        uint64_t v3 = *(void *)(a1 + 384);
      }
      --v3;
      *(void *)(a1 + 376) = ++v4;
      *(void *)(a1 + 384) = v3;
      if (v4 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 352));
        *(void *)(a1 + 352) += 8;
        uint64_t v3 = *(void *)(a1 + 384);
        unint64_t v4 = *(void *)(a1 + 376) - 512;
        *(void *)(a1 + 376) = v4;
      }
    }
    while (v3);
  }
  uint64_t v7 = *(void *)(a1 + 336);
  if (v7)
  {
    unint64_t v8 = *(void *)(a1 + 328);
    do
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
      if (v9)
      {
        uint64_t v10 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v9);
        MEMORY[0x230FA80D0](v10, 0x1090C40783A93ABLL);
        unint64_t v8 = *(void *)(a1 + 328);
        uint64_t v7 = *(void *)(a1 + 336);
      }
      --v7;
      *(void *)(a1 + 328) = ++v8;
      *(void *)(a1 + 336) = v7;
      if (v8 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 304));
        *(void *)(a1 + 304) += 8;
        uint64_t v7 = *(void *)(a1 + 336);
        unint64_t v8 = *(void *)(a1 + 328) - 512;
        *(void *)(a1 + 328) = v8;
      }
    }
    while (v7);
  }
  if (*(void *)(a1 + 8))
  {
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  uint64_t result = *(void *)(a1 + 288);
  if (result)
  {
    uint64_t v13 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(result);
    uint64_t result = MEMORY[0x230FA80D0](v13, 0x1090C40783A93ABLL);
    *(void *)(a1 + 288) = 0;
  }
  return result;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,float>::~DiskRowIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E246590;
  uint64_t v2 = a1 + 112;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Destroy(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::~ThreadedIter(v2);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_22E8ED5B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void dmlc::data::RowBlockContainer<unsigned long long,float>::GetBlock(void *a1, uint64_t *a2)
{
  uint64_t v4 = a2[4] - a2[3];
  if (v4 && (v4 >> 2) + 1 != (a2[1] - *a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(a2[1] - 8) != (a2[16] - a2[15]) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[18];
  uint64_t v6 = a2[19];
  if (v6 != v7 && *(void *)(v5 - 8) != (v6 - v7) >> 2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: offset.back() == value.size() || value.size() == 0", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
    uint64_t v5 = a2[1];
    uint64_t v7 = a2[18];
    uint64_t v6 = a2[19];
  }
  uint64_t v11 = *a2;
  uint64_t v13 = v5 - *a2;
  BOOL v12 = v13 == 0;
  uint64_t v14 = v13 >> 3;
  if (v12) {
    uint64_t v11 = 0;
  }
  *a1 = v14 - 1;
  a1[1] = v11;
  if (a2[4] == a2[3]) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = a2[3];
  }
  if (a2[7] == a2[6]) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = a2[6];
  }
  a1[2] = v15;
  a1[3] = v16;
  if (a2[10] == a2[9]) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = a2[9];
  }
  if (a2[13] == a2[12]) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = a2[12];
  }
  a1[4] = v17;
  a1[5] = v18;
  if (a2[16] == a2[15]) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = a2[15];
  }
  if (v6 == v7) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v7;
  }
  a1[6] = v19;
  a1[7] = v20;
}

void sub_22E8ED874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void *dmlc::data::BasicRowIter<unsigned long long,float>::~BasicRowIter(void *a1)
{
  *a1 = &unk_26E246780;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  return a1;
}

void dmlc::data::BasicRowIter<unsigned long long,float>::~BasicRowIter(void *a1)
{
  *a1 = &unk_26E246780;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,float>::BeforeFirst(uint64_t result)
{
  *(unsigned char *)(result + 8) = 1;
  return result;
}

BOOL dmlc::data::BasicRowIter<unsigned long long,float>::Next(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    *(unsigned char *)(a1 + 8) = 0;
  }
  return v1 != 0;
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,float>::Value(uint64_t a1)
{
  return a1 + 16;
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,float>::NumCol(uint64_t a1)
{
  return *(void *)(a1 + 256) + 1;
}

void dmlc::data::DiskRowIter<unsigned int,int>::~DiskRowIter(uint64_t a1)
{
  dmlc::data::DiskRowIter<unsigned int,int>::~DiskRowIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8ED9FC(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C404D6CCE2ELL);
  _Unwind_Resume(a1);
}

void dmlc::data::DiskRowIter<unsigned int,int>::BeforeFirst(uint64_t a1)
{
}

uint64_t dmlc::data::DiskRowIter<unsigned int,int>::Next(_OWORD *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 7);
  uint64_t v3 = dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Next((uint64_t)(a1 + 7));
  if (v3)
  {
    uint64_t v4 = (uint64_t *)dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Value(v2);
    dmlc::data::RowBlockContainer<unsigned int,int>::GetBlock(v8, v4);
    long long v5 = v8[1];
    a1[3] = v8[0];
    a1[4] = v5;
    long long v6 = v8[3];
    a1[5] = v8[2];
    a1[6] = v6;
  }
  return v3;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,int>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,int>::NumCol(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::~ThreadedIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8EDAEC(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(void *)(a1 + 288))
  {
    std::deque<dmlc::data::RowBlockContainer<unsigned int,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,int> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      uint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      long long v5 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(v5, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      long long v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire) & 1) == 0)
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 40));
      BOOL v9 = (v8 & 1) == 0;
    }
    else
    {
      BOOL v9 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v9) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_22E8EDCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Next(uint64_t a1)
{
  if (*(void *)(a1 + 288))
  {
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<dmlc::data::RowBlockContainer<unsigned int,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,int> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire);
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((explicit & 1) == 0) {
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) == 2) {
    return 0;
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    long long v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  int v8 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v8 + 1;
  uint64_t v9 = *(void *)(a1 + 336);
  if (v9)
  {
LABEL_15:
    *(_DWORD *)(a1 + 184) = v8;
  }
  else
  {
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      uint64_t v9 = *(void *)(a1 + 336);
      if (v9)
      {
        int v8 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_15;
      }
    }
    uint64_t v9 = *(void *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v9)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
      {
        uint64_t v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
        dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        uint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
      uint64_t v3 = 0;
      goto LABEL_24;
    }
  }
  char v10 = *(void ***)(a1 + 304);
  unint64_t v11 = *(void *)(a1 + 328);
  *(void *)(a1 + 288) = (*(void **)((char *)v10 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)))[v11 & 0x1FF];
  *(void *)(a1 + 328) = ++v11;
  *(void *)(a1 + 336) = v9 - 1;
  if (v11 >= 0x400)
  {
    operator delete(*v10);
    *(void *)(a1 + 304) += 8;
    *(void *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188)) {
    BOOL v12 = (atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v12) {
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
  uint64_t v3 = 1;
LABEL_24:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v3;
}

void sub_22E8EDF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Value(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(void *)(a1 + 288);
  }
  return result;
}

void sub_22E8EE07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(uint64_t a1)
{
  v5.__ptr_ = 0;
  uint64_t v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(void *)(a1 + 392)) {
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  }
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_22E8EE110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    char v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    uint64_t v20 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    size_t v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x22E8EE0E0);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<dmlc::data::RowBlockContainer<unsigned int,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,int> *>>::push_back(void *a1, void *a2)
{
  std::exception_ptr v4 = (char *)a1[1];
  std::exception_ptr v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      uint64_t v24 = v6 >> 3;
      unint64_t v25 = (char *)a1[3];
      unint64_t v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        uint64_t v34 = v33;
        unint64_t v35 = operator new(0x1000uLL);
        double v36 = &v32[8 * v24];
        uint64_t v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          uint64_t v38 = 8 * v24;
          if (v6 < 1)
          {
            int v73 = v35;
            uint64_t v74 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            double v36 = &v76[8 * (v75 >> 2)];
            uint64_t v37 = &v76[8 * v77];
            if (v32) {
              operator delete(v32);
            }
            int v32 = v76;
            unint64_t v35 = v73;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)double v36 = v35;
        int v78 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v37 - v32) >> 2;
              }
              uint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              long long v87 = v85;
              double v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v32;
              BOOL v88 = v78 == v32;
              int v78 = v36;
              if (!v88)
              {
                int v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                uint64_t v91 = v36;
                std::mutex v92 = (uint64_t *)v32;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)uint64_t v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              uint64_t v37 = &v85[8 * v86];
              if (v32) {
                operator delete(v32);
              }
              int v32 = v87;
            }
            else
            {
              uint64_t v80 = (v37 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              double v36 = &v32[8 * (v81 >> 1)];
              int v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                int v83 = v78;
              }
              int v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v36 - 1) = v94;
          v36 -= 8;
        }
        uint64_t v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      uint64_t v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v25 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          std::exception_ptr v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          uint64_t v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            uint64_t v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            std::exception_ptr v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)std::exception_ptr v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            std::exception_ptr v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        unint64_t v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            uint64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              uint64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v16 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v16) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            uint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              unint64_t v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)std::exception_ptr v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v4;
      unint64_t v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          unint64_t v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          std::exception_ptr v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            std::exception_ptr v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          double v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            std::exception_ptr v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          size_t v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            std::exception_ptr v5 = (char *)a1[1];
          }
          char v23 = &v5[8 * v19];
          std::exception_ptr v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)std::exception_ptr v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    std::exception_ptr v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = a1[4] + v8;
  }
  *(void *)(*(void *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_22E8EE6A4(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v9[4] = *MEMORY[0x263EF8340];
  atomic_store(0, (unsigned int *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  uint64_t v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v7.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 392), &v7);
  std::exception_ptr::~exception_ptr(&v7);
  std::mutex::unlock(v6);
  v7.__ptr_ = (void *)a1;
  std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::__value_func[abi:ne180100]((uint64_t)&v8, a2);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  operator new();
}

void sub_22E8EE8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::thread::~thread((std::thread *)&a9);
  MEMORY[0x230FA80D0](v12, 0xA1C40BD48D6D6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::~__value_func[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[1];
  do
  {
    uint64_t v18 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        && (*(void *)(v4 + 336) < *(void *)(v4 + 48) || *(void *)(v4 + 384)))
      {
        break;
      }
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire);
    if (explicit)
    {
      if (atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire) == 1)
      {
        uint64_t v6 = a1[9];
        if (!v6) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
        if (*(void *)(v4 + 336))
        {
          unint64_t v7 = *(void *)(v4 + 328);
          do
          {
            std::deque<dmlc::data::RowBlockContainer<unsigned int,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,int> *>>::push_back((void *)(v4 + 344), (void *)(*(void *)(*(void *)(v4 + 304) + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)));
            uint64_t v8 = *(void *)(v4 + 336) - 1;
            unint64_t v7 = *(void *)(v4 + 328) + 1;
            *(void *)(v4 + 328) = v7;
            *(void *)(v4 + 336) = v8;
            if (v7 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(void *)(v4 + 304) += 8;
              uint64_t v8 = *(void *)(v4 + 336);
              unint64_t v7 = *(void *)(v4 + 328) - 512;
              *(void *)(v4 + 328) = v7;
            }
          }
          while (v8);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        int v9 = 2;
      }
      else
      {
        int v9 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      uint64_t v10 = *(void *)(v4 + 384);
      if (v10
        && (unint64_t v11 = *(void ***)(v4 + 352),
            unint64_t v12 = *(void *)(v4 + 376),
            uint64_t v18 = (*(void **)((char *)v11 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)))[v12 & 0x1FF],
            ++v12,
            *(void *)(v4 + 376) = v12,
            *(void *)(v4 + 384) = v10 - 1,
            v12 >= 0x400))
      {
        operator delete(*v11);
        int v9 = 0;
        *(void *)(v4 + 352) += 8;
        *(void *)(v4 + 376) -= 512;
      }
      else
      {
        int v9 = 0;
      }
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (!explicit)
    {
      uint64_t v13 = a1[5];
      uint64_t v19 = &v18;
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v13 + 48))(v13, &v19) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      uint64_t v14 = (void *)(v4 + 296);
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        || (uint64_t v14 = (void *)(v4 + 344), v18))
      {
        std::deque<dmlc::data::RowBlockContainer<unsigned int,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,int> *>>::push_back(v14, &v18);
      }
      int v15 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v15) {
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      }
      int v9 = 0;
    }
  }
  while (v9 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_22E8EED48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12) {
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    }
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(void *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) == 1)
  {
    while (*(void *)(v17 + 336))
    {
      std::deque<dmlc::data::RowBlockContainer<unsigned int,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,int> *>>::push_back(v15, (void *)(*(void *)(*(void *)(v17 + 304) + ((*(void *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(void *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_22EA18F80);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) {
         || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
  }
             int v20 = *(_DWORD *)(v17 + 184),
             std::unique_lock<std::mutex>::unlock(&a12),
             !v20))
  {
LABEL_10:
    if (a12.__owns_) {
      std::mutex::unlock(a12.__m_);
    }
    __cxa_end_catch();
    JUMPOUT(0x22E8EED0CLL);
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

uint64_t *std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](result + 6);
    std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::~__value_func[abi:ne180100](v1 + 2);
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::~__func()
{
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E2468B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E2468B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = **a2;
  if (!v2) {
    operator new();
  }
  uint64_t v3 = *(uint64_t (****)(void, std::vector<int>::size_type *, uint64_t))(a1 + 8);
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8) {
    return 0;
  }
  std::vector<int>::size_type v4 = __sz;
  std::vector<unsigned long>::resize(v2, __sz);
  if (__sz)
  {
    if ((**v3)(v3, *(std::vector<int>::size_type **)v2, 8 * v4) != 8 * v4) {
      return 0;
    }
  }
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<int>::size_type v5 = __sz, std::vector<int>::resize((std::vector<int> *)(v2 + 24), __sz), __sz)
    && (**v3)(v3, *(std::vector<int>::size_type **)(v2 + 24), 4 * v5) != 4 * v5)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: fi->Read(&label)", 30);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<int>::size_type v10 = __sz, std::vector<float>::resize(v2 + 48, __sz), __sz)
    && (**v3)(v3, *(std::vector<int>::size_type **)(v2 + 48), 4 * v10) != 4 * v10)
  {
    unint64_t v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v12 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: fi->Read(&weight)", 31);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<int>::size_type v15 = __sz, std::vector<unsigned long>::resize(v2 + 72, __sz), __sz)
    && (**v3)(v3, *(std::vector<int>::size_type **)(v2 + 72), 8 * v15) != 8 * v15)
  {
    BOOL v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: fi->Read(&qid)", 28);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<int>::size_type v20 = __sz, std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v2 + 96), __sz), __sz)
    && (**v3)(v3, *(std::vector<int>::size_type **)(v2 + 96), 4 * v20) != 4 * v20)
  {
    size_t v21 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v21, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int64_t v22 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    char v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: fi->Read(&field)", 30);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<int>::size_type v25 = __sz, std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v2 + 120), __sz), __sz)
    && (**v3)(v3, *(std::vector<int>::size_type **)(v2 + 120), 4 * v25) != 4 * v25)
  {
    unint64_t v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v27 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: fi->Read(&index)", 30);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<int>::size_type v30 = __sz, std::vector<int>::resize((std::vector<int> *)(v2 + 144), __sz), __sz)
    && (**v3)(v3, *(std::vector<int>::size_type **)(v2 + 144), 4 * v30) != 4 * v30)
  {
    unint64_t v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int v32 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: fi->Read(&value)", 30);
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v3)(v3, (std::vector<int>::size_type *)(v2 + 168), 4))
  {
    unint64_t v35 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v35, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    double v36 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: fi->Read(&max_field, sizeof(IndexType))", 53);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v3)(v3, (std::vector<int>::size_type *)(v2 + 172), 4))
  {
    uint64_t v39 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v39, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v40 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: fi->Read(&max_index, sizeof(IndexType))", 53);
    uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  return 1;
}

void sub_22E8EF7D0(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x1090C4087115870);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E246948;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E246948;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 0);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void dmlc::data::RowBlockContainer<unsigned int,int>::Push<unsigned int>(uint64_t a1, uint64_t a2)
{
  std::vector<int>::size_type v4 = (uint64_t *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  std::vector<int>::resize((std::vector<int> *)(a1 + 24), *(void *)a2 + (v5 >> 2));
  if (v4[1] == *v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v4;
  }
  memcpy((void *)(v6 + v5), *(const void **)(a2 + 16), 4 * *(void *)a2);
  unint64_t v7 = *(char **)(a2 + 24);
  if (v7) {
    std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(a1 + 48, *(void *)(a1 + 56), v7, &v7[4 * *(void *)a2], *(void *)a2);
  }
  uint64_t v8 = *(char **)(a2 + 32);
  if (v8) {
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(a1 + 72, *(void *)(a1 + 80), v8, &v8[8 * *(void *)a2], *(void *)a2);
  }
  int v9 = *(uint64_t **)(a2 + 8);
  uint64_t v10 = v9[*(void *)a2];
  uint64_t v11 = *v9;
  uint64_t v12 = v10 - *v9;
  if (*(void *)(a2 + 40))
  {
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 96), v12 + ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 2));
    uint64_t v13 = *(void *)(a1 + 104) == *(void *)(a1 + 96) ? 0 : *(void *)(a1 + 96);
    if (v10 != v11)
    {
      uint64_t v14 = (unsigned int *)(v13 + 4 * *(void *)(*(void *)(a1 + 8) - 8));
      std::vector<int>::size_type v15 = *(unsigned int **)(a2 + 40);
      uint64_t v16 = v12;
      do
      {
        unsigned int v18 = *v15++;
        unsigned int v17 = v18;
        *v14++ = v18;
        if (*(_DWORD *)(a1 + 168) > v18) {
          unsigned int v17 = *(_DWORD *)(a1 + 168);
        }
        *(_DWORD *)(a1 + 168) = v17;
        --v16;
      }
      while (v16);
    }
  }
  uint64_t v19 = v5 >> 2;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 120), v12 + ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 2));
  uint64_t v20 = *(void *)(a1 + 120);
  if (*(void *)(a1 + 128) == v20) {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(void *)(a1 + 8);
  if (v10 != v11)
  {
    int64_t v22 = (unsigned int *)(v20 + 4 * *(void *)(v21 - 8));
    char v23 = *(unsigned int **)(a2 + 48);
    uint64_t v24 = v12;
    do
    {
      unsigned int v26 = *v23++;
      unsigned int v25 = v26;
      *v22++ = v26;
      if (*(_DWORD *)(a1 + 172) > v26) {
        unsigned int v25 = *(_DWORD *)(a1 + 172);
      }
      *(_DWORD *)(a1 + 172) = v25;
      --v24;
    }
    while (v24);
  }
  if (*(void *)(a2 + 56))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 144), v12 + ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2));
    uint64_t v27 = *(void *)(a1 + 144);
    uint64_t v28 = *(void *)(a1 + 152) - v27;
    if (!v28) {
      uint64_t v27 = 0;
    }
    memcpy((void *)(v27 + v28 - 4 * v12), *(const void **)(a2 + 56), 4 * v12);
    uint64_t v21 = *(void *)(a1 + 8);
  }
  uint64_t v29 = *(void *)(*(void *)a1 + 8 * v19);
  std::vector<unsigned long>::resize(a1, *(void *)a2 + ((v21 - *(void *)a1) >> 3));
  if (*(void *)(a1 + 8) == *(void *)a1) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *(void *)a1;
  }
  if (*(void *)a2)
  {
    uint64_t v31 = v30 + 8 * v19;
    int v32 = *(void **)(a2 + 8);
    unint64_t v33 = 1;
    do
      *(void *)(v31 + 8 * v33) = v32[v33] + v29 - *v32;
    while (v33++ < *(void *)a2);
  }
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::~ThreadedIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E246858;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_22E8EFD38(_Unwind_Exception *a1)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::vector<int>::size_type v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Destroy(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    std::mutex::lock((std::mutex *)(a1 + 56));
    atomic_store(2u, (unsigned int *)(a1 + 24));
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    std::mutex::unlock((std::mutex *)(a1 + 56));
    uint64_t v2 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  uint64_t v3 = *(void *)(a1 + 384);
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 376);
    do
    {
      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 352) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
      if (v5)
      {
        uint64_t v6 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v5);
        MEMORY[0x230FA80D0](v6, 0x1090C4087115870);
        unint64_t v4 = *(void *)(a1 + 376);
        uint64_t v3 = *(void *)(a1 + 384);
      }
      --v3;
      *(void *)(a1 + 376) = ++v4;
      *(void *)(a1 + 384) = v3;
      if (v4 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 352));
        *(void *)(a1 + 352) += 8;
        uint64_t v3 = *(void *)(a1 + 384);
        unint64_t v4 = *(void *)(a1 + 376) - 512;
        *(void *)(a1 + 376) = v4;
      }
    }
    while (v3);
  }
  uint64_t v7 = *(void *)(a1 + 336);
  if (v7)
  {
    unint64_t v8 = *(void *)(a1 + 328);
    do
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
      if (v9)
      {
        uint64_t v10 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v9);
        MEMORY[0x230FA80D0](v10, 0x1090C4087115870);
        unint64_t v8 = *(void *)(a1 + 328);
        uint64_t v7 = *(void *)(a1 + 336);
      }
      --v7;
      *(void *)(a1 + 328) = ++v8;
      *(void *)(a1 + 336) = v7;
      if (v8 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 304));
        *(void *)(a1 + 304) += 8;
        uint64_t v7 = *(void *)(a1 + 336);
        unint64_t v8 = *(void *)(a1 + 328) - 512;
        *(void *)(a1 + 328) = v8;
      }
    }
    while (v7);
  }
  if (*(void *)(a1 + 8))
  {
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  uint64_t result = *(void *)(a1 + 288);
  if (result)
  {
    uint64_t v13 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(result);
    uint64_t result = MEMORY[0x230FA80D0](v13, 0x1090C4087115870);
    *(void *)(a1 + 288) = 0;
  }
  return result;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,int>::~DiskRowIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E2467D8;
  uint64_t v2 = a1 + 112;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Destroy(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::~ThreadedIter(v2);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_22E8F0014(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void dmlc::data::RowBlockContainer<unsigned int,int>::GetBlock(void *a1, uint64_t *a2)
{
  uint64_t v4 = a2[4] - a2[3];
  if (v4 && (v4 >> 2) + 1 != (a2[1] - *a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(a2[1] - 8) != (a2[16] - a2[15]) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[18];
  uint64_t v6 = a2[19];
  if (v6 != v7 && *(void *)(v5 - 8) != (v6 - v7) >> 2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: offset.back() == value.size() || value.size() == 0", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
    uint64_t v5 = a2[1];
    uint64_t v7 = a2[18];
    uint64_t v6 = a2[19];
  }
  uint64_t v11 = *a2;
  uint64_t v13 = v5 - *a2;
  BOOL v12 = v13 == 0;
  uint64_t v14 = v13 >> 3;
  if (v12) {
    uint64_t v11 = 0;
  }
  *a1 = v14 - 1;
  a1[1] = v11;
  if (a2[4] == a2[3]) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = a2[3];
  }
  if (a2[7] == a2[6]) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = a2[6];
  }
  a1[2] = v15;
  a1[3] = v16;
  if (a2[10] == a2[9]) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = a2[9];
  }
  if (a2[13] == a2[12]) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = a2[12];
  }
  a1[4] = v17;
  a1[5] = v18;
  if (a2[16] == a2[15]) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = a2[15];
  }
  if (v6 == v7) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v7;
  }
  a1[6] = v19;
  a1[7] = v20;
}

void sub_22E8F02D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void *dmlc::data::BasicRowIter<unsigned int,int>::~BasicRowIter(void *a1)
{
  *a1 = &unk_26E2469C8;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  return a1;
}

void dmlc::data::BasicRowIter<unsigned int,int>::~BasicRowIter(void *a1)
{
  *a1 = &unk_26E2469C8;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::data::BasicRowIter<unsigned int,int>::BeforeFirst(uint64_t result)
{
  *(unsigned char *)(result + 8) = 1;
  return result;
}

BOOL dmlc::data::BasicRowIter<unsigned int,int>::Next(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    *(unsigned char *)(a1 + 8) = 0;
  }
  return v1 != 0;
}

uint64_t dmlc::data::BasicRowIter<unsigned int,int>::Value(uint64_t a1)
{
  return a1 + 16;
}

uint64_t dmlc::data::BasicRowIter<unsigned int,int>::NumCol(uint64_t a1)
{
  return *(unsigned int *)(a1 + 252) + 1;
}

void dmlc::data::DiskRowIter<unsigned long long,int>::~DiskRowIter(uint64_t a1)
{
  dmlc::data::DiskRowIter<unsigned long long,int>::~DiskRowIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8F0460(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C404D6CCE2ELL);
  _Unwind_Resume(a1);
}

void dmlc::data::DiskRowIter<unsigned long long,int>::BeforeFirst(uint64_t a1)
{
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,int>::Next(_OWORD *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 7);
  uint64_t v3 = dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Next((uint64_t)(a1 + 7));
  if (v3)
  {
    uint64_t v4 = (uint64_t *)dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Value(v2);
    dmlc::data::RowBlockContainer<unsigned long long,int>::GetBlock(v8, v4);
    long long v5 = v8[1];
    a1[3] = v8[0];
    a1[4] = v5;
    long long v6 = v8[3];
    a1[5] = v8[2];
    a1[6] = v6;
  }
  return v3;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,int>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,int>::NumCol(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::~ThreadedIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8F0550(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(void *)(a1 + 288))
  {
    std::deque<dmlc::data::RowBlockContainer<unsigned long long,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,int> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      uint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      long long v5 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(v5, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      long long v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire) & 1) == 0)
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 40));
      BOOL v9 = (v8 & 1) == 0;
    }
    else
    {
      BOOL v9 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v9) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_22E8F0718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Next(uint64_t a1)
{
  if (*(void *)(a1 + 288))
  {
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<dmlc::data::RowBlockContainer<unsigned long long,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,int> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire);
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((explicit & 1) == 0) {
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) == 2) {
    return 0;
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    long long v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  int v8 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v8 + 1;
  uint64_t v9 = *(void *)(a1 + 336);
  if (v9)
  {
LABEL_15:
    *(_DWORD *)(a1 + 184) = v8;
  }
  else
  {
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      uint64_t v9 = *(void *)(a1 + 336);
      if (v9)
      {
        int v8 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_15;
      }
    }
    uint64_t v9 = *(void *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v9)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
      {
        uint64_t v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
        dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        uint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
      uint64_t v3 = 0;
      goto LABEL_24;
    }
  }
  char v10 = *(void ***)(a1 + 304);
  unint64_t v11 = *(void *)(a1 + 328);
  *(void *)(a1 + 288) = (*(void **)((char *)v10 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)))[v11 & 0x1FF];
  *(void *)(a1 + 328) = ++v11;
  *(void *)(a1 + 336) = v9 - 1;
  if (v11 >= 0x400)
  {
    operator delete(*v10);
    *(void *)(a1 + 304) += 8;
    *(void *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188)) {
    BOOL v12 = (atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v12) {
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
  uint64_t v3 = 1;
LABEL_24:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v3;
}

void sub_22E8F09FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Value(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(void *)(a1 + 288);
  }
  return result;
}

void sub_22E8F0AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(uint64_t a1)
{
  v5.__ptr_ = 0;
  uint64_t v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(void *)(a1 + 392)) {
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  }
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_22E8F0B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    char v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    uint64_t v20 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    size_t v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x22E8F0B44);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<dmlc::data::RowBlockContainer<unsigned long long,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,int> *>>::push_back(void *a1, void *a2)
{
  std::exception_ptr v4 = (char *)a1[1];
  std::exception_ptr v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      uint64_t v24 = v6 >> 3;
      unsigned int v25 = (char *)a1[3];
      unsigned int v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        uint64_t v34 = v33;
        unint64_t v35 = operator new(0x1000uLL);
        double v36 = &v32[8 * v24];
        uint64_t v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          uint64_t v38 = 8 * v24;
          if (v6 < 1)
          {
            int v73 = v35;
            uint64_t v74 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            double v36 = &v76[8 * (v75 >> 2)];
            uint64_t v37 = &v76[8 * v77];
            if (v32) {
              operator delete(v32);
            }
            int v32 = v76;
            unint64_t v35 = v73;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)double v36 = v35;
        int v78 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v37 - v32) >> 2;
              }
              uint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              long long v87 = v85;
              double v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v32;
              BOOL v88 = v78 == v32;
              int v78 = v36;
              if (!v88)
              {
                int v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                uint64_t v91 = v36;
                std::mutex v92 = (uint64_t *)v32;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)uint64_t v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              uint64_t v37 = &v85[8 * v86];
              if (v32) {
                operator delete(v32);
              }
              int v32 = v87;
            }
            else
            {
              uint64_t v80 = (v37 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              double v36 = &v32[8 * (v81 >> 1)];
              int v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                int v83 = v78;
              }
              int v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v36 - 1) = v94;
          v36 -= 8;
        }
        uint64_t v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      uint64_t v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v25 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          std::exception_ptr v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          uint64_t v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            uint64_t v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            std::exception_ptr v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)std::exception_ptr v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            std::exception_ptr v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        unint64_t v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            uint64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              uint64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v16 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v16) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            uint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              unint64_t v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)std::exception_ptr v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v4;
      unint64_t v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          unint64_t v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          std::exception_ptr v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            std::exception_ptr v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          double v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            std::exception_ptr v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          size_t v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            std::exception_ptr v5 = (char *)a1[1];
          }
          char v23 = &v5[8 * v19];
          std::exception_ptr v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)std::exception_ptr v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    std::exception_ptr v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = a1[4] + v8;
  }
  *(void *)(*(void *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_22E8F1108(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v9[4] = *MEMORY[0x263EF8340];
  atomic_store(0, (unsigned int *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  uint64_t v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v7.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 392), &v7);
  std::exception_ptr::~exception_ptr(&v7);
  std::mutex::unlock(v6);
  v7.__ptr_ = (void *)a1;
  std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::__value_func[abi:ne180100]((uint64_t)&v8, a2);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  operator new();
}

void sub_22E8F1318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::thread::~thread((std::thread *)&a9);
  MEMORY[0x230FA80D0](v12, 0xA1C40BD48D6D6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::~__value_func[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[1];
  do
  {
    uint64_t v18 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        && (*(void *)(v4 + 336) < *(void *)(v4 + 48) || *(void *)(v4 + 384)))
      {
        break;
      }
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire);
    if (explicit)
    {
      if (atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire) == 1)
      {
        uint64_t v6 = a1[9];
        if (!v6) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
        if (*(void *)(v4 + 336))
        {
          unint64_t v7 = *(void *)(v4 + 328);
          do
          {
            std::deque<dmlc::data::RowBlockContainer<unsigned long long,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,int> *>>::push_back((void *)(v4 + 344), (void *)(*(void *)(*(void *)(v4 + 304) + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)));
            uint64_t v8 = *(void *)(v4 + 336) - 1;
            unint64_t v7 = *(void *)(v4 + 328) + 1;
            *(void *)(v4 + 328) = v7;
            *(void *)(v4 + 336) = v8;
            if (v7 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(void *)(v4 + 304) += 8;
              uint64_t v8 = *(void *)(v4 + 336);
              unint64_t v7 = *(void *)(v4 + 328) - 512;
              *(void *)(v4 + 328) = v7;
            }
          }
          while (v8);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        int v9 = 2;
      }
      else
      {
        int v9 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      uint64_t v10 = *(void *)(v4 + 384);
      if (v10
        && (unint64_t v11 = *(void ***)(v4 + 352),
            unint64_t v12 = *(void *)(v4 + 376),
            uint64_t v18 = (*(void **)((char *)v11 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)))[v12 & 0x1FF],
            ++v12,
            *(void *)(v4 + 376) = v12,
            *(void *)(v4 + 384) = v10 - 1,
            v12 >= 0x400))
      {
        operator delete(*v11);
        int v9 = 0;
        *(void *)(v4 + 352) += 8;
        *(void *)(v4 + 376) -= 512;
      }
      else
      {
        int v9 = 0;
      }
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (!explicit)
    {
      uint64_t v13 = a1[5];
      uint64_t v19 = &v18;
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v13 + 48))(v13, &v19) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      uint64_t v14 = (void *)(v4 + 296);
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        || (uint64_t v14 = (void *)(v4 + 344), v18))
      {
        std::deque<dmlc::data::RowBlockContainer<unsigned long long,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,int> *>>::push_back(v14, &v18);
      }
      int v15 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v15) {
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      }
      int v9 = 0;
    }
  }
  while (v9 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_22E8F17AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12) {
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    }
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(void *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) == 1)
  {
    while (*(void *)(v17 + 336))
    {
      std::deque<dmlc::data::RowBlockContainer<unsigned long long,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,int> *>>::push_back(v15, (void *)(*(void *)(*(void *)(v17 + 304) + ((*(void *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(void *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_22EA18F80);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) {
         || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
  }
             int v20 = *(_DWORD *)(v17 + 184),
             std::unique_lock<std::mutex>::unlock(&a12),
             !v20))
  {
LABEL_10:
    if (a12.__owns_) {
      std::mutex::unlock(a12.__m_);
    }
    __cxa_end_catch();
    JUMPOUT(0x22E8F1770);
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

uint64_t *std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](result + 6);
    std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::~__value_func[abi:ne180100](v1 + 2);
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::~__func()
{
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E246B00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E246B00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::operator()(uint64_t a1, std::vector<int> ***a2)
{
  uint64_t v2 = **a2;
  if (!v2) {
    operator new();
  }
  uint64_t v3 = *(uint64_t (****)(void, std::vector<int>::size_type *, uint64_t))(a1 + 8);
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8) {
    return 0;
  }
  std::vector<int>::size_type v4 = __sz;
  std::vector<unsigned long>::resize((uint64_t)v2, __sz);
  if (__sz)
  {
    if ((**v3)(v3, (std::vector<int>::size_type *)v2->__begin_, 8 * v4) != 8 * v4) {
      return 0;
    }
  }
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<int>::size_type v5 = __sz, std::vector<int>::resize(v2 + 1, __sz), __sz)
    && (**v3)(v3, (std::vector<int>::size_type *)v2[1].__begin_, 4 * v5) != 4 * v5)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: fi->Read(&label)", 30);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<int>::size_type v10 = __sz, std::vector<float>::resize((uint64_t)&v2[2], __sz), __sz)
    && (**v3)(v3, (std::vector<int>::size_type *)v2[2].__begin_, 4 * v10) != 4 * v10)
  {
    unint64_t v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v12 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: fi->Read(&weight)", 31);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<int>::size_type v15 = __sz, std::vector<unsigned long>::resize((uint64_t)&v2[3], __sz), __sz)
    && (**v3)(v3, (std::vector<int>::size_type *)v2[3].__begin_, 8 * v15) != 8 * v15)
  {
    BOOL v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: fi->Read(&qid)", 28);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<int>::size_type v20 = __sz, std::vector<unsigned long>::resize((uint64_t)&v2[4], __sz), __sz)
    && (**v3)(v3, (std::vector<int>::size_type *)v2[4].__begin_, 8 * v20) != 8 * v20)
  {
    size_t v21 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v21, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int64_t v22 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    char v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: fi->Read(&field)", 30);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<int>::size_type v25 = __sz, std::vector<unsigned long>::resize((uint64_t)&v2[5], __sz), __sz)
    && (**v3)(v3, (std::vector<int>::size_type *)v2[5].__begin_, 8 * v25) != 8 * v25)
  {
    unsigned int v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v27 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: fi->Read(&index)", 30);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<int>::size_type v30 = __sz, std::vector<int>::resize(v2 + 6, __sz), __sz)
    && (**v3)(v3, (std::vector<int>::size_type *)v2[6].__begin_, 4 * v30) != 4 * v30)
  {
    unint64_t v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int v32 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: fi->Read(&value)", 30);
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v3)(v3, (std::vector<int>::size_type *)&v2[7], 8))
  {
    unint64_t v35 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v35, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    double v36 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: fi->Read(&max_field, sizeof(IndexType))", 53);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v3)(v3, (std::vector<int>::size_type *)&v2[7].__end_, 8))
  {
    uint64_t v39 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v39, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v40 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: fi->Read(&max_index, sizeof(IndexType))", 53);
    uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  return 1;
}

void sub_22E8F2234(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x1090C40257C4FA6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E246B90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E246B90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 0);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void dmlc::data::RowBlockContainer<unsigned long long,int>::Push<unsigned long long>(uint64_t a1, uint64_t a2)
{
  std::vector<int>::size_type v4 = (uint64_t *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  std::vector<int>::resize((std::vector<int> *)(a1 + 24), *(void *)a2 + (v5 >> 2));
  if (v4[1] == *v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v4;
  }
  memcpy((void *)(v6 + v5), *(const void **)(a2 + 16), 4 * *(void *)a2);
  unint64_t v7 = *(char **)(a2 + 24);
  if (v7) {
    std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(a1 + 48, *(void *)(a1 + 56), v7, &v7[4 * *(void *)a2], *(void *)a2);
  }
  uint64_t v8 = *(char **)(a2 + 32);
  if (v8) {
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(a1 + 72, *(void *)(a1 + 80), v8, &v8[8 * *(void *)a2], *(void *)a2);
  }
  int v9 = *(uint64_t **)(a2 + 8);
  uint64_t v10 = v9[*(void *)a2];
  uint64_t v11 = *v9;
  uint64_t v12 = v10 - *v9;
  if (*(void *)(a2 + 40))
  {
    std::vector<unsigned long>::resize(a1 + 96, v12 + ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3));
    uint64_t v13 = *(void *)(a1 + 104) == *(void *)(a1 + 96) ? 0 : *(void *)(a1 + 96);
    if (v10 != v11)
    {
      uint64_t v14 = (unint64_t *)(v13 + 8 * *(void *)(*(void *)(a1 + 8) - 8));
      std::vector<int>::size_type v15 = *(unint64_t **)(a2 + 40);
      uint64_t v16 = v12;
      do
      {
        unint64_t v18 = *v15++;
        unint64_t v17 = v18;
        *v14++ = v18;
        if (*(void *)(a1 + 168) > v18) {
          unint64_t v17 = *(void *)(a1 + 168);
        }
        *(void *)(a1 + 168) = v17;
        --v16;
      }
      while (v16);
    }
  }
  uint64_t v19 = v5 >> 2;
  std::vector<unsigned long>::resize(a1 + 120, v12 + ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3));
  uint64_t v20 = *(void *)(a1 + 120);
  if (*(void *)(a1 + 128) == v20) {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(void *)(a1 + 8);
  if (v10 != v11)
  {
    int64_t v22 = (unint64_t *)(v20 + 8 * *(void *)(v21 - 8));
    char v23 = *(unint64_t **)(a2 + 48);
    uint64_t v24 = v12;
    do
    {
      unint64_t v26 = *v23++;
      unint64_t v25 = v26;
      *v22++ = v26;
      if (*(void *)(a1 + 176) > v26) {
        unint64_t v25 = *(void *)(a1 + 176);
      }
      *(void *)(a1 + 176) = v25;
      --v24;
    }
    while (v24);
  }
  if (*(void *)(a2 + 56))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 144), v12 + ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2));
    uint64_t v27 = *(void *)(a1 + 144);
    uint64_t v28 = *(void *)(a1 + 152) - v27;
    if (!v28) {
      uint64_t v27 = 0;
    }
    memcpy((void *)(v27 + v28 - 4 * v12), *(const void **)(a2 + 56), 4 * v12);
    uint64_t v21 = *(void *)(a1 + 8);
  }
  uint64_t v29 = *(void *)(*(void *)a1 + 8 * v19);
  std::vector<unsigned long>::resize(a1, *(void *)a2 + ((v21 - *(void *)a1) >> 3));
  if (*(void *)(a1 + 8) == *(void *)a1) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *(void *)a1;
  }
  if (*(void *)a2)
  {
    uint64_t v31 = v30 + 8 * v19;
    int v32 = *(void **)(a2 + 8);
    unint64_t v33 = 1;
    do
      *(void *)(v31 + 8 * v33) = v32[v33] + v29 - *v32;
    while (v33++ < *(void *)a2);
  }
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::~ThreadedIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E246AA0;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_22E8F279C(_Unwind_Exception *a1)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::vector<int>::size_type v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Destroy(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    std::mutex::lock((std::mutex *)(a1 + 56));
    atomic_store(2u, (unsigned int *)(a1 + 24));
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    std::mutex::unlock((std::mutex *)(a1 + 56));
    uint64_t v2 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  uint64_t v3 = *(void *)(a1 + 384);
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 376);
    do
    {
      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 352) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
      if (v5)
      {
        uint64_t v6 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v5);
        MEMORY[0x230FA80D0](v6, 0x1090C40257C4FA6);
        unint64_t v4 = *(void *)(a1 + 376);
        uint64_t v3 = *(void *)(a1 + 384);
      }
      --v3;
      *(void *)(a1 + 376) = ++v4;
      *(void *)(a1 + 384) = v3;
      if (v4 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 352));
        *(void *)(a1 + 352) += 8;
        uint64_t v3 = *(void *)(a1 + 384);
        unint64_t v4 = *(void *)(a1 + 376) - 512;
        *(void *)(a1 + 376) = v4;
      }
    }
    while (v3);
  }
  uint64_t v7 = *(void *)(a1 + 336);
  if (v7)
  {
    unint64_t v8 = *(void *)(a1 + 328);
    do
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
      if (v9)
      {
        uint64_t v10 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v9);
        MEMORY[0x230FA80D0](v10, 0x1090C40257C4FA6);
        unint64_t v8 = *(void *)(a1 + 328);
        uint64_t v7 = *(void *)(a1 + 336);
      }
      --v7;
      *(void *)(a1 + 328) = ++v8;
      *(void *)(a1 + 336) = v7;
      if (v8 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 304));
        *(void *)(a1 + 304) += 8;
        uint64_t v7 = *(void *)(a1 + 336);
        unint64_t v8 = *(void *)(a1 + 328) - 512;
        *(void *)(a1 + 328) = v8;
      }
    }
    while (v7);
  }
  if (*(void *)(a1 + 8))
  {
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  uint64_t result = *(void *)(a1 + 288);
  if (result)
  {
    uint64_t v13 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(result);
    uint64_t result = MEMORY[0x230FA80D0](v13, 0x1090C40257C4FA6);
    *(void *)(a1 + 288) = 0;
  }
  return result;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,int>::~DiskRowIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E246A20;
  uint64_t v2 = a1 + 112;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Destroy(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::~ThreadedIter(v2);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_22E8F2A78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void dmlc::data::RowBlockContainer<unsigned long long,int>::GetBlock(void *a1, uint64_t *a2)
{
  uint64_t v4 = a2[4] - a2[3];
  if (v4 && (v4 >> 2) + 1 != (a2[1] - *a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(a2[1] - 8) != (a2[16] - a2[15]) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[18];
  uint64_t v6 = a2[19];
  if (v6 != v7 && *(void *)(v5 - 8) != (v6 - v7) >> 2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: offset.back() == value.size() || value.size() == 0", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
    uint64_t v5 = a2[1];
    uint64_t v7 = a2[18];
    uint64_t v6 = a2[19];
  }
  uint64_t v11 = *a2;
  uint64_t v13 = v5 - *a2;
  BOOL v12 = v13 == 0;
  uint64_t v14 = v13 >> 3;
  if (v12) {
    uint64_t v11 = 0;
  }
  *a1 = v14 - 1;
  a1[1] = v11;
  if (a2[4] == a2[3]) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = a2[3];
  }
  if (a2[7] == a2[6]) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = a2[6];
  }
  a1[2] = v15;
  a1[3] = v16;
  if (a2[10] == a2[9]) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = a2[9];
  }
  if (a2[13] == a2[12]) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = a2[12];
  }
  a1[4] = v17;
  a1[5] = v18;
  if (a2[16] == a2[15]) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = a2[15];
  }
  if (v6 == v7) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v7;
  }
  a1[6] = v19;
  a1[7] = v20;
}

void sub_22E8F2D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void *dmlc::data::BasicRowIter<unsigned long long,int>::~BasicRowIter(void *a1)
{
  *a1 = &unk_26E246C10;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  return a1;
}

void dmlc::data::BasicRowIter<unsigned long long,int>::~BasicRowIter(void *a1)
{
  *a1 = &unk_26E246C10;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,int>::BeforeFirst(uint64_t result)
{
  *(unsigned char *)(result + 8) = 1;
  return result;
}

BOOL dmlc::data::BasicRowIter<unsigned long long,int>::Next(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    *(unsigned char *)(a1 + 8) = 0;
  }
  return v1 != 0;
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,int>::Value(uint64_t a1)
{
  return a1 + 16;
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,int>::NumCol(uint64_t a1)
{
  return *(void *)(a1 + 256) + 1;
}

void dmlc::data::DiskRowIter<unsigned int,long long>::~DiskRowIter(uint64_t a1)
{
  dmlc::data::DiskRowIter<unsigned int,long long>::~DiskRowIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8F2EC4(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C404D6CCE2ELL);
  _Unwind_Resume(a1);
}

void dmlc::data::DiskRowIter<unsigned int,long long>::BeforeFirst(uint64_t a1)
{
}

uint64_t dmlc::data::DiskRowIter<unsigned int,long long>::Next(_OWORD *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 7);
  uint64_t v3 = dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Next((uint64_t)(a1 + 7));
  if (v3)
  {
    uint64_t v4 = (uint64_t *)dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Value(v2);
    dmlc::data::RowBlockContainer<unsigned int,long long>::GetBlock(v8, v4);
    long long v5 = v8[1];
    a1[3] = v8[0];
    a1[4] = v5;
    long long v6 = v8[3];
    a1[5] = v8[2];
    a1[6] = v6;
  }
  return v3;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,long long>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,long long>::NumCol(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::~ThreadedIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8F2FB4(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(void *)(a1 + 288))
  {
    std::deque<dmlc::data::RowBlockContainer<unsigned int,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,long long> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      uint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      long long v5 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(v5, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      long long v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire) & 1) == 0)
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 40));
      BOOL v9 = (v8 & 1) == 0;
    }
    else
    {
      BOOL v9 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v9) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_22E8F317C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Next(uint64_t a1)
{
  if (*(void *)(a1 + 288))
  {
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<dmlc::data::RowBlockContainer<unsigned int,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,long long> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire);
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((explicit & 1) == 0) {
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) == 2) {
    return 0;
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    long long v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  int v8 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v8 + 1;
  uint64_t v9 = *(void *)(a1 + 336);
  if (v9)
  {
LABEL_15:
    *(_DWORD *)(a1 + 184) = v8;
  }
  else
  {
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      uint64_t v9 = *(void *)(a1 + 336);
      if (v9)
      {
        int v8 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_15;
      }
    }
    uint64_t v9 = *(void *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v9)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
      {
        uint64_t v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
        dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        uint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
      uint64_t v3 = 0;
      goto LABEL_24;
    }
  }
  char v10 = *(void ***)(a1 + 304);
  unint64_t v11 = *(void *)(a1 + 328);
  *(void *)(a1 + 288) = (*(void **)((char *)v10 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)))[v11 & 0x1FF];
  *(void *)(a1 + 328) = ++v11;
  *(void *)(a1 + 336) = v9 - 1;
  if (v11 >= 0x400)
  {
    operator delete(*v10);
    *(void *)(a1 + 304) += 8;
    *(void *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188)) {
    BOOL v12 = (atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v12) {
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
  uint64_t v3 = 1;
LABEL_24:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v3;
}

void sub_22E8F3460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Value(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(void *)(a1 + 288);
  }
  return result;
}

void sub_22E8F3544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(uint64_t a1)
{
  v5.__ptr_ = 0;
  uint64_t v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(void *)(a1 + 392)) {
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  }
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_22E8F35D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    char v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    uint64_t v20 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    size_t v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x22E8F35A8);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<dmlc::data::RowBlockContainer<unsigned int,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,long long> *>>::push_back(void *a1, void *a2)
{
  std::exception_ptr v4 = (char *)a1[1];
  std::exception_ptr v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      uint64_t v24 = v6 >> 3;
      unint64_t v25 = (char *)a1[3];
      unint64_t v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        uint64_t v34 = v33;
        unint64_t v35 = operator new(0x1000uLL);
        double v36 = &v32[8 * v24];
        uint64_t v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          uint64_t v38 = 8 * v24;
          if (v6 < 1)
          {
            int v73 = v35;
            uint64_t v74 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            double v36 = &v76[8 * (v75 >> 2)];
            uint64_t v37 = &v76[8 * v77];
            if (v32) {
              operator delete(v32);
            }
            int v32 = v76;
            unint64_t v35 = v73;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)double v36 = v35;
        int v78 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v37 - v32) >> 2;
              }
              uint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              long long v87 = v85;
              double v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v32;
              BOOL v88 = v78 == v32;
              int v78 = v36;
              if (!v88)
              {
                int v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                uint64_t v91 = v36;
                std::mutex v92 = (uint64_t *)v32;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)uint64_t v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              uint64_t v37 = &v85[8 * v86];
              if (v32) {
                operator delete(v32);
              }
              int v32 = v87;
            }
            else
            {
              uint64_t v80 = (v37 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              double v36 = &v32[8 * (v81 >> 1)];
              int v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                int v83 = v78;
              }
              int v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v36 - 1) = v94;
          v36 -= 8;
        }
        uint64_t v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      uint64_t v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v25 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          std::exception_ptr v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          uint64_t v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            uint64_t v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            std::exception_ptr v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)std::exception_ptr v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            std::exception_ptr v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        unint64_t v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            uint64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              uint64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v16 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v16) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            uint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              unint64_t v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)std::exception_ptr v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v4;
      unint64_t v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          unint64_t v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          std::exception_ptr v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            std::exception_ptr v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          double v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            std::exception_ptr v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          size_t v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            std::exception_ptr v5 = (char *)a1[1];
          }
          char v23 = &v5[8 * v19];
          std::exception_ptr v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)std::exception_ptr v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    std::exception_ptr v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = a1[4] + v8;
  }
  *(void *)(*(void *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_22E8F3B6C(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v9[4] = *MEMORY[0x263EF8340];
  atomic_store(0, (unsigned int *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  uint64_t v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v7.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 392), &v7);
  std::exception_ptr::~exception_ptr(&v7);
  std::mutex::unlock(v6);
  v7.__ptr_ = (void *)a1;
  std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::__value_func[abi:ne180100]((uint64_t)&v8, a2);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  operator new();
}

void sub_22E8F3D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::thread::~thread((std::thread *)&a9);
  MEMORY[0x230FA80D0](v12, 0xA1C40BD48D6D6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::~__value_func[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[1];
  do
  {
    uint64_t v18 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        && (*(void *)(v4 + 336) < *(void *)(v4 + 48) || *(void *)(v4 + 384)))
      {
        break;
      }
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire);
    if (explicit)
    {
      if (atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire) == 1)
      {
        uint64_t v6 = a1[9];
        if (!v6) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
        if (*(void *)(v4 + 336))
        {
          unint64_t v7 = *(void *)(v4 + 328);
          do
          {
            std::deque<dmlc::data::RowBlockContainer<unsigned int,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,long long> *>>::push_back((void *)(v4 + 344), (void *)(*(void *)(*(void *)(v4 + 304) + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)));
            uint64_t v8 = *(void *)(v4 + 336) - 1;
            unint64_t v7 = *(void *)(v4 + 328) + 1;
            *(void *)(v4 + 328) = v7;
            *(void *)(v4 + 336) = v8;
            if (v7 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(void *)(v4 + 304) += 8;
              uint64_t v8 = *(void *)(v4 + 336);
              unint64_t v7 = *(void *)(v4 + 328) - 512;
              *(void *)(v4 + 328) = v7;
            }
          }
          while (v8);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        int v9 = 2;
      }
      else
      {
        int v9 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      uint64_t v10 = *(void *)(v4 + 384);
      if (v10
        && (unint64_t v11 = *(void ***)(v4 + 352),
            unint64_t v12 = *(void *)(v4 + 376),
            uint64_t v18 = (*(void **)((char *)v11 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)))[v12 & 0x1FF],
            ++v12,
            *(void *)(v4 + 376) = v12,
            *(void *)(v4 + 384) = v10 - 1,
            v12 >= 0x400))
      {
        operator delete(*v11);
        int v9 = 0;
        *(void *)(v4 + 352) += 8;
        *(void *)(v4 + 376) -= 512;
      }
      else
      {
        int v9 = 0;
      }
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (!explicit)
    {
      uint64_t v13 = a1[5];
      uint64_t v19 = &v18;
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v13 + 48))(v13, &v19) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      uint64_t v14 = (void *)(v4 + 296);
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        || (uint64_t v14 = (void *)(v4 + 344), v18))
      {
        std::deque<dmlc::data::RowBlockContainer<unsigned int,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,long long> *>>::push_back(v14, &v18);
      }
      int v15 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v15) {
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      }
      int v9 = 0;
    }
  }
  while (v9 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_22E8F4210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12) {
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    }
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(void *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) == 1)
  {
    while (*(void *)(v17 + 336))
    {
      std::deque<dmlc::data::RowBlockContainer<unsigned int,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,long long> *>>::push_back(v15, (void *)(*(void *)(*(void *)(v17 + 304) + ((*(void *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(void *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_22EA18F80);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) {
         || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
  }
             int v20 = *(_DWORD *)(v17 + 184),
             std::unique_lock<std::mutex>::unlock(&a12),
             !v20))
  {
LABEL_10:
    if (a12.__owns_) {
      std::mutex::unlock(a12.__m_);
    }
    __cxa_end_catch();
    JUMPOUT(0x22E8F41D4);
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

uint64_t *std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](result + 6);
    std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::~__value_func[abi:ne180100](v1 + 2);
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::~__func()
{
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E246D48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E246D48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::operator()(uint64_t a1, std::vector<unsigned int> ***a2)
{
  uint64_t v2 = **a2;
  if (!v2) {
    operator new();
  }
  uint64_t v3 = *(uint64_t (****)(void, std::vector<unsigned int>::size_type *, uint64_t))(a1 + 8);
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8) {
    return 0;
  }
  std::vector<unsigned int>::size_type v4 = __sz;
  std::vector<unsigned long>::resize((uint64_t)v2, __sz);
  if (__sz)
  {
    if ((**v3)(v3, (std::vector<unsigned int>::size_type *)v2->__begin_, 8 * v4) != 8 * v4) {
      return 0;
    }
  }
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<unsigned int>::size_type v5 = __sz, std::vector<unsigned long>::resize((uint64_t)&v2[1], __sz), __sz)
    && (**v3)(v3, (std::vector<unsigned int>::size_type *)v2[1].__begin_, 8 * v5) != 8 * v5)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: fi->Read(&label)", 30);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<unsigned int>::size_type v10 = __sz, std::vector<float>::resize((uint64_t)&v2[2], __sz), __sz)
    && (**v3)(v3, (std::vector<unsigned int>::size_type *)v2[2].__begin_, 4 * v10) != 4 * v10)
  {
    unint64_t v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v12 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: fi->Read(&weight)", 31);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<unsigned int>::size_type v15 = __sz, std::vector<unsigned long>::resize((uint64_t)&v2[3], __sz), __sz)
    && (**v3)(v3, (std::vector<unsigned int>::size_type *)v2[3].__begin_, 8 * v15) != 8 * v15)
  {
    BOOL v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: fi->Read(&qid)", 28);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<unsigned int>::size_type v20 = __sz, std::vector<unsigned int>::resize(v2 + 4, __sz), __sz)
    && (**v3)(v3, (std::vector<unsigned int>::size_type *)v2[4].__begin_, 4 * v20) != 4 * v20)
  {
    size_t v21 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v21, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int64_t v22 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    char v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: fi->Read(&field)", 30);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<unsigned int>::size_type v25 = __sz, std::vector<unsigned int>::resize(v2 + 5, __sz), __sz)
    && (**v3)(v3, (std::vector<unsigned int>::size_type *)v2[5].__begin_, 4 * v25) != 4 * v25)
  {
    unint64_t v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v27 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: fi->Read(&index)", 30);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  std::vector<unsigned int>::size_type __sz = 0;
  if ((**v3)(v3, &__sz, 8) != 8
    || (std::vector<unsigned int>::size_type v30 = __sz, std::vector<unsigned long>::resize((uint64_t)&v2[6], __sz), __sz)
    && (**v3)(v3, (std::vector<unsigned int>::size_type *)v2[6].__begin_, 8 * v30) != 8 * v30)
  {
    unint64_t v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int v32 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: fi->Read(&value)", 30);
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v3)(v3, (std::vector<unsigned int>::size_type *)&v2[7], 4))
  {
    unint64_t v35 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v35, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    double v36 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: fi->Read(&max_field, sizeof(IndexType))", 53);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v3)(v3, (std::vector<unsigned int>::size_type *)((char *)&v2[7].__begin_ + 4), 4))
  {
    uint64_t v39 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v39, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v40 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: fi->Read(&max_index, sizeof(IndexType))", 53);
    uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  return 1;
}

void sub_22E8F4C98(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x1090C4087115870);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E246DD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E246DD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 0);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void dmlc::data::RowBlockContainer<unsigned int,long long>::Push<unsigned int>(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned int>::size_type v4 = (uint64_t *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  std::vector<unsigned long>::resize(a1 + 24, *(void *)a2 + (v5 >> 3));
  if (v4[1] == *v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v4;
  }
  memcpy((void *)(v6 + v5), *(const void **)(a2 + 16), 8 * *(void *)a2);
  unint64_t v7 = *(char **)(a2 + 24);
  if (v7) {
    std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(a1 + 48, *(void *)(a1 + 56), v7, &v7[4 * *(void *)a2], *(void *)a2);
  }
  uint64_t v8 = *(char **)(a2 + 32);
  if (v8) {
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(a1 + 72, *(void *)(a1 + 80), v8, &v8[8 * *(void *)a2], *(void *)a2);
  }
  int v9 = *(uint64_t **)(a2 + 8);
  uint64_t v10 = v9[*(void *)a2];
  uint64_t v11 = *v9;
  uint64_t v12 = v10 - *v9;
  if (*(void *)(a2 + 40))
  {
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 96), v12 + ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 2));
    uint64_t v13 = *(void *)(a1 + 104) == *(void *)(a1 + 96) ? 0 : *(void *)(a1 + 96);
    if (v10 != v11)
    {
      uint64_t v14 = (unsigned int *)(v13 + 4 * *(void *)(*(void *)(a1 + 8) - 8));
      std::vector<unsigned int>::size_type v15 = *(unsigned int **)(a2 + 40);
      uint64_t v16 = v12;
      do
      {
        unsigned int v18 = *v15++;
        unsigned int v17 = v18;
        *v14++ = v18;
        if (*(_DWORD *)(a1 + 168) > v18) {
          unsigned int v17 = *(_DWORD *)(a1 + 168);
        }
        *(_DWORD *)(a1 + 168) = v17;
        --v16;
      }
      while (v16);
    }
  }
  uint64_t v19 = v5 >> 3;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 120), v12 + ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 2));
  uint64_t v20 = *(void *)(a1 + 120);
  if (*(void *)(a1 + 128) == v20) {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(void *)(a1 + 8);
  if (v10 != v11)
  {
    int64_t v22 = (unsigned int *)(v20 + 4 * *(void *)(v21 - 8));
    char v23 = *(unsigned int **)(a2 + 48);
    uint64_t v24 = v12;
    do
    {
      unsigned int v26 = *v23++;
      unsigned int v25 = v26;
      *v22++ = v26;
      if (*(_DWORD *)(a1 + 172) > v26) {
        unsigned int v25 = *(_DWORD *)(a1 + 172);
      }
      *(_DWORD *)(a1 + 172) = v25;
      --v24;
    }
    while (v24);
  }
  if (*(void *)(a2 + 56))
  {
    std::vector<unsigned long>::resize(a1 + 144, v12 + ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3));
    uint64_t v27 = *(void *)(a1 + 144);
    uint64_t v28 = *(void *)(a1 + 152) - v27;
    if (!v28) {
      uint64_t v27 = 0;
    }
    memcpy((void *)(v27 + v28 - 8 * v12), *(const void **)(a2 + 56), 8 * v12);
    uint64_t v21 = *(void *)(a1 + 8);
  }
  uint64_t v29 = *(void *)(*(void *)a1 + 8 * v19);
  std::vector<unsigned long>::resize(a1, *(void *)a2 + ((v21 - *(void *)a1) >> 3));
  if (*(void *)(a1 + 8) == *(void *)a1) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *(void *)a1;
  }
  if (*(void *)a2)
  {
    uint64_t v31 = v30 + 8 * v19;
    int v32 = *(void **)(a2 + 8);
    unint64_t v33 = 1;
    do
      *(void *)(v31 + 8 * v33) = v32[v33] + v29 - *v32;
    while (v33++ < *(void *)a2);
  }
}

uint64_t dmlc::data::RowBlockContainer<unsigned int,long long>::Save(void *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1[1] - *a1) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *a1, a1[1] - *a1);
  }
  uint64_t v5 = (uint64_t)(a1[4] - a1[3]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[3], a1[4] - a1[3]);
  }
  uint64_t v5 = (uint64_t)(a1[7] - a1[6]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[6], a1[7] - a1[6]);
  }
  uint64_t v5 = (uint64_t)(a1[10] - a1[9]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[9], a1[10] - a1[9]);
  }
  uint64_t v5 = (uint64_t)(a1[13] - a1[12]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[12], a1[13] - a1[12]);
  }
  uint64_t v5 = (uint64_t)(a1[16] - a1[15]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[15], a1[16] - a1[15]);
  }
  uint64_t v5 = (uint64_t)(a1[19] - a1[18]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[18], a1[19] - a1[18]);
  }
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 8))(a2, a1 + 21, 4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, (uint64_t)a1 + 172, 4);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::~ThreadedIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E246CE8;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_22E8F55D4(_Unwind_Exception *a1)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::vector<unsigned int>::size_type v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::DiskRowIter<unsigned int,long long>::~DiskRowIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E246C68;
  uint64_t v2 = a1 + 112;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Destroy(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::~ThreadedIter(v2);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_22E8F56EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void dmlc::data::RowBlockContainer<unsigned int,long long>::GetBlock(void *a1, uint64_t *a2)
{
  uint64_t v4 = a2[4] - a2[3];
  if (v4 && (v4 >> 3) + 1 != (a2[1] - *a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(a2[1] - 8) != (a2[16] - a2[15]) >> 2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[18];
  uint64_t v6 = a2[19];
  if (v6 != v7 && *(void *)(v5 - 8) != (v6 - v7) >> 3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: offset.back() == value.size() || value.size() == 0", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
    uint64_t v5 = a2[1];
    uint64_t v7 = a2[18];
    uint64_t v6 = a2[19];
  }
  uint64_t v11 = *a2;
  uint64_t v13 = v5 - *a2;
  BOOL v12 = v13 == 0;
  uint64_t v14 = v13 >> 3;
  if (v12) {
    uint64_t v11 = 0;
  }
  *a1 = v14 - 1;
  a1[1] = v11;
  if (a2[4] == a2[3]) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = a2[3];
  }
  if (a2[7] == a2[6]) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = a2[6];
  }
  a1[2] = v15;
  a1[3] = v16;
  if (a2[10] == a2[9]) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = a2[9];
  }
  if (a2[13] == a2[12]) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = a2[12];
  }
  a1[4] = v17;
  a1[5] = v18;
  if (a2[16] == a2[15]) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = a2[15];
  }
  if (v6 == v7) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v7;
  }
  a1[6] = v19;
  a1[7] = v20;
}

void sub_22E8F59B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void *dmlc::data::BasicRowIter<unsigned int,long long>::~BasicRowIter(void *a1)
{
  *a1 = &unk_26E246E58;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  return a1;
}

void dmlc::data::BasicRowIter<unsigned int,long long>::~BasicRowIter(void *a1)
{
  *a1 = &unk_26E246E58;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::data::BasicRowIter<unsigned int,long long>::BeforeFirst(uint64_t result)
{
  *(unsigned char *)(result + 8) = 1;
  return result;
}

BOOL dmlc::data::BasicRowIter<unsigned int,long long>::Next(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    *(unsigned char *)(a1 + 8) = 0;
  }
  return v1 != 0;
}

uint64_t dmlc::data::BasicRowIter<unsigned int,long long>::Value(uint64_t a1)
{
  return a1 + 16;
}

uint64_t dmlc::data::BasicRowIter<unsigned int,long long>::NumCol(uint64_t a1)
{
  return *(unsigned int *)(a1 + 252) + 1;
}

void dmlc::data::DiskRowIter<unsigned long long,long long>::~DiskRowIter(uint64_t a1)
{
  dmlc::data::DiskRowIter<unsigned long long,long long>::~DiskRowIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8F5B38(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C404D6CCE2ELL);
  _Unwind_Resume(a1);
}

void dmlc::data::DiskRowIter<unsigned long long,long long>::BeforeFirst(uint64_t a1)
{
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,long long>::Next(_OWORD *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 7);
  uint64_t v3 = dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Next((uint64_t)(a1 + 7));
  if (v3)
  {
    uint64_t v4 = (uint64_t *)dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Value(v2);
    dmlc::data::RowBlockContainer<unsigned long long,long long>::GetBlock(v8, v4);
    long long v5 = v8[1];
    a1[3] = v8[0];
    a1[4] = v5;
    long long v6 = v8[3];
    a1[5] = v8[2];
    a1[6] = v6;
  }
  return v3;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,long long>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,long long>::NumCol(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::~ThreadedIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8F5C28(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(void *)(a1 + 288))
  {
    std::deque<dmlc::data::RowBlockContainer<unsigned long long,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,long long> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      uint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      long long v5 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(v5, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      long long v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire) & 1) == 0)
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 40));
      BOOL v9 = (v8 & 1) == 0;
    }
    else
    {
      BOOL v9 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v9) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_22E8F5DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Next(uint64_t a1)
{
  if (*(void *)(a1 + 288))
  {
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<dmlc::data::RowBlockContainer<unsigned long long,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,long long> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire);
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((explicit & 1) == 0) {
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) == 2) {
    return 0;
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    long long v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  int v8 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v8 + 1;
  uint64_t v9 = *(void *)(a1 + 336);
  if (v9)
  {
LABEL_15:
    *(_DWORD *)(a1 + 184) = v8;
  }
  else
  {
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      uint64_t v9 = *(void *)(a1 + 336);
      if (v9)
      {
        int v8 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_15;
      }
    }
    uint64_t v9 = *(void *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v9)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
      {
        uint64_t v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
        dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        uint64_t v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
      uint64_t v3 = 0;
      goto LABEL_24;
    }
  }
  char v10 = *(void ***)(a1 + 304);
  unint64_t v11 = *(void *)(a1 + 328);
  *(void *)(a1 + 288) = (*(void **)((char *)v10 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)))[v11 & 0x1FF];
  *(void *)(a1 + 328) = ++v11;
  *(void *)(a1 + 336) = v9 - 1;
  if (v11 >= 0x400)
  {
    operator delete(*v10);
    *(void *)(a1 + 304) += 8;
    *(void *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188)) {
    BOOL v12 = (atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v12) {
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
  uint64_t v3 = 1;
LABEL_24:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v3;
}

void sub_22E8F60D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Value(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(void *)(a1 + 288);
  }
  return result;
}

void sub_22E8F61B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(uint64_t a1)
{
  v5.__ptr_ = 0;
  uint64_t v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(void *)(a1 + 392)) {
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  }
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_22E8F624C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    char v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    uint64_t v20 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    size_t v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x22E8F621CLL);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<dmlc::data::RowBlockContainer<unsigned long long,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,long long> *>>::push_back(void *a1, void *a2)
{
  std::exception_ptr v4 = (char *)a1[1];
  std::exception_ptr v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      uint64_t v24 = v6 >> 3;
      unsigned int v25 = (char *)a1[3];
      unsigned int v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        uint64_t v34 = v33;
        unint64_t v35 = operator new(0x1000uLL);
        double v36 = &v32[8 * v24];
        uint64_t v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          uint64_t v38 = 8 * v24;
          if (v6 < 1)
          {
            int v73 = v35;
            uint64_t v74 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            double v36 = &v76[8 * (v75 >> 2)];
            uint64_t v37 = &v76[8 * v77];
            if (v32) {
              operator delete(v32);
            }
            int v32 = v76;
            unint64_t v35 = v73;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)double v36 = v35;
        int v78 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v37 - v32) >> 2;
              }
              uint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              long long v87 = v85;
              double v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v32;
              BOOL v88 = v78 == v32;
              int v78 = v36;
              if (!v88)
              {
                int v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                uint64_t v91 = v36;
                std::mutex v92 = (uint64_t *)v32;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)uint64_t v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              uint64_t v37 = &v85[8 * v86];
              if (v32) {
                operator delete(v32);
              }
              int v32 = v87;
            }
            else
            {
              uint64_t v80 = (v37 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              double v36 = &v32[8 * (v81 >> 1)];
              int v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                int v83 = v78;
              }
              int v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v36 - 1) = v94;
          v36 -= 8;
        }
        uint64_t v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      uint64_t v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v25 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          std::exception_ptr v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          uint64_t v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            uint64_t v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            std::exception_ptr v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)std::exception_ptr v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            std::exception_ptr v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        unint64_t v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            uint64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              uint64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v16 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v16) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            uint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              unint64_t v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)std::exception_ptr v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v4;
      unint64_t v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          unint64_t v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          std::exception_ptr v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            std::exception_ptr v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          double v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            std::exception_ptr v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          size_t v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            std::exception_ptr v5 = (char *)a1[1];
          }
          char v23 = &v5[8 * v19];
          std::exception_ptr v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)std::exception_ptr v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    std::exception_ptr v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = a1[4] + v8;
  }
  *(void *)(*(void *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_22E8F67E0(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v9[4] = *MEMORY[0x263EF8340];
  atomic_store(0, (unsigned int *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  uint64_t v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v7.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 392), &v7);
  std::exception_ptr::~exception_ptr(&v7);
  std::mutex::unlock(v6);
  v7.__ptr_ = (void *)a1;
  std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::__value_func[abi:ne180100]((uint64_t)&v8, a2);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  operator new();
}

void sub_22E8F69F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::thread::~thread((std::thread *)&a9);
  MEMORY[0x230FA80D0](v12, 0xA1C40BD48D6D6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::~__value_func[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[1];
  do
  {
    uint64_t v18 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        && (*(void *)(v4 + 336) < *(void *)(v4 + 48) || *(void *)(v4 + 384)))
      {
        break;
      }
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire);
    if (explicit)
    {
      if (atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire) == 1)
      {
        uint64_t v6 = a1[9];
        if (!v6) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
        if (*(void *)(v4 + 336))
        {
          unint64_t v7 = *(void *)(v4 + 328);
          do
          {
            std::deque<dmlc::data::RowBlockContainer<unsigned long long,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,long long> *>>::push_back((void *)(v4 + 344), (void *)(*(void *)(*(void *)(v4 + 304) + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)));
            uint64_t v8 = *(void *)(v4 + 336) - 1;
            unint64_t v7 = *(void *)(v4 + 328) + 1;
            *(void *)(v4 + 328) = v7;
            *(void *)(v4 + 336) = v8;
            if (v7 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(void *)(v4 + 304) += 8;
              uint64_t v8 = *(void *)(v4 + 336);
              unint64_t v7 = *(void *)(v4 + 328) - 512;
              *(void *)(v4 + 328) = v7;
            }
          }
          while (v8);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        int v9 = 2;
      }
      else
      {
        int v9 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      uint64_t v10 = *(void *)(v4 + 384);
      if (v10
        && (unint64_t v11 = *(void ***)(v4 + 352),
            unint64_t v12 = *(void *)(v4 + 376),
            uint64_t v18 = (*(void **)((char *)v11 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)))[v12 & 0x1FF],
            ++v12,
            *(void *)(v4 + 376) = v12,
            *(void *)(v4 + 384) = v10 - 1,
            v12 >= 0x400))
      {
        operator delete(*v11);
        int v9 = 0;
        *(void *)(v4 + 352) += 8;
        *(void *)(v4 + 376) -= 512;
      }
      else
      {
        int v9 = 0;
      }
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (!explicit)
    {
      uint64_t v13 = a1[5];
      uint64_t v19 = &v18;
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v13 + 48))(v13, &v19) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      uint64_t v14 = (void *)(v4 + 296);
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        || (uint64_t v14 = (void *)(v4 + 344), v18))
      {
        std::deque<dmlc::data::RowBlockContainer<unsigned long long,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,long long> *>>::push_back(v14, &v18);
      }
      int v15 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v15) {
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      }
      int v9 = 0;
    }
  }
  while (v9 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_22E8F6E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12) {
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    }
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(void *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) == 1)
  {
    while (*(void *)(v17 + 336))
    {
      std::deque<dmlc::data::RowBlockContainer<unsigned long long,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,long long> *>>::push_back(v15, (void *)(*(void *)(*(void *)(v17 + 304) + ((*(void *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(void *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_22EA18F80);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) {
         || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
  }
             int v20 = *(_DWORD *)(v17 + 184),
             std::unique_lock<std::mutex>::unlock(&a12),
             !v20))
  {
LABEL_10:
    if (a12.__owns_) {
      std::mutex::unlock(a12.__m_);
    }
    __cxa_end_catch();
    JUMPOUT(0x22E8F6E48);
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

uint64_t *std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](result + 6);
    std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::~__value_func[abi:ne180100](v1 + 2);
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::~__func()
{
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E246F90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E246F90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::operator()(uint64_t a1, void ***a2)
{
  uint64_t v2 = **a2;
  if (!v2) {
    operator new();
  }
  uint64_t v3 = *(uint64_t (****)(void, unint64_t *, uint64_t))(a1 + 8);
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8) {
    return 0;
  }
  unint64_t v4 = v44;
  std::vector<unsigned long>::resize((uint64_t)v2, v44);
  if (v44)
  {
    if ((**v3)(v3, (unint64_t *)*v2, 8 * v4) != 8 * v4) {
      return 0;
    }
  }
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8
    || (unint64_t v5 = v44, std::vector<unsigned long>::resize((uint64_t)(v2 + 3), v44), v44)
    && (**v3)(v3, (unint64_t *)v2[3], 8 * v5) != 8 * v5)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: fi->Read(&label)", 30);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8
    || (unint64_t v10 = v44, std::vector<float>::resize((uint64_t)(v2 + 6), v44), v44)
    && (**v3)(v3, (unint64_t *)v2[6], 4 * v10) != 4 * v10)
  {
    unint64_t v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v12 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: fi->Read(&weight)", 31);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8
    || (unint64_t v15 = v44, std::vector<unsigned long>::resize((uint64_t)(v2 + 9), v44), v44)
    && (**v3)(v3, (unint64_t *)v2[9], 8 * v15) != 8 * v15)
  {
    BOOL v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: fi->Read(&qid)", 28);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8
    || (unint64_t v20 = v44, std::vector<unsigned long>::resize((uint64_t)(v2 + 12), v44), v44)
    && (**v3)(v3, (unint64_t *)v2[12], 8 * v20) != 8 * v20)
  {
    size_t v21 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v21, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int64_t v22 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    char v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: fi->Read(&field)", 30);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8
    || (unint64_t v25 = v44, std::vector<unsigned long>::resize((uint64_t)(v2 + 15), v44), v44)
    && (**v3)(v3, (unint64_t *)v2[15], 8 * v25) != 8 * v25)
  {
    unsigned int v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    uint64_t v27 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: fi->Read(&index)", 30);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  unint64_t v44 = 0;
  if ((**v3)(v3, &v44, 8) != 8
    || (unint64_t v30 = v44, std::vector<unsigned long>::resize((uint64_t)(v2 + 18), v44), v44)
    && (**v3)(v3, (unint64_t *)v2[18], 8 * v30) != 8 * v30)
  {
    unint64_t v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int v32 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: fi->Read(&value)", 30);
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  if (!(**v3)(v3, v2 + 21, 8))
  {
    unint64_t v35 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v35, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    double v36 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: fi->Read(&max_field, sizeof(IndexType))", 53);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  if (!(**v3)(v3, v2 + 22, 8))
  {
    uint64_t v39 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    dmlc::LogMessageFatal::Entry::Init(v39, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    unint64_t v40 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v44);
    unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: fi->Read(&max_index, sizeof(IndexType))", 53);
    uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v44);
  }
  return 1;
}

void sub_22E8F790C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x1090C40257C4FA6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E247020;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E247020;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 0);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void dmlc::data::RowBlockContainer<unsigned long long,long long>::Push<unsigned long long>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1 + 3;
  uint64_t v5 = a1[4] - a1[3];
  std::vector<unsigned long>::resize((uint64_t)(a1 + 3), *(void *)a2 + (v5 >> 3));
  if (v4[1] == *v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v4;
  }
  memcpy((void *)(v6 + v5), *(const void **)(a2 + 16), 8 * *(void *)a2);
  unint64_t v7 = *(char **)(a2 + 24);
  if (v7) {
    std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>((uint64_t)(a1 + 6), a1[7], v7, &v7[4 * *(void *)a2], *(void *)a2);
  }
  uint64_t v8 = *(char **)(a2 + 32);
  if (v8) {
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)(a1 + 9), a1[10], v8, &v8[8 * *(void *)a2], *(void *)a2);
  }
  int v9 = *(uint64_t **)(a2 + 8);
  uint64_t v10 = v9[*(void *)a2];
  uint64_t v11 = *v9;
  uint64_t v12 = v10 - *v9;
  if (*(void *)(a2 + 40))
  {
    std::vector<unsigned long>::resize((uint64_t)(a1 + 12), v12 + ((a1[13] - a1[12]) >> 3));
    uint64_t v13 = a1[13] == a1[12] ? 0 : a1[12];
    if (v10 != v11)
    {
      uint64_t v14 = (unint64_t *)(v13 + 8 * *(void *)(a1[1] - 8));
      unint64_t v15 = *(unint64_t **)(a2 + 40);
      uint64_t v16 = v12;
      do
      {
        unint64_t v18 = *v15++;
        unint64_t v17 = v18;
        *v14++ = v18;
        if (a1[21] > v18) {
          unint64_t v17 = a1[21];
        }
        a1[21] = v17;
        --v16;
      }
      while (v16);
    }
  }
  uint64_t v19 = v5 >> 3;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 15), v12 + ((a1[16] - a1[15]) >> 3));
  uint64_t v20 = a1[15];
  if (a1[16] == v20) {
    uint64_t v20 = 0;
  }
  uint64_t v21 = a1[1];
  if (v10 != v11)
  {
    int64_t v22 = (unint64_t *)(v20 + 8 * *(void *)(v21 - 8));
    char v23 = *(unint64_t **)(a2 + 48);
    uint64_t v24 = v12;
    do
    {
      unint64_t v26 = *v23++;
      unint64_t v25 = v26;
      *v22++ = v26;
      if (a1[22] > v26) {
        unint64_t v25 = a1[22];
      }
      a1[22] = v25;
      --v24;
    }
    while (v24);
  }
  if (*(void *)(a2 + 56))
  {
    std::vector<unsigned long>::resize((uint64_t)(a1 + 18), v12 + ((a1[19] - a1[18]) >> 3));
    uint64_t v27 = a1[18];
    uint64_t v28 = a1[19] - v27;
    if (!v28) {
      uint64_t v27 = 0;
    }
    memcpy((void *)(v27 + v28 - 8 * v12), *(const void **)(a2 + 56), 8 * v12);
    uint64_t v21 = a1[1];
  }
  uint64_t v29 = *(void *)(*a1 + 8 * v19);
  std::vector<unsigned long>::resize((uint64_t)a1, *(void *)a2 + ((v21 - *a1) >> 3));
  if (a1[1] == *a1) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *a1;
  }
  if (*(void *)a2)
  {
    uint64_t v31 = v30 + 8 * v19;
    int v32 = *(void **)(a2 + 8);
    unint64_t v33 = 1;
    do
      *(void *)(v31 + 8 * v33) = v32[v33] + v29 - *v32;
    while (v33++ < *(void *)a2);
  }
}

uint64_t dmlc::data::RowBlockContainer<unsigned long long,long long>::Save(void *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1[1] - *a1) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *a1, a1[1] - *a1);
  }
  uint64_t v5 = (uint64_t)(a1[4] - a1[3]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[3], a1[4] - a1[3]);
  }
  uint64_t v5 = (uint64_t)(a1[7] - a1[6]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[6], a1[7] - a1[6]);
  }
  uint64_t v5 = (uint64_t)(a1[10] - a1[9]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[9], a1[10] - a1[9]);
  }
  uint64_t v5 = (uint64_t)(a1[13] - a1[12]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[12], a1[13] - a1[12]);
  }
  uint64_t v5 = (uint64_t)(a1[16] - a1[15]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[15], a1[16] - a1[15]);
  }
  uint64_t v5 = (uint64_t)(a1[19] - a1[18]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, a1[18], a1[19] - a1[18]);
  }
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 8))(a2, a1 + 21, 8);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 8))(a2, a1 + 22, 8);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::~ThreadedIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E246F30;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_22E8F8248(_Unwind_Exception *a1)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,long long>::~DiskRowIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E246EB0;
  uint64_t v2 = a1 + 112;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Destroy(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::~ThreadedIter(v2);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_22E8F8360(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void dmlc::data::RowBlockContainer<unsigned long long,long long>::GetBlock(void *a1, uint64_t *a2)
{
  uint64_t v4 = a2[4] - a2[3];
  if (v4 && (v4 >> 3) + 1 != (a2[1] - *a2) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(a2[1] - 8) != (a2[16] - a2[15]) >> 3) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[18];
  uint64_t v6 = a2[19];
  if (v6 != v7 && *(void *)(v5 - 8) != (v6 - v7) >> 3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    int v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: offset.back() == value.size() || value.size() == 0", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
    uint64_t v5 = a2[1];
    uint64_t v7 = a2[18];
    uint64_t v6 = a2[19];
  }
  uint64_t v11 = *a2;
  uint64_t v13 = v5 - *a2;
  BOOL v12 = v13 == 0;
  uint64_t v14 = v13 >> 3;
  if (v12) {
    uint64_t v11 = 0;
  }
  *a1 = v14 - 1;
  a1[1] = v11;
  if (a2[4] == a2[3]) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = a2[3];
  }
  if (a2[7] == a2[6]) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = a2[6];
  }
  a1[2] = v15;
  a1[3] = v16;
  if (a2[10] == a2[9]) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = a2[9];
  }
  if (a2[13] == a2[12]) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = a2[12];
  }
  a1[4] = v17;
  a1[5] = v18;
  if (a2[16] == a2[15]) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = a2[15];
  }
  if (v6 == v7) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v7;
  }
  a1[6] = v19;
  a1[7] = v20;
}

void sub_22E8F8624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void *dmlc::data::BasicRowIter<unsigned long long,long long>::~BasicRowIter(void *a1)
{
  *a1 = &unk_26E2470A0;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  return a1;
}

void dmlc::data::BasicRowIter<unsigned long long,long long>::~BasicRowIter(void *a1)
{
  *a1 = &unk_26E2470A0;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,long long>::BeforeFirst(uint64_t result)
{
  *(unsigned char *)(result + 8) = 1;
  return result;
}

BOOL dmlc::data::BasicRowIter<unsigned long long,long long>::Next(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    *(unsigned char *)(a1 + 8) = 0;
  }
  return v1 != 0;
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,long long>::Value(uint64_t a1)
{
  return a1 + 16;
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,long long>::NumCol(uint64_t a1)
{
  return *(void *)(a1 + 256) + 1;
}

void std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<dmlc::ParamFieldInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<dmlc::ParamFieldInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(uint64_t a1)
{
  *(void *)a1 = &unk_26E2471A8;
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 136));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 128));
  *(void *)a1 = &unk_26E2471F8;
  uint64_t v4 = (void **)(a1 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void sub_22E8F8984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::mutex::~mutex((std::mutex *)(v10 + 136));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 + 128));
  *(void *)uint64_t v10 = &unk_26E2471F8;
  a10 = (void **)(v10 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::LibSVMParser<unsigned int,float>::~LibSVMParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E2470F8;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }

  return dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(a1);
}

void dmlc::data::LibSVMParser<unsigned int,float>::~LibSVMParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E2470F8;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8F8AA4(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C402E84ECB5);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned int,float>::BeforeFirst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 16))();
}

BOOL dmlc::data::ParserImpl<unsigned int,float>::Next(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  for (unsigned int i = *(_DWORD *)(a1 + 12); ; *(_DWORD *)(a1 + 12) = i)
  {
    uint64_t v5 = v3;
    unint64_t v6 = v3 <= i ? i : v3;
    uint64_t v7 = (176 * v3) | 8;
    while (v6 != v5)
    {
      *(_DWORD *)(a1 + 8) = ++v5;
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(v8 + v7) - *(void *)(v8 + v7 - 8);
      v7 += 176;
      if (v9 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned int,float>::GetBlock(v13, (uint64_t *)(v8 + v7 - 184));
        long long v10 = v13[1];
        *(_OWORD *)(a1 + 40) = v13[0];
        *(_OWORD *)(a1 + 56) = v10;
        long long v11 = v13[3];
        *(_OWORD *)(a1 + 72) = v13[2];
        *(_OWORD *)(a1 + 88) = v11;
        unint64_t v6 = v5 - 1;
        return v6 < i;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v2)) {
      break;
    }
    unsigned int v3 = 0;
    unsigned int i = -1171354717 * ((*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4);
    *(_DWORD *)(a1 + 8) = 0;
  }
  return v6 < i;
}

uint64_t dmlc::data::ParserImpl<unsigned int,float>::Value(uint64_t a1)
{
  return a1 + 40;
}

uint64_t dmlc::data::TextParserBase<unsigned int,float>::BytesRead(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t dmlc::data::TextParserBase<unsigned int,float>::ParseNext(uint64_t a1, void ***a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 120) + 32))(*(void *)(a1 + 120), &v38);
  uint64_t v5 = v4;
  if (!v4) {
    return v5;
  }
  int v6 = *(_DWORD *)(a1 + 104);
  uint64_t v7 = *a2;
  unint64_t v8 = (unint64_t)a2[1];
  unint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v8 - (void)*a2) >> 4);
  unint64_t v10 = v6 - v9;
  if (v6 > v9)
  {
    long long v11 = a2[2];
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)((uint64_t)v11 - v8) >> 4) < v10)
    {
      if (v6 < 0) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unsigned int v35 = v4;
      uint64_t v34 = a2[2];
      unint64_t v12 = 0x5D1745D1745D1746 * (((char *)v11 - (char *)v7) >> 4);
      if (v12 <= v6) {
        unint64_t v12 = v6;
      }
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)v7) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
        unint64_t v13 = 0x1745D1745D1745DLL;
      }
      else {
        unint64_t v13 = v12;
      }
      uint64_t v43 = a2 + 2;
      if (v13 > 0x1745D1745D1745DLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = 22 * v13;
      uint64_t v15 = (void **)operator new(176 * v13);
      uint64_t v16 = &v15[22 * v9];
      unint64_t v40 = v15;
      v41.i64[0] = (uint64_t)v16;
      unint64_t v33 = &v15[v14];
      uint64_t v42 = &v15[v14];
      uint64_t v17 = &v15[22 * v6];
      uint64_t v18 = 176 * v6 - 176 * v9;
      uint64_t v19 = v16;
      do
      {
        v19[20] = 0;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)uint64_t v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        uint64_t v20 = operator new(8uLL);
        void *v20 = 0;
        v19[1] = v20 + 1;
        _OWORD v19[2] = v20 + 1;
        void *v19 = v20;
        v19[4] = 0;
        v19[13] = 0;
        v19[16] = 0;
        v19[19] = 0;
        v19[7] = 0;
        v19[10] = 0;
        v19[21] = 0;
        v19 += 22;
        v18 -= 176;
      }
      while (v18);
      v41.i64[1] = (uint64_t)v17;
      uint64_t v5 = v35;
      if ((void **)v8 == v7)
      {
        int64x2_t v25 = vdupq_n_s64(v8);
        uint64_t v27 = v33;
        unint64_t v26 = v34;
      }
      else
      {
        unint64_t v21 = 0;
        do
        {
          unint64_t v22 = v8 + v21;
          char v23 = &v16[v21 / 8];
          *((_OWORD *)v23 - 11) = *(_OWORD *)(v8 + v21 - 176);
          *(v23 - 20) = *(void **)(v8 + v21 - 160);
          *(void *)(v22 - 176) = 0;
          *(void *)(v22 - 168) = 0;
          *(void *)(v22 - 160) = 0;
          *(_OWORD *)(v23 - 19) = *(_OWORD *)(v8 + v21 - 152);
          *(v23 - 17) = *(void **)(v8 + v21 - 136);
          *(void *)(v22 - 152) = 0;
          *(void *)(v22 - 144) = 0;
          *(void *)(v22 - 136) = 0;
          *((_OWORD *)v23 - 8) = *(_OWORD *)(v8 + v21 - 128);
          *(v23 - 14) = *(void **)(v8 + v21 - 112);
          *(void *)(v22 - 128) = 0;
          *(void *)(v22 - 120) = 0;
          *(void *)(v22 - 112) = 0;
          *(_OWORD *)(v23 - 13) = *(_OWORD *)(v8 + v21 - 104);
          *(v23 - 11) = *(void **)(v8 + v21 - 88);
          *(void *)(v22 - 104) = 0;
          *(void *)(v22 - 96) = 0;
          *(void *)(v22 - 88) = 0;
          *((_OWORD *)v23 - 5) = *(_OWORD *)(v8 + v21 - 80);
          *(v23 - 8) = *(void **)(v8 + v21 - 64);
          *(void *)(v22 - 80) = 0;
          *(void *)(v22 - 72) = 0;
          long long v24 = *(_OWORD *)(v8 + v21 - 56);
          *(void *)(v22 - 64) = 0;
          *(_OWORD *)(v23 - 7) = v24;
          *(v23 - 5) = *(void **)(v8 + v21 - 40);
          *(void *)(v22 - 56) = 0;
          *(void *)(v22 - 48) = 0;
          *(void *)(v22 - 40) = 0;
          *((_OWORD *)v23 - 2) = *(_OWORD *)(v8 + v21 - 32);
          *(v23 - 2) = *(void **)(v8 + v21 - 16);
          *(void *)(v22 - 32) = 0;
          *(void *)(v22 - 24) = 0;
          *(void *)(v22 - 16) = 0;
          *(v23 - 1) = *(void **)(v8 + v21 - 8);
          v21 -= 176;
        }
        while ((void **)(v8 + v21) != v7);
        int64x2_t v25 = *(int64x2_t *)a2;
        unint64_t v26 = a2[2];
        uint64_t v16 = (void **)((char *)v16 + v21);
        uint64_t v17 = (void **)v41.i64[1];
        uint64_t v27 = v42;
      }
      *a2 = v16;
      a2[1] = v17;
      int64x2_t v41 = v25;
      a2[2] = v27;
      uint64_t v42 = v26;
      unint64_t v40 = (void **)v25.i64[0];
      std::__split_buffer<dmlc::data::RowBlockContainer<unsigned int,float>>::~__split_buffer((uint64_t)&v40);
      goto LABEL_26;
    }
    unint64_t v28 = v8 + 176 * v10;
    uint64_t v29 = 176 * v6 - 16 * ((uint64_t)(v8 - (void)*a2) >> 4);
    do
    {
      *(void *)(v8 + 160) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)unint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      uint64_t v30 = operator new(8uLL);
      *uint64_t v30 = 0;
      *(void *)(v8 + 8) = v30 + 1;
      *(void *)(v8 + 16) = v30 + 1;
      *(void *)unint64_t v8 = v30;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 104) = 0;
      *(void *)(v8 + 128) = 0;
      *(void *)(v8 + 152) = 0;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 168) = 0;
      v8 += 176;
      v29 -= 176;
    }
    while (v29);
    goto LABEL_23;
  }
  if (v6 < v9)
  {
    unint64_t v28 = (unint64_t)&v7[22 * v6];
    while (v8 != v28)
    {
      v8 -= 176;
      dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v8);
    }
LABEL_23:
    a2[1] = (void **)v28;
  }
LABEL_26:
  uint64_t v31 = v39;
  *(void *)(a1 + 112) += v39;
  LODWORD(v36) = 0;
  if (!v31) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  if (v6 >= 1) {
    operator new();
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)(a1 + 128));
  *(_DWORD *)(a1 + 8) = 0;
  unint64_t v40 = (void **)&v36;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](&v40);
  return v5;
}

void sub_22E8F9248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::thread a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23 = a20;
  a20 = 0;
  if (v23) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v23);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::data::LibSVMParser<unsigned int,float>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v8 = *(uint64_t **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v10 = a4 + 16;
  unint64_t v9 = *(void *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v12 = v9 - (void)v8;
    uint64_t v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    uint64_t v16 = *(uint64_t **)a4;
    uint64_t v17 = *(uint64_t **)(a4 + 8);
    uint64_t v19 = &v15[v18];
    *uint64_t v15 = 0;
    long long v11 = v15 + 1;
    while (v17 != v16)
    {
      uint64_t v20 = *--v17;
      *--uint64_t v15 = v20;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = v19;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v8 = 0;
    long long v11 = v8 + 1;
  }
  uint64_t v21 = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = v11;
  *(void *)(a4 + 32) = v21;
  *(void *)(a4 + 104) = *(void *)(a4 + 96);
  v156 = (void **)(a4 + 120);
  *(void *)(a4 + 128) = *(void *)(a4 + 120);
  v154 = (void **)(a4 + 144);
  *(void *)(a4 + 152) = *(void *)(a4 + 144);
  v153 = (void **)(a4 + 48);
  *(void *)(a4 + 56) = *(void *)(a4 + 48);
  v151 = (void **)(a4 + 72);
  *(void *)(a4 + 80) = *(void *)(a4 + 72);
  *(void *)(a4 + 168) = 0;
  v155 = (void **)(a4 + 24);
  if (a2 == a3)
  {
    unsigned int v158 = -1;
    goto LABEL_214;
  }
  uint64_t v152 = v10;
  v157 = (void *)(a4 + 40);
  uint64_t v150 = a1;
  unsigned int v158 = -1;
  do
  {
    unint64_t v22 = a2;
    uint64_t v23 = a2 + 1;
    while (v23 != a3)
    {
      int v25 = *v23++;
      int v24 = v25;
      BOOL v26 = v25 == 13 || v24 == 10;
      if (v26)
      {
        uint64_t v27 = v23 - 2;
        a2 = v23 - 1;
        goto LABEL_24;
      }
    }
    uint64_t v27 = a3 - 1;
    a2 = a3;
LABEL_24:
    v161 = 0;
    int v160 = 0;
    int v159 = 0;
    if (v22 != a2)
    {
      while (1)
      {
        int v28 = *v22;
        if (v28 != 9 && v28 != 32) {
          break;
        }
        BOOL v26 = v22++ == v27;
        if (v26)
        {
          unint64_t v22 = a2;
          goto LABEL_32;
        }
      }
      if (v28 == 35) {
        unint64_t v22 = a2;
      }
    }
LABEL_32:
    int v29 = dmlc::ParsePair<float,float>(v22, (uint64_t)a2, (uint64_t *)&v161, (float *)&v160, (float *)&v159);
    if (v29)
    {
      if (v29 == 2)
      {
        uint64_t v31 = *(char **)(a4 + 56);
        unint64_t v30 = *(void *)(a4 + 64);
        if ((unint64_t)v31 >= v30)
        {
          unint64_t v33 = (char *)*v153;
          uint64_t v34 = (v31 - (unsigned char *)*v153) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = v30 - (void)v33;
          if (v36 >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v37);
            unint64_t v33 = *(char **)(a4 + 48);
            uint64_t v31 = *(char **)(a4 + 56);
          }
          else
          {
            uint64_t v38 = 0;
          }
          uint64_t v39 = &v38[4 * v34];
          *(_DWORD *)uint64_t v39 = v159;
          int v32 = v39 + 4;
          while (v31 != v33)
          {
            int v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(void *)(a4 + 48) = v39;
          *(void *)(a4 + 56) = v32;
          *(void *)(a4 + 64) = &v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v31 = v159;
          int v32 = v31 + 4;
        }
        *(void *)(a4 + 56) = v32;
      }
      int64x2_t v41 = *(char **)(a4 + 32);
      if (v41 != *(char **)(a4 + 24))
      {
        uint64_t v42 = (uint64_t)(*(void *)(a4 + 128) - *(void *)(a4 + 120)) >> 2;
        unint64_t v44 = *(uint64_t **)(a4 + 8);
        unint64_t v43 = *(void *)(a4 + 16);
        if ((unint64_t)v44 >= v43)
        {
          uint64_t v46 = *(uint64_t **)a4;
          uint64_t v47 = ((uint64_t)v44 - *(void *)a4) >> 3;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61) {
            goto LABEL_244;
          }
          uint64_t v49 = v43 - (void)v46;
          if (v49 >> 2 > v48) {
            unint64_t v48 = v49 >> 2;
          }
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v48;
          }
          if (v50)
          {
            unint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v152, v50);
            uint64_t v46 = *(uint64_t **)a4;
            unint64_t v44 = *(uint64_t **)(a4 + 8);
          }
          else
          {
            unint64_t v51 = 0;
          }
          uint64_t v52 = (uint64_t *)&v51[8 * v47];
          uint64_t *v52 = v42;
          uint64_t v45 = v52 + 1;
          while (v44 != v46)
          {
            uint64_t v53 = *--v44;
            *--uint64_t v52 = v53;
          }
          *(void *)a4 = v52;
          *(void *)(a4 + 8) = v45;
          *(void *)(a4 + 16) = &v51[8 * v50];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *unint64_t v44 = v42;
          uint64_t v45 = v44 + 1;
        }
        *(void *)(a4 + 8) = v45;
        int64x2_t v41 = *(char **)(a4 + 32);
      }
      if ((unint64_t)v41 >= *v157)
      {
        uint64_t v55 = (char *)*v155;
        uint64_t v56 = (v41 - (unsigned char *)*v155) >> 2;
        unint64_t v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v58 = *v157 - (void)v55;
        if (v58 >> 1 > v57) {
          unint64_t v57 = v58 >> 1;
        }
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v57;
        }
        if (v59)
        {
          uint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v157, v59);
          uint64_t v55 = *(char **)(a4 + 24);
          int64x2_t v41 = *(char **)(a4 + 32);
        }
        else
        {
          uint64_t v60 = 0;
        }
        uint64_t v61 = &v60[4 * v56];
        *(_DWORD *)uint64_t v61 = v160;
        uint64_t v54 = v61 + 4;
        while (v41 != v55)
        {
          int v62 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *((_DWORD *)v61 - 1) = v62;
          v61 -= 4;
        }
        *(void *)(a4 + 24) = v61;
        *(void *)(a4 + 32) = v54;
        *(void *)(a4 + 40) = &v60[4 * v59];
        if (v55) {
          operator delete(v55);
        }
      }
      else
      {
        *(_DWORD *)int64x2_t v41 = v160;
        uint64_t v54 = v41 + 4;
      }
      *(void *)(a4 + 32) = v54;
      for (unsigned int i = v161; i != (const char *)a3; ++i)
      {
        if (*i != 32) {
          goto LABEL_90;
        }
      }
      unsigned int i = (const char *)a3;
LABEL_90:
      if (i != (const char *)a2)
      {
        if (!strncmp(i, "qid:", 4uLL))
        {
          uint64_t v65 = atoll(i + 4);
          uint64_t v66 = v65;
          uint64_t v64 = a2;
          if (i + 4 != (const char *)a2)
          {
            uint64_t v64 = (unsigned __int8 *)(i + 4);
            while (1)
            {
              int v67 = *v64;
              if ((v67 - 48) >= 0xA)
              {
                unsigned int v68 = v67 - 43;
                BOOL v69 = v68 > 0x3A;
                uint64_t v70 = (1 << v68) & 0x40000000400000DLL;
                if (v69 || v70 == 0) {
                  break;
                }
              }
              BOOL v26 = v64++ == v27;
              if (v26)
              {
                uint64_t v64 = v27 + 1;
                break;
              }
            }
          }
          int v73 = *(uint64_t **)(a4 + 80);
          unint64_t v72 = *(void *)(a4 + 88);
          if ((unint64_t)v73 >= v72)
          {
            unint64_t v75 = (uint64_t *)*v151;
            uint64_t v76 = ((char *)v73 - (unsigned char *)*v151) >> 3;
            unint64_t v77 = v76 + 1;
            if ((unint64_t)(v76 + 1) >> 61) {
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v78 = v72 - (void)v75;
            if (v78 >> 2 > v77) {
              unint64_t v77 = v78 >> 2;
            }
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v79 = v77;
            }
            if (v79)
            {
              uint64_t v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 88, v79);
              unint64_t v75 = *(uint64_t **)(a4 + 72);
              int v73 = *(uint64_t **)(a4 + 80);
            }
            else
            {
              uint64_t v80 = 0;
            }
            uint64_t v81 = (uint64_t *)&v80[8 * v76];
            *uint64_t v81 = v66;
            uint64_t v74 = v81 + 1;
            while (v73 != v75)
            {
              uint64_t v82 = *--v73;
              *--uint64_t v81 = v82;
            }
            *(void *)(a4 + 72) = v81;
            *(void *)(a4 + 80) = v74;
            *(void *)(a4 + 88) = &v80[8 * v79];
            if (v75) {
              operator delete(v75);
            }
          }
          else
          {
            *int v73 = v65;
            uint64_t v74 = v73 + 1;
          }
          *(void *)(a4 + 80) = v74;
        }
        else
        {
          uint64_t v64 = (unsigned __int8 *)i;
        }
        while (2)
        {
          if (v64 != a2)
          {
            int v83 = v64 - 1;
            while (1)
            {
              int v84 = v83[1];
              if (v84 != 9 && v84 != 32) {
                break;
              }
              ++v64;
              if (++v83 == v27)
              {
                uint64_t v85 = a2;
                goto LABEL_130;
              }
            }
            if (v84 == 35) {
              uint64_t v85 = a2;
            }
            else {
              uint64_t v85 = v64;
            }
            while (1)
            {
LABEL_130:
              if (v85 == a2) {
                goto LABEL_209;
              }
              int v86 = *v85;
              if ((v86 - 48) < 0xA) {
                break;
              }
              unsigned int v87 = v86 - 43;
              BOOL v69 = v87 > 0x3A;
              uint64_t v88 = (1 << v87) & 0x40000000400000DLL;
              if (!v69 && v88 != 0) {
                break;
              }
              ++v85;
            }
            if (v85 == a2)
            {
              unsigned int v94 = dmlc::ParseUnsignedInt<unsigned int>(a2);
            }
            else
            {
              uint64_t v64 = v85;
              while (1)
              {
                int v90 = *v64;
                if ((v90 - 48) >= 0xA)
                {
                  unsigned int v91 = v90 - 43;
                  BOOL v69 = v91 > 0x3A;
                  uint64_t v92 = (1 << v91) & 0x40000000400000DLL;
                  if (v69 || v92 == 0) {
                    break;
                  }
                }
                if (++v64 == a2)
                {
                  uint64_t v64 = a2;
                  break;
                }
              }
              unsigned int v94 = dmlc::ParseUnsignedInt<unsigned int>(v85);
              if (v64 != a2)
              {
                uint64_t v95 = v64 + 1;
                while (1)
                {
                  int v96 = *v64;
                  if (v96 != 9 && v96 != 32) {
                    break;
                  }
                  ++v64;
                  ++v95;
                  if (v64 == a2) {
                    goto LABEL_152;
                  }
                }
                if (v96 == 58)
                {
                  while (1)
                  {
                    if (v95 == a2)
                    {
                      uint64_t v64 = a2;
                      goto LABEL_171;
                    }
                    int v108 = *v95;
                    if ((v108 - 48) < 0xA) {
                      break;
                    }
                    ++v64;
                    ++v95;
                    unsigned int v109 = v108 - 43;
                    BOOL v69 = v109 > 0x3A;
                    uint64_t v110 = (1 << v109) & 0x40000000400000DLL;
                    if (!v69 && v110 != 0) {
                      goto LABEL_171;
                    }
                  }
                  uint64_t v64 = v95;
LABEL_171:
                  v112 = a2;
                  if (v64 != a2)
                  {
                    v112 = v64;
                    while (1)
                    {
                      int v113 = *v112;
                      if ((v113 - 48) >= 0xA)
                      {
                        unsigned int v114 = v113 - 43;
                        BOOL v69 = v114 > 0x3A;
                        uint64_t v115 = (1 << v114) & 0x40000000400000DLL;
                        if (v69 || v115 == 0) {
                          break;
                        }
                      }
                      if (++v112 == a2)
                      {
                        v112 = a2;
                        break;
                      }
                    }
                  }
                  v161 = (const char *)v112;
                  float v98 = dmlc::ParseFloat<float,false>((uint64_t)v64, 0);
                  int v97 = 1;
                  uint64_t v64 = v112;
                  goto LABEL_154;
                }
LABEL_153:
                int v97 = 0;
                v161 = (const char *)v64;
                float v98 = 0.0;
LABEL_154:
                v100 = *(char **)(a4 + 128);
                unint64_t v99 = *(void *)(a4 + 136);
                if ((unint64_t)v100 >= v99)
                {
                  uint64_t v102 = (char *)*v156;
                  uint64_t v103 = (v100 - (unsigned char *)*v156) >> 2;
                  unint64_t v104 = v103 + 1;
                  if ((unint64_t)(v103 + 1) >> 62) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v105 = v99 - (void)v102;
                  if (v105 >> 1 > v104) {
                    unint64_t v104 = v105 >> 1;
                  }
                  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v106 = v104;
                  }
                  if (v106)
                  {
                    v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 136, v106);
                    uint64_t v102 = *(char **)(a4 + 120);
                    v100 = *(char **)(a4 + 128);
                  }
                  else
                  {
                    v107 = 0;
                  }
                  v117 = (unsigned int *)&v107[4 * v103];
                  unsigned int *v117 = v94;
                  uint64_t v101 = v117 + 1;
                  while (v100 != v102)
                  {
                    unsigned int v118 = *((_DWORD *)v100 - 1);
                    v100 -= 4;
                    *--v117 = v118;
                  }
                  *(void *)(a4 + 120) = v117;
                  *(void *)(a4 + 128) = v101;
                  *(void *)(a4 + 136) = &v107[4 * v106];
                  if (v102) {
                    operator delete(v102);
                  }
                }
                else
                {
                  *(_DWORD *)v100 = v94;
                  uint64_t v101 = v100 + 4;
                }
                *(void *)(a4 + 128) = v101;
                unsigned int v119 = v158;
                if (v158 >= v94) {
                  unsigned int v119 = v94;
                }
                unsigned int v158 = v119;
                if (v97)
                {
                  v121 = *(char **)(a4 + 152);
                  unint64_t v120 = *(void *)(a4 + 160);
                  if ((unint64_t)v121 >= v120)
                  {
                    v123 = (char *)*v154;
                    uint64_t v124 = (v121 - (unsigned char *)*v154) >> 2;
                    unint64_t v125 = v124 + 1;
                    if ((unint64_t)(v124 + 1) >> 62) {
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v126 = v120 - (void)v123;
                    if (v126 >> 1 > v125) {
                      unint64_t v125 = v126 >> 1;
                    }
                    if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v127 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v127 = v125;
                    }
                    if (v127)
                    {
                      v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v127);
                      v123 = *(char **)(a4 + 144);
                      v121 = *(char **)(a4 + 152);
                    }
                    else
                    {
                      v128 = 0;
                    }
                    v129 = (float *)&v128[4 * v124];
                    float *v129 = v98;
                    v122 = v129 + 1;
                    while (v121 != v123)
                    {
                      int v130 = *((_DWORD *)v121 - 1);
                      v121 -= 4;
                      *((_DWORD *)v129-- - 1) = v130;
                    }
                    *(void *)(a4 + 144) = v129;
                    *(void *)(a4 + 152) = v122;
                    *(void *)(a4 + 160) = &v128[4 * v127];
                    if (v123) {
                      operator delete(v123);
                    }
                  }
                  else
                  {
                    *(float *)v121 = v98;
                    v122 = v121 + 4;
                  }
                  *(void *)(a4 + 152) = v122;
                }
                continue;
              }
            }
LABEL_152:
            uint64_t v64 = a2;
            goto LABEL_153;
          }
          break;
        }
      }
    }
LABEL_209:
    ;
  }
  while (a2 != a3);
  uint64_t v21 = *(void *)(a4 + 32);
  long long v11 = *(uint64_t **)(a4 + 8);
  a1 = v150;
  if (v21 == *(void *)(a4 + 24))
  {
LABEL_214:
    uint64_t v134 = v21;
    goto LABEL_230;
  }
  uint64_t v131 = (uint64_t)(*(void *)(a4 + 128) - *(void *)(a4 + 120)) >> 2;
  unint64_t v132 = *(void *)(a4 + 16);
  if ((unint64_t)v11 >= v132)
  {
    v135 = *(uint64_t **)a4;
    uint64_t v136 = ((uint64_t)v11 - *(void *)a4) >> 3;
    unint64_t v137 = v136 + 1;
    if ((unint64_t)(v136 + 1) >> 61) {
LABEL_244:
    }
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    uint64_t v138 = v132 - (void)v135;
    if (v138 >> 2 > v137) {
      unint64_t v137 = v138 >> 2;
    }
    if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v139 = v137;
    }
    if (v139)
    {
      v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v152, v139);
      v135 = *(uint64_t **)a4;
      long long v11 = *(uint64_t **)(a4 + 8);
    }
    else
    {
      v140 = 0;
    }
    v141 = (uint64_t *)&v140[8 * v136];
    v142 = &v140[8 * v139];
    uint64_t *v141 = v131;
    v133 = v141 + 1;
    while (v11 != v135)
    {
      uint64_t v143 = *--v11;
      *--v141 = v143;
    }
    *(void *)a4 = v141;
    *(void *)(a4 + 8) = v133;
    *(void *)(a4 + 16) = v142;
    if (v135) {
      operator delete(v135);
    }
  }
  else
  {
    uint64_t *v11 = v131;
    v133 = v11 + 1;
  }
  *(void *)(a4 + 8) = v133;
  long long v11 = v133;
  uint64_t v21 = *(void *)(a4 + 24);
  uint64_t v134 = *(void *)(a4 + 32);
LABEL_230:
  if (((v134 - v21) >> 2) + 1 != ((uint64_t)v11 - *(void *)a4) >> 3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./libsvm_parser.h");
    v145 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
    v146 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v161);
  }
  int v147 = *(_DWORD *)(a1 + 224);
  if (v147 >= 1)
  {
    v148 = *(_DWORD **)(a4 + 120);
    v149 = *(_DWORD **)(a4 + 128);
    goto LABEL_239;
  }
  if (v147 < 0)
  {
    v148 = *(_DWORD **)(a4 + 120);
    v149 = *(_DWORD **)(a4 + 128);
    if (v148 != v149)
    {
      if (v158)
      {
LABEL_239:
        while (v148 != v149)
          --*v148++;
      }
    }
  }
}

void sub_22E8F9DAC(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 104));
  _Unwind_Resume(a1);
}

void std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v4 - 176);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<dmlc::data::RowBlockContainer<unsigned int,float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 176;
    dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(i - 176);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::thread>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::thread::~thread((std::thread *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>(uint64_t a1)
{
  uint64_t v18 = (uint64_t *)a1;
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
  unint64_t v5 = *(void *)(*(void *)(a1 + 8) + 8);
  unint64_t v7 = *(int *)(a1 + 32);
  uint64_t v6 = *(int *)(a1 + 36);
  unint64_t v8 = (v5 + v7 - 1) / v7;
  if (v5 >= v8 * v6) {
    unint64_t v9 = v8 * v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
  }
  unint64_t v10 = v8 * (v6 + 1);
  if (v5 >= v10) {
    unint64_t v5 = v10;
  }
  long long v11 = &v4[v9];
  if (v9)
  {
    while (1)
    {
      int v12 = *v11;
      if (v12 == 10 || v12 == 13) {
        break;
      }
      if (--v11 == v4)
      {
        long long v11 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  unint64_t v14 = &v4[v5];
  if (v6 + 1 != v7 && v5)
  {
    while (1)
    {
      int v15 = *v14;
      if (v15 == 10 || v15 == 13) {
        break;
      }
      if (--v14 == v4)
      {
        unint64_t v14 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  (*(void (**)(void, unsigned __int8 *, unsigned __int8 *, uint64_t))(**(void **)(a1 + 40) + 56))(*(void *)(a1 + 40), v11, v14, **(void **)(a1 + 24) + 176 * (int)v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v18);
  return 0;
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](uint64_t **result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

void std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (std::thread *)**a1;
  if (v2)
  {
    uint64_t v4 = (std::thread *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        std::thread::~thread(v4 - 1);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t dmlc::ParsePair<float,float>(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, float *a4, float *a5)
{
  uint64_t v6 = (unsigned __int8 *)a2;
  if (a1 == (unsigned __int8 *)a2)
  {
LABEL_9:
    uint64_t result = 0;
    *a3 = a2;
  }
  else
  {
    while (1)
    {
      int v8 = *a1;
      if ((v8 - 48) < 0xA) {
        break;
      }
      unsigned int v9 = v8 - 43;
      BOOL v10 = v9 > 0x3A;
      uint64_t v11 = (1 << v9) & 0x40000000400000DLL;
      if (!v10 && v11 != 0) {
        break;
      }
      if (++a1 == (unsigned __int8 *)a2) {
        goto LABEL_9;
      }
    }
    if (a1 == (unsigned __int8 *)a2)
    {
      *a4 = dmlc::ParseFloat<float,false>(a2, 0);
    }
    else
    {
      unint64_t v14 = a1;
      while (1)
      {
        int v15 = *v14;
        if ((v15 - 48) >= 0xA)
        {
          unsigned int v16 = v15 - 43;
          BOOL v10 = v16 > 0x3A;
          uint64_t v17 = (1 << v16) & 0x40000000400000DLL;
          if (v10 || v17 == 0) {
            break;
          }
        }
        if (++v14 == (unsigned __int8 *)a2)
        {
          unint64_t v14 = (unsigned __int8 *)a2;
          break;
        }
      }
      *a4 = dmlc::ParseFloat<float,false>((uint64_t)a1, 0);
      while (v14 != v6)
      {
        int v19 = *v14;
        if (v19 != 9 && v19 != 32)
        {
          if (v19 != 58)
          {
            uint64_t v6 = v14;
            break;
          }
          uint64_t v20 = v14 + 1;
          while (1)
          {
            if (v20 == v6)
            {
              unint64_t v14 = v6;
              goto LABEL_38;
            }
            int v21 = *v20;
            if ((v21 - 48) < 0xA) {
              break;
            }
            ++v14;
            ++v20;
            unsigned int v22 = v21 - 43;
            BOOL v10 = v22 > 0x3A;
            uint64_t v23 = (1 << v22) & 0x40000000400000DLL;
            if (!v10 && v23 != 0) {
              goto LABEL_38;
            }
          }
          unint64_t v14 = v20;
LABEL_38:
          if (v14 == v6)
          {
LABEL_46:
            int v25 = v6;
          }
          else
          {
            int v25 = v14;
            while (1)
            {
              int v26 = *v25;
              if ((v26 - 48) >= 0xA)
              {
                unsigned int v27 = v26 - 43;
                BOOL v10 = v27 > 0x3A;
                uint64_t v28 = (1 << v27) & 0x40000000400000DLL;
                if (v10 || v28 == 0) {
                  break;
                }
              }
              if (++v25 == v6) {
                goto LABEL_46;
              }
            }
          }
          *a3 = (uint64_t)v25;
          *a5 = dmlc::ParseFloat<float,false>((uint64_t)v14, 0);
          return 2;
        }
        ++v14;
      }
    }
    *a3 = (uint64_t)v6;
    return 1;
  }
  return result;
}

float dmlc::ParseFloat<float,false>(uint64_t a1, uint64_t *a2)
{
  for (uint64_t i = a1 + 4; ; ++i)
  {
    unsigned int v3 = *(unsigned __int8 *)(i - 4);
    if (v3 > 0x20 || ((1 << v3) & 0x100003600) == 0) {
      break;
    }
  }
  uint64_t v5 = 0;
  BOOL v6 = v3 == 45 || v3 == 43;
  uint64_t v7 = v6;
  if (v6) {
    uint64_t v8 = i + 1;
  }
  else {
    uint64_t v8 = i;
  }
  uint64_t v9 = v8 + 4;
  while ((*(unsigned __int8 *)(v8 + v5 - 4) | 0x20) == aInfinity[v5])
  {
    if (++v5 == 8) {
      goto LABEL_22;
    }
  }
  uint64_t v9 = i + v7 + v5 - 4;
  if (v5 == 8 || v5 == 3)
  {
LABEL_22:
    if (a2) {
      *a2 = v9;
    }
    BOOL v10 = v3 == 45;
    float result = INFINITY;
    float v12 = -INFINITY;
    goto LABEL_25;
  }
  uint64_t v13 = 0;
  unint64_t v14 = (unsigned char *)(i + v7 - 1);
  while ((*(unsigned __int8 *)(i + v7 + v13 - 4) | 0x20) == aNan[v13])
  {
    if (++v13 == 3)
    {
      if (*v14 == 40)
      {
        for (int j = (char *)(i + v7); ; ++j)
        {
          int v16 = *j;
          if ((v16 - 48) >= 0xA && v16 != 95 && (v16 & 0xFFFFFFDF) - 65 > 0x19) {
            break;
          }
        }
        char v37 = 41;
        if (v16 != 41) {
          dmlc::LogCheckFormat<char,char>(j, &v37);
        }
        unint64_t v14 = j + 1;
      }
      if (a2) {
        *a2 = (uint64_t)v14;
      }
      return NAN;
    }
  }
  int v19 = (unsigned __int8 *)(i + v7 - 4);
  unsigned int v18 = *v19;
  float result = 0.0;
  if (v18 - 48 <= 9)
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v20 = 10 * v20 + v18 - 48;
      unsigned int v21 = *++v19;
      unsigned int v18 = v21;
    }
    while (v21 - 48 < 0xA);
    float result = (float)(unint64_t)v20;
  }
  if (v18 == 46)
  {
    unsigned int v18 = v19[1];
    if (v18 - 48 > 9)
    {
      float v26 = 0.0;
      ++v19;
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      unint64_t v24 = 1;
      do
      {
        uint64_t v25 = 10 * v23 + v18 - 48;
        if (v22 < 0x13)
        {
          v24 *= 10;
          unint64_t v23 = v25;
        }
        unsigned int v18 = v19[v22++ + 2];
      }
      while (v18 - 48 < 0xA);
      float v26 = (double)v23 / (double)v24;
      v19 += v22 + 1;
    }
    float result = result + v26;
  }
  if ((v18 | 0x20) == 0x65)
  {
    int v27 = v19[1];
    uint64_t v28 = v19 + 2;
    BOOL v29 = v27 == 45 || v27 == 43;
    uint64_t v30 = 1;
    if (v29) {
      uint64_t v30 = 2;
    }
    else {
      uint64_t v28 = v19 + 1;
    }
    unsigned int v18 = v19[v30];
    float v31 = 1.0;
    if (v18 - 48 <= 9)
    {
      unsigned int v32 = 0;
      do
      {
        unsigned int v32 = v18 + 10 * v32 - 48;
        unsigned int v33 = *++v28;
        unsigned int v18 = v33;
      }
      while (v33 - 48 < 0xA);
      if (v32 >= 0x26)
      {
        unsigned int v32 = 38;
        float v34 = 3.4028;
        BOOL v35 = result > 3.4028;
        if (v27 == 45)
        {
          BOOL v35 = result < 1.1755;
          float v34 = 1.1755;
        }
        if (v35) {
          float result = v34;
        }
      }
      float v31 = 1.0;
      if (v32 >= 8)
      {
        do
        {
          float v31 = v31 * 100000000.0;
          v32 -= 8;
        }
        while (v32 > 7);
      }
      for (; v32; --v32)
        float v31 = v31 * 10.0;
    }
    if (v27 == 45) {
      float result = result / v31;
    }
    else {
      float result = result * v31;
    }
  }
  else
  {
    uint64_t v28 = v19;
  }
  if ((v18 | 0x20) == 0x66) {
    uint64_t v36 = v28 + 1;
  }
  else {
    uint64_t v36 = v28;
  }
  if (a2) {
    *a2 = (uint64_t)v36;
  }
  float v12 = -result;
  BOOL v10 = v3 == 45;
LABEL_25:
  if (v10) {
    return v12;
  }
  return result;
}

void sub_22E8FA7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ParseUnsignedInt<unsigned int>(unsigned __int8 *a1)
{
  while (1)
  {
    unsigned int v2 = *a1;
    if (v2 > 0x20 || ((1 << v2) & 0x100003600) == 0) {
      break;
    }
    ++a1;
  }
  char v9 = 1;
  if (v2 == 43)
  {
    ++a1;
  }
  else if (v2 == 45)
  {
    char v9 = 0;
    char v8 = 1;
    dmlc::LogCheckFormat<BOOL,BOOL>();
  }
  int v4 = *a1;
  if ((v4 - 48) > 9) {
    return 0;
  }
  LODWORD(result) = 0;
  BOOL v6 = a1 + 1;
  do
  {
    uint64_t result = (v4 + 10 * result - 48);
    int v7 = *v6++;
    int v4 = v7;
  }
  while ((v7 - 48) < 0xA);
  return result;
}

void sub_22E8FA94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, uint64_t a13)
{
  uint64_t v14 = a13;
  a13 = 0;
  if (v14) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::LogCheckFormat<BOOL,BOOL>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E8FAB18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26E247240;
  unsigned int v3 = (void *)(a1 + 112);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = &unk_26E2472A0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 850045863;
  int v4 = (std::mutex *)(a1 + 232);
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 304) = 1018212795;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 1018212795;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 160) = xmmword_22EA18F70;
  *(_OWORD *)(a1 + 176) = 0u;
  v6[0] = &unk_26E247300;
  v6[1] = a2;
  v6[3] = v6;
  v5[0] = &unk_26E247390;
  v5[1] = a2;
  uint64_t v5[3] = v5;
  atomic_store(0, (unsigned int *)(a1 + 136));
  atomic_store(0, (unsigned __int8 *)(a1 + 140));
  atomic_store(0, (unsigned __int8 *)(a1 + 152));
  std::mutex::lock((std::mutex *)(a1 + 232));
  v7.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 504), &v7);
  std::exception_ptr::~exception_ptr(&v7);
  std::mutex::unlock(v4);
  v7.__ptr_ = v3;
  std::__function::__value_func<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::__value_func[abi:ne180100]((uint64_t)&v8, (uint64_t)v6);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)v5);
  operator new();
}

void sub_22E8FAE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::thread a11, char a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::thread::~thread(&a11);
  MEMORY[0x230FA80D0](v22, 0xA1C40BD48D6D6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a14);
  std::__function::__value_func<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::~__value_func[abi:ne180100](&a18);
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::~ThreadedIter(v19);
  void *v18 = &unk_26E2471F8;
  a10 = v18 + 2;
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void dmlc::data::ThreadedParser<unsigned int,float>::~ThreadedParser(uint64_t a1)
{
  dmlc::data::ThreadedParser<unsigned int,float>::~ThreadedParser(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8FAFD0(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F1C40C5550835);
  _Unwind_Resume(a1);
}

void dmlc::data::ThreadedParser<unsigned int,float>::BeforeFirst(uint64_t a1)
{
}

BOOL dmlc::data::ThreadedParser<unsigned int,float>::Next(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 512);
  uint64_t v3 = a1 + 112;
  int v4 = (std::mutex *)(a1 + 168);
  uint64_t v5 = (void *)(a1 + 456);
  BOOL v6 = (std::condition_variable *)(a1 + 304);
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  for (unsigned int i = *(_DWORD *)(a1 + 12); ; *(_DWORD *)(a1 + 12) = i)
  {
    uint64_t v9 = v7;
    unint64_t v10 = v7 <= i ? i : v7;
    uint64_t v11 = (176 * v7) | 8;
    while (v10 != v9)
    {
      *(_DWORD *)(a1 + 8) = ++v9;
      uint64_t v12 = **(void **)(a1 + 512);
      uint64_t v13 = *(void *)(v12 + v11) - *(void *)(v12 + v11 - 8);
      v11 += 176;
      if (v13 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned int,float>::GetBlock(v18, (uint64_t *)(v12 + v11 - 184));
        long long v15 = v18[1];
        *(_OWORD *)(a1 + 40) = v18[0];
        *(_OWORD *)(a1 + 56) = v15;
        long long v16 = v18[3];
        *(_OWORD *)(a1 + 72) = v18[2];
        *(_OWORD *)(a1 + 88) = v16;
        unint64_t v10 = v9 - 1;
        return v10 < i;
      }
    }
    if (*v2)
    {
      dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(v3);
      std::mutex::lock(v4);
      std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back(v5, v2);
      *(void *)(a1 + 512) = 0;
      if (*(_DWORD *)(a1 + 300))
      {
        unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 152), memory_order_acquire);
        std::mutex::unlock(v4);
        if ((explicit & 1) == 0) {
          std::condition_variable::notify_one(v6);
        }
      }
      else
      {
        std::mutex::unlock(v4);
      }
      dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(v3);
    }
    if (!dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Next(v3, v2)) {
      break;
    }
    unsigned int v7 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    unsigned int i = -1171354717 * ((*(void *)(*(void *)(a1 + 512) + 8) - **(void **)(a1 + 512)) >> 4);
  }
  return v10 < i;
}

void sub_22E8FB178(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::ThreadedParser<unsigned int,float>::BytesRead(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 40))();
}

uint64_t dmlc::data::ThreadedParser<unsigned int,float>::ParseNext()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/parser.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"cannot call ParseNext", 21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_22E8FB214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::~ThreadedIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8FB274(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(void *)(a1 + 288))
  {
    std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      char v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      uint64_t v5 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(v5, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      BOOL v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      unsigned int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire) & 1) == 0)
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 40));
      BOOL v9 = (v8 & 1) == 0;
    }
    else
    {
      BOOL v9 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v9) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_22E8FB43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Next(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 288);
  if (*(void *)(a1 + 288))
  {
    dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back((void *)(a1 + 344), v2);
    *(void *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire);
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((explicit & 1) == 0) {
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
  }

  return dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Next(a1, v2);
}

void sub_22E8FB530(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Value(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    int v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    BOOL v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(void *)(a1 + 288);
  }
  return result;
}

void sub_22E8FB5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(uint64_t a1)
{
  v5.__ptr_ = 0;
  uint64_t v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(void *)(a1 + 392)) {
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  }
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_22E8FB664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    uint64_t v20 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    size_t v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x22E8FB634);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back(void *a1, void *a2)
{
  std::exception_ptr v4 = (char *)a1[1];
  std::exception_ptr v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      uint64_t v24 = v6 >> 3;
      uint64_t v25 = (char *)a1[3];
      float v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        unsigned int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        uint64_t v34 = v33;
        BOOL v35 = operator new(0x1000uLL);
        uint64_t v36 = &v32[8 * v24];
        char v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          uint64_t v38 = 8 * v24;
          if (v6 < 1)
          {
            int v73 = v35;
            uint64_t v74 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            uint64_t v36 = &v76[8 * (v75 >> 2)];
            char v37 = &v76[8 * v77];
            if (v32) {
              operator delete(v32);
            }
            unsigned int v32 = v76;
            BOOL v35 = v73;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)uint64_t v36 = v35;
        uint64_t v78 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v37 - v32) >> 2;
              }
              uint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              unsigned int v87 = v85;
              uint64_t v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v32;
              BOOL v88 = v78 == v32;
              uint64_t v78 = v36;
              if (!v88)
              {
                uint64_t v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                unsigned int v91 = v36;
                uint64_t v92 = (uint64_t *)v32;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)unsigned int v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              char v37 = &v85[8 * v86];
              if (v32) {
                operator delete(v32);
              }
              unsigned int v32 = v87;
            }
            else
            {
              uint64_t v80 = (v37 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              uint64_t v36 = &v32[8 * (v81 >> 1)];
              int v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                int v83 = v78;
              }
              uint64_t v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v36 - 1) = v94;
          v36 -= 8;
        }
        uint64_t v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      uint64_t v28 = operator new(0x1000uLL);
      BOOL v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v25 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          std::exception_ptr v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          uint64_t v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            uint64_t v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            unint64_t v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)unint64_t v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            std::exception_ptr v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        int v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            int v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            unint64_t v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            uint64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              uint64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              uint64_t v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)uint64_t v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            uint64_t v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v16 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v16) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            uint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              int v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)std::exception_ptr v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v4;
      uint64_t v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          unint64_t v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          std::exception_ptr v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            std::exception_ptr v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            unint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)unint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          unint64_t v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            std::exception_ptr v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          size_t v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            std::exception_ptr v5 = (char *)a1[1];
          }
          unint64_t v23 = &v5[8 * v19];
          std::exception_ptr v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)std::exception_ptr v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    std::exception_ptr v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = a1[4] + v8;
  }
  *(void *)(*(void *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_22E8FBBF8(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Next(uint64_t a1, void *a2)
{
  uint64_t v2 = (atomic_uint *)(a1 + 24);
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) == 2) {
    return 0;
  }
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load_explicit(v2, memory_order_acquire))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
  }
  int v10 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v10 + 1;
  uint64_t v11 = *(void *)(a1 + 336);
  if (v11)
  {
LABEL_9:
    *(_DWORD *)(a1 + 184) = v10;
  }
  else
  {
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      uint64_t v11 = *(void *)(a1 + 336);
      if (v11)
      {
        int v10 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v11)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
      {
        uint64_t v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
        dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        BOOL v16 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
        uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
      uint64_t v3 = 0;
      goto LABEL_18;
    }
  }
  unint64_t v12 = *(void *)(a1 + 328);
  *a2 = *(void *)(*(void *)(*(void *)(a1 + 304) + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF));
  *(void *)(a1 + 328) = v12 + 1;
  *(void *)(a1 + 336) = v11 - 1;
  if (v12 + 1 >= 0x400)
  {
    operator delete(**(void ***)(a1 + 304));
    *(void *)(a1 + 304) += 8;
    *(void *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188)) {
    BOOL v13 = (atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0;
  }
  else {
    BOOL v13 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v13) {
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  }
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
  uint64_t v3 = 1;
LABEL_18:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v3;
}

void sub_22E8FBE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Init(std::function<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[1];
  do
  {
    uint64_t v18 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        && (*(void *)(v4 + 336) < *(void *)(v4 + 48) || *(void *)(v4 + 384)))
      {
        break;
      }
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire);
    if (explicit)
    {
      if (atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire) == 1)
      {
        uint64_t v6 = a1[9];
        if (!v6) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
        if (*(void *)(v4 + 336))
        {
          unint64_t v7 = *(void *)(v4 + 328);
          do
          {
            std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back((void *)(v4 + 344), (void *)(*(void *)(*(void *)(v4 + 304) + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)));
            uint64_t v8 = *(void *)(v4 + 336) - 1;
            unint64_t v7 = *(void *)(v4 + 328) + 1;
            *(void *)(v4 + 328) = v7;
            *(void *)(v4 + 336) = v8;
            if (v7 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(void *)(v4 + 304) += 8;
              uint64_t v8 = *(void *)(v4 + 336);
              unint64_t v7 = *(void *)(v4 + 328) - 512;
              *(void *)(v4 + 328) = v7;
            }
          }
          while (v8);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        int v9 = 2;
      }
      else
      {
        int v9 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      uint64_t v10 = *(void *)(v4 + 384);
      if (v10
        && (uint64_t v11 = *(void ***)(v4 + 352),
            unint64_t v12 = *(void *)(v4 + 376),
            uint64_t v18 = (*(void **)((char *)v11 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)))[v12 & 0x1FF],
            ++v12,
            *(void *)(v4 + 376) = v12,
            *(void *)(v4 + 384) = v10 - 1,
            v12 >= 0x400))
      {
        operator delete(*v11);
        int v9 = 0;
        *(void *)(v4 + 352) += 8;
        *(void *)(v4 + 376) -= 512;
      }
      else
      {
        int v9 = 0;
      }
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (!explicit)
    {
      uint64_t v13 = a1[5];
      uint64_t v19 = &v18;
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v13 + 48))(v13, &v19) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      uint64_t v14 = (void *)(v4 + 296);
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        || (uint64_t v14 = (void *)(v4 + 344), v18))
      {
        std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back(v14, &v18);
      }
      int v15 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v15) {
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      }
      int v9 = 0;
    }
  }
  while (v9 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Init(std::function<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_22E8FC25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12) {
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Init(std::function<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    }
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(void *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) == 1)
  {
    while (*(void *)(v17 + 336))
    {
      std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back(v15, (void *)(*(void *)(*(void *)(v17 + 304) + ((*(void *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(void *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_22EA18F80);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) {
         || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
  }
             int v20 = *(_DWORD *)(v17 + 184),
             std::unique_lock<std::mutex>::unlock(&a12),
             !v20))
  {
LABEL_10:
    if (a12.__owns_) {
      std::mutex::unlock(a12.__m_);
    }
    __cxa_end_catch();
    JUMPOUT(0x22E8FC220);
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

uint64_t *std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Init(std::function<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](result + 6);
    std::__function::__value_func<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::~__value_func[abi:ne180100](v1 + 2);
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

void std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::~__func()
{
}

void *std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E247300;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E247300;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::operator()(uint64_t a1, void **a2)
{
  if (!**a2) {
    operator new();
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 48);

  return v2();
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E247390;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E247390;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::~ThreadedIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E2472A0;
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_22E8FC824(_Unwind_Exception *a1)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Destroy(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    std::mutex::lock((std::mutex *)(a1 + 56));
    atomic_store(2u, (unsigned int *)(a1 + 24));
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    std::mutex::unlock((std::mutex *)(a1 + 56));
    uint64_t v2 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  uint64_t v3 = *(void *)(a1 + 384);
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 376);
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 352) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8));
      uint64_t v6 = *(void *)(v5 + 8 * (v4 & 0x1FF));
      if (v6)
      {
        uint64_t v13 = *(void ***)(v5 + 8 * (v4 & 0x1FF));
        std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v13);
        MEMORY[0x230FA80D0](v6, 0x20C40960023A9);
        unint64_t v4 = *(void *)(a1 + 376);
        uint64_t v3 = *(void *)(a1 + 384);
      }
      --v3;
      *(void *)(a1 + 376) = ++v4;
      *(void *)(a1 + 384) = v3;
      if (v4 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 352));
        *(void *)(a1 + 352) += 8;
        uint64_t v3 = *(void *)(a1 + 384);
        unint64_t v4 = *(void *)(a1 + 376) - 512;
        *(void *)(a1 + 376) = v4;
      }
    }
    while (v3);
  }
  uint64_t v7 = *(void *)(a1 + 336);
  if (v7)
  {
    unint64_t v8 = *(void *)(a1 + 328);
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
      uint64_t v10 = *(void *)(v9 + 8 * (v8 & 0x1FF));
      if (v10)
      {
        uint64_t v13 = *(void ***)(v9 + 8 * (v8 & 0x1FF));
        std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v13);
        MEMORY[0x230FA80D0](v10, 0x20C40960023A9);
        unint64_t v8 = *(void *)(a1 + 328);
        uint64_t v7 = *(void *)(a1 + 336);
      }
      --v7;
      *(void *)(a1 + 328) = ++v8;
      *(void *)(a1 + 336) = v7;
      if (v8 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 304));
        *(void *)(a1 + 304) += 8;
        uint64_t v7 = *(void *)(a1 + 336);
        unint64_t v8 = *(void *)(a1 + 328) - 512;
        *(void *)(a1 + 328) = v8;
      }
    }
    while (v7);
  }
  if (*(void *)(a1 + 8))
  {
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  uint64_t v12 = *(void *)(a1 + 288);
  if (v12)
  {
    uint64_t v13 = *(void ***)(a1 + 288);
    std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v13);
    MEMORY[0x230FA80D0](v12, 0x20C40960023A9);
    *(void *)(a1 + 288) = 0;
  }
}

uint64_t dmlc::data::ThreadedParser<unsigned int,float>::~ThreadedParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247240;
  uint64_t v2 = a1 + 112;
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Destroy(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 512);
  if (v4)
  {
    uint64_t v6 = *(void ***)(a1 + 512);
    std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v6);
    MEMORY[0x230FA80D0](v4, 0x20C40960023A9);
  }
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::~ThreadedIter(v2);
  *(void *)a1 = &unk_26E2471F8;
  uint64_t v6 = (void **)(a1 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  return a1;
}

void sub_22E8FCB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)uint64_t v10 = &unk_26E2471F8;
  a10 = (void **)(v10 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(uint64_t a1)
{
  *(void *)a1 = &unk_26E2474C0;
  uint64_t v2 = *(void *)(a1 + 128);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 144));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 136));
  *(void *)a1 = &unk_26E247510;
  uint64_t v4 = (void **)(a1 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void sub_22E8FCC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::mutex::~mutex((std::mutex *)(v10 + 144));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 + 136));
  *(void *)uint64_t v10 = &unk_26E247510;
  a10 = (void **)(v10 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::LibSVMParser<unsigned long long,float>::~LibSVMParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247410;
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }

  return dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(a1);
}

void dmlc::data::LibSVMParser<unsigned long long,float>::~LibSVMParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247410;
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8FCDA0(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C40E19BAD78);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,float>::BeforeFirst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 16))();
}

BOOL dmlc::data::ParserImpl<unsigned long long,float>::Next(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  unint64_t v4 = *(void *)(a1 + 8);
  for (unint64_t i = *(void *)(a1 + 16); ; *(void *)(a1 + 16) = i)
  {
    unint64_t v5 = v4 <= i ? i : v4;
    uint64_t v6 = 184 * v4 + 8;
    while (v5 != v4)
    {
      *(void *)(a1 + 8) = ++v4;
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v8 = *(void *)(v7 + v6) - *(void *)(v7 + v6 - 8);
      v6 += 184;
      if (v8 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned long long,float>::GetBlock(v12, (uint64_t *)(v7 + v6 - 192));
        long long v9 = v12[1];
        *(_OWORD *)(a1 + 48) = v12[0];
        *(_OWORD *)(a1 + 64) = v9;
        long long v10 = v12[3];
        *(_OWORD *)(a1 + 80) = v12[2];
        *(_OWORD *)(a1 + 96) = v10;
        unint64_t v5 = v4 - 1;
        return v5 < i;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v2)) {
      break;
    }
    unint64_t v4 = 0;
    unint64_t i = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
    *(void *)(a1 + 8) = 0;
  }
  return v5 < i;
}

uint64_t dmlc::data::ParserImpl<unsigned long long,float>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::TextParserBase<unsigned long long,float>::BytesRead(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,float>::ParseNext(uint64_t a1, void ***a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), &v38);
  uint64_t v5 = v4;
  if (!v4) {
    return v5;
  }
  int v6 = *(_DWORD *)(a1 + 112);
  uint64_t v7 = *a2;
  unint64_t v8 = (unint64_t)a2[1];
  unint64_t v9 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v8 - (void)*a2) >> 3);
  unint64_t v10 = v6 - v9;
  if (v6 > v9)
  {
    uint64_t v11 = a2[2];
    if (0xD37A6F4DE9BD37A7 * ((uint64_t)((uint64_t)v11 - v8) >> 3) < v10)
    {
      if (v6 < 0) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unsigned int v35 = v4;
      uint64_t v34 = a2[2];
      unint64_t v12 = 0xA6F4DE9BD37A6F4ELL * (v11 - v7);
      if (v12 <= v6) {
        unint64_t v12 = v6;
      }
      if (0xD37A6F4DE9BD37A7 * (v11 - v7) >= 0xB21642C8590B21) {
        unint64_t v13 = 0x1642C8590B21642;
      }
      else {
        unint64_t v13 = v12;
      }
      uint64_t v43 = a2 + 2;
      if (v13 > 0x1642C8590B21642) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = 23 * v13;
      int v15 = (void **)operator new(184 * v13);
      BOOL v16 = &v15[23 * v9];
      unint64_t v40 = v15;
      v41.i64[0] = (uint64_t)v16;
      uint64_t v33 = &v15[v14];
      uint64_t v42 = &v15[v14];
      uint64_t v17 = &v15[23 * v6];
      uint64_t v18 = 184 * v6 - 184 * v9;
      uint64_t v19 = v16;
      do
      {
        v19[20] = 0;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)uint64_t v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        int v20 = operator new(8uLL);
        void *v20 = 0;
        v19[1] = v20 + 1;
        _OWORD v19[2] = v20 + 1;
        uint64_t *v19 = v20;
        v19[4] = 0;
        v19[13] = 0;
        v19[16] = 0;
        v19[19] = 0;
        v19[7] = 0;
        v19[10] = 0;
        v19[21] = 0;
        v19[22] = 0;
        v19 += 23;
        v18 -= 184;
      }
      while (v18);
      v41.i64[1] = (uint64_t)v17;
      uint64_t v5 = v35;
      if ((void **)v8 == v7)
      {
        int64x2_t v25 = vdupq_n_s64(v8);
        uint64_t v27 = v33;
        float v26 = v34;
      }
      else
      {
        unint64_t v21 = 0;
        do
        {
          unint64_t v22 = v8 + v21;
          unint64_t v23 = &v16[v21 / 8];
          *(_OWORD *)(v23 - 23) = *(_OWORD *)(v8 + v21 - 184);
          *(v23 - 21) = *(void **)(v8 + v21 - 168);
          *(void *)(v22 - 184) = 0;
          *(void *)(v22 - 176) = 0;
          *(void *)(v22 - 168) = 0;
          *((_OWORD *)v23 - 10) = *(_OWORD *)(v8 + v21 - 160);
          *(v23 - 18) = *(void **)(v8 + v21 - 144);
          *(void *)(v22 - 160) = 0;
          *(void *)(v22 - 152) = 0;
          *(void *)(v22 - 144) = 0;
          *(_OWORD *)(v23 - 17) = *(_OWORD *)(v8 + v21 - 136);
          *(v23 - 15) = *(void **)(v8 + v21 - 120);
          *(void *)(v22 - 136) = 0;
          *(void *)(v22 - 128) = 0;
          *(void *)(v22 - 120) = 0;
          *((_OWORD *)v23 - 7) = *(_OWORD *)(v8 + v21 - 112);
          *(v23 - 12) = *(void **)(v8 + v21 - 96);
          *(void *)(v22 - 112) = 0;
          *(void *)(v22 - 104) = 0;
          *(void *)(v22 - 96) = 0;
          *(_OWORD *)(v23 - 11) = *(_OWORD *)(v8 + v21 - 88);
          *(v23 - 9) = *(void **)(v8 + v21 - 72);
          *(void *)(v22 - 88) = 0;
          *(void *)(v22 - 80) = 0;
          long long v24 = *(_OWORD *)(v8 + v21 - 64);
          *(void *)(v22 - 72) = 0;
          *((_OWORD *)v23 - 4) = v24;
          *(v23 - 6) = *(void **)(v8 + v21 - 48);
          *(void *)(v22 - 64) = 0;
          *(void *)(v22 - 56) = 0;
          *(void *)(v22 - 48) = 0;
          *(_OWORD *)(v23 - 5) = *(_OWORD *)(v8 + v21 - 40);
          *(v23 - 3) = *(void **)(v8 + v21 - 24);
          *(void *)(v22 - 40) = 0;
          *(void *)(v22 - 32) = 0;
          *(void *)(v22 - 24) = 0;
          *((_OWORD *)v23 - 1) = *(_OWORD *)(v8 + v21 - 16);
          v21 -= 184;
        }
        while ((void **)(v8 + v21) != v7);
        int64x2_t v25 = *(int64x2_t *)a2;
        float v26 = a2[2];
        BOOL v16 = (void **)((char *)v16 + v21);
        uint64_t v17 = (void **)v41.i64[1];
        uint64_t v27 = v42;
      }
      *a2 = v16;
      a2[1] = v17;
      int64x2_t v41 = v25;
      a2[2] = v27;
      uint64_t v42 = v26;
      unint64_t v40 = (void **)v25.i64[0];
      std::__split_buffer<dmlc::data::RowBlockContainer<unsigned long long,float>>::~__split_buffer((uint64_t)&v40);
      goto LABEL_26;
    }
    unint64_t v28 = v8 + 184 * v10;
    uint64_t v29 = 184 * v6 - 8 * ((uint64_t)(v8 - (void)*a2) >> 3);
    do
    {
      *(void *)(v8 + 160) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)unint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      uint64_t v30 = operator new(8uLL);
      *uint64_t v30 = 0;
      *(void *)(v8 + 8) = v30 + 1;
      *(void *)(v8 + 16) = v30 + 1;
      *(void *)unint64_t v8 = v30;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 104) = 0;
      *(void *)(v8 + 128) = 0;
      *(void *)(v8 + 152) = 0;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 168) = 0;
      *(void *)(v8 + 176) = 0;
      v8 += 184;
      v29 -= 184;
    }
    while (v29);
    goto LABEL_23;
  }
  if (v6 < v9)
  {
    unint64_t v28 = (unint64_t)&v7[23 * v6];
    while (v8 != v28)
    {
      v8 -= 184;
      dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v8);
    }
LABEL_23:
    a2[1] = (void **)v28;
  }
LABEL_26:
  uint64_t v31 = v39;
  *(void *)(a1 + 120) += v39;
  LODWORD(v36) = 0;
  if (!v31) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  if (v6 >= 1) {
    operator new();
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)(a1 + 136));
  *(void *)(a1 + 8) = 0;
  unint64_t v40 = (void **)&v36;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](&v40);
  return v5;
}

void sub_22E8FD540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::thread a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23 = a20;
  a20 = 0;
  if (v23) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v23);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::data::LibSVMParser<unsigned long long,float>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v8 = *(uint64_t **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v10 = a4 + 16;
  unint64_t v9 = *(void *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v12 = v9 - (void)v8;
    uint64_t v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    int v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    BOOL v16 = *(uint64_t **)a4;
    uint64_t v17 = *(uint64_t **)(a4 + 8);
    uint64_t v19 = &v15[v18];
    *int v15 = 0;
    uint64_t v11 = v15 + 1;
    while (v17 != v16)
    {
      uint64_t v20 = *--v17;
      *--int v15 = v20;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = v19;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v8 = 0;
    uint64_t v11 = v8 + 1;
  }
  uint64_t v21 = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = v11;
  *(void *)(a4 + 32) = v21;
  *(void *)(a4 + 104) = *(void *)(a4 + 96);
  v156 = (void **)(a4 + 120);
  *(void *)(a4 + 128) = *(void *)(a4 + 120);
  v154 = (void **)(a4 + 144);
  *(void *)(a4 + 152) = *(void *)(a4 + 144);
  v153 = (void **)(a4 + 48);
  *(void *)(a4 + 56) = *(void *)(a4 + 48);
  v151 = (void **)(a4 + 72);
  *(void *)(a4 + 80) = *(void *)(a4 + 72);
  *(void *)(a4 + 168) = 0;
  *(void *)(a4 + 176) = 0;
  v155 = (void **)(a4 + 24);
  if (a2 == a3)
  {
    unint64_t v158 = -1;
    goto LABEL_214;
  }
  uint64_t v152 = v10;
  uint64_t v150 = a1;
  v157 = (void *)(a4 + 40);
  unint64_t v158 = -1;
  do
  {
    unint64_t v22 = a2;
    uint64_t v23 = a2 + 1;
    while (v23 != a3)
    {
      int v25 = *v23++;
      int v24 = v25;
      BOOL v26 = v25 == 13 || v24 == 10;
      if (v26)
      {
        uint64_t v27 = v23 - 2;
        a2 = v23 - 1;
        goto LABEL_24;
      }
    }
    uint64_t v27 = a3 - 1;
    a2 = a3;
LABEL_24:
    v161 = 0;
    int v160 = 0;
    int v159 = 0;
    if (v22 != a2)
    {
      while (1)
      {
        int v28 = *v22;
        if (v28 != 9 && v28 != 32) {
          break;
        }
        BOOL v26 = v22++ == v27;
        if (v26)
        {
          unint64_t v22 = a2;
          goto LABEL_32;
        }
      }
      if (v28 == 35) {
        unint64_t v22 = a2;
      }
    }
LABEL_32:
    int v29 = dmlc::ParsePair<float,float>(v22, (uint64_t)a2, (uint64_t *)&v161, (float *)&v160, (float *)&v159);
    if (v29)
    {
      if (v29 == 2)
      {
        uint64_t v31 = *(char **)(a4 + 56);
        unint64_t v30 = *(void *)(a4 + 64);
        if ((unint64_t)v31 >= v30)
        {
          uint64_t v33 = (char *)*v153;
          uint64_t v34 = (v31 - (unsigned char *)*v153) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = v30 - (void)v33;
          if (v36 >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v37);
            uint64_t v33 = *(char **)(a4 + 48);
            uint64_t v31 = *(char **)(a4 + 56);
          }
          else
          {
            uint64_t v38 = 0;
          }
          uint64_t v39 = &v38[4 * v34];
          *(_DWORD *)uint64_t v39 = v159;
          unsigned int v32 = v39 + 4;
          while (v31 != v33)
          {
            int v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(void *)(a4 + 48) = v39;
          *(void *)(a4 + 56) = v32;
          *(void *)(a4 + 64) = &v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v31 = v159;
          unsigned int v32 = v31 + 4;
        }
        *(void *)(a4 + 56) = v32;
      }
      int64x2_t v41 = *(char **)(a4 + 32);
      if (v41 != *(char **)(a4 + 24))
      {
        uint64_t v42 = (uint64_t)(*(void *)(a4 + 128) - *(void *)(a4 + 120)) >> 3;
        unint64_t v44 = *(uint64_t **)(a4 + 8);
        unint64_t v43 = *(void *)(a4 + 16);
        if ((unint64_t)v44 >= v43)
        {
          uint64_t v46 = *(uint64_t **)a4;
          uint64_t v47 = ((uint64_t)v44 - *(void *)a4) >> 3;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61) {
            goto LABEL_244;
          }
          uint64_t v49 = v43 - (void)v46;
          if (v49 >> 2 > v48) {
            unint64_t v48 = v49 >> 2;
          }
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v48;
          }
          if (v50)
          {
            unint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v152, v50);
            uint64_t v46 = *(uint64_t **)a4;
            unint64_t v44 = *(uint64_t **)(a4 + 8);
          }
          else
          {
            unint64_t v51 = 0;
          }
          uint64_t v52 = (uint64_t *)&v51[8 * v47];
          uint64_t *v52 = v42;
          uint64_t v45 = v52 + 1;
          while (v44 != v46)
          {
            uint64_t v53 = *--v44;
            *--uint64_t v52 = v53;
          }
          *(void *)a4 = v52;
          *(void *)(a4 + 8) = v45;
          *(void *)(a4 + 16) = &v51[8 * v50];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *unint64_t v44 = v42;
          uint64_t v45 = v44 + 1;
        }
        *(void *)(a4 + 8) = v45;
        int64x2_t v41 = *(char **)(a4 + 32);
      }
      if ((unint64_t)v41 >= *v157)
      {
        uint64_t v55 = (char *)*v155;
        uint64_t v56 = (v41 - (unsigned char *)*v155) >> 2;
        unint64_t v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v58 = *v157 - (void)v55;
        if (v58 >> 1 > v57) {
          unint64_t v57 = v58 >> 1;
        }
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v57;
        }
        if (v59)
        {
          uint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v157, v59);
          uint64_t v55 = *(char **)(a4 + 24);
          int64x2_t v41 = *(char **)(a4 + 32);
        }
        else
        {
          uint64_t v60 = 0;
        }
        uint64_t v61 = &v60[4 * v56];
        *(_DWORD *)uint64_t v61 = v160;
        uint64_t v54 = v61 + 4;
        while (v41 != v55)
        {
          int v62 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *((_DWORD *)v61 - 1) = v62;
          v61 -= 4;
        }
        *(void *)(a4 + 24) = v61;
        *(void *)(a4 + 32) = v54;
        *(void *)(a4 + 40) = &v60[4 * v59];
        if (v55) {
          operator delete(v55);
        }
      }
      else
      {
        *(_DWORD *)int64x2_t v41 = v160;
        uint64_t v54 = v41 + 4;
      }
      *(void *)(a4 + 32) = v54;
      for (unint64_t i = v161; i != (const char *)a3; ++i)
      {
        if (*i != 32) {
          goto LABEL_90;
        }
      }
      unint64_t i = (const char *)a3;
LABEL_90:
      if (i != (const char *)a2)
      {
        if (!strncmp(i, "qid:", 4uLL))
        {
          uint64_t v65 = atoll(i + 4);
          uint64_t v66 = v65;
          uint64_t v64 = a2;
          if (i + 4 != (const char *)a2)
          {
            uint64_t v64 = (unsigned __int8 *)(i + 4);
            while (1)
            {
              int v67 = *v64;
              if ((v67 - 48) >= 0xA)
              {
                unsigned int v68 = v67 - 43;
                BOOL v69 = v68 > 0x3A;
                uint64_t v70 = (1 << v68) & 0x40000000400000DLL;
                if (v69 || v70 == 0) {
                  break;
                }
              }
              BOOL v26 = v64++ == v27;
              if (v26)
              {
                uint64_t v64 = v27 + 1;
                break;
              }
            }
          }
          int v73 = *(uint64_t **)(a4 + 80);
          unint64_t v72 = *(void *)(a4 + 88);
          if ((unint64_t)v73 >= v72)
          {
            unint64_t v75 = (uint64_t *)*v151;
            uint64_t v76 = ((char *)v73 - (unsigned char *)*v151) >> 3;
            unint64_t v77 = v76 + 1;
            if ((unint64_t)(v76 + 1) >> 61) {
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v78 = v72 - (void)v75;
            if (v78 >> 2 > v77) {
              unint64_t v77 = v78 >> 2;
            }
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v79 = v77;
            }
            if (v79)
            {
              uint64_t v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 88, v79);
              unint64_t v75 = *(uint64_t **)(a4 + 72);
              int v73 = *(uint64_t **)(a4 + 80);
            }
            else
            {
              uint64_t v80 = 0;
            }
            uint64_t v81 = (uint64_t *)&v80[8 * v76];
            *uint64_t v81 = v66;
            uint64_t v74 = v81 + 1;
            while (v73 != v75)
            {
              uint64_t v82 = *--v73;
              *--uint64_t v81 = v82;
            }
            *(void *)(a4 + 72) = v81;
            *(void *)(a4 + 80) = v74;
            *(void *)(a4 + 88) = &v80[8 * v79];
            if (v75) {
              operator delete(v75);
            }
          }
          else
          {
            *int v73 = v65;
            uint64_t v74 = v73 + 1;
          }
          *(void *)(a4 + 80) = v74;
        }
        else
        {
          uint64_t v64 = (unsigned __int8 *)i;
        }
        while (2)
        {
          if (v64 != a2)
          {
            int v83 = v64 - 1;
            while (1)
            {
              int v84 = v83[1];
              if (v84 != 9 && v84 != 32) {
                break;
              }
              ++v64;
              if (++v83 == v27)
              {
                uint64_t v85 = a2;
                goto LABEL_130;
              }
            }
            if (v84 == 35) {
              uint64_t v85 = a2;
            }
            else {
              uint64_t v85 = v64;
            }
            while (1)
            {
LABEL_130:
              if (v85 == a2) {
                goto LABEL_209;
              }
              int v86 = *v85;
              if ((v86 - 48) < 0xA) {
                break;
              }
              unsigned int v87 = v86 - 43;
              BOOL v69 = v87 > 0x3A;
              uint64_t v88 = (1 << v87) & 0x40000000400000DLL;
              if (!v69 && v88 != 0) {
                break;
              }
              ++v85;
            }
            if (v85 == a2)
            {
              unint64_t v94 = dmlc::ParseUnsignedInt<unsigned long long>(a2);
            }
            else
            {
              uint64_t v64 = v85;
              while (1)
              {
                int v90 = *v64;
                if ((v90 - 48) >= 0xA)
                {
                  unsigned int v91 = v90 - 43;
                  BOOL v69 = v91 > 0x3A;
                  uint64_t v92 = (1 << v91) & 0x40000000400000DLL;
                  if (v69 || v92 == 0) {
                    break;
                  }
                }
                if (++v64 == a2)
                {
                  uint64_t v64 = a2;
                  break;
                }
              }
              unint64_t v94 = dmlc::ParseUnsignedInt<unsigned long long>(v85);
              if (v64 != a2)
              {
                uint64_t v95 = v64 + 1;
                while (1)
                {
                  int v96 = *v64;
                  if (v96 != 9 && v96 != 32) {
                    break;
                  }
                  ++v64;
                  ++v95;
                  if (v64 == a2) {
                    goto LABEL_152;
                  }
                }
                if (v96 == 58)
                {
                  while (1)
                  {
                    if (v95 == a2)
                    {
                      uint64_t v64 = a2;
                      goto LABEL_171;
                    }
                    int v108 = *v95;
                    if ((v108 - 48) < 0xA) {
                      break;
                    }
                    ++v64;
                    ++v95;
                    unsigned int v109 = v108 - 43;
                    BOOL v69 = v109 > 0x3A;
                    uint64_t v110 = (1 << v109) & 0x40000000400000DLL;
                    if (!v69 && v110 != 0) {
                      goto LABEL_171;
                    }
                  }
                  uint64_t v64 = v95;
LABEL_171:
                  v112 = a2;
                  if (v64 != a2)
                  {
                    v112 = v64;
                    while (1)
                    {
                      int v113 = *v112;
                      if ((v113 - 48) >= 0xA)
                      {
                        unsigned int v114 = v113 - 43;
                        BOOL v69 = v114 > 0x3A;
                        uint64_t v115 = (1 << v114) & 0x40000000400000DLL;
                        if (v69 || v115 == 0) {
                          break;
                        }
                      }
                      if (++v112 == a2)
                      {
                        v112 = a2;
                        break;
                      }
                    }
                  }
                  v161 = (const char *)v112;
                  float v98 = dmlc::ParseFloat<float,false>((uint64_t)v64, 0);
                  int v97 = 1;
                  uint64_t v64 = v112;
                  goto LABEL_154;
                }
LABEL_153:
                int v97 = 0;
                v161 = (const char *)v64;
                float v98 = 0.0;
LABEL_154:
                v100 = *(unint64_t **)(a4 + 128);
                unint64_t v99 = *(void *)(a4 + 136);
                if ((unint64_t)v100 >= v99)
                {
                  uint64_t v102 = (unint64_t *)*v156;
                  uint64_t v103 = ((char *)v100 - (unsigned char *)*v156) >> 3;
                  unint64_t v104 = v103 + 1;
                  if ((unint64_t)(v103 + 1) >> 61) {
                    std::vector<void *>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v105 = v99 - (void)v102;
                  if (v105 >> 2 > v104) {
                    unint64_t v104 = v105 >> 2;
                  }
                  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v106 = v104;
                  }
                  if (v106)
                  {
                    v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 136, v106);
                    uint64_t v102 = *(unint64_t **)(a4 + 120);
                    v100 = *(unint64_t **)(a4 + 128);
                  }
                  else
                  {
                    v107 = 0;
                  }
                  v117 = (unint64_t *)&v107[8 * v103];
                  unint64_t *v117 = v94;
                  uint64_t v101 = v117 + 1;
                  while (v100 != v102)
                  {
                    unint64_t v118 = *--v100;
                    *--v117 = v118;
                  }
                  *(void *)(a4 + 120) = v117;
                  *(void *)(a4 + 128) = v101;
                  *(void *)(a4 + 136) = &v107[8 * v106];
                  if (v102) {
                    operator delete(v102);
                  }
                }
                else
                {
                  unint64_t *v100 = v94;
                  uint64_t v101 = v100 + 1;
                }
                *(void *)(a4 + 128) = v101;
                unint64_t v119 = v158;
                if (v158 >= v94) {
                  unint64_t v119 = v94;
                }
                unint64_t v158 = v119;
                if (v97)
                {
                  v121 = *(char **)(a4 + 152);
                  unint64_t v120 = *(void *)(a4 + 160);
                  if ((unint64_t)v121 >= v120)
                  {
                    v123 = (char *)*v154;
                    uint64_t v124 = (v121 - (unsigned char *)*v154) >> 2;
                    unint64_t v125 = v124 + 1;
                    if ((unint64_t)(v124 + 1) >> 62) {
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v126 = v120 - (void)v123;
                    if (v126 >> 1 > v125) {
                      unint64_t v125 = v126 >> 1;
                    }
                    if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v127 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v127 = v125;
                    }
                    if (v127)
                    {
                      v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v127);
                      v123 = *(char **)(a4 + 144);
                      v121 = *(char **)(a4 + 152);
                    }
                    else
                    {
                      v128 = 0;
                    }
                    v129 = (float *)&v128[4 * v124];
                    float *v129 = v98;
                    v122 = v129 + 1;
                    while (v121 != v123)
                    {
                      int v130 = *((_DWORD *)v121 - 1);
                      v121 -= 4;
                      *((_DWORD *)v129-- - 1) = v130;
                    }
                    *(void *)(a4 + 144) = v129;
                    *(void *)(a4 + 152) = v122;
                    *(void *)(a4 + 160) = &v128[4 * v127];
                    if (v123) {
                      operator delete(v123);
                    }
                  }
                  else
                  {
                    *(float *)v121 = v98;
                    v122 = v121 + 4;
                  }
                  *(void *)(a4 + 152) = v122;
                }
                continue;
              }
            }
LABEL_152:
            uint64_t v64 = a2;
            goto LABEL_153;
          }
          break;
        }
      }
    }
LABEL_209:
    ;
  }
  while (a2 != a3);
  uint64_t v21 = *(void *)(a4 + 32);
  uint64_t v11 = *(uint64_t **)(a4 + 8);
  a1 = v150;
  if (v21 == *(void *)(a4 + 24))
  {
LABEL_214:
    uint64_t v134 = v21;
    goto LABEL_230;
  }
  uint64_t v131 = (uint64_t)(*(void *)(a4 + 128) - *(void *)(a4 + 120)) >> 3;
  unint64_t v132 = *(void *)(a4 + 16);
  if ((unint64_t)v11 >= v132)
  {
    v135 = *(uint64_t **)a4;
    uint64_t v136 = ((uint64_t)v11 - *(void *)a4) >> 3;
    unint64_t v137 = v136 + 1;
    if ((unint64_t)(v136 + 1) >> 61) {
LABEL_244:
    }
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    uint64_t v138 = v132 - (void)v135;
    if (v138 >> 2 > v137) {
      unint64_t v137 = v138 >> 2;
    }
    if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v139 = v137;
    }
    if (v139)
    {
      v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v152, v139);
      v135 = *(uint64_t **)a4;
      uint64_t v11 = *(uint64_t **)(a4 + 8);
    }
    else
    {
      v140 = 0;
    }
    v141 = (uint64_t *)&v140[8 * v136];
    v142 = &v140[8 * v139];
    uint64_t *v141 = v131;
    v133 = v141 + 1;
    while (v11 != v135)
    {
      uint64_t v143 = *--v11;
      *--v141 = v143;
    }
    *(void *)a4 = v141;
    *(void *)(a4 + 8) = v133;
    *(void *)(a4 + 16) = v142;
    if (v135) {
      operator delete(v135);
    }
  }
  else
  {
    uint64_t *v11 = v131;
    v133 = v11 + 1;
  }
  *(void *)(a4 + 8) = v133;
  uint64_t v11 = v133;
  uint64_t v21 = *(void *)(a4 + 24);
  uint64_t v134 = *(void *)(a4 + 32);
LABEL_230:
  if (((v134 - v21) >> 2) + 1 != ((uint64_t)v11 - *(void *)a4) >> 3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./libsvm_parser.h");
    v145 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
    v146 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v161);
  }
  int v147 = *(_DWORD *)(a1 + 232);
  if (v147 >= 1)
  {
    v148 = *(void **)(a4 + 120);
    v149 = *(void **)(a4 + 128);
    goto LABEL_239;
  }
  if (v147 < 0)
  {
    v148 = *(void **)(a4 + 120);
    v149 = *(void **)(a4 + 128);
    if (v148 != v149)
    {
      if (v158)
      {
LABEL_239:
        while (v148 != v149)
          --*v148++;
      }
    }
  }
}

void sub_22E8FE0A0(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 104));
  _Unwind_Resume(a1);
}

void std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v4 - 184);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<dmlc::data::RowBlockContainer<unsigned long long,float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(i - 184);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned long long,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *)::{lambda(void)#1}>>(uint64_t a1)
{
  uint64_t v18 = (uint64_t *)a1;
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
  unint64_t v5 = *(void *)(*(void *)(a1 + 8) + 8);
  unint64_t v7 = *(int *)(a1 + 32);
  uint64_t v6 = *(int *)(a1 + 36);
  unint64_t v8 = (v5 + v7 - 1) / v7;
  if (v5 >= v8 * v6) {
    unint64_t v9 = v8 * v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
  }
  unint64_t v10 = v8 * (v6 + 1);
  if (v5 >= v10) {
    unint64_t v5 = v10;
  }
  uint64_t v11 = &v4[v9];
  if (v9)
  {
    while (1)
    {
      int v12 = *v11;
      if (v12 == 10 || v12 == 13) {
        break;
      }
      if (--v11 == v4)
      {
        uint64_t v11 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  unint64_t v14 = &v4[v5];
  if (v6 + 1 != v7 && v5)
  {
    while (1)
    {
      int v15 = *v14;
      if (v15 == 10 || v15 == 13) {
        break;
      }
      if (--v14 == v4)
      {
        unint64_t v14 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  (*(void (**)(void, unsigned __int8 *, unsigned __int8 *, uint64_t))(**(void **)(a1 + 40) + 56))(*(void *)(a1 + 40), v11, v14, **(void **)(a1 + 24) + 184 * (int)v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v18);
  return 0;
}

uint64_t dmlc::ParseUnsignedInt<unsigned long long>(unsigned __int8 *a1)
{
  while (1)
  {
    unsigned int v2 = *a1;
    if (v2 > 0x20 || ((1 << v2) & 0x100003600) == 0) {
      break;
    }
    ++a1;
  }
  char v9 = 1;
  if (v2 == 43)
  {
    ++a1;
  }
  else if (v2 == 45)
  {
    char v9 = 0;
    char v8 = 1;
    dmlc::LogCheckFormat<BOOL,BOOL>();
  }
  unsigned int v4 = *a1;
  if (v4 - 48 > 9) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = a1 + 1;
  do
  {
    uint64_t result = 10 * result + v4 - 48;
    unsigned int v7 = *v6++;
    unsigned int v4 = v7;
  }
  while (v7 - 48 < 0xA);
  return result;
}

void sub_22E8FE4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, uint64_t a13)
{
  uint64_t v14 = a13;
  a13 = 0;
  if (v14) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26E247558;
  uint64_t v3 = (void *)(a1 + 120);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 120) = &unk_26E2475B8;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 240) = 850045863;
  unsigned int v4 = (std::mutex *)(a1 + 240);
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 312) = 1018212795;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 1018212795;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 168) = xmmword_22EA18F70;
  v6[0] = &unk_26E247618;
  v6[1] = a2;
  v6[3] = v6;
  v5[0] = &unk_26E2476A8;
  v5[1] = a2;
  uint64_t v5[3] = v5;
  atomic_store(0, (unsigned int *)(a1 + 144));
  atomic_store(0, (unsigned __int8 *)(a1 + 148));
  atomic_store(0, (unsigned __int8 *)(a1 + 160));
  std::mutex::lock((std::mutex *)(a1 + 240));
  v7.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 512), &v7);
  std::exception_ptr::~exception_ptr(&v7);
  std::mutex::unlock(v4);
  v7.__ptr_ = v3;
  std::__function::__value_func<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::__value_func[abi:ne180100]((uint64_t)&v8, (uint64_t)v6);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)v5);
  operator new();
}

void sub_22E8FE7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::thread a11, char a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::thread::~thread(&a11);
  MEMORY[0x230FA80D0](v22, 0xA1C40BD48D6D6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a14);
  std::__function::__value_func<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::~__value_func[abi:ne180100](&a18);
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::~ThreadedIter(v19);
  void *v18 = &unk_26E247510;
  a10 = v18 + 3;
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void dmlc::data::ThreadedParser<unsigned long long,float>::~ThreadedParser(uint64_t a1)
{
  dmlc::data::ThreadedParser<unsigned long long,float>::~ThreadedParser(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8FE970(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F1C40BB2A5544);
  _Unwind_Resume(a1);
}

void dmlc::data::ThreadedParser<unsigned long long,float>::BeforeFirst(uint64_t a1)
{
}

BOOL dmlc::data::ThreadedParser<unsigned long long,float>::Next(uint64_t a1)
{
  unsigned int v2 = (void *)(a1 + 520);
  uint64_t v3 = a1 + 120;
  unsigned int v4 = (std::mutex *)(a1 + 176);
  unint64_t v5 = (void *)(a1 + 464);
  BOOL v16 = (std::condition_variable *)(a1 + 312);
  unint64_t v6 = *(void *)(a1 + 8);
  for (unint64_t i = *(void *)(a1 + 16); ; *(void *)(a1 + 16) = i)
  {
    unint64_t v8 = v6 <= i ? i : v6;
    uint64_t v9 = 184 * v6 + 8;
    while (v8 != v6)
    {
      *(void *)(a1 + 8) = ++v6;
      uint64_t v10 = **(void **)(a1 + 520);
      uint64_t v11 = *(void *)(v10 + v9) - *(void *)(v10 + v9 - 8);
      v9 += 184;
      if (v11 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned long long,float>::GetBlock(v17, (uint64_t *)(v10 + v9 - 192));
        long long v13 = v17[1];
        *(_OWORD *)(a1 + 48) = v17[0];
        *(_OWORD *)(a1 + 64) = v13;
        long long v14 = v17[3];
        *(_OWORD *)(a1 + 80) = v17[2];
        *(_OWORD *)(a1 + 96) = v14;
        unint64_t v8 = v6 - 1;
        return v8 < i;
      }
    }
    if (*v2)
    {
      dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(v3);
      std::mutex::lock(v4);
      std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back(v5, v2);
      *(void *)(a1 + 520) = 0;
      if (*(_DWORD *)(a1 + 308))
      {
        unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 160), memory_order_acquire);
        std::mutex::unlock(v4);
        if ((explicit & 1) == 0) {
          std::condition_variable::notify_one(v16);
        }
      }
      else
      {
        std::mutex::unlock(v4);
      }
      dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(v3);
    }
    if (!dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Next(v3, v2))break; {
    unint64_t v6 = 0;
    }
    *(void *)(a1 + 8) = 0;
    unint64_t i = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(*(void *)(a1 + 520) + 8) - **(void **)(a1 + 520)) >> 3);
  }
  return v8 < i;
}

void sub_22E8FEB18(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::ThreadedParser<unsigned long long,float>::BytesRead(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 40))();
}

uint64_t dmlc::data::ThreadedParser<unsigned long long,float>::ParseNext()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/parser.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"cannot call ParseNext", 21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_22E8FEBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::~ThreadedIter(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E8FEC14(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(void *)(a1 + 288))
  {
    std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back((void *)(a1 + 344), (void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      char v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire))
    {
      unint64_t v5 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(v5, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      unint64_t v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      std::exception_ptr v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 28), memory_order_acquire) & 1) == 0)
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 40));
      BOOL v9 = (v8 & 1) == 0;
    }
    else
    {
      BOOL v9 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v9) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_22E8FEDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Next(uint64_t a1)
{
  unsigned int v2 = (void *)(a1 + 288);
  if (*(void *)(a1 + 288))
  {
    dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back((void *)(a1 + 344), v2);
    *(void *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire);
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((explicit & 1) == 0) {
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
  }

  return dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Next(a1, v2);
}

void sub_22E8FEED0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Value(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    unsigned int v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(void *)(a1 + 288);
  }
  return result;
}

void sub_22E8FEF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(uint64_t a1)
{
  v5.__ptr_ = 0;
  unsigned int v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(void *)(a1 + 392)) {
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  }
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_22E8FF004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    uint64_t v20 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    size_t v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x22E8FEFD4);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back(void *a1, void *a2)
{
  std::exception_ptr v4 = (char *)a1[1];
  std::exception_ptr v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      uint64_t v24 = v6 >> 3;
      int v25 = (char *)a1[3];
      BOOL v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        unsigned int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        uint64_t v34 = v33;
        unint64_t v35 = operator new(0x1000uLL);
        uint64_t v36 = &v32[8 * v24];
        unint64_t v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          uint64_t v38 = 8 * v24;
          if (v6 < 1)
          {
            int v73 = v35;
            uint64_t v74 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            uint64_t v36 = &v76[8 * (v75 >> 2)];
            unint64_t v37 = &v76[8 * v77];
            if (v32) {
              operator delete(v32);
            }
            unsigned int v32 = v76;
            unint64_t v35 = v73;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)uint64_t v36 = v35;
        uint64_t v78 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v37 - v32) >> 2;
              }
              uint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              unsigned int v87 = v85;
              uint64_t v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v32;
              BOOL v88 = v78 == v32;
              uint64_t v78 = v36;
              if (!v88)
              {
                uint64_t v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                unsigned int v91 = v36;
                uint64_t v92 = (uint64_t *)v32;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)unsigned int v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              unint64_t v37 = &v85[8 * v86];
              if (v32) {
                operator delete(v32);
              }
              unsigned int v32 = v87;
            }
            else
            {
              uint64_t v80 = (v37 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              uint64_t v36 = &v32[8 * (v81 >> 1)];
              int v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                int v83 = v78;
              }
              uint64_t v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v36 - 1) = v94;
          v36 -= 8;
        }
        uint64_t v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      int v28 = operator new(0x1000uLL);
      int v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v25 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          std::exception_ptr v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          uint64_t v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            uint64_t v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            unint64_t v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)unint64_t v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            std::exception_ptr v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        int v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            int v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            unint64_t v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            uint64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              uint64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              uint64_t v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)uint64_t v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            uint64_t v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v16 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v16) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            uint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              int v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)std::exception_ptr v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v4;
      uint64_t v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          unint64_t v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          std::exception_ptr v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            std::exception_ptr v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            unint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)unint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          unint64_t v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            std::exception_ptr v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          size_t v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            std::exception_ptr v5 = (char *)a1[1];
          }
          uint64_t v23 = &v5[8 * v19];
          std::exception_ptr v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)std::exception_ptr v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    std::exception_ptr v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = a1[4] + v8;
  }
  *(void *)(*(void *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_22E8FF598(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Next(uint64_t a1, void *a2)
{
  unsigned int v2 = (atomic_uint *)(a1 + 24);
  if (atomic_load_explicit((atomic_uint *volatile)(a1 + 24), memory_order_acquire) == 2) {
    return 0;
  }
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load_explicit(v2, memory_order_acquire))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    uint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
  }
  int v10 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v10 + 1;
  uint64_t v11 = *(void *)(a1 + 336);
  if (v11)
  {
LABEL_9:
    *(_DWORD *)(a1 + 184) = v10;
  }
  else
  {
    while ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      uint64_t v11 = *(void *)(a1 + 336);
      if (v11)
      {
        int v10 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v11)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0)
      {
        uint64_t v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
        dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        BOOL v16 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
        uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
      uint64_t v3 = 0;
      goto LABEL_18;
    }
  }
  unint64_t v12 = *(void *)(a1 + 328);
  *a2 = *(void *)(*(void *)(*(void *)(a1 + 304) + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF));
  *(void *)(a1 + 328) = v12 + 1;
  *(void *)(a1 + 336) = v11 - 1;
  if (v12 + 1 >= 0x400)
  {
    operator delete(**(void ***)(a1 + 304));
    *(void *)(a1 + 304) += 8;
    *(void *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188)) {
    BOOL v13 = (atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire) & 1) == 0;
  }
  else {
    BOOL v13 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v13) {
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  }
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
  uint64_t v3 = 1;
LABEL_18:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v3;
}

void sub_22E8FF7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Init(std::function<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  unsigned int v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[1];
  do
  {
    uint64_t v18 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        && (*(void *)(v4 + 336) < *(void *)(v4 + 48) || *(void *)(v4 + 384)))
      {
        break;
      }
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire);
    if (explicit)
    {
      if (atomic_load_explicit((atomic_uint *volatile)(v4 + 24), memory_order_acquire) == 1)
      {
        uint64_t v6 = a1[9];
        if (!v6) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
        if (*(void *)(v4 + 336))
        {
          unint64_t v7 = *(void *)(v4 + 328);
          do
          {
            std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back((void *)(v4 + 344), (void *)(*(void *)(*(void *)(v4 + 304) + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)));
            uint64_t v8 = *(void *)(v4 + 336) - 1;
            unint64_t v7 = *(void *)(v4 + 328) + 1;
            *(void *)(v4 + 328) = v7;
            *(void *)(v4 + 336) = v8;
            if (v7 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(void *)(v4 + 304) += 8;
              uint64_t v8 = *(void *)(v4 + 336);
              unint64_t v7 = *(void *)(v4 + 328) - 512;
              *(void *)(v4 + 328) = v7;
            }
          }
          while (v8);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        int v9 = 2;
      }
      else
      {
        int v9 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      uint64_t v10 = *(void *)(v4 + 384);
      if (v10
        && (uint64_t v11 = *(void ***)(v4 + 352),
            unint64_t v12 = *(void *)(v4 + 376),
            uint64_t v18 = (*(void **)((char *)v11 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)))[v12 & 0x1FF],
            ++v12,
            *(void *)(v4 + 376) = v12,
            *(void *)(v4 + 384) = v10 - 1,
            v12 >= 0x400))
      {
        operator delete(*v11);
        int v9 = 0;
        *(void *)(v4 + 352) += 8;
        *(void *)(v4 + 376) -= 512;
      }
      else
      {
        int v9 = 0;
      }
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (!explicit)
    {
      uint64_t v13 = a1[5];
      uint64_t v19 = &v18;
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v13 + 48))(v13, &v19) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      uint64_t v14 = (void *)(v4 + 296);
      if ((atomic_load_explicit((atomic_uchar *volatile)(v4 + 40), memory_order_acquire) & 1) == 0
        || (uint64_t v14 = (void *)(v4 + 344), v18))
      {
        std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back(v14, &v18);
      }
      int v15 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v15) {
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      }
      int v9 = 0;
    }
  }
  while (v9 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Init(std::function<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_22E8FFBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12) {
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Init(std::function<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    }
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(void *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) == 1)
  {
    while (*(void *)(v17 + 336))
    {
      std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back(v15, (void *)(*(void *)(*(void *)(v17 + 304) + ((*(void *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(void *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_22EA18F80);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else if (atomic_load_explicit((atomic_uint *volatile)(v17 + 24), memory_order_acquire) {
         || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
  }
             int v20 = *(_DWORD *)(v17 + 184),
             std::unique_lock<std::mutex>::unlock(&a12),
             !v20))
  {
LABEL_10:
    if (a12.__owns_) {
      std::mutex::unlock(a12.__m_);
    }
    __cxa_end_catch();
    JUMPOUT(0x22E8FFBC0);
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

uint64_t *std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Init(std::function<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](result + 6);
    std::__function::__value_func<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::~__value_func[abi:ne180100](v1 + 2);
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x230FA80D0);
  }
  return result;
}

void std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::~__func()
{
}

void *std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E247618;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E247618;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::operator()(uint64_t a1, void **a2)
{
  if (!**a2) {
    operator new();
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 48);

  return v2();
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E2476A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E2476A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::~ThreadedIter(uint64_t a1)
{
  *(void *)a1 = &unk_26E2475B8;
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_22E9001C4(_Unwind_Exception *a1)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Destroy(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    std::mutex::lock((std::mutex *)(a1 + 56));
    atomic_store(2u, (unsigned int *)(a1 + 24));
    if (*(_DWORD *)(a1 + 188)) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    std::mutex::unlock((std::mutex *)(a1 + 56));
    uint64_t v2 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  uint64_t v3 = *(void *)(a1 + 384);
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 376);
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 352) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8));
      uint64_t v6 = *(void *)(v5 + 8 * (v4 & 0x1FF));
      if (v6)
      {
        uint64_t v13 = *(void ***)(v5 + 8 * (v4 & 0x1FF));
        std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v13);
        MEMORY[0x230FA80D0](v6, 0x20C40960023A9);
        unint64_t v4 = *(void *)(a1 + 376);
        uint64_t v3 = *(void *)(a1 + 384);
      }
      --v3;
      *(void *)(a1 + 376) = ++v4;
      *(void *)(a1 + 384) = v3;
      if (v4 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 352));
        *(void *)(a1 + 352) += 8;
        uint64_t v3 = *(void *)(a1 + 384);
        unint64_t v4 = *(void *)(a1 + 376) - 512;
        *(void *)(a1 + 376) = v4;
      }
    }
    while (v3);
  }
  uint64_t v7 = *(void *)(a1 + 336);
  if (v7)
  {
    unint64_t v8 = *(void *)(a1 + 328);
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
      uint64_t v10 = *(void *)(v9 + 8 * (v8 & 0x1FF));
      if (v10)
      {
        uint64_t v13 = *(void ***)(v9 + 8 * (v8 & 0x1FF));
        std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v13);
        MEMORY[0x230FA80D0](v10, 0x20C40960023A9);
        unint64_t v8 = *(void *)(a1 + 328);
        uint64_t v7 = *(void *)(a1 + 336);
      }
      --v7;
      *(void *)(a1 + 328) = ++v8;
      *(void *)(a1 + 336) = v7;
      if (v8 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 304));
        *(void *)(a1 + 304) += 8;
        uint64_t v7 = *(void *)(a1 + 336);
        unint64_t v8 = *(void *)(a1 + 328) - 512;
        *(void *)(a1 + 328) = v8;
      }
    }
    while (v7);
  }
  if (*(void *)(a1 + 8))
  {
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  uint64_t v12 = *(void *)(a1 + 288);
  if (v12)
  {
    uint64_t v13 = *(void ***)(a1 + 288);
    std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v13);
    MEMORY[0x230FA80D0](v12, 0x20C40960023A9);
    *(void *)(a1 + 288) = 0;
  }
}

uint64_t dmlc::data::ThreadedParser<unsigned long long,float>::~ThreadedParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247558;
  uint64_t v2 = a1 + 120;
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Destroy(a1 + 120);
  uint64_t v3 = *(void *)(a1 + 112);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 520);
  if (v4)
  {
    uint64_t v6 = *(void ***)(a1 + 520);
    std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v6);
    MEMORY[0x230FA80D0](v4, 0x20C40960023A9);
  }
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::~ThreadedIter(v2);
  *(void *)a1 = &unk_26E247510;
  uint64_t v6 = (void **)(a1 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  return a1;
}

void sub_22E90051C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)uint64_t v10 = &unk_26E247510;
  a10 = (void **)(v10 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::LibFMParser<unsigned int,float>::~LibFMParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247728;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }

  return dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(a1);
}

void dmlc::data::LibFMParser<unsigned int,float>::~LibFMParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247728;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E90063C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C402E84ECB5);
  _Unwind_Resume(a1);
}

void dmlc::data::LibFMParser<unsigned int,float>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v8 = *(uint64_t **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v10 = a4 + 16;
  unint64_t v9 = *(void *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v12 = v9 - (void)v8;
    uint64_t v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    int v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    BOOL v16 = *(uint64_t **)a4;
    uint64_t v17 = *(uint64_t **)(a4 + 8);
    uint64_t v19 = &v15[v18];
    *int v15 = 0;
    uint64_t v11 = v15 + 1;
    while (v17 != v16)
    {
      uint64_t v20 = *--v17;
      *--int v15 = v20;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = v19;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v8 = 0;
    uint64_t v11 = v8 + 1;
  }
  uint64_t v21 = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = v11;
  *(void *)(a4 + 32) = v21;
  v165 = (void **)(a4 + 96);
  *(void *)(a4 + 104) = *(void *)(a4 + 96);
  uint64_t v22 = *(void *)(a4 + 120);
  v164 = (void **)(a4 + 120);
  *(void *)(a4 + 128) = v22;
  v163 = (void **)(a4 + 144);
  *(void *)(a4 + 152) = *(void *)(a4 + 144);
  v167 = (void **)(a4 + 48);
  *(void *)(a4 + 56) = *(void *)(a4 + 48);
  *(void *)(a4 + 80) = *(void *)(a4 + 72);
  *(void *)(a4 + 168) = 0;
  v169 = (void **)(a4 + 24);
  if (a2 == a3)
  {
    int v23 = -1;
    unsigned int v170 = -1;
    uint64_t v137 = v22;
    goto LABEL_230;
  }
  uint64_t v166 = v10;
  v171 = (void *)(a4 + 40);
  uint64_t v162 = a1;
  int v23 = -1;
  unsigned int v170 = -1;
  do
  {
    uint64_t v24 = a2;
    int v25 = a2 + 1;
    while (v25 != a3)
    {
      int v27 = *v25++;
      int v26 = v27;
      if (v27 == 13 || v26 == 10)
      {
        a2 = v25 - 1;
        goto LABEL_24;
      }
    }
    a2 = a3;
LABEL_24:
    v174 = 0;
    int v173 = 0;
    int v172 = 0;
    int v29 = dmlc::ParsePair<float,float>(v24, (uint64_t)a2, (uint64_t *)&v174, (float *)&v173, (float *)&v172);
    if (v29)
    {
      if (v29 == 2)
      {
        unint64_t v31 = *(char **)(a4 + 56);
        unint64_t v30 = *(void *)(a4 + 64);
        if ((unint64_t)v31 >= v30)
        {
          uint64_t v33 = (char *)*v167;
          uint64_t v34 = (v31 - (unsigned char *)*v167) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = v30 - (void)v33;
          if (v36 >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v37);
            uint64_t v33 = *(char **)(a4 + 48);
            unint64_t v31 = *(char **)(a4 + 56);
          }
          else
          {
            uint64_t v38 = 0;
          }
          uint64_t v39 = &v38[4 * v34];
          *(_DWORD *)uint64_t v39 = v172;
          unsigned int v32 = v39 + 4;
          while (v31 != v33)
          {
            int v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(void *)(a4 + 48) = v39;
          *(void *)(a4 + 56) = v32;
          *(void *)(a4 + 64) = &v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v31 = v172;
          unsigned int v32 = v31 + 4;
        }
        *(void *)(a4 + 56) = v32;
      }
      unint64_t v41 = *(char **)(a4 + 32);
      if (v41 == *(char **)(a4 + 24)) {
        goto LABEL_61;
      }
      uint64_t v42 = (uint64_t)(*(void *)(a4 + 128) - *(void *)(a4 + 120)) >> 2;
      unint64_t v44 = *(uint64_t **)(a4 + 8);
      unint64_t v43 = *(void *)(a4 + 16);
      if ((unint64_t)v44 < v43)
      {
        *unint64_t v44 = v42;
        uint64_t v45 = v44 + 1;
LABEL_60:
        *(void *)(a4 + 8) = v45;
        unint64_t v41 = *(char **)(a4 + 32);
LABEL_61:
        if ((unint64_t)v41 >= *v171)
        {
          uint64_t v55 = (char *)*v169;
          uint64_t v56 = (v41 - (unsigned char *)*v169) >> 2;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v58 = *v171 - (void)v55;
          if (v58 >> 1 > v57) {
            unint64_t v57 = v58 >> 1;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v57;
          }
          if (v59)
          {
            uint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v171, v59);
            uint64_t v55 = *(char **)(a4 + 24);
            unint64_t v41 = *(char **)(a4 + 32);
          }
          else
          {
            uint64_t v60 = 0;
          }
          uint64_t v61 = &v60[4 * v56];
          *(_DWORD *)uint64_t v61 = v173;
          uint64_t v54 = v61 + 4;
          while (v41 != v55)
          {
            int v62 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *((_DWORD *)v61 - 1) = v62;
            v61 -= 4;
          }
          *(void *)(a4 + 24) = v61;
          *(void *)(a4 + 32) = v54;
          *(void *)(a4 + 40) = &v60[4 * v59];
          if (v55) {
            operator delete(v55);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v41 = v173;
          uint64_t v54 = v41 + 4;
        }
        *(void *)(a4 + 32) = v54;
        uint64_t v63 = v174;
        while (1)
        {
          if (v63 == a2) {
            goto LABEL_209;
          }
          while (1)
          {
            if (v63 == a2) {
              goto LABEL_209;
            }
            int v64 = *v63;
            if ((v64 - 48) < 0xA) {
              break;
            }
            unsigned int v65 = v64 - 43;
            BOOL v66 = v65 > 0x3A;
            uint64_t v67 = (1 << v65) & 0x40000000400000DLL;
            if (!v66 && v67 != 0) {
              break;
            }
            ++v63;
          }
          if (v63 == a2)
          {
            dmlc::ParseUnsignedInt<unsigned int>(a2);
LABEL_103:
            uint64_t v63 = a2;
            goto LABEL_104;
          }
          uint64_t v69 = v63;
          while (1)
          {
            int v70 = *v69;
            if ((v70 - 48) >= 0xA)
            {
              unsigned int v71 = v70 - 43;
              BOOL v66 = v71 > 0x3A;
              uint64_t v72 = (1 << v71) & 0x40000000400000DLL;
              if (v66 || v72 == 0) {
                break;
              }
            }
            if (++v69 == a2)
            {
              uint64_t v69 = a2;
              break;
            }
          }
          unsigned int v74 = dmlc::ParseUnsignedInt<unsigned int>(v63);
          uint64_t v63 = a2;
          if (v69 == a2) {
            goto LABEL_104;
          }
          unsigned int v75 = v74;
          uint64_t v76 = v69 + 1;
          while (1)
          {
            int v77 = *v69;
            if (v77 != 9 && v77 != 32) {
              break;
            }
            ++v69;
            ++v76;
            if (v69 == a2) {
              goto LABEL_103;
            }
          }
          if (v77 != 58)
          {
            uint64_t v63 = v69;
LABEL_104:
            v174 = v63;
            continue;
          }
          while (1)
          {
            if (v76 == a2)
            {
              uint64_t v69 = a2;
              goto LABEL_112;
            }
            int v78 = *v76;
            if ((v78 - 48) < 0xA) {
              break;
            }
            ++v69;
            ++v76;
            unsigned int v79 = v78 - 43;
            BOOL v66 = v79 > 0x3A;
            uint64_t v80 = (1 << v79) & 0x40000000400000DLL;
            if (!v66 && v80 != 0) {
              goto LABEL_112;
            }
          }
          uint64_t v69 = v76;
LABEL_112:
          if (v69 == a2) {
            break;
          }
          uint64_t v63 = v69;
          while (1)
          {
            int v82 = *v63;
            if ((v82 - 48) >= 0xA)
            {
              unsigned int v83 = v82 - 43;
              BOOL v66 = v83 > 0x3A;
              uint64_t v84 = (1 << v83) & 0x40000000400000DLL;
              if (v66 || v84 == 0) {
                break;
              }
            }
            if (++v63 == a2)
            {
              uint64_t v63 = a2;
              break;
            }
          }
          unsigned int v86 = dmlc::ParseUnsignedInt<unsigned int>(v69);
          if (v63 == a2) {
            goto LABEL_129;
          }
          unsigned int v87 = v63 + 1;
          while (1)
          {
            int v88 = *v63;
            if (v88 != 9 && v88 != 32) {
              break;
            }
            ++v63;
            ++v87;
            if (v63 == a2) {
              goto LABEL_129;
            }
          }
          if (v88 != 58) {
            goto LABEL_130;
          }
          while (1)
          {
            if (v87 == a2)
            {
              uint64_t v63 = a2;
              goto LABEL_148;
            }
            int v101 = *v87;
            if ((v101 - 48) < 0xA) {
              break;
            }
            ++v63;
            ++v87;
            unsigned int v102 = v101 - 43;
            BOOL v66 = v102 > 0x3A;
            uint64_t v103 = (1 << v102) & 0x40000000400000DLL;
            if (!v66 && v103 != 0) {
              goto LABEL_148;
            }
          }
          uint64_t v63 = v87;
LABEL_148:
          int v105 = v23;
          unint64_t v106 = a2;
          if (v63 != a2)
          {
            unint64_t v106 = v63;
            while (1)
            {
              int v107 = *v106;
              if ((v107 - 48) >= 0xA)
              {
                unsigned int v108 = v107 - 43;
                BOOL v66 = v108 > 0x3A;
                uint64_t v109 = (1 << v108) & 0x40000000400000DLL;
                if (v66 || v109 == 0) {
                  break;
                }
              }
              if (++v106 == a2)
              {
                unint64_t v106 = a2;
                break;
              }
            }
          }
          v174 = v106;
          float v90 = dmlc::ParseFloat<float,false>((uint64_t)v63, 0);
          int v89 = 1;
          uint64_t v63 = v106;
          int v23 = v105;
LABEL_131:
          unsigned int v168 = v23;
          uint64_t v92 = *(char **)(a4 + 104);
          unint64_t v91 = *(void *)(a4 + 112);
          if ((unint64_t)v92 >= v91)
          {
            uint64_t v94 = (char *)*v165;
            uint64_t v95 = (v92 - (unsigned char *)*v165) >> 2;
            unint64_t v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            int v97 = v89;
            uint64_t v98 = v91 - (void)v94;
            if (v98 >> 1 > v96) {
              unint64_t v96 = v98 >> 1;
            }
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v99 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v99 = v96;
            }
            if (v99)
            {
              v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 112, v99);
              uint64_t v94 = *(char **)(a4 + 96);
              uint64_t v92 = *(char **)(a4 + 104);
            }
            else
            {
              v100 = 0;
            }
            v111 = (unsigned int *)&v100[4 * v95];
            unsigned int *v111 = v75;
            uint64_t v93 = v111 + 1;
            while (v92 != v94)
            {
              unsigned int v112 = *((_DWORD *)v92 - 1);
              v92 -= 4;
              *--v111 = v112;
            }
            *(void *)(a4 + 96) = v111;
            *(void *)(a4 + 104) = v93;
            *(void *)(a4 + 112) = &v100[4 * v99];
            if (v94) {
              operator delete(v94);
            }
            int v89 = v97;
          }
          else
          {
            *(_DWORD *)uint64_t v92 = v75;
            uint64_t v93 = v92 + 4;
          }
          *(void *)(a4 + 104) = v93;
          unsigned int v114 = *(char **)(a4 + 128);
          unint64_t v113 = *(void *)(a4 + 136);
          if ((unint64_t)v114 >= v113)
          {
            v116 = (char *)*v164;
            uint64_t v117 = (v114 - (unsigned char *)*v164) >> 2;
            unint64_t v118 = v117 + 1;
            if ((unint64_t)(v117 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            int v119 = v89;
            uint64_t v120 = v113 - (void)v116;
            if (v120 >> 1 > v118) {
              unint64_t v118 = v120 >> 1;
            }
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v121 = v118;
            }
            if (v121)
            {
              v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 136, v121);
              v116 = *(char **)(a4 + 120);
              unsigned int v114 = *(char **)(a4 + 128);
            }
            else
            {
              v122 = 0;
            }
            v123 = (unsigned int *)&v122[4 * v117];
            unsigned int *v123 = v86;
            uint64_t v115 = v123 + 1;
            while (v114 != v116)
            {
              unsigned int v124 = *((_DWORD *)v114 - 1);
              v114 -= 4;
              *--v123 = v124;
            }
            *(void *)(a4 + 120) = v123;
            *(void *)(a4 + 128) = v115;
            *(void *)(a4 + 136) = &v122[4 * v121];
            if (v116) {
              operator delete(v116);
            }
            int v89 = v119;
          }
          else
          {
            *(_DWORD *)unsigned int v114 = v86;
            uint64_t v115 = v114 + 4;
          }
          *(void *)(a4 + 128) = v115;
          if (v168 >= v75) {
            int v23 = v75;
          }
          else {
            int v23 = v168;
          }
          unsigned int v125 = v170;
          if (v170 >= v86) {
            unsigned int v125 = v86;
          }
          unsigned int v170 = v125;
          if (v89)
          {
            unint64_t v127 = *(char **)(a4 + 152);
            unint64_t v126 = *(void *)(a4 + 160);
            if ((unint64_t)v127 >= v126)
            {
              v129 = (char *)*v163;
              uint64_t v130 = (v127 - (unsigned char *)*v163) >> 2;
              unint64_t v131 = v130 + 1;
              if ((unint64_t)(v130 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v132 = v126 - (void)v129;
              if (v132 >> 1 > v131) {
                unint64_t v131 = v132 >> 1;
              }
              if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v133 = v131;
              }
              if (v133)
              {
                uint64_t v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v133);
                v129 = *(char **)(a4 + 144);
                unint64_t v127 = *(char **)(a4 + 152);
              }
              else
              {
                uint64_t v134 = 0;
              }
              v135 = (float *)&v134[4 * v130];
              float *v135 = v90;
              v128 = v135 + 1;
              while (v127 != v129)
              {
                int v136 = *((_DWORD *)v127 - 1);
                v127 -= 4;
                *((_DWORD *)v135-- - 1) = v136;
              }
              *(void *)(a4 + 144) = v135;
              *(void *)(a4 + 152) = v128;
              *(void *)(a4 + 160) = &v134[4 * v133];
              if (v129) {
                operator delete(v129);
              }
            }
            else
            {
              *(float *)unint64_t v127 = v90;
              v128 = v127 + 4;
            }
            *(void *)(a4 + 152) = v128;
          }
        }
        unsigned int v86 = dmlc::ParseUnsignedInt<unsigned int>(a2);
LABEL_129:
        uint64_t v63 = a2;
LABEL_130:
        int v89 = 0;
        v174 = v63;
        float v90 = 0.0;
        goto LABEL_131;
      }
      uint64_t v46 = *(uint64_t **)a4;
      uint64_t v47 = ((uint64_t)v44 - *(void *)a4) >> 3;
      unint64_t v48 = v47 + 1;
      if (!((unint64_t)(v47 + 1) >> 61))
      {
        uint64_t v49 = v43 - (void)v46;
        if (v49 >> 2 > v48) {
          unint64_t v48 = v49 >> 2;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          unint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10, v50);
          uint64_t v46 = *(uint64_t **)a4;
          unint64_t v44 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          unint64_t v51 = 0;
        }
        uint64_t v52 = (uint64_t *)&v51[8 * v47];
        uint64_t *v52 = v42;
        uint64_t v45 = v52 + 1;
        while (v44 != v46)
        {
          uint64_t v53 = *--v44;
          *--uint64_t v52 = v53;
        }
        *(void *)a4 = v52;
        *(void *)(a4 + 8) = v45;
        *(void *)(a4 + 16) = &v51[8 * v50];
        if (v46) {
          operator delete(v46);
        }
        goto LABEL_60;
      }
LABEL_249:
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
LABEL_209:
    ;
  }
  while (a2 != a3);
  uint64_t v22 = *(void *)(a4 + 120);
  uint64_t v137 = *(void *)(a4 + 128);
  if (*(void *)(a4 + 32) == *(void *)(a4 + 24))
  {
    a1 = v162;
    goto LABEL_230;
  }
  uint64_t v138 = (v137 - v22) >> 2;
  v140 = *(uint64_t **)(a4 + 8);
  unint64_t v139 = *(void *)(a4 + 16);
  if ((unint64_t)v140 < v139)
  {
    uint64_t *v140 = v138;
    v141 = v140 + 1;
    a1 = v162;
    goto LABEL_229;
  }
  v142 = *(uint64_t **)a4;
  uint64_t v143 = ((uint64_t)v140 - *(void *)a4) >> 3;
  unint64_t v144 = v143 + 1;
  if ((unint64_t)(v143 + 1) >> 61) {
    goto LABEL_249;
  }
  uint64_t v145 = v139 - (void)v142;
  if (v145 >> 2 > v144) {
    unint64_t v144 = v145 >> 2;
  }
  if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v146 = v144;
  }
  a1 = v162;
  if (v146)
  {
    int v147 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v166, v146);
    v142 = *(uint64_t **)a4;
    v140 = *(uint64_t **)(a4 + 8);
  }
  else
  {
    int v147 = 0;
  }
  v148 = (uint64_t *)&v147[8 * v143];
  v149 = &v147[8 * v146];
  uint64_t *v148 = v138;
  v141 = v148 + 1;
  while (v140 != v142)
  {
    uint64_t v150 = *--v140;
    *--v148 = v150;
  }
  *(void *)a4 = v148;
  *(void *)(a4 + 8) = v141;
  *(void *)(a4 + 16) = v149;
  if (v142) {
    operator delete(v142);
  }
LABEL_229:
  *(void *)(a4 + 8) = v141;
  uint64_t v22 = *(void *)(a4 + 120);
  uint64_t v137 = *(void *)(a4 + 128);
LABEL_230:
  if (*(void *)(a4 + 104) - *(void *)(a4 + 96) != v137 - v22)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/libfm_parser.h");
    uint64_t v152 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)"Check failed: out->field.size() == out->index.size()", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v174);
  }
  if (((uint64_t)(*(void *)(a4 + 32) - *(void *)(a4 + 24)) >> 2) + 1 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    v154 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    dmlc::LogMessageFatal::Entry::Init(v154, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/libfm_parser.h");
    v155 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v174);
  }
  int v157 = *(_DWORD *)(a1 + 224);
  if (v157 < 1)
  {
    if (v157 < 0)
    {
      unint64_t v158 = *(_DWORD **)(a4 + 120);
      int v159 = *(_DWORD **)(a4 + 128);
      if (v158 != v159 && v170 && *(void *)(a4 + 96) != *(void *)(a4 + 104) && v23) {
        goto LABEL_244;
      }
    }
  }
  else
  {
    unint64_t v158 = *(_DWORD **)(a4 + 120);
    int v159 = *(_DWORD **)(a4 + 128);
LABEL_244:
    while (v158 != v159)
      --*v158++;
    int v160 = *(_DWORD **)(a4 + 96);
    v161 = *(_DWORD **)(a4 + 104);
    while (v160 != v161)
      --*v160++;
  }
}

void sub_22E90117C(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 104));
  _Unwind_Resume(a1);
}

void dmlc::LogCheckFormat<std::string,char [6]>(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)" (", 2);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" vs. ", 5);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"libfm", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
  operator new();
}

void sub_22E901354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::LibFMParser<unsigned long long,float>::~LibFMParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247790;
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }

  return dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(a1);
}

void dmlc::data::LibFMParser<unsigned long long,float>::~LibFMParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247790;
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E901460(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C40E19BAD78);
  _Unwind_Resume(a1);
}

void dmlc::data::LibFMParser<unsigned long long,float>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v8 = *(uint64_t **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v10 = a4 + 16;
  unint64_t v9 = *(void *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v12 = v9 - (void)v8;
    uint64_t v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    int v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    BOOL v16 = *(uint64_t **)a4;
    uint64_t v17 = *(uint64_t **)(a4 + 8);
    uint64_t v19 = &v15[v18];
    *int v15 = 0;
    uint64_t v11 = v15 + 1;
    while (v17 != v16)
    {
      uint64_t v20 = *--v17;
      *--int v15 = v20;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = v19;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v8 = 0;
    uint64_t v11 = v8 + 1;
  }
  uint64_t v21 = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = v11;
  *(void *)(a4 + 32) = v21;
  v165 = (void **)(a4 + 96);
  *(void *)(a4 + 104) = *(void *)(a4 + 96);
  uint64_t v22 = *(void *)(a4 + 120);
  v164 = (void **)(a4 + 120);
  *(void *)(a4 + 128) = v22;
  v163 = (void **)(a4 + 144);
  *(void *)(a4 + 152) = *(void *)(a4 + 144);
  v167 = (void **)(a4 + 48);
  *(void *)(a4 + 56) = *(void *)(a4 + 48);
  *(void *)(a4 + 80) = *(void *)(a4 + 72);
  *(void *)(a4 + 168) = 0;
  *(void *)(a4 + 176) = 0;
  v169 = (void **)(a4 + 24);
  if (a2 == a3)
  {
    uint64_t v23 = -1;
    unint64_t v170 = -1;
    uint64_t v137 = v22;
    goto LABEL_229;
  }
  uint64_t v166 = v10;
  uint64_t v162 = a1;
  uint64_t v23 = -1;
  unint64_t v170 = -1;
  v171 = (void *)(a4 + 40);
  do
  {
    uint64_t v24 = a2;
    int v25 = a2 + 1;
    while (v25 != a3)
    {
      int v27 = *v25++;
      int v26 = v27;
      if (v27 == 13 || v26 == 10)
      {
        a2 = v25 - 1;
        goto LABEL_24;
      }
    }
    a2 = a3;
LABEL_24:
    v174 = 0;
    int v173 = 0;
    int v172 = 0;
    int v29 = dmlc::ParsePair<float,float>(v24, (uint64_t)a2, (uint64_t *)&v174, (float *)&v173, (float *)&v172);
    if (v29)
    {
      if (v29 == 2)
      {
        unint64_t v31 = *(char **)(a4 + 56);
        unint64_t v30 = *(void *)(a4 + 64);
        if ((unint64_t)v31 >= v30)
        {
          uint64_t v33 = (char *)*v167;
          uint64_t v34 = (v31 - (unsigned char *)*v167) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = v30 - (void)v33;
          if (v36 >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v37);
            uint64_t v33 = *(char **)(a4 + 48);
            unint64_t v31 = *(char **)(a4 + 56);
          }
          else
          {
            uint64_t v38 = 0;
          }
          uint64_t v39 = &v38[4 * v34];
          *(_DWORD *)uint64_t v39 = v172;
          unsigned int v32 = v39 + 4;
          while (v31 != v33)
          {
            int v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(void *)(a4 + 48) = v39;
          *(void *)(a4 + 56) = v32;
          *(void *)(a4 + 64) = &v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v31 = v172;
          unsigned int v32 = v31 + 4;
        }
        *(void *)(a4 + 56) = v32;
      }
      unint64_t v41 = *(char **)(a4 + 32);
      if (v41 == *(char **)(a4 + 24)) {
        goto LABEL_61;
      }
      uint64_t v42 = (uint64_t)(*(void *)(a4 + 128) - *(void *)(a4 + 120)) >> 3;
      unint64_t v44 = *(uint64_t **)(a4 + 8);
      unint64_t v43 = *(void *)(a4 + 16);
      if ((unint64_t)v44 < v43)
      {
        *unint64_t v44 = v42;
        uint64_t v45 = v44 + 1;
LABEL_60:
        *(void *)(a4 + 8) = v45;
        unint64_t v41 = *(char **)(a4 + 32);
LABEL_61:
        if ((unint64_t)v41 >= *v171)
        {
          uint64_t v55 = (char *)*v169;
          uint64_t v56 = (v41 - (unsigned char *)*v169) >> 2;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v58 = *v171 - (void)v55;
          if (v58 >> 1 > v57) {
            unint64_t v57 = v58 >> 1;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v57;
          }
          if (v59)
          {
            uint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v171, v59);
            uint64_t v55 = *(char **)(a4 + 24);
            unint64_t v41 = *(char **)(a4 + 32);
          }
          else
          {
            uint64_t v60 = 0;
          }
          uint64_t v61 = &v60[4 * v56];
          *(_DWORD *)uint64_t v61 = v173;
          uint64_t v54 = v61 + 4;
          while (v41 != v55)
          {
            int v62 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *((_DWORD *)v61 - 1) = v62;
            v61 -= 4;
          }
          *(void *)(a4 + 24) = v61;
          *(void *)(a4 + 32) = v54;
          *(void *)(a4 + 40) = &v60[4 * v59];
          if (v55) {
            operator delete(v55);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v41 = v173;
          uint64_t v54 = v41 + 4;
        }
        *(void *)(a4 + 32) = v54;
        uint64_t v63 = v174;
        while (1)
        {
          if (v63 == a2) {
            goto LABEL_208;
          }
          while (1)
          {
            if (v63 == a2) {
              goto LABEL_208;
            }
            int v64 = *v63;
            if ((v64 - 48) < 0xA) {
              break;
            }
            unsigned int v65 = v64 - 43;
            BOOL v66 = v65 > 0x3A;
            uint64_t v67 = (1 << v65) & 0x40000000400000DLL;
            if (!v66 && v67 != 0) {
              break;
            }
            ++v63;
          }
          if (v63 == a2)
          {
            dmlc::ParseUnsignedInt<unsigned long long>(a2);
LABEL_103:
            uint64_t v63 = a2;
            goto LABEL_104;
          }
          uint64_t v69 = v63;
          while (1)
          {
            int v70 = *v69;
            if ((v70 - 48) >= 0xA)
            {
              unsigned int v71 = v70 - 43;
              BOOL v66 = v71 > 0x3A;
              uint64_t v72 = (1 << v71) & 0x40000000400000DLL;
              if (v66 || v72 == 0) {
                break;
              }
            }
            if (++v69 == a2)
            {
              uint64_t v69 = a2;
              break;
            }
          }
          uint64_t v74 = dmlc::ParseUnsignedInt<unsigned long long>(v63);
          uint64_t v63 = a2;
          if (v69 == a2) {
            goto LABEL_104;
          }
          unint64_t v75 = v74;
          uint64_t v76 = v69 + 1;
          while (1)
          {
            int v77 = *v69;
            if (v77 != 9 && v77 != 32) {
              break;
            }
            ++v69;
            ++v76;
            if (v69 == a2) {
              goto LABEL_103;
            }
          }
          if (v77 != 58)
          {
            uint64_t v63 = v69;
LABEL_104:
            v174 = v63;
            continue;
          }
          while (1)
          {
            if (v76 == a2)
            {
              uint64_t v69 = a2;
              goto LABEL_112;
            }
            int v78 = *v76;
            if ((v78 - 48) < 0xA) {
              break;
            }
            ++v69;
            ++v76;
            unsigned int v79 = v78 - 43;
            BOOL v66 = v79 > 0x3A;
            uint64_t v80 = (1 << v79) & 0x40000000400000DLL;
            if (!v66 && v80 != 0) {
              goto LABEL_112;
            }
          }
          uint64_t v69 = v76;
LABEL_112:
          if (v69 == a2) {
            break;
          }
          uint64_t v63 = v69;
          while (1)
          {
            int v82 = *v63;
            if ((v82 - 48) >= 0xA)
            {
              unsigned int v83 = v82 - 43;
              BOOL v66 = v83 > 0x3A;
              uint64_t v84 = (1 << v83) & 0x40000000400000DLL;
              if (v66 || v84 == 0) {
                break;
              }
            }
            if (++v63 == a2)
            {
              uint64_t v63 = a2;
              break;
            }
          }
          unint64_t v86 = dmlc::ParseUnsignedInt<unsigned long long>(v69);
          if (v63 == a2) {
            goto LABEL_129;
          }
          unsigned int v87 = v63 + 1;
          while (1)
          {
            int v88 = *v63;
            if (v88 != 9 && v88 != 32) {
              break;
            }
            ++v63;
            ++v87;
            if (v63 == a2) {
              goto LABEL_129;
            }
          }
          if (v88 != 58) {
            goto LABEL_130;
          }
          while (1)
          {
            if (v87 == a2)
            {
              uint64_t v63 = a2;
              goto LABEL_148;
            }
            int v101 = *v87;
            if ((v101 - 48) < 0xA) {
              break;
            }
            ++v63;
            ++v87;
            unsigned int v102 = v101 - 43;
            BOOL v66 = v102 > 0x3A;
            uint64_t v103 = (1 << v102) & 0x40000000400000DLL;
            if (!v66 && v103 != 0) {
              goto LABEL_148;
            }
          }
          uint64_t v63 = v87;
LABEL_148:
          uint64_t v105 = v23;
          unint64_t v106 = a2;
          if (v63 != a2)
          {
            unint64_t v106 = v63;
            while (1)
            {
              int v107 = *v106;
              if ((v107 - 48) >= 0xA)
              {
                unsigned int v108 = v107 - 43;
                BOOL v66 = v108 > 0x3A;
                uint64_t v109 = (1 << v108) & 0x40000000400000DLL;
                if (v66 || v109 == 0) {
                  break;
                }
              }
              if (++v106 == a2)
              {
                unint64_t v106 = a2;
                break;
              }
            }
          }
          v174 = v106;
          float v90 = dmlc::ParseFloat<float,false>((uint64_t)v63, 0);
          int v89 = 1;
          uint64_t v63 = v106;
          uint64_t v23 = v105;
LABEL_131:
          unint64_t v168 = v23;
          uint64_t v92 = *(char **)(a4 + 104);
          unint64_t v91 = *(void *)(a4 + 112);
          if ((unint64_t)v92 >= v91)
          {
            uint64_t v94 = (char *)*v165;
            uint64_t v95 = (v92 - (unsigned char *)*v165) >> 3;
            unint64_t v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 61) {
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            }
            int v97 = v89;
            uint64_t v98 = v91 - (void)v94;
            if (v98 >> 2 > v96) {
              unint64_t v96 = v98 >> 2;
            }
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v99 = v96;
            }
            if (v99)
            {
              v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 112, v99);
              uint64_t v94 = *(char **)(a4 + 96);
              uint64_t v92 = *(char **)(a4 + 104);
            }
            else
            {
              v100 = 0;
            }
            v111 = (unint64_t *)&v100[8 * v95];
            unint64_t *v111 = v75;
            uint64_t v93 = v111 + 1;
            while (v92 != v94)
            {
              unint64_t v112 = *((void *)v92 - 1);
              v92 -= 8;
              *--v111 = v112;
            }
            *(void *)(a4 + 96) = v111;
            *(void *)(a4 + 104) = v93;
            *(void *)(a4 + 112) = &v100[8 * v99];
            if (v94) {
              operator delete(v94);
            }
            int v89 = v97;
          }
          else
          {
            *(void *)uint64_t v92 = v75;
            uint64_t v93 = v92 + 8;
          }
          *(void *)(a4 + 104) = v93;
          unsigned int v114 = *(unint64_t **)(a4 + 128);
          unint64_t v113 = *(void *)(a4 + 136);
          if ((unint64_t)v114 >= v113)
          {
            v116 = (unint64_t *)*v164;
            uint64_t v117 = ((char *)v114 - (unsigned char *)*v164) >> 3;
            unint64_t v118 = v117 + 1;
            if ((unint64_t)(v117 + 1) >> 61) {
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            }
            int v119 = v89;
            uint64_t v120 = v113 - (void)v116;
            if (v120 >> 2 > v118) {
              unint64_t v118 = v120 >> 2;
            }
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v121 = v118;
            }
            if (v121)
            {
              v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 136, v121);
              v116 = *(unint64_t **)(a4 + 120);
              unsigned int v114 = *(unint64_t **)(a4 + 128);
            }
            else
            {
              v122 = 0;
            }
            v123 = (unint64_t *)&v122[8 * v117];
            unint64_t *v123 = v86;
            uint64_t v115 = v123 + 1;
            while (v114 != v116)
            {
              unint64_t v124 = *--v114;
              *--v123 = v124;
            }
            *(void *)(a4 + 120) = v123;
            *(void *)(a4 + 128) = v115;
            *(void *)(a4 + 136) = &v122[8 * v121];
            if (v116) {
              operator delete(v116);
            }
            int v89 = v119;
          }
          else
          {
            *unsigned int v114 = v86;
            uint64_t v115 = v114 + 1;
          }
          *(void *)(a4 + 128) = v115;
          uint64_t v23 = v168;
          if (v168 >= v75) {
            uint64_t v23 = v75;
          }
          unint64_t v125 = v170;
          if (v170 >= v86) {
            unint64_t v125 = v86;
          }
          unint64_t v170 = v125;
          if (v89)
          {
            unint64_t v127 = *(char **)(a4 + 152);
            unint64_t v126 = *(void *)(a4 + 160);
            if ((unint64_t)v127 >= v126)
            {
              v129 = (char *)*v163;
              uint64_t v130 = (v127 - (unsigned char *)*v163) >> 2;
              unint64_t v131 = v130 + 1;
              if ((unint64_t)(v130 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v132 = v126 - (void)v129;
              if (v132 >> 1 > v131) {
                unint64_t v131 = v132 >> 1;
              }
              if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v133 = v131;
              }
              if (v133)
              {
                uint64_t v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v133);
                v129 = *(char **)(a4 + 144);
                unint64_t v127 = *(char **)(a4 + 152);
              }
              else
              {
                uint64_t v134 = 0;
              }
              v135 = (float *)&v134[4 * v130];
              float *v135 = v90;
              v128 = v135 + 1;
              while (v127 != v129)
              {
                int v136 = *((_DWORD *)v127 - 1);
                v127 -= 4;
                *((_DWORD *)v135-- - 1) = v136;
              }
              *(void *)(a4 + 144) = v135;
              *(void *)(a4 + 152) = v128;
              *(void *)(a4 + 160) = &v134[4 * v133];
              if (v129) {
                operator delete(v129);
              }
            }
            else
            {
              *(float *)unint64_t v127 = v90;
              v128 = v127 + 4;
            }
            *(void *)(a4 + 152) = v128;
          }
        }
        unint64_t v86 = dmlc::ParseUnsignedInt<unsigned long long>(a2);
LABEL_129:
        uint64_t v63 = a2;
LABEL_130:
        int v89 = 0;
        v174 = v63;
        float v90 = 0.0;
        goto LABEL_131;
      }
      uint64_t v46 = *(uint64_t **)a4;
      uint64_t v47 = ((uint64_t)v44 - *(void *)a4) >> 3;
      unint64_t v48 = v47 + 1;
      if (!((unint64_t)(v47 + 1) >> 61))
      {
        uint64_t v49 = v43 - (void)v46;
        if (v49 >> 2 > v48) {
          unint64_t v48 = v49 >> 2;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          unint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10, v50);
          uint64_t v46 = *(uint64_t **)a4;
          unint64_t v44 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          unint64_t v51 = 0;
        }
        uint64_t v52 = (uint64_t *)&v51[8 * v47];
        uint64_t *v52 = v42;
        uint64_t v45 = v52 + 1;
        while (v44 != v46)
        {
          uint64_t v53 = *--v44;
          *--uint64_t v52 = v53;
        }
        *(void *)a4 = v52;
        *(void *)(a4 + 8) = v45;
        *(void *)(a4 + 16) = &v51[8 * v50];
        if (v46) {
          operator delete(v46);
        }
        goto LABEL_60;
      }
LABEL_248:
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
LABEL_208:
    ;
  }
  while (a2 != a3);
  uint64_t v22 = *(void *)(a4 + 120);
  uint64_t v137 = *(void *)(a4 + 128);
  if (*(void *)(a4 + 32) == *(void *)(a4 + 24))
  {
    a1 = v162;
    goto LABEL_229;
  }
  uint64_t v138 = (v137 - v22) >> 3;
  v140 = *(uint64_t **)(a4 + 8);
  unint64_t v139 = *(void *)(a4 + 16);
  if ((unint64_t)v140 < v139)
  {
    uint64_t *v140 = v138;
    v141 = v140 + 1;
    a1 = v162;
    goto LABEL_228;
  }
  v142 = *(uint64_t **)a4;
  uint64_t v143 = ((uint64_t)v140 - *(void *)a4) >> 3;
  unint64_t v144 = v143 + 1;
  if ((unint64_t)(v143 + 1) >> 61) {
    goto LABEL_248;
  }
  uint64_t v145 = v139 - (void)v142;
  if (v145 >> 2 > v144) {
    unint64_t v144 = v145 >> 2;
  }
  if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v146 = v144;
  }
  a1 = v162;
  if (v146)
  {
    int v147 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v166, v146);
    v142 = *(uint64_t **)a4;
    v140 = *(uint64_t **)(a4 + 8);
  }
  else
  {
    int v147 = 0;
  }
  v148 = (uint64_t *)&v147[8 * v143];
  v149 = &v147[8 * v146];
  uint64_t *v148 = v138;
  v141 = v148 + 1;
  while (v140 != v142)
  {
    uint64_t v150 = *--v140;
    *--v148 = v150;
  }
  *(void *)a4 = v148;
  *(void *)(a4 + 8) = v141;
  *(void *)(a4 + 16) = v149;
  if (v142) {
    operator delete(v142);
  }
LABEL_228:
  *(void *)(a4 + 8) = v141;
  uint64_t v22 = *(void *)(a4 + 120);
  uint64_t v137 = *(void *)(a4 + 128);
LABEL_229:
  if (*(void *)(a4 + 104) - *(void *)(a4 + 96) != v137 - v22)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/libfm_parser.h");
    uint64_t v152 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)"Check failed: out->field.size() == out->index.size()", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v174);
  }
  if (((uint64_t)(*(void *)(a4 + 32) - *(void *)(a4 + 24)) >> 2) + 1 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    v154 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    dmlc::LogMessageFatal::Entry::Init(v154, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/libfm_parser.h");
    v155 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v174);
  }
  int v157 = *(_DWORD *)(a1 + 232);
  if (v157 < 1)
  {
    if (v157 < 0)
    {
      unint64_t v158 = *(void **)(a4 + 120);
      int v159 = *(void **)(a4 + 128);
      if (v158 != v159 && v170 && *(void *)(a4 + 96) != *(void *)(a4 + 104) && v23) {
        goto LABEL_243;
      }
    }
  }
  else
  {
    unint64_t v158 = *(void **)(a4 + 120);
    int v159 = *(void **)(a4 + 128);
LABEL_243:
    while (v158 != v159)
      --*v158++;
    int v160 = *(void **)(a4 + 96);
    v161 = *(void **)(a4 + 104);
    while (v160 != v161)
      --*v160++;
  }
}

void sub_22E901F9C(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CSVParser<unsigned int,float>::~CSVParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E2477F8;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }

  return dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(a1);
}

void dmlc::data::CSVParser<unsigned int,float>::~CSVParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E2477F8;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E9020BC(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C40CF2D762DLL);
  _Unwind_Resume(a1);
}

void dmlc::data::CSVParser<unsigned int,float>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v8 = *(uint64_t **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v10 = a4 + 16;
  unint64_t v9 = *(void *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v12 = v9 - (void)v8;
    uint64_t v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    int v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    BOOL v16 = *(uint64_t **)a4;
    uint64_t v17 = *(uint64_t **)(a4 + 8);
    uint64_t v19 = &v15[v18];
    *int v15 = 0;
    uint64_t v11 = v15 + 1;
    while (v17 != v16)
    {
      uint64_t v20 = *--v17;
      *--int v15 = v20;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = v19;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v8 = 0;
    uint64_t v11 = v8 + 1;
  }
  uint64_t v21 = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = v11;
  *(void *)(a4 + 32) = v21;
  *(void *)(a4 + 104) = *(void *)(a4 + 96);
  unint64_t v127 = (void **)(a4 + 120);
  *(void *)(a4 + 128) = *(void *)(a4 + 120);
  v128 = (void **)(a4 + 144);
  *(void *)(a4 + 152) = *(void *)(a4 + 144);
  unint64_t v125 = (void **)(a4 + 48);
  unint64_t v126 = (void **)(a4 + 24);
  *(void *)(a4 + 56) = *(void *)(a4 + 48);
  *(void *)(a4 + 80) = *(void *)(a4 + 72);
  *(void *)(a4 + 168) = 0;
  if (a2 != a3)
  {
    do
    {
      int v22 = *a2;
      if (v22 != 13 && v22 != 10) {
        goto LABEL_21;
      }
      ++a2;
    }
    while (a2 != a3);
    a2 = a3;
LABEL_21:
    uint64_t v24 = v21;
    if (a2 == a3) {
      goto LABEL_184;
    }
    uint64_t v124 = v10;
    while (1)
    {
      if (!a2)
      {
        uint64_t v30 = 0;
        uint64_t v32 = 0;
        goto LABEL_46;
      }
      uint64_t v25 = 0;
      do
      {
        int v26 = a2[v25];
        if (v26 != 239 && v25 == 0)
        {
          uint64_t v30 = 0;
LABEL_45:
          uint64_t v32 = (uint64_t)&a2[v25];
          goto LABEL_46;
        }
        if (v26 != 187 && v25 == 1)
        {
          uint64_t v30 = 1;
          goto LABEL_45;
        }
        if (v26 != 191 && v25 == 2)
        {
          uint64_t v30 = 2;
          goto LABEL_45;
        }
        uint64_t v30 = v25 + 1;
        unsigned int v31 = v25;
        if (&a2[v25 + 1] == a3) {
          break;
        }
        ++v25;
      }
      while (v31 < 2);
      uint64_t v32 = (uint64_t)&a2[v30];
      if (v31 > 1) {
        goto LABEL_47;
      }
      uint64_t v30 = v30;
LABEL_46:
      v32 -= v30;
LABEL_47:
      uint64_t v33 = (unsigned __int8 *)(v32 + 1);
      while (v33 != a3)
      {
        int v35 = *v33++;
        int v34 = v35;
        if (v35 == 13 || v34 == 10)
        {
          a2 = v33 - 1;
          goto LABEL_56;
        }
      }
      a2 = a3;
LABEL_56:
      if ((unsigned __int8 *)v32 == a2)
      {
        float v39 = 0.0;
        int v40 = 2143289344;
      }
      else
      {
        int v37 = 0;
        int v38 = 0;
        float v39 = 0.0;
        int v40 = 2143289344;
        do
        {
          unint64_t v132 = 0;
          float v41 = dmlc::ParseFloat<float,false>(v32, (uint64_t *)&v132);
          float v42 = v41;
          if (v38 == *(_DWORD *)(a1 + 224))
          {
            float v39 = v41;
          }
          else if (v38 == *(_DWORD *)(a1 + 256))
          {
            int v40 = LODWORD(v41);
          }
          else if (v132 == v32)
          {
            ++v37;
          }
          else
          {
            unint64_t v44 = *(float **)(a4 + 152);
            unint64_t v43 = *(void *)(a4 + 160);
            if ((unint64_t)v44 >= v43)
            {
              uint64_t v46 = (float *)*v128;
              uint64_t v47 = ((char *)v44 - (unsigned char *)*v128) >> 2;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 1 > v48) {
                unint64_t v48 = v49 >> 1;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v50);
                uint64_t v46 = *(float **)(a4 + 144);
                unint64_t v44 = *(float **)(a4 + 152);
              }
              else
              {
                unint64_t v51 = 0;
              }
              uint64_t v52 = (float *)&v51[4 * v47];
              float *v52 = v42;
              uint64_t v45 = v52 + 1;
              while (v44 != v46)
              {
                int v53 = *((_DWORD *)v44-- - 1);
                *((_DWORD *)v52-- - 1) = v53;
              }
              *(void *)(a4 + 144) = v52;
              *(void *)(a4 + 152) = v45;
              *(void *)(a4 + 160) = &v51[4 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *unint64_t v44 = v41;
              uint64_t v45 = v44 + 1;
            }
            *(void *)(a4 + 152) = v45;
            uint64_t v55 = *(char **)(a4 + 128);
            unint64_t v54 = *(void *)(a4 + 136);
            if ((unint64_t)v55 >= v54)
            {
              unint64_t v57 = (char *)*v127;
              uint64_t v58 = (v55 - (unsigned char *)*v127) >> 2;
              unint64_t v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v60 = v54 - (void)v57;
              if (v60 >> 1 > v59) {
                unint64_t v59 = v60 >> 1;
              }
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v61 = v59;
              }
              if (v61)
              {
                int v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 136, v61);
                unint64_t v57 = *(char **)(a4 + 120);
                uint64_t v55 = *(char **)(a4 + 128);
              }
              else
              {
                int v62 = 0;
              }
              uint64_t v63 = &v62[4 * v58];
              *(_DWORD *)uint64_t v63 = v37;
              uint64_t v56 = v63 + 4;
              while (v55 != v57)
              {
                int v64 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v63 - 1) = v64;
                v63 -= 4;
              }
              *(void *)(a4 + 120) = v63;
              *(void *)(a4 + 128) = v56;
              *(void *)(a4 + 136) = &v62[4 * v61];
              if (v57) {
                operator delete(v57);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v55 = v37;
              uint64_t v56 = v55 + 4;
            }
            ++v37;
            *(void *)(a4 + 128) = v56;
          }
          if (v132 >= (unint64_t)a2) {
            unint64_t v65 = (unint64_t)a2;
          }
          else {
            unint64_t v65 = v132;
          }
          uint64_t v32 = v65 - 1;
          do
          {
            uint64_t v67 = (unsigned __int8 *)(v32 + 1);
            int v66 = *(unsigned __int8 *)(v32 + 1);
            uint64_t v68 = (unsigned __int8 *)(a1 + 232);
            if (*(char *)(a1 + 255) < 0) {
              uint64_t v68 = *(unsigned __int8 **)(a1 + 232);
            }
            ++v32;
          }
          while (v67 != a2 && v66 != *v68);
          if ((unsigned __int8 *)v32 == a2 && !v37)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
            int v70 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
            unsigned int v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Delimiter '", 11);
            int v72 = *(char *)(a1 + 255);
            if (v72 >= 0) {
              uint64_t v73 = a1 + 232;
            }
            else {
              uint64_t v73 = *(void *)(a1 + 232);
            }
            if (v72 >= 0) {
              uint64_t v74 = *(unsigned __int8 *)(a1 + 255);
            }
            else {
              uint64_t v74 = *(void *)(a1 + 240);
            }
            unint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
            uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"' is not found in the line. ", 28);
            int v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Expected '", 10);
            int v78 = *(char *)(a1 + 255);
            if (v78 >= 0) {
              uint64_t v79 = a1 + 232;
            }
            else {
              uint64_t v79 = *(void *)(a1 + 232);
            }
            if (v78 >= 0) {
              uint64_t v80 = *(unsigned __int8 *)(a1 + 255);
            }
            else {
              uint64_t v80 = *(void *)(a1 + 240);
            }
            uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' as the delimiter to separate fields.", 38);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v131);
          }
          ++v38;
          if (v67 != a2) {
            ++v32;
          }
        }
        while ((unsigned __int8 *)v32 != a2);
      }
      while (1)
      {
        int v82 = *a2;
        if (v82 != 13 && v82 != 10) {
          break;
        }
        if (a2 == a3)
        {
          a2 = a3;
          break;
        }
        ++a2;
      }
      uint64_t v85 = *(char **)(a4 + 32);
      unint64_t v84 = *(void *)(a4 + 40);
      if ((unint64_t)v85 >= v84)
      {
        unsigned int v87 = (char *)*v126;
        uint64_t v88 = (v85 - (unsigned char *)*v126) >> 2;
        unint64_t v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v90 = v84 - (void)v87;
        if (v90 >> 1 > v89) {
          unint64_t v89 = v90 >> 1;
        }
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v91 = v89;
        }
        if (v91)
        {
          uint64_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 40, v91);
          unsigned int v87 = *(char **)(a4 + 24);
          uint64_t v85 = *(char **)(a4 + 32);
        }
        else
        {
          uint64_t v92 = 0;
        }
        uint64_t v93 = &v92[4 * v88];
        *(float *)uint64_t v93 = v39;
        unint64_t v86 = v93 + 4;
        while (v85 != v87)
        {
          int v94 = *((_DWORD *)v85 - 1);
          v85 -= 4;
          *((_DWORD *)v93 - 1) = v94;
          v93 -= 4;
        }
        *(void *)(a4 + 24) = v93;
        *(void *)(a4 + 32) = v86;
        *(void *)(a4 + 40) = &v92[4 * v91];
        if (v87) {
          operator delete(v87);
        }
      }
      else
      {
        *(float *)uint64_t v85 = v39;
        unint64_t v86 = v85 + 4;
      }
      *(void *)(a4 + 32) = v86;
      unint64_t v96 = *(int **)(a4 + 56);
      unint64_t v95 = *(void *)(a4 + 64);
      if ((unint64_t)v96 >= v95)
      {
        uint64_t v98 = (int *)*v125;
        uint64_t v99 = ((char *)v96 - (unsigned char *)*v125) >> 2;
        unint64_t v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v101 = v95 - (void)v98;
        if (v101 >> 1 > v100) {
          unint64_t v100 = v101 >> 1;
        }
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v102 = v100;
        }
        if (v102)
        {
          uint64_t v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v102);
          uint64_t v98 = *(int **)(a4 + 48);
          unint64_t v96 = *(int **)(a4 + 56);
        }
        else
        {
          uint64_t v103 = 0;
        }
        uint64_t v104 = (int *)&v103[4 * v99];
        *uint64_t v104 = v40;
        int v97 = v104 + 1;
        while (v96 != v98)
        {
          int v105 = *--v96;
          *--uint64_t v104 = v105;
        }
        *(void *)(a4 + 48) = v104;
        *(void *)(a4 + 56) = v97;
        *(void *)(a4 + 64) = &v103[4 * v102];
        if (v98) {
          operator delete(v98);
        }
      }
      else
      {
        *unint64_t v96 = v40;
        int v97 = v96 + 1;
      }
      *(void *)(a4 + 56) = v97;
      uint64_t v106 = (uint64_t)(*(void *)(a4 + 128) - *(void *)(a4 + 120)) >> 2;
      unsigned int v108 = *(uint64_t **)(a4 + 8);
      unint64_t v107 = *(void *)(a4 + 16);
      if ((unint64_t)v108 >= v107)
      {
        uint64_t v109 = *(uint64_t **)a4;
        uint64_t v110 = ((uint64_t)v108 - *(void *)a4) >> 3;
        unint64_t v111 = v110 + 1;
        if ((unint64_t)(v110 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v112 = v107 - (void)v109;
        if (v112 >> 2 > v111) {
          unint64_t v111 = v112 >> 2;
        }
        if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v113 = v111;
        }
        if (v113)
        {
          unsigned int v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v124, v113);
          uint64_t v109 = *(uint64_t **)a4;
          unsigned int v108 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          unsigned int v114 = 0;
        }
        uint64_t v115 = (uint64_t *)&v114[8 * v110];
        *uint64_t v115 = v106;
        uint64_t v11 = v115 + 1;
        while (v108 != v109)
        {
          uint64_t v116 = *--v108;
          *--uint64_t v115 = v116;
        }
        *(void *)a4 = v115;
        *(void *)(a4 + 8) = v11;
        *(void *)(a4 + 16) = &v114[8 * v113];
        if (v109) {
          operator delete(v109);
        }
      }
      else
      {
        *unsigned int v108 = v106;
        uint64_t v11 = v108 + 1;
      }
      *(void *)(a4 + 8) = v11;
      if (a2 == a3)
      {
        uint64_t v21 = *(void *)(a4 + 24);
        uint64_t v24 = *(void *)(a4 + 32);
        goto LABEL_184;
      }
    }
  }
  uint64_t v24 = v21;
LABEL_184:
  if (((v24 - v21) >> 2) + 1 != ((uint64_t)v11 - *(void *)a4) >> 3)
  {
    uint64_t v117 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v130);
    dmlc::LogMessageFatal::Entry::Init(v117, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    unint64_t v118 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v130);
    int v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v130);
  }
  uint64_t v120 = *(void *)(a4 + 56) - *(void *)(a4 + 48);
  if (v120)
  {
    if ((v120 >> 2) + 1 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
    {
      unint64_t v121 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      dmlc::LogMessageFatal::Entry::Init(v121, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
      v122 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"Check failed: out->weight.size() == 0 || out->weight.size() + 1 == out->offset.size()", 85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v129);
    }
  }
}

void sub_22E90292C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,char a21)
{
}

void dmlc::LogCheckFormat<std::string,char [4]>(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)" (", 2);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" vs. ", 5);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"csv", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
  operator new();
}

void sub_22E902B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CSVParser<unsigned long long,float>::~CSVParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247860;
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }

  return dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(a1);
}

void dmlc::data::CSVParser<unsigned long long,float>::~CSVParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247860;
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E902C40(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C40478103D4);
  _Unwind_Resume(a1);
}

void dmlc::data::CSVParser<unsigned long long,float>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v8 = *(uint64_t **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v10 = a4 + 16;
  unint64_t v9 = *(void *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v12 = v9 - (void)v8;
    uint64_t v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    int v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    BOOL v16 = *(uint64_t **)a4;
    uint64_t v17 = *(uint64_t **)(a4 + 8);
    uint64_t v19 = &v15[v18];
    *int v15 = 0;
    uint64_t v11 = v15 + 1;
    while (v17 != v16)
    {
      uint64_t v20 = *--v17;
      *--int v15 = v20;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = v19;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v8 = 0;
    uint64_t v11 = v8 + 1;
  }
  uint64_t v21 = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = v11;
  *(void *)(a4 + 32) = v21;
  *(void *)(a4 + 104) = *(void *)(a4 + 96);
  unint64_t v127 = (void **)(a4 + 120);
  *(void *)(a4 + 128) = *(void *)(a4 + 120);
  v128 = (void **)(a4 + 144);
  *(void *)(a4 + 152) = *(void *)(a4 + 144);
  unint64_t v125 = (void **)(a4 + 48);
  unint64_t v126 = (void **)(a4 + 24);
  *(void *)(a4 + 56) = *(void *)(a4 + 48);
  *(void *)(a4 + 80) = *(void *)(a4 + 72);
  *(void *)(a4 + 168) = 0;
  *(void *)(a4 + 176) = 0;
  if (a2 != a3)
  {
    do
    {
      int v22 = *a2;
      if (v22 != 13 && v22 != 10) {
        goto LABEL_21;
      }
      ++a2;
    }
    while (a2 != a3);
    a2 = a3;
LABEL_21:
    uint64_t v24 = v21;
    if (a2 == a3) {
      goto LABEL_184;
    }
    uint64_t v124 = v10;
    while (1)
    {
      if (!a2)
      {
        uint64_t v30 = 0;
        uint64_t v32 = 0;
        goto LABEL_46;
      }
      uint64_t v25 = 0;
      do
      {
        int v26 = a2[v25];
        if (v26 != 239 && v25 == 0)
        {
          uint64_t v30 = 0;
LABEL_45:
          uint64_t v32 = (uint64_t)&a2[v25];
          goto LABEL_46;
        }
        if (v26 != 187 && v25 == 1)
        {
          uint64_t v30 = 1;
          goto LABEL_45;
        }
        if (v26 != 191 && v25 == 2)
        {
          uint64_t v30 = 2;
          goto LABEL_45;
        }
        uint64_t v30 = v25 + 1;
        unsigned int v31 = v25;
        if (&a2[v25 + 1] == a3) {
          break;
        }
        ++v25;
      }
      while (v31 < 2);
      uint64_t v32 = (uint64_t)&a2[v30];
      if (v31 > 1) {
        goto LABEL_47;
      }
      uint64_t v30 = v30;
LABEL_46:
      v32 -= v30;
LABEL_47:
      uint64_t v33 = (unsigned __int8 *)(v32 + 1);
      while (v33 != a3)
      {
        int v35 = *v33++;
        int v34 = v35;
        if (v35 == 13 || v34 == 10)
        {
          a2 = v33 - 1;
          goto LABEL_56;
        }
      }
      a2 = a3;
LABEL_56:
      if ((unsigned __int8 *)v32 == a2)
      {
        float v39 = 0.0;
        int v40 = 2143289344;
      }
      else
      {
        uint64_t v37 = 0;
        int v38 = 0;
        float v39 = 0.0;
        int v40 = 2143289344;
        do
        {
          unint64_t v132 = 0;
          float v41 = dmlc::ParseFloat<float,false>(v32, (uint64_t *)&v132);
          float v42 = v41;
          if (v38 == *(_DWORD *)(a1 + 232))
          {
            float v39 = v41;
          }
          else if (v38 == *(_DWORD *)(a1 + 264))
          {
            int v40 = LODWORD(v41);
          }
          else if (v132 == v32)
          {
            ++v37;
          }
          else
          {
            unint64_t v44 = *(float **)(a4 + 152);
            unint64_t v43 = *(void *)(a4 + 160);
            if ((unint64_t)v44 >= v43)
            {
              uint64_t v46 = (float *)*v128;
              uint64_t v47 = ((char *)v44 - (unsigned char *)*v128) >> 2;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 1 > v48) {
                unint64_t v48 = v49 >> 1;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v50);
                uint64_t v46 = *(float **)(a4 + 144);
                unint64_t v44 = *(float **)(a4 + 152);
              }
              else
              {
                unint64_t v51 = 0;
              }
              uint64_t v52 = (float *)&v51[4 * v47];
              float *v52 = v42;
              uint64_t v45 = v52 + 1;
              while (v44 != v46)
              {
                int v53 = *((_DWORD *)v44-- - 1);
                *((_DWORD *)v52-- - 1) = v53;
              }
              *(void *)(a4 + 144) = v52;
              *(void *)(a4 + 152) = v45;
              *(void *)(a4 + 160) = &v51[4 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *unint64_t v44 = v41;
              uint64_t v45 = v44 + 1;
            }
            *(void *)(a4 + 152) = v45;
            uint64_t v55 = *(char **)(a4 + 128);
            unint64_t v54 = *(void *)(a4 + 136);
            if ((unint64_t)v55 >= v54)
            {
              unint64_t v57 = (char *)*v127;
              uint64_t v58 = (v55 - (unsigned char *)*v127) >> 3;
              unint64_t v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 61) {
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v60 = v54 - (void)v57;
              if (v60 >> 2 > v59) {
                unint64_t v59 = v60 >> 2;
              }
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v61 = v59;
              }
              if (v61)
              {
                int v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 136, v61);
                unint64_t v57 = *(char **)(a4 + 120);
                uint64_t v55 = *(char **)(a4 + 128);
              }
              else
              {
                int v62 = 0;
              }
              uint64_t v63 = &v62[8 * v58];
              *(void *)uint64_t v63 = v37;
              uint64_t v56 = v63 + 8;
              while (v55 != v57)
              {
                uint64_t v64 = *((void *)v55 - 1);
                v55 -= 8;
                *((void *)v63 - 1) = v64;
                v63 -= 8;
              }
              *(void *)(a4 + 120) = v63;
              *(void *)(a4 + 128) = v56;
              *(void *)(a4 + 136) = &v62[8 * v61];
              if (v57) {
                operator delete(v57);
              }
            }
            else
            {
              *(void *)uint64_t v55 = v37;
              uint64_t v56 = v55 + 8;
            }
            ++v37;
            *(void *)(a4 + 128) = v56;
          }
          if (v132 >= (unint64_t)a2) {
            unint64_t v65 = (unint64_t)a2;
          }
          else {
            unint64_t v65 = v132;
          }
          uint64_t v32 = v65 - 1;
          do
          {
            uint64_t v67 = (unsigned __int8 *)(v32 + 1);
            int v66 = *(unsigned __int8 *)(v32 + 1);
            uint64_t v68 = (unsigned __int8 *)(a1 + 240);
            if (*(char *)(a1 + 263) < 0) {
              uint64_t v68 = *(unsigned __int8 **)(a1 + 240);
            }
            ++v32;
          }
          while (v67 != a2 && v66 != *v68);
          if ((unsigned __int8 *)v32 == a2 && !v37)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
            int v70 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
            unsigned int v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Delimiter '", 11);
            int v72 = *(char *)(a1 + 263);
            if (v72 >= 0) {
              uint64_t v73 = a1 + 240;
            }
            else {
              uint64_t v73 = *(void *)(a1 + 240);
            }
            if (v72 >= 0) {
              uint64_t v74 = *(unsigned __int8 *)(a1 + 263);
            }
            else {
              uint64_t v74 = *(void *)(a1 + 248);
            }
            unint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
            uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"' is not found in the line. ", 28);
            int v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Expected '", 10);
            int v78 = *(char *)(a1 + 263);
            if (v78 >= 0) {
              uint64_t v79 = a1 + 240;
            }
            else {
              uint64_t v79 = *(void *)(a1 + 240);
            }
            if (v78 >= 0) {
              uint64_t v80 = *(unsigned __int8 *)(a1 + 263);
            }
            else {
              uint64_t v80 = *(void *)(a1 + 248);
            }
            uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' as the delimiter to separate fields.", 38);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v131);
          }
          ++v38;
          if (v67 != a2) {
            ++v32;
          }
        }
        while ((unsigned __int8 *)v32 != a2);
      }
      while (1)
      {
        int v82 = *a2;
        if (v82 != 13 && v82 != 10) {
          break;
        }
        if (a2 == a3)
        {
          a2 = a3;
          break;
        }
        ++a2;
      }
      uint64_t v85 = *(char **)(a4 + 32);
      unint64_t v84 = *(void *)(a4 + 40);
      if ((unint64_t)v85 >= v84)
      {
        unsigned int v87 = (char *)*v126;
        uint64_t v88 = (v85 - (unsigned char *)*v126) >> 2;
        unint64_t v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v90 = v84 - (void)v87;
        if (v90 >> 1 > v89) {
          unint64_t v89 = v90 >> 1;
        }
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v91 = v89;
        }
        if (v91)
        {
          uint64_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 40, v91);
          unsigned int v87 = *(char **)(a4 + 24);
          uint64_t v85 = *(char **)(a4 + 32);
        }
        else
        {
          uint64_t v92 = 0;
        }
        uint64_t v93 = &v92[4 * v88];
        *(float *)uint64_t v93 = v39;
        unint64_t v86 = v93 + 4;
        while (v85 != v87)
        {
          int v94 = *((_DWORD *)v85 - 1);
          v85 -= 4;
          *((_DWORD *)v93 - 1) = v94;
          v93 -= 4;
        }
        *(void *)(a4 + 24) = v93;
        *(void *)(a4 + 32) = v86;
        *(void *)(a4 + 40) = &v92[4 * v91];
        if (v87) {
          operator delete(v87);
        }
      }
      else
      {
        *(float *)uint64_t v85 = v39;
        unint64_t v86 = v85 + 4;
      }
      *(void *)(a4 + 32) = v86;
      unint64_t v96 = *(int **)(a4 + 56);
      unint64_t v95 = *(void *)(a4 + 64);
      if ((unint64_t)v96 >= v95)
      {
        uint64_t v98 = (int *)*v125;
        uint64_t v99 = ((char *)v96 - (unsigned char *)*v125) >> 2;
        unint64_t v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v101 = v95 - (void)v98;
        if (v101 >> 1 > v100) {
          unint64_t v100 = v101 >> 1;
        }
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v102 = v100;
        }
        if (v102)
        {
          uint64_t v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v102);
          uint64_t v98 = *(int **)(a4 + 48);
          unint64_t v96 = *(int **)(a4 + 56);
        }
        else
        {
          uint64_t v103 = 0;
        }
        uint64_t v104 = (int *)&v103[4 * v99];
        *uint64_t v104 = v40;
        int v97 = v104 + 1;
        while (v96 != v98)
        {
          int v105 = *--v96;
          *--uint64_t v104 = v105;
        }
        *(void *)(a4 + 48) = v104;
        *(void *)(a4 + 56) = v97;
        *(void *)(a4 + 64) = &v103[4 * v102];
        if (v98) {
          operator delete(v98);
        }
      }
      else
      {
        *unint64_t v96 = v40;
        int v97 = v96 + 1;
      }
      *(void *)(a4 + 56) = v97;
      uint64_t v106 = (uint64_t)(*(void *)(a4 + 128) - *(void *)(a4 + 120)) >> 3;
      unsigned int v108 = *(uint64_t **)(a4 + 8);
      unint64_t v107 = *(void *)(a4 + 16);
      if ((unint64_t)v108 >= v107)
      {
        uint64_t v109 = *(uint64_t **)a4;
        uint64_t v110 = ((uint64_t)v108 - *(void *)a4) >> 3;
        unint64_t v111 = v110 + 1;
        if ((unint64_t)(v110 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v112 = v107 - (void)v109;
        if (v112 >> 2 > v111) {
          unint64_t v111 = v112 >> 2;
        }
        if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v113 = v111;
        }
        if (v113)
        {
          unsigned int v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v124, v113);
          uint64_t v109 = *(uint64_t **)a4;
          unsigned int v108 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          unsigned int v114 = 0;
        }
        uint64_t v115 = (uint64_t *)&v114[8 * v110];
        *uint64_t v115 = v106;
        uint64_t v11 = v115 + 1;
        while (v108 != v109)
        {
          uint64_t v116 = *--v108;
          *--uint64_t v115 = v116;
        }
        *(void *)a4 = v115;
        *(void *)(a4 + 8) = v11;
        *(void *)(a4 + 16) = &v114[8 * v113];
        if (v109) {
          operator delete(v109);
        }
      }
      else
      {
        *unsigned int v108 = v106;
        uint64_t v11 = v108 + 1;
      }
      *(void *)(a4 + 8) = v11;
      if (a2 == a3)
      {
        uint64_t v21 = *(void *)(a4 + 24);
        uint64_t v24 = *(void *)(a4 + 32);
        goto LABEL_184;
      }
    }
  }
  uint64_t v24 = v21;
LABEL_184:
  if (((v24 - v21) >> 2) + 1 != ((uint64_t)v11 - *(void *)a4) >> 3)
  {
    uint64_t v117 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v130);
    dmlc::LogMessageFatal::Entry::Init(v117, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    unint64_t v118 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v130);
    int v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v130);
  }
  uint64_t v120 = *(void *)(a4 + 56) - *(void *)(a4 + 48);
  if (v120)
  {
    if ((v120 >> 2) + 1 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
    {
      unint64_t v121 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      dmlc::LogMessageFatal::Entry::Init(v121, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
      v122 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"Check failed: out->weight.size() == 0 || out->weight.size() + 1 == out->offset.size()", 85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v129);
    }
  }
}

void sub_22E9034B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,char a21)
{
}

uint64_t dmlc::data::TextParserBase<unsigned int,int>::~TextParserBase(uint64_t a1)
{
  *(void *)a1 = &unk_26E247978;
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 136));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 128));
  *(void *)a1 = &unk_26E2479C8;
  int v4 = (void **)(a1 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void sub_22E9035A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::mutex::~mutex((std::mutex *)(v10 + 136));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 + 128));
  *(void *)uint64_t v10 = &unk_26E2479C8;
  a10 = (void **)(v10 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CSVParser<unsigned int,int>::~CSVParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E2478C8;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }

  return dmlc::data::TextParserBase<unsigned int,int>::~TextParserBase(a1);
}

void dmlc::data::CSVParser<unsigned int,int>::~CSVParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E2478C8;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  dmlc::data::TextParserBase<unsigned int,int>::~TextParserBase(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E9036E4(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C405F535ED3);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned int,int>::BeforeFirst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 16))();
}

BOOL dmlc::data::ParserImpl<unsigned int,int>::Next(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  for (unsigned int i = *(_DWORD *)(a1 + 12); ; *(_DWORD *)(a1 + 12) = i)
  {
    uint64_t v5 = v3;
    unint64_t v6 = v3 <= i ? i : v3;
    uint64_t v7 = (176 * v3) | 8;
    while (v6 != v5)
    {
      *(_DWORD *)(a1 + 8) = ++v5;
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(v8 + v7) - *(void *)(v8 + v7 - 8);
      v7 += 176;
      if (v9 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned int,int>::GetBlock(v13, (uint64_t *)(v8 + v7 - 184));
        long long v10 = v13[1];
        *(_OWORD *)(a1 + 40) = v13[0];
        *(_OWORD *)(a1 + 56) = v10;
        long long v11 = v13[3];
        *(_OWORD *)(a1 + 72) = v13[2];
        *(_OWORD *)(a1 + 88) = v11;
        unint64_t v6 = v5 - 1;
        return v6 < i;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v2)) {
      break;
    }
    unsigned int v3 = 0;
    unsigned int i = -1171354717 * ((*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4);
    *(_DWORD *)(a1 + 8) = 0;
  }
  return v6 < i;
}

uint64_t dmlc::data::ParserImpl<unsigned int,int>::Value(uint64_t a1)
{
  return a1 + 40;
}

uint64_t dmlc::data::TextParserBase<unsigned int,int>::BytesRead(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t dmlc::data::TextParserBase<unsigned int,int>::ParseNext(uint64_t a1, void ***a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 120) + 32))(*(void *)(a1 + 120), &v38);
  uint64_t v5 = v4;
  if (!v4) {
    return v5;
  }
  int v6 = *(_DWORD *)(a1 + 104);
  uint64_t v7 = *a2;
  unint64_t v8 = (unint64_t)a2[1];
  unint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v8 - (void)*a2) >> 4);
  unint64_t v10 = v6 - v9;
  if (v6 > v9)
  {
    long long v11 = a2[2];
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)((uint64_t)v11 - v8) >> 4) < v10)
    {
      if (v6 < 0) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unsigned int v35 = v4;
      int v34 = a2[2];
      unint64_t v12 = 0x5D1745D1745D1746 * (((char *)v11 - (char *)v7) >> 4);
      if (v12 <= v6) {
        unint64_t v12 = v6;
      }
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)v7) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
        unint64_t v13 = 0x1745D1745D1745DLL;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v43 = a2 + 2;
      if (v13 > 0x1745D1745D1745DLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = 22 * v13;
      int v15 = (void **)operator new(176 * v13);
      BOOL v16 = &v15[22 * v9];
      int v40 = v15;
      v41.i64[0] = (uint64_t)v16;
      uint64_t v33 = &v15[v14];
      float v42 = &v15[v14];
      uint64_t v17 = &v15[22 * v6];
      uint64_t v18 = 176 * v6 - 176 * v9;
      uint64_t v19 = v16;
      do
      {
        v19[20] = 0;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)uint64_t v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        uint64_t v20 = operator new(8uLL);
        void *v20 = 0;
        v19[1] = v20 + 1;
        _OWORD v19[2] = v20 + 1;
        void *v19 = v20;
        v19[4] = 0;
        v19[13] = 0;
        v19[16] = 0;
        v19[19] = 0;
        v19[7] = 0;
        v19[10] = 0;
        v19[21] = 0;
        v19 += 22;
        v18 -= 176;
      }
      while (v18);
      v41.i64[1] = (uint64_t)v17;
      uint64_t v5 = v35;
      if ((void **)v8 == v7)
      {
        int64x2_t v25 = vdupq_n_s64(v8);
        int v27 = v33;
        int v26 = v34;
      }
      else
      {
        unint64_t v21 = 0;
        do
        {
          unint64_t v22 = v8 + v21;
          uint64_t v23 = &v16[v21 / 8];
          *((_OWORD *)v23 - 11) = *(_OWORD *)(v8 + v21 - 176);
          *(v23 - 20) = *(void **)(v8 + v21 - 160);
          *(void *)(v22 - 176) = 0;
          *(void *)(v22 - 168) = 0;
          *(void *)(v22 - 160) = 0;
          *(_OWORD *)(v23 - 19) = *(_OWORD *)(v8 + v21 - 152);
          *(v23 - 17) = *(void **)(v8 + v21 - 136);
          *(void *)(v22 - 152) = 0;
          *(void *)(v22 - 144) = 0;
          *(void *)(v22 - 136) = 0;
          *((_OWORD *)v23 - 8) = *(_OWORD *)(v8 + v21 - 128);
          *(v23 - 14) = *(void **)(v8 + v21 - 112);
          *(void *)(v22 - 128) = 0;
          *(void *)(v22 - 120) = 0;
          *(void *)(v22 - 112) = 0;
          *(_OWORD *)(v23 - 13) = *(_OWORD *)(v8 + v21 - 104);
          *(v23 - 11) = *(void **)(v8 + v21 - 88);
          *(void *)(v22 - 104) = 0;
          *(void *)(v22 - 96) = 0;
          *(void *)(v22 - 88) = 0;
          *((_OWORD *)v23 - 5) = *(_OWORD *)(v8 + v21 - 80);
          *(v23 - 8) = *(void **)(v8 + v21 - 64);
          *(void *)(v22 - 80) = 0;
          *(void *)(v22 - 72) = 0;
          long long v24 = *(_OWORD *)(v8 + v21 - 56);
          *(void *)(v22 - 64) = 0;
          *(_OWORD *)(v23 - 7) = v24;
          *(v23 - 5) = *(void **)(v8 + v21 - 40);
          *(void *)(v22 - 56) = 0;
          *(void *)(v22 - 48) = 0;
          *(void *)(v22 - 40) = 0;
          *((_OWORD *)v23 - 2) = *(_OWORD *)(v8 + v21 - 32);
          *(v23 - 2) = *(void **)(v8 + v21 - 16);
          *(void *)(v22 - 32) = 0;
          *(void *)(v22 - 24) = 0;
          *(void *)(v22 - 16) = 0;
          *(v23 - 1) = *(void **)(v8 + v21 - 8);
          v21 -= 176;
        }
        while ((void **)(v8 + v21) != v7);
        int64x2_t v25 = *(int64x2_t *)a2;
        int v26 = a2[2];
        BOOL v16 = (void **)((char *)v16 + v21);
        uint64_t v17 = (void **)v41.i64[1];
        int v27 = v42;
      }
      *a2 = v16;
      a2[1] = v17;
      int64x2_t v41 = v25;
      a2[2] = v27;
      float v42 = v26;
      int v40 = (void **)v25.i64[0];
      std::__split_buffer<dmlc::data::RowBlockContainer<unsigned int,float>>::~__split_buffer((uint64_t)&v40);
      goto LABEL_26;
    }
    unint64_t v28 = v8 + 176 * v10;
    uint64_t v29 = 176 * v6 - 16 * ((uint64_t)(v8 - (void)*a2) >> 4);
    do
    {
      *(void *)(v8 + 160) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)unint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      uint64_t v30 = operator new(8uLL);
      *uint64_t v30 = 0;
      *(void *)(v8 + 8) = v30 + 1;
      *(void *)(v8 + 16) = v30 + 1;
      *(void *)unint64_t v8 = v30;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 104) = 0;
      *(void *)(v8 + 128) = 0;
      *(void *)(v8 + 152) = 0;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 168) = 0;
      v8 += 176;
      v29 -= 176;
    }
    while (v29);
    goto LABEL_23;
  }
  if (v6 < v9)
  {
    unint64_t v28 = (unint64_t)&v7[22 * v6];
    while (v8 != v28)
    {
      v8 -= 176;
      dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v8);
    }
LABEL_23:
    a2[1] = (void **)v28;
  }
LABEL_26:
  uint64_t v31 = v39;
  *(void *)(a1 + 112) += v39;
  LODWORD(v36) = 0;
  if (!v31) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  if (v6 >= 1) {
    operator new();
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)(a1 + 128));
  *(_DWORD *)(a1 + 8) = 0;
  int v40 = (void **)&v36;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](&v40);
  return v5;
}

void sub_22E903E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::thread a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23 = a20;
  a20 = 0;
  if (v23) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v23);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::data::CSVParser<unsigned int,int>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v8 = *(uint64_t **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v10 = a4 + 16;
  unint64_t v9 = *(void *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v12 = v9 - (void)v8;
    uint64_t v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    int v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    BOOL v16 = *(uint64_t **)a4;
    uint64_t v17 = *(uint64_t **)(a4 + 8);
    uint64_t v19 = &v15[v18];
    *int v15 = 0;
    long long v11 = v15 + 1;
    while (v17 != v16)
    {
      uint64_t v20 = *--v17;
      *--int v15 = v20;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = v19;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v8 = 0;
    long long v11 = v8 + 1;
  }
  uint64_t v21 = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = v11;
  *(void *)(a4 + 32) = v21;
  *(void *)(a4 + 104) = *(void *)(a4 + 96);
  unsigned int v114 = (void **)(a4 + 120);
  *(void *)(a4 + 128) = *(void *)(a4 + 120);
  uint64_t v115 = (void **)(a4 + 144);
  *(void *)(a4 + 152) = *(void *)(a4 + 144);
  *(void *)(a4 + 56) = *(void *)(a4 + 48);
  *(void *)(a4 + 80) = *(void *)(a4 + 72);
  *(void *)(a4 + 168) = 0;
  unint64_t v113 = (void **)(a4 + 24);
  if (a2 != a3)
  {
    do
    {
      int v22 = *a2;
      if (v22 != 13 && v22 != 10) {
        goto LABEL_21;
      }
      ++a2;
    }
    while (a2 != a3);
    a2 = a3;
LABEL_21:
    uint64_t v24 = v21;
    if (a2 == a3) {
      goto LABEL_166;
    }
    while (1)
    {
      if (!a2)
      {
        uint64_t v30 = 0;
        uint64_t v32 = 0;
        goto LABEL_45;
      }
      uint64_t v25 = 0;
      do
      {
        int v26 = a2[v25];
        if (v26 != 239 && v25 == 0)
        {
          uint64_t v30 = 0;
LABEL_44:
          uint64_t v32 = (char *)&a2[v25];
          goto LABEL_45;
        }
        if (v26 != 187 && v25 == 1)
        {
          uint64_t v30 = 1;
          goto LABEL_44;
        }
        if (v26 != 191 && v25 == 2)
        {
          uint64_t v30 = 2;
          goto LABEL_44;
        }
        uint64_t v30 = v25 + 1;
        unsigned int v31 = v25;
        if (&a2[v25 + 1] == a3) {
          break;
        }
        ++v25;
      }
      while (v31 < 2);
      uint64_t v32 = (char *)&a2[v30];
      if (v31 > 1) {
        goto LABEL_46;
      }
      uint64_t v30 = v30;
LABEL_45:
      v32 -= v30;
LABEL_46:
      uint64_t v33 = (unsigned __int8 *)(v32 + 1);
      while (v33 != a3)
      {
        int v35 = *v33++;
        int v34 = v35;
        if (v35 == 13 || v34 == 10)
        {
          a2 = v33 - 1;
          goto LABEL_55;
        }
      }
      a2 = a3;
LABEL_55:
      if (v32 == (char *)a2)
      {
        int v39 = 0;
      }
      else
      {
        int v37 = 0;
        int v38 = 0;
        int v39 = 0;
        do
        {
          __endptr = 0;
          int v40 = strtoll(v32, &__endptr, 0);
          int v41 = v40;
          if (v38 == *(_DWORD *)(a1 + 224))
          {
            uint64_t v32 = __endptr;
            int v39 = v40;
          }
          else if (__endptr == v32)
          {
            ++v37;
          }
          else
          {
            unint64_t v43 = *(char **)(a4 + 152);
            unint64_t v42 = *(void *)(a4 + 160);
            if ((unint64_t)v43 >= v42)
            {
              uint64_t v45 = (char *)*v115;
              uint64_t v46 = (v43 - (unsigned char *)*v115) >> 2;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 62) {
                std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v48 = v42 - (void)v45;
              if (v48 >> 1 > v47) {
                unint64_t v47 = v48 >> 1;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                unint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v49);
                uint64_t v45 = *(char **)(a4 + 144);
                unint64_t v43 = *(char **)(a4 + 152);
              }
              else
              {
                unint64_t v50 = 0;
              }
              unint64_t v51 = &v50[4 * v46];
              *(_DWORD *)unint64_t v51 = v41;
              unint64_t v44 = v51 + 4;
              while (v43 != v45)
              {
                int v52 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }
              *(void *)(a4 + 144) = v51;
              *(void *)(a4 + 152) = v44;
              *(void *)(a4 + 160) = &v50[4 * v49];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v43 = v40;
              unint64_t v44 = v43 + 4;
            }
            *(void *)(a4 + 152) = v44;
            unint64_t v54 = *(char **)(a4 + 128);
            unint64_t v53 = *(void *)(a4 + 136);
            if ((unint64_t)v54 >= v53)
            {
              uint64_t v56 = (char *)*v114;
              uint64_t v57 = (v54 - (unsigned char *)*v114) >> 2;
              unint64_t v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v59 = v53 - (void)v56;
              if (v59 >> 1 > v58) {
                unint64_t v58 = v59 >> 1;
              }
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v60 = v58;
              }
              if (v60)
              {
                unint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 136, v60);
                uint64_t v56 = *(char **)(a4 + 120);
                unint64_t v54 = *(char **)(a4 + 128);
              }
              else
              {
                unint64_t v61 = 0;
              }
              int v62 = &v61[4 * v57];
              *(_DWORD *)int v62 = v37;
              uint64_t v55 = v62 + 4;
              while (v54 != v56)
              {
                int v63 = *((_DWORD *)v54 - 1);
                v54 -= 4;
                *((_DWORD *)v62 - 1) = v63;
                v62 -= 4;
              }
              *(void *)(a4 + 120) = v62;
              *(void *)(a4 + 128) = v55;
              *(void *)(a4 + 136) = &v61[4 * v60];
              if (v56) {
                operator delete(v56);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v54 = v37;
              uint64_t v55 = v54 + 4;
            }
            ++v37;
            *(void *)(a4 + 128) = v55;
            uint64_t v32 = __endptr;
          }
          if (v32 >= (char *)a2) {
            uint64_t v64 = (char *)a2;
          }
          else {
            uint64_t v64 = v32;
          }
          unint64_t v65 = (unsigned __int8 *)(v64 - 1);
          do
          {
            uint64_t v67 = v65 + 1;
            int v66 = v65[1];
            uint64_t v68 = (unsigned __int8 *)(a1 + 232);
            if (*(char *)(a1 + 255) < 0) {
              uint64_t v68 = *(unsigned __int8 **)(a1 + 232);
            }
            ++v65;
          }
          while (v67 != a2 && v66 != *v68);
          if (v65 == a2 && !v37)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
            int v70 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            unsigned int v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Delimiter '", 11);
            int v72 = *(char *)(a1 + 255);
            if (v72 >= 0) {
              uint64_t v73 = a1 + 232;
            }
            else {
              uint64_t v73 = *(void *)(a1 + 232);
            }
            if (v72 >= 0) {
              uint64_t v74 = *(unsigned __int8 *)(a1 + 255);
            }
            else {
              uint64_t v74 = *(void *)(a1 + 240);
            }
            unint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
            uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"' is not found in the line. ", 28);
            int v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Expected '", 10);
            int v78 = *(char *)(a1 + 255);
            if (v78 >= 0) {
              uint64_t v79 = a1 + 232;
            }
            else {
              uint64_t v79 = *(void *)(a1 + 232);
            }
            if (v78 >= 0) {
              uint64_t v80 = *(unsigned __int8 *)(a1 + 255);
            }
            else {
              uint64_t v80 = *(void *)(a1 + 240);
            }
            uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' as the delimiter to separate fields.", 38);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v118);
          }
          ++v38;
          if (v67 == a2) {
            uint64_t v32 = (char *)v65;
          }
          else {
            uint64_t v32 = (char *)(v65 + 1);
          }
        }
        while (v32 != (char *)a2);
      }
      while (1)
      {
        int v82 = *a2;
        if (v82 != 13 && v82 != 10) {
          break;
        }
        if (a2 == a3)
        {
          a2 = a3;
          break;
        }
        ++a2;
      }
      uint64_t v85 = *(char **)(a4 + 32);
      unint64_t v84 = *(void *)(a4 + 40);
      if ((unint64_t)v85 >= v84)
      {
        unsigned int v87 = (char *)*v113;
        uint64_t v88 = (v85 - (unsigned char *)*v113) >> 2;
        unint64_t v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 62) {
          std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v90 = v84 - (void)v87;
        if (v90 >> 1 > v89) {
          unint64_t v89 = v90 >> 1;
        }
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v91 = v89;
        }
        if (v91)
        {
          uint64_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 40, v91);
          unsigned int v87 = *(char **)(a4 + 24);
          uint64_t v85 = *(char **)(a4 + 32);
        }
        else
        {
          uint64_t v92 = 0;
        }
        uint64_t v93 = &v92[4 * v88];
        *(_DWORD *)uint64_t v93 = v39;
        unint64_t v86 = v93 + 4;
        while (v85 != v87)
        {
          int v94 = *((_DWORD *)v85 - 1);
          v85 -= 4;
          *((_DWORD *)v93 - 1) = v94;
          v93 -= 4;
        }
        *(void *)(a4 + 24) = v93;
        *(void *)(a4 + 32) = v86;
        *(void *)(a4 + 40) = &v92[4 * v91];
        if (v87) {
          operator delete(v87);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v85 = v39;
        unint64_t v86 = v85 + 4;
      }
      *(void *)(a4 + 32) = v86;
      uint64_t v95 = (uint64_t)(*(void *)(a4 + 128) - *(void *)(a4 + 120)) >> 2;
      int v97 = *(uint64_t **)(a4 + 8);
      unint64_t v96 = *(void *)(a4 + 16);
      if ((unint64_t)v97 >= v96)
      {
        uint64_t v98 = *(uint64_t **)a4;
        uint64_t v99 = ((uint64_t)v97 - *(void *)a4) >> 3;
        unint64_t v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v101 = v96 - (void)v98;
        if (v101 >> 2 > v100) {
          unint64_t v100 = v101 >> 2;
        }
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v102 = v100;
        }
        if (v102)
        {
          uint64_t v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10, v102);
          uint64_t v98 = *(uint64_t **)a4;
          int v97 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          uint64_t v103 = 0;
        }
        uint64_t v104 = (uint64_t *)&v103[8 * v99];
        *uint64_t v104 = v95;
        long long v11 = v104 + 1;
        while (v97 != v98)
        {
          uint64_t v105 = *--v97;
          *--uint64_t v104 = v105;
        }
        *(void *)a4 = v104;
        *(void *)(a4 + 8) = v11;
        *(void *)(a4 + 16) = &v103[8 * v102];
        if (v98) {
          operator delete(v98);
        }
      }
      else
      {
        uint64_t *v97 = v95;
        long long v11 = v97 + 1;
      }
      *(void *)(a4 + 8) = v11;
      if (a2 == a3)
      {
        uint64_t v21 = *(void *)(a4 + 24);
        uint64_t v24 = *(void *)(a4 + 32);
        goto LABEL_166;
      }
    }
  }
  uint64_t v24 = v21;
LABEL_166:
  if (((v24 - v21) >> 2) + 1 != ((uint64_t)v11 - *(void *)a4) >> 3)
  {
    uint64_t v106 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    dmlc::LogMessageFatal::Entry::Init(v106, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    unint64_t v107 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    unsigned int v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v117);
  }
  uint64_t v109 = *(void *)(a4 + 56) - *(void *)(a4 + 48);
  if (v109)
  {
    if ((v109 >> 2) + 1 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
    {
      uint64_t v110 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      dmlc::LogMessageFatal::Entry::Init(v110, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
      unint64_t v111 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      uint64_t v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"Check failed: out->weight.size() == 0 || out->weight.size() + 1 == out->offset.size()", 85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v116);
    }
  }
}

void sub_22E9046B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, char a19)
{
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,int>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,int>> *)::{lambda(void)#1}>>(uint64_t a1)
{
  uint64_t v18 = (uint64_t *)a1;
  uint64_t v2 = std::__thread_local_data();
  unsigned int v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
  unint64_t v5 = *(void *)(*(void *)(a1 + 8) + 8);
  unint64_t v7 = *(int *)(a1 + 32);
  uint64_t v6 = *(int *)(a1 + 36);
  unint64_t v8 = (v5 + v7 - 1) / v7;
  if (v5 >= v8 * v6) {
    unint64_t v9 = v8 * v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
  }
  unint64_t v10 = v8 * (v6 + 1);
  if (v5 >= v10) {
    unint64_t v5 = v10;
  }
  long long v11 = &v4[v9];
  if (v9)
  {
    while (1)
    {
      int v12 = *v11;
      if (v12 == 10 || v12 == 13) {
        break;
      }
      if (--v11 == v4)
      {
        long long v11 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  unint64_t v14 = &v4[v5];
  if (v6 + 1 != v7 && v5)
  {
    while (1)
    {
      int v15 = *v14;
      if (v15 == 10 || v15 == 13) {
        break;
      }
      if (--v14 == v4)
      {
        unint64_t v14 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  (*(void (**)(void, unsigned __int8 *, unsigned __int8 *, uint64_t))(**(void **)(a1 + 40) + 56))(*(void *)(a1 + 40), v11, v14, **(void **)(a1 + 24) + 176 * (int)v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v18);
  return 0;
}

uint64_t dmlc::data::TextParserBase<unsigned long long,int>::~TextParserBase(uint64_t a1)
{
  *(void *)a1 = &unk_26E247AC0;
  uint64_t v2 = *(void *)(a1 + 128);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 144));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 136));
  *(void *)a1 = &unk_26E247B10;
  uint64_t v4 = (void **)(a1 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void sub_22E904978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::mutex::~mutex((std::mutex *)(v10 + 144));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 + 136));
  *(void *)uint64_t v10 = &unk_26E247B10;
  a10 = (void **)(v10 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CSVParser<unsigned long long,int>::~CSVParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247A10;
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }

  return dmlc::data::TextParserBase<unsigned long long,int>::~TextParserBase(a1);
}

void dmlc::data::CSVParser<unsigned long long,int>::~CSVParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247A10;
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  dmlc::data::TextParserBase<unsigned long long,int>::~TextParserBase(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E904AB8(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C40C231C275);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,int>::BeforeFirst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 16))();
}

BOOL dmlc::data::ParserImpl<unsigned long long,int>::Next(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  unint64_t v4 = *(void *)(a1 + 8);
  for (unint64_t i = *(void *)(a1 + 16); ; *(void *)(a1 + 16) = i)
  {
    unint64_t v5 = v4 <= i ? i : v4;
    uint64_t v6 = 184 * v4 + 8;
    while (v5 != v4)
    {
      *(void *)(a1 + 8) = ++v4;
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v8 = *(void *)(v7 + v6) - *(void *)(v7 + v6 - 8);
      v6 += 184;
      if (v8 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned long long,int>::GetBlock(v12, (uint64_t *)(v7 + v6 - 192));
        long long v9 = v12[1];
        *(_OWORD *)(a1 + 48) = v12[0];
        *(_OWORD *)(a1 + 64) = v9;
        long long v10 = v12[3];
        *(_OWORD *)(a1 + 80) = v12[2];
        *(_OWORD *)(a1 + 96) = v10;
        unint64_t v5 = v4 - 1;
        return v5 < i;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v2)) {
      break;
    }
    unint64_t v4 = 0;
    unint64_t i = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
    *(void *)(a1 + 8) = 0;
  }
  return v5 < i;
}

uint64_t dmlc::data::ParserImpl<unsigned long long,int>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::TextParserBase<unsigned long long,int>::BytesRead(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,int>::ParseNext(uint64_t a1, void ***a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), &v38);
  uint64_t v5 = v4;
  if (!v4) {
    return v5;
  }
  int v6 = *(_DWORD *)(a1 + 112);
  uint64_t v7 = *a2;
  unint64_t v8 = (unint64_t)a2[1];
  unint64_t v9 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v8 - (void)*a2) >> 3);
  unint64_t v10 = v6 - v9;
  if (v6 > v9)
  {
    long long v11 = a2[2];
    if (0xD37A6F4DE9BD37A7 * ((uint64_t)((uint64_t)v11 - v8) >> 3) < v10)
    {
      if (v6 < 0) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unsigned int v35 = v4;
      int v34 = a2[2];
      unint64_t v12 = 0xA6F4DE9BD37A6F4ELL * (v11 - v7);
      if (v12 <= v6) {
        unint64_t v12 = v6;
      }
      if (0xD37A6F4DE9BD37A7 * (v11 - v7) >= 0xB21642C8590B21) {
        unint64_t v13 = 0x1642C8590B21642;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v43 = a2 + 2;
      if (v13 > 0x1642C8590B21642) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = 23 * v13;
      int v15 = (void **)operator new(184 * v13);
      BOOL v16 = &v15[23 * v9];
      int v40 = v15;
      v41.i64[0] = (uint64_t)v16;
      uint64_t v33 = &v15[v14];
      unint64_t v42 = &v15[v14];
      uint64_t v17 = &v15[23 * v6];
      uint64_t v18 = 184 * v6 - 184 * v9;
      uint64_t v19 = v16;
      do
      {
        v19[20] = 0;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)uint64_t v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        uint64_t v20 = operator new(8uLL);
        void *v20 = 0;
        v19[1] = v20 + 1;
        _OWORD v19[2] = v20 + 1;
        void *v19 = v20;
        v19[4] = 0;
        v19[13] = 0;
        v19[16] = 0;
        v19[19] = 0;
        v19[7] = 0;
        v19[10] = 0;
        v19[21] = 0;
        v19[22] = 0;
        v19 += 23;
        v18 -= 184;
      }
      while (v18);
      v41.i64[1] = (uint64_t)v17;
      uint64_t v5 = v35;
      if ((void **)v8 == v7)
      {
        int64x2_t v25 = vdupq_n_s64(v8);
        int v27 = v33;
        int v26 = v34;
      }
      else
      {
        unint64_t v21 = 0;
        do
        {
          unint64_t v22 = v8 + v21;
          uint64_t v23 = &v16[v21 / 8];
          *(_OWORD *)(v23 - 23) = *(_OWORD *)(v8 + v21 - 184);
          *(v23 - 21) = *(void **)(v8 + v21 - 168);
          *(void *)(v22 - 184) = 0;
          *(void *)(v22 - 176) = 0;
          *(void *)(v22 - 168) = 0;
          *((_OWORD *)v23 - 10) = *(_OWORD *)(v8 + v21 - 160);
          *(v23 - 18) = *(void **)(v8 + v21 - 144);
          *(void *)(v22 - 160) = 0;
          *(void *)(v22 - 152) = 0;
          *(void *)(v22 - 144) = 0;
          *(_OWORD *)(v23 - 17) = *(_OWORD *)(v8 + v21 - 136);
          *(v23 - 15) = *(void **)(v8 + v21 - 120);
          *(void *)(v22 - 136) = 0;
          *(void *)(v22 - 128) = 0;
          *(void *)(v22 - 120) = 0;
          *((_OWORD *)v23 - 7) = *(_OWORD *)(v8 + v21 - 112);
          *(v23 - 12) = *(void **)(v8 + v21 - 96);
          *(void *)(v22 - 112) = 0;
          *(void *)(v22 - 104) = 0;
          *(void *)(v22 - 96) = 0;
          *(_OWORD *)(v23 - 11) = *(_OWORD *)(v8 + v21 - 88);
          *(v23 - 9) = *(void **)(v8 + v21 - 72);
          *(void *)(v22 - 88) = 0;
          *(void *)(v22 - 80) = 0;
          long long v24 = *(_OWORD *)(v8 + v21 - 64);
          *(void *)(v22 - 72) = 0;
          *((_OWORD *)v23 - 4) = v24;
          *(v23 - 6) = *(void **)(v8 + v21 - 48);
          *(void *)(v22 - 64) = 0;
          *(void *)(v22 - 56) = 0;
          *(void *)(v22 - 48) = 0;
          *(_OWORD *)(v23 - 5) = *(_OWORD *)(v8 + v21 - 40);
          *(v23 - 3) = *(void **)(v8 + v21 - 24);
          *(void *)(v22 - 40) = 0;
          *(void *)(v22 - 32) = 0;
          *(void *)(v22 - 24) = 0;
          *((_OWORD *)v23 - 1) = *(_OWORD *)(v8 + v21 - 16);
          v21 -= 184;
        }
        while ((void **)(v8 + v21) != v7);
        int64x2_t v25 = *(int64x2_t *)a2;
        int v26 = a2[2];
        BOOL v16 = (void **)((char *)v16 + v21);
        uint64_t v17 = (void **)v41.i64[1];
        int v27 = v42;
      }
      *a2 = v16;
      a2[1] = v17;
      int64x2_t v41 = v25;
      a2[2] = v27;
      unint64_t v42 = v26;
      int v40 = (void **)v25.i64[0];
      std::__split_buffer<dmlc::data::RowBlockContainer<unsigned long long,float>>::~__split_buffer((uint64_t)&v40);
      goto LABEL_26;
    }
    unint64_t v28 = v8 + 184 * v10;
    uint64_t v29 = 184 * v6 - 8 * ((uint64_t)(v8 - (void)*a2) >> 3);
    do
    {
      *(void *)(v8 + 160) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)unint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      uint64_t v30 = operator new(8uLL);
      *uint64_t v30 = 0;
      *(void *)(v8 + 8) = v30 + 1;
      *(void *)(v8 + 16) = v30 + 1;
      *(void *)unint64_t v8 = v30;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 104) = 0;
      *(void *)(v8 + 128) = 0;
      *(void *)(v8 + 152) = 0;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 168) = 0;
      *(void *)(v8 + 176) = 0;
      v8 += 184;
      v29 -= 184;
    }
    while (v29);
    goto LABEL_23;
  }
  if (v6 < v9)
  {
    unint64_t v28 = (unint64_t)&v7[23 * v6];
    while (v8 != v28)
    {
      v8 -= 184;
      dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v8);
    }
LABEL_23:
    a2[1] = (void **)v28;
  }
LABEL_26:
  uint64_t v31 = v39;
  *(void *)(a1 + 120) += v39;
  LODWORD(v36) = 0;
  if (!v31) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  if (v6 >= 1) {
    operator new();
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)(a1 + 136));
  *(void *)(a1 + 8) = 0;
  int v40 = (void **)&v36;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](&v40);
  return v5;
}

void sub_22E905258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::thread a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23 = a20;
  a20 = 0;
  if (v23) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v23);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::data::CSVParser<unsigned long long,int>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v8 = *(uint64_t **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v10 = a4 + 16;
  unint64_t v9 = *(void *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v12 = v9 - (void)v8;
    uint64_t v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    int v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    BOOL v16 = *(uint64_t **)a4;
    uint64_t v17 = *(uint64_t **)(a4 + 8);
    uint64_t v19 = &v15[v18];
    *int v15 = 0;
    long long v11 = v15 + 1;
    while (v17 != v16)
    {
      uint64_t v20 = *--v17;
      *--int v15 = v20;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = v19;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v8 = 0;
    long long v11 = v8 + 1;
  }
  uint64_t v21 = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = v11;
  *(void *)(a4 + 32) = v21;
  *(void *)(a4 + 104) = *(void *)(a4 + 96);
  unsigned int v114 = (void **)(a4 + 120);
  *(void *)(a4 + 128) = *(void *)(a4 + 120);
  uint64_t v115 = (void **)(a4 + 144);
  *(void *)(a4 + 152) = *(void *)(a4 + 144);
  *(void *)(a4 + 56) = *(void *)(a4 + 48);
  *(void *)(a4 + 80) = *(void *)(a4 + 72);
  *(void *)(a4 + 168) = 0;
  *(void *)(a4 + 176) = 0;
  unint64_t v113 = (void **)(a4 + 24);
  if (a2 != a3)
  {
    do
    {
      int v22 = *a2;
      if (v22 != 13 && v22 != 10) {
        goto LABEL_21;
      }
      ++a2;
    }
    while (a2 != a3);
    a2 = a3;
LABEL_21:
    uint64_t v24 = v21;
    if (a2 == a3) {
      goto LABEL_166;
    }
    while (1)
    {
      if (!a2)
      {
        uint64_t v30 = 0;
        uint64_t v32 = 0;
        goto LABEL_45;
      }
      uint64_t v25 = 0;
      do
      {
        int v26 = a2[v25];
        if (v26 != 239 && v25 == 0)
        {
          uint64_t v30 = 0;
LABEL_44:
          uint64_t v32 = (char *)&a2[v25];
          goto LABEL_45;
        }
        if (v26 != 187 && v25 == 1)
        {
          uint64_t v30 = 1;
          goto LABEL_44;
        }
        if (v26 != 191 && v25 == 2)
        {
          uint64_t v30 = 2;
          goto LABEL_44;
        }
        uint64_t v30 = v25 + 1;
        unsigned int v31 = v25;
        if (&a2[v25 + 1] == a3) {
          break;
        }
        ++v25;
      }
      while (v31 < 2);
      uint64_t v32 = (char *)&a2[v30];
      if (v31 > 1) {
        goto LABEL_46;
      }
      uint64_t v30 = v30;
LABEL_45:
      v32 -= v30;
LABEL_46:
      uint64_t v33 = (unsigned __int8 *)(v32 + 1);
      while (v33 != a3)
      {
        int v35 = *v33++;
        int v34 = v35;
        if (v35 == 13 || v34 == 10)
        {
          a2 = v33 - 1;
          goto LABEL_55;
        }
      }
      a2 = a3;
LABEL_55:
      if (v32 == (char *)a2)
      {
        int v39 = 0;
      }
      else
      {
        uint64_t v37 = 0;
        int v38 = 0;
        int v39 = 0;
        do
        {
          __endptr = 0;
          int v40 = strtoll(v32, &__endptr, 0);
          int v41 = v40;
          if (v38 == *(_DWORD *)(a1 + 232))
          {
            uint64_t v32 = __endptr;
            int v39 = v40;
          }
          else if (__endptr == v32)
          {
            ++v37;
          }
          else
          {
            unint64_t v43 = *(char **)(a4 + 152);
            unint64_t v42 = *(void *)(a4 + 160);
            if ((unint64_t)v43 >= v42)
            {
              uint64_t v45 = (char *)*v115;
              uint64_t v46 = (v43 - (unsigned char *)*v115) >> 2;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 62) {
                std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v48 = v42 - (void)v45;
              if (v48 >> 1 > v47) {
                unint64_t v47 = v48 >> 1;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                unint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v49);
                uint64_t v45 = *(char **)(a4 + 144);
                unint64_t v43 = *(char **)(a4 + 152);
              }
              else
              {
                unint64_t v50 = 0;
              }
              unint64_t v51 = &v50[4 * v46];
              *(_DWORD *)unint64_t v51 = v41;
              unint64_t v44 = v51 + 4;
              while (v43 != v45)
              {
                int v52 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }
              *(void *)(a4 + 144) = v51;
              *(void *)(a4 + 152) = v44;
              *(void *)(a4 + 160) = &v50[4 * v49];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v43 = v40;
              unint64_t v44 = v43 + 4;
            }
            *(void *)(a4 + 152) = v44;
            unint64_t v54 = *(char **)(a4 + 128);
            unint64_t v53 = *(void *)(a4 + 136);
            if ((unint64_t)v54 >= v53)
            {
              uint64_t v56 = (char *)*v114;
              uint64_t v57 = (v54 - (unsigned char *)*v114) >> 3;
              unint64_t v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 61) {
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v59 = v53 - (void)v56;
              if (v59 >> 2 > v58) {
                unint64_t v58 = v59 >> 2;
              }
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v60 = v58;
              }
              if (v60)
              {
                unint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 136, v60);
                uint64_t v56 = *(char **)(a4 + 120);
                unint64_t v54 = *(char **)(a4 + 128);
              }
              else
              {
                unint64_t v61 = 0;
              }
              int v62 = &v61[8 * v57];
              *(void *)int v62 = v37;
              uint64_t v55 = v62 + 8;
              while (v54 != v56)
              {
                uint64_t v63 = *((void *)v54 - 1);
                v54 -= 8;
                *((void *)v62 - 1) = v63;
                v62 -= 8;
              }
              *(void *)(a4 + 120) = v62;
              *(void *)(a4 + 128) = v55;
              *(void *)(a4 + 136) = &v61[8 * v60];
              if (v56) {
                operator delete(v56);
              }
            }
            else
            {
              *(void *)unint64_t v54 = v37;
              uint64_t v55 = v54 + 8;
            }
            ++v37;
            *(void *)(a4 + 128) = v55;
            uint64_t v32 = __endptr;
          }
          if (v32 >= (char *)a2) {
            uint64_t v64 = (char *)a2;
          }
          else {
            uint64_t v64 = v32;
          }
          unint64_t v65 = (unsigned __int8 *)(v64 - 1);
          do
          {
            uint64_t v67 = v65 + 1;
            int v66 = v65[1];
            uint64_t v68 = (unsigned __int8 *)(a1 + 240);
            if (*(char *)(a1 + 263) < 0) {
              uint64_t v68 = *(unsigned __int8 **)(a1 + 240);
            }
            ++v65;
          }
          while (v67 != a2 && v66 != *v68);
          if (v65 == a2 && !v37)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
            int v70 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            unsigned int v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Delimiter '", 11);
            int v72 = *(char *)(a1 + 263);
            if (v72 >= 0) {
              uint64_t v73 = a1 + 240;
            }
            else {
              uint64_t v73 = *(void *)(a1 + 240);
            }
            if (v72 >= 0) {
              uint64_t v74 = *(unsigned __int8 *)(a1 + 263);
            }
            else {
              uint64_t v74 = *(void *)(a1 + 248);
            }
            unint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
            uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"' is not found in the line. ", 28);
            int v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Expected '", 10);
            int v78 = *(char *)(a1 + 263);
            if (v78 >= 0) {
              uint64_t v79 = a1 + 240;
            }
            else {
              uint64_t v79 = *(void *)(a1 + 240);
            }
            if (v78 >= 0) {
              uint64_t v80 = *(unsigned __int8 *)(a1 + 263);
            }
            else {
              uint64_t v80 = *(void *)(a1 + 248);
            }
            uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' as the delimiter to separate fields.", 38);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v118);
          }
          ++v38;
          if (v67 == a2) {
            uint64_t v32 = (char *)v65;
          }
          else {
            uint64_t v32 = (char *)(v65 + 1);
          }
        }
        while (v32 != (char *)a2);
      }
      while (1)
      {
        int v82 = *a2;
        if (v82 != 13 && v82 != 10) {
          break;
        }
        if (a2 == a3)
        {
          a2 = a3;
          break;
        }
        ++a2;
      }
      uint64_t v85 = *(char **)(a4 + 32);
      unint64_t v84 = *(void *)(a4 + 40);
      if ((unint64_t)v85 >= v84)
      {
        unsigned int v87 = (char *)*v113;
        uint64_t v88 = (v85 - (unsigned char *)*v113) >> 2;
        unint64_t v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 62) {
          std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v90 = v84 - (void)v87;
        if (v90 >> 1 > v89) {
          unint64_t v89 = v90 >> 1;
        }
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v91 = v89;
        }
        if (v91)
        {
          uint64_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 40, v91);
          unsigned int v87 = *(char **)(a4 + 24);
          uint64_t v85 = *(char **)(a4 + 32);
        }
        else
        {
          uint64_t v92 = 0;
        }
        uint64_t v93 = &v92[4 * v88];
        *(_DWORD *)uint64_t v93 = v39;
        unint64_t v86 = v93 + 4;
        while (v85 != v87)
        {
          int v94 = *((_DWORD *)v85 - 1);
          v85 -= 4;
          *((_DWORD *)v93 - 1) = v94;
          v93 -= 4;
        }
        *(void *)(a4 + 24) = v93;
        *(void *)(a4 + 32) = v86;
        *(void *)(a4 + 40) = &v92[4 * v91];
        if (v87) {
          operator delete(v87);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v85 = v39;
        unint64_t v86 = v85 + 4;
      }
      *(void *)(a4 + 32) = v86;
      uint64_t v95 = (uint64_t)(*(void *)(a4 + 128) - *(void *)(a4 + 120)) >> 3;
      int v97 = *(uint64_t **)(a4 + 8);
      unint64_t v96 = *(void *)(a4 + 16);
      if ((unint64_t)v97 >= v96)
      {
        uint64_t v98 = *(uint64_t **)a4;
        uint64_t v99 = ((uint64_t)v97 - *(void *)a4) >> 3;
        unint64_t v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v101 = v96 - (void)v98;
        if (v101 >> 2 > v100) {
          unint64_t v100 = v101 >> 2;
        }
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v102 = v100;
        }
        if (v102)
        {
          uint64_t v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10, v102);
          uint64_t v98 = *(uint64_t **)a4;
          int v97 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          uint64_t v103 = 0;
        }
        uint64_t v104 = (uint64_t *)&v103[8 * v99];
        *uint64_t v104 = v95;
        long long v11 = v104 + 1;
        while (v97 != v98)
        {
          uint64_t v105 = *--v97;
          *--uint64_t v104 = v105;
        }
        *(void *)a4 = v104;
        *(void *)(a4 + 8) = v11;
        *(void *)(a4 + 16) = &v103[8 * v102];
        if (v98) {
          operator delete(v98);
        }
      }
      else
      {
        uint64_t *v97 = v95;
        long long v11 = v97 + 1;
      }
      *(void *)(a4 + 8) = v11;
      if (a2 == a3)
      {
        uint64_t v21 = *(void *)(a4 + 24);
        uint64_t v24 = *(void *)(a4 + 32);
        goto LABEL_166;
      }
    }
  }
  uint64_t v24 = v21;
LABEL_166:
  if (((v24 - v21) >> 2) + 1 != ((uint64_t)v11 - *(void *)a4) >> 3)
  {
    uint64_t v106 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    dmlc::LogMessageFatal::Entry::Init(v106, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    unint64_t v107 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    unsigned int v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v117);
  }
  uint64_t v109 = *(void *)(a4 + 56) - *(void *)(a4 + 48);
  if (v109)
  {
    if ((v109 >> 2) + 1 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
    {
      uint64_t v110 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      dmlc::LogMessageFatal::Entry::Init(v110, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
      unint64_t v111 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      uint64_t v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"Check failed: out->weight.size() == 0 || out->weight.size() + 1 == out->offset.size()", 85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v116);
    }
  }
}

void sub_22E905A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, char a19)
{
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned long long,int>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned long long,int>> *)::{lambda(void)#1}>>(uint64_t a1)
{
  uint64_t v18 = (uint64_t *)a1;
  uint64_t v2 = std::__thread_local_data();
  unsigned int v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
  unint64_t v5 = *(void *)(*(void *)(a1 + 8) + 8);
  unint64_t v7 = *(int *)(a1 + 32);
  uint64_t v6 = *(int *)(a1 + 36);
  unint64_t v8 = (v5 + v7 - 1) / v7;
  if (v5 >= v8 * v6) {
    unint64_t v9 = v8 * v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
  }
  unint64_t v10 = v8 * (v6 + 1);
  if (v5 >= v10) {
    unint64_t v5 = v10;
  }
  long long v11 = &v4[v9];
  if (v9)
  {
    while (1)
    {
      int v12 = *v11;
      if (v12 == 10 || v12 == 13) {
        break;
      }
      if (--v11 == v4)
      {
        long long v11 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  unint64_t v14 = &v4[v5];
  if (v6 + 1 != v7 && v5)
  {
    while (1)
    {
      int v15 = *v14;
      if (v15 == 10 || v15 == 13) {
        break;
      }
      if (--v14 == v4)
      {
        unint64_t v14 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  (*(void (**)(void, unsigned __int8 *, unsigned __int8 *, uint64_t))(**(void **)(a1 + 40) + 56))(*(void *)(a1 + 40), v11, v14, **(void **)(a1 + 24) + 184 * (int)v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v18);
  return 0;
}

uint64_t dmlc::data::TextParserBase<unsigned int,long long>::~TextParserBase(uint64_t a1)
{
  *(void *)a1 = &unk_26E247C08;
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 136));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 128));
  *(void *)a1 = &unk_26E247C58;
  uint64_t v4 = (void **)(a1 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void sub_22E905D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::mutex::~mutex((std::mutex *)(v10 + 136));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 + 128));
  *(void *)uint64_t v10 = &unk_26E247C58;
  a10 = (void **)(v10 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CSVParser<unsigned int,long long>::~CSVParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247B58;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }

  return dmlc::data::TextParserBase<unsigned int,long long>::~TextParserBase(a1);
}

void dmlc::data::CSVParser<unsigned int,long long>::~CSVParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247B58;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  dmlc::data::TextParserBase<unsigned int,long long>::~TextParserBase(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E905E88(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C405F535ED3);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned int,long long>::BeforeFirst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 16))();
}

BOOL dmlc::data::ParserImpl<unsigned int,long long>::Next(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  for (unsigned int i = *(_DWORD *)(a1 + 12); ; *(_DWORD *)(a1 + 12) = i)
  {
    uint64_t v5 = v3;
    unint64_t v6 = v3 <= i ? i : v3;
    uint64_t v7 = (176 * v3) | 8;
    while (v6 != v5)
    {
      *(_DWORD *)(a1 + 8) = ++v5;
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(v8 + v7) - *(void *)(v8 + v7 - 8);
      v7 += 176;
      if (v9 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned int,long long>::GetBlock(v13, (uint64_t *)(v8 + v7 - 184));
        long long v10 = v13[1];
        *(_OWORD *)(a1 + 40) = v13[0];
        *(_OWORD *)(a1 + 56) = v10;
        long long v11 = v13[3];
        *(_OWORD *)(a1 + 72) = v13[2];
        *(_OWORD *)(a1 + 88) = v11;
        unint64_t v6 = v5 - 1;
        return v6 < i;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v2)) {
      break;
    }
    unsigned int v3 = 0;
    unsigned int i = -1171354717 * ((*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4);
    *(_DWORD *)(a1 + 8) = 0;
  }
  return v6 < i;
}

uint64_t dmlc::data::ParserImpl<unsigned int,long long>::Value(uint64_t a1)
{
  return a1 + 40;
}

uint64_t dmlc::data::TextParserBase<unsigned int,long long>::BytesRead(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t dmlc::data::TextParserBase<unsigned int,long long>::ParseNext(uint64_t a1, void ***a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 120) + 32))(*(void *)(a1 + 120), &v38);
  uint64_t v5 = v4;
  if (!v4) {
    return v5;
  }
  int v6 = *(_DWORD *)(a1 + 104);
  uint64_t v7 = *a2;
  unint64_t v8 = (unint64_t)a2[1];
  unint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v8 - (void)*a2) >> 4);
  unint64_t v10 = v6 - v9;
  if (v6 > v9)
  {
    long long v11 = a2[2];
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)((uint64_t)v11 - v8) >> 4) < v10)
    {
      if (v6 < 0) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unsigned int v35 = v4;
      int v34 = a2[2];
      unint64_t v12 = 0x5D1745D1745D1746 * (((char *)v11 - (char *)v7) >> 4);
      if (v12 <= v6) {
        unint64_t v12 = v6;
      }
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)v7) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
        unint64_t v13 = 0x1745D1745D1745DLL;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v43 = a2 + 2;
      if (v13 > 0x1745D1745D1745DLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = 22 * v13;
      int v15 = (void **)operator new(176 * v13);
      BOOL v16 = &v15[22 * v9];
      int v40 = v15;
      v41.i64[0] = (uint64_t)v16;
      uint64_t v33 = &v15[v14];
      unint64_t v42 = &v15[v14];
      uint64_t v17 = &v15[22 * v6];
      uint64_t v18 = 176 * v6 - 176 * v9;
      uint64_t v19 = v16;
      do
      {
        v19[20] = 0;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)uint64_t v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        uint64_t v20 = operator new(8uLL);
        void *v20 = 0;
        v19[1] = v20 + 1;
        _OWORD v19[2] = v20 + 1;
        void *v19 = v20;
        v19[4] = 0;
        v19[13] = 0;
        v19[16] = 0;
        v19[19] = 0;
        v19[7] = 0;
        v19[10] = 0;
        v19[21] = 0;
        v19 += 22;
        v18 -= 176;
      }
      while (v18);
      v41.i64[1] = (uint64_t)v17;
      uint64_t v5 = v35;
      if ((void **)v8 == v7)
      {
        int64x2_t v25 = vdupq_n_s64(v8);
        int v27 = v33;
        int v26 = v34;
      }
      else
      {
        unint64_t v21 = 0;
        do
        {
          unint64_t v22 = v8 + v21;
          uint64_t v23 = &v16[v21 / 8];
          *((_OWORD *)v23 - 11) = *(_OWORD *)(v8 + v21 - 176);
          *(v23 - 20) = *(void **)(v8 + v21 - 160);
          *(void *)(v22 - 176) = 0;
          *(void *)(v22 - 168) = 0;
          *(void *)(v22 - 160) = 0;
          *(_OWORD *)(v23 - 19) = *(_OWORD *)(v8 + v21 - 152);
          *(v23 - 17) = *(void **)(v8 + v21 - 136);
          *(void *)(v22 - 152) = 0;
          *(void *)(v22 - 144) = 0;
          *(void *)(v22 - 136) = 0;
          *((_OWORD *)v23 - 8) = *(_OWORD *)(v8 + v21 - 128);
          *(v23 - 14) = *(void **)(v8 + v21 - 112);
          *(void *)(v22 - 128) = 0;
          *(void *)(v22 - 120) = 0;
          *(void *)(v22 - 112) = 0;
          *(_OWORD *)(v23 - 13) = *(_OWORD *)(v8 + v21 - 104);
          *(v23 - 11) = *(void **)(v8 + v21 - 88);
          *(void *)(v22 - 104) = 0;
          *(void *)(v22 - 96) = 0;
          *(void *)(v22 - 88) = 0;
          *((_OWORD *)v23 - 5) = *(_OWORD *)(v8 + v21 - 80);
          *(v23 - 8) = *(void **)(v8 + v21 - 64);
          *(void *)(v22 - 80) = 0;
          *(void *)(v22 - 72) = 0;
          long long v24 = *(_OWORD *)(v8 + v21 - 56);
          *(void *)(v22 - 64) = 0;
          *(_OWORD *)(v23 - 7) = v24;
          *(v23 - 5) = *(void **)(v8 + v21 - 40);
          *(void *)(v22 - 56) = 0;
          *(void *)(v22 - 48) = 0;
          *(void *)(v22 - 40) = 0;
          *((_OWORD *)v23 - 2) = *(_OWORD *)(v8 + v21 - 32);
          *(v23 - 2) = *(void **)(v8 + v21 - 16);
          *(void *)(v22 - 32) = 0;
          *(void *)(v22 - 24) = 0;
          *(void *)(v22 - 16) = 0;
          *(v23 - 1) = *(void **)(v8 + v21 - 8);
          v21 -= 176;
        }
        while ((void **)(v8 + v21) != v7);
        int64x2_t v25 = *(int64x2_t *)a2;
        int v26 = a2[2];
        BOOL v16 = (void **)((char *)v16 + v21);
        uint64_t v17 = (void **)v41.i64[1];
        int v27 = v42;
      }
      *a2 = v16;
      a2[1] = v17;
      int64x2_t v41 = v25;
      a2[2] = v27;
      unint64_t v42 = v26;
      int v40 = (void **)v25.i64[0];
      std::__split_buffer<dmlc::data::RowBlockContainer<unsigned int,float>>::~__split_buffer((uint64_t)&v40);
      goto LABEL_26;
    }
    unint64_t v28 = v8 + 176 * v10;
    uint64_t v29 = 176 * v6 - 16 * ((uint64_t)(v8 - (void)*a2) >> 4);
    do
    {
      *(void *)(v8 + 160) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)unint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      uint64_t v30 = operator new(8uLL);
      *uint64_t v30 = 0;
      *(void *)(v8 + 8) = v30 + 1;
      *(void *)(v8 + 16) = v30 + 1;
      *(void *)unint64_t v8 = v30;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 104) = 0;
      *(void *)(v8 + 128) = 0;
      *(void *)(v8 + 152) = 0;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 168) = 0;
      v8 += 176;
      v29 -= 176;
    }
    while (v29);
    goto LABEL_23;
  }
  if (v6 < v9)
  {
    unint64_t v28 = (unint64_t)&v7[22 * v6];
    while (v8 != v28)
    {
      v8 -= 176;
      dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v8);
    }
LABEL_23:
    a2[1] = (void **)v28;
  }
LABEL_26:
  uint64_t v31 = v39;
  *(void *)(a1 + 112) += v39;
  LODWORD(v36) = 0;
  if (!v31) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  if (v6 >= 1) {
    operator new();
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)(a1 + 128));
  *(_DWORD *)(a1 + 8) = 0;
  int v40 = (void **)&v36;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](&v40);
  return v5;
}

void sub_22E90662C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::thread a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23 = a20;
  a20 = 0;
  if (v23) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v23);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::data::CSVParser<unsigned int,long long>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v8 = *(uint64_t **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v10 = a4 + 16;
  unint64_t v9 = *(void *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v12 = v9 - (void)v8;
    uint64_t v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    int v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    BOOL v16 = *(uint64_t **)a4;
    uint64_t v17 = *(uint64_t **)(a4 + 8);
    uint64_t v19 = &v15[v18];
    *int v15 = 0;
    long long v11 = v15 + 1;
    while (v17 != v16)
    {
      uint64_t v20 = *--v17;
      *--int v15 = v20;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = v19;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v8 = 0;
    long long v11 = v8 + 1;
  }
  uint64_t v21 = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = v11;
  *(void *)(a4 + 32) = v21;
  *(void *)(a4 + 104) = *(void *)(a4 + 96);
  unsigned int v114 = (void **)(a4 + 120);
  *(void *)(a4 + 128) = *(void *)(a4 + 120);
  uint64_t v115 = (void **)(a4 + 144);
  *(void *)(a4 + 152) = *(void *)(a4 + 144);
  *(void *)(a4 + 56) = *(void *)(a4 + 48);
  *(void *)(a4 + 80) = *(void *)(a4 + 72);
  *(void *)(a4 + 168) = 0;
  unint64_t v113 = (void **)(a4 + 24);
  if (a2 != a3)
  {
    do
    {
      int v22 = *a2;
      if (v22 != 13 && v22 != 10) {
        goto LABEL_21;
      }
      ++a2;
    }
    while (a2 != a3);
    a2 = a3;
LABEL_21:
    uint64_t v24 = v21;
    if (a2 == a3) {
      goto LABEL_166;
    }
    while (1)
    {
      if (!a2)
      {
        uint64_t v30 = 0;
        uint64_t v32 = 0;
        goto LABEL_45;
      }
      uint64_t v25 = 0;
      do
      {
        int v26 = a2[v25];
        if (v26 != 239 && v25 == 0)
        {
          uint64_t v30 = 0;
LABEL_44:
          uint64_t v32 = (char *)&a2[v25];
          goto LABEL_45;
        }
        if (v26 != 187 && v25 == 1)
        {
          uint64_t v30 = 1;
          goto LABEL_44;
        }
        if (v26 != 191 && v25 == 2)
        {
          uint64_t v30 = 2;
          goto LABEL_44;
        }
        uint64_t v30 = v25 + 1;
        unsigned int v31 = v25;
        if (&a2[v25 + 1] == a3) {
          break;
        }
        ++v25;
      }
      while (v31 < 2);
      uint64_t v32 = (char *)&a2[v30];
      if (v31 > 1) {
        goto LABEL_46;
      }
      uint64_t v30 = v30;
LABEL_45:
      v32 -= v30;
LABEL_46:
      uint64_t v33 = (unsigned __int8 *)(v32 + 1);
      while (v33 != a3)
      {
        int v35 = *v33++;
        int v34 = v35;
        if (v35 == 13 || v34 == 10)
        {
          a2 = v33 - 1;
          goto LABEL_55;
        }
      }
      a2 = a3;
LABEL_55:
      if (v32 == (char *)a2)
      {
        uint64_t v39 = 0;
      }
      else
      {
        int v37 = 0;
        int v38 = 0;
        uint64_t v39 = 0;
        do
        {
          __endptr = 0;
          uint64_t v40 = strtoll(v32, &__endptr, 0);
          uint64_t v41 = v40;
          if (v38 == *(_DWORD *)(a1 + 224))
          {
            uint64_t v32 = __endptr;
            uint64_t v39 = v40;
          }
          else if (__endptr == v32)
          {
            ++v37;
          }
          else
          {
            unint64_t v43 = *(uint64_t **)(a4 + 152);
            unint64_t v42 = *(void *)(a4 + 160);
            if ((unint64_t)v43 >= v42)
            {
              uint64_t v45 = (uint64_t *)*v115;
              uint64_t v46 = ((char *)v43 - (unsigned char *)*v115) >> 3;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61) {
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v48 = v42 - (void)v45;
              if (v48 >> 2 > v47) {
                unint64_t v47 = v48 >> 2;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                unint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 160, v49);
                uint64_t v45 = *(uint64_t **)(a4 + 144);
                unint64_t v43 = *(uint64_t **)(a4 + 152);
              }
              else
              {
                unint64_t v50 = 0;
              }
              unint64_t v51 = (uint64_t *)&v50[8 * v46];
              *unint64_t v51 = v41;
              unint64_t v44 = v51 + 1;
              while (v43 != v45)
              {
                uint64_t v52 = *--v43;
                *--unint64_t v51 = v52;
              }
              *(void *)(a4 + 144) = v51;
              *(void *)(a4 + 152) = v44;
              *(void *)(a4 + 160) = &v50[8 * v49];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *unint64_t v43 = v40;
              unint64_t v44 = v43 + 1;
            }
            *(void *)(a4 + 152) = v44;
            unint64_t v54 = *(char **)(a4 + 128);
            unint64_t v53 = *(void *)(a4 + 136);
            if ((unint64_t)v54 >= v53)
            {
              uint64_t v56 = (char *)*v114;
              uint64_t v57 = (v54 - (unsigned char *)*v114) >> 2;
              unint64_t v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v59 = v53 - (void)v56;
              if (v59 >> 1 > v58) {
                unint64_t v58 = v59 >> 1;
              }
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v60 = v58;
              }
              if (v60)
              {
                unint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 136, v60);
                uint64_t v56 = *(char **)(a4 + 120);
                unint64_t v54 = *(char **)(a4 + 128);
              }
              else
              {
                unint64_t v61 = 0;
              }
              int v62 = &v61[4 * v57];
              *(_DWORD *)int v62 = v37;
              uint64_t v55 = v62 + 4;
              while (v54 != v56)
              {
                int v63 = *((_DWORD *)v54 - 1);
                v54 -= 4;
                *((_DWORD *)v62 - 1) = v63;
                v62 -= 4;
              }
              *(void *)(a4 + 120) = v62;
              *(void *)(a4 + 128) = v55;
              *(void *)(a4 + 136) = &v61[4 * v60];
              if (v56) {
                operator delete(v56);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v54 = v37;
              uint64_t v55 = v54 + 4;
            }
            ++v37;
            *(void *)(a4 + 128) = v55;
            uint64_t v32 = __endptr;
          }
          if (v32 >= (char *)a2) {
            uint64_t v64 = (char *)a2;
          }
          else {
            uint64_t v64 = v32;
          }
          unint64_t v65 = (unsigned __int8 *)(v64 - 1);
          do
          {
            uint64_t v67 = v65 + 1;
            int v66 = v65[1];
            uint64_t v68 = (unsigned __int8 *)(a1 + 232);
            if (*(char *)(a1 + 255) < 0) {
              uint64_t v68 = *(unsigned __int8 **)(a1 + 232);
            }
            ++v65;
          }
          while (v67 != a2 && v66 != *v68);
          if (v65 == a2 && !v37)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
            int v70 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            unsigned int v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Delimiter '", 11);
            int v72 = *(char *)(a1 + 255);
            if (v72 >= 0) {
              uint64_t v73 = a1 + 232;
            }
            else {
              uint64_t v73 = *(void *)(a1 + 232);
            }
            if (v72 >= 0) {
              uint64_t v74 = *(unsigned __int8 *)(a1 + 255);
            }
            else {
              uint64_t v74 = *(void *)(a1 + 240);
            }
            unint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
            uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"' is not found in the line. ", 28);
            int v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Expected '", 10);
            int v78 = *(char *)(a1 + 255);
            if (v78 >= 0) {
              uint64_t v79 = a1 + 232;
            }
            else {
              uint64_t v79 = *(void *)(a1 + 232);
            }
            if (v78 >= 0) {
              uint64_t v80 = *(unsigned __int8 *)(a1 + 255);
            }
            else {
              uint64_t v80 = *(void *)(a1 + 240);
            }
            uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' as the delimiter to separate fields.", 38);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v118);
          }
          ++v38;
          if (v67 == a2) {
            uint64_t v32 = (char *)v65;
          }
          else {
            uint64_t v32 = (char *)(v65 + 1);
          }
        }
        while (v32 != (char *)a2);
      }
      while (1)
      {
        int v82 = *a2;
        if (v82 != 13 && v82 != 10) {
          break;
        }
        if (a2 == a3)
        {
          a2 = a3;
          break;
        }
        ++a2;
      }
      uint64_t v85 = *(char **)(a4 + 32);
      unint64_t v84 = *(void *)(a4 + 40);
      if ((unint64_t)v85 >= v84)
      {
        unsigned int v87 = (char *)*v113;
        uint64_t v88 = (v85 - (unsigned char *)*v113) >> 3;
        unint64_t v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v90 = v84 - (void)v87;
        if (v90 >> 2 > v89) {
          unint64_t v89 = v90 >> 2;
        }
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v91 = v89;
        }
        if (v91)
        {
          uint64_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 40, v91);
          unsigned int v87 = *(char **)(a4 + 24);
          uint64_t v85 = *(char **)(a4 + 32);
        }
        else
        {
          uint64_t v92 = 0;
        }
        uint64_t v93 = (uint64_t *)&v92[8 * v88];
        *uint64_t v93 = v39;
        unint64_t v86 = v93 + 1;
        while (v85 != v87)
        {
          uint64_t v94 = *((void *)v85 - 1);
          v85 -= 8;
          *--uint64_t v93 = v94;
        }
        *(void *)(a4 + 24) = v93;
        *(void *)(a4 + 32) = v86;
        *(void *)(a4 + 40) = &v92[8 * v91];
        if (v87) {
          operator delete(v87);
        }
      }
      else
      {
        *(void *)uint64_t v85 = v39;
        unint64_t v86 = v85 + 8;
      }
      *(void *)(a4 + 32) = v86;
      uint64_t v95 = (uint64_t)(*(void *)(a4 + 128) - *(void *)(a4 + 120)) >> 2;
      int v97 = *(uint64_t **)(a4 + 8);
      unint64_t v96 = *(void *)(a4 + 16);
      if ((unint64_t)v97 >= v96)
      {
        uint64_t v98 = *(uint64_t **)a4;
        uint64_t v99 = ((uint64_t)v97 - *(void *)a4) >> 3;
        unint64_t v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v101 = v96 - (void)v98;
        if (v101 >> 2 > v100) {
          unint64_t v100 = v101 >> 2;
        }
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v102 = v100;
        }
        if (v102)
        {
          uint64_t v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10, v102);
          uint64_t v98 = *(uint64_t **)a4;
          int v97 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          uint64_t v103 = 0;
        }
        uint64_t v104 = (uint64_t *)&v103[8 * v99];
        *uint64_t v104 = v95;
        long long v11 = v104 + 1;
        while (v97 != v98)
        {
          uint64_t v105 = *--v97;
          *--uint64_t v104 = v105;
        }
        *(void *)a4 = v104;
        *(void *)(a4 + 8) = v11;
        *(void *)(a4 + 16) = &v103[8 * v102];
        if (v98) {
          operator delete(v98);
        }
      }
      else
      {
        uint64_t *v97 = v95;
        long long v11 = v97 + 1;
      }
      *(void *)(a4 + 8) = v11;
      if (a2 == a3)
      {
        uint64_t v21 = *(void *)(a4 + 24);
        uint64_t v24 = *(void *)(a4 + 32);
        goto LABEL_166;
      }
    }
  }
  uint64_t v24 = v21;
LABEL_166:
  if (((v24 - v21) >> 3) + 1 != ((uint64_t)v11 - *(void *)a4) >> 3)
  {
    uint64_t v106 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    dmlc::LogMessageFatal::Entry::Init(v106, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    unint64_t v107 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    unsigned int v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v117);
  }
  uint64_t v109 = *(void *)(a4 + 56) - *(void *)(a4 + 48);
  if (v109)
  {
    if ((v109 >> 2) + 1 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
    {
      uint64_t v110 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      dmlc::LogMessageFatal::Entry::Init(v110, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
      unint64_t v111 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      uint64_t v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"Check failed: out->weight.size() == 0 || out->weight.size() + 1 == out->offset.size()", 85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v116);
    }
  }
}

void sub_22E906E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, char a19)
{
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,long long>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,long long>> *)::{lambda(void)#1}>>(uint64_t a1)
{
  uint64_t v18 = (uint64_t *)a1;
  uint64_t v2 = std::__thread_local_data();
  unsigned int v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
  unint64_t v5 = *(void *)(*(void *)(a1 + 8) + 8);
  unint64_t v7 = *(int *)(a1 + 32);
  uint64_t v6 = *(int *)(a1 + 36);
  unint64_t v8 = (v5 + v7 - 1) / v7;
  if (v5 >= v8 * v6) {
    unint64_t v9 = v8 * v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
  }
  unint64_t v10 = v8 * (v6 + 1);
  if (v5 >= v10) {
    unint64_t v5 = v10;
  }
  long long v11 = &v4[v9];
  if (v9)
  {
    while (1)
    {
      int v12 = *v11;
      if (v12 == 10 || v12 == 13) {
        break;
      }
      if (--v11 == v4)
      {
        long long v11 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  unint64_t v14 = &v4[v5];
  if (v6 + 1 != v7 && v5)
  {
    while (1)
    {
      int v15 = *v14;
      if (v15 == 10 || v15 == 13) {
        break;
      }
      if (--v14 == v4)
      {
        unint64_t v14 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  (*(void (**)(void, unsigned __int8 *, unsigned __int8 *, uint64_t))(**(void **)(a1 + 40) + 56))(*(void *)(a1 + 40), v11, v14, **(void **)(a1 + 24) + 176 * (int)v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v18);
  return 0;
}

uint64_t dmlc::data::TextParserBase<unsigned long long,long long>::~TextParserBase(uint64_t a1)
{
  *(void *)a1 = &unk_26E247D50;
  uint64_t v2 = *(void *)(a1 + 128);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 144));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 136));
  *(void *)a1 = &unk_26E247DA0;
  uint64_t v4 = (void **)(a1 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void sub_22E90711C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::mutex::~mutex((std::mutex *)(v10 + 144));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 + 136));
  *(void *)uint64_t v10 = &unk_26E247DA0;
  a10 = (void **)(v10 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CSVParser<unsigned long long,long long>::~CSVParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247CA0;
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }

  return dmlc::data::TextParserBase<unsigned long long,long long>::~TextParserBase(a1);
}

void dmlc::data::CSVParser<unsigned long long,long long>::~CSVParser(uint64_t a1)
{
  *(void *)a1 = &unk_26E247CA0;
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  dmlc::data::TextParserBase<unsigned long long,long long>::~TextParserBase(a1);

  JUMPOUT(0x230FA80D0);
}

void sub_22E90725C(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10F3C40C231C275);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,long long>::BeforeFirst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 16))();
}

BOOL dmlc::data::ParserImpl<unsigned long long,long long>::Next(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  unint64_t v4 = *(void *)(a1 + 8);
  for (unint64_t i = *(void *)(a1 + 16); ; *(void *)(a1 + 16) = i)
  {
    unint64_t v5 = v4 <= i ? i : v4;
    uint64_t v6 = 184 * v4 + 8;
    while (v5 != v4)
    {
      *(void *)(a1 + 8) = ++v4;
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v8 = *(void *)(v7 + v6) - *(void *)(v7 + v6 - 8);
      v6 += 184;
      if (v8 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned long long,long long>::GetBlock(v12, (uint64_t *)(v7 + v6 - 192));
        long long v9 = v12[1];
        *(_OWORD *)(a1 + 48) = v12[0];
        *(_OWORD *)(a1 + 64) = v9;
        long long v10 = v12[3];
        *(_OWORD *)(a1 + 80) = v12[2];
        *(_OWORD *)(a1 + 96) = v10;
        unint64_t v5 = v4 - 1;
        return v5 < i;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v2)) {
      break;
    }
    unint64_t v4 = 0;
    unint64_t i = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
    *(void *)(a1 + 8) = 0;
  }
  return v5 < i;
}

uint64_t dmlc::data::ParserImpl<unsigned long long,long long>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::TextParserBase<unsigned long long,long long>::BytesRead(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,long long>::ParseNext(uint64_t a1, void ***a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), &v38);
  uint64_t v5 = v4;
  if (!v4) {
    return v5;
  }
  int v6 = *(_DWORD *)(a1 + 112);
  uint64_t v7 = *a2;
  unint64_t v8 = (unint64_t)a2[1];
  unint64_t v9 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v8 - (void)*a2) >> 3);
  unint64_t v10 = v6 - v9;
  if (v6 > v9)
  {
    long long v11 = a2[2];
    if (0xD37A6F4DE9BD37A7 * ((uint64_t)((uint64_t)v11 - v8) >> 3) < v10)
    {
      if (v6 < 0) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unsigned int v35 = v4;
      int v34 = a2[2];
      unint64_t v12 = 0xA6F4DE9BD37A6F4ELL * (v11 - v7);
      if (v12 <= v6) {
        unint64_t v12 = v6;
      }
      if (0xD37A6F4DE9BD37A7 * (v11 - v7) >= 0xB21642C8590B21) {
        unint64_t v13 = 0x1642C8590B21642;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v43 = a2 + 2;
      if (v13 > 0x1642C8590B21642) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = 23 * v13;
      int v15 = (void **)operator new(184 * v13);
      BOOL v16 = &v15[23 * v9];
      uint64_t v40 = v15;
      v41.i64[0] = (uint64_t)v16;
      uint64_t v33 = &v15[v14];
      unint64_t v42 = &v15[v14];
      uint64_t v17 = &v15[23 * v6];
      uint64_t v18 = 184 * v6 - 184 * v9;
      uint64_t v19 = v16;
      do
      {
        v19[20] = 0;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)uint64_t v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        uint64_t v20 = operator new(8uLL);
        void *v20 = 0;
        v19[1] = v20 + 1;
        _OWORD v19[2] = v20 + 1;
        void *v19 = v20;
        v19[4] = 0;
        v19[13] = 0;
        v19[16] = 0;
        v19[19] = 0;
        v19[7] = 0;
        v19[10] = 0;
        v19[21] = 0;
        v19[22] = 0;
        v19 += 23;
        v18 -= 184;
      }
      while (v18);
      v41.i64[1] = (uint64_t)v17;
      uint64_t v5 = v35;
      if ((void **)v8 == v7)
      {
        int64x2_t v25 = vdupq_n_s64(v8);
        int v27 = v33;
        int v26 = v34;
      }
      else
      {
        unint64_t v21 = 0;
        do
        {
          unint64_t v22 = v8 + v21;
          uint64_t v23 = &v16[v21 / 8];
          *(_OWORD *)(v23 - 23) = *(_OWORD *)(v8 + v21 - 184);
          *(v23 - 21) = *(void **)(v8 + v21 - 168);
          *(void *)(v22 - 184) = 0;
          *(void *)(v22 - 176) = 0;
          *(void *)(v22 - 168) = 0;
          *((_OWORD *)v23 - 10) = *(_OWORD *)(v8 + v21 - 160);
          *(v23 - 18) = *(void **)(v8 + v21 - 144);
          *(void *)(v22 - 160) = 0;
          *(void *)(v22 - 152) = 0;
          *(void *)(v22 - 144) = 0;
          *(_OWORD *)(v23 - 17) = *(_OWORD *)(v8 + v21 - 136);
          *(v23 - 15) = *(void **)(v8 + v21 - 120);
          *(void *)(v22 - 136) = 0;
          *(void *)(v22 - 128) = 0;
          *(void *)(v22 - 120) = 0;
          *((_OWORD *)v23 - 7) = *(_OWORD *)(v8 + v21 - 112);
          *(v23 - 12) = *(void **)(v8 + v21 - 96);
          *(void *)(v22 - 112) = 0;
          *(void *)(v22 - 104) = 0;
          *(void *)(v22 - 96) = 0;
          *(_OWORD *)(v23 - 11) = *(_OWORD *)(v8 + v21 - 88);
          *(v23 - 9) = *(void **)(v8 + v21 - 72);
          *(void *)(v22 - 88) = 0;
          *(void *)(v22 - 80) = 0;
          long long v24 = *(_OWORD *)(v8 + v21 - 64);
          *(void *)(v22 - 72) = 0;
          *((_OWORD *)v23 - 4) = v24;
          *(v23 - 6) = *(void **)(v8 + v21 - 48);
          *(void *)(v22 - 64) = 0;
          *(void *)(v22 - 56) = 0;
          *(void *)(v22 - 48) = 0;
          *(_OWORD *)(v23 - 5) = *(_OWORD *)(v8 + v21 - 40);
          *(v23 - 3) = *(void **)(v8 + v21 - 24);
          *(void *)(v22 - 40) = 0;
          *(void *)(v22 - 32) = 0;
          *(void *)(v22 - 24) = 0;
          *((_OWORD *)v23 - 1) = *(_OWORD *)(v8 + v21 - 16);
          v21 -= 184;
        }
        while ((void **)(v8 + v21) != v7);
        int64x2_t v25 = *(int64x2_t *)a2;
        int v26 = a2[2];
        BOOL v16 = (void **)((char *)v16 + v21);
        uint64_t v17 = (void **)v41.i64[1];
        int v27 = v42;
      }
      *a2 = v16;
      a2[1] = v17;
      int64x2_t v41 = v25;
      a2[2] = v27;
      unint64_t v42 = v26;
      uint64_t v40 = (void **)v25.i64[0];
      std::__split_buffer<dmlc::data::RowBlockContainer<unsigned long long,float>>::~__split_buffer((uint64_t)&v40);
      goto LABEL_26;
    }
    unint64_t v28 = v8 + 184 * v10;
    uint64_t v29 = 184 * v6 - 8 * ((uint64_t)(v8 - (void)*a2) >> 3);
    do
    {
      *(void *)(v8 + 160) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)unint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      uint64_t v30 = operator new(8uLL);
      *uint64_t v30 = 0;
      *(void *)(v8 + 8) = v30 + 1;
      *(void *)(v8 + 16) = v30 + 1;
      *(void *)unint64_t v8 = v30;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 104) = 0;
      *(void *)(v8 + 128) = 0;
      *(void *)(v8 + 152) = 0;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 168) = 0;
      *(void *)(v8 + 176) = 0;
      v8 += 184;
      v29 -= 184;
    }
    while (v29);
    goto LABEL_23;
  }
  if (v6 < v9)
  {
    unint64_t v28 = (unint64_t)&v7[23 * v6];
    while (v8 != v28)
    {
      v8 -= 184;
      dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v8);
    }
LABEL_23:
    a2[1] = (void **)v28;
  }
LABEL_26:
  uint64_t v31 = v39;
  *(void *)(a1 + 120) += v39;
  LODWORD(v36) = 0;
  if (!v31) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  if (v6 >= 1) {
    operator new();
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)(a1 + 136));
  *(void *)(a1 + 8) = 0;
  uint64_t v40 = (void **)&v36;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](&v40);
  return v5;
}

void sub_22E9079FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::thread a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23 = a20;
  a20 = 0;
  if (v23) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v23);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::data::CSVParser<unsigned long long,long long>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v8 = *(uint64_t **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v10 = a4 + 16;
  unint64_t v9 = *(void *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v12 = v9 - (void)v8;
    uint64_t v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    int v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    BOOL v16 = *(uint64_t **)a4;
    uint64_t v17 = *(uint64_t **)(a4 + 8);
    uint64_t v19 = &v15[v18];
    *int v15 = 0;
    long long v11 = v15 + 1;
    while (v17 != v16)
    {
      uint64_t v20 = *--v17;
      *--int v15 = v20;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = v19;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v8 = 0;
    long long v11 = v8 + 1;
  }
  uint64_t v21 = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = v11;
  *(void *)(a4 + 32) = v21;
  *(void *)(a4 + 104) = *(void *)(a4 + 96);
  unsigned int v114 = (void **)(a4 + 120);
  *(void *)(a4 + 128) = *(void *)(a4 + 120);
  uint64_t v115 = (void **)(a4 + 144);
  *(void *)(a4 + 152) = *(void *)(a4 + 144);
  *(void *)(a4 + 56) = *(void *)(a4 + 48);
  *(void *)(a4 + 80) = *(void *)(a4 + 72);
  *(void *)(a4 + 168) = 0;
  *(void *)(a4 + 176) = 0;
  unint64_t v113 = (void **)(a4 + 24);
  if (a2 != a3)
  {
    do
    {
      int v22 = *a2;
      if (v22 != 13 && v22 != 10) {
        goto LABEL_21;
      }
      ++a2;
    }
    while (a2 != a3);
    a2 = a3;
LABEL_21:
    uint64_t v24 = v21;
    if (a2 == a3) {
      goto LABEL_166;
    }
    while (1)
    {
      if (!a2)
      {
        uint64_t v30 = 0;
        uint64_t v32 = 0;
        goto LABEL_45;
      }
      uint64_t v25 = 0;
      do
      {
        int v26 = a2[v25];
        if (v26 != 239 && v25 == 0)
        {
          uint64_t v30 = 0;
LABEL_44:
          uint64_t v32 = (char *)&a2[v25];
          goto LABEL_45;
        }
        if (v26 != 187 && v25 == 1)
        {
          uint64_t v30 = 1;
          goto LABEL_44;
        }
        if (v26 != 191 && v25 == 2)
        {
          uint64_t v30 = 2;
          goto LABEL_44;
        }
        uint64_t v30 = v25 + 1;
        unsigned int v31 = v25;
        if (&a2[v25 + 1] == a3) {
          break;
        }
        ++v25;
      }
      while (v31 < 2);
      uint64_t v32 = (char *)&a2[v30];
      if (v31 > 1) {
        goto LABEL_46;
      }
      uint64_t v30 = v30;
LABEL_45:
      v32 -= v30;
LABEL_46:
      uint64_t v33 = (unsigned __int8 *)(v32 + 1);
      while (v33 != a3)
      {
        int v35 = *v33++;
        int v34 = v35;
        if (v35 == 13 || v34 == 10)
        {
          a2 = v33 - 1;
          goto LABEL_55;
        }
      }
      a2 = a3;
LABEL_55:
      if (v32 == (char *)a2)
      {
        uint64_t v39 = 0;
      }
      else
      {
        uint64_t v37 = 0;
        int v38 = 0;
        uint64_t v39 = 0;
        do
        {
          __endptr = 0;
          uint64_t v40 = strtoll(v32, &__endptr, 0);
          uint64_t v41 = v40;
          if (v38 == *(_DWORD *)(a1 + 232))
          {
            uint64_t v32 = __endptr;
            uint64_t v39 = v40;
          }
          else if (__endptr == v32)
          {
            ++v37;
          }
          else
          {
            unint64_t v43 = *(uint64_t **)(a4 + 152);
            unint64_t v42 = *(void *)(a4 + 160);
            if ((unint64_t)v43 >= v42)
            {
              uint64_t v45 = (uint64_t *)*v115;
              uint64_t v46 = ((char *)v43 - (unsigned char *)*v115) >> 3;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61) {
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v48 = v42 - (void)v45;
              if (v48 >> 2 > v47) {
                unint64_t v47 = v48 >> 2;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                unint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 160, v49);
                uint64_t v45 = *(uint64_t **)(a4 + 144);
                unint64_t v43 = *(uint64_t **)(a4 + 152);
              }
              else
              {
                unint64_t v50 = 0;
              }
              unint64_t v51 = (uint64_t *)&v50[8 * v46];
              *unint64_t v51 = v41;
              unint64_t v44 = v51 + 1;
              while (v43 != v45)
              {
                uint64_t v52 = *--v43;
                *--unint64_t v51 = v52;
              }
              *(void *)(a4 + 144) = v51;
              *(void *)(a4 + 152) = v44;
              *(void *)(a4 + 160) = &v50[8 * v49];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *unint64_t v43 = v40;
              unint64_t v44 = v43 + 1;
            }
            *(void *)(a4 + 152) = v44;
            unint64_t v54 = *(char **)(a4 + 128);
            unint64_t v53 = *(void *)(a4 + 136);
            if ((unint64_t)v54 >= v53)
            {
              uint64_t v56 = (char *)*v114;
              uint64_t v57 = (v54 - (unsigned char *)*v114) >> 3;
              unint64_t v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 61) {
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v59 = v53 - (void)v56;
              if (v59 >> 2 > v58) {
                unint64_t v58 = v59 >> 2;
              }
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v60 = v58;
              }
              if (v60)
              {
                unint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 136, v60);
                uint64_t v56 = *(char **)(a4 + 120);
                unint64_t v54 = *(char **)(a4 + 128);
              }
              else
              {
                unint64_t v61 = 0;
              }
              int v62 = &v61[8 * v57];
              *(void *)int v62 = v37;
              uint64_t v55 = v62 + 8;
              while (v54 != v56)
              {
                uint64_t v63 = *((void *)v54 - 1);
                v54 -= 8;
                *((void *)v62 - 1) = v63;
                v62 -= 8;
              }
              *(void *)(a4 + 120) = v62;
              *(void *)(a4 + 128) = v55;
              *(void *)(a4 + 136) = &v61[8 * v60];
              if (v56) {
                operator delete(v56);
              }
            }
            else
            {
              *(void *)unint64_t v54 = v37;
              uint64_t v55 = v54 + 8;
            }
            ++v37;
            *(void *)(a4 + 128) = v55;
            uint64_t v32 = __endptr;
          }
          if (v32 >= (char *)a2) {
            uint64_t v64 = (char *)a2;
          }
          else {
            uint64_t v64 = v32;
          }
          unint64_t v65 = (unsigned __int8 *)(v64 - 1);
          do
          {
            uint64_t v67 = v65 + 1;
            int v66 = v65[1];
            uint64_t v68 = (unsigned __int8 *)(a1 + 240);
            if (*(char *)(a1 + 263) < 0) {
              uint64_t v68 = *(unsigned __int8 **)(a1 + 240);
            }
            ++v65;
          }
          while (v67 != a2 && v66 != *v68);
          if (v65 == a2 && !v37)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
            int v70 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            unsigned int v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Delimiter '", 11);
            int v72 = *(char *)(a1 + 263);
            if (v72 >= 0) {
              uint64_t v73 = a1 + 240;
            }
            else {
              uint64_t v73 = *(void *)(a1 + 240);
            }
            if (v72 >= 0) {
              uint64_t v74 = *(unsigned __int8 *)(a1 + 263);
            }
            else {
              uint64_t v74 = *(void *)(a1 + 248);
            }
            unint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
            uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"' is not found in the line. ", 28);
            int v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Expected '", 10);
            int v78 = *(char *)(a1 + 263);
            if (v78 >= 0) {
              uint64_t v79 = a1 + 240;
            }
            else {
              uint64_t v79 = *(void *)(a1 + 240);
            }
            if (v78 >= 0) {
              uint64_t v80 = *(unsigned __int8 *)(a1 + 263);
            }
            else {
              uint64_t v80 = *(void *)(a1 + 248);
            }
            uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' as the delimiter to separate fields.", 38);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v118);
          }
          ++v38;
          if (v67 == a2) {
            uint64_t v32 = (char *)v65;
          }
          else {
            uint64_t v32 = (char *)(v65 + 1);
          }
        }
        while (v32 != (char *)a2);
      }
      while (1)
      {
        int v82 = *a2;
        if (v82 != 13 && v82 != 10) {
          break;
        }
        if (a2 == a3)
        {
          a2 = a3;
          break;
        }
        ++a2;
      }
      uint64_t v85 = *(char **)(a4 + 32);
      unint64_t v84 = *(void *)(a4 + 40);
      if ((unint64_t)v85 >= v84)
      {
        unsigned int v87 = (char *)*v113;
        uint64_t v88 = (v85 - (unsigned char *)*v113) >> 3;
        unint64_t v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v90 = v84 - (void)v87;
        if (v90 >> 2 > v89) {
          unint64_t v89 = v90 >> 2;
        }
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v91 = v89;
        }
        if (v91)
        {
          uint64_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 40, v91);
          unsigned int v87 = *(char **)(a4 + 24);
          uint64_t v85 = *(char **)(a4 + 32);
        }
        else
        {
          uint64_t v92 = 0;
        }
        uint64_t v93 = (uint64_t *)&v92[8 * v88];
        *uint64_t v93 = v39;
        unint64_t v86 = v93 + 1;
        while (v85 != v87)
        {
          uint64_t v94 = *((void *)v85 - 1);
          v85 -= 8;
          *--uint64_t v93 = v94;
        }
        *(void *)(a4 + 24) = v93;
        *(void *)(a4 + 32) = v86;
        *(void *)(a4 + 40) = &v92[8 * v91];
        if (v87) {
          operator delete(v87);
        }
      }
      else
      {
        *(void *)uint64_t v85 = v39;
        unint64_t v86 = v85 + 8;
      }
      *(void *)(a4 + 32) = v86;
      uint64_t v95 = (uint64_t)(*(void *)(a4 + 128) - *(void *)(a4 + 120)) >> 3;
      int v97 = *(uint64_t **)(a4 + 8);
      unint64_t v96 = *(void *)(a4 + 16);
      if ((unint64_t)v97 >= v96)
      {
        uint64_t v98 = *(uint64_t **)a4;
        uint64_t v99 = ((uint64_t)v97 - *(void *)a4) >> 3;
        unint64_t v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 61) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v101 = v96 - (void)v98;
        if (v101 >> 2 > v100) {
          unint64_t v100 = v101 >> 2;
        }
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v102 = v100;
        }
        if (v102)
        {
          uint64_t v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10, v102);
          uint64_t v98 = *(uint64_t **)a4;
          int v97 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          uint64_t v103 = 0;
        }
        uint64_t v104 = (uint64_t *)&v103[8 * v99];
        *uint64_t v104 = v95;
        long long v11 = v104 + 1;
        while (v97 != v98)
        {
          uint64_t v105 = *--v97;
          *--uint64_t v104 = v105;
        }
        *(void *)a4 = v104;
        *(void *)(a4 + 8) = v11;
        *(void *)(a4 + 16) = &v103[8 * v102];
        if (v98) {
          operator delete(v98);
        }
      }
      else
      {
        uint64_t *v97 = v95;
        long long v11 = v97 + 1;
      }
      *(void *)(a4 + 8) = v11;
      if (a2 == a3)
      {
        uint64_t v21 = *(void *)(a4 + 24);
        uint64_t v24 = *(void *)(a4 + 32);
        goto LABEL_166;
      }
    }
  }
  uint64_t v24 = v21;
LABEL_166:
  if (((v24 - v21) >> 3) + 1 != ((uint64_t)v11 - *(void *)a4) >> 3)
  {
    uint64_t v106 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    dmlc::LogMessageFatal::Entry::Init(v106, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    unint64_t v107 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    unsigned int v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v117);
  }
  uint64_t v109 = *(void *)(a4 + 56) - *(void *)(a4 + 48);
  if (v109)
  {
    if ((v109 >> 2) + 1 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
    {
      uint64_t v110 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      dmlc::LogMessageFatal::Entry::Init(v110, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
      unint64_t v111 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      uint64_t v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"Check failed: out->weight.size() == 0 || out->weight.size() + 1 == out->offset.size()", 85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v116);
    }
  }
}

void sub_22E908224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, char a19)
{
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned long long,long long>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned long long,long long>> *)::{lambda(void)#1}>>(uint64_t a1)
{
  uint64_t v18 = (uint64_t *)a1;
  uint64_t v2 = std::__thread_local_data();
  unsigned int v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
  unint64_t v5 = *(void *)(*(void *)(a1 + 8) + 8);
  unint64_t v7 = *(int *)(a1 + 32);
  uint64_t v6 = *(int *)(a1 + 36);
  unint64_t v8 = (v5 + v7 - 1) / v7;
  if (v5 >= v8 * v6) {
    unint64_t v9 = v8 * v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
  }
  unint64_t v10 = v8 * (v6 + 1);
  if (v5 >= v10) {
    unint64_t v5 = v10;
  }
  long long v11 = &v4[v9];
  if (v9)
  {
    while (1)
    {
      int v12 = *v11;
      if (v12 == 10 || v12 == 13) {
        break;
      }
      if (--v11 == v4)
      {
        long long v11 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  unint64_t v14 = &v4[v5];
  if (v6 + 1 != v7 && v5)
  {
    while (1)
    {
      int v15 = *v14;
      if (v15 == 10 || v15 == 13) {
        break;
      }
      if (--v14 == v4)
      {
        unint64_t v14 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  (*(void (**)(void, unsigned __int8 *, unsigned __int8 *, uint64_t))(**(void **)(a1 + 40) + 56))(*(void *)(a1 + 40), v11, v14, **(void **)(a1 + 24) + 184 * (int)v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v18);
  return 0;
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_colmaker__(xgboost::tree *this)
{
  return 0;
}

void xgboost::tree::ColMaker::~ColMaker(void **this)
{
  xgboost::tree::ColMaker::~ColMaker(this);

  JUMPOUT(0x230FA80D0);
}

{
  void **v2;
  void *v3;
  void *v4;
  void **v5;

  *this = &unk_26E247ED8;
  uint64_t v2 = this + 24;
  if (*((char *)this + 287) < 0) {
    operator delete(this[33]);
  }
  unint64_t v5 = this + 30;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = this + 27;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = v2;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unsigned int v3 = this[21];
  if (v3)
  {
    this[22] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  uint64_t v4 = this[12];
  if (v4)
  {
    this[13] = v4;
    operator delete(v4);
  }
}

void xgboost::tree::ColMaker::LoadConfig(xgboost::tree::ColMaker *this, const xgboost::Json *a2)
{
  unsigned int v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(&__p, "train_param");
  uint64_t v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)&__p);
  xgboost::FromJson<xgboost::tree::TrainParam>(v4, (xgboost::tree::ColMaker *)((char *)this + 16), &v19);
  v16[0] = &v19;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "colmaker_train_param");
  unint64_t v5 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)v16);
  uint64_t v6 = (xgboost::tree::ColMakerTrainParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v5);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  std::string __p = &v21;
  unint64_t v7 = (void *)*((void *)v6 + 2);
  unint64_t v8 = (void *)((char *)v6 + 24);
  if (v7 != (void *)((char *)v6 + 24))
  {
    do
    {
      unint64_t v9 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v7[7]);
      uint64_t v23 = (long long *)(v7 + 4);
      unint64_t v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, (const void **)v7 + 4, (uint64_t)&std::piecewise_construct, &v23);
      uint64_t v6 = (xgboost::tree::ColMakerTrainParam *)std::string::operator=((std::string *)(v10 + 7), (const std::string *)(v9 + 16));
      long long v11 = (void *)v7[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (void *)v7[2];
          BOOL v13 = *v12 == (void)v7;
          unint64_t v7 = v12;
        }
        while (!v13);
      }
      unint64_t v7 = v12;
    }
    while (v12 != v8);
  }
  int v15 = *((unsigned __int8 *)this + 152);
  unint64_t v14 = (char *)this + 152;
  memset(&v18, 0, sizeof(v18));
  xgboost::tree::ColMakerTrainParam::__MANAGER__(v6);
  if (v15)
  {
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_26AD715E0, (uint64_t)v14, __p, &v21, 0, &v18, 0);
  }
  else
  {
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_26AD715E0, (uint64_t)v14, __p, &v21, &v18, 0);
    *unint64_t v14 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v21);
  std::string __p = &v18;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
}

void sub_22E90879C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,int a23,__int16 a24,char a25,char a26)
{
  *(void *)(v26 - 56) = &a15;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a21, a22);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::tree::ColMaker::SaveConfig(xgboost::tree::ColMaker *this, xgboost::Json *a2)
{
  xgboost::ToJson<xgboost::tree::TrainParam>((xgboost::tree::ColMaker *)((char *)this + 16), &v4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "train_param");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, &__p);
  xgboost::Json::operator=();
}

void sub_22E908A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v30, a16);
  _Unwind_Resume(a1);
}

void xgboost::tree::ColMaker::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::TrainParam *)(a1 + 16), a2, v8);
  unint64_t v9 = (void **)v8;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v9);
  int v5 = *(unsigned __int8 *)(a1 + 152);
  uint64_t v4 = (unsigned char *)(a1 + 152);
  memset(v7, 0, sizeof(v7));
  xgboost::tree::ColMakerTrainParam::__MANAGER__(v6);
  if (v5)
  {
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_26AD715E0, (uint64_t)v4, *a2, a2[1], 0, v7, 0);
  }
  else
  {
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_26AD715E0, (uint64_t)v4, *a2, a2[1], v7, 0);
    unsigned char *v4 = 1;
  }
  unint64_t v9 = (void **)v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_22E908C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v10 - 40) = &a10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 40));
  _Unwind_Resume(a1);
}

uint64_t xgboost::TreeUpdater::CanModifyTree(xgboost::TreeUpdater *this)
{
  return 0;
}

std::string *xgboost::tree::ColMaker::Update(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Engine = rabit::engine::GetEngine((rabit::engine *)a1);
  if ((*(unsigned int (**)(void *))(*(void *)Engine + 80))(Engine))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
    unint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a3 + 40))(a3) & 1) == 0)
  {
    uint64_t v10 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(v10, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
    long long v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  if (*(void *)(a1 + 168) == *(void *)(a1 + 176))
  {
    uint64_t v12 = (**(uint64_t (***)(uint64_t))a3)(a3);
    std::vector<unsigned long>::vector(&__p, *(void *)(v12 + 8));
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a3 + 88))(&v41, a3);
    v40[2] = v41;
    v40[3] = v42;
    if (v42) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
    }
    xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(v40, 0);
  }
  float v13 = *(float *)(a1 + 20);
  *(float *)(a1 + 20) = v13 / (float)(unint64_t)((uint64_t)(a4[1] - *a4) >> 3);
  unint64_t v14 = (int *)(**(uint64_t (***)(uint64_t))a3)(a3);
  uint64_t result = xgboost::FeatureInteractionConstraintHost::Configure((std::string *)(a1 + 192), (const xgboost::tree::TrainParam *)(a1 + 16), *v14);
  if (*a4 != a4[1])
  {
    if (!*(void *)(a1 + 8))
    {
      char v17 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(v17, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
      std::vector<std::pair<std::string, std::string>> v18 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      std::vector<std::pair<std::string, std::string>> v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: ctx_", 18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    }
    uint64_t v21 = 0;
    long long v20 = 0uLL;
    std::vector<std::unordered_set<unsigned int>>::__init_with_size[abi:ne180100]<std::unordered_set<unsigned int>*,std::unordered_set<unsigned int>*>((uint64_t)&v20, *(void *)(a1 + 192), *(void *)(a1 + 200), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 3));
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    std::vector<std::unordered_set<unsigned int>>::__init_with_size[abi:ne180100]<std::unordered_set<unsigned int>*,std::unordered_set<unsigned int>*>((uint64_t)&v22, *(void *)(a1 + 216), *(void *)(a1 + 224), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 3));
    long long v24 = 0uLL;
    uint64_t v25 = 0;
    std::vector<std::unordered_set<unsigned int>>::__init_with_size[abi:ne180100]<std::unordered_set<unsigned int>*,std::unordered_set<unsigned int>*>((uint64_t)&v24, *(void *)(a1 + 240), *(void *)(a1 + 248), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 248) - *(void *)(a1 + 240)) >> 3));
    if (*(char *)(a1 + 287) < 0) {
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a1 + 264), *(void *)(a1 + 272));
    }
    else {
      std::string v26 = *(std::string *)(a1 + 264);
    }
    int v27 = *(_DWORD *)(a1 + 288);
    char v28 = *(unsigned char *)(a1 + 292);
    uint64_t v16 = *(void *)(a1 + 8);
    std::string __p = &unk_26E247F48;
    uint64_t v30 = (xgboost::tree::TrainParam *)(a1 + 16);
    uint64_t v31 = a1 + 152;
    uint64_t v32 = v16;
    xgboost::common::ColumnSampler::ColumnSampler((xgboost::common::ColumnSampler *)v33);
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(_OWORD *)&v33[2584] = 0u;
    long long v34 = 0u;
    xgboost::tree::TreeEvaluator::TreeEvaluator((xgboost::tree::TreeEvaluator *)&v39, v30);
  }
  *(float *)(a1 + 20) = v13;
  return result;
}

void sub_22E9092A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xgboost::common::ColumnSampler *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
}

const char *xgboost::tree::ColMaker::Name(xgboost::tree::ColMaker *this)
{
  return "grow_colmaker";
}

void xgboost::FeatureInteractionConstraintHost::~FeatureInteractionConstraintHost(void **this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  uint64_t v2 = this + 6;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 3;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unsigned int v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void xgboost::tree::ColMaker::Builder::Update(uint64_t a1, float32x2_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v74 = (uint64_t *)(a1 + 2616);
  std::vector<int>::resize((std::vector<int> *)(a1 + 2616), a2[1] - *a2);
  unint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  __p.n128_u64[0] = (uint64_t)(*(void *)(a1 + 2624) - *(void *)(a1 + 2616)) >> 2;
  if (*v7 != __p.n128_u64[0]) {
    dmlc::LogCheckFormat<unsigned long long,unsigned long>();
  }
  uint64_t v76 = a3;
  unint64_t v8 = *(int **)(a1 + 2616);
  unint64_t v9 = *(int **)(a1 + 2624);
  uint64_t v10 = (char *)v9 - (char *)v8;
  if ((char *)v9 - (char *)v8 >= 1) {
    bzero(*(void **)(a1 + 2616), 4 * (((unint64_t)v10 >> 2) - ((unint64_t)v10 > 3)) + 4);
  }
  if (v9 != v8)
  {
    uint64_t v11 = v10 >> 2;
    if ((unint64_t)(v10 >> 2) <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v12 = (float *)*a2 + 1;
    do
    {
      if (*v12 < 0.0) {
        *unint64_t v8 = ~*v8;
      }
      ++v8;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if (*(float *)(v13 + 48) < 1.0)
  {
    int v14 = *(_DWORD *)(v13 + 52);
    __p.n128_u32[0] = 0;
    if (v14) {
      dmlc::LogCheckFormat<int,xgboost::tree::TrainParam::SamplingMethod>();
    }
    float v15 = *(float *)(*(void *)(a1 + 8) + 48);
    uint64_t v16 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
    uint64_t v17 = *(void *)(a1 + 2616);
    if (*(void *)(a1 + 2624) != v17)
    {
      std::vector<std::pair<std::string, std::string>> v18 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)v16;
      unint64_t v19 = 0;
      double v20 = v15;
      uint64_t v21 = 1;
      do
      {
        if ((*a2)->f32[v21] >= 0.0)
        {
          std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v22 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v18);
          std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v23 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v18);
          uint64_t v17 = *v74;
          if (((double)v22 + (double)v23 * 4294967300.0) * 5.42101086e-20 + 0.0 >= v20) {
            *(_DWORD *)(v17 + 4 * v19) = ~*(_DWORD *)(v17 + 4 * v19);
          }
        }
        ++v19;
        v21 += 2;
      }
      while (v19 < (*(void *)(a1 + 2624) - v17) >> 2);
    }
  }
  std::vector<unsigned int>::size_type v24 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v76 + 24))(v76) + 8);
  uint64_t v25 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v76 + 24))(v76) + 176);
  uint64_t v82 = 0;
  __n128 __p = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)v25, *(void *)(v25 + 8), (uint64_t)(*(void *)(v25 + 8) - *(void *)v25) >> 2);
  xgboost::common::ColumnSampler::Init((float *)(a1 + 32), v24, &__p, *(float *)(*(void *)(a1 + 8) + 56), *(float *)(*(void *)(a1 + 8) + 60), *(float *)(*(void *)(a1 + 8) + 64));
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  std::string v26 = *(char **)(a1 + 2648);
  int v27 = *(char **)(a1 + 2640);
  if (v26 != v27)
  {
    do
    {
      v26 -= 24;
      v84.__ptr_ = v26;
      std::vector<xgboost::tree::ColMaker::ThreadEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
    }
    while (v26 != v27);
    std::string v26 = *(char **)(a1 + 2640);
  }
  *(void *)(a1 + 2648) = v27;
  int v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  unint64_t v28 = (v27 - v26) / 24;
  if (v27 != v26)
  {
    if (v28 < 2) {
      goto LABEL_48;
    }
    uint64_t v29 = v26 + 24;
    while (v27 != v29)
    {
      v27 -= 24;
      v84.__ptr_ = v27;
      std::vector<xgboost::tree::ColMaker::ThreadEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
    }
    goto LABEL_45;
  }
  uint64_t v30 = *(void *)(a1 + 2656);
  if (0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v27) >> 3) >= 1 - v28)
  {
    uint64_t v29 = &v27[24 * (1 - v28)];
    uint64_t v44 = 24 - 24 * v28;
    do
    {
      *(void *)int v27 = 0;
      *((void *)v27 + 1) = 0;
      *((void *)v27 + 2) = 0;
      std::vector<xgboost::tree::ColMaker::ThreadEntry>::__init_with_size[abi:ne180100]<xgboost::tree::ColMaker::ThreadEntry*,xgboost::tree::ColMaker::ThreadEntry*>((uint64_t)v27, v78, v79, 0x4EC4EC4EC4EC4EC5 * (((char *)v79 - (char *)v78) >> 3));
      v27 += 24;
      v44 -= 24;
    }
    while (v44);
LABEL_45:
    *(void *)(a1 + 2648) = v29;
    goto LABEL_48;
  }
  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v26) >> 3);
  uint64_t v32 = 2 * v31;
  if (2 * v31 <= 1) {
    uint64_t v32 = 1;
  }
  if (v31 >= 0x555555555555555) {
    unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v33 = v32;
  }
  unsigned int v87 = (void *)(a1 + 2656);
  if (v33 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  long long v34 = (char *)operator new(24 * v33);
  long long v35 = &v34[24 * v28];
  uint64_t v36 = 24 * v28;
  v84.__ptr_ = v34;
  v85.i64[0] = (uint64_t)v35;
  v85.i64[1] = (uint64_t)v35;
  unint64_t v86 = &v34[24 * v33];
  long long v37 = v34 + 24;
  do
  {
    long long v38 = &v34[v36];
    *(void *)long long v38 = 0;
    *((void *)v38 + 1) = 0;
    *((void *)v38 + 2) = 0;
    std::vector<xgboost::tree::ColMaker::ThreadEntry>::__init_with_size[abi:ne180100]<xgboost::tree::ColMaker::ThreadEntry*,xgboost::tree::ColMaker::ThreadEntry*>((uint64_t)&v34[v36], v78, v79, 0x4EC4EC4EC4EC4EC5 * (((char *)v79 - (char *)v78) >> 3));
    v36 += 24;
  }
  while (v36 != 24);
  v85.i64[1] = (uint64_t)(v34 + 24);
  uint64_t v39 = *(void **)(a1 + 2648);
  uint64_t v40 = *(void **)(a1 + 2640);
  uint64_t v41 = v85.i64[0];
  if (v39 == v40)
  {
    int64x2_t v43 = vdupq_n_s64((unint64_t)v39);
  }
  else
  {
    do
    {
      *(void *)(v41 - 24) = 0;
      *(void *)(v41 - 16) = 0;
      v41 -= 24;
      *(void *)(v41 + 16) = 0;
      long long v42 = *(_OWORD *)(v39 - 3);
      v39 -= 3;
      *(_OWORD *)uint64_t v41 = v42;
      *(void *)(v41 + 16) = v39[2];
      *uint64_t v39 = 0;
      v39[1] = 0;
      uint64_t v39[2] = 0;
    }
    while (v39 != v40);
    int64x2_t v43 = *(int64x2_t *)(a1 + 2640);
    long long v37 = (char *)v85.i64[1];
  }
  *(void *)(a1 + 2640) = v41;
  *(void *)(a1 + 2648) = v37;
  int64x2_t v85 = v43;
  uint64_t v45 = *(char **)(a1 + 2656);
  *(void *)(a1 + 2656) = v86;
  unint64_t v86 = v45;
  v84.__ptr_ = (void *)v43.i64[0];
  std::__split_buffer<std::vector<xgboost::tree::ColMaker::ThreadEntry>>::~__split_buffer((uint64_t)&v84);
LABEL_48:
  v84.__ptr_ = &v78;
  std::vector<xgboost::tree::ColMaker::ThreadEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  uint64_t v46 = *(void **)(a1 + 2640);
  unint64_t v47 = *(void **)(a1 + 2648);
  if (v46 != v47)
  {
    uint64_t v48 = v46 + 2;
    do
    {
      std::vector<xgboost::tree::ColMaker::ThreadEntry>::__clear[abi:ne180100](v48 - 2);
      uint64_t v49 = *(v48 - 2);
      if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*v48 - v49) >> 3)) <= 0xFF)
      {
        uint64_t v50 = *(v48 - 1);
        unsigned int v87 = v48;
        v84.__ptr_ = operator new(0x6800uLL);
        v85.i64[0] = (uint64_t)v84.__ptr_ + v50 - v49;
        v85.i64[1] = v85.i64[0];
        unint64_t v86 = (char *)v84.__ptr_ + 26624;
        std::vector<xgboost::tree::ColMaker::ThreadEntry>::__swap_out_circular_buffer(v48 - 2, &v84);
        std::__split_buffer<xgboost::tree::ColMaker::ThreadEntry>::~__split_buffer((uint64_t)&v84);
      }
      unint64_t v51 = v48 + 1;
      v48 += 3;
    }
    while (v51 != v47);
  }
  int v77 = (uint64_t *)(a1 + 2664);
  uint64_t v52 = *(void *)(a1 + 2664);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 2680) - v52) >> 3)) <= 0xFF)
  {
    uint64_t v53 = *(void *)(a1 + 2672);
    unsigned int v87 = (void *)(a1 + 2680);
    v84.__ptr_ = operator new(0x6800uLL);
    v85.i64[0] = (uint64_t)v84.__ptr_ + v53 - v52;
    v85.i64[1] = v85.i64[0];
    unint64_t v86 = (char *)v84.__ptr_ + 26624;
    std::vector<xgboost::tree::ColMaker::NodeEntry>::__swap_out_circular_buffer(v77, &v84);
    std::__split_buffer<xgboost::tree::ColMaker::ThreadEntry>::~__split_buffer((uint64_t)&v84);
  }
  std::vector<int>::reserve((std::vector<int> *)(a1 + 2688), 0x100uLL);
  unint64_t v54 = *(_DWORD **)(a1 + 2688);
  *(void *)(a1 + 2696) = v54;
  unint64_t v55 = *(void *)(a1 + 2704);
  if ((unint64_t)v54 >= v55)
  {
    uint64_t v57 = v55 - (void)v54;
    uint64_t v58 = v57 >> 1;
    if ((unint64_t)(v57 >> 1) <= 1) {
      uint64_t v58 = 1;
    }
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v59 = v58;
    }
    unint64_t v60 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 2704, v59);
    unint64_t v61 = *(char **)(a1 + 2696);
    int v62 = *(char **)(a1 + 2688);
    uint64_t v64 = &v60[v63];
    *unint64_t v60 = 0;
    uint64_t v56 = v60 + 1;
    while (v61 != v62)
    {
      int v65 = *((_DWORD *)v61 - 1);
      v61 -= 4;
      *--unint64_t v60 = v65;
    }
    *(void *)(a1 + 2688) = v60;
    *(void *)(a1 + 2696) = v56;
    *(void *)(a1 + 2704) = v64;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *unint64_t v54 = 0;
    uint64_t v56 = v54 + 1;
  }
  *(void *)(a1 + 2696) = v56;
  xgboost::tree::ColMaker::Builder::InitNewNode(a1, (int **)(a1 + 2688), a2, v76, a4);
  __p.n128_u32[0] = *(_DWORD *)(*(void *)(a1 + 8) + 12);
  LODWORD(v78) = 0;
  if (__p.n128_i32[0] < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  if (*(int *)(*(void *)(a1 + 8) + 12) > 0)
  {
    xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(a1 + 2712), (uint64_t)&v84);
    xgboost::common::ColumnSampler::GetFeatureSet((xgboost::common::ColumnSampler *)(a1 + 32), 0, &__p);
    (*(void (**)(long long **__return_ptr, uint64_t))(*(void *)v76 + 88))(&v78, v76);
    v83[2].__ptr_ = v78;
    v83[3].__ptr_ = v79;
    if (v79) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v79 + 1, 1uLL, memory_order_relaxed);
    }
    xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(v83, 0);
  }
  int v66 = *(int **)(a1 + 2688);
  for (unint64_t i = *(int **)(a1 + 2696); v66 != i; *(void *)(v69 + 4) = -1)
  {
    int v68 = *v66++;
    uint64_t v69 = *(void *)(a4 + 160) + 20 * v68;
    *(float *)(v69 + 16) = *(float *)(*(void *)(a1 + 2664) + 104 * v68 + 20) * *(float *)(*(void *)(a1 + 8) + 4);
  }
  uint64_t v70 = *(unsigned int *)(a4 + 12);
  if ((int)v70 >= 1)
  {
    unsigned int v71 = (double *)(*v77 + 24);
    int v72 = (float *)(*(void *)(a4 + 208) + 8);
    do
    {
      *(v72 - 2) = *(float *)v71;
      *int v72 = *((float *)v71 - 1);
      float v73 = *(v71 - 2);
      *(v72 - 1) = v73;
      v71 += 13;
      v72 += 4;
      --v70;
    }
    while (v70);
  }
}

void sub_22E90A784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::mutex::~mutex(v35);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v33 - 200));
  if (v36) {
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

void sub_22E90A888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  if (v30) {
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

void sub_22E90A8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  JUMPOUT(0x22E90A8F0);
}

uint64_t xgboost::BatchIterator<xgboost::SortedCSCPage>::operator!=(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    int v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    uint64_t v2 = *a1;
  }
  return (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2) ^ 1;
}

void sub_22E90A9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::BatchIterator<xgboost::SortedCSCPage>::operator*(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    int v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    uint64_t v2 = *a1;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
}

void sub_22E90AA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t *xgboost::BatchIterator<xgboost::SortedCSCPage>::operator++(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    int v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    uint64_t v2 = *a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return a1;
}

void sub_22E90AB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22E90ABA0(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,void>((uint64_t)a1, a2);
}

void sub_22E90ABE8(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,void>(&v2, a2);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22E90ACB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<std::unordered_set<unsigned int>>::__init_with_size[abi:ne180100]<std::unordered_set<unsigned int>*,std::unordered_set<unsigned int>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = (void *)result;
    if (a4 >= 0x666666666666667) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>(result + 16, a4);
    uint64_t v7 = result;
    void *v4 = result;
    v4[1] = result;
    v4[2] = result + 40 * v8;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = std::unordered_set<unsigned int>::unordered_set(v7 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    v4[1] = v7;
  }
  return result;
}

void sub_22E90AE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::unordered_set<unsigned int>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (unint64_t i = *(unsigned int **)(a2 + 16); i; unint64_t i = *(unsigned int **)i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a1, i + 4, i + 4);
  return a1;
}

void sub_22E90AEEC(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_22E90B35C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void xgboost::common::ColumnSampler::~ColumnSampler(xgboost::common::ColumnSampler *this)
{
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void xgboost::tree::ColMaker::Builder::UpdateSolution(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  if (!*(void *)(a1 + 24))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
    size_t v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: this->ctx_", 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
  }
  uint64_t v10 = **a2;
  uint64_t v11 = *a2[1];
  uint64_t v12 = a2[1][1] - v11;
  v19[0] = ((*a2)[1] - v10) >> 3;
  v19[1] = v10;
  _OWORD v19[2] = v12 >> 3;
  _OWORD v19[3] = v11;
  v21.__ptr_ = 0;
  v22.__m_.__sig = 850045863;
  memset(v22.__m_.__opaque, 0, sizeof(v22.__m_.__opaque));
  uint64_t v13 = v8 - v9;
  if (v8 != v9)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v13 >> 2;
    v20[0] = a1;
    v20[1] = (uint64_t)a3;
    v20[2] = (uint64_t)v19;
    _OWORD v20[3] = a4;
    do
      _ZN4dmlc12OMPException3RunIZN7xgboost4tree8ColMaker7Builder14UpdateSolutionERKNS2_13SortedCSCPageERKNSt3__16vectorIjNS9_9allocatorIjEEEERKNSA_INS2_6detail20GradientPairInternalIfEENSB_ISI_EEEEPNS2_7DMatrixEEUlT_E_JmEEEvSP_DpT0_((uint64_t)&v21, v20, v14++);
    while (v15 != v14);
  }
  dmlc::OMPException::Rethrow(&v21);
  std::mutex::~mutex(&v22);
  std::exception_ptr::~exception_ptr(&v21);
}

void sub_22E90B51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception_ptr a17)
{
}

void xgboost::tree::ColMaker::Builder::SyncBestSolution(uint64_t a1, int **a2)
{
  long long v2 = *a2;
  unint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      int v5 = *v2;
      uint64_t v6 = *(void *)(a1 + 2664);
      if (!*(void *)(a1 + 24))
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
        unint64_t v19 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
        unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: this->ctx_", 24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
      }
      uint64_t v7 = **(void **)(a1 + 2640);
      uint64_t v8 = v7 + 104 * v5;
      float v10 = *(float *)(v8 + 24);
      uint64_t v9 = v8 + 24;
      float v11 = v10;
      if (fabsf(v10) == INFINITY) {
        goto LABEL_12;
      }
      uint64_t v12 = v6 + 104 * v5;
      uint64_t v13 = (float *)(v12 + 24);
      int v14 = *(_DWORD *)(v9 + 4);
      float v15 = *(float *)(v12 + 24);
      if ((*(_DWORD *)(v12 + 28) & 0x7FFFFFFFu) <= (v14 & 0x7FFFFFFFu))
      {
        if (v15 < v11)
        {
LABEL_9:
          *uint64_t v13 = v11;
          *(_DWORD *)(v12 + 28) = v14;
          uint64_t v16 = v7 + 104 * v5;
          *(_DWORD *)(v12 + 32) = *(_DWORD *)(v16 + 32);
          *(unsigned char *)(v12 + 64) = *(unsigned char *)(v16 + 64);
          if (v13 != (float *)v9) {
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v12 + 40), *(char **)(v7 + 104 * v5 + 40), *(void *)(v7 + 104 * v5 + 48), (uint64_t)(*(void *)(v7 + 104 * v5 + 48) - *(void *)(v7 + 104 * v5 + 40)) >> 2);
          }
          uint64_t v17 = v7 + 104 * v5;
          *(_OWORD *)(v12 + 72) = *(_OWORD *)(v17 + 72);
          *(_OWORD *)(v12 + 88) = *(_OWORD *)(v17 + 88);
        }
      }
      else if (v15 <= v11)
      {
        goto LABEL_9;
      }
LABEL_12:
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_22E90B6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::tree::ColMaker::Builder::SetNonDefaultPosition(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  memset(&__p, 0, sizeof(__p));
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    std::vector<unsigned int>::pointer end = 0;
    do
    {
      uint64_t v9 = *(void *)(a4 + 160);
      if (*(_DWORD *)(v9 + 20 * *v6 + 4) != -1)
      {
        int v10 = *(_DWORD *)(v9 + 20 * *v6 + 12) & 0x7FFFFFFF;
        if (end >= __p.__end_cap_.__value_)
        {
          std::vector<unsigned int>::pointer begin = __p.__begin_;
          uint64_t v13 = end - __p.__begin_;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          int64_t v15 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
          if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v14) {
            unint64_t v14 = v15 >> 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v16);
            uint64_t v18 = v17;
            std::vector<unsigned int>::pointer begin = __p.__begin_;
            std::vector<unsigned int>::pointer end = __p.__end_;
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = (unsigned int *)(v16 + 4 * v13);
          unsigned int *v19 = v10;
          float v11 = v19 + 1;
          while (end != begin)
          {
            unsigned int v20 = *--end;
            *--unint64_t v19 = v20;
          }
          __p.__begin_ = v19;
          __p.__end_ = v11;
          __p.__end_cap_.__value_ = (unsigned int *)(v16 + 4 * v18);
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          unsigned int *end = v10;
          float v11 = end + 1;
        }
        __p.__end_ = v11;
        std::vector<unsigned int>::pointer end = v11;
      }
      ++v6;
    }
    while (v6 != v7);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  std::vector<unsigned int>::pointer v21 = __p.__begin_;
  std::vector<unsigned int>::pointer v22 = __p.__end_;
  if (__p.__begin_ == __p.__end_)
  {
    std::vector<unsigned int>::pointer v22 = __p.__begin_;
  }
  else
  {
    uint64_t v23 = __p.__begin_ + 1;
    do
    {
      if (v23 == __p.__end_) {
        goto LABEL_33;
      }
      unsigned int v24 = *(v23 - 1);
      unsigned int v25 = *v23++;
    }
    while (v24 != v25);
    std::string v26 = v23 - 2;
    while (v23 != v22)
    {
      unsigned int v27 = v24;
      unsigned int v24 = *v23;
      if (v27 != *v23)
      {
        v26[1] = v24;
        ++v26;
      }
      ++v23;
    }
    std::vector<unsigned int>::pointer v22 = v26 + 1;
  }
LABEL_33:
  std::vector<unsigned int>::resize(&__p, v22 - v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a3 + 88))(&v29, a3);
  v28[2] = v29;
  void v28[3] = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(v28, 0);
}

void sub_22E90BAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

xgboost::common::ColumnSampler *xgboost::common::ColumnSampler::ColumnSampler(xgboost::common::ColumnSampler *this)
{
  *((void *)this + 3) = 0;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = (char *)this + 24;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 8) = _D0;
  *((_DWORD *)this + 18) = 1065353216;
  unsigned int v7 = 5489;
  uint64_t v8 = 1;
  uint64_t v9 = 21;
  *((_DWORD *)this + 20) = 5489;
  do
  {
    int v10 = 1812433253 * (v7 ^ (v7 >> 30));
    unsigned int v7 = v10 + v8;
    *((_DWORD *)this + v9) = v9 + v10 - 20;
    ++v8;
    ++v9;
  }
  while (v9 != 644);
  *((void *)this + 322) = 0;
  float v11 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
  uint64_t v12 = (rabit::engine *)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v11);
  unsigned int v19 = v12;
  Engine = rabit::engine::GetEngine(v12);
  (*(void (**)(void *, unsigned int *, uint64_t, void))(*(void *)Engine + 16))(Engine, &v19, 4, 0);
  unsigned int v14 = v19;
  *((_DWORD *)this + 20) = v19;
  uint64_t v15 = 1;
  for (uint64_t i = 21; i != 644; ++i)
  {
    int v17 = 1812433253 * (v14 ^ (v14 >> 30));
    unsigned int v14 = v17 + v15;
    *((_DWORD *)this + i) = i + v17 - 20;
    ++v15;
  }
  *((void *)this + 322) = 0;
  return this;
}

void sub_22E90BC6C(_Unwind_Exception *a1)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy(v2, *(void **)(v1 + 24));
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy(a1, a2[1]);
    int8x8_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

void xgboost::tree::TreeEvaluator::TreeEvaluator(xgboost::tree::TreeEvaluator *this, const xgboost::tree::TrainParam *a2)
{
}

void sub_22E90BE30()
{
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

uint64_t xgboost::tree::TrainParam::MaxNodes(xgboost::tree::TrainParam *this)
{
  if (!*((_DWORD *)this + 3) && !*((_DWORD *)this + 4))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/param.h");
    std::vector<int>::size_type v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Max leaves and max depth cannot both be unconstrained.", 54);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
  }
  int v4 = *((_DWORD *)this + 4);
  if (v4 >= 1) {
    return (2 * v4 - 1);
  }
  int v6 = *((_DWORD *)this + 3);
  int v11 = 31;
  int v12 = v6;
  if (v6 > 31) {
    dmlc::LogCheckFormat<int,int>();
  }
  int v7 = *((_DWORD *)this + 3);
  BOOL v8 = __CFADD__(v7, 1);
  int v9 = -1 << (v7 + 1);
  uint64_t result = ~v9;
  int v11 = 0;
  int v12 = ~v9;
  if (v8) {
    dmlc::LogCheckFormat<int,int>();
  }
  return result;
}

void sub_22E90C0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  int v7 = value;
  int v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      std::vector<int>::size_type v16 = 4 * __n;
      int v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      int v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (char *)this->__begin_;
    unint64_t v11 = __n + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = (int *)&v15[4 * v12];
    unsigned int v19 = &v18[__n];
    std::vector<int>::size_type v20 = 4 * __n;
    std::vector<unsigned int>::pointer v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    std::vector<unsigned int>::pointer v22 = (int *)&v15[4 * v14];
    std::vector<int>::pointer begin = this->__begin_;
    for (std::vector<int>::pointer i = this->__end_; i != begin; --i)
    {
      int v25 = *(i - 1);
      *--uint64_t v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<xgboost::tree::ColMaker::NodeEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = (void *)*((void *)v4 - 8);
        if (v6)
        {
          *((void *)v4 - 7) = v6;
          operator delete(v6);
        }
        v4 -= 104;
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<xgboost::tree::ColMaker::ThreadEntry>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        int v6 = v4;
        std::vector<xgboost::tree::ColMaker::ThreadEntry>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<xgboost::tree::ColMaker::ThreadEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<xgboost::tree::ColMaker::ThreadEntry>::__clear[abi:ne180100]((uint64_t *)v2);
    std::vector<int>::size_type v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<xgboost::tree::ColMaker::ThreadEntry>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 104)
  {
    uint64_t v4 = *(void **)(i - 64);
    if (v4)
    {
      *(void *)(i - 56) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void _ZN4dmlc12OMPException3RunIZN7xgboost4tree8ColMaker7Builder14UpdateSolutionERKNS2_13SortedCSCPageERKNSt3__16vectorIjNS9_9allocatorIjEEEERKNSA_INS2_6detail20GradientPairInternalIfEENSB_ISI_EEEEPNS2_7DMatrixEEUlT_E_JmEEEvSP_DpT0_(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(*a2 + 2712), (uint64_t)v16);
  uint64_t v6 = a2[2];
  uint64_t v7 = *(unsigned int *)(*(void *)a2[1] + 4 * a3);
  uint64_t v8 = *(void *)(*(void *)(v6 + 8) + 8 * v7);
  uint64_t v9 = *(void *)(*(void *)(v6 + 8) + 8 * v7 + 8);
  uint64_t v10 = *(void *)(v6 + 24);
  if (v9 != v8 && v10 == 0) {
    std::terminate();
  }
  uint64_t v12 = (unsigned int *)(v10 + 8 * v8);
  BOOL v13 = v9 == v8 || *(float *)(v10 + 8 * v8 + 4) != *(float *)&v12[2 * v9 + 1 + 2 * ~v8];
  uint64_t v14 = *(void *)(v5 + 16);
  int v15 = *(_DWORD *)(v14 + 8);
  if (v15 == 2) {
    goto LABEL_13;
  }
  if (v15) {
    goto LABEL_14;
  }
  if (*(float *)(v14 + 4) <= *(float *)(**(void **)(v5 + 2848) + 4 * v7)) {
    BOOL v13 = 0;
  }
  if (v13)
  {
LABEL_13:
    xgboost::tree::ColMaker::Builder::EnumerateSplit((void *)v5, v12, (unsigned int *)(v10 + 8 * v9), 1, v7, (uint64_t *)a2[3], *(uint64_t **)(v5 + 2640), v16);
    int v15 = *(_DWORD *)(*(void *)(v5 + 16) + 8);
LABEL_14:
    if (v15 == 2) {
      return;
    }
  }
  xgboost::tree::ColMaker::Builder::EnumerateSplit((void *)v5, (unsigned int *)(v10 + 8 * v9 - 8), v12 - 2, -1, v7, (uint64_t *)a2[3], *(uint64_t **)(v5 + 2640), v16);
}

uint64_t **xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>@<X0>(uint64_t **result@<X0>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)result + 6) == -1)
  {
    uint64_t v4 = result[1];
    uint64_t v3 = *result[2];
    uint64_t v2 = (result[2][1] - v3) >> 2;
    uint64_t v5 = **result;
    *(void *)(a2 + 16) = ((*result)[1] - v5) >> 2;
    *(void *)(a2 + 24) = v5;
    uint64_t v7 = v4;
    uint64_t v6 = *v4;
    *(void *)(a2 + 32) = (v7[1] - v6) >> 2;
    *(void *)(a2 + 40) = v6;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
  }
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 48) = *((unsigned char *)result + 28);
  return result;
}

void xgboost::tree::ColMaker::Builder::EnumerateSplit(void *a1, unsigned int *a2, unsigned int *a3, int a4, unsigned int a5, uint64_t *a6, uint64_t *a7, void *a8)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v82 = a7;
  std::exception_ptr v84 = a1;
  if (!*(unsigned char *)(a1[1] + 76))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
    uint64_t v74 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
    unint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Check failed: param_.cache_opt", 30);
    uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v86);
    a7 = v82;
    a1 = v84;
  }
  uint64_t v10 = (int *)a1[336];
  for (uint64_t i = (int *)a1[337]; v10 != i; v13[1] = 0)
  {
    int v12 = *v10++;
    BOOL v13 = (void *)(*a7 + 104 * v12);
    *BOOL v13 = 0;
  }
  int8x16_t v85 = 0uLL;
  memset(v87, 0, sizeof(v87));
  memset(v86, 0, sizeof(v86));
  uint64_t v14 = a3;
  if (a4 <= 0) {
    int v15 = a2;
  }
  else {
    int v15 = a3;
  }
  if (a4 > 0) {
    uint64_t v14 = a2;
  }
  uint64_t v16 = 32;
  if (a4 <= 0) {
    uint64_t v16 = -32;
  }
  uint64_t v17 = (((char *)v15 - (char *)v14) >> 3) / v16;
  uint64_t v79 = &a2[64 * v17];
  if (v17)
  {
    uint64_t v18 = 8 * a4;
    do
    {
      uint64_t v19 = 0;
      uint64_t v20 = v84[327];
      uint64_t v21 = *a6;
      std::vector<unsigned int>::pointer v22 = a2;
      do
      {
        uint64_t v23 = *v22;
        *((_DWORD *)v87 + v19) = *(_DWORD *)(v20 + 4 * v23);
        *((void *)v86 + v19++) = *(void *)(v21 + 8 * v23);
        std::vector<unsigned int>::pointer v22 = (unsigned int *)((char *)v22 + v18);
      }
      while (v19 != 32);
      uint64_t v24 = 0;
      uint64_t v25 = 4;
      std::string v26 = (__int32 *)v86 + 1;
      do
      {
        unsigned int v27 = *(_DWORD *)((char *)v87 + v24);
        if ((v27 & 0x80000000) == 0
          && xgboost::FeatureInteractionConstraintHost::Query((xgboost::FeatureInteractionConstraintHost *)(v84 + 343), *(_DWORD *)((char *)v87 + v24), a5))
        {
          v28.i32[0] = *(v26 - 1);
          v29.i32[0] = *v26;
          xgboost::tree::ColMaker::Builder::UpdateEnumeration((uint64_t)v84, v27, a4, a5, (double *)v85.i64, *v82, a8, v28, v29, *(float *)((char *)a2 + v25));
        }
        v24 += 4;
        v26 += 2;
        v25 += v18;
      }
      while (v24 != 128);
      a2 += 64 * a4;
    }
    while (a2 != v79);
  }
  if (v79 != a3)
  {
    uint64_t v30 = v84[327];
    uint64_t v31 = *a6;
    uint64_t v32 = v86;
    uint64_t v33 = v87;
    long long v34 = v79;
    do
    {
      uint64_t v35 = *v34;
      *v33++ = *(_DWORD *)(v30 + 4 * v35);
      *v32++ = *(void *)(v31 + 8 * v35);
      v34 += 2 * a4;
    }
    while (v34 != a3);
    uint64_t v36 = (__int32 *)v86 + 1;
    long long v37 = (unsigned int *)v87;
    do
    {
      unsigned int v39 = *v37++;
      unsigned int v38 = v39;
      if ((v39 & 0x80000000) == 0
        && xgboost::FeatureInteractionConstraintHost::Query((xgboost::FeatureInteractionConstraintHost *)(v84 + 343), v38, a5))
      {
        v40.i32[0] = *(v36 - 1);
        v41.i32[0] = *v36;
        xgboost::tree::ColMaker::Builder::UpdateEnumeration((uint64_t)v84, v38, a4, a5, (double *)v85.i64, *v82, a8, v40, v41, *((float *)v79 + 1));
      }
      v36 += 2;
      v79 += 2 * a4;
    }
    while (v79 != a3);
  }
  long long v42 = v84;
  int64x2_t v43 = (int *)v84[336];
  uint64_t v44 = (int *)v84[337];
  for (int j = v82; v43 != v44; ++v43)
  {
    int v46 = *v43;
    uint64_t v47 = *j;
    uint64_t v48 = (int8x16_t *)(*j + 104 * *v43);
    int8x16_t v49 = *v48;
    int8x16_t v52 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v42[333] + 104 * *v43), *(float64x2_t *)v48);
    int8x16_t v85 = v52;
    v49.i64[0] = v48->i64[1];
    uint64_t v50 = (float *)v42[1];
    double v51 = v50[8];
    v52.i32[1] = v52.i32[3];
    if (*(double *)v49.i64 < v51 || *(double *)&v52.i64[1] < v51) {
      continue;
    }
    uint64_t v54 = v47 + 104 * v46;
    float v56 = *(float *)(v54 + 16);
    unint64_t v55 = (float *)(v54 + 16);
    *(float *)v52.i32 = fabsf(v56) + 0.000001;
    *(float *)v49.i32 = -*(float *)v52.i32;
    if (a4 == 1) {
      float v57 = *(float *)v52.i32;
    }
    else {
      float v57 = -*(float *)v52.i32;
    }
    uint64_t v80 = v55 + 2;
    if (a4 == -1)
    {
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a8, v50, v46, a5, (double *)v85.i64, (double *)v48->i64, v52, v49);
      long long v42 = v84;
      float v66 = v65 - *(float *)(v84[333] + 104 * v46 + 16);
      int j = v82;
      if (fabsf(v66) != INFINITY)
      {
        float v60 = *v55;
        uint64_t v67 = v47 + 104 * v46;
        int v69 = *(_DWORD *)(v67 + 28);
        int v68 = (unsigned int *)(v67 + 28);
        float v70 = *v80;
        if ((v69 & 0x7FFFFFFFu) > a5)
        {
          if (v70 > v66) {
            continue;
          }
LABEL_50:
          *uint64_t v80 = v66;
          *int v68 = a5 | 0x80000000;
          unsigned int v71 = &v85;
LABEL_51:
          uint64_t v72 = v47 + 104 * v46;
          *(float *)(v72 + 32) = v57 + v60;
          *(unsigned char *)(v72 + 64) = 0;
          *(int8x16_t *)(v72 + 72) = *v71;
          *(int8x16_t *)(v72 + 88) = *v48;
          continue;
        }
        if (v70 < v66) {
          goto LABEL_50;
        }
      }
    }
    else
    {
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a8, v50, v46, a5, (double *)v48->i64, (double *)v85.i64, v52, v49);
      long long v42 = v84;
      float v59 = v58 - *(float *)(v84[333] + 104 * v46 + 16);
      int j = v82;
      if (fabsf(v59) != INFINITY)
      {
        float v60 = *v55;
        uint64_t v61 = v47 + 104 * v46;
        int v63 = *(_DWORD *)(v61 + 28);
        int v62 = (unsigned int *)(v61 + 28);
        float v64 = *v80;
        if ((v63 & 0x7FFFFFFFu) > a5)
        {
          if (v64 > v59) {
            continue;
          }
LABEL_48:
          *uint64_t v80 = v59;
          *int v62 = a5;
          unsigned int v71 = v48;
          uint64_t v48 = &v85;
          goto LABEL_51;
        }
        if (v64 < v59) {
          goto LABEL_48;
        }
      }
    }
  }
}

void sub_22E90CB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

BOOL xgboost::FeatureInteractionConstraintHost::Query(xgboost::FeatureInteractionConstraintHost *this, int a2, unsigned int a3)
{
  unsigned int v8 = a3;
  if (!*((unsigned char *)this + 100)) {
    return 1;
  }
  uint64_t v4 = *((void *)this + 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 4) - v4) >> 3) <= a2
    || (unint64_t v5 = a2,
        uint64_t v6 = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>((void *)(v4 + 40 * a2), &v8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3) <= v5))
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
  }
  return v6 != 0;
}

void xgboost::tree::ColMaker::Builder::UpdateEnumeration(uint64_t a1, unsigned int a2, int a3, unsigned int a4, double *a5, uint64_t a6, void *a7, int8x16_t a8, int8x16_t a9, float a10)
{
  BOOL v13 = (float64x2_t *)(a6 + 104 * a2);
  double v14 = v13->f64[1];
  if (v14 != 0.0)
  {
    uint64_t v16 = a6 + 104 * a2;
    float v17 = *(float *)(v16 + 16);
    int v15 = (float *)(v16 + 16);
    if (v17 == a10) {
      goto LABEL_6;
    }
    uint64_t v20 = *(float **)(a1 + 8);
    double v21 = v20[8];
    if (v14 < v21) {
      goto LABEL_6;
    }
    std::vector<unsigned int>::pointer v22 = (float64x2_t *)a5;
    uint64_t v23 = (double *)(*(void *)(a1 + 2664) + 104 * a2);
    double v24 = v23[1] - v14;
    *a5 = *v23 - v13->f64[0];
    a5[1] = v24;
    if (v24 < v21) {
      goto LABEL_6;
    }
    unsigned __int32 v54 = a8.i32[0];
    unsigned __int32 v55 = a9.i32[0];
    std::string v26 = (float *)(a6 + 104 * a2 + 24);
    if (a3 != -1)
    {
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, v20, a2, a4, v13->f64, a5, a8, a9);
      float v28 = v27 - *(float *)(*(void *)(a1 + 2664) + 104 * a2 + 16);
      float v29 = *v15;
      float v30 = (float)(*v15 + a10) * 0.5;
      BOOL v31 = fabsf(v28) == INFINITY;
      if (v30 == a10)
      {
        a8.i32[0] = v54;
        a9.i32[0] = v55;
        if (!v31)
        {
          uint64_t v32 = a6 + 104 * a2;
          int v34 = *(_DWORD *)(v32 + 28);
          uint64_t v33 = (unsigned int *)(v32 + 28);
          float v35 = *v26;
          if ((v34 & 0x7FFFFFFFu) <= a4)
          {
            if (v35 < v28)
            {
LABEL_28:
              float *v26 = v28;
              *uint64_t v33 = a4;
LABEL_33:
              int8x16_t v52 = v13;
LABEL_37:
              uint64_t v53 = a6 + 104 * a2;
              *(float *)(v53 + 32) = v29;
              *(unsigned char *)(v53 + 64) = 0;
              *(float64x2_t *)(v53 + 72) = *v52;
              *(float64x2_t *)(v53 + 88) = *v22;
            }
          }
          else if (v35 <= v28)
          {
            goto LABEL_28;
          }
        }
      }
      else
      {
        a8.i32[0] = v54;
        a9.i32[0] = v55;
        if (!v31)
        {
          uint64_t v44 = a6 + 104 * a2;
          int v46 = *(_DWORD *)(v44 + 28);
          uint64_t v45 = (unsigned int *)(v44 + 28);
          float v47 = *v26;
          if ((v46 & 0x7FFFFFFFu) <= a4)
          {
            if (v47 >= v28) {
              goto LABEL_6;
            }
          }
          else if (v47 > v28)
          {
            goto LABEL_6;
          }
          float *v26 = v28;
          unsigned int *v45 = a4;
          float v29 = v30;
          goto LABEL_33;
        }
      }
LABEL_6:
      a8.i32[1] = a9.i32[0];
      *BOOL v13 = vaddq_f64(*v13, vcvtq_f64_f32(*(float32x2_t *)a8.i8));
      goto LABEL_7;
    }
    xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, v20, a2, a4, a5, v13->f64, a8, a9);
    float v37 = v36 - *(float *)(*(void *)(a1 + 2664) + 104 * a2 + 16);
    float v29 = *v15;
    float v38 = (float)(*v15 + a10) * 0.5;
    BOOL v39 = fabsf(v37) == INFINITY;
    if (v38 == a10)
    {
      a8.i32[0] = v54;
      a9.i32[0] = v55;
      if (v39) {
        goto LABEL_6;
      }
      uint64_t v40 = a6 + 104 * a2;
      int v42 = *(_DWORD *)(v40 + 28);
      int8x16_t v41 = (unsigned int *)(v40 + 28);
      float v43 = *v26;
      if ((v42 & 0x7FFFFFFFu) <= a4)
      {
        if (v43 >= v37) {
          goto LABEL_6;
        }
      }
      else if (v43 > v37)
      {
        goto LABEL_6;
      }
      float *v26 = v37;
      *int8x16_t v41 = a4 | 0x80000000;
    }
    else
    {
      a8.i32[0] = v54;
      a9.i32[0] = v55;
      if (v39) {
        goto LABEL_6;
      }
      uint64_t v48 = a6 + 104 * a2;
      int v50 = *(_DWORD *)(v48 + 28);
      int8x16_t v49 = (unsigned int *)(v48 + 28);
      float v51 = *v26;
      if ((v50 & 0x7FFFFFFFu) <= a4)
      {
        if (v51 >= v37) {
          goto LABEL_6;
        }
      }
      else if (v51 > v37)
      {
        goto LABEL_6;
      }
      float *v26 = v37;
      *int8x16_t v49 = a4 | 0x80000000;
      float v29 = v38;
    }
    int8x16_t v52 = v22;
    std::vector<unsigned int>::pointer v22 = v13;
    goto LABEL_37;
  }
  v13->f64[0] = v13->f64[0] + *(float *)a8.i32;
  v13->f64[1] = v14 + *(float *)a9.i32;
  int v15 = (float *)(a6 + 104 * a2 + 16);
LABEL_7:
  *int v15 = a10;
}

void xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(void *a1, float *a2, int a3, unsigned int a4, double *a5, double *a6, int8x16_t a7, int8x16_t a8)
{
  if (*a1 <= (unint64_t)a4) {
    std::terminate();
  }
  *(float *)v13.i32 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)a1, a3, a2, a5, a7, a8);
  float v14 = *(float *)v13.i32;
  float v16 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)a1, a3, a2, a6, v13, v15);
  xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)a1, a2, a5, v14);
  xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)a1, a2, a6, v16);
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

float xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight(uint64_t a1, int a2, float *a3, double *a4, int8x16_t a5, int8x16_t a6)
{
  double v6 = a4[1];
  a6.i64[0] = 0;
  BOOL v7 = v6 <= 0.0 || v6 < a3[8];
  if (!v7)
  {
    double v8 = *a4;
    float v9 = a3[10];
    double v10 = v9;
    BOOL v7 = *a4 < (float)-v9;
    double v11 = *a4 + v9;
    if (!v7) {
      double v11 = 0.0;
    }
    BOOL v12 = v8 <= v10;
    double v13 = v8 - v10;
    if (v12) {
      double v13 = v11;
    }
    *(double *)a6.i64 = -v13 / (v6 + a3[9]);
    float v14 = a3[11];
    if (v14 != 0.0)
    {
      *(double *)a5.i64 = v14;
      if (fabs(*(double *)a6.i64) > *(double *)a5.i64)
      {
        v15.f64[0] = NAN;
        v15.f64[1] = NAN;
        a6.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v15), a5, a6).u64[0];
      }
    }
  }
  float v16 = *(double *)a6.i64;
  if (a2 == 0x7FFFFFFF || !*(unsigned char *)(a1 + 48)) {
    return v16;
  }
  if (*(void *)(a1 + 16) <= (unint64_t)a2) {
    goto LABEL_21;
  }
  float result = *(float *)(*(void *)(a1 + 24) + 4 * a2);
  if (result > v16) {
    return result;
  }
  if (*(void *)(a1 + 32) <= (unint64_t)a2) {
LABEL_21:
  }
    std::terminate();
  float result = v16;
  if (*(float *)(*(void *)(a1 + 40) + 4 * a2) < v16) {
    return *(float *)(*(void *)(a1 + 40) + 4 * a2);
  }
  return result;
}

float xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight(uint64_t a1, float *a2, double *a3, float a4)
{
  double v4 = a3[1];
  float v5 = 0.0;
  if (v4 > 0.0)
  {
    if (a2[11] == 0.0 && !*(unsigned char *)(a1 + 48))
    {
      double v8 = *a3;
      float v9 = a2[10];
      double v10 = v9;
      if (*a3 <= v9)
      {
        double v12 = (float)-v9;
        double v11 = 0.0;
        if (v8 < v12) {
          double v11 = v8 + v10;
        }
      }
      else
      {
        double v11 = v8 - v10;
      }
      return v11 * v11 / (v4 + a2[9]);
    }
    else
    {
      float v6 = *a3;
      float v7 = v4;
      return -(float)((float)((float)(a4 * a4) * (float)(a2[9] + v7)) + (float)((float)(v6 + v6) * a4));
    }
  }
  return v5;
}

void xgboost::tree::ColMaker::Builder::InitNewNode(uint64_t a1, int **a2, float32x2_t **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  float v6 = *(uint64_t **)(a1 + 2640);
  float v7 = *(uint64_t **)(a1 + 2648);
  if (v6 != v7)
  {
    while (1)
    {
      unint64_t v8 = *(int *)(a5 + 12);
      long long v85 = 0u;
      long long v86 = 0u;
      uint64_t v87 = 0;
      memset(v88, 0, sizeof(v88));
      uint64_t v9 = *v6;
      uint64_t v10 = v6[1];
      unint64_t v11 = 0x4EC4EC4EC4EC4EC5 * ((v10 - *v6) >> 3);
      unint64_t v12 = v8 - v11;
      if (v8 > v11) {
        break;
      }
      if (v8 < v11)
      {
        uint64_t v21 = v9 + 104 * (int)v8;
        while (v10 != v21)
        {
          std::vector<unsigned int>::pointer v22 = *(void **)(v10 - 64);
          if (v22)
          {
            *(void *)(v10 - 56) = v22;
            operator delete(v22);
          }
          v10 -= 104;
        }
LABEL_21:
        v6[1] = v21;
      }
LABEL_22:
      v6 += 3;
      if (v6 == v7) {
        goto LABEL_23;
      }
    }
    uint64_t v13 = v6[2];
    if (0x4EC4EC4EC4EC4EC5 * ((v13 - v10) >> 3) < v12)
    {
      if ((v8 & 0x80000000) != 0) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v14 = 0x4EC4EC4EC4EC4EC5 * ((v13 - v9) >> 3);
      uint64_t v15 = 2 * v14;
      if (2 * v14 <= v8) {
        uint64_t v15 = v8;
      }
      if (v14 >= 0x13B13B13B13B13BLL) {
        unint64_t v16 = 0x276276276276276;
      }
      else {
        unint64_t v16 = v15;
      }
      std::exception_ptr v84 = v6 + 2;
      uint64_t v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::tree::ColMaker::ThreadEntry>>(v16);
      uint64_t v81 = &v80[104 * v11];
      uint64_t v82 = v81;
      unsigned int v83 = &v80[104 * v17];
      uint64_t v18 = &v80[104 * (int)v8];
      uint64_t v19 = v81 + 40;
      uint64_t v20 = 104 * (int)v8 - 104 * v11;
      do
      {
        *(_OWORD *)(v19 - 40) = v85;
        *((_DWORD *)v19 - 6) = v86;
        *((void *)v19 - 2) = *((void *)&v86 + 1);
        *((_DWORD *)v19 - 2) = v87;
        *((void *)v19 + 1) = 0;
        *((void *)v19 + 2) = 0;
        *(void *)uint64_t v19 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v19, 0, 0, 0);
        *(_OWORD *)(v19 + 24) = *(_OWORD *)&v88[1].__ptr_;
        *(_OWORD *)(v19 + 40) = *(_OWORD *)&v88[3].__ptr_;
        *((std::exception_ptr *)v19 + 7) = v88[5];
        v19 += 104;
        v20 -= 104;
      }
      while (v20);
      uint64_t v82 = v18;
      std::vector<xgboost::tree::ColMaker::ThreadEntry>::__swap_out_circular_buffer(v6, &v80);
      std::__split_buffer<xgboost::tree::ColMaker::ThreadEntry>::~__split_buffer((uint64_t)&v80);
      goto LABEL_22;
    }
    uint64_t v21 = v10 + 104 * v12;
    uint64_t v23 = v10 + 40;
    uint64_t v24 = 104 * (int)v8 - 104 * v11;
    do
    {
      *(_OWORD *)(v23 - 40) = v85;
      *(_DWORD *)(v23 - 24) = v86;
      *(void *)(v23 - 16) = *((void *)&v86 + 1);
      *(_DWORD *)(v23 - 8) = v87;
      *(void *)(v23 + 8) = 0;
      *(void *)(v23 + 16) = 0;
      *(void *)uint64_t v23 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)v23, 0, 0, 0);
      *(_OWORD *)(v23 + 24) = *(_OWORD *)&v88[1].__ptr_;
      *(_OWORD *)(v23 + 40) = *(_OWORD *)&v88[3].__ptr_;
      *(std::exception_ptr *)(v23 + 56) = v88[5];
      v23 += 104;
      v24 -= 104;
    }
    while (v24);
    goto LABEL_21;
  }
LABEL_23:
  unint64_t v25 = *(int *)(a5 + 12);
  long long v85 = 0u;
  long long v86 = 0u;
  uint64_t v87 = 0;
  memset(v88, 0, sizeof(v88));
  uint64_t v26 = *(void *)(a1 + 2672);
  uint64_t v27 = *(void *)(a1 + 2664);
  unint64_t v28 = 0x4EC4EC4EC4EC4EC5 * ((v26 - v27) >> 3);
  BOOL v29 = v25 >= v28;
  unint64_t v30 = v25 - v28;
  if (v25 <= v28)
  {
    uint64_t v43 = a4;
    int v42 = a2;
    if (!v29)
    {
      uint64_t v44 = v27 + 104 * (int)v25;
      while (v26 != v44)
      {
        uint64_t v45 = *(void **)(v26 - 64);
        if (v45)
        {
          *(void *)(v26 - 56) = v45;
          operator delete(v45);
        }
        v26 -= 104;
      }
      *(void *)(a1 + 2672) = v44;
    }
  }
  else
  {
    uint64_t v31 = *(void *)(a1 + 2680);
    if (0x4EC4EC4EC4EC4EC5 * ((v31 - v26) >> 3) >= v30)
    {
      uint64_t v46 = v26 + 104 * v30;
      uint64_t v47 = v26 + 40;
      uint64_t v48 = 104 * (int)v25 - 8 * ((v26 - v27) >> 3);
      do
      {
        *(_OWORD *)(v47 - 40) = v85;
        uint64_t v49 = *((void *)&v86 + 1);
        *(void *)(v47 - 24) = v86;
        *(void *)(v47 - 16) = v49;
        *(_DWORD *)(v47 - 8) = v87;
        *(void *)(v47 + 8) = 0;
        *(void *)(v47 + 16) = 0;
        *(void *)uint64_t v47 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)v47, 0, 0, 0);
        *(_OWORD *)(v47 + 24) = *(_OWORD *)&v88[1].__ptr_;
        *(_OWORD *)(v47 + 40) = *(_OWORD *)&v88[3].__ptr_;
        *(std::exception_ptr *)(v47 + 56) = v88[5];
        v47 += 104;
        v48 -= 104;
      }
      while (v48);
      *(void *)(a1 + 2672) = v46;
    }
    else
    {
      if ((v25 & 0x80000000) != 0) {
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v32 = 0x4EC4EC4EC4EC4EC5 * ((v31 - v27) >> 3);
      uint64_t v33 = 2 * v32;
      if (2 * v32 <= v25) {
        uint64_t v33 = v25;
      }
      if (v32 >= 0x13B13B13B13B13BLL) {
        unint64_t v34 = 0x276276276276276;
      }
      else {
        unint64_t v34 = v33;
      }
      std::exception_ptr v84 = (uint64_t *)(a1 + 2680);
      if (v34 > 0x276276276276276) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float v35 = (char *)operator new(104 * v34);
      uint64_t v36 = 104 * v28;
      uint64_t v80 = v35;
      uint64_t v81 = &v35[104 * v28];
      uint64_t v82 = v81;
      unsigned int v83 = &v35[104 * v34];
      float v37 = &v35[104 * (int)v25];
      float v38 = v81 + 40;
      uint64_t v39 = 104 * (int)v25 - v36;
      do
      {
        *(_OWORD *)(v38 - 40) = v85;
        uint64_t v40 = *((void *)&v86 + 1);
        *((void *)v38 - 3) = v86;
        *((void *)v38 - 2) = v40;
        *((_DWORD *)v38 - 2) = v87;
        *((void *)v38 + 1) = 0;
        *((void *)v38 + 2) = 0;
        *(void *)float v38 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v38, 0, 0, 0);
        long long v41 = *(_OWORD *)&v88[3].__ptr_;
        *(_OWORD *)(v38 + 24) = *(_OWORD *)&v88[1].__ptr_;
        *(_OWORD *)(v38 + 40) = v41;
        *((std::exception_ptr *)v38 + 7) = v88[5];
        v38 += 104;
        v39 -= 104;
      }
      while (v39);
      uint64_t v82 = v37;
      std::vector<xgboost::tree::ColMaker::NodeEntry>::__swap_out_circular_buffer((uint64_t *)(a1 + 2664), &v80);
      std::__split_buffer<xgboost::tree::ColMaker::ThreadEntry>::~__split_buffer((uint64_t)&v80);
    }
    uint64_t v43 = a4;
    int v42 = a2;
  }
  uint64_t v50 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v43 + 24))(v43);
  v88[0].__ptr_ = 0;
  v88[1].__ptr_ = (void *)850045863;
  memset(&v88[2], 0, 32);
  long long v89 = 0u;
  uint64_t v90 = 0;
  if (v50)
  {
    float v51 = *(unsigned int **)(a1 + 2616);
    int8x16_t v52 = *a3;
    do
    {
      unsigned int v54 = *v51++;
      unsigned int v53 = v54;
      if ((v54 & 0x80000000) == 0) {
        *(float64x2_t *)(**(void **)(a1 + 2640) + 104 * v53) = vaddq_f64(*(float64x2_t *)(**(void **)(a1 + 2640)+ 104 * v53), vcvtq_f64_f32(*v52));
      }
      ++v52;
      --v50;
    }
    while (v50);
  }
  dmlc::OMPException::Rethrow(v88);
  std::mutex::~mutex((std::mutex *)&v88[1]);
  std::exception_ptr::~exception_ptr(v88);
  unsigned __int32 v55 = *v42;
  float v56 = v42[1];
  if (*v42 != v56)
  {
    float v57 = *(uint64_t **)(a1 + 2640);
    double v58 = *(uint64_t **)(a1 + 2648);
    uint64_t v59 = *(void *)(a1 + 2664);
    do
    {
      int v60 = *v55;
      float64x2_t v61 = 0uLL;
      if (v57 != v58)
      {
        int v62 = v57;
        do
        {
          uint64_t v63 = *v62;
          v62 += 3;
          float64x2_t v61 = vaddq_f64(v61, *(float64x2_t *)(v63 + 104 * v60));
        }
        while (v62 != v58);
      }
      *(float64x2_t *)(v59 + 104 * v60) = v61;
      ++v55;
    }
    while (v55 != v56);
  }
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(a1 + 2712), (uint64_t)v88);
  float v66 = *v42;
  uint64_t v67 = v42[1];
  if (*v42 != v67)
  {
    uint64_t v68 = *(void *)(a1 + 2664);
    do
    {
      int v69 = *v66;
      int v70 = *(_DWORD *)(*(void *)(a5 + 160) + 20 * *v66) & 0x7FFFFFFF;
      *(float *)v71.i32 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v88, *(_DWORD *)(*(void *)(a5 + 160) + 20 * v69) & 0x7FFFFFFF, *(float **)(a1 + 8), (double *)(v68 + 104 * v69), v64, v65);
      uint64_t v72 = *(void *)(a1 + 2664) + 104 * v69;
      *(_DWORD *)(v72 + 20) = v71.i32[0];
      float v73 = *(float **)(a1 + 8);
      float v75 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v88, v70, v73, (double *)v72, v71, v74);
      *(float *)v64.i32 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)v88, v73, (double *)v72, v75);
      uint64_t v68 = *(void *)(a1 + 2664);
      *(_DWORD *)(v68 + 104 * v69 + 16) = v64.i32[0];
      ++v66;
    }
    while (v66 != v67);
  }
}

void sub_22E90D97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::exception_ptr a25)
{
}

void xgboost::tree::TreeEvaluator::AddSplit<false>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, float a6, float a7)
{
  if (*(unsigned char *)(a1 + 28))
  {
    int v7 = *(_DWORD *)(a1 + 24);
    *(void *)&long long v8 = __PAIR64__(a2, a3);
    *((void *)&v8 + 1) = __PAIR64__(a5, a4);
    float v9 = a6;
    float v10 = a7;
    long long v11 = xmmword_22EA1A8F0;
    int64x2_t v12 = vdupq_n_s64(1uLL);
    int v13 = 1;
    int v14 = v7;
    xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::Eval<xgboost::HostDeviceVector<float> *,xgboost::HostDeviceVector<float> *,xgboost::HostDeviceVector<int> *>(&v8, a1, a1 + 8, a1 + 16);
  }
}

void xgboost::common::ColumnSampler::Init(float *a1, std::vector<unsigned int>::size_type a2, __n128 *__c, float a4, float a5, float a6)
{
  std::vector<float>::__move_assign((uint64_t)(a1 + 10), __c);
  a1[16] = a5;
  a1[17] = a6;
  a1[18] = a4;
  if (!*(void *)a1) {
    _ZNSt3__115allocate_sharedB8ne180100IN7xgboost16HostDeviceVectorIjEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  xgboost::common::ColumnSampler::Reset((std::vector<unsigned int> ***)a1);
  long long v11 = *(std::vector<unsigned int> ***)a1;
  __x[0] = 0;
  std::vector<unsigned int>::resize(*v11, a2, __x);
  int64x2_t v12 = *(std::vector<unsigned int> ***)a1;
  uint64_t v13 = **(void **)a1;
  int v14 = *(_DWORD **)v13;
  uint64_t v15 = *(_DWORD **)(v13 + 8);
  if (v14 != v15)
  {
    int v16 = 0;
    do
      *v14++ = v16++;
    while (v14 != v15);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v20 = v12;
  uint64_t v21 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xgboost::common::ColumnSampler::ColSample((uint64_t *)&v20, __x, a1[17]);
  long long v18 = *(_OWORD *)__x;
  memset(__x, 0, sizeof(__x));
  uint64_t v19 = (std::__shared_weak_count *)*((void *)a1 + 1);
  *(_OWORD *)a1 = v18;
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    if (*(void *)&__x[2]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__x[2]);
    }
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_22E90DBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    float v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    int v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    float v9 = (int *)&v6[4 * v8];
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<unsigned int>::pointer end = this->__end_;
    int64x2_t v12 = v7;
    if (end != this->__begin_)
    {
      int64x2_t v12 = v7;
      do
      {
        int v13 = *--end;
        *--int64x2_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void dmlc::LogCheckFormat<unsigned long long,unsigned long>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E90DDF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void dmlc::LogCheckFormat<int,xgboost::tree::TrainParam::SamplingMethod>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E90DFC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::common::ColumnSampler::Reset(std::vector<unsigned int> ***this)
{
  uint64_t v1 = (xgboost::common::ColumnSampler *)this;
  uint64_t v2 = *this;
  std::vector<unsigned int>::value_type __x = 0;
  std::vector<unsigned int>::resize(*v2, 0, &__x);
  unint64_t v3 = (void *)*((void *)v1 + 3);
  uint64_t v1 = (xgboost::common::ColumnSampler *)((char *)v1 + 24);
  std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy((uint64_t)v1 - 8, v3);
  *((void *)v1 - 1) = v1;
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
}

__n128 std::vector<float>::__move_assign(uint64_t a1, __n128 *a2)
{
  double v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void _ZNSt3__115allocate_sharedB8ne180100IN7xgboost16HostDeviceVectorIjEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  uint64_t v0 = operator new(0x20uLL);
  _ZNSt3__120__shared_ptr_emplaceIN7xgboost16HostDeviceVectorIjEENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v0);
}

void sub_22E90E0D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_emplaceIN7xgboost16HostDeviceVectorIjEENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26E247F88;
  xgboost::HostDeviceVector<unsigned int>::HostDeviceVector();
}

void sub_22E90E140(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::HostDeviceVector<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E247F88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::HostDeviceVector<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E247F88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

void std::__shared_ptr_emplace<xgboost::HostDeviceVector<unsigned int>>::__on_zero_shared()
{
}

uint64_t std::vector<xgboost::tree::ColMaker::ThreadEntry>::__init_with_size[abi:ne180100]<xgboost::tree::ColMaker::ThreadEntry*,xgboost::tree::ColMaker::ThreadEntry*>(uint64_t result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x276276276276277) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    float v6 = (void *)result;
    int v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::tree::ColMaker::ThreadEntry>>(a4);
    uint64_t v8 = v7;
    void *v6 = v7;
    v6[1] = v7;
    void v6[2] = &v7[104 * v9];
    long long v18 = v7;
    uint64_t v19 = v7;
    v16[0] = v6 + 2;
    v16[1] = &v18;
    v16[2] = &v19;
    char v17 = 0;
    if (a2 != a3)
    {
      float v10 = v7;
      do
      {
        long long v11 = *a2;
        *((_DWORD *)v10 + 4) = *((_DWORD *)a2 + 4);
        *(_OWORD *)float v10 = v11;
        uint64_t v12 = *((void *)a2 + 3);
        int v13 = *((_DWORD *)a2 + 8);
        *((void *)v10 + 5) = 0;
        *((_DWORD *)v10 + 8) = v13;
        *((void *)v10 + 3) = v12;
        *((void *)v10 + 6) = 0;
        *((void *)v10 + 7) = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)v10 + 5, *((const void **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2);
        long long v14 = a2[4];
        long long v15 = a2[5];
        *((void *)v10 + 12) = *((void *)a2 + 12);
        *((_OWORD *)v10 + 4) = v14;
        *((_OWORD *)v10 + 5) = v15;
        float v10 = v19 + 104;
        v19 += 104;
        a2 = (long long *)((char *)a2 + 104);
      }
      while (a2 != a3);
      uint64_t v8 = v10;
    }
    char v17 = 1;
    __n128 result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::ColMaker::ThreadEntry>,xgboost::tree::ColMaker::ThreadEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
    v6[1] = v8;
  }
  return result;
}

void sub_22E90E300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::tree::ColMaker::ThreadEntry>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a1);
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    __n128 result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22E90E3D4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::ColMaker::ThreadEntry>,xgboost::tree::ColMaker::ThreadEntry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 104)
    {
      int64_t v5 = *(void **)(i - 64);
      if (v5)
      {
        *(void *)(i - 56) = v5;
        operator delete(v5);
      }
    }
  }
  return a1;
}

uint64_t std::__split_buffer<std::vector<xgboost::tree::ColMaker::ThreadEntry>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    double v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    float v6 = v4;
    std::vector<xgboost::tree::ColMaker::ThreadEntry>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::vector<xgboost::tree::ColMaker::ThreadEntry>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 104;
      long long v6 = *(_OWORD *)(v3 - 104);
      *(_DWORD *)(v4 - 88) = *(_DWORD *)(v3 - 88);
      *(_OWORD *)(v4 - 104) = v6;
      uint64_t v7 = *(void *)(v3 - 80);
      *(_DWORD *)(v4 - 72) = *(_DWORD *)(v3 - 72);
      *(void *)(v4 - 80) = v7;
      *(void *)(v4 - 56) = 0;
      *(void *)(v4 - 48) = 0;
      *(void *)(v4 - 64) = 0;
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(void *)(v4 - 48) = *(void *)(v3 - 48);
      *(void *)(v3 - 64) = 0;
      *(void *)(v3 - 56) = 0;
      *(void *)(v3 - 48) = 0;
      long long v8 = *(_OWORD *)(v3 - 40);
      long long v9 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v9;
      *(_OWORD *)(v4 - 40) = v8;
      v4 -= 104;
      v3 -= 104;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v10 = *result;
  uint64_t *result = v5;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<xgboost::tree::ColMaker::ThreadEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 104;
    uint64_t v4 = *(void **)(v2 - 64);
    if (v4)
    {
      *(void *)(v2 - 56) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 104;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::vector<xgboost::tree::ColMaker::NodeEntry>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 104;
      long long v6 = *(_OWORD *)(v3 - 104);
      *(void *)(v4 - 88) = *(void *)(v3 - 88);
      *(_OWORD *)(v4 - 104) = v6;
      uint64_t v7 = *(void *)(v3 - 80);
      *(_DWORD *)(v4 - 72) = *(_DWORD *)(v3 - 72);
      *(void *)(v4 - 80) = v7;
      *(void *)(v4 - 56) = 0;
      *(void *)(v4 - 48) = 0;
      *(void *)(v4 - 64) = 0;
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(void *)(v4 - 48) = *(void *)(v3 - 48);
      *(void *)(v3 - 64) = 0;
      *(void *)(v3 - 56) = 0;
      *(void *)(v3 - 48) = 0;
      long long v8 = *(_OWORD *)(v3 - 40);
      long long v9 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v9;
      *(_OWORD *)(v4 - 40) = v8;
      v4 -= 104;
      v3 -= 104;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v10 = *result;
  uint64_t *result = v5;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void xgboost::common::ColumnSampler::GetFeatureSet(xgboost::common::ColumnSampler *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v21 = a2;
  float v5 = *((float *)this + 16);
  if (v5 == 1.0 && *((float *)this + 18) == 1.0)
  {
    long long v6 = (uint64_t *)*((void *)this + 1);
    *a3 = *(void *)this;
    goto LABEL_18;
  }
  for (uint64_t i = (uint64_t *)*((void *)this + 3); i; uint64_t i = (uint64_t *)*i)
  {
    int v8 = *((_DWORD *)i + 8);
    if (v8 <= a2)
    {
      if (v8 >= a2) {
        goto LABEL_16;
      }
      ++i;
    }
  }
  long long v9 = (std::__shared_weak_count *)*((void *)this + 1);
  uint64_t v18 = *(void *)this;
  uint64_t v19 = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    float v5 = *((float *)this + 16);
  }
  xgboost::common::ColumnSampler::ColSample(&v18, &v20, v5);
  std::vector<unsigned int>::pointer v22 = &v21;
  uint64_t v10 = std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 2, &v21, (uint64_t)&std::piecewise_construct, &v22);
  long long v11 = v20;
  long long v20 = 0uLL;
  uint64_t v12 = (std::__shared_weak_count *)v10[6];
  *(_OWORD *)(v10 + 5) = v11;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
LABEL_16:
  if (*((float *)this + 18) == 1.0)
  {
    *(void *)&long long v20 = &v21;
    int v13 = std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 2, &v21, (uint64_t)&std::piecewise_construct, (_DWORD **)&v20);
    *a3 = v13[5];
    long long v6 = v13[6];
LABEL_18:
    a3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
    }
    return;
  }
  *(void *)&long long v20 = &v21;
  long long v14 = std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 2, &v21, (uint64_t)&std::piecewise_construct, (_DWORD **)&v20);
  long long v15 = (std::__shared_weak_count *)v14[6];
  int v16 = v14[5];
  char v17 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xgboost::common::ColumnSampler::ColSample((uint64_t *)&v16, a3, *((float *)this + 18));
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_22E90E858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        long long v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    long long v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::Eval<xgboost::HostDeviceVector<float> *,xgboost::HostDeviceVector<float> *,xgboost::HostDeviceVector<int> *>(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*((_DWORD *)a1 + 15) & 0x80000000) != 0)
  {
    long long v6 = *a1;
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v11 = a3;
    uint64_t v12 = a2;
    uint64_t v10 = a4;
    uint64_t v4 = *((void *)a1 + 5);
    int v5 = *((_DWORD *)a1 + 14);
    v13[0] = &v6;
    v13[1] = &v12;
    v13[2] = a1;
    void v13[3] = &v11;
    _OWORD v13[4] = &v10;
    xgboost::common::ParallelFor<unsigned long,void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1}>(v4, v5, 2, 0, (uint64_t)v13);
  }
  else
  {
    long long v8 = *a1;
    uint64_t v9 = *((void *)a1 + 2);
    xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCUDA<(void *)0,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>();
  }
}

void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCUDA<(void *)0,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/transform.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
  std::ostream::operator<<();
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_22E90EA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::ParallelFor<unsigned long,void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1}>(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v31 = 1;
  int v32 = a2;
  if (a2 < 1) {
    dmlc::LogCheckFormat<int,int>();
  }
  v33.__ptr_ = 0;
  v34.__m_.__sig = 850045863;
  memset(v34.__m_.__opaque, 0, sizeof(v34.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        for (uint64_t i = 0; i != a1; ++i)
        {
          long long v8 = *(_OWORD *)(a5 + 16);
          v29[0] = *(_OWORD *)a5;
          v29[1] = v8;
          uint64_t v30 = *(void *)(a5 + 32);
          dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v33, (uint64_t)v29, i);
        }
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          for (uint64_t j = 0; j != a1; ++j)
          {
            long long v10 = *(_OWORD *)(a5 + 16);
            v25[0] = *(_OWORD *)a5;
            v25[1] = v10;
            uint64_t v26 = *(void *)(a5 + 32);
            dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v33, (uint64_t)v25, j);
          }
        }
      }
      else if (a1)
      {
        for (uint64_t k = 0; k != a1; ++k)
        {
          long long v16 = *(_OWORD *)(a5 + 16);
          v27[0] = *(_OWORD *)a5;
          v27[1] = v16;
          uint64_t v28 = *(void *)(a5 + 32);
          dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v33, (uint64_t)v27, k);
        }
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          for (uint64_t m = 0; m != a1; ++m)
          {
            long long v12 = *(_OWORD *)(a5 + 16);
            v21[0] = *(_OWORD *)a5;
            v21[1] = v12;
            uint64_t v22 = *(void *)(a5 + 32);
            dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v33, (uint64_t)v21, m);
          }
        }
      }
      else if (a1)
      {
        for (uint64_t n = 0; n != a1; ++n)
        {
          long long v18 = *(_OWORD *)(a5 + 16);
          v23[0] = *(_OWORD *)a5;
          v23[1] = v18;
          uint64_t v24 = *(void *)(a5 + 32);
          dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v33, (uint64_t)v23, n);
        }
      }
      break;
    case 3:
      if (a1)
      {
        for (iuint64_t i = 0; ii != a1; ++ii)
        {
          long long v14 = *(_OWORD *)(a5 + 16);
          v19[0] = *(_OWORD *)a5;
          v19[1] = v14;
          uint64_t v20 = *(void *)(a5 + 32);
          dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v33, (uint64_t)v19, ii);
        }
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v33);
  std::mutex::~mutex(&v34);
  std::exception_ptr::~exception_ptr(&v33);
}

void sub_22E90ED54(_Unwind_Exception *exception_object)
{
}

float *dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(float **)a2;
  uint64_t v4 = ***(unint64_t ****)(a2 + 8);
  unint64_t v6 = *v4;
  unint64_t v5 = v4[1];
  v19[0] = (uint64_t)(v5 - v6) >> 2;
  v19[1] = v6;
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v5 == 0;
  }
  if (!v7) {
    goto LABEL_17;
  }
  long long v8 = ***(unint64_t ****)(a2 + 24);
  unint64_t v10 = *v8;
  unint64_t v9 = v8[1];
  v18[0] = (uint64_t)(v9 - v10) >> 2;
  v18[1] = v10;
  BOOL v11 = v10 || v9 == 0;
  if (!v11
    || ((long long v12 = ***(unint64_t ****)(a2 + 32),
         unint64_t v14 = *v12,
         unint64_t v13 = v12[1],
         v17[0] = (uint64_t)(v13 - v14) >> 2,
         (v17[1] = v14) == 0)
      ? (BOOL v15 = v13 == 0)
      : (BOOL v15 = 1),
        !v15))
  {
LABEL_17:
    std::terminate();
  }
  return xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}::operator()(v3, a3, v19, v18, v17);
}

float *xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}::operator()(float *result, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5 = *((int *)result + 1);
  unint64_t v6 = *a3;
  if (*a3 <= v5) {
    goto LABEL_13;
  }
  unint64_t v7 = *(int *)result;
  if (v6 <= v7) {
    goto LABEL_13;
  }
  unint64_t v8 = a3[1];
  unint64_t v9 = (float *)(v8 + 4 * v7);
  *unint64_t v9 = *(float *)(v8 + 4 * v5);
  unint64_t v10 = *a4;
  if (*a4 <= v5) {
    goto LABEL_13;
  }
  if (v10 <= v7) {
    goto LABEL_13;
  }
  unint64_t v11 = a4[1];
  long long v12 = (float *)(v11 + 4 * v7);
  float *v12 = *(float *)(v11 + 4 * v5);
  unint64_t v13 = *((int *)result + 2);
  if (v6 <= v13
    || (unint64_t v14 = (float *)(v8 + 4 * v13), *unint64_t v14 = *(float *)(v8 + 4 * v5), v10 <= v13)
    || (int v15 = *(_DWORD *)(v11 + 4 * v5),
        long long v16 = (float *)(v11 + 4 * v13),
        *(_DWORD *)long long v16 = v15,
        unint64_t v17 = *((unsigned int *)result + 3),
        *a5 <= v17))
  {
LABEL_13:
    std::terminate();
  }
  float v18 = (float)(result[4] + result[5]) * 0.5;
  int v19 = *(_DWORD *)(a5[1] + 4 * v17);
  if ((v19 & 0x80000000) == 0)
  {
    if (!v19) {
      return result;
    }
    unint64_t v9 = v12;
    long long v16 = v14;
  }
  *unint64_t v9 = v18;
  float *v16 = v18;
  return result;
}

void xgboost::tree::ColMaker::Builder::~Builder(void **this)
{
  *this = &unk_26E247F48;
  char v2 = this + 343;
  if (*((char *)this + 2839) < 0) {
    operator delete(this[352]);
  }
  uint64_t v3 = this + 349;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 346;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  xgboost::HostDeviceVector<int>::~HostDeviceVector();
}

uint64_t xgboost::linear::__dmlc_registry_file_tag_updater_shotgun__(xgboost::linear *this)
{
  return 0;
}

void xgboost::linear::ShotgunUpdater::~ShotgunUpdater(xgboost::linear::ShotgunUpdater *this)
{
  *(void *)this = &unk_26E2480D0;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E2480D0;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::linear::ShotgunUpdater::LoadConfig(xgboost::linear::ShotgunUpdater *this, const xgboost::Json *a2)
{
  uint64_t v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_train_param");
  uint64_t v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::linear::LinearTrainParam>(v4, (xgboost::linear::ShotgunUpdater *)((char *)this + 16), &v7);
  unint64_t v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E90F390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::linear::ShotgunUpdater::SaveConfig(xgboost::linear::ShotgunUpdater *this, xgboost::Json *a2)
{
  xgboost::ToJson<xgboost::linear::LinearTrainParam>((xgboost::linear::ShotgunUpdater *)((char *)this + 16), v4);
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_train_param");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E90F460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

uint64_t xgboost::linear::ShotgunUpdater::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::linear::LinearTrainParam *)(a1 + 16), a2, v9);
  unint64_t v10 = (void **)v9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v3 = (xgboost::linear::FeatureSelector *)*(unsigned int *)(a1 + 32);
  if (v3 >= 2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/linear/updater_shotgun.cc");
    unint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Unsupported feature selector for shotgun updater.\n", 50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Supported options are: {cyclic, shuffle}", 40);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    uint64_t v3 = (xgboost::linear::FeatureSelector *)*(unsigned int *)(a1 + 32);
  }
  uint64_t v7 = xgboost::linear::FeatureSelector::Create(v3);
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v7;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_22E90F588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void xgboost::linear::ShotgunUpdater::Update(uint64_t a1, uint64_t *a2, uint64_t (***a3)(void), uint64_t a4, double a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v9 = *a2;
  __n128 v11 = (__n128)vcvtq_f64_f32(*(float32x2_t *)(a1 + 24));
  __n128 v10 = (__n128)vmulq_n_f64((float64x2_t)v11, a5);
  v11.n128_u64[0] = (unint64_t)vcvt_f32_f64((float64x2_t)v10);
  *(void *)(a1 + 36) = v11.n128_u64[0];
  uint64_t v12 = *(unsigned int *)(*(void *)(a4 + 152) + 8);
  if ((int)v12 <= 0)
  {
    v10.n128_u32[0] = v11.n128_u32[1];
    uint64_t v17 = v9;
  }
  else
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      v10.n128_f64[0] = xgboost::linear::GetBiasGradientParallel(i, v12, *a2, a3, 1);
      v10.n128_f64[0] = -v10.n128_f64[0] / v11.n128_f64[0] * *(float *)(a1 + 20);
      v10.n128_f32[0] = v10.n128_f64[0];
      uint64_t v14 = *(void *)(a4 + 160)
          + 4 * (*(_DWORD *)(*(void *)(a4 + 152) + 8) * *(_DWORD *)(*(void *)(a4 + 152) + 4));
      *(float *)(v14 + 4 * i) = *(float *)(v14 + 4 * i) + v10.n128_f32[0];
      uint64_t v15 = *a2;
      LODWORD(v19[0]) = i;
      LODWORD(v18) = v12;
      LODWORD(v22.__ptr_) = v10.n128_u32[0];
      uint64_t v20 = v15;
      if (v10.n128_f32[0] != 0.0)
      {
        unsigned int v16 = *(_DWORD *)(**a3)(a3);
        v23.__ptr_ = &v20;
        uint64_t v24 = &v18;
        unint64_t v25 = v19;
        uint64_t v26 = &v22;
        xgboost::common::ParallelFor<unsigned int,xgboost::linear::UpdateBiasResidualParallel(int,int,float,std::vector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,int)::{lambda#1}>(v16, 1, 2, 0, (uint64_t ***)&v23);
      }
    }
    uint64_t v17 = *a2;
    v11.n128_u32[0] = *(_DWORD *)(a1 + 36);
    v10.n128_u32[0] = *(_DWORD *)(a1 + 40);
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t (***)(void), void, __n128, __n128))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a4, v17, a3, 0, v10, v11);
  ((void (*)(uint64_t *__return_ptr, uint64_t (***)(void)))(*a3)[10])(&v20, a3);
  v19[0] = v20;
  v19[1] = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(&v18, 0);
}

void sub_22E90FB08()
{
}

void sub_22E90FB14()
{
}

void sub_22E90FB20(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22E90FB28()
{
}

void sub_22E90FB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::exception_ptr a20)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

uint64_t dmlc::Registry<xgboost::LinearUpdaterReg>::~Registry(uint64_t a1)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 127) < 0) {
          operator delete(*(void **)(v5 + 104));
        }
        std::__function::__value_func<xgboost::LinearUpdater * ()(void)>::~__value_func[abi:ne180100]((void *)(v5 + 72));
        uint64_t v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x1032C40EA5FD255);
        uint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  char v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t xgboost::LinearUpdater::Create(uint64_t a1, uint64_t a2)
{
  dmlc::Registry<xgboost::LinearUpdaterReg>::Get();
  dmlc::Registry<xgboost::LinearUpdaterReg>::Get();
  unint64_t v4 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)&qword_26AD72888, (const void **)a1);
  if (v4 == &qword_26AD72890 || (uint64_t v5 = v4[7]) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/linear/linear_updater.cc");
    uint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    __n128 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Unknown linear updater ", 23);
    int v11 = *(char *)(a1 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (const void *)a1;
    }
    else {
      uint64_t v12 = *(const void **)a1;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
    __break(1u);
LABEL_12:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v6 = *(void *)(v5 + 96);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
  *(void *)(result + 8) = a2;
  return result;
}

void sub_22E90FD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::InitilizeHistByZeroes<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void xgboost::common::InitilizeHistByZeroes<double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

float xgboost::common::IncrementHist<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (2 * a4 > (unint64_t)(2 * a3))
  {
    uint64_t v4 = 2 * a4 - 2 * a3;
    uint64_t v5 = (float *)(*(void *)(a1 + 8) + 8 * a3);
    uint64_t v6 = (float *)(*(void *)(a2 + 8) + 8 * a3);
    do
    {
      float v7 = *v6++;
      float result = v7 + *v5;
      *v5++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

double xgboost::common::IncrementHist<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (2 * a4 > (unint64_t)(2 * a3))
  {
    uint64_t v4 = 2 * a4 - 2 * a3;
    uint64_t v5 = (double *)(*(void *)(a1 + 8) + 16 * a3);
    uint64_t v6 = (double *)(*(void *)(a2 + 8) + 16 * a3);
    do
    {
      double v7 = *v6++;
      double result = v7 + *v5;
      *v5++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

float xgboost::common::CopyHist<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (2 * a4 > (unint64_t)(2 * a3))
  {
    uint64_t v4 = 2 * a4 - 2 * a3;
    uint64_t v5 = (float *)(*(void *)(a1 + 8) + 8 * a3);
    uint64_t v6 = (float *)(*(void *)(a2 + 8) + 8 * a3);
    do
    {
      float v7 = *v6++;
      float result = v7;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

double xgboost::common::CopyHist<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (2 * a4 > (unint64_t)(2 * a3))
  {
    uint64_t v4 = 2 * a4 - 2 * a3;
    uint64_t v5 = (double *)(*(void *)(a1 + 8) + 16 * a3);
    uint64_t v6 = (double *)(*(void *)(a2 + 8) + 16 * a3);
    do
    {
      double v7 = *v6++;
      double result = v7;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

float xgboost::common::SubtractionHist<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (2 * a5 > (unint64_t)(2 * a4))
  {
    uint64_t v5 = 2 * a5 - 2 * a4;
    uint64_t v6 = (float *)(*(void *)(a1 + 8) + 8 * a4);
    double v7 = (float *)(*(void *)(a3 + 8) + 8 * a4);
    unint64_t v8 = (float *)(*(void *)(a2 + 8) + 8 * a4);
    do
    {
      float v9 = *v8++;
      float v10 = v9;
      float v11 = *v7++;
      float result = v10 - v11;
      *v6++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

double xgboost::common::SubtractionHist<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (2 * a5 > (unint64_t)(2 * a4))
  {
    uint64_t v5 = 2 * a5 - 2 * a4;
    uint64_t v6 = (double *)(*(void *)(a1 + 8) + 16 * a4);
    double v7 = (double *)(*(void *)(a3 + 8) + 16 * a4);
    unint64_t v8 = (double *)(*(void *)(a2 + 8) + 16 * a4);
    do
    {
      double v9 = *v8++;
      double v10 = v9;
      double v11 = *v7++;
      double result = v10 - v11;
      *v6++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void xgboost::common::GHistBuilder<float>::BuildHist<true>(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4, void *a5)
{
  uint64_t v8 = a3[1];
  unint64_t v9 = (v8 - *a3) >> 3;
  if (*(void *)(*a3 + 8 * (v9 - 1)) - *(void *)*a3 == v9 - 1)
  {
    long long v23 = *(_OWORD *)a3;
    uint64_t v24 = a3[2];
    uint64_t v10 = a5[1];
    v22[0] = *a5;
    v22[1] = v10;
    double v11 = (uint64_t *)&v23;
    uint64_t v12 = v22;
  }
  else
  {
    if (v9 >= 0x12) {
      unint64_t v9 = 18;
    }
    uint64_t v13 = v8 - 8 * v9;
    v20[0] = *a3;
    v20[1] = v13;
    int v21 = -1;
    uint64_t v14 = a5[1];
    v19[0] = *a5;
    v19[1] = v14;
    xgboost::common::BuildHistDispatch<float,true,true>(a2, v20, a4, (uint64_t)v19);
    v17[0] = v13;
    v17[1] = v8;
    int v18 = -1;
    uint64_t v15 = a5[1];
    v16[0] = *a5;
    v16[1] = v15;
    double v11 = v17;
    uint64_t v12 = v16;
  }
  xgboost::common::BuildHistDispatch<float,false,true>(a2, v11, a4, (uint64_t)v12);
}

void xgboost::common::BuildHistDispatch<float,false,true>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a3[19];
  int v5 = *((_DWORD *)a3 + 18);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        uint64_t v36 = *a2;
        uint64_t v37 = a2[1];
        uint64_t v38 = v37 - *a2;
        if (v37 != *a2)
        {
          uint64_t v39 = 0;
          uint64_t v40 = *(void *)(a4 + 8);
          uint64_t v41 = *a1;
          uint64_t v42 = a3[3];
          uint64_t v43 = *a3;
          unint64_t v44 = v38 >> 3;
          if (v44 <= 1) {
            unint64_t v44 = 1;
          }
          do
          {
            uint64_t v45 = *(void *)(v36 + 8 * v39);
            uint64_t v46 = (uint64_t *)(v43 + 8 * (v45 - v4));
            uint64_t v47 = *v46;
            uint64_t v48 = v46[1] - *v46;
            if (v48)
            {
              uint64_t v49 = (int *)(v42 + 4 * v47);
              do
              {
                int v50 = *v49++;
                *(float *)(v40 + 4 * (2 * v50)) = *(float *)(v41 + 8 * v45)
                                                                + *(float *)(v40 + 4 * (2 * v50));
                *(float *)(v40 + 4 * ((2 * v50) | 1u)) = *(float *)(v41 + 4 * ((2 * v45) | 1))
                                                         + *(float *)(v40 + 4 * ((2 * v50) | 1u));
                --v48;
              }
              while (v48);
            }
            ++v39;
          }
          while (v39 != v44);
        }
        break;
      case 2:
        uint64_t v51 = *a2;
        uint64_t v52 = a2[1];
        uint64_t v53 = v52 - *a2;
        if (v52 != *a2)
        {
          uint64_t v54 = 0;
          uint64_t v55 = *(void *)(a4 + 8);
          uint64_t v56 = *a1;
          uint64_t v57 = a3[3];
          uint64_t v58 = *a3;
          unint64_t v59 = v53 >> 3;
          if (v59 <= 1) {
            unint64_t v59 = 1;
          }
          do
          {
            uint64_t v60 = *(void *)(v51 + 8 * v54);
            float64x2_t v61 = (uint64_t *)(v58 + 8 * (v60 - v4));
            uint64_t v62 = *v61;
            uint64_t v63 = v61[1] - *v61;
            if (v63)
            {
              int8x16_t v64 = (unsigned __int16 *)(v57 + 2 * v62);
              do
              {
                unsigned int v65 = *v64++;
                *(float *)(v55 + 8 * v65) = *(float *)(v56 + 8 * v60) + *(float *)(v55 + 8 * v65);
                *(float *)(v55 + 4 * ((2 * v65) | 1)) = *(float *)(v56 + 4 * ((2 * v60) | 1))
                                                        + *(float *)(v55 + 4 * ((2 * v65) | 1));
                --v63;
              }
              while (v63);
            }
            ++v54;
          }
          while (v54 != v59);
        }
        break;
      case 1:
        uint64_t v6 = *a2;
        uint64_t v7 = a2[1];
        uint64_t v8 = v7 - *a2;
        if (v7 != *a2)
        {
          uint64_t v9 = 0;
          uint64_t v10 = *(void *)(a4 + 8);
          uint64_t v11 = *a1;
          uint64_t v12 = a3[3];
          uint64_t v13 = *a3;
          unint64_t v14 = v8 >> 3;
          if (v14 <= 1) {
            unint64_t v14 = 1;
          }
          do
          {
            uint64_t v15 = *(void *)(v6 + 8 * v9);
            unsigned int v16 = (uint64_t *)(v13 + 8 * (v15 - v4));
            uint64_t v17 = *v16;
            uint64_t v18 = v16[1] - *v16;
            if (v18)
            {
              int v19 = (unsigned __int8 *)(v12 + v17);
              do
              {
                unsigned int v20 = *v19++;
                *(float *)(v10 + 8 * v20) = *(float *)(v11 + 8 * v15) + *(float *)(v10 + 8 * v20);
                *(float *)(v10 + 4 * ((2 * v20) | 1)) = *(float *)(v11 + 4 * ((2 * v15) | 1))
                                                        + *(float *)(v10 + 4 * ((2 * v20) | 1));
                --v18;
              }
              while (v18);
            }
            ++v9;
          }
          while (v9 != v14);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v103);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        uint64_t v67 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v103);
        uint64_t v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)": ", 2);
        int v69 = (dmlc::LogMessageFatal *)&v103;
LABEL_58:
        dmlc::LogMessageFatal::~LogMessageFatal(v69);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        uint64_t v70 = *a2;
        uint64_t v71 = a2[1];
        uint64_t v72 = v71 - *a2;
        if (v71 != *a2)
        {
          uint64_t v73 = 0;
          uint64_t v74 = *(void *)(a4 + 8);
          uint64_t v75 = *a1;
          uint64_t v76 = *a3;
          uint64_t v77 = a3[3];
          unint64_t v78 = v72 >> 3;
          if (v78 <= 1) {
            unint64_t v78 = 1;
          }
          do
          {
            uint64_t v79 = *(void *)(v70 + 8 * v73);
            uint64_t v80 = (uint64_t *)(v76 + 8 * v79);
            uint64_t v81 = *v80;
            uint64_t v82 = v80[1] - *v80;
            if (v82)
            {
              unsigned int v83 = (int *)(v77 + 4 * v81);
              do
              {
                int v84 = *v83++;
                *(float *)(v74 + 4 * (2 * v84)) = *(float *)(v75 + 8 * v79)
                                                                + *(float *)(v74 + 4 * (2 * v84));
                *(float *)(v74 + 4 * ((2 * v84) | 1u)) = *(float *)(v75 + 4 * ((2 * v79) | 1))
                                                         + *(float *)(v74 + 4 * ((2 * v84) | 1u));
                --v82;
              }
              while (v82);
            }
            ++v73;
          }
          while (v73 != v78);
        }
        break;
      case 2:
        uint64_t v85 = *a2;
        uint64_t v86 = a2[1];
        uint64_t v87 = v86 - *a2;
        if (v86 != *a2)
        {
          uint64_t v88 = 0;
          uint64_t v89 = *(void *)(a4 + 8);
          uint64_t v90 = *a1;
          uint64_t v91 = *a3;
          uint64_t v92 = a3[3];
          unint64_t v93 = v87 >> 3;
          if (v93 <= 1) {
            unint64_t v93 = 1;
          }
          do
          {
            uint64_t v94 = *(void *)(v85 + 8 * v88);
            uint64_t v95 = (uint64_t *)(v91 + 8 * v94);
            uint64_t v96 = *v95;
            uint64_t v97 = v95[1] - *v95;
            if (v97)
            {
              uint64_t v98 = (unsigned __int16 *)(v92 + 2 * v96);
              do
              {
                unsigned int v99 = *v98++;
                *(float *)(v89 + 8 * v99) = *(float *)(v90 + 8 * v94) + *(float *)(v89 + 8 * v99);
                *(float *)(v89 + 4 * ((2 * v99) | 1)) = *(float *)(v90 + 4 * ((2 * v94) | 1))
                                                        + *(float *)(v89 + 4 * ((2 * v99) | 1));
                --v97;
              }
              while (v97);
            }
            ++v88;
          }
          while (v88 != v93);
        }
        break;
      case 1:
        uint64_t v21 = *a2;
        uint64_t v22 = a2[1];
        uint64_t v23 = v22 - *a2;
        if (v22 != *a2)
        {
          uint64_t v24 = 0;
          uint64_t v25 = *(void *)(a4 + 8);
          uint64_t v26 = *a1;
          uint64_t v27 = *a3;
          uint64_t v28 = a3[3];
          unint64_t v29 = v23 >> 3;
          if (v29 <= 1) {
            unint64_t v29 = 1;
          }
          do
          {
            uint64_t v30 = *(void *)(v21 + 8 * v24);
            int v31 = (uint64_t *)(v27 + 8 * v30);
            uint64_t v32 = *v31;
            uint64_t v33 = v31[1] - *v31;
            if (v33)
            {
              std::mutex v34 = (unsigned __int8 *)(v28 + v32);
              do
              {
                unsigned int v35 = *v34++;
                *(float *)(v25 + 8 * v35) = *(float *)(v26 + 8 * v30) + *(float *)(v25 + 8 * v35);
                *(float *)(v25 + 4 * ((2 * v35) | 1)) = *(float *)(v26 + 4 * ((2 * v30) | 1))
                                                        + *(float *)(v25 + 4 * ((2 * v35) | 1));
                --v33;
              }
              while (v33);
            }
            ++v24;
          }
          while (v24 != v29);
        }
        break;
      default:
        unint64_t v100 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v104);
        dmlc::LogMessageFatal::Entry::Init(v100, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        uint64_t v101 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v104);
        unint64_t v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)": ", 2);
        int v69 = (dmlc::LogMessageFatal *)&v104;
        goto LABEL_58;
    }
  }
}

void sub_22E910490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::BuildHistDispatch<float,true,true>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a3[19];
  int v5 = *((_DWORD *)a3 + 18);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        uint64_t v62 = *a2;
        uint64_t v63 = a2[1];
        uint64_t v64 = v63 - *a2;
        if (v63 != *a2)
        {
          uint64_t v65 = 0;
          uint64_t v66 = *(void *)(a4 + 8);
          uint64_t v67 = *a1;
          uint64_t v68 = a3[3];
          uint64_t v69 = *a3;
          unint64_t v70 = v64 >> 3;
          if (v70 <= 1) {
            unint64_t v70 = 1;
          }
          do
          {
            uint64_t v71 = (uint64_t *)(v62 + 8 * v65);
            uint64_t v72 = *v71;
            uint64_t v73 = (uint64_t *)(v69 + 8 * (*v71 - v4));
            uint64_t v75 = *v73;
            uint64_t v74 = v73[1];
            uint64_t v76 = v71[10];
            uint64_t v77 = (unint64_t *)(v69 + 8 * (v76 - v4));
            unint64_t v78 = *v77;
            unint64_t v79 = v77[1];
            _X3 = v67 + 8 * v76;
            __asm { PRFM            #0, [X3] }
            if (v78 < v79)
            {
              _X3 = v68 + 4 * v78;
              do
              {
                __asm { PRFM            #0, [X3] }
                v78 += 16;
                _X3 += 64;
              }
              while (v78 < v79);
            }
            if (v74 != v75)
            {
              uint64_t v84 = v74 - v75;
              uint64_t v85 = 2 * v72;
              uint64_t v86 = (int *)(v68 + 4 * v75);
              do
              {
                int v87 = *v86++;
                *(float *)(v66 + 4 * (2 * v87)) = *(float *)(v67 + 4 * v85)
                                                                + *(float *)(v66 + 4 * (2 * v87));
                *(float *)(v66 + 4 * ((2 * v87) | 1u)) = *(float *)(v67 + 4 * (v85 | 1))
                                                         + *(float *)(v66 + 4 * ((2 * v87) | 1u));
                --v84;
              }
              while (v84);
            }
            ++v65;
          }
          while (v65 != v70);
        }
        break;
      case 2:
        uint64_t v88 = *a2;
        uint64_t v89 = a2[1];
        uint64_t v90 = v89 - *a2;
        if (v89 != *a2)
        {
          uint64_t v91 = 0;
          uint64_t v92 = *(void *)(a4 + 8);
          uint64_t v93 = *a1;
          uint64_t v94 = a3[3];
          uint64_t v95 = *a3;
          unint64_t v96 = v90 >> 3;
          if (v96 <= 1) {
            unint64_t v96 = 1;
          }
          do
          {
            uint64_t v97 = (uint64_t *)(v88 + 8 * v91);
            uint64_t v98 = *v97;
            unsigned int v99 = (uint64_t *)(v95 + 8 * (*v97 - v4));
            uint64_t v100 = *v99;
            uint64_t v101 = v99[1];
            uint64_t v102 = v97[10];
            char v103 = (unint64_t *)(v95 + 8 * (v102 - v4));
            unint64_t v104 = *v103;
            unint64_t v105 = v103[1];
            _X4 = v93 + 8 * v102;
            __asm { PRFM            #0, [X4] }
            if (v104 < v105)
            {
              _X4 = v94 + 2 * v104;
              do
              {
                __asm { PRFM            #0, [X4] }
                v104 += 16;
                _X4 += 32;
              }
              while (v104 < v105);
            }
            if (v101 != v100)
            {
              uint64_t v110 = v101 - v100;
              uint64_t v111 = 2 * v98;
              uint64_t v112 = (unsigned __int16 *)(v94 + 2 * v100);
              do
              {
                unsigned int v113 = *v112++;
                *(float *)(v92 + 8 * v113) = *(float *)(v93 + 4 * v111) + *(float *)(v92 + 8 * v113);
                *(float *)(v92 + 4 * ((2 * v113) | 1)) = *(float *)(v93 + 4 * (v111 | 1))
                                                         + *(float *)(v92 + 4 * ((2 * v113) | 1));
                --v110;
              }
              while (v110);
            }
            ++v91;
          }
          while (v91 != v96);
        }
        break;
      case 1:
        uint64_t v6 = *a2;
        uint64_t v7 = a2[1];
        uint64_t v8 = v7 - *a2;
        if (v7 != *a2)
        {
          uint64_t v9 = 0;
          uint64_t v10 = *(void *)(a4 + 8);
          uint64_t v11 = *a1;
          uint64_t v12 = a3[3];
          uint64_t v13 = *a3;
          unint64_t v14 = v8 >> 3;
          if (v14 <= 1) {
            unint64_t v14 = 1;
          }
          do
          {
            uint64_t v15 = (uint64_t *)(v6 + 8 * v9);
            uint64_t v16 = *v15;
            uint64_t v17 = (uint64_t *)(v13 + 8 * (*v15 - v4));
            uint64_t v19 = *v17;
            uint64_t v18 = v17[1];
            uint64_t v20 = v15[10];
            uint64_t v21 = (unint64_t *)(v13 + 8 * (v20 - v4));
            unint64_t v22 = *v21;
            unint64_t v23 = v21[1];
            _X4 = v11 + 8 * v20;
            __asm { PRFM            #0, [X4] }
            while (v22 < v23)
            {
              _X4 = v12 + v22;
              __asm { PRFM            #0, [X4] }
              v22 += 16;
            }
            if (v18 != v19)
            {
              uint64_t v32 = v18 - v19;
              uint64_t v33 = 2 * v16;
              std::mutex v34 = (unsigned __int8 *)(v12 + v19);
              do
              {
                unsigned int v35 = *v34++;
                *(float *)(v10 + 8 * v35) = *(float *)(v11 + 4 * v33) + *(float *)(v10 + 8 * v35);
                *(float *)(v10 + 4 * ((2 * v35) | 1)) = *(float *)(v11 + 4 * (v33 | 1))
                                                        + *(float *)(v10 + 4 * ((2 * v35) | 1));
                --v32;
              }
              while (v32);
            }
            ++v9;
          }
          while (v9 != v14);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v173);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        uint64_t v115 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v173);
        char v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)": ", 2);
        char v117 = (dmlc::LogMessageFatal *)&v173;
LABEL_76:
        dmlc::LogMessageFatal::~LogMessageFatal(v117);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        uint64_t v118 = *a2;
        uint64_t v119 = a2[1];
        uint64_t v120 = v119 - *a2;
        if (v119 != *a2)
        {
          uint64_t v121 = 0;
          uint64_t v122 = *(void *)(a4 + 8);
          uint64_t v123 = *a1;
          uint64_t v124 = *a3;
          uint64_t v125 = a3[3];
          unint64_t v126 = v120 >> 3;
          if (v126 <= 1) {
            unint64_t v126 = 1;
          }
          do
          {
            unint64_t v127 = (uint64_t *)(v118 + 8 * v121);
            uint64_t v128 = *v127;
            char v129 = (uint64_t *)(v124 + 8 * *v127);
            uint64_t v130 = *v129;
            uint64_t v131 = v129[1];
            uint64_t v132 = v127[10];
            unint64_t v133 = (unint64_t *)(v124 + 8 * v132);
            unint64_t v134 = *v133;
            unint64_t v135 = v133[1];
            _X2 = v123 + 8 * v132;
            __asm { PRFM            #0, [X2] }
            if (v134 < v135)
            {
              _X2 = v125 + 4 * v134;
              do
              {
                __asm { PRFM            #0, [X2] }
                v134 += 16;
                _X2 += 64;
              }
              while (v134 < v135);
            }
            if (v131 != v130)
            {
              uint64_t v140 = v131 - v130;
              uint64_t v141 = 2 * v128;
              v142 = (int *)(v125 + 4 * v130);
              do
              {
                int v143 = *v142++;
                *(float *)(v122 + 4 * (2 * v143)) = *(float *)(v123 + 4 * v141)
                                                                  + *(float *)(v122 + 4 * (2 * v143));
                *(float *)(v122 + 4 * ((2 * v143) | 1u)) = *(float *)(v123 + 4 * (v141 | 1))
                                                           + *(float *)(v122 + 4 * ((2 * v143) | 1u));
                --v140;
              }
              while (v140);
            }
            ++v121;
          }
          while (v121 != v126);
        }
        break;
      case 2:
        uint64_t v144 = *a2;
        uint64_t v145 = a2[1];
        uint64_t v146 = v145 - *a2;
        if (v145 != *a2)
        {
          uint64_t v147 = 0;
          uint64_t v148 = *(void *)(a4 + 8);
          uint64_t v149 = *a1;
          uint64_t v150 = *a3;
          uint64_t v151 = a3[3];
          unint64_t v152 = v146 >> 3;
          if (v152 <= 1) {
            unint64_t v152 = 1;
          }
          do
          {
            v153 = (uint64_t *)(v144 + 8 * v147);
            uint64_t v154 = *v153;
            v155 = (uint64_t *)(v150 + 8 * *v153);
            uint64_t v157 = *v155;
            uint64_t v156 = v155[1];
            uint64_t v158 = v153[10];
            int v159 = (unint64_t *)(v150 + 8 * v158);
            unint64_t v160 = *v159;
            unint64_t v161 = v159[1];
            _X3 = v149 + 8 * v158;
            __asm { PRFM            #0, [X3] }
            if (v160 < v161)
            {
              _X3 = v151 + 2 * v160;
              do
              {
                __asm { PRFM            #0, [X3] }
                v160 += 16;
                _X3 += 32;
              }
              while (v160 < v161);
            }
            if (v156 != v157)
            {
              uint64_t v166 = v156 - v157;
              uint64_t v167 = 2 * v154;
              unint64_t v168 = (unsigned __int16 *)(v151 + 2 * v157);
              do
              {
                unsigned int v169 = *v168++;
                *(float *)(v148 + 8 * v169) = *(float *)(v149 + 4 * v167) + *(float *)(v148 + 8 * v169);
                *(float *)(v148 + 4 * ((2 * v169) | 1)) = *(float *)(v149 + 4 * (v167 | 1))
                                                          + *(float *)(v148 + 4 * ((2 * v169) | 1));
                --v166;
              }
              while (v166);
            }
            ++v147;
          }
          while (v147 != v152);
        }
        break;
      case 1:
        uint64_t v36 = *a2;
        uint64_t v37 = a2[1];
        uint64_t v38 = v37 - *a2;
        if (v37 != *a2)
        {
          uint64_t v39 = 0;
          uint64_t v40 = *(void *)(a4 + 8);
          uint64_t v41 = *a1;
          uint64_t v42 = *a3;
          uint64_t v43 = a3[3];
          unint64_t v44 = v38 >> 3;
          if (v44 <= 1) {
            unint64_t v44 = 1;
          }
          do
          {
            uint64_t v45 = (uint64_t *)(v36 + 8 * v39);
            uint64_t v46 = *v45;
            uint64_t v47 = (uint64_t *)(v42 + 8 * *v45);
            uint64_t v48 = *v47;
            uint64_t v49 = v47[1];
            uint64_t v50 = v45[10];
            uint64_t v51 = (unint64_t *)(v42 + 8 * v50);
            unint64_t v52 = *v51;
            unint64_t v53 = v51[1];
            _X3 = v41 + 8 * v50;
            __asm { PRFM            #0, [X3] }
            while (v52 < v53)
            {
              _X3 = v43 + v52;
              __asm { PRFM            #0, [X3] }
              v52 += 16;
            }
            if (v49 != v48)
            {
              uint64_t v58 = v49 - v48;
              uint64_t v59 = 2 * v46;
              uint64_t v60 = (unsigned __int8 *)(v43 + v48);
              do
              {
                unsigned int v61 = *v60++;
                *(float *)(v40 + 8 * v61) = *(float *)(v41 + 4 * v59) + *(float *)(v40 + 8 * v61);
                *(float *)(v40 + 4 * ((2 * v61) | 1)) = *(float *)(v41 + 4 * (v59 | 1))
                                                        + *(float *)(v40 + 4 * ((2 * v61) | 1));
                --v58;
              }
              while (v58);
            }
            ++v39;
          }
          while (v39 != v44);
        }
        break;
      default:
        unint64_t v170 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
        dmlc::LogMessageFatal::Entry::Init(v170, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v171 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
        int v172 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)": ", 2);
        char v117 = (dmlc::LogMessageFatal *)&v174;
        goto LABEL_76;
    }
  }
}

void sub_22E910A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::GHistBuilder<float>::BuildHist<false>(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v8 = a3[1];
  unint64_t v9 = (v8 - *a3) >> 3;
  if (*(void *)(*a3 + 8 * (v9 - 1)) - *(void *)*a3 == v9 - 1)
  {
    long long v23 = *(_OWORD *)a3;
    uint64_t v24 = a3[2];
    uint64_t v10 = a5[1];
    v22[0] = *a5;
    v22[1] = v10;
    uint64_t v11 = &v23;
    uint64_t v12 = v22;
  }
  else
  {
    if (v9 >= 0x12) {
      unint64_t v9 = 18;
    }
    uint64_t v13 = v8 - 8 * v9;
    v20[0] = *a3;
    v20[1] = v13;
    int v21 = -1;
    uint64_t v14 = a5[1];
    v19[0] = *a5;
    v19[1] = v14;
    xgboost::common::BuildHistDispatch<float,true,false>(a2, (uint64_t)v20, a4, (uint64_t)v19);
    v17[0] = v13;
    v17[1] = v8;
    int v18 = -1;
    uint64_t v15 = a5[1];
    v16[0] = *a5;
    v16[1] = v15;
    uint64_t v11 = (long long *)v17;
    uint64_t v12 = v16;
  }
  xgboost::common::BuildHistDispatch<float,false,false>(a2, (uint64_t)v11, a4, (uint64_t)v12);
}

void xgboost::common::BuildHistDispatch<float,false,false>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a3 + 152);
  int v5 = *(_DWORD *)(a3 + 72);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        uint64_t v47 = *(void **)a2;
        uint64_t v48 = *(void *)(a2 + 8) - *(void *)a2;
        if (v48)
        {
          uint64_t v49 = 0;
          uint64_t v50 = *(void *)(a4 + 8);
          uint64_t v51 = *a1;
          uint64_t v52 = *(void *)(a3 + 24);
          unint64_t v53 = *(int **)(a3 + 48);
          uint64_t v55 = *(void *)(*(void *)a3 + 8 * (*v47 - v4));
          uint64_t v54 = *(void *)(*(void *)a3 + 8 * (*v47 - v4) + 8);
          uint64_t v56 = v48 >> 3;
          if ((unint64_t)(v48 >> 3) <= 1) {
            uint64_t v56 = 1;
          }
          do
          {
            if (v54 != v55)
            {
              uint64_t v57 = v47[v49];
              uint64_t v58 = (int *)(v52 + 4 * (v57 - v4) * (v54 - v55));
              uint64_t v59 = 2 * v57;
              uint64_t v60 = (2 * v57) | 1;
              unsigned int v61 = v53;
              uint64_t v62 = v54 - v55;
              do
              {
                int v64 = *v58++;
                int v63 = v64;
                int v65 = *v61++;
                int v66 = v65 + v63;
                *(float *)(v50 + 4 * (2 * v66)) = *(float *)(v51 + 4 * v59)
                                                                + *(float *)(v50 + 4 * (2 * v66));
                *(float *)(v50 + 4 * ((2 * v66) | 1u)) = *(float *)(v51 + 4 * v60)
                                                         + *(float *)(v50 + 4 * ((2 * v66) | 1u));
                --v62;
              }
              while (v62);
            }
            ++v49;
          }
          while (v49 != v56);
        }
        break;
      case 2:
        uint64_t v67 = *(void **)a2;
        uint64_t v68 = *(void *)(a2 + 8) - *(void *)a2;
        if (v68)
        {
          uint64_t v69 = 0;
          uint64_t v70 = *(void *)(a4 + 8);
          uint64_t v71 = *a1;
          uint64_t v72 = *(void *)(a3 + 24);
          uint64_t v73 = *(int **)(a3 + 48);
          uint64_t v75 = *(void *)(*(void *)a3 + 8 * (*v67 - v4));
          uint64_t v74 = *(void *)(*(void *)a3 + 8 * (*v67 - v4) + 8);
          uint64_t v76 = v68 >> 3;
          if ((unint64_t)(v68 >> 3) <= 1) {
            uint64_t v76 = 1;
          }
          do
          {
            if (v74 != v75)
            {
              uint64_t v77 = v67[v69];
              unint64_t v78 = (unsigned __int16 *)(v72 + 2 * (v77 - v4) * (v74 - v75));
              uint64_t v79 = 2 * v77;
              uint64_t v80 = (2 * v77) | 1;
              uint64_t v81 = v73;
              uint64_t v82 = v74 - v75;
              do
              {
                int v84 = *v78++;
                int v83 = v84;
                int v85 = *v81++;
                int v86 = v85 + v83;
                *(float *)(v70 + 4 * (2 * v86)) = *(float *)(v71 + 4 * v79)
                                                                + *(float *)(v70 + 4 * (2 * v86));
                *(float *)(v70 + 4 * ((2 * v86) | 1u)) = *(float *)(v71 + 4 * v80)
                                                         + *(float *)(v70 + 4 * ((2 * v86) | 1u));
                --v82;
              }
              while (v82);
            }
            ++v69;
          }
          while (v69 != v76);
        }
        break;
      case 1:
        uint64_t v6 = *(void **)a2;
        uint64_t v7 = *(void *)(a2 + 8) - *(void *)a2;
        if (v7)
        {
          uint64_t v8 = 0;
          uint64_t v9 = *(void *)(a4 + 8);
          uint64_t v10 = *a1;
          uint64_t v11 = *(void *)(a3 + 24);
          uint64_t v12 = *(int **)(a3 + 48);
          uint64_t v14 = *(void *)(*(void *)a3 + 8 * (*v6 - v4));
          uint64_t v13 = *(void *)(*(void *)a3 + 8 * (*v6 - v4) + 8);
          uint64_t v15 = v7 >> 3;
          if ((unint64_t)(v7 >> 3) <= 1) {
            uint64_t v15 = 1;
          }
          do
          {
            if (v13 != v14)
            {
              uint64_t v16 = v6[v8];
              uint64_t v17 = (unsigned __int8 *)(v11 + (v16 - v4) * (v13 - v14));
              uint64_t v18 = 2 * v16;
              uint64_t v19 = (2 * v16) | 1;
              uint64_t v20 = v12;
              uint64_t v21 = v13 - v14;
              do
              {
                int v23 = *v17++;
                int v22 = v23;
                int v24 = *v20++;
                int v25 = v24 + v22;
                *(float *)(v9 + 4 * (2 * v25)) = *(float *)(v10 + 4 * v18)
                                                               + *(float *)(v9 + 4 * (2 * v25));
                *(float *)(v9 + 4 * ((2 * v25) | 1u)) = *(float *)(v10 + 4 * v19)
                                                        + *(float *)(v9 + 4 * ((2 * v25) | 1u));
                --v21;
              }
              while (v21);
            }
            ++v8;
          }
          while (v8 != v15);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v136);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        uint64_t v88 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v136);
        uint64_t v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)": ", 2);
        uint64_t v90 = (dmlc::LogMessageFatal *)&v136;
LABEL_58:
        dmlc::LogMessageFatal::~LogMessageFatal(v90);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        uint64_t v91 = *(void **)a2;
        uint64_t v92 = *(void *)(a2 + 8);
        uint64_t v93 = v92 - *(void *)a2;
        if (v92 != *(void *)a2)
        {
          uint64_t v94 = 0;
          uint64_t v95 = *(void *)(a4 + 8);
          uint64_t v96 = *a1;
          uint64_t v97 = *(void *)(a3 + 24);
          uint64_t v98 = *(int **)(a3 + 48);
          uint64_t v100 = *(void *)(*(void *)a3 + 8 * *v91);
          uint64_t v99 = *(void *)(*(void *)a3 + 8 * *v91 + 8);
          unint64_t v101 = v93 >> 3;
          if (v101 <= 1) {
            unint64_t v101 = 1;
          }
          do
          {
            if (v99 != v100)
            {
              uint64_t v102 = v91[v94];
              char v103 = (int *)(v97 + 4 * v102 * (v99 - v100));
              uint64_t v104 = 2 * v102;
              uint64_t v105 = (2 * v102) | 1;
              uint64_t v106 = v98;
              uint64_t v107 = v99 - v100;
              do
              {
                int v109 = *v103++;
                int v108 = v109;
                int v110 = *v106++;
                int v111 = v110 + v108;
                *(float *)(v95 + 4 * (2 * v111)) = *(float *)(v96 + 4 * v104)
                                                                 + *(float *)(v95 + 4 * (2 * v111));
                *(float *)(v95 + 4 * ((2 * v111) | 1u)) = *(float *)(v96 + 4 * v105)
                                                          + *(float *)(v95 + 4 * ((2 * v111) | 1u));
                --v107;
              }
              while (v107);
            }
            ++v94;
          }
          while (v94 != v101);
        }
        break;
      case 2:
        uint64_t v112 = *(void **)a2;
        uint64_t v113 = *(void *)(a2 + 8);
        uint64_t v114 = v113 - *(void *)a2;
        if (v113 != *(void *)a2)
        {
          uint64_t v115 = 0;
          uint64_t v116 = *(void *)(a4 + 8);
          uint64_t v117 = *a1;
          uint64_t v118 = *(void *)(a3 + 24);
          uint64_t v119 = *(int **)(a3 + 48);
          uint64_t v121 = *(void *)(*(void *)a3 + 8 * *v112);
          uint64_t v120 = *(void *)(*(void *)a3 + 8 * *v112 + 8);
          unint64_t v122 = v114 >> 3;
          if (v122 <= 1) {
            unint64_t v122 = 1;
          }
          do
          {
            if (v120 != v121)
            {
              uint64_t v123 = v112[v115];
              uint64_t v124 = (unsigned __int16 *)(v118 + 2 * v123 * (v120 - v121));
              uint64_t v125 = 2 * v123;
              uint64_t v126 = (2 * v123) | 1;
              unint64_t v127 = v119;
              uint64_t v128 = v120 - v121;
              do
              {
                int v130 = *v124++;
                int v129 = v130;
                int v131 = *v127++;
                int v132 = v131 + v129;
                *(float *)(v116 + 4 * (2 * v132)) = *(float *)(v117 + 4 * v125)
                                                                  + *(float *)(v116 + 4 * (2 * v132));
                *(float *)(v116 + 4 * ((2 * v132) | 1u)) = *(float *)(v117 + 4 * v126)
                                                           + *(float *)(v116 + 4 * ((2 * v132) | 1u));
                --v128;
              }
              while (v128);
            }
            ++v115;
          }
          while (v115 != v122);
        }
        break;
      case 1:
        uint64_t v26 = *(void **)a2;
        uint64_t v27 = *(void *)(a2 + 8);
        uint64_t v28 = v27 - *(void *)a2;
        if (v27 != *(void *)a2)
        {
          uint64_t v29 = 0;
          uint64_t v30 = *(void *)(a4 + 8);
          uint64_t v31 = *a1;
          uint64_t v32 = *(void *)(a3 + 24);
          uint64_t v33 = *(int **)(a3 + 48);
          uint64_t v35 = *(void *)(*(void *)a3 + 8 * *v26);
          uint64_t v34 = *(void *)(*(void *)a3 + 8 * *v26 + 8);
          unint64_t v36 = v28 >> 3;
          if (v36 <= 1) {
            unint64_t v36 = 1;
          }
          do
          {
            if (v34 != v35)
            {
              uint64_t v37 = v26[v29];
              uint64_t v38 = (unsigned __int8 *)(v32 + v37 * (v34 - v35));
              uint64_t v39 = 2 * v37;
              uint64_t v40 = (2 * v37) | 1;
              uint64_t v41 = v33;
              uint64_t v42 = v34 - v35;
              do
              {
                int v44 = *v38++;
                int v43 = v44;
                int v45 = *v41++;
                int v46 = v45 + v43;
                *(float *)(v30 + 4 * (2 * v46)) = *(float *)(v31 + 4 * v39)
                                                                + *(float *)(v30 + 4 * (2 * v46));
                *(float *)(v30 + 4 * ((2 * v46) | 1u)) = *(float *)(v31 + 4 * v40)
                                                         + *(float *)(v30 + 4 * ((2 * v46) | 1u));
                --v42;
              }
              while (v42);
            }
            ++v29;
          }
          while (v29 != v36);
        }
        break;
      default:
        unint64_t v133 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v137);
        dmlc::LogMessageFatal::Entry::Init(v133, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        unint64_t v134 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v137);
        unint64_t v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)": ", 2);
        uint64_t v90 = (dmlc::LogMessageFatal *)&v137;
        goto LABEL_58;
    }
  }
}

void sub_22E9110E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::BuildHistDispatch<float,true,false>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a3 + 152);
  int v5 = *(_DWORD *)(a3 + 72);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        uint64_t v69 = *(void **)a2;
        uint64_t v70 = *(void *)(a2 + 8) - *(void *)a2;
        if (v70)
        {
          uint64_t v71 = 0;
          uint64_t v72 = *(void *)(a4 + 8);
          uint64_t v73 = *a1;
          uint64_t v74 = *(void *)(a3 + 24);
          uint64_t v75 = *(int **)(a3 + 48);
          uint64_t v77 = *(void *)(*(void *)a3 + 8 * (*v69 - v4));
          uint64_t v76 = *(void *)(*(void *)a3 + 8 * (*v69 - v4) + 8);
          uint64_t v78 = v76 - v77;
          uint64_t v79 = v70 >> 3;
          if ((unint64_t)(v70 >> 3) <= 1) {
            uint64_t v79 = 1;
          }
          do
          {
            uint64_t v80 = &v69[v71];
            uint64_t v81 = *v80;
            uint64_t v82 = v80[10];
            uint64_t v83 = v82 - v4;
            unint64_t v84 = (v82 - v4) * v78;
            unint64_t v85 = v84 + v78;
            _X6 = v73 + 8 * v82;
            __asm { PRFM            #0, [X6] }
            if (v84 < v84 + v78)
            {
              _X5 = v74 + 4 * v78 * v83;
              do
              {
                __asm { PRFM            #0, [X5] }
                v84 += 16;
                _X5 += 64;
              }
              while (v84 < v85);
            }
            if (v76 != v77)
            {
              uint64_t v90 = (v81 - v4) * v78;
              uint64_t v91 = 2 * v81;
              uint64_t v92 = (int *)(v74 + 4 * v90);
              uint64_t v93 = v75;
              uint64_t v94 = v76 - v77;
              do
              {
                int v96 = *v92++;
                int v95 = v96;
                int v97 = *v93++;
                int v98 = v97 + v95;
                *(float *)(v72 + 4 * (2 * v98)) = *(float *)(v73 + 4 * v91)
                                                                + *(float *)(v72 + 4 * (2 * v98));
                *(float *)(v72 + 4 * ((2 * v98) | 1u)) = *(float *)(v73 + 4 * (v91 | 1))
                                                         + *(float *)(v72 + 4 * ((2 * v98) | 1u));
                --v94;
              }
              while (v94);
            }
            ++v71;
          }
          while (v71 != v79);
        }
        break;
      case 2:
        uint64_t v99 = *(void **)a2;
        uint64_t v100 = *(void *)(a2 + 8) - *(void *)a2;
        if (v100)
        {
          uint64_t v101 = 0;
          uint64_t v102 = *(void *)(a4 + 8);
          uint64_t v103 = *a1;
          uint64_t v104 = *(void *)(a3 + 24);
          uint64_t v105 = *(int **)(a3 + 48);
          uint64_t v107 = *(void *)(*(void *)a3 + 8 * (*v99 - v4));
          uint64_t v106 = *(void *)(*(void *)a3 + 8 * (*v99 - v4) + 8);
          uint64_t v108 = v106 - v107;
          uint64_t v109 = v100 >> 3;
          if ((unint64_t)(v100 >> 3) <= 1) {
            uint64_t v109 = 1;
          }
          do
          {
            int v110 = &v99[v101];
            uint64_t v111 = *v110;
            uint64_t v112 = v110[10];
            uint64_t v113 = v112 - v4;
            unint64_t v114 = (v112 - v4) * v108;
            unint64_t v115 = v114 + v108;
            _X6 = v103 + 8 * v112;
            __asm { PRFM            #0, [X6] }
            if (v114 < v114 + v108)
            {
              _X5 = v104 + 2 * v108 * v113;
              do
              {
                __asm { PRFM            #0, [X5] }
                v114 += 16;
                _X5 += 32;
              }
              while (v114 < v115);
            }
            if (v106 != v107)
            {
              uint64_t v120 = (v111 - v4) * v108;
              uint64_t v121 = 2 * v111;
              unint64_t v122 = (unsigned __int16 *)(v104 + 2 * v120);
              uint64_t v123 = v105;
              uint64_t v124 = v106 - v107;
              do
              {
                int v126 = *v122++;
                int v125 = v126;
                int v127 = *v123++;
                int v128 = v127 + v125;
                *(float *)(v102 + 4 * (2 * v128)) = *(float *)(v103 + 4 * v121)
                                                                  + *(float *)(v102 + 4 * (2 * v128));
                *(float *)(v102 + 4 * ((2 * v128) | 1u)) = *(float *)(v103 + 4 * (v121 | 1))
                                                           + *(float *)(v102 + 4 * ((2 * v128) | 1u));
                --v124;
              }
              while (v124);
            }
            ++v101;
          }
          while (v101 != v109);
        }
        break;
      case 1:
        uint64_t v6 = *(void **)a2;
        uint64_t v7 = *(void *)(a2 + 8) - *(void *)a2;
        if (v7)
        {
          uint64_t v8 = 0;
          uint64_t v9 = *(void *)(a4 + 8);
          uint64_t v10 = *a1;
          uint64_t v11 = *(void *)(a3 + 24);
          uint64_t v12 = *(int **)(a3 + 48);
          uint64_t v14 = *(void *)(*(void *)a3 + 8 * (*v6 - v4));
          uint64_t v13 = *(void *)(*(void *)a3 + 8 * (*v6 - v4) + 8);
          uint64_t v15 = v13 - v14;
          uint64_t v16 = v7 >> 3;
          if ((unint64_t)(v7 >> 3) <= 1) {
            uint64_t v16 = 1;
          }
          do
          {
            uint64_t v17 = &v6[v8];
            uint64_t v18 = *v17;
            uint64_t v19 = v17[10];
            unint64_t v20 = (v19 - v4) * v15;
            unint64_t v21 = v20 + v15;
            _X4 = v10 + 8 * v19;
            __asm { PRFM            #0, [X4] }
            while (v20 < v21)
            {
              _X4 = v11 + v20;
              __asm { PRFM            #0, [X4] }
              v20 += 16;
            }
            if (v13 != v14)
            {
              uint64_t v30 = (v18 - v4) * v15;
              uint64_t v31 = 2 * v18;
              uint64_t v32 = (unsigned __int8 *)(v11 + v30);
              uint64_t v33 = v12;
              uint64_t v34 = v13 - v14;
              do
              {
                int v36 = *v32++;
                int v35 = v36;
                int v37 = *v33++;
                int v38 = v37 + v35;
                *(float *)(v9 + 4 * (2 * v38)) = *(float *)(v10 + 4 * v31)
                                                               + *(float *)(v9 + 4 * (2 * v38));
                *(float *)(v9 + 4 * ((2 * v38) | 1u)) = *(float *)(v10 + 4 * (v31 | 1))
                                                        + *(float *)(v9 + 4 * ((2 * v38) | 1u));
                --v34;
              }
              while (v34);
            }
            ++v8;
          }
          while (v8 != v16);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v196);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        int v130 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v196);
        int v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)": ", 2);
        int v132 = (dmlc::LogMessageFatal *)&v196;
LABEL_76:
        dmlc::LogMessageFatal::~LogMessageFatal(v132);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        unint64_t v133 = *(void **)a2;
        uint64_t v134 = *(void *)(a2 + 8);
        uint64_t v135 = v134 - *(void *)a2;
        if (v134 != *(void *)a2)
        {
          uint64_t v136 = 0;
          uint64_t v137 = *(void *)(a4 + 8);
          uint64_t v138 = *a1;
          uint64_t v139 = *(void *)(a3 + 24);
          uint64_t v140 = *(int **)(a3 + 48);
          uint64_t v142 = *(void *)(*(void *)a3 + 8 * *v133);
          uint64_t v141 = *(void *)(*(void *)a3 + 8 * *v133 + 8);
          uint64_t v143 = v141 - v142;
          unint64_t v144 = v135 >> 3;
          if (v144 <= 1) {
            unint64_t v144 = 1;
          }
          do
          {
            uint64_t v145 = &v133[v136];
            uint64_t v146 = *v145;
            uint64_t v147 = v145[10];
            unint64_t v148 = v147 * v143;
            unint64_t v149 = v147 * v143 + v143;
            _X5 = v138 + 8 * v147;
            __asm { PRFM            #0, [X5] }
            if (v147 * v143 < v149)
            {
              _X4 = v139 + 4 * v143 * v147;
              do
              {
                __asm { PRFM            #0, [X4] }
                v148 += 16;
                _X4 += 64;
              }
              while (v148 < v149);
            }
            if (v141 != v142)
            {
              uint64_t v154 = v146 * v143;
              uint64_t v155 = 2 * v146;
              uint64_t v156 = (int *)(v139 + 4 * v154);
              uint64_t v157 = v140;
              uint64_t v158 = v141 - v142;
              do
              {
                int v160 = *v156++;
                int v159 = v160;
                int v161 = *v157++;
                int v162 = v161 + v159;
                *(float *)(v137 + 4 * (2 * v162)) = *(float *)(v138 + 4 * v155)
                                                                  + *(float *)(v137 + 4 * (2 * v162));
                *(float *)(v137 + 4 * ((2 * v162) | 1u)) = *(float *)(v138 + 4 * (v155 | 1))
                                                           + *(float *)(v137 + 4 * ((2 * v162) | 1u));
                --v158;
              }
              while (v158);
            }
            ++v136;
          }
          while (v136 != v144);
        }
        break;
      case 2:
        v163 = *(void **)a2;
        uint64_t v164 = *(void *)(a2 + 8);
        uint64_t v165 = v164 - *(void *)a2;
        if (v164 != *(void *)a2)
        {
          uint64_t v166 = 0;
          uint64_t v167 = *(void *)(a4 + 8);
          uint64_t v168 = *a1;
          uint64_t v169 = *(void *)(a3 + 24);
          unint64_t v170 = *(int **)(a3 + 48);
          uint64_t v172 = *(void *)(*(void *)a3 + 8 * *v163);
          uint64_t v171 = *(void *)(*(void *)a3 + 8 * *v163 + 8);
          uint64_t v173 = v171 - v172;
          unint64_t v174 = v165 >> 3;
          if (v174 <= 1) {
            unint64_t v174 = 1;
          }
          do
          {
            v175 = &v163[v166];
            uint64_t v176 = *v175;
            uint64_t v177 = v175[10];
            unint64_t v178 = v177 * v173;
            unint64_t v179 = v177 * v173 + v173;
            _X5 = v168 + 8 * v177;
            __asm { PRFM            #0, [X5] }
            if (v177 * v173 < v179)
            {
              _X4 = v169 + 2 * v173 * v177;
              do
              {
                __asm { PRFM            #0, [X4] }
                v178 += 16;
                _X4 += 32;
              }
              while (v178 < v179);
            }
            if (v171 != v172)
            {
              uint64_t v184 = v176 * v173;
              uint64_t v185 = 2 * v176;
              v186 = (unsigned __int16 *)(v169 + 2 * v184);
              v187 = v170;
              uint64_t v188 = v171 - v172;
              do
              {
                int v190 = *v186++;
                int v189 = v190;
                int v191 = *v187++;
                int v192 = v191 + v189;
                *(float *)(v167 + 4 * (2 * v192)) = *(float *)(v168 + 4 * v185)
                                                                  + *(float *)(v167 + 4 * (2 * v192));
                *(float *)(v167 + 4 * ((2 * v192) | 1u)) = *(float *)(v168 + 4 * (v185 | 1))
                                                           + *(float *)(v167 + 4 * ((2 * v192) | 1u));
                --v188;
              }
              while (v188);
            }
            ++v166;
          }
          while (v166 != v174);
        }
        break;
      case 1:
        uint64_t v39 = *(void **)a2;
        uint64_t v40 = *(void *)(a2 + 8);
        uint64_t v41 = v40 - *(void *)a2;
        if (v40 != *(void *)a2)
        {
          uint64_t v42 = 0;
          uint64_t v43 = *(void *)(a4 + 8);
          uint64_t v44 = *a1;
          uint64_t v45 = *(void *)(a3 + 24);
          int v46 = *(int **)(a3 + 48);
          uint64_t v48 = *(void *)(*(void *)a3 + 8 * *v39);
          uint64_t v47 = *(void *)(*(void *)a3 + 8 * *v39 + 8);
          uint64_t v49 = v47 - v48;
          unint64_t v50 = v41 >> 3;
          if (v50 <= 1) {
            unint64_t v50 = 1;
          }
          do
          {
            uint64_t v51 = &v39[v42];
            uint64_t v52 = *v51;
            uint64_t v53 = v51[10];
            unint64_t v54 = v53 * v49;
            unint64_t v55 = v53 * v49 + v49;
            _X3 = v44 + 8 * v53;
            __asm { PRFM            #0, [X3] }
            while (v54 < v55)
            {
              _X3 = v45 + v54;
              __asm { PRFM            #0, [X3] }
              v54 += 16;
            }
            if (v47 != v48)
            {
              uint64_t v60 = v52 * v49;
              uint64_t v61 = 2 * v52;
              uint64_t v62 = (unsigned __int8 *)(v45 + v60);
              int v63 = v46;
              uint64_t v64 = v47 - v48;
              do
              {
                int v66 = *v62++;
                int v65 = v66;
                int v67 = *v63++;
                int v68 = v67 + v65;
                *(float *)(v43 + 4 * (2 * v68)) = *(float *)(v44 + 4 * v61)
                                                                + *(float *)(v43 + 4 * (2 * v68));
                *(float *)(v43 + 4 * ((2 * v68) | 1u)) = *(float *)(v44 + 4 * (v61 | 1))
                                                         + *(float *)(v43 + 4 * ((2 * v68) | 1u));
                --v64;
              }
              while (v64);
            }
            ++v42;
          }
          while (v42 != v50);
        }
        break;
      default:
        v193 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v197);
        dmlc::LogMessageFatal::Entry::Init(v193, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v194 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v197);
        v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)": ", 2);
        int v132 = (dmlc::LogMessageFatal *)&v197;
        goto LABEL_76;
    }
  }
}

void sub_22E9117A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::GHistBuilder<double>::BuildHist<true>(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4, void *a5)
{
  uint64_t v8 = a3[1];
  unint64_t v9 = (v8 - *a3) >> 3;
  if (*(void *)(*a3 + 8 * (v9 - 1)) - *(void *)*a3 == v9 - 1)
  {
    long long v23 = *(_OWORD *)a3;
    uint64_t v24 = a3[2];
    uint64_t v10 = a5[1];
    v22[0] = *a5;
    v22[1] = v10;
    uint64_t v11 = (uint64_t *)&v23;
    uint64_t v12 = v22;
  }
  else
  {
    if (v9 >= 0x12) {
      unint64_t v9 = 18;
    }
    uint64_t v13 = v8 - 8 * v9;
    v20[0] = *a3;
    v20[1] = v13;
    int v21 = -1;
    uint64_t v14 = a5[1];
    v19[0] = *a5;
    v19[1] = v14;
    xgboost::common::BuildHistDispatch<double,true,true>(a2, v20, a4, (uint64_t)v19);
    v17[0] = v13;
    v17[1] = v8;
    int v18 = -1;
    uint64_t v15 = a5[1];
    v16[0] = *a5;
    v16[1] = v15;
    uint64_t v11 = v17;
    uint64_t v12 = v16;
  }
  xgboost::common::BuildHistDispatch<double,false,true>(a2, v11, a4, (uint64_t)v12);
}

void xgboost::common::BuildHistDispatch<double,false,true>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a3[19];
  int v5 = *((_DWORD *)a3 + 18);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        uint64_t v38 = *a2;
        uint64_t v39 = a2[1];
        uint64_t v40 = v39 - *a2;
        if (v39 != *a2)
        {
          uint64_t v41 = 0;
          uint64_t v42 = *(void *)(a4 + 8);
          uint64_t v43 = *a1;
          uint64_t v44 = a3[3];
          uint64_t v45 = *a3;
          unint64_t v46 = v40 >> 3;
          if (v46 <= 1) {
            unint64_t v46 = 1;
          }
          do
          {
            uint64_t v47 = *(void *)(v38 + 8 * v41);
            uint64_t v48 = (uint64_t *)(v45 + 8 * (v47 - v4));
            uint64_t v49 = *v48;
            uint64_t v50 = v48[1] - *v48;
            if (v50)
            {
              uint64_t v51 = (int *)(v44 + 4 * v49);
              float64x2_t v52 = vcvtq_f64_f32(*(float32x2_t *)(v43 + 8 * v47));
              do
              {
                int v53 = *v51++;
                *(float64x2_t *)(v42 + 8 * (2 * v53)) = vaddq_f64(*(float64x2_t *)(v42+ 8 * (2 * v53)), v52);
                --v50;
              }
              while (v50);
            }
            ++v41;
          }
          while (v41 != v46);
        }
        break;
      case 2:
        uint64_t v54 = *a2;
        uint64_t v55 = a2[1];
        uint64_t v56 = v55 - *a2;
        if (v55 != *a2)
        {
          uint64_t v57 = 0;
          uint64_t v58 = *(void *)(a4 + 8);
          uint64_t v59 = *a1;
          uint64_t v60 = a3[3];
          uint64_t v61 = *a3;
          unint64_t v62 = v56 >> 3;
          if (v62 <= 1) {
            unint64_t v62 = 1;
          }
          do
          {
            uint64_t v63 = *(void *)(v54 + 8 * v57);
            uint64_t v64 = (uint64_t *)(v61 + 8 * (v63 - v4));
            uint64_t v65 = *v64;
            uint64_t v66 = v64[1] - *v64;
            if (v66)
            {
              int v67 = (unsigned __int16 *)(v60 + 2 * v65);
              float64x2_t v68 = vcvtq_f64_f32(*(float32x2_t *)(v59 + 8 * v63));
              do
              {
                unsigned int v69 = *v67++;
                *(float64x2_t *)(v58 + 16 * v69) = vaddq_f64(*(float64x2_t *)(v58 + 16 * v69), v68);
                --v66;
              }
              while (v66);
            }
            ++v57;
          }
          while (v57 != v62);
        }
        break;
      case 1:
        uint64_t v6 = *a2;
        uint64_t v7 = a2[1];
        uint64_t v8 = v7 - *a2;
        if (v7 != *a2)
        {
          uint64_t v9 = 0;
          uint64_t v10 = *(void *)(a4 + 8);
          uint64_t v11 = *a1;
          uint64_t v12 = a3[3];
          uint64_t v13 = *a3;
          unint64_t v14 = v8 >> 3;
          if (v14 <= 1) {
            unint64_t v14 = 1;
          }
          do
          {
            uint64_t v15 = *(void *)(v6 + 8 * v9);
            uint64_t v16 = (uint64_t *)(v13 + 8 * (v15 - v4));
            uint64_t v17 = *v16;
            uint64_t v18 = v16[1] - *v16;
            if (v18)
            {
              uint64_t v19 = (unsigned __int8 *)(v12 + v17);
              float64x2_t v20 = vcvtq_f64_f32(*(float32x2_t *)(v11 + 8 * v15));
              do
              {
                unsigned int v21 = *v19++;
                *(float64x2_t *)(v10 + 16 * v21) = vaddq_f64(*(float64x2_t *)(v10 + 16 * v21), v20);
                --v18;
              }
              while (v18);
            }
            ++v9;
          }
          while (v9 != v14);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        uint64_t v71 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
        uint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)": ", 2);
        uint64_t v73 = (dmlc::LogMessageFatal *)&v109;
LABEL_58:
        dmlc::LogMessageFatal::~LogMessageFatal(v73);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        uint64_t v74 = *a2;
        uint64_t v75 = a2[1];
        uint64_t v76 = v75 - *a2;
        if (v75 != *a2)
        {
          uint64_t v77 = 0;
          uint64_t v78 = *(void *)(a4 + 8);
          uint64_t v79 = *a1;
          uint64_t v80 = *a3;
          uint64_t v81 = a3[3];
          unint64_t v82 = v76 >> 3;
          if (v82 <= 1) {
            unint64_t v82 = 1;
          }
          do
          {
            uint64_t v83 = *(void *)(v74 + 8 * v77);
            unint64_t v84 = (uint64_t *)(v80 + 8 * v83);
            uint64_t v85 = *v84;
            uint64_t v86 = v84[1] - *v84;
            if (v86)
            {
              int v87 = (int *)(v81 + 4 * v85);
              float64x2_t v88 = vcvtq_f64_f32(*(float32x2_t *)(v79 + 8 * v83));
              do
              {
                int v89 = *v87++;
                *(float64x2_t *)(v78 + 8 * (2 * v89)) = vaddq_f64(*(float64x2_t *)(v78+ 8 * (2 * v89)), v88);
                --v86;
              }
              while (v86);
            }
            ++v77;
          }
          while (v77 != v82);
        }
        break;
      case 2:
        uint64_t v90 = *a2;
        uint64_t v91 = a2[1];
        uint64_t v92 = v91 - *a2;
        if (v91 != *a2)
        {
          uint64_t v93 = 0;
          uint64_t v94 = *(void *)(a4 + 8);
          uint64_t v95 = *a1;
          uint64_t v96 = *a3;
          uint64_t v97 = a3[3];
          unint64_t v98 = v92 >> 3;
          if (v98 <= 1) {
            unint64_t v98 = 1;
          }
          do
          {
            uint64_t v99 = *(void *)(v90 + 8 * v93);
            uint64_t v100 = (uint64_t *)(v96 + 8 * v99);
            uint64_t v101 = *v100;
            uint64_t v102 = v100[1] - *v100;
            if (v102)
            {
              uint64_t v103 = (unsigned __int16 *)(v97 + 2 * v101);
              float64x2_t v104 = vcvtq_f64_f32(*(float32x2_t *)(v95 + 8 * v99));
              do
              {
                unsigned int v105 = *v103++;
                *(float64x2_t *)(v94 + 16 * v105) = vaddq_f64(*(float64x2_t *)(v94 + 16 * v105), v104);
                --v102;
              }
              while (v102);
            }
            ++v93;
          }
          while (v93 != v98);
        }
        break;
      case 1:
        uint64_t v22 = *a2;
        uint64_t v23 = a2[1];
        uint64_t v24 = v23 - *a2;
        if (v23 != *a2)
        {
          uint64_t v25 = 0;
          uint64_t v26 = *(void *)(a4 + 8);
          uint64_t v27 = *a1;
          uint64_t v28 = *a3;
          uint64_t v29 = a3[3];
          unint64_t v30 = v24 >> 3;
          if (v30 <= 1) {
            unint64_t v30 = 1;
          }
          do
          {
            uint64_t v31 = *(void *)(v22 + 8 * v25);
            uint64_t v32 = (uint64_t *)(v28 + 8 * v31);
            uint64_t v33 = *v32;
            uint64_t v34 = v32[1] - *v32;
            if (v34)
            {
              int v35 = (unsigned __int8 *)(v29 + v33);
              float64x2_t v36 = vcvtq_f64_f32(*(float32x2_t *)(v27 + 8 * v31));
              do
              {
                unsigned int v37 = *v35++;
                *(float64x2_t *)(v26 + 16 * v37) = vaddq_f64(*(float64x2_t *)(v26 + 16 * v37), v36);
                --v34;
              }
              while (v34);
            }
            ++v25;
          }
          while (v25 != v30);
        }
        break;
      default:
        uint64_t v106 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v110);
        dmlc::LogMessageFatal::Entry::Init(v106, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        uint64_t v107 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v110);
        uint64_t v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)": ", 2);
        uint64_t v73 = (dmlc::LogMessageFatal *)&v110;
        goto LABEL_58;
    }
  }
}

void sub_22E911C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::BuildHistDispatch<double,true,true>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a3[19];
  int v5 = *((_DWORD *)a3 + 18);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        uint64_t v64 = *a2;
        uint64_t v65 = a2[1];
        uint64_t v66 = v65 - *a2;
        if (v65 != *a2)
        {
          uint64_t v67 = 0;
          uint64_t v68 = *(void *)(a4 + 8);
          uint64_t v69 = *a1;
          uint64_t v70 = a3[3];
          uint64_t v71 = *a3;
          unint64_t v72 = v66 >> 3;
          if (v72 <= 1) {
            unint64_t v72 = 1;
          }
          do
          {
            uint64_t v73 = (uint64_t *)(v64 + 8 * v67);
            uint64_t v74 = *v73;
            uint64_t v75 = (uint64_t *)(v71 + 8 * (*v73 - v4));
            uint64_t v77 = *v75;
            uint64_t v76 = v75[1];
            uint64_t v78 = v73[10];
            uint64_t v79 = (unint64_t *)(v71 + 8 * (v78 - v4));
            unint64_t v80 = *v79;
            unint64_t v81 = v79[1];
            _X3 = v69 + 8 * v78;
            __asm { PRFM            #0, [X3] }
            if (v80 < v81)
            {
              _X3 = v70 + 4 * v80;
              do
              {
                __asm { PRFM            #0, [X3] }
                v80 += 16;
                _X3 += 64;
              }
              while (v80 < v81);
            }
            if (v76 != v77)
            {
              uint64_t v86 = v76 - v77;
              uint64_t v87 = 2 * v74;
              float64x2_t v88 = (int *)(v70 + 4 * v77);
              float64x2_t v89 = vcvtq_f64_f32(*(float32x2_t *)(v69 + 4 * v87));
              do
              {
                int v90 = *v88++;
                *(float64x2_t *)(v68 + 8 * (2 * v90)) = vaddq_f64(*(float64x2_t *)(v68+ 8 * (2 * v90)), v89);
                --v86;
              }
              while (v86);
            }
            ++v67;
          }
          while (v67 != v72);
        }
        break;
      case 2:
        uint64_t v91 = *a2;
        uint64_t v92 = a2[1];
        uint64_t v93 = v92 - *a2;
        if (v92 != *a2)
        {
          uint64_t v94 = 0;
          uint64_t v95 = *(void *)(a4 + 8);
          uint64_t v96 = *a1;
          uint64_t v97 = a3[3];
          uint64_t v98 = *a3;
          unint64_t v99 = v93 >> 3;
          if (v99 <= 1) {
            unint64_t v99 = 1;
          }
          do
          {
            uint64_t v100 = (uint64_t *)(v91 + 8 * v94);
            uint64_t v101 = *v100;
            uint64_t v102 = (uint64_t *)(v98 + 8 * (*v100 - v4));
            uint64_t v104 = *v102;
            uint64_t v103 = v102[1];
            uint64_t v105 = v100[10];
            uint64_t v106 = (unint64_t *)(v98 + 8 * (v105 - v4));
            unint64_t v107 = *v106;
            unint64_t v108 = v106[1];
            _X3 = v96 + 8 * v105;
            __asm { PRFM            #0, [X3] }
            if (v107 < v108)
            {
              _X3 = v97 + 2 * v107;
              do
              {
                __asm { PRFM            #0, [X3] }
                v107 += 16;
                _X3 += 32;
              }
              while (v107 < v108);
            }
            if (v103 != v104)
            {
              uint64_t v113 = v103 - v104;
              uint64_t v114 = 2 * v101;
              unint64_t v115 = (unsigned __int16 *)(v97 + 2 * v104);
              float64x2_t v116 = vcvtq_f64_f32(*(float32x2_t *)(v96 + 4 * v114));
              do
              {
                unsigned int v117 = *v115++;
                *(float64x2_t *)(v95 + 16 * v117) = vaddq_f64(*(float64x2_t *)(v95 + 16 * v117), v116);
                --v113;
              }
              while (v113);
            }
            ++v94;
          }
          while (v94 != v99);
        }
        break;
      case 1:
        uint64_t v6 = *a2;
        uint64_t v7 = a2[1];
        uint64_t v8 = v7 - *a2;
        if (v7 != *a2)
        {
          uint64_t v9 = 0;
          uint64_t v10 = *(void *)(a4 + 8);
          uint64_t v11 = *a1;
          uint64_t v12 = a3[3];
          uint64_t v13 = *a3;
          unint64_t v14 = v8 >> 3;
          if (v14 <= 1) {
            unint64_t v14 = 1;
          }
          do
          {
            uint64_t v15 = (uint64_t *)(v6 + 8 * v9);
            uint64_t v16 = *v15;
            uint64_t v17 = (uint64_t *)(v13 + 8 * (*v15 - v4));
            uint64_t v19 = *v17;
            uint64_t v18 = v17[1];
            uint64_t v20 = v15[10];
            unsigned int v21 = (unint64_t *)(v13 + 8 * (v20 - v4));
            unint64_t v22 = *v21;
            unint64_t v23 = v21[1];
            _X3 = v11 + 8 * v20;
            __asm { PRFM            #0, [X3] }
            while (v22 < v23)
            {
              _X3 = v12 + v22;
              __asm { PRFM            #0, [X3] }
              v22 += 16;
            }
            if (v18 != v19)
            {
              uint64_t v32 = v18 - v19;
              uint64_t v33 = 2 * v16;
              uint64_t v34 = (unsigned __int8 *)(v12 + v19);
              float64x2_t v35 = vcvtq_f64_f32(*(float32x2_t *)(v11 + 4 * v33));
              do
              {
                unsigned int v36 = *v34++;
                *(float64x2_t *)(v10 + 16 * v36) = vaddq_f64(*(float64x2_t *)(v10 + 16 * v36), v35);
                --v32;
              }
              while (v32);
            }
            ++v9;
          }
          while (v9 != v14);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v179);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        uint64_t v119 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v179);
        uint64_t v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)": ", 2);
        uint64_t v121 = (dmlc::LogMessageFatal *)&v179;
LABEL_76:
        dmlc::LogMessageFatal::~LogMessageFatal(v121);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        uint64_t v122 = *a2;
        uint64_t v123 = a2[1];
        uint64_t v124 = v123 - *a2;
        if (v123 != *a2)
        {
          uint64_t v125 = 0;
          uint64_t v126 = *(void *)(a4 + 8);
          uint64_t v127 = *a1;
          uint64_t v128 = *a3;
          uint64_t v129 = a3[3];
          unint64_t v130 = v124 >> 3;
          if (v130 <= 1) {
            unint64_t v130 = 1;
          }
          do
          {
            int v131 = (uint64_t *)(v122 + 8 * v125);
            uint64_t v132 = *v131;
            unint64_t v133 = (uint64_t *)(v128 + 8 * *v131);
            uint64_t v134 = *v133;
            uint64_t v135 = v133[1];
            uint64_t v136 = v131[10];
            uint64_t v137 = (unint64_t *)(v128 + 8 * v136);
            unint64_t v138 = *v137;
            unint64_t v139 = v137[1];
            _X2 = v127 + 8 * v136;
            __asm { PRFM            #0, [X2] }
            if (v138 < v139)
            {
              _X2 = v129 + 4 * v138;
              do
              {
                __asm { PRFM            #0, [X2] }
                v138 += 16;
                _X2 += 64;
              }
              while (v138 < v139);
            }
            if (v135 != v134)
            {
              uint64_t v144 = v135 - v134;
              uint64_t v145 = 2 * v132;
              uint64_t v146 = (int *)(v129 + 4 * v134);
              float64x2_t v147 = vcvtq_f64_f32(*(float32x2_t *)(v127 + 4 * v145));
              do
              {
                int v148 = *v146++;
                *(float64x2_t *)(v126 + 8 * (2 * v148)) = vaddq_f64(*(float64x2_t *)(v126+ 8* (2 * v148)), v147);
                --v144;
              }
              while (v144);
            }
            ++v125;
          }
          while (v125 != v130);
        }
        break;
      case 2:
        uint64_t v149 = *a2;
        uint64_t v150 = a2[1];
        uint64_t v151 = v150 - *a2;
        if (v150 != *a2)
        {
          uint64_t v152 = 0;
          uint64_t v153 = *(void *)(a4 + 8);
          uint64_t v154 = *a1;
          uint64_t v155 = *a3;
          uint64_t v156 = a3[3];
          unint64_t v157 = v151 >> 3;
          if (v157 <= 1) {
            unint64_t v157 = 1;
          }
          do
          {
            uint64_t v158 = (uint64_t *)(v149 + 8 * v152);
            uint64_t v159 = *v158;
            int v160 = (uint64_t *)(v155 + 8 * *v158);
            uint64_t v161 = *v160;
            uint64_t v162 = v160[1];
            uint64_t v163 = v158[10];
            uint64_t v164 = (unint64_t *)(v155 + 8 * v163);
            unint64_t v165 = *v164;
            unint64_t v166 = v164[1];
            _X2 = v154 + 8 * v163;
            __asm { PRFM            #0, [X2] }
            if (v165 < v166)
            {
              _X2 = v156 + 2 * v165;
              do
              {
                __asm { PRFM            #0, [X2] }
                v165 += 16;
                _X2 += 32;
              }
              while (v165 < v166);
            }
            if (v162 != v161)
            {
              uint64_t v171 = v162 - v161;
              uint64_t v172 = 2 * v159;
              uint64_t v173 = (unsigned __int16 *)(v156 + 2 * v161);
              float64x2_t v174 = vcvtq_f64_f32(*(float32x2_t *)(v154 + 4 * v172));
              do
              {
                unsigned int v175 = *v173++;
                *(float64x2_t *)(v153 + 16 * v175) = vaddq_f64(*(float64x2_t *)(v153 + 16 * v175), v174);
                --v171;
              }
              while (v171);
            }
            ++v152;
          }
          while (v152 != v157);
        }
        break;
      case 1:
        uint64_t v37 = *a2;
        uint64_t v38 = a2[1];
        uint64_t v39 = v38 - *a2;
        if (v38 != *a2)
        {
          uint64_t v40 = 0;
          uint64_t v41 = *(void *)(a4 + 8);
          uint64_t v42 = *a1;
          uint64_t v43 = *a3;
          uint64_t v44 = a3[3];
          unint64_t v45 = v39 >> 3;
          if (v45 <= 1) {
            unint64_t v45 = 1;
          }
          do
          {
            unint64_t v46 = (uint64_t *)(v37 + 8 * v40);
            uint64_t v47 = *v46;
            uint64_t v48 = (uint64_t *)(v43 + 8 * *v46);
            uint64_t v49 = *v48;
            uint64_t v50 = v48[1];
            uint64_t v51 = v46[10];
            float64x2_t v52 = (unint64_t *)(v43 + 8 * v51);
            unint64_t v53 = *v52;
            unint64_t v54 = v52[1];
            _X2 = v42 + 8 * v51;
            __asm { PRFM            #0, [X2] }
            while (v53 < v54)
            {
              _X2 = v44 + v53;
              __asm { PRFM            #0, [X2] }
              v53 += 16;
            }
            if (v50 != v49)
            {
              uint64_t v59 = v50 - v49;
              uint64_t v60 = 2 * v47;
              uint64_t v61 = (unsigned __int8 *)(v44 + v49);
              float64x2_t v62 = vcvtq_f64_f32(*(float32x2_t *)(v42 + 4 * v60));
              do
              {
                unsigned int v63 = *v61++;
                *(float64x2_t *)(v41 + 16 * v63) = vaddq_f64(*(float64x2_t *)(v41 + 16 * v63), v62);
                --v59;
              }
              while (v59);
            }
            ++v40;
          }
          while (v40 != v45);
        }
        break;
      default:
        uint64_t v176 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v180);
        dmlc::LogMessageFatal::Entry::Init(v176, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        uint64_t v177 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v180);
        unint64_t v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)": ", 2);
        uint64_t v121 = (dmlc::LogMessageFatal *)&v180;
        goto LABEL_76;
    }
  }
}

void sub_22E9121EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::GHistBuilder<double>::BuildHist<false>(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v8 = a3[1];
  unint64_t v9 = (v8 - *a3) >> 3;
  if (*(void *)(*a3 + 8 * (v9 - 1)) - *(void *)*a3 == v9 - 1)
  {
    long long v23 = *(_OWORD *)a3;
    uint64_t v24 = a3[2];
    uint64_t v10 = a5[1];
    v22[0] = *a5;
    v22[1] = v10;
    uint64_t v11 = &v23;
    uint64_t v12 = v22;
  }
  else
  {
    if (v9 >= 0x12) {
      unint64_t v9 = 18;
    }
    uint64_t v13 = v8 - 8 * v9;
    v20[0] = *a3;
    v20[1] = v13;
    int v21 = -1;
    uint64_t v14 = a5[1];
    v19[0] = *a5;
    v19[1] = v14;
    xgboost::common::BuildHistDispatch<double,true,false>(a2, (uint64_t)v20, a4, (uint64_t)v19);
    v17[0] = v13;
    v17[1] = v8;
    int v18 = -1;
    uint64_t v15 = a5[1];
    v16[0] = *a5;
    v16[1] = v15;
    uint64_t v11 = (long long *)v17;
    uint64_t v12 = v16;
  }
  xgboost::common::BuildHistDispatch<double,false,false>(a2, (uint64_t)v11, a4, (uint64_t)v12);
}

void xgboost::common::BuildHistDispatch<double,false,false>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a3 + 152);
  int v5 = *(_DWORD *)(a3 + 72);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        uint64_t v43 = *(void **)a2;
        uint64_t v44 = *(void *)(a2 + 8) - *(void *)a2;
        if (v44)
        {
          uint64_t v45 = 0;
          uint64_t v46 = *(void *)(a4 + 8);
          uint64_t v47 = *a1;
          uint64_t v48 = *(void *)(a3 + 24);
          uint64_t v49 = *(int **)(a3 + 48);
          uint64_t v51 = *(void *)(*(void *)a3 + 8 * (*v43 - v4));
          uint64_t v50 = *(void *)(*(void *)a3 + 8 * (*v43 - v4) + 8);
          uint64_t v52 = v44 >> 3;
          if ((unint64_t)(v44 >> 3) <= 1) {
            uint64_t v52 = 1;
          }
          do
          {
            if (v50 != v51)
            {
              uint64_t v53 = v43[v45];
              unint64_t v54 = (int *)(v48 + 4 * (v53 - v4) * (v50 - v51));
              float64x2_t v55 = vcvtq_f64_f32(*(float32x2_t *)(v47 + 8 * v53));
              uint64_t v56 = v49;
              uint64_t v57 = v50 - v51;
              do
              {
                int v59 = *v54++;
                int v58 = v59;
                int v60 = *v56++;
                *(float64x2_t *)(v46 + 8 * (2 * (v60 + v58))) = vaddq_f64(*(float64x2_t *)(v46+ 8* (2 * (v60 + v58))), v55);
                --v57;
              }
              while (v57);
            }
            ++v45;
          }
          while (v45 != v52);
        }
        break;
      case 2:
        uint64_t v61 = *(void **)a2;
        uint64_t v62 = *(void *)(a2 + 8) - *(void *)a2;
        if (v62)
        {
          uint64_t v63 = 0;
          uint64_t v64 = *(void *)(a4 + 8);
          uint64_t v65 = *a1;
          uint64_t v66 = *(void *)(a3 + 24);
          uint64_t v67 = *(int **)(a3 + 48);
          uint64_t v69 = *(void *)(*(void *)a3 + 8 * (*v61 - v4));
          uint64_t v68 = *(void *)(*(void *)a3 + 8 * (*v61 - v4) + 8);
          uint64_t v70 = v62 >> 3;
          if ((unint64_t)(v62 >> 3) <= 1) {
            uint64_t v70 = 1;
          }
          do
          {
            if (v68 != v69)
            {
              uint64_t v71 = v61[v63];
              unint64_t v72 = (unsigned __int16 *)(v66 + 2 * (v71 - v4) * (v68 - v69));
              float64x2_t v73 = vcvtq_f64_f32(*(float32x2_t *)(v65 + 8 * v71));
              uint64_t v74 = v67;
              uint64_t v75 = v68 - v69;
              do
              {
                int v77 = *v72++;
                int v76 = v77;
                int v78 = *v74++;
                *(float64x2_t *)(v64 + 8 * (2 * (v78 + v76))) = vaddq_f64(*(float64x2_t *)(v64+ 8* (2 * (v78 + v76))), v73);
                --v75;
              }
              while (v75);
            }
            ++v63;
          }
          while (v63 != v70);
        }
        break;
      case 1:
        uint64_t v6 = *(void **)a2;
        uint64_t v7 = *(void *)(a2 + 8) - *(void *)a2;
        if (v7)
        {
          uint64_t v8 = 0;
          uint64_t v9 = *(void *)(a4 + 8);
          uint64_t v10 = *a1;
          uint64_t v11 = *(void *)(a3 + 24);
          uint64_t v12 = *(int **)(a3 + 48);
          uint64_t v14 = *(void *)(*(void *)a3 + 8 * (*v6 - v4));
          uint64_t v13 = *(void *)(*(void *)a3 + 8 * (*v6 - v4) + 8);
          uint64_t v15 = v7 >> 3;
          if ((unint64_t)(v7 >> 3) <= 1) {
            uint64_t v15 = 1;
          }
          do
          {
            if (v13 != v14)
            {
              uint64_t v16 = v6[v8];
              uint64_t v17 = (unsigned __int8 *)(v11 + (v16 - v4) * (v13 - v14));
              float64x2_t v18 = vcvtq_f64_f32(*(float32x2_t *)(v10 + 8 * v16));
              uint64_t v19 = v12;
              uint64_t v20 = v13 - v14;
              do
              {
                int v22 = *v17++;
                int v21 = v22;
                int v23 = *v19++;
                *(float64x2_t *)(v9 + 8 * (2 * (v23 + v21))) = vaddq_f64(*(float64x2_t *)(v9+ 8* (2 * (v23 + v21))), v18);
                --v20;
              }
              while (v20);
            }
            ++v8;
          }
          while (v8 != v15);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v124);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        unint64_t v80 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v124);
        unint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)": ", 2);
        unint64_t v82 = (dmlc::LogMessageFatal *)&v124;
LABEL_58:
        dmlc::LogMessageFatal::~LogMessageFatal(v82);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        uint64_t v83 = *(void **)a2;
        uint64_t v84 = *(void *)(a2 + 8);
        uint64_t v85 = v84 - *(void *)a2;
        if (v84 != *(void *)a2)
        {
          uint64_t v86 = 0;
          uint64_t v87 = *(void *)(a4 + 8);
          uint64_t v88 = *a1;
          uint64_t v89 = *(void *)(a3 + 24);
          int v90 = *(int **)(a3 + 48);
          uint64_t v92 = *(void *)(*(void *)a3 + 8 * *v83);
          uint64_t v91 = *(void *)(*(void *)a3 + 8 * *v83 + 8);
          unint64_t v93 = v85 >> 3;
          if (v93 <= 1) {
            unint64_t v93 = 1;
          }
          do
          {
            if (v91 != v92)
            {
              uint64_t v94 = v83[v86];
              uint64_t v95 = (int *)(v89 + 4 * v94 * (v91 - v92));
              float64x2_t v96 = vcvtq_f64_f32(*(float32x2_t *)(v88 + 8 * v94));
              uint64_t v97 = v90;
              uint64_t v98 = v91 - v92;
              do
              {
                int v100 = *v95++;
                int v99 = v100;
                int v101 = *v97++;
                *(float64x2_t *)(v87 + 8 * (2 * (v101 + v99))) = vaddq_f64(*(float64x2_t *)(v87+ 8 * (2 * (v101 + v99))), v96);
                --v98;
              }
              while (v98);
            }
            ++v86;
          }
          while (v86 != v93);
        }
        break;
      case 2:
        uint64_t v102 = *(void **)a2;
        uint64_t v103 = *(void *)(a2 + 8);
        uint64_t v104 = v103 - *(void *)a2;
        if (v103 != *(void *)a2)
        {
          uint64_t v105 = 0;
          uint64_t v106 = *(void *)(a4 + 8);
          uint64_t v107 = *a1;
          uint64_t v108 = *(void *)(a3 + 24);
          char v109 = *(int **)(a3 + 48);
          uint64_t v111 = *(void *)(*(void *)a3 + 8 * *v102);
          uint64_t v110 = *(void *)(*(void *)a3 + 8 * *v102 + 8);
          unint64_t v112 = v104 >> 3;
          if (v112 <= 1) {
            unint64_t v112 = 1;
          }
          do
          {
            if (v110 != v111)
            {
              uint64_t v113 = v102[v105];
              uint64_t v114 = (unsigned __int16 *)(v108 + 2 * v113 * (v110 - v111));
              float64x2_t v115 = vcvtq_f64_f32(*(float32x2_t *)(v107 + 8 * v113));
              float64x2_t v116 = v109;
              uint64_t v117 = v110 - v111;
              do
              {
                int v119 = *v114++;
                int v118 = v119;
                int v120 = *v116++;
                *(float64x2_t *)(v106 + 8 * (2 * (v120 + v118))) = vaddq_f64(*(float64x2_t *)(v106 + 8 * (2 * (v120 + v118))), v115);
                --v117;
              }
              while (v117);
            }
            ++v105;
          }
          while (v105 != v112);
        }
        break;
      case 1:
        uint64_t v24 = *(void **)a2;
        uint64_t v25 = *(void *)(a2 + 8);
        uint64_t v26 = v25 - *(void *)a2;
        if (v25 != *(void *)a2)
        {
          uint64_t v27 = 0;
          uint64_t v28 = *(void *)(a4 + 8);
          uint64_t v29 = *a1;
          uint64_t v30 = *(void *)(a3 + 24);
          uint64_t v31 = *(int **)(a3 + 48);
          uint64_t v33 = *(void *)(*(void *)a3 + 8 * *v24);
          uint64_t v32 = *(void *)(*(void *)a3 + 8 * *v24 + 8);
          unint64_t v34 = v26 >> 3;
          if (v34 <= 1) {
            unint64_t v34 = 1;
          }
          do
          {
            if (v32 != v33)
            {
              uint64_t v35 = v24[v27];
              unsigned int v36 = (unsigned __int8 *)(v30 + v35 * (v32 - v33));
              float64x2_t v37 = vcvtq_f64_f32(*(float32x2_t *)(v29 + 8 * v35));
              uint64_t v38 = v31;
              uint64_t v39 = v32 - v33;
              do
              {
                int v41 = *v36++;
                int v40 = v41;
                int v42 = *v38++;
                *(float64x2_t *)(v28 + 8 * (2 * (v42 + v40))) = vaddq_f64(*(float64x2_t *)(v28+ 8* (2 * (v42 + v40))), v37);
                --v39;
              }
              while (v39);
            }
            ++v27;
          }
          while (v27 != v34);
        }
        break;
      default:
        uint64_t v121 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v125);
        dmlc::LogMessageFatal::Entry::Init(v121, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        uint64_t v122 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v125);
        uint64_t v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)": ", 2);
        unint64_t v82 = (dmlc::LogMessageFatal *)&v125;
        goto LABEL_58;
    }
  }
}

void sub_22E91279C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::BuildHistDispatch<double,true,false>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a3 + 152);
  int v5 = *(_DWORD *)(a3 + 72);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        uint64_t v67 = *(void **)a2;
        uint64_t v68 = *(void *)(a2 + 8) - *(void *)a2;
        if (v68)
        {
          uint64_t v69 = 0;
          uint64_t v70 = *(void *)(a4 + 8);
          uint64_t v71 = *a1;
          uint64_t v72 = *(void *)(a3 + 24);
          float64x2_t v73 = *(int **)(a3 + 48);
          uint64_t v75 = *(void *)(*(void *)a3 + 8 * (*v67 - v4));
          uint64_t v74 = *(void *)(*(void *)a3 + 8 * (*v67 - v4) + 8);
          uint64_t v76 = v74 - v75;
          uint64_t v77 = v68 >> 3;
          if ((unint64_t)(v68 >> 3) <= 1) {
            uint64_t v77 = 1;
          }
          do
          {
            int v78 = &v67[v69];
            uint64_t v79 = *v78;
            uint64_t v80 = v78[10];
            uint64_t v81 = v80 - v4;
            unint64_t v82 = (v80 - v4) * v76;
            unint64_t v83 = v82 + v76;
            _X6 = v71 + 8 * v80;
            __asm { PRFM            #0, [X6] }
            if (v82 < v82 + v76)
            {
              _X5 = v72 + 4 * v76 * v81;
              do
              {
                __asm { PRFM            #0, [X5] }
                v82 += 16;
                _X5 += 64;
              }
              while (v82 < v83);
            }
            if (v74 != v75)
            {
              uint64_t v88 = 2 * v79;
              uint64_t v89 = (int *)(v72 + 4 * (v79 - v4) * v76);
              float64x2_t v90 = vcvtq_f64_f32(*(float32x2_t *)(v71 + 4 * v88));
              uint64_t v91 = v73;
              uint64_t v92 = v74 - v75;
              do
              {
                int v94 = *v89++;
                int v93 = v94;
                int v95 = *v91++;
                *(float64x2_t *)(v70 + 8 * (2 * (v95 + v93))) = vaddq_f64(*(float64x2_t *)(v70+ 8* (2 * (v95 + v93))), v90);
                --v92;
              }
              while (v92);
            }
            ++v69;
          }
          while (v69 != v77);
        }
        break;
      case 2:
        float64x2_t v96 = *(void **)a2;
        uint64_t v97 = *(void *)(a2 + 8) - *(void *)a2;
        if (v97)
        {
          uint64_t v98 = 0;
          uint64_t v99 = *(void *)(a4 + 8);
          uint64_t v100 = *a1;
          uint64_t v101 = *(void *)(a3 + 24);
          uint64_t v102 = *(int **)(a3 + 48);
          uint64_t v104 = *(void *)(*(void *)a3 + 8 * (*v96 - v4));
          uint64_t v103 = *(void *)(*(void *)a3 + 8 * (*v96 - v4) + 8);
          uint64_t v105 = v103 - v104;
          uint64_t v106 = v97 >> 3;
          if ((unint64_t)(v97 >> 3) <= 1) {
            uint64_t v106 = 1;
          }
          do
          {
            uint64_t v107 = &v96[v98];
            uint64_t v108 = *v107;
            uint64_t v109 = v107[10];
            uint64_t v110 = v109 - v4;
            unint64_t v111 = (v109 - v4) * v105;
            unint64_t v112 = v111 + v105;
            _X6 = v100 + 8 * v109;
            __asm { PRFM            #0, [X6] }
            if (v111 < v111 + v105)
            {
              _X5 = v101 + 2 * v105 * v110;
              do
              {
                __asm { PRFM            #0, [X5] }
                v111 += 16;
                _X5 += 32;
              }
              while (v111 < v112);
            }
            if (v103 != v104)
            {
              uint64_t v117 = 2 * v108;
              int v118 = (unsigned __int16 *)(v101 + 2 * (v108 - v4) * v105);
              float64x2_t v119 = vcvtq_f64_f32(*(float32x2_t *)(v100 + 4 * v117));
              int v120 = v102;
              uint64_t v121 = v103 - v104;
              do
              {
                int v123 = *v118++;
                int v122 = v123;
                int v124 = *v120++;
                *(float64x2_t *)(v99 + 8 * (2 * (v124 + v122))) = vaddq_f64(*(float64x2_t *)(v99 + 8 * (2 * (v124 + v122))), v119);
                --v121;
              }
              while (v121);
            }
            ++v98;
          }
          while (v98 != v106);
        }
        break;
      case 1:
        uint64_t v6 = *(void **)a2;
        uint64_t v7 = *(void *)(a2 + 8) - *(void *)a2;
        if (v7)
        {
          uint64_t v8 = 0;
          uint64_t v9 = *(void *)(a4 + 8);
          uint64_t v10 = *a1;
          uint64_t v11 = *(void *)(a3 + 24);
          uint64_t v12 = *(int **)(a3 + 48);
          uint64_t v14 = *(void *)(*(void *)a3 + 8 * (*v6 - v4));
          uint64_t v13 = *(void *)(*(void *)a3 + 8 * (*v6 - v4) + 8);
          uint64_t v15 = v13 - v14;
          uint64_t v16 = v7 >> 3;
          if ((unint64_t)(v7 >> 3) <= 1) {
            uint64_t v16 = 1;
          }
          do
          {
            uint64_t v17 = &v6[v8];
            uint64_t v18 = *v17;
            uint64_t v19 = v17[10];
            unint64_t v20 = (v19 - v4) * v15;
            unint64_t v21 = v20 + v15;
            _X4 = v10 + 8 * v19;
            __asm { PRFM            #0, [X4] }
            while (v20 < v21)
            {
              _X4 = v11 + v20;
              __asm { PRFM            #0, [X4] }
              v20 += 16;
            }
            if (v13 != v14)
            {
              uint64_t v30 = 2 * v18;
              uint64_t v31 = (unsigned __int8 *)(v11 + (v18 - v4) * v15);
              float64x2_t v32 = vcvtq_f64_f32(*(float32x2_t *)(v10 + 4 * v30));
              uint64_t v33 = v12;
              uint64_t v34 = v13 - v14;
              do
              {
                int v36 = *v31++;
                int v35 = v36;
                int v37 = *v33++;
                *(float64x2_t *)(v9 + 8 * (2 * (v37 + v35))) = vaddq_f64(*(float64x2_t *)(v9+ 8* (2 * (v37 + v35))), v32);
                --v34;
              }
              while (v34);
            }
            ++v8;
          }
          while (v8 != v16);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v190);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        uint64_t v126 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v190);
        uint64_t v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)": ", 2);
        uint64_t v128 = (dmlc::LogMessageFatal *)&v190;
LABEL_76:
        dmlc::LogMessageFatal::~LogMessageFatal(v128);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        uint64_t v129 = *(void **)a2;
        uint64_t v130 = *(void *)(a2 + 8);
        uint64_t v131 = v130 - *(void *)a2;
        if (v130 != *(void *)a2)
        {
          uint64_t v132 = 0;
          uint64_t v133 = *(void *)(a4 + 8);
          uint64_t v134 = *a1;
          uint64_t v135 = *(void *)(a3 + 24);
          uint64_t v136 = *(int **)(a3 + 48);
          uint64_t v138 = *(void *)(*(void *)a3 + 8 * *v129);
          uint64_t v137 = *(void *)(*(void *)a3 + 8 * *v129 + 8);
          uint64_t v139 = v137 - v138;
          unint64_t v140 = v131 >> 3;
          if (v140 <= 1) {
            unint64_t v140 = 1;
          }
          do
          {
            uint64_t v141 = &v129[v132];
            uint64_t v142 = *v141;
            uint64_t v143 = v141[10];
            unint64_t v144 = v143 * v139;
            unint64_t v145 = v143 * v139 + v139;
            _X5 = v134 + 8 * v143;
            __asm { PRFM            #0, [X5] }
            if (v143 * v139 < v145)
            {
              _X4 = v135 + 4 * v139 * v143;
              do
              {
                __asm { PRFM            #0, [X4] }
                v144 += 16;
                _X4 += 64;
              }
              while (v144 < v145);
            }
            if (v137 != v138)
            {
              uint64_t v150 = 2 * v142;
              uint64_t v151 = (int *)(v135 + 4 * v142 * v139);
              float64x2_t v152 = vcvtq_f64_f32(*(float32x2_t *)(v134 + 4 * v150));
              uint64_t v153 = v136;
              uint64_t v154 = v137 - v138;
              do
              {
                int v156 = *v151++;
                int v155 = v156;
                int v157 = *v153++;
                *(float64x2_t *)(v133 + 8 * (2 * (v157 + v155))) = vaddq_f64(*(float64x2_t *)(v133 + 8 * (2 * (v157 + v155))), v152);
                --v154;
              }
              while (v154);
            }
            ++v132;
          }
          while (v132 != v140);
        }
        break;
      case 2:
        uint64_t v158 = *(void **)a2;
        uint64_t v159 = *(void *)(a2 + 8);
        uint64_t v160 = v159 - *(void *)a2;
        if (v159 != *(void *)a2)
        {
          uint64_t v161 = 0;
          uint64_t v162 = *(void *)(a4 + 8);
          uint64_t v163 = *a1;
          uint64_t v164 = *(void *)(a3 + 24);
          unint64_t v165 = *(int **)(a3 + 48);
          uint64_t v167 = *(void *)(*(void *)a3 + 8 * *v158);
          uint64_t v166 = *(void *)(*(void *)a3 + 8 * *v158 + 8);
          uint64_t v168 = v166 - v167;
          unint64_t v169 = v160 >> 3;
          if (v169 <= 1) {
            unint64_t v169 = 1;
          }
          do
          {
            unint64_t v170 = &v158[v161];
            uint64_t v171 = *v170;
            uint64_t v172 = v170[10];
            unint64_t v173 = v172 * v168;
            unint64_t v174 = v172 * v168 + v168;
            _X5 = v163 + 8 * v172;
            __asm { PRFM            #0, [X5] }
            if (v172 * v168 < v174)
            {
              _X4 = v164 + 2 * v168 * v172;
              do
              {
                __asm { PRFM            #0, [X4] }
                v173 += 16;
                _X4 += 32;
              }
              while (v173 < v174);
            }
            if (v166 != v167)
            {
              uint64_t v179 = 2 * v171;
              char v180 = (unsigned __int16 *)(v164 + 2 * v171 * v168);
              float64x2_t v181 = vcvtq_f64_f32(*(float32x2_t *)(v163 + 4 * v179));
              v182 = v165;
              uint64_t v183 = v166 - v167;
              do
              {
                int v185 = *v180++;
                int v184 = v185;
                int v186 = *v182++;
                *(float64x2_t *)(v162 + 8 * (2 * (v186 + v184))) = vaddq_f64(*(float64x2_t *)(v162 + 8 * (2 * (v186 + v184))), v181);
                --v183;
              }
              while (v183);
            }
            ++v161;
          }
          while (v161 != v169);
        }
        break;
      case 1:
        uint64_t v38 = *(void **)a2;
        uint64_t v39 = *(void *)(a2 + 8);
        uint64_t v40 = v39 - *(void *)a2;
        if (v39 != *(void *)a2)
        {
          uint64_t v41 = 0;
          uint64_t v42 = *(void *)(a4 + 8);
          uint64_t v43 = *a1;
          uint64_t v44 = *(void *)(a3 + 24);
          uint64_t v45 = *(int **)(a3 + 48);
          uint64_t v47 = *(void *)(*(void *)a3 + 8 * *v38);
          uint64_t v46 = *(void *)(*(void *)a3 + 8 * *v38 + 8);
          uint64_t v48 = v46 - v47;
          unint64_t v49 = v40 >> 3;
          if (v49 <= 1) {
            unint64_t v49 = 1;
          }
          do
          {
            uint64_t v50 = &v38[v41];
            uint64_t v51 = *v50;
            uint64_t v52 = v50[10];
            unint64_t v53 = v52 * v48;
            unint64_t v54 = v52 * v48 + v48;
            _X3 = v43 + 8 * v52;
            __asm { PRFM            #0, [X3] }
            while (v53 < v54)
            {
              _X3 = v44 + v53;
              __asm { PRFM            #0, [X3] }
              v53 += 16;
            }
            if (v46 != v47)
            {
              uint64_t v59 = 2 * v51;
              int v60 = (unsigned __int8 *)(v44 + v51 * v48);
              float64x2_t v61 = vcvtq_f64_f32(*(float32x2_t *)(v43 + 4 * v59));
              uint64_t v62 = v45;
              uint64_t v63 = v46 - v47;
              do
              {
                int v65 = *v60++;
                int v64 = v65;
                int v66 = *v62++;
                *(float64x2_t *)(v42 + 8 * (2 * (v66 + v64))) = vaddq_f64(*(float64x2_t *)(v42+ 8* (2 * (v66 + v64))), v61);
                --v63;
              }
              while (v63);
            }
            ++v41;
          }
          while (v41 != v49);
        }
        break;
      default:
        v187 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v191);
        dmlc::LogMessageFatal::Entry::Init(v187, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        uint64_t v188 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v191);
        int v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)": ", 2);
        uint64_t v128 = (dmlc::LogMessageFatal *)&v191;
        goto LABEL_76;
    }
  }
}

void sub_22E912DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::HistogramCuts::HistogramCuts(xgboost::common::HistogramCuts *this)
{
  *(unsigned char *)this = 0;
  *((_DWORD *)this + 1) = -1082130432;
  xgboost::HostDeviceVector<float>::HostDeviceVector();
}

void sub_22E912F68()
{
}

_DWORD *XGBoostVersion(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (result) {
    uint64_t *result = 1;
  }
  if (a2) {
    *a2 = 6;
  }
  if (a3) {
    *a3 = 1;
  }
  return result;
}

void xgboost::XGBBuildInfoDevice(xgboost *this, xgboost::Json *a2)
{
  __p[4] = (void *)0x500000000;
  __p[3] = &unk_26E24E3C0;
  char v4 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "USE_CUDA");
  (*(void (**)(void, void **))(**(void **)this + 24))(*(void *)this, __p);
  xgboost::Json::operator=();
}

void sub_22E913174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void XGProxyDMatrixCreate()
{
}

void sub_22E91336C(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v17 = (int)a2;
  (*(void (**)(uint64_t, std::string *, std::runtime_error_vtbl *, const char *))(*(void *)v16 + 56))(v16, a2, a3.__vftable, a3.__imp_.__imp_);
  MEMORY[0x230FA80D0](v15, 0x20C40A4A59CD2);
  if (v17 == 2)
  {
    uint64_t v19 = __cxa_begin_catch(a1);
    unint64_t v20 = (const char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    XGBAPISetLastError(v20);
  }
  else
  {
    if (v17 != 1) {
      _Unwind_Resume(a1);
    }
    unint64_t v21 = __cxa_begin_catch(a1);
    int v22 = (char *)(*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
    std::string::basic_string[abi:ne180100]<0>(&a9, v22);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int v23 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v23);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E913358);
}

void XGProxyDMatrixSetDataCSR(xgboost::data::DMatrixProxy **a1, char *a2, char *a3, char *a4, unsigned int a5)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v20);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v20);
    uint64_t v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v20);
    dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v13 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v20);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: p_m", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v20);
  }
  uint64_t v15 = *a1;
  if (!v15)
  {
    uint64_t v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v20);
    dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    int v17 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v20);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: m", 15);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Current DMatrix type does not support set data.", 47);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v20);
  }
  xgboost::data::DMatrixProxy::SetCSRData(v15, a2, a3, a4, a5, 1);
}

void sub_22E913664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::string *a10, std::runtime_error a11, std::runtime_error a12)
{
  if (a2 == 2)
  {
    uint64_t v12 = __cxa_begin_catch(exception_object);
    uint64_t v13 = (const char *)(*(uint64_t (**)(void *))(*(void *)v12 + 16))(v12);
    XGBAPISetLastError(v13);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(exception_object);
    }
    uint64_t v14 = __cxa_begin_catch(exception_object);
    uint64_t v15 = (char *)(*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
    std::string::basic_string[abi:ne180100]<0>(&a10, v15);
    std::runtime_error::runtime_error(&a12, (const std::string *)&a10);
    a12.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    uint64_t v16 = std::runtime_error::what(&a12);
    XGBAPISetLastError(v16);
    std::runtime_error::~runtime_error(&a12);
    if (SHIBYTE(a11.__imp_.__imp_) < 0) {
      operator delete(a10);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E9135F0);
}

void XGDMatrixCreateFromCSCEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7 = 0;
  uint64_t v6 = &unk_26E2481E0;
  uint64_t v8 = a1;
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t v11 = a4 - 1;
  uint64_t v12 = a6;
  uint64_t v13 = a4 - 1;
  operator new();
}

void sub_22E9138B4(_Unwind_Exception *a1, std::runtime_error a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::string *a7, uint64_t a8, std::runtime_error a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  int v17 = (int)a2.__vftable;
  MEMORY[0x230FA80D0](v16, 0x20C40A4A59CD2, a2.__imp_.__imp_, a3, a4, a5, a6, a7);
  if (v17 == 2)
  {
    uint64_t v19 = __cxa_begin_catch(a1);
    unint64_t v20 = (const char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    XGBAPISetLastError(v20);
  }
  else
  {
    if (v17 != 1) {
      _Unwind_Resume(a1);
    }
    unint64_t v21 = __cxa_begin_catch(a1);
    int v22 = (char *)(*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
    std::string::basic_string[abi:ne180100]<0>(&a11, v22);
    std::runtime_error::runtime_error(&a9, (const std::string *)&a11);
    a9.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int v23 = std::runtime_error::what(&a9);
    XGBAPISetLastError(v23);
    std::runtime_error::~runtime_error(&a9);
    if (a16 < 0) {
      operator delete(a11);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E91389CLL);
}

void XGDMatrixCreateFromMat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = 0;
  uint64_t v3 = &unk_26E248268;
  uint64_t v5 = a1;
  uint64_t v6 = a2;
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  operator new();
}

void sub_22E913AF0(_Unwind_Exception *__p, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::string *a7, uint64_t a8, std::runtime_error __pa, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  MEMORY[0x230FA80D0](v16, 0x20C40A4A59CD2, a3, a4, a5, a6, a7);
  if (a2 == 2)
  {
    uint64_t v19 = __cxa_begin_catch(__p);
    unint64_t v20 = (const char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    XGBAPISetLastError(v20);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(__p);
    }
    unint64_t v21 = __cxa_begin_catch(__p);
    int v22 = (char *)(*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
    std::string::basic_string[abi:ne180100]<0>(&a11, v22);
    std::runtime_error::runtime_error(&__pa, (const std::string *)&a11);
    __pa.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int v23 = std::runtime_error::what(&__pa);
    XGBAPISetLastError(v23);
    std::runtime_error::~runtime_error(&__pa);
    if (a16 < 0) {
      operator delete(a11);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E913AD8);
}

uint64_t XGDMatrixFree(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    MEMORY[0x230FA80D0](a1, 0x20C40A4A59CD2);
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    int v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v6);
  }
  return 0;
}

void sub_22E913CEC(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    int v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1) {
      _Unwind_Resume(a1);
    }
    uint64_t v19 = __cxa_begin_catch(a1);
    unint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    unint64_t v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E913CDCLL);
}

uint64_t XGDMatrixSetFloatInfo(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v11);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v11);
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 8))(*a1, a2, a3, 1, a4);
  return 0;
}

void sub_22E913EDC(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    int v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1) {
      _Unwind_Resume(a1);
    }
    uint64_t v19 = __cxa_begin_catch(a1);
    unint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    unint64_t v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E913EC8);
}

uint64_t XGDMatrixSetUIntInfo(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v11);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v11);
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 8))(*a1, a2, a3, 3, a4);
  return 0;
}

void sub_22E9140D0(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    int v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1) {
      _Unwind_Resume(a1);
    }
    uint64_t v19 = __cxa_begin_catch(a1);
    unint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    unint64_t v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E9140BCLL);
}

uint64_t XGDMatrixSetDenseInfo(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v16);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v11 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v16);
  }
  if ((a5 - 5) <= 0xFFFFFFFB)
  {
    uint64_t v13 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v16);
    dmlc::LogMessageFatal::Entry::Init(v13, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v14 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v16);
    int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: type >= 1 && type <= 4", 36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v16);
  }
  (*(void (**)(void, uint64_t, uint64_t, void, uint64_t))(*(void *)*a1 + 8))(*a1, a2, a3, a5, a4);
  return 0;
}

void sub_22E914328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::string *a10, std::runtime_error a11, std::runtime_error a12)
{
  if (a2 == 2)
  {
    uint64_t v12 = __cxa_begin_catch(exception_object);
    uint64_t v13 = (const char *)(*(uint64_t (**)(void *))(*(void *)v12 + 16))(v12);
    XGBAPISetLastError(v13);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(exception_object);
    }
    uint64_t v14 = __cxa_begin_catch(exception_object);
    int v15 = (char *)(*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
    std::string::basic_string[abi:ne180100]<0>(&a10, v15);
    std::runtime_error::runtime_error(&a12, (const std::string *)&a10);
    a12.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    uint64_t v16 = std::runtime_error::what(&a12);
    XGBAPISetLastError(v16);
    std::runtime_error::~runtime_error(&a12);
    if (SHIBYTE(a11.__imp_.__imp_) < 0) {
      operator delete(a10);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E9142C4);
}

uint64_t XGDMatrixGetFloatInfo(uint64_t (****a1)(void), char *a2, uint64_t *a3, void *a4)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v12);
  }
  uint64_t v10 = (***a1)();
  xgboost::MetaInfo::GetInfo(v10, a2, a3, 1, a4);
  return 0;
}

void sub_22E914538(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    int v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1) {
      _Unwind_Resume(a1);
    }
    uint64_t v19 = __cxa_begin_catch(a1);
    unint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    unint64_t v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E914524);
}

uint64_t XGDMatrixGetUIntInfo(uint64_t (****a1)(void), char *a2, uint64_t *a3, void *a4)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v12);
  }
  uint64_t v10 = (***a1)();
  xgboost::MetaInfo::GetInfo(v10, a2, a3, 3, a4);
  return 0;
}

void sub_22E914730(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    int v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1) {
      _Unwind_Resume(a1);
    }
    uint64_t v19 = __cxa_begin_catch(a1);
    unint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    unint64_t v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E91471CLL);
}

uint64_t XGDMatrixNumRow(uint64_t (****a1)(void), void *a2)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v8);
  }
  uint64_t v6 = (void *)(***a1)();
  uint64_t result = 0;
  *a2 = *v6;
  return result;
}

void sub_22E914910(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    int v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1) {
      _Unwind_Resume(a1);
    }
    uint64_t v19 = __cxa_begin_catch(a1);
    unint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    unint64_t v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E914900);
}

uint64_t XGDMatrixNumCol(uint64_t (****a1)(void), void *a2)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v8);
  }
  uint64_t v6 = (***a1)();
  uint64_t result = 0;
  *a2 = *(void *)(v6 + 8);
  return result;
}

void sub_22E914AF0(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    int v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1) {
      _Unwind_Resume(a1);
    }
    uint64_t v19 = __cxa_begin_catch(a1);
    unint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    unint64_t v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E914AE0);
}

void XGBoosterCreate(long long **a1, uint64_t a2)
{
  memset(v4, 0, sizeof(v4));
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      std::vector<std::shared_ptr<xgboost::DMatrix>>::push_back[abi:ne180100](v4, *a1++);
      --v2;
    }
    while (v2);
  }
  xgboost::Learner::Create();
}

void sub_22E914CAC(_Unwind_Exception *a1, std::runtime_error a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  int v15 = (int)a2.__vftable;
  a9.__vftable = (std::runtime_error_vtbl *)&a10;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (v15 == 2)
  {
    int v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1) {
      _Unwind_Resume(a1);
    }
    uint64_t v19 = __cxa_begin_catch(a1);
    unint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a10, v20);
    std::runtime_error::runtime_error(&a9, (const std::string *)&a10);
    a9.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    unint64_t v21 = std::runtime_error::what(&a9);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a9);
    if (a15 < 0) {
      operator delete(a10);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E914C98);
}

uint64_t std::vector<std::shared_ptr<xgboost::DMatrix>>::push_back[abi:ne180100](char **a1, long long *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - (void)*a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v26 = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(result, v13);
    uint64_t v16 = &v14[16 * v10];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v16 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v16 + 16;
    uint64_t v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18 == *a1)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v16 - 1) = v20;
        v16 -= 16;
        *(void *)uint64_t v18 = 0;
        *((void *)v18 + 1) = 0;
      }
      while (v18 != v19);
      int64x2_t v21 = *(int64x2_t *)a1;
    }
    *a1 = v16;
    a1[1] = v9;
    int64x2_t v24 = v21;
    int v22 = a1[2];
    a1[2] = &v14[16 * v15];
    uint64_t v25 = v22;
    uint64_t v23 = v21.i64[0];
    uint64_t result = std::__split_buffer<std::shared_ptr<xgboost::DMatrix>>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    *(void *)uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

uint64_t XGBoosterFree(uint64_t a1)
{
  if (a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v4);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v4);
  }
  return 0;
}

void sub_22E914FA0(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    long long v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1) {
      _Unwind_Resume(a1);
    }
    uint64_t v19 = __cxa_begin_catch(a1);
    long long v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int64x2_t v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E914F90);
}

uint64_t XGBoosterSetParam(uint64_t a1, char *__s, char *a3)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v11);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v11);
  }
  std::string::basic_string[abi:ne180100]<0>(v11, __s);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  (*(void (**)(uint64_t, void **, void **))(*(void *)a1 + 128))(a1, v11, __p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return 0;
}

void sub_22E9151BC(_Unwind_Exception *__p, int a2, int a3, __int16 a4, char a5, char a6, std::string *a7, uint64_t a8, std::runtime_error __pa, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a11);
  if (a2 == 2)
  {
    uint64_t v18 = __cxa_begin_catch(__p);
    uint64_t v19 = (const char *)(*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
    XGBAPISetLastError(v19);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(__p);
    }
    long long v20 = __cxa_begin_catch(__p);
    int64x2_t v21 = (char *)(*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
    std::string::basic_string[abi:ne180100]<0>(&a11, v21);
    std::runtime_error::runtime_error(&__pa, (const std::string *)&a11);
    __pa.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int v22 = std::runtime_error::what(&__pa);
    XGBAPISetLastError(v22);
    std::runtime_error::~runtime_error(&__pa);
    if (a16 < 0) {
      operator delete(a11);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E9151A8);
}

uint64_t XGBoosterGetNumFeature(uint64_t a1, void *a2)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    unint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v8);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  uint64_t result = 0;
  *a2 = v6;
  return result;
}

void sub_22E9153FC(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    long long v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1) {
      _Unwind_Resume(a1);
    }
    uint64_t v19 = __cxa_begin_catch(a1);
    long long v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int64x2_t v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E9153ECLL);
}

std::__shared_weak_count *XGBoosterUpdateOneIter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v10);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v10);
  }
  uint64_t v8 = (std::__shared_weak_count *)a3[1];
  uint64_t v11 = *a3;
  char v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 40))(a1, a2, &v11);
  uint64_t result = v12;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    return 0;
  }
  return result;
}

void sub_22E915608(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    long long v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1) {
      _Unwind_Resume(a1);
    }
    uint64_t v19 = __cxa_begin_catch(a1);
    long long v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int64x2_t v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E9155F4);
}

uint64_t XGBoosterEvalOneIter(uint64_t a1, uint64_t a2, long long **a3, char **a4, uint64_t a5, void *a6)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v24);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    unint64_t v13 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v24);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  memset(v24, 0, sizeof(v24));
  int64x2_t v21 = 0;
  int v22 = 0;
  for (unint64_t i = 0; a5; --a5)
  {
    std::vector<std::shared_ptr<xgboost::DMatrix>>::push_back[abi:ne180100](v24, *a3);
    int v15 = v22;
    if ((unint64_t)v22 >= i)
    {
      uint64_t v16 = (void *)std::vector<std::string>::__emplace_back_slow_path<char const*&>((uint64_t *)&v21, a4);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v22, *a4);
      uint64_t v16 = v15 + 3;
    }
    int v22 = v16;
    ++a4;
    ++a3;
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, char **, char ***))(*(void *)a1 + 56))(&v19, a1, a2, v24, &v21);
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  *(_OWORD *)uint64_t v14 = v19;
  *(void *)(v14 + 16) = v20;
  if (*(char *)(v14 + 23) >= 0) {
    long long v17 = (void *)v14;
  }
  else {
    long long v17 = *(void **)v14;
  }
  *a6 = v17;
  *(void *)&long long v19 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  int64x2_t v21 = v24;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  return 0;
}

void sub_22E915908(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, std::runtime_error a5, uint64_t a6, std::string *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::runtime_error a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a14);
  if (a2 == 2)
  {
    int64x2_t v21 = __cxa_begin_catch(a1);
    int v22 = (const char *)(*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
    XGBAPISetLastError(v22);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    uint64_t v23 = __cxa_begin_catch(a1);
    int64x2_t v24 = (char *)(*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
    std::string::basic_string[abi:ne180100]<0>(&a14, v24);
    std::runtime_error::runtime_error(&a12, (const std::string *)&a14);
    a12.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    uint64_t v25 = std::runtime_error::what(&a12);
    XGBAPISetLastError(v25);
    std::runtime_error::~runtime_error(&a12);
    if (a19 < 0) {
      operator delete(a14);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E9158ECLL);
}

uint64_t XGBoosterPredict(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, int a5, uint64_t *a6, void *a7)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v24);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    int v15 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v24);
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  uint64_t IterationFromTreeLimit = xgboost::GetIterationFromTreeLimit(a4, a1, v17);
  long long v19 = (uint64_t **)(v16 + 144);
  uint64_t v20 = (std::__shared_weak_count *)a2[1];
  uint64_t v25 = *a2;
  uint64_t v26 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BYTE2(v23) = (a3 & 0x10) != 0;
  BYTE1(v23) = (a3 & 8) != 0;
  LOBYTE(v23) = (a3 & 4) != 0;
  (*(void (**)(uint64_t, uint64_t *, void, uint64_t, void, uint64_t, BOOL, void, int))(*(void *)a1 + 64))(a1, &v25, a3 & 1, v16 + 144, 0, IterationFromTreeLimit, a5 != 0, (a3 >> 1) & 1, v23);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  uint64_t result = 0;
  uint64_t v22 = **v19;
  if ((*v19)[1] == v22) {
    uint64_t v22 = 0;
  }
  *a7 = v22;
  *a6 = ((*v19)[1] - **v19) >> 2;
  return result;
}

void sub_22E915C08(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    long long v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1) {
      _Unwind_Resume(a1);
    }
    long long v19 = __cxa_begin_catch(a1);
    uint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int64x2_t v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E915BECLL);
}

uint64_t xgboost::GetIterationFromTreeLimit(uint64_t this, uint64_t a2, xgboost::Learner *a3)
{
  if (this)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
    operator new();
  }
  return this;
}

void sub_22E9163F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  uint64_t v41 = *(atomic_uint **)(v39 - 72);
  if (v41)
  {
    if (atomic_fetch_add_explicit(v41 + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      (*(void (**)(atomic_uint *))(*(void *)v41 + 8))(v41);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_22E916520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x22E9164D4);
}

void XGBoosterPredictFromDMatrix(uint64_t a1, uint64_t a2, char *__s)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    unsigned int v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Booster has not been initialized or has already been disposed.", 62);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  if (!a2)
  {
    uint64_t v7 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(v7, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v8 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"DMatrix has not been initialized or has already been disposed.", 62);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  strlen(__s);
  xgboost::Json::Load();
}

void sub_22E916EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::runtime_error a15, int a16, __int16 a17, char a18, char a19, std::string *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v29 = *(atomic_uint **)(v26 - 136);
  if (v29 && atomic_fetch_add_explicit(v29 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(atomic_uint *))(*(void *)v29 + 8))(v29);
  }
  if (a2 == 2)
  {
    uint64_t v30 = __cxa_begin_catch(exception_object);
    uint64_t v31 = (const char *)(*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
    XGBAPISetLastError(v31);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(exception_object);
    }
    float64x2_t v32 = __cxa_begin_catch(exception_object);
    uint64_t v33 = (char *)(*(uint64_t (**)(void *))(*(void *)v32 + 16))(v32);
    std::string::basic_string[abi:ne180100]<0>(&a20, v33);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a20);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    uint64_t v34 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v34);
    std::runtime_error::~runtime_error(&a15);
    if (a25 < 0) {
      operator delete(a20);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E916E78);
}

char *xgboost::RequiredArg<xgboost::JsonInteger>(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(a1);
  uint64_t v4 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v3 + 16), (const void **)a2);
  uint64_t v5 = v4;
  if (v3 + 24 == (char *)v4 || (unsigned int v6 = *(_DWORD **)(v4 + 56), v6[3] == 6))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api_utils.h");
    uint64_t v8 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    int v10 = *(char *)(a2 + 23);
    if (v10 >= 0) {
      uint64_t v11 = (const void *)a2;
    }
    else {
      uint64_t v11 = *(const void **)a2;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
    for (uint64_t i = 0; i != 27; ++i)
      std::ostream::put();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
    unsigned int v6 = *(_DWORD **)(v5 + 56);
  }
  return (char *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v6) + 16;
}

void sub_22E917304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

char *xgboost::RequiredArg<xgboost::JsonBoolean>(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(a1);
  uint64_t v4 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v3 + 16), (const void **)a2);
  uint64_t v5 = v4;
  if (v3 + 24 == (char *)v4 || (unsigned int v6 = *(_DWORD **)(v4 + 56), v6[3] == 6))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api_utils.h");
    uint64_t v8 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    int v10 = *(char *)(a2 + 23);
    if (v10 >= 0) {
      uint64_t v11 = (const void *)a2;
    }
    else {
      uint64_t v11 = *(const void **)a2;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
    for (uint64_t i = 0; i != 27; ++i)
      std::ostream::put();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
    unsigned int v6 = *(_DWORD **)(v5 + 56);
  }
  return (char *)xgboost::Cast<xgboost::JsonBoolean const,xgboost::Value const>(v6) + 16;
}

void sub_22E917430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t XGBoosterPredictFromCUDAArray(uint64_t a1)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v6);
  }
  uint64_t v3 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  dmlc::LogMessageFatal::Entry::Init(v3, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../common/common.h");
  uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  return 0;
}

void sub_22E9174E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  if (a2 == 2)
  {
    char v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    long long v19 = __cxa_begin_catch(a1);
    uint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&__p, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&__p);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int64x2_t v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E9174D8);
}

uint64_t XGBoosterPredictFromCUDAColumnar(uint64_t a1)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v6);
  }
  uint64_t v3 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  dmlc::LogMessageFatal::Entry::Init(v3, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../common/common.h");
  uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  return 0;
}

void sub_22E9176DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  if (a2 == 2)
  {
    char v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    long long v19 = __cxa_begin_catch(a1);
    uint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&__p, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&__p);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int64x2_t v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E9176CCLL);
}

uint64_t XGBoosterLoadModel(uint64_t a1, char *__s)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v16);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v16);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  xgboost::common::FileExtension((uint64_t)__p, 1, &v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v6 = v16.__r_.__value_.__l.__size_ == 4 && *(_DWORD *)v16.__r_.__value_.__l.__data_ == 1852797802;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v6 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) == 4 && LODWORD(v16.__r_.__value_.__l.__data_) == 1852797802;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if (v6)
    {
LABEL_13:
      XGBoosterLoadModel::$_0::operator()(&v16, __s);
      xgboost::Json::Load();
    }
  }
  else if (v6)
  {
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, __s);
  xgboost::common::FileExtension((uint64_t)v12, 1, &v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v8 = v16.__r_.__value_.__l.__size_ == 3
      && *(_WORD *)v16.__r_.__value_.__l.__data_ == 25205
      && *(unsigned char *)(v16.__r_.__value_.__r.__words[0] + 2) == 106;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v8 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) == 3
      && LOWORD(v16.__r_.__value_.__l.__data_) == 25205
      && v16.__r_.__value_.__s.__data_[2] == 106;
  }
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if (v8)
    {
LABEL_35:
      XGBoosterLoadModel::$_0::operator()(&v16, __s);
      xgboost::Json::Load();
    }
  }
  else if (v8)
  {
    goto LABEL_35;
  }
  uint64_t v10 = dmlc::Stream::Create((dmlc::Stream *)__s, "r", 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  return 0;
}

void sub_22E917B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v24 = v22;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
  }
  if (a2 == 2)
  {
    uint64_t v27 = __cxa_begin_catch(exception_object);
    uint64_t v28 = (const char *)(*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
    XGBAPISetLastError(v28);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(exception_object);
    }
    uint64_t v29 = __cxa_begin_catch(exception_object);
    uint64_t v30 = (char *)(*(uint64_t (**)(void *))(*(void *)v29 + 16))(v29);
    std::string::basic_string[abi:ne180100]<0>((void *)(v23 - 56), v30);
    std::runtime_error::runtime_error(&a10, (const std::string *)(v23 - 56));
    a10.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    uint64_t v31 = std::runtime_error::what(&a10);
    XGBAPISetLastError(v31);
    std::runtime_error::~runtime_error(&a10);
    if (*(char *)(v23 - 33) < 0) {
      operator delete(*(void **)(v23 - 56));
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E917B50);
}

char *XGBoosterLoadModel::$_0::operator()(std::string *a1, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  xgboost::common::LoadSequentialFile((char *)__p, 0, a1);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  unint64_t size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    unint64_t size = a1->__r_.__value_.__l.__size_;
  }
  unint64_t v9 = size;
  if (size < 3) {
    dmlc::LogCheckFormat<unsigned long,int>();
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = (char *)a1;
  }
  else {
    uint64_t v4 = (char *)a1->__r_.__value_.__r.__words[0];
  }
  LOBYTE(v9) = 123;
  if (*v4 != 123) {
    dmlc::LogCheckFormat<char,char>(v4, (char *)&v9);
  }
  std::string::size_type v5 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  BOOL v6 = (v5 & 0x80u) != 0;
  if ((v5 & 0x80u) != 0) {
    std::string::size_type v5 = a1->__r_.__value_.__l.__size_;
  }
  if (v6) {
    char v7 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else {
    char v7 = a1;
  }
  LOBYTE(v9) = 125;
  uint64_t result = (char *)v7 + v5 - 2;
  if (*result != 125) {
    dmlc::LogCheckFormat<char,char>(result, (char *)&v9);
  }
  return result;
}

void sub_22E918044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XGBoosterSaveModel(uint64_t a1, dmlc::Stream *this)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v16);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    std::string::size_type v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v16);
  }
  uint64_t v6 = dmlc::Stream::Create(this, "w", 0);
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
  xgboost::common::FileExtension((uint64_t)__p, 1, &v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v7 = v16.__r_.__value_.__l.__size_ == 4 && *(_DWORD *)v16.__r_.__value_.__l.__data_ == 1852797802;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v7 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) == 4 && LODWORD(v16.__r_.__value_.__l.__data_) == 1852797802;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_35:
      v16.__r_.__value_.__l.__size_ = 0x300000000;
      v17[0] = 0;
      v17[1] = 0;
      v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26E24E128;
      v16.__r_.__value_.__r.__words[2] = (std::string::size_type)v17;
      operator new();
    }
  }
  else if (v7)
  {
    goto LABEL_35;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, (char *)this);
  xgboost::common::FileExtension((uint64_t)v12, 1, &v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v9 = v16.__r_.__value_.__l.__size_ == 3
      && *(_WORD *)v16.__r_.__value_.__l.__data_ == 25205
      && *(unsigned char *)(v16.__r_.__value_.__r.__words[0] + 2) == 106;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v9 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) == 3
      && LOWORD(v16.__r_.__value_.__l.__data_) == 25205
      && v16.__r_.__value_.__s.__data_[2] == 106;
  }
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if (v9) {
      goto LABEL_35;
    }
  }
  else if (v9)
  {
    goto LABEL_35;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, v6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  return 0;
}

void sub_22E918524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::string *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 24))(v28);
  }
  if (a2 == 2)
  {
    uint64_t v31 = __cxa_begin_catch(exception_object);
    float64x2_t v32 = (const char *)(*(uint64_t (**)(void *))(*(void *)v31 + 16))(v31);
    XGBAPISetLastError(v32);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(exception_object);
    }
    uint64_t v33 = __cxa_begin_catch(exception_object);
    uint64_t v34 = (char *)(*(uint64_t (**)(void *))(*(void *)v33 + 16))(v33);
    std::string::basic_string[abi:ne180100]<0>(&a23, v34);
    std::runtime_error::runtime_error(&a9, (const std::string *)&a23);
    a9.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int v35 = std::runtime_error::what(&a9);
    XGBAPISetLastError(v35);
    std::runtime_error::~runtime_error(&a9);
    if (a28 < 0) {
      operator delete(a23);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E918504);
}

uint64_t XGBoosterLoadModelFromBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v9);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    BOOL v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v9);
  }
  v9[0] = &unk_26E248458;
  v9[1] = a2;
  unint64_t v9[2] = a3;
  uint64_t v9[3] = 0;
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 104))(a1, v9);
  return 0;
}

void sub_22E91887C(_Unwind_Exception *a1, int a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a10);
  if (a2 == 2)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    long long v19 = __cxa_begin_catch(a1);
    uint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a10, v20);
    std::runtime_error::runtime_error(&a9, (const std::string *)&a10);
    a9.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int64x2_t v21 = std::runtime_error::what(&a9);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a9);
    if (a15 < 0) {
      operator delete(a10);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E918868);
}

void XGBoosterSaveModelToBuffer(uint64_t a1, char *__s)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  strlen(__s);
  xgboost::Json::Load();
}

void sub_22E91912C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error __p, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, std::string *a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (atomic_fetch_add_explicit(v20 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(atomic_uint *))(*(void *)v20 + 8))(v20);
  }
  if (a13 < 0) {
    operator delete(__p.__vftable);
  }
  uint64_t v23 = a15;
  if (a15 && atomic_fetch_add_explicit((atomic_uint *volatile)(a15 + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  if (a2 == 2)
  {
    uint64_t v24 = __cxa_begin_catch(exception_object);
    uint64_t v25 = (const char *)(*(uint64_t (**)(void *))(*(void *)v24 + 16))(v24);
    XGBAPISetLastError(v25);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(exception_object);
    }
    uint64_t v26 = __cxa_begin_catch(exception_object);
    uint64_t v27 = (char *)(*(uint64_t (**)(void *))(*(void *)v26 + 16))(v26);
    std::string::basic_string[abi:ne180100]<0>(&a17, v27);
    std::runtime_error::runtime_error(&__p, (const std::string *)&a17);
    __p.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    uint64_t v28 = std::runtime_error::what(&__p);
    XGBAPISetLastError(v28);
    std::runtime_error::~runtime_error(&__p);
    if (SHIBYTE(a19) < 0) {
      operator delete(a17);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E918E84);
}

uint64_t XGBoosterSerializeToBuffer(void *a1, void *a2, uint64_t *a3)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    BOOL v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v12);
  }
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 224))(a1);
  std::string::resize((std::string *)v8, 0, 0);
  v12[0] = &unk_26E2482F0;
  v12[1] = v8;
  void v12[2] = 0;
  (*(void (**)(void *))(*a1 + 32))(a1);
  (*(void (**)(void *, void *))(a1[2] + 24))(a1 + 2, v12);
  if (*(char *)(v8 + 23) < 0)
  {
    if (*(void *)(v8 + 8)) {
      uint64_t v9 = *(void *)v8;
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else if (*(unsigned char *)(v8 + 23))
  {
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t result = 0;
  *a3 = v9;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 23);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(v8 + 8);
  }
  *a2 = v11;
  return result;
}

void sub_22E9195B8(_Unwind_Exception *a1, std::runtime_error a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  int v15 = (int)a2.__vftable;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a10);
  if (v15 == 2)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1) {
      _Unwind_Resume(a1);
    }
    long long v19 = __cxa_begin_catch(a1);
    uint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a10, v20);
    std::runtime_error::runtime_error(&a9, (const std::string *)&a10);
    a9.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int64x2_t v21 = std::runtime_error::what(&a9);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a9);
    if (a15 < 0) {
      operator delete(a10);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E9195A4);
}

uint64_t XGBoosterUnserializeFromBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v9);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    BOOL v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v9);
  }
  v9[0] = &unk_26E248458;
  v9[1] = a2;
  unint64_t v9[2] = a3;
  uint64_t v9[3] = 0;
  (*(void (**)(uint64_t, void *))(*(void *)(a1 + 16) + 16))(a1 + 16, v9);
  return 0;
}

void sub_22E9197C4(_Unwind_Exception *a1, int a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a10);
  if (a2 == 2)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    long long v19 = __cxa_begin_catch(a1);
    uint64_t v20 = (char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a10, v20);
    std::runtime_error::runtime_error(&a9, (const std::string *)&a10);
    a9.__vftable = (std::runtime_error_vtbl *)&unk_26E245508;
    int64x2_t v21 = std::runtime_error::what(&a9);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a9);
    if (a15 < 0) {
      operator delete(a10);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x22E9197B0);
}

uint64_t xgboost::data::DMatrixProxy::Info(xgboost::data::DMatrixProxy *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

void xgboost::DMatrix::SetInfo(uint64_t a1, char *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  int v11 = (**(uint64_t (***)(uint64_t))a1)(a1);

  xgboost::MetaInfo::SetInfo(v11, v10, a2, a3, a4, a5);
}

void xgboost::DMatrix::SetInfo(uint64_t a1, const char *a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  (**(void (***)(uint64_t))a1)(a1);
  strlen(a2);

  xgboost::MetaInfo::SetInfo();
}

uint64_t xgboost::data::DMatrixProxy::Ctx(xgboost::data::DMatrixProxy *this)
{
  return (uint64_t)this + 248;
}

uint64_t xgboost::data::DMatrixProxy::SingleColBlock(xgboost::data::DMatrixProxy *this)
{
  return 1;
}

void xgboost::data::DMatrixProxy::~DMatrixProxy(xgboost::data::DMatrixProxy *this)
{
  *(void *)this = &unk_26E248138;
  uint64_t v2 = (void (**)(char *))*((void *)this + 27);
  if (v2)
  {
    uint64_t v3 = *v2;
    if (v3) {
      v3((char *)this + 224);
    }
    *((void *)this + 27) = 0;
  }
  xgboost::MetaInfo::~MetaInfo((xgboost::data::DMatrixProxy *)((char *)this + 8));
}

{
  void (**v2)(char *);
  void (*v3)(char *);

  *(void *)this = &unk_26E248138;
  uint64_t v2 = (void (**)(char *))*((void *)this + 27);
  if (v2)
  {
    uint64_t v3 = *v2;
    if (v3) {
      v3((char *)this + 224);
    }
    *((void *)this + 27) = 0;
  }
  xgboost::MetaInfo::~MetaInfo((xgboost::data::DMatrixProxy *)((char *)this + 8));
}

uint64_t xgboost::data::DMatrixProxy::Slice()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../data/proxy_dmatrix.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Slicing DMatrix is not supported for Proxy DMatrix.", 51);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_22E919C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::data::DMatrixProxy::GetRowBatches(xgboost::data::DMatrixProxy *this)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../data/proxy_dmatrix.h");
  uint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v3, 0);
}

void sub_22E919C8C(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

void xgboost::data::DMatrixProxy::GetColumnBatches(xgboost::data::DMatrixProxy *this)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../data/proxy_dmatrix.h");
  uint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
  xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(&v3, 0);
}

void sub_22E919D18(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

void xgboost::data::DMatrixProxy::GetSortedColumnBatches(xgboost::data::DMatrixProxy *this)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../data/proxy_dmatrix.h");
  uint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
  xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(&v3, 0);
}

void sub_22E919DA4(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

void xgboost::data::DMatrixProxy::GetEllpackBatches()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../data/proxy_dmatrix.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  xgboost::BatchIterator<xgboost::EllpackPage>::BatchIterator(&v2, 0);
}

void sub_22E919E30(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

void xgboost::data::DMatrixProxy::GetGradientIndex()
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../data/proxy_dmatrix.h");
  uint64_t v1 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v2, 0);
}

void sub_22E919EBC(_Unwind_Exception *a1)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::DMatrixProxy::EllpackExists(xgboost::data::DMatrixProxy *this)
{
  return 1;
}

uint64_t xgboost::data::DMatrixProxy::SparsePageExists(xgboost::data::DMatrixProxy *this)
{
  return 0;
}

void xgboost::MetaInfo::MetaInfo(xgboost::MetaInfo *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  xgboost::HostDeviceVector<float>::HostDeviceVector();
}

void sub_22E919FFC()
{
}

void sub_22E91A088()
{
}

void xgboost::MetaInfo::~MetaInfo(xgboost::MetaInfo *this)
{
  long long v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }
  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

void xgboost::BatchIterator<xgboost::EllpackPage>::BatchIterator(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,void>((uint64_t)a1, a2);
}

void sub_22E91A160(_Unwind_Exception *exception_object)
{
  char v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,void>(&v2, a2);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22E91A228(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::EllpackPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,xgboost::BatchIteratorImpl<xgboost::EllpackPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::EllpackPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,xgboost::BatchIteratorImpl<xgboost::EllpackPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::EllpackPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,xgboost::BatchIteratorImpl<xgboost::EllpackPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,void>((uint64_t)a1, a2);
}

void sub_22E91A33C(_Unwind_Exception *exception_object)
{
  char v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,void>(&v2, a2);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22E91A404(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void xgboost::data::CSCAdapter::~CSCAdapter(xgboost::data::CSCAdapter *this)
{
}

uint64_t xgboost::data::detail::SingleBatchDataIter<xgboost::data::CSCAdapterBatch>::BeforeFirst(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

BOOL xgboost::data::detail::SingleBatchDataIter<xgboost::data::CSCAdapterBatch>::Next(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (!v1) {
    *(_DWORD *)(a1 + 8) = 1;
  }
  return v1 == 0;
}

uint64_t xgboost::data::CSCAdapter::Value(xgboost::data::CSCAdapter *this)
{
  return (uint64_t)this + 16;
}

void xgboost::data::DenseAdapter::~DenseAdapter(xgboost::data::DenseAdapter *this)
{
}

uint64_t xgboost::data::detail::SingleBatchDataIter<xgboost::data::DenseAdapterBatch>::BeforeFirst(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

BOOL xgboost::data::detail::SingleBatchDataIter<xgboost::data::DenseAdapterBatch>::Next(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (!v1) {
    *(_DWORD *)(a1 + 8) = 1;
  }
  return v1 == 0;
}

uint64_t xgboost::data::DenseAdapter::Value(xgboost::data::DenseAdapter *this)
{
  return (uint64_t)this + 16;
}

void *xgboost::Cast<xgboost::JsonString const,xgboost::Value>(xgboost::Value *a1)
{
  if (*((_DWORD *)a1 + 3))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    char v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    xgboost::Value::TypeStr(a1, &v21);
    char v4 = std::string::insert(&v21, 0, "Invalid cast, from ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    uint64_t v6 = std::string::append(&v22, " to ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v15[0] = &unk_26E24E210;
    v15[1] = 0;
    std::string v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
    if ((v20 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v9 = v20;
    }
    else {
      std::string::size_type v9 = (std::string::size_type)__p[1];
    }
    int v10 = std::string::append(&v23, (const std::string::value_type *)v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    int64_t v25 = v10->__r_.__value_.__r.__words[2];
    long long v24 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v25 >= 0) {
      uint64_t v12 = &v24;
    }
    else {
      uint64_t v12 = (long long *)v24;
    }
    if (v25 >= 0) {
      uint64_t v13 = HIBYTE(v25);
    }
    else {
      uint64_t v13 = *((void *)&v24 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v12, v13);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
    v15[0] = &unk_26E24E210;
    if (SHIBYTE(v18) < 0) {
      operator delete(v16);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
  }
  else
  {
  }
}

void sub_22E91A7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (*(char *)(v35 - 73) < 0) {
    operator delete(*(void **)(v35 - 96));
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v35 - 33));
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonBoolean const,xgboost::Value const>(_DWORD *a1)
{
  if (a1[3] == 5)
  {
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    char v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    xgboost::Value::TypeStr((xgboost::Value *)a1, &v19);
    long long v5 = std::string::insert(&v19, 0, "Invalid cast, from ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    long long v7 = std::string::append(&v20, " to ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v15[1] = 0x500000000;
    v15[0] = &unk_26E24E3C0;
    char v16 = 0;
    xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
    if ((v18 & 0x80u) == 0) {
      std::string::size_type v9 = __p;
    }
    else {
      std::string::size_type v9 = (void **)__p[0];
    }
    if ((v18 & 0x80u) == 0) {
      std::string::size_type v10 = v18;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    long long v11 = std::string::append(&v21, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v23 = v11->__r_.__value_.__r.__words[2];
    long long v22 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v23 >= 0) {
      uint64_t v13 = &v22;
    }
    else {
      uint64_t v13 = (long long *)v22;
    }
    if (v23 >= 0) {
      uint64_t v14 = HIBYTE(v23);
    }
    else {
      uint64_t v14 = *((void *)&v22 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)v22);
    }
    if ((char)v18 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
  }
}

void sub_22E91AAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 73) < 0) {
    operator delete(*(void **)(v30 - 96));
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v30 - 33));
  _Unwind_Resume(a1);
}

void dmlc::LogCheckFormat<int,unsigned long>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)" (", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" vs. ", 5);
  int v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)") ", 2);
  operator new();
}

void sub_22E91AD04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x230FA80D0](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t rabit::utils::MemoryFixSizeBuffer::Read(rabit::utils::MemoryFixSizeBuffer *this, void *__dst, size_t a3)
{
  uint64_t v4 = *((void *)this + 3);
  if (*((void *)this + 2) - v4 >= a3) {
    size_t v5 = a3;
  }
  else {
    size_t v5 = *((void *)this + 2) - v4;
  }
  if (v5)
  {
    memcpy(__dst, (const void *)(*((void *)this + 1) + v4), v5);
    uint64_t v4 = *((void *)this + 3);
  }
  *((void *)this + 3) = v4 + v5;
  return v5;
}

void *rabit::utils::MemoryFixSizeBuffer::Write(void *this, const void *a2, size_t a3)
{
  if (a3)
  {
    uint64_t v5 = (uint64_t)this;
    rabit::utils::Assert((rabit::utils *)(this[3] + a3 <= this[2]), "write position exceed fixed buffer size", (const char *)a3);
    this = memcpy((void *)(*(void *)(v5 + 8) + *(void *)(v5 + 24)), a2, a3);
    *(void *)(v5 + 24) += a3;
  }
  return this;
}

void rabit::utils::MemoryFixSizeBuffer::~MemoryFixSizeBuffer(rabit::utils::MemoryFixSizeBuffer *this)
{
}

uint64_t rabit::utils::MemoryFixSizeBuffer::Seek(uint64_t this, uint64_t a2)
{
  if (a2 == -1) {
    a2 = *(void *)(this + 16);
  }
  *(void *)(this + 24) = a2;
  return this;
}

uint64_t rabit::utils::MemoryFixSizeBuffer::Tell(rabit::utils::MemoryFixSizeBuffer *this)
{
  return *((void *)this + 3);
}

BOOL rabit::utils::MemoryFixSizeBuffer::AtEnd(rabit::utils::MemoryFixSizeBuffer *this)
{
  return *((void *)this + 3) == *((void *)this + 2);
}

void rabit::utils::Assert(rabit::utils *this, const char *a2, const char *a3, ...)
{
  va_start(va, a3);
  if ((this & 1) == 0)
  {
    uint64_t v4 = operator new(0x1008uLL);
    bzero(v4, 0x1001uLL);
    va_copy(v8, va);
    vsnprintf((char *)v4, 0x1000uLL, a2, va);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/rabit/internal/utils.h");
    long long v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, 4096);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    operator delete(v4);
  }
}

void sub_22E91AEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  operator delete(v12);
  _Unwind_Resume(a1);
}

size_t rabit::utils::MemoryBufferStream::Read(rabit::utils::MemoryBufferStream *this, void *a2, const char *a3)
{
  size_t v3 = (size_t)a3;
  uint64_t v6 = *((void *)this + 1);
  if (*(char *)(v6 + 23) < 0) {
    unint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    unint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  rabit::utils::Assert((rabit::utils *)(*((void *)this + 2) <= v7), "read can not have position excceed buffer length", a3);
  va_list v8 = (uint64_t **)*((void *)this + 1);
  if ((*((char *)v8 + 23) & 0x80000000) == 0)
  {
    uint64_t v9 = *((void *)this + 2);
    if ((unint64_t)*((unsigned __int8 *)v8 + 23) - v9 < v3) {
      size_t v3 = *((unsigned __int8 *)v8 + 23) - v9;
    }
    if (!v3) {
      goto LABEL_14;
    }
LABEL_13:
    memcpy(a2, (char *)v8 + v9, v3);
    uint64_t v9 = *((void *)this + 2);
    goto LABEL_14;
  }
  uint64_t v9 = *((void *)this + 2);
  if ((unint64_t)v8[1] - v9 < v3) {
    size_t v3 = (size_t)v8[1] - v9;
  }
  if (v3)
  {
    va_list v8 = (uint64_t **)*v8;
    goto LABEL_13;
  }
LABEL_14:
  *((void *)this + 2) = v3 + v9;
  return v3;
}

char *rabit::utils::MemoryBufferStream::Write(char *this, const void *__src, size_t __n)
{
  if (__n)
  {
    uint64_t v5 = this;
    unint64_t v7 = this + 8;
    uint64_t v6 = (std::string *)*((void *)this + 1);
    std::string::size_type v8 = *((void *)v7 + 1) + __n;
    int v9 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
    if (v9 < 0) {
      std::string::size_type size = v6->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    }
    if (v8 > size)
    {
      std::string::resize(v6, v8, 0);
      uint64_t v6 = (std::string *)v5[1];
      LOBYTE(v9) = *((unsigned char *)&v6->__r_.__value_.__s + 23);
    }
    if ((v9 & 0x80) != 0) {
      uint64_t v6 = (std::string *)v6->__r_.__value_.__r.__words[0];
    }
    this = (char *)memcpy((char *)v6 + v5[2], __src, __n);
    v5[2] += __n;
  }
  return this;
}

void rabit::utils::MemoryBufferStream::~MemoryBufferStream(rabit::utils::MemoryBufferStream *this)
{
}

uint64_t rabit::utils::MemoryBufferStream::Seek(uint64_t this, uint64_t a2)
{
  *(void *)(this + 16) = a2;
  return this;
}

uint64_t rabit::utils::MemoryBufferStream::Tell(rabit::utils::MemoryBufferStream *this)
{
  return *((void *)this + 2);
}

BOOL rabit::utils::MemoryBufferStream::AtEnd(rabit::utils::MemoryBufferStream *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (*(char *)(v1 + 23) < 0) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  }
  return *((void *)this + 2) == v2;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const*&>(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    std::string::size_type v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  }
  else {
    std::string::size_type v10 = 0;
  }
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_22E91B19C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(_DWORD *a1)
{
  if (a1[3] == 2)
  {
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    unint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
    xgboost::Value::TypeStr((xgboost::Value *)a1, &v18);
    unint64_t v5 = std::string::insert(&v18, 0, "Invalid cast, from ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v19, " to ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v15[1] = 0x200000000;
    v15[0] = &unk_26E24E300;
    void v15[2] = 0;
    xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
    if ((v17 & 0x80u) == 0) {
      unint64_t v9 = __p;
    }
    else {
      unint64_t v9 = (void **)__p[0];
    }
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v10 = v17;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    uint64_t v11 = std::string::append(&v20, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v22 = v11->__r_.__value_.__r.__words[2];
    long long v21 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v22 >= 0) {
      uint64_t v13 = &v21;
    }
    else {
      uint64_t v13 = (long long *)v21;
    }
    if (v22 >= 0) {
      uint64_t v14 = HIBYTE(v22);
    }
    else {
      uint64_t v14 = *((void *)&v21 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
    if (SHIBYTE(v22) < 0) {
      operator delete((void *)v21);
    }
    if ((char)v17 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
  }
}

void sub_22E91B40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 73) < 0) {
    operator delete(*(void **)(v30 - 96));
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v30 - 33));
  _Unwind_Resume(a1);
}

void std::shared_ptr<xgboost::DMatrix>::shared_ptr[abi:ne180100]<xgboost::DMatrix,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22E91B508(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 56))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::DMatrix *,std::shared_ptr<xgboost::DMatrix>::__shared_ptr_default_delete<xgboost::DMatrix,xgboost::DMatrix>,std::allocator<xgboost::DMatrix>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_pointer<xgboost::DMatrix *,std::shared_ptr<xgboost::DMatrix>::__shared_ptr_default_delete<xgboost::DMatrix,xgboost::DMatrix>,std::allocator<xgboost::DMatrix>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::DMatrix *,std::shared_ptr<xgboost::DMatrix>::__shared_ptr_default_delete<xgboost::DMatrix,xgboost::DMatrix>,std::allocator<xgboost::DMatrix>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<xgboost::data::DMatrixProxy *,std::shared_ptr<xgboost::DMatrix>::__shared_ptr_default_delete<xgboost::DMatrix,xgboost::data::DMatrixProxy>,std::allocator<xgboost::data::DMatrixProxy>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230FA80D0);
}

uint64_t std::__shared_ptr_pointer<xgboost::data::DMatrixProxy *,std::shared_ptr<xgboost::DMatrix>::__shared_ptr_default_delete<xgboost::DMatrix,xgboost::data::DMatrixProxy>,std::allocator<xgboost::data::DMatrixProxy>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::data::DMatrixProxy *,std::shared_ptr<xgboost::DMatrix>::__shared_ptr_default_delete<xgboost::DMatrix,xgboost::data::DMatrixProxy>,std::allocator<xgboost::data::DMatrixProxy>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<xgboost::DMatrix>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<xgboost::DMatrix>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::__split_buffer<std::shared_ptr<xgboost::DMatrix>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void dmlc::io::LocalFileSystem::GetPathInfo(const std::string *a1@<X1>, uint64_t a2@<X8>)
{
  v27[3] = *(void **)MEMORY[0x263EF8340];
  *(_DWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::operator=((std::string *)a2, a1);
  std::string::operator=((std::string *)(a2 + 24), a1 + 1);
  std::string::operator=((std::string *)(a2 + 48), a1 + 2);
  if ((a1[2].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    data = (const char *)&a1[2];
  }
  else {
    data = a1[2].__r_.__value_.__l.__data_;
  }
  if (stat(data, &v26) != -1)
  {
LABEL_16:
    *(void *)(a2 + 72) = v26.st_size;
    *(_DWORD *)(a2 + 80) = (v26.st_mode & 0xF000) == 0x4000;
    return;
  }
  int v6 = *__error();
  if ((a1[2].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = (const char *)&a1[2];
  }
  else {
    uint64_t v7 = a1[2].__r_.__value_.__l.__data_;
  }
  if (lstat(v7, &v26))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v27);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/local_filesys.cc");
    unint64_t v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v27);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LocalFileSystem.GetPathInfo: ", 29);
    int v11 = SHIBYTE(a1[2].__r_.__value_.__r.__words[2]);
    if (v11 >= 0) {
      long long v12 = a1 + 2;
    }
    else {
      long long v12 = (const std::string *)a1[2].__r_.__value_.__l.__data_;
    }
    if (v11 >= 0) {
      uint64_t size = HIBYTE(a1[2].__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t size = a1[2].__r_.__value_.__l.__size_;
    }
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, size);
    int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" error: ", 8);
    char v16 = strerror(v6);
    size_t v17 = strlen(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v27);
    goto LABEL_16;
  }
  *(void *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 80) = 0;
  dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/local_filesys.cc");
  std::string v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27[0], (uint64_t)"LocalFileSystem.GetPathInfo: detected symlink ", 46);
  int v19 = SHIBYTE(a1[2].__r_.__value_.__r.__words[2]);
  if (v19 >= 0) {
    std::string v20 = a1 + 2;
  }
  else {
    std::string v20 = (const std::string *)a1[2].__r_.__value_.__l.__data_;
  }
  if (v19 >= 0) {
    uint64_t v21 = HIBYTE(a1[2].__r_.__value_.__r.__words[2]);
  }
  else {
    uint64_t v21 = a1[2].__r_.__value_.__l.__size_;
  }
  int64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
  char v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" error: ", 8);
  char v24 = strerror(v6);
  size_t v25 = strlen(v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
  dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v27);
}

void sub_22E91B9B8(_Unwind_Exception *a1)
{
  dmlc::io::FileInfo::~FileInfo(v1);
  _Unwind_Resume(a1);
}

void dmlc::io::FileInfo::~FileInfo(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t dmlc::io::LocalFileSystem::ListDirectory(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v48 = (std::string *)(a2 + 48);
  if (*(char *)(a2 + 71) >= 0) {
    int v6 = (const char *)(a2 + 48);
  }
  else {
    int v6 = *(const char **)(a2 + 48);
  }
  uint64_t v7 = opendir(v6);
  if (!v7)
  {
    int v8 = *__error();
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v59);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/local_filesys.cc");
    std::string::size_type v10 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v59);
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"LocalFileSystem.ListDirectory ", 30);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, (const void **)(a2 + 24), (uint64_t)&v49);
    char v12 = *(unsigned char *)(a2 + 71);
    if (v12 >= 0) {
      uint64_t v13 = (const std::string::value_type *)v48;
    }
    else {
      uint64_t v13 = *(const std::string::value_type **)(a2 + 48);
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *(unsigned __int8 *)(a2 + 71);
    }
    else {
      std::string::size_type v14 = *(void *)(a2 + 56);
    }
    int v15 = std::string::append(&v49, v13, v14);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, size);
    std::string v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" error: ", 8);
    uint64_t v21 = strerror(v8);
    size_t v22 = strlen(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v59);
  }
  uint64_t v24 = *a3;
  uint64_t v23 = a3[1];
  if (v23 != *a3)
  {
    do
    {
      v23 -= 88;
      std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100]((uint64_t)(a3 + 2), v23);
    }
    while (v23 != v24);
  }
  a3[1] = v24;
  for (uint64_t i = readdir(v7); i; uint64_t i = readdir(v7))
  {
    d_name = i->d_name;
    if (strcmp(i->d_name, ".") && strcmp(d_name, ".."))
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __p = *(std::string *)a2;
      }
      if (*(char *)(a2 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
      }
      else {
        std::string v57 = *(std::string *)(a2 + 24);
      }
      if (*(char *)(a2 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
      }
      else {
        std::string v58 = *v48;
      }
      std::string::size_type v27 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        uint64_t v28 = &v58;
      }
      else
      {
        std::string::size_type v27 = v58.__r_.__value_.__l.__size_;
        uint64_t v28 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      if (v28->__r_.__value_.__s.__data_[v27 - 1] != 47) {
        std::string::push_back(&v58, 47);
      }
      std::string::append(&v58, d_name);
      (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(void *)a1 + 16))(&v49, a1, &__p);
      unint64_t v29 = a3[1];
      unint64_t v30 = a3[2];
      if (v29 >= v30)
      {
        uint64_t v35 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v29 - *a3) >> 3);
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) > 0x2E8BA2E8BA2E8BALL) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v37 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v30 - *a3) >> 3);
        if (2 * v37 > v36) {
          unint64_t v36 = 2 * v37;
        }
        if (v37 >= 0x1745D1745D1745DLL) {
          unint64_t v38 = 0x2E8BA2E8BA2E8BALL;
        }
        else {
          unint64_t v38 = v36;
        }
        v59[4] = a3 + 2;
        if (v38) {
          uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>((uint64_t)(a3 + 2), v38);
        }
        else {
          uint64_t v39 = 0;
        }
        uint64_t v40 = &v39[88 * v35];
        v59[0] = v39;
        v59[1] = v40;
        v59[3] = &v39[88 * v38];
        long long v41 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
        *((void *)v40 + 2) = *((void *)&v49.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v40 = v41;
        memset(&v49, 0, sizeof(v49));
        long long v42 = v50;
        *((void *)v40 + 5) = v51;
        *(_OWORD *)(v40 + 24) = v42;
        uint64_t v51 = 0;
        long long v50 = 0uLL;
        long long v43 = v52;
        *((void *)v40 + 8) = v53;
        *((_OWORD *)v40 + 3) = v43;
        long long v52 = 0uLL;
        uint64_t v53 = 0;
        uint64_t v44 = v54;
        *((_DWORD *)v40 + 20) = v55;
        *((void *)v40 + 9) = v44;
        v59[2] = v40 + 88;
        std::vector<dmlc::io::FileInfo>::__swap_out_circular_buffer(a3, v59);
        uint64_t v45 = a3[1];
        std::__split_buffer<dmlc::io::FileInfo>::~__split_buffer(v59);
        int v46 = SHIBYTE(v53);
        a3[1] = v45;
        if (v46 < 0) {
          operator delete((void *)v52);
        }
      }
      else
      {
        long long v31 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
        *(void *)(v29 + 16) = *((void *)&v49.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v29 = v31;
        memset(&v49, 0, sizeof(v49));
        uint64_t v32 = v51;
        *(_OWORD *)(v29 + 24) = v50;
        *(void *)(v29 + 40) = v32;
        uint64_t v51 = 0;
        long long v50 = 0uLL;
        long long v33 = v52;
        *(void *)(v29 + 64) = v53;
        *(_OWORD *)(v29 + 48) = v33;
        uint64_t v53 = 0;
        long long v52 = 0uLL;
        uint64_t v34 = v54;
        *(_DWORD *)(v29 + 80) = v55;
        *(void *)(v29 + 72) = v34;
        a3[1] = v29 + 88;
      }
      if (SHIBYTE(v51) < 0) {
        operator delete((void *)v50);
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  return closedir(v7);
}

void sub_22E91BF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v37 - 128));
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::LocalFileSystem::Open(dmlc::io::LocalFileSystem *this, const dmlc::io::URI *a2, char *a3, char a4)
{
  uint64_t v7 = (char *)a2 + 48;
  if (*((char *)a2 + 71) >= 0) {
    int v8 = (char *)a2 + 48;
  }
  else {
    int v8 = (const char *)*((void *)a2 + 6);
  }
  int v9 = strcmp(v8, "stdin");
  std::string::size_type v10 = (FILE *)*MEMORY[0x263EF8350];
  int v11 = strcmp(v8, "stdout");
  if (v9) {
    char v12 = 0;
  }
  else {
    char v12 = v10;
  }
  if (v9) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v11) {
    std::string::size_type v14 = v12;
  }
  else {
    std::string::size_type v14 = (FILE *)*MEMORY[0x263EF8358];
  }
  uint64_t v15 = 7;
  if (strncmp(v8, "file://", 7uLL)) {
    uint64_t v15 = 0;
  }
  if (v13)
  {
LABEL_34:
    if (v14) {
      goto LABEL_35;
    }
    goto LABEL_37;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  int v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_30;
    }
    size_t v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 1)
    {
LABEL_24:
      if (v16 != 1) {
        goto LABEL_30;
      }
      p_p = &__p;
      goto LABEL_28;
    }
    size_t v17 = &__p;
  }
  if (v17->__r_.__value_.__s.__data_[0] == 119)
  {
    MEMORY[0x230FA7B10](&__p, "wb");
    int v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if ((v16 & 0x80) == 0) {
    goto LABEL_24;
  }
  if (__p.__r_.__value_.__l.__size_ != 1) {
    goto LABEL_30;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_28:
  if (p_p->__r_.__value_.__s.__data_[0] == 114)
  {
    MEMORY[0x230FA7B10](&__p, "rb");
    LOBYTE(v16) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
  }
LABEL_30:
  if ((v16 & 0x80u) == 0) {
    int v19 = &__p;
  }
  else {
    int v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v14 = fopen(&v8[v15], (const char *)v19);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_34;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v14) {
LABEL_35:
  }
    operator new();
LABEL_37:
  if ((a4 & 1) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/local_filesys.cc");
    uint64_t v21 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    size_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: allow_null", 24);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" LocalFileSystem::Open \"", 24);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, (const void **)a2 + 3, (uint64_t)&__p);
    int v25 = *((char *)a2 + 71);
    if (v25 >= 0) {
      stat v26 = v7;
    }
    else {
      stat v26 = (const std::string::value_type *)*((void *)a2 + 6);
    }
    if (v25 >= 0) {
      std::string::size_type v27 = *((unsigned __int8 *)a2 + 71);
    }
    else {
      std::string::size_type v27 = *((void *)a2 + 7);
    }
    uint64_t v28 = std::string::append(&__p, v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    int64_t v39 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v38 = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v39 >= 0) {
      unint64_t v30 = v38;
    }
    else {
      unint64_t v30 = (void **)v38[0];
    }
    if (v39 >= 0) {
      uint64_t v31 = HIBYTE(v39);
    }
    else {
      uint64_t v31 = (uint64_t)v38[1];
    }
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v30, v31);
    long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\": ", 3);
    uint64_t v34 = __error();
    uint64_t v35 = strerror(*v34);
    size_t v36 = strlen(v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v35, v36);
    if (SHIBYTE(v39) < 0) {
      operator delete(v38[0]);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v40);
  }
  return 0;
}

void sub_22E91C328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::LocalFileSystem::OpenForRead(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)a1 + 40))(a1, a2, "r", a3);
}

void dmlc::io::LocalFileSystem::~LocalFileSystem(dmlc::io::LocalFileSystem *this)
{
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    int v8 = (char *)result;
  }
  else {
    int v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      int v9 = a1;
    }
    else {
      int v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  std::string::size_type v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v11 = a2;
    }
    else {
      int v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    size_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

size_t dmlc::io::FileStream::Read(FILE **this, void *__ptr, size_t a3)
{
  return fread(__ptr, 1uLL, a3, this[1]);
}

void dmlc::io::FileStream::Write(FILE **this, const void *__ptr, size_t a3)
{
  if (fwrite(__ptr, 1uLL, a3, this[1]) != a3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/local_filesys.cc");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: std::fwrite(ptr, 1, size, fp_) == size", 52);
    size_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"FileStream.Write incomplete", 27);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  }
}

void sub_22E91C5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::io::FileStream::~FileStream(dmlc::io::FileStream *this)
{
  dmlc::io::FileStream::~FileStream(this);

  JUMPOUT(0x230FA80D0);
}

{
  FILE *v2;

  *(void *)this = &unk_26E248618;
  uint64_t v2 = (FILE *)*((void *)this + 1);
  if (v2)
  {
    if (!*((unsigned char *)this + 16))
    {
      fclose(v2);
      *((void *)this + 1) = 0;
    }
  }
}

void dmlc::io::FileStream::Seek(FILE **this, uint64_t a2)
{
  if (fseek(this[1], a2, 0))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/local_filesys.cc");
    uint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Check failed: !std::fseek(fp_, static_cast<long>(pos), SEEK_SET)", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v5);
  }
}

void sub_22E91C69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void dmlc::io::FileStream::Tell(dmlc::io::FileStream *this)
{
}

BOOL dmlc::io::FileStream::AtEnd(FILE **this)
{
  return feof(this[1]) != 0;
}

void std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t std::vector<dmlc::io::FileInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<dmlc::io::FileInfo>,std::reverse_iterator<dmlc::io::FileInfo*>,std::reverse_iterator<dmlc::io::FileInfo*>,std::reverse_iterator<dmlc::io::FileInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<dmlc::io::FileInfo>,std::reverse_iterator<dmlc::io::FileInfo*>,std::reverse_iterator<dmlc::io::FileInfo*>,std::reverse_iterator<dmlc::io::FileInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  unint64_t v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 88);
      *(void *)(v7 - 72) = *(void *)(a3 - 72);
      *(_OWORD *)(v7 - 88) = v8;
      *(void *)(a3 - 80) = 0;
      *(void *)(a3 - 72) = 0;
      *(void *)(a3 - 88) = 0;
      long long v9 = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 48) = *(void *)(a3 - 48);
      *(_OWORD *)(v7 - 64) = v9;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 64) = 0;
      long long v10 = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v10;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 40) = 0;
      uint64_t v11 = *(void *)(a3 - 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      *(void *)(v7 - 16) = v11;
      uint64_t v7 = *((void *)&v17 + 1) - 88;
      *((void *)&v17 + 1) -= 88;
      a3 -= 88;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<dmlc::io::FileInfo>,std::reverse_iterator<dmlc::io::FileInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<dmlc::io::FileInfo>,std::reverse_iterator<dmlc::io::FileInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<dmlc::io::FileInfo>,std::reverse_iterator<dmlc::io::FileInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<dmlc::io::FileInfo>,std::reverse_iterator<dmlc::io::FileInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<dmlc::io::FileInfo>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<dmlc::io::FileInfo>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100](v4, i - 88);
  }
}

uint64_t dmlc::Registry<xgboost::PredictorReg>::~Registry(uint64_t a1)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 127) < 0) {
          operator delete(*(void **)(v5 + 104));
        }
        std::__function::__value_func<xgboost::Predictor * ()(xgboost::GenericParameter const*)>::~__value_func[abi:ne180100]((void *)(v5 + 72));
        long long v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x230FA80D0](v5, 0x1032C40EA5FD255);
        uint64_t v3 = *(void **)a1;
        uint64_t v2 = *(void *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

void xgboost::PredictionContainer::ClearExpiredEntries(int8x8_t *this)
{
  uint64_t v2 = this + 2;
  uint64_t v1 = (void *)this[2];
  if (v1)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v1[6];
      if (!v8 || *(void *)(v8 + 8) == -1)
      {
        if (v7 >= v6)
        {
          uint64_t v10 = (v7 - v4) >> 3;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61) {
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          }
          if ((v6 - v4) >> 2 > v11) {
            unint64_t v11 = (v6 - v4) >> 2;
          }
          if ((unint64_t)(v6 - v4) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v11;
          }
          if (v12)
          {
            if (v12 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            BOOL v13 = (char *)operator new(8 * v12);
          }
          else
          {
            BOOL v13 = 0;
          }
          std::string::size_type v14 = &v13[8 * v10];
          *(void *)std::string::size_type v14 = v1[2];
          long long v9 = v14 + 8;
          while (v5 != v4)
          {
            uint64_t v15 = *((void *)v5 - 1);
            v5 -= 8;
            *((void *)v14 - 1) = v15;
            v14 -= 8;
          }
          uint64_t v6 = &v13[8 * v12];
          if (v4) {
            operator delete(v4);
          }
          unint64_t v4 = v14;
          uint64_t v7 = v9;
        }
        else
        {
          *(void *)uint64_t v7 = v1[2];
          v7 += 8;
          long long v9 = v7;
        }
      }
      else
      {
        long long v9 = v5;
      }
      uint64_t v1 = (void *)*v1;
      uint64_t v5 = v9;
    }
    while (v1);
    if (v4 != v7)
    {
      long long v16 = v4;
      do
      {
        long long v17 = (int8x8_t *)std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::find<xgboost::DMatrix *>(this, v16);
        if (v17)
        {
          int8x8_t v18 = this[1];
          unint64_t v19 = (unint64_t)v17[1];
          uint8x8_t v20 = (uint8x8_t)vcnt_s8(v18);
          v20.i16[0] = vaddlv_u8(v20);
          if (v20.u32[0] > 1uLL)
          {
            if (v19 >= *(void *)&v18) {
              v19 %= *(void *)&v18;
            }
          }
          else
          {
            v19 &= *(void *)&v18 - 1;
          }
          uint64_t v21 = *(int8x8_t **)(*(void *)this + 8 * v19);
          do
          {
            size_t v22 = v21;
            uint64_t v21 = (int8x8_t *)*v21;
          }
          while (v21 != v17);
          if (v22 == v2) {
            goto LABEL_45;
          }
          unint64_t v23 = (unint64_t)v22[1];
          if (v20.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&v18) {
              v23 %= *(void *)&v18;
            }
          }
          else
          {
            v23 &= *(void *)&v18 - 1;
          }
          if (v23 != v19)
          {
LABEL_45:
            if (!*(void *)v17) {
              goto LABEL_46;
            }
            unint64_t v24 = *(void *)(*(void *)v17 + 8);
            if (v20.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&v18) {
                v24 %= *(void *)&v18;
              }
            }
            else
            {
              v24 &= *(void *)&v18 - 1;
            }
            if (v24 != v19) {
LABEL_46:
            }
              *(void *)(*(void *)this + 8 * v19) = 0;
          }
          int8x8_t v25 = *v17;
          if (*v17)
          {
            unint64_t v26 = *(void *)(*(void *)&v25 + 8);
            if (v20.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&v18) {
                v26 %= *(void *)&v18;
              }
            }
            else
            {
              v26 &= *(void *)&v18 - 1;
            }
            if (v26 != v19)
            {
              *(void *)(*(void *)this + 8 * v26) = v22;
              int8x8_t v25 = *v17;
            }
          }
          *size_t v22 = v25;
          int8x8_t *v17 = 0;
          --*(void *)&this[3];
          v27[0] = v17;
          v27[1] = v2;
          char v28 = 1;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
        }
        v16 += 8;
      }
      while (v16 != v7);
    }
    if (v4)
    {
      operator delete(v4);
    }
  }
}

void sub_22E91CE14(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *xgboost::PredictionContainer::Cache(int8x8_t *a1, uint64_t *a2, int a3)
{
  xgboost::PredictionContainer::ClearExpiredEntries(a1);
  uint64_t v11 = *a2;
  unint64_t v12 = &v11;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::__emplace_unique_key_args<xgboost::DMatrix *,std::piecewise_construct_t const&,std::tuple<xgboost::DMatrix *&&>,std::tuple<>>(a1, &v11, (uint64_t)&std::piecewise_construct, &v12);
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  long long v9 = (std::__shared_weak_count *)v6[6];
  void v6[5] = v8;
  v6[6] = v7;
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  if (a3 != -1)
  {
    uint64_t v11 = *a2;
    unint64_t v12 = &v11;
    std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::__emplace_unique_key_args<xgboost::DMatrix *,std::piecewise_construct_t const&,std::tuple<xgboost::DMatrix *&&>,std::tuple<>>(a1, &v11, (uint64_t)&std::piecewise_construct, &v12);
  }
  uint64_t v11 = *a2;
  unint64_t v12 = &v11;
  return std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::__emplace_unique_key_args<xgboost::DMatrix *,std::piecewise_construct_t const&,std::tuple<xgboost::DMatrix *&&>,std::tuple<>>(a1, &v11, (uint64_t)&std::piecewise_construct, &v12)+ 3;
}

void *xgboost::PredictionContainer::Entry(xgboost::PredictionContainer *this, xgboost::DMatrix *a2)
{
  uint8x8_t v20 = a2;
  if (!std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::find<xgboost::DMatrix *>(this, &v20))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/predictor.cc");
    long long v16 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
    long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: container_.find(m) != container_.cend()", 53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v19);
  }
  uint64_t v3 = std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::find<xgboost::DMatrix *>(this, &v20);
  if (!v3) {
    goto LABEL_10;
  }
  unint64_t v4 = v3;
  uint64_t v5 = (std::__shared_weak_count *)v3[6];
  if (!v5
    || (uint64_t v6 = std::__shared_weak_count::lock(v5)) == 0
    || (uint64_t v7 = v4[5], std::__shared_weak_count::__release_shared[abi:ne180100](v6), !v7))
  {
    uint64_t v8 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    dmlc::LogMessageFatal::Entry::Init(v8, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/predictor.cc");
    long long v9 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: container_.at(m).ref.lock()", 41);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"[Internal error]: DMatrix: ", 27);
    unint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" has expired.", 13);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
  }
  BOOL v13 = std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::find<xgboost::DMatrix *>(this, &v20);
  if (!v13) {
LABEL_10:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v13 + 3;
}

void sub_22E91D070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

int8x8_t *xgboost::PredictionContainer::Container(int8x8_t *this)
{
  return this;
}

uint64_t xgboost::Predictor::Create(uint64_t a1, uint64_t a2)
{
  dmlc::Registry<xgboost::PredictorReg>::Get();
  dmlc::Registry<xgboost::PredictorReg>::Get();
  unint64_t v4 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)&qword_26AD72778, (const void **)a1);
  if (v4 == &qword_26AD72780 || (uint64_t v5 = v4[7]) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/predictor.cc");
    uint64_t v7 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Unknown predictor type ", 23);
    int v9 = *(char *)(a1 + 23);
    if (v9 >= 0) {
      uint64_t v10 = (const void *)a1;
    }
    else {
      uint64_t v10 = *(const void **)a1;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
    uint64_t v5 = 0;
  }
  return std::function<xgboost::Predictor * ()(xgboost::GenericParameter const*)>::operator()(v5 + 72, a2);
}

void sub_22E91D18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t std::function<xgboost::Predictor * ()(xgboost::GenericParameter const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void xgboost::Predictor::InitOutPredictions(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(*(void *)(a4 + 8) + 8);
  int v17 = 0;
  if (!v7) {
    dmlc::LogCheckFormat<unsigned int,int>();
  }
  uint64_t v8 = *(unsigned int *)(*(void *)(a4 + 8) + 8);
  unint64_t v9 = *a2 * v8;
  uint64_t v10 = (uint64_t *)a2[10];
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  LODWORD(v18) = 0;
  std::vector<float>::resize(*a3, v9, &v18);
  if (v11 != v12)
  {
    xgboost::ValidateBaseMarginShape<2>((uint64_t)(a2 + 10), *a2, v8);
    xgboost::HostDeviceVector<float>::Copy();
  }
  char v13 = *(_DWORD **)*a3;
  uint64_t v14 = *(void *)(*a3 + 8) - (void)v13;
  if (v14 >= 1)
  {
    int v15 = **(_DWORD **)(a4 + 8);
    unint64_t v16 = ((unint64_t)v14 >> 2) + 1;
    do
    {
      *v13++ = v15;
      --v16;
    }
    while (v16 > 1);
  }
}

void sub_22E91D37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::ValidateBaseMarginShape<2>(uint64_t a1, unint64_t __val, unsigned int a3)
{
  unint64_t v23 = __val;
  unsigned int v22 = a3;
  std::to_string(&v16, __val);
  uint64_t v5 = std::string::insert(&v16, 0, "Invalid shape of base_margin. Expected: (");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  int v7 = std::string::append(&v17, ", ");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v18, (const std::string::value_type *)p_p, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  char v13 = std::string::append(&v19, ")");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v21 = v13->__r_.__value_.__r.__words[2];
  long long v20 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  v18.__r_.__value_.__r.__words[0] = *(void *)(a1 + 8);
  if (v18.__r_.__value_.__r.__words[0] != v23) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  v18.__r_.__value_.__r.__words[0] = *(void *)(a1 + 16);
  if (v18.__r_.__value_.__r.__words[0] != a3) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
}

void sub_22E91D6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::find<xgboost::DMatrix *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  long long v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<xgboost::DMatrix * const,xgboost::PredictionCacheEntry>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<xgboost::DMatrix * const,xgboost::PredictionCacheEntry>,0>(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  xgboost::HostDeviceVector<float>::~HostDeviceVector();
}

void *std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::__emplace_unique_key_args<xgboost::DMatrix *,std::piecewise_construct_t const&,std::tuple<xgboost::DMatrix *&&>,std::tuple<>>(void *a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v5 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v4 >> 47) ^ v4);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v5 >> 47));
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    goto LABEL_18;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = 0x9DDFEA08EB382D69 * (v5 ^ (v5 >> 47));
    if (v6 >= *(void *)&v7) {
      unint64_t v9 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v9 = v6 & (*(void *)&v7 - 1);
  }
  unint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10 || (uint64_t v11 = (void *)*v10) == 0)
  {
LABEL_18:
    char v13 = *a4;
    int v15 = (char *)operator new(0x38uLL);
    *(void *)int v15 = 0;
    *((void *)v15 + 1) = v6;
    *((void *)v15 + 2) = *v13;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    xgboost::HostDeviceVector<float>::HostDeviceVector();
  }
  while (1)
  {
    unint64_t v12 = v11[1];
    if (v12 == v6) {
      break;
    }
    if (v8.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v7) {
        v12 %= *(void *)&v7;
      }
    }
    else
    {
      v12 &= *(void *)&v7 - 1;
    }
    if (v12 != v9) {
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v11 = (void *)*v11;
    if (!v11) {
      goto LABEL_18;
    }
  }
  if (v11[2] != *a2) {
    goto LABEL_17;
  }
  return v11;
}

void sub_22E91DD9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *dmlc::io::IndexedRecordIOSplitter::ResetPartition(dmlc::io::IndexedRecordIOSplitter *this, unsigned int a2, unsigned int a3)
{
  uint64_t result = (char *)*((void *)this + 24);
  unint64_t v6 = (char *)*((void *)this + 25);
  int8x8_t v7 = (void **)((char *)this + 192);
  unint64_t v8 = (v6 - result) >> 4;
  unint64_t v9 = (v8 + a3 - 1) / a3;
  unint64_t v10 = v9 * a2;
  if (v10 < v8)
  {
    uint64_t v11 = *(v7 - 21);
    uint64_t v12 = *(v11 - 1);
    *((void *)this + 32) = v10;
    unint64_t v13 = *(void *)&result[16 * v10];
    *((void *)this + 6) = v13;
    unint64_t v14 = v9 * (a2 + 1);
    if (v14 >= v8)
    {
      unint64_t v15 = *((void *)this + 26);
      *((void *)this + 7) = v12;
      *((void *)this + 33) = v8;
      if ((unint64_t)v6 >= v15)
      {
        unint64_t v17 = v8 + 1;
        if ((v8 + 1) >> 60) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v15 - (void)result;
        if (v18 >> 3 > v17) {
          unint64_t v17 = v18 >> 3;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          long long v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)this + 208, v19);
          uint64_t result = (char *)*((void *)this + 24);
          unint64_t v6 = (char *)*((void *)this + 25);
        }
        else
        {
          long long v20 = 0;
        }
        std::string::size_type v21 = &v20[16 * v8];
        unsigned int v22 = &v20[16 * v19];
        *(void *)std::string::size_type v21 = v12;
        *((void *)v21 + 1) = 0;
        std::string v16 = v21 + 16;
        if (v6 != result)
        {
          do
          {
            *((_OWORD *)v21 - 1) = *((_OWORD *)v6 - 1);
            v21 -= 16;
            v6 -= 16;
          }
          while (v6 != result);
          uint64_t result = (char *)*v7;
        }
        *((void *)this + 24) = v21;
        *((void *)this + 25) = v16;
        *((void *)this + 26) = v22;
        if (result) {
          operator delete(result);
        }
      }
      else
      {
        *(void *)unint64_t v6 = v12;
        *((void *)v6 + 1) = 0;
        std::string v16 = v6 + 16;
      }
      *((void *)this + 25) = v16;
      unint64_t v13 = *((void *)this + 6);
      uint64_t v11 = (void *)*((void *)this + 3);
    }
    else
    {
      *((void *)this + 33) = v14;
      *((void *)this + 7) = *(void *)&result[16 * v14];
    }
    *((void *)this + 5) = v13;
    unint64_t v23 = (void *)*((void *)this + 2);
    if (v11 == v23)
    {
      uint64_t v31 = -1;
      *((void *)this + 12) = -1;
    }
    else
    {
      unint64_t v24 = v11 - v23;
      unint64_t v25 = v24;
      unint64_t v26 = (void *)*((void *)this + 2);
      do
      {
        unint64_t v27 = v25 >> 1;
        char v28 = &v26[v25 >> 1];
        unint64_t v30 = *v28;
        long long v29 = v28 + 1;
        v25 += ~(v25 >> 1);
        if (v13 < v30) {
          unint64_t v25 = v27;
        }
        else {
          unint64_t v26 = v29;
        }
      }
      while (v25);
      uint64_t v31 = v26 - v23 - 1;
      *((void *)this + 12) = v31;
      uint64_t v11 = v23;
      do
      {
        unint64_t v32 = v24 >> 1;
        long long v33 = &v11[v24 >> 1];
        unint64_t v35 = *v33;
        uint64_t v34 = v33 + 1;
        v24 += ~(v24 >> 1);
        if (*((void *)this + 7) < v35) {
          unint64_t v24 = v32;
        }
        else {
          uint64_t v11 = v34;
        }
      }
      while (v24);
    }
    *((void *)this + 13) = v11 - v23 - 1;
    uint64_t v36 = *((void *)this + 11);
    if (v36)
    {
      (*(void (**)(uint64_t))(*(void *)v36 + 24))(v36);
      *((void *)this + 11) = 0;
      uint64_t v31 = *((void *)this + 12);
    }
    *((void *)this + 11) = (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 1) + 48))(*((void *)this + 1), *((void *)this + 8) + 88 * v31, 0);
    *((void *)this + 31) = *((void *)this + 32);
    *((void *)this + 35) = 0;
    uint64_t v37 = *(uint64_t (**)(dmlc::io::IndexedRecordIOSplitter *))(*(void *)this + 16);
    return (char *)v37(this);
  }
  return result;
}

void dmlc::io::IndexedRecordIOSplitter::ReadIndexFile(void *a1, uint64_t a2, const std::string *a3)
{
  dmlc::io::InputSplitBase::ConvertToURIs((uint64_t)a1, a3, &v59);
  std::string __p = (void *)(0x8E38E38E38E38E39 * ((v59.i64[1] - v59.i64[0]) >> 3));
  uint64_t v58 = 1;
  if (v59.i64[1] - v59.i64[0] != 72) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  uint64_t v4 = v59.i64[0];
  if (v59.i64[1] != v59.i64[0])
  {
    unint64_t v5 = 0;
    unint64_t v6 = (void **)(a1 + 24);
    int8x8_t v7 = a1 + 26;
    do
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t, unint64_t, const char *, uint64_t))(*(void *)a2 + 40))(a2, v4 + 72 * v5, "r", 1);
      dmlc::istream::istream((uint64_t)v56, v8, 0x400uLL);
      std::string __p = 0;
      uint64_t v54 = 0;
      int v55 = 0;
      uint64_t v58 = 0;
      uint64_t v52 = 0;
      while (1)
      {
        uint64_t v9 = MEMORY[0x230FA7CA0](v56, &v58);
        unint64_t v10 = (void *)MEMORY[0x230FA7CA0](v9, &v52);
        if ((*((unsigned char *)v10 + *(void *)(*v10 - 24) + 32) & 5) != 0) {
          break;
        }
        uint64_t v11 = v54;
        if (v54 >= v55)
        {
          unint64_t v13 = (char *)__p;
          uint64_t v14 = (v54 - (unsigned char *)__p) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v55 - (unsigned char *)__p;
          if ((v55 - (unsigned char *)__p) >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v55, v17);
            unint64_t v13 = (char *)__p;
            uint64_t v11 = v54;
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = &v18[8 * v14];
          *(void *)unint64_t v19 = v52;
          uint64_t v12 = v19 + 8;
          while (v11 != v13)
          {
            uint64_t v20 = *((void *)v11 - 1);
            v11 -= 8;
            *((void *)v19 - 1) = v20;
            v19 -= 8;
          }
          std::string __p = v19;
          uint64_t v54 = v12;
          int v55 = &v18[8 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(void *)uint64_t v54 = v52;
          uint64_t v12 = v11 + 8;
        }
        uint64_t v54 = v12;
      }
      std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
      unint64_t v50 = v5;
      uint64_t v51 = v8;
      unsigned int v22 = __p;
      std::string::size_type v21 = v54;
      unint64_t v23 = (char *)a1[25];
      if (v54 - (unsigned char *)__p != 8)
      {
        unint64_t v24 = 0;
        do
        {
          uint64_t v25 = v22[v24++];
          uint64_t v26 = v22[v24] - v25;
          if ((unint64_t)v23 >= *v7)
          {
            unint64_t v27 = (char *)*v6;
            uint64_t v28 = (v23 - (unsigned char *)*v6) >> 4;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 60) {
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v30 = *v7 - (void)v27;
            if (v30 >> 3 > v29) {
              unint64_t v29 = v30 >> 3;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(a1 + 26), v31);
              unint64_t v27 = (char *)a1[24];
              unint64_t v23 = (char *)a1[25];
            }
            else
            {
              unint64_t v32 = 0;
            }
            long long v33 = &v32[16 * v28];
            *(void *)long long v33 = v25;
            *((void *)v33 + 1) = v26;
            uint64_t v34 = v33;
            if (v23 != v27)
            {
              do
              {
                *((_OWORD *)v34 - 1) = *((_OWORD *)v23 - 1);
                v34 -= 16;
                v23 -= 16;
              }
              while (v23 != v27);
              unint64_t v27 = (char *)*v6;
            }
            unint64_t v23 = v33 + 16;
            a1[24] = v34;
            a1[25] = v33 + 16;
            a1[26] = &v32[16 * v31];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *(void *)unint64_t v23 = v25;
            *((void *)v23 + 1) = v26;
            v23 += 16;
          }
          a1[25] = v23;
          unsigned int v22 = __p;
          std::string::size_type v21 = v54;
        }
        while (v24 < ((v54 - (unsigned char *)__p) >> 3) - 1);
      }
      uint64_t v35 = *((void *)v21 - 1);
      uint64_t v36 = *(void *)(a1[3] - 8) - v35;
      unint64_t v37 = a1[26];
      if ((unint64_t)v23 >= v37)
      {
        long long v41 = (char *)*v6;
        uint64_t v42 = (v23 - (unsigned char *)*v6) >> 4;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60) {
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v44 = v37 - (void)v41;
        if (v44 >> 3 > v43) {
          unint64_t v43 = v44 >> 3;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45)
        {
          int v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(a1 + 26), v45);
          long long v41 = (char *)a1[24];
          unint64_t v23 = (char *)a1[25];
        }
        else
        {
          int v46 = 0;
        }
        uint64_t v47 = &v46[16 * v42];
        *(void *)uint64_t v47 = v35;
        *((void *)v47 + 1) = v36;
        uint64_t v48 = v47;
        if (v23 == v41)
        {
          unint64_t v40 = v50;
          uint64_t v39 = v51;
        }
        else
        {
          unint64_t v40 = v50;
          uint64_t v39 = v51;
          do
          {
            *((_OWORD *)v48 - 1) = *((_OWORD *)v23 - 1);
            v48 -= 16;
            v23 -= 16;
          }
          while (v23 != v41);
          long long v41 = (char *)*v6;
        }
        unint64_t v38 = v47 + 16;
        a1[24] = v48;
        a1[25] = v47 + 16;
        a1[26] = &v46[16 * v45];
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        *(void *)unint64_t v23 = v35;
        *((void *)v23 + 1) = v36;
        unint64_t v38 = v23 + 16;
        unint64_t v40 = v50;
        uint64_t v39 = v51;
      }
      a1[25] = v38;
      if (__p)
      {
        uint64_t v54 = (char *)__p;
        operator delete(__p);
      }
      MEMORY[0x230FA8020](&v57);
      if (v39) {
        (*(void (**)(uint64_t))(*(void *)v39 + 24))(v39);
      }
      unint64_t v5 = v40 + 1;
      uint64_t v4 = v59.i64[0];
    }
    while (v5 < 0x8E38E38E38E38E39 * ((v59.i64[1] - v59.i64[0]) >> 3));
  }
  v56[0] = (void **)&v59;
  std::vector<dmlc::io::URI>::__destroy_vector::operator()[abi:ne180100](v56);
}

void sub_22E91E5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  a17 = v17 - 120;
  std::vector<dmlc::io::URI>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t dmlc::istream::istream(uint64_t a1, uint64_t a2, std::vector<char>::size_type a3)
{
  *(void *)a1 = &unk_26E248808;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 120) = &unk_26E248830;
  std::ios_base::init((std::ios_base *)(a1 + 120), 0);
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  *(void *)a1 = &unk_26E248798;
  *(void *)(a1 + 120) = &unk_26E2487C0;
  dmlc::istream::InBuf::InBuf((dmlc::istream::InBuf *)(a1 + 16), a3);
  *(void *)(a1 + 80) = a2;
  uint64_t v6 = *(void *)(a1 + 96);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v6;
  int8x8_t v7 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  v7->__rdbuf_ = (void *)(a1 + 16);
  std::ios_base::clear(v7, 0);
  return a1;
}

void sub_22E91E79C(_Unwind_Exception *a1)
{
  dmlc::istream::InBuf::~InBuf(v2);
  std::istream::~istream();
  MEMORY[0x230FA8020](v1);
  _Unwind_Resume(a1);
}

void dmlc::istream::~istream(dmlc::istream *this)
{
  MEMORY[0x230FA8020](v1 + 120);
}

{
  uint64_t v1;
  uint64_t vars8;

  MEMORY[0x230FA8020](v1 + 120);

  JUMPOUT(0x230FA80D0);
}

uint64_t dmlc::io::IndexedRecordIOSplitter::SeekRecordBegin(uint64_t a1, uint64_t (***a2)(void, uint64_t *, uint64_t))
{
  uint64_t v10 = 0;
  uint64_t v3 = 0;
  while ((**a2)(a2, (uint64_t *)((char *)&v10 + 4), 4))
  {
    if (HIDWORD(v10) == -824761590)
    {
      if (!(**a2)(a2, &v10, 4))
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
        unint64_t v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: fi->Read(&lrec, sizeof(lrec)) != 0", 48);
        int8x8_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"invalid record io format", 24);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v9);
      }
      if (!(v10 >> 30)) {
        return v3;
      }
      v3 += 8;
    }
    else
    {
      v3 += 4;
    }
  }
  return v3;
}

void sub_22E91E990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

const char *dmlc::io::IndexedRecordIOSplitter::FindLastRecordBegin(dmlc::io::IndexedRecordIOSplitter *this, const char *a2, const char *a3)
{
  uint64_t v4 = a2;
  if ((a2 & 3) != 0) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if ((a3 & 3) != 0) {
    dmlc::LogCheckFormat<unsigned long,unsigned int>();
  }
  if (a2 + 8 > a3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
    uint64_t v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    int8x8_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: p >= pbegin + 2", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
  }
  uint64_t v8 = a3 - 8;
  if (a3 - 8 != v4)
  {
    while (*(_DWORD *)v8 != -824761590 || *((_DWORD *)v8 + 1) >> 30)
    {
      v8 -= 4;
      if (v8 == v4) {
        return v4;
      }
    }
    return v8;
  }
  return v4;
}

void sub_22E91EBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

BOOL dmlc::io::IndexedRecordIOSplitter::ExtractNextRecord(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v35 = a3[1];
  if (*a3 != v35)
  {
    LOBYTE(v6) = *a3;
    if (v3 + 8 > v35)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
      uint64_t v8 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: chunk->begin + 2 * sizeof(uint32_t) <= chunk->end", 63);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Invalid RecordIO Format", 23);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
      unint64_t v6 = *a3;
    }
    if ((v6 & 3) != 0) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    if ((a3[1] & 3) != 0) {
      dmlc::LogCheckFormat<unsigned long,unsigned int>();
    }
    unsigned int v11 = *(_DWORD *)(*a3 + 4);
    uint64_t v12 = v11 & 0x1FFFFFFF;
    uint64_t v13 = *a3 + 8;
    *a2 = v13;
    unint64_t v14 = v13 + ((v12 + 3) & 0x3FFFFFFC);
    *a3 = v14;
    if (v14 > a3[1])
    {
      unint64_t v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
      uint64_t v16 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: chunk->begin <= chunk->end", 40);
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Invalid RecordIO Format", 23);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
    }
    unsigned int v19 = v11 >> 29;
    a2[1] = v12;
    if (v19)
    {
      if (v19 == 1
        || (uint64_t v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36),
            dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc"), v21 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36), unsigned int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: cflag == 1U", 25), v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2), std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Invalid RecordIO Format", 23), dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36), v19 != 3))
      {
        unint64_t v24 = (_DWORD *)*a3;
        do
        {
          if ((unint64_t)(v24 + 2) > a3[1])
          {
            uint64_t v25 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
            dmlc::LogMessageFatal::Entry::Init(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
            uint64_t v26 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
            unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: chunk->begin + 2 * sizeof(uint32_t) <= chunk->end", 63);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
            unint64_t v24 = (_DWORD *)*a3;
          }
          if (*v24 != -824761590)
          {
            uint64_t v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
            dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
            unint64_t v29 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
            uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: p[0] == RecordIOWriter::kMagic", 44);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
          }
          unsigned int v31 = v24[1];
          *(_DWORD *)(*a2 + a2[1]) = -824761590;
          uint64_t v32 = a2[1] + 4;
          a2[1] = v32;
          uint64_t v33 = v31 & 0x1FFFFFFF;
          if ((v31 & 0x1FFFFFFF) != 0)
          {
            memmove((void *)(*a2 + v32), (const void *)(*a3 + 8), v31 & 0x1FFFFFFF);
            a2[1] += v33;
          }
          unint64_t v24 = (_DWORD *)(*a3 + ((v33 + 3) & 0x3FFFFFFCu) + 8);
          *a3 = (unint64_t)v24;
        }
        while (v31 >> 29 != 3);
      }
    }
  }
  return v3 != v35;
}

void sub_22E91F098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

BOOL dmlc::io::IndexedRecordIOSplitter::ReadChunk(dmlc::io::IndexedRecordIOSplitter *this, char *a2, unint64_t *a3)
{
  uint64_t v4 = *a3;
  unint64_t v5 = dmlc::io::InputSplitBase::Read(this, a2, *a3);
  if (v5 != (uint64_t (***)(void, char *, uint64_t))v4 && v5 != 0) {
    *a3 = (unint64_t)v5;
  }
  return v5 != 0;
}

uint64_t dmlc::io::IndexedRecordIOSplitter::NextChunk(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 40))(a1, a2, a1[34]);
}

uint64_t dmlc::io::IndexedRecordIOSplitter::NextBatchEx(dmlc::io::IndexedRecordIOSplitter *this, std::vector<unsigned int> *a2, uint64_t a3)
{
  uint64_t v5 = *((void *)this + 35);
  if (*((unsigned char *)this + 240))
  {
    if (v5) {
      uint64_t v6 = *((void *)this + 35);
    }
    else {
      uint64_t v6 = a3;
    }
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = *((void *)this + 31);
      while (1)
      {
        uint64_t v9 = *((void *)this + 27);
        if (v8 >= (*((void *)this + 28) - v9) >> 3) {
          break;
        }
        uint64_t v10 = *((void *)this + 24);
        unint64_t v11 = *(void *)(v10 + 16 * *(void *)(v9 + 8 * v8));
        *((void *)this + 5) = v11;
        *((void *)this + 19) = *(void *)(v10 + 16 * *(void *)(v9 + 8 * v8) + 8) >> 2;
        uint64_t v12 = (void *)*((void *)this + 2);
        uint64_t v13 = (void *)*((void *)this + 3);
        if (v13 != v12)
        {
          unint64_t v14 = v13 - v12;
          uint64_t v13 = (void *)*((void *)this + 2);
          do
          {
            unint64_t v15 = v14 >> 1;
            uint64_t v16 = &v13[v14 >> 1];
            unint64_t v18 = *v16;
            uint64_t v17 = v16 + 1;
            v14 += ~(v14 >> 1);
            if (v11 < v18) {
              unint64_t v14 = v15;
            }
            else {
              uint64_t v13 = v17;
            }
          }
          while (v14);
        }
        uint64_t v19 = v13 - v12 - 1;
        uint64_t v20 = *((void *)this + 11);
        if (v19 != *((void *)this + 12))
        {
          if (v20) {
            (*(void (**)(uint64_t))(*(void *)v20 + 24))(v20);
          }
          *((void *)this + 12) = v19;
          uint64_t v20 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 1) + 48))(*((void *)this + 1), *((void *)this + 8) + 88 * v19, 0);
          *((void *)this + 11) = v20;
          unint64_t v11 = *((void *)this + 5);
          uint64_t v19 = *((void *)this + 12);
          uint64_t v12 = (void *)*((void *)this + 2);
        }
        (*(void (**)(uint64_t, unint64_t))(*(void *)v20 + 32))(v20, v11 - v12[v19]);
        uint64_t v21 = *((void *)this + 19);
        if (v7)
        {
          if (!dmlc::io::InputSplitBase::Chunk::Append(a2, this, v21)) {
            goto LABEL_25;
          }
        }
        else if ((dmlc::io::InputSplitBase::Chunk::Load((dmlc::io::InputSplitBase::Chunk *)a2, this, v21) & 1) == 0)
        {
          return 0;
        }
        ++v7;
        unint64_t v8 = *((void *)this + 31) + 1;
        *((void *)this + 31) = v8;
        if (v7 == v6)
        {
          uint64_t v7 = v6;
          break;
        }
      }
      if (!v7) {
        return 0;
      }
LABEL_25:
      *((void *)this + 35) = v6 - v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v23 = *((void *)this + 31);
    unint64_t v24 = *((void *)this + 33);
    if (v24 >= v23 + v5) {
      unint64_t v25 = v23 + v5;
    }
    else {
      unint64_t v25 = *((void *)this + 33);
    }
    if (v24 >= v23 + a3) {
      unint64_t v24 = v23 + a3;
    }
    BOOL v26 = v5 == 0;
    if (v5) {
      unint64_t v27 = v23 + v5 - v25;
    }
    else {
      unint64_t v27 = v23 + a3 - v24;
    }
    if (!v26) {
      unint64_t v24 = v25;
    }
    *((void *)this + 35) = v27;
    uint64_t v28 = (*(void *)(*((void *)this + 24) + 16 * v24) - *(void *)(*((void *)this + 24) + 16 * v23)) >> 2;
    *((void *)this + 19) = v28;
    *((void *)this + 31) = v24;
    return dmlc::io::InputSplitBase::Chunk::Load((dmlc::io::InputSplitBase::Chunk *)a2, this, v28);
  }
}

BOOL dmlc::io::IndexedRecordIOSplitter::NextBatch(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 14;
  while (1)
  {
    uint64_t v7 = a1[14];
    uint64_t v8 = a1[15];
    if (v7 != v8) {
      break;
    }
    if (((*(uint64_t (**)(void *, void *, uint64_t))(*a1 + 104))(a1, v6, a3) & 1) == 0) {
      return v7 != v8;
    }
  }
  *a2 = v7;
  a2[1] = v8 - v7;
  void *v6 = v8;
  return v7 != v8;
}

void *dmlc::io::IndexedRecordIOSplitter::BeforeFirst(dmlc::io::IndexedRecordIOSplitter *this)
{
  if (*((unsigned char *)this + 240))
  {
    unint64_t v3 = (void **)((char *)this + 216);
    int8x8_t v2 = (char *)*((void *)this + 27);
    *((void *)this + 28) = v2;
    unint64_t v4 = *((void *)this + 32);
    if (v4 >= *((void *)this + 33))
    {
      unint64_t v15 = v2;
    }
    else
    {
      uint64_t v5 = (void *)((char *)this + 232);
      do
      {
        if ((unint64_t)v2 >= *v5)
        {
          uint64_t v6 = (char *)*v3;
          uint64_t v7 = (v2 - (unsigned char *)*v3) >> 3;
          unint64_t v8 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 61) {
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v9 = *v5 - (void)v6;
          if (v9 >> 2 > v8) {
            unint64_t v8 = v9 >> 2;
          }
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v10 = v8;
          }
          if (v10)
          {
            unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 232, v10);
            uint64_t v6 = (char *)*((void *)this + 27);
            int8x8_t v2 = (char *)*((void *)this + 28);
          }
          else
          {
            unint64_t v11 = 0;
          }
          uint64_t v12 = &v11[8 * v7];
          *(void *)uint64_t v12 = v4;
          uint64_t v13 = v12 + 8;
          while (v2 != v6)
          {
            uint64_t v14 = *((void *)v2 - 1);
            v2 -= 8;
            *((void *)v12 - 1) = v14;
            v12 -= 8;
          }
          *((void *)this + 27) = v12;
          *((void *)this + 28) = v13;
          *((void *)this + 29) = &v11[8 * v10];
          if (v6) {
            operator delete(v6);
          }
          int8x8_t v2 = v13;
        }
        else
        {
          *(void *)int8x8_t v2 = v4;
          v2 += 8;
        }
        *((void *)this + 28) = v2;
        ++v4;
      }
      while (v4 < *((void *)this + 33));
      unint64_t v15 = (char *)*v3;
    }
    if (v2 - v15 >= 9)
    {
      long long v23 = xmmword_22EA18860;
      uint64_t v17 = v2 - 8;
      if (v2 - 8 > v15)
      {
        uint64_t v18 = ((unint64_t)(v2 - v15) >> 3) - 1;
        do
        {
          v22[0] = 0;
          v22[1] = v18;
          uint64_t v19 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v23, (uint64_t)this + 296, v22);
          if (v19)
          {
            uint64_t v20 = *(void *)v15;
            *(void *)unint64_t v15 = *(void *)&v15[8 * v19];
            *(void *)&v15[8 * v19] = v20;
          }
          v15 += 8;
          --v18;
        }
        while (v15 < v17);
      }
    }
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = *((void *)this + 32);
  }
  *((void *)this + 31) = v16;

  return dmlc::io::InputSplitBase::BeforeFirst(this);
}

uint64_t dmlc::io::InputSplitBase::HintChunkSize(uint64_t this, unint64_t a2)
{
  unint64_t v2 = a2 >> 2;
  if (a2 >> 2 <= *(void *)(this + 152)) {
    unint64_t v2 = *(void *)(this + 152);
  }
  *(void *)(this + 152) = v2;
  return this;
}

uint64_t dmlc::io::InputSplitBase::GetTotalSize(dmlc::io::InputSplitBase *this)
{
  return *(void *)(*((void *)this + 3) - 8);
}

uint64_t dmlc::io::IndexedRecordIOSplitter::NextRecord(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = (dmlc::io::InputSplitBase::Chunk *)(a1 + 14);
  if ((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 80))(a1, a2, a1 + 14)) {
    return 1;
  }
  do
  {
    uint64_t v5 = dmlc::io::InputSplitBase::Chunk::Load(v4, (dmlc::io::InputSplitBase *)a1, a1[19]);
    if (!v5) {
      break;
    }
    ++a1[31];
  }
  while (!(*(unsigned int (**)(uint64_t *, uint64_t, dmlc::io::InputSplitBase::Chunk *))(*a1 + 80))(a1, a2, v4));
  return v5;
}

void dmlc::io::IndexedRecordIOSplitter::~IndexedRecordIOSplitter(dmlc::io::IndexedRecordIOSplitter *this)
{
  *(void *)this = &unk_26E2486E0;
  unint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 24);
  if (v3)
  {
    *((void *)this + 25) = v3;
    operator delete(v3);
  }

  dmlc::io::InputSplitBase::~InputSplitBase(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26E2486E0;
  unint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 24);
  if (v3)
  {
    *((void *)this + 25) = v3;
    operator delete(v3);
  }
  dmlc::io::InputSplitBase::~InputSplitBase(this);

  JUMPOUT(0x230FA80D0);
}

void sub_22E91F830(_Unwind_Exception *a1)
{
  MEMORY[0x230FA80D0](v1, 0x10B3C408F76FF71);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::IndexedRecordIOSplitter::IsTextParser(dmlc::io::IndexedRecordIOSplitter *this)
{
  return 0;
}

uint64_t dmlc::io::IndexedRecordIOSplitter::NextChunkEx(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 104))(a1, a2, a1[34]);
}

void dmlc::istream::InBuf::~InBuf(dmlc::istream::InBuf *this)
{
  *(void *)this = &unk_26E248868;
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }

  std::streambuf::~streambuf();
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E248868;
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();

  JUMPOUT(0x230FA80D0);
}

void virtual thunk to'dmlc::istream::~istream(dmlc::istream *this)
{
  JUMPOUT(0x230FA8020);
}

{
  dmlc::istream::~istream((dmlc::istream *)((char *)this + *(void *)(*(void *)this - 24)));
}

dmlc::istream::InBuf *dmlc::istream::InBuf::InBuf(dmlc::istream::InBuf *this, std::vector<char>::size_type a2)
{
  uint64_t v4 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v4 = &unk_26E248868;
  uint64_t v5 = (std::vector<char> *)(v4 + 80);
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  std::vector<char>::vector((std::vector<char> *)(v4 + 80), a2);
  if (!a2)
  {
    uint64_t v6 = *((void *)this + 10);
    unint64_t v7 = *((void *)this + 11) - v6;
    if (v7 > 1)
    {
      if (v7 != 2) {
        *((void *)this + 11) = v6 + 2;
      }
    }
    else
    {
      std::vector<char>::__append(v5, 2 - v7);
    }
  }
  return this;
}

void sub_22E91FA40(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 88) = v4;
    operator delete(v4);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t dmlc::istream::InBuf::underflow(dmlc::istream::InBuf *this)
{
  unint64_t v2 = (unsigned __int8 *)*((void *)this + 3);
  uint64_t v1 = (unsigned __int8 *)*((void *)this + 4);
  if (v2 == v1)
  {
    unint64_t v2 = (unsigned __int8 *)*((void *)this + 10);
    uint64_t v4 = (***((uint64_t (****)(void, void, void))this + 8))(*((void *)this + 8), *((void *)this + 10), *((void *)this + 11) - (void)v2);
    uint64_t v1 = &v2[v4];
    *((void *)this + 2) = v2;
    *((void *)this + 3) = v2;
    *((void *)this + 4) = &v2[v4];
    *((void *)this + 9) += v4;
  }
  if (v2 == v1) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *v2;
  }
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    uint64_t v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_22E91FBC4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<char>::pointer begin = this->__begin_;
    int64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = value - begin;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (char *)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v11[v7];
    uint64_t v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      unint64_t v11 = v12;
    }
    else
    {
      uint64_t v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v11] = v15;
      }
      while (end != begin);
      std::vector<char>::pointer end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
    {
      operator delete(end);
    }
  }
}

void dmlc::istream::~istream(dmlc::istream *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[3];
  *((void *)this + 2) = &unk_26E248868;
  uint64_t v4 = (void *)*((void *)this + 12);
  if (v4)
  {
    *((void *)this + 13) = v4;
    operator delete(v4);
  }
  std::streambuf::~streambuf();

  std::istream::~istream();
}

void std::vector<dmlc::io::URI>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *xgboost::EllpackPage::EllpackPage(void *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

void *xgboost::EllpackPage::EllpackPage(void *a1)
{
  *a1 = 0;
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/ellpack_page.cc");
  uint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Internal Error: XGBoost is not compiled with CUDA but EllpackPage is required", 77);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v5);
  return a1;
}

void sub_22E91FF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  uint64_t v15 = *v13;
  *uint64_t v13 = 0;
  if (v15) {
    MEMORY[0x230FA80D0](v15, 0xC400A2AC0F1);
  }
  _Unwind_Resume(a1);
}

void xgboost::EllpackPage::~EllpackPage(xgboost::EllpackPage *this)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/ellpack_page.cc");
  uint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Internal Error: XGBoost is not compiled with CUDA but EllpackPage is required", 77);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v5);
  uint64_t v4 = *(void *)this;
  *(void *)this = 0;
  if (v4) {
    MEMORY[0x230FA80D0](v4, 0xC400A2AC0F1);
  }
}

void xgboost::EllpackPage::SetBaseRowId(xgboost::EllpackPage *this)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/ellpack_page.cc");
  unint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Internal Error: XGBoost is not compiled with CUDA but EllpackPage is required", 77);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
}

void sub_22E920094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t xgboost::EllpackPage::Size(xgboost::EllpackPage *this)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/ellpack_page.cc");
  unint64_t v2 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Internal Error: XGBoost is not compiled with CUDA but EllpackPage is required", 77);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
  return 0;
}

void sub_22E92010C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

dmlc::Config *dmlc::Config::Config(dmlc::Config *this, char a2)
{
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 48) = a2;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100]((uint64_t *)this + 3);
  return this;
}

{
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 48) = a2;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100]((uint64_t *)this + 3);
  return this;
}

void dmlc::Config::Clear(dmlc::Config *this)
{
  unint64_t v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::destroy(*((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  void *v2 = 0;

  std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100]((uint64_t *)this + 3);
}

uint64_t dmlc::Config::Config(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = a3;
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 24));
  dmlc::Config::LoadFromStream(a1, a2);
  return a1;
}

void sub_22E920264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void dmlc::Config::LoadFromStream(uint64_t a1, uint64_t a2)
{
  v26[3] = *(void **)MEMORY[0x263EF8340];
  uint64_t v24 = a2;
  int v25 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  long long __p = 0uLL;
  uint64_t v16 = 0;
  while (1)
  {
    dmlc::Tokenizer::GetNextToken((uint64_t)&v24, (uint64_t)&v21);
    uint64_t v3 = HIBYTE(v23);
    if (v23 < 0) {
      uint64_t v3 = v22;
    }
    if (!v3) {
      break;
    }
    dmlc::Tokenizer::GetNextToken((uint64_t)&v24, (uint64_t)&v18);
    dmlc::Tokenizer::GetNextToken((uint64_t)&v24, (uint64_t)&__p);
    if (SHIBYTE(v20) < 0)
    {
      if (v19 == 1)
      {
        char v4 = v18;
LABEL_10:
        if (*v4 == 61) {
          goto LABEL_30;
        }
      }
    }
    else if (SHIBYTE(v20) == 1)
    {
      char v4 = &v18;
      goto LABEL_10;
    }
    dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/config.cc");
    char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26[0], (uint64_t)"Parsing error: expect format \"k = v\"; but got \"",
           47);
    if (v23 >= 0) {
      uint64_t v6 = &v21;
    }
    else {
      uint64_t v6 = v21;
    }
    if (v23 >= 0) {
      uint64_t v7 = HIBYTE(v23);
    }
    else {
      uint64_t v7 = v22;
    }
    unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    if (v20 >= 0) {
      unint64_t v9 = &v18;
    }
    else {
      unint64_t v9 = v18;
    }
    if (v20 >= 0) {
      uint64_t v10 = HIBYTE(v20);
    }
    else {
      uint64_t v10 = v19;
    }
    unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    if (v16 >= 0) {
      uint64_t p_p = (uint64_t)&__p;
    }
    else {
      uint64_t p_p = __p;
    }
    if (v16 >= 0) {
      uint64_t v13 = HIBYTE(v16);
    }
    else {
      uint64_t v13 = *((void *)&__p + 1);
    }
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, p_p, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\"", 1);
    dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v26);
LABEL_30:
    dmlc::Config::Insert(a1, (std::string::size_type)&v21, &__p, v17);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v18);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v21);
  }
}

void sub_22E920520()
{
  if (v1 < 0) {
    operator delete(v0);
  }
  if (v3 < 0) {
    operator delete(v2);
  }
  if (v5 < 0) {
    operator delete(v4);
  }
  JUMPOUT(0x22E92057CLL);
}

void sub_22E920528()
{
}

void sub_22E920574(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x22E92057CLL);
  }
  __clang_call_terminate(a1);
}

uint64_t dmlc::Tokenizer::GetNextToken(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  *(unsigned char *)(a2 + 24) = 0;
  for (int i = std::istream::peek(); i != -1; int i = std::istream::peek())
  {
    int v5 = *(_DWORD *)(a1 + 8);
    if (v5 == 2) {
      break;
    }
    if (i > 33)
    {
      switch(i)
      {
        case '""':
          while (1)
          {
            std::istream::get();
            int v10 = std::istream::peek();
            if (v10 <= 91)
            {
              if (v10 <= 33)
              {
                if (v10 == -1 || v10 == 10 || v10 == 13)
                {
                  exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
                  std::string::basic_string[abi:ne180100]<0>(&v14, "quotation mark is not closed");
                  dmlc::TokenizeError::TokenizeError(exception, &v14);
                }
              }
              else if (v10 == 34)
              {
                std::istream::get();
                *(_DWORD *)(a1 + 8) = 2;
                *(unsigned char *)(a2 + 24) = 1;
                goto LABEL_38;
              }
            }
            else if (v10 == 92)
            {
              std::istream::get();
              int v10 = std::istream::peek();
              if (v10 != 34)
              {
                uint64_t v13 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(&v14, "error parsing escape characters");
                dmlc::TokenizeError::TokenizeError(v13, &v14);
              }
            }
            std::string::push_back((std::string *)a2, v10);
          }
        case '=':
          if (v5 != 1)
          {
            std::string::operator=((std::string *)a2, 61);
            std::istream::get();
          }
LABEL_11:
          *(_DWORD *)(a1 + 8) = 2;
          continue;
        case '#':
          while (1)
          {
            int v6 = std::istream::peek();
            if ((v6 + 1) <= 0xE && ((1 << (v6 + 1)) & 0x4803) != 0) {
              break;
            }
            std::istream::get();
          }
          continue;
      }
    }
    else if ((i - 9) < 2 || i == 13 || i == 32)
    {
      if (v5 == 1) {
        goto LABEL_11;
      }
      goto LABEL_37;
    }
    *(_DWORD *)(a1 + 8) = 1;
    std::string::push_back((std::string *)a2, i);
LABEL_37:
    std::istream::get();
LABEL_38:
    ;
  }

  return std::istream::peek();
}

void sub_22E920818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::Config::Insert(uint64_t a1, std::string::size_type a2, long long *a3, char a4)
{
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v49 = 0;
    memset(v48, 0, sizeof(v48));
    __p.__r_.__value_.__r.__words[0] = a2;
    int v10 = std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (const void **)a2, (long long **)&__p);
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v10 + 56));
    *(_OWORD *)(v10 + 56) = v48[0];
    unint64_t v11 = (void *)*((void *)v10 + 10);
    *((void *)v10 + 9) = *(void *)&v48[1];
    memset(v48, 0, 24);
    if (v11)
    {
      *((void *)v10 + 11) = v11;
      operator delete(v11);
      *((void *)v10 + 10) = 0;
      *((void *)v10 + 11) = 0;
      *((void *)v10 + 12) = 0;
    }
    *((_OWORD *)v10 + 5) = *(_OWORD *)((char *)&v48[1] + 8);
    *((void *)v10 + 12) = *((void *)&v48[2] + 1);
    memset((char *)&v48[1] + 8, 0, 24);
    v10[104] = v49;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  uint64_t v12 = v8 - v9;
  *(void *)&v48[0] = a2;
  uint64_t v13 = std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (const void **)a2, (long long **)v48);
  long long v14 = (uint64_t *)(v13 + 56);
  uint64_t v15 = *((void *)v13 + 7);
  unint64_t v16 = *((void *)v13 + 8);
  if (v16 >= *((void *)v13 + 9))
  {
    uint64_t v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v14, a3);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v14, a3);
    uint64_t v17 = v16 + 24;
  }
  uint64_t v18 = v12 >> 5;
  unint64_t v19 = *((void *)v13 + 12);
  *((void *)v13 + 8) = v17;
  uint64_t v20 = (uint64_t *)*((void *)v13 + 11);
  if ((unint64_t)v20 >= v19)
  {
    uint64_t v22 = (uint64_t *)*((void *)v13 + 10);
    uint64_t v23 = v20 - v22;
    if ((unint64_t)(v23 + 1) >> 61) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = v19 - (void)v22;
    unint64_t v25 = (uint64_t)(v19 - (void)v22) >> 2;
    if (v25 <= v23 + 1) {
      unint64_t v25 = v23 + 1;
    }
    if (v24 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26)
    {
      unint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v13 + 96), v26);
      uint64_t v22 = (uint64_t *)*((void *)v13 + 10);
      uint64_t v20 = (uint64_t *)*((void *)v13 + 11);
    }
    else
    {
      unint64_t v27 = 0;
    }
    uint64_t v28 = (uint64_t *)&v27[8 * v23];
    unint64_t v29 = &v27[8 * v26];
    uint64_t *v28 = v18;
    uint64_t v21 = v28 + 1;
    while (v20 != v22)
    {
      uint64_t v30 = *--v20;
      *--uint64_t v28 = v30;
    }
    *((void *)v13 + 10) = v28;
    *((void *)v13 + 11) = v21;
    *((void *)v13 + 12) = v29;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    uint64_t *v20 = v18;
    uint64_t v21 = v20 + 1;
  }
  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v15) >> 3);
  *((void *)v13 + 11) = v21;
  v13[104] = a4;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v15) >> 3);
  unint64_t v32 = *(void *)(a1 + 40);
  unint64_t v33 = *(void *)(a1 + 32);
  if (v33 >= v32)
  {
    uint64_t v35 = *(void *)(a1 + 24);
    uint64_t v36 = (uint64_t)(v33 - v35) >> 5;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 59) {
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
    if ((uint64_t)(v32 - v35) >> 4 > v37) {
      unint64_t v37 = (uint64_t)(v32 - v35) >> 4;
    }
    if (v32 - v35 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v38 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v38 = v37;
    }
    *(void *)&v48[2] = a1 + 40;
    if (v38 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v39 = (char *)operator new(32 * v38);
    unint64_t v40 = &v39[32 * v36];
    *(_OWORD *)unint64_t v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    std::string::size_type v41 = __p.__r_.__value_.__r.__words[2];
    memset(&__p, 0, sizeof(__p));
    *((void *)v40 + 2) = v41;
    *((void *)v40 + 3) = v31;
    uint64_t v42 = v40 + 32;
    if (v33 == v35)
    {
      int64x2_t v44 = vdupq_n_s64(v33);
    }
    else
    {
      do
      {
        long long v43 = *(_OWORD *)(v33 - 32);
        *((void *)v40 - 2) = *(void *)(v33 - 16);
        *((_OWORD *)v40 - 2) = v43;
        *(void *)(v33 - 24) = 0;
        *(void *)(v33 - 16) = 0;
        *(void *)(v33 - 32) = 0;
        *((void *)v40 - 1) = *(void *)(v33 - 8);
        v40 -= 32;
        v33 -= 32;
      }
      while (v33 != v35);
      int64x2_t v44 = *(int64x2_t *)(a1 + 24);
      unint64_t v32 = *(void *)(a1 + 40);
    }
    *(void *)(a1 + 24) = v40;
    *(void *)(a1 + 32) = v42;
    *(int64x2_t *)((char *)v48 + 8) = v44;
    *(void *)(a1 + 40) = &v39[32 * v38];
    *((void *)&v48[1] + 1) = v32;
    *(void *)&v48[0] = v44.i64[0];
    std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)v48);
    int v45 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 32) = v42;
    if (v45 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v34 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v33 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v33 = v34;
    *(void *)(v33 + 24) = v47;
    *(void *)(a1 + 32) = v33 + 32;
  }
}

void sub_22E920BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

uint64_t dmlc::Config::GetParam(uint64_t a1, const void **a2)
{
  if (a1 + 8 == std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, a2))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/config.cc");
    int v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: config_map_.find(key) != config_map_.end()", 56);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"key \"", 5);
    int v9 = *((char *)a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = (uint64_t)a2;
    }
    else {
      uint64_t v10 = (uint64_t)*a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v11 = (uint64_t)a2[1];
    }
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\" not found in configure", 24);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  return *(void *)(std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, a2)+ 64)- 24;
}

void sub_22E920CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t dmlc::Config::IsGenuineString(uint64_t a1, const void **a2)
{
  if (a1 + 8 == std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, a2))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/config.cc");
    int v5 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: config_map_.find(key) != config_map_.end()", 56);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"key \"", 5);
    int v9 = *((char *)a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = (uint64_t)a2;
    }
    else {
      uint64_t v10 = (uint64_t)*a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v11 = (uint64_t)a2[1];
    }
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\" not found in configure", 24);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  return *(unsigned __int8 *)(std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, a2)+ 104);
}

void sub_22E920DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

std::string *dmlc::MakeProtoStringValue@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a2, "\"");
  BOOL v4 = *((char *)a1 + 23) < 0;
  uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = a1[1];
  }
  if (v5)
  {
    unint64_t v6 = 0;
    do
    {
      if (v4) {
        uint64_t v7 = (uint64_t *)*a1;
      }
      else {
        uint64_t v7 = a1;
      }
      int v8 = *((unsigned __int8 *)v7 + v6);
      if (v8 == 34) {
        std::string::append(a2, "\\\"");
      }
      else {
        std::string::push_back(a2, v8);
      }
      ++v6;
      BOOL v4 = *((char *)a1 + 23) < 0;
      unint64_t v9 = *((unsigned __int8 *)a1 + 23);
      if ((v9 & 0x80u) != 0) {
        unint64_t v9 = a1[1];
      }
    }
    while (v6 < v9);
  }
  return std::string::append(a2, "\"");
}

void sub_22E920E8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::Config::ToProtoString(dmlc::Config *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  uint64_t v19 = 0;
  uint64_t v20 = this;
  dmlc::Config::ConfigIterator::FindNextIndex((dmlc::Config::ConfigIterator *)&v19);
  while (1)
  {
    v17.__r_.__value_.__r.__words[0] = (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 5;
    v17.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    dmlc::Config::ConfigIterator::FindNextIndex((dmlc::Config::ConfigIterator *)&v17);
    if (v19 == v17.__r_.__value_.__r.__words[0]) {
      break;
    }
    uint64_t v2 = (uint64_t)v20;
LABEL_6:
    uint64_t v3 = *(void *)(v2 + 24) + 32 * v19;
    uint64_t v4 = *(void *)(v3 + 24);
    uint64_t v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(v2, (const void **)v3);
    std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v17, (long long *)v3, (long long *)(*(void *)(v5 + 56) + 24 * v4));
    int IsGenuineString = dmlc::Config::IsGenuineString((uint64_t)this, (const void **)&v17.__r_.__value_.__l.__data_);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v17;
    }
    else {
      uint64_t v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v17.__r_.__value_.__l.__size_;
    }
    unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v7, size);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" : ", 3);
    if (IsGenuineString)
    {
      dmlc::MakeProtoStringValue((uint64_t *)&v18, &__p);
    }
    else if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    }
    else
    {
      std::string __p = v18;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t p_p = &__p;
    }
    else {
      uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    dmlc::Config::ConfigIterator::operator++((dmlc::Config::ConfigIterator *)&v19);
  }
  uint64_t v2 = (uint64_t)v20;
  if (v20 != (dmlc::Config *)v17.__r_.__value_.__l.__size_) {
    goto LABEL_6;
  }
  std::stringbuf::str();
  uint64_t v14 = *MEMORY[0x263F8C2C8];
  v21[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v21 + *(void *)(v14 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v21[1] = MEMORY[0x263F8C318] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x230FA8020](&v23);
}

void sub_22E921164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void *dmlc::Config::begin@<X0>(dmlc::Config *this@<X0>, dmlc::Config::ConfigIterator *a2@<X8>)
{
  *(void *)a2 = 0;
  *((void *)a2 + 1) = this;
  return dmlc::Config::ConfigIterator::FindNextIndex(a2);
}

BOOL dmlc::Config::ConfigIterator::operator!=(void *a1, void *a2)
{
  return *a1 != *a2 || a1[1] != a2[1];
}

void *dmlc::Config::end@<X0>(dmlc::Config *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 5;
  a2[1] = (uint64_t)this;
  return dmlc::Config::ConfigIterator::FindNextIndex((dmlc::Config::ConfigIterator *)a2);
}

std::string *dmlc::Config::ConfigIterator::operator*@<X0>(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1[1] + 24) + 32 * *a1;
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = (long long *)(*(void *)(std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1[1], (const void **)v3)+ 56)+ 24 * v4);

  return std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(a2, (long long *)v3, v5);
}

dmlc::Config::ConfigIterator *dmlc::Config::ConfigIterator::operator++(dmlc::Config::ConfigIterator *this)
{
  if (*(void *)this < (unint64_t)((uint64_t)(*(void *)(*((void *)this + 1) + 32)
                                                    - *(void *)(*((void *)this + 1) + 24)) >> 5))
    ++*(void *)this;
  dmlc::Config::ConfigIterator::FindNextIndex(this);
  return this;
}

dmlc::Config::ConfigIterator *dmlc::Config::ConfigIterator::ConfigIterator(dmlc::Config::ConfigIterator *this, uint64_t a2, const dmlc::Config *a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  dmlc::Config::ConfigIterator::FindNextIndex(this);
  return this;
}

{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  dmlc::Config::ConfigIterator::FindNextIndex(this);
  return this;
}

void dmlc::Config::ConfigValue::~ConfigValue(dmlc::Config::ConfigValue *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void *dmlc::Config::ConfigIterator::FindNextIndex(dmlc::Config::ConfigIterator *this)
{
  unint64_t v3 = *(void *)this;
  for (uint64_t result = (void *)*((void *)this + 1); ; uint64_t result = (void *)*((void *)this + 1))
  {
    uint64_t v4 = result[3];
    if (v3 >= (result[4] - v4) >> 5) {
      break;
    }
    uint64_t v5 = v4 + 32 * v3;
    uint64_t v6 = *(void *)(v5 + 24);
    uint64_t result = (void *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)result, (const void **)v5);
    if (*(void *)(result[10] + 8 * v6) == *(void *)this) {
      break;
    }
    unint64_t v3 = *(void *)this + 1;
    *(void *)this = v3;
  }
  return result;
}

void *dmlc::Config::ConfigIterator::ConfigIterator(void *this, const dmlc::Config::ConfigIterator *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  *this = *(void *)a2;
  this[1] = v2;
  return this;
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)a2 + 1);
  *this = *(void *)a2;
  this[1] = v2;
  return this;
}

dmlc::Config::ConfigIterator *dmlc::Config::ConfigIterator::operator++@<X0>(dmlc::Config::ConfigIterator *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 1);
  *a2 = *(void *)this;
  a2[1] = v2;
  return dmlc::Config::ConfigIterator::operator++(this);
}

BOOL dmlc::Config::ConfigIterator::operator==(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void *dmlc::TokenizeError::TokenizeError(void *a1, long long *a2)
{
  *a1 = &unk_26E248918;
  unint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_22E921468(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void dmlc::TokenizeError::~TokenizeError(std::exception *this)
{
  dmlc::TokenizeError::~TokenizeError(this);

  JUMPOUT(0x230FA80D0);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_26E248918;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::exception::~exception(this);
}

uint64_t dmlc::TokenizeError::what(dmlc::TokenizeError *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_22E9215E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,dmlc::Config::ConfigValue>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,dmlc::Config::ConfigValue>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  unint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  long long v4 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

char *std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  uint64_t v6 = a1 + 1;
  long long v5 = (char *)a1[1];
  long long v7 = (char **)(a1 + 1);
  int v8 = (char **)(a1 + 1);
  if (!v5) {
    goto LABEL_10;
  }
  long long v7 = (char **)(a1 + 1);
  while (1)
  {
    while (1)
    {
      int v8 = (char **)v5;
      uint64_t v10 = (const void **)(v5 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      long long v5 = *v8;
      long long v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v10, a2)) {
      break;
    }
    long long v7 = v8 + 1;
    long long v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    std::string::size_type v12 = *a3;
    uint64_t v13 = (char *)operator new(0x70uLL);
    v18[0] = v13;
    v18[1] = v6;
    char v19 = 0;
    uint64_t v14 = (std::string *)(v13 + 32);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v15 = *v12;
      *((void *)v13 + 6) = *((void *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    *((void *)v13 + 13) = 0;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    char v19 = 1;
    *(void *)uint64_t v13 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = v8;
    std::string *v7 = v13;
    unint64_t v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      uint64_t v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    uint64_t v11 = (char *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,dmlc::Config::ConfigValue>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::Config::ConfigValue>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_22E9218B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,dmlc::Config::ConfigValue>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::Config::ConfigValue>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,dmlc::Config::ConfigValue>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::Config::ConfigValue>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,dmlc::Config::ConfigValue>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_22E92197C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      long long v4 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        long long v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void xgboost::gbm::GBLinearModel::SaveModel(xgboost::gbm::GBLinearModel *this, xgboost::Json *a2)
{
  xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::JsonTypedArray(v7, (uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 2);
  long long v4 = (unsigned char *)*((void *)this + 20);
  long long v5 = (unsigned char *)*((void *)this + 21);
  if (v5 != v4) {
    memmove(v7[2], v4, v5 - v4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "weights");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=<float,(xgboost::Value::ValueKind)7>();
}

void sub_22E921BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (atomic_fetch_add_explicit(v22 + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    (*(void (**)(atomic_uint *))(*(void *)v22 + 8))(v22);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::Json::operator=<float,(xgboost::Value::ValueKind)7>()
{
}

void *xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::~JsonTypedArray(void *a1)
{
  *a1 = &unk_26E248988;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void xgboost::gbm::GBLinearModel::LoadModel(void **this, const xgboost::Json *a2)
{
  uint64_t v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "weights");
  uint64_t v4 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v3 + 16), (const void **)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  long long v5 = *(_DWORD **)(v4 + 56);
  if (v5[3] == 7)
  {
    uint64_t v6 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value const>(v5);
    std::vector<float>::resize((uint64_t)(this + 20), (uint64_t)(v6[3] - v6[2]) >> 2);
    long long v7 = (unsigned char *)v6[2];
    int v8 = (unsigned char *)v6[3];
    if (v8 != v7) {
      memmove(this[20], v7, v8 - v7);
    }
  }
  else
  {
    unint64_t v9 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(v5);
    uint64_t v11 = v9[2];
    uint64_t v10 = v9[3];
    unint64_t v12 = (v10 - v11) >> 3;
    std::vector<float>::resize((uint64_t)(this + 20), v12);
    if (v10 != v11)
    {
      uint64_t v13 = 0;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      do
      {
        *((_DWORD *)this[20] + v13) = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v9[2] + 8 * v13))
                                      + 4);
        ++v13;
      }
      while (v12 != v13);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "boosted_rounds");
  uint64_t v14 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v3 + 16), (const void **)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v3 + 24 == (char *)v14) {
    int v15 = 0;
  }
  else {
    int v15 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v14 + 56)) + 4);
  }
  *((_DWORD *)this + 36) = v15;
}

void sub_22E921F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBLinearModel::~GBLinearModel(xgboost::gbm::GBLinearModel *this)
{
  *(void *)this = &unk_26E248940;
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E248940;
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::~JsonTypedArray(void *a1)
{
  *a1 = &unk_26E248988;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x230FA80D0);
}

void *xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::JsonTypedArray(void *a1, unint64_t a2)
{
  a1[1] = 0x700000000;
  *a1 = &unk_26E248988;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  std::vector<float>::resize((uint64_t)(a1 + 2), a2);
  return a1;
}

void sub_22E9220F8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value const>(_DWORD *a1)
{
  if (a1[3] == 7)
  {
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
    xgboost::Value::TypeStr((xgboost::Value *)a1, &v21);
    long long v5 = std::string::insert(&v21, 0, "Invalid cast, from ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    long long v7 = std::string::append(&v22, " to ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v15[1] = 0x700000000;
    v15[0] = &unk_26E248988;
    unint64_t v16 = 0;
    char v17 = 0;
    uint64_t v18 = 0;
    xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
    if ((v20 & 0x80u) == 0) {
      unint64_t v9 = __p;
    }
    else {
      unint64_t v9 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v10 = v20;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    uint64_t v11 = std::string::append(&v23, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v25 = v11->__r_.__value_.__r.__words[2];
    long long v24 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v25 >= 0) {
      uint64_t v13 = &v24;
    }
    else {
      uint64_t v13 = (long long *)v24;
    }
    if (v25 >= 0) {
      uint64_t v14 = HIBYTE(v25);
    }
    else {
      uint64_t v14 = *((void *)&v24 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
    v15[0] = &unk_26E248988;
    if (v16)
    {
      char v17 = v16;
      operator delete(v16);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
  }
}

void sub_22E92238C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 41) < 0) {
    operator delete(*(void **)(v32 - 64));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (*(char *)(v32 - 73) < 0) {
    operator delete(*(void **)(v32 - 96));
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v32 - 33));
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(_DWORD *a1)
{
  if (a1[3] == 4)
  {
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    xgboost::Value::TypeStr((xgboost::Value *)a1, &v19);
    long long v5 = std::string::insert(&v19, 0, "Invalid cast, from ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    long long v7 = std::string::append(&v20, " to ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v15[1] = 0x400000000;
    v15[0] = &unk_26E24E170;
    memset(v16, 0, sizeof(v16));
    xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
    if ((v18 & 0x80u) == 0) {
      unint64_t v9 = __p;
    }
    else {
      unint64_t v9 = (void **)__p[0];
    }
    if ((v18 & 0x80u) == 0) {
      std::string::size_type v10 = v18;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    uint64_t v11 = std::string::append(&v21, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v23 = v11->__r_.__value_.__r.__words[2];
    long long v22 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v23 >= 0) {
      uint64_t v13 = &v22;
    }
    else {
      uint64_t v13 = (long long *)v22;
    }
    if (v23 >= 0) {
      uint64_t v14 = HIBYTE(v23);
    }
    else {
      uint64_t v14 = *((void *)&v22 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)v22);
    }
    if ((char)v18 < 0) {
      operator delete(__p[0]);
    }
    v15[0] = &unk_26E24E170;
    int64_t v25 = v16;
    std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&v25);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
  }
}

void sub_22E9226B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (*(char *)(v40 - 73) < 0) {
    operator delete(*(void **)(v40 - 96));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  *(void *)(v40 - 56) = v39;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 56));
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v40 - 57));
  _Unwind_Resume(a1);
}

void std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<xgboost::Json>::__base_destruct_at_end[abi:ne180100]((atomic_uint *)v2, (uint64_t)*v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

atomic_uint *std::vector<xgboost::Json>::__base_destruct_at_end[abi:ne180100](atomic_uint *result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *((void *)result + 1); i != a2; i -= 8)
  {
    long long v5 = *(atomic_uint **)(i - 8);
    uint64_t result = v5;
    if (v5 && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
    }
  }
  *((void *)v3 + 1) = a2;
  return result;
}

void *xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(_DWORD *a1)
{
  if (a1[3] == 1)
  {
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    uint64_t v4 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    xgboost::Value::TypeStr((xgboost::Value *)a1, &v19);
    long long v5 = std::string::insert(&v19, 0, "Invalid cast, from ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    long long v7 = std::string::append(&v20, " to ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v15[1] = 0x100000000;
    v15[0] = &unk_26E24E2A0;
    int v16 = 0;
    xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
    if ((v18 & 0x80u) == 0) {
      unint64_t v9 = __p;
    }
    else {
      unint64_t v9 = (void **)__p[0];
    }
    if ((v18 & 0x80u) == 0) {
      std::string::size_type v10 = v18;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    uint64_t v11 = std::string::append(&v21, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v23 = v11->__r_.__value_.__r.__words[2];
    long long v22 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v23 >= 0) {
      uint64_t v13 = &v22;
    }
    else {
      uint64_t v13 = (long long *)v22;
    }
    if (v23 >= 0) {
      uint64_t v14 = HIBYTE(v23);
    }
    else {
      uint64_t v14 = *((void *)&v22 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)v22);
    }
    if ((char)v18 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
  }
}

void sub_22E922A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 73) < 0) {
    operator delete(*(void **)(v30 - 96));
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v30 - 33));
  _Unwind_Resume(a1);
}

size_t xgboost::common::PeekableInStream::Read(xgboost::common::PeekableInStream *this, void *__dst, size_t __n)
{
  size_t v3 = __n;
  if (*((char *)this + 47) < 0) {
    uint64_t v5 = *((void *)this + 4);
  }
  else {
    uint64_t v5 = *((unsigned __int8 *)this + 47);
  }
  uint64_t v6 = *((void *)this + 2);
  size_t v7 = v5 - v6;
  if (v5 == v6)
  {
    long long v8 = (uint64_t (*)(void))***((void ***)this + 1);
    return v8();
  }
  else
  {
    std::string::size_type v10 = (char *)this + 24;
    if (__n <= v7)
    {
      if ((*((unsigned char *)this + 47) & 0x80) != 0)
      {
        if (*((void *)this + 4)) {
          std::string::size_type v10 = (char *)*((void *)this + 3);
        }
        else {
          std::string::size_type v10 = 0;
        }
      }
      else if (!*((unsigned char *)this + 47))
      {
        std::string::size_type v10 = 0;
      }
      memcpy(__dst, &v10[v6], __n);
      *((void *)this + 2) += v3;
    }
    else
    {
      if ((*((unsigned char *)this + 47) & 0x80) != 0)
      {
        if (*((void *)this + 4)) {
          std::string::size_type v10 = (char *)*((void *)this + 3);
        }
        else {
          std::string::size_type v10 = 0;
        }
      }
      else if (!*((unsigned char *)this + 47))
      {
        std::string::size_type v10 = 0;
      }
      memcpy(__dst, &v10[v6], v7);
      uint64_t v11 = (uint64_t (***)(void))*((void *)this + 1);
      *((void *)this + 2) += v7;
      return (**v11)() + v7;
    }
    return v3;
  }
}

size_t xgboost::common::PeekableInStream::PeekRead(xgboost::common::PeekableInStream *this, void *__dst, size_t __n)
{
  uint64_t v6 = (std::string *)((char *)this + 24);
  if (*((char *)this + 47) < 0)
  {
    std::string::size_type v7 = *((void *)this + 4);
    std::string::size_type v8 = *((void *)this + 2);
    std::string::size_type v9 = v7 - v8;
    if (v7 - v8 >= __n)
    {
      std::string::size_type v10 = (char *)v6->__r_.__value_.__r.__words[0];
      if (!v7) {
        std::string::size_type v10 = 0;
      }
      goto LABEL_15;
    }
  }
  else
  {
    std::string::size_type v7 = *((unsigned __int8 *)this + 47);
    std::string::size_type v8 = *((void *)this + 2);
    std::string::size_type v9 = v7 - v8;
    if (v7 - v8 >= __n)
    {
      if (v7) {
        std::string::size_type v10 = (char *)this + 24;
      }
      else {
        std::string::size_type v10 = 0;
      }
LABEL_15:
      memcpy(__dst, &v10[v8], __n);
      return __n;
    }
  }
  std::string::basic_string(&v16, v6, v8, v7, (std::allocator<char> *)&v17);
  if (*((char *)this + 47) < 0) {
    operator delete(v6->__r_.__value_.__l.__data_);
  }
  std::string *v6 = v16;
  *((void *)this + 2) = 0;
  std::string::resize(v6, __n, 0);
  if (*((char *)this + 47) < 0)
  {
    if (*((void *)this + 4)) {
      uint64_t v11 = (std::string *)*((void *)this + 3);
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else if (*((unsigned char *)this + 47))
  {
    uint64_t v11 = v6;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (***((uint64_t (****)(void, char *, size_t))this + 1))(*((void *)this + 1), (char *)v11 + v9, __n - v9);
  std::string::resize(v6, v12 + v9, 0);
  if (*((char *)this + 47) < 0)
  {
    size_t v13 = *((void *)this + 4);
    if (v13) {
      uint64_t v14 = (std::string *)*((void *)this + 3);
    }
    else {
      uint64_t v14 = 0;
    }
  }
  else
  {
    size_t v13 = *((unsigned __int8 *)this + 47);
    if (*((unsigned char *)this + 47)) {
      uint64_t v14 = v6;
    }
    else {
      uint64_t v14 = 0;
    }
  }
  memcpy(__dst, v14, v13);
  if (*((char *)this + 47) < 0) {
    return *((void *)this + 4);
  }
  else {
    return *((unsigned __int8 *)this + 47);
  }
}

xgboost::common::FixedSizeStream *xgboost::common::FixedSizeStream::FixedSizeStream(xgboost::common::FixedSizeStream *this, xgboost::common::PeekableInStream *a2)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(void *)this = &unk_26E2489E8;
  *((void *)this + 1) = a2;
  uint64_t v4 = (std::string *)((char *)this + 56);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  std::string::size_type v5 = 4096;
  do
  {
    std::string::resize(v4, v5, 0);
    uint64_t v6 = v4;
    if (*((char *)this + 79) < 0) {
      uint64_t v6 = (std::string *)v4->__r_.__value_.__r.__words[0];
    }
    std::string::size_type v7 = (*(uint64_t (**)(xgboost::common::PeekableInStream *, std::string *, std::string::size_type))(*(void *)a2 + 32))(a2, v6, v5);
    BOOL v8 = v7 >= v5;
    v5 *= 2;
  }
  while (v8);
  std::string::resize(v4, v7, 0);
  return this;
}

void sub_22E922F14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v3);
  }
  *(void *)uint64_t v1 = v2;
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::common::FixedSizeStream::Read(xgboost::common::FixedSizeStream *this, void *a2)
{
  uint64_t result = (*(uint64_t (**)(xgboost::common::FixedSizeStream *, void *))(*(void *)this + 32))(this, a2);
  *((void *)this + 6) += result;
  return result;
}

char *xgboost::common::FixedSizeStream::PeekRead(xgboost::common::FixedSizeStream *this, void *__dst, size_t __len)
{
  size_t v3 = __len;
  std::string::size_type v5 = (char *)this + 56;
  LODWORD(v6) = *((char *)this + 79);
  if ((v6 & 0x80000000) != 0)
  {
    std::string::size_type v9 = (void *)((char *)this + 48);
    uint64_t v8 = *((void *)this + 6);
    uint64_t v11 = (char *)*((void *)this + 7);
    uint64_t v7 = *((void *)this + 8);
    if (v7 - v8 <= __len)
    {
      std::string::size_type v10 = &v11[v8];
      goto LABEL_9;
    }
    std::string::size_type v5 = (char *)*((void *)this + 7);
  }
  else
  {
    uint64_t v7 = *((unsigned __int8 *)this + 79);
    std::string::size_type v9 = (void *)((char *)this + 48);
    uint64_t v8 = *((void *)this + 6);
    if (v7 - v8 <= __len)
    {
      std::string::size_type v10 = &v5[v8];
      uint64_t v11 = (char *)this + 56;
LABEL_9:
      uint64_t v12 = &v11[v7];
      if (v12 != v10)
      {
        memmove(__dst, v10, v12 - v10);
        LOBYTE(v6) = *((unsigned char *)this + 79);
      }
      if ((v6 & 0x80) != 0)
      {
        std::string::size_type v5 = (char *)*((void *)this + 7);
        size_t v13 = &v5[*((void *)this + 6)];
        uint64_t v6 = *((void *)this + 8);
      }
      else
      {
        size_t v13 = &v5[*v9];
        uint64_t v6 = v6;
      }
      return (char *)(&v5[v6] - v13);
    }
  }
  if (__len) {
    memmove(__dst, &v5[v8], __len);
  }
  return (char *)v3;
}

uint64_t xgboost::common::FixedSizeStream::Seek(xgboost::common::FixedSizeStream *this, unint64_t a2)
{
  *((void *)this + 6) = a2;
  uint64_t result = (uint64_t)this + 48;
  if (*(char *)(result + 31) < 0) {
    unint64_t v4 = *((void *)this + 8);
  }
  else {
    unint64_t v4 = *(unsigned __int8 *)(result + 31);
  }
  unint64_t v5 = v4;
  if (v4 < a2) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  return result;
}

void sub_22E92316C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

__n128 xgboost::common::FixedSizeStream::Take(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/io.cc");
    uint64_t v6 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: out", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v8);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  __n128 result = *(__n128 *)(a1 + 56);
  *(void *)(a2 + 16) = *(void *)(a1 + 72);
  *(__n128 *)a2 = result;
  *(unsigned char *)(a1 + 79) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  return result;
}

void sub_22E923244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::LoadSequentialFile(char *a1@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  unint64_t v4 = a1;
  std::exception_ptr v45[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = a1;
  if (a1[23] < 0) {
    uint64_t v6 = *(char **)a1;
  }
  dmlc::io::URI::URI((dmlc::io::URI *)&v32, v6);
  if ((char)v34 < 0)
  {
    uint64_t v7 = v33;
    if (v33 != 7) {
      goto LABEL_14;
    }
    if (*(_DWORD *)v32 ^ 0x656C6966 | *(_DWORD *)((char *)v32 + 3) ^ 0x2F2F3A65) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v7 = v34;
    if (v34 != 7 || (v32 == 1701603686 ? (BOOL v8 = *(_DWORD *)((char *)&v32 + 3) == 791624293) : (BOOL v8 = 0), !v8))
    {
LABEL_14:
      if (v7) {
        goto LABEL_35;
      }
    }
  }
  if ((a2 & 1) == 0)
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    uint64_t v9 = MEMORY[0x263F8C308] + 64;
    v44[0] = MEMORY[0x263F8C308] + 64;
    std::string::size_type v10 = (void *)MEMORY[0x263F8C2A8];
    uint64_t v11 = *(void *)(MEMORY[0x263F8C2A8] + 16);
    v42[0] = *(void *)(MEMORY[0x263F8C2A8] + 8);
    *(void *)((char *)v42 + *(void *)(v42[0] - 24)) = v11;
    v42[1] = 0;
    uint64_t v12 = (std::ios_base *)((char *)v42 + *(void *)(v42[0] - 24));
    std::ios_base::init(v12, v43);
    uint64_t v13 = MEMORY[0x263F8C308] + 24;
    v12[1].__vftable = 0;
    v12[1].__fmtflags_ = -1;
    v42[0] = v13;
    v44[0] = v9;
    MEMORY[0x230FA7BD0](v43);
    if (!std::filebuf::open()) {
      std::ios_base::clear((std::ios_base *)((char *)v42 + *(void *)(v42[0] - 24)), *(_DWORD *)&v43[*(void *)(v42[0] - 24) + 16] | 4);
    }
    if ((v43[*(void *)(v42[0] - 24) + 16] & 5) != 0)
    {
      memset(&v40, 0, sizeof(v40));
      std::operator+<char>();
      uint64_t v14 = std::string::append(&v39, " failed: ");
      std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
      v45[0] = v14->__r_.__value_.__l.__size_;
      *(void *)((char *)v45 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v45 + 7);
      v40.__r_.__value_.__r.__words[0] = v15;
      v40.__r_.__value_.__l.__size_ = v45[0];
      *((unsigned char *)&v40.__r_.__value_.__s + 23) = v16;
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      char v17 = __error();
      unsigned __int8 v18 = strerror(*v17);
      std::string::append(&v40, v18);
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/io.cc");
      std::string v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v21 = &v40;
      }
      else {
        std::string v21 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v40.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, size);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v39);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
    }
    std::istream::seekg();
    std::istream::tellg();
    uint64_t v23 = v41;
    std::istream::seekg();
    std::string::resize(a3, v23 + 1, 0);
    std::istream::read();
    std::string::size_type v24 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80u) == 0) {
      int64_t v25 = a3;
    }
    else {
      int64_t v25 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v24 & 0x80u) != 0) {
      std::string::size_type v24 = a3->__r_.__value_.__l.__size_;
    }
    v25->__r_.__value_.__s.__data_[v24 - 1] = 0;
    v42[0] = *v10;
    *(void *)((char *)v42 + *(void *)(v42[0] - 24)) = v10[3];
    MEMORY[0x230FA7BE0](v43);
    std::istream::~istream();
    MEMORY[0x230FA8020](v44);
    goto LABEL_43;
  }
LABEL_35:
  if (v4[23] < 0) {
    unint64_t v4 = *(char **)v4;
  }
  uint64_t v26 = dmlc::Stream::Create((dmlc::Stream *)v4, "r", 0);
  std::string::size_type v27 = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  unint64_t v28 = 4096;
  a3->__r_.__value_.__r.__words[2] = 0;
  do
  {
    std::string::resize(a3, v27 + v28, 0);
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v29 = a3;
    }
    else {
      unint64_t v29 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    unint64_t v30 = (**(uint64_t (***)(uint64_t, std::string::size_type, unint64_t))v26)(v26, (std::string::size_type)v29 + v27, v28);
    v27 += v30;
    BOOL v31 = v30 >= v28;
    v28 *= 2;
  }
  while (v31);
  std::string::resize(a3, v27, 0);
  (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
LABEL_43:
  if (v38 < 0) {
    operator delete(__p);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if ((char)v34 < 0) {
    operator delete(v32);
  }
}

void sub_22E923804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  std::ifstream::~ifstream(&a44);
  if (*(char *)(v44 + 23) < 0) {
    operator delete(*(void **)v44);
  }
  dmlc::io::FileInfo::~FileInfo((void **)&a9);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x230FA7BE0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x230FA8020](a1 + 53);
  return a1;
}

void xgboost::common::FileExtension(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (a2)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v6 = *(unsigned char **)a1;
      unint64_t v5 = (unsigned char *)(*(void *)a1 + *(void *)(a1 + 8));
    }
    else
    {
      unint64_t v5 = (unsigned char *)(a1 + *(unsigned __int8 *)(a1 + 23));
      uint64_t v6 = (unsigned char *)a1;
    }
    while (v6 != v5)
    {
      unsigned char *v6 = __tolower((char)*v6);
      ++v6;
    }
  }
  xgboost::common::Split((const std::string *)a1, 0x2Eu, &v8);
  if (0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) < 2)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v9 - 1) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v9 - 24), *(void *)(v9 - 16));
  }
  else
  {
    long long v7 = *(_OWORD *)(v9 - 24);
    a3->__r_.__value_.__r.__words[2] = *(void *)(v9 - 8);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
  std::string::size_type v10 = (void **)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
}

void sub_22E923AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void xgboost::common::Split(const std::string *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  std::istringstream::basic_istringstream[abi:ne180100](v9, a1, 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  while (1)
  {
    unint64_t v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (uint64_t)&v12, a2);
    if ((*((unsigned char *)v5 + *(void *)(*v5 - 24) + 32) & 5) != 0) {
      break;
    }
    unint64_t v6 = a3[1];
    if (v6 >= a3[2])
    {
      uint64_t v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, &v12);
    }
    else
    {
      if (SHIBYTE(v13) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)v12, *((std::string::size_type *)&v12 + 1));
      }
      else
      {
        long long v7 = v12;
        *(void *)(v6 + 16) = v13;
        *(_OWORD *)unint64_t v6 = v7;
      }
      uint64_t v8 = v6 + 24;
      a3[1] = v6 + 24;
    }
    a3[1] = v8;
  }
  v9[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  unint64_t v9[2] = MEMORY[0x263F8C318] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x230FA8020](&v11);
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)v12);
  }
}

void sub_22E923CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  *(void *)(v11 - 56) = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 56));
  std::istringstream::~istringstream((uint64_t)&a9);
  if (*(char *)(v11 - 57) < 0) {
    operator delete(*(void **)(v11 - 80));
  }
  _Unwind_Resume(a1);
}

void xgboost::common::PeekableInStream::Write(xgboost::common::PeekableInStream *this, const void *a2)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/io.h");
  uint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Not implemented", 15);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
}

void sub_22E923D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::PeekableInStream::~PeekableInStream(void **this)
{
  *this = &unk_26E248A20;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26E248A20;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  JUMPOUT(0x230FA80D0);
}

void xgboost::common::FixedSizeStream::Write(xgboost::common::FixedSizeStream *this, const void *a2)
{
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/io.h");
  uint64_t v3 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Not implemented", 15);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
}

void sub_22E923E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void xgboost::common::FixedSizeStream::~FixedSizeStream(void **this)
{
  xgboost::common::FixedSizeStream::~FixedSizeStream(this);

  JUMPOUT(0x230FA80D0);
}

{
  *this = &unk_26E2489E8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  *this = &unk_26E248A20;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

dmlc::io::URI *dmlc::io::URI::URI(dmlc::io::URI *this, char *__s1)
{
  *((_OWORD *)this + 3) = 0u;
  char v4 = (std::string *)((char *)this + 48);
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  unint64_t v5 = (char *)this + 24;
  *(_OWORD *)this = 0u;
  unint64_t v6 = strstr(__s1, "://");
  if (v6)
  {
    long long v7 = v6;
    std::string::basic_string[abi:ne180100](&__dst, __s1, v6 - __s1 + 3);
    if (*((char *)this + 23) < 0) {
      operator delete(*(void **)this);
    }
    *(_OWORD *)this = __dst;
    *((void *)this + 2) = v13;
    uint64_t v8 = v7 + 3;
    uint64_t v9 = strchr(v8, 47);
    if (v9)
    {
      uint64_t v10 = v9;
      std::string::basic_string[abi:ne180100](&__dst, v8, v9 - v8);
      if (*((char *)this + 47) < 0) {
        operator delete(*(void **)v5);
      }
      *(_OWORD *)unint64_t v5 = __dst;
      *((void *)v5 + 2) = v13;
      MEMORY[0x230FA7B10](v4, v10);
    }
    else
    {
      MEMORY[0x230FA7B10](v5, v8);
      std::string::operator=(v4, 47);
    }
  }
  else
  {
    MEMORY[0x230FA7B10](v4, __s1);
  }
  return this;
}

void sub_22E924010(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *long long __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    unint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

uint64_t xgboost::obj::__dmlc_registry_file_tag_aft_obj__(xgboost::obj *this)
{
  return 0;
}

void xgboost::obj::AFTObj::~AFTObj(xgboost::obj::AFTObj *this)
{
}

void xgboost::obj::AFTObj::LoadConfig(xgboost::obj::AFTObj *this, const xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "aft_loss_param");
  char v4 = (_DWORD **)(*(uint64_t (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::FromJson<xgboost::common::AFTParam>(v4, (xgboost::obj::AFTObj *)((char *)this + 16), &v7);
  size_t v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22E924320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::obj::AFTObj::SaveConfig(xgboost::obj::AFTObj *this, xgboost::Json *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "survival:aft");
  char v6 = &unk_26E24E210;
  uint64_t v7 = 0;
  *(_OWORD *)size_t v8 = *(_OWORD *)v4;
  uint64_t v9 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(void, void **))(**(void **)a2 + 24))(*(void *)a2, __p);
  xgboost::Json::operator=();
}

void sub_22E9244C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29)
{
}

void xgboost::obj::AFTObj::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::XGBoostParameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::common::AFTParam *)(a1 + 16), a2, v2);
  uint64_t v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::AFTObj::GetGradient(uint64_t a1, uint64_t **a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v280 = *MEMORY[0x263EF8340];
  unint64_t v277 = ((*a2)[1] - **a2) >> 2;
  if ((uint64_t)(*(void *)(a3[13] + 8) - *(void *)a3[13]) >> 2 != v277) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if ((uint64_t)(*(void *)(a3[14] + 8) - *(void *)a3[14]) >> 2 != v277) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  v278.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v277, &v278);
  int v9 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  float v10 = *(float *)(a1 + 24);
  uint64_t v11 = (uint64_t *)a3[9];
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  uint64_t v14 = v12 - *v11;
  if (v14 && v14 >> 2 != v277) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  int v15 = *(_DWORD *)(a1 + 20);
  __asm { FMOV            V0.2D, #15.0 }
  float64x2_t v276 = _Q0;
  if (v15 == 2)
  {
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    v278.__ptr_ = 0;
    v279.__m_.__sig = 850045863;
    memset(v279.__m_.__opaque, 0, sizeof(v279.__m_.__opaque));
    if (!v277) {
      goto LABEL_274;
    }
    uint64_t v87 = *(void *)*a5;
    uint64_t v86 = *(void *)(*a5 + 8);
    double v88 = exp(-INFINITY);
    uint64_t v260 = v87;
    if (v87 || !v86)
    {
      uint64_t v89 = (*a2)[1];
      uint64_t v262 = **a2;
      if (v262 || !v89)
      {
        float64x2_t v90 = (uint64_t *)a3[13];
        uint64_t v92 = *v90;
        uint64_t v91 = v90[1];
        if (v92 || !v91)
        {
          int v93 = (uint64_t *)a3[14];
          uint64_t v95 = *v93;
          uint64_t v94 = v93[1];
          if (v95 || !v94)
          {
            float64x2_t v96 = (uint64_t *)a3[9];
            uint64_t v98 = *v96;
            uint64_t v97 = v96[1];
            uint64_t v254 = v98;
            if (v98 || !v97)
            {
              unint64_t v99 = 0;
              uint64_t v256 = (v86 - v87) >> 3;
              double v242 = 1.0 - v88;
              uint64_t v100 = (v89 - v262) >> 2;
              uint64_t v101 = (v91 - v92) >> 2;
              uint64_t v102 = (v94 - v95) >> 2;
              unint64_t v251 = (v97 - v98) >> 2;
              double v103 = v10;
              double v248 = v103 * v103;
              double v239 = 1.0 / v10;
              double v268 = v10;
              while (v100 != v99 && v101 != v99 && v102 != v99)
              {
                double v104 = *(float *)(v262 + 4 * v99);
                float v105 = *(float *)(v92 + 4 * v99);
                float v106 = *(float *)(v95 + 4 * v99);
                double v107 = v106;
                double v108 = log(v105);
                double v109 = log(v106);
                double v265 = v109;
                if (v105 == v106)
                {
                  double v110 = exp((v108 - v104) / v103);
                  double v111 = 0.0;
                  double v112 = 0.0;
                  if (v110 != INFINITY)
                  {
                    double v111 = v110 * exp(-v110);
                    double v112 = (1.0 - v110) * v111;
                  }
                  int v113 = 0;
                  BOOL v114 = (v108 - v104) / v103 > 0.0;
                }
                else
                {
                  double v115 = 0.0;
                  if (fabs(v107) == INFINITY)
                  {
                    double v116 = 1.0;
                    int v113 = 1;
                    double v117 = 0.0;
                    double v118 = 0.0;
                  }
                  else
                  {
                    double v117 = (v109 - v104) / v268;
                    double v119 = exp(v117);
                    double v120 = exp(-v119);
                    if (v119 == INFINITY) {
                      double v118 = 0.0;
                    }
                    else {
                      double v118 = v119 * v120;
                    }
                    double v116 = 1.0 - v120;
                    int v113 = 3;
                  }
                  if (v105 <= 0.0)
                  {
                    BOOL v114 = 0;
                    int v113 = 2;
                    double v126 = 0.0;
                  }
                  else
                  {
                    double v121 = (v108 - v104) / v268;
                    double v272 = v117;
                    double v245 = v108;
                    double v122 = v116;
                    double v123 = v118;
                    double v124 = exp(v121);
                    double v125 = exp(-v124);
                    double v118 = v123;
                    if (v124 == INFINITY) {
                      double v115 = 0.0;
                    }
                    else {
                      double v115 = v124 * v125;
                    }
                    double v116 = v122;
                    double v108 = v245;
                    double v117 = v272;
                    double v126 = 1.0 - v125;
                    BOOL v114 = v121 > 0.0;
                  }
                  if (v117 > 0.0) {
                    BOOL v114 = 1;
                  }
                  double v112 = v118 - v115;
                  double v111 = v116 - v126;
                  double v103 = v268;
                }
                double v127 = v111 * v103;
                v128.f64[0] = v112 / v127;
                if (v127 < 1.0e-12 && fabs(v128.f64[0]) == INFINITY)
                {
                  switch(v113)
                  {
                    case 0:
                    case 3:
                      BOOL v129 = !v114;
                      double v130 = -15.0;
                      goto LABEL_129;
                    case 1:
                      BOOL v129 = !v114;
                      double v130 = -15.0;
                      double v131 = 0.0;
                      goto LABEL_130;
                    case 2:
                      BOOL v129 = !v114;
                      double v130 = 0.0;
LABEL_129:
                      double v131 = v239;
LABEL_130:
                      if (v129) {
                        v128.f64[0] = v131;
                      }
                      else {
                        v128.f64[0] = v130;
                      }
                      break;
                    default:
                      v128.f64[0] = NAN;
                      break;
                  }
                }
                float64_t v273 = v128.f64[0];
                if (v105 == v106)
                {
                  double v132 = (v108 - v104) / v103;
                  double v133 = exp(v132);
                  double v134 = 0.0;
                  if (v133 == INFINITY)
                  {
                    double v135 = 0.0;
                    double v136 = 0.0;
                  }
                  else
                  {
                    double v136 = v133 * exp(-v133);
                    double v135 = (1.0 - v133) * v136;
                    if (v133 * v133 != INFINITY) {
                      double v134 = v136 * (v133 * -3.0 + v133 * v133 + 1.0);
                    }
                  }
                  v128.f64[0] = v273;
                  int v139 = 0;
                  double v143 = -(v136 * v134 - v135 * v135);
                  double v144 = v136 * (v248 * v136);
                  BOOL v145 = v132 > 0.0;
                }
                else
                {
                  double v137 = 0.0;
                  if (fabs(v107) == INFINITY)
                  {
                    double v138 = 1.0;
                    int v139 = 1;
                    double v140 = 0.0;
                    double v141 = 0.0;
                    double v142 = 0.0;
                  }
                  else
                  {
                    double v140 = (v265 - v104) / v103;
                    double v146 = exp(v140);
                    if (v146 == INFINITY)
                    {
                      int v139 = 3;
                      double v141 = 0.0;
                      double v142 = 0.0;
                      double v138 = v242;
                    }
                    else
                    {
                      long double v147 = exp(-v146);
                      double v142 = v146 * v147;
                      double v138 = 1.0 - v147;
                      double v141 = (1.0 - v146) * (v146 * v147);
                      int v139 = 3;
                    }
                    v128.f64[0] = v273;
                  }
                  if (v105 <= 0.0)
                  {
                    BOOL v145 = 0;
                    int v139 = 2;
                    double v151 = 0.0;
                    double v152 = 0.0;
                  }
                  else
                  {
                    double v148 = v138;
                    double v149 = (v108 - v104) / v268;
                    double v150 = exp(v149);
                    double v151 = 0.0;
                    double v152 = v242;
                    if (v150 != INFINITY)
                    {
                      long double v153 = exp(-v150);
                      double v151 = v150 * v153;
                      double v137 = (1.0 - v150) * (v150 * v153);
                      double v152 = 1.0 - v153;
                    }
                    BOOL v145 = v149 > 0.0;
                    v128.f64[0] = v273;
                    double v138 = v148;
                  }
                  double v154 = v138 - v152;
                  double v155 = v142 - v151;
                  double v156 = v141 - v137;
                  double v103 = v268;
                  if (v140 > 0.0) {
                    BOOL v145 = 1;
                  }
                  double v143 = -(v154 * v156 - v155 * v155);
                  double v144 = v154 * v268 * (v154 * v268);
                }
                _NF = v144 < 1.0e-12;
                double v157 = v143 / v144;
                if (_NF && fabs(v157) == INFINITY)
                {
                  if (v139 == 2)
                  {
                    double v157 = 1.0e-16;
                  }
                  else
                  {
                    double v157 = 1.0e-16;
                    if (v145) {
                      double v157 = 15.0;
                    }
                  }
                }
                if (v12 == v13)
                {
                  float v158 = 1.0;
                }
                else
                {
                  if (v251 <= v99) {
                    break;
                  }
                  float v158 = *(float *)(v254 + 4 * v99);
                }
                if (v256 == v99) {
                  break;
                }
                v128.f64[1] = v157;
                *(float32x2_t *)(v260 + 8 * v99++) = vmul_n_f32(vcvt_f32_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)xmmword_22EA1B440, v128), (int8x16_t)xmmword_22EA1B440, vbslq_s8((int8x16_t)vcgtq_f64(v128, v276), (int8x16_t)v276, (int8x16_t)v128))), v158);
                if (v277 == v99) {
                  goto LABEL_274;
                }
              }
            }
          }
        }
      }
    }
LABEL_275:
    std::terminate();
  }
  if (v15 == 1)
  {
    if ((v9 & 0x80000000) == 0)
    {
LABEL_16:
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v278);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
      std::string v21 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v278);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v278);
      return;
    }
    v278.__ptr_ = 0;
    v279.__m_.__sig = 850045863;
    memset(v279.__m_.__opaque, 0, sizeof(v279.__m_.__opaque));
    if (!v277) {
      goto LABEL_274;
    }
    uint64_t v159 = *(void *)(*a5 + 8);
    uint64_t v263 = *(void *)*a5;
    if (v263 || !v159)
    {
      uint64_t v160 = (*a2)[1];
      uint64_t v266 = **a2;
      if (v266 || !v160)
      {
        uint64_t v161 = (uint64_t *)a3[13];
        uint64_t v163 = *v161;
        uint64_t v162 = v161[1];
        if (v163 || !v162)
        {
          uint64_t v164 = (uint64_t *)a3[14];
          uint64_t v166 = *v164;
          uint64_t v165 = v164[1];
          if (v166 || !v165)
          {
            uint64_t v167 = (uint64_t *)a3[9];
            uint64_t v169 = *v167;
            uint64_t v168 = v167[1];
            uint64_t v255 = v169;
            if (v169 || !v168)
            {
              unint64_t v170 = 0;
              uint64_t v259 = (v159 - v263) >> 3;
              uint64_t v171 = (v160 - v266) >> 2;
              uint64_t v172 = (v162 - v163) >> 2;
              double v173 = v10;
              uint64_t v174 = (v165 - v166) >> 2;
              unint64_t v252 = (v168 - v169) >> 2;
              double v175 = 1.0;
              double v243 = 1.0 / v10;
              double v249 = v173 * v173;
              double v240 = -1.0 / v10;
              double v257 = v10;
              while (v171 != v170 && v172 != v170 && v174 != v170)
              {
                double v176 = *(float *)(v266 + 4 * v170);
                float v177 = *(float *)(v163 + 4 * v170);
                float v178 = *(float *)(v166 + 4 * v170);
                double v179 = v178;
                double v180 = log(v177);
                double v181 = log(v178);
                double v269 = v181;
                if (v177 == v178)
                {
                  double v182 = exp((v180 - v176) / v173);
                  double v183 = v182 * v182;
                  double v184 = 0.0;
                  BOOL v185 = v182 == INFINITY || v183 == INFINITY;
                  double v186 = 0.0;
                  if (!v185) {
                    double v186 = v182 / ((v182 + v175) * (v182 + v175));
                  }
                  if (v182 != INFINITY)
                  {
                    double v187 = v182 + v175;
                    double v188 = 0.0;
                    if (v183 != INFINITY) {
                      double v188 = v182 / (v187 * v187);
                    }
                    double v184 = (v175 - v182) * v188 / v187;
                  }
                  int v189 = 0;
                  BOOL v190 = (v180 - v176) / v173 > 0.0;
                }
                else
                {
                  double v191 = 1.0;
                  double v192 = 0.0;
                  if (fabs(v179) == INFINITY)
                  {
                    int v189 = 1;
                    double v193 = 0.0;
                    double v194 = 0.0;
                  }
                  else
                  {
                    double v193 = (v181 - v176) / v173;
                    double v195 = exp(v193);
                    double v194 = 0.0;
                    if (v195 != INFINITY && v195 * v195 != INFINITY) {
                      double v194 = v195 / ((v195 + 1.0) * (v195 + 1.0));
                    }
                    int v189 = 3;
                    double v191 = v195 == INFINITY ? 1.0 : v195 / (v195 + 1.0);
                  }
                  if (v177 <= 0.0)
                  {
                    BOOL v190 = 0;
                    int v189 = 2;
                    double v203 = 0.0;
                  }
                  else
                  {
                    double v197 = v180;
                    double v198 = v194;
                    double v274 = v193;
                    double v199 = v191;
                    double v246 = v197;
                    double v200 = (v197 - v176) / v173;
                    double v201 = exp(v200);
                    if (v201 != INFINITY && v201 * v201 != INFINITY) {
                      double v192 = v201 / ((v201 + 1.0) * (v201 + 1.0));
                    }
                    double v203 = 1.0;
                    double v191 = v199;
                    double v194 = v198;
                    if (v201 != INFINITY) {
                      double v203 = v201 / (v201 + 1.0);
                    }
                    BOOL v190 = v200 > 0.0;
                    double v173 = v257;
                    double v193 = v274;
                    double v180 = v246;
                  }
                  if (v193 > 0.0) {
                    BOOL v190 = 1;
                  }
                  double v184 = v194 - v192;
                  double v186 = v191 - v203;
                  double v175 = 1.0;
                }
                v204.f64[0] = v184 / (v186 * v173);
                if (v186 * v173 < 1.0e-12 && fabs(v204.f64[0]) == INFINITY)
                {
                  switch(v189)
                  {
                    case 0:
                    case 3:
                      double v205 = -1.0;
                      if (!v190) {
                        double v205 = v175;
                      }
                      v204.f64[0] = v205 / v173;
                      break;
                    case 1:
                      BOOL v206 = !v190;
                      double v207 = 0.0;
                      double v208 = v240;
                      goto LABEL_226;
                    case 2:
                      BOOL v206 = !v190;
                      double v207 = v243;
                      double v208 = 0.0;
LABEL_226:
                      if (v206) {
                        v204.f64[0] = v207;
                      }
                      else {
                        v204.f64[0] = v208;
                      }
                      break;
                    default:
                      v204.f64[0] = NAN;
                      break;
                  }
                }
                float64_t v275 = v204.f64[0];
                if (v177 == v178)
                {
                  double v209 = exp((v180 - v176) / v173);
                  BOOL v210 = v209 == INFINITY;
                  if (v209 * v209 == INFINITY) {
                    BOOL v210 = 1;
                  }
                  double v211 = 0.0;
                  double v212 = 0.0;
                  if (!v210) {
                    double v212 = v209 / ((v209 + v175) * (v209 + v175));
                  }
                  if (v209 == INFINITY)
                  {
                    double v213 = 0.0;
                    v204.f64[0] = v275;
                  }
                  else
                  {
                    double v219 = v209 + v175;
                    double v220 = v175 - v209;
                    v204.f64[0] = v275;
                    if (v209 * v209 == INFINITY)
                    {
                      double v213 = v220 * 0.0 / v219;
                    }
                    else
                    {
                      double v224 = v209 / (v219 * v219);
                      double v213 = v220 * v224 / v219;
                      if (!v210) {
                        double v211 = (v209 * -4.0 + v209 * v209 + v175) * v224 / (v219 * v219);
                      }
                    }
                  }
                  double v225 = -(v212 * v211 - v213 * v213);
                  double v226 = v212 * (v249 * v212);
                }
                else
                {
                  double v214 = fabs(v179);
                  double v215 = 1.0;
                  double v216 = 0.0;
                  if (v214 == INFINITY)
                  {
                    double v217 = 0.0;
                    double v218 = 0.0;
                  }
                  else
                  {
                    double v221 = exp((v269 - v176) / v173);
                    double v222 = v221 * v221;
                    double v217 = 0.0;
                    BOOL v223 = v221 == INFINITY || v222 == INFINITY;
                    double v218 = 0.0;
                    if (!v223) {
                      double v218 = v221 / ((v221 + v175) * (v221 + v175));
                    }
                    if (v221 == INFINITY)
                    {
                      v204.f64[0] = v275;
                    }
                    else
                    {
                      double v227 = v221 + v175;
                      double v228 = 0.0;
                      v204.f64[0] = v275;
                      if (v222 != INFINITY) {
                        double v228 = v221 / (v227 * v227);
                      }
                      double v215 = v221 / v227;
                      double v217 = (v175 - v221) * v228 / v227;
                    }
                  }
                  double v229 = 0.0;
                  double v230 = 0.0;
                  if (v177 > 0.0)
                  {
                    double v231 = exp((v180 - v176) / v257);
                    double v232 = v231 * v231;
                    BOOL v233 = v231 == INFINITY || v232 == INFINITY;
                    double v229 = 0.0;
                    if (!v233) {
                      double v229 = v231 / ((v231 + v175) * (v231 + v175));
                    }
                    double v230 = 1.0;
                    if (v231 == INFINITY)
                    {
                      v204.f64[0] = v275;
                    }
                    else
                    {
                      double v234 = v231 + v175;
                      double v235 = 0.0;
                      v204.f64[0] = v275;
                      if (v232 != INFINITY) {
                        double v235 = v231 / (v234 * v234);
                      }
                      double v230 = v231 / v234;
                      double v216 = (v175 - v231) * v235 / v234;
                    }
                  }
                  double v236 = v217 - v216;
                  double v173 = v257;
                  double v225 = -((v215 - v230) * v236 - (v218 - v229) * (v218 - v229));
                  double v226 = (v215 - v230) * v257 * ((v215 - v230) * v257);
                }
                double v237 = v225 / v226;
                if (v226 < 1.0e-12 && fabs(v237) == INFINITY) {
                  double v237 = 1.0e-16;
                }
                if (v12 == v13)
                {
                  float v238 = 1.0;
                }
                else
                {
                  if (v252 <= v170) {
                    goto LABEL_275;
                  }
                  float v238 = *(float *)(v255 + 4 * v170);
                }
                if (v259 == v170) {
                  break;
                }
                v204.f64[1] = v237;
                *(float32x2_t *)(v263 + 8 * v170++) = vmul_n_f32(vcvt_f32_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)xmmword_22EA1B440, v204), (int8x16_t)xmmword_22EA1B440, vbslq_s8((int8x16_t)vcgtq_f64(v204, v276), (int8x16_t)v276, (int8x16_t)v204))), v238);
                if (v277 == v170) {
                  goto LABEL_274;
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_275;
  }
  if (v15)
  {
    long long v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v278);
    dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/aft_obj.cu");
    uint64_t v23 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v278);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unrecognized distribution", 25);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v278);
    return;
  }
  if ((v9 & 0x80000000) == 0) {
    goto LABEL_16;
  }
  v278.__ptr_ = 0;
  v279.__m_.__sig = 850045863;
  memset(v279.__m_.__opaque, 0, sizeof(v279.__m_.__opaque));
  if (v277)
  {
    uint64_t v24 = *(void *)(*a5 + 8);
    uint64_t v261 = *(void *)*a5;
    if (v261 || !v24)
    {
      uint64_t v25 = (*a2)[1];
      uint64_t v264 = **a2;
      if (v264 || !v25)
      {
        uint64_t v26 = (uint64_t *)a3[13];
        uint64_t v28 = *v26;
        uint64_t v27 = v26[1];
        if (v28 || !v27)
        {
          unint64_t v29 = (uint64_t *)a3[14];
          uint64_t v31 = *v29;
          uint64_t v30 = v29[1];
          if (v31 || !v30)
          {
            uint64_t v32 = (uint64_t *)a3[9];
            uint64_t v34 = *v32;
            uint64_t v33 = v32[1];
            uint64_t v253 = v34;
            if (v34 || !v33)
            {
              unint64_t v35 = 0;
              uint64_t v36 = (v24 - v261) >> 3;
              uint64_t v37 = (v25 - v264) >> 2;
              uint64_t v38 = (v27 - v28) >> 2;
              uint64_t v39 = (v30 - v31) >> 2;
              unint64_t v250 = (v33 - v34) >> 2;
              double v40 = v10;
              double v247 = v40 * v40;
              double v241 = 1.0 / (v40 * v40);
              double v258 = v10;
              while (v37 != v35 && v38 != v35 && v39 != v35)
              {
                double v41 = *(float *)(v264 + 4 * v35);
                float v42 = *(float *)(v28 + 4 * v35);
                float v43 = *(float *)(v31 + 4 * v35);
                double v44 = v43;
                double v45 = log(v42);
                double v46 = log(v43);
                double v267 = v46;
                if (v42 == v43)
                {
                  double v47 = (v45 - v41) / v40;
                  int v48 = 0;
                  double v49 = exp(v47 * v47 * -0.5) / 2.50662827;
                  double v50 = -(v47 * v49);
                  BOOL v51 = v47 > 0.0;
                }
                else
                {
                  double v52 = 0.0;
                  if (fabs(v44) == INFINITY)
                  {
                    double v53 = 1.0;
                    int v48 = 1;
                    double v54 = 0.0;
                    double v270 = 0.0;
                  }
                  else
                  {
                    double v54 = (v46 - v41) / v40;
                    double v270 = exp(-(v54 * v54) * 0.5) / 2.50662827;
                    double v53 = (erf(v54 / 1.41421356) + 1.0) * 0.5;
                    int v48 = 3;
                  }
                  if (v42 <= 0.0)
                  {
                    BOOL v51 = 0;
                    int v48 = 2;
                    double v59 = 0.0;
                  }
                  else
                  {
                    double v55 = (v45 - v41) / v258;
                    double v244 = v41;
                    double v56 = v45;
                    double v57 = v53;
                    double v52 = exp(-(v55 * v55) * 0.5) / 2.50662827;
                    long double v58 = erf(v55 / 1.41421356);
                    double v53 = v57;
                    double v45 = v56;
                    double v41 = v244;
                    double v59 = (v58 + 1.0) * 0.5;
                    BOOL v60 = v55 <= 0.0;
                    double v40 = v258;
                    BOOL v51 = !v60;
                  }
                  if (v54 > 0.0) {
                    BOOL v51 = 1;
                  }
                  double v50 = v270 - v52;
                  double v49 = v53 - v59;
                }
                double v61 = v49 * v40;
                double v62 = v50 / v61;
                if (v61 < 1.0e-12 && fabs(v62) == INFINITY)
                {
                  switch(v48)
                  {
                    case 0:
                    case 3:
                      _ZF = !v51;
                      double v64 = 15.0;
                      double v65 = -15.0;
                      goto LABEL_55;
                    case 1:
                      if (v51) {
                        double v62 = -15.0;
                      }
                      else {
                        double v62 = 0.0;
                      }
                      break;
                    case 2:
                      _ZF = !v51;
                      double v64 = 15.0;
                      double v65 = 0.0;
LABEL_55:
                      if (_ZF) {
                        double v62 = v64;
                      }
                      else {
                        double v62 = v65;
                      }
                      break;
                    default:
                      double v62 = NAN;
                      break;
                  }
                }
                double v271 = v62;
                if (v42 == v43)
                {
                  double v66 = (v45 - v41) / v40;
                  int v67 = 0;
                  long double v68 = exp(v66 * v66 * -0.5) / 2.50662827;
                  double v69 = -(v68 * ((v66 * v66 + -1.0) * v68) - -(v66 * v68) * -(v66 * v68));
                  double v70 = v68 * (v247 * v68);
                  BOOL v71 = v66 > 0.0;
                }
                else
                {
                  double v72 = 0.0;
                  if (fabs(v44) == INFINITY)
                  {
                    double v73 = 1.0;
                    int v67 = 1;
                    double v74 = 0.0;
                    double v75 = 0.0;
                    double v76 = 0.0;
                  }
                  else
                  {
                    double v74 = (v267 - v41) / v40;
                    double v76 = exp(-(v74 * v74) * 0.5) / 2.50662827;
                    double v73 = (erf(v74 / 1.41421356) + 1.0) * 0.5;
                    double v75 = -(v74 * v76);
                    int v67 = 3;
                  }
                  if (v42 <= 0.0)
                  {
                    BOOL v71 = 0;
                    int v67 = 2;
                    double v79 = 0.0;
                    double v80 = 0.0;
                    double v77 = v258;
                  }
                  else
                  {
                    double v77 = v258;
                    double v78 = (v45 - v41) / v258;
                    double v79 = exp(-(v78 * v78) * 0.5) / 2.50662827;
                    double v80 = (erf(v78 / 1.41421356) + 1.0) * 0.5;
                    double v72 = -(v78 * v79);
                    BOOL v71 = v78 > 0.0;
                  }
                  double v81 = v73 - v80;
                  double v82 = v81 * v77;
                  if (v74 > 0.0) {
                    BOOL v71 = 1;
                  }
                  double v69 = -(v81 * (v75 - v72) - (v76 - v79) * (v76 - v79));
                  double v70 = v82 * v82;
                  double v40 = v77;
                }
                double v83 = v69 / v70;
                if (v70 >= 1.0e-12)
                {
                  v84.f64[0] = v271;
                }
                else
                {
                  v84.f64[0] = v271;
                  if (fabs(v83) == INFINITY)
                  {
                    switch(v67)
                    {
                      case 0:
                      case 3:
                        double v83 = v241;
                        break;
                      case 1:
                        double v83 = 1.0e-16;
                        if (v71) {
                          double v83 = v241;
                        }
                        break;
                      case 2:
                        double v83 = 1.0e-16;
                        if (!v71) {
                          double v83 = v241;
                        }
                        break;
                      default:
                        double v83 = NAN;
                        break;
                    }
                  }
                }
                if (v12 == v13)
                {
                  float v85 = 1.0;
                }
                else
                {
                  if (v250 <= v35) {
                    goto LABEL_275;
                  }
                  float v85 = *(float *)(v253 + 4 * v35);
                }
                if (v36 == v35) {
                  break;
                }
                v84.f64[1] = v83;
                *(float32x2_t *)(v261 + 8 * v35++) = vmul_n_f32(vcvt_f32_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)xmmword_22EA1B440, v84), (int8x16_t)xmmword_22EA1B440, vbslq_s8((int8x16_t)vcgtq_f64(v84, v276), (int8x16_t)v276, (int8x16_t)v84))), v85);
                if (v277 == v35) {
                  goto LABEL_274;
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_275;
  }
LABEL_274:
  dmlc::OMPException::Rethrow(&v278);
  std::mutex::~mutex(&v279);
  std::exception_ptr::~exception_ptr(&v278);
}

void sub_22E925BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,std::exception_ptr a30)
{
  std::mutex::~mutex(v30);
  std::exception_ptr::~exception_ptr(&a30);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::AFTObj::DefaultEvalMetric(xgboost::obj::AFTObj *this)
{
  return "aft-nloglik";
}

void xgboost::obj::AFTObj::PredTransform(uint64_t a1, float ***a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a2;
  uint64_t v2 = (*a2)[1];
  v6.__ptr_ = 0;
  v7.__m_.__sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v2 == 0;
    }
    if (v4)
    {
      uint64_t v5 = v2 - v3;
      while (v5)
      {
        *uint64_t v3 = expf(*v3);
        ++v3;
        if (!--v5) {
          goto LABEL_10;
        }
      }
    }
    std::terminate();
  }
LABEL_10:
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_22E925DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::AFTObj::Task(xgboost::obj::AFTObj *this)
{
  return 3;
}

void xgboost::FromJson<xgboost::common::AFTParam>(_DWORD **a1@<X0>, xgboost::common::AFTParam *a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  uint64_t v5 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*a1);
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v13 = (uint64_t *)v14;
  std::exception_ptr v6 = (void *)v5[2];
  std::mutex v7 = v5 + 3;
  if (v6 != v5 + 3)
  {
    do
    {
      uint64_t v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((xgboost::Value *)v6[7]);
      int v15 = (long long *)(v6 + 4);
      int v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      float v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          float v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          std::exception_ptr v6 = v11;
        }
        while (!v12);
      }
      std::exception_ptr v6 = v11;
    }
    while (v11 != v7);
  }
  xgboost::XGBoostParameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(a2, (uint64_t)&v13, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_22E925EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void xgboost::XGBoostParameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::common::AFTParam *this@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  if (*(unsigned char *)this)
  {
    dmlc::Parameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(this, a2, a3);
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
    std::exception_ptr v6 = xgboost::common::AFTParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)this, *(void **)a2, (void *)(a2 + 8), a3, 0);
    *(unsigned char *)this = 1;
  }
}

void sub_22E925FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void dmlc::Parameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::common::AFTParam *a1@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  std::exception_ptr v6 = xgboost::common::AFTParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)a1, *(void **)a2, (void *)(a2 + 8), 0, a3, 0);
}

void sub_22E926020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::ToJson<xgboost::common::AFTParam>(xgboost::common::AFTParam *a1@<X0>, void *a2@<X8>)
{
  a2[1] = 0x300000000;
  *a2 = &unk_26E24E128;
  a2[3] = 0;
  a2[2] = a2 + 3;
  a2[4] = 0;
  uint64_t v3 = xgboost::common::AFTParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)v3, &v5);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v6, (const void **)&v5.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v5.__end_->first.__r_.__value_.__l.__data_);
  uint64_t v8 = &v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  uint64_t v4 = v6;
  if ((void **)v6 != &v7)
  {
    xgboost::JsonString::JsonString(&v5, (long long *)(v6 + 56));
    uint64_t v8 = (std::vector<std::pair<std::string, std::string>> *)(v4 + 32);
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 2), (const void **)(v4 + 32), (uint64_t)&std::piecewise_construct, (long long **)&v8);
    xgboost::Json::operator=();
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v6, v7);
}

void sub_22E9261AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(void *)uint64_t v21 = v22;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v23, *(void **)(v21 + 24));
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::common::AFTParam *this@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)this)
  {
    dmlc::Parameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(this, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = xgboost::common::AFTParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)this, *a2, a2[1], a3, 0);
    *(unsigned char *)this = 1;
  }
}

void sub_22E9262C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *dmlc::Parameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>@<X0>(xgboost::common::AFTParam *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = xgboost::common::AFTParam::__MANAGER__(a1);
  return dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)a1, *a2, a2[1], 0, a3, 0);
}

void sub_22E926338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::GetCfsCPUCount(xgboost::common *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t xgboost::metric::__dmlc_registry_file_tag_elementwise_metric__(xgboost::metric *this)
{
  return 0;
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowRMSE>::~EvalEWiseBase()
{
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowRMSE>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v47 = ((*a2)[1] - **a2) >> 2;
  std::string __p = (void *)((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2);
  if ((void *)v47 != __p) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(*(void *)(a3 + 24) + 8) != **(void **)(a3 + 24))
  {
    uint64_t v47 = *(void *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v47) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(v6 + 24);
  if (v7 < 0)
  {
    char v17 = *(uint64_t **)(a3 + 24);
    uint64_t v10 = *v17;
    unint64_t v11 = (v17[1] - *v17) >> 2;
    uint64_t v16 = *(void *)(a3 + 40);
    if (v7 == -1)
    {
      uint64_t v42 = **(void **)(a3 + 72);
      unint64_t v12 = (*(void *)(*(void *)(a3 + 72) + 8) - v42) >> 2;
      uint64_t v9 = **a2;
      unint64_t v8 = ((*a2)[1] - v9) >> 2;
    }
    else
    {
      uint64_t v42 = 0;
      unint64_t v12 = 0;
      uint64_t v9 = 0;
      unint64_t v8 = 0;
    }
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v13 = **(void **)(a3 + 24);
    BOOL v18 = *(void *)(*(void *)(a3 + 24) + 8) == v13;
    uint64_t v50 = (*(void *)(*(void *)(a3 + 24) + 8) - v13) >> 2;
    uint64_t v51 = v13;
    uint64_t v14 = v16 * v15;
    if (v18) {
      uint64_t v14 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v42 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v16 = *(void *)(a3 + 40);
  }
  int v54 = v7;
  v49[0] = v15;
  v49[1] = v16;
  uint64_t v47 = v16;
  uint64_t v48 = 1;
  uint64_t v52 = v13;
  uint64_t v53 = v14;
  if (*(_DWORD *)(v6 + 24) == -1)
  {
    v56.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v56);
    v56.__ptr_ = 0;
    std::vector<double>::vector(&v43, 1uLL, &v56);
    uint64_t v24 = **(void **)(a3 + 24);
    uint64_t v25 = *(void *)(*(void *)(a3 + 24) + 8);
    v56.__ptr_ = 0;
    v57.__m_.__sig = 850045863;
    double v26 = 0.0;
    memset(v57.__m_.__opaque, 0, sizeof(v57.__m_.__opaque));
    uint64_t v27 = v25 - v24;
    if (v27)
    {
      unint64_t v28 = 0;
      uint64_t v29 = v27 >> 2;
      do
      {
        v55[0] = 2;
        v55[1] = v49;
        unint64_t v30 = xgboost::linalg::UnravelIndex<2ul>(v28, v55, *(int8x8_t *)&v26);
        if (v12)
        {
          if (v12 <= v30) {
            goto LABEL_41;
          }
          float v32 = *(float *)(v42 + 4 * v30);
        }
        else
        {
          float v32 = 1.0;
        }
        unint64_t v33 = v31 + v30 * v16;
        if (v33 >= v11) {
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        }
        if (v8 <= v28) {
LABEL_41:
        }
          std::terminate();
        float v34 = *(float *)(v10 + 4 * v33) - *(float *)(v9 + 4 * v28);
        *(double *)std::string __p = *(double *)__p + (float)(v32 * (float)(v34 * v34));
        double v26 = *(double *)v43 + v32;
        *(double *)float v43 = v26;
        ++v28;
      }
      while (v29 != v28);
    }
    dmlc::OMPException::Rethrow(&v56);
    std::mutex::~mutex(&v57);
    std::exception_ptr::~exception_ptr(&v56);
    uint64_t v21 = __p;
    double v22 = 0.0;
    double v23 = 0.0;
    if (__p != v46)
    {
      unint64_t v35 = (double *)__p;
      do
      {
        double v36 = *v35++;
        double v23 = v23 + v36;
      }
      while (v35 != v46);
    }
    if (v43 != v44)
    {
      double v22 = 0.0;
      uint64_t v37 = (double *)v43;
      do
      {
        double v38 = *v37++;
        double v22 = v22 + v38;
      }
      while (v37 != v44);
    }
    if (v43)
    {
      double v44 = v43;
      operator delete(v43);
      uint64_t v21 = __p;
    }
    if (v21)
    {
      double v46 = v21;
      operator delete(v21);
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v56);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    std::string v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v56);
    double v22 = 0.0;
    double v23 = 0.0;
  }
  v56.__ptr_ = *(void **)&v23;
  *(double *)&v57.__m_.__sig = v22;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v21);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v56, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v23 = *(double *)&v56.__ptr_;
    double v22 = *(double *)&v57.__m_.__sig;
  }
  double v40 = 1.0;
  if (v22 != 0.0) {
    double v40 = v22;
  }
  return sqrt(v23 / v40);
}

void sub_22E926A3C()
{
}

void sub_22E926A48()
{
}

void sub_22E926A58()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x22E926A88);
}

void sub_22E926AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = a30;
  a30 = 0;
  if (v31) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  }
  _Unwind_Resume(a1);
}

void sub_22E926AF4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowRMSE>::Name()
{
  return "rmse";
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowRMSLE>::~EvalEWiseBase()
{
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowRMSLE>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v49 = ((*a2)[1] - **a2) >> 2;
  std::string __p = (void *)((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2);
  if ((void *)v49 != __p) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(*(void *)(a3 + 24) + 8) != **(void **)(a3 + 24))
  {
    uint64_t v49 = *(void *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v49) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(v6 + 24);
  if (v7 < 0)
  {
    char v17 = *(uint64_t **)(a3 + 24);
    uint64_t v10 = *v17;
    unint64_t v11 = (v17[1] - *v17) >> 2;
    uint64_t v16 = *(void *)(a3 + 40);
    if (v7 == -1)
    {
      uint64_t v44 = **(void **)(a3 + 72);
      unint64_t v12 = (*(void *)(*(void *)(a3 + 72) + 8) - v44) >> 2;
      uint64_t v9 = **a2;
      unint64_t v8 = ((*a2)[1] - v9) >> 2;
    }
    else
    {
      uint64_t v44 = 0;
      unint64_t v12 = 0;
      uint64_t v9 = 0;
      unint64_t v8 = 0;
    }
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v13 = **(void **)(a3 + 24);
    BOOL v18 = *(void *)(*(void *)(a3 + 24) + 8) == v13;
    uint64_t v52 = (*(void *)(*(void *)(a3 + 24) + 8) - v13) >> 2;
    uint64_t v53 = v13;
    uint64_t v14 = v16 * v15;
    if (v18) {
      uint64_t v14 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v44 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v16 = *(void *)(a3 + 40);
  }
  int v56 = v7;
  v51[0] = v15;
  v51[1] = v16;
  uint64_t v49 = v16;
  uint64_t v50 = 1;
  uint64_t v54 = v13;
  uint64_t v55 = v14;
  if (*(_DWORD *)(v6 + 24) == -1)
  {
    *(double *)&v58.__ptr_ = 0.0;
    std::vector<double>::vector(&__p, 1uLL, &v58);
    *(double *)&v58.__ptr_ = 0.0;
    std::vector<double>::vector(&v45, 1uLL, &v58);
    uint64_t v24 = **(void **)(a3 + 24);
    uint64_t v25 = *(void *)(*(void *)(a3 + 24) + 8);
    *(double *)&v58.__ptr_ = 0.0;
    v59.__m_.__sig = 850045863;
    double v26 = 0.0;
    memset(v59.__m_.__opaque, 0, sizeof(v59.__m_.__opaque));
    uint64_t v27 = v25 - v24;
    if (v27)
    {
      unint64_t v28 = 0;
      uint64_t v29 = v27 >> 2;
      do
      {
        v57[0] = 2;
        v57[1] = v51;
        unint64_t v30 = xgboost::linalg::UnravelIndex<2ul>(v28, v57, *(int8x8_t *)&v26);
        if (v12)
        {
          if (v12 <= v30) {
            goto LABEL_41;
          }
          float v32 = *(float *)(v44 + 4 * v30);
        }
        else
        {
          float v32 = 1.0;
        }
        unint64_t v33 = v31 + v30 * v16;
        if (v33 >= v11) {
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        }
        if (v8 <= v28) {
LABEL_41:
        }
          std::terminate();
        float v34 = *(float *)(v9 + 4 * v28);
        float v35 = log1pf(*(float *)(v10 + 4 * v33));
        float v36 = log1pf(v34);
        *(double *)std::string __p = *(double *)__p + (float)(v32 * (float)((float)(v35 - v36) * (float)(v35 - v36)));
        double v26 = *(double *)v45 + v32;
        *(double *)double v45 = v26;
        ++v28;
      }
      while (v29 != v28);
    }
    dmlc::OMPException::Rethrow(&v58);
    std::mutex::~mutex(&v59);
    std::exception_ptr::~exception_ptr(&v58);
    uint64_t v21 = __p;
    double v22 = 0.0;
    double v23 = 0.0;
    if (__p != v48)
    {
      uint64_t v37 = (double *)__p;
      do
      {
        double v38 = *v37++;
        double v23 = v23 + v38;
      }
      while (v37 != v48);
    }
    if (v45 != v46)
    {
      double v22 = 0.0;
      uint64_t v39 = (double *)v45;
      do
      {
        double v40 = *v39++;
        double v22 = v22 + v40;
      }
      while (v39 != v46);
    }
    if (v45)
    {
      double v46 = v45;
      operator delete(v45);
      uint64_t v21 = __p;
    }
    if (v21)
    {
      uint64_t v48 = v21;
      operator delete(v21);
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v58);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    std::string v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v58);
    double v22 = 0.0;
    double v23 = 0.0;
  }
  *(double *)&v58.__ptr_ = v23;
  *(double *)&v59.__m_.__sig = v22;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v21);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v58, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v23 = *(double *)&v58.__ptr_;
    double v22 = *(double *)&v59.__m_.__sig;
  }
  double v42 = 1.0;
  if (v22 != 0.0) {
    double v42 = v22;
  }
  return sqrt(v23 / v42);
}

void sub_22E927210()
{
}

void sub_22E92721C()
{
}

void sub_22E92722C()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x22E92725CLL);
}

void sub_22E927274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = a30;
  a30 = 0;
  if (v31) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  }
  _Unwind_Resume(a1);
}

void sub_22E9272C8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowRMSLE>::Name()
{
  return "rmsle";
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowMAE>::~EvalEWiseBase()
{
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowMAE>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v46 = ((*a2)[1] - **a2) >> 2;
  std::string __p = (void *)((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2);
  if ((void *)v46 != __p) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(*(void *)(a3 + 24) + 8) != **(void **)(a3 + 24))
  {
    uint64_t v46 = *(void *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v46) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(v6 + 24);
  if (v7 < 0)
  {
    char v17 = *(uint64_t **)(a3 + 24);
    uint64_t v10 = *v17;
    unint64_t v11 = (v17[1] - *v17) >> 2;
    uint64_t v16 = *(void *)(a3 + 40);
    if (v7 == -1)
    {
      uint64_t v41 = **(void **)(a3 + 72);
      unint64_t v12 = (*(void *)(*(void *)(a3 + 72) + 8) - v41) >> 2;
      uint64_t v9 = **a2;
      unint64_t v8 = ((*a2)[1] - v9) >> 2;
    }
    else
    {
      uint64_t v41 = 0;
      unint64_t v12 = 0;
      uint64_t v9 = 0;
      unint64_t v8 = 0;
    }
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v13 = **(void **)(a3 + 24);
    BOOL v18 = *(void *)(*(void *)(a3 + 24) + 8) == v13;
    uint64_t v49 = (*(void *)(*(void *)(a3 + 24) + 8) - v13) >> 2;
    uint64_t v50 = v13;
    uint64_t v14 = v16 * v15;
    if (v18) {
      uint64_t v14 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v41 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v16 = *(void *)(a3 + 40);
  }
  int v53 = v7;
  v48[0] = v15;
  v48[1] = v16;
  uint64_t v46 = v16;
  uint64_t v47 = 1;
  uint64_t v51 = v13;
  uint64_t v52 = v14;
  if (*(_DWORD *)(v6 + 24) == -1)
  {
    v55.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v55);
    v55.__ptr_ = 0;
    std::vector<double>::vector(&v42, 1uLL, &v55);
    uint64_t v24 = **(void **)(a3 + 24);
    uint64_t v25 = *(void *)(*(void *)(a3 + 24) + 8);
    v55.__ptr_ = 0;
    v56.__m_.__sig = 850045863;
    double v26 = 0.0;
    memset(v56.__m_.__opaque, 0, sizeof(v56.__m_.__opaque));
    uint64_t v27 = v25 - v24;
    if (v27)
    {
      unint64_t v28 = 0;
      uint64_t v29 = v27 >> 2;
      do
      {
        v54[0] = 2;
        v54[1] = v48;
        unint64_t v30 = xgboost::linalg::UnravelIndex<2ul>(v28, v54, *(int8x8_t *)&v26);
        if (v12)
        {
          if (v12 <= v30) {
            goto LABEL_41;
          }
          float v32 = *(float *)(v41 + 4 * v30);
        }
        else
        {
          float v32 = 1.0;
        }
        unint64_t v33 = v31 + v30 * v16;
        if (v33 >= v11) {
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        }
        if (v8 <= v28) {
LABEL_41:
        }
          std::terminate();
        *(double *)std::string __p = *(double *)__p + (float)(v32 * vabds_f32(*(float *)(v10 + 4 * v33), *(float *)(v9 + 4 * v28)));
        double v26 = *(double *)v42 + v32;
        *(double *)double v42 = v26;
        ++v28;
      }
      while (v29 != v28);
    }
    dmlc::OMPException::Rethrow(&v55);
    std::mutex::~mutex(&v56);
    std::exception_ptr::~exception_ptr(&v55);
    uint64_t v21 = __p;
    double v22 = 0.0;
    double v23 = 0.0;
    if (__p != v45)
    {
      float v34 = (double *)__p;
      do
      {
        double v35 = *v34++;
        double v23 = v23 + v35;
      }
      while (v34 != v45);
    }
    if (v42 != v43)
    {
      double v22 = 0.0;
      float v36 = (double *)v42;
      do
      {
        double v37 = *v36++;
        double v22 = v22 + v37;
      }
      while (v36 != v43);
    }
    if (v42)
    {
      float v43 = v42;
      operator delete(v42);
      uint64_t v21 = __p;
    }
    if (v21)
    {
      double v45 = v21;
      operator delete(v21);
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    std::string v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v55);
    double v22 = 0.0;
    double v23 = 0.0;
  }
  v55.__ptr_ = *(void **)&v23;
  *(double *)&v56.__m_.__sig = v22;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v21);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v55, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v23 = *(double *)&v55.__ptr_;
    double v22 = *(double *)&v56.__m_.__sig;
  }
  double v39 = 1.0;
  if (v22 != 0.0) {
    double v39 = v22;
  }
  return v23 / v39;
}

void sub_22E9279C4()
{
}

void sub_22E9279D0()
{
}

void sub_22E9279E0()
{
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x22E927A10);
}

void sub_22E927A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = a30;
  a30 = 0;
  if (v31) {
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  }
  _Unwind_Resume(a1);
}

void sub_22E927A7C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowMAE>::Name()
{
  return "mae";
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowMAPE>::~EvalEWiseBase()
{
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowMAPE>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v46 = ((*a2)[1] - **a2) >> 2;
  std::string __p = (void *)((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 2);
  if ((void *)v46 != __p) {
    dmlc::LogCheckFormat<unsigned long,unsigned long>();
  }
  if (*(void *)(*(void *)(a3 + 24) + 8) != **(void **)(a3 + 24))
  {
    uint64_t v46 = *(void *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v46) {
      dmlc::LogCheckFormat<unsigned long,int>();
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(v6 + 24);
  if (v7 < 0)
  {
    char v17 = *(uint64_t **)(a3 + 24);
    uint64_t v10 = *v17;
    unint64_t v11 = (v17[1] - *v17) >> 2;
    uint64_t v16 = *(void *)(a3 + 40);
    if (v7 == -1)
    {
      uint64_t v41 = **(void **)(a3 + 72);
      unint64_t v12 = (*(void *)(*(void *)(a3 + 72) + 8) - v41) >> 2;
      uint64_t v9 = **a2;
      unint64_t v8 = ((*a2)[1] - v9) >> 2;
    }
    else
    {
      uint64_t v41 = 0;
      unint64_t v12 = 0;
      uint64_t v9 = 0;
      unint64_t v8 = 0;
    }
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v13 = **(void **)(a3 + 24);
    BOOL v18 = *(void *)(*(void *)(a3 + 24) + 8) == v13;
    uint64_t v49 = (*(void *)(*(void *)(a3 + 24) + 8) - v13) >> 2;
    uint64_t v50 = v13;
    uint64_t v14 = v16 * v15;
    if (v18) {
      uint64_t v14 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v41 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v15 = *(void *)(a3 + 32);
    uint64_t v16 = *(void *)(a3 + 40);
  }
  int v53 = v7;
  v48[0] = v15;
  v48[1] = v16;
  uint64_t v46 = v16;
  uint64_t v47 = 1;
  uint64_t v51 = v13;
  uint64_t v52 = v14;
  if (*(_DWORD *)(v6 + 24) == -1)
  {
    v55.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v55);
    v55.__ptr_ = 0;
    std::vector<double>::vector(&v42, 1uLL, &v55);
    uint64_t v24 = **(void **)(a3 + 24);
    uint64_t v25 = *(void *)(*(void *)(a3 + 24) + 8);
    v55.__ptr_ = 0;
    v56.__m_.__sig = 850045863;
    double v26 = 0.0;
    memset(v56.__m_.__opaque, 0, sizeof(v56.__m_.__opaque));
    uint64_t v27 = v25 - v24;
    if (v27)
    {
      unint64_t v28 = 0;
      uint64_t v29 = v27 >> 2;
      do
      {
        v54[0] = 2;
        v54[1] = v48;
        unint64_t v30 = xgboost::linalg::UnravelIndex<2ul>(v28, v54, *(int8x8_t *)&v26);
        if (v12)
        {
          if (v12 <= v30) {
            goto LABEL_41;
          }
          float v32 = *(float *)(v41 + 4 * v30);
        }
        else
        {
          float v32 = 1.0;
        }
        unint64_t v33 = v31 + v30 * v16;
        if (v33 >= v11) {
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        }
        if (v8 <= v28) {
LABEL_41:
        }
          std::terminate();
        *(double *)std::string __p = *(double *)__p
                       + (float)(v32
                               * fabsf((float)(*(float *)(v10 + 4 * v33) - *(float *)(v9 + 4 * v28))/ *(float *)(v10 + 4 * v33)));
        double v26 = *(double *)v42 + v32;
        *(double *)double v42 = v26;
        ++v28;
      }
      while (v29 != v28);
    }
    dmlc::OMPException::Rethrow(&v55);
    std::mutex::~mutex(&v56);
    std::exception_ptr::~exception_ptr(&v55);
    uint64_t v21 = __p;
    double v22 = 0.0;
    double v23 = 0.0;
    if (__p != v45)
    {
      float v34 = (double *)__p;
      do
      {
        double v35 = *v34++;
        double v23 = v23 + v35;
      }
      while (v34 != v45);
    }
    if (v42 != v43)
    {
      double v22 = 0.0;
      float v36 = (double *)v42;
      do
      {
        double v37 = *v36++;
        double v22 = v22 + v37;
      }
      while (v36 != v43);
    }
    if (v42)
    {
      float v43 = v42;
      operator delete(v42);
      uint64_t v21 = __p;
    }
    if (v21)
    {
      double v45 = v21;
      operator delete(v21);
    }
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    std::string v20 = (void *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v55);
    double v22 = 0.0;
    double v23 = 0.0;
  }
  v55.__ptr_ = *(void **)&v23;
  *(double *)&v56.__m_.__sig = v22;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v21);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), void, void))(*(void *)Engine + 8))(Engine, &v55, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    double v23 = *(double *)&v55.__ptr_;
    double v22 = *(double *)&v56.__m_.__sig;
  }
  double v39 = 1.0;
  if (v22 != 0.0) {
    double v39 = v22;
  }
  return v23 / v39;
}