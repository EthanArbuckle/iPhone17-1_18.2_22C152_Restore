void sub_100002100(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;

  v8 = sub_10001E824(a1);
  v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10[0] = 67109888;
    v10[1] = a3;
    v11 = 1024;
    v12 = HIDWORD(a3);
    v13 = 1024;
    v14 = a4;
    v15 = 1024;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "agg:#I [o..] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Starting grace-period for client check-in (gen=%u)", (uint8_t *)v10, 0x1Au);
  }
  *(_DWORD *)(a2 + 24) = v8;
}

void sub_100002250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100002260(uint64_t a1)
{
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v2;
  v4 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v4, (void *)(a1 + 8));
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1000023D0(_Unwind_Exception *a1)
{
}

void sub_1000023F8(uint64_t a1, int a2)
{
  int v3 = a2;
  sub_100018888(&__p, "Persist-createTMFT");
  sub_1000035F0();
}

void sub_100002564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100002640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100002650(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  os_release(*(void **)(a1 + 32));
}

void sub_1000026AC(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  int v3 = (void *)a1[6];
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  [v1 handleIncomingMetric:v2 withXPCPayload:&object];
  xpc_release(object);
}

void sub_10000270C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void sub_100002728(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = sqlite3_column_int64(a2, 0);
  int v6 = sqlite3_column_int64(a2, 1);
  sqlite3_int64 v7 = sqlite3_column_int64(a2, 2);
  v8 = *(NSObject **)(v4 + 32);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v21[0] = 67109632;
    v21[1] = v5;
    __int16 v22 = 1024;
    int v23 = v6;
    __int16 v24 = 2048;
    sqlite3_int64 v25 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "persist:#D Reading from triggers table (trid=0x%x, cid=0x%x, %lld sec)", (uint8_t *)v21, 0x18u);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  v10 = *(void **)(v9 + 8);
  unint64_t v11 = *(void *)(v9 + 16);
  if ((unint64_t)v10 >= v11)
  {
    v13 = *(void **)v9;
    uint64_t v14 = ((uint64_t)v10 - *(void *)v9) >> 4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60) {
      sub_10002B5E0();
    }
    uint64_t v16 = v11 - (void)v13;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      v18 = (char *)sub_10001E498(v9 + 16, v17);
      v13 = *(void **)v9;
      v10 = *(void **)(v9 + 8);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[16 * v14];
    v20 = &v18[16 * v17];
    *(_DWORD *)v19 = v6;
    *((void *)v19 + 1) = v7;
    v12 = v19 + 16;
    if (v10 != v13)
    {
      do
      {
        *((_OWORD *)v19 - 1) = *((_OWORD *)v10 - 1);
        v19 -= 16;
        v10 -= 2;
      }
      while (v10 != v13);
      v13 = *(void **)v9;
    }
    *(void *)uint64_t v9 = v19;
    *(void *)(v9 + 8) = v12;
    *(void *)(v9 + 16) = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *(_DWORD *)v10 = v6;
    v10[1] = v7;
    v12 = (char *)(v10 + 2);
  }
  *(void *)(v9 + 8) = v12;
}

void sub_100002978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100002988(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v4) != (xpc_type_t)&_xpc_type_array)
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void sub_100002A24(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a4 != a3)
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_100143534(a3, a4, v8);
    }
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10000BA54(&v10, (void *)(a1 + 8));
  operator new();
}

void sub_100002B78(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  while (1)
  {
    unint64_t v11 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "persist:#I Executing DB command.", buf, 2u);
    }
    pzTail = 0;
    ppStmt = 0;
    int v12 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 40), a2, -1, &ppStmt, (const char **)&pzTail);
    if (v12) {
      break;
    }
    if (ppStmt)
    {
      if (a4) {
        (*(void (**)(uint64_t))(a4 + 16))(a4);
      }
      while (1)
      {
        uint64_t v13 = sqlite3_step(ppStmt);
        if (v13 != 100) {
          break;
        }
        if (a3) {
          (*(void (**)(uint64_t, sqlite3_stmt *))(a3 + 16))(a3, ppStmt);
        }
      }
      uint64_t v14 = v13;
      if (v13 != 101)
      {
        unint64_t v15 = sqlite3_errmsg(*(sqlite3 **)(a1 + 40));
        uint64_t v16 = *(NSObject **)(a1 + 32);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          unint64_t v17 = "NULL";
          if (v15) {
            unint64_t v17 = v15;
          }
          v27 = a2;
          __int16 v28 = 1024;
          int v29 = v14;
          __int16 v30 = 2080;
          v31 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "persist:#E Unable to execute\n%s\nwith error %d (%s)", buf, 0x1Cu);
        }
        if (a5) {
          (*(void (**)(uint64_t, uint64_t, sqlite3_stmt *))(a5 + 16))(a5, v14, ppStmt);
        }
      }
      sqlite3_finalize(ppStmt);
    }
    v18 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      sub_100147F98(&v22, v23, v18);
    }
    a2 = pzTail;
    if (!*pzTail) {
      return;
    }
  }
  int v19 = v12;
  v20 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v27 = a2;
    __int16 v28 = 1024;
    int v29 = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "persist:#E Unable to compile\n%s\nwith error %d", buf, 0x12u);
  }
  if (a6) {
    (*(void (**)(void))(a6 + 16))();
  }
  if (ppStmt) {
    sqlite3_finalize(ppStmt);
  }
}

void sub_100002E20(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) getTimeOfDayFromDate:*(void *)(a1 + 40)];
  id v3 = [*(id *)(a1 + 32) getDayOfWeekFromDate:*(void *)(a1 + 40)];
  xpc_object_t v4 = [*(id *)(a1 + 32) fmCongestionCellsToExistingCongestionPrevCellsWithContext:*(void *)(a1 + 48) cells:*(void *)(a1 + 56)];
  if (v4)
  {
    xpc_object_t v5 = +[NSFetchRequest fetchRequestWithEntityName:@"CongestionArea"];
    v31 = +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", @"((subscriptionID == %@) AND (SUBQUERY(prevCells, $prevCell, $prevCell IN %@).@count == %d))", *(void *)(a1 + 64), v4, [v4 count]);
    id v32 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithObjects:", v31, 0);
    if ([*(id *)(a1 + 32) isRushHourAtDayOfWeek:v3 andTimeOfDay:v2]) {
      +[NSPredicate predicateWithFormat:@"((dayOfWeek >= 2 AND dayOfWeek <= 6) AND ((timeOfDay >= 420 AND timeOfDay < 540) OR (timeOfDay >= 960 AND timeOfDay < 1080)))"];
    }
    else {
    int v6 = +[NSPredicate predicateWithFormat:@"(NOT ((dayOfWeek >= 2 AND dayOfWeek <= 6) AND ((timeOfDay >= 420 AND timeOfDay < 540) OR (timeOfDay >= 960 AND timeOfDay < 1080))))"];
    }
    [v32 addObject:v6];

    uint64_t v9 = +[NSCompoundPredicate andPredicateWithSubpredicates:v32];
    [v5 setPredicate:v9];
    [v5 setReturnsObjectsAsFaults:0];
    uint64_t v10 = *(NSObject **)(qword_1001D8080 + 136);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      unint64_t v11 = [v9 description];
      *(_DWORD *)buf = 138412290;
      id v40 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "FederatedMobility[FMCoreData+CongestionPredictor]:#I Fetching congestion area with predicate %@", buf, 0xCu);
    }
    int v12 = *(void **)(a1 + 48);
    id v37 = 0;
    __int16 v30 = [v12 executeFetchRequest:v5 error:&v37];
    id v13 = v37;
    uint64_t v14 = *(NSObject **)(qword_1001D8080 + 136);
    if (v13)
    {
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR))
      {
        unint64_t v15 = [v13 localizedDescription];
        sub_1001425C4(v15, buf, v14);
      }
    }
    else
    {
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_INFO))
      {
        id v16 = [v30 count];
        *(_DWORD *)buf = 134217984;
        id v40 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "FederatedMobility[FMCoreData+CongestionPredictor]:#I Fetch done, %lu unfiltered results", buf, 0xCu);
      }
      unint64_t v17 = [*(id *)(a1 + 32) filterCongestionAreasWithContext:*(void *)(a1 + 48) unfilteredCongestionAreas:v30 withExactPrevCells:v4];
      id v29 = [v17 mutableCopy];

      id v18 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v19 = *(void *)(*(void *)(a1 + 72) + 8);
      v20 = *(void **)(v19 + 40);
      *(void *)(v19 + 40) = v18;

      if ([v29 count])
      {
        if ([v29 count] == (id)1)
        {
          v21 = *(void **)(a1 + 32);
          uint8_t v22 = [v29 firstObject];
          int v23 = [v21 congestionArea:v22 toFMCongestionPredictionWithContext:*(void *)(a1 + 48)];

          if (v23) {
            [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) addObject:v23];
          }
        }
        else
        {
          if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
            sub_100142590();
          }
          [v29 sortUsingComparator:&stru_1001B67C0];
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          id v24 = v29;
          id v25 = [v24 countByEnumeratingWithState:&v33 objects:v38 count:16];
          if (v25)
          {
            uint64_t v26 = *(void *)v34;
            do
            {
              for (i = 0; i != v25; i = (char *)i + 1)
              {
                if (*(void *)v34 != v26) {
                  objc_enumerationMutation(v24);
                }
                __int16 v28 = [*(id *)(a1 + 32) congestionArea:*(void *)(*((void *)&v33 + 1) + 8 * i) toFMCongestionPredictionWithContext:*(void *)(a1 + 48)];
                if (v28) {
                  [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) addObject:v28];
                }
              }
              id v25 = [v24 countByEnumeratingWithState:&v33 objects:v38 count:16];
            }
            while (v25);
          }
        }
      }
      else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG))
      {
        sub_10014255C();
      }
    }
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
      sub_100142528();
    }
    id v7 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8);
    xpc_object_t v5 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
}

void sub_100003314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000033FC(uint64_t a1, xpc_object_t *a2)
{
  *(void *)a1 = off_1001B7140;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_dictionary)
  {
    *(_DWORD *)(a1 + 8) = xpc_dictionary_get_int64(*a2, "WISMessageComponentId");
    *(void *)(a1 + 16) = xpc_dictionary_get_int64(*a2, "WISMessageTriggerTimestampId");
    *(_DWORD *)(a1 + 28) = xpc_dictionary_get_int64(*a2, "WISMessageTriggerId");
    *(_DWORD *)(a1 + 32) = xpc_dictionary_get_int64(*a2, "WISMessageSubmisssionId");
    *(_DWORD *)(a1 + 24) = xpc_dictionary_get_int64(*a2, "WISMessageTriggeringComponentId");
  }
  return a1;
}

void sub_1000035C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Block_object_dispose((const void *)(v15 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1000035F0()
{
}

void sub_100003770(_Unwind_Exception *a1)
{
  sub_10000B678(v1);
  _Unwind_Resume(a1);
}

void sub_100003968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

xpc_object_t sub_100003978(uint64_t a1)
{
  xpc_object_t v1 = *(xpc_object_t *)(a1 + 32);
  if (v1) {
    xpc_retain(*(xpc_object_t *)(a1 + 32));
  }
  else {
    xpc_object_t v1 = xpc_null_create();
  }
  xpc_object_t v2 = xpc_null_create();
  xpc_release(v2);
  return v1;
}

void sub_1000039C0(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void sub_100003A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100003B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_100003B3C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  xpc_object_t v4 = a1;
  uint64_t v5 = v1;
  xpc_object_t v2 = *(void **)v1;
  sub_100003BB0((uint64_t *)(*(void *)v1 + 40), (long long *)(v1 + 8));
  sub_1000040D0((uint64_t)v2);
  sub_100003DA4(v2);
  sub_100003D50(&v5);
  return sub_10000BA00((uint64_t *)&v4);
}

void sub_100003B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void **sub_100003BB0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  id v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_10002B5E0();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_10001E498((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 16), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_100060FC8(a1, v18);
    uint64_t v9 = (void *)a1[1];
    result = sub_100061150(v18);
  }
  else
  {
    *id v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_100003CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100061150((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100003CCC(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    sub_10001E640((uint64_t)&v10, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8) {
          std::__shared_weak_count::__release_weak(v8);
        }
        v7 -= 16;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t *sub_100003D50(uint64_t *result)
{
  uint64_t v1 = *result;
  *result = 0;
  if (v1)
  {
    xpc_object_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

void sub_100003DA4(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[8];
  if (v2 == v3)
  {
    a1[8] = 0;
    if (v4)
    {
      uint64_t v14 = *(void (**)(void))(*(void *)v4 + 8);
      v14();
    }
  }
  else if (!v4)
  {
    sub_10000BA54(&v22, a1);
    long long v5 = v22;
    if (*((void *)&v22 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 16), 1uLL, memory_order_relaxed);
      sub_10000B678(*((std::__shared_weak_count **)&v5 + 1));
    }
    pthread_mutex_lock(&stru_1001D6EA0);
    uint64_t v6 = xmmword_1001D6EE0;
    if (!(void)xmmword_1001D6EE0)
    {
      sub_1000EFE14(&v22);
      long long v7 = v22;
      long long v22 = 0uLL;
      uint64_t v8 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6EE0 + 1);
      xmmword_1001D6EE0 = v7;
      if (v8)
      {
        sub_10000B678(v8);
        if (*((void *)&v22 + 1)) {
          sub_10000B678(*((std::__shared_weak_count **)&v22 + 1));
        }
      }
      uint64_t v6 = xmmword_1001D6EE0;
    }
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6EE0 + 1);
    if (*((void *)&xmmword_1001D6EE0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6EE0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D6EA0);
    sub_100018888(__p, "WisdActivityManager");
    char v10 = a1[2];
    dispatch_object_t object = v10;
    if (v10) {
      dispatch_retain(v10);
    }
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1174405120;
    aBlock[2] = sub_100060578;
    aBlock[3] = &unk_1001B76C8;
    aBlock[4] = a1;
    long long v16 = v5;
    if (*((void *)&v5 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v5 + 1) + 16), 1uLL, memory_order_relaxed);
    }
    long long v17 = _Block_copy(aBlock);
    sub_10004FDCC(v6, (uint64_t)__p, 0, 10000000, &object, &v17);
    uint64_t v11 = v21;
    uint64_t v21 = 0;
    uint64_t v12 = a1[8];
    a1[8] = v11;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      uint64_t v13 = v21;
      uint64_t v21 = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
    }
    if (v17) {
      _Block_release(v17);
    }
    if (object) {
      dispatch_release(object);
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v9) {
      sub_10000B678(v9);
    }
    if (*((void *)&v16 + 1)) {
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v16 + 1));
    }
    if (*((void *)&v5 + 1)) {
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
    }
  }
}

void sub_100004040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, dispatch_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  pthread_mutex_unlock(&stru_1001D6EA0);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000040D0(uint64_t a1)
{
  uint64_t v3 = *(long long **)(a1 + 40);
  uint64_t v2 = *(long long **)(a1 + 48);
  uint64_t v1 = a1 + 40;
  if (v3 == v2)
  {
    uint64_t v2 = *(long long **)(a1 + 40);
  }
  else
  {
    long long v5 = v3 + 1;
    while (1)
    {
      uint64_t v6 = *((void *)v5 - 1);
      if (!v6 || *(void *)(v6 + 8) == -1) {
        break;
      }
      if (v5++ == v2)
      {
        uint64_t v3 = *(long long **)(a1 + 48);
        goto LABEL_18;
      }
    }
    uint64_t v3 = v5 - 1;
    if (v5 - 1 != v2 && v5 != v2)
    {
      do
      {
        uint64_t v8 = *((void *)v5 + 1);
        if (v8 && *(void *)(v8 + 8) != -1)
        {
          uint64_t v9 = *(void *)v5;
          *(void *)long long v5 = 0;
          *((void *)v5 + 1) = 0;
          char v10 = (std::__shared_weak_count *)*((void *)v3 + 1);
          *(void *)uint64_t v3 = v9;
          *((void *)v3 + 1) = v8;
          if (v10) {
            std::__shared_weak_count::__release_weak(v10);
          }
          ++v3;
        }
        ++v5;
      }
      while (v5 != v2);
      uint64_t v2 = *(long long **)(a1 + 48);
    }
  }
LABEL_18:

  return sub_100003CCC(v1, (uint64_t)v3, v2);
}

void sub_100004214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = HIDWORD(a3);
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v4 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  sub_1000023F8(v4, v3);
}

void sub_100004788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *__p,uint64_t a26)
{
  pthread_mutex_unlock(&stru_1001D6B20);
  if (a24) {
    sub_10000B678(a24);
  }
  if (__p) {
    operator delete(__p);
  }
  if (*(void *)(v26 - 120)) {
    sub_10000B678(*(std::__shared_weak_count **)(v26 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_100004A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100004AB0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1001BA290;
  v4[1].__shared_owners_ = 0;
  v4[1].__shared_weak_owners_ = 0;
  *a2 = v4 + 1;
  a2[1] = v4;
  sub_100002260((uint64_t)v13);
  long long v5 = sub_100004D64(v13, (uint64_t)"SELECT * FROM triggers WHERE trigger = ", 39);
  *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v5 + *(void *)(*v5 - 24) + 8) & 0xFFFFFFB5 | 2;
  uint64_t v6 = (void *)std::ostream::operator<<();
  sub_100004D64(v6, (uint64_t)";", 1);
  std::stringbuf::str();
  if (v12 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  v9[2] = sub_100002728;
  v9[3] = &unk_1001B9A30;
  v9[4] = a1;
  v9[5] = v4 + 1;
  char v10 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_100002B78(a1, p_p, (uint64_t)v9, 0, 0, 0);
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v10) {
    sub_10000B678(v10);
  }
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100004D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16) {
    sub_10000B678(a16);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_10004E93C((uint64_t)&a23);
  sub_10000B678(v23);
  _Unwind_Resume(a1);
}

void *sub_100004D64(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  if (v13)
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      char v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_100004F08(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_100004EA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::ostream::sentry::~sentry();
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x100004E80);
}

void sub_100004EF4(_Unwind_Exception *a1)
{
}

uint64_t sub_100004F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_10004EA40(__p, v12, __c);
      char v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_100005074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100005168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000051A8(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  sub_10000BA54(&v3, a1);
  operator new();
}

void sub_100005298(std::string *a1)
{
}

void sub_100005488(_Unwind_Exception *a1)
{
  sub_10000B678(v1);
  _Unwind_Resume(a1);
}

void sub_1000054B8(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  operator delete();
}

void sub_1000054EC()
{
  __cxa_end_catch();
  xpc_release(v1);
  xpc_release(v0);
  JUMPOUT(0x100005494);
}

void sub_10000566C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _Unwind_Resume(a1);
}

void sub_100005898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000058EC(void *a1, void **a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    int v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      int v9 = v8;
      if (a1[5])
      {
        char v10 = *a2;
        xpc_object_t v13 = v10;
        if (v10) {
          xpc_retain(v10);
        }
        else {
          xpc_object_t v13 = xpc_null_create();
        }
        uint64_t v11 = *a3;
        xpc_object_t object = v11;
        if (v11) {
          xpc_retain(v11);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        sub_100009400(v7, &v13, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        xpc_release(v13);
        xpc_object_t v13 = 0;
      }
      sub_10000B678(v9);
    }
  }
}

void sub_1000059BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  xpc_release(object);
  xpc_release(a10);
  sub_10000B678(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000059F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = [*(id *)(a1 + 48) subscriptionID];
  long long v5 = [*(id *)(a1 + 48) gci];
  uint64_t v6 = [*(id *)(a1 + 48) mcc];
  uint64_t v7 = [*(id *)(a1 + 48) mnc];
  int v8 = [*(id *)(a1 + 48) rat];
  int v9 = [*(id *)(a1 + 48) arfcnOrUarfcn];
  char v10 = [*(id *)(a1 + 48) timestamp];
  uint64_t v15 = [v2 getCongestionCellWithContext:v3 subscriptionID:v4 gci:v5 mcc:v6 mnc:v7 rat:v8 arfcnOrUarfcn:v9 atTime:v10];

  if (v15)
  {
    uint64_t v11 = [*(id *)(a1 + 32) congestionCell:v15 toFMCongestionCellWithContext:*(void *)(a1 + 40)];
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
    xpc_object_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }

  return _objc_release_x2();
}

void sub_100005B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100005B84()
{
}

void sub_100005B8C()
{
}

void sub_100005B94()
{
}

void sub_100005B9C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = +[NSString stringWithUTF8String:CASendEventOptionKeyLogPayload];
  uint64_t v6 = (void *)v5;
  if (v5)
  {
    uint64_t v8 = v5;
    int v9 = &__kCFBooleanTrue;
    uint64_t v7 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  }
  else
  {
    uint64_t v7 = 0;
  }
  AnalyticsSendEventLazyWithOptions();
}

void sub_100005C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100005CBC(uint64_t a1, xpc_object_t *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  id v4 = (_DWORD *)(a1 + 8);
  *(void *)a1 = off_1001B87B8;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = (uint64_t *)(a1 + 24);
  *(void *)(a1 + 40) = 0;
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_dictionary
    && xpc_dictionary_get_int64(*a2, "WISMessageType") == 10)
  {
    *(_DWORD *)(a1 + 12) = xpc_dictionary_get_int64(*a2, "WISMessageTriggerId");
    _DWORD *v4 = xpc_dictionary_get_int64(*a2, "WISMessageTriggeringComponentId");
    *(_DWORD *)(a1 + 16) = xpc_dictionary_get_int64(*a2, "WISMessageSubmissionId");
    *(_DWORD *)(a1 + 20) = xpc_dictionary_get_int64(*a2, "WISMessageSourceComponentId");
    xpc_object_t v19 = a2;
    char v20 = "profiles";
    sub_100002988((uint64_t)&v19, &v21);
    if (xpc_get_type(v21) == (xpc_type_t)&_xpc_type_array)
    {
      object[0] = v21;
      if (v21) {
        xpc_retain(v21);
      }
      else {
        object[0] = xpc_null_create();
      }
      sub_100006058(&v19, object, 0);
      xpc_release(object[0]);
      xpc_object_t p_xdict = v21;
      if (v21) {
        xpc_retain(v21);
      }
      else {
        xpc_object_t p_xdict = xpc_null_create();
      }
      if (xpc_get_type(v21) == (xpc_type_t)&_xpc_type_array) {
        count = (void *)xpc_array_get_count(v21);
      }
      else {
        count = 0;
      }
      sub_100006058(object, &p_xdict, count);
      xpc_release(p_xdict);
      for (i = (std::__shared_weak_count *)v20; i != object[1] || v19 != object[0]; i = (std::__shared_weak_count *)++v20)
      {
        xpc_object_t p_xdict = &v19;
        long long v16 = i;
        sub_10001258C((uint64_t)&p_xdict, &xdict);
        if (xpc_get_type(xdict) == (xpc_type_t)&_xpc_type_dictionary)
        {
          data = 0;
          size_t length = 0;
          data = (char *)xpc_dictionary_get_data(xdict, "data", &length);
          if (data)
          {
            int v12 = 0;
            xpc_object_t p_xdict = &xdict;
            long long v16 = (std::__shared_weak_count *)"profile_id";
            sub_10000B7A4((uint64_t)&p_xdict, &v11);
            int v9 = xpc::dyn_cast_or_default((xpc *)&v11, 0, v8);
            xpc_release(v11);
            int v12 = v9;
            xpc_object_t v11 = &data[length];
            sub_10001E4D0(&data, (char **)&v11, &p_xdict);
            sub_100008F48(v5, &v12, (uint64_t)&p_xdict);
            if (v16) {
              sub_10000B678(v16);
            }
          }
        }
        xpc_release(xdict);
      }
      xpc_release(v19);
      xpc_release(v19);
    }
    xpc_release(v21);
  }
  return a1;
}

void sub_100005F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, uint64_t a15, xpc_object_t a16, xpc_object_t a17, uint64_t a18, xpc_object_t a19)
{
  xpc_release(object);
  xpc_release(a19);
  xpc_release(*(xpc_object_t *)(v19 - 80));
  sub_10000B6EC((void ***)&a19);
  _Unwind_Resume(a1);
}

void **sub_100006058(void **a1, void **a2, void *a3)
{
  uint64_t v5 = *a2;
  *a1 = *a2;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    *a1 = xpc_null_create();
  }
  a1[1] = a3;
  return a1;
}

void sub_10000630C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1000065F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_10000691C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100006E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100007088(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = *(unint64_t **)(a1 + 8);
  unint64_t v7 = v6[1] - *v6;
  unint64_t v8 = v6[2] - *v6;
  size_t v9 = v8 - v7;
  if (v8 > v7) {
    goto LABEL_5;
  }
  unint64_t v10 = 2 * v7;
  if (2 * v7 <= 0x10) {
    unint64_t v10 = 16;
  }
  size_t v9 = v10 - v7;
  if (v10 <= v7)
  {
    if (v10 < v7) {
      v6[1] = *v6 + v10;
    }
  }
  else
  {
LABEL_5:
    sub_10000712C(v6, v9);
  }
  *a2 = **(void **)(a1 + 8) + v7;
  *a3 = *(_DWORD *)(*(void *)(a1 + 8) + 8) - **(_DWORD **)(a1 + 8) - v7;
  return 1;
}

void sub_10000712C(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  id v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    unint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_10002B5E0();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    int v12 = &v7[v11];
    xpc_object_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      uint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_100007768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  if (a15) {
  _Unwind_Resume(a1);
  }
}

void sub_100007A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100007B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100007BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100007C34(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v16 = 0;
    unint64_t v8 = +[WISTelephonyUtils extractCellInfoValue:v7 key:kCTCellMonitorCellType expectedClass:objc_opt_class() error:&v16];
    id v9 = v16;
    if (!v9)
    {
      id v15 = 0;
      size_t v10 = +[WISTelephonyUtils extractCellInfoValue:v7 key:kCTCellMonitorNeighborType expectedClass:objc_opt_class() error:&v15];
      id v9 = v15;
      if (!v9)
      {
        id v14 = 0;
        unint64_t v11 = +[WISTelephonyUtils extractCellInfoValue:v7 key:kCTCellMonitorCellRadioAccessTechnology expectedClass:objc_opt_class() error:&v14];
        id v9 = v14;
        if (!v9)
        {
          if ([v8 isEqualToString:kCTCellMonitorCellTypeNeighbor])
          {
            if (+[WISTelephonyUtils isNrRat:v11])
            {
              int v12 = +[NSNumber numberWithInteger:1];
              unsigned int v13 = [v10 isEqualToNumber:v12];

              if (v13)
              {
                objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
                *a4 = 1;
              }
            }
          }
        }
      }
    }
  }
}

void sub_100007E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_100007E58(uint64_t *a1)
{
  uint64_t v1 = *a1;
  size_t v10 = a1;
  uint64_t v11 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(unsigned int *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 12);
  unsigned int v5 = *(_DWORD *)(v1 + 20);
  int v6 = *(_DWORD *)(v1 + 24);
  unint64_t v8 = *(uint64_t **)(v1 + 32);
  id v7 = *(std::__shared_weak_count **)(v1 + 40);
  int v12 = v8;
  unsigned int v13 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100007F50(v2, v3, v4, v5, v6, &v12);
  if (v13) {
    sub_10000B678(v13);
  }
  sub_100007EF8(&v11);
  return sub_10000BA00((uint64_t *)&v10);
}

void sub_100007ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10000B678(a12);
  }
  sub_100007EF8(&a10);
  sub_10000BA00(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100007EF8(uint64_t *result)
{
  uint64_t v1 = *result;
  *result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 40);
    if (v2) {
      sub_10000B678(v2);
    }
    operator delete();
  }
  return result;
}

float sub_100007F50(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t **a6)
{
  uint64_t v30 = a3;
  unsigned int v31 = a4;
  uint64_t v10 = a1 + 56;
  uint64_t v11 = sub_100008280(a1 + 56, &v30);
  int v12 = v11;
  if ((uint64_t *)(a1 + 64) != v11)
  {
    unsigned int v13 = v11;
LABEL_6:
    sub_100008A6C(a6, (uint64_t *)buf);
    xpc_object_t v21 = *(unsigned int **)buf;
    long long v22 = v34;
    if (*(unsigned int **)buf != v34)
    {
      uint64_t v23 = a2 << 32;
      do
      {
        uint64_t v24 = v13[6];
        uint64_t v25 = v23 | *v21;
        uint64_t v26 = (std::__shared_weak_count *)*((void *)v21 + 2);
        v29[0] = *((void *)v21 + 1);
        v29[1] = (uint64_t)v26;
        *((void *)v21 + 1) = 0;
        *((void *)v21 + 2) = 0;
        sub_100008690(a1, v24, v25, v19, v20, a5, v29);
        if (v26) {
          sub_10000B678(v26);
        }
        v21 += 6;
      }
      while (v21 != v22);
    }
    id v32 = buf;
    sub_10000B6EC((void ***)&v32);
    return result;
  }
  uint64_t v14 = v30;
  unsigned int v15 = v31;
  id v16 = sub_100050A04(v10, v30, v31);
  if (v12 != v16)
  {
    unsigned int v13 = v16;
    int v17 = *((_DWORD *)v16 + 8);
    LODWORD(v30) = v17;
    char v18 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v17;
      LOWORD(v34) = 1024;
      *(_DWORD *)((char *)&v34 + 2) = HIDWORD(v14);
      HIWORD(v34) = 1024;
      unsigned int v35 = v15;
      __int16 v36 = 1024;
      int v37 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "agg:#D     Trigger(cid=0x%x, trid=0x%x, sid=%u) - adjusted cid to fix BB submission (was 0x%x)", buf, 0x1Au);
    }
    goto LABEL_6;
  }
  __int16 v28 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v14;
    LOWORD(v34) = 1024;
    *(_DWORD *)((char *)&v34 + 2) = HIDWORD(v14);
    HIWORD(v34) = 1024;
    unsigned int v35 = v15;
    __int16 v36 = 1024;
    int v37 = a2;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "agg:#E [ E ] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Tried adding profile 0x%x but trigger no longer exists!", buf, 0x1Au);
  }
  return result;
}

void sub_100008164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_100008194(uint64_t **a1)
{
  int v6 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  unint64_t v7 = *(uint64_t *)((char *)*a1 + 12);
  unsigned int v8 = *((_DWORD *)v1 + 5);
  uint64_t v3 = sub_100008280(v2 + 56, &v7);
  unint64_t v4 = v7;
  int v5 = v8;
  if ((uint64_t *)(v2 + 64) == v3) {
    uint64_t v3 = sub_100050A04(v2 + 56, v7, v8);
  }
  sub_100008370(v2, (uint64_t)v3, *((_DWORD *)v1 + 2), v4, v5);
  operator delete();
}

void sub_100008254()
{
}

uint64_t *sub_100008280(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  float result = sub_1000082FC(a1, a2, *(uint64_t **)(a1 + 8), (uint64_t *)(a1 + 8));
  if (v3 == result) {
    return v3;
  }
  unsigned int v5 = a2[2];
  unsigned int v6 = *((_DWORD *)result + 10);
  if (v5 < v6 || v6 >= v5 && *(void *)a2 < (unint64_t)result[4]) {
    return v3;
  }
  return result;
}

uint64_t *sub_1000082FC(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4)
{
  float result = a4;
  if (a3)
  {
    unsigned int v6 = a2[1];
    unsigned int v5 = a2[2];
    while (1)
    {
      unsigned int v7 = *((_DWORD *)a3 + 10);
      if (v7 >= v5)
      {
        if (v5 < v7) {
          goto LABEL_6;
        }
        unsigned int v8 = *((_DWORD *)a3 + 9);
        if (v8 >= v6) {
          break;
        }
      }
      ++a3;
LABEL_7:
      a3 = (uint64_t *)*a3;
      if (!a3) {
        return result;
      }
    }
    if (v6 >= v8)
    {
      if (*((_DWORD *)a3 + 8) < *a2) {
        ++a3;
      }
      else {
        float result = a3;
      }
      goto LABEL_7;
    }
LABEL_6:
    float result = a3;
    goto LABEL_7;
  }
  return result;
}

void sub_100008370(uint64_t a1, uint64_t a2, __int32 a3, unint64_t a4, int a5)
{
  unint64_t v9 = HIDWORD(a4);
  if (a1 + 64 != a2)
  {
    BOOL v11 = sub_1000085CC(*(__int32 ***)(a2 + 48), a3);
    int v12 = *(NSObject **)(a1 + 40);
    if (v11)
    {
      if (!os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_INFO)) {
        goto LABEL_10;
      }
      int v18 = 67109888;
      int v19 = a4;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 1024;
      int v23 = a5;
      __int16 v24 = 1024;
      __int32 v25 = a3;
      unsigned int v13 = "agg:#I [ O ] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Remove hold for cid 0x%x";
      uint64_t v14 = v12;
      os_log_type_t v15 = OS_LOG_TYPE_INFO;
    }
    else
    {
      if (!os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_10;
      }
      int v18 = 67109888;
      int v19 = a4;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 1024;
      int v23 = a5;
      __int16 v24 = 1024;
      __int32 v25 = a3;
      unsigned int v13 = "agg:#E [ ? ] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Unable to remove hold for cid 0x%x due to missing cid hold";
      uint64_t v14 = v12;
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    }
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, (uint8_t *)&v18, 0x1Au);
LABEL_10:
    if (sub_1000085A0(*(void *)(a2 + 48)))
    {
      int v17 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        int v18 = 67109632;
        int v19 = a4;
        __int16 v20 = 1024;
        int v21 = v9;
        __int16 v22 = 1024;
        int v23 = a5;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "agg:#I [ -W] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Removing hold marked this complete; flushing to log files (if needed).",
          (uint8_t *)&v18,
          0x14u);
      }
      sub_10004FAC0(a1, a4, a5);
    }
    return;
  }
  id v16 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 67109888;
    int v19 = a4;
    __int16 v20 = 1024;
    int v21 = v9;
    __int16 v22 = 1024;
    int v23 = a5;
    __int16 v24 = 1024;
    __int32 v25 = a3;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "agg:#E [ E ] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Unable to remove hold for cid 0x%x due to missing trigger", (uint8_t *)&v18, 0x1Au);
  }
}

BOOL sub_1000085A0(uint64_t a1)
{
  return !*(unsigned char *)(a1 + 1)
      && *(void *)(a1 + 72) == *(void *)(a1 + 80)
      && *(void *)(a1 + 96) == *(void *)(a1 + 104);
}

BOOL sub_1000085CC(__int32 **a1, __int32 a2)
{
  unint64_t v4 = a1[10];
  unsigned int v5 = wmemchr(a1[9], a2, v4 - a1[9]);
  if (v5) {
    unint64_t v4 = v5;
  }
  unsigned int v6 = a1[10];
  if (v4 != v6)
  {
    int64_t v7 = (char *)v6 - (char *)(v4 + 1);
    if (v6 != v4 + 1) {
      memmove(v4, v4 + 1, (char *)v6 - (char *)(v4 + 1));
    }
    a1[10] = (__int32 *)((char *)v4 + v7);
  }
  unsigned int v8 = a1[13];
  unint64_t v9 = wmemchr(a1[12], a2, v8 - a1[12]);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v8;
  }
  BOOL v11 = a1[13];
  if (v10 != v11)
  {
    if (v11 != v10 + 1) {
      memmove(v10, v10 + 1, (char *)v11 - (char *)(v10 + 1));
    }
    a1[13] = v11 - 1;
  }
  return v10 != v11;
}

void sub_100008690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7)
{
  BOOL v11 = *(void **)(a1 + 104);
  int v12 = (void *)(a1 + 112);
  if (v11 == (void *)(a1 + 112))
  {
LABEL_9:
    int v18 = (std::__shared_weak_count *)a7[1];
    uint64_t v20 = *a7;
    int v21 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_10000889C(a2, a6, SHIDWORD(a3), &v20);
    if (v21) {
      sub_10000B678(v21);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v14 = v11 + 4;
      if (sub_100008808((uint64_t)(v11 + 4), a3)) {
        break;
      }
      os_log_type_t v15 = (void *)v11[1];
      if (v15)
      {
        do
        {
          id v16 = v15;
          os_log_type_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          id v16 = (void *)v11[2];
          BOOL v17 = *v16 == (void)v11;
          BOOL v11 = v16;
        }
        while (!v17);
      }
      BOOL v11 = v16;
      if (v16 == v12) {
        goto LABEL_9;
      }
    }
    int v19 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)v11 + 55) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      *(_DWORD *)buf = 67109378;
      int v23 = a3;
      __int16 v24 = 2082;
      __int32 v25 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "agg:#D Filtering metric 0x%x due to filter \"%{public}s\"", buf, 0x12u);
    }
  }
}

uint64_t sub_100008808(uint64_t a1, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
  if (result)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v6 = a1 + 40;
    uint64_t v5 = v7;
    if (!v7) {
      goto LABEL_13;
    }
    uint64_t v8 = v6;
    do
    {
      unsigned int v9 = *(_DWORD *)(v5 + 28);
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        BOOL v11 = (uint64_t *)v5;
      }
      else {
        BOOL v11 = (uint64_t *)(v5 + 8);
      }
      if (v10) {
        uint64_t v8 = v5;
      }
      uint64_t v5 = *v11;
    }
    while (*v11);
    if (v8 == v6 || *(_DWORD *)(v8 + 28) > a2) {
LABEL_13:
    }
      uint64_t v8 = v6;
    return v8 != v6;
  }
  return result;
}

BOOL sub_100008888(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 32) + 81) == 0;
}

void sub_10000889C(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  if (*a4)
  {
    v7[0] = a2;
    v7[1] = a3;
    uint64_t v5 = (std::__shared_weak_count *)a4[1];
    uint64_t v8 = v4;
    unsigned int v9 = v5;
    *a4 = 0;
    a4[1] = 0;
    sub_100008940((uint64_t *)(a1 + 32), (uint64_t)v7);
    if (v9) {
      sub_10000B678(v9);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(qword_1001D8080 + 104);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "submit:#E Got NULL new metric data!", (uint8_t *)v7, 2u);
    }
  }
}

uint64_t sub_100008940(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_10002B5E0();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    unsigned int v13 = (char *)sub_100009078((uint64_t)v4, v12);
    uint64_t v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *(void *)uint64_t v14 = *(void *)a2;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    sub_1000092B8(a1, v17);
    uint64_t v8 = a1[1];
    sub_1000090C0(v17);
  }
  else
  {
    *(void *)unint64_t v7 = *(void *)a2;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return v8 - 24;
}

void sub_100008A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000090C0((void **)va);
  _Unwind_Resume(a1);
}

void sub_100008A6C(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *a1;
  if (!*a1) {
    return;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1] - *v3;
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = v4;
  unint64_t v31 = v4 + (int)v5;
  int v32 = v5;
  uint64_t v33 = 0;
  __int16 v34 = 0;
  long long v36 = xmmword_100174830;
  int v35 = v5;
  int v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::default_recursion_limit_;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  while (wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&buf))
  {
    if (*((void *)&buf + 1) >= v31 || (char)**((unsigned char **)&buf + 1) < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&buf);
      HIDWORD(v33) = TagFallback;
      if (TagFallback) {
        goto LABEL_7;
      }
LABEL_12:
      LODWORD(v9) = 0;
LABEL_19:
      sub_1000682E0((uint64_t)&buf, v9);
    }
    else
    {
      unint64_t TagFallback = **((unsigned char **)&buf + 1);
      HIDWORD(v33) = TagFallback;
      ++*((void *)&buf + 1);
      if (!TagFallback) {
        goto LABEL_12;
      }
LABEL_7:
      unint64_t v8 = wis::reflect::decodeTag((wis::reflect *)TagFallback, v6);
      unint64_t v9 = HIDWORD(v8);
      switch((char)v8)
      {
        case 0:
          *(void *)__int16 v22 = 0;
          if (*((void *)&buf + 1) < v31 && ((char)**((unsigned char **)&buf + 1) & 0x80000000) == 0)
          {
            ++*((void *)&buf + 1);
            continue;
          }
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&buf, (unint64_t *)v22))goto LABEL_19; {
          continue;
          }
        case 1:
          *(void *)__int16 v22 = 0;
          char LittleEndian64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&buf, (unint64_t *)v22);
          goto LABEL_18;
        case 2:
          unsigned int v21 = 0;
          if (*((void *)&buf + 1) >= v31 || (char)**((unsigned char **)&buf + 1) < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&buf, &v21))goto LABEL_19; {
            unsigned int v10 = v21;
            }
          }
          else
          {
            unsigned int v10 = **((unsigned char **)&buf + 1);
            unsigned int v21 = v10;
            ++*((void *)&buf + 1);
          }
          v19[1] = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)&buf;
          int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&buf, v10);
          int v20 = v12;
          ++HIDWORD(v36);
          v19[0] = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)&buf;
          int v29 = v9;
          __int16 v28 = 0;
          int v27 = 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::GetDirectBufferPointer((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&buf, (const void **)&v28, &v27);
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v26 = 0;
          int v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&buf);
          if ((v27 & 0x80000000) == 0)
          {
            sub_100009298(v24, (uint64_t)__p);
            wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22, (wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v24);
            unsigned int v13 = wis::reflect::encodeTag();
            wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22, v13);
            uint64_t v14 = v28;
            int v15 = v27;
            wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22, v27);
            wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22, v14, v15);
            wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22);
            wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream::~ZeroCopyOutputStream((wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v24);
            id v16 = (char *)operator new(0x30uLL);
            *((void *)v16 + 1) = 0;
            *((void *)v16 + 2) = 0;
            *(void *)id v16 = off_1001B6FF8;
            *(_OWORD *)(v16 + 24) = *(_OWORD *)__p;
            *((void *)v16 + 5) = v26;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v26 = 0;
            *(void *)__int16 v22 = v16 + 24;
            int v23 = (std::__shared_weak_count *)v16;
            sub_100008F48(a2, &v29, (uint64_t)v22);
            if (v23) {
              sub_10000B678(v23);
            }
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          sub_100008F0C(v19);
          if (SHIDWORD(v36) >= 1) {
            --HIDWORD(v36);
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&buf, v12);
          break;
        case 5:
          v22[0] = 0;
          char LittleEndian64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&buf, v22);
LABEL_18:
          if ((LittleEndian64Fallback & 1) == 0) {
            goto LABEL_19;
          }
          continue;
        default:
          goto LABEL_19;
      }
    }
  }
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&buf);
  BOOL v17 = *(NSObject **)(qword_1001D8080 + 56);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "metric:#I Split batch metrics into %zd metrics", (uint8_t *)&buf, 0xCu);
  }
}

void sub_100008E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32)
{
  if (a14) {
    sub_10000B678(a14);
  }
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100008F0C((wireless_diagnostics::google::protobuf::io::CodedInputStream **)&a9);
  if (a32 >= 1) {
    --a32;
  }
  sub_100039058((uint64_t)&a10);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a25);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x100008D88);
  }
  sub_10000B6EC((void ***)&a25);
  _Unwind_Resume(a1);
}

wireless_diagnostics::google::protobuf::io::CodedInputStream **sub_100008F0C(wireless_diagnostics::google::protobuf::io::CodedInputStream **a1)
{
  int v2 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(*a1);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(*a1, v2);
  return a1;
}

uint64_t sub_100008F48(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v8 = a1[2];
  unsigned int v6 = a1 + 2;
  unint64_t v7 = v8;
  unint64_t v9 = *(v6 - 1);
  if (v9 >= v8)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_10002B5E0();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = v6;
    int v15 = (char *)sub_100009078((uint64_t)v6, v14);
    id v16 = &v15[24 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[24 * v17];
    *(_DWORD *)id v16 = *a2;
    *(_OWORD *)(v16 + 8) = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    v19[2] = v16 + 24;
    sub_100009148(a1, v19);
    uint64_t v10 = a1[1];
    sub_1000090C0(v19);
  }
  else
  {
    *(_DWORD *)unint64_t v9 = *a2;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v10 = v9 + 24;
    a1[1] = v9 + 24;
  }
  a1[1] = v10;
  return v10 - 24;
}

void sub_100009064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000090C0((void **)va);
  _Unwind_Resume(a1);
}

void *sub_100009078(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_10002A63C();
  }
  return operator new(24 * a2);
}

void **sub_1000090C0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1000090F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 24;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_10000B678(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 24;
    }
  }
}

uint64_t sub_100009148(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000091C0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000091C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 24;
    do
    {
      int v9 = *(_DWORD *)(a3 - 24);
      a3 -= 24;
      *(_DWORD *)uint64_t v8 = v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *((void *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_10000925C((uint64_t)v12);
  return v10;
}

uint64_t sub_10000925C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100068354(a1);
  }
  return a1;
}

void *sub_100009298(void *result, uint64_t a2)
{
  *uint64_t result = &off_1001BC318;
  result[1] = a2;
  return result;
}

uint64_t sub_1000092B8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100009330((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100009330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 24);
      a3 -= 24;
      *(void *)(v7 - 24) = v8;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1000093C8((uint64_t)v11);
  return v9;
}

uint64_t sub_1000093C8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100068354(a1);
  }
  return a1;
}

void sub_100009400(uint64_t a1, void **a2, xpc_object_t *a3)
{
  *(void *)v165 = a3;
  *(void *)&v165[8] = "WISMessageType";
  sub_10000B7A4((uint64_t)v165, buf);
  int v7 = xpc::dyn_cast_or_default((xpc *)buf, 0, v6);
  xpc_release(*(xpc_object_t *)buf);
  switch(v7)
  {
    case 0:
      xpc_object_t v146 = a3;
      v147 = "WISMessageType";
      sub_10000B7A4((uint64_t)&v146, &object);
      memset(v165, 0, sizeof(v165));
      *(void *)&long long v166 = 0;
      xpc::dyn_cast_or_default();
      if (SBYTE7(v166) < 0) {
        operator delete(*(void **)v165);
      }
      xpc_release(object);
      if ((v161[15] & 0x80) != 0)
      {
        if (*(void *)v161 != 9
          || (**(void **)buf == 0x69666E6F43746553 ? (BOOL v70 = *(unsigned char *)(*(void *)buf + 8) == 103) : (BOOL v70 = 0),
              !v70))
        {
          if (*(void *)v161 == 11)
          {
            uint64_t v8 = *(uint64_t **)buf;
LABEL_65:
            uint64_t v71 = *v8;
            uint64_t v72 = *(uint64_t *)((char *)v8 + 3);
            if (v71 == 0x6174536873756C46 && v72 == 0x6465676174536873)
            {
              v74 = *(NSObject **)(a1 + 80);
              if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)v165 = 0;
                _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "conn:#I Received request to flush to disk", v165, 2u);
              }
              pthread_mutex_lock(&stru_1001D6C28);
              uint64_t v75 = xmmword_1001D6C68;
              if (!(void)xmmword_1001D6C68) {
                sub_10007F320();
              }
              if (*((void *)&xmmword_1001D6C68 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6C68 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              pthread_mutex_unlock(&stru_1001D6C28);
              sub_100080C90(v75);
            }
          }
LABEL_201:
          v86 = *(NSObject **)(a1 + 80);
          if (!os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_204;
          }
          *(_WORD *)v165 = 0;
          v105 = "conn:#E Got unknown message.";
          goto LABEL_203;
        }
      }
      else
      {
        if (v161[15] != 9)
        {
          if (v161[15] == 11)
          {
            uint64_t v8 = (uint64_t *)buf;
            goto LABEL_65;
          }
          goto LABEL_201;
        }
        if (*(void *)buf != 0x69666E6F43746553 || v161[0] != 103) {
          goto LABEL_201;
        }
      }
      char v85 = sub_1000C6CD4();
      v86 = *(NSObject **)(a1 + 80);
      BOOL v87 = os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT);
      if ((v85 & 1) == 0)
      {
        if (!v87) {
          goto LABEL_204;
        }
        *(_WORD *)v165 = 0;
        v105 = "conn:#E ERROR: Got WIS SetConfig message; how dare you do that!";
LABEL_203:
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, v105, v165, 2u);
        goto LABEL_204;
      }
      if (v87)
      {
        *(_WORD *)v165 = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "conn:#N Received reconfiguration request", v165, 2u);
      }
      pthread_mutex_lock(&stru_1001D6A70);
      uint64_t v88 = qword_1001D6AB0;
      uint64_t v89 = qword_1001D6AB8;
      if (qword_1001D6AB8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_1001D6AB8 + 8), 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&stru_1001D6A70);
      if (v88)
      {
        sub_1000C6E8C(&v159, a3);
        sub_1000C20C4(v88, &v159);
      }
      goto LABEL_231;
    case 1:
      uint64_t v40 = sub_10006BD74((uint64_t)v165, a3);
      int v41 = sub_10000B7EC(v40);
      int v42 = sub_10006BFF4((uint64_t)v165);
      int v43 = sub_10006BFFC((uint64_t)v165);
      int v44 = sub_10006C004((uint64_t)v165);
      v45 = *(NSObject **)(a1 + 80);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v42;
        *(_WORD *)v161 = 1024;
        *(_DWORD *)&v161[2] = v41;
        *(_WORD *)&v161[6] = 1024;
        *(_DWORD *)&v161[8] = v43;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "conn:#I Got WIS Registration Message for cid 0x%x, dcid %d, pid %d", buf, 0x14u);
      }
      uint64_t v46 = *(void *)(a1 + 88);
      v47 = *a2;
      xpc_object_t v158 = v47;
      if (v47) {
        xpc_retain(v47);
      }
      else {
        xpc_object_t v158 = xpc_null_create();
      }
      sub_1000B3874(v46, v41, v42, (uint64_t)&v158, v43, v44);
    case 2:
      uint64_t v28 = sub_10006DFB0((uint64_t)v165, a3);
      uint64_t v29 = sub_10006E104(v28);
      int v124 = v30;
      uint64_t v31 = v29;
      unint64_t v32 = sub_10006E0FC((uint64_t)v165);
      uint64_t v33 = sub_10000B7EC((uint64_t)v165);
      __int16 v34 = (uint64_t *)sub_10006E114((uint64_t)v165);
      int v35 = operator new(0x30uLL);
      v35[1] = 0;
      v35[2] = 0;
      *int v35 = off_1001B6FF8;
      uint64_t v36 = *v34;
      v35[3] = *v34;
      uint64_t v37 = v34[1];
      v35[4] = v37;
      v35[5] = v34[2];
      *__int16 v34 = 0;
      v34[1] = 0;
      v34[2] = 0;
      uint64_t v38 = *(NSObject **)(a1 + 80);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 67110656;
        *(_DWORD *)&uint8_t buf[4] = v33;
        *(_WORD *)v161 = 1024;
        *(_DWORD *)&v161[2] = v32;
        *(_WORD *)&v161[6] = 1024;
        *(_DWORD *)&v161[8] = HIDWORD(v32);
        *(_WORD *)&v161[12] = 1024;
        *(_DWORD *)&v161[14] = v31;
        *(_WORD *)v162 = 1024;
        *(_DWORD *)&v162[2] = HIDWORD(v31);
        *(_WORD *)v163 = 1024;
        *(_DWORD *)&v163[2] = v124;
        *(_WORD *)v164 = 2048;
        *(void *)&v164[2] = v37 - v36;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "conn:#I Got WIS Submission Message with component id 0x%x, Metric(mid=0x%x, profid=0x%x), Trigger(cid=0x%x, trid=0x%x, sid=%u) (%zd bytes)", buf, 0x30u);
      }
      uint64_t v39 = *(void **)(a1 + 152);
      v157[0] = v35 + 3;
      v157[1] = v35;
      atomic_fetch_add_explicit(v35 + 1, 1uLL, memory_order_relaxed);
      sub_10000B7F4(v39, v33, v32, HIDWORD(v32), (uint64_t)v157);
    case 3:
      uint64_t v20 = sub_100083D1C((uint64_t)buf, a3);
      uint64_t v21 = sub_100083E14(v20);
      unsigned int v23 = v22;
      __int16 v24 = *(NSObject **)(a1 + 80);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        int v25 = sub_10000B7EC((uint64_t)buf);
        *(_DWORD *)v165 = 67109888;
        *(_DWORD *)&v165[4] = v25;
        *(_WORD *)&v165[8] = 1024;
        *(_DWORD *)&v165[10] = v21;
        *(_WORD *)&v165[14] = 1024;
        LODWORD(v166) = HIDWORD(v21);
        WORD2(v166) = 1024;
        *(_DWORD *)((char *)&v166 + 6) = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "conn:#I Got WIS Finished Submission Message with component id 0x%x, Trigger(cid=0x%x, trid=0x%x, sid=%u)", v165, 0x1Au);
      }
      uint64_t v26 = *(void *)(a1 + 120);
      uint64_t v27 = sub_10000B7EC((uint64_t)buf);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v26 + 40))(v26, v27, v21, v23);
      return;
    case 5:
      sub_10006E520((uint64_t)v165, a3);
      uint64_t v9 = *(NSObject **)(a1 + 80);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v10 = sub_10000B7EC((uint64_t)v165);
        int v11 = sub_10006BFF4((uint64_t)v165);
        uint64_t v12 = sub_10006E7EC((uint64_t)v165);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v10;
        *(_WORD *)v161 = 1024;
        *(_DWORD *)&v161[2] = v11;
        *(_WORD *)&v161[6] = 2048;
        *(void *)&v161[8] = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "conn:#I Got WIS Register Trigger Message from component 0x%x for trigger 0x%x and longest time %lld", buf, 0x18u);
      }
      uint64_t v13 = *(void *)(a1 + 104);
      sub_10000B7EC((uint64_t)v165);
      sub_10006BFF4((uint64_t)v165);
      sub_10006E7EC((uint64_t)v165);
      sub_1000CC668(v13);
    case 6:
      uint64_t v14 = sub_10001E820((uint64_t)v165, a3);
      xpc_object_t object = (xpc_object_t)sub_10001E6CC(v14);
      LODWORD(v144) = v15;
      id v16 = *(NSObject **)(a1 + 80);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        int v17 = sub_10000B7EC((uint64_t)v165);
        *(_DWORD *)long long buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v17;
        *(_WORD *)v161 = 1024;
        *(_DWORD *)&v161[2] = object;
        *(_WORD *)&v161[6] = 1024;
        *(_DWORD *)&v161[8] = HIDWORD(object);
        *(_WORD *)&v161[12] = 1024;
        *(_DWORD *)&v161[14] = v144;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "conn:#I Got WIS Trigger Message from component 0x%x with Trigger(cid=0x%x, trid=0x%x, sid=%u)", buf, 0x1Au);
      }
      wis::asString();
      if (v161[15] >= 0) {
        unint64_t v18 = (char *)buf;
      }
      else {
        unint64_t v18 = *(char **)buf;
      }
      sub_100018888(&__p, v18);
      xpc_object_t v19 = *a3;
      xpc_object_t v152 = v19;
      if (v19) {
        xpc_retain(v19);
      }
      else {
        xpc_object_t v152 = xpc_null_create();
      }
      sub_100005298(&__p);
    case 7:
      sub_100084338((uint64_t)buf, a3);
      v48 = *(NSObject **)(a1 + 80);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        int v49 = sub_10000B7EC((uint64_t)buf);
        *(_DWORD *)v165 = 67109120;
        *(_DWORD *)&v165[4] = v49;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "conn:#I Got WIS Control Message of type %d", v165, 8u);
      }
      switch(sub_10000B7EC((uint64_t)buf))
      {
        case 1u:
          pthread_mutex_lock(&stru_1001D6A70);
          uint64_t v51 = qword_1001D6AB0;
          v50 = (std::__shared_weak_count *)qword_1001D6AB8;
          if (qword_1001D6AB8) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_1001D6AB8 + 8), 1uLL, memory_order_relaxed);
          }
          pthread_mutex_unlock(&stru_1001D6A70);
          if (v51) {
            sub_1000E7DE8();
          }
          v107 = *(NSObject **)(a1 + 80);
          if (!os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_177;
          }
          *(_WORD *)v165 = 0;
          v108 = "conn:#E ConfigurationReader::getInstance returned NULL when trying to process Clear Configuration control message.";
          goto LABEL_176;
        case 2u:
          pthread_mutex_lock(&stru_1001D6A70);
          uint64_t v101 = qword_1001D6AB0;
          v50 = (std::__shared_weak_count *)qword_1001D6AB8;
          if (qword_1001D6AB8) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_1001D6AB8 + 8), 1uLL, memory_order_relaxed);
          }
          pthread_mutex_unlock(&stru_1001D6A70);
          if (v101) {
            sub_1000C0C28();
          }
          v107 = *(NSObject **)(a1 + 80);
          if (!os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_177;
          }
          *(_WORD *)v165 = 0;
          v108 = "conn:#E ConfigurationReader::getInstance returned NULL when trying to process Load Hotship control message.";
          goto LABEL_176;
        case 3u:
          pthread_mutex_lock(&stru_1001D6C28);
          uint64_t v100 = xmmword_1001D6C68;
          if (!(void)xmmword_1001D6C68) {
            sub_10007F320();
          }
          v50 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6C68 + 1);
          if (*((void *)&xmmword_1001D6C68 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6C68 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          pthread_mutex_unlock(&stru_1001D6C28);
          if (v100) {
            sub_100080DC8();
          }
          v107 = *(NSObject **)(a1 + 80);
          if (!os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_177;
          }
          *(_WORD *)v165 = 0;
          v108 = "conn:#E SubmitterController::getInstance returned NULL when trying to process Submit Metriclogs control message.";
          goto LABEL_176;
        case 4u:
          pthread_mutex_lock(&stru_1001D6C80);
          uint64_t v102 = xmmword_1001D6CC0;
          if (!(void)xmmword_1001D6CC0) {
            sub_1000B14D8();
          }
          v50 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6CC0 + 1);
          if (*((void *)&xmmword_1001D6CC0 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6CC0 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          pthread_mutex_unlock(&stru_1001D6C80);
          if (v102)
          {
            sub_1000C62DC();
            sub_1000B4B78(v102, 4);
          }
          else
          {
            v107 = *(NSObject **)(a1 + 80);
            if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v165 = 0;
              v108 = "conn:#E ClientManager::getInstance returned NULL when trying to process Log Configurations control message.";
LABEL_176:
              _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, v108, v165, 2u);
            }
          }
LABEL_177:
          if (v50) {
            sub_10000B678(v50);
          }
          break;
        case 7u:
          pthread_mutex_lock(&stru_1001D7470);
          v103 = (void *)xmmword_1001D74B0;
          if (!(void)xmmword_1001D74B0) {
            sub_10004C560();
          }
          v50 = (std::__shared_weak_count *)*((void *)&xmmword_1001D74B0 + 1);
          if (*((void *)&xmmword_1001D74B0 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D74B0 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          pthread_mutex_unlock(&stru_1001D7470);
          sub_10004D514(v103, v151);
          sub_10004E440((uint64_t)v151);
          goto LABEL_177;
        default:
          return;
      }
      return;
    case 9:
      v52 = *(NSObject **)(a1 + 80);
      if (!os_log_type_enabled(v52, OS_LOG_TYPE_INFO)) {
        return;
      }
      *(_WORD *)v165 = 0;
      v53 = "conn:#I Got WIS Location used message, nothing to do.";
      v54 = v52;
      os_log_type_t v55 = OS_LOG_TYPE_INFO;
      goto LABEL_57;
    case 10:
      uint64_t v59 = sub_10001E6DC((uint64_t)v165, a3);
      uint64_t v60 = sub_10001E6E0(v59);
      uint64_t v125 = sub_10001E6B4((uint64_t)v165);
      unsigned int v62 = v61;
      uint64_t v63 = sub_10001E6AC((uint64_t)v165);
      v64 = *(uint64_t ***)v60;
      v65 = *(unsigned int **)(v60 + 8);
      if (*(unsigned int **)v60 == v65)
      {
        uint64_t v66 = 0;
      }
      else
      {
        uint64_t v66 = 0;
        v67 = *(uint64_t ***)v60;
        do
        {
          v68 = v67[1];
          if (v68) {
            v68 = (uint64_t *)(v68[1] - *v68);
          }
          v66 += (uint64_t)v68;
          v67 += 3;
        }
        while (v67 != (uint64_t **)v65);
      }
      v76 = *(NSObject **)(a1 + 80);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 67110400;
        *(_DWORD *)&uint8_t buf[4] = v63;
        *(_WORD *)v161 = 2048;
        *(void *)&v161[2] = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - (char *)v64) >> 3);
        *(_WORD *)&v161[10] = 1024;
        *(_DWORD *)&v161[12] = v125;
        *(_WORD *)&v161[16] = 1024;
        *(_DWORD *)v162 = HIDWORD(v125);
        *(_WORD *)&v162[4] = 1024;
        *(_DWORD *)v163 = v62;
        *(_WORD *)&v163[4] = 2048;
        *(void *)v164 = v66;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "conn:#I Got WIS Bundled Submission Message with component id 0x%x, %zd profiles, Trigger(cid=0x%x, trid=0x%x, sid=%u) (%zd bytes)", buf, 0x2Eu);
        v64 = *(uint64_t ***)v60;
        v65 = *(unsigned int **)(v60 + 8);
      }
      for (; v64 != (uint64_t **)v65; v64 += 3)
      {
        sub_100008A6C(v64 + 1, (uint64_t *)buf);
        if (*(void *)buf != *(void *)v161)
        {
          uint64_t v77 = **(_DWORD **)buf;
          uint64_t v78 = *(void *)(*(void *)buf + 8);
          uint64_t v79 = *(void *)(*(void *)buf + 16);
          if (v79)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v79 + 8), 1uLL, memory_order_relaxed);
            v80 = *(void **)(a1 + 152);
            uint64_t v81 = *(unsigned int *)v64;
            uint64_t v156 = v79;
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v79 + 8), 1uLL, memory_order_relaxed);
          }
          else
          {
            v80 = *(void **)(a1 + 152);
            uint64_t v81 = *(unsigned int *)v64;
            uint64_t v156 = 0;
          }
          uint64_t v155 = v78;
          sub_10000B7F4(v80, v63, v77, v81, (uint64_t)&v155);
        }
        xpc_object_t v146 = buf;
        sub_10000B6EC((void ***)&v146);
        uint64_t v82 = *(void *)(a1 + 120);
        uint64_t v83 = *(unsigned int *)v64;
        long long v154 = *(_OWORD *)(v64 + 1);
        v64[1] = 0;
        v64[2] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, long long *))(*(void *)v82 + 32))(v82, v83, v125, v62, v63, &v154);
        if (*((void *)&v154 + 1)) {
          sub_10000B678(*((std::__shared_weak_count **)&v154 + 1));
        }
      }
      (*(void (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 120) + 48))(*(void *)(a1 + 120), v63, v125, v62);
      *(void *)v165 = off_1001B87B8;
      *(void *)long long buf = (char *)&v166 + 8;
      sub_10000B6EC((void ***)buf);
      return;
    case 11:
      if (sub_1000C6CD4())
      {
        xpc_object_t v146 = a3;
        v147 = "ManageRequest";
        sub_10000B7A4((uint64_t)&v146, &object);
        memset(v165, 0, sizeof(v165));
        *(void *)&long long v166 = 0;
        xpc::dyn_cast_or_default();
        if (SBYTE7(v166) < 0) {
          operator delete(*(void **)v165);
        }
        xpc_release(object);
        v56 = *(NSObject **)(a1 + 80);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        {
          v57 = buf;
          if (v161[15] < 0) {
            v57 = *(uint8_t **)buf;
          }
          *(_DWORD *)v165 = 136315138;
          *(void *)&v165[4] = v57;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "conn:#I Got WIS Internal Manage request '%s'", v165, 0xCu);
        }
        if ((v161[15] & 0x80000000) != 0)
        {
          if (*(void *)v161 != 10
            || (**(void **)buf == 0x666E6F4379706F43
              ? (BOOL v90 = *(unsigned __int16 *)(*(void *)buf + 8) == 26473)
              : (BOOL v90 = 0),
                !v90))
          {
            if (*(void *)v161 == 28)
            {
              v58 = *(void **)buf;
LABEL_113:
              uint64_t v91 = *v58;
              uint64_t v92 = v58[1];
              uint64_t v93 = v58[2];
              int v94 = *((_DWORD *)v58 + 6);
              if (v91 != 0x64696C6F736E6F43
                || v92 != 0x6369766544657461
                || v93 != 0x736F6E6761694465
                || v94 != 1935894900)
              {
                goto LABEL_158;
              }
              pthread_mutex_lock(&stru_1001D6C28);
              uint64_t v98 = xmmword_1001D6C68;
              if (!(void)xmmword_1001D6C68) {
                sub_10007F320();
              }
              uint64_t v89 = *((void *)&xmmword_1001D6C68 + 1);
              if (*((void *)&xmmword_1001D6C68 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6C68 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              pthread_mutex_unlock(&stru_1001D6C28);
              if (!v98)
              {
                if (os_log_type_enabled(*(os_log_t *)(a1 + 80), OS_LOG_TYPE_ERROR)) {
                  sub_1001492D8();
                }
LABEL_231:
                if (v89)
                {
                  v118 = (std::__shared_weak_count *)v89;
LABEL_233:
                  sub_10000B678(v118);
                }
                goto LABEL_204;
              }
              xpc_object_t object = a3;
              v144 = "diagType";
              sub_10000B7A4((uint64_t)&object, &v145);
              memset(v165, 0, sizeof(v165));
              *(void *)&long long v166 = 0;
              xpc::dyn_cast_or_default();
              if (SBYTE7(v166) < 0) {
                operator delete(*(void **)v165);
              }
              xpc_release(v145);
              if (sub_10008BB8C(&v146, "cellular"))
              {
                char v99 = 2;
              }
              else
              {
                if (!sub_10008BB8C(&v146, "feedback"))
                {
                  if (os_log_type_enabled(*(os_log_t *)(a1 + 80), OS_LOG_TYPE_ERROR)) {
                    sub_100149340();
                  }
                  goto LABEL_229;
                }
                char v99 = 3;
              }
              xpc_object_t object = xpc_null_create();
              if (xpc_get_type(*a3) != (xpc_type_t)&_xpc_type_dictionary)
              {
LABEL_218:
                memset(v165, 0, sizeof(v165));
                if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary) {
                  operator new();
                }
                v116 = *(xpc_object_t **)v165;
                v115 = *(std::__shared_weak_count **)&v165[8];
                xpc_release(object);
                if (v116 && xpc_get_type(*v116) == (xpc_type_t)&_xpc_type_dictionary)
                {
                  if (v115) {
                    atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  v117 = operator new(0x20uLL);
                  void *v117 = off_1001BB9E8;
                  v117[1] = a1;
                  v117[2] = v116;
                  v117[3] = v115;
                  *((void *)&v166 + 1) = v117;
                  sub_1000805F0(v98, v99, (uint64_t)v165);
                }
                if (os_log_type_enabled(*(os_log_t *)(a1 + 80), OS_LOG_TYPE_ERROR)) {
                  sub_10014930C();
                }
                if (v115) {
                  sub_10000B678(v115);
                }
LABEL_229:
                if (v148 < 0) {
                  operator delete(v146);
                }
                goto LABEL_231;
              }
              xpc_object_t reply = xpc_dictionary_create_reply(*a3);
              xpc_object_t v113 = reply;
              if (reply)
              {
                *(void *)v165 = reply;
              }
              else
              {
                xpc_object_t v113 = xpc_null_create();
                *(void *)v165 = v113;
                if (!v113)
                {
                  xpc_object_t v114 = xpc_null_create();
                  xpc_object_t v113 = 0;
                  goto LABEL_216;
                }
              }
              if (xpc_get_type(v113) == (xpc_type_t)&_xpc_type_dictionary)
              {
                xpc_retain(v113);
LABEL_217:
                sub_1000C8B90(&object, (xpc_object_t *)v165);
                xpc_release(*(xpc_object_t *)v165);
                *(void *)v165 = 0;
                xpc_release(v113);
                goto LABEL_218;
              }
              xpc_object_t v114 = xpc_null_create();
LABEL_216:
              *(void *)v165 = v114;
              goto LABEL_217;
            }
LABEL_158:
            if (sub_10008BB8C(buf, "CopyDeviceConfig"))
            {
              sub_1000C6C40(&v142, a2);
              sub_1000C6E8C(&v141, a3);
              sub_1000CE4DC(&v142, &v141);
              xpc_release(v141);
              xpc_object_t v141 = 0;
              xpc_release(v142);
              xpc_object_t v142 = 0;
              goto LABEL_204;
            }
            if (sub_10008BB8C(buf, "GetConfigsAvailable"))
            {
              sub_1000C6C40(&v140, a2);
              sub_1000C6E8C(&v139, a3);
              sub_1000CE83C(&v140, &v139);
              xpc_release(v139);
              xpc_object_t v139 = 0;
              xpc_release(v140);
              xpc_object_t v140 = 0;
              goto LABEL_204;
            }
            if (sub_10008BB8C(buf, "SetConfig"))
            {
              sub_1000C6C40(&v138, a2);
              sub_1000C6E8C(&v137, a3);
              sub_1000CF3B4(&v138, &v137);
              xpc_release(v137);
              xpc_object_t v137 = 0;
              xpc_release(v138);
              xpc_object_t v138 = 0;
              goto LABEL_204;
            }
            if (sub_10008BB8C(buf, "SetProperty"))
            {
              sub_1000C6C40(&v136, a2);
              sub_1000C6E8C(&v135, a3);
              sub_1000CFEC4((xpc_connection_t *)&v136, &v135);
              xpc_release(v135);
              xpc_object_t v135 = 0;
              xpc_release(v136);
              xpc_object_t v136 = 0;
              goto LABEL_204;
            }
            if (sub_10008BB8C(buf, "Observe"))
            {
              xpc_object_t v146 = xpc_null_create();
              if (xpc_get_type(*a3) != (xpc_type_t)&_xpc_type_dictionary) {
                goto LABEL_243;
              }
              xpc_object_t v110 = xpc_dictionary_create_reply(*a3);
              xpc_object_t v111 = v110;
              if (v110)
              {
                *(void *)v165 = v110;
              }
              else
              {
                xpc_object_t v111 = xpc_null_create();
                *(void *)v165 = v111;
                if (!v111)
                {
                  xpc_object_t v119 = xpc_null_create();
                  xpc_object_t v111 = 0;
                  goto LABEL_241;
                }
              }
              if (xpc_get_type(v111) == (xpc_type_t)&_xpc_type_dictionary)
              {
                xpc_retain(v111);
LABEL_242:
                sub_1000C8B90(&v146, (xpc_object_t *)v165);
                xpc_release(*(xpc_object_t *)v165);
                *(void *)v165 = 0;
                xpc_release(v111);
LABEL_243:
                memset(v165, 0, sizeof(v165));
                if (xpc_get_type(v146) == (xpc_type_t)&_xpc_type_dictionary) {
                  operator new();
                }
                v121 = *(xpc_object_t **)v165;
                v120 = *(std::__shared_weak_count **)&v165[8];
                xpc_release(v146);
                if (v121 && xpc_get_type(*v121) == (xpc_type_t)&_xpc_type_dictionary)
                {
                  v122 = *(void **)(a1 + 136);
                  v123 = *a2;
                  sub_1000C6E8C(&v134, a3);
                  aBlock[0] = _NSConcreteStackBlock;
                  aBlock[1] = 1174405120;
                  aBlock[2] = sub_1000C6F3C;
                  aBlock[3] = &unk_1001BB7C8;
                  aBlock[4] = v121;
                  void aBlock[5] = v120;
                  if (v120) {
                    atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  v133 = _Block_copy(aBlock);
                  sub_100054E70(v122, (uint64_t)v123, &v134, (const void **)&v133);
                }
                if (os_log_type_enabled(*(os_log_t *)(a1 + 80), OS_LOG_TYPE_ERROR)) {
                  sub_1001492A4();
                }
                if (v120)
                {
                  v118 = v120;
                  goto LABEL_233;
                }
                goto LABEL_204;
              }
              xpc_object_t v119 = xpc_null_create();
LABEL_241:
              *(void *)v165 = v119;
              goto LABEL_242;
            }
            if (sub_10008BB8C(buf, "TriggerTimerEventsNow"))
            {
              sub_1000C6FFC(a1, a3);
            }
            else if (sub_10008BB8C(buf, "SendInsightsNow"))
            {
              sub_1000C6C40(&v131, a2);
              sub_1000C6E8C(&v130, a3);
              sub_1000E5A40(&v131, &v130);
              xpc_release(v130);
              xpc_object_t v130 = 0;
              xpc_release(v131);
              xpc_object_t v131 = 0;
            }
            else if (sub_10008BB8C(buf, "SendMockCellInfo"))
            {
              sub_1000C6C40(&v129, a2);
              sub_1000C6E8C(&v128, a3);
              sub_1000E5F8C(&v129, &v128);
              xpc_release(v128);
              xpc_object_t v128 = 0;
              xpc_release(v129);
              xpc_object_t v129 = 0;
            }
            else if (sub_10008BB8C(buf, "GetConfigurationForLocation"))
            {
              sub_1000C6C40(&v127, a2);
              sub_1000C6E8C(&v126, a3);
              sub_1000E62BC(&v127, &v126);
              xpc_release(v126);
              xpc_object_t v126 = 0;
              xpc_release(v127);
              xpc_object_t v127 = 0;
            }
LABEL_204:
            if ((v161[15] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            return;
          }
        }
        else
        {
          if (v161[15] != 10)
          {
            if (v161[15] == 28)
            {
              v58 = buf;
              goto LABEL_113;
            }
            goto LABEL_158;
          }
          if (*(void *)buf != 0x666E6F4379706F43 || *(unsigned __int16 *)v161 != 26473) {
            goto LABEL_158;
          }
        }
        v106 = *a2;
        xpc_object_t v150 = v106;
        if (v106) {
          xpc_retain(v106);
        }
        else {
          xpc_object_t v150 = xpc_null_create();
        }
        xpc_object_t v109 = *a3;
        xpc_object_t v149 = v109;
        if (v109) {
          xpc_retain(v109);
        }
        else {
          xpc_object_t v149 = xpc_null_create();
        }
        sub_1000CDD4C(&v150, &v149);
        xpc_release(v149);
        xpc_object_t v149 = 0;
        xpc_release(v150);
        xpc_object_t v150 = 0;
        goto LABEL_204;
      }
      v69 = *(NSObject **)(a1 + 80);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v165 = 0;
        v53 = "conn:#E ERROR: Got WIS Internal Manage message; how dare you do that!";
        v54 = v69;
        os_log_type_t v55 = OS_LOG_TYPE_DEFAULT;
LABEL_57:
        _os_log_impl((void *)&_mh_execute_header, v54, v55, v53, v165, 2u);
      }
      return;
    case 12:
      sub_1000C750C((void *)a1, a3);
      return;
    default:
      return;
  }
}

void sub_10000AFDC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10001F4A8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10000B678(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_10000B6EC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10000B740((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10000B740(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_10000B678(v4);
    }
  }
  a1[1] = v2;
}

void sub_10000B78C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

xpc_object_t sub_10000B7A4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value) {
    return xpc_retain(value);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t sub_10000B7EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_10000B7F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a5 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10000BA54(&v6, a1);
  operator new();
}

void sub_10000B908(uint64_t a1)
{
  sub_10000BA54(&v1, (void *)(a1 + 8));
  operator new();
}

uint64_t *sub_10000BA00(uint64_t *result)
{
  uint64_t v1 = *result;
  *xpc_object_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      sub_10000B678(v2);
    }
    operator delete();
  }
  return result;
}

void *sub_10000BA54(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    sub_10002A460();
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void sub_10000BA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a6 + 8);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10000BA54(&v7, (void *)(a1 + 8));
  operator new();
}

uint64_t sub_10000BBB4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = +[NSString stringWithUTF8String:a2];
  if (v6)
  {
    type = xpc_get_type(a3);
    uint64_t v8 = type;
    if (type == (const _xpc_type_s *)&_xpc_type_uint64)
    {
      uint64_t v14 = +[NSNumber numberWithUnsignedLongLong:xpc_uint64_get_value(a3)];
    }
    else if (type == (const _xpc_type_s *)&_xpc_type_int64)
    {
      uint64_t v14 = +[NSNumber numberWithLongLong:xpc_int64_get_value(a3)];
    }
    else if (type == (const _xpc_type_s *)&_xpc_type_BOOL)
    {
      uint64_t v14 = +[NSNumber numberWithBool:xpc_BOOL_get_value(a3)];
    }
    else if (type == (const _xpc_type_s *)&_xpc_type_string)
    {
      uint64_t v14 = +[NSString stringWithUTF8String:xpc_string_get_string_ptr(a3)];
    }
    else
    {
      if (type != (const _xpc_type_s *)&_xpc_type_double)
      {
        uint64_t v9 = *(void *)(a1 + 48);
        int v10 = +[NSString stringWithFormat:@"Failed to convert value of type %s", xpc_type_get_name(type)];
        +[WISXPCUtils setError:v9 code:0 message:v10];
        goto LABEL_17;
      }
      uint64_t v14 = +[NSNumber numberWithDouble:xpc_double_get_value(a3)];
    }
    int v15 = (void *)v14;
    if (v14)
    {
      [*(id *)(a1 + 32) setObject:v14 forKey:v6];
      uint64_t v13 = 1;
LABEL_18:

      goto LABEL_19;
    }
    uint64_t v16 = *(void *)(a1 + 48);
    int v10 = +[NSString stringWithFormat:@"Failed to extract value %s of type %s", a2, xpc_type_get_name(v8)];
    +[WISXPCUtils setError:v16 code:0 message:v10];
LABEL_17:

    uint64_t v13 = 0;
    int v15 = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = +[NSString stringWithFormat:@"Failed to convert key %s", a2];
  +[WISXPCUtils setError:v11 code:0 message:v12];

  uint64_t v13 = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
LABEL_19:

  return v13;
}

void sub_10000BE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000C5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_10000C7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000C968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000C9A0(uint64_t a1)
{
  signed int v2 = [*(id *)(a1 + 32) NSDateToTimeOfDay:*(void *)(a1 + 40)];
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = +[FMConfiguration sharedInstance];
  id v5 = objc_msgSend(v3, "getMinutesSinceMidnightFrom:addingOffset:", v2, -(uint64_t)objc_msgSend(v4, "OOSTimeOfDayWindowBackMinutes"));

  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = +[FMConfiguration sharedInstance];
  id v8 = objc_msgSend(v6, "getMinutesSinceMidnightFrom:addingOffset:", v2, objc_msgSend(v7, "OOSTimeOfDayWindowForwardMinutes"));

  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    int v10 = [*(id *)(a1 + 32) getLocationOfInterestAt:v9 WithContext:*(void *)(a1 + 56)];
  }
  else
  {
    int v10 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (v11)
  {
    uint64_t v12 = [*(id *)(a1 + 32) getLocationOfInterestAt:v11 WithContext:*(void *)(a1 + 56)];
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = [*(id *)(a1 + 32) fmServingCellsToExistingServingCellsWithContext:*(void *)(a1 + 56) cells:*(void *)(a1 + 72)];
  uint64_t v14 = (void *)v13;
  if ((!*(void *)(a1 + 48) || v10) && (!v12 ? (BOOL v15 = *(void *)(a1 + 64) == 0) : (BOOL v15 = 1), v15 && v13))
  {
    uint64_t v16 = +[NSFetchRequest fetchRequestWithEntityName:@"OutOfServiceArea"];
    int v17 = v12;
    if (!v12)
    {
      int v17 = +[NSNull null];
    }
    uint64_t v46 = +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", @"((curVisit == %@) AND (subscriptionID == %@) AND (SUBQUERY(prevCells, $prevCell, $prevCell IN %@).@count == %d))", v17, *(void *)(a1 + 80), v14, [v14 count]);
    if (!v12) {

    }
    if ((uint64_t)v5 >= (uint64_t)v8) {
      CFStringRef v18 = @"((timeOfDay >= %d) OR (timeOfDay <= %d))";
    }
    else {
      CFStringRef v18 = @"((timeOfDay >= %d) AND (timeOfDay <= %d))";
    }
    v47 = +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", v18, v5, v8);
    id v48 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithObjects:", v46, v47, 0);
    if (v10)
    {
      xpc_object_t v19 = +[NSPredicate predicateWithFormat:@"(prevVisit == %@)", v10];
      [v48 addObject:v19];
    }
    int v44 = +[NSCompoundPredicate andPredicateWithSubpredicates:v48];
    objc_msgSend(v16, "setPredicate:");
    [v16 setReturnsObjectsAsFaults:0];
    uint64_t v20 = *(NSObject **)(qword_1001D8080 + 136);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = [v44 description];
      *(_DWORD *)long long buf = 138412290;
      id v56 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSPredictor]:#I Fetching OutOfServiceArea with predicate %@", buf, 0xCu);
    }
    unsigned int v22 = *(void **)(a1 + 56);
    id v53 = 0;
    v45 = [v22 executeFetchRequest:v16 error:&v53];
    id v23 = v53;
    __int16 v24 = *(NSObject **)(qword_1001D8080 + 136);
    id v43 = v23;
    if (v23)
    {
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        int v25 = [v43 localizedDescription];
        sub_100145344(v25, buf, v24);
      }
    }
    else
    {
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        id v28 = [v45 count];
        *(_DWORD *)long long buf = 134217984;
        id v56 = v28;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSPredictor]:#I Fetch done, %lu unfiltered results", buf, 0xCu);
      }
      uint64_t v29 = [*(id *)(a1 + 32) filterOutOfServiceAreasWithContext:*(void *)(a1 + 56) unfilteredOutOfServiceAreas:v45 WithExactPrevCells:v14];
      id v42 = [v29 mutableCopy];

      id v30 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v31 = *(void *)(*(void *)(a1 + 88) + 8);
      unint64_t v32 = *(void **)(v31 + 40);
      *(void *)(v31 + 40) = v30;

      if ([v42 count])
      {
        if ([v42 count] == (id)1)
        {
          uint64_t v33 = *(void **)(a1 + 96);
          uint64_t v34 = *(void *)(a1 + 56);
          uint64_t v35 = [v42 firstObject];
          uint64_t v36 = [v33 outOfServiceAreaToFMOOSRecoveryPredictionsWithContext:v34 WithOutOfServiceArea:v35 FromTimestamp:*(void *)(a1 + 40)];

          if (v36) {
            [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) addObject:v36];
          }
        }
        else
        {
          if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
            sub_100145310();
          }
          [v42 sortUsingComparator:&stru_1001B7BB8];
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          id v37 = v42;
          id v38 = [v37 countByEnumeratingWithState:&v49 objects:v54 count:16];
          if (v38)
          {
            uint64_t v39 = *(void *)v50;
            do
            {
              for (uint64_t i = 0; i != v38; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v50 != v39) {
                  objc_enumerationMutation(v37);
                }
                int v41 = [*(id *)(a1 + 96) outOfServiceAreaToFMOOSRecoveryPredictionsWithContext:*(void *)(a1 + 56) WithOutOfServiceArea:*(void *)(*((void *)&v49 + 1) + 8 * i) FromTimestamp:*(void *)(a1 + 40)];
                if (v41) {
                  [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) addObject:v41];
                }
              }
              id v38 = [v37 countByEnumeratingWithState:&v49 objects:v54 count:16];
            }
            while (v38);
          }
        }
      }
      else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG))
      {
        sub_1001452DC();
      }
    }
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
      sub_10014539C();
    }
    id v26 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v27 = *(void *)(*(void *)(a1 + 88) + 8);
    uint64_t v16 = *(void **)(v27 + 40);
    *(void *)(v27 + 40) = v26;
  }
}

void sub_10000CFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10000D1C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000D558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27)
{
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10000D644()
{
}

void sub_10000D7E8(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_10000D8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000DA78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000DC08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000DC38(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 handleUpdate:*(void *)(a1 + 40) forKey:*(unsigned int *)(a1 + 56) withState:*(void *)(a1 + 48)];
}

void sub_10000DC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000DEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000E020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000E2A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000E3D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000E46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000E568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_10000E668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000E7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000E958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000EA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000EA6C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [v4 prevCells];
  id v6 = [v5 count];

  if ((unint64_t)v6 >= 2)
  {
    uint64_t v7 = [v4 prevCells];
    uint64_t v8 = [v4 prevCells];
    uint64_t v9 = objc_msgSend(v7, "objectAtIndexedSubscript:", (char *)objc_msgSend((id)v8, "count") - 2);

    LOBYTE(v8) = [v9 isMatchForMetric:*(void *)(a1 + 32)];
    BOOL v10 = os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG);
    if (v8)
    {
      if (v10) {
        sub_10014090C();
      }
      [v9 setCongestionMetric:*(void *)(a1 + 32)];
      [*(id *)(a1 + 40) sendRLGSPredictionEventForCell:v9];
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      uint64_t v11 = [v4 congestionPredictions];
      id v12 = [v11 countByEnumeratingWithState:&v40 objects:v44 count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v41;
        do
        {
          for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v41 != v13) {
              objc_enumerationMutation(v11);
            }
            BOOL v15 = *(void **)(*((void *)&v40 + 1) + 8 * i);
            if ([v15 state] == 1)
            {
              if (([v15 isFedMobilityPredictionEventSubmitted] & 1) == 0)
              {
                [v15 setIsFedMobilityPredictionEventSubmitted:1];
                objc_msgSend(*(id *)(a1 + 40), "sendFedMobilityPredictionEventWithPredictionCorrect:seenCount:", objc_msgSend(v9, "isCongested"), objc_msgSend(v15, "seenCount"));
              }
              if ([v9 isCongested])
              {
                uint64_t v16 = [v15 actualBadCells];
                [v16 addObject:v9];
              }
            }
          }
          id v12 = [v11 countByEnumeratingWithState:&v40 objects:v44 count:16];
        }
        while (v12);
      }

      if ([v9 isCongested])
      {
        uint64_t v36 = 0;
        id v37 = &v36;
        uint64_t v38 = 0x2020000000;
        char v39 = 0;
        int v17 = [v4 activeCongestionAreas];
        uint64_t v30 = _NSConcreteStackBlock;
        uint64_t v31 = 3221225472;
        unint64_t v32 = sub_100020760;
        uint64_t v33 = &unk_1001B5C48;
        uint64_t v35 = &v36;
        id v18 = v9;
        id v34 = v18;
        [v17 enumerateObjectsUsingBlock:&v30];

        if (!*((unsigned char *)v37 + 24))
        {
          if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
            sub_1001408D8();
          }
          xpc_object_t v19 = +[FMConfiguration sharedInstance];
          uint64_t v20 = (char *)[v19 congestionPrevCellsInDatabase];

          uint64_t v21 = [v4 prevCells];
          unsigned int v22 = (char *)[v21 count];

          id v23 = [v4 prevCells];
          __int16 v24 = v23;
          if (v22 - 2 >= v20) {
            int64_t v25 = v22 - 2 - v20;
          }
          else {
            int64_t v25 = 0;
          }
          if (v22 - 2 >= v20) {
            id v26 = v20;
          }
          else {
            id v26 = v22 - 2;
          }
          uint64_t v27 = objc_msgSend(v23, "subarrayWithRange:", v25, v26);

          id v28 = [[FMCongestionArea alloc] init:*(void *)(a1 + 48) prevCells:v27];
          [v28 addBadCell:v18];
          uint64_t v29 = [v4 activeCongestionAreas];
          [v29 addObject:v28];
        }
        _Block_object_dispose(&v36, 8);
      }
    }
    else if (v10)
    {
      sub_100140940();
    }
  }
}

void sub_10000EE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000FD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  pthread_mutex_unlock(&stru_1001D6BD0);
  sub_100077FDC(&a27, 0);
  sub_100077F8C(&a28, 0);

  _Unwind_Resume(a1);
}

void sub_1000106BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1000111D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,void *a37,void *a38)
{
  _Unwind_Resume(a1);
}

void sub_1000115D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100011A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_100011CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_100011EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100011EE0(uint64_t a1, char *a2, xpc_object_t a3)
{
  sub_100018888(v16, a2);
  unint64_t v5 = v17;
  unsigned __int8 v6 = v17;
  if ((v17 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)v16[1];
  }
  if (v5)
  {
    if (a3)
    {
      xpc_retain(a3);
      xpc_object_t object = a3;
    }
    else
    {
      a3 = xpc_null_create();
      xpc_object_t object = a3;
      if (!a3)
      {
        xpc_object_t v7 = xpc_null_create();
        a3 = 0;
        goto LABEL_11;
      }
    }
    if (xpc_get_type(a3) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(a3);
      goto LABEL_12;
    }
    xpc_object_t v7 = xpc_null_create();
LABEL_11:
    xpc_object_t object = v7;
LABEL_12:
    xpc_release(a3);
    xpc_object_t v8 = object;
    if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_array && xpc_array_get_count(object))
    {
      __p[0] = &object;
      __p[1] = 0;
      sub_10001258C((uint64_t)__p, &v14);
      uint64_t v9 = *(uint64_t **)(a1 + 32);
      sub_1000124C4(__p, (long long *)v16, &v14);
      sub_1000120A0(v9, (long long *)__p);
      xpc_release(v13);
      xpc_object_t v13 = 0;
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      xpc_release(v14);
      xpc_object_t v8 = object;
    }
    xpc_release(v8);
    unsigned __int8 v6 = v17;
  }
  if ((v6 & 0x80) != 0) {
    operator delete(v16[0]);
  }
  return 1;
}

void sub_100012038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, xpc_object_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000120A0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_10002B5E0();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      xpc_object_t v14 = (char *)sub_1000122B8(v4, v13);
    }
    else {
      xpc_object_t v14 = 0;
    }
    BOOL v15 = v14;
    uint64_t v16 = &v14[32 * v10];
    id v18 = &v14[32 * v13];
    sub_100012538((uint64_t)v16, a2);
    unsigned __int8 v17 = v16 + 32;
    sub_1000122F0(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = (uint64_t)sub_100012448(&v15);
  }
  else
  {
    uint64_t result = sub_100012538(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_100012190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100012448((void **)va);
  _Unwind_Resume(a1);
}

void *sub_1000121A4(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_10002B5E0();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      xpc_object_t v14 = (char *)sub_1000122B8(v4, v13);
    }
    else {
      xpc_object_t v14 = 0;
    }
    BOOL v15 = v14;
    uint64_t v16 = &v14[32 * v10];
    id v18 = &v14[32 * v13];
    sub_10001387C(v16, a2);
    unsigned __int8 v17 = v16 + 32;
    sub_1000122F0(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = sub_100012448(&v15);
  }
  else
  {
    uint64_t result = sub_10001387C(*(void **)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_100012298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *sub_1000122B8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_10002A63C();
  }
  return operator new(32 * a2);
}

uint64_t sub_1000122F0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100012368((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100012368(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 2;
      sub_100012538(v7 - 32, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 32;
      *((void *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100012410((uint64_t)v12);
  return v10;
}

uint64_t sub_100012410(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000720A0((uint64_t *)a1);
  }
  return a1;
}

void **sub_100012448(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10001247C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 32;
    sub_100013380(v4, i - 32);
  }
}

void *sub_1000124C4(void *__dst, long long *a2, void **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000173FC(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  uint64_t v6 = *a3;
  __dst[3] = *a3;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    __dst[3] = xpc_null_create();
  }
  return __dst;
}

uint64_t sub_100012538(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = xpc_null_create();
  return a1;
}

void sub_10001258C(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_array_get_value(**(xpc_object_t **)a1, *(void *)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v4) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void sub_100012628(const void **a1, long long **a2)
{
  if (sub_1000153A8())
  {
    xpc_object_t v4 = *a2;
    xpc_object_t v5 = a2[1];
    if (*a2 != v5)
    {
      do
      {
        sub_10001387C(v18, v4);
        sub_1000133D8(a1, (const void **)v18, (uint64_t)v16);
        if (SHIBYTE(v17) < 0)
        {
          sub_1000173FC(__p, v16[0], (unint64_t)v16[1]);
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)v16;
          uint64_t v15 = v17;
        }
        BOOL v6 = sub_100015740((const void **)__p);
        BOOL v7 = v6;
        if (SHIBYTE(v15) < 0)
        {
          operator delete(__p[0]);
          if (v7)
          {
LABEL_10:
            uint64_t v8 = *(NSObject **)(qword_1001D8080 + 112);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              if (v17 >= 0) {
                uint64_t v10 = v16;
              }
              else {
                uint64_t v10 = (void **)v16[0];
              }
              *(_DWORD *)long long buf = 136315138;
              unsigned int v22 = v10;
              _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "WISABC:#D Event %s is eligible for ABC", buf, 0xCu);
            }
            if (SHIBYTE(v17) < 0)
            {
              sub_1000173FC(__dst, v16[0], (unint64_t)v16[1]);
            }
            else
            {
              *(_OWORD *)__dst = *(_OWORD *)v16;
              uint64_t v13 = v17;
            }
            xpc_object_t v9 = object;
            xpc_object_t v11 = object;
            if (object)
            {
              xpc_retain(object);
            }
            else
            {
              xpc_object_t v9 = xpc_null_create();
              xpc_object_t v11 = v9;
            }
            sub_10008AD38((const void **)__dst, &v11);
            xpc_release(v9);
            xpc_object_t v11 = 0;
            if (SHIBYTE(v13) < 0) {
              operator delete(__dst[0]);
            }
          }
        }
        else if (v6)
        {
          goto LABEL_10;
        }
        if (SHIBYTE(v17) < 0) {
          operator delete(v16[0]);
        }
        xpc_release(object);
        xpc_object_t object = 0;
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        v4 += 2;
      }
      while (v4 != v5);
    }
  }
}

void sub_100012974(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10001F4A8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000129AC(uint64_t a1)
{
  int RadioVendor = TelephonyRadiosGetRadioVendor();
  int Radio = TelephonyRadiosGetRadio();
  sub_100013ED0((std::string **)a1, RadioVendor, Radio);
  id v23 = 0;
  __int16 v24 = 0;
  uint64_t v25 = 0;
  xpc_object_t v4 = *(std::string **)a1;
  xpc_object_t v5 = *(std::string **)(a1 + 8);
  if (*(std::string **)a1 != v5)
  {
    do
    {
      sub_10001387C(v20, (long long *)v4);
      sub_100013E40((uint64_t)buf);
      if (SHIBYTE(v21) < 0)
      {
        sub_1000173FC(__p, v20[0], (unint64_t)v20[1]);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v20;
        uint64_t v19 = v21;
      }
      BOOL v6 = sub_100013978((const void ***)buf, (const void **)__p);
      if (SHIBYTE(v19) < 0) {
        operator delete(__p[0]);
      }
      sub_100013D8C((uint64_t)v33, v33[1]);
      sub_100013D8C((uint64_t)v32, v32[1]);
      sub_100013D8C((uint64_t)v31, v31[1]);
      sub_100013D28((uint64_t)v30, v30[1]);
      sub_100013D28((uint64_t)v29, v29[1]);
      sub_100013D28((uint64_t)v28, (char *)v28[1]);
      sub_100013D28((uint64_t)buf, *(char **)&buf[8]);
      if (v6)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        if (SHIBYTE(v21) < 0)
        {
          sub_1000173FC(__dst, v20[0], (unint64_t)v20[1]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)v20;
          uint64_t v14 = v21;
        }
        xpc_object_t v7 = object;
        xpc_object_t v12 = object;
        if (object)
        {
          xpc_retain(object);
        }
        else
        {
          xpc_object_t v7 = xpc_null_create();
          xpc_object_t v12 = v7;
        }
        BOOL v8 = sub_100078F54((uint64_t)__dst, &v12, (uint64_t *)&v15);
        xpc_release(v7);
        xpc_object_t v12 = 0;
        if (SHIBYTE(v14) < 0) {
          operator delete(__dst[0]);
        }
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          xpc_object_t v9 = v20;
          if (v21 < 0) {
            xpc_object_t v9 = (void **)v20[0];
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v8;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "[WISToCAEventSanitizer] event %s metric flattening result: %{BOOL}d", buf, 0x12u);
        }
        xpc_object_t v11 = v15;
        uint64_t v10 = v16;
        while (v11 != v10)
        {
          sub_10001387C(buf, v11);
          sub_1000121A4((uint64_t *)&v23, (long long *)buf);
          xpc_release(v28[0]);
          v28[0] = 0;
          if (v27 < 0) {
            operator delete(*(void **)buf);
          }
          v11 += 2;
        }
        *(void *)long long buf = &v15;
        sub_1000132E8((void ***)buf);
      }
      else
      {
        sub_1000121A4((uint64_t *)&v23, (long long *)v20);
      }
      xpc_release(object);
      xpc_object_t object = 0;
      if (SHIBYTE(v21) < 0) {
        operator delete(v20[0]);
      }
      xpc_object_t v4 = (std::string *)((char *)v4 + 32);
    }
    while (v4 != v5);
  }
  if (&v23 != (long long **)a1) {
    sub_10001352C(a1, v23, v24, ((char *)v24 - (char *)v23) >> 5);
  }
  *(void *)long long buf = &v23;
  sub_1000132E8((void ***)buf);
}

void sub_100012CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char *a37)
{
  a37 = &a34;
  sub_1000132E8((void ***)&a37);
  _Unwind_Resume(a1);
}

uint64_t *sub_100012DA0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v19 = a1;
  uint64_t v20 = v1;
  if (!*(void *)(v1 + 16)) {
    goto LABEL_54;
  }
  uint64_t v2 = *(void *)v1;
  __int32 v3 = *(_DWORD *)(v1 + 8);
  int v4 = *(_DWORD *)(v1 + 12);
  int Radio = TelephonyRadiosGetRadio();
  if (!sub_100013AD4(v3, v4, Radio)) {
    goto LABEL_54;
  }
  pthread_mutex_lock(&stru_1001D6C28);
  uint64_t v6 = xmmword_1001D6C68;
  if (!(void)xmmword_1001D6C68) {
    sub_10007F320();
  }
  xpc_object_t v7 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6C68 + 1);
  if (*((void *)&xmmword_1001D6C68 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6C68 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6C28);
  if (v6)
  {
    pthread_mutex_lock(&stru_1001D6C28);
    uint64_t v8 = xmmword_1001D6C68;
    if (!(void)xmmword_1001D6C68) {
      sub_10007F320();
    }
    xpc_object_t v9 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6C68 + 1);
    if (*((void *)&xmmword_1001D6C68 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6C68 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D6C28);
    char v10 = sub_100014D54(v8, *(_DWORD *)(v1 + 32)) ^ 1;
    if (v9) {
      sub_10000B678(v9);
    }
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  char v10 = 1;
  if (v7) {
LABEL_15:
  }
    sub_10000B678(v7);
LABEL_16:
  if ((v10 & 1) == 0)
  {
    sub_1000142B4((std::string *)v2, *(_DWORD *)(v1 + 12), &v33);
    std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    char v12 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v30 = 0;
      if (sub_1000144D4(v2, *(void *)(v1 + 16), (unint64_t)&v30))
      {
        sub_1000129AC((uint64_t)&v30);
        sub_100013A58(*(id ****)(v2 + 48), *(_DWORD *)(v1 + 8), &v30, *(unsigned char *)(v2 + 44));
        uint64_t v13 = v30;
        uint64_t v14 = v31;
        while (v13 != v14)
        {
          sub_10001387C(&v28, v13);
          sub_1000133D8((const void **)&v33.__r_.__value_.__l.__data_, (const void **)&v28.__r_.__value_.__l.__data_, (uint64_t)v26);
          if (SHIBYTE(v27) < 0)
          {
            sub_1000173FC(__dst, v26[0], (unint64_t)v26[1]);
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)v26;
            uint64_t v25 = v27;
          }
          xpc_object_t v15 = object;
          xpc_object_t v23 = object;
          if (object)
          {
            xpc_retain(object);
          }
          else
          {
            xpc_object_t v15 = xpc_null_create();
            xpc_object_t v23 = v15;
          }
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
            sub_1000173FC(&__p, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
          }
          else {
            std::string __p = v28;
          }
          BOOL v16 = sub_100013C28((uint64_t)&__p);
          sub_1000149A0(v2, (uint64_t *)__dst, &v23, v16);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          xpc_release(v15);
          xpc_object_t v23 = 0;
          if (SHIBYTE(v25) < 0) {
            operator delete(__dst[0]);
          }
          xpc_object_t v17 = object;
          xpc_object_t v21 = object;
          if (object)
          {
            xpc_retain(object);
          }
          else
          {
            xpc_object_t v17 = xpc_null_create();
            xpc_object_t v21 = v17;
          }
          sub_100014394(v2, (uint64_t)v26, &v21);
          xpc_release(v17);
          xpc_object_t v21 = 0;
          if (SHIBYTE(v27) < 0) {
            operator delete(v26[0]);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v28.__r_.__value_.__l.__data_);
          }
          v13 += 2;
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          sub_1000173FC(&v28, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
        }
        else {
          std::string v28 = v33;
        }
        v26[0] = 0;
        v26[1] = 0;
        uint64_t v27 = 0;
        sub_1000136B0(v26, v30, v31, ((char *)v31 - (char *)v30) >> 5);
        sub_100012628((const void **)&v28.__r_.__value_.__l.__data_, (long long **)v26);
        id v34 = v26;
        sub_1000132E8(&v34);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
      }
      id v34 = (void **)&v30;
      sub_1000132E8(&v34);
      char v12 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    if (v12 < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
  }
LABEL_54:
  sub_100013924(&v20);
  return sub_10000BA00((uint64_t *)&v19);
}

void sub_100013180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,xpc_object_t object)
{
  *(void *)(v39 - 72) = v38;
  sub_1000132E8((void ***)(v39 - 72));
  if (a37 < 0) {
    operator delete(__p);
  }
  *(void *)(v39 - 72) = v39 - 120;
  sub_1000132E8((void ***)(v39 - 72));
  if (*(char *)(v39 - 73) < 0) {
    operator delete(*(void **)(v39 - 96));
  }
  sub_100013924(&a11);
  sub_10000BA00(&a10);
  _Unwind_Resume(a1);
}

void sub_1000132E8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    xpc_object_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_100013380((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      xpc_object_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100013380(uint64_t a1, uint64_t a2)
{
  xpc_release(*(xpc_object_t *)(a2 + 24));
  *(void *)(a2 + 24) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    __int32 v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t sub_1000133D8@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = sub_1000134A4(a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      xpc_object_t v9 = a1;
    }
    else {
      xpc_object_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  char v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      xpc_object_t v11 = a2;
    }
    else {
      xpc_object_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t sub_1000134A4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10001F670();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    size_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_10001352C(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  size_t v6 = a2;
  uint64_t v8 = a1 + 16;
  xpc_object_t v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    sub_10007BC20((void **)a1);
    if (a4 >> 59) {
      sub_10002B5E0();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_100013738((void *)a1, v12);
    uint64_t v13 = sub_1000137D8(v8, v6, a3, *(void **)(a1 + 8));
LABEL_15:
    *(void *)(a1 + 8) = v13;
    return;
  }
  uint64_t v14 = *(void *)(a1 + 8);
  unint64_t v15 = (v14 - (uint64_t)v9) >> 5;
  if (v15 < a4)
  {
    BOOL v16 = &a2[2 * v15];
    if ((std::string *)v14 != v9)
    {
      uint64_t v17 = 32 * v15;
      do
      {
        sub_10001377C(v9, (const std::string *)v6);
        v6 += 2;
        xpc_object_t v9 = (std::string *)((char *)v9 + 32);
        v17 -= 32;
      }
      while (v17);
      xpc_object_t v9 = *(std::string **)(a1 + 8);
    }
    uint64_t v13 = sub_1000137D8(v8, v16, a3, v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    id v18 = *(std::string **)a1;
  }
  else
  {
    id v18 = *(std::string **)a1;
    do
    {
      sub_10001377C(v9, (const std::string *)v6);
      v6 += 2;
      xpc_object_t v9 = (std::string *)((char *)v9 + 32);
      id v18 = (std::string *)((char *)v18 + 32);
    }
    while (v6 != a3);
    uint64_t v14 = *(void *)(a1 + 8);
  }
  while ((std::string *)v14 != v18)
  {
    v14 -= 32;
    sub_100013380(v8, v14);
  }
  *(void *)(a1 + 8) = v18;
}

void sub_1000136A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_1000136B0(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    sub_100013738(result, a4);
    uint64_t result = sub_1000137D8((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100013718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000132E8(&a9);
  _Unwind_Resume(a1);
}

char *sub_100013738(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_10002B5E0();
  }
  uint64_t result = (char *)sub_1000122B8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

std::string *sub_10001377C(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1, a2);
  xpc_object_t data = a2[1].__r_.__value_.__l.__data_;
  if (data) {
    xpc_retain(data);
  }
  else {
    xpc_object_t data = xpc_null_create();
  }
  std::string::pointer v5 = a1[1].__r_.__value_.__l.__data_;
  a1[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  xpc_release(v5);
  return a1;
}

void *sub_1000137D8(uint64_t a1, long long *a2, long long *a3, void *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v10 = __dst;
  uint64_t v11 = (char *)__dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    size_t v6 = a2;
    do
    {
      sub_10001387C(v4, v6);
      v6 += 2;
      uint64_t v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1000138EC((uint64_t)v8);
  return v4;
}

void sub_100013868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10001387C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000173FC(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  std::string::pointer v5 = (void *)*((void *)a2 + 3);
  __dst[3] = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    __dst[3] = xpc_null_create();
  }
  return __dst;
}

uint64_t sub_1000138EC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100071F74((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_100013924(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 24);
    if (v2) {
      sub_10000B678(v2);
    }
    operator delete();
  }
  return result;
}

BOOL sub_100013978(const void ***a1, const void **a2)
{
  if (TelephonyRadiosGetRadioVendor() == 3) {
    long long v4 = a1 + 6;
  }
  else {
    long long v4 = a1;
  }
  sub_100013A00(&v7, v4);
  BOOL v5 = &v8 != (char **)sub_100015244((uint64_t)&v7, a2);
  sub_100013D28((uint64_t)&v7, v8);
  return v5;
}

void sub_1000139E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t *sub_100013A00(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100016D28(a1, *a2, a2 + 1);
  return a1;
}

void sub_100013A40(_Unwind_Exception *a1)
{
  sub_100013D28(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100013A58(id ***a1, int a2, long long **a3, char a4)
{
  if (a2 == 812547) {
    sub_10005AD54(a1, a3);
  }
  if ((a4 & 1) == 0)
  {
    sub_10005AEB0((uint64_t)a1, a2, a3);
  }
}

BOOL sub_100013AD4(__int32 __c, int a2, int a3)
{
  if (a2 == 60 && a3 == 8)
  {
    __int32 v3 = wmemchr(dword_1001D72B8, __c, 0xBuLL);
    long long v4 = dword_1001D72E4;
    if (v3) {
      long long v4 = v3;
    }
    BOOL v5 = (char *)v4 - (char *)dword_1001D72B8 == 44;
    return !v5;
  }
  if (a2 == 60 && a3 == 4)
  {
    size_t v6 = wmemchr(dword_1001D72E4, __c, 8uLL);
    uint64_t v7 = dword_1001D7304;
    if (v6) {
      uint64_t v7 = v6;
    }
    BOOL v5 = (char *)v7 - (char *)dword_1001D72E4 == 32;
    return !v5;
  }
  if (a2 == 12 && a3 == 9)
  {
    uint64_t v8 = wmemchr(dword_1001D7304, __c, 5uLL);
    char v9 = dword_1001D7318;
    if (v8) {
      char v9 = v8;
    }
    BOOL v5 = (char *)v9 - (char *)dword_1001D7304 == 20;
    return !v5;
  }
  if (a2 == 60 && a3 == 14)
  {
    uint64_t v11 = wmemchr(dword_1001D7318, __c, 3uLL);
    unint64_t v12 = dword_1001D7324;
    if (v11) {
      unint64_t v12 = v11;
    }
    return (char *)v12 - (char *)dword_1001D7318 == 12;
  }
  else
  {
    uint64_t v14 = wmemchr(dword_1001D7324, __c, 0x13uLL);
    unint64_t v15 = &OBJC_PROTOCOL___CLLocationManagerDelegate;
    if (v14) {
      unint64_t v15 = (__objc2_prot *)v14;
    }
    return (char *)v15 - (char *)dword_1001D7324 == 76;
  }
}

BOOL sub_100013C28(uint64_t a1)
{
  sub_100013E40((uint64_t)v6);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1000173FC(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  BOOL v2 = sub_100013E44((uint64_t)v6, (const void **)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  sub_100013D8C((uint64_t)v13, v13[1]);
  sub_100013D8C((uint64_t)v12, v12[1]);
  sub_100013D8C((uint64_t)v11, v11[1]);
  sub_100013D28((uint64_t)v10, v10[1]);
  sub_100013D28((uint64_t)v9, v9[1]);
  sub_100013D28((uint64_t)v8, v8[1]);
  sub_100013D28((uint64_t)v6, v7);
  return v2;
}

void sub_100013CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_100013D28(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_100013D28(a1, *(void *)a2);
    sub_100013D28(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void sub_100013D8C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100013D8C(a1, *a2);
    sub_100013D8C(a1, a2[1]);
    sub_100013DE8((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100013DE8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    BOOL v2 = *(void **)a1;
    operator delete(v2);
  }
}

BOOL sub_100013E44(uint64_t a1, const void **a2)
{
  if (TelephonyRadiosGetRadioVendor() == 3) {
    long long v4 = (const void ***)(a1 + 72);
  }
  else {
    long long v4 = (const void ***)(a1 + 24);
  }
  sub_100013A00(&v7, v4);
  BOOL v5 = &v8 != (char **)sub_100015244((uint64_t)&v7, a2);
  sub_100013D28((uint64_t)&v7, v8);
  return v5;
}

void sub_100013EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void sub_100013ED0(std::string **a1, int a2, int a3)
{
  __int32 v3 = *a1;
  long long v4 = (long long *)a1[1];
  if (*a1 != (std::string *)v4)
  {
    do
    {
      sub_100013E40((uint64_t)v12);
      if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1000173FC(__p, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v7 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
        std::string::size_type v11 = v3->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v7;
      }
      sub_1000140C0((uint64_t)v12, (long long *)__p, a2, a3, &__str);
      if (SHIBYTE(v11) < 0) {
        operator delete(__p[0]);
      }
      sub_100013D8C((uint64_t)v19, v19[1]);
      sub_100013D8C((uint64_t)v18, v18[1]);
      sub_100013D8C((uint64_t)v17, v17[1]);
      sub_100013D28((uint64_t)v16, v16[1]);
      sub_100013D28((uint64_t)v15, v15[1]);
      sub_100013D28((uint64_t)v14, v14[1]);
      sub_100013D28((uint64_t)v12, v13);
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      char v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::string::operator=(v3, &__str);
        char v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      if (v9 < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __int32 v3 = (std::string *)((char *)v3 + 32);
    }
    while (v3 != (std::string *)v4);
  }
}

void sub_100014030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34)
{
  sub_100013D8C(v39, a34);
  sub_100013D8C(v38, a31);
  sub_100013D8C(v37, a28);
  sub_100013D28(v36, a25);
  sub_100013D28(v35, a22);
  sub_100013D28(v34, a19);
  sub_100013D28((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_1000140C0(uint64_t a1@<X0>, long long *a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  if (a3 == 3)
  {
    if (*((char *)a2 + 23) < 0) {
      sub_1000173FC(&__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else {
      std::string __dst = *(std::string *)a2;
    }
    sub_10006FF6C(a1, &__dst, (uint64_t)a5);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v7 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_22:
      operator delete(v7);
    }
  }
  else if (a4 == 4)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_1000173FC(__p, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = *a2;
      uint64_t v10 = *((void *)a2 + 2);
    }
    sub_1000703A4(v8, (const void ***)(a1 + 144));
    sub_10006FEE8((const void **)__p, (uint64_t)v8, (uint64_t)a5);
    sub_100013D8C((uint64_t)v8, (void *)v8[1]);
    if (SHIBYTE(v10) < 0)
    {
      long long v7 = __p[0];
      goto LABEL_22;
    }
  }
  else if (a4 == 8)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_1000173FC(&v12, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v12 = *a2;
      uint64_t v13 = *((void *)a2 + 2);
    }
    sub_1000703A4(v11, (const void ***)(a1 + 120));
    sub_10006FEE8((const void **)&v12, (uint64_t)v11, (uint64_t)a5);
    sub_100013D8C((uint64_t)v11, (void *)v11[1]);
    if (SHIBYTE(v13) < 0)
    {
      long long v7 = (void *)v12;
      goto LABEL_22;
    }
  }
  else
  {
    sub_100018888(a5, "");
  }
}

void sub_100014244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

std::string *sub_1000142B4@<X0>(std::string *result@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2 > 11)
  {
    if (a2 == 60) {
      goto LABEL_5;
    }
    if (a2 != 34)
    {
      if (a2 != 12) {
        return result;
      }
LABEL_5:
      if (result[3].__r_.__value_.__s.__data_[0])
      {
        long long v4 = "com.apple.Baseband.";
        int v5 = 1;
        goto LABEL_13;
      }
LABEL_16:
      size_t v6 = "";
      return std::string::assign(a3, v6);
    }
    if (!result[3].__r_.__value_.__s.__data_[1]) {
      goto LABEL_16;
    }
    long long v4 = "com.apple.Telephony.";
    int v5 = 4;
LABEL_13:
    if ((result[1].__r_.__value_.__r.__words[2] & v5) != 0) {
      size_t v6 = "";
    }
    else {
      size_t v6 = v4;
    }
    return std::string::assign(a3, v6);
  }
  if (a2 == 1 || a2 == 8)
  {
    if (!result[3].__r_.__value_.__s.__data_[1]) {
      goto LABEL_16;
    }
    long long v4 = "com.apple.Telephony.";
    int v5 = 2;
    goto LABEL_13;
  }
  return result;
}

void sub_100014378(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100014394(uint64_t a1, uint64_t a2, void **a3)
{
  __int32 v3 = *(uint64_t **)(a1 + 80);
  long long v4 = *(uint64_t **)(a1 + 88);
  if (v3 != v4)
  {
    char v8 = 0;
    while (1)
    {
      char v9 = (std::__shared_weak_count *)v3[1];
      if (v9)
      {
        uint64_t v10 = std::__shared_weak_count::lock(v9);
        if (v10 && (uint64_t v11 = *v3) != 0)
        {
          long long v12 = *a3;
          xpc_object_t object = v12;
          if (v12) {
            xpc_retain(v12);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(*(void *)v11 + 16))(v11, a2, &object);
          xpc_release(object);
          xpc_object_t object = 0;
        }
        else
        {
          uint64_t v13 = (std::__shared_weak_count *)v3[1];
          *__int32 v3 = 0;
          v3[1] = 0;
          if (v13) {
            std::__shared_weak_count::__release_weak(v13);
          }
          char v8 = 1;
          if (!v10) {
            goto LABEL_16;
          }
        }
        sub_10000B678(v10);
      }
      else
      {
        *__int32 v3 = 0;
        v3[1] = 0;
        char v8 = 1;
      }
LABEL_16:
      v3 += 2;
      if (v3 == v4)
      {
        if (v8) {
          sub_100071B20(a1);
        }
        return;
      }
    }
  }
}

void sub_1000144AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  sub_10000B678(v10);
  _Unwind_Resume(a1);
}

BOOL sub_1000144D4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  wis::createTagForProtobuf((uint64_t *)&v15, (wis *)0xF, *(_DWORD *)(a2 + 8) - *(_DWORD *)a2, a3);
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_1000148E0(&__p, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  sub_100014700((uint64_t)&__p, (char *)__p, (char *)v15, v16, v16 - (unsigned char *)v15);
  xpc_object_t v5 = xpc_null_create();
  size_t v6 = (void *)sMetricToXpcTransform();
  if (v6 || (size_t v6 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v6);
      xpc_object_t v7 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    size_t v6 = 0;
  }
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v8);
  xpc_release(v6);
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 0x40000000;
  applier[2] = sub_100011EE0;
  applier[3] = &unk_1001B84F0;
  applier[4] = a3;
  BOOL v9 = xpc_dictionary_apply(v7, applier);
  xpc_release(v7);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    BOOL v16 = (char *)v15;
    operator delete(v15);
  }
  return v9;
}

void sub_100014670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  xpc_release(v19);
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

char *sub_100014700(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  xpc_object_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  xpc_object_t v7 = __src;
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_10002B5E0();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      BOOL v16 = operator new(v15);
    }
    else {
      BOOL v16 = 0;
    }
    id v26 = &v13[(void)v16];
    uint64_t v27 = &v13[(void)v16 + v6];
    std::string v28 = v26;
    do
    {
      char v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    uint64_t v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      uint64_t v32 = v26;
    }
    else
    {
      uint64_t v31 = v5;
      uint64_t v32 = v26;
      do
      {
        char v33 = *--v31;
        *--uint64_t v32 = v33;
      }
      while (v31 != v30);
      uint64_t v10 = *(char **)(a1 + 8);
    }
    uint64_t v34 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v27, v5, v10 - v5);
    }
    uint64_t v35 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v27[v10 - v5];
    *(void *)(a1 + 16) = v34;
    if (v35) {
      operator delete(v35);
    }
    return v26;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    id v18 = &__src[a5];
    uint64_t v20 = *(char **)(a1 + 8);
LABEL_17:
    xpc_object_t v21 = &v5[v6];
    unsigned int v22 = &v20[-v6];
    xpc_object_t v23 = v20;
    if (&v20[-v6] < v10)
    {
      int64_t v24 = &v10[v6] - v20;
      xpc_object_t v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v5[v6], v5, v20 - v21);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
    return v5;
  }
  id v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  uint64_t v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void *sub_1000148E0(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10001495C(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100014940(_Unwind_Exception *exception_object)
{
  __int32 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10001495C(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    sub_10002B5E0();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void sub_1000149A0(uint64_t a1, uint64_t *a2, xpc_object_t *a3, int a4)
{
  uint64_t v7 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    size_t v8 = a2;
    if (*((char *)a2 + 23) < 0) {
      size_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v21 = 1024;
    int v22 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "conv:#I Sending CoreAnalytics with eventName=%{public}s, isExploding=%{BOOL}d ", buf, 0x12u);
  }
  if (a4)
  {
    v18[1] = _NSConcreteStackBlock;
    v18[2] = (xpc_object_t)1174405120;
    v18[3] = sub_100071960;
    v18[4] = &unk_1001B8510;
    xpc_object_t v9 = *a3;
    xpc_object_t object = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    analytics_send_exploding_event_lazy();
    xpc_release(object);
    return;
  }
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v11 = v10;
  if (v10)
  {
    v18[0] = v10;
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    v18[0] = v11;
    if (!v11)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v11 = 0;
      goto LABEL_17;
    }
  }
  if (xpc_get_type(v11) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v12 = xpc_null_create();
LABEL_17:
    v18[0] = v12;
    goto LABEL_18;
  }
  xpc_retain(v11);
LABEL_18:
  xpc_release(v11);
  sub_100018888(buf, CASendEventOptionKeyLogPayload);
  xpc_object_t v16 = xpc_BOOL_create(1);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  uint64_t v13 = buf;
  if (v23 < 0) {
    uint64_t v13 = *(unsigned char **)buf;
  }
  v15[0] = v18;
  v15[1] = v13;
  sub_100014D08((uint64_t)v15, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_object_t v14 = *a3;
  if (*a3) {
    xpc_retain(*a3);
  }
  else {
    xpc_object_t v14 = xpc_null_create();
  }
  analytics_send_event_lazy_with_options();
  xpc_release(v14);
  if (v23 < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v18[0]);
}

void sub_100014C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,xpc_object_t a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10001F4A8(exception_object);
}

xpc_object_t sub_100014D08@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t sub_100014D54(uint64_t a1, unsigned int a2)
{
  sub_100014DA4(a1);
  uint64_t result = *(void *)(a1 + 120);
  if (result)
  {
    return sub_1000152D4(result, a2);
  }
  return result;
}

uint64_t sub_100014DA4(uint64_t result)
{
  if (*(unsigned char *)(result + 62)) {
    return result;
  }
  uint64_t v1 = result;
  *(unsigned char *)(result + 62) = 1;
  sub_1000810E8((uint64_t *)(result + 120), 0);
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v2 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  __int32 v3 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  sub_1000A51FC(v2, &v10);
  if (v3) {
    sub_10000B678(v3);
  }
  if (v10)
  {
    BOOL v4 = sub_1000E8248(v10);
    xpc_object_t v5 = *(NSObject **)(v1 + 40);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
    if (v4)
    {
      if (v6)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "submit:#I Initializing trigger conditional and metric processing maps", buf, 2u);
      }
      sub_1000E82A8(v10);
      operator new();
    }
    if (!v6) {
      goto LABEL_18;
    }
    *(_WORD *)long long buf = 0;
    size_t v8 = "submit:#I Current config is not eligible; not setting up the maps (a new one should select)";
    xpc_object_t v9 = v5;
  }
  else
  {
    uint64_t v7 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO)) {
      goto LABEL_18;
    }
    *(_WORD *)long long buf = 0;
    size_t v8 = "submit:#I DeviceConfig is empty; weird";
    xpc_object_t v9 = v7;
  }
  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v8, buf, 2u);
LABEL_18:
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  return result;
}

void sub_100014FAC()
{
}

BOOL sub_100015040(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v2 = a1 + 72;
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = *(_DWORD *)(v3 + 28);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      size_t v8 = (uint64_t *)v3;
    }
    else {
      size_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  return v5 != v2 && *(_DWORD *)(v5 + 28) <= a2 && *(unsigned char *)(v5 + 32) != 0;
}

void sub_100015094(uint64_t a1, uint64_t a2, void **a3)
{
  if (a1 + 24 != sub_100015244(a1 + 16, (const void **)a2))
  {
    unsigned int v6 = *(NSObject **)(qword_1001D8080 + 136);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_1001400F0((uint64_t *)a2, v6);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    if (WeakRetained)
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v8 = a2;
      }
      else {
        uint64_t v8 = *(void *)a2;
      }
      xpc_object_t v9 = +[NSString stringWithUTF8String:v8];
      if (v9)
      {
        uint64_t v10 = [WeakRetained queue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3321888768;
        block[2] = sub_1000026AC;
        block[3] = &unk_1001B5B58;
        id v14 = WeakRetained;
        id v11 = v9;
        xpc_object_t v12 = *a3;
        id v15 = v11;
        xpc_object_t object = v12;
        if (v12) {
          xpc_retain(v12);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        dispatch_async(v10, block);
        xpc_release(object);
        xpc_object_t object = 0;
      }
      else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG))
      {
        sub_1001400BC();
      }
    }
  }
}

void sub_100015228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100015244(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = sub_1000189DC(v5, (const void **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_1000189DC(v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

BOOL sub_1000152D4(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = sub_100015338(v3, a2);
  unsigned int v5 = v4;
  if ((v4 & 0xFF00000000) == 0 || v4 == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 56);

  return sub_100015040(v8, v5);
}

unint64_t sub_100015338(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v2 = a1 + 96;
  uint64_t v3 = v4;
  if (v4)
  {
    uint64_t v5 = v2;
    do
    {
      unsigned int v6 = *(_DWORD *)(v3 + 28);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        uint64_t v8 = (uint64_t *)v3;
      }
      else {
        uint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 && *(_DWORD *)(v5 + 28) <= a2)
    {
      int v11 = *(_DWORD *)(v5 + 32);
      unsigned int v10 = v11 & 0xFFFFFF00;
      LODWORD(v3) = v11;
      xpc_object_t v9 = &_mh_execute_header;
      return (unint64_t)v9 | v10 | v3;
    }
    xpc_object_t v9 = 0;
    LODWORD(v3) = 0;
  }
  else
  {
    xpc_object_t v9 = 0;
  }
  unsigned int v10 = 0;
  return (unint64_t)v9 | v10 | v3;
}

uint64_t sub_1000153A8()
{
  sub_1000155F0(&__p, (const void **)1);
  int v0 = v11;
  if (v11 < 0)
  {
    uint64_t v2 = v10;
    if (v10)
    {
      if (v10 == 4 && *(_DWORD *)__p == 1635018050) {
        goto LABEL_26;
      }
      if (v10 == 7)
      {
        if (*(_DWORD *)__p == 1920098627 && *(_DWORD *)((char *)__p + 3) == 1919248754) {
          goto LABEL_26;
        }
        uint64_t v2 = v10;
      }
      if (v2 == 8)
      {
        uint64_t v1 = __p;
LABEL_16:
        if (*v1 != 0x6C616E7265746E49)
        {
          uint64_t v4 = 0;
LABEL_27:
          uint64_t v5 = *(NSObject **)(qword_1001D8080 + 112);
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            if ((v0 & 0x80) == 0) {
              return v4;
            }
LABEL_29:
            operator delete(__p);
            return v4;
          }
          if ((v0 & 0x80000000) == 0)
          {
LABEL_33:
            p_p = &__p;
LABEL_34:
            *(_DWORD *)long long buf = 136315394;
            uint64_t v13 = p_p;
            __int16 v14 = 1024;
            int v15 = v4;
            _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WISABC:#D kSwReleaseType: %s, isValid: %{BOOL}d", buf, 0x12u);
            if ((v11 & 0x80) == 0) {
              return v4;
            }
            goto LABEL_29;
          }
LABEL_32:
          p_p = __p;
          goto LABEL_34;
        }
LABEL_26:
        uint64_t v4 = 1;
        goto LABEL_27;
      }
    }
    uint64_t v5 = *(NSObject **)(qword_1001D8080 + 112);
    uint64_t v4 = 0;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_29;
    }
    goto LABEL_32;
  }
  uint64_t v1 = &__p;
  switch(v11)
  {
    case 4:
      if (__p == 1635018050) {
        goto LABEL_26;
      }
      break;
    case 7:
      if (__p == 1920098627 && *(_DWORD *)((char *)&__p + 3) == 1919248754) {
        goto LABEL_26;
      }
      break;
    case 8:
      goto LABEL_16;
    default:
      break;
  }
  uint64_t v5 = *(NSObject **)(qword_1001D8080 + 112);
  uint64_t v4 = 0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_33;
  }
  return v4;
}

const void **sub_1000155F0@<X0>(void *a1@<X8>, const void **result@<X0>)
{
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      uint64_t result = sub_10001567C(a1);
      break;
    default:
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      break;
  }
  return result;
}

const void **sub_10001567C@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = MGCopyAnswer();
  if (v3) {
    uint64_t v1 = sub_100057DD8;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    ctu::cf::assign();
  }
  return sub_10001570C((const void **)&v3);
}

void sub_1000156E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001570C((const void **)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

const void **sub_10001570C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

BOOL sub_100015740(const void **a1)
{
  if ((char *)sub_100015804((const char **)&qword_1001D7DA8, (const char **)&qword_1001D7E50, a1)
     - (char *)&qword_1001D7DA8 != 168)
    return 1;
  int RadioVendor = TelephonyRadiosGetRadioVendor();
  if (RadioVendor == 1)
  {
    BOOL v3 = (char *)sub_100015804((const char **)off_1001D7448, (const char **)&byte_1001D7458, a1) - (char *)off_1001D7448 == 16;
  }
  else
  {
    if (RadioVendor != 3) {
      return 0;
    }
    BOOL v3 = (char *)sub_100015804((const char **)off_1001D7430, (const char **)off_1001D7448, a1) - (char *)off_1001D7430 == 24;
  }
  return !v3;
}

const char **sub_100015804(const char **a1, const char **a2, const void **a3)
{
  BOOL v3 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = *((unsigned __int8 *)a3 + 23);
    uint64_t v8 = (const void **)*a3;
    BOOL v7 = a3[1];
    while (1)
    {
      size_t v9 = strlen(*v3);
      size_t v10 = v9;
      if ((v6 & 0x80) != 0)
      {
        if ((const void *)v9 == v7)
        {
          char v11 = v8;
          if (v7 == (const void *)-1) {
            sub_1000983B4();
          }
LABEL_8:
          if (!memcmp(v11, *v3, v10)) {
            return v3;
          }
        }
      }
      else
      {
        char v11 = a3;
        if (v10 == v6) {
          goto LABEL_8;
        }
      }
      if (++v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

void sub_100015CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_100015DFC()
{
}

void sub_100015E04()
{
}

void sub_100015E0C()
{
}

void sub_100015E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100016084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001642C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100016678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_100016D28(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_100016DB4(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      BOOL v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          BOOL v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100016DB4(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_100016E38(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_10001735C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10001716C(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **sub_100016E38(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !sub_1000189DC((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!sub_1000189DC((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      __int16 v14 = (const void **)a2[1];
      do
      {
        int v15 = v14;
        __int16 v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      id v18 = (const void **)a2;
      do
      {
        int v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        id v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1000189DC((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    xpc_object_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  char v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      xpc_object_t v12 = v11;
      char v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    xpc_object_t v16 = a2;
    do
    {
      xpc_object_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      xpc_object_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (sub_1000189DC((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (const void **)sub_10001893C((uint64_t)a1, a3, a5);
}

uint64_t **sub_100016FE4(uint64_t **result, std::string *a2, std::string *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    BOOL v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    size_t v10 = result;
    char v11 = v8;
    xpc_object_t v12 = v8;
    if (v8)
    {
      char v11 = sub_10001F918((uint64_t)v8);
      while (a2 != a3)
      {
        sub_10007022C(v5, a2, (uint64_t)v8);
        if (v9)
        {
          uint64_t v8 = v11;
          xpc_object_t v12 = v11;
          if (!v11)
          {
            ++a2;
            break;
          }
          char v11 = sub_10001F918((uint64_t)v11);
        }
        else
        {
          uint64_t v8 = v12;
        }
        ++a2;
        if (!v8) {
          break;
        }
      }
    }
    uint64_t result = (uint64_t **)sub_10001F96C((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    uint64_t result = (uint64_t **)sub_1000170EC(v5, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)a2);
    ++a2;
  }
  return result;
}

void sub_1000170D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001F96C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000170EC(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)sub_10001893C((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_10001735C((uint64_t)a1, a3, (uint64_t)&v7);
    sub_10001716C(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t *sub_10001716C(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_1000171C4(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_1000171C4(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      BOOL v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            char v9 = (uint64_t **)a2[2];
          }
          else
          {
            char v9 = (uint64_t **)v2[1];
            size_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              BOOL v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *char v9 = v2;
            v2[2] = (uint64_t)v9;
            BOOL v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *BOOL v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            BOOL v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          BOOL v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void *sub_10001735C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_1000173FC(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1000173E0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10001FA40(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_1000173FC(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_10001F670();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    int v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_10001749C(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  uint64_t v2 = (uint64_t **)(a1 + 24);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = a1 + 56;
  uint64_t v3 = (uint64_t **)(a1 + 48);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = a1 + 80;
  uint64_t v4 = (uint64_t **)(a1 + 72);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = a1 + 104;
  uint64_t v5 = (uint64_t **)(a1 + 96);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = a1 + 152;
  uint64_t v6 = (uint64_t **)(a1 + 144);
  *(void *)(a1 + 120) = a1 + 128;
  uint64_t v7 = (uint64_t **)(a1 + 120);
  *(void *)(a1 + 160) = 0;
  sub_100018888(v19, "cellularFbrxPdetStats");
  sub_100018888(v20, "cellularLteHoToLteCount");
  sub_100018888(v21, "cellularLteTxRxLevelHist");
  sub_100018888(v22, "cellularNrDlPdcpStats");
  sub_100018888(v23, "cellularNrRadioStats");
  sub_100018888(v24, "cellularNrRsrpRsrqSinrHist");
  sub_100018888(&v25, "cellularNrTxRxLevelHist");
  sub_100018888(&v26, "cellularNrUlPdcpStats");
  sub_100018888(v27, "cellularMitigationSessionStats");
  sub_100018888(v28, "cellularMitigationStatsPerRrcRelease");
  sub_100018888(v29, "cellularLteIratCount");
  sub_100018888(&v30, "cellularLteRrcStateHist");
  sub_100018888(v31, "cellularNrRrcStateHist");
  sub_100018888(v32, "cellularRfTunerHist");
  sub_100018888(v33, "cellularScanStats");
  sub_100018888(v34, "cellularServiceStatusHist");
  sub_100018888(&v35, "cellularLteSysInfoBlocks");
  sub_100018888(v36, "cellularNrSysInfoBlocks");
  sub_100018888(v37, "cellularNrEndcUsageStats");
  sub_100018888(v38, "cellularRfTunerEvent");
  sub_100018888(v39, "cellularIconDisplay");
  sub_100018888(v40, "cellularWcdmaRrcStateHist");
  sub_100018888(&v41, "cellularNrConnInactiveStats");
  sub_100018888(v42, "cellularDsdaProtocolStateHist");
  sub_100018888(v43, "cellularNasMsgCount");
  sub_100018888(v44, "cellularUimNvWearStatsPerCounter");
  sub_100018888(v45, "cellularNrLatencyTrackerHist");
  sub_100018888(v46, "cellularNrRlcStats");
  sub_100018888(v47, "cellularRankIndicatorHist");
  sub_100018888(v48, "cellularScanStatsSummary");
  sub_100018888(v49, "cellularSftOutageInfo");
  sub_100018888(v50, "cellularLteEdrxStats");
  sub_100018888(v51, "cellularPowerLogGPSStates");
  sub_100018888(v52, "cellularPowerLogL1SleepStates");
  sub_100018888(v53, "cellularPowerLogMCPMSleepVeto");
  sub_100018888(v54, "cellularPowerLogMPSSPerfLevels");
  sub_100018888(v55, "cellularPowerLogPowerEstimator");
  sub_100018888(v56, "cellularPowerLogProtocolState");
  sub_100018888(v57, "cellularPowerLogAOP_UARTStates");
  sub_100018888(v58, "cellularPowerLogLTE_UL_CAState");
  sub_100018888(v59, "cellularPowerLogLTEActivatedCA_SCCStates");
  sub_100018888(v60, "cellularPowerLogLTEConfiguredCA_SCCStates");
  sub_100018888(v61, "cellularPowerLogLTERxDiversity");
  sub_100018888(v62, "cellularPowerLogLTERxTxActivityStates");
  sub_100018888(v63, "cellularPowerLogNR_mmWaveUL_CAState");
  sub_100018888(v64, "cellularPowerLogNRmmWaveCA_SCCActivated");
  sub_100018888(v65, "cellularPowerLogNRmmWaveCA_SCCConfigured");
  sub_100018888(v66, "cellularPowerLogNRmmWaveRxTx");
  sub_100018888(v67, "cellularPowerLogNRsub6RxDiversity");
  sub_100018888(v68, "cellularPowerLogNRsub6RxTx");
  sub_100018888(v69, "cellularPowerLogPCIeStates");
  sub_100018888(v70, "cellularPowerLogPLMNSearch");
  sub_100018888(v71, "cellularPowerLogWLAN_UARTStates");
  sub_100018888(v72, "cellularPowerLogCpuPerfLevels");
  sub_100018888(v73, "cellularPowerLogAcmPerfLevels");
  sub_100018888(v74, "cellularPowerLogSocPerfLevels");
  sub_100018888(v75, "cellularPowerLogXOShutdown");
  sub_100018888(v76, "cellularPowerLogLteCaConfigActivateStats");
  sub_100018888(v77, "cellularPowerLogNrCaConfigActivateStats");
  sub_100018888(v78, "cellularPowerLogCpsSleepStates");
  sub_100018888(v79, "cellularPowerLogCdpUSleepStates");
  sub_100018888(v80, "cellularPowerLogCdpDSleepStates");
  sub_100018888(v81, "cellularPowerLogCdpHSleepStates");
  sub_100018888(v82, "cellularPowerLogDcsSleepStates");
  sub_100018888(v83, "cellularPowerLog2g3gSleepStates");
  sub_100018888(v84, "cellularPowerLogL1SSleepStates");
  sub_100018888(v85, "cellularPowerLogL1CSleepStates");
  sub_100018888(v86, "commCenterThumperAccount");
  sub_100018888(v87, "commCenterDataUsageTopConsumingAppsQueriable");
  sub_100018888(v88, "commCenterRemoteCellularPlanProfilesStatus");
  sub_100018888(v89, "commCenterCellularPlanProfileTransferDetails");
  sub_100018888(v90, "commCenterDataUsageSinceLastSampleQueriable");
  sub_100018888(v91, "commCenterTransferPlanListingStatus");
  sub_100018888(v92, "commCenterBundleUpdateCheck");
  sub_100018888(v93, "commCenterBootstrapBundle");
  sub_100018888(v94, "commCenterDefaultBundle");
  sub_100018888(v95, "commCenterOperatorBundle");
  sub_100018888(v96, "commCenterCarrierBundle");
  sub_100018888(v97, "testingOne");
  sub_100016FE4((uint64_t **)a1, v19, &v98);
  uint64_t v8 = 79;
  do
  {
    if (SHIBYTE(v19[v8 - 1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19[v8 - 1].__r_.__value_.__l.__data_);
    }
    --v8;
  }
  while (v8 * 24);
  sub_100018888(v19, "cellularFbrxPdetStats");
  sub_100018888(v20, "cellularLteHoToLteCount");
  sub_100018888(v21, "cellularLteTxRxLevelHist");
  sub_100018888(v22, "cellularNrDlPdcpStats");
  sub_100018888(v23, "cellularNrRadioStats");
  sub_100018888(v24, "cellularNrRsrpRsrqSinrHist");
  sub_100018888(&v25, "cellularNrTxRxLevelHist");
  sub_100018888(&v26, "cellularNrUlPdcpStats");
  sub_100018888(v27, "cellularMitigationSessionStats");
  sub_100018888(v28, "cellularMitigationStatsPerRrcRelease");
  sub_100018888(v29, "cellularLteIratCount");
  sub_100018888(&v30, "cellularLteRrcStateHist");
  sub_100018888(v31, "cellularNrRrcStateHist");
  sub_100018888(v32, "cellularRfTunerHist");
  sub_100018888(v33, "cellularScanStats");
  sub_100018888(v34, "cellularServiceStatusHist");
  sub_100018888(&v35, "cellularLteSysInfoBlocks");
  sub_100018888(v36, "cellularNrSysInfoBlocks");
  sub_100018888(v37, "cellularNrEndcUsageStats");
  sub_100018888(v38, "cellularRfTunerEvent");
  sub_100018888(v39, "cellularIconDisplay");
  sub_100018888(v40, "cellularWcdmaRrcStateHist");
  sub_100018888(&v41, "cellularNrConnInactiveStats");
  sub_100018888(v42, "cellularDsdaProtocolStateHist");
  sub_100018888(v43, "cellularNasMsgCount");
  sub_100018888(v44, "cellularUimNvWearStatsPerCounter");
  sub_100018888(v45, "cellularNrLatencyTrackerHist");
  sub_100018888(v46, "cellularNrRlcStats");
  sub_100018888(v47, "cellularRankIndicatorHist");
  sub_100018888(v48, "cellularPowerLogLteNrRxTxActivityStats");
  sub_100018888(v49, "cellularLteNrTxPowerSnapshotStats");
  sub_100018888(v50, "cellularNrCdrxConfig");
  sub_100018888(v51, "cellularSftOutageInfo");
  sub_100018888(v52, "cellularCoexSummaryPerMitigation");
  sub_100018888(v53, "cellularCoexSummaryPerConn");
  sub_100018888(v54, "cellularCoexTimeSharing");
  sub_100018888(v55, "cellularMsimArbSrDrRetention");
  sub_100018888(v56, "cellularRankIndicatorUsage");
  sub_100018888(v57, "cellularNrCsirsReporting");
  sub_100018888(v58, "cellularScanStatsSummary");
  sub_100018888(v59, "cellularNasNmmRegInfo");
  sub_100018888(v60, "cellularPwsBlockedProceduresStats");
  sub_100018888(v61, "cellularPwsPerformanceStats");
  sub_100018888(v62, "cellularConnReest");
  sub_100018888(v63, "cellularNetworkSliceInfo");
  sub_100018888(v64, "cellularLteNrCapabilityInfo");
  sub_100018888(v65, "cellularNvmUsageStats");
  sub_100018888(v66, "cellularNrSINotBroadcastedFailure");
  sub_100018888(v67, "cellularFeatureConfigPerFeat");
  sub_100018888(v68, "cellularCmeRawData");
  sub_100018888(v69, "cellularFeatureConfigPerConn");
  sub_100018888(v70, "cellularEmergencyLocation");
  sub_100018888(v71, "cellularRfReadbackDeltas");
  sub_100018888(v72, "cellularNrIratCount");
  sub_100018888(v73, "cellularNrRrcConnCount");
  sub_100018888(v74, "cellularLteRrcConnCount");
  sub_100018888(v75, "kCellularRffeScanStats");
  sub_100018888(v76, "cellularLteNrConnectionStats");
  sub_100018888(v77, "cellularBwpSwitchingStats");
  sub_100018888(v78, "cellularBwpInfoStatsPerConn");
  sub_100018888(v79, "cellularSIValidationFailure");
  sub_100018888(v80, "cellularSIAcquisitionFailure");
  sub_100018888(v81, "cellularLteNrTxPowerStats");
  sub_100018888(v82, "cellularPlatformApBbSleepStats");
  sub_100018888(v83, "cellularPowerLogBasebandPowerConsumption");
  sub_100018888(v84, "cellularAcmSleepStats");
  sub_100018888(v85, "cellularReselectionInfo");
  sub_100018888(v86, "cellularMobilityPerfInfo");
  sub_100018888(v87, "cellularTxUsage");
  sub_100018888(v88, "cellularScanStatsSummary");
  sub_100018888(v89, "cellularThermalMitigationPerControlLoop");
  sub_100018888(v90, "cellularPowerLogGPSStates");
  sub_100018888(v91, "cellularPowerLogL1SleepStates");
  sub_100018888(v92, "cellularPowerLogPowerEstimator");
  sub_100018888(v93, "cellularPowerLogProtocolState");
  sub_100018888(v94, "cellularPowerLogAOP_UARTStates");
  sub_100018888(v95, "cellularPowerLogLTE_UL_CAState");
  sub_100018888(v96, "cellularPowerLogLTEActivatedCA_SCCStates");
  sub_100018888(v97, "cellularPowerLogLTEConfiguredCA_SCCStates");
  sub_100018888(&v98, "cellularPowerLogLTERxTxActivityStates");
  sub_100018888(v99, "cellularPowerLogNR_mmWaveUL_CAState");
  sub_100018888(v100, "cellularPowerLogNRmmWaveCA_SCCActivated");
  sub_100018888(v101, "cellularPowerLogNRmmWaveCA_SCCConfigured");
  sub_100018888(v102, "cellularPowerLogNRmmWaveRxTx");
  sub_100018888(v103, "cellularPowerLogNRsub6RxTx");
  sub_100018888(v104, "cellularPowerLogPCIeStates");
  sub_100018888(v105, "cellularPowerLogPLMNSearch");
  sub_100018888(v106, "cellularPowerLogWLAN_UARTStates");
  sub_100018888(v107, "cellularPowerLogCpuPerfLevels");
  sub_100018888(v108, "cellularPowerLogAcmPerfLevels");
  sub_100018888(v109, "cellularPowerLogSocPerfLevels");
  sub_100018888(v110, "cellularPowerLogXOShutdown");
  sub_100018888(v111, "cellularPowerLogLteCaConfigActivateStats");
  sub_100018888(v112, "cellularPowerLogNrCaConfigActivateStats");
  sub_100018888(v113, "cellularPowerLogCpsSleepStates");
  sub_100018888(v114, "cellularPowerLogCdpUSleepStates");
  sub_100018888(v115, "cellularPowerLogCdpDSleepStates");
  sub_100018888(v116, "cellularPowerLogCdpHSleepStates");
  sub_100018888(v117, "cellularPowerLogDcsSleepStates");
  sub_100018888(v118, "cellularPowerLog2g3gSleepStates");
  sub_100018888(v119, "cellularPowerLogL1SSleepStates");
  sub_100018888(v120, "cellularPowerLogL1CSleepStates");
  sub_100018888(v121, "cellularPowerLogBasebandSleepVeto");
  sub_100018888(v122, "cellularPowerLogLteNrRxDiversityHist");
  sub_100018888(v123, "cellularPowerlogRFSSVoltageLevels");
  sub_100018888(v124, "commCenterThumperAccount");
  sub_100018888(v125, "commCenterDataUsageTopConsumingAppsQueriable");
  sub_100018888(v126, "commCenterRemoteCellularPlanProfilesStatus");
  sub_100018888(v127, "commCenterCellularPlanProfileTransferDetails");
  sub_100018888(v128, "commCenterDataUsageSinceLastSampleQueriable");
  sub_100018888(v129, "commCenterTransferPlanListingStatus");
  sub_100018888(v130, "commCenterBundleUpdateCheck");
  sub_100018888(v131, "commCenterBootstrapBundle");
  sub_100018888(v132, "commCenterDefaultBundle");
  sub_100018888(v133, "commCenterOperatorBundle");
  sub_100018888(v134, "commCenterCarrierBundle");
  sub_100016FE4(v3, v19, &v135);
  uint64_t v9 = 116;
  do
  {
    if (SHIBYTE(v19[v9 - 1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19[v9 - 1].__r_.__value_.__l.__data_);
    }
    --v9;
  }
  while (v9 * 24);
  sub_100018888(v19, "cellularLteRrcConnCount");
  sub_100018888(v20, "cellularLteRsrpRsrqSinrHist");
  sub_100018888(v21, "cellularLteTxRxLevelHist");
  sub_100018888(v22, "cellularNrIratCount");
  sub_100018888(v23, "cellularNrRrcConnCount");
  sub_100018888(v24, "cellularNrRsrpRsrqSinrHist");
  sub_100018888(&v25, "cellularNrTxRxLevelHist");
  sub_100018888(&v26, "cellularNrLatencyTrackerHist");
  sub_100018888(v27, "cellularBwEstimate");
  sub_100018888(v28, "cellularLteIratCount");
  sub_100018888(v29, "cellularLtePeakPowerLog");
  sub_100016FE4(v2, v19, &v30);
  uint64_t v10 = 11;
  do
  {
    if (SHIBYTE(v19[v10 - 1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19[v10 - 1].__r_.__value_.__l.__data_);
    }
    --v10;
  }
  while (v10 * 24);
  sub_100018888(v19, "cellularLteRsrpRsrqSinrHist");
  sub_100018888(v20, "cellularLteTxRxLevelHist");
  sub_100018888(v21, "cellularNrRsrpRsrqSinrHist");
  sub_100018888(v22, "cellularNrTxRxLevelHist");
  sub_100018888(v23, "cellularNrLatencyTrackerHist");
  sub_100018888(v24, "cellularBwEstimate");
  sub_100018888(&v25, "cellularLteNrTxPowerStats");
  sub_100016FE4(v4, v19, &v26);
  for (uint64_t i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v25.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v25.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  sub_100018F8C(v19, "kCellularLteRrcMsgSample", "cellularLteOtaMsg");
  sub_100018FE0(v21, "kCellularRffeScanStats", "kCellularRffeScanStats");
  sub_100018EE4(v23, "kCellularPowerLogPowerEstimator", "cellularPowerLogBasebandPowerConsumption");
  sub_100018A9C(v5, v19, &v25);
  for (unint64_t j = 0; j != 0x1FFFFFFFFFFFFFEELL; j -= 6)
  {
    uint64_t v13 = &v19[j / 3];
    if (SHIBYTE(v24[j + 2]) < 0) {
      operator delete(v13[5].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13[4].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13[4].__r_.__value_.__l.__data_);
    }
  }
  sub_100018F38(v19, "kCellularWcdmaRrcStateHist", "cellularWcdmaRrcStateHist");
  sub_100018D94(v21, "kCellularVoiceLastCallEnd", "cellularVoiceLastCallEnd");
  sub_100018E3C(v23, "kCellularRfTunerEvent", "cellularRfTunerEvent");
  sub_100018E3C(&v25, "kCellularRatRetention", "cellularRatRetention");
  sub_100018D94(v27, "kCellularLteTxRxLevelHist", "cellularLteTxRxLevelHist");
  sub_100018E90(v29, "kCellularLteRsrpRsrqSinrHist", "cellularLteRsrpRsrqSinrHist");
  sub_100018A48(v31, "kCellularLteRrcStateHist", "cellularLteRrcStateHist");
  sub_100018A48(v33, "kCellularLteRrcConnCount", "cellularLteRrcConnCount");
  sub_100018DE8(&v35, "kCellularLteRachAttempt", "cellularLteRachAttempt");
  sub_100018A48(v37, "kCellularLteHoToLteCount", "cellularLteHoToLteCount");
  sub_100018DE8(v39, "kCellularCallEndDetails", "cellularCallEndDetails");
  sub_100018A9C(v7, v19, &v41);
  uint64_t v14 = 22;
  do
  {
    int v15 = &v19[v14];
    if (SHIBYTE(v19[v14 - 1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15[-1].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15[-2].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15[-2].__r_.__value_.__l.__data_);
    }
    v14 -= 2;
  }
  while (v14 * 24);
  sub_100018E90(v19, "kCellularLteRsrpRsrqSinrHist", "cellularLteRsrpRsrqSinrHist");
  sub_100018A48(v21, "kCellularLteRrcConnCount", "cellularLteRrcConnCount");
  sub_100018DE8(v23, "kCellularLteRachAttempt", "cellularLteRachAttempt");
  sub_100018D94(&v25, "kCellularLteTxRxLevelHist", "cellularLteTxRxLevelHist");
  sub_100018E3C(v27, "kCellularLteEdrxStats", "cellularLteEdrxStats");
  sub_100019034(v29, "kCellularLteEdrxConfig", "cellularLteEdrxConfig");
  sub_100018A48(v31, "kCellularLteRrcStateHist", "cellularLteRrcStateHist");
  sub_100018A48(v33, "kCellularLtePeakPowerLog", "cellularLtePeakPowerLog");
  sub_100018A9C(v6, v19, &v35);
  uint64_t v16 = 16;
  do
  {
    BOOL v17 = &v19[v16];
    if (SHIBYTE(v19[v16 - 1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17[-1].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17[-2].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17[-2].__r_.__value_.__l.__data_);
    }
    v16 -= 2;
  }
  while (v16 * 24);
  return a1;
}

void sub_10001887C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10001F4A8(a1);
}

void *sub_100018888(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10001F670();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void *sub_10001893C(uint64_t a1, void *a2, const void **a3)
{
  size_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!sub_1000189DC(v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        size_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_1000189DC(v7, v9, a3)) {
        break;
      }
      size_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL sub_1000189DC(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void *sub_100018A48(void *a1, char *a2, char *a3)
{
  size_t v5 = sub_100018888(a1, a2);
  sub_100018888(v5 + 3, a3);
  return a1;
}

void sub_100018A80(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_100018A9C(uint64_t **result, std::string *a2, std::string *a3)
{
  size_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    size_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    int v10 = result;
    uint64_t v11 = v8;
    uint64_t v12 = v8;
    if (v8)
    {
      uint64_t v11 = sub_10001F918((uint64_t)v8);
      while (a2 != a3)
      {
        sub_1000702B0(v5, a2, (uint64_t)v8);
        if (v9)
        {
          uint64_t v8 = v11;
          uint64_t v12 = v11;
          if (!v11)
          {
            a2 += 2;
            break;
          }
          uint64_t v11 = sub_10001F918((uint64_t)v11);
        }
        else
        {
          uint64_t v8 = v12;
        }
        a2 += 2;
        if (!v8) {
          break;
        }
      }
    }
    uint64_t result = (uint64_t **)sub_10007034C((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    uint64_t result = (uint64_t **)sub_100018BA4(v5, (const void **)&a2->__r_.__value_.__l.__data_, (long long *)a2);
    a2 += 2;
  }
  return result;
}

void sub_100018B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10007034C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100018BA4(uint64_t **a1, const void **a2, long long *a3)
{
  size_t v5 = (uint64_t **)sub_10001893C((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    size_t v7 = v5;
    sub_100018C38((uint64_t)a1, a3, (uint64_t)v9);
    sub_10001716C(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    sub_100018D3C((uint64_t)v9, 0);
  }
  return v6;
}

char *sub_100018C38@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_100018CA4(v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100018C8C(_Unwind_Exception *a1)
{
  sub_100018D3C(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_100018CA4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000173FC(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  uint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000173FC(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return __dst;
}

void sub_100018D20(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100018D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100013DE8((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *sub_100018D94(void *a1, char *a2, char *a3)
{
  uint64_t v5 = sub_100018888(a1, a2);
  sub_100018888(v5 + 3, a3);
  return a1;
}

void sub_100018DCC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100018DE8(void *a1, char *a2, char *a3)
{
  uint64_t v5 = sub_100018888(a1, a2);
  sub_100018888(v5 + 3, a3);
  return a1;
}

void sub_100018E20(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100018E3C(void *a1, char *a2, char *a3)
{
  uint64_t v5 = sub_100018888(a1, a2);
  sub_100018888(v5 + 3, a3);
  return a1;
}

void sub_100018E74(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100018E90(void *a1, char *a2, char *a3)
{
  uint64_t v5 = sub_100018888(a1, a2);
  sub_100018888(v5 + 3, a3);
  return a1;
}

void sub_100018EC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100018EE4(void *a1, char *a2, char *a3)
{
  uint64_t v5 = sub_100018888(a1, a2);
  sub_100018888(v5 + 3, a3);
  return a1;
}

void sub_100018F1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100018F38(void *a1, char *a2, char *a3)
{
  uint64_t v5 = sub_100018888(a1, a2);
  sub_100018888(v5 + 3, a3);
  return a1;
}

void sub_100018F70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100018F8C(void *a1, char *a2, char *a3)
{
  uint64_t v5 = sub_100018888(a1, a2);
  sub_100018888(v5 + 3, a3);
  return a1;
}

void sub_100018FC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100018FE0(void *a1, char *a2, char *a3)
{
  uint64_t v5 = sub_100018888(a1, a2);
  sub_100018888(v5 + 3, a3);
  return a1;
}

void sub_100019018(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100019034(void *a1, char *a2, char *a3)
{
  uint64_t v5 = sub_100018888(a1, a2);
  sub_100018888(v5 + 3, a3);
  return a1;
}

void sub_10001906C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000193A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000193F8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    size_t v7 = [v9 objectForKeyedSubscript:kCTCellMonitorCellType];
    unsigned int v8 = +[WISTelephonyUtils isServingCell:v7];

    if (v8)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
      *a4 = 1;
    }
  }
}

void sub_1000194C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001967C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100019A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100019BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100019CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100019E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_100019FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_10001A1E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001A398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10001AF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10001B460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10001BF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,void *a27)
{
  if ((v33 & 1) == 0) {
  _Unwind_Resume(a1);
  }
}

void sub_10001C530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001C770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001CA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_10001D11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, char a13, void *a14, void *a15, void *a16, void *a17, int a18, int a19, void *a20,void *a21,void *a22,void *a23,int a24,int a25,void *a26,void *a27,void *a28,void *a29)
{
  if (a13)
  {
  }
  if (a14) {

  }
  if (a19)
  {
  }
  if (a21) {

  }
  if (a25)
  {
  }
  if (a26) {

  }
  _Unwind_Resume(a1);
}

void sub_10001D708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_10001D91C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10001D92C(uint64_t a1)
{
  v40[0] = @"rat_type";
  uint64_t v2 = (id *)(a1 + 32);
  uint64_t v39 = [*(id *)(a1 + 32) rat];
  v41[0] = v39;
  v40[1] = @"arfcn";
  uint64_t v3 = [*v2 arfcnOrUarfcn];
  uint64_t v38 = (void *)v3;
  if (!v3)
  {
    uint64_t v3 = +[NSNull null];
  }
  char v29 = (void *)v3;
  v41[1] = v3;
  v40[2] = @"previous_dl_bottleneck_score";
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v35 = v4;
  if (!v4)
  {
    uint64_t v4 = +[NSNull null];
  }
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  std::string v28 = (void *)v4;
  v41[2] = v4;
  v41[3] = v5;
  void v40[3] = @"current_dl_bottleneck_score";
  v40[4] = @"is_dl_bottleneck_score_matching";
  uint64_t v7 = v6;
  uint64_t v36 = v6;
  if (!v6)
  {
    uint64_t v7 = +[NSNull null];
  }
  uint64_t v27 = (void *)v7;
  v41[4] = v7;
  v40[5] = @"previous_ul_bottleneck_score";
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = v8;
  if (!v8)
  {
    uint64_t v9 = +[NSNull null];
  }
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  std::string v26 = (void *)v9;
  v41[5] = v9;
  v41[6] = v10;
  v40[6] = @"current_ul_bottleneck_score";
  v40[7] = @"is_ul_bottleneck_score_matching";
  uint64_t v12 = v11;
  uint64_t v30 = v8;
  if (!v11)
  {
    uint64_t v12 = +[NSNull null];
  }
  std::string v25 = (void *)v12;
  v41[7] = v12;
  v40[8] = @"data_stall_indicator_avs_ever";
  uint64_t v37 = v11;
  char v33 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 104)];
  v41[8] = v33;
  v40[9] = @"data_stall_indicator_ul_ever";
  uint64_t v32 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 105)];
  v41[9] = v32;
  v40[10] = @"is_subway_detected_ever";
  uint64_t v31 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 106)];
  v41[10] = v31;
  v40[11] = @"ps_pref";
  uint64_t v34 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 107)];
  v41[11] = v34;
  v40[12] = @"is_overall_score_matching";
  uint64_t v13 = *(void **)(a1 + 88);
  uint64_t v14 = v13;
  if (!v13)
  {
    uint64_t v14 = +[NSNull null];
  }
  v41[12] = v14;
  v40[13] = @"is_db_hit";
  int v15 = +[NSNumber numberWithBool:*(void *)(a1 + 96) != 0];
  v41[13] = v15;
  v40[14] = @"rsrp_ewma";
  uint64_t v16 = [*(id *)(a1 + 32) congestionMetric];
  BOOL v17 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v16 rsrp]);
  v41[14] = v17;
  v40[15] = @"rsrq_ewma";
  id v18 = [*(id *)(a1 + 32) congestionMetric];
  int64_t v19 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v18 rsrq]);
  v41[15] = v19;
  v40[16] = @"sinr_ewma";
  uint64_t v20 = [*(id *)(a1 + 32) congestionMetric];
  __int16 v21 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v20 sinr]);
  v41[16] = v21;
  int v22 = +[NSDictionary dictionaryWithObjects:v41 forKeys:v40 count:17];

  if (!v13) {
  if (!v37)
  }

  if (!v30) {
  if (!v36)
  }

  if (!v35) {
  char v23 = v38;
  }
  if (!v38)
  {

    char v23 = 0;
  }

  return v22;
}

void sub_10001DD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  if (!a22) {
  if (!a15)
  }

  if (!a21) {
  if (!a20)
  }

  if (!a23) {
  _Unwind_Resume(a1);
  }
}

id sub_10001DEC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleCellMonitorUpdate:*(void *)(a1 + 40) info:*(void *)(a1 + 48)];
}

void sub_10001DED0(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  uint64_t v4 = *(unint64_t **)(a1 + 8);
  unint64_t v5 = *v4;
  unint64_t v6 = v4[1] - *v4;
  if ((int)v6 < a2)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
    uint64_t v4 = *(unint64_t **)(a1 + 8);
    unint64_t v5 = *v4;
    unint64_t v6 = v4[1] - *v4;
  }
  unint64_t v7 = v6 - a2;
  if (v6 >= a2)
  {
    if (v6 > v7) {
      v4[1] = v5 + v7;
    }
  }
  else
  {
    sub_10000712C(v4, -(uint64_t)a2);
  }
}

void sub_10001DFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10001DFE0(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
}

xpc_object_t sub_10001E010(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

uint64_t sub_10001E050@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100004AB0(**(void **)(a1 + 40), a2);
}

void sub_10001E060(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    sub_10000B678(v4);
  }
  if (*((void *)&v5 + 1)) {
    sub_10000B678(*((std::__shared_weak_count **)&v5 + 1));
  }
}

id sub_10001E0C8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10001E0D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleIncomingMetric:*(void *)(a1 + 40) withPayload:*(void *)(a1 + 48)];
}

void sub_10001E0E0(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1;
  long long v3 = v1;
  sub_100004214(*v1, (uint64_t)(v1 + 1), v1[3]);
}

void sub_10001E13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *sub_10001E158(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    xpc_object_t result = sub_100044520(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      xpc_object_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10001E1B8(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10001E1D4(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

char *sub_10001E228(char *result, char *a2, char *a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    __n128 result = sub_10001495C(result, __sz);
    uint64_t v7 = (unsigned char *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      char v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_10001E280(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10001E29C(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  long long v5 = (void **)sub_10001E334((uint64_t)a1, &v9, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x40uLL);
    v6[4] = *(void *)a3;
    *((_DWORD *)v6 + 10) = *(_DWORD *)(a3 + 8);
    *((_OWORD *)v6 + 3) = *(_OWORD *)(a3 + 16);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    sub_10001716C(a1, v9, v7, v6);
  }
  return v6;
}

void *sub_10001E334(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  __n128 result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v7 = a3[1];
    unsigned int v6 = a3[2];
    unsigned int v8 = *a3;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (void *)v4;
        unsigned int v10 = *(_DWORD *)(v4 + 40);
        if (v6 >= v10) {
          break;
        }
LABEL_4:
        uint64_t v4 = *v9;
        __n128 result = v9;
        if (!*v9) {
          goto LABEL_13;
        }
      }
      if (v10 >= v6)
      {
        if (__PAIR64__(v7, v8) < v9[4]) {
          goto LABEL_4;
        }
        if (v9[4] >= __PAIR64__(v7, v8)) {
          goto LABEL_13;
        }
      }
      __n128 result = v9 + 1;
      uint64_t v4 = v9[1];
      if (!v4) {
        goto LABEL_13;
      }
    }
  }
  uint64_t v9 = result;
LABEL_13:
  *a2 = v9;
  return result;
}

uint64_t sub_10001E3D0(uint64_t a1, char **a2, char **a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1001B6FF8;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  sub_10001E228((char *)(a1 + 24), v4, v5, v5 - v4);
  return a1;
}

void sub_10001E430(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10001E448(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_10001E460(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_10002A63C();
  }
  return operator new(4 * a2);
}

void *sub_10001E498(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_10002A63C();
  }
  return operator new(16 * a2);
}

uint64_t sub_10001E4D0@<X0>(char **a1@<X1>, char **a2@<X2>, void *a3@<X8>)
{
  unsigned int v6 = (char *)operator new(0x30uLL);
  uint64_t result = sub_10001E3D0((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_10001E520(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_10001E534@<X0>(long long *a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  unsigned int v10 = operator new(0x90uLL);
  v10[1] = 0;
  v10[2] = 0;
  void *v10 = off_1001B8F48;
  long long v11 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v12 = *a2;
  int v13 = *((_DWORD *)a2 + 2);
  int v14 = *a3;
  char v15 = *a4;
  *((unsigned char *)v10 + 25) = 1;
  *(void *)((char *)v10 + 28) = v12;
  *((_DWORD *)v10 + 9) = v13;
  v10[5] = 0;
  *((_DWORD *)v10 + 12) = 0;
  *((_DWORD *)v10 + 13) = v14;
  v10[7] = 0;
  v10[8] = 0;
  v10[9] = 0;
  *((_OWORD *)v10 + 7) = 0u;
  *((_OWORD *)v10 + 8) = 0u;
  *((_OWORD *)v10 + 5) = v11;
  *((_OWORD *)v10 + 6) = 0u;
  a5[1] = v10;
  *((unsigned char *)v10 + 24) = v15;
  uint64_t result = (char *)(v10 + 3);
  *a5 = result;
  return result;
}

uint64_t *sub_10001E5EC(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      sub_10000B678(v2);
    }
    operator delete();
  }
  return result;
}

long long *sub_10001E640(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      unsigned int v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_10001E6AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_10001E6B4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_10001E6C4(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_10001E6CC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_10001E6E0(uint64_t a1)
{
  return a1 + 24;
}

double sub_10001E6E8(uint64_t a1, __n128 *a2)
{
  *(void *)&double result = sub_10001E1D4(a1 + 72, a2).n128_u64[0];
  return result;
}

void sub_10001E6F0(void *a1, int a2)
{
  uint64_t v4 = (uint64_t)(a1 + 14);
  unint64_t v5 = a1[14];
  unsigned int v6 = (char *)a1[13];
  if ((unint64_t)v6 >= v5)
  {
    unsigned int v8 = (char *)a1[12];
    uint64_t v9 = (v6 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_10002B5E0();
    }
    unint64_t v10 = v5 - (void)v8;
    unint64_t v11 = (uint64_t)(v5 - (void)v8) >> 1;
    if (v11 <= v9 + 1) {
      unint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      int v13 = (char *)sub_10001E460(v4, v12);
      unsigned int v8 = (char *)a1[12];
      unsigned int v6 = (char *)a1[13];
    }
    else
    {
      int v13 = 0;
    }
    int v14 = &v13[4 * v9];
    char v15 = &v13[4 * v12];
    *(_DWORD *)int v14 = a2;
    long long v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    a1[12] = v14;
    a1[13] = v7;
    a1[14] = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)unsigned int v6 = a2;
    long long v7 = v6 + 4;
  }
  a1[13] = v7;
}

uint64_t sub_10001E7D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

char *sub_10001E7DC@<X0>(long long *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, char a5@<W5>, void *a6@<X8>)
{
  uint64_t v9 = a2;
  int v10 = a3;
  int v8 = a4;
  char v7 = a5;
  return sub_10001E534(a1, &v9, &v8, &v7, a6);
}

uint64_t sub_10001E824(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 96);
  if (!*(void *)(a1 + 88))
  {
    *(_DWORD *)(a1 + 96) = v1 + 1;
    long long v3 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v1 + 1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "agg:#I Initializing periodic timer to manage outstanding triggers (gen=%u)", buf, 8u);
    }
    sub_10000BA54(buf, (void *)(a1 + 8));
    uint64_t v5 = *(void *)buf;
    uint64_t v4 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
      sub_10000B678(v4);
    }
    pthread_mutex_lock(&stru_1001D6EA0);
    uint64_t v6 = xmmword_1001D6EE0;
    if (!(void)xmmword_1001D6EE0)
    {
      sub_1000EFE14(buf);
      long long v7 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      int v8 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6EE0 + 1);
      xmmword_1001D6EE0 = v7;
      if (v8)
      {
        sub_10000B678(v8);
        if (*(void *)&buf[8]) {
          sub_10000B678(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      uint64_t v6 = xmmword_1001D6EE0;
    }
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6EE0 + 1);
    if (*((void *)&xmmword_1001D6EE0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6EE0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D6EA0);
    sub_100018888(__p, "SubmissionAggregator");
    int v10 = *(NSObject **)(a1 + 24);
    dispatch_object_t object = v10;
    if (v10) {
      dispatch_retain(v10);
    }
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1174405120;
    aBlock[2] = sub_10004FEE0;
    aBlock[3] = &unk_1001B6D88;
    aBlock[4] = a1;
    void aBlock[5] = v5;
    int v16 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v17 = _Block_copy(aBlock);
    sub_10004FDCC(v6, (uint64_t)__p, 0, 5000000, &object, &v17);
    uint64_t v11 = v21;
    uint64_t v21 = 0;
    uint64_t v12 = *(void *)(a1 + 88);
    *(void *)(a1 + 88) = v11;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      uint64_t v13 = v21;
      uint64_t v21 = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
    }
    if (v17) {
      _Block_release(v17);
    }
    if (object) {
      dispatch_release(object);
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v9) {
      sub_10000B678(v9);
    }
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v1;
}

void sub_10001EAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, dispatch_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  pthread_mutex_unlock(&stru_1001D6EA0);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  _Unwind_Resume(a1);
}

void sub_10001EB88(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  int v8 = (uint64_t **)(a1 + 56);
  uint64_t v13 = a2;
  *(_DWORD *)int v14 = a3;
  uint64_t v9 = (std::__shared_weak_count *)a4[1];
  uint64_t v16 = *a4;
  BOOL v17 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10001E29C(v8, (unsigned int *)&v13, (uint64_t)&v13);
  char v11 = v10;
  if (v17) {
    sub_10000B678(v17);
  }
  if (v11)
  {
    sub_100002100(a1, *a4, a2, a3);
  }
  else
  {
    uint64_t v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v13) = 67109632;
      HIDWORD(v13) = a2;
      *(_WORD *)int v14 = 1024;
      *(_DWORD *)&v14[2] = HIDWORD(a2);
      __int16 v15 = 1024;
      LODWORD(v16) = a3;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "agg:Error adding new trigger; already exists! Trigger(cid=0x%x, trid=0x%x, sid=%u)",
        (uint8_t *)&v13,
        0x14u);
    }
  }
}

void sub_10001ECB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t sub_10001ECD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 41);
}

void *sub_10001EE3C(void *a1, void *a2, uint64_t **a3)
{
  *a1 = off_1001B5B38;
  a1[1] = 0;
  uint64_t v5 = (id *)(a1 + 1);
  a1[3] = 0;
  a1[2] = a1 + 3;
  uint64_t v6 = (uint64_t **)(a1 + 2);
  a1[4] = 0;
  id v7 = a2;
  objc_storeWeak(v5, v7);

  if (v6 != a3) {
    sub_10001F718(v6, *a3, a3 + 1);
  }
  return a1;
}

void sub_10001EEDC(_Unwind_Exception *a1)
{
  sub_100013D28(v3, *(char **)(v1 + 24));
  objc_destroyWeak(v2);
  nullsub_15(v1);
  _Unwind_Resume(a1);
}

void *sub_10001EF04(void *a1, void *a2, uint64_t **a3)
{
  objc_initWeak(&location, a2);
  sub_10001EE3C(a1, location, a3);
  objc_destroyWeak(&location);
  return a1;
}

void sub_10001EF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_10001F30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  pthread_mutex_unlock(&stru_1001D66E0);
  objc_destroyWeak(&location);
  sub_100013D28((uint64_t)&a28, a29);

  _Unwind_Resume(a1);
}

void sub_10001F47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)FMBasebandMetricsController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_10001F4A8(void *a1)
{
}

void *sub_10001F4D0(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *double result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10001F508(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    sub_10000B678(v4);
  }
}

uint64_t sub_10001F598(uint64_t a1)
{
  *(void *)a1 = off_1001B5B38;
  sub_100013D28(a1 + 16, *(char **)(a1 + 24));
  objc_destroyWeak((id *)(a1 + 8));

  return nullsub_15(a1);
}

void sub_10001F5F8(uint64_t a1)
{
  *(void *)a1 = off_1001B5B38;
  sub_100013D28(a1 + 16, *(char **)(a1 + 24));
  objc_destroyWeak((id *)(a1 + 8));
  nullsub_15(a1);

  operator delete();
}

void sub_10001F670()
{
}

void sub_10001F688(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10001F6E4(exception, a1);
}

void sub_10001F6D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10001F6E4(std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t **sub_10001F718(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    id v7 = result[1];
    *double result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    __int16 v15 = result;
    uint64_t v16 = v8;
    BOOL v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = sub_10001F918((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          char v10 = (uint64_t **)sub_10001F89C((uint64_t)v5, &v18, v17 + 4);
          sub_10001716C(v5, v18, v10, (uint64_t *)v17);
          BOOL v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = sub_10001F918((uint64_t)v16);
          }
          char v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              char v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          int v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    double result = (uint64_t **)sub_10001F96C((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      double result = (uint64_t **)sub_10001F9C4(v5, (uint64_t)(a2 + 4));
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          int v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          int v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_10001F888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10001F89C(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if (!sub_1000189DC(v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        double result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    double result = v5 + 1;
  }
  else
  {
    double result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void *sub_10001F918(uint64_t a1)
{
  double result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *double result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          double result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          double result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t sub_10001F96C(uint64_t a1)
{
  sub_100013D28(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_100013D28(*(void *)a1, (char *)v2);
  }
  return a1;
}

const void **sub_10001F9C4(uint64_t **a1, uint64_t a2)
{
  sub_10001735C((uint64_t)a1, a2, (uint64_t)&v6);
  uint64_t v3 = (uint64_t **)sub_10001F89C((uint64_t)a1, &v5, v6 + 4);
  sub_10001716C(a1, v5, v3, (uint64_t *)v6);
  return v6;
}

void sub_10001FA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_10001FA40((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10001FA40(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

_OWORD *sub_10001FAA0(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_10001893C((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_10001716C(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_10001FB34@<X0>(id *a1@<X1>, const void ***a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x40uLL);
  double result = sub_10001FB98(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10001FB84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10001FB98(void *a1, id *location, const void ***a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B5BB0;
  sub_10001FCA8((int)&v5, a1 + 3, location, a3);
  return a1;
}

void sub_10001FBF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10001FC0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B5BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10001FC2C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B5BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10001FC80(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10001FCA8(int a1, void *a2, id *location, const void ***a4)
{
  id WeakRetained = objc_loadWeakRetained(location);
  sub_100013A00((uint64_t *)v7, a4);
  sub_10001EF04(a2, WeakRetained, v7);
  sub_100013D28((uint64_t)v7, (char *)v7[1]);
}

void sub_10001FD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_100013D28((uint64_t)&a10, a11);

  _Unwind_Resume(a1);
}

uint64_t sub_10001FD38(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

void sub_10001FD90(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

uint64_t sub_10001FDC4()
{
  if ((byte_1001D6730 & 1) == 0)
  {
    byte_1001D6730 = 1;
    return __cxa_atexit((void (*)(void *))sub_10001F66C, &stru_1001D66E0, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10001FF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020170(_Unwind_Exception *a1)
{
  char v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1000203A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020554(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [v3 curState];
  if (v4)
  {
    if (v4 != 1)
    {
      if (v4 == 3)
      {
        char v5 = (id *)(a1 + 56);
LABEL_8:
        [*v5 addObject:v3];
        goto LABEL_11;
      }
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR)) {
        sub_100140760();
      }
      goto LABEL_11;
    }
  }
  else
  {
    [v3 exitedAt:*(void *)(a1 + 32)];
  }
  [v3 addGoodCell:*(void *)(a1 + 40)];
  uint64_t v6 = [v3 goodCells];
  id v7 = [v6 count];
  int v8 = +[FMConfiguration sharedInstance];
  id v9 = [v8 congestionGoodCellsInDatabase];

  if (v7 >= v9)
  {
    [v3 finalize];
    char v5 = (id *)(a1 + 48);
    goto LABEL_8;
  }
LABEL_11:
}

void sub_100020658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020680(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
    sub_1001407C8();
  }
  if (!*(unsigned char *)(a1 + 48)) {
    [*(id *)(a1 + 32) sendCongestionPredictionEventWithCongestionArea:v3 isDataContext:*(unsigned __int8 *)(a1 + 49)];
  }
  unsigned int v4 = [*(id *)(a1 + 32) fmCoreData];
  char v5 = [*(id *)(a1 + 40) subscriptionID];
  [v4 finalizedCongestionArea:v3 withSubscriptionID:v5];
}

void sub_100020734(_Unwind_Exception *a1)
{
  unsigned int v4 = v2;

  _Unwind_Resume(a1);
}

void sub_100020760(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (![v3 curState])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    [v3 addBadCell:*(void *)(a1 + 32)];
  }
}

void sub_1000207C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100020950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_10002098C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2];
}

id sub_100020A10(uint64_t a1)
{
  v6[0] = @"predictionType";
  v6[1] = @"predictionSource";
  v7[0] = @"congestion";
  v7[1] = @"on-device";
  v6[2] = @"predictionCorrect";
  uint64_t v2 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 36)];
  _DWORD v7[2] = v2;
  v6[3] = @"seenCount";
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  v6[4] = @"predictionSent";
  v7[3] = v3;
  v7[4] = &__kCFBooleanFalse;
  unsigned int v4 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:5];

  return v4;
}

void sub_100020B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  _Unwind_Resume(a1);
}

id sub_100020F38(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [*(id *)(a1 + 32) actualGoodCells];
  id v5 = [v4 containsObject:v3];

  return v5;
}

void sub_100020F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100020FAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [*(id *)(a1 + 32) actualBadCells];
  id v5 = [v4 containsObject:v3];

  return v5;
}

void sub_100021004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100021020(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [*(id *)(a1 + 32) actualBadCells];
  id v5 = [v4 containsObject:v3];

  return v5;
}

void sub_100021078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100021094(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [*(id *)(a1 + 32) actualGoodCells];
  id v5 = [v4 containsObject:v3];

  return v5;
}

void sub_1000210EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100021108(uint64_t a1)
{
  v32[0] = @"numGoodCellsPredicted";
  uint64_t v31 = [*(id *)(a1 + 32) predictedGoodCells];
  char v29 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v31 count]);
  v33[0] = v29;
  v32[1] = @"numBadCellsPredicted";
  uint64_t v30 = [*(id *)(a1 + 32) predictedBadCells];
  uint64_t v27 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v30 count]);
  v33[1] = v27;
  v32[2] = @"numGoodCellsOccurred";
  std::string v28 = [*(id *)(a1 + 32) actualGoodCells];
  int64_t v24 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v28 count]);
  v33[2] = v24;
  void v32[3] = @"numBadCellsOccurred";
  std::string v26 = [*(id *)(a1 + 32) actualBadCells];
  uint64_t v18 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v26 count]);
  void v33[3] = v18;
  v32[4] = @"numPredictedGoodCellsActuallyGood";
  char v20 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 40)];
  v33[4] = v20;
  v32[5] = @"numPredictedBadCellsActuallyBad";
  uint64_t v21 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 48)];
  v33[5] = v21;
  v32[6] = @"numPredictedGoodCellsActuallyBad";
  int v22 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 56)];
  v33[6] = v22;
  v32[7] = @"numPredictedBadCellsActuallyGood";
  std::string v25 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 64)];
  v33[7] = v25;
  v32[8] = @"seenCount";
  char v23 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) seenCount]);
  v33[8] = v23;
  v33[9] = &__kCFBooleanTrue;
  v32[9] = @"insightAvailable";
  v32[10] = @"insightSent";
  v33[10] = &__kCFBooleanFalse;
  v32[11] = @"predictedTimeUntilCongestion";
  int64_t v19 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [*(id *)(a1 + 32) predictedTimeUntilCongestion]);
  v33[11] = v19;
  v32[12] = @"predictedTimeInCongestion";
  BOOL v17 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [*(id *)(a1 + 32) predictedTimeInCongestion]);
  v33[12] = v17;
  v32[13] = @"actualTimeUntilCongestion";
  __int16 v15 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [*(id *)(a1 + 32) actualTimeUntilCongestion]);
  v33[13] = v15;
  v32[14] = @"actualTimeInCongestion";
  uint64_t v16 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [*(id *)(a1 + 32) actualTimeInCongestion]);
  v33[14] = v16;
  v32[15] = @"timeUntilCongestionPredictionError";
  int v14 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", llround((double)((unsigned char *)[*(id *)(a1 + 32) predictedTimeUntilCongestion]- (unsigned char *)objc_msgSend(*(id *)(a1 + 32), "actualTimeUntilCongestion"))));
  v33[15] = v14;
  v32[16] = @"timeUntilCongestionPredictionErrorPercent";
  +[FMUtil getPrediction:errorPercentWithActual:](FMUtil, "getPrediction:errorPercentWithActual:", [*(id *)(a1 + 32) predictedTimeUntilCongestion], objc_msgSend(*(id *)(a1 + 32), "actualTimeUntilCongestion"));
  uint64_t v13 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v33[16] = v13;
  v32[17] = @"timeInCongestionPredictionError";
  uint64_t v2 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", llround((double)((unsigned char *)[*(id *)(a1 + 32) predictedTimeInCongestion]- (unsigned char *)objc_msgSend(*(id *)(a1 + 32), "actualTimeInCongestion"))));
  v33[17] = v2;
  v32[18] = @"timeInCongestionPredictionErrorPercent";
  +[FMUtil getPrediction:errorPercentWithActual:](FMUtil, "getPrediction:errorPercentWithActual:", [*(id *)(a1 + 32) predictedTimeInCongestion], objc_msgSend(*(id *)(a1 + 32), "actualTimeInCongestion"));
  id v3 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v33[18] = v3;
  v32[19] = @"dataContext";
  unsigned int v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 72)];
  v33[19] = v4;
  v33[20] = @"on-device";
  v32[20] = @"learningType";
  v32[21] = @"predictionSuppressionReason";
  v33[21] = &off_1001C3808;
  v32[22] = @"allGoodCellsMatched";
  id v5 = [*(id *)(a1 + 32) predictedGoodCells];
  uint64_t v6 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v5 count] == *(id *)(a1 + 40));
  v33[22] = v6;
  v32[23] = @"anyGoodCellsMatched";
  id v7 = +[NSNumber numberWithBool:*(void *)(a1 + 40) != 0];
  v33[23] = v7;
  v32[24] = @"allBadCellsMatched";
  int v8 = [*(id *)(a1 + 32) predictedBadCells];
  id v9 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v8 count] == *(id *)(a1 + 48));
  v33[24] = v9;
  v32[25] = @"anyBadCellsMatched";
  char v10 = +[NSNumber numberWithBool:*(void *)(a1 + 48) != 0];
  v33[25] = v10;
  char v11 = +[NSDictionary dictionaryWithObjects:v33 forKeys:v32 count:26];

  return v11;
}

void sub_100021760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_1000219E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_100021A04(uint64_t a1)
{
  v19[0] = @"numGoodCellsOccurred";
  uint64_t v18 = [*(id *)(a1 + 32) goodCells];
  uint64_t v16 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v18 count]);
  v20[0] = v16;
  v19[1] = @"numBadCellsOccurred";
  BOOL v17 = [*(id *)(a1 + 32) badCells];
  __int16 v15 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v17 count]);
  v20[1] = v15;
  v20[2] = &off_1001C3808;
  v19[2] = @"seenCount";
  v19[3] = @"insightAvailable";
  void v20[3] = &__kCFBooleanFalse;
  v20[4] = &__kCFBooleanFalse;
  v19[4] = @"insightSent";
  v19[5] = @"actualTimeUntilCongestion";
  uint64_t v2 = [*(id *)(a1 + 32) startTimestamp];
  id v3 = [*(id *)(a1 + 32) prevCells];
  unsigned int v4 = [v3 lastObject];
  id v5 = [v4 timestamp];
  [v2 timeIntervalSinceDate:v5];
  id v7 = +[NSNumber numberWithLongLong:llround(v6)];
  v20[5] = v7;
  std::string v19[6] = @"actualTimeInCongestion";
  int v8 = [*(id *)(a1 + 32) endTimestamp];
  id v9 = [*(id *)(a1 + 32) startTimestamp];
  [v8 timeIntervalSinceDate:v9];
  char v11 = +[NSNumber numberWithLongLong:llround(v10)];
  v20[6] = v11;
  v19[7] = @"dataContext";
  BOOL v12 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  v20[7] = v12;
  uint64_t v13 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:8];

  return v13;
}

void sub_100021C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100021D80(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

void sub_100021DD8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_100021DF4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t sub_100021E10()
{
  if ((byte_1001D6788 & 1) == 0)
  {
    byte_1001D6788 = 1;
    return __cxa_atexit((void (*)(void *))sub_100021D7C, &stru_1001D6738, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10002205C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_100022098(uint64_t a1)
{
  if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
    sub_100140BB0();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained notifyClient];
  }
}

void sub_100022100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000221B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)FMRegulatoryDomainController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100022248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000223F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100022534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100022718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

intptr_t sub_10002272C(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100140C90(v2);
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t sub_100022780(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100140CD4(v2);
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10002291C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100022AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100022C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100022EEC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&stru_1001D67F0);

  _Unwind_Resume(a1);
}

uint64_t sub_100022F58(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_100022FB0(uint64_t a1)
{
  return a1;
}

void sub_100022FDC(uint64_t a1)
{
  operator delete();
}

void *sub_100023028(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  id v3 = *(void **)(a1 + 16);
  *uint64_t v2 = off_1001B5DD0;
  v2[1] = v4;
  v2[2] = objc_retainBlock(v3);
  return v2;
}

id sub_100023080(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  id v3 = *(void **)(a1 + 16);
  *a2 = off_1001B5DD0;
  a2[1] = v4;
  id result = objc_retainBlock(v3);
  a2[2] = result;
  return result;
}

void sub_1000230C8(uint64_t a1)
{
}

void sub_1000230D0(id *a1)
{
  operator delete(a1);
}

void sub_10002310C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  id v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  id v5 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "FederatedMobility[FMGEOServicesHandler]:#I Crowdsourced OOS learnings: Inside getCellularCoverageTileConfiguration", (uint8_t *)v7, 2u);
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  _DWORD v7[2] = sub_100023270;
  v7[3] = &unk_1001B5E48;
  double v6 = *(NSObject **)(a1 + 8);
  id v8 = *(id *)(a1 + 16);
  uint64_t v9 = v4;
  double v10 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_async(v6, v7);
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  if (v10) {
    sub_10000B678(v10);
  }

  if (v3) {
    sub_10000B678(v3);
  }
}

uint64_t sub_100023224(uint64_t a1, uint64_t a2)
{
  if (sub_1000233A4(a2, (uint64_t)&off_1001B5E78)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100023264()
{
  return &off_1001B5E78;
}

void sub_100023270(void *a1)
{
  uint64_t v2 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "FederatedMobility[FMGEOServicesHandler]:#I Crowdsourced OOS learnings: On queue", buf, 2u);
  }
  uint64_t v3 = a1[4];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  uint64_t v6 = a1[5];
  id v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(v3 + 16))(v3, &v6);
  if (v7) {
    sub_10000B678(v7);
  }
  id v5 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "FederatedMobility[FMGEOServicesHandler]:#I Crowdsourced OOS learnings: Block executed", buf, 2u);
  }
}

void sub_100023360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10000B678(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100023378(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100023394(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

BOOL sub_1000233A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *sub_1000233F4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100023478()
{
  if ((byte_1001D6840 & 1) == 0)
  {
    byte_1001D6840 = 1;
    return __cxa_atexit((void (*)(void *))sub_100022F54, &stru_1001D67F0, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100023560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000236B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100023914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100023A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100023D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  if (v15)
  {
  }
  _Unwind_Resume(a1);
}

void sub_100023F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000240EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100024310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000244B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10002455C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100024E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a16) {
  _Block_object_dispose(&a43, 8);
  }
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);

  _Unwind_Resume(a1);
}

void *sub_100025068(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(*(void *)(result[4] + 8) + 24) = a2;
  *(void *)(*(void *)(result[5] + 8) + 24) = a3;
  *(void *)(*(void *)(result[6] + 8) + 24) = a4;
  *(void *)(*(void *)(result[7] + 8) + 24) = a5;
  return result;
}

void *sub_10002509C(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(*(void *)(result[4] + 8) + 24) = a2;
  *(void *)(*(void *)(result[5] + 8) + 24) = a3;
  *(void *)(*(void *)(result[6] + 8) + 24) = a4;
  *(void *)(*(void *)(result[7] + 8) + 24) = a5;
  return result;
}

id sub_1000250D0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100025184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100025574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10002589C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100025AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100025C7C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1001D7C20;
  qword_1001D7C20 = (uint64_t)v1;
}

void sub_100025E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id sub_100025ECC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) networkPathMonitorUpdate:a2];
}

void sub_100025ED8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) ctRelay];
  objc_msgSend(v2, "addTelephonyStateDelegate:withQueue:", *(void *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "queue"));

  [*(id *)(a1 + 32) populateActiveDataContextInfo];
  uint64_t v3 = [*(id *)(a1 + 32) networkPathMonitor];

  nw_path_monitor_start(v3);
}

void sub_100025F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100025FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)WISRatDataUsageMetric;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100026104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000264D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100026880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 96), 8);
  _Unwind_Resume(a1);
}

BOOL sub_1000268CC(uint64_t a1, nw_interface_t interface)
{
  nw_interface_type_t type = nw_interface_get_type(interface);
  if (type == *(_DWORD *)(a1 + 56) || (type & 0xFFFFFFFB) == 0) {
    return 1;
  }
  nw_interface_type_t v6 = type;
  int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  BOOL v8 = type != nw_interface_type_cellular;
  if (type != nw_interface_type_cellular && v7 == 1) {
    return 1;
  }
  uint64_t v9 = 1;
  if (type != nw_interface_type_wired || v7 != 3)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = nw_interface_get_index(interface);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    return v8;
  }
  return v9;
}

void sub_100026A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100026AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100026BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100026D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100026EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100027028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100027188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100027258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10002732C()
{
  return +[WISRatDataUsageMetric getSharedInstance];
}

void sub_100027360(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

uint64_t sub_100027378(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = result;
  return result;
}

void sub_100027384(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_1000273A0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_10002746C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100027578(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10001F4A8(a1);
}

void sub_100027680(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10001F4A8(a1);
}

void sub_1000278CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100027970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_1000279F0(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[4] = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  return a1;
}

void sub_100027A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002A0AC((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100027A48()
{
}

void sub_100027C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  pthread_mutex_unlock(&stru_1001D6968);
  if (a14) {
    sub_10000B678(a14);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    sub_10000B678(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100027CC4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100027CE0(uint64_t a1)
{
  id v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_10000B678(v1);
  }
}

uint64_t sub_100027CF0(uint64_t a1)
{
  uint64_t v2 = sub_100027DFC((void *)a1, "WISGEOServicesHandler", QOS_CLASS_UTILITY, "wis.geo");
  v2[10] = 0;
  v2[9] = v2 + 10;
  v2[11] = 0;
  *(_OWORD *)(v2 + 5) = 0u;
  *(_OWORD *)(v2 + 7) = 0u;
  sub_10002A798(&v8);
  long long v3 = v8;
  long long v8 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v3;
  if (v4)
  {
    sub_10000B678(v4);
    if (*((void *)&v8 + 1)) {
      sub_10000B678(*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  sub_10002A8C0(&v8);
  long long v5 = v8;
  long long v8 = 0uLL;
  nw_interface_type_t v6 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v5;
  if (v6)
  {
    sub_10000B678(v6);
    if (*((void *)&v8 + 1)) {
      sub_10000B678(*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  return a1;
}

void sub_100027DB8(_Unwind_Exception *a1)
{
  sub_10002A738(v2, *(char **)(v1 + 80));
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    sub_10000B678(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    sub_10000B678(v5);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(v1 + 32));
  sub_100029804((void *)v1);
  _Unwind_Resume(a1);
}

void *sub_100027DFC(void *a1, const char *a2, dispatch_qos_class_t a3, const char *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.wis.wirelessinsightsd", a4);
  return a1;
}

void sub_100027E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

void *sub_100027E84(uint64_t a1)
{
  sub_10002A738(a1 + 72, *(char **)(a1 + 80));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_10000B678(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    sub_10000B678(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 32));

  return sub_100029804((void *)a1);
}

void sub_100027EE4(uint64_t a1)
{
  dispatch_time_t v2 = dispatch_time(0, 60000000000);
  long long v3 = *(NSObject **)(a1 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100027F74;
  block[3] = &unk_1001B5ED8;
  void block[4] = a1;
  dispatch_after(v2, v3, block);
}

void sub_100027F74(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 32);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    LOWORD(v5) = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "#I WISGEOServicesHandler start location updates", (uint8_t *)&v5, 2u);
  }
  pthread_mutex_lock(&stru_1001D6738);
  dispatch_time_t v2 = (void *)xmmword_1001D6778;
  if (!(void)xmmword_1001D6778)
  {
    sub_10006C024(&v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6778 + 1);
    xmmword_1001D6778 = v3;
    if (v4)
    {
      sub_10000B678(v4);
      if (*((void *)&v5 + 1)) {
        sub_10000B678(*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    dispatch_time_t v2 = (void *)xmmword_1001D6778;
  }
  if (*((void *)&xmmword_1001D6778 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6778 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6738);
  sub_10006C9C8(v2);
}

void sub_100028064(_Unwind_Exception *a1)
{
}

void sub_100028098(void *a1, unsigned char *a2, uint64_t a3)
{
  if (*a2 == 2)
  {
    sub_10000BA54(&v7, a1);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000282D4;
    v6[3] = &unk_1001B5FC0;
    v6[4] = a1;
    sub_1000281DC(a3, &v7, v6);
    long long v5 = v8;
    if (!v8) {
      return;
    }
    goto LABEL_4;
  }
  if (!*a2)
  {
    sub_10000BA54(&v10, a1);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = nullsub_12;
    v9[3] = &unk_1001B5FC0;
    v9[4] = a1;
    sub_1000281DC(a3, &v10, v9);
    long long v5 = v11;
    if (v11) {
LABEL_4:
    }
      sub_10000B678(v5);
  }
}

void sub_1000281B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_10000B678(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000281CC()
{
  if (!*(void *)(v0 - 24)) {
    JUMPOUT(0x1000281C4);
  }
  JUMPOUT(0x1000281C0);
}

void sub_1000281DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *a2;
  uint64_t v7 = (NSObject **)(*a2 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_10002AA74;
  v10[3] = &unk_1001B6228;
  long long v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = v6;
  uint64_t v13 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v9 = v5;
  id v11 = v9;
  sub_100123EA0(a1, v7, (uint64_t)v10);

  if (v13) {
    sub_10000B678(v13);
  }
}

void sub_1000282AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10000B678(a16);
  }

  _Unwind_Resume(a1);
}

void sub_1000282D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10000BA54(&v9, (void *)v1);
  uint64_t v3 = v9;
  dispatch_time_t v2 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10000B678(v2);
    uint64_t v4 = (void ***)(v1 + 56);
    id v5 = **(void ***)(v1 + 56);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v4 = (void ***)(v1 + 56);
    id v5 = **(void ***)(v1 + 56);
  }
  uint64_t v14 = 0;
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = off_1001B6268;
  v6[1] = v1;
  v6[2] = v3;
  v6[3] = v2;
  uint64_t v14 = v6;
  [v5 onReceivedResultsCallback:v13];
  sub_1000298CC(v13);
  uint64_t v7 = **v4;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = 0;
  long long v8 = operator new(0x20uLL);
  void *v8 = off_1001B6320;
  v8[1] = v1;
  v8[2] = v3;
  uint64_t v8[3] = v2;
  uint64_t v12 = v8;
  [v7 onFailedWithErrorCallback:v11];
  sub_100029B70(v11);
  sub_100027EE4(v1);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_10002843C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100029B70(va);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void sub_10002848C(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1[4];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#I Shutting down WISGEOServicesHandler", buf, 2u);
  }
  sub_10000BA54(&v6, a1);
  sub_100028540(a3, &v6, &stru_1001B6000);
  if (v7) {
    sub_10000B678(v7);
  }
}

void sub_100028528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10000B678(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100028540(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *a2;
  uint64_t v7 = (NSObject **)(*a2 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_10002B268;
  v10[3] = &unk_1001B63A8;
  long long v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = v6;
  uint64_t v13 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v9 = v5;
  id v11 = v9;
  sub_100123D98(a1, v7, (uint64_t)v10);

  if (v13) {
    sub_10000B678(v13);
  }
}

void sub_100028610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10000B678(a16);
  }

  _Unwind_Resume(a1);
}

int32x2_t *sub_100028638(uint64_t a1, int32x2_t **a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *a2;
  *a2 = 0;
  id v5 = v3;
  sub_10009D4EC(v2, &v5);
  uint64_t result = v5;
  id v5 = 0;
  if (result) {
    return (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1000286A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100141628(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000286C0(void *a1, double a2, double a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100028730;
  v3[3] = &unk_1001B6020;
  v3[4] = a1;
  *(double *)&v3[5] = a2;
  *(double *)&v3[6] = a3;
  sub_10002A348(a1, v3);
}

void sub_100028730(double *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  uint64_t v3 = *(NSObject **)(v2 + 32);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *((void *)a1 + 5);
    uint64_t v5 = *((void *)a1 + 6);
    *(_DWORD *)long long buf = 134283777;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&buf[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#I Handling update location - latitude:%{private}lf, longitude: %{private}lf", buf, 0x16u);
  }
  double v6 = a1[5];
  double v7 = a1[6];
  void v11[3] = 0;
  sub_1000288E8(v2, 2, (uint64_t)v11, v6, v7);
  sub_1000233F4(v11);
  pthread_mutex_lock(&stru_1001D6738);
  long long v8 = (void *)xmmword_1001D6778;
  if (!(void)xmmword_1001D6778)
  {
    sub_10006C024(buf);
    long long v9 = *(_OWORD *)buf;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6778 + 1);
    xmmword_1001D6778 = v9;
    if (v10)
    {
      sub_10000B678(v10);
      if (*(void *)&buf[8]) {
        sub_10000B678(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    long long v8 = (void *)xmmword_1001D6778;
  }
  if (*((void *)&xmmword_1001D6778 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6778 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6738);
  sub_10006CAA0(v8);
}

void sub_100028890(_Unwind_Exception *a1)
{
}

void sub_1000288E8(uint64_t a1, char a2, uint64_t a3, double a4, double a5)
{
  *(double *)&long long v17 = a4;
  *((double *)&v17 + 1) = a5;
  uint64_t v10 = (uint64_t **)(a1 + 72);
  id v11 = sub_10002B67C(a1 + 72, (double *)&v17);
  if ((double *)(a1 + 80) == v11)
  {
    sub_1000279F0(v15);
    sub_1000296E8(v15, a3);
    char v16 = a2;
    sub_10002B7E0(v10, (double *)&v17, &v17, (uint64_t)v15);
    id v14 = [objc_alloc((Class)GEOLocation) initWithLatitude:a4 longitude:a5];
    [v14 setHorizontalAccuracy:0.0];
    [**(id **)(a1 + 56) updateLocation:v14];

    uint64_t v18 = (void **)v15;
    sub_10002A0AC(&v18);
  }
  else
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      LOWORD(v15[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#I Detected a outstanding fetch request for the given location", (uint8_t *)v15, 2u);
    }
    sub_1000296E8((uint64_t *)v12 + 6, a3);
  }
}

void sub_100028A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a9;
  sub_10002A0AC(&a16);
  _Unwind_Resume(a1);
}

void sub_100028A48(void *a1, char a2, uint64_t a3, double a4, double a5)
{
  uint64_t v10 = a1[4];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134283777;
    *(double *)((char *)buf + 4) = a4;
    WORD2(buf[1]) = 2049;
    *(double *)((char *)&buf[1] + 6) = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#I Request to get cellular tile config for latitude:%{private}lf, longitude: %{private}lf", (uint8_t *)buf, 0x16u);
  }
  buf[0] = a1;
  *(double *)&buf[1] = a4;
  *(double *)&buf[2] = a5;
  char v13 = a2;
  sub_10002B278((uint64_t)&v14, a3);
  sub_10000BA54(&v11, a1);
  operator new();
}

void sub_100028BF8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10001F4A8(a1);
}

void ***sub_100028C10(uint64_t a1, double a2, double a3)
{
  double v6 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_100141764(v6, a2, a3);
  }
  v9[0] = a2;
  v9[1] = a3;
  sub_1000291C0(a1, v9, &v8);
  if (v8)
  {
    clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
    operator new();
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 32), OS_LOG_TYPE_ERROR)) {
    sub_100141660();
  }
  return sub_10002B4B4(&v8, 0);
}

void sub_100029084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,void *__p,std::__shared_weak_count *a26,int a27,__int16 a28,char a29,char a30)
{
  if (a26) {
    sub_10000B678(a26);
  }
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }

  sub_10002B508(&a21, 0);
  sub_10002B4B4(&a22, 0);
  _Unwind_Resume(a1);
}

double *sub_1000291C0@<X0>(uint64_t a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_10002B67C(a1 + 72, a2);
  if ((double *)(a1 + 80) != result) {
    operator new();
  }
  *a3 = 0;
  return result;
}

void sub_10002925C(_Unwind_Exception *a1)
{
  sub_10002B4B4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100029294(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      uint64_t v6 = *(void *)(v3 + 24);
      if (v6)
      {
        double v7 = (std::__shared_weak_count *)a3[1];
        uint64_t v8 = *a3;
        long long v9 = v7;
        if (v7)
        {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v6 = *(void *)(v3 + 24);
          if (!v6) {
            sub_100029F0C();
          }
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v8);
        if (v9) {
          sub_10000B678(v9);
        }
      }
      v3 += 32;
    }
    while (v3 != v4);
  }
}

void sub_100029340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10000B678(a10);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_10002935C(uint64_t a1, double a2, double a3)
{
  v6[0] = a2;
  v6[1] = a3;
  sub_1000291C0(a1, v6, &v5);
  if (v5)
  {
    clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
    operator new();
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 32), OS_LOG_TYPE_ERROR)) {
    sub_100141660();
  }
  return sub_10002B4B4(&v5, 0);
}

void sub_10002963C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_10002B508(&a12, 0);
  sub_10002B4B4(&a13, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1000296E8(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59) {
      sub_10002B5E0();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      char v13 = (char *)sub_1000122B8(v4, v12);
    }
    else {
      char v13 = 0;
    }
    char v15 = v13;
    char v16 = &v13[32 * v9];
    uint64_t v18 = &v13[32 * v12];
    sub_10002B278((uint64_t)v16, a2);
    long long v17 = v16 + 32;
    sub_10002B708(a1, &v15);
    uint64_t v8 = a1[1];
    sub_10002B790((uint64_t)&v15);
  }
  else
  {
    sub_10002B278(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v8;
  return v8 - 32;
}

void sub_1000297E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *sub_100029804(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t sub_10002984C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_1000298CC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_100029950(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_1000298CC((void *)(v1 + 8));

    operator delete();
  }
  return result;
}

uint64_t *sub_1000299A8(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_1000299E4((void *)(*(void *)a1 + 24), a1 + 8);
  return sub_100029950(&v2);
}

void *sub_1000299E4(void *a1, uint64_t a2)
{
  sub_100029A68(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_100029A68(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100029AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_100029B70(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_100029BF4(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_100029B70((void *)(v1 + 8));

    operator delete();
  }
  return result;
}

uint64_t *sub_100029C4C(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_100029C88((void *)(*(void *)a1 + 56), a1 + 8);
  return sub_100029BF4(&v2);
}

void *sub_100029C88(void *a1, uint64_t a2)
{
  sub_100029D0C(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_100029D0C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

id **sub_100029D94(id **result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {

    operator delete();
  }
  return result;
}

id **sub_100029DF4(uint64_t a1)
{
  uint64_t v2 = (id *)a1;
  if (*(void *)(*(void *)a1 + 48)) {
    sub_100029E58(*(void *)a1 + 24, *(void **)(a1 + 8), *(void *)(a1 + 16), *(void **)(a1 + 24));
  }
  return sub_100029D94(&v2);
}

void sub_100029E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100029D94((id **)va);
  _Unwind_Resume(a1);
}

void sub_100029E58(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = a3;
  id v9 = a2;
  id v7 = a4;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    sub_100029F0C();
  }
  (*(void (**)(uint64_t, id *, uint64_t *, id *))(*(void *)v6 + 48))(v6, &v9, &v8, &v7);
}

void sub_100029EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100029F0C()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_1001B6068;
}

void sub_100029F5C(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

id **sub_100029F94(uint64_t a1)
{
  uint64_t v2 = (id *)a1;
  if (*(void *)(*(void *)a1 + 80)) {
    sub_100029FF8(*(void *)a1 + 56, *(void **)(a1 + 8), *(void *)(a1 + 16), *(void **)(a1 + 24));
  }
  return sub_100029D94(&v2);
}

void sub_100029FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100029D94((id **)va);
  _Unwind_Resume(a1);
}

void sub_100029FF8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = a3;
  id v9 = a2;
  id v7 = a4;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    sub_100029F0C();
  }
  (*(void (**)(uint64_t, id *, uint64_t *, id *))(*(void *)v6 + 48))(v6, &v9, &v8, &v7);
}

void sub_10002A090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10002A0AC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_1000233F4(v4 - 4);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10002A130(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10002A1A8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_10002A308);
  __cxa_rethrow();
}

void sub_10002A1D0(_Unwind_Exception *a1)
{
}

void sub_10002A1E4(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      unint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        sub_10000B678(v5);
      }
    }
  }
}

void sub_10002A270(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10002A2A8(uint64_t a1)
{
}

uint64_t sub_10002A2C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10002A308(uint64_t result)
{
  if (result)
  {
    sub_100027E84(result);
    operator delete();
  }
  return result;
}

void sub_10002A348(void *a1, void *a2)
{
  id v3 = a2;
  sub_10000BA54(&v10, a1);
  uint64_t v4 = a1[2];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10002A424;
  block[3] = &unk_1001B60E8;
  uint64_t v8 = v10;
  id v9 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v5 = v3;
  id v7 = v5;
  dispatch_async(v4, block);

  if (v9) {
    sub_10000B678(v9);
  }
  if (v11) {
    sub_10000B678(v11);
  }
}

uint64_t sub_10002A424(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002A434(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10002A450(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void sub_10002A460()
{
  exception = __cxa_allocate_exception(8uLL);
}

uint64_t sub_10002A4AC(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

void *sub_10002A504(void *a1)
{
  *a1 = off_1001B6128;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_10002A550(void *a1)
{
  *a1 = off_1001B6128;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10000B678(v1);
  }

  operator delete();
}

void *sub_10002A5BC@<X0>(void *a1@<X8>)
{
  return sub_100018888(a1, "WISGEOServicesHandler");
}

unsigned char *sub_10002A5CC@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 0;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_10002A608(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10002A610(uint64_t a1, char a2, uint64_t a3)
{
  char v3 = a2;
  sub_100028098(*(void **)(a1 + 8), &v3, a3);
}

void sub_10002A63C()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *sub_10002A670(void *a1, const char *a2, dispatch_qos_class_t qos_class, NSObject **a4)
{
  id v7 = dispatch_queue_attr_make_with_qos_class(0, qos_class, 0);
  uint64_t v8 = *a4;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_retain(v8);
    id v9 = dispatch_queue_create_with_target_V2(a2, v7, v8);
  }
  else
  {
    id v9 = dispatch_queue_create(a2, v7);
  }
  uint64_t v10 = v9;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  a1[3] = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  if (v10) {
    dispatch_release(v10);
  }
  if (v8)
  {
    dispatch_release(v8);
    dispatch_release(v8);
  }
  return a1;
}

void sub_10002A738(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10002A738(a1, *(void *)a2);
    sub_10002A738(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 48);
    sub_10002A0AC(&v4);
    operator delete(a2);
  }
}

void *sub_10002A798@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x50uLL);
  uint64_t result = sub_10002A7E4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10002A7D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10002A7E4(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B6190;
  sub_10009D4CC((uint64_t)(a1 + 3));
  return a1;
}

void sub_10002A82C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10002A840(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002A860(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6190;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10002A8B4(uint64_t a1)
{
  return sub_10009D6F8(a1 + 24);
}

uint64_t sub_10002A8C0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  uint64_t result = sub_10002A90C((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_10002A8F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002A90C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1001B61E0;
  sub_10002AA20((WISGeoMetadataRequesterDelegateImpl **)(a1 + 24));
  return a1;
}

void sub_10002A954(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10002A968(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B61E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002A988(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B61E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10002A9DC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;

  char v3 = *(void **)(a1 + 24);
}

WISGeoMetadataRequesterDelegateImpl **sub_10002AA20(WISGeoMetadataRequesterDelegateImpl **a1)
{
  *a1 = 0;
  uint64_t v2 = objc_alloc_init(WISGeoMetadataRequesterDelegateImpl);
  char v3 = *a1;
  *a1 = v2;

  return a1;
}

void sub_10002AA60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002AA74(uint64_t a1, NSObject **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  group = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
}

void sub_10002AAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002AAF4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10002AB10(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_10002AB20(void *a1)
{
  *a1 = off_1001B6268;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10002AB6C(void *a1)
{
  *a1 = off_1001B6268;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_10002ABD8(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = off_1001B6268;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10002AC3C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1001B6268;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10002AC7C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10002AC8C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_10002ACCC(void *a1, id *a2, uint64_t a3, void **a4)
{
  id v5 = *a4;
  id v6 = *a2;
  id v7 = v5;
  uint64_t v8 = (std::__shared_weak_count *)a1[3];
  if (v8)
  {
    id v9 = (void *)a1[1];
    uint64_t v10 = std::__shared_weak_count::lock(v8);
    if (v10)
    {
      uint64_t v11 = v10;
      if (a1[2])
      {
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_10002AE0C;
        void v12[3] = &unk_1001B62E0;
        char v15 = v9;
        id v13 = v6;
        id v14 = v7;
        sub_10002A348(v9, v12);
      }
      sub_10000B678(v11);
    }
  }
}

uint64_t sub_10002ADC0(uint64_t a1, uint64_t a2)
{
  if (sub_1000233A4(a2, (uint64_t)&off_1001B6300)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10002AE00()
{
  return &off_1001B6300;
}

void sub_10002AE0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v7 = [*(id *)(a1 + 40) latLng];
  [v7 lat];
  double v4 = v3;
  id v5 = [*(id *)(a1 + 40) latLng];
  [v5 lng];
  sub_100028C10(v2, v4, v6);
}

void sub_10002AEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_10002AEC4(void *a1)
{
  *a1 = off_1001B6320;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10002AF10(void *a1)
{
  *a1 = off_1001B6320;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_10002AF7C(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = off_1001B6320;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10002AFE0(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1001B6320;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10002B020(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10002B030(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_10002B070(void *a1, id *a2, uint64_t a3, void **a4)
{
  id v5 = *a4;
  id v6 = *a2;
  id v7 = v5;
  uint64_t v8 = (std::__shared_weak_count *)a1[3];
  if (v8)
  {
    id v9 = (void *)a1[1];
    uint64_t v10 = std::__shared_weak_count::lock(v8);
    if (v10)
    {
      uint64_t v11 = v10;
      if (a1[2])
      {
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_10002B1B0;
        void v12[3] = &unk_1001B62E0;
        char v15 = v9;
        id v13 = v6;
        id v14 = v7;
        sub_10002A348(v9, v12);
      }
      sub_10000B678(v11);
    }
  }
}

uint64_t sub_10002B164(uint64_t a1, uint64_t a2)
{
  if (sub_1000233A4(a2, (uint64_t)&off_1001B6390)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10002B1A4()
{
  return &off_1001B6390;
}

void sub_10002B1B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v7 = [*(id *)(a1 + 40) latLng];
  [v7 lat];
  double v4 = v3;
  id v5 = [*(id *)(a1 + 40) latLng];
  [v5 lng];
  sub_10002935C(v2, v4, v6);
}

void sub_10002B248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10002B268(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002B278(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10002B310(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t *sub_10002B390(uint64_t *a1)
{
  uint64_t v1 = *a1;
  id v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(void *)v1;
  double v3 = *(double *)(v1 + 8);
  double v4 = *(double *)(v1 + 16);
  char v5 = *(unsigned char *)(v1 + 24);
  sub_10002B278((uint64_t)v9, v1 + 32);
  sub_1000288E8(v2, v5, (uint64_t)v9, v3, v4);
  sub_1000233F4(v9);
  sub_10002B464(&v8);
  return sub_10000BA00((uint64_t *)&v7);
}

void sub_10002B438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  sub_1000233F4((uint64_t *)va2);
  sub_10002B464((uint64_t *)va1);
  sub_10000BA00((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002B464(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_1000233F4((void *)(v1 + 32));
    operator delete();
  }
  return result;
}

void ***sub_10002B4B4(void ***result, void **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    sub_10002A0AC(&v3);
    operator delete();
  }
  return result;
}

uint64_t sub_10002B508(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10008ACD0();
    operator delete();
  }
  return result;
}

void *sub_10002B558(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    sub_100013738(result, a4);
    uint64_t result = (void *)sub_10002B5F8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10002B5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10002A0AC(&a9);
  _Unwind_Resume(a1);
}

void sub_10002B5E0()
{
}

uint64_t sub_10002B5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_10002B278(a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_10002B658(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      sub_1000233F4((void *)(v4 + v2));
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

double *sub_10002B67C(uint64_t a1, double *a2)
{
  uint64_t v4 = *(double **)(a1 + 8);
  uint64_t v2 = (double *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  double v6 = *a2;
  double v5 = a2[1];
  uint64_t v7 = v2;
  do
  {
    double v8 = v3[4];
    if (v8 >= v6)
    {
      if (v6 >= v8)
      {
        if (v3[5] < v5) {
          ++v3;
        }
        else {
          uint64_t v7 = v3;
        }
      }
      else
      {
        uint64_t v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    uint64_t v3 = *(double **)v3;
  }
  while (v3);
  if (v7 == v2) {
    return v2;
  }
  double v9 = v7[4];
  if (v6 < v9 || v9 >= v6 && v5 < v7[5]) {
    return v2;
  }
  return v7;
}

uint64_t sub_10002B708(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    uint64_t result = sub_10002B310(result - 32, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10002B790(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    sub_1000233F4((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_10002B7E0(uint64_t **a1, double *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t **)sub_10002B868((uint64_t)a1, &v10, a2);
  uint64_t result = *v7;
  if (!*v7)
  {
    sub_10002B8CC((uint64_t)a1, a3, a4, (uint64_t)&v9);
    sub_10001716C(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

void *sub_10002B868(uint64_t a1, void *a2, double *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    double v6 = *a3;
    double v7 = a3[1];
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v4;
        double v9 = *((double *)v4 + 4);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        double v10 = *((double *)v4 + 5);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      uint64_t result = v4 + 1;
      uint64_t v4 = (uint64_t *)v4[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

__n128 sub_10002B8CC@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (char *)operator new(0x58uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *((_OWORD *)v8 + 2) = *a2;
  *((void *)v8 + 7) = 0;
  *((void *)v8 + 8) = 0;
  *((void *)v8 + 6) = 0;
  sub_10002B558((void *)v8 + 6, *(void *)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 72) = result;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_10002B954(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10002B970(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10002B970(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 6;
    sub_10002A0AC(&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t *sub_10002B9BC(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_10002BA08(a1, (uint64_t *)a2);
  uint64_t v5 = (void **)(a2 + 48);
  sub_10002A0AC(&v5);
  operator delete((void *)a2);
  return v3;
}

uint64_t *sub_10002BA08(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  double v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_10002BA7C(v6, a2);
  return v3;
}

uint64_t *sub_10002BA7C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  double v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *double v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      __n128 result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      __n128 result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      id v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        __n128 result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    char v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      char v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        void v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        _DWORD v7[2] = (uint64_t)v15;
        char v16 = v7;
      }
      else
      {
        char v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      int64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *int64_t v24 = v23;
      goto LABEL_72;
    }
    char v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      long long v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    _DWORD v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      __n128 result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  uint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  char v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    char v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    _DWORD v7[2] = (uint64_t)v20;
    uint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  int64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_10002BE00()
{
  if ((byte_1001D69B8 & 1) == 0)
  {
    byte_1001D69B8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100029800, &stru_1001D6968, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10002BE3C()
{
  if ((byte_1001D6788 & 1) == 0)
  {
    byte_1001D6788 = 1;
    return __cxa_atexit((void (*)(void *))sub_100021D7C, &stru_1001D6738, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10002BE78()
{
}

void sub_10002BEE8()
{
}

void sub_10002BF0C(void *a1)
{
  sub_10000BA54(&v1, a1);
  operator new();
}

void *sub_10002BFE4(void *a1, void *a2)
{
  uint64_t result = sub_10002C054(a1, "FileSystemManager", QOS_CLASS_DEFAULT, (const ctu::OsLogLogger *)(qword_1001D8080 + 16));
  result[5] = -1;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_DWORD *)result + 20) = 1065353216;
  uint64_t v4 = a2[1];
  result[11] = *a2;
  result[12] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_10002C054(void *a1, const char *a2, dispatch_qos_class_t a3, const ctu::OsLogLogger *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), a4);
  return a1;
}

void sub_10002C0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

void sub_10002C0D0(uint64_t a1)
{
  uint64_t v3 = a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10002D0B8;
  block[3] = &unk_1001B6460;
  void block[4] = a1;
  void block[5] = &v3;
  uint64_t v2 = a1 + 16;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (*(void *)(v2 + 8)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void sub_10002C150(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10002D154;
  block[3] = &unk_1001B6480;
  void block[4] = a1;
  void block[5] = &v3;
  uint64_t v2 = a1 + 16;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (*(void *)(v2 + 8)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void sub_10002C1D0(void *a1)
{
  sub_10000BA54(&v1, a1);
  operator new();
}

uint64_t sub_10002C2A8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result == -1)
  {
    *(void *)(a1 + 40) = 0;
    sub_100086618(0, __p);
    *(void *)(a1 + 40) += sub_1000307A8((const char *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    sub_100086618(1, __p);
    uint64_t result = *(void *)(a1 + 40) + sub_1000307A8((const char *)__p);
    *(void *)(a1 + 40) = result;
    if (v4 < 0)
    {
      operator delete(__p[0]);
      return *(void *)(a1 + 40);
    }
  }
  return result;
}

char *sub_10002C348(uint64_t a1, unsigned int a2)
{
  if (a2 > 1) {
    return 0;
  }
  uint64_t v3 = sub_10002C2A8(a1);
  char v4 = (void *)(a1 + 48);
  unsigned __int8 v10 = 0;
  int v5 = sub_10002CCB4(v4, &v10);
  if (v5) {
    double v6 = v5[3];
  }
  else {
    double v6 = 0;
  }
  unsigned __int8 v11 = 1;
  int v8 = sub_10002CCB4(v4, &v11);
  if (v8) {
    uint64_t v9 = v8[3];
  }
  else {
    uint64_t v9 = 0;
  }
  return (char *)v9 + (void)v6 + v3;
}

BOOL sub_10002C3EC(uint64_t a1, char a2, uint64_t a3)
{
  char v8 = a2;
  v6[0] = a1;
  v6[1] = &v8;
  double v6[2] = &v7;
  uint64_t v7 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  double v9[2] = sub_10002D200;
  v9[3] = &unk_1001B64A0;
  void v9[4] = a1;
  void v9[5] = v6;
  unsigned __int8 v10 = v9;
  uint64_t v4 = a1 + 16;
  uint64_t v3 = *(NSObject **)(a1 + 16);
  if (*(void *)(v4 + 8))
  {
    char v17 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v12 = 0x40000000;
    id v13 = sub_10002D73C;
    uint64_t v14 = &unk_1001B64E0;
    char v15 = &v17;
    char v16 = &v10;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    char v17 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v12 = 0x40000000;
    id v13 = sub_10002D700;
    uint64_t v14 = &unk_1001B64C0;
    char v15 = &v17;
    char v16 = &v10;
    dispatch_sync(v3, &block);
  }
  return v17 != 0;
}

void sub_10002C52C(void *a1, unsigned int a2)
{
  if (a2 < 2)
  {
    sub_10000BA54(&v2, a1);
    operator new();
  }
  if (a2 != 2) {
    operator new();
  }
  operator new();
}

void sub_10002C678()
{
}

void sub_10002C6BC(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_100086618(a2, __p);
  sub_100030A8C((uint64_t)__p, a3);
  if (SHIBYTE(v40) < 0) {
    operator delete(*(void **)__p);
  }
  if (sub_10009E904(a2))
  {
    double v6 = (void *)a3[1];
    unint64_t v7 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - *a3) >> 3));
    if (v6 == (void *)*a3) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v7;
    }
    sub_10002DB88(*a3, v6, v8, 1);
    unint64_t v9 = 0;
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
    if (a2 <= 3) {
      unint64_t v9 = qword_1001747D8[(char)a2];
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - *a3) >> 3);
    if (v10 == v11) {
      goto LABEL_20;
    }
    unint64_t v13 = 0;
    uint64_t v14 = *a3;
    do
    {
      v13 += *(void *)(v14 + 24);
      v14 += 40;
    }
    while (v14 != v11);
    if (v13 <= v9)
    {
LABEL_20:
      unint64_t v15 = 0;
    }
    else
    {
      unint64_t v15 = 0;
      char v16 = (uint64_t *)(v10 + 24);
      do
      {
        uint64_t v17 = *v16;
        v16 += 5;
        v13 -= v17;
        ++v15;
      }
      while (v13 > v9 && v15 < v12);
    }
    v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v20 = -1209600000000;
    if (a2 != 2) {
      uint64_t v20 = 0;
    }
    if (a2 == 3) {
      uint64_t v20 = -172800000000;
    }
    uint64_t v22 = *a3;
    BOOL v21 = (long long *)a3[1];
    if (v21 == (long long *)*a3)
    {
      uint64_t v25 = a3[1];
      if (v15) {
        goto LABEL_38;
      }
    }
    else
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v23 = v19.__d_.__rep_ + v20;
      unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v21 - *a3) >> 3);
      uint64_t v25 = *a3;
      do
      {
        unint64_t v26 = v24 >> 1;
        unint64_t v27 = v25 + 40 * (v24 >> 1);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v28 = *(void *)(v27 + 32);
        uint64_t v29 = v27 + 40;
        v24 += ~(v24 >> 1);
        if (v28 < v23) {
          uint64_t v25 = v29;
        }
        else {
          unint64_t v24 = v26;
        }
      }
      while (v24);
      if (v15) {
        goto LABEL_38;
      }
    }
    if (v25 == v22)
    {
      uint64_t v30 = *(NSObject **)(a1 + 32);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        uint64_t v31 = sub_1000AA324(a2);
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = v31;
        __int16 v38 = 2048;
        unint64_t v39 = v12;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "file:#I Submission directory for %s has %zd files; none to trim",
          __p,
          0x16u);
      }
      sub_10002DB38(a3);
      return;
    }
LABEL_38:
    uint64_t v32 = (v25 - v22) >> 3;
    unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * v32;
    if (0xCCCCCCCCCCCCCCCDLL * v32 <= v15) {
      unint64_t v34 = v15;
    }
    else {
      unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * v32;
    }
    uint64_t v35 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      uint64_t v36 = sub_1000AA324(a2);
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = v36;
      __int16 v38 = 2048;
      unint64_t v39 = v12 - v34;
      __int16 v40 = 2048;
      unint64_t v41 = v15;
      __int16 v42 = 2048;
      unint64_t v43 = v33;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "file:#I Submission directory for %s has %zd files after trimming (%zd due to size, %zd due to time)", __p, 0x2Au);
      uint64_t v22 = *a3;
      BOOL v21 = (long long *)a3[1];
    }
    sub_10002C9D0((uint64_t)a3, v22 + 40 * v34, v21);
  }
}

void sub_10002C9C4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10001F4A8(a1);
}

uint64_t sub_10002C9D0(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    sub_10002F170(a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 17) < 0) {
          operator delete(*(void **)(v7 - 40));
        }
        v7 -= 40;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void sub_10002CA4C(uint64_t a1, unsigned int a2)
{
  sub_10002C6BC(a1, a2, v4);
  uint64_t v2 = (uint64_t *)v4[0];
  uint64_t v3 = v4[1];
  while (v2 != (uint64_t *)v3)
  {
    sub_1000304B8(v2);
    v2 += 5;
  }
  uint64_t v5 = (void **)v4;
  sub_10002DAE4(&v5);
}

void sub_10002CAB0(void *a1)
{
  sub_10000BA54(&v1, a1);
  operator new();
}

void sub_10002CB88(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  char v6 = a2;
  v5[0] = &v6;
  v5[1] = a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_10002F238;
  v7[3] = &unk_1001B6608;
  void v7[4] = a1;
  void v7[5] = v5;
  uint64_t v8 = v7;
  uint64_t v4 = a1 + 16;
  uint64_t v3 = *(NSObject **)(a1 + 16);
  if (*(void *)(v4 + 8))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    uint64_t v11 = sub_10002F9B8;
    unint64_t v12 = &unk_1001B6648;
    unint64_t v13 = a3;
    uint64_t v14 = &v8;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    uint64_t v11 = sub_10002F90C;
    unint64_t v12 = &unk_1001B6628;
    unint64_t v13 = a3;
    uint64_t v14 = &v8;
    dispatch_sync(v3, &block);
  }
}

uint64_t **sub_10002CCB4(void *a1, unsigned __int8 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  char v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void sub_10002CD68(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10002CDE0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_10002CEB8);
  __cxa_rethrow();
}

void sub_10002CE08(_Unwind_Exception *a1)
{
}

void sub_10002CE20(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10002CE58(uint64_t a1)
{
}

uint64_t sub_10002CE74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10002CEB8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    int8x8_t v2 = *(std::__shared_weak_count **)(result + 96);
    if (v2) {
      sub_10000B678(v2);
    }
    sub_10002CF24((uint64_t)(v1 + 6));
    ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(v1 + 4));
    sub_100029804(v1);
    operator delete();
  }
  return result;
}

uint64_t sub_10002CF24(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
  uint8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_10002CF70(void *a1)
{
  unint64_t v3 = a1;
  uint64_t v1 = *a1;
  sub_100086714(&__p);
  sub_10002FA28(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_10002D048(0);
  sub_10002D048(1u);
  sub_10002D048(2u);
  sub_10002D048(3u);
  if (v1) {
    operator delete();
  }
  return sub_10000BA00((uint64_t *)&v3);
}

void sub_10002D000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    operator delete();
  }
  sub_10000BA00(&a9);
  _Unwind_Resume(a1);
}

void sub_10002D048(unsigned int a1)
{
  if (sub_10009E904(a1))
  {
    sub_100086618(a1, &__p);
    sub_10002FA28(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_10002D09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002D0B8(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  sub_100086618(0, __p);
  sub_1000305C4((const char *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  sub_100086618(1, __p);
  sub_1000305C4((const char *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(v1 + 40) = -1;
}

void sub_10002D134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002D154()
{
  sub_100086714(__p);
  sub_1000305C4((const char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10002D198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002D1B4(uint64_t a1)
{
  uint64_t v1 = a1;
  *(void *)(**(void **)a1 + 40) = -1;
  operator delete();
}

BOOL sub_10002D200(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  char v3 = sub_10002C348(*(void *)v1, **(unsigned __int8 **)(v1 + 8));
  unint64_t v5 = v4;
  uint64_t v6 = **(void **)(v1 + 16);
  uint64_t v7 = &v3[v6];
  if ((unint64_t)&v3[v6] < v4)
  {
    unint64_t v9 = *(unsigned __int8 **)(v1 + 8);
    sub_10002D28C(v2 + 48, v9, (uint64_t)&unk_1001793E0, &v9)[3] = v6;
  }
  return (unint64_t)v7 < v5;
}

void *sub_10002D28C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  void v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_10002D4B4(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_10002D4A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10002D4B4(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_10002D5A4(a1, prime);
    }
  }
}

void sub_10002D5A4(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_10002A63C();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *uint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t sub_10002D700(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t sub_10002D73C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

void *sub_10002D778(void *a1)
{
  *a1 = off_1001B6510;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10000B678(v2);
  }

  return sub_1000493B4(a1);
}

void sub_10002D7D4(void *a1)
{
  sub_10002D778(a1);

  operator delete();
}

uint64_t sub_10002D80C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(char *)(a1 + 24);
  if (v3 > 3 || qword_1001747F8[v3] <= a3) {
    return 1;
  }
  unint64_t v5 = a3 + a2;
  if (!sub_10002C3EC(*(void *)(a1 + 32), v3, a3 + a2)) {
    return 3;
  }
  unint64_t v6 = *(char *)(a1 + 24);
  if (v6 > 3) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = qword_1001747F8[v6];
  }
  return 2 * (v5 >= v7);
}

void sub_10002D8A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    LOBYTE(v5) = 0;
    do
    {
      sub_100049418(a1, v2, *(unsigned __int8 *)(a1 + 25), *(unsigned char *)(a1 + 26));
      if ((_BYTE)v5) {
        int v5 = 1;
      }
      else {
        int v5 = sub_100049424(a1, v2);
      }
      v2 += 24;
    }
    while (v2 != v3);
    if (v5)
    {
      sub_100049430();
    }
  }
}

void sub_10002D944(void *a1)
{
  sub_1000493B4(a1);

  operator delete();
}

uint64_t sub_10002D97C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(char *)(a1 + 24);
  if (v3 > 3 || qword_1001747F8[v3] <= a3) {
    return 1;
  }
  else {
    return 2 * (a3 + a2 >= qword_1001747F8[v3]);
  }
}

void sub_10002D9CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = a1;
    LOBYTE(a1) = 0;
    do
    {
      if ((_BYTE)a1) {
        LODWORD(a1) = 1;
      }
      else {
        LODWORD(a1) = sub_100049424(v4, v2);
      }
      v2 += 24;
    }
    while (v2 != v3);
    if (a1)
    {
      sub_100049430();
    }
  }
}

void sub_10002DA58(void *a1)
{
  sub_1000493B4(a1);

  operator delete();
}

void sub_10002DA90(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      sub_100049418(a1, v2, 0, *(unsigned char *)(a1 + 26));
      v2 += 24;
    }
    while (v2 != v3);
  }
}

void sub_10002DAE4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10002DB38((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10002DB38(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

void sub_10002DB88(unint64_t a1, void *a2, uint64_t a3, char a4)
{
LABEL_1:
  uint64_t v110 = (uint64_t)(a2 - 5);
  unint64_t v112 = (unint64_t)a2;
  v104 = (long long *)(a2 - 15);
  v105 = (long long *)(a2 - 10);
  v106 = a2 - 2;
  unint64_t i = a1;
  while (1)
  {
    a1 = i;
    uint64_t v10 = (uint64_t)a2 - i;
    uint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - i) >> 3);
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          if (*((_OWORD *)a2 - 1) < *(_OWORD *)(a1 + 24))
          {
            uint64_t v129 = *(void *)(a1 + 16);
            long long v121 = *(_OWORD *)a1;
            long long v48 = *(_OWORD *)v110;
            *(void *)(a1 + 16) = *(void *)(v110 + 16);
            *(_OWORD *)a1 = v48;
            *(void *)(v110 + 16) = v129;
            *(_OWORD *)uint64_t v110 = v121;
            long long v49 = *(_OWORD *)(a1 + 24);
            *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 - 1);
            *((_OWORD *)a2 - 1) = v49;
          }
          break;
        case 3:
          sub_10002EB1C((long long *)a1, (long long *)(a1 + 40), (long long *)v110);
          break;
        case 4:
          sub_10002EFCC(a1, a1 + 40, a1 + 80, v110);
          break;
        case 5:
          sub_10002E960(a1, a1 + 40, a1 + 80, a1 + 120, v110);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 959)
    {
      long long v50 = (void *)(a1 + 40);
      BOOL v52 = (void *)a1 == a2 || v50 == a2;
      if (a4)
      {
        if (!v52)
        {
          uint64_t v53 = 0;
          v54 = (void *)a1;
          do
          {
            os_log_type_t v55 = v54;
            v54 = v50;
            uint64_t v56 = v55[9];
            if (*((_OWORD *)v55 + 4) < *(_OWORD *)(v55 + 3))
            {
              uint64_t v57 = v55[5];
              *(void *)v122 = v55[6];
              *(void *)&v122[7] = *(void *)((char *)v55 + 55);
              char v58 = *((unsigned char *)v55 + 63);
              v50[1] = 0;
              v50[2] = 0;
              void *v50 = 0;
              unint64_t v59 = v55[8];
              sub_10002F11C((uint64_t)v50, (long long *)v55);
              unint64_t v60 = a1;
              if (v55 != (void *)a1)
              {
                uint64_t v61 = v53;
                while (1)
                {
                  uint64_t v62 = a1 + v61;
                  uint64_t v63 = *(void *)(a1 + v61 - 8);
                  if (v56 >= v63)
                  {
                    if (v63 < v56)
                    {
                      unint64_t v60 = a1 + v61;
                      goto LABEL_121;
                    }
                    if (v59 >= *(void *)(v62 - 16)) {
                      break;
                    }
                  }
                  v55 -= 5;
                  sub_10002F11C(v62, (long long *)(v62 - 40));
                  v61 -= 40;
                  if (!v61)
                  {
                    unint64_t v60 = a1;
                    goto LABEL_121;
                  }
                }
                unint64_t v60 = (unint64_t)v55;
              }
LABEL_121:
              if (*(char *)(v60 + 23) < 0) {
                operator delete(*(void **)v60);
              }
              *(void *)unint64_t v60 = v57;
              *(void *)(v60 + 8) = *(void *)v122;
              *(void *)(v60 + 15) = *(void *)&v122[7];
              *(unsigned char *)(v60 + 23) = v58;
              *(void *)(v60 + 24) = v59;
              *(void *)(v60 + 32) = v56;
              a2 = (void *)v112;
            }
            long long v50 = v54 + 5;
            v53 += 40;
          }
          while (v54 + 5 != a2);
        }
      }
      else if (!v52)
      {
        do
        {
          unint64_t v98 = a1;
          a1 = (unint64_t)v50;
          unint64_t v99 = *(void *)(v98 + 72);
          if (*(_OWORD *)(v98 + 64) < *(_OWORD *)(v98 + 24))
          {
            uint64_t v100 = *v50;
            *(void *)uint64_t v125 = *(void *)(v98 + 48);
            *(void *)&v125[7] = *(void *)(v98 + 55);
            char v101 = *(unsigned char *)(v98 + 63);
            v50[1] = 0;
            v50[2] = 0;
            void *v50 = 0;
            unint64_t v102 = *(void *)(v98 + 64);
            do
            {
              unint64_t v103 = v98;
              sub_10002F11C(v98 + 40, (long long *)v98);
              unint64_t v98 = v103 - 40;
            }
            while ((signed __int128)__PAIR128__(v99, v102) < *(_OWORD *)(v103 - 16));
            if (*(char *)(v103 + 23) < 0) {
              operator delete(*(void **)v103);
            }
            *(void *)unint64_t v103 = v100;
            *(void *)(v103 + 8) = *(void *)v125;
            *(void *)(v103 + 15) = *(void *)&v125[7];
            *(unsigned char *)(v103 + 23) = v101;
            *(void *)(v103 + 24) = v102;
            *(void *)(v103 + 32) = v99;
          }
          long long v50 = (void *)(a1 + 40);
        }
        while ((void *)(a1 + 40) != a2);
      }
      return;
    }
    if (!a3) {
      break;
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    unint64_t v13 = a1 + 40 * ((unint64_t)v11 >> 1);
    if ((unint64_t)v10 < 0x1401)
    {
      sub_10002EB1C((long long *)v13, (long long *)a1, (long long *)v110);
    }
    else
    {
      sub_10002EB1C((long long *)a1, (long long *)v13, (long long *)v110);
      uint64_t v14 = 5 * v12;
      sub_10002EB1C((long long *)(a1 + 40), (long long *)(a1 + 8 * v14 - 40), v105);
      sub_10002EB1C((long long *)(a1 + 80), (long long *)(a1 + 40 + 8 * v14), v104);
      sub_10002EB1C((long long *)(a1 + 8 * v14 - 40), (long long *)v13, (long long *)(a1 + 40 + 8 * v14));
      uint64_t v126 = *(void *)(a1 + 16);
      long long v118 = *(_OWORD *)a1;
      uint64_t v15 = *(void *)(v13 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v13;
      *(void *)(a1 + 16) = v15;
      *(void *)(v13 + 16) = v126;
      *(_OWORD *)unint64_t v13 = v118;
      long long v16 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v13 + 24);
      *(_OWORD *)(v13 + 24) = v16;
    }
    --a3;
    if (a4)
    {
      int64_t v17 = *(void *)(a1 + 32);
      goto LABEL_14;
    }
    uint64_t v18 = *(void *)(a1 - 8);
    int64_t v17 = *(void *)(a1 + 32);
    if (v18 >= v17 && ((unint64_t v19 = *(void *)(a1 + 24), v17 < v18) || *(void *)(a1 - 16) >= v19))
    {
      uint64_t v37 = *(void *)a1;
      *(void *)v116 = *(void *)(a1 + 8);
      *(void *)&v116[7] = *(void *)(a1 + 15);
      char v38 = *(unsigned char *)(a1 + 23);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      uint64_t v39 = *(void *)(v112 - 8);
      if ((signed __int128)__PAIR128__(v17, v19) < *(_OWORD *)(v112 - 16))
      {
        uint64_t v40 = *(void *)(a1 + 72);
        if (v17 >= v40)
        {
          unint64_t v41 = (unint64_t *)(a1 + 64);
          do
          {
            if (v40 >= v17 && v19 < *v41) {
              break;
            }
            uint64_t v40 = v41[6];
            v41 += 5;
          }
          while (v17 >= v40);
          unint64_t i = (unint64_t)(v41 - 3);
        }
        else
        {
          unint64_t i = a1 + 40;
        }
      }
      else
      {
        for (unint64_t i = a1 + 40; i < v112 && (signed __int128)__PAIR128__(v17, v19) >= *(_OWORD *)(i + 24); i += 40)
          ;
      }
      __int16 v42 = (unint64_t *)v112;
      if (i < v112)
      {
        for (unint64_t j = v106; v17 < v39 || v39 >= v17 && v19 < *j; j -= 5)
          uint64_t v39 = *(j - 4);
        __int16 v42 = j - 3;
      }
      while (i < (unint64_t)v42)
      {
        unint64_t v128 = *(void *)(i + 16);
        long long v120 = *(_OWORD *)i;
        long long v44 = *(_OWORD *)v42;
        *(void *)(i + 16) = v42[2];
        *(_OWORD *)unint64_t i = v44;
        v42[2] = v128;
        *(_OWORD *)__int16 v42 = v120;
        long long v45 = *(_OWORD *)(i + 24);
        *(_OWORD *)(i + 24) = *(_OWORD *)(v42 + 3);
        *(_OWORD *)(v42 + 3) = v45;
        uint64_t v46 = *(void *)(i + 72);
        if (v17 >= v46)
        {
          v47 = (unint64_t *)(i + 64);
          do
          {
            if (v46 >= v17 && v19 < *v47) {
              break;
            }
            uint64_t v46 = v47[6];
            v47 += 5;
          }
          while (v17 >= v46);
          unint64_t i = (unint64_t)(v47 - 3);
        }
        else
        {
          i += 40;
        }
        do
          v42 -= 5;
        while ((signed __int128)__PAIR128__(v17, v19) < *(_OWORD *)(v42 + 3));
      }
      BOOL v4 = i - 40 >= a1;
      BOOL v5 = i - 40 == a1;
      if (i - 40 != a1) {
        sub_10002F11C(a1, (long long *)(i - 40));
      }
      if (*(char *)(i - 17) < 0) {
        operator delete(*(void **)(i - 40));
      }
      a4 = 0;
      *(void *)(i - 40) = v37;
      a2 = (void *)v112;
      *(void *)(i - 25) = *(void *)&v116[7];
      *(void *)(i - 32) = *(void *)v116;
      *(unsigned char *)(i - 17) = v38;
      *(void *)(i - 16) = v19;
      *(void *)(i - 8) = v17;
    }
    else
    {
LABEL_14:
      uint64_t v20 = 0;
      uint64_t v21 = *(void *)a1;
      *(void *)v115 = *(void *)(a1 + 8);
      *(void *)&v115[7] = *(void *)(a1 + 15);
      char v22 = *(unsigned char *)(a1 + 23);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      unint64_t v23 = *(void *)(a1 + 24);
      while (*(_OWORD *)(a1 + v20 + 64) < (signed __int128)__PAIR128__(v17, v23))
        v20 += 40;
      unint64_t v24 = a1 + v20 + 40;
      if (v20)
      {
        uint64_t v25 = (unint64_t *)v110;
        uint64_t v26 = *(void *)(v112 - 8);
        unint64_t v27 = v106;
        if (v26 >= v17)
        {
          do
          {
            if (v17 >= v26 && *v27 < v23) {
              break;
            }
            uint64_t v26 = *(v27 - 4);
            v27 -= 5;
          }
          while (v26 >= v17);
LABEL_22:
          uint64_t v25 = v27 - 3;
        }
      }
      else
      {
        uint64_t v25 = (unint64_t *)v112;
        if (v24 < v112)
        {
          uint64_t v25 = (unint64_t *)v110;
          uint64_t v28 = *(void *)(v112 - 8);
          if (v28 >= v17)
          {
            unint64_t v27 = v106;
            uint64_t v25 = (unint64_t *)v110;
            while (1)
            {
              uint64_t v29 = v27 - 3;
              if (v17 >= v28)
              {
                if (*v27 < v23 || v24 >= (unint64_t)v29) {
                  break;
                }
              }
              else if (v24 >= (unint64_t)v29)
              {
                uint64_t v25 = v27 - 3;
                break;
              }
              v25 -= 5;
              uint64_t v28 = *(v27 - 4);
              v27 -= 5;
              if (v28 < v17) {
                goto LABEL_22;
              }
            }
          }
        }
      }
      unint64_t i = v24;
      if (v24 < (unint64_t)v25)
      {
        uint64_t v31 = v25;
        do
        {
          unint64_t v127 = *(void *)(i + 16);
          long long v119 = *(_OWORD *)i;
          long long v32 = *(_OWORD *)v31;
          *(void *)(i + 16) = v31[2];
          *(_OWORD *)unint64_t i = v32;
          v31[2] = v127;
          *(_OWORD *)uint64_t v31 = v119;
          long long v33 = *(_OWORD *)(i + 24);
          *(_OWORD *)(i + 24) = *(_OWORD *)(v31 + 3);
          *(_OWORD *)(v31 + 3) = v33;
          do
            i += 40;
          while (*(_OWORD *)(i + 24) < (signed __int128)__PAIR128__(v17, v23));
          uint64_t v34 = *(v31 - 1);
          if (v34 >= v17)
          {
            uint64_t v35 = v31 - 2;
            do
            {
              if (v17 >= v34 && *v35 < v23) {
                break;
              }
              uint64_t v34 = *(v35 - 4);
              v35 -= 5;
            }
            while (v34 >= v17);
            uint64_t v31 = v35 - 3;
          }
          else
          {
            v31 -= 5;
          }
        }
        while (i < (unint64_t)v31);
      }
      if (i - 40 != a1) {
        sub_10002F11C(a1, (long long *)(i - 40));
      }
      if (*(char *)(i - 17) < 0) {
        operator delete(*(void **)(i - 40));
      }
      *(void *)(i - 40) = v21;
      *(void *)(i - 25) = *(void *)&v115[7];
      *(void *)(i - 32) = *(void *)v115;
      *(unsigned char *)(i - 17) = v22;
      *(void *)(i - 16) = v23;
      *(void *)(i - 8) = v17;
      a2 = (void *)v112;
      if (v24 < (unint64_t)v25) {
        goto LABEL_54;
      }
      BOOL v36 = sub_10002ECF8(a1, i - 40);
      if (sub_10002ECF8(i, v112))
      {
        a2 = (void *)(i - 40);
        if (v36) {
          return;
        }
        goto LABEL_1;
      }
      if (!v36)
      {
LABEL_54:
        sub_10002DB88(a1, i - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  if ((void *)a1 != a2)
  {
    int64_t v64 = (unint64_t)(v11 - 2) >> 1;
    int64_t v65 = v64;
    do
    {
      int64_t v66 = v65;
      if (v64 >= v65)
      {
        uint64_t v67 = (2 * v65) | 1;
        uint64_t v68 = a1 + 40 * v67;
        if (2 * v65 + 2 < v11 && *(_OWORD *)(v68 + 24) < *(_OWORD *)(v68 + 64))
        {
          v68 += 40;
          uint64_t v67 = 2 * v65 + 2;
        }
        uint64_t v69 = a1 + 40 * v65;
        uint64_t v70 = *(void *)(v68 + 32);
        int64_t v71 = *(void *)(v69 + 32);
        if (v70 >= v71)
        {
          unint64_t v72 = *(void *)(v69 + 24);
          if (v71 < v70 || *(void *)(v68 + 24) >= v72)
          {
            uint64_t v111 = *(void *)v69;
            *(void *)&v123[7] = *(void *)(v69 + 15);
            *(void *)v123 = *(void *)(v69 + 8);
            char v108 = *(unsigned char *)(v69 + 23);
            *(void *)uint64_t v69 = 0;
            *(void *)(v69 + 8) = 0;
            *(void *)(v69 + 16) = 0;
            sub_10002F11C(v69, (long long *)v68);
            if (v64 >= v67)
            {
              while (1)
              {
                uint64_t v74 = 2 * v67;
                uint64_t v67 = (2 * v67) | 1;
                unint64_t v73 = a1 + 40 * v67;
                uint64_t v75 = v74 + 2;
                if (v75 < v11 && *(_OWORD *)(v73 + 24) < *(_OWORD *)(v73 + 64))
                {
                  v73 += 40;
                  uint64_t v67 = v75;
                }
                if (*(_OWORD *)(v73 + 24) < (signed __int128)__PAIR128__(v71, v72)) {
                  break;
                }
                sub_10002F11C(v68, (long long *)v73);
                uint64_t v68 = v73;
                if (v64 < v67) {
                  goto LABEL_137;
                }
              }
            }
            unint64_t v73 = v68;
LABEL_137:
            if (*(char *)(v73 + 23) < 0) {
              operator delete(*(void **)v73);
            }
            *(void *)unint64_t v73 = v111;
            *(void *)(v73 + 8) = *(void *)v123;
            *(void *)(v73 + 15) = *(void *)&v123[7];
            *(unsigned char *)(v73 + 23) = v108;
            *(void *)(v73 + 24) = v72;
            *(void *)(v73 + 32) = v71;
          }
        }
      }
      int64_t v65 = v66 - 1;
    }
    while (v66);
    int64_t v76 = v10 / 0x28uLL;
    uint64_t v77 = (void **)v112;
    while (2)
    {
      uint64_t v78 = v77;
      uint64_t v79 = 0;
      v80 = *(void **)a1;
      *(void *)v117 = *(void *)(a1 + 8);
      *(void *)&v117[7] = *(void *)(a1 + 15);
      char v113 = *(unsigned char *)(a1 + 23);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      uint64_t v81 = a1;
      uint64_t v82 = *(void **)(a1 + 24);
      uint64_t v83 = *(void **)(a1 + 32);
      do
      {
        uint64_t v84 = v81;
        v81 += 40 * v79 + 40;
        uint64_t v85 = 2 * v79;
        uint64_t v79 = (2 * v79) | 1;
        int64_t v86 = v85 + 2;
        if (v86 < v76 && *(_OWORD *)(v81 + 24) < *(_OWORD *)(v81 + 64))
        {
          v81 += 40;
          uint64_t v79 = v86;
        }
        sub_10002F11C(v84, (long long *)v81);
      }
      while (v79 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
      uint64_t v77 = v78 - 5;
      if ((void **)v81 == v78 - 5)
      {
        if (*(char *)(v81 + 23) < 0) {
          operator delete(*(void **)v81);
        }
        *(void *)uint64_t v81 = v80;
        *(void *)(v81 + 8) = *(void *)v117;
        *(void *)(v81 + 15) = *(void *)&v117[7];
        *(unsigned char *)(v81 + 23) = v113;
        *(void *)(v81 + 24) = v82;
        *(void *)(v81 + 32) = v83;
      }
      else
      {
        sub_10002F11C(v81, (long long *)(v78 - 5));
        if (*((char *)v78 - 17) < 0) {
          operator delete(*v77);
        }
        *(v78 - 5) = v80;
        *(void **)((char *)v78 - 25) = *(void **)&v117[7];
        *(v78 - 4) = *(void **)v117;
        *((unsigned char *)v78 - 17) = v113;
        *(v78 - 2) = v82;
        *(v78 - 1) = v83;
        uint64_t v87 = v81 + 40 - a1;
        if (v87 >= 41)
        {
          unint64_t v88 = v87 / 0x28uLL - 2;
          unint64_t v89 = v88 >> 1;
          uint64_t v90 = a1 + 40 * (v88 >> 1);
          uint64_t v91 = *(void *)(v90 + 32);
          int64_t v92 = *(void *)(v81 + 32);
          if (v91 < v92)
          {
            unint64_t v93 = *(void *)(v81 + 24);
            goto LABEL_164;
          }
          if (v92 >= v91)
          {
            unint64_t v93 = *(void *)(v81 + 24);
            if (*(void *)(v90 + 24) < v93)
            {
LABEL_164:
              xpc_object_t v114 = v77;
              int v94 = *(void **)v81;
              *(void *)int v124 = *(void *)(v81 + 8);
              *(void *)&v124[7] = *(void *)(v81 + 15);
              char v109 = *(unsigned char *)(v81 + 23);
              *(void *)(v81 + 8) = 0;
              *(void *)(v81 + 16) = 0;
              *(void *)uint64_t v81 = 0;
              sub_10002F11C(v81, (long long *)(a1 + 40 * (v88 >> 1)));
              if (v88 >= 2)
              {
                while (1)
                {
                  unint64_t v96 = v89 - 1;
                  unint64_t v89 = (v89 - 1) >> 1;
                  uint64_t v95 = a1 + 40 * v89;
                  if (*(_OWORD *)(v95 + 24) >= (signed __int128)__PAIR128__(v92, v93)) {
                    break;
                  }
                  sub_10002F11C(v90, (long long *)(a1 + 40 * v89));
                  uint64_t v90 = a1 + 40 * v89;
                  if (v96 <= 1) {
                    goto LABEL_168;
                  }
                }
              }
              uint64_t v95 = v90;
LABEL_168:
              if (*(char *)(v95 + 23) < 0) {
                operator delete(*(void **)v95);
              }
              *(void *)uint64_t v95 = v94;
              *(void *)(v95 + 8) = *(void *)v124;
              *(void *)(v95 + 15) = *(void *)&v124[7];
              *(unsigned char *)(v95 + 23) = v109;
              *(void *)(v95 + 24) = v93;
              *(void *)(v95 + 32) = v92;
              uint64_t v77 = v114;
            }
          }
        }
      }
      if (v76-- <= 2) {
        return;
      }
      continue;
    }
  }
}

  uint64_t v11 = (long long *)((char *)a2 - 24);
  unint64_t v12 = (const void **)a1;
LABEL_2:
  unint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    long long v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (sub_1000189DC(a3, (const void **)a2 - 3, v12))
          {
            uint64_t v31 = v12[2];
            uint64_t v29 = *(_OWORD *)v12;
            unint64_t v27 = *v11;
            v12[2] = (const void *)*((void *)a2 - 1);
            *(_OWORD *)unint64_t v12 = v27;
            *uint64_t v11 = v29;
            *((void *)a2 - 1) = v31;
          }
          break;
        case 3uLL:
          sub_10007D134(v12, v12 + 3, (const void **)a2 - 3, a3);
          break;
        case 4uLL:
          sub_10007D7F8((uint64_t)v12, v12 + 3, v12 + 6, (long long *)((char *)a2 - 24), a3);
          break;
        case 5uLL:
          sub_10007D8E4((uint64_t)v12, v12 + 3, v12 + 6, (long long *)(v12 + 9), (long long *)((char *)a2 - 24), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (const void **)a2)
      {
        sub_10007DA08((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    int64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0xC01)
    {
      sub_10007D134(v12, &v12[3 * (v16 >> 1)], (const void **)a2 - 3, a3);
      unint64_t v19 = 3 * v17;
      uint64_t v20 = &v12[3 * v17 - 3];
      sub_10007D134(v12 + 3, v20, (const void **)a2 - 6, a3);
      uint64_t v21 = v12 + 6;
      char v22 = &v12[v19 + 3];
      sub_10007D134(v21, v22, (const void **)a2 - 9, a3);
      sub_10007D134(v20, v18, v22, a3);
      uint64_t v30 = *(const void **)(a1 + 16);
      uint64_t v28 = *(_OWORD *)a1;
      unint64_t v23 = *(_OWORD *)v18;
      *(void *)(a1 + 16) = v18[2];
      *(_OWORD *)a1 = v23;
      v18[2] = v30;
      *(_OWORD *)uint64_t v18 = v28;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_10007D134(&v12[3 * (v16 >> 1)], v12, (const void **)a2 - 3, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (!sub_1000189DC(a3, (const void **)(a1 - 24), (const void **)a1))
    {
      unint64_t v12 = sub_10007D280((const void **)a1, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v24 = sub_10007D414((long long *)a1, (const void **)a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v26 = sub_10007D5A4(a1, v24, a3);
    unint64_t v12 = (const void **)(v24 + 24);
    if (sub_10007D5A4(v24 + 24, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    unint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_16:
      sub_10007CAD8(a1, v24, a3, -v14, a5 & 1);
      unint64_t v12 = (const void **)(v24 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_10007CF00((uint64_t)v12, (const void **)a2, a3);
  }
  else
  {
    sub_10007D028(v12, (const void **)a2, a3);
  }
}

__n128 sub_10002E960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_10002EFCC(a1, a2, a3, a4).n128_u64[0];
  if (*(_OWORD *)(a5 + 24) < *(_OWORD *)(a4 + 24))
  {
    uint64_t v11 = *(void *)(a4 + 16);
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v13;
    *(_OWORD *)a5 = v12;
    *(void *)(a5 + 16) = v11;
    __n128 result = *(__n128 *)(a5 + 24);
    long long v14 = *(_OWORD *)(a4 + 24);
    *(__n128 *)(a4 + 24) = result;
    *(_OWORD *)(a5 + 24) = v14;
    if (*(_OWORD *)(a4 + 24) < *(_OWORD *)(a3 + 24))
    {
      uint64_t v15 = *(void *)(a3 + 16);
      long long v16 = *(_OWORD *)a3;
      uint64_t v17 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v17;
      *(_OWORD *)a4 = v16;
      *(void *)(a4 + 16) = v15;
      __n128 result = *(__n128 *)(a4 + 24);
      long long v18 = *(_OWORD *)(a3 + 24);
      *(__n128 *)(a3 + 24) = result;
      *(_OWORD *)(a4 + 24) = v18;
      if (*(_OWORD *)(a3 + 24) < *(_OWORD *)(a2 + 24))
      {
        uint64_t v19 = *(void *)(a2 + 16);
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v21;
        *(_OWORD *)a3 = v20;
        *(void *)(a3 + 16) = v19;
        __n128 result = *(__n128 *)(a3 + 24);
        long long v22 = *(_OWORD *)(a2 + 24);
        *(__n128 *)(a2 + 24) = result;
        *(_OWORD *)(a3 + 24) = v22;
        if (*(_OWORD *)(a2 + 24) < *(_OWORD *)(a1 + 24))
        {
          uint64_t v23 = *(void *)(a1 + 16);
          long long v24 = *(_OWORD *)a1;
          uint64_t v25 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v25;
          *(_OWORD *)a2 = v24;
          *(void *)(a2 + 16) = v23;
          __n128 result = *(__n128 *)(a2 + 24);
          long long v26 = *(_OWORD *)(a1 + 24);
          *(__n128 *)(a1 + 24) = result;
          *(_OWORD *)(a2 + 24) = v26;
        }
      }
    }
  }
  return result;
}

long long *sub_10002EB1C(long long *result, long long *a2, long long *a3)
{
  uint64_t v3 = (uint64_t *)(a2 + 2);
  unint64_t v4 = *((void *)a2 + 4);
  BOOL v5 = (uint64_t *)a2 + 3;
  unint64_t v6 = (uint64_t *)(result + 2);
  unint64_t v7 = (uint64_t *)result + 3;
  if (*(long long *)((char *)a2 + 24) < *(long long *)((char *)result + 24))
  {
    if (*(long long *)((char *)a3 + 24) < (__int128)__PAIR128__(v4, *v5))
    {
      uint64_t v8 = *((void *)result + 2);
      long long v9 = *result;
      uint64_t v10 = *((void *)a3 + 2);
      *__n128 result = *a3;
      *((void *)result + 2) = v10;
      *a3 = v9;
      *((void *)a3 + 2) = v8;
      BOOL v5 = (uint64_t *)a3 + 3;
    }
    else
    {
      uint64_t v19 = *((void *)result + 2);
      long long v20 = *result;
      uint64_t v21 = *((void *)a2 + 2);
      *__n128 result = *a2;
      *((void *)result + 2) = v21;
      *a2 = v20;
      *((void *)a2 + 2) = v19;
      unint64_t v22 = *((void *)result + 3);
      unint64_t v23 = *((void *)result + 4);
      *(long long *)((char *)result + 24) = *(long long *)((char *)a2 + 24);
      *((void *)a2 + 3) = v22;
      *((void *)a2 + 4) = v23;
      if (*(long long *)((char *)a3 + 24) >= (__int128)__PAIR128__(v23, v22)) {
        return result;
      }
      uint64_t v24 = *((void *)a2 + 2);
      long long v25 = *a2;
      uint64_t v26 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v26;
      *a3 = v25;
      *((void *)a3 + 2) = v24;
      unint64_t v7 = (uint64_t *)a2 + 3;
      BOOL v5 = (uint64_t *)a3 + 3;
      unint64_t v6 = (uint64_t *)(a2 + 2);
    }
    uint64_t v3 = (uint64_t *)(a3 + 2);
    goto LABEL_13;
  }
  if (*(long long *)((char *)a3 + 24) < (__int128)__PAIR128__(v4, *v5))
  {
    uint64_t v11 = *((void *)a2 + 2);
    long long v12 = *a2;
    uint64_t v13 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v13;
    *a3 = v12;
    *((void *)a3 + 2) = v11;
    long long v14 = *(long long *)((char *)a2 + 24);
    *(long long *)((char *)a2 + 24) = *(long long *)((char *)a3 + 24);
    *(long long *)((char *)a3 + 24) = v14;
    uint64_t v15 = *((void *)a2 + 4);
    if (v15 < *v6 || *v6 >= v15 && *v5 < (unint64_t)*v7)
    {
      uint64_t v16 = *((void *)result + 2);
      long long v17 = *result;
      uint64_t v18 = *((void *)a2 + 2);
      *__n128 result = *a2;
      *((void *)result + 2) = v18;
      *a2 = v17;
      *((void *)a2 + 2) = v16;
LABEL_13:
      uint64_t v27 = *v7;
      *unint64_t v7 = *v5;
      *BOOL v5 = v27;
      uint64_t v28 = *v6;
      *unint64_t v6 = *v3;
      *uint64_t v3 = v28;
    }
  }
  return result;
}

BOOL sub_10002ECF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_OWORD *)(a2 - 16) < *(_OWORD *)(a1 + 24))
      {
        uint64_t v6 = a2 - 40;
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(void *)(a1 + 16) = v9;
        *(_OWORD *)uint64_t v6 = v8;
        *(void *)(v6 + 16) = v7;
        long long v10 = *(_OWORD *)(a1 + 24);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v10;
      }
      return result;
    case 3uLL:
      sub_10002EB1C((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_10002EFCC(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      sub_10002E960(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      sub_10002EB1C((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == v2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      uint64_t v24 = v2;
      break;
  }
  while (1)
  {
    uint64_t v15 = *(void *)(v12 + 32);
    uint64_t v16 = *(void *)(v11 + 32);
    if (v15 >= v16)
    {
      if (v16 < v15) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v12 + 24);
      if (v17 >= *(void *)(v11 + 24)) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v17 = *(void *)(v12 + 24);
    }
    uint64_t v18 = *(void *)v12;
    *(void *)long long v25 = *(void *)(v12 + 8);
    *(void *)&v25[7] = *(void *)(v12 + 15);
    char v19 = *(unsigned char *)(v12 + 23);
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0;
    *(void *)uint64_t v12 = 0;
    sub_10002F11C(v12, (long long *)v11);
    uint64_t v20 = a1;
    if (v11 != a1)
    {
      uint64_t v21 = v13;
      while (1)
      {
        uint64_t v22 = a1 + v21;
        uint64_t v23 = *(void *)(a1 + v21 + 72);
        if (v15 >= v23)
        {
          if (v23 < v15)
          {
            uint64_t v20 = v11;
            goto LABEL_19;
          }
          if (v17 >= *(void *)(v22 + 64)) {
            break;
          }
        }
        v11 -= 40;
        sub_10002F11C(v22 + 80, (long long *)(v22 + 40));
        v21 -= 40;
        if (v21 == -80)
        {
          uint64_t v20 = a1;
          goto LABEL_19;
        }
      }
      uint64_t v20 = a1 + v21 + 80;
    }
LABEL_19:
    if (*(char *)(v20 + 23) < 0) {
      operator delete(*(void **)v20);
    }
    *(void *)uint64_t v20 = v18;
    *(void *)(v20 + 8) = *(void *)v25;
    *(void *)(v20 + 15) = *(void *)&v25[7];
    *(unsigned char *)(v20 + 23) = v19;
    *(void *)(v20 + 24) = v17;
    *(void *)(v20 + 32) = v15;
    if (++v14 == 8) {
      return v12 + 40 == v24;
    }
    uint64_t v2 = v24;
LABEL_23:
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == v2) {
      return 1;
    }
  }
}

__n128 sub_10002EFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10002EB1C((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(_OWORD *)(a4 + 24) < *(_OWORD *)(a3 + 24))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(void *)(a4 + 16) = v9;
    __n128 result = *(__n128 *)(a4 + 24);
    long long v12 = *(_OWORD *)(a3 + 24);
    *(__n128 *)(a3 + 24) = result;
    *(_OWORD *)(a4 + 24) = v12;
    if (*(_OWORD *)(a3 + 24) < *(_OWORD *)(a2 + 24))
    {
      uint64_t v13 = *(void *)(a2 + 16);
      long long v14 = *(_OWORD *)a2;
      uint64_t v15 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v15;
      *(_OWORD *)a3 = v14;
      *(void *)(a3 + 16) = v13;
      __n128 result = *(__n128 *)(a3 + 24);
      long long v16 = *(_OWORD *)(a2 + 24);
      *(__n128 *)(a2 + 24) = result;
      *(_OWORD *)(a3 + 24) = v16;
      if (*(_OWORD *)(a2 + 24) < *(_OWORD *)(a1 + 24))
      {
        uint64_t v17 = *(void *)(a1 + 16);
        long long v18 = *(_OWORD *)a1;
        uint64_t v19 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v19;
        *(_OWORD *)a2 = v18;
        *(void *)(a2 + 16) = v17;
        __n128 result = *(__n128 *)(a2 + 24);
        long long v20 = *(_OWORD *)(a1 + 24);
        *(__n128 *)(a1 + 24) = result;
        *(_OWORD *)(a2 + 24) = v20;
      }
    }
  }
  return result;
}

__n128 sub_10002F11C(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

long long *sub_10002F170(long long *a1, long long *a2, uint64_t a3)
{
  long long v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_10002F11C(a3, v4);
      long long v4 = (long long *)((char *)v4 + 40);
      a3 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_10002F1D0(uint64_t **a1)
{
  uint64_t v2 = a1;
  uint64_t v1 = **a1;
  sub_10002CA4C(v1, 2u);
  sub_10002CA4C(v1, 3u);
  operator delete();
}

void sub_10002F238(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 ***)(a1 + 40);
  long long v4 = v3[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (sub_10009E904(**v3))
  {
    sub_100086618(**v3, __p);
    sub_1000308E0((uint64_t)__p, &v14);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v5 = v14;
    uint64_t v6 = v15;
    long long v16 = a2;
    while (v5 != v6)
    {
      if (*(char *)(v5 + 23) < 0)
      {
        sub_1000173FC(__p, *(void **)v5, *(void *)(v5 + 8));
      }
      else
      {
        long long v7 = *(_OWORD *)v5;
        *(void *)&__p[16] = *(void *)(v5 + 16);
        *(_OWORD *)std::string __p = v7;
      }
      sub_10002F454(&v16, (long long *)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      v5 += 32;
    }
    long long v8 = *((void *)v4 + 4);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = v14;
      uint64_t v9 = v15;
      uint64_t v12 = *a2;
      uint64_t v11 = a2[1];
      uint64_t v13 = sub_1000AA324(**v3);
      *(_DWORD *)std::string __p = 134218498;
      *(void *)&__p[4] = (v9 - v10) >> 5;
      *(_WORD *)&unsigned char __p[12] = 2048;
      *(void *)&__p[14] = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
      *(_WORD *)&__p[22] = 2080;
      long long v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "file:#I AppleCare directory has %zd files; returning %zd as matching %s",
        __p,
        0x20u);
    }
    *(void *)std::string __p = &v14;
    sub_10002F7C4((void ***)__p);
  }
}

void sub_10002F3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  a14 = &a10;
  sub_10002F7C4((void ***)&a14);
  sub_10002F868((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_10002F454(uint64_t **a1, long long *a2)
{
  long long v4 = *a1;
  unint64_t v5 = (*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_10002B5E0();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v4) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    v20[4] = v7;
    if (v15) {
      long long v16 = (char *)sub_100009078(v7, v15);
    }
    else {
      long long v16 = 0;
    }
    uint64_t v17 = &v16[24 * v12];
    v20[0] = v16;
    v20[1] = v17;
    void v20[3] = &v16[24 * v15];
    long long v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v17 = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    v20[2] = v17 + 24;
    sub_10002F59C(v4, v20);
    uint64_t v11 = v4[1];
    sub_10002F734((uint64_t)v20);
  }
  else
  {
    long long v10 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v10;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v11 = v5 + 24;
    v4[1] = v5 + 24;
  }
  v4[1] = v11;
  return a1;
}

void sub_10002F588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002F734((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10002F59C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10002F614((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10002F614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_10002F6B4((uint64_t)v12);
  return a6;
}

uint64_t sub_10002F6B4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10002F6EC(a1);
  }
  return a1;
}

void sub_10002F6EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_10002F734(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10002F76C(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_10002F7C4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10002F818((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10002F818(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

void sub_10002F868(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10002F8BC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10002F8BC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_10002F90C(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v3);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  sub_10002F97C(v2);
  *(_OWORD *)uint64_t v2 = v3;
  v2[2] = v4;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  uint64_t v5 = (void **)&v3;
  sub_10002F868(&v5);
}

void sub_10002F97C(uint64_t *a1)
{
  if (*a1)
  {
    sub_10002F8BC(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_10002F9B8(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v3);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  sub_10002F97C(v2);
  *(_OWORD *)uint64_t v2 = v3;
  v2[2] = v4;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  uint64_t v5 = (void **)&v3;
  sub_10002F868(&v5);
}

uint64_t sub_10002FA28(std::string *__str)
{
  std::string::size_type v2 = 0;
  while (1)
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      uint64_t v4 = __str;
    }
    else {
      uint64_t v4 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (size >= v2)
    {
      uint64_t v7 = (char *)v4 + v2;
      uint64_t v8 = (char *)v4 + size;
      while (v8 - v7 >= 1)
      {
        uint64_t v9 = memchr(v7, 47, v8 - v7);
        if (!v9) {
          break;
        }
        if (*v9 == 47)
        {
          if (v9 == v8) {
            break;
          }
          std::string::size_type v2 = v9 - (unsigned char *)v4 + 1;
          if (v9 - (unsigned char *)v4 == -1) {
            break;
          }
          goto LABEL_9;
        }
        uint64_t v7 = v9 + 1;
      }
    }
    std::string::size_type v2 = -1;
LABEL_9:
    std::string::basic_string(&v27, __str, 0, v2, (std::allocator<char> *)&v26);
    uint64_t v5 = (v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v27
       : (std::string *)v27.__r_.__value_.__r.__words[0];
    if (stat((const char *)v5, &v26)) {
      break;
    }
    if ((v26.st_mode & 0x4000) == 0)
    {
      uint64_t v24 = *(NSObject **)(qword_1001D8080 + 24);
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO)) {
        goto LABEL_48;
      }
      long long v25 = &v27;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v25 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v29 = v25;
      long long v15 = "file.helpers:#I Unable to create directory %s: already exists and is not a directory.";
      uint64_t v22 = v24;
      uint32_t v23 = 12;
      goto LABEL_47;
    }
LABEL_25:
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (v2 == -1) {
      return 1;
    }
  }
  if (*__error() != 2)
  {
    long long v16 = *(NSObject **)(qword_1001D8080 + 24);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_INFO)) {
      goto LABEL_48;
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v27;
    }
    else {
      uint64_t v11 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    int v12 = *__error();
    char v13 = __error();
    long long v14 = strerror(*v13);
    *(_DWORD *)long long buf = 136315650;
    uint64_t v29 = v11;
    __int16 v30 = 1024;
    int v31 = v12;
    __int16 v32 = 2080;
    long long v33 = v14;
    long long v15 = "file.helpers:#I Unable to stat %s with errno %d (%s).";
LABEL_42:
    uint64_t v22 = v16;
    uint32_t v23 = 28;
LABEL_47:
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, v15, buf, v23);
    goto LABEL_48;
  }
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v27;
  }
  else {
    uint64_t v6 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  if (!mkdir((const char *)v6, 0x1EDu)) {
    goto LABEL_25;
  }
  long long v16 = *(NSObject **)(qword_1001D8080 + 24);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v18 = &v27;
    }
    else {
      long long v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    int v19 = *__error();
    long long v20 = __error();
    uint64_t v21 = strerror(*v20);
    *(_DWORD *)long long buf = 136315650;
    uint64_t v29 = v18;
    __int16 v30 = 1024;
    int v31 = v19;
    __int16 v32 = 2080;
    long long v33 = v21;
    long long v15 = "file.helpers:#I Unable to create directory %s with errno %d (%s).";
    goto LABEL_42;
  }
LABEL_48:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_10002FD2C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(exception_object);
}

void sub_10002FD58(uint64_t *a1)
{
  std::string::size_type v2 = *(NSObject **)(qword_1001D8080 + 24);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) >= 0) {
      long long v3 = a1;
    }
    else {
      long long v3 = (uint64_t *)*a1;
    }
    int v4 = 136315138;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "file.helpers:#I Trying to open %s", (uint8_t *)&v4, 0xCu);
  }
  operator new();
}

void sub_10002FEB0()
{
}

void (__cdecl ***sub_10002FEDC(void (__cdecl ***a1)(std::ofstream *__hidden this)))(std::ofstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  int v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 1);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_100030064(_Unwind_Exception *a1)
{
}

void sub_10003009C()
{
}

void sub_100030160()
{
}

void (__cdecl ***sub_100030184(void (__cdecl ***a1)(std::ifstream *__hidden this)))(std::ifstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  a1[1] = 0;
  int v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 2);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_100030310(_Unwind_Exception *a1)
{
}

off_t sub_100030348(const char *a1)
{
  uint64_t v1 = (uint64_t *)a1;
  memset(&v7, 0, sizeof(v7));
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &v7)) {
    return v7.st_size;
  }
  std::string::size_type v2 = *(NSObject **)(qword_1001D8080 + 24);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)v1 + 23) < 0) {
      uint64_t v1 = (uint64_t *)*v1;
    }
    int v3 = *__error();
    int v4 = __error();
    uint64_t v5 = strerror(*v4);
    *(_DWORD *)long long buf = 136315650;
    uint64_t v9 = v1;
    __int16 v10 = 1024;
    int v11 = v3;
    __int16 v12 = 2080;
    char v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "file.helpers:#E Unable to stat %s with error %d (%s) for counting bytes (submission dir)", buf, 0x1Cu);
  }
  return 0;
}

tm *sub_100030478(tm *a1)
{
  time_t v3 = time(0);
  return localtime_r(&v3, a1);
}

BOOL sub_1000304B8(uint64_t *a1)
{
  uint64_t v1 = a1;
  std::string::size_type v2 = (char *)a1 + 23;
  if (*((char *)a1 + 23) < 0) {
    a1 = (uint64_t *)*a1;
  }
  int v3 = unlink((const char *)a1);
  int v4 = *(NSObject **)(qword_1001D8080 + 24);
  if (v3)
  {
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 24), OS_LOG_TYPE_ERROR)) {
      sub_1001418C4(v2, v1, v4);
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 24), OS_LOG_TYPE_INFO))
  {
    if (*((char *)v1 + 23) >= 0) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = (uint64_t *)*v1;
    }
    int v7 = 136315138;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "file.helpers:#I Deleted %s", (uint8_t *)&v7, 0xCu);
  }
  return v3 == 0;
}

DIR *sub_1000305C4(const char *a1)
{
  uint64_t v1 = a1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t result = opendir(a1);
  if (result)
  {
    int v3 = result;
    for (uint64_t i = readdir(result); i; uint64_t i = readdir(v3))
    {
      d_name = i->d_name;
      if (strncmp(".", i->d_name, 0xFFuLL) && strncmp("..", d_name, 0xFFuLL))
      {
        if (v1[23] < 0)
        {
          sub_1000173FC(__p, *(void **)v1, *((void *)v1 + 1));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)v1;
          uint64_t v7 = *((void *)v1 + 2);
        }
        ctu::path_join_impl();
        sub_1000304B8((uint64_t *)__p);
        if (SHIBYTE(v7) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    return (DIR *)closedir(v3);
  }
  return result;
}

void sub_1000306BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000306DC()
{
  sub_100086714(__p);
  *(_OWORD *)std::string::size_type v2 = *(_OWORD *)__p;
  uint64_t v3 = v1;
  __p[1] = 0;
  uint64_t v1 = 0;
  __p[0] = 0;
  ctu::path_join_impl();
  if (SHIBYTE(v1) < 0) {
    operator delete(__p[0]);
  }
  sub_1000304B8((uint64_t *)v2);
  if (SHIBYTE(v3) < 0) {
    operator delete(v2[0]);
  }
}

void sub_10003076C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000307A8(const char *a1)
{
  uint64_t v1 = a1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  std::string::size_type v2 = opendir(a1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  int v4 = readdir(v2);
  for (i = 0; v4; int v4 = readdir(v3))
  {
    d_name = v4->d_name;
    if (strncmp(".", v4->d_name, 0xFFuLL) && strncmp("..", d_name, 0xFFuLL))
    {
      if (v1[23] < 0)
      {
        sub_1000173FC(__p, *(void **)v1, *((void *)v1 + 1));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v1;
        uint64_t v10 = *((void *)v1 + 2);
      }
      ctu::path_join_impl();
      off_t v7 = sub_100030348((const char *)__p);
      if (SHIBYTE(v10) < 0) {
        operator delete(__p[0]);
      }
      i += v7;
    }
  }
  closedir(v3);
  return i;
}

void sub_1000308C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000308E0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1000173FC(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    uint64_t v11 = *(void *)(a1 + 16);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_100030C58((dirent **)&v13, (uint64_t)__p, 0);
  uint64_t v9 = 0;
  uint64_t v3 = v13;
  if (v13)
  {
    int v4 = 0;
    do
    {
      if ((!v3 || !*((void *)v3 + 6)) && (!v4 || !*((void *)v4 + 6))) {
        break;
      }
      sub_10013E028((uint64_t)(v3 + 2), 0, (double *)&rep);
      if (rep == 2)
      {
        uint64_t v5 = (long long *)(v13 + 2);
        time_t v6 = sub_10013FAAC((uint64_t)(v13 + 2), 0);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::from_time_t(v6).__d_.__rep_;
        unint64_t v7 = a2[1];
        if (v7 >= a2[2])
        {
          uint64_t v8 = sub_100030DB0(a2, v5, &rep);
        }
        else
        {
          sub_100030D3C(a2, v5, &rep);
          uint64_t v8 = v7 + 32;
        }
        a2[1] = v8;
      }
      sub_10013E6D8((dirent **)&v13, 0);
      int v4 = v9;
      uint64_t v3 = v13;
    }
    while (v13 != v9);
  }
  sub_100030C9C(&v9);
  sub_100030C9C(&v13);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100030A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x100030A00);
  }
  *(void *)(v17 - 40) = v16;
  sub_10002F7C4((void ***)(v17 - 40));
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100030A8C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1000173FC(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    uint64_t v12 = *(void *)(a1 + 16);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_100030C58((dirent **)&v14, (uint64_t)__p, 0);
  uint64_t v10 = 0;
  uint64_t v3 = v14;
  if (v14)
  {
    int v4 = 0;
    do
    {
      if ((!v3 || !*((void *)v3 + 6)) && (!v4 || !*((void *)v4 + 6))) {
        break;
      }
      sub_10013E028((uint64_t)(v3 + 2), 0, (double *)&v13);
      if (v13 == 2)
      {
        uint64_t v5 = (long long *)(v14 + 2);
        off_t v13 = sub_10013FA10((uint64_t)(v14 + 2), 0);
        time_t v6 = sub_10013FAAC((uint64_t)(v14 + 2), 0);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::from_time_t(v6).__d_.__rep_;
        unint64_t v7 = a2[1];
        if (v7 >= a2[2])
        {
          uint64_t v8 = sub_100031178(a2, v5, &v13, &rep);
        }
        else
        {
          sub_1000310FC(a2, v5, &v13, &rep);
          uint64_t v8 = v7 + 40;
        }
        a2[1] = v8;
      }
      sub_10013E6D8((dirent **)&v14, 0);
      int v4 = v10;
      uint64_t v3 = v14;
    }
    while (v14 != v10);
  }
  sub_100030C9C(&v10);
  sub_100030C9C(&v14);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100030BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x100030BC8);
  }
  *(void *)(v17 - 40) = v16;
  sub_10002DAE4((void ***)(v17 - 40));
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

dirent **sub_100030C58(dirent **a1, uint64_t a2, char a3)
{
  *a1 = 0;
  sub_10013E1E0(a1, a2, a3, 0);
  return a1;
}

void sub_100030C88(_Unwind_Exception *a1)
{
  sub_100030C9C(v1);
  _Unwind_Resume(a1);
}

atomic_uint **sub_100030C9C(atomic_uint **a1)
{
  std::string::size_type v2 = *a1;
  if (v2 && atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
  {
    sub_100030CF0((uint64_t)v2);
    operator delete();
  }
  return a1;
}

uint64_t sub_100030CF0(uint64_t a1)
{
  sub_10013E0AC((DIR **)(a1 + 48), (void **)(a1 + 56), v3);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *sub_100030D3C(void *result, long long *a2, void *a3)
{
  int v4 = result;
  uint64_t v5 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_1000173FC((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(void *)(v5 + 24) = *a3;
  v4[1] = v5 + 32;
  return result;
}

void sub_100030DA8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100030DB0(uint64_t *a1, long long *a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_10002B5E0();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v21 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_1000122B8(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  off_t v13 = &v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  int v19 = v13;
  long long v20 = &v12[32 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000173FC(v13, *(void **)a2, *((void *)a2 + 1));
    long long v15 = v19;
  }
  else
  {
    long long v14 = *a2;
    *((void *)v13 + 2) = *((void *)a2 + 2);
    *(_OWORD *)off_t v13 = v14;
    long long v15 = v13;
  }
  *((void *)v13 + 3) = *a3;
  int v19 = v15 + 32;
  sub_100030EC4(a1, v18);
  uint64_t v16 = a1[1];
  sub_10003106C((uint64_t)v18);
  return v16;
}

void sub_100030EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003106C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100030EC4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100030F3C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100030F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v8 - 8) = *(void *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100030FEC((uint64_t)v12);
  return v10;
}

uint64_t sub_100030FEC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100031024(a1);
  }
  return a1;
}

void sub_100031024(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 32;
  }
}

uint64_t sub_10003106C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000310A4(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *sub_1000310FC(void *result, long long *a2, void *a3, uint64_t *a4)
{
  uint64_t v6 = result;
  uint64_t v7 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_1000173FC((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v7 = v8;
  }
  uint64_t v9 = *a4;
  *(void *)(v7 + 24) = *a3;
  *(void *)(v7 + 32) = v9;
  v6[1] = v7 + 40;
  return result;
}

void sub_100031170(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100031178(uint64_t *a1, long long *a2, void *a3, void *a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    sub_10002B5E0();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x333333333333333) {
    unint64_t v13 = 0x666666666666666;
  }
  else {
    unint64_t v13 = v7;
  }
  uint32_t v23 = a1 + 2;
  if (v13) {
    long long v14 = (char *)sub_100031338(v11, v13);
  }
  else {
    long long v14 = 0;
  }
  long long v15 = &v14[40 * v6];
  v20[0] = v14;
  v20[1] = v15;
  uint64_t v21 = v15;
  uint64_t v22 = &v14[40 * v13];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000173FC(v15, *(void **)a2, *((void *)a2 + 1));
    uint64_t v17 = v21;
  }
  else
  {
    long long v16 = *a2;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long v15 = v16;
    uint64_t v17 = v15;
  }
  *((void *)v15 + 3) = *a3;
  *((void *)v15 + 4) = *a4;
  uint64_t v21 = v17 + 40;
  sub_1000312C0(a1, v20);
  uint64_t v18 = a1[1];
  sub_1000314B0((uint64_t)v20);
  return v18;
}

void sub_1000312AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000314B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000312C0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100031380((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100031338(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_10002A63C();
  }
  return operator new(40 * a2);
}

uint64_t sub_100031380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 40);
      *(void *)(v8 - 24) = *(void *)(a3 - 24);
      *(_OWORD *)(v8 - 40) = v9;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 40) = 0;
      *(_OWORD *)(v8 - 16) = *(_OWORD *)(a3 - 16);
      v8 -= 40;
      v7 -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100031430((uint64_t)v12);
  return v10;
}

uint64_t sub_100031430(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100031468(a1);
  }
  return a1;
}

void sub_100031468(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 40;
  }
}

uint64_t sub_1000314B0(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000314E8(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 5;
      *(void *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_100031540(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100031558(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xCu);
}

void sub_100031778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1000317F8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) fmServingCellsToServingCellsWithContext:*(void *)(a1 + 40) cells:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) getOrCreateLocationOfInterestAt:v3 WithContext:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5)
  {
    uint64_t v6 = [*(id *)(a1 + 32) getOrCreateLocationOfInterestAt:v5 WithContext:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = [*(id *)(a1 + 32) handleOutOfServiceAreaWithContext:*(void *)(a1 + 40) prevVisit:v4 curVisit:v6 nextVisit:0 subscriptionID:*(void *)(a1 + 72) prevCells:v2 startTime:*(void *)(a1 + 80) entryLocation:*(void *)(a1 + 88) exitLocation:*(void *)(a1 + 96)];
  if (v7)
  {
    stat v26 = v4;
    uint64_t v28 = v2;
    long long v9 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    long long v25 = v7;
    std::string v27 = v6;
    uint64_t v29 = [*(id *)(a1 + 104) subscriptionID];
    uint64_t v24 = [*(id *)(a1 + 104) radioAccessTechnology];
    uint32_t v23 = [*(id *)(a1 + 104) cellID];
    uint64_t v22 = [*(id *)(a1 + 104) mnc];
    uint64_t v21 = [*(id *)(a1 + 104) mcc];
    uint64_t v10 = [*(id *)(a1 + 104) bandInfo];
    uint64_t v11 = [*(id *)(a1 + 104) tacOrLac];
    unint64_t v12 = [*(id *)(a1 + 104) arfcnOrUarfcn];
    char v13 = [*(id *)(a1 + 104) bandwidth];
    long long v14 = [*(id *)(a1 + 104) pci];
    long long v15 = [*(id *)(a1 + 104) deploymentType];
    long long v16 = [*(id *)(a1 + 104) timestamp];
    long long v20 = [v9 getOrCreateServingCellWithContext:v8 subscriptionID:v29 radioAccessTechnology:v24 cellID:v23 mnc:v22 mcc:v21 bandInfo:v10 tacOrLac:v11 arfcnOrUarfcn:v12 bandwidth:v13 pci:v14 deploymentType:v15 timestamp:v16];

    uint64_t v17 = *(void **)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v6 = v27;
    uint64_t v7 = v25;
    int v19 = [*(id *)(a1 + 104) timestamp];
    [v17 updateServingCellSeenWithContext:v18 cell:v20 atTimestamp:v19];

    [*(id *)(a1 + 32) updateOutOfServiceAreaAfterLeavingWithContext:*(void *)(a1 + 40) outOfServiceArea:v25 startTime:*(void *)(a1 + 80) nextCell:v20 duration:*(void *)(a1 + 88) entryLocation:*(void *)(a1 + 96) exitLocation:*(double *)(a1 + 112)];
    uint64_t v2 = v28;
    uint64_t v4 = v26;
  }
  else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 48), OS_LOG_TYPE_ERROR))
  {
    sub_1001419C8();
  }
}

void sub_100031ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_100031CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100031D28(id *a1)
{
  uint64_t v46 = [a1[4] getOrCreateLocationOfInterestAt:a1[5] WithContext:a1[6]];
  if (v46)
  {
    uint64_t v2 = [a1[5] timestamp];
    uint64_t v3 = +[FMConfiguration sharedInstance];
    uint64_t v4 = objc_msgSend(v2, "dateByAddingTimeInterval:", (double)(-60 * (uint64_t)objc_msgSend(v3, "OOSNextVisitCutoffMinutes")));

    __int16 v42 = (void *)v4;
    if (v4)
    {
      uint64_t v5 = [a1[4] getOutOfServiceAreasWithoutNextVisitWithContext:a1[6] After:v4];
      uint64_t v6 = v5;
      if (v5)
      {
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        unint64_t v41 = v5;
        obunint64_t j = v5;
        id v45 = [obj countByEnumeratingWithState:&v53 objects:v60 count:16];
        if (v45)
        {
          uint64_t v44 = *(void *)v54;
          do
          {
            for (uint64_t i = 0; i != v45; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v54 != v44) {
                objc_enumerationMutation(obj);
              }
              uint64_t v7 = *(void **)(*((void *)&v53 + 1) + 8 * i);
              id v8 = a1[4];
              id v9 = a1[6];
              uint64_t v10 = [v7 prevVisit];
              uint64_t v11 = [v7 curVisit];
              unint64_t v12 = [v7 subscriptionID];
              char v13 = [v7 prevCells];
              LOWORD(v40) = (unsigned __int16)[v7 timeOfDay];
              long long v14 = [v8 getOutOfServiceAreaWithContext:v9 prevVisit:v10 curVisit:v11 nextVisit:v46 subscriptionID:v12 prevCells:v13 timeOfDay:v40];

              if (v14)
              {
                long long v15 = [v7 lastSeen];
                [v14 setLastSeen:v15];

                objc_msgSend(v14, "setSeenCount:", objc_msgSend(v14, "seenCount") + objc_msgSend(v7, "seenCount"));
                long long v16 = [v7 durations];
                [v14 addDurations:v16];

                uint64_t v17 = [v14 durations];
                id v18 = [v17 count];
                int v19 = +[FMConfiguration sharedInstance];
                LODWORD(v18) = v18 > [v19 OOSDurationsInDatabase];

                if (v18)
                {
                  long long v20 = [v14 durations];
                  id v21 = [v20 copy];
                  uint64_t v22 = [v14 durations];
                  uint32_t v23 = [v22 count];
                  uint64_t v24 = +[FMConfiguration sharedInstance];
                  uint64_t v25 = +[NSIndexSet indexSetWithIndexesInRange:](NSIndexSet, "indexSetWithIndexesInRange:", 0, v23 - (unsigned char *)[v24 OOSDurationsInDatabase]);
                  stat v26 = [v21 objectsAtIndexes:v25];

                  long long v51 = 0u;
                  long long v52 = 0u;
                  long long v49 = 0u;
                  long long v50 = 0u;
                  id v27 = v26;
                  id v28 = [v27 countByEnumeratingWithState:&v49 objects:v59 count:16];
                  if (v28)
                  {
                    uint64_t v29 = *(void *)v50;
                    do
                    {
                      for (unint64_t j = 0; j != v28; unint64_t j = (char *)j + 1)
                      {
                        if (*(void *)v50 != v29) {
                          objc_enumerationMutation(v27);
                        }
                        int v31 = *(void **)(*((void *)&v49 + 1) + 8 * (void)j);
                        __int16 v32 = *(NSObject **)(qword_1001D8080 + 136);
                        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
                        {
                          unsigned int v33 = [v31 seconds];
                          *(_DWORD *)long long buf = 67109120;
                          unsigned int v58 = v33;
                          _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "FederatedMobility[FMCoreData+OOSPredictor]:#D Deleting duration: %d", buf, 8u);
                        }
                        [v14 removeDurationsObject:v31];
                        [a1[6] deleteObject:v31];
                      }
                      id v28 = [v27 countByEnumeratingWithState:&v49 objects:v59 count:16];
                    }
                    while (v28);
                  }
                }
                uint64_t v34 = [v7 nextCells];
                [v14 addNextCells:v34];

                uint64_t v35 = [v7 nextCells];
                [v7 removeNextCells:v35];

                [a1[6] deleteObject:v7];
              }
              else
              {
                [v7 setNextVisit:v46];
              }
            }
            id v45 = [obj countByEnumeratingWithState:&v53 objects:v60 count:16];
          }
          while (v45);
        }

        id v36 = a1[6];
        id v48 = 0;
        [v36 save:&v48];
        id v37 = v48;
        if (v37)
        {
          char v38 = *(NSObject **)(qword_1001D8080 + 136);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            uint64_t v39 = [v37 localizedDescription];
            sub_100141A98(v39, buf, v38);
          }
        }

        uint64_t v6 = v41;
      }
      else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR))
      {
        sub_100141A64();
      }
    }
    else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR))
    {
      sub_100141A30();
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR))
  {
    sub_1001419FC();
  }
}

void sub_1000322EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000324F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100032700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100032AE8(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_100032D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100032F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000333C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000337AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100033A94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100033CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100033D28(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [v4 cellChanges];
  uint64_t v6 = [v5 firstObject];

  uint64_t v7 = [v6 toCell];
  unsigned int v8 = [*(id *)(a1 + 32) subsId];
  id v9 = [v4 subscriptionID];
  if (v8 == [v9 unsignedIntValue] && v7)
  {
    uint64_t v10 = [v7 gci];
    uint64_t v11 = [*(id *)(a1 + 32) gci];
    unsigned __int8 v12 = [v10 isEqualToString:v11];

    if (v12)
    {
      if ([*(id *)(a1 + 32) isCongested])
      {
        char v13 = [FMTSAnomalyCongestion alloc];
        long long v14 = [v6 time];
        id v15 = [v6 timestamp];
        long long v16 = objc_msgSend(*(id *)(a1 + 40), "trimEventsAndCopyForState:basedOnTimestamp:", v4, objc_msgSend(v6, "timestamp"));
        uint64_t v17 = [(FMTSAnomaly *)v13 initWithTime:v14 timestamp:v15 events:v16];

        [*(id *)(a1 + 40) startAnomaly:v17 forState:v4];
      }
      else
      {
        int v19 = [v4 activeAnomalies];
        long long v20 = [v19 objectForKey:&off_1001C3850];

        if (v20)
        {
          objc_msgSend(v20, "endAtTimestamp:", objc_msgSend(v6, "timestamp"));
          [*(id *)(a1 + 40) endAnomaly:v20 forState:v4];
        }
        else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG))
        {
          sub_1001420B4();
        }
      }
      goto LABEL_9;
    }
  }
  else
  {
  }
  id v18 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    id v21 = [v4 subscriptionID];
    uint64_t v22 = *(void *)(a1 + 32);
    int v23 = 138412802;
    uint64_t v24 = v7;
    __int16 v25 = 2112;
    stat v26 = v21;
    __int16 v27 = 2112;
    uint64_t v28 = v22;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "FederatedMobility[FMTimeSeriesModel]:#D Cell %@ of subscription ID %@ does not match metric %@", (uint8_t *)&v23, 0x20u);
  }
LABEL_9:
}

void sub_100033FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000340F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000341E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10003420C(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if (*(unsigned char *)(a1 + 56)) {
    uint64_t v6 = [FMTSEventVisitStarted alloc];
  }
  else {
    uint64_t v6 = [FMTSEventVisitEnded alloc];
  }
  uint64_t v7 = *(void *)(a1 + 48);
  [*(id *)(a1 + 32) latitude];
  double v9 = v8;
  [*(id *)(a1 + 32) longitude];
  double v11 = v10;
  [*(id *)(a1 + 32) accuracy];
  char v13 = [(FMTSEventVisitStarted *)v6 initWithTimestamp:v7 latitude:v9 longitude:v11 accuracy:v12];
  [*(id *)(a1 + 40) addEvent:v13 toState:v5];
}

void sub_10003432C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10003449C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100034768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100034BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_100034CA0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100034DD0(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

BOOL sub_100034E18(uint64_t a1, void *a2)
{
  return (unint64_t)[a2 timestamp] < *(void *)(a1 + 32);
}

void sub_100035288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000353E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000353F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "maybeFetchPredictionsForState:");
}

void sub_100035640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000358CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_1000358FC(uint64_t a1)
{
  v23[0] = @"num_prediction_sources";
  id v21 = [*(id *)(a1 + 32) predictionSources];
  v24[0] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v21 count]);
  v23[1] = @"num_prev_times_until_anomaly";
  long long v20 = (void *)v24[0];
  int v19 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) numPrevTimesUntilAnomaly]);
  v24[1] = v19;
  v23[2] = @"num_prev_predictions";
  id v18 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) numPrevPredictions]);
  v24[2] = v18;
  void v23[3] = @"num_prev_predictions_correct";
  uint64_t v17 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) numPrevPredictionCorrect]);
  void v24[3] = v17;
  v23[4] = @"predicted_anomaly_type";
  long long v16 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) predictedAnomalyType]);
  v24[4] = v16;
  v23[5] = @"predicted_time_until_anomaly";
  id v15 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) predictedTimeUntilAnomaly]);
  v24[5] = v15;
  v23[6] = @"predicted_duration";
  id v14 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) predictedDuration]);
  v24[6] = v14;
  v23[7] = @"confidence_anomaly";
  [*(id *)(a1 + 32) confidenceAnomaly];
  char v13 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v24[7] = v13;
  v23[8] = @"confidence_duration";
  [*(id *)(a1 + 32) confidenceDuration];
  double v12 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v24[8] = v12;
  v23[9] = @"confidence_time_until_anomaly";
  [*(id *)(a1 + 32) confidenceTimeUntilAnomaly];
  double v11 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v24[9] = v11;
  v23[10] = @"did_anomaly_happen";
  double v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 32) didAnomalyHappen]);
  v24[10] = v10;
  v23[11] = @"actual_time_until_anomaly";
  if ([*(id *)(a1 + 32) didAnomalyHappen]) {
    +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) actualTimeUntilAnomaly]);
  }
  else {
  uint64_t v25 = +[NSNull null];
  }
  v23[12] = @"actual_duration";
  if (objc_msgSend(*(id *)(a1 + 32), "didAnomalyHappen", v25)) {
    +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) actualDuration]);
  }
  else {
  uint64_t v2 = +[NSNull null];
  }
  stat v26 = v2;
  v23[13] = @"duration_prediction_error";
  if ([*(id *)(a1 + 32) didAnomalyHappen]) {
    +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  }
  else {
  uint64_t v3 = +[NSNull null];
  }
  __int16 v27 = v3;
  v23[14] = @"duration_prediction_error_percent";
  if ([*(id *)(a1 + 32) didAnomalyHappen]) {
    +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  }
  else {
  id v4 = +[NSNull null];
  }
  uint64_t v28 = v4;
  char v23[15] = @"time_until_anomaly_prediction_error";
  if ([*(id *)(a1 + 32) didAnomalyHappen]) {
    +[NSNumber numberWithInt:*(unsigned int *)(a1 + 60)];
  }
  else {
  id v5 = +[NSNull null];
  }
  uint64_t v29 = v5;
  v23[16] = @"time_until_anomaly_prediction_error_percent";
  if ([*(id *)(a1 + 32) didAnomalyHappen]) {
    +[NSNumber numberWithDouble:*(double *)(a1 + 48)];
  }
  else {
  uint64_t v6 = +[NSNull null];
  }
  __int16 v30 = v6;
  uint64_t v7 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:17];

  return v7;
}

void sub_100035E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_100036074(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

uint64_t sub_100036090(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(void *)(a3 + 14) = a2;
  return result;
}

uint64_t sub_1000360A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1] - *a2;
  v11[0] = 0;
  v11[1] = v2;
  v11[2] = v2 + (int)v3;
  int v12 = v3;
  uint64_t v13 = 0;
  __int16 v14 = 0;
  long long v16 = xmmword_100174830;
  int v15 = v3;
  int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::default_recursion_limit_;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  MetricFileMetadataHelper::MetricFileMetadataHelper();
  long long v6 = 0uLL;
  uint64_t v7 = 0xFFFFFFFFLL;
  uint64_t v4 = sub_1000361AC((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v11, &v6, (uint64_t)v8);
  sub_100038238((uint64_t)&v10);
  if (v9) {
    sub_10000B678(v9);
  }
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v11);
  return v4;
}

void sub_100036168(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100036E94((uint64_t)va);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)(v5 - 96));
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x100036154);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000361AC(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, long long *a2, uint64_t a3)
{
  uint64_t v7 = (char *)*((void *)this + 1);
  if ((unint64_t)v7 < *((void *)this + 2) && (*v7 & 0x80000000) == 0)
  {
    unint64_t TagFallback = *v7;
    *((_DWORD *)this + 8) = TagFallback;
    *((void *)this + 1) = v7 + 1;
    if (TagFallback) {
      goto LABEL_4;
    }
LABEL_10:
    int v15 = this;
    int v16 = 0;
LABEL_89:
    sub_1000382BC((uint64_t)v15, v16);
LABEL_90:
    char v3 = 0;
    return v3 & 1;
  }
  unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
  *((_DWORD *)this + 8) = TagFallback;
  if (!TagFallback) {
    goto LABEL_10;
  }
LABEL_4:
  unint64_t v9 = wis::reflect::decodeTag((wis::reflect *)TagFallback, a2);
  unint64_t v10 = HIDWORD(v9);
  char v11 = v9;
  long long v61 = *a2;
  uint64_t v62 = *((void *)a2 + 2);
  MetricFileMetadataHelper::getSubfieldType();
  long long v59 = v63;
  uint64_t v60 = v64;
  int BuiltinType = MetadataHelper::getBuiltinType();
  int DecodingType = wis::reflect::getDecodingType();
  switch(DecodingType)
  {
    case 0:
      switch(v11)
      {
        case 0:
          *(void *)int64_t v65 = 0;
          if (sub_100038330(this, (unint64_t *)v65)) {
            goto LABEL_63;
          }
          goto LABEL_88;
        case 1:
          *(void *)int64_t v65 = 0;
          if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v65))goto LABEL_88; {
          goto LABEL_63;
          }
        case 2:
          LODWORD(__p) = 0;
          if ((sub_100038360(this, (unsigned int *)&__p) & 1) == 0) {
            goto LABEL_88;
          }
          sub_10003908C(v65, __p);
          char Raw = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadRaw(this, *(void **)v65, (int)__p);
          if (Raw)
          {
            *(_OWORD *)uint64_t v67 = *a2;
            uint64_t v68 = *((void *)a2 + 2);
            uint64_t Subfield = MetricFileMetadataHelper::getSubfield();
            char v3 = Subfield && (*(_WORD *)(Subfield + 52) & 0x100) != 0 && *(unsigned char *)(Subfield + 48) != 0;
          }
          id v45 = *(void **)v65;
          if (!*(void *)v65) {
            goto LABEL_109;
          }
          int64_t v66 = *(void **)v65;
          break;
        case 5:
          v65[0] = 0;
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v65))goto LABEL_88; {
          goto LABEL_63;
          }
        default:
          goto LABEL_88;
      }
      goto LABEL_108;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      *(void *)int64_t v65 = 0;
      switch(v11)
      {
        case 0:
          __int16 v14 = (char *)*((void *)this + 1);
          if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
          {
            if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, (unint64_t *)v65) & 1) == 0)goto LABEL_88; {
          }
            }
          else
          {
            *(void *)int64_t v65 = *v14;
            *((void *)this + 1) = v14 + 1;
          }
LABEL_62:
          switch(BuiltinType)
          {
            case 1:
            case 15:
              wis::protobuf::NumberConverter<(wis::reflect::Type)1>::decode();
              break;
            case 2:
            case 16:
              wis::protobuf::NumberConverter<(wis::reflect::Type)2>::decode();
              break;
            case 3:
            case 4:
            case 6:
            case 7:
            case 9:
            case 10:
            case 11:
            case 12:
            case 17:
            case 18:
            case 20:
            case 21:
            case 23:
            case 24:
            case 25:
            case 26:
              break;
            case 5:
            case 19:
              wis::protobuf::NumberConverter<(wis::reflect::Type)5>::decode();
              break;
            case 8:
            case 22:
              wis::protobuf::NumberConverter<(wis::reflect::Type)8>::decode();
              break;
            default:
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
          }
LABEL_63:
          *(_OWORD *)uint64_t v67 = *a2;
          uint64_t v68 = *((void *)a2 + 2);
          uint64_t v40 = MetricFileMetadataHelper::getSubfield();
          if (!v40 || (*(_WORD *)(v40 + 52) & 0x100) == 0) {
            goto LABEL_90;
          }
          char v3 = *(unsigned char *)(v40 + 48) != 0;
          break;
        case 1:
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v65) & 1) == 0)goto LABEL_88; {
          goto LABEL_62;
          }
        case 2:
          goto LABEL_88;
        case 5:
          v67[0] = 0;
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v67))goto LABEL_88; {
          *(void *)int64_t v65 = v67[0];
          }
          goto LABEL_62;
        default:
          goto LABEL_62;
      }
      return v3 & 1;
    case 13:
      v65[0] = 0;
      uint64_t v35 = (char *)*((void *)this + 1);
      if ((unint64_t)v35 >= *((void *)this + 2) || *v35 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v65))goto LABEL_88; {
      }
        }
      else
      {
        v65[0] = *v35;
        *((void *)this + 1) = v35 + 1;
      }
      memset(v67, 0, sizeof(v67));
      uint64_t v68 = 0;
      char Raw = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadString();
      if (Raw) {
        char v3 = sub_100038390();
      }
      if ((SHIBYTE(v68) & 0x80000000) == 0) {
        goto LABEL_109;
      }
      id v45 = *(void **)v67;
      goto LABEL_108;
    case 14:
      v65[0] = 0;
      char v38 = (char *)*((void *)this + 1);
      if ((unint64_t)v38 >= *((void *)this + 2) || *v38 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v65))goto LABEL_88; {
        unsigned int v39 = v65[0];
        }
      }
      else
      {
        unsigned int v39 = *v38;
        v65[0] = v39;
        *((void *)this + 1) = v38 + 1;
      }
      sub_10003908C(v67, v39);
      char Raw = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadRaw(this, *(void **)v67, v65[0]);
      if (Raw) {
        char v3 = sub_100038390();
      }
      id v45 = *(void **)v67;
      if (*(void *)v67)
      {
        *(void *)&v67[2] = *(void *)v67;
LABEL_108:
        operator delete(v45);
      }
LABEL_109:
      if (Raw) {
        return v3 & 1;
      }
      goto LABEL_88;
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      unsigned int v58 = 0;
      int v17 = (char *)*((void *)this + 1);
      if ((unint64_t)v17 >= *((void *)this + 2) || *v17 < 0)
      {
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v58) & 1) == 0)
        {
LABEL_88:
          int v15 = this;
          int v16 = v10;
          goto LABEL_89;
        }
      }
      else
      {
        unsigned int v58 = *v17;
        *((void *)this + 1) = v17 + 1;
      }
      long long v52 = a2;
      wis::reflect::getUnpackedType();
      int WireTypeForType = wis::reflect::getWireTypeForType();
      long long v56 = this;
      int v57 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v58);
      std::string __p = 0;
      long long v54 = 0;
      long long v55 = 0;
      while (1)
      {
        int v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this);
        if (v19 < 1) {
          break;
        }
        long long v20 = v54;
        if (v54 >= v55)
        {
          uint64_t v22 = (char *)__p;
          uint64_t v23 = (v54 - (unsigned char *)__p) >> 3;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61) {
            sub_10002B5E0();
          }
          uint64_t v25 = v55 - (unsigned char *)__p;
          if ((v55 - (unsigned char *)__p) >> 2 > v24) {
            unint64_t v24 = v25 >> 2;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            __int16 v27 = (char *)sub_100038500((uint64_t)&v55, v26);
            uint64_t v22 = (char *)__p;
            long long v20 = v54;
          }
          else
          {
            __int16 v27 = 0;
          }
          uint64_t v28 = &v27[8 * v23];
          *(void *)uint64_t v28 = 0;
          id v21 = v28 + 8;
          while (v20 != v22)
          {
            uint64_t v29 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v28 - 1) = v29;
            v28 -= 8;
          }
          std::string __p = v28;
          long long v54 = v21;
          long long v55 = &v27[8 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(void *)long long v54 = 0;
          id v21 = v20 + 8;
        }
        long long v54 = v21;
        switch(WireTypeForType)
        {
          case 0:
            __int16 v30 = (unint64_t *)(v21 - 8);
            int v31 = (char *)*((void *)this + 1);
            if ((unint64_t)v31 >= *((void *)this + 2) || *v31 < 0)
            {
              char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v30);
LABEL_41:
              if ((Varint64Fallback & 1) == 0) {
                goto LABEL_85;
              }
            }
            else
            {
              *__int16 v30 = *v31;
              *((void *)this + 1) = v31 + 1;
            }
            break;
          case 1:
            char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v21 - 1);
            goto LABEL_41;
          case 2:
            goto LABEL_85;
          case 5:
            v67[0] = 0;
            char LittleEndian32Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v67);
            *((void *)v54 - 1) = v67[0];
            if ((LittleEndian32Fallback & 1) == 0) {
              goto LABEL_85;
            }
            continue;
          default:
            continue;
        }
      }
      switch(DecodingType)
      {
        case 15:
          sub_1000385BC((uint64_t *)&__p, v65);
          *(_OWORD *)uint64_t v67 = *v52;
          uint64_t v68 = *((void *)v52 + 2);
          uint64_t v34 = MetricFileMetadataHelper::getSubfield();
          goto LABEL_78;
        case 16:
          sub_1000386C8((uint64_t *)&__p, v65);
          *(_OWORD *)uint64_t v67 = *v52;
          uint64_t v68 = *((void *)v52 + 2);
          uint64_t v34 = MetricFileMetadataHelper::getSubfield();
          goto LABEL_78;
        case 17:
        case 18:
        case 24:
        case 25:
          sub_100038538((uint64_t *)&__p, v65);
          *(_OWORD *)uint64_t v67 = *v52;
          uint64_t v68 = *((void *)v52 + 2);
          uint64_t v34 = MetricFileMetadataHelper::getSubfield();
          goto LABEL_78;
        case 19:
          sub_1000387D4((uint64_t *)&__p, v65);
          *(_OWORD *)uint64_t v67 = *v52;
          uint64_t v68 = *((void *)v52 + 2);
          uint64_t v34 = MetricFileMetadataHelper::getSubfield();
          goto LABEL_78;
        case 20:
        case 21:
        case 23:
          sub_100038644((uint64_t *)&__p, v65);
          *(_OWORD *)uint64_t v67 = *v52;
          uint64_t v68 = *((void *)v52 + 2);
          uint64_t v34 = MetricFileMetadataHelper::getSubfield();
          goto LABEL_78;
        case 22:
          sub_10003885C((uint64_t *)&__p, v65);
          *(_OWORD *)uint64_t v67 = *v52;
          uint64_t v68 = *((void *)v52 + 2);
          uint64_t v34 = MetricFileMetadataHelper::getSubfield();
LABEL_78:
          char v3 = v34 && (*(_WORD *)(v34 + 52) & 0x100) != 0 && *(unsigned char *)(v34 + 48) != 0;
          __int16 v42 = *(void **)v65;
          if (!*(void *)v65) {
            break;
          }
          int64_t v66 = *(void **)v65;
LABEL_84:
          operator delete(v42);
          break;
        case 26:
          sub_100038750((uint64_t)&__p, v65);
          *(_OWORD *)uint64_t v67 = *v52;
          uint64_t v68 = *((void *)v52 + 2);
          uint64_t v41 = MetricFileMetadataHelper::getSubfield();
          char v3 = v41 && (*(_WORD *)(v41 + 52) & 0x100) != 0 && *(unsigned char *)(v41 + 48) != 0;
          __int16 v42 = *(void **)v65;
          if (!*(void *)v65) {
            break;
          }
          goto LABEL_84;
        default:
          long long v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v50, "This should never happen, no matter what the input!");
      }
LABEL_85:
      if (__p)
      {
        long long v54 = (char *)__p;
        operator delete(__p);
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(v56, v57);
      if (v19 > 0) {
        goto LABEL_88;
      }
      break;
    case 27:
      LODWORD(__p) = 0;
      id v36 = (char *)*((void *)this + 1);
      if ((unint64_t)v36 >= *((void *)this + 2) || *v36 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, (unsigned int *)&__p))goto LABEL_88; {
        int v37 = (int)__p;
        }
      }
      else
      {
        int v37 = *v36;
        LODWORD(__p) = v37;
        *((void *)this + 1) = v36 + 1;
      }
      *(void *)uint64_t v67 = this;
      v67[2] = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v37);
      ++*((_DWORD *)this + 14);
      *(void *)int64_t v65 = this;
      char v3 = sub_1000383E4(a3, this);
      sub_1000384C4((wireless_diagnostics::google::protobuf::io::CodedInputStream **)v65);
      int v46 = *((_DWORD *)this + 14);
      BOOL v47 = __OFSUB__(v46, 1);
      int v48 = v46 - 1;
      if (v48 < 0 == v47) {
        *((_DWORD *)this + 14) = v48;
      }
      sub_100039058((uint64_t)v67);
      return v3 & 1;
    default:
      goto LABEL_88;
  }
  return v3 & 1;
}

void sub_100036C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32)
{
  __cxa_free_exception(v32);
  _Unwind_Resume(a1);
}

uint64_t sub_100036E94(uint64_t a1)
{
  sub_100038238(a1 + 40);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_100036ECC(uint64_t a1, char **a2, int a3, char a4)
{
  char v5 = a3;
  if (a3 && (a4 & 1) != 0) {
    return;
  }
  uint64_t v7 = *a2;
  long long v6 = a2[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  LODWORD(v6) = v6 - v7;
  uint64_t v75 = 0;
  int64_t v76 = v7;
  uint64_t v77 = &v7[(int)v6];
  int v78 = (int)v6;
  uint64_t v79 = 0;
  __int16 v80 = 0;
  long long v82 = xmmword_100174830;
  int v81 = (int)v6;
  int v83 = wireless_diagnostics::google::protobuf::io::CodedInputStream::default_recursion_limit_;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  sub_100009298(v70, (uint64_t)a2);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v71, (wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v70);
  unint64_t v72 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v71;
  MetricFileMetadataHelper::MetricFileMetadataHelper();
  v74[64] = v5;
  v74[65] = a4;
  if (v76 >= v77 || *v76 < 0)
  {
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75);
    HIDWORD(v79) = TagFallback;
    if (TagFallback) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t TagFallback = *v76;
    HIDWORD(v79) = TagFallback;
    ++v76;
    if (TagFallback)
    {
LABEL_6:
      unint64_t v10 = wis::reflect::decodeTag((wis::reflect *)TagFallback, v8);
      char v11 = v10;
      uint64_t v12 = HIDWORD(v10);
      uint64_t v94 = 0;
      uint64_t v95 = 0;
      uint64_t v96 = 0xFFFFFFFFLL;
      MetricFileMetadataHelper::getSubfieldType();
      long long v92 = v97;
      uint64_t v93 = v98;
      int BuiltinType = MetadataHelper::getBuiltinType();
      int DecodingType = wis::reflect::getDecodingType();
      switch(DecodingType)
      {
        case 0:
          switch(v11)
          {
            case 0:
              *(void *)&long long v101 = 0;
              if (!sub_100038330((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, (unint64_t *)&v101))goto LABEL_117; {
              int v35 = v12;
              }
              int v36 = 0;
              goto LABEL_150;
            case 1:
              *(void *)&long long v101 = 0;
              if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, (unint64_t *)&v101))goto LABEL_117; {
              int v35 = v12;
              }
              int v36 = 1;
              goto LABEL_150;
            case 2:
              LODWORD(v99) = 0;
              if ((sub_100038360((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, (unsigned int *)&v99) & 1) == 0)goto LABEL_117; {
              sub_10003908C(&v101, v99);
              }
              char Raw = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadRaw((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, (void *)v101, v99);
              if (Raw) {
                sub_10003AA4C(*((void *)&v101 + 1) - v101, v12);
              }
              goto LABEL_138;
            case 5:
              LODWORD(v101) = 0;
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, (unsigned int *)&v101))goto LABEL_117; {
              int v35 = v12;
              }
              int v36 = 5;
LABEL_150:
              sub_10003A984(v35, v36);
              break;
            default:
              goto LABEL_117;
          }
          goto LABEL_119;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
          std::string __p = 0;
          switch(v11)
          {
            case 0:
              if (v76 < v77 && (*v76 & 0x80000000) == 0)
              {
                std::string __p = (void *)*v76++;
LABEL_74:
                switch(BuiltinType)
                {
                  case 1:
                  case 15:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)1>::decode();
                    *(void *)&long long v99 = v39;
                    long long v101 = 0uLL;
                    uint64_t v102 = 0xFFFFFFFFLL;
                    sub_10003AC0C((uint64_t)v70);
                    goto LABEL_119;
                  case 2:
                  case 16:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)2>::decode();
                    LODWORD(v99) = v40;
                    long long v101 = 0uLL;
                    uint64_t v102 = 0xFFFFFFFFLL;
                    sub_10003ADF0((uint64_t)v70);
                    goto LABEL_119;
                  case 3:
                  case 11:
                  case 17:
                  case 25:
                    *(void *)&long long v99 = __p;
                    long long v101 = 0uLL;
                    uint64_t v102 = 0xFFFFFFFFLL;
                    sub_10003AFD4((uint64_t)v70, (uint64_t *)&v99, (uint64_t)&v101, v12, BuiltinType);
                    goto LABEL_119;
                  case 4:
                  case 10:
                  case 18:
                  case 24:
                    *(void *)&long long v99 = __p;
                    long long v101 = 0uLL;
                    uint64_t v102 = 0xFFFFFFFFLL;
                    sub_10003AB18((uint64_t)v70, (uint64_t *)&v99, (uint64_t)&v101, v12, BuiltinType);
                    goto LABEL_119;
                  case 5:
                  case 19:
                    *(void *)&long long v99 = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::decode();
                    long long v101 = 0uLL;
                    uint64_t v102 = 0xFFFFFFFFLL;
                    sub_10003AFD4((uint64_t)v70, (uint64_t *)&v99, (uint64_t)&v101, v12, BuiltinType);
                    goto LABEL_119;
                  case 6:
                  case 20:
                    LODWORD(v99) = __p;
                    long long v101 = 0uLL;
                    uint64_t v102 = 0xFFFFFFFFLL;
                    sub_10003B0C8((uint64_t)v70, (unsigned int *)&v99, (uint64_t)&v101, v12, BuiltinType);
                    goto LABEL_119;
                  case 7:
                  case 9:
                  case 21:
                  case 23:
                    LODWORD(v99) = __p;
                    long long v101 = 0uLL;
                    uint64_t v102 = 0xFFFFFFFFLL;
                    sub_10003ACFC((uint64_t)v70, (unsigned int *)&v99, (uint64_t)&v101, v12, BuiltinType);
                    goto LABEL_119;
                  case 8:
                  case 22:
                    LODWORD(v99) = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::decode();
                    long long v101 = 0uLL;
                    uint64_t v102 = 0xFFFFFFFFLL;
                    sub_10003B0C8((uint64_t)v70, (unsigned int *)&v99, (uint64_t)&v101, v12, BuiltinType);
                    goto LABEL_119;
                  case 12:
                  case 26:
                    LOBYTE(v99) = __p != 0;
                    long long v101 = 0uLL;
                    uint64_t v102 = 0xFFFFFFFFLL;
                    sub_10003AEE0((uint64_t)v70, (unsigned __int8 *)&v99, (uint64_t)&v101, v12, BuiltinType);
                    goto LABEL_119;
                  default:
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
                    goto LABEL_153;
                }
              }
              if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, (unint64_t *)&__p))goto LABEL_74; {
              if (v12 || !(_BYTE)v80)
              }
                goto LABEL_152;
              goto LABEL_119;
            case 1:
              if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, (unint64_t *)&__p))goto LABEL_74; {
              if (v12 || !(_BYTE)v80)
              }
                goto LABEL_152;
              goto LABEL_119;
            case 2:
              if (v12 || !(_BYTE)v80) {
                goto LABEL_152;
              }
              goto LABEL_119;
            case 5:
              LODWORD(v101) = 0;
              if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, (unsigned int *)&v101))
              {
                std::string __p = (void *)v101;
                goto LABEL_74;
              }
              if (v12 || !(_BYTE)v80) {
                goto LABEL_152;
              }
              goto LABEL_119;
            default:
              goto LABEL_74;
          }
        case 13:
          LODWORD(__p) = 0;
          if (v76 < v77 && (*v76 & 0x80000000) == 0)
          {
            LODWORD(__p) = *v76++;
            goto LABEL_125;
          }
          if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, (unsigned int *)&__p))
          {
LABEL_125:
            long long v101 = 0uLL;
            uint64_t v102 = 0;
            char Raw = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadString();
            if (Raw)
            {
              long long v99 = 0uLL;
              uint64_t v100 = 0xFFFFFFFFLL;
              sub_100039100((uint64_t)v70, &v101);
            }
            if (SHIBYTE(v102) < 0)
            {
              int64_t v66 = (void *)v101;
LABEL_140:
              operator delete(v66);
              goto LABEL_141;
            }
            goto LABEL_141;
          }
          goto LABEL_117;
        case 14:
          LODWORD(__p) = 0;
          if (v76 < v77 && (*v76 & 0x80000000) == 0)
          {
            unsigned int v38 = *v76;
            LODWORD(__p) = v38;
            ++v76;
            goto LABEL_136;
          }
          if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, (unsigned int *)&__p))
          {
            unsigned int v38 = __p;
LABEL_136:
            sub_10003908C(&v101, v38);
            char Raw = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadRaw((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, (void *)v101, (int)__p);
            if (Raw)
            {
              long long v99 = 0uLL;
              uint64_t v100 = 0xFFFFFFFFLL;
              sub_1000391BC((uint64_t)v70, (uint64_t)&v101);
            }
LABEL_138:
            int64_t v66 = (void *)v101;
            if ((void)v101)
            {
              *((void *)&v101 + 1) = v101;
              goto LABEL_140;
            }
LABEL_141:
            if (Raw) {
              goto LABEL_119;
            }
            goto LABEL_117;
          }
          goto LABEL_117;
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          unsigned int v91 = 0;
          if (v76 >= v77 || *v76 < 0)
          {
            if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, &v91) & 1) == 0)goto LABEL_117; {
          }
            }
          else
          {
            unsigned int v91 = *v76++;
          }
          int UnpackedType = wis::reflect::getUnpackedType();
          int WireTypeForType = wis::reflect::getWireTypeForType();
          unint64_t v89 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75;
          int v69 = UnpackedType;
          int v90 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, v91);
          std::string __p = 0;
          uint64_t v87 = 0;
          unint64_t v88 = 0;
          while (1)
          {
            int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75);
            if (v17 < 1) {
              break;
            }
            uint64_t v18 = v87;
            if (v87 >= v88)
            {
              long long v20 = (char *)__p;
              uint64_t v21 = (v87 - (unsigned char *)__p) >> 3;
              unint64_t v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 61) {
                sub_10002B5E0();
              }
              uint64_t v23 = v88 - (unsigned char *)__p;
              if ((v88 - (unsigned char *)__p) >> 2 > v22) {
                unint64_t v22 = v23 >> 2;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v22;
              }
              if (v24)
              {
                uint64_t v25 = (char *)sub_100038500((uint64_t)&v88, v24);
                long long v20 = (char *)__p;
                uint64_t v18 = v87;
              }
              else
              {
                uint64_t v25 = 0;
              }
              unint64_t v26 = &v25[8 * v21];
              *(void *)unint64_t v26 = 0;
              int v19 = v26 + 8;
              while (v18 != v20)
              {
                uint64_t v27 = *((void *)v18 - 1);
                v18 -= 8;
                *((void *)v26 - 1) = v27;
                v26 -= 8;
              }
              std::string __p = v26;
              uint64_t v87 = v19;
              unint64_t v88 = &v25[8 * v24];
              if (v20) {
                operator delete(v20);
              }
            }
            else
            {
              *(void *)uint64_t v87 = 0;
              int v19 = v18 + 8;
            }
            uint64_t v87 = v19;
            switch(WireTypeForType)
            {
              case 0:
                uint64_t v28 = (unint64_t *)(v19 - 8);
                uint64_t v29 = v76;
                if (v76 >= v77 || *v76 < 0)
                {
                  char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, v28);
LABEL_44:
                  if ((Varint64Fallback & 1) == 0) {
                    goto LABEL_114;
                  }
                }
                else
                {
                  *uint64_t v28 = *v76;
                  int64_t v76 = v29 + 1;
                }
                break;
              case 1:
                char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, (unint64_t *)v19 - 1);
                goto LABEL_44;
              case 2:
                goto LABEL_114;
              case 5:
                LODWORD(v101) = 0;
                char LittleEndian32Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, (unsigned int *)&v101);
                *((void *)v87 - 1) = v101;
                if ((LittleEndian32Fallback & 1) == 0) {
                  goto LABEL_114;
                }
                continue;
              default:
                continue;
            }
          }
          switch(DecodingType)
          {
            case 15:
              sub_1000385BC((uint64_t *)&__p, &v99);
              long long v101 = 0uLL;
              uint64_t v102 = 0xFFFFFFFFLL;
              uint64_t Subfield = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC((uint64_t)v70, Subfield))
              {
                unsigned int v33 = v72;
                unsigned int v34 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v33, v34);
                sub_10003C2D0(v72, v69, (uint64_t *)&v99);
              }
              goto LABEL_111;
            case 16:
              sub_1000386C8((uint64_t *)&__p, &v99);
              long long v101 = 0uLL;
              uint64_t v102 = 0xFFFFFFFFLL;
              uint64_t v54 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC((uint64_t)v70, v54))
              {
                long long v55 = v72;
                unsigned int v56 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v55, v56);
                sub_10003D7B4(v72, v69, (uint64_t *)&v99);
              }
              goto LABEL_111;
            case 17:
              sub_100038538((uint64_t *)&__p, &v99);
              long long v101 = 0uLL;
              uint64_t v102 = 0xFFFFFFFFLL;
              uint64_t v49 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC((uint64_t)v70, v49)) {
                goto LABEL_108;
              }
              goto LABEL_111;
            case 18:
              sub_100038538((uint64_t *)&__p, &v99);
              long long v101 = 0uLL;
              uint64_t v102 = 0xFFFFFFFFLL;
              uint64_t v50 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC((uint64_t)v70, v50)) {
                goto LABEL_94;
              }
              goto LABEL_111;
            case 19:
              sub_1000387D4((uint64_t *)&__p, &v99);
              long long v101 = 0uLL;
              uint64_t v102 = 0xFFFFFFFFLL;
              uint64_t v45 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC((uint64_t)v70, v45)) {
                goto LABEL_108;
              }
              goto LABEL_111;
            case 20:
              sub_100038644((uint64_t *)&__p, &v99);
              long long v101 = 0uLL;
              uint64_t v102 = 0xFFFFFFFFLL;
              uint64_t v57 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC((uint64_t)v70, v57)) {
                goto LABEL_100;
              }
              goto LABEL_111;
            case 21:
              sub_100038644((uint64_t *)&__p, &v99);
              long long v101 = 0uLL;
              uint64_t v102 = 0xFFFFFFFFLL;
              uint64_t v58 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC((uint64_t)v70, v58)) {
                goto LABEL_110;
              }
              goto LABEL_111;
            case 22:
              sub_10003885C((uint64_t *)&__p, &v99);
              long long v101 = 0uLL;
              uint64_t v102 = 0xFFFFFFFFLL;
              uint64_t v51 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC((uint64_t)v70, v51))
              {
LABEL_100:
                long long v52 = v72;
                unsigned int v53 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v52, v53);
                sub_10003F9B0(v72, v69, (uint64_t *)&v99);
              }
              goto LABEL_111;
            case 23:
              sub_100038644((uint64_t *)&__p, &v99);
              long long v101 = 0uLL;
              uint64_t v102 = 0xFFFFFFFFLL;
              uint64_t v62 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC((uint64_t)v70, v62))
              {
LABEL_110:
                long long v63 = v72;
                unsigned int v64 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v63, v64);
                sub_10003CD54(v72, v69, (uint64_t *)&v99);
              }
              goto LABEL_111;
            case 24:
              sub_100038538((uint64_t *)&__p, &v99);
              long long v101 = 0uLL;
              uint64_t v102 = 0xFFFFFFFFLL;
              uint64_t v46 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC((uint64_t)v70, v46))
              {
LABEL_94:
                BOOL v47 = v72;
                unsigned int v48 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v47, v48);
                sub_10003B870(v72, v69, (uint64_t *)&v99);
              }
              goto LABEL_111;
            case 25:
              sub_100038538((uint64_t *)&__p, &v99);
              long long v101 = 0uLL;
              uint64_t v102 = 0xFFFFFFFFLL;
              uint64_t v59 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC((uint64_t)v70, v59))
              {
LABEL_108:
                uint64_t v60 = v72;
                unsigned int v61 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v60, v61);
                sub_10003EF50(v72, v69, (uint64_t *)&v99);
              }
LABEL_111:
              uint64_t v44 = (void *)v99;
              if (!(void)v99) {
                break;
              }
              *((void *)&v99 + 1) = v99;
LABEL_113:
              operator delete(v44);
              break;
            case 26:
              sub_100038750((uint64_t)&__p, &v99);
              long long v101 = 0uLL;
              uint64_t v102 = 0xFFFFFFFFLL;
              uint64_t v41 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC((uint64_t)v70, v41))
              {
                __int16 v42 = v72;
                unsigned int v43 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v42, v43);
                sub_10003E238(v72, v69, (uint64_t *)&v99);
              }
              uint64_t v44 = (void *)v99;
              if (!(void)v99) {
                break;
              }
              goto LABEL_113;
            default:
              uint64_t v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v68, "This should never happen, no matter what the input!");
          }
LABEL_114:
          if (__p)
          {
            uint64_t v87 = (char *)__p;
            operator delete(__p);
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(v89, v90);
          if (v17 <= 0) {
            goto LABEL_119;
          }
          goto LABEL_117;
        case 27:
          unsigned int v91 = 0;
          if (v76 >= v77 || *v76 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, &v91))
            {
LABEL_117:
              if (!v12 && (_BYTE)v80) {
                goto LABEL_119;
              }
LABEL_152:
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Parsing failed in metric");
LABEL_153:
            }
            unsigned int v37 = v91;
          }
          else
          {
            unsigned int v37 = *v76;
            unsigned int v91 = v37;
            ++v76;
          }
          std::string __p = &v75;
          LODWORD(v87) = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75, v37);
          ++HIDWORD(v82);
          unint64_t v89 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75;
          long long v101 = 0uLL;
          uint64_t v102 = 0xFFFFFFFFLL;
          long long v99 = v97;
          uint64_t v100 = v98;
          sub_100039268((uint64_t)v70, (uint64_t)&v75, &v101, v12, &v99);
          sub_10003A948(&v89);
          if (SHIDWORD(v82) >= 1) {
            --HIDWORD(v82);
          }
          sub_100039058((uint64_t)&__p);
          goto LABEL_119;
        default:
          goto LABEL_117;
      }
    }
  }
  if (!(_BYTE)v80) {
    goto LABEL_152;
  }
LABEL_119:
  sub_100038238((uint64_t)v74);
  if (v73) {
    sub_10000B678(v73);
  }
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v71);
  wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream::~ZeroCopyOutputStream((wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v70);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v75);
  if (v7) {
    operator delete(v7);
  }
}

void sub_100037EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  unsigned int v48 = *(void **)(v45 - 120);
  if (v48)
  {
    *(void *)(v45 - 112) = v48;
    operator delete(v48);
  }
  sub_1000381E8(&a12);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a33);
  if (v44) {
    operator delete(v44);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x100037C44);
  }
  _Unwind_Resume(a1);
}

void sub_1000381E8(void *a1)
{
  sub_100038238((uint64_t)(a1 + 12));
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    sub_10000B678(v2);
  }
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(a1 + 2));

  wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream::~ZeroCopyOutputStream((wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)a1);
}

uint64_t sub_100038238(uint64_t a1)
{
  sub_100038274(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100038274(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      char v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        sub_10000B678(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1000382BC(uint64_t result, int a2)
{
  if (a2 || !*(unsigned char *)(result + 36))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parsing failed in metric");
  }
  return result;
}

void sub_10003831C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100038330(wireless_diagnostics::google::protobuf::io::CodedInputStream *a1, unint64_t *a2)
{
  uint64_t v2 = (unsigned __int8 *)*((void *)a1 + 1);
  if ((unint64_t)v2 >= *((void *)a1 + 2) || (char)*v2 < 0) {
    return wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a1, a2);
  }
  *a2 = *v2;
  *((void *)a1 + 1) = v2 + 1;
  return 1;
}

uint64_t sub_100038360(wireless_diagnostics::google::protobuf::io::CodedInputStream *a1, unsigned int *a2)
{
  uint64_t v2 = (unsigned __int8 *)*((void *)a1 + 1);
  if ((unint64_t)v2 >= *((void *)a1 + 2) || (char)*v2 < 0) {
    return wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a1, a2);
  }
  *a2 = *v2;
  *((void *)a1 + 1) = v2 + 1;
  return 1;
}

uint64_t sub_100038390()
{
  uint64_t result = MetricFileMetadataHelper::getSubfield();
  if (result) {
    return (*(_WORD *)(result + 52) & 0x100) != 0 && *(unsigned char *)(result + 48) != 0;
  }
  return result;
}

uint64_t sub_1000383E4(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  if ((MetricFileMetadataHelper::isTopLevelField() & 1) == 0)
  {
    uint64_t Subfield = MetricFileMetadataHelper::getSubfield();
    if (Subfield)
    {
      if ((*(_WORD *)(Subfield + 52) & 0x100) != 0 && *(unsigned char *)(Subfield + 48)) {
        return 1;
      }
    }
  }
  do
  {
    int v5 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(a2);
    BOOL v4 = v5 > 0;
  }
  while (v5 >= 1 && !sub_1000361AC(a2));
  return v4;
}

wireless_diagnostics::google::protobuf::io::CodedInputStream **sub_1000384C4(wireless_diagnostics::google::protobuf::io::CodedInputStream **a1)
{
  int v2 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(*a1);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(*a1, v2);
  return a1;
}

void *sub_100038500(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10002A63C();
  }
  return operator new(8 * a2);
}

uint64_t *sub_100038538@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v2 = (uint64_t *)*result;
  char v3 = (uint64_t *)result[1];
  for (uint64_t i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_1000385A0(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000385BC@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (uint64_t i = a2; v2 != v3; v2 += 8)
  {
    wis::protobuf::NumberConverter<(wis::reflect::Type)1>::decode();
    uint64_t v5 = v4;
    uint64_t result = sub_1000389D4((uint64_t *)&i, &v5);
  }
  return result;
}

void sub_100038628(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100038644@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  for (uint64_t i = a2; v2 != v3; ++v2)
  {
    int v4 = *v2;
    uint64_t result = sub_100038AC4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_1000386AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000386C8@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (uint64_t i = a2; v2 != v3; v2 += 8)
  {
    wis::protobuf::NumberConverter<(wis::reflect::Type)2>::decode();
    int v5 = v4;
    uint64_t result = sub_100038BB4((uint64_t *)&i, &v5);
  }
  return result;
}

void sub_100038734(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100038750(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  if (*(void **)a1 != v3)
  {
    do
    {
      BOOL v5 = *v2 != 0;
      sub_100038CA4((uint64_t)a2, &v5);
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_1000387BC(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000387D4@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (uint64_t i = a2; v2 != v3; v2 += 8)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::decode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_100038840(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003885C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (uint64_t i = a2; v2 != v3; v2 += 8)
  {
    int v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::decode();
    uint64_t result = sub_100038AC4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_1000388C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000388E4(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  BOOL v5 = *(void **)(*a1 + 8);
  long long v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    unsigned int v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_10002B5E0();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_100038500((uint64_t)v6, v12);
      unsigned int v8 = *(void **)v4;
      BOOL v5 = *(void **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    __int16 v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *(void *)__int16 v14 = *a2;
    uint64_t v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *BOOL v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

uint64_t *sub_1000389D4(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  BOOL v5 = *(void **)(*a1 + 8);
  long long v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    unsigned int v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_10002B5E0();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_100038500((uint64_t)v6, v12);
      unsigned int v8 = *(void **)v4;
      BOOL v5 = *(void **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    __int16 v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *(void *)__int16 v14 = *a2;
    uint64_t v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *BOOL v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

uint64_t *sub_100038AC4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  BOOL v5 = *(_DWORD **)(*a1 + 8);
  long long v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    unsigned int v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_10002B5E0();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_10001E460((uint64_t)v6, v12);
      unsigned int v8 = *(_DWORD **)v4;
      BOOL v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    __int16 v14 = &v13[4 * v9];
    int v15 = &v13[4 * v12];
    *(_DWORD *)__int16 v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *BOOL v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

uint64_t *sub_100038BB4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  BOOL v5 = *(_DWORD **)(*a1 + 8);
  long long v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    unsigned int v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_10002B5E0();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_10001E460((uint64_t)v6, v12);
      unsigned int v8 = *(_DWORD **)v4;
      BOOL v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    __int16 v14 = &v13[4 * v9];
    int v15 = &v13[4 * v12];
    *(_DWORD *)__int16 v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *BOOL v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void sub_100038CA4(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      sub_10002B5E0();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_100038D4C((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  unsigned int v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void sub_100038D4C(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_10002B5E0();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    sub_100038E0C(&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    unsigned int v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    sub_100038E54(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    unint64_t v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_100038DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100038E0C(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_10002B5E0();
  }
  uint64_t result = sub_100038500((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_100038E54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  sub_100038EF8(&v16, &v14, &v12, (uint64_t)&v11);
}

void sub_100038EF8(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  sub_100038F88((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_100038F88(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    uint64_t *v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

uint64_t sub_100039058(uint64_t a1)
{
  return a1;
}

void *sub_10003908C(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10001495C(a1, a2);
    unint64_t v4 = (char *)a1[1];
    int v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1000390E4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100039100(uint64_t a1, void *a2)
{
  uint64_t Subfield = MetricFileMetadataHelper::getSubfield();
  uint64_t result = sub_10003B1BC(a1, Subfield);
  if ((result & 1) == 0)
  {
    uint64_t v6 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    unsigned int v7 = wis::reflect::encodeTag();
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v6, v7);
    int v8 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    unint64_t v9 = a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      unint64_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void *)*a2;
      unint64_t v10 = v9;
    }
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(v8, v10);
    return wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(v8, a2, v10);
  }
  return result;
}

uint64_t sub_1000391BC(uint64_t a1, uint64_t a2)
{
  uint64_t Subfield = MetricFileMetadataHelper::getSubfield();
  uint64_t result = sub_10003B1BC(a1, Subfield);
  if ((result & 1) == 0)
  {
    uint64_t v6 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    unsigned int v7 = wis::reflect::encodeTag();
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v6, v7);
    int v8 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    unint64_t v9 = *(const void **)a2;
    unint64_t v10 = *(void *)(a2 + 8) - *(void *)a2;
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(v8, v10);
    return wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(v8, v9, v10);
  }
  return result;
}

uint64_t sub_100039268(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5)
{
  long long v111 = *a3;
  uint64_t v112 = *((void *)a3 + 2);
  long long v117 = *a5;
  long long v118 = (char *)*((void *)a5 + 2);
  if ((MetricFileMetadataHelper::isTopLevelField() & 1) == 0)
  {
    *(_OWORD *)long long buf = v117;
    xpc_object_t v150 = v118;
    uint64_t Field = MetadataHelper::getField();
    if (sub_10003B1BC(a1, Field)) {
      return 1;
    }
  }
  std::string __p = 0;
  v115 = 0;
  uint64_t v116 = 0;
  sub_100009298(v113, (uint64_t)&__p);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)&v111, (wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v113);
  uint64_t v107 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = &v111;
  while (1)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2);
    BOOL v8 = v10 < 1;
    if (v10 < 1) {
      break;
    }
    long long v109 = *a5;
    uint64_t v110 = (char *)*((void *)a5 + 2);
    int v11 = *(char **)(a2 + 8);
    if ((unint64_t)v11 >= *(void *)(a2 + 16) || *v11 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2);
      *(_DWORD *)(a2 + 32) = TagFallback;
      if (TagFallback) {
        goto LABEL_9;
      }
LABEL_15:
      if (!*(unsigned char *)(a2 + 36)) {
        goto LABEL_183;
      }
    }
    else
    {
      unint64_t TagFallback = *v11;
      *(_DWORD *)(a2 + 32) = TagFallback;
      *(void *)(a2 + 8) = v11 + 1;
      if (!TagFallback) {
        goto LABEL_15;
      }
LABEL_9:
      unint64_t v13 = wis::reflect::decodeTag((wis::reflect *)TagFallback, v9);
      uint64_t v14 = HIDWORD(v13);
      *(_OWORD *)long long buf = v109;
      xpc_object_t v150 = v110;
      MetricFileMetadataHelper::getSubfieldType();
      *(_OWORD *)long long buf = v124;
      xpc_object_t v150 = v125;
      int BuiltinType = MetadataHelper::getBuiltinType();
      char v16 = v13;
      int DecodingType = wis::reflect::getDecodingType();
      switch(DecodingType)
      {
        case 0:
          switch(v16)
          {
            case 0:
              *(void *)xpc_object_t v146 = 0;
              int v40 = *(char **)(a2 + 8);
              if ((unint64_t)v40 >= *(void *)(a2 + 16) || *v40 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, (unint64_t *)v146))goto LABEL_126; {
              }
                }
              else
              {
                *(void *)xpc_object_t v146 = *v40;
                *(void *)(a2 + 8) = v40 + 1;
              }
              uint64_t v96 = *(NSObject **)(qword_1001D8080 + 96);
              if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = v14;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v14;
                *(_WORD *)&buf[14] = 1024;
                LODWORD(v150) = 0;
LABEL_175:
                _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_INFO, "#I  -- stripping unrecognized field %u (0x%x) with wire type %hhu", buf, 0x14u);
              }
              continue;
            case 1:
              *(void *)xpc_object_t v146 = 0;
              if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, (unint64_t *)v146))goto LABEL_126; {
              uint64_t v96 = *(NSObject **)(qword_1001D8080 + 96);
              }
              if (!os_log_type_enabled(v96, OS_LOG_TYPE_INFO)) {
                continue;
              }
              *(_DWORD *)long long buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v14;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v14;
              *(_WORD *)&buf[14] = 1024;
              int v97 = 1;
              goto LABEL_161;
            case 2:
              v144[0] = 0;
              uint64_t v94 = *(char **)(a2 + 8);
              if ((unint64_t)v94 >= *(void *)(a2 + 16) || *v94 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, v144))goto LABEL_126; {
                unsigned int v95 = v144[0];
                }
              }
              else
              {
                unsigned int v95 = *v94;
                v144[0] = v95;
                *(void *)(a2 + 8) = v94 + 1;
              }
              sub_10003908C(v146, v95);
              char Raw = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadRaw((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, *(void **)v146, v144[0]);
              if (Raw)
              {
                uint64_t v98 = *(NSObject **)(qword_1001D8080 + 96);
                if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)long long buf = 67109632;
                  *(_DWORD *)&uint8_t buf[4] = v14;
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v14;
                  *(_WORD *)&buf[14] = 2048;
                  xpc_object_t v150 = (char *)(*(void *)&v146[2] - *(void *)v146);
                  _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_INFO, "#I  -- stripping unrecognized field %u (0x%x) of length %zd bytes", buf, 0x18u);
                }
              }
              break;
            case 5:
              v146[0] = 0;
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, v146))goto LABEL_126; {
              uint64_t v96 = *(NSObject **)(qword_1001D8080 + 96);
              }
              if (!os_log_type_enabled(v96, OS_LOG_TYPE_INFO)) {
                continue;
              }
              *(_DWORD *)long long buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v14;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v14;
              *(_WORD *)&buf[14] = 1024;
              int v97 = 5;
LABEL_161:
              LODWORD(v150) = v97;
              goto LABEL_175;
            default:
              goto LABEL_126;
          }
          goto LABEL_167;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
          unint64_t v123 = 0;
          switch(v16)
          {
            case 0:
              uint64_t v18 = *(char **)(a2 + 8);
              if ((unint64_t)v18 < *(void *)(a2 + 16) && (*v18 & 0x80000000) == 0)
              {
                unint64_t v123 = *v18;
                *(void *)(a2 + 8) = v18 + 1;
LABEL_78:
                switch(BuiltinType)
                {
                  case 1:
                  case 15:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)1>::decode();
                    unint64_t v148 = v46;
                    *(_OWORD *)xpc_object_t v146 = v109;
                    v147 = v110;
                    char v47 = sub_10003AC0C(a1);
                    goto LABEL_91;
                  case 2:
                  case 16:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)2>::decode();
                    LODWORD(v148) = v48;
                    long long v142 = v109;
                    v143 = v110;
                    char v47 = sub_10003ADF0(a1);
                    goto LABEL_91;
                  case 3:
                  case 17:
                    unint64_t v148 = v123;
                    long long v138 = v109;
                    xpc_object_t v139 = v110;
                    char v47 = sub_10003AFD4(a1, (uint64_t *)&v148, (uint64_t)&v138, v14, BuiltinType);
                    goto LABEL_91;
                  case 4:
                  case 18:
                    unint64_t v148 = v123;
                    long long v134 = v109;
                    std::string v135 = v110;
                    char v47 = sub_10003AB18(a1, (uint64_t *)&v148, (uint64_t)&v134, v14, BuiltinType);
                    goto LABEL_91;
                  case 5:
                  case 19:
                    unint64_t v148 = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::decode();
                    long long v136 = v109;
                    xpc_object_t v137 = v110;
                    char v47 = sub_10003AFD4(a1, (uint64_t *)&v148, (uint64_t)&v136, v14, BuiltinType);
                    goto LABEL_91;
                  case 6:
                  case 20:
                    LODWORD(v148) = v123;
                    long long v132 = v109;
                    v133 = v110;
                    char v47 = sub_10003B0C8(a1, (unsigned int *)&v148, (uint64_t)&v132, v14, BuiltinType);
                    goto LABEL_91;
                  case 7:
                  case 21:
                    LODWORD(v148) = v123;
                    long long v128 = v109;
                    uint64_t v129 = v110;
                    char v47 = sub_10003ACFC(a1, (unsigned int *)&v148, (uint64_t)&v128, v14, BuiltinType);
                    goto LABEL_91;
                  case 8:
                  case 22:
                    LODWORD(v148) = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::decode();
                    long long v130 = v109;
                    xpc_object_t v131 = v110;
                    char v47 = sub_10003B0C8(a1, (unsigned int *)&v148, (uint64_t)&v130, v14, BuiltinType);
                    goto LABEL_91;
                  case 9:
                  case 23:
                    LODWORD(v148) = v123;
                    *(_OWORD *)v144 = v109;
                    xpc_object_t v145 = v110;
                    char v47 = sub_10003ACFC(a1, (unsigned int *)&v148, (uint64_t)v144, v14, BuiltinType);
                    goto LABEL_91;
                  case 10:
                  case 24:
                    unint64_t v148 = v123;
                    *(_OWORD *)long long buf = v109;
                    xpc_object_t v150 = v110;
                    char v47 = sub_10003AB18(a1, (uint64_t *)&v148, (uint64_t)buf, v14, BuiltinType);
                    goto LABEL_91;
                  case 11:
                  case 25:
                    unint64_t v148 = v123;
                    long long v126 = v109;
                    unint64_t v127 = v110;
                    char v47 = sub_10003AFD4(a1, (uint64_t *)&v148, (uint64_t)&v126, v14, BuiltinType);
                    goto LABEL_91;
                  case 12:
                  case 26:
                    LOBYTE(v148) = v123 != 0;
                    *(_OWORD *)xpc_object_t v140 = v109;
                    xpc_object_t v141 = v110;
                    char v47 = sub_10003AEE0(a1, (unsigned __int8 *)&v148, (uint64_t)v140, v14, BuiltinType);
LABEL_91:
                    if ((v47 & 1) == 0) {
                      goto LABEL_177;
                    }
                    continue;
                  default:
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
                    goto LABEL_184;
                }
              }
              if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, &v123))goto LABEL_78; {
              if (v14 || !*(unsigned char *)(a2 + 36))
              }
              {
LABEL_183:
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Parsing failed in metric");
LABEL_184:
              }
              return result;
            case 1:
              if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, &v123))goto LABEL_78; {
              if (v14 || !*(unsigned char *)(a2 + 36))
              }
                goto LABEL_183;
              continue;
            case 2:
              if (v14 || !*(unsigned char *)(a2 + 36)) {
                goto LABEL_183;
              }
              continue;
            case 5:
              *(_DWORD *)long long buf = 0;
              if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, (unsigned int *)buf))
              {
                unint64_t v123 = *(unsigned int *)buf;
                goto LABEL_78;
              }
              if (v14 || !*(unsigned char *)(a2 + 36)) {
                goto LABEL_183;
              }
              break;
            default:
              goto LABEL_78;
          }
          break;
        case 13:
          v144[0] = 0;
          uint64_t v41 = *(char **)(a2 + 8);
          if ((unint64_t)v41 >= *(void *)(a2 + 16) || *v41 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, v144))goto LABEL_126; {
          }
            }
          else
          {
            v144[0] = *v41;
            *(void *)(a2 + 8) = v41 + 1;
          }
          memset(v146, 0, sizeof(v146));
          v147 = 0;
          char Raw = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadString();
          if (Raw)
          {
            *(_OWORD *)long long buf = v109;
            xpc_object_t v150 = v110;
            uint64_t Subfield = MetricFileMetadataHelper::getSubfield();
            if (!sub_10003B1BC(a1, Subfield))
            {
              uint64_t v75 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
              unsigned int v76 = wis::reflect::encodeTag();
              wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v75, v76);
              uint64_t v77 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
              int v78 = SHIBYTE(v147);
              uint64_t v79 = *(unsigned int **)v146;
              if (SHIBYTE(v147) >= 0) {
                unint64_t v80 = HIBYTE(v147);
              }
              else {
                unint64_t v80 = *(void *)&v146[2];
              }
              wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48), v80);
              if (v78 >= 0) {
                int v81 = v146;
              }
              else {
                int v81 = v79;
              }
              wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(v77, v81, v80);
            }
          }
          if ((SHIBYTE(v147) & 0x80000000) == 0) {
            goto LABEL_170;
          }
          long long v82 = *(void **)v146;
          goto LABEL_169;
        case 14:
          v144[0] = 0;
          uint64_t v44 = *(char **)(a2 + 8);
          if ((unint64_t)v44 >= *(void *)(a2 + 16) || *v44 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, v144))goto LABEL_126; {
            unsigned int v45 = v144[0];
            }
          }
          else
          {
            unsigned int v45 = *v44;
            v144[0] = v45;
            *(void *)(a2 + 8) = v44 + 1;
          }
          sub_10003908C(v146, v45);
          char Raw = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadRaw((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, *(void **)v146, v144[0]);
          if (Raw)
          {
            *(_OWORD *)long long buf = v109;
            xpc_object_t v150 = v110;
            uint64_t v88 = MetricFileMetadataHelper::getSubfield();
            if (!sub_10003B1BC(a1, v88))
            {
              unint64_t v89 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
              unsigned int v90 = wis::reflect::encodeTag();
              wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v89, v90);
              unsigned int v91 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
              long long v92 = *(const void **)v146;
              int v93 = v146[2] - v146[0];
              wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(v91, *(void *)&v146[2] - *(void *)v146);
              wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(v91, v92, v93);
            }
          }
LABEL_167:
          long long v82 = *(void **)v146;
          if (*(void *)v146)
          {
            *(void *)&v146[2] = *(void *)v146;
LABEL_169:
            operator delete(v82);
          }
LABEL_170:
          if ((Raw & 1) == 0) {
            goto LABEL_126;
          }
          continue;
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          v140[0] = 0;
          int v19 = *(char **)(a2 + 8);
          if ((unint64_t)v19 >= *(void *)(a2 + 16) || *v19 < 0)
          {
            if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, v140) & 1) == 0)goto LABEL_126; {
          }
            }
          else
          {
            v140[0] = *v19;
            *(void *)(a2 + 8) = v19 + 1;
          }
          int UnpackedType = wis::reflect::getUnpackedType();
          int WireTypeForType = wis::reflect::getWireTypeForType();
          *(void *)&long long v142 = a2;
          DWORD2(v142) = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, v140[0]);
          memset(v144, 0, sizeof(v144));
          xpc_object_t v145 = 0;
          while (1)
          {
            int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2);
            if (v22 < 1) {
              break;
            }
            uint64_t v23 = *(char **)&v144[2];
            if (*(void *)&v144[2] >= (unint64_t)v145)
            {
              uint64_t v25 = *(char **)v144;
              uint64_t v26 = (uint64_t)(*(void *)&v144[2] - *(void *)v144) >> 3;
              unint64_t v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 61) {
                sub_10002B5E0();
              }
              uint64_t v28 = (uint64_t)&v145[-*(void *)v144];
              if ((uint64_t)&v145[-*(void *)v144] >> 2 > v27) {
                unint64_t v27 = v28 >> 2;
              }
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v29 = v27;
              }
              if (v29)
              {
                __int16 v30 = (char *)sub_100038500((uint64_t)&v145, v29);
                uint64_t v25 = *(char **)v144;
                uint64_t v23 = *(char **)&v144[2];
              }
              else
              {
                __int16 v30 = 0;
              }
              int v31 = &v30[8 * v26];
              *(void *)int v31 = 0;
              unint64_t v24 = v31 + 8;
              while (v23 != v25)
              {
                uint64_t v32 = *((void *)v23 - 1);
                v23 -= 8;
                *((void *)v31 - 1) = v32;
                v31 -= 8;
              }
              *(void *)v144 = v31;
              *(void *)&v144[2] = v24;
              xpc_object_t v145 = &v30[8 * v29];
              if (v25) {
                operator delete(v25);
              }
            }
            else
            {
              **(void **)&v144[2] = 0;
              unint64_t v24 = v23 + 8;
            }
            *(void *)&v144[2] = v24;
            switch(WireTypeForType)
            {
              case 0:
                unsigned int v33 = v24 - 1;
                unsigned int v34 = *(char **)(a2 + 8);
                if ((unint64_t)v34 >= *(void *)(a2 + 16) || *v34 < 0)
                {
                  char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, v33);
LABEL_47:
                  if ((Varint64Fallback & 1) == 0) {
                    goto LABEL_123;
                  }
                }
                else
                {
                  *unsigned int v33 = *v34;
                  *(void *)(a2 + 8) = v34 + 1;
                }
                break;
              case 1:
                char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, v24 - 1);
                goto LABEL_47;
              case 2:
                goto LABEL_123;
              case 5:
                *(_DWORD *)long long buf = 0;
                char LittleEndian32Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, (unsigned int *)buf);
                *(void *)(*(void *)&v144[2] - 8) = *(unsigned int *)buf;
                if ((LittleEndian32Fallback & 1) == 0) {
                  goto LABEL_123;
                }
                continue;
              default:
                continue;
            }
          }
          switch(DecodingType)
          {
            case 15:
              sub_1000385BC((uint64_t *)v144, v146);
              *(_OWORD *)long long buf = v109;
              xpc_object_t v150 = v110;
              uint64_t v37 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC(a1, v37))
              {
                unsigned int v38 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
                unsigned int v39 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v38, v39);
                sub_10003C2D0(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48), UnpackedType, (uint64_t *)v146);
              }
              goto LABEL_120;
            case 16:
              sub_1000386C8((uint64_t *)v144, v146);
              *(_OWORD *)long long buf = v109;
              xpc_object_t v150 = v110;
              uint64_t v62 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC(a1, v62))
              {
                long long v63 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
                unsigned int v64 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v63, v64);
                sub_10003D7B4(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48), UnpackedType, (uint64_t *)v146);
              }
              goto LABEL_120;
            case 17:
              sub_100038538((uint64_t *)v144, v146);
              *(_OWORD *)long long buf = v109;
              xpc_object_t v150 = v110;
              uint64_t v57 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC(a1, v57)) {
                goto LABEL_117;
              }
              goto LABEL_120;
            case 18:
              sub_100038538((uint64_t *)v144, v146);
              *(_OWORD *)long long buf = v109;
              xpc_object_t v150 = v110;
              uint64_t v58 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC(a1, v58)) {
                goto LABEL_103;
              }
              goto LABEL_120;
            case 19:
              sub_1000387D4((uint64_t *)v144, v146);
              *(_OWORD *)long long buf = v109;
              xpc_object_t v150 = v110;
              uint64_t v53 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC(a1, v53)) {
                goto LABEL_117;
              }
              goto LABEL_120;
            case 20:
              sub_100038644((uint64_t *)v144, v146);
              *(_OWORD *)long long buf = v109;
              xpc_object_t v150 = v110;
              uint64_t v65 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC(a1, v65)) {
                goto LABEL_109;
              }
              goto LABEL_120;
            case 21:
              sub_100038644((uint64_t *)v144, v146);
              *(_OWORD *)long long buf = v109;
              xpc_object_t v150 = v110;
              uint64_t v66 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC(a1, v66)) {
                goto LABEL_119;
              }
              goto LABEL_120;
            case 22:
              sub_10003885C((uint64_t *)v144, v146);
              *(_OWORD *)long long buf = v109;
              xpc_object_t v150 = v110;
              uint64_t v59 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC(a1, v59))
              {
LABEL_109:
                uint64_t v60 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
                unsigned int v61 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v60, v61);
                sub_10003F9B0(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48), UnpackedType, (uint64_t *)v146);
              }
              goto LABEL_120;
            case 23:
              sub_100038644((uint64_t *)v144, v146);
              *(_OWORD *)long long buf = v109;
              xpc_object_t v150 = v110;
              uint64_t v70 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC(a1, v70))
              {
LABEL_119:
                int64_t v71 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
                unsigned int v72 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v71, v72);
                sub_10003CD54(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48), UnpackedType, (uint64_t *)v146);
              }
              goto LABEL_120;
            case 24:
              sub_100038538((uint64_t *)v144, v146);
              *(_OWORD *)long long buf = v109;
              xpc_object_t v150 = v110;
              uint64_t v54 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC(a1, v54))
              {
LABEL_103:
                long long v55 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
                unsigned int v56 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v55, v56);
                sub_10003B870(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48), UnpackedType, (uint64_t *)v146);
              }
              goto LABEL_120;
            case 25:
              sub_100038538((uint64_t *)v144, v146);
              *(_OWORD *)long long buf = v109;
              xpc_object_t v150 = v110;
              uint64_t v67 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC(a1, v67))
              {
LABEL_117:
                uint64_t v68 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
                unsigned int v69 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v68, v69);
                sub_10003EF50(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48), UnpackedType, (uint64_t *)v146);
              }
LABEL_120:
              long long v52 = *(void **)v146;
              if (!*(void *)v146) {
                break;
              }
              *(void *)&v146[2] = *(void *)v146;
LABEL_122:
              operator delete(v52);
              break;
            case 26:
              sub_100038750((uint64_t)v144, v146);
              *(_OWORD *)long long buf = v109;
              xpc_object_t v150 = v110;
              uint64_t v49 = MetricFileMetadataHelper::getSubfield();
              if (!sub_10003B1BC(a1, v49))
              {
                uint64_t v50 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
                unsigned int v51 = wis::reflect::encodeTag();
                wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v50, v51);
                sub_10003E238(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48), UnpackedType, (uint64_t *)v146);
              }
              long long v52 = *(void **)v146;
              if (!*(void *)v146) {
                break;
              }
              goto LABEL_122;
            default:
              v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v106, "This should never happen, no matter what the input!");
          }
LABEL_123:
          if (*(void *)v144)
          {
            *(void *)&v144[2] = *(void *)v144;
            operator delete(*(void **)v144);
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v142, SDWORD2(v142));
          if (v22 > 0) {
            goto LABEL_126;
          }
          continue;
        case 27:
          v144[0] = 0;
          __int16 v42 = *(char **)(a2 + 8);
          if ((unint64_t)v42 >= *(void *)(a2 + 16) || *v42 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, v144))
            {
LABEL_126:
              if (v14 || !*(unsigned char *)(a2 + 36)) {
                goto LABEL_183;
              }
              continue;
            }
            int v43 = v144[0];
          }
          else
          {
            int v43 = *v42;
            v144[0] = v43;
            *(void *)(a2 + 8) = v42 + 1;
          }
          *(void *)long long buf = a2;
          int v83 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, v43);
          *(_DWORD *)&uint8_t buf[8] = v83;
          ++*(_DWORD *)(a2 + 56);
          *(void *)xpc_object_t v146 = a2;
          long long v121 = v109;
          v122 = v110;
          long long v119 = v124;
          long long v120 = v125;
          char v84 = sub_100039268(a1, a2, &v121, v14, &v119);
          sub_100040410((wireless_diagnostics::google::protobuf::io::CodedInputStream **)v146);
          int v85 = *(_DWORD *)(a2 + 56);
          BOOL v86 = __OFSUB__(v85, 1);
          int v87 = v85 - 1;
          if (v87 < 0 == v86) {
            *(_DWORD *)(a2 + 56) = v87;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a2, v83);
          if ((v84 & 1) == 0) {
            goto LABEL_177;
          }
          continue;
        default:
          goto LABEL_126;
      }
    }
  }
  *(void *)(a1 + 48) = v107;
LABEL_177:
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)&v111);
  wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream::~ZeroCopyOutputStream((wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v113);
  if (v10 <= 0)
  {
    long long v99 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    unsigned int v100 = wis::reflect::encodeTag();
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v99, v100);
    long long v101 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    uint64_t v102 = __p;
    int v103 = v115 - __p;
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(v101, v115 - (unsigned char *)__p);
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(v101, v102, v103);
  }
  if (__p)
  {
    v115 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_10003A684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27)
{
  __cxa_free_exception(v27);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)&a19);
  wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream::~ZeroCopyOutputStream((wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)&a24);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

wireless_diagnostics::google::protobuf::io::CodedInputStream **sub_10003A948(wireless_diagnostics::google::protobuf::io::CodedInputStream **a1)
{
  int v2 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(*a1);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(*a1, v2);
  return a1;
}

void sub_10003A984(int a1, int a2)
{
  unint64_t v4 = *(NSObject **)(qword_1001D8080 + 96);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109632;
    v5[1] = a1;
    __int16 v6 = 1024;
    int v7 = a1;
    __int16 v8 = 1024;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#I  -- stripping unrecognized field %u (0x%x) with wire type %hhu", (uint8_t *)v5, 0x14u);
  }
}

void sub_10003AA4C(uint64_t a1, int a2)
{
  unint64_t v4 = *(NSObject **)(qword_1001D8080 + 96);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109632;
    v5[1] = a2;
    __int16 v6 = 1024;
    int v7 = a2;
    __int16 v8 = 2048;
    uint64_t v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#I  -- stripping unrecognized field %u (0x%x) of length %zd bytes", (uint8_t *)v5, 0x18u);
  }
}

uint64_t sub_10003AB18(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t Subfield = MetricFileMetadataHelper::getSubfield();
  if (!sub_10003B1BC(a1, Subfield))
  {
    uint64_t v9 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    wis::reflect::getWireTypeForType();
    unsigned int v10 = wis::reflect::encodeTag();
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v9, v10);
    int v11 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    uint64_t v12 = sub_10003B200(a5, *a2);
    int WireTypeForType = wis::reflect::getWireTypeForType();
    switch(WireTypeForType)
    {
      case 5:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32(v11, v12);
        break;
      case 1:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64(v11, v12);
        break;
      case 0:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(v11, v12);
        break;
    }
  }
  return 1;
}

uint64_t sub_10003AC0C(uint64_t a1)
{
  uint64_t Subfield = MetricFileMetadataHelper::getSubfield();
  if (!sub_10003B1BC(a1, Subfield))
  {
    unint64_t v3 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    wis::reflect::getWireTypeForType();
    unsigned int v4 = wis::reflect::encodeTag();
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v3, v4);
    int v5 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    uint64_t v6 = wis::protobuf::NumberConverter<(wis::reflect::Type)1>::encode();
    int WireTypeForType = wis::reflect::getWireTypeForType();
    switch(WireTypeForType)
    {
      case 5:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32(v5, v6);
        break;
      case 1:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64(v5, v6);
        break;
      case 0:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(v5, v6);
        break;
    }
  }
  return 1;
}

uint64_t sub_10003ACFC(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t Subfield = MetricFileMetadataHelper::getSubfield();
  if (!sub_10003B1BC(a1, Subfield))
  {
    uint64_t v9 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    wis::reflect::getWireTypeForType();
    unsigned int v10 = wis::reflect::encodeTag();
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v9, v10);
    int v11 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    uint64_t v12 = sub_10003B350(a5, *a2);
    int WireTypeForType = wis::reflect::getWireTypeForType();
    switch(WireTypeForType)
    {
      case 5:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32(v11, v12);
        break;
      case 1:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64(v11, v12);
        break;
      case 0:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(v11, v12);
        break;
    }
  }
  return 1;
}

uint64_t sub_10003ADF0(uint64_t a1)
{
  uint64_t Subfield = MetricFileMetadataHelper::getSubfield();
  if (!sub_10003B1BC(a1, Subfield))
  {
    unint64_t v3 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    wis::reflect::getWireTypeForType();
    unsigned int v4 = wis::reflect::encodeTag();
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v3, v4);
    int v5 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    uint64_t v6 = wis::protobuf::NumberConverter<(wis::reflect::Type)2>::encode();
    int WireTypeForType = wis::reflect::getWireTypeForType();
    switch(WireTypeForType)
    {
      case 5:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32(v5, v6);
        break;
      case 1:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64(v5, v6);
        break;
      case 0:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(v5, v6);
        break;
    }
  }
  return 1;
}

uint64_t sub_10003AEE0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t Subfield = MetricFileMetadataHelper::getSubfield();
  if (!sub_10003B1BC(a1, Subfield))
  {
    uint64_t v9 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    wis::reflect::getWireTypeForType();
    unsigned int v10 = wis::reflect::encodeTag();
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v9, v10);
    int v11 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    uint64_t v12 = sub_10003B49C(a5, *a2);
    int WireTypeForType = wis::reflect::getWireTypeForType();
    switch(WireTypeForType)
    {
      case 5:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32(v11, v12);
        break;
      case 1:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64(v11, v12);
        break;
      case 0:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(v11, v12);
        break;
    }
  }
  return 1;
}

uint64_t sub_10003AFD4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t Subfield = MetricFileMetadataHelper::getSubfield();
  if (!sub_10003B1BC(a1, Subfield))
  {
    uint64_t v9 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    wis::reflect::getWireTypeForType();
    unsigned int v10 = wis::reflect::encodeTag();
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v9, v10);
    int v11 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    uint64_t v12 = sub_10003B5D4(a5, *a2);
    int WireTypeForType = wis::reflect::getWireTypeForType();
    switch(WireTypeForType)
    {
      case 5:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32(v11, v12);
        break;
      case 1:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64(v11, v12);
        break;
      case 0:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(v11, v12);
        break;
    }
  }
  return 1;
}

uint64_t sub_10003B0C8(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t Subfield = MetricFileMetadataHelper::getSubfield();
  if (!sub_10003B1BC(a1, Subfield))
  {
    uint64_t v9 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    wis::reflect::getWireTypeForType();
    unsigned int v10 = wis::reflect::encodeTag();
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(v9, v10);
    int v11 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48);
    uint64_t v12 = sub_10003B724(a5, *a2);
    int WireTypeForType = wis::reflect::getWireTypeForType();
    switch(WireTypeForType)
    {
      case 5:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32(v11, v12);
        break;
      case 1:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64(v11, v12);
        break;
      case 0:
        wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(v11, v12);
        break;
    }
  }
  return 1;
}

BOOL sub_10003B1BC(uint64_t a1, uint64_t a2)
{
  return !a2
      || !*(unsigned char *)(a1 + 160) && (*(_WORD *)(a2 + 52) & 0x100) != 0 && *(unsigned char *)(a2 + 48)
      || !*(unsigned char *)(a1 + 161) && (*(_WORD *)(a2 + 52) & 0x200) != 0 && *(unsigned char *)(a2 + 49);
}

uint64_t sub_10003B200(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 3:
    case 4:
    case 10:
    case 11:
    case 17:
    case 18:
    case 24:
    case 25:
      return a2;
    case 5:
    case 19:
      return wis::protobuf::NumberConverter<(wis::reflect::Type)5>::encode();
    case 6:
    case 20:
      return (int)a2;
    case 7:
    case 9:
    case 21:
    case 23:
      return a2;
    case 8:
    case 22:
      return wis::protobuf::NumberConverter<(wis::reflect::Type)8>::encode();
    case 12:
    case 26:
      return a2 != 0;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
  }
}

void sub_10003B2DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003B350(int a1, unsigned int a2)
{
  switch(a1)
  {
    case 3:
    case 4:
    case 7:
    case 9:
    case 10:
    case 11:
    case 17:
    case 18:
    case 21:
    case 23:
    case 24:
    case 25:
      uint64_t result = a2;
      break;
    case 5:
    case 19:
      uint64_t result = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::encode();
      break;
    case 6:
    case 20:
      uint64_t result = (int)a2;
      break;
    case 8:
    case 22:
      uint64_t result = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::encode();
      break;
    case 12:
    case 26:
      uint64_t result = a2 != 0;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
  }
  return result;
}

void sub_10003B428(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003B49C(int a1, unsigned int a2)
{
  switch(a1)
  {
    case 3:
    case 4:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 17:
    case 18:
    case 20:
    case 21:
    case 23:
    case 24:
    case 25:
    case 26:
      uint64_t result = a2;
      break;
    case 5:
    case 19:
      uint64_t result = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::encode();
      break;
    case 8:
    case 22:
      uint64_t result = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::encode();
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
  }
  return result;
}

void sub_10003B560(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003B5D4(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 3:
    case 4:
    case 10:
    case 11:
    case 17:
    case 18:
    case 24:
    case 25:
      return a2;
    case 5:
    case 19:
      return wis::protobuf::NumberConverter<(wis::reflect::Type)5>::encode();
    case 6:
    case 20:
      return (int)a2;
    case 7:
    case 9:
    case 21:
    case 23:
      return a2;
    case 8:
    case 22:
      return wis::protobuf::NumberConverter<(wis::reflect::Type)8>::encode();
    case 12:
    case 26:
      return a2 != 0;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
  }
}

void sub_10003B6B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003B724(int a1, unsigned int a2)
{
  switch(a1)
  {
    case 3:
    case 4:
    case 6:
    case 10:
    case 11:
    case 17:
    case 18:
    case 20:
    case 24:
    case 25:
      uint64_t result = (int)a2;
      break;
    case 5:
    case 19:
      uint64_t result = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::encode();
      break;
    case 7:
    case 9:
    case 21:
    case 23:
      uint64_t result = a2;
      break;
    case 8:
    case 22:
      uint64_t result = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::encode();
      break;
    case 12:
    case 26:
      uint64_t result = a2 != 0;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
  }
  return result;
}

void sub_10003B7FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10003B870(wireless_diagnostics::google::protobuf::io::CodedOutputStream *a1, int a2, uint64_t *a3)
{
  int UnpackedType = wis::reflect::getUnpackedType();
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_100009298(v18, (uint64_t)&__p);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, (wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  sub_10003BA10(a2, a3, &v13);
  int v7 = v13;
  __int16 v8 = v14;
  if (v13 != v14)
  {
    do
    {
      uint64_t v9 = sub_10003B200(UnpackedType, *v7);
      int WireTypeForType = wis::reflect::getWireTypeForType();
      switch(WireTypeForType)
      {
        case 5:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 1:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 0:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
      }
      ++v7;
    }
    while (v7 != v8);
    int v7 = v13;
  }
  if (v7)
  {
    uint64_t v14 = v7;
    operator delete(v7);
  }
  int v11 = __p;
  int v12 = v17 - v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(a1, v17 - (uint64_t)v16);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(a1, v11, v12);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
  wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream::~ZeroCopyOutputStream((wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_10003B9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10003BA10@<X0>(int a1@<W0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  switch(a1)
  {
    case 1:
    case 15:
      uint64_t result = sub_10003BD04(a2, a3);
      break;
    case 2:
    case 16:
      uint64_t result = sub_10003BE14(a2, a3);
      break;
    case 3:
    case 17:
      uint64_t result = sub_10003BF2C(a2, a3);
      break;
    case 4:
    case 18:
      uint64_t result = sub_10003BFB0(a2, a3);
      break;
    case 5:
    case 19:
      uint64_t result = sub_10003C034(a2, a3);
      break;
    case 6:
    case 20:
      uint64_t result = sub_10003C0BC(a2, a3);
      break;
    case 7:
    case 21:
      uint64_t result = sub_10003C1C8(a2, a3);
      break;
    case 8:
    case 22:
      uint64_t result = sub_10003C140(a2, a3);
      break;
    case 9:
    case 23:
      uint64_t result = sub_10003BD90(a2, a3);
      break;
    case 10:
    case 24:
      uint64_t result = sub_10003BC80(a2, a3);
      break;
    case 11:
    case 25:
      uint64_t result = sub_10003C24C(a2, a3);
      break;
    case 12:
    case 26:
      uint64_t result = sub_10003BEA0(a2, a3);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
  }
  return result;
}

void sub_10003BC04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003BC80@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v2 = (uint64_t *)*result;
  unint64_t v3 = (uint64_t *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003BCE8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003BD04@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 8)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)1>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003BD74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003BD90@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (unsigned int *)*result;
  uint64_t v3 = (unsigned int *)result[1];
  for (int i = a2; v2 != v3; v2 += 2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003BDF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003BE14@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 8)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)2>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003BE84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003BEA0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    BOOL v4 = *v2 != 0;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003BF10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003BF2C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*result;
  uint64_t v3 = (uint64_t *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003BF94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003BFB0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*result;
  uint64_t v3 = (uint64_t *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003C018(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003C034@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 8)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003C0A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003C0BC@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (int *)*result;
  uint64_t v3 = (int *)result[1];
  for (int i = a2; v2 != v3; v2 += 2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003C124(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003C140@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 8)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003C1AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003C1C8@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (unsigned int *)*result;
  uint64_t v3 = (unsigned int *)result[1];
  for (int i = a2; v2 != v3; v2 += 2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003C230(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003C24C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*result;
  uint64_t v3 = (uint64_t *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003C2B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003C2D0(wireless_diagnostics::google::protobuf::io::CodedOutputStream *a1, int a2, uint64_t *a3)
{
  int UnpackedType = wis::reflect::getUnpackedType();
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_100009298(v18, (uint64_t)&__p);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, (wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  sub_10003C470(a2, a3, &v13);
  int v7 = v13;
  __int16 v8 = v14;
  if (v13 != v14)
  {
    do
    {
      uint64_t v9 = sub_10003B200(UnpackedType, *v7);
      int WireTypeForType = wis::reflect::getWireTypeForType();
      switch(WireTypeForType)
      {
        case 5:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 1:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 0:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
      }
      ++v7;
    }
    while (v7 != v8);
    int v7 = v13;
  }
  if (v7)
  {
    uint64_t v14 = v7;
    operator delete(v7);
  }
  int v11 = __p;
  int v12 = v17 - v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(a1, v17 - (uint64_t)v16);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(a1, v11, v12);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
  wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream::~ZeroCopyOutputStream((wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_10003C418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10003C470@<X0>(int a1@<W0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  switch(a1)
  {
    case 1:
    case 15:
      uint64_t result = sub_10003C768(a2, a3);
      break;
    case 2:
    case 16:
      uint64_t result = sub_10003C878(a2, a3);
      break;
    case 3:
    case 17:
      uint64_t result = sub_10003C990(a2, a3);
      break;
    case 4:
    case 18:
      uint64_t result = sub_10003CA18(a2, a3);
      break;
    case 5:
    case 19:
      uint64_t result = sub_10003CAA0(a2, a3);
      break;
    case 6:
    case 20:
      uint64_t result = sub_10003CB2C(a2, a3);
      break;
    case 7:
    case 21:
      uint64_t result = sub_10003CC44(a2, a3);
      break;
    case 8:
    case 22:
      uint64_t result = sub_10003CBB8(a2, a3);
      break;
    case 9:
    case 23:
      uint64_t result = sub_10003C7F0(a2, a3);
      break;
    case 10:
    case 24:
      uint64_t result = sub_10003C6E0(a2, a3);
      break;
    case 11:
    case 25:
      uint64_t result = sub_10003CCCC(a2, a3);
      break;
    case 12:
    case 26:
      uint64_t result = sub_10003C904(a2, a3);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
  }
  return result;
}

void sub_10003C664(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003C6E0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (double *)*result;
  uint64_t v3 = (double *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    unint64_t v4 = (unint64_t)*v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003C74C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003C768@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 8)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)1>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003C7D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003C7F0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (double *)*result;
  uint64_t v3 = (double *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003C85C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003C878@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 8)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)2>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003C8E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003C904@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (double *)*result;
  uint64_t v3 = (double *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    BOOL v4 = *v2 != 0.0;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003C974(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003C990@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (double *)*result;
  uint64_t v3 = (double *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = (uint64_t)*v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003C9FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003CA18@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (double *)*result;
  uint64_t v3 = (double *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    unint64_t v4 = (unint64_t)*v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003CA84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003CAA0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 8)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003CB10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003CB2C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (double *)*result;
  uint64_t v3 = (double *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = (int)*v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003CB9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003CBB8@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 8)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003CC28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003CC44@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (double *)*result;
  uint64_t v3 = (double *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003CCB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003CCCC@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (double *)*result;
  uint64_t v3 = (double *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = (uint64_t)*v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003CD38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003CD54(wireless_diagnostics::google::protobuf::io::CodedOutputStream *a1, int a2, uint64_t *a3)
{
  int UnpackedType = wis::reflect::getUnpackedType();
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_100009298(v18, (uint64_t)&__p);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, (wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  sub_10003CEF4(a2, a3, &v13);
  int v7 = v13;
  __int16 v8 = v14;
  if (v13 != v14)
  {
    do
    {
      uint64_t v9 = sub_10003B200(UnpackedType, *v7);
      int WireTypeForType = wis::reflect::getWireTypeForType();
      switch(WireTypeForType)
      {
        case 5:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 1:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 0:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
      }
      ++v7;
    }
    while (v7 != v8);
    int v7 = v13;
  }
  if (v7)
  {
    uint64_t v14 = v7;
    operator delete(v7);
  }
  int v11 = __p;
  int v12 = v17 - v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(a1, v17 - (uint64_t)v16);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(a1, v11, v12);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
  wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream::~ZeroCopyOutputStream((wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_10003CE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10003CEF4@<X0>(int a1@<W0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  switch(a1)
  {
    case 1:
    case 15:
      uint64_t result = sub_10003D1E8(a2, a3);
      break;
    case 2:
    case 16:
      uint64_t result = sub_10003D2F8(a2, a3);
      break;
    case 3:
    case 17:
      uint64_t result = sub_10003D410(a2, a3);
      break;
    case 4:
    case 18:
      uint64_t result = sub_10003D494(a2, a3);
      break;
    case 5:
    case 19:
      uint64_t result = sub_10003D518(a2, a3);
      break;
    case 6:
    case 20:
      uint64_t result = sub_10003D5A0(a2, a3);
      break;
    case 7:
    case 21:
      uint64_t result = sub_10003D6AC(a2, a3);
      break;
    case 8:
    case 22:
      uint64_t result = sub_10003D624(a2, a3);
      break;
    case 9:
    case 23:
      uint64_t result = sub_10003D274(a2, a3);
      break;
    case 10:
    case 24:
      uint64_t result = sub_10003D164(a2, a3);
      break;
    case 11:
    case 25:
      uint64_t result = sub_10003D730(a2, a3);
      break;
    case 12:
    case 26:
      uint64_t result = sub_10003D384(a2, a3);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
  }
  return result;
}

void sub_10003D0E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003D164@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (unsigned int *)*result;
  uint64_t v3 = (unsigned int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003D1CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003D1E8@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 4)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)1>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003D258(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003D274@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (unsigned int *)*result;
  uint64_t v3 = (unsigned int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003D2DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003D2F8@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 4)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)2>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003D368(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003D384@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (_DWORD *)*result;
  uint64_t v3 = (_DWORD *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    BOOL v4 = *v2 != 0;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003D3F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003D410@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (unsigned int *)*result;
  uint64_t v3 = (unsigned int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003D478(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003D494@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (unsigned int *)*result;
  uint64_t v3 = (unsigned int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003D4FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003D518@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 4)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003D584(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003D5A0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (int *)*result;
  uint64_t v3 = (int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003D608(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003D624@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 4)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003D690(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003D6AC@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (unsigned int *)*result;
  uint64_t v3 = (unsigned int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003D714(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003D730@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (unsigned int *)*result;
  uint64_t v3 = (unsigned int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003D798(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003D7B4(wireless_diagnostics::google::protobuf::io::CodedOutputStream *a1, int a2, uint64_t *a3)
{
  int UnpackedType = wis::reflect::getUnpackedType();
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_100009298(v18, (uint64_t)&__p);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, (wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  sub_10003D954(a2, a3, &v13);
  int v7 = v13;
  __int16 v8 = v14;
  if (v13 != v14)
  {
    do
    {
      uint64_t v9 = sub_10003B200(UnpackedType, *v7);
      int WireTypeForType = wis::reflect::getWireTypeForType();
      switch(WireTypeForType)
      {
        case 5:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 1:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 0:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
      }
      ++v7;
    }
    while (v7 != v8);
    int v7 = v13;
  }
  if (v7)
  {
    uint64_t v14 = v7;
    operator delete(v7);
  }
  int v11 = __p;
  int v12 = v17 - v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(a1, v17 - (uint64_t)v16);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(a1, v11, v12);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
  wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream::~ZeroCopyOutputStream((wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_10003D8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10003D954@<X0>(int a1@<W0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  switch(a1)
  {
    case 1:
    case 15:
      uint64_t result = sub_10003DC4C(a2, a3);
      break;
    case 2:
    case 16:
      uint64_t result = sub_10003DD60(a2, a3);
      break;
    case 3:
    case 17:
      uint64_t result = sub_10003DE74(a2, a3);
      break;
    case 4:
    case 18:
      uint64_t result = sub_10003DEFC(a2, a3);
      break;
    case 5:
    case 19:
      uint64_t result = sub_10003DF84(a2, a3);
      break;
    case 6:
    case 20:
      uint64_t result = sub_10003E010(a2, a3);
      break;
    case 7:
    case 21:
      uint64_t result = sub_10003E128(a2, a3);
      break;
    case 8:
    case 22:
      uint64_t result = sub_10003E09C(a2, a3);
      break;
    case 9:
    case 23:
      uint64_t result = sub_10003DCD8(a2, a3);
      break;
    case 10:
    case 24:
      uint64_t result = sub_10003DBC4(a2, a3);
      break;
    case 11:
    case 25:
      uint64_t result = sub_10003E1B0(a2, a3);
      break;
    case 12:
    case 26:
      uint64_t result = sub_10003DDE8(a2, a3);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
  }
  return result;
}

void sub_10003DB48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003DBC4@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (float *)*result;
  uint64_t v3 = (float *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    unint64_t v4 = (unint64_t)*v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003DC30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003DC4C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 4)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)1>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003DCBC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003DCD8@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (float *)*result;
  uint64_t v3 = (float *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003DD44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003DD60@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 4)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)2>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003DDCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003DDE8@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (float *)*result;
  uint64_t v3 = (float *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    BOOL v4 = *v2 != 0.0;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003DE58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003DE74@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (float *)*result;
  uint64_t v3 = (float *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = (uint64_t)*v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003DEE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003DEFC@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (float *)*result;
  uint64_t v3 = (float *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    unint64_t v4 = (unint64_t)*v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003DF68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003DF84@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 4)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003DFF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003E010@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (float *)*result;
  uint64_t v3 = (float *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = (int)*v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003E080(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003E09C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 4)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003E10C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003E128@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (float *)*result;
  uint64_t v3 = (float *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003E194(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003E1B0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (float *)*result;
  uint64_t v3 = (float *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = (uint64_t)*v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003E21C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003E238(wireless_diagnostics::google::protobuf::io::CodedOutputStream *a1, int a2, uint64_t *a3)
{
  int UnpackedType = wis::reflect::getUnpackedType();
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_100009298(v18, (uint64_t)&__p);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, (wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  sub_10003E3D8(a2, a3, &v13);
  int v7 = v13;
  __int16 v8 = v14;
  if (v13 != v14)
  {
    do
    {
      uint64_t v9 = sub_10003B200(UnpackedType, *v7);
      int WireTypeForType = wis::reflect::getWireTypeForType();
      switch(WireTypeForType)
      {
        case 5:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 1:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 0:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
      }
      ++v7;
    }
    while (v7 != v8);
    int v7 = v13;
  }
  if (v7)
  {
    uint64_t v14 = v7;
    operator delete(v7);
  }
  int v11 = __p;
  int v12 = v17 - v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(a1, v17 - (uint64_t)v16);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(a1, v11, v12);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
  wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream::~ZeroCopyOutputStream((wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_10003E380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10003E3D8@<X0>(int a1@<W0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  switch(a1)
  {
    case 1:
    case 15:
      uint64_t result = sub_10003E704(a2, a3);
      break;
    case 2:
    case 16:
      uint64_t result = sub_10003E894(a2, a3);
      break;
    case 3:
    case 17:
      uint64_t result = sub_10003EA24(a2, a3);
      break;
    case 4:
    case 18:
      uint64_t result = sub_10003EAE0(a2, a3);
      break;
    case 5:
    case 19:
      uint64_t result = sub_10003EB9C(a2, a3);
      break;
    case 6:
    case 20:
      uint64_t result = sub_10003EC5C(a2, a3);
      break;
    case 7:
    case 21:
      uint64_t result = sub_10003EDD8(a2, a3);
      break;
    case 8:
    case 22:
      uint64_t result = sub_10003ED18(a2, a3);
      break;
    case 9:
    case 23:
      uint64_t result = sub_10003E7D8(a2, a3);
      break;
    case 10:
    case 24:
      uint64_t result = sub_10003E648(a2, a3);
      break;
    case 11:
    case 25:
      uint64_t result = sub_10003EE94(a2, a3);
      break;
    case 12:
    case 26:
      uint64_t result = sub_10003E968(a2, a3);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
  }
  return result;
}

void sub_10003E5CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003E648@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (void *)*result;
  unint64_t v3 = result[1];
  int v5 = v3 & 0x3F;
  unsigned int v10 = a2;
  if (v3 > 0x3F || v5 != 0)
  {
    int v7 = 0;
    __int16 v8 = &v4[v3 >> 6];
    do
    {
      uint64_t v9 = (*v4 >> v7) & 1;
      uint64_t result = sub_1000388E4((uint64_t *)&v10, &v9);
      v4 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (v7 != v5 || v4 != v8);
  }
  return result;
}

void sub_10003E6E8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003E704@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *result;
  unint64_t v3 = result[1];
  int v5 = v3 & 0x3F;
  unsigned int v10 = a2;
  if (v3 > 0x3F || v5 != 0)
  {
    int v7 = 0;
    unint64_t v8 = v4 + 8 * (v3 >> 6);
    do
    {
      uint64_t v9 = wis::protobuf::NumberConverter<(wis::reflect::Type)1>::encode();
      uint64_t result = sub_1000388E4((uint64_t *)&v10, &v9);
      v4 += 8 * (v7 == 63);
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (v7 != v5 || v4 != v8);
  }
  return result;
}

void sub_10003E7BC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003E7D8@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (void *)*result;
  unint64_t v3 = result[1];
  int v5 = v3 & 0x3F;
  unsigned int v10 = a2;
  if (v3 > 0x3F || v5 != 0)
  {
    int v7 = 0;
    unint64_t v8 = &v4[v3 >> 6];
    do
    {
      uint64_t v9 = (*v4 >> v7) & 1;
      uint64_t result = sub_1000388E4((uint64_t *)&v10, &v9);
      v4 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (v7 != v5 || v4 != v8);
  }
  return result;
}

void sub_10003E878(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003E894@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *result;
  unint64_t v3 = result[1];
  int v5 = v3 & 0x3F;
  unsigned int v10 = a2;
  if (v3 > 0x3F || v5 != 0)
  {
    int v7 = 0;
    unint64_t v8 = v4 + 8 * (v3 >> 6);
    do
    {
      uint64_t v9 = wis::protobuf::NumberConverter<(wis::reflect::Type)2>::encode();
      uint64_t result = sub_1000388E4((uint64_t *)&v10, &v9);
      v4 += 8 * (v7 == 63);
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (v7 != v5 || v4 != v8);
  }
  return result;
}

void sub_10003E94C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003E968@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (void *)*result;
  unint64_t v3 = result[1];
  int v5 = v3 & 0x3F;
  unsigned int v10 = a2;
  if (v3 > 0x3F || v5 != 0)
  {
    int v7 = 0;
    unint64_t v8 = &v4[v3 >> 6];
    do
    {
      uint64_t v9 = (*v4 >> v7) & 1;
      uint64_t result = sub_1000388E4((uint64_t *)&v10, &v9);
      v4 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (v7 != v5 || v4 != v8);
  }
  return result;
}

void sub_10003EA08(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003EA24@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (void *)*result;
  unint64_t v3 = result[1];
  int v5 = v3 & 0x3F;
  unsigned int v10 = a2;
  if (v3 > 0x3F || v5 != 0)
  {
    int v7 = 0;
    unint64_t v8 = &v4[v3 >> 6];
    do
    {
      uint64_t v9 = (*v4 >> v7) & 1;
      uint64_t result = sub_1000388E4((uint64_t *)&v10, &v9);
      v4 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (v7 != v5 || v4 != v8);
  }
  return result;
}

void sub_10003EAC4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003EAE0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (void *)*result;
  unint64_t v3 = result[1];
  int v5 = v3 & 0x3F;
  unsigned int v10 = a2;
  if (v3 > 0x3F || v5 != 0)
  {
    int v7 = 0;
    unint64_t v8 = &v4[v3 >> 6];
    do
    {
      uint64_t v9 = (*v4 >> v7) & 1;
      uint64_t result = sub_1000388E4((uint64_t *)&v10, &v9);
      v4 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (v7 != v5 || v4 != v8);
  }
  return result;
}

void sub_10003EB80(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003EB9C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *result;
  unint64_t v3 = result[1];
  int v5 = v3 & 0x3F;
  unsigned int v10 = a2;
  if (v3 > 0x3F || v5 != 0)
  {
    int v7 = 0;
    unint64_t v8 = v4 + 8 * (v3 >> 6);
    do
    {
      uint64_t v9 = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::encode();
      uint64_t result = sub_1000388E4((uint64_t *)&v10, &v9);
      v4 += 8 * (v7 == 63);
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (v7 != v5 || v4 != v8);
  }
  return result;
}

void sub_10003EC40(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003EC5C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (void *)*result;
  unint64_t v3 = result[1];
  int v5 = v3 & 0x3F;
  unsigned int v10 = a2;
  if (v3 > 0x3F || v5 != 0)
  {
    int v7 = 0;
    unint64_t v8 = &v4[v3 >> 6];
    do
    {
      uint64_t v9 = (*v4 >> v7) & 1;
      uint64_t result = sub_1000388E4((uint64_t *)&v10, &v9);
      v4 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (v7 != v5 || v4 != v8);
  }
  return result;
}

void sub_10003ECFC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003ED18@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *result;
  unint64_t v3 = result[1];
  int v5 = v3 & 0x3F;
  unsigned int v10 = a2;
  if (v3 > 0x3F || v5 != 0)
  {
    int v7 = 0;
    unint64_t v8 = v4 + 8 * (v3 >> 6);
    do
    {
      uint64_t v9 = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::encode();
      uint64_t result = sub_1000388E4((uint64_t *)&v10, &v9);
      v4 += 8 * (v7 == 63);
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (v7 != v5 || v4 != v8);
  }
  return result;
}

void sub_10003EDBC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003EDD8@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (void *)*result;
  unint64_t v3 = result[1];
  int v5 = v3 & 0x3F;
  unsigned int v10 = a2;
  if (v3 > 0x3F || v5 != 0)
  {
    int v7 = 0;
    unint64_t v8 = &v4[v3 >> 6];
    do
    {
      uint64_t v9 = (*v4 >> v7) & 1;
      uint64_t result = sub_1000388E4((uint64_t *)&v10, &v9);
      v4 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (v7 != v5 || v4 != v8);
  }
  return result;
}

void sub_10003EE78(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003EE94@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (void *)*result;
  unint64_t v3 = result[1];
  int v5 = v3 & 0x3F;
  unsigned int v10 = a2;
  if (v3 > 0x3F || v5 != 0)
  {
    int v7 = 0;
    unint64_t v8 = &v4[v3 >> 6];
    do
    {
      uint64_t v9 = (*v4 >> v7) & 1;
      uint64_t result = sub_1000388E4((uint64_t *)&v10, &v9);
      v4 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (v7 != v5 || v4 != v8);
  }
  return result;
}

void sub_10003EF34(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003EF50(wireless_diagnostics::google::protobuf::io::CodedOutputStream *a1, int a2, uint64_t *a3)
{
  int UnpackedType = wis::reflect::getUnpackedType();
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_100009298(v18, (uint64_t)&__p);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, (wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  sub_10003F0F0(a2, a3, &v13);
  int v7 = v13;
  unint64_t v8 = v14;
  if (v13 != v14)
  {
    do
    {
      uint64_t v9 = sub_10003B200(UnpackedType, *v7);
      int WireTypeForType = wis::reflect::getWireTypeForType();
      switch(WireTypeForType)
      {
        case 5:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 1:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 0:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
      }
      ++v7;
    }
    while (v7 != v8);
    int v7 = v13;
  }
  if (v7)
  {
    uint64_t v14 = v7;
    operator delete(v7);
  }
  int v11 = __p;
  int v12 = v17 - v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(a1, v17 - (uint64_t)v16);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(a1, v11, v12);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
  wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream::~ZeroCopyOutputStream((wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_10003F098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10003F0F0@<X0>(int a1@<W0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  switch(a1)
  {
    case 1:
    case 15:
      uint64_t result = sub_10003F3E4(a2, a3);
      break;
    case 2:
    case 16:
      uint64_t result = sub_10003F4F4(a2, a3);
      break;
    case 3:
    case 17:
      uint64_t result = sub_10003F60C(a2, a3);
      break;
    case 4:
    case 18:
      uint64_t result = sub_10003F690(a2, a3);
      break;
    case 5:
    case 19:
      uint64_t result = sub_10003F714(a2, a3);
      break;
    case 6:
    case 20:
      uint64_t result = sub_10003F79C(a2, a3);
      break;
    case 7:
    case 21:
      uint64_t result = sub_10003F8A8(a2, a3);
      break;
    case 8:
    case 22:
      uint64_t result = sub_10003F820(a2, a3);
      break;
    case 9:
    case 23:
      uint64_t result = sub_10003F470(a2, a3);
      break;
    case 10:
    case 24:
      uint64_t result = sub_10003F360(a2, a3);
      break;
    case 11:
    case 25:
      uint64_t result = sub_10003F92C(a2, a3);
      break;
    case 12:
    case 26:
      uint64_t result = sub_10003F580(a2, a3);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
  }
  return result;
}

void sub_10003F2E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003F360@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*result;
  unint64_t v3 = (uint64_t *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003F3C8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003F3E4@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 8)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)1>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003F454(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003F470@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (unsigned int *)*result;
  uint64_t v3 = (unsigned int *)result[1];
  for (int i = a2; v2 != v3; v2 += 2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003F4D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003F4F4@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 8)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)2>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003F564(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003F580@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    BOOL v4 = *v2 != 0;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003F5F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003F60C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*result;
  uint64_t v3 = (uint64_t *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003F674(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003F690@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*result;
  uint64_t v3 = (uint64_t *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003F6F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003F714@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 8)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003F780(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003F79C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (int *)*result;
  uint64_t v3 = (int *)result[1];
  for (int i = a2; v2 != v3; v2 += 2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003F804(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003F820@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 8)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003F88C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003F8A8@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (unsigned int *)*result;
  uint64_t v3 = (unsigned int *)result[1];
  for (int i = a2; v2 != v3; v2 += 2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003F910(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003F92C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*result;
  uint64_t v3 = (uint64_t *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003F994(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003F9B0(wireless_diagnostics::google::protobuf::io::CodedOutputStream *a1, int a2, uint64_t *a3)
{
  int UnpackedType = wis::reflect::getUnpackedType();
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_100009298(v18, (uint64_t)&__p);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, (wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  sub_10003FB50(a2, a3, &v13);
  int v7 = v13;
  unint64_t v8 = v14;
  if (v13 != v14)
  {
    do
    {
      uint64_t v9 = sub_10003B200(UnpackedType, *v7);
      int WireTypeForType = wis::reflect::getWireTypeForType();
      switch(WireTypeForType)
      {
        case 5:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 1:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
        case 0:
          wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, v9);
          break;
      }
      ++v7;
    }
    while (v7 != v8);
    int v7 = v13;
  }
  if (v7)
  {
    uint64_t v14 = v7;
    operator delete(v7);
  }
  int v11 = __p;
  int v12 = v17 - v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(a1, v17 - (uint64_t)v16);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(a1, v11, v12);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
  wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream::~ZeroCopyOutputStream((wireless_diagnostics::google::protobuf::io::ZeroCopyOutputStream *)v18);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_10003FAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10003FB50@<X0>(int a1@<W0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  switch(a1)
  {
    case 1:
    case 15:
      uint64_t result = sub_10003FE44(a2, a3);
      break;
    case 2:
    case 16:
      uint64_t result = sub_10003FF54(a2, a3);
      break;
    case 3:
    case 17:
      uint64_t result = sub_10004006C(a2, a3);
      break;
    case 4:
    case 18:
      uint64_t result = sub_1000400F0(a2, a3);
      break;
    case 5:
    case 19:
      uint64_t result = sub_100040174(a2, a3);
      break;
    case 6:
    case 20:
      uint64_t result = sub_1000401FC(a2, a3);
      break;
    case 7:
    case 21:
      uint64_t result = sub_100040308(a2, a3);
      break;
    case 8:
    case 22:
      uint64_t result = sub_100040280(a2, a3);
      break;
    case 9:
    case 23:
      uint64_t result = sub_10003FED0(a2, a3);
      break;
    case 10:
    case 24:
      uint64_t result = sub_10003FDC0(a2, a3);
      break;
    case 11:
    case 25:
      uint64_t result = sub_10004038C(a2, a3);
      break;
    case 12:
    case 26:
      uint64_t result = sub_10003FFE0(a2, a3);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
  }
  return result;
}

void sub_10003FD44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003FDC0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (int *)*result;
  uint64_t v3 = (int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003FE28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003FE44@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 4)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)1>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003FEB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003FED0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (unsigned int *)*result;
  uint64_t v3 = (unsigned int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003FF38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003FF54@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 4)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)2>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_10003FFC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003FFE0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (_DWORD *)*result;
  uint64_t v3 = (_DWORD *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    BOOL v4 = *v2 != 0;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_100040050(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10004006C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (int *)*result;
  uint64_t v3 = (int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_1000400D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000400F0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (int *)*result;
  uint64_t v3 = (int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_100040158(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100040174@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 4)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_1000401E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000401FC@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (int *)*result;
  uint64_t v3 = (int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_100040264(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100040280@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (int i = a2; v2 != v3; v2 += 4)
  {
    uint64_t v4 = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::encode();
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_1000402EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100040308@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (unsigned int *)*result;
  uint64_t v3 = (unsigned int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_100040370(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10004038C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (int *)*result;
  uint64_t v3 = (int *)result[1];
  for (int i = a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    uint64_t result = sub_1000388E4((uint64_t *)&i, &v4);
  }
  return result;
}

void sub_1000403F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

wireless_diagnostics::google::protobuf::io::CodedInputStream **sub_100040410(wireless_diagnostics::google::protobuf::io::CodedInputStream **a1)
{
  int v2 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(*a1);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(*a1, v2);
  return a1;
}

void sub_100040568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000405A0(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) prevCells];
  uint64_t v4 = [v2 convertFMCongestionCells:v3 toUpdatedCongestionPrevCellsWithContext:*(void *)(a1 + 48)];

  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(void **)(a1 + 32);
  unint64_t v8 = [*(id *)(a1 + 40) startTimestamp];
  uint64_t v9 = [v7 handleCongestionAreaWithContext:v5 subscriptionID:v6 prevCells:v4 startTime:v8];

  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    int v11 = *(void **)(a1 + 32);
    uint64_t v23 = [*(id *)(a1 + 40) startTimestamp];
    int v22 = [*(id *)(a1 + 40) goodCells];
    uint64_t v21 = [*(id *)(a1 + 40) badCells];
    uint64_t v20 = [*(id *)(a1 + 40) startTimestamp];
    int v19 = [*(id *)(a1 + 40) prevCells];
    int v12 = [v19 lastObject];
    unint64_t v13 = [v12 timestamp];
    [v20 timeIntervalSinceDate:v13];
    double v15 = v14;
    int v16 = [*(id *)(a1 + 40) endTimestamp];
    int v17 = [*(id *)(a1 + 40) startTimestamp];
    [v16 timeIntervalSinceDate:v17];
    [v11 updateCongestionAreaAfterLeavingWithContext:v10 congestionArea:v9 startTime:v23 goodCells:v22 badCells:v21 secondsUntilCongestion:v15 secondsCongestionDuration:v18];
  }
  else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 48), OS_LOG_TYPE_ERROR))
  {
    sub_10014248C();
  }
}

void sub_1000407A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100040868(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100040878(uint64_t a1)
{
}

int64_t sub_100040880(id a1, CongestionArea *a2, CongestionArea *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  uint64_t v6 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_10014261C(v11, (int)[(CongestionArea *)v4 seenCount], (int)[(CongestionArea *)v5 seenCount], v6);
  }
  unsigned int v7 = [(CongestionArea *)v4 seenCount];
  if (v7 == [(CongestionArea *)v5 seenCount])
  {
    int64_t v8 = 0;
  }
  else
  {
    int v9 = [(CongestionArea *)v4 seenCount];
    if (v9 > (int)[(CongestionArea *)v5 seenCount]) {
      int64_t v8 = -1;
    }
    else {
      int64_t v8 = 1;
    }
  }

  return v8;
}

void sub_100040984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100040C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100040DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100041140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100041260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void start()
{
  sub_100083E3C();
  uint64_t v0 = *(NSObject **)(qword_1001D8080 + 48);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "main:#N ===========================================", buf, 2u);
    uint64_t v0 = *(NSObject **)(qword_1001D8080 + 48);
  }
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "main:#N wirelessinsightsd Started", buf, 2u);
  }
  getpid();
  int v1 = memorystatus_control();
  if (v1)
  {
    int v2 = *(NSObject **)(qword_1001D8080 + 48);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_100142720(v1, v2);
    }
  }
  signal(15, (void (__cdecl *)(int))sub_100042D50);
  signal(3, (void (__cdecl *)(int))sub_100042D50);
  signal(2, (void (__cdecl *)(int))sub_100042D50);
  pthread_mutex_lock(&stru_1001D6968);
  if (!(void)xmmword_1001D69A8) {
    sub_10012402C();
  }
  if (*((void *)&xmmword_1001D69A8 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D69A8 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6968);
  sub_1000C035C();
}

void sub_1000427CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  pthread_mutex_unlock(&stru_1001D6A18);

  uint64_t v37 = *(std::__shared_weak_count **)(v36 - 152);
  if (v37) {
    sub_10000B678(v37);
  }
  _Unwind_Resume(a1);
}

void sub_100042D50(unsigned int a1)
{
  int v2 = *(NSObject **)(qword_1001D8080 + 48);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "main:#N CAUGHT SIGNAL %d", (uint8_t *)v3, 8u);
  }
  if (a1 <= 0xF && ((1 << a1) & 0x800C) != 0) {
    operator new();
  }
}

void sub_100042E48(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10001F4A8(a1);
}

void sub_100042E94(uint64_t a1)
{
  int v2 = *(NSObject **)(qword_1001D8080 + 32);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "main:#N EXITING wirelessinsightsd due to signal. Stopping main runloop.", v4, 2u);
  }
  Main = CFRunLoopGetMain();
  CFRunLoopStop(Main);
  if (a1) {
    operator delete();
  }
}

void sub_100042F24(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100042F48(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_100042FA0(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_100042FF8(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_100043050(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_1000430A8(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_100043100(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_100043158(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_1000431B0(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_100043208(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_100043260(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_1000432B8(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_100043310(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_100043368(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_1000433C0(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

uint64_t sub_100043418()
{
  if ((byte_1001D6A10 & 1) == 0)
  {
    byte_1001D6A10 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E5C, &stru_1001D69C0, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100043454()
{
  if ((byte_1001D6A68 & 1) == 0)
  {
    byte_1001D6A68 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E60, &stru_1001D6A18, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100043490()
{
  if ((byte_1001D69B8 & 1) == 0)
  {
    byte_1001D69B8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100029800, &stru_1001D6968, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000434CC()
{
  if ((byte_1001D6AC0 & 1) == 0)
  {
    byte_1001D6AC0 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E64, &unk_1001D6A70, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100043508()
{
  if ((byte_1001D6B18 & 1) == 0)
  {
    byte_1001D6B18 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E68, &unk_1001D6AC8, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100043544()
{
  if ((byte_1001D6B70 & 1) == 0)
  {
    byte_1001D6B70 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E6C, &stru_1001D6B20, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100043580()
{
  if ((byte_1001D6BC8 & 1) == 0)
  {
    byte_1001D6BC8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E70, &stru_1001D6B78, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000435BC()
{
  if ((byte_1001D6C20 & 1) == 0)
  {
    byte_1001D6C20 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E74, &stru_1001D6BD0, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000435F8()
{
  if ((byte_1001D6730 & 1) == 0)
  {
    byte_1001D6730 = 1;
    return __cxa_atexit((void (*)(void *))sub_10001F66C, &stru_1001D66E0, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100043634()
{
  if ((byte_1001D6C78 & 1) == 0)
  {
    byte_1001D6C78 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E78, &stru_1001D6C28, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100043670()
{
  if ((byte_1001D6CD0 & 1) == 0)
  {
    byte_1001D6CD0 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E7C, &stru_1001D6C80, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000436AC()
{
  if ((byte_1001D6788 & 1) == 0)
  {
    byte_1001D6788 = 1;
    return __cxa_atexit((void (*)(void *))sub_100021D7C, &stru_1001D6738, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000436E8()
{
  if ((byte_1001D6D28 & 1) == 0)
  {
    byte_1001D6D28 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E80, &unk_1001D6CD8, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100043724()
{
  if ((byte_1001D6D80 & 1) == 0)
  {
    byte_1001D6D80 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E84, &unk_1001D6D30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100043760()
{
  if ((byte_1001D6DD8 & 1) == 0)
  {
    byte_1001D6DD8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E88, &unk_1001D6D88, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10004379C()
{
  if ((byte_1001D6E30 & 1) == 0)
  {
    byte_1001D6E30 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E8C, &unk_1001D6DE0, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000437D8()
{
  if ((byte_1001D6840 & 1) == 0)
  {
    byte_1001D6840 = 1;
    return __cxa_atexit((void (*)(void *))sub_100022F54, &stru_1001D67F0, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100043814()
{
  if ((byte_1001D6E88 & 1) == 0)
  {
    byte_1001D6E88 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E90, &unk_1001D6E38, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100043850()
{
}

void *sub_100043878(void *a1, void *a2)
{
  a1[2] = 0;
  a1[4] = 0;
  a1[3] = a1 + 4;
  a1[1] = 0;
  *a1 = a1 + 1;
  a1[5] = 0;
  uint64_t v3 = a2[1];
  a1[6] = *a2;
  a1[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 8), "com.apple.wis.wirelessinsightsd", "cond");
  return a1;
}

void sub_1000438FC(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 56);
  if (v4) {
    sub_10000B678(v4);
  }
  sub_1000443D0(v2, *(void **)(v1 + 32));
  sub_1000443D0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_10004392C(uint64_t a1)
{
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 64));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    sub_10000B678(v2);
  }
  sub_1000443D0(a1 + 24, *(void **)(a1 + 32));
  sub_1000443D0(a1, *(void **)(a1 + 8));
  return a1;
}

void sub_10004397C()
{
}

void sub_100043ACC(_Unwind_Exception *a1)
{
  sub_100043DE4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100043B04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int *)(a2 + 128);
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)(a2 + 120);
    uint64_t v5 = (uint64_t **)(a1 + 24);
    uint64_t v6 = 8 * v2;
    do
    {
      uint64_t v7 = *v4;
      if (*(unsigned char *)(*v4 + 80))
      {
        unsigned int v24 = *(_DWORD *)(v7 + 72);
        int v9 = *(const void **)(v7 + 8);
        unint64_t v10 = *(int *)(v7 + 16);
        uint64_t v21 = 0;
        int v22 = 0;
        uint64_t v23 = 0;
        sub_1000444A4(&v21, v9, (uint64_t)v9 + 4 * v10, v10);
        if (*(_DWORD *)(v7 + 56))
        {
          sub_100099F84(v7 + 48, &v20);
          if (v20)
          {
            long long __p = 0uLL;
            uint64_t v18 = 0;
            sub_10001E158(&__p, v21, (uint64_t)v22, (v22 - (unsigned char *)v21) >> 2);
            uint64_t v11 = v20;
            uint64_t v20 = 0;
            uint64_t v19 = v11;
            sub_100044564((uint64_t **)a1, &v24, &__p);
            uint64_t v12 = v19;
            uint64_t v19 = 0;
            if (v12) {
              (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
            }
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            uint64_t v13 = v20;
            uint64_t v20 = 0;
            if (v13) {
              (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
            }
          }
        }
        if (*(_DWORD *)(v7 + 32))
        {
          sub_100099F84(v7 + 24, &v20);
          if (v20)
          {
            long long __p = 0uLL;
            uint64_t v18 = 0;
            sub_10001E158(&__p, v21, (uint64_t)v22, (v22 - (unsigned char *)v21) >> 2);
            uint64_t v14 = v20;
            uint64_t v20 = 0;
            uint64_t v19 = v14;
            sub_100044564(v5, &v24, &__p);
            uint64_t v15 = v19;
            uint64_t v19 = 0;
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
            }
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            uint64_t v16 = v20;
            uint64_t v20 = 0;
            if (v16) {
              (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
            }
          }
        }
        if (v21)
        {
          int v22 = v21;
          operator delete(v21);
        }
      }
      else
      {
        int64_t v8 = *(NSObject **)(a1 + 64);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "cond:#E TriggerProcessingMap: skip processing rule (no trigger id)", (uint8_t *)&__p, 2u);
        }
      }
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
}

void sub_100043D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  sub_100043E34((uint64_t)&a9);
  uint64_t v17 = a14;
  a14 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100043DE4(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10004392C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100043E34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_100043E98(uint64_t a1, void *a2, void *a3, __int32 a4, uint64_t a5)
{
  sub_10005997C(&v20, a5);
  if (a2 == a3) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 48;
  uint64_t v11 = 1;
  while (1)
  {
    uint64_t v12 = (__int32 *)a2[5];
    uint64_t v13 = (__int32 *)a2[6];
    if (v12 == v13 || ((uint64_t v14 = wmemchr(v12, a4, v13 - v12)) != 0 ? (v15 = v14) : (v15 = v13), v15 != (__int32 *)a2[6]))
    {
      ++v9;
      if ((*(uint64_t (**)(void, uint64_t, uint64_t *))(*(void *)a2[8] + 16))(a2[8], v10, &v20)) {
        break;
      }
    }
    uint64_t v16 = (void *)a2[1];
    if (v16)
    {
      do
      {
        uint64_t v17 = v16;
        uint64_t v16 = (void *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        uint64_t v17 = (void *)a2[2];
        BOOL v18 = *v17 == (void)a2;
        a2 = v17;
      }
      while (!v18);
    }
    a2 = v17;
    if (v17 == a3) {
      return 0;
    }
  }
  return v11;
}

uint64_t sub_100043FBC(uint64_t a1, unsigned int a2, __int32 a3, uint64_t a4)
{
  unsigned int v18 = a2;
  int64_t v8 = sub_10004468C(a1, &v18);
  if (v8 == v7)
  {
    uint64_t v13 = *(NSObject **)(a1 + 64);
    uint64_t v15 = 1;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      return v15;
    }
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v20 = v18;
    *(_WORD *)&v20[4] = 1024;
    *(_DWORD *)&v20[6] = a3;
    uint64_t v16 = "cond:#I TriggerProcessingMap has no save-if rules for trigger 0x%x and file %d";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v16, buf, 0xEu);
    return v15;
  }
  char v9 = sub_100043E98(a1, v8, v7, a3, a4);
  uint64_t v11 = v10;
  if (!v10)
  {
    uint64_t v13 = *(NSObject **)(a1 + 64);
    uint64_t v15 = 1;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      return v15;
    }
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v20 = v18;
    *(_WORD *)&v20[4] = 1024;
    *(_DWORD *)&v20[6] = a3;
    uint64_t v16 = "cond:#I TriggerProcessingMap has no save-if rules that apply to trigger 0x%x and file %d";
    goto LABEL_13;
  }
  char v12 = v9;
  uint64_t v13 = *(NSObject **)(a1 + 64);
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
  if (v12)
  {
    if (!v14) {
      return 1;
    }
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v20 = v18;
    *(_WORD *)&v20[4] = 1024;
    *(_DWORD *)&v20[6] = a3;
    uint64_t v16 = "cond:#I TriggerProcessingMap save-if passed for trigger 0x%x and file %d";
    uint64_t v15 = 1;
    goto LABEL_13;
  }
  if (v14)
  {
    *(_DWORD *)long long buf = 134218496;
    *(void *)uint64_t v20 = v11;
    *(_WORD *)&void v20[8] = 1024;
    unsigned int v21 = v18;
    __int16 v22 = 1024;
    __int32 v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "cond:#I TriggerProcessingMap evaluated %zd save-if rules; rules did NOT pass for trigger 0x%x and file %d",
      buf,
      0x18u);
  }
  return 0;
}

uint64_t sub_1000441C4(uint64_t a1, unsigned int a2, __int32 a3, uint64_t a4)
{
  unsigned int v18 = a2;
  int64_t v8 = sub_10004468C(a1 + 24, &v18);
  if (v8 == v7)
  {
    uint64_t v13 = *(NSObject **)(a1 + 64);
    uint64_t v15 = 1;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      return v15;
    }
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v20 = v18;
    *(_WORD *)&v20[4] = 1024;
    *(_DWORD *)&v20[6] = a3;
    uint64_t v16 = "cond:#I TriggerProcessingMap has no process-if rules for trigger 0x%x and file %d";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v16, buf, 0xEu);
    return v15;
  }
  char v9 = sub_100043E98(a1, v8, v7, a3, a4);
  uint64_t v11 = v10;
  if (!v10)
  {
    uint64_t v13 = *(NSObject **)(a1 + 64);
    uint64_t v15 = 1;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      return v15;
    }
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v20 = v18;
    *(_WORD *)&v20[4] = 1024;
    *(_DWORD *)&v20[6] = a3;
    uint64_t v16 = "cond:#I TriggerProcessingMap has no process-if rules that apply to trigger 0x%x and file %d";
    goto LABEL_13;
  }
  char v12 = v9;
  uint64_t v13 = *(NSObject **)(a1 + 64);
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
  if (v12)
  {
    if (!v14) {
      return 1;
    }
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v20 = v18;
    *(_WORD *)&v20[4] = 1024;
    *(_DWORD *)&v20[6] = a3;
    uint64_t v16 = "cond:#I TriggerProcessingMap process-if passed for trigger 0x%x and file %d";
    uint64_t v15 = 1;
    goto LABEL_13;
  }
  if (v14)
  {
    *(_DWORD *)long long buf = 134218496;
    *(void *)uint64_t v20 = v11;
    *(_WORD *)&void v20[8] = 1024;
    unsigned int v21 = v18;
    __int16 v22 = 1024;
    __int32 v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "cond:#I TriggerProcessingMap evaluated %zd process-if rules; rules did NOT pass for trigger 0x%x and file %d",
      buf,
      0x18u);
  }
  return 0;
}

void sub_1000443D0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000443D0(a1, *a2);
    sub_1000443D0(a1, a2[1]);
    sub_10004442C(a2 + 4);
    operator delete(a2);
  }
}

void sub_10004442C(void *a1)
{
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void *sub_1000444A4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100044520(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100044504(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100044520(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_10002B5E0();
  }
  uint64_t result = (char *)sub_10001E460((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

char *sub_100044564(uint64_t **a1, unsigned int *a2, long long *a3)
{
  uint64_t v6 = (char *)operator new(0x48uLL);
  unsigned int v7 = *a2;
  long long v8 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v9 = *((void *)a3 + 2);
  uint64_t v10 = *((void *)a3 + 3);
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  uint64_t v11 = a1 + 1;
  char v12 = a1[1];
  v15[0] = v6;
  v15[1] = a1 + 1;
  *((_DWORD *)v6 + 8) = v7;
  *(_OWORD *)(v6 + 40) = v8;
  *((void *)v6 + 7) = v9;
  *((void *)v6 + 8) = v10;
  char v16 = 1;
  if (v12)
  {
    do
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v12;
        if (v7 >= *((_DWORD *)v12 + 8)) {
          break;
        }
        char v12 = (uint64_t *)*v12;
        uint64_t v13 = v11;
        if (!*v11) {
          goto LABEL_8;
        }
      }
      char v12 = (uint64_t *)v12[1];
    }
    while (v12);
    uint64_t v13 = v11 + 1;
  }
  else
  {
    uint64_t v13 = a1 + 1;
  }
LABEL_8:
  sub_10001716C(a1, (uint64_t)v11, v13, (uint64_t *)v6);
  v15[0] = 0;
  sub_100044634((uint64_t)v15, 0);
  return v6;
}

void sub_100044634(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10004442C(v2 + 4);
    }
    operator delete(v2);
  }
}

uint64_t *sub_10004468C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unsigned int v4 = *a2;
  while (1)
  {
    unsigned int v5 = *((_DWORD *)v3 + 8);
    if (v4 >= v5) {
      break;
    }
    uint64_t v2 = v3;
LABEL_7:
    uint64_t v3 = (uint64_t *)*v3;
    if (!v3) {
      return v2;
    }
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  unsigned int v7 = (uint64_t *)*v3;
  uint64_t result = v3;
  if (*v3)
  {
    uint64_t result = v3;
    do
    {
      unsigned int v8 = *((_DWORD *)v7 + 8);
      BOOL v9 = v8 >= v4;
      if (v8 >= v4) {
        uint64_t v10 = (uint64_t **)v7;
      }
      else {
        uint64_t v10 = (uint64_t **)(v7 + 1);
      }
      if (v9) {
        uint64_t result = v7;
      }
      unsigned int v7 = *v10;
    }
    while (*v10);
  }
  uint64_t v11 = v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= *(_DWORD *)(v11 + 32)) {
        char v12 = (uint64_t *)(v11 + 8);
      }
      else {
        char v12 = (uint64_t *)v11;
      }
      uint64_t v11 = *v12;
    }
    while (*v12);
  }
  return result;
}

void sub_10004497C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  _Unwind_Resume(a1);
}

void sub_1000449B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = [WeakRetained ctRelay];
    objc_msgSend(v3, "addTelephonyStateDelegate:withQueue:", v2, objc_msgSend(v2, "queue"));

    unsigned int v4 = [v2 ctRelay];
    unsigned int v5 = [v4 coreTelephonyClient];
    id v12 = 0;
    uint64_t v6 = [v5 getCurrentDataSubscriptionContextSync:&v12];
    id v7 = v12;
    unsigned int v8 = [v2 CTXPCServiceSubscriptionContextToFMSubscriptionContext:v6];
    [v2 setDataContext:v8];

    if (v7)
    {

      [v2 setDataContext:0];
    }
    [v2 updateUuidContextMap];
    [v2 setAirplaneModeActive:0];
    BOOL v9 = [v2 ctRelay];
    [v9 getAirplaneModeStatus:v2];

    uint64_t v10 = [v2 fmModel];
    uint64_t v11 = [v2 getSubscriptionContextsInUse];
    [v10 populateSubscriptionContextsInUse:v11];
  }
}

void sub_100044B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100044BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)FMCoreTelephonyController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100044C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100044CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100044E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100044EAC(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "CTXPCServiceSubscriptionContextToFMSubscriptionContext:");
  if (v2)
  {
    [*(id *)(a1 + 40) addObject:v2];
  }
  else
  {
    uint64_t v3 = *(NSObject **)(qword_1001D8080 + 136);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned int v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "FederatedMobility[FMCoreTelephonyController]:#I Failed to allocate subscription context", v4, 2u);
    }
  }
}

void sub_100044F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000450DC(_Unwind_Exception *a1)
{
  unsigned int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1000453CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100045618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100045780(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1001D7C30;
  qword_1001D7C30 = (uint64_t)v1;
}

void sub_100045968(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

id sub_100045994(uint64_t a1)
{
  [*(id *)(a1 + 32) setDataInitializationSuccessful:0];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 populateSubscriptionContextsInUse];
}

void sub_100045A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100045B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100046830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,void *a32,uint64_t a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_100046E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_100046F08(uint64_t a1)
{
  char v16 = +[NSString stringWithUTF8String:"is_data_preferred"];
  v17[0] = v16;
  BOOL v14 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 32) dataPreferred]);
  v18[0] = v14;
  uint64_t v15 = +[NSString stringWithUTF8String:"mcc"];
  v17[1] = v15;
  uint64_t v13 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) mcc]);
  v18[1] = v13;
  uint64_t v2 = +[NSString stringWithUTF8String:"mnc"];
  v17[2] = v2;
  uint64_t v3 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) mnc]);
  void v18[2] = v3;
  unsigned int v4 = +[NSString stringWithUTF8String:"signal_bar_duration"];
  v17[3] = v4;
  unsigned int v5 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 40)];
  v18[3] = v5;
  uint64_t v6 = +[NSString stringWithUTF8String:"signal_bar_state"];
  v17[4] = v6;
  id v7 = [*(id *)(a1 + 32) signalBarState];
  v18[4] = v7;
  unsigned int v8 = +[NSString stringWithUTF8String:"signal_bar_total_fluctuations"];
  v17[5] = v8;
  xpc_object_t v18[5] = &off_1001C38C8;
  BOOL v9 = +[NSString stringWithUTF8String:"registration_state"];
  v17[6] = v9;
  uint64_t v10 = [*(id *)(a1 + 32) registrationState];
  v18[6] = v10;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:7];

  return v11;
}

void sub_10004717C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100047480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004764C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100047824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100047858(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  uint64_t v6 = [*(id *)(a1 + 32) uuid];
  objc_msgSend(v5, "setDataPreferred:", objc_msgSend(v7, "isEqual:", v6));
}

void sub_1000478E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_100047994()
{
  return +[WISSignalBarMetric getSharedInstance];
}

uint64_t sub_1000479BC(uint64_t result, float *a2, void *a3, float a4)
{
  *a2 = a4;
  *a3 = result;
  return result;
}

void sub_1000479C8(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = v4 + 8 * v1;
    do
    {
      uint64_t v6 = *(int *)(*(void *)v4 + 72);
      if (v6)
      {
        id v7 = *(uint64_t **)(*(void *)v4 + 64);
        uint64_t v8 = 8 * v6;
        do
        {
          uint64_t v9 = *v7;
          if ((*(unsigned char *)(*v7 + 28) & 2) != 0)
          {
            uint64_t v10 = *(void *)(v9 + 16);
            if (!v10)
            {
              a1 = awd::profile::ConfigurationParameter::default_instance((awd::profile::ConfigurationParameter *)a1);
              uint64_t v10 = *(void *)(a1 + 16);
            }
            if ((*(unsigned char *)(v10 + 73) & 2) != 0)
            {
              if (!v2)
              {
                sub_100067984(&v13);
                uint64_t v2 = v13;
                uint64_t v11 = v14;
                uint64_t v13 = 0;
                BOOL v14 = 0;
                if (v3)
                {
                  sub_10000B678(v3);
                  if (v14) {
                    sub_10000B678(v14);
                  }
                }
                uint64_t v3 = v11;
              }
              a1 = sub_100067E20(v2);
              *(_DWORD *)(v9 + 28) |= 2u;
              id v12 = *(_DWORD **)(v9 + 16);
              if (!v12) {
                operator new();
              }
              v12[18] |= 1u;
              void v12[4] = a1;
              *(_DWORD *)(v9 + 28) |= 2u;
              v12[16] = 0;
              v12[18] &= ~0x200u;
            }
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      v4 += 8;
    }
    while (v4 != v5);
    if (v3) {
      sub_10000B678(v3);
    }
  }
}

void sub_100047B20()
{
}

void sub_100047DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100047F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000480B0(id a1)
{
  uint64_t v1 = objc_alloc_init(WISTrialExperimentsManager);
  uint64_t v2 = (void *)qword_1001D7C40;
  qword_1001D7C40 = (uint64_t)v1;
}

void sub_1000481E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100048548(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_100048684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100048BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100048F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_100048F54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(qword_1001D8080 + 48);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412546;
    uint64_t v8 = off_1001D6E90;
    __int16 v9 = 2080;
    uint64_t v10 = "-[WISTrialExperimentsManager subscribeToTrial]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#I %@: checkTreatmentUpdate: Trial Treatment Updated, %s", (uint8_t *)&v7, 0x16u);
    uint64_t v4 = *(NSObject **)(qword_1001D8080 + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412546;
    uint64_t v8 = off_1001D6E90;
    __int16 v9 = 2080;
    uint64_t v10 = "-[WISTrialExperimentsManager subscribeToTrial]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#I %@: checkTreatmentUpdate: trialCallbackReceived : YES, %s", (uint8_t *)&v7, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v6 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained updateTreatment];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_1000490C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000490F8()
{
  return +[WISTrialExperimentsManager getSharedInstance];
}

void sub_100049120(unsigned int a1@<W0>, int64_t a2@<X1>, void *a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (v6)
  {
    *a3 = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    *a3 = v7;
    if (!v7)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v7) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_8:
  *a3 = v8;
LABEL_9:
  xpc_release(v7);
  xpc_object_t v13 = xpc_int64_create(a1);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  uint64_t v11 = a3;
  id v12 = "fileId";
  sub_100014D08((uint64_t)&v11, &v13, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_object_t v9 = xpc_int64_create(a2);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  uint64_t v11 = a3;
  id v12 = "triggerTimestampTrunc";
  sub_100014D08((uint64_t)&v11, &v9, &v10);
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_release(v9);
}

uint64_t sub_10004928C(xpc_object_t *a1)
{
  if (xpc_get_type(*a1) != (xpc_type_t)&_xpc_type_dictionary) {
    return 0;
  }
  xpc_object_t v6 = a1;
  xpc_object_t v7 = "fileId";
  sub_10000B7A4((uint64_t)&v6, &object);
  unsigned int v4 = xpc::dyn_cast_or_default((xpc *)&object, 0, v3);
  xpc_release(object);
  xpc_object_t v6 = a1;
  xpc_object_t v7 = "triggerTimestampTrunc";
  sub_10000B7A4((uint64_t)&v6, &object);
  xpc::dyn_cast_or_default((xpc *)&object, 0, v5);
  xpc_release(object);
  return v4;
}

void sub_100049344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

uint64_t sub_100049374(uint64_t result, char a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  *(void *)uint64_t result = off_1001B6998;
  *(void *)(result + 8) = v4;
  *(void *)(result + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 24) = a2;
  *(_WORD *)(result + 25) = 0;
  return result;
}

void *sub_1000493B4(void *a1)
{
  *a1 = off_1001B6998;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

uint64_t sub_100049408(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t sub_100049410(uint64_t result, char a2)
{
  *(unsigned char *)(result + 26) = a2;
  return result;
}

void sub_100049418(uint64_t a1, uint64_t a2, int a3, char a4)
{
}

uint64_t sub_100049424(uint64_t a1, uint64_t a2)
{
  return sub_1000360A8(a1 + 8, *(uint64_t **)(a2 + 8));
}

void sub_100049430()
{
  uint64_t v0 = *(NSObject **)(qword_1001D8080 + 16);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "file:#I Marking location used, nothing to do.", v1, 2u);
  }
}

double sub_10004949C(ctu::OsLogLogger *a1, uint64_t a2, uint64_t *a3, unsigned int a4, int a5)
{
  char v6 = a4;
  if (a4 > 3) {
    xpc_object_t v8 = "file.other";
  }
  else {
    xpc_object_t v8 = off_1001B69D8[(char)a4];
  }
  uint64_t v9 = ctu::OsLogLogger::OsLogLogger(a1, "com.apple.wis.wirelessinsightsd", v8);
  uint64_t v10 = *a3;
  *a3 = 0;
  *(void *)(v9 + 8) = v10;
  *(unsigned char *)(v9 + 16) = v6;
  *(_DWORD *)(v9 + 20) = a5;
  *(unsigned char *)(v9 + 24) = 1;
  double result = 0.0;
  *(_OWORD *)(v9 + 28) = 0u;
  *(_OWORD *)(v9 + 44) = 0u;
  *(_DWORD *)(v9 + 60) = 0;
  return result;
}

void sub_100049530(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 40);
  sub_10004B2B0(&v3);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)a1);
}

BOOL sub_1000495A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) < 2u;
}

BOOL sub_1000495B4(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 16) & 0xFE) == 2;
}

uint64_t sub_1000495C8(uint64_t result, int a2)
{
  switch(a2)
  {
    case 2:
      BOOL v2 = 1;
LABEL_7:
      *(unsigned char *)(result + 24) = v2;
      return result;
    case 1:
      BOOL v2 = (*(unsigned char *)(result + 16) & 0xFE) == 2;
      goto LABEL_7;
    case 0:
      *(unsigned char *)(result + 24) = 0;
      break;
  }
  return result;
}

uint64_t sub_100049604(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
}

uint64_t sub_100049644(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
}

void sub_100049684(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(void *)(a1 + 40) == *(void *)(a1 + 48))
    {
      pthread_mutex_lock(&stru_1001D69C0);
      uint64_t v4 = xmmword_1001D6A00;
      if (!(void)xmmword_1001D6A00) {
        sub_1000781CC();
      }
      unint64_t v5 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
      if (*((void *)&xmmword_1001D6A00 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&stru_1001D69C0);
      int v6 = sub_1000A47C8(v4, *(unsigned char *)(a1 + 16));
      __int16 v8 = v7;
      if (v5) {
        sub_10000B678(v5);
      }
      *(void *)(a1 + 32) = v8 & 0x7FF;
      *(_DWORD *)(a1 + 28) = v6;
      pthread_mutex_lock(&stru_1001D69C0);
      uint64_t v9 = xmmword_1001D6A00;
      if (!(void)xmmword_1001D6A00) {
        sub_1000781CC();
      }
      uint64_t v10 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
      if (*((void *)&xmmword_1001D6A00 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&stru_1001D69C0);
      sub_1000A4590(v9, *(unsigned char *)(a1 + 16), &v15);
      if (v10) {
        sub_10000B678(v10);
      }
      *(void *)long long buf = &v15;
      *(void *)&uint8_t buf[8] = "files";
      sub_100002988((uint64_t)buf, &object);
      sub_100049998(a1, &object);
      xpc_release(object);
      uint64_t v11 = *(NSObject **)a1;
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_INFO))
      {
        id v12 = sub_1000AA324(*(unsigned __int8 *)(a1 + 16));
        uint64_t v13 = (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 5;
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "file:#I Metric File(%s) ready with %zd fragments", buf, 0x16u);
      }
      xpc_release(v15);
    }
    if (a2) {
      sub_100049CB0(a1);
    }
  }
}

void sub_1000498DC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    pthread_mutex_unlock(&stru_1001D69C0);
    sub_10001F4A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004993C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  uint64_t v2 = *(void *)(result + 48);
  while (v1 != v2)
  {
    double result = sub_100049974(v1);
    v1 += 32;
  }
  return result;
}

uint64_t sub_100049974(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return std::ostream::flush();
  }
  return result;
}

void sub_100049998(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v4 = *a2;
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_100006058(&v25, &object, 0);
  xpc_release(object);
  xpc_object_t v5 = *a2;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_array) {
    count = (void *)xpc_array_get_count(*a2);
  }
  else {
    count = 0;
  }
  sub_100006058(v24, &object, count);
  xpc_release(object);
  __int16 v7 = (void *)(a1 + 40);
  for (int i = v26; i != v24[1] || v25 != v24[0]; int i = ++v26)
  {
    xpc_object_t object = &v25;
    uint64_t v28 = i;
    sub_10001258C((uint64_t)&object, &v23);
    if (xpc_get_type(v23) == (xpc_type_t)&_xpc_type_dictionary)
    {
      int v9 = sub_10004928C(&v23);
      int v11 = v9;
      uint64_t v12 = v10;
      unint64_t v13 = *(void *)(a1 + 48);
      unint64_t v14 = *(void *)(a1 + 56);
      if (v13 >= v14)
      {
        uint64_t v16 = (uint64_t)(v13 - *v7) >> 5;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 59) {
          sub_10002B5E0();
        }
        uint64_t v18 = v14 - *v7;
        if (v18 >> 4 > v17) {
          unint64_t v17 = v18 >> 4;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        uint64_t v31 = a1 + 56;
        uint64_t v20 = (char *)sub_1000122B8(a1 + 56, v19);
        unsigned int v21 = &v20[32 * v16];
        xpc_object_t object = v20;
        uint64_t v28 = v21;
        __int16 v30 = &v20[32 * v22];
        *(_DWORD *)unsigned int v21 = v11;
        *((void *)v21 + 1) = 0;
        *((void *)v21 + 2) = 0;
        *((void *)v21 + 3) = v12;
        unint64_t v29 = v21 + 32;
        sub_10004B334((uint64_t *)(a1 + 40), &object);
        unint64_t v15 = *(void *)(a1 + 48);
        sub_10004B3B4((uint64_t)&object);
      }
      else
      {
        *(_DWORD *)unint64_t v13 = v9;
        *(void *)(v13 + 8) = 0;
        *(void *)(v13 + 16) = 0;
        unint64_t v15 = v13 + 32;
        *(void *)(v13 + 24) = v10;
      }
      *(void *)(a1 + 48) = v15;
    }
    xpc_release(v23);
  }
  xpc_release(v25);
  xpc_release(v25);
  if (*(void *)(a1 + 40) != *(void *)(a1 + 48))
  {
    sub_1000AA140(*(unsigned __int8 *)(a1 + 16));
    sub_1000A9F08();
  }
}

void sub_100049C70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
}

void sub_100049CB0(uint64_t a1)
{
  uint64_t v2 = (int8x8_t *)(a1 + 32);
  __p.__r_.__value_.__s.__data_[0] = 1;
  if (sub_10004B404(v2, 0, (uint64_t)v2, 0xBu, &__p) == 11 || *(void *)(a1 + 40) == *(void *)(a1 + 48)) {
    return;
  }
  uint64_t v3 = (wis *)awd::metrics::MetricFile::MetricFile((uint64_t)v39);
  if ((*(void *)v2 & 1) == 0)
  {
    *(void *)v2 |= 1uLL;
    pthread_mutex_lock(&stru_1001D69C0);
    uint64_t v4 = xmmword_1001D6A00;
    if (!(void)xmmword_1001D6A00) {
      sub_1000781CC();
    }
    xpc_object_t v5 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
    if (*((void *)&xmmword_1001D6A00 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D69C0);
    uint64_t v3 = (wis *)sub_1000A3164(v4);
    v51 |= 0x40u;
    int v43 = (int)v3;
    if (v5) {
      sub_10000B678(v5);
    }
  }
  if ((*(void *)v2 & 2) == 0)
  {
    *(void *)v2 |= 2uLL;
    pthread_mutex_lock(&stru_1001D69C0);
    uint64_t v6 = xmmword_1001D6A00;
    if (!(void)xmmword_1001D6A00) {
      sub_1000781CC();
    }
    __int16 v7 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
    if (*((void *)&xmmword_1001D6A00 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D69C0);
    uint64_t v3 = (wis *)sub_1000A3288(v6);
    v51 |= 0x80u;
    int v50 = (int)v3;
    if (v7) {
      sub_10000B678(v7);
    }
  }
  int8x8_t v8 = *v2;
  if ((*(void *)v2 & 4) == 0)
  {
    *uint64_t v2 = (int8x8_t)(*(void *)&v8 | 4);
    uint64_t WISTimestamp = wis::getWISTimestamp(v3);
    v51 |= 1u;
    uint64_t v40 = WISTimestamp;
    int8x8_t v8 = *v2;
  }
  if ((v8.i16[0] & 0x400) == 0)
  {
    *uint64_t v2 = (int8x8_t)(*(void *)&v8 | 0x400);
    uint64_t v10 = sub_10006FAF0();
    v51 |= 0x2000u;
    uint64_t v49 = v10;
    int8x8_t v8 = *v2;
  }
  if ((v8.i8[0] & 0x10) == 0)
  {
    switch(*(_DWORD *)(a1 + 20))
    {
      case 0:
        sub_1000155F0(&__p, (const void **)2);
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        char v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        if (!size) {
          goto LABEL_36;
        }
        if ((*(void *)v2 & 0x10) == 0) {
          *(void *)v2 |= 0x10uLL;
        }
        sub_10004A63C((uint64_t)v39, &__p);
        v51 |= 0x20u;
        char v42 = 1;
        goto LABEL_35;
      case 1:
        sub_1000155F0(&__p, (const void **)3);
        std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        char v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
        }
        if (v13)
        {
          if ((*(void *)v2 & 0x10) == 0) {
            *(void *)v2 |= 0x10uLL;
          }
          sub_10004A6B8((uint64_t)v39, &__p);
          v51 |= 0x20u;
          char v42 = 0;
LABEL_35:
          char v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
LABEL_36:
        if (v12 < 0) {
          goto LABEL_55;
        }
        break;
      case 2:
        sub_1000155F0(&__p, (const void **)3);
        sub_1000155F0(&buf, (const void **)2);
        std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
        }
        if (v14) {
          goto LABEL_44;
        }
        std::string::size_type v15 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v15 = buf.__r_.__value_.__l.__size_;
        }
        if (v15)
        {
LABEL_44:
          if ((*(void *)v2 & 0x10) == 0) {
            *(void *)v2 |= 0x10uLL;
          }
          v51 |= 0x20u;
          char v42 = 1;
          if (v14)
          {
            sub_10004A6B8((uint64_t)v39, &__p);
            v51 |= 0x20u;
            char v42 = 0;
          }
        }
        std::string::size_type v16 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        char v17 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v16 = buf.__r_.__value_.__l.__size_;
        }
        if (v16)
        {
          sub_10004A63C((uint64_t)v39, &buf);
          char v17 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        if (v17 < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_55:
        }
          operator delete(__p.__r_.__value_.__l.__data_);
        break;
      case 3:
        *uint64_t v2 = (int8x8_t)(*(void *)&v8 | 0x10);
        v51 |= 0x20u;
        char v42 = 1;
        break;
      default:
        break;
    }
  }
  int8x8_t v18 = *v2;
  if ((*(void *)v2 & 8) == 0)
  {
    *(void *)&v18 |= 8uLL;
    *(int8x8_t *)(a1 + 32) = v18;
    unsigned int v19 = *(unsigned __int8 *)(a1 + 16);
    if (v19 < 2)
    {
      int v20 = v51 | 8;
      int v21 = 1;
      goto LABEL_63;
    }
    if (v19 == 2)
    {
      v51 |= 0x18u;
      uint64_t v41 = 0x200000002;
      if ((v18.i8[0] & 0x20) == 0) {
        goto LABEL_65;
      }
      goto LABEL_76;
    }
    if (v19 == 3)
    {
      int v20 = v51 | 8;
      int v21 = 3;
LABEL_63:
      int v51 = v20;
      LODWORD(v41) = v21;
    }
  }
  if ((v18.i8[0] & 0x20) == 0)
  {
LABEL_65:
    sub_1000155F0(&__p, (const void **)4);
    std::string::size_type v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
    }
    if (v22)
    {
      if ((*(void *)v2 & 0x20) == 0) {
        *(void *)v2 |= 0x20uLL;
      }
      v51 |= 0x800u;
      if (v47 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v47, &__p);
      char v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v23 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int8x8_t v18 = *v2;
  }
LABEL_76:
  if ((v18.i8[0] & 0x40) == 0)
  {
    sub_1000155F0(&__p, 0);
    std::string::size_type v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v24 = __p.__r_.__value_.__l.__size_;
    }
    if (v24)
    {
      if ((*(void *)v2 & 0x40) == 0) {
        *(void *)v2 |= 0x40uLL;
      }
      v51 |= 0x100u;
      if (v44 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v44, &__p);
      char v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v25 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int8x8_t v18 = *v2;
  }
  if ((v18.i8[0] & 0x80) == 0)
  {
    sub_1000155F0(&__p, (const void **)5);
    std::string::size_type v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
    }
    if (v26)
    {
      if ((*(void *)v2 & 0x80) == 0) {
        *(void *)v2 |= 0x80uLL;
      }
      v51 |= 0x200u;
      if (v45 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v45, &__p);
      char v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v27 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int8x8_t v18 = *v2;
  }
  if ((v18.i16[0] & 0x100) == 0)
  {
    if (sub_10006F8EC())
    {
      sub_1000155F0(&__p, (const void **)6);
      std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      char v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
      }
      if (v28)
      {
        if ((*(void *)v2 & 0x100) == 0) {
          *(void *)v2 |= 0x100uLL;
        }
        v51 |= 0x1000u;
        if (v48 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        std::string::operator=(v48, &__p);
        char v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v29 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int8x8_t v18 = *v2;
    }
    else
    {
      int8x8_t v18 = *v2;
      if ((*(void *)v2 & 0x100) == 0)
      {
        *(void *)&v18 |= 0x100uLL;
        *uint64_t v2 = v18;
      }
    }
  }
  if ((v18.i16[0] & 0x200) == 0)
  {
    sub_1000155F0(&__p, (const void **)1);
    std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
    }
    if (!v30) {
      std::string::assign(&__p, "User");
    }
    if ((*(void *)v2 & 0x200) == 0) {
      *(void *)v2 |= 0x200uLL;
    }
    v51 |= 0x400u;
    if (v46 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v46, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  memset(&__p, 0, sizeof(__p));
  if (wireless_diagnostics::google::protobuf::MessageLite::SerializeToString())
  {
    uint64_t v31 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_INFO))
    {
      uint64_t v32 = sub_1000AA324(*(unsigned __int8 *)(a1 + 16));
      std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v33;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "file:#I Metric File(%s) updated device info with %zd bytes", (uint8_t *)&buf, 0x16u);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = __p.__r_.__value_.__l.__size_;
    }
    sub_10004A734(*(void *)(a1 + 40), (uint64_t)p_p, v35);
    sub_100049974(*(void *)(a1 + 40));
    pthread_mutex_lock(&stru_1001D69C0);
    uint64_t v36 = xmmword_1001D6A00;
    if (!(void)xmmword_1001D6A00) {
      sub_1000781CC();
    }
    uint64_t v37 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
    if (*((void *)&xmmword_1001D6A00 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D69C0);
    sub_1000A4FC4(v36, *(unsigned char *)(a1 + 16), v2);
    if (v37) {
      sub_10000B678(v37);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  awd::metrics::MetricFile::~MetricFile((awd::metrics::MetricFile *)v39);
}

void sub_10004A5B0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    pthread_mutex_unlock(&stru_1001D69C0);
    sub_10001F4A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10004A63C(uint64_t a1, std::string *__str)
{
  *(_DWORD *)(a1 + 144) |= 2u;
  uint64_t v2 = *(std::string **)(a1 + 16);
  if (v2 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }

  return std::string::operator=(v2, __str);
}

std::string *sub_10004A6B8(uint64_t a1, std::string *__str)
{
  *(_DWORD *)(a1 + 144) |= 4u;
  uint64_t v2 = *(std::string **)(a1 + 24);
  if (v2 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }

  return std::string::operator=(v2, __str);
}

uint64_t sub_10004A734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    *(void *)(a1 + 8) += a3;
    return std::ostream::write();
  }
  return result;
}

void sub_10004A768(uint64_t a1)
{
  sub_100049684(a1, 0);
  sub_100049684(a1, 0);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      v4 += *(void *)(v2 + 8);
      v2 += 32;
    }
    while (v2 != v3);
  }
  xpc_object_t v5 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = sub_1000AA324(*(unsigned __int8 *)(a1 + 16));
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v6;
    __int16 buf_12 = 1024;
    *(_DWORD *)buf_14 = v4 != 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "file:#I Metric File(%s) publish() called, and needsToPublish=%d", buf, 0x12u);
  }
  if (v4) {
    sub_100049CB0(a1);
  }
  std::string::size_type v26 = 0;
  char v27 = 0;
  uint64_t v28 = 0;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  std::string __p = &v26;
  if (v7 != v8)
  {
    do
    {
      sub_1000AA140(*(unsigned __int8 *)(a1 + 16));
      sub_10002F454((uint64_t **)&__p, (long long *)buf);
      if ((buf_14[9] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      v7 += 32;
    }
    while (v7 != v8);
    uint64_t v7 = *(void *)(a1 + 40);
    for (uint64_t i = *(void *)(a1 + 48); i != v7; uint64_t i = sub_10004B244(i - 32))
      ;
  }
  *(void *)(a1 + 48) = v7;
  uint64_t v10 = v26;
  if (v4)
  {
    std::string __p = 0;
    std::string::size_type v24 = 0;
    uint64_t v25 = 0;
    if (v26 != v27)
    {
      int v11 = *(NSObject **)a1;
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_INFO))
      {
        char v12 = sub_1000AA324(*(unsigned __int8 *)(a1 + 16));
        std::string::size_type v13 = v10;
        if (*((char *)v10 + 23) < 0) {
          std::string::size_type v13 = (uint64_t *)*v10;
        }
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v12;
        __int16 buf_12 = 2080;
        *(void *)buf_14 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "file:#I Metric File(%s) publish writing %s", buf, 0x16u);
      }
      sub_1000AA038();
    }
    std::string::size_type v14 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v15 = sub_1000AA324(*(unsigned __int8 *)(a1 + 16));
      int v16 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v15;
      __int16 buf_12 = 1024;
      *(_DWORD *)buf_14 = v16;
      *(_WORD *)&buf_14[4] = 2048;
      *(void *)&buf_14[6] = v24 - (unsigned char *)__p;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "file:#N Consolidated file (type=%s, tag=%d, size=%zd bytes)", buf, 0x1Cu);
    }
    sub_10009E910(*(unsigned __int8 *)(a1 + 16), *(unsigned int *)(a1 + 28), &__p);
    if (__p)
    {
      std::string::size_type v24 = __p;
      operator delete(__p);
    }
    uint64_t v10 = v26;
  }
  char v17 = v27;
  while (v10 != v17)
  {
    sub_1000306DC();
    v10 += 3;
  }
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v18 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  unsigned int v19 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  int v20 = sub_1000A4CB4(v18, *(unsigned __int8 *)(a1 + 16));
  __int16 v22 = v21;
  if (v19) {
    sub_10000B678(v19);
  }
  *(void *)(a1 + 32) = v22 & 0x7FF;
  *(_DWORD *)(a1 + 28) = v20;
  *(void *)std::string buf = &v26;
  sub_10002F868((void ***)buf);
}

void sub_10004AB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    pthread_mutex_unlock(&stru_1001D69C0);
    sub_10001F4A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004ABCC(uint64_t a1, int a2, unint64_t a3, int a4, uint64_t *a5)
{
  sub_100049684(a1, 0);
  if (!*(unsigned char *)(a1 + 24))
  {
    os_log_t v16 = *(os_log_t *)a1;
    if (!os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    char v17 = sub_1000AA324(*(unsigned __int8 *)(a1 + 16));
    int v37 = 136315394;
    unsigned int v38 = v17;
    __int16 v39 = 1024;
    *(_DWORD *)uint64_t v40 = a4;
    uint64_t v18 = "file:#E Metric File(%s, %d)::write: file is disabled";
    unsigned int v19 = v16;
    uint32_t v20 = 18;
    goto LABEL_13;
  }
  int v11 = *(_DWORD **)(a1 + 40);
  uint64_t v10 = *(_DWORD **)(a1 + 48);
  if (v11 != v10)
  {
    while (*v11 != a4)
    {
      v11 += 8;
      if (v11 == v10) {
        goto LABEL_14;
      }
    }
  }
  if (v11 == v10)
  {
LABEL_14:
    __int16 v21 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
    {
      __int16 v22 = sub_1000AA324(*(unsigned __int8 *)(a1 + 16));
      sub_100143328((uint64_t)v22, (uint8_t *)&v37, a4, v21);
    }
    return;
  }
  uint64_t v12 = *a5;
  uint64_t v13 = a5[1];
  if (*a5 == v13)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = *a5;
    do
    {
      uint64_t v14 = v14 + *(void *)(*(void *)(v15 + 8) + 8) - **(void **)(v15 + 8);
      v15 += 24;
    }
    while (v15 != v13);
  }
  char v23 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v24 = sub_1000AA324(*(unsigned __int8 *)(a1 + 16));
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3);
    int v37 = 136316162;
    unsigned int v38 = v24;
    __int16 v39 = 1024;
    *(_DWORD *)uint64_t v40 = a4;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&v40[6] = a2;
    __int16 v41 = 2048;
    unint64_t v42 = v25;
    __int16 v43 = 2048;
    uint64_t v44 = v14;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "file:#I Metric File(%s, %d)::write(0x%x, %zd metrics, %zd bytes)", (uint8_t *)&v37, 0x2Cu);
    uint64_t v12 = *a5;
    uint64_t v13 = a5[1];
  }
  if (v12 == v13)
  {
    std::string::size_type v26 = 0;
  }
  else
  {
    std::string::size_type v26 = 0;
    do
    {
      std::string::size_type v26 = &v26[*(void *)(*(void *)(v12 + 8) + 8) - **(void **)(v12 + 8)];
      v12 += 24;
    }
    while (v12 != v13);
  }
  uint64_t v27 = *(void *)(a1 + 8);
  sub_100049684(a1, 0);
  uint64_t v28 = *(void *)(a1 + 40);
  uint64_t v29 = *(void *)(a1 + 48);
  if (v28 == v29)
  {
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = 0;
    do
    {
      v30 += *(void *)(v28 + 8);
      v28 += 32;
    }
    while (v28 != v29);
  }
  int v31 = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(void *)v27 + 32))(v27, v30, v26);
  if (v31 != 3)
  {
    if (v31 == 2)
    {
      sub_10004A768(a1);
    }
    else if (v31 == 1)
    {
      uint64_t v32 = *(NSObject **)a1;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3);
        int v37 = 134218240;
        unsigned int v38 = v26;
        __int16 v39 = 2048;
        *(void *)uint64_t v40 = v33;
        uint64_t v18 = "file:#E  -- dropping because it's too large; %zd sanitized bytes for %zd metrics";
        unsigned int v19 = v32;
        uint32_t v20 = 22;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v37, v20);
        return;
      }
      return;
    }
    std::string::size_type v35 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_INFO))
    {
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3);
      int v37 = 134218240;
      unsigned int v38 = v26;
      __int16 v39 = 2048;
      *(void *)uint64_t v40 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "file:#I  -- writing %zd sanitized bytes for %zd metrics", (uint8_t *)&v37, 0x16u);
    }
    sub_100049684(a1, 1);
    sub_10004AFF0((uint64_t)v11, a2, a3, a5);
    return;
  }
  unsigned int v34 = *(NSObject **)a1;
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    int v37 = 134217984;
    unsigned int v38 = v26;
    uint64_t v18 = "file:#E  -- dropping because writing %zu bytes will increase total file size over quota";
    unsigned int v19 = v34;
    uint32_t v20 = 12;
    goto LABEL_13;
  }
}

void sub_10004AFE4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10001F4A8(a1);
}

void sub_10004AFF0(uint64_t a1, int a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a3;
  unint64_t v8 = *(void *)(a1 + 24);
  if (v8 >= 2) {
    unint64_t v5 = a3 / v8 * v8;
  }
  awd::metrics::MetricLog::MetricLog((uint64_t)v33);
  int v34 = a2;
  v39 |= 0x60u;
  unint64_t v35 = v5;
  uint64_t v9 = *a4;
  uint64_t v10 = a4[1];
  if (*a4 == v10)
  {
    LODWORD(v11) = 0;
    int v31 = 0;
    uint64_t v32 = 0;
    uint64_t v30 = &v31;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    do
    {
      uint64_t v11 = v11 + *(void *)(*(void *)(v12 + 8) + 8) - **(void **)(v12 + 8);
      v12 += 24;
    }
    while (v12 != v10);
    int v31 = 0;
    uint64_t v32 = 0;
    uint64_t v30 = &v31;
    uint64_t v27 = &v30;
    uint64_t v28 = &v31;
    do
    {
      LODWORD(__p) = *(_DWORD *)(v9 + 4);
      sub_10004B84C((uint64_t)&v27, (unsigned int *)&__p);
      v9 += 24;
    }
    while (v9 != v10);
    uint64_t v13 = v30;
    if (v30 != &v31)
    {
      do
      {
        int v14 = *((_DWORD *)v13 + 7);
        int v15 = v37;
        if (v37 == v38)
        {
          sub_10004BAE8((uint64_t)&v36, v37 + 1);
          int v15 = v37;
        }
        int v37 = v15 + 1;
        *(_DWORD *)(v36 + 4 * v15) = v14;
        os_log_t v16 = v13[1];
        if (v16)
        {
          do
          {
            char v17 = (void **)v16;
            os_log_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            char v17 = (void **)v13[2];
            BOOL v18 = *v17 == v13;
            uint64_t v13 = v17;
          }
          while (!v18);
        }
        uint64_t v13 = v17;
      }
      while (v17 != &v31);
    }
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (wireless_diagnostics::google::protobuf::MessageLite::SerializeToString())
  {
    int v20 = HIBYTE(v29);
    if (v29 < 0) {
      int v20 = (int)v28;
    }
    wis::createTagForProtobuf((uint64_t *)&__p, (wis *)0xF, v20 + v11, v19);
    sub_10004A734(a1, (uint64_t)__p, v26 - (unsigned char *)__p);
    if (v29 >= 0) {
      __int16 v21 = &v27;
    }
    else {
      __int16 v21 = v27;
    }
    if (v29 >= 0) {
      uint64_t v22 = HIBYTE(v29);
    }
    else {
      uint64_t v22 = (uint64_t)v28;
    }
    sub_10004A734(a1, (uint64_t)v21, v22);
    uint64_t v24 = *a4;
    uint64_t v23 = a4[1];
    while (v24 != v23)
    {
      sub_10004A734(a1, **(void **)(v24 + 8), *(void *)(*(void *)(v24 + 8) + 8) - **(void **)(v24 + 8));
      v24 += 24;
    }
    sub_100049974(a1);
    if (__p)
    {
      std::string::size_type v26 = __p;
      operator delete(__p);
    }
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(v27);
  }
  sub_10004B7F8((uint64_t)&v30, v31);
  awd::metrics::MetricLog::~MetricLog((awd::metrics::MetricLog *)v33);
}

uint64_t sub_10004B244(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    std::ostream::flush();
    uint64_t v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_10004B2B0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_10004B244(v4 - 32);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_10004B334(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 32;
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v3 - 32);
      uint64_t v6 = *(void *)(v3 - 16);
      uint64_t v7 = *(void *)(v3 - 8);
      *(void *)(v3 - 16) = 0;
      *(void *)(v4 - 16) = v6;
      *(void *)(v4 - 8) = v7;
      v3 -= 32;
      v4 -= 32;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *uint64_t result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10004B3B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    sub_10004B244(i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10004B404(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  unint64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (*a5) {
    return sub_10004B424(a1, a2, v5);
  }
  else {
    return sub_10004B4C8((uint64_t *)a1, a2, v5);
  }
}

uint64_t sub_10004B424(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = (uint64_t)*a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      int8x8_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t sub_10004B4C8(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = *a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      uint64_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

void *sub_10004B574(uint64_t a1, void *a2, void *a3, unint64_t *a4)
{
  uint64_t v13 = a4;
  while (!a2)
  {
    BOOL v6 = 1;
    if (!a3) {
      goto LABEL_15;
    }
LABEL_11:
    if (a3[3] == a3[4] && (*(unsigned int (**)(void *))(*a3 + 72))(a3) == -1) {
      goto LABEL_15;
    }
    if (!v6) {
      return a2;
    }
LABEL_17:
    uint8x8_t v8 = (char *)a2[3];
    if (v8 == (char *)a2[4]) {
      char v9 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      char v9 = *v8;
    }
    char v12 = v9;
    sub_10004B6F0(&v13, &v12);
    uint64_t v10 = a2[3];
    if (v10 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v10 + 1;
    }
  }
  if (a2[3] != a2[4])
  {
    BOOL v6 = 0;
    if (!a3) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  int v7 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
  BOOL v6 = v7 == -1;
  if (v7 == -1) {
    a2 = 0;
  }
  if (a3) {
    goto LABEL_11;
  }
LABEL_15:
  if (!v6)
  {
    a3 = 0;
    goto LABEL_17;
  }
  return a2;
}

unint64_t **sub_10004B6F0(unint64_t **a1, unsigned char *a2)
{
  unint64_t v4 = *a1;
  BOOL v6 = (unsigned char *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    char v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      sub_10002B5E0();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    int v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      int v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      BOOL v6 = (unsigned char *)*v4;
    }
    unint64_t *v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *BOOL v6 = *a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

void sub_10004B7F8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10004B7F8(a1, *a2);
    sub_10004B7F8(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_10004B84C(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = sub_10004B8B8(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, a2);
  *(void *)(a1 + 8) = v3;
  unint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      unint64_t v5 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      unint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t *sub_10004B8B8(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  BOOL v6 = sub_10004B940(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_10001716C(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10004B940(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      char v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        char v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          char v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      char v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    size_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      size_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    unint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          __int16 v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      __int16 v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_10004BAE8(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 12);
  if (v2 < a2)
  {
    int v3 = 2 * v2;
    if (v3 <= a2) {
      int v3 = a2;
    }
    if (v3 <= 4) {
      int v3 = 4;
    }
    *(_DWORD *)(result + 12) = v3;
    operator new[]();
  }
  return result;
}

uint64_t sub_10004BB94()
{
  if ((byte_1001D6A10 & 1) == 0)
  {
    byte_1001D6A10 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E5C, &stru_1001D69C0, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10004BBD0(void *a1@<X8>)
{
  sub_10004C13C(a1);
  pthread_mutex_lock(&stru_1001D6968);
  if (!(void)xmmword_1001D69A8) {
    sub_10012402C();
  }
  if (*((void *)&xmmword_1001D69A8 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D69A8 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6968);
  uint64_t v2 = a1[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_10004BD1C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&stru_1001D6968);
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10000B678(v3);
  }
  _Unwind_Resume(a1);
}

void *sub_10004BD88(void *a1)
{
  uint64_t v2 = dispatch_queue_create("WISCoreAnalyticsEvents", 0);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v2;
  if (v2)
  {
    int v3 = v2;
    dispatch_retain(v2);
    a1[3] = 0;
    dispatch_release(v3);
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void sub_10004BDE4(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10000BA54(&v6, a1);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10004BF8C;
  v5[3] = &unk_1001B5FC0;
  v5[4] = a1;
  sub_10004BE98(a3, &v6, v5);
  if (v7) {
    sub_10000B678(v7);
  }
}

void sub_10004BE80(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    sub_10000B678(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004BE98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *a2;
  unsigned int v7 = (NSObject **)(*a2 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_10004C354;
  v10[3] = &unk_1001B6AA8;
  unint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = v6;
  unint64_t v13 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v9 = v5;
  id v11 = v9;
  sub_100123EA0(a1, v7, (uint64_t)v10);

  if (v13) {
    sub_10000B678(v13);
  }
}

void sub_10004BF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10000B678(a16);
  }

  _Unwind_Resume(a1);
}

void sub_10004BF90()
{
  uint64_t v0 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "caobserver:#I Stopping CA events observer", v1, 2u);
  }
}

void sub_10004BFFC(void *a1, int a2, uint64_t a3)
{
  if (a2 == 2)
  {
    sub_10000BA54(&v6, a1);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_10004C0B8;
    v5[3] = &unk_1001B5FC0;
    v5[4] = a1;
    sub_10004BE98(a3, &v6, v5);
    if (v7) {
      sub_10000B678(v7);
    }
  }
}

void sub_10004C0A0(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    sub_10000B678(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_10004C0BC()
{
  uint64_t v0 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "caobserver:#I Kickstarting CA events observer", v2, 2u);
  }
  return +[WISCoreAnalyticsObserver shared];
}

void sub_10004C13C(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x38uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = off_1001B6A08;
  sub_10004BD88(v2 + 3);
  *a1 = v2 + 3;
  a1[1] = v2;

  sub_10002A1E4((uint64_t)a1, v2 + 3, (uint64_t)(v2 + 3));
}

void sub_10004C1BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10004C1DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6A08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_10004C230(uint64_t a1)
{
  return sub_100029804((void *)(a1 + 24));
}

void *sub_10004C23C(void *a1)
{
  *a1 = off_1001B6A58;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_10004C288(void *a1)
{
  *a1 = off_1001B6A58;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10000B678(v1);
  }

  operator delete();
}

void *sub_10004C2F4@<X0>(void *a1@<X8>)
{
  return sub_100018888(a1, "WISCoreAnalyticsEvents");
}

unsigned char *sub_10004C304@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 0;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_10004C340(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10004C34C(uint64_t a1, int a2, uint64_t a3)
{
}

void sub_10004C354(uint64_t a1, NSObject **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  group = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
}

void sub_10004C3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004C3D4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10004C3F0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

uint64_t sub_10004C400()
{
  if ((byte_1001D69B8 & 1) == 0)
  {
    byte_1001D69B8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100029800, &stru_1001D6968, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10004C54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004C560()
{
}

void sub_10004C6E4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&stru_1001D6968);
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10000B678(v3);
  }
  _Unwind_Resume(a1);
}

void *sub_10004C770(void *a1, const char *a2, dispatch_qos_class_t a3, const char *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.wis.wirelessinsightsd", a4);
  return a1;
}

void sub_10004C7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

void sub_10004C7F8(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10000BA54(&v5, a1);
  unint64_t v4 = (NSObject **)(v5 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1174405120;
  _DWORD v7[2] = sub_10004EDA8;
  v7[3] = &unk_1001B6C20;
  void v7[5] = v5;
  unint64_t v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void v7[4] = &stru_1001B6B10;
  sub_100123D98(a3, v4, (uint64_t)v7);
  if (v8) {
    sub_10000B678(v8);
  }
  if (v6) {
    sub_10000B678(v6);
  }
}

void sub_10004C8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_10000B678(a18);
  }
  if (a11) {
    sub_10000B678(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004C8E8(uint64_t a1, char *a2, char *a3)
{
  sub_10004EDE4(&v25.__pn_, a3);
  std::__fs::filesystem::__status(&v25, 0);
  if (!buf.__pn_.__r_.__value_.__s.__data_[0] || buf.__pn_.__r_.__value_.__s.__data_[0] == 255)
  {
    uint64_t v6 = *(NSObject **)(a1 + 32);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    if (a3[23] >= 0) {
      std::string::size_type v7 = (std::string::size_type)a3;
    }
    else {
      std::string::size_type v7 = *(void *)a3;
    }
    LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v7;
    unint64_t v8 = "snapshotter:#I Log directory does not exist: '%s'";
    id v9 = v6;
    goto LABEL_8;
  }
  std::__fs::filesystem::__status(&v25, 0);
  id v11 = *(NSObject **)(a1 + 32);
  if (buf.__pn_.__r_.__value_.__s.__data_[0] == 2)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      if (a3[23] >= 0) {
        std::string::size_type v12 = (std::string::size_type)a3;
      }
      else {
        std::string::size_type v12 = *(void *)a3;
      }
      LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "snapshotter:#I Creating hard-links from '%s'", (uint8_t *)&buf, 0xCu);
    }
    std::__fs::filesystem::directory_iterator::directory_iterator(&v24, &v25, 0, none);
    ptr = v24.__imp_.__ptr_;
    cntrl = v24.__imp_.__cntrl_;
    if (v24.__imp_.__cntrl_)
    {
      atomic_fetch_add_explicit(&v24.__imp_.__cntrl_->__shared_owners_, 1uLL, memory_order_relaxed);
      unsigned int v15 = v24.__imp_.__cntrl_;
      v23.__imp_.__ptr_ = ptr;
      v23.__imp_.__cntrl_ = cntrl;
      if (v24.__imp_.__cntrl_)
      {
        atomic_fetch_add_explicit(&v24.__imp_.__cntrl_->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10000B678(v15);
      }
    }
    else
    {
      v23.__imp_.__ptr_ = v24.__imp_.__ptr_;
      v23.__imp_.__cntrl_ = 0;
    }
    std::string::size_type v17 = 0;
    while (v23.__imp_.__ptr_)
    {
      unsigned int v18 = std::__fs::filesystem::directory_iterator::__dereference(&v23);
      std::__fs::filesystem::__status(&v18->__p_, 0);
      if (buf.__pn_.__r_.__value_.__s.__data_[0] == 1)
      {
        unint64_t v19 = *(NSObject **)(a1 + 32);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          sub_10004CD90(&v18->__p_, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            sub_1000173FC(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            buf.__pn_ = __p;
          }
          if ((buf.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_std::__fs::filesystem::path buf = &buf;
          }
          else {
            p_std::__fs::filesystem::path buf = (std::__fs::filesystem::path *)buf.__pn_.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v27 = 136315138;
          uint64_t v28 = p_buf;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "snapshotter:#I  -- linking '%s'", v27, 0xCu);
          if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__pn_.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        sub_10004EDE4(&__p, a2);
        sub_10004CE54((uint64_t)&__p, &v18->__p_, &buf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::__fs::filesystem::__create_hard_link(&v18->__p_, &buf, 0);
        if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__pn_.__r_.__value_.__l.__data_);
        }
        ++v17;
      }
      std::__fs::filesystem::directory_iterator::__increment(&v23, 0);
    }
    if (v23.__imp_.__cntrl_) {
      sub_10000B678(v23.__imp_.__cntrl_);
    }
    if (v24.__imp_.__cntrl_) {
      sub_10000B678(v24.__imp_.__cntrl_);
    }
    __int16 v21 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v17;
      unint64_t v8 = "snapshotter:#I %zd hard links created";
      id v9 = v21;
LABEL_8:
      os_log_type_t v10 = OS_LOG_TYPE_INFO;
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if (a3[23] >= 0) {
      std::string::size_type v16 = (std::string::size_type)a3;
    }
    else {
      std::string::size_type v16 = *(void *)a3;
    }
    LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v16;
    unint64_t v8 = "snapshotter:#E Trying to hard-link files from '%s', which exists, but is not a directory?!";
    id v9 = v11;
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_9;
  }
LABEL_10:
  if (SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_10004CCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    uint64_t v36 = __cxa_begin_catch(exception_object);
    int v37 = *(NSObject **)(v33 + 32);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      sub_100143380(v32, (uint64_t)v36, v37);
    }
    __cxa_end_catch();
    JUMPOUT(0x10004C9C0);
  }
  _Unwind_Resume(exception_object);
}

double sub_10004CD90@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_10001F670();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void sub_10004CE54(uint64_t a1@<X0>, const std::__fs::filesystem::path *a2@<X1>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1000173FC(a3, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  sub_10004CD90(a2, (uint64_t)&v9);
  sub_10004E480(a3, &v9);
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
  }
  sub_10004E534(a2, (uint64_t)&v9);
  sub_10004E5F8(&v8, ".plist");
  v10.__data_ = (const std::string_view::value_type *)&v8;
  if (sub_10004E4F8(&v9, v10))
  {
    BOOL v5 = 1;
  }
  else
  {
    sub_10004E534(a2, (uint64_t)&v7);
    sub_10004E5F8(&__p, ".metriclog");
    v11.__data_ = (const std::string_view::value_type *)&__p;
    BOOL v5 = sub_10004E4F8(&v7, v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v7.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__pn_.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
    if (!v5) {
      return;
    }
    goto LABEL_18;
  }
  if (v5) {
LABEL_18:
  }
    std::string::append(&a3->__pn_, ".log");
}

void sub_10004CF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 + 23) < 0) {
    operator delete(*(void **)v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004D004(uint64_t a1, char *a2, char *a3)
{
  std::basic_string_view<_CharT, _Traits>::size_type v6 = (const std::__fs::filesystem::path *)sub_10004EDE4(&v29.__pn_, a3);
  std::__fs::filesystem::__status(v6, 0);
  if (!buf.__pn_.__r_.__value_.__s.__data_[0] || buf.__pn_.__r_.__value_.__s.__data_[0] == 255)
  {
    std::__fs::filesystem::path v7 = *(NSObject **)(a1 + 32);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    if (a3[23] >= 0) {
      std::string::size_type v8 = (std::string::size_type)a3;
    }
    else {
      std::string::size_type v8 = *(void *)a3;
    }
    LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v8;
    std::__fs::filesystem::path v9 = "snapshotter:#I Log directory does not exist: '%s'";
    std::__fs::filesystem::path::__string_view v10 = v7;
    goto LABEL_8;
  }
  std::__fs::filesystem::__status(&v29, 0);
  std::string::size_type v12 = *(NSObject **)(a1 + 32);
  if (buf.__pn_.__r_.__value_.__s.__data_[0] == 2)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      if (a3[23] >= 0) {
        std::string::size_type v13 = (std::string::size_type)a3;
      }
      else {
        std::string::size_type v13 = *(void *)a3;
      }
      LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "snapshotter:#I Copying files from '%s'", (uint8_t *)&buf, 0xCu);
    }
    std::__fs::filesystem::directory_iterator::directory_iterator(&v25, &v29, 0, none);
    ptr = v25.__imp_.__ptr_;
    cntrl = v25.__imp_.__cntrl_;
    if (v25.__imp_.__cntrl_)
    {
      atomic_fetch_add_explicit(&v25.__imp_.__cntrl_->__shared_owners_, 1uLL, memory_order_relaxed);
      std::string::size_type v16 = v25.__imp_.__cntrl_;
      v24.__imp_.__ptr_ = ptr;
      v24.__imp_.__cntrl_ = cntrl;
      if (v25.__imp_.__cntrl_)
      {
        atomic_fetch_add_explicit(&v25.__imp_.__cntrl_->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10000B678(v16);
      }
    }
    else
    {
      v24.__imp_.__ptr_ = v25.__imp_.__ptr_;
      v24.__imp_.__cntrl_ = 0;
    }
    std::string::size_type v18 = 0;
    while (v24.__imp_.__ptr_)
    {
      unint64_t v19 = std::__fs::filesystem::directory_iterator::__dereference(&v24);
      std::__fs::filesystem::__status(&v19->__p_, 0);
      if (buf.__pn_.__r_.__value_.__s.__data_[0] == 1)
      {
        uint64_t v20 = *(NSObject **)(a1 + 32);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          sub_10004CD90(&v19->__p_, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            sub_1000173FC(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            buf.__pn_ = __p;
          }
          if ((buf.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_std::__fs::filesystem::path buf = &buf;
          }
          else {
            p_std::__fs::filesystem::path buf = (std::__fs::filesystem::path *)buf.__pn_.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v27 = 136315138;
          uint64_t v28 = p_buf;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "snapshotter:#I  -- copying '%s'", v27, 0xCu);
          if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__pn_.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        sub_10004EDE4(&__p, a2);
        sub_10004CE54((uint64_t)&__p, &v19->__p_, &buf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::__fs::filesystem::__copy_file(&v19->__p_, &buf, overwrite_existing, 0);
        if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__pn_.__r_.__value_.__l.__data_);
        }
        ++v18;
      }
      std::__fs::filesystem::directory_iterator::__increment(&v24, 0);
    }
    if (v24.__imp_.__cntrl_) {
      sub_10000B678(v24.__imp_.__cntrl_);
    }
    if (v25.__imp_.__cntrl_) {
      sub_10000B678(v25.__imp_.__cntrl_);
    }
    unsigned int v22 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v18;
      std::__fs::filesystem::path v9 = "snapshotter:#I %zd files copied";
      std::__fs::filesystem::path::__string_view v10 = v22;
LABEL_8:
      os_log_type_t v11 = OS_LOG_TYPE_INFO;
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, (uint8_t *)&buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (a3[23] >= 0) {
      std::string::size_type v17 = (std::string::size_type)a3;
    }
    else {
      std::string::size_type v17 = *(void *)a3;
    }
    LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v17;
    std::__fs::filesystem::path v9 = "snapshotter:#E Trying to grab files from '%s', which exists, but is not a directory?!";
    std::__fs::filesystem::path::__string_view v10 = v12;
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_9;
  }
LABEL_10:
  if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_10004D3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  if (a2 == 1)
  {
    uint64_t v32 = __cxa_begin_catch(exception_object);
    uint64_t v33 = *(NSObject **)(v28 + 32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v27 + 23) < 0) {
        uint64_t v27 = (uint64_t **)*v27;
      }
      uint64_t v34 = (*(uint64_t (**)(void *))(*(void *)v32 + 16))(v32);
      *(_DWORD *)(v29 - 112) = 136315394;
      *(void *)(v29 - 108) = v27;
      *(_WORD *)(v29 - 100) = 2080;
      *(void *)(v29 - 98) = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "snapshotter:#E Error copying log files from '%s': %s", (uint8_t *)(v29 - 112), 0x16u);
    }
    __cxa_end_catch();
    JUMPOUT(0x10004D0D8);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004D514(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = 0u;
  a2[1] = 0u;
  sub_100002260((uint64_t)buf);
  v28[0] = (void *)time(0);
  localtime_r((const time_t *)v28, &v41);
  char v40 = 48;
  unint64_t v4 = sub_10004E874(buf, &v40);
  *(void *)((char *)v4 + *(void *)(*v4 - 24) + 24) = 4;
  BOOL v5 = (void *)std::ostream::operator<<();
  char v42 = 45;
  std::basic_string_view<_CharT, _Traits>::size_type v6 = sub_100004D64(v5, (uint64_t)&v42, 1);
  char v39 = 48;
  std::__fs::filesystem::path v7 = sub_10004E874(v6, &v39);
  *(void *)((char *)v7 + *(void *)(*v7 - 24) + 24) = 2;
  std::string::size_type v8 = (void *)std::ostream::operator<<();
  char v42 = 45;
  std::__fs::filesystem::path v9 = sub_100004D64(v8, (uint64_t)&v42, 1);
  char v38 = 48;
  std::__fs::filesystem::path::__string_view v10 = sub_10004E874(v9, &v38);
  *(void *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 2;
  os_log_type_t v11 = (void *)std::ostream::operator<<();
  char v42 = 45;
  std::string::size_type v12 = sub_100004D64(v11, (uint64_t)&v42, 1);
  char v37 = 48;
  std::string::size_type v13 = sub_10004E874(v12, &v37);
  *(void *)((char *)v13 + *(void *)(*v13 - 24) + 24) = 2;
  BOOL v14 = (void *)std::ostream::operator<<();
  char v42 = 45;
  unsigned int v15 = sub_100004D64(v14, (uint64_t)&v42, 1);
  char v36 = 48;
  std::string::size_type v16 = sub_10004E874(v15, &v36);
  *(void *)((char *)v16 + *(void *)(*v16 - 24) + 24) = 2;
  std::string::size_type v17 = (void *)std::ostream::operator<<();
  char v42 = 45;
  std::string::size_type v18 = sub_100004D64(v17, (uint64_t)&v42, 1);
  char v42 = 48;
  unint64_t v19 = sub_10004E874(v18, &v42);
  *(void *)((char *)v19 + *(void *)(*v19 - 24) + 24) = 2;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v50 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  sub_1000A111C(buf);
  *(_OWORD *)&v41.tm_sec = *(_OWORD *)buf;
  *(void *)&v41.tm_mon = v44;
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v41, 0);
  if ((buf[0] == 255 || !buf[0])
    && !std::__fs::filesystem::__create_directory((const std::__fs::filesystem::path *)&v41, 0))
  {
    unsigned int v22 = a1[4];
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_54;
    }
    uint64_t v23 = v34;
    if (v35 < 0) {
      uint64_t v23 = (void **)v34[0];
    }
    *(_DWORD *)std::__fs::filesystem::path buf = 136315138;
    *(void *)&uint8_t buf[4] = v23;
LABEL_28:
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "snapshotter:#E Intended snapshot directory already exists: %s", buf, 0xCu);
    goto LABEL_54;
  }
  sub_10004EE4C((std::string *)&v41, (uint64_t)v34);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v41, 0);
  if (buf[0] && buf[0] != 255)
  {
    unsigned int v22 = a1[4];
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_54;
    }
    std::__fs::filesystem::directory_iterator v24 = v34;
    if (v35 < 0) {
      std::__fs::filesystem::directory_iterator v24 = (void **)v34[0];
    }
    *(_DWORD *)std::__fs::filesystem::path buf = 136315138;
    *(void *)&uint8_t buf[4] = v24;
    goto LABEL_28;
  }
  if (!std::__fs::filesystem::__create_directory((const std::__fs::filesystem::path *)&v41, 0))
  {
    unsigned int v22 = a1[4];
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_54;
    }
    std::__fs::filesystem::directory_iterator v25 = v34;
    if (v35 < 0) {
      std::__fs::filesystem::directory_iterator v25 = (void **)v34[0];
    }
    *(_DWORD *)std::__fs::filesystem::path buf = 136315138;
    *(void *)&uint8_t buf[4] = v25;
    goto LABEL_28;
  }
  uint64_t v20 = dispatch_group_create();
  __int16 v21 = v20;
  if (v20)
  {
    dispatch_retain(v20);
    dispatch_group_enter(v21);
    dispatch_release(v21);
  }
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 1174405120;
  v30[2] = sub_10004DD20;
  v30[3] = &unk_1001B6B30;
  v30[4] = a1;
  dispatch_group_t group = v21;
  if (v21)
  {
    dispatch_retain(v21);
    if (group) {
      dispatch_group_enter(group);
    }
  }
  if (SHIBYTE(v41.tm_year) < 0)
  {
    sub_1000173FC(&v32, *(void **)&v41.tm_sec, *(unint64_t *)&v41.tm_hour);
  }
  else
  {
    long long v32 = *(_OWORD *)&v41.tm_sec;
    uint64_t v33 = *(void *)&v41.tm_mon;
  }
  sub_10000BA54(v28, a1);
  std::string::size_type v26 = a1[2];
  *(void *)std::__fs::filesystem::path buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 1174405120;
  uint64_t v44 = sub_10004EF00;
  dispatch_object_t object = (dispatch_object_t)&unk_1001B6C58;
  char v47 = v28[0];
  int v48 = (std::__shared_weak_count *)v28[1];
  if (v28[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v28[1] + 1, 1uLL, memory_order_relaxed);
  }
  unint64_t v46 = v30;
  dispatch_async(v26, buf);
  if (v48) {
    sub_10000B678(v48);
  }
  if (v28[1]) {
    sub_10000B678((std::__shared_weak_count *)v28[1]);
  }
  if (SHIBYTE(v41.tm_year) < 0)
  {
    sub_1000173FC(v28, *(void **)&v41.tm_sec, *(unint64_t *)&v41.tm_hour);
  }
  else
  {
    *(_OWORD *)uint64_t v28 = *(_OWORD *)&v41.tm_sec;
    uint64_t v29 = *(uint64_t (**)(uint64_t))&v41.tm_mon;
  }
  *(_OWORD *)std::__fs::filesystem::path buf = *(_OWORD *)v28;
  uint64_t v27 = v29;
  v28[1] = 0;
  uint64_t v29 = 0;
  v28[0] = 0;
  uint64_t v44 = v27;
  dispatch_object_t object = v21;
  if (v21) {
    dispatch_retain(v21);
  }
  sub_10004E3D8((uint64_t)a2, (long long *)buf);
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)v32);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v21)
  {
    dispatch_group_leave(v21);
    dispatch_release(v21);
  }
LABEL_54:
  if (SHIBYTE(v41.tm_year) < 0) {
    operator delete(*(void **)&v41.tm_sec);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
}

void sub_10004DBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, dispatch_group_t group, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v43)
  {
    dispatch_group_leave(v43);
    dispatch_release(v43);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  sub_10004E440(v42);
  _Unwind_Resume(a1);
}

void sub_10004DD20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::__fs::filesystem::path::__string_view v3 = *(NSObject **)(v2 + 32);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__fs::filesystem::path buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "snapshotter:#I --------------------------------", buf, 2u);
    std::__fs::filesystem::path::__string_view v3 = *(NSObject **)(v2 + 32);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 71) < 0)
    {
      sub_1000173FC(buf, *(void **)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      *(_OWORD *)std::__fs::filesystem::path buf = *(_OWORD *)(a1 + 48);
      uint64_t v11 = *(void *)(a1 + 64);
    }
    unint64_t v4 = buf;
    if (v11 < 0) {
      unint64_t v4 = *(uint8_t **)buf;
    }
    *(_DWORD *)long long __dst = 136315138;
    *(void *)&__dst[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "snapshotter:#N Starting snapshot into %s", __dst, 0xCu);
    if (SHIBYTE(v11) < 0) {
      operator delete(*(void **)buf);
    }
  }
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v5 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  std::basic_string_view<_CharT, _Traits>::size_type v6 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  if (*(char *)(a1 + 71) < 0)
  {
    sub_1000173FC(__p, *(void **)(a1 + 48), *(void *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 64);
  }
  sub_100078710(v5, (uint64_t)__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (v6) {
    sub_10000B678(v6);
  }
  pthread_mutex_lock(&stru_1001D6C28);
  std::__fs::filesystem::path v7 = (void *)xmmword_1001D6C68;
  if (!(void)xmmword_1001D6C68) {
    sub_10007F320();
  }
  if (*((void *)&xmmword_1001D6C68 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6C68 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6C28);
  sub_10007FF68(v7);
}

void sub_10004E1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

unsigned char *sub_10004E2E8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  double result = (unsigned char *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0) {
    return sub_1000173FC(result, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  long long v7 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)double result = v7;
  return result;
}

void sub_10004E354(_Unwind_Exception *exception_object)
{
  std::__fs::filesystem::path::__string_view v3 = *(NSObject **)(v1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    unint64_t v4 = *(NSObject **)(v1 + 40);
    if (v4) {
      dispatch_release(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10004E378(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    std::__fs::filesystem::path::__string_view v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

uint64_t sub_10004E3D8(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  std::basic_string_view<_CharT, _Traits>::size_type v6 = *(NSObject **)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  if (v6) {
    dispatch_release(v6);
  }
  return a1;
}

uint64_t sub_10004E440(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::__fs::filesystem::path *sub_10004E480(std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_) {
      std::string::push_back(&a1->__pn_, 47);
    }
    int v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0) {
      uint64_t v5 = this;
    }
    else {
      uint64_t v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    }
    if (v4 >= 0) {
      std::string::size_type size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__pn_.__r_.__value_.__l.__size_;
    }
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

BOOL sub_10004E4F8(const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v2 = *((void *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v2;
  }
  return std::__fs::filesystem::path::__compare(a1, a2) == 0;
}

double sub_10004E534@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__extension(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_10001F670();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

std::string *sub_10004E5F8(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  std::__fs::filesystem::path::__string_view v3 = a2 - 1;
  while (*++v3)
    ;
  sub_10004E654(this, a2, v3);
  return this;
}

void sub_10004E638(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10004E654(std::string *this, char *a2, char *a3)
{
  int v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::__fs::filesystem::path::__string_view v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    std::__fs::filesystem::path::__string_view v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    BOOL v14 = this;
    if ((v6 & 0x80) != 0) {
      BOOL v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      unsigned char *i = v16;
    }
    unsigned char *i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    sub_10004E7CC(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v12 = __p;
    }
    else {
      std::string::size_type v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_10004E7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10004E7CC(void *result, char *a2, char *a3, unint64_t a4)
{
  int v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10001F670();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    double result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    int v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)int v4 = v10;
    int v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)int v4 = 0;
  return result;
}

void *sub_10004E874(void *a1, char *a2)
{
  std::__fs::filesystem::path::__string_view v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    std::basic_string_view<_CharT, _Traits>::size_type v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_10004E928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_10004E93C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void *sub_10004EA40(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_10001F670();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    int v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_10004EAEC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10004EB64(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_10004EC3C);
  __cxa_rethrow();
}

void sub_10004EB8C(_Unwind_Exception *a1)
{
}

void sub_10004EBA4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10004EBDC(uint64_t a1)
{
}

uint64_t sub_10004EBF8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_10004EC3C(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(result + 4));
    sub_100029804(v1);
    operator delete();
  }
  return result;
}

void *sub_10004EC94(void *a1)
{
  *a1 = off_1001B6BD0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_10004ECE0(void *a1)
{
  *a1 = off_1001B6BD0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10000B678(v1);
  }

  operator delete();
}

void *sub_10004ED4C@<X0>(void *a1@<X8>)
{
  return sub_100018888(a1, "LogSnapshotter");
}

unsigned char *sub_10004ED5C@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 0;
  double result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_10004ED98(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10004EDA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10004EDB8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10004EDD4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

std::string *sub_10004EDE4(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  sub_10004E654(a1, a2, &a2[v3]);
  return a1;
}

void sub_10004EE30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10004EE4C(std::string *this, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      goto LABEL_9;
    }
    BOOL v4 = *(unsigned char **)a2;
  }
  else
  {
    BOOL v4 = (unsigned char *)a2;
    if (!*(unsigned char *)(a2 + 23)) {
      goto LABEL_9;
    }
  }
  if (*v4 == 47)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      this->__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
    }
    goto LABEL_12;
  }
LABEL_9:
  if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_) {
    std::string::push_back(this, 47);
  }
LABEL_12:
  int v5 = *(char *)(a2 + 23);
  BOOL v6 = v5 < 0;
  if (v5 >= 0) {
    size_t v7 = (char *)a2;
  }
  else {
    size_t v7 = *(char **)a2;
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if (v6) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  sub_10004E654(this, v7, &v7[v8]);
  return this;
}

uint64_t sub_10004EF00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10004EF10(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10004EF2C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

BOOL sub_10004EF3C()
{
  uint64_t v2 = *(NSObject **)(v0 + 32);
  return os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
}

void sub_10004EF5C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_DEFAULT, a4, &a9, 0xCu);
}

uint64_t sub_10004EF7C()
{
  if ((byte_1001D69B8 & 1) == 0)
  {
    byte_1001D69B8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100029800, &stru_1001D6968, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10004EFB8()
{
  if ((byte_1001D6A10 & 1) == 0)
  {
    byte_1001D6A10 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E5C, &stru_1001D69C0, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10004EFF4()
{
  if ((byte_1001D6C78 & 1) == 0)
  {
    byte_1001D6C78 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E78, &stru_1001D6C28, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10004F030(uint64_t result, int a2)
{
  *(_DWORD *)uint64_t result = a2;
  *(void *)(result + 8) = 0;
  return result;
}

uint64_t sub_10004F03C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_10004F08C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4)
  {
    sub_10000712C(a2, v4);
    int v5 = (void *)*a2;
  }
  else
  {
    int v5 = 0;
  }
  return wireless_diagnostics::google::protobuf::MessageLite::SerializeToArray(*(wireless_diagnostics::google::protobuf::MessageLite **)(a1 + 8), v5);
}

void sub_10004F114(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004F130()
{
}

void sub_10004F3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  pthread_mutex_unlock(&stru_1001D6968);
  if (a14) {
    sub_10000B678(a14);
  }
  char v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    sub_10000B678(v16);
  }
  _Unwind_Resume(a1);
}

void sub_10004F43C(uint64_t a1)
{
}

void sub_10004F444(uint64_t a1)
{
  sub_100051950((uint64_t)v4, dword_100174A90, (unsigned int *)"16MetricAggregator");
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_100008888;
  v2[3] = &unk_1001B6D48;
  v2[4] = a1;
  uint64_t v3 = v2;
  sub_1000519D4((uint64_t **)(a1 + 104), "Location metrics", (uint64_t)v4, (void **)&v3);
  sub_10004B7F8((uint64_t)v4, v5);
}

void sub_10004F4F0(_Unwind_Exception *a1)
{
  sub_10004B7F8(v1 - 40, *(void **)(v1 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_10004F508(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10004F524(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_10000B678(v1);
  }
}

uint64_t sub_10004F534(uint64_t a1)
{
  *(void *)a1 = off_1001B6CC8;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = off_1001B6D20;
  *(void *)(a1 + 56) = a1 + 64;
  *(_WORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  return a1;
}

void *sub_10004F5D8(void *a1, const char *a2, dispatch_qos_class_t a3, const char *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.wis.wirelessinsightsd", a4);
  return a1;
}

void sub_10004F638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_10004F660(uint64_t a1)
{
  *(void *)a1 = off_1001B6CC8;
  uint64_t v2 = a1 + 48;
  *(void *)(a1 + 48) = off_1001B6D20;
  sub_100051890(a1 + 104, *(void **)(a1 + 112));
  uint64_t v3 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_100051830(a1 + 56, *(void **)(a1 + 64));
  nullsub_15(v2);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100029804((void *)(a1 + 8));
  return a1;
}

uint64_t sub_10004F728(uint64_t a1)
{
  return sub_10004F660(a1 - 48);
}

void sub_10004F730(uint64_t a1)
{
  sub_10004F660(a1);

  operator delete();
}

void sub_10004F768(uint64_t a1)
{
  sub_10004F660(a1 - 48);

  operator delete();
}

void sub_10004F7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000BA54(&v7, (void *)(a1 + 8));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  double v6[2] = sub_10004F8D4;
  void v6[3] = &unk_1001B6D68;
  v6[4] = a1;
  int v5 = (NSObject **)(v7 + 24);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  double v9[2] = sub_100051D64;
  v9[3] = &unk_1001B6F98;
  void v9[5] = v7;
  uint64_t v10 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void v9[4] = v6;
  sub_100123EA0(a3, v5, (uint64_t)v9);
  if (v10) {
    sub_10000B678(v10);
  }
  if (v8) {
    sub_10000B678(v8);
  }
}

void sub_10004F8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_10000B678(a22);
  }
  if (a15) {
    sub_10000B678(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004F8D4(uint64_t a1)
{
}

void sub_10004F8DC(void *a1)
{
  uint64_t v2 = a1[9];
  if (v2)
  {
    int v4 = a1[5];
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)
      || (*(_DWORD *)std::__fs::filesystem::path buf = 134217984,
          *(void *)unint64_t v11 = v2,
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "agg:#I SubmissionAggregator must force-close %zd triggers still pending. Flushing to disk now.", buf, 0xCu), a1[9]))
    {
      do
      {
        uint64_t v5 = a1[7];
        BOOL v6 = a1[5];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v7 = *(_DWORD *)(v5 + 32);
          int v8 = *(_DWORD *)(v5 + 36);
          int v9 = *(_DWORD *)(v5 + 40);
          *(_DWORD *)std::__fs::filesystem::path buf = 67109632;
          *(_DWORD *)unint64_t v11 = v7;
          *(_WORD *)&void v11[4] = 1024;
          *(_DWORD *)&v11[6] = v8;
          __int16 v12 = 1024;
          int v13 = v9;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "agg:#N [xx-] Trigger(cid=0x%x, trid=0x%x, sid=%u) - SubmissionAggregator force-ending; we may not have finished",
            buf,
            0x14u);
        }
        unint64_t v1 = v1 & 0xFFFFFFFF00000000 | *(unsigned int *)(v5 + 40);
        sub_10004FAC0((uint64_t)a1, *(void *)(v5 + 32), v1);
      }
      while (a1[9]);
    }
  }
}

void sub_10004FA3C(uint64_t a1)
{
  uint64_t v3 = a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100051E10;
  block[3] = &unk_1001B6FC8;
  void block[4] = a1 + 8;
  void block[5] = &v3;
  uint64_t v2 = a1 + 24;
  unint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void sub_10004FAC0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v9 = a2;
  int v10 = a3;
  int v4 = sub_100008280(a1 + 56, &v9);
  if ((uint64_t *)(a1 + 64) != v4)
  {
    pthread_mutex_lock(&stru_1001D6C28);
    uint64_t v5 = xmmword_1001D6C68;
    if (!(void)xmmword_1001D6C68) {
      sub_10007F320();
    }
    if (*((void *)&xmmword_1001D6C68 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6C68 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D6C28);
    uint64_t v6 = v4[7];
    v8[0] = v4[6];
    v8[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    sub_100080894(v5, (uint64_t)v8);
  }
  int v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::__fs::filesystem::path buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v9;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = HIDWORD(v9);
    *(_WORD *)&buf[14] = 1024;
    int v12 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "agg:#E [EEE] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Tried to flush trigger, but it doesnt exist!", buf, 0x14u);
  }
}

void sub_10004FC68(_Unwind_Exception *a1)
{
}

void sub_10004FC9C(uint64_t a1)
{
  sub_10000BA54(&v1, (void *)(a1 + 8));
  operator new();
}

void sub_10004FD7C(uint64_t a1)
{
}

uint64_t sub_10004FD84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t sub_10004FDA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 48) + 56))();
}

void sub_10004FDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject **a5, void **a6)
{
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  ctu::TimerService::throwIfPeriodIsZero();
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v10 = v17;
  uint64_t v11 = v18;
  int v12 = *a5;
  *a5 = 0;
  aBlock = *a6;
  dispatch_object_t object = v12;
  *a6 = 0;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, void, dispatch_object_t *, void **))(*(void *)a1 + 24))(a1, __p, v10, v11, 0, &object, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10004FEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, NSObject *a10, __int16 a11, char a12, char a13)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  sub_1001434F8(&a10, (uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_10004FEE0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        sub_10004FF68(v3);
      }
      sub_10000B678(v5);
    }
  }
}

void sub_10004FF54(_Unwind_Exception *a1)
{
  sub_10000B678(v1);
  _Unwind_Resume(a1);
}

void sub_10004FF68(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v2 + 1;
  std::string::size_type v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v3 = *(void **)(a1 + 56);
  int v4 = (void *)(a1 + 64);
  if (v3 != (void *)(a1 + 64))
  {
    do
    {
      uint64_t v5 = v3[6];
      unint64_t v6 = *(unsigned int *)(v5 + 24);
      unsigned int v7 = sub_10007F2F0(v5);
      if (v2 - v6 == 1) {
        sub_1000502B0(a1, v3[6], v3[4], *((_DWORD *)v3 + 10));
      }
      if (v2 - (int)v6 >= v7)
      {
        int v8 = v3 + 4;
        if (v27 >= v28)
        {
          unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 2) + 1;
          if (v10 > 0x1555555555555555) {
            sub_10002B5E0();
          }
          if (0x5555555555555556 * ((v28 - v26) >> 2) > v10) {
            unint64_t v10 = 0x5555555555555556 * ((v28 - v26) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v28 - v26) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v11 = 0x1555555555555555;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            int v12 = (char *)sub_100051F74((uint64_t)&v28, v11);
          }
          else {
            int v12 = 0;
          }
          int v13 = &v12[4 * ((v27 - v26) >> 2)];
          uint64_t v14 = *v8;
          *((_DWORD *)v13 + 2) = *((_DWORD *)v3 + 10);
          *(void *)int v13 = v14;
          unsigned int v15 = v27;
          uint64_t v16 = v13;
          if (v27 != v26)
          {
            do
            {
              uint64_t v17 = *(void *)(v15 - 12);
              v15 -= 12;
              int v18 = *((_DWORD *)v15 + 2);
              *(void *)(v16 - 12) = v17;
              v16 -= 12;
              *((_DWORD *)v16 + 2) = v18;
            }
            while (v15 != v26);
            unsigned int v15 = v26;
          }
          unint64_t v6 = (unint64_t)(v13 + 12);
          std::string::size_type v26 = v16;
          uint64_t v28 = &v12[12 * v11];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          uint64_t v9 = *v8;
          *((_DWORD *)v27 + 2) = *((_DWORD *)v3 + 10);
          *(void *)uint64_t v27 = v9;
          unint64_t v6 = (unint64_t)(v27 + 12);
        }
        uint64_t v27 = (char *)v6;
      }
      unint64_t v19 = (void *)v3[1];
      if (v19)
      {
        do
        {
          unsigned __int8 v20 = v19;
          unint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unsigned __int8 v20 = (void *)v3[2];
          BOOL v21 = *v20 == (void)v3;
          uint64_t v3 = v20;
        }
        while (!v21);
      }
      uint64_t v3 = v20;
    }
    while (v20 != v4);
    for (uint64_t i = v26; i != v27; i += 12)
    {
      unint64_t v6 = v6 & 0xFFFFFFFF00000000 | *((unsigned int *)i + 2);
      sub_100050488(a1, *(void *)i, v6);
    }
  }
  if (*(void *)(a1 + 72)) {
    goto LABEL_31;
  }
  uint64_t v23 = v26;
  if (v26 == v27)
  {
    std::__fs::filesystem::directory_iterator v24 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::__fs::filesystem::path buf = 67109120;
      int v30 = v2;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "agg:#I Stopping periodic timer because no more work is pending (gen=%u)", buf, 8u);
    }
    uint64_t v25 = *(void *)(a1 + 88);
    *(void *)(a1 + 88) = 0;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
LABEL_31:
    uint64_t v23 = v26;
  }
  if (v23) {
    operator delete(v23);
  }
}

void sub_100050260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100050284(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000502A0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1000502B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7 = *(_DWORD *)(a2 + 24);
  unsigned int v8 = sub_10007F2F0(a2);
  uint64_t v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v11[0] = 67110144;
    v11[1] = a3;
    __int16 v12 = 1024;
    int v13 = HIDWORD(a3);
    __int16 v14 = 1024;
    int v15 = a4;
    __int16 v16 = 2048;
    uint64_t v17 = 5 * v8;
    __int16 v18 = 1024;
    int v19 = v8 + v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "agg:#D [x..] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Grace period complete; setting final timeout of %lld sec (end gen=%u)",
      (uint8_t *)v11,
      0x24u);
  }
  pthread_mutex_lock(&stru_1001D6C80);
  uint64_t v10 = xmmword_1001D6CC0;
  if (!(void)xmmword_1001D6CC0) {
    sub_1000B14D8();
  }
  if (*((void *)&xmmword_1001D6CC0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6CC0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6C80);
  sub_1000B3CD0(v10);
}

void sub_100050440(_Unwind_Exception *a1)
{
}

void sub_100050488(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v18 = a2;
  int v19 = a3;
  int v4 = sub_100008280(a1 + 56, &v18);
  if ((uint64_t *)(a1 + 64) == v4)
  {
    int v15 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v28 = 67109632;
      *(_DWORD *)&v28[4] = v18;
      LOWORD(v29) = 1024;
      *(_DWORD *)((char *)&v29 + 2) = HIDWORD(v18);
      HIWORD(v29) = 1024;
      int v30 = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "agg:#I [oE.] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Final timeout fired but trigger no longer exists", v28, 0x14u);
    }
  }
  else
  {
    sub_100002260((uint64_t)v28);
    uint64_t v5 = (uint64_t *)sub_10007F318(v4[6]);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (*v5 != v7)
    {
      do
      {
        unsigned int v8 = sub_100004D64(v28, (uint64_t)"0x", 2);
        *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
        uint64_t v9 = (void *)std::ostream::operator<<();
        sub_100004D64(v9, (uint64_t)",", 1);
        v6 += 4;
      }
      while (v6 != v7);
    }
    uint64_t v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v12 = v18;
      int v11 = HIDWORD(v18);
      int v13 = v19;
      std::stringbuf::str();
      __int16 v14 = v17 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)std::__fs::filesystem::path buf = 67109890;
      int v21 = v12;
      __int16 v22 = 1024;
      int v23 = v11;
      __int16 v24 = 1024;
      int v25 = v13;
      __int16 v26 = 2082;
      uint64_t v27 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "agg:#I [xx-] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Final timeout fired; missing clients: %{public}s",
        buf,
        0x1Eu);
      if (v17 < 0) {
        operator delete(__p);
      }
    }
    sub_10004FAC0(a1, v18, v19);
    if (v32 < 0) {
      operator delete(v31);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_10005079C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10004E93C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000507C4(uint64_t a1)
{
  sub_10000BA54(&v1, (void *)(a1 + 8));
  operator new();
}

void sub_1000508A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t *a6)
{
  uint64_t v17 = a3;
  int v18 = a4;
  uint64_t v10 = sub_100008280(a1 + 56, &v17);
  if ((uint64_t *)(a1 + 64) == v10)
  {
    int v15 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::__fs::filesystem::path buf = 67110144;
      int v20 = v17;
      __int16 v21 = 1024;
      int v22 = HIDWORD(v17);
      __int16 v23 = 1024;
      int v24 = v18;
      __int16 v25 = 1024;
      int v26 = a2;
      __int16 v27 = 1024;
      int v28 = HIDWORD(a2);
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "agg:#E [ E ] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Tried adding Metric(mid=0x%x, profid=0x%x) but trigger no longer exists!", buf, 0x20u);
    }
  }
  else
  {
    uint64_t v13 = v10[6];
    __int16 v14 = (std::__shared_weak_count *)a6[1];
    v16[0] = *a6;
    v16[1] = (uint64_t)v14;
    *a6 = 0;
    a6[1] = 0;
    sub_100008690(a1, v13, a2, v11, v12, a5, v16);
    if (v14) {
      sub_10000B678(v14);
    }
  }
}

void sub_1000509E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10000B678(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100050A04(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v3 = (void *)(a1 + 8);
  int v4 = v5;
  if (!v5) {
    return v3;
  }
  uint64_t v6 = v3;
  do
  {
    if (*(void *)((char *)v4 + 36) >= __PAIR64__(a3, HIDWORD(a2))) {
      uint64_t v6 = v4;
    }
    else {
      ++v4;
    }
    int v4 = (void *)*v4;
  }
  while (v4);
  if (v6 == v3 || *(void *)((char *)v6 + 36) != __PAIR64__(a3, HIDWORD(a2))) {
    return v3;
  }
  return v6;
}

void sub_100050A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a6 + 8);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10000BA54(&v7, (void *)(a1 + 8));
  operator new();
}

void sub_100050B88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, int a6, uint64_t *a7)
{
  uint64_t v11 = (void *)(a1 + 8);
  memset(__p, 0, 24);
  sub_10001E158(__p, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  __p[3] = a4;
  int v14 = a5;
  int v15 = a6;
  uint64_t v12 = a7[1];
  uint64_t v16 = *a7;
  uint64_t v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10000BA54(&v18, v11);
  operator new();
}

void sub_100050D28(uint64_t a1)
{
  sub_10000BA54(&v1, (void *)(a1 + 8));
  operator new();
}

float sub_100050E20(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v11 = a3;
  int v12 = a4;
  uint64_t v6 = sub_100008280(a1 + 56, &v11);
  uint64_t v7 = (uint64_t *)(a1 + 64);
  unsigned int v8 = *(NSObject **)(a1 + 40);
  if (v7 == v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::__fs::filesystem::path buf = 67109888;
      int v14 = v11;
      __int16 v15 = 1024;
      int v16 = HIDWORD(v11);
      __int16 v17 = 1024;
      int v18 = v12;
      __int16 v19 = 1024;
      int v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "agg:#E [ E ] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Add hold for cid 0x%x failed because no submission found", buf, 0x1Au);
    }
  }
  else
  {
    uint64_t v9 = v6;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::__fs::filesystem::path buf = 67109888;
      int v14 = v11;
      __int16 v15 = 1024;
      int v16 = HIDWORD(v11);
      __int16 v17 = 1024;
      int v18 = v12;
      __int16 v19 = 1024;
      int v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "agg:#I [ X ] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Add hold for cid 0x%x", buf, 0x1Au);
    }
    sub_10001E6F0((void *)v9[6], a2);
  }
  return result;
}

void sub_100050F80(uint64_t a1)
{
  sub_10000BA54(&v1, (void *)(a1 + 8));
  operator new();
}

void sub_100051078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 80))
  {
    wis::getWISTimestamp((wis *)a1);
    pthread_mutex_lock(&stru_1001D69C0);
    uint64_t v6 = xmmword_1001D6A00;
    if (!(void)xmmword_1001D6A00) {
      sub_1000781CC();
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
    if (*((void *)&xmmword_1001D6A00 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D69C0);
    int v8 = sub_1000A33AC(v6);
    if (v7) {
      sub_10000B678(v7);
    }
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(void *)uint64_t v11 = 0x704000300;
      *(_WORD *)&v11[8] = 1024;
      *(_DWORD *)&unsigned char v11[10] = a3;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "agg:#I Sending AWD event Trigger(cid=0x%x, trid=0x%x, sid=%u)", v11, 0x14u);
    }
    sub_100004214(a1, a2, (a3 << 32) | 7);
  }
  uint64_t v10 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v11 = 136315138;
    *(void *)&void v11[4] = wis::asString();
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "agg:#I createTriggerFromWisd_sync cancelled due to not fDiagnosticsMode=%s", v11, 0xCu);
  }
}

void sub_100051268(_Unwind_Exception *a1)
{
}

void sub_1000512B4(uint64_t a1, ctu *this)
{
  uint64_t v7 = a1;
  int v8 = (int)this;
  ctu::hex((uint64_t *)&v4, this, this);
  uint64_t v2 = std::string::insert(&v4, 0, "Trigger-wirelessinsightsd-");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type v6 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_1000035F0();
}

void sub_100051420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100051458(uint64_t a1, long long *a2, uint64_t *a3, void *aBlock)
{
  long long v6 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v6;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  if (aBlock) {
    uint64_t v7 = _Block_copy(aBlock);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *a3;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = a3 + 1;
  uint64_t v10 = a3[1];
  *(void *)(a1 + 40) = v10;
  uint64_t v11 = a1 + 40;
  uint64_t v12 = a3[2];
  *(void *)(a1 + 48) = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    *a3 = (uint64_t)v9;
    *uint64_t v9 = 0;
    a3[2] = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v11;
  }
  return a1;
}

BOOL sub_1000514E8(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

void sub_100051558(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000515D8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1000516B0);
  __cxa_rethrow();
}

void sub_100051600(_Unwind_Exception *a1)
{
}

void sub_100051618(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100051650(uint64_t a1)
{
}

uint64_t sub_10005166C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000516B0(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1000516DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000516EC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100051708(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_100051718(void *a1)
{
  *a1 = off_1001B6F48;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_100051764(void *a1)
{
  *a1 = off_1001B6F48;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10000B678(v1);
  }

  operator delete();
}

void *sub_1000517D0@<X0>(void *a1@<X8>)
{
  return sub_100018888(a1, "SubmissionAggregator");
}

unsigned char *sub_1000517E0@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 2;
  float result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_100051820(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100051830(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100051830(a1, *a2);
    sub_100051830(a1, a2[1]);
    size_t v4 = (std::__shared_weak_count *)a2[7];
    if (v4) {
      sub_10000B678(v4);
    }
    operator delete(a2);
  }
}

void sub_100051890(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100051890(a1, *a2);
    sub_100051890(a1, a2[1]);
    sub_1000518EC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1000518EC(uint64_t a1)
{
  sub_10004B7F8(a1 + 32, *(void **)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t sub_100051950(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  *(void *)(a1 + 8) = 0;
  size_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    size_t v6 = a2;
    do
    {
      sub_10004B8B8((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_1000519BC(_Unwind_Exception *a1)
{
  sub_10004B7F8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1000519D4(uint64_t **a1, char *a2, uint64_t a3, void **a4)
{
  sub_100051A70((uint64_t)a1, a2, a3, a4, (uint64_t)v9);
  size_t v5 = (uint64_t **)sub_100051AF8((uint64_t)a1, &v8, v9[0] + 4);
  size_t v6 = *v5;
  if (!*v5)
  {
    sub_10001716C(a1, v8, v5, v9[0]);
    size_t v6 = v9[0];
    v9[0] = 0;
  }
  sub_100051D0C((uint64_t)v9, 0);
  return v6;
}

void sub_100051A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100051D0C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_100051A70(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 8;
  uint64_t v10 = operator new(0x58uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  sub_100051B8C(v9, (uint64_t)v10 + 32, a2, a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
}

void sub_100051AE0(_Unwind_Exception *a1)
{
  sub_100051D0C(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100051AF8(uint64_t a1, void *a2, void *a3)
{
  size_t v5 = (void *)(a1 + 8);
  size_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!sub_1000514E8(a3, v4 + 4)) {
          break;
        }
        size_t v4 = (void *)*v7;
        size_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_1000514E8(v8, a3)) {
        break;
      }
      size_t v5 = v7 + 1;
      size_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_100051B8C(int a1, uint64_t a2, char *__s, uint64_t a4, void **a5)
{
  sub_100018888(__p, __s);
  sub_100051C28(v8, a4);
  sub_100051458(a2, (long long *)__p, v8, *a5);
  sub_10004B7F8((uint64_t)v8, (void *)v8[1]);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100051C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100051C28(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100051C80(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_100051C68(_Unwind_Exception *a1)
{
  sub_10004B7F8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100051C80(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    size_t v4 = a2;
    size_t v5 = (uint64_t **)result;
    size_t v6 = result + 1;
    do
    {
      float result = sub_10004B8B8(v5, v6, v4 + 7, v4 + 7);
      int v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          size_t v4 = v8;
        }
        while (!v9);
      }
      size_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_100051D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000518EC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_100051D64(uint64_t a1, NSObject **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  dispatch_group_t group = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
}

void sub_100051DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100051DE4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100051E00(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void sub_100051E10(uint64_t a1)
{
}

void sub_100051E1C(uint64_t **a1)
{
  uint64_t v8 = a1;
  uint64_t v1 = **a1;
  int v2 = *((unsigned __int8 *)*a1 + 8);
  *(unsigned char *)(v1 + 80) = v2;
  if (!v2)
  {
    uint64_t v3 = *(void *)(v1 + 72);
    if (v3)
    {
      uint64_t v4 = v1 + 56;
      size_t v5 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::__fs::filesystem::path buf = 134217984;
        uint64_t v10 = v3;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "agg:#N Clearing collection of %zd submissions due to ShouldCollect=false", buf, 0xCu);
      }
      int v7 = *(void **)(v1 + 64);
      size_t v6 = (void *)(v1 + 64);
      sub_100051830(v4, v7);
      *(v6 - 1) = v6;
      *size_t v6 = 0;
      v6[1] = 0;
    }
  }
  operator delete();
}

uint64_t sub_100051F1C(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

void *sub_100051F74(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_10002A63C();
  }
  return operator new(12 * a2);
}

void sub_100051FBC(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = sub_100008280(v2 + 56, (_DWORD *)*a1 + 2);
  uint64_t v4 = v3;
  if ((uint64_t *)(v2 + 64) == v3)
  {
    __int16 v17 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *((_DWORD *)v1 + 2);
      int v19 = *((_DWORD *)v1 + 3);
      int v20 = *((_DWORD *)v1 + 4);
      *(_DWORD *)std::__fs::filesystem::path buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v18;
      LOWORD(v45) = 1024;
      *(_DWORD *)((char *)&v45 + 2) = v19;
      HIWORD(v45) = 1024;
      int v46 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "agg:#E [WW.] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Tried marking pending-clients list complete, but no longer exists!", buf, 0x14u);
    }
LABEL_29:
    operator delete();
  }
  sub_10007F2F8(v3[6], &v35);
  BOOL v5 = sub_1000085A0(v4[6]);
  if (v35.n128_u64[0] == v35.n128_u64[1])
  {
    __int16 v21 = *(NSObject **)(v2 + 40);
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    if (!v5)
    {
      if (v22)
      {
        int v30 = *((_DWORD *)v1 + 2);
        int v31 = *((_DWORD *)v1 + 3);
        int v32 = *((_DWORD *)v1 + 4);
        *(_DWORD *)std::__fs::filesystem::path buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v30;
        LOWORD(v45) = 1024;
        *(_DWORD *)((char *)&v45 + 2) = v31;
        HIWORD(v45) = 1024;
        int v46 = v32;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "agg:#I [oo.] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Marking pending-clients list complete; all components checked in",
          buf,
          0x14u);
      }
      goto LABEL_27;
    }
    if (v22)
    {
      int v23 = *((_DWORD *)v1 + 2);
      int v24 = *((_DWORD *)v1 + 3);
      int v25 = *((_DWORD *)v1 + 4);
      *(_DWORD *)std::__fs::filesystem::path buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v23;
      LOWORD(v45) = 1024;
      *(_DWORD *)((char *)&v45 + 2) = v24;
      HIWORD(v45) = 1024;
      int v46 = v25;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "agg:#I [oox] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Marking pending-clients list complete; all components checked in",
        buf,
        0x14u);
    }
LABEL_26:
    sub_10004FAC0(v2, v1[1], *((_DWORD *)v1 + 4));
LABEL_27:
    if (v35.n128_u64[0])
    {
      v35.n128_u64[1] = v35.n128_u64[0];
      operator delete((void *)v35.n128_u64[0]);
    }
    goto LABEL_29;
  }
  sub_100002260((uint64_t)buf);
  unint64_t v7 = v35.n128_u64[1];
  for (unint64_t i = v35.n128_u64[0]; i != v7; i += 4)
  {
    uint64_t v8 = sub_100004D64(buf, (uint64_t)"0x", 2);
    *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
    BOOL v9 = (void *)std::ostream::operator<<();
    sub_100004D64(v9, (uint64_t)",", 1);
  }
  uint64_t v10 = *(NSObject **)(v2 + 40);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (!v11) {
      goto LABEL_23;
    }
    int v13 = *((_DWORD *)v1 + 2);
    int v12 = *((_DWORD *)v1 + 3);
    int v14 = *((_DWORD *)v1 + 4);
    std::stringbuf::str();
    if (v34 >= 0) {
      __int16 v15 = __p;
    }
    else {
      __int16 v15 = (void **)__p[0];
    }
    *(_DWORD *)char v36 = 67109890;
    int v37 = v13;
    __int16 v38 = 1024;
    int v39 = v12;
    __int16 v40 = 1024;
    int v41 = v14;
    __int16 v42 = 2082;
    __int16 v43 = v15;
    int v16 = "agg:#I [ooW] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Marking pending-clients list complete; missing components: %{public}s";
  }
  else
  {
    if (!v11) {
      goto LABEL_23;
    }
    int v27 = *((_DWORD *)v1 + 2);
    int v26 = *((_DWORD *)v1 + 3);
    int v28 = *((_DWORD *)v1 + 4);
    std::stringbuf::str();
    if (v34 >= 0) {
      uint64_t v29 = __p;
    }
    else {
      uint64_t v29 = (void **)__p[0];
    }
    *(_DWORD *)char v36 = 67109890;
    int v37 = v27;
    __int16 v38 = 1024;
    int v39 = v26;
    __int16 v40 = 1024;
    int v41 = v28;
    __int16 v42 = 2082;
    __int16 v43 = v29;
    int v16 = "agg:#I [ow.] Trigger(cid=0x%x, trid=0x%x, sid=%u) - Marking pending-clients list complete; missing components: %{public}s";
  }
  _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v16, v36, 0x1Eu);
  if (v34 < 0) {
    operator delete(__p[0]);
  }
LABEL_23:
  if (v48 < 0) {
    operator delete(v47);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (!v5) {
    goto LABEL_27;
  }
  goto LABEL_26;
}

void sub_100052464(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void (__cdecl **a22)(std::stringbuf *__hidden this),uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (a14) {
    operator delete(a14);
  }
  operator delete();
}

uint64_t *sub_100052598(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v10 = a1;
  uint64_t v11 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(_DWORD *)(v1 + 24);
  int v6 = *(_DWORD *)(v1 + 28);
  uint64_t v8 = *(void *)(v1 + 32);
  unint64_t v7 = *(std::__shared_weak_count **)(v1 + 40);
  uint64_t v12 = v8;
  int v13 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1000508A8(v2, v3, v4, v5, v6, &v12);
  if (v13) {
    sub_10000B678(v13);
  }
  sub_100052634(&v11);
  return sub_10000BA00((uint64_t *)&v10);
}

void sub_10005260C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10000B678(a12);
  }
  sub_100052634(&a10);
  sub_10000BA00(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100052634(uint64_t *result)
{
  uint64_t v1 = *result;
  *float result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 40);
    if (v2) {
      sub_10000B678(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100052688(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v12 = a1;
  uint64_t v13 = v2;
  uint64_t v3 = *(unsigned int **)(v2 + 16);
  uint64_t v4 = *(unsigned int **)(v2 + 24);
  if (v3 != v4)
  {
    uint64_t v5 = *(void *)v2;
    do
    {
      uint64_t v6 = *v3;
      sub_100052804(*(void *)(v2 + 56), &v16);
      uint64_t v7 = *(unsigned int *)(v2 + 8);
      uint64_t v8 = *(void *)(v2 + 40);
      uint64_t v10 = *(unsigned int *)(v2 + 48);
      int v9 = *(_DWORD *)(v2 + 52);
      uint64_t v14 = v16;
      __int16 v15 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v1 = v1 & 0xFFFFFFFF00000000 | v10;
      sub_1000508A8(v5, v7 | (v6 << 32), v8, v1, v9, &v14);
      if (v15) {
        sub_10000B678(v15);
      }
      if (v17) {
        sub_10000B678(v17);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  sub_1000527A0(&v13);
  return sub_10000BA00((uint64_t *)&v12);
}

void sub_100052764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a13) {
    sub_10000B678(a13);
  }
  if (a15) {
    sub_10000B678(a15);
  }
  sub_1000527A0(&a11);
  sub_10000BA00(&a10);
  _Unwind_Resume(a1);
}

void *sub_1000527A0(void *result)
{
  unint64_t v1 = (void *)*result;
  *float result = 0;
  if (v1)
  {
    uint64_t v2 = (std::__shared_weak_count *)v1[8];
    if (v2) {
      sub_10000B678(v2);
    }
    uint64_t v3 = (void *)v1[2];
    if (v3)
    {
      v1[3] = v3;
      operator delete(v3);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100052804@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = sub_100052860((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_10005284C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100052860(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1001B6FF8;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = 0;
  sub_1000148E0((void *)(a1 + 24), *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  return a1;
}

void sub_1000528C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000528D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000528F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100052948(uint64_t **a1)
{
  unint64_t v1 = a1;
  sub_100050E20(**a1, *((_DWORD *)*a1 + 2), *(uint64_t *)((char *)*a1 + 12), *((_DWORD *)*a1 + 5));
  operator delete();
}

void sub_1000529A8()
{
}

void sub_1000529D4(uint64_t **a1)
{
  uint64_t v4 = a1;
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = sub_100008280(v2 + 56, (_DWORD *)*a1 + 3);
  sub_100008370(v2, (uint64_t)v3, *((_DWORD *)v1 + 2), *(uint64_t *)((char *)v1 + 12), *((_DWORD *)v1 + 5));
  operator delete();
}

void sub_100052A48()
{
}

uint64_t *sub_100052A74(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_10002BA08(a1, a2);
  uint64_t v4 = (std::__shared_weak_count *)a2[7];
  if (v4) {
    sub_10000B678(v4);
  }
  operator delete(a2);
  return v3;
}

uint64_t *sub_100052AB4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  sub_100051078(*(void *)v1, v1 + 16, *(unsigned int *)(v1 + 8));
  sub_100052B1C(&v4);
  return sub_10000BA00((uint64_t *)&v3);
}

void sub_100052B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100052B1C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 24);
    if (v2) {
      sub_10000B678(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100052B70()
{
  if ((byte_1001D69B8 & 1) == 0)
  {
    byte_1001D69B8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100029800, &stru_1001D6968, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100052BAC()
{
  if ((byte_1001D6EF0 & 1) == 0)
  {
    byte_1001D6EF0 = 1;
    return __cxa_atexit((void (*)(void *))sub_100051554, &stru_1001D6EA0, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100052BE8()
{
  if ((byte_1001D6CD0 & 1) == 0)
  {
    byte_1001D6CD0 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E7C, &stru_1001D6C80, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100052C24()
{
  if ((byte_1001D6C78 & 1) == 0)
  {
    byte_1001D6C78 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E78, &stru_1001D6C28, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100052C60()
{
  if ((byte_1001D6A10 & 1) == 0)
  {
    byte_1001D6A10 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E5C, &stru_1001D69C0, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100052C9C()
{
  if ((byte_1001D6B70 & 1) == 0)
  {
    byte_1001D6B70 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E6C, &stru_1001D6B20, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100052CE0(uint64_t a1, char a2)
{
  sub_10000BA54(&v9, (void *)(a1 + 8));
  uint64_t v5 = v9;
  uint64_t v4 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10000B678(v4);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1174405120;
  double v6[2] = sub_100052DF4;
  void v6[3] = &unk_1001B7068;
  v6[4] = a1;
  void v6[5] = v5;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v8 = a2;
  xpc_activity_register("com.apple.wirelessinsightsd.publication", XPC_ACTIVITY_CHECK_IN, v6);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_100052DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100052DF4(void *a1, _xpc_activity_s *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        xpc_activity_state_t state = xpc_activity_get_state(a2);
        if (state == 2)
        {
          uint64_t v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::__fs::filesystem::path buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "timer:#I ****** Publication timer FIRE! *********", buf, 2u);
          }
          sub_100018888(&v11, "Timer-pubRun");
          sub_1000035F0();
        }
        if (!state)
        {
          uint64_t v9 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::__fs::filesystem::path buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "timer:#I ****** Publication timer check in! *********", buf, 2u);
          }
          sub_100018888(&__p, "Timer-pubCheckin");
          sub_1000035F0();
        }
      }
      sub_10000B678(v7);
    }
  }
}

void sub_1000532B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,xpc_object_t object,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
}

uint64_t sub_100053394(uint64_t a1)
{
  return *(void *)a1;
}

void sub_10005339C(xpc_object_t *a1, int64_t a2)
{
  xpc_dictionary_set_BOOL(*a1, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_int64(*a1, XPC_ACTIVITY_INTERVAL, a2);
  xpc_dictionary_set_int64(*a1, XPC_ACTIVITY_DELAY, 9 * a2 / 10);
  xpc_dictionary_set_int64(*a1, XPC_ACTIVITY_GRACE_PERIOD, a2 / 10);
  xpc_dictionary_set_string(*a1, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_object_t v4 = *a1;

  xpc_dictionary_set_BOOL(v4, XPC_ACTIVITY_ALLOW_BATTERY, 1);
}

void sub_100053488(uint64_t a1)
{
}

uint64_t sub_100053490(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000534AC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

uint64_t sub_1000534BC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000534D8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1000534E8(uint64_t a1, uint64_t a2, ctu *a3, int a4)
{
  int v5 = (int)a3;
  sub_1000536B4(a2, a3);
  sub_10000BA54(&v22, (void *)(a1 + 8));
  uint64_t v9 = v22;
  char v8 = v23;
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10000B678(v8);
  }
  char v10 = HIBYTE(v21);
  uint64_t v11 = __src[0];
  if (v21 >= 0) {
    uint64_t v12 = __src;
  }
  else {
    uint64_t v12 = (void **)__src[0];
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 1174405120;
  handler[2] = sub_1000538BC;
  handler[3] = &unk_1001B70C8;
  handler[4] = a1;
  handler[5] = v9;
  uint64_t v14 = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v10 = HIBYTE(v21);
  }
  if (v10 < 0)
  {
    sub_1000173FC(&__p, v11, (unint64_t)__src[1]);
  }
  else
  {
    long long __p = *(_OWORD *)__src;
    uint64_t v16 = v21;
  }
  uint64_t v17 = a2;
  int v18 = v5;
  int v19 = a4;
  xpc_activity_register((const char *)v12, XPC_ACTIVITY_CHECK_IN, handler);
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)__p);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__src[0]);
  }
}

void sub_100053660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000536B4(uint64_t a1, ctu *a2)
{
  sub_100002260((uint64_t)v13);
  uint64_t v3 = sub_100004D64(v13, (uint64_t)"com.apple.wirelessinsightsd.trigger:", 36);
  xpc_object_t v4 = sub_100004D64(v3, (uint64_t)"0x", 2);
  ctu::hex((uint64_t *)__p, a2, v5);
  if ((v12 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    uint64_t v7 = v12;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  char v8 = sub_100004D64(v4, (uint64_t)v6, v7);
  sub_100004D64(v8, (uint64_t)":", 1);
  uint64_t v9 = (void *)std::ostream::operator<<();
  sub_100004D64(v9, (uint64_t)":", 1);
  std::ostream::operator<<();
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10005388C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_1000538BC(uint64_t a1, _xpc_activity_s *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (*(void *)(a1 + 40))
      {
        xpc_activity_state_t state = xpc_activity_get_state(a2);
        if (state == 2)
        {
          uint64_t v11 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            int v12 = *(_DWORD *)(a1 + 88);
            int buf = 67109120;
            *(_DWORD *)buf_4 = v12;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "timer:#N ****** TRIGGER FIRE: 0x%x *********", (uint8_t *)&buf, 8u);
          }
          sub_100018888(&v13, "Timer-run");
          sub_1000035F0();
        }
        if (!state)
        {
          uint64_t v9 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            char v10 = (void *)(a1 + 56);
            if (*(char *)(a1 + 79) < 0) {
              char v10 = (void *)*v10;
            }
            int buf = 136315138;
            *(void *)buf_4 = v10;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "timer:#N ****** Trigger timer check in: %s *********", (uint8_t *)&buf, 0xCu);
          }
          sub_100018888(&__p, "Timer-checkin");
          sub_1000035F0();
        }
      }
      sub_10000B678(v7);
    }
  }
}

void sub_100053D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,xpc_object_t object,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34)
{
  if (a2) {
    sub_10001F4A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100053DB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100087F58(v2, *(void *)(a1 + 56), (ctu *)*(unsigned int *)(a1 + 64), *(_DWORD *)(a1 + 68));
  uint64_t v3 = *(void *)(a1 + 56);

  sub_100088260(v2, v3);
}

unsigned char *sub_100053E00(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = a1 + 7;
  if (*(char *)(a2 + 79) < 0) {
    return sub_1000173FC(result, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  a1[9] = *(void *)(a2 + 72);
  *(_OWORD *)uint64_t result = v5;
  return result;
}

void sub_100053E68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100053E80(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100053ED4(uint64_t a1, uint64_t a2, ctu *a3)
{
  sub_1000536B4(a2, a3);
  if (v5 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  xpc_activity_unregister(p_p);
  if (v5 < 0) {
    operator delete(__p);
  }
}

void sub_100053F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100053F50()
{
  xpc_activity_unregister("com.apple.wirelessinsightsd.publication");
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v0 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  uint64_t v1 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  sub_1000A3DB0(v0, 0);
  if (v1) {
    sub_10000B678(v1);
  }
}

void sub_100054010(_Unwind_Exception *a1)
{
}

void sub_100054044(uint64_t a1)
{
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v2 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  int v4 = sub_1000A3E3C(v2);
  if (v3) {
    sub_10000B678(v3);
  }
  if (!v4)
  {
    pthread_mutex_lock(&stru_1001D69C0);
    uint64_t v5 = xmmword_1001D6A00;
    if (!(void)xmmword_1001D6A00) {
      sub_1000781CC();
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
    if (*((void *)&xmmword_1001D6A00 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D69C0);
    sub_1000A3DB0(v5, 1);
    if (v6) {
      sub_10000B678(v6);
    }
    sub_100052CE0(a1, 1);
  }
}

void sub_1000541A4(_Unwind_Exception *a1)
{
}

const void **sub_1000541F8(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_10005422C(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 == CFNumberGetTypeID()) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return sub_100054290(a1, v5);
}

void *sub_100054290(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

uint64_t sub_1000542C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000542D8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000542F4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

uint64_t sub_100054304()
{
  if ((byte_1001D6A10 & 1) == 0)
  {
    byte_1001D6A10 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E5C, &stru_1001D69C0, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100054340(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)uint64_t result = off_1001B7140;
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a4;
  *(_DWORD *)(result + 32) = a5;
  return result;
}

void sub_10005436C(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "WISMessageType", 6);
    xpc_dictionary_set_int64(v5, "WISMessageComponentId", *(unsigned int *)(a1 + 8));
    xpc_dictionary_set_int64(v5, "WISMessageTriggerTimestampId", *(void *)(a1 + 16));
    xpc_dictionary_set_int64(v5, "WISMessageSubmisssionId", *(unsigned int *)(a1 + 32));
    xpc_dictionary_set_int64(v5, "WISMessageTriggerId", *(unsigned int *)(a1 + 28));
    xpc_dictionary_set_int64(v5, "WISMessageTriggeringComponentId", *(unsigned int *)(a1 + 24));
    *a2 = v5;
    if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary) {
      xpc_retain(v5);
    }
    else {
      *a2 = xpc_null_create();
    }
    xpc_release(v5);
  }
  else
  {
    *a2 = xpc_null_create();
  }
}

void sub_100054478()
{
}

void sub_100054494()
{
}

void sub_10005451C()
{
}

void *sub_100054540(void *a1, const char *a2, dispatch_qos_class_t a3, const char *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.wis.wirelessinsightsd", a4);
  return a1;
}

void sub_1000545A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

void *sub_1000545C8(void *a1)
{
  sub_100055E8C((uint64_t)(a1 + 9));
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    sub_10000B678(v2);
  }
  CFTypeRef v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 4));

  return sub_100029804(a1);
}

void sub_100054624(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  sub_10000BA54(&v3, a1);
  operator new();
}

uint64_t sub_100054714(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (!*(void *)(a1 + 56))
  {
    sCreateWISMetadataLoaderForXpcConversion();
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
    *(_OWORD *)(a1 + 56) = v5;
    if (v3) {
      sub_10000B678(v3);
    }
  }
  return v1;
}

void sub_100054778(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type v36 = a2;
  *(void *)&long long v32 = a3;
  *((void *)&v32 + 1) = "event";
  sub_100002988((uint64_t)&v32, &v35);
  if (xpc_get_type(v35) == (xpc_type_t)&_xpc_type_array)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    int v34 = 1065353216;
    object[0] = v35;
    if (v35) {
      xpc_retain(v35);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100006058(__p, object, 0);
    xpc_release(object[0]);
    object[0] = v35;
    if (v35) {
      xpc_retain(v35);
    }
    else {
      object[0] = xpc_null_create();
    }
    if (xpc_get_type(v35) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v35);
    }
    else {
      count = 0;
    }
    sub_100006058(v31, object, count);
    xpc_release(object[0]);
    for (xpc_object_t i = __p[1]; i != v31[1] || __p[0] != v31[0]; xpc_object_t i = ++__p[1])
    {
      v30[0] = __p;
      v30[1] = i;
      sub_100054E28((uint64_t)v30, &v29);
      object[0] = 0;
      object[1] = 0;
      int v27 = 0;
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v27) < 0) {
        operator delete(object[0]);
      }
      xpc_release(v29);
      std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = buf.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        sub_100056014((uint64_t)&v32, (unsigned __int8 *)&buf, (uint64_t)&buf);
      }
      else
      {
        char v10 = *(NSObject **)(a1 + 32);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(object[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E Observer dictionary contains event that could not convert to a string", (uint8_t *)object, 2u);
        }
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    xpc_release(__p[0]);
    xpc_release(__p[0]);
    sub_100054714(a1);
    sMetricNamesResolver();
    std::string::size_type v11 = v28;
    if (v28 == *((void *)&v33 + 1))
    {
      int v12 = *(NSObject **)(a1 + 32);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#I [Observer %p] Observing %zd metrics.", (uint8_t *)&buf, 0x16u);
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
      uint64_t v13 = sub_1000563C0(a1 + 72, &v36, (uint64_t)&unk_1001793E0, &buf);
      sub_1000566C0((uint64_t)(v13 + 3), (uint64_t *)object);
      *(unsigned char *)a4 = 1;
      sub_100018888((void *)(a4 + 8), "");
    }
    else
    {
      sub_1000567BC((uint64_t)v23, (uint64_t)&v32);
      for (unint64_t j = v27; j; unint64_t j = *(unsigned __int8 **)j)
        sub_1000552A8(v23, j + 24);
      sub_100055B18((std::string *)v23[2], 0, ",", 1uLL, &buf);
      __int16 v15 = std::string::insert(&buf, 0, "Unknown event name(s): ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      int64_t v25 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_100055F8C((uint64_t)v23);
      std::string::size_type v17 = v28;
      int v18 = *(NSObject **)(a1 + 32);
      BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      if (v17)
      {
        if (v19)
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = *((void *)&v33 + 1);
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v17;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#E Observer dictionary requested %zd metrics but only %zd were resolved!", (uint8_t *)&buf, 0x16u);
          int v18 = *(NSObject **)(a1 + 32);
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = __p;
          if (v25 < 0) {
            int v20 = (xpc_object_t *)__p[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#E  -- %s", (uint8_t *)&buf, 0xCu);
        }
        *(unsigned char *)a4 = 1;
        sub_100018888((void *)(a4 + 8), "");
      }
      else
      {
        if (v19)
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = *((void *)&v33 + 1);
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#E Observer dictionary requested %zd metrics but none were resolved!", (uint8_t *)&buf, 0xCu);
          int v18 = *(NSObject **)(a1 + 32);
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = __p;
          if (v25 < 0) {
            uint64_t v21 = (xpc_object_t *)__p[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#E  -- %s", (uint8_t *)&buf, 0xCu);
        }
        *(unsigned char *)a4 = 0;
        uint64_t v22 = a4 + 8;
        if (SHIBYTE(v25) < 0)
        {
          sub_1000173FC((unsigned char *)v22, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)uint64_t v22 = *(_OWORD *)__p;
          *(void *)(v22 + 16) = v25;
        }
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
    }
    sub_100056338((uint64_t)object);
    sub_100055F8C((uint64_t)&v32);
  }
  else
  {
    *(unsigned char *)a4 = 1;
    sub_100018888((void *)(a4 + 8), "");
  }
  xpc_release(v35);
}

void sub_100054CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,xpc_object_t a30,uint64_t a31,uint64_t a32,xpc_object_t a33,uint64_t a34,char a35)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_100056338((uint64_t)&object);
  sub_100055F8C((uint64_t)&a35);
  xpc_release(*(xpc_object_t *)(v35 - 128));
  _Unwind_Resume(a1);
}

xpc_object_t sub_100054E28@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_array_get_value(**(xpc_object_t **)a1, *(void *)(a1 + 8));
  *a2 = value;
  if (value) {
    return xpc_retain(value);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void sub_100054E70(void *a1, uint64_t a2, void **a3, const void **a4)
{
  if (!*a4)
  {
    uint64_t v7 = _Block_copy(&stru_1001B71A0);
    char v8 = *a4;
    *a4 = v7;
    if (v8) {
      _Block_release(v8);
    }
  }
  uint64_t v9 = *a3;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_null_create();
  }
  *a4 = 0;
  sub_10000BA54(&v10, a1);
  operator new();
}

void sub_100054FD8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, void *a4@<X8>)
{
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    *a4 = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    *a4 = v9;
    if (!v9)
    {
      xpc_object_t v10 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v9) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v9);
    goto LABEL_9;
  }
  xpc_object_t v10 = xpc_null_create();
LABEL_8:
  *a4 = v10;
LABEL_9:
  xpc_release(v9);
  if (*(char *)(a2 + 23) >= 0) {
    std::string::size_type v11 = (const char *)a2;
  }
  else {
    std::string::size_type v11 = *(const char **)a2;
  }
  xpc_object_t v18 = xpc_string_create(v11);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  long long v16 = a4;
  std::string::size_type v17 = "event";
  sub_100014D08((uint64_t)&v16, &v18, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v18);
  xpc_object_t v18 = 0;
  xpc_object_t v14 = xpc_uint64_create(a3);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  long long v16 = a4;
  std::string::size_type v17 = "timestamp";
  sub_100014D08((uint64_t)&v16, &v14, &v15);
  xpc_release(v15);
  xpc_object_t v15 = 0;
  xpc_release(v14);
  xpc_object_t v14 = 0;
  sub_100054714(a1);
  xpc_object_t v12 = (xpc_object_t)sMetricToXpcTransform();
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  long long v16 = a4;
  std::string::size_type v17 = "payload";
  sub_100014D08((uint64_t)&v16, &v12, &v13);
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_release(v12);
}

void sub_1000551C8(_Unwind_Exception *a1)
{
  sub_1000551DC(v1);
  _Unwind_Resume(a1);
}

xpc_object_t *sub_1000551DC(xpc_object_t *a1)
{
  *a1 = 0;
  return a1;
}

void sub_100055210(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a4;
  uint64_t v9 = a2;
  int v10 = a3;
  v7[0] = a1;
  v7[1] = a5;
  _DWORD v7[2] = &v9;
  v7[3] = &v8;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100056C24;
  block[3] = &unk_1001B7258;
  void block[4] = a1;
  void block[5] = v7;
  uint64_t v6 = a1 + 16;
  long long v5 = *(NSObject **)(a1 + 16);
  if (*(void *)(v6 + 8)) {
    dispatch_async_and_wait(v5, block);
  }
  else {
    dispatch_sync(v5, block);
  }
}

uint64_t *sub_1000552A8(void *a1, unsigned __int8 *a2)
{
  xpc_object_t result = (uint64_t *)sub_1000552E0(a1, a2);
  if (result)
  {
    sub_1000553E4(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

unsigned __int8 *sub_1000552E0(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_100055430((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  std::string::size_type v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (sub_100055470(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      std::string::size_type v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t sub_1000553E4(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_100055984(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (void **)__p;
  long long __p = 0;
  if (v3) {
    sub_100055AB8((uint64_t)&v6, v3);
  }
  return v2;
}

unint64_t sub_100055430(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_100055518((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t sub_100055470(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unint64_t sub_100055518(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      uint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_1000558C4(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_100055818(a2, a3);
  }
  else
  {
    return sub_100055720(a2, a3);
  }
}

unint64_t sub_100055720(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_100055818(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_1000558C4(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void *sub_100055984@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100055AB8(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

std::string *sub_100055B18@<X0>(std::string *result@<X0>, std::string *a2@<X1>, void *a3@<X2>, size_t a4@<X3>, std::string *a5@<X8>)
{
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  if (result != a2)
  {
    unint64_t v8 = result;
    for (unint64_t result = std::string::operator=(a5, (const std::string *)&result->__r_.__value_.__r.__words[2]);
          ;
          unint64_t result = std::string::append(a5, v16, v17))
    {
      unint64_t v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
      if (v8 == a2) {
        break;
      }
      if (a3)
      {
        sub_100055C50(&__p, a3, a4);
        std::string::size_type v10 = HIBYTE(v20);
        unint64_t v11 = (void **)__p;
        std::string::size_type v12 = v19;
      }
      else
      {
        std::string::size_type v12 = 0;
        unint64_t v11 = 0;
        std::string::size_type v10 = 0;
        long long __p = 0;
        std::string::size_type v19 = 0;
        uint64_t v20 = 0;
      }
      if ((v10 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = v11;
      }
      if ((v10 & 0x80u) == 0) {
        std::string::size_type v14 = v10;
      }
      else {
        std::string::size_type v14 = v12;
      }
      std::string::append(a5, (const std::string::value_type *)p_p, v14);
      if (SHIBYTE(v20) < 0) {
        operator delete(__p);
      }
      int v15 = v8[1].__r_.__value_.__s.__data_[15];
      if (v15 >= 0) {
        unint64_t v16 = &v8->__r_.__value_.__s.__data_[16];
      }
      else {
        unint64_t v16 = (const std::string::value_type *)v8->__r_.__value_.__r.__words[2];
      }
      if (v15 >= 0) {
        std::string::size_type v17 = v8[1].__r_.__value_.__s.__data_[15];
      }
      else {
        std::string::size_type v17 = v8[1].__r_.__value_.__r.__words[0];
      }
    }
  }
  return result;
}

void sub_100055C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100055C50(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_10001F670();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *long long __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void sub_100055CFC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100055D74(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_100055E4C);
  __cxa_rethrow();
}

void sub_100055D9C(_Unwind_Exception *a1)
{
}

void sub_100055DB4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100055DEC(uint64_t a1)
{
}

uint64_t sub_100055E08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_100055E4C(void *result)
{
  if (result)
  {
    sub_1000545C8(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100055E8C(uint64_t a1)
{
  sub_100055EC8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100055EC8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int8x8_t v3 = (void *)*v2;
      sub_100056338((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100055F0C(uint64_t **a1)
{
  size_t v7 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint8x8_t v5 = *(std::__shared_weak_count **)(v2 + 48);
  *(void *)(v2 + 40) = v3;
  *(void *)(v2 + 48) = v4;
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[2];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete();
}

uint64_t sub_100055F8C(uint64_t a1)
{
  sub_100055FC8(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100055FC8(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *sub_100056014(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  size_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100055430(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (xpc_object_t i = *v13; i; xpc_object_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100055470(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100056294(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_10002D4B4(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  xpc_object_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_100056270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_100055AB8((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100056294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t result = v8 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    unint64_t result = sub_1000173FC(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t result = *(_OWORD *)a3;
    result[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_10005631C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_100055AB8(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100056338(uint64_t a1)
{
  sub_100056374(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100056374(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *sub_1000563C0(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  float v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(void *)float v16 = 0;
  *((void *)v16 + 1) = v9;
  *((void *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 14) = 1065353216;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_10002D4B4(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t v13 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  sub_100056668((uint64_t)v26, 0);
  return v13;
}

void sub_100056650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100056668((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_100056668(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100056338((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

void sub_1000566C0(uint64_t a1, uint64_t *a2)
{
  sub_100056764(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint8x8_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  unint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *unint64_t v7 = 0;
    v7[1] = 0;
  }
}

void sub_100056764(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_100056374(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t sub_1000567BC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10002D4B4(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_100056014(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_10005681C(_Unwind_Exception *a1)
{
  sub_100055F8C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100056834(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v9 = a1;
  uint64_t v10 = v1;
  uint64_t v2 = *(void **)v1;
  if (xpc_get_type(*(xpc_object_t *)(v1 + 16)) == (xpc_type_t)&_xpc_type_dictionary
    && xpc_dictionary_get_count(*(xpc_object_t *)(v1 + 16)))
  {
    sub_100054778((uint64_t)v2, *(void *)(v1 + 8), v1 + 16, (uint64_t)buf);
    unint64_t v7 = (uint64_t *)(v1 + 24);
    if (buf[0])
    {
      unsigned __int8 v11 = 1;
      sub_100056ABC(v7, &v11, "");
    }
    else
    {
      (*(void (**)(void))(*v7 + 16))();
    }
    if (v14 < 0) {
      operator delete(*(void **)((char *)__p + 4));
    }
  }
  else
  {
    uint64_t v3 = sub_100056B38(v2 + 9, (void *)(v1 + 8));
    if (v3)
    {
      uint64_t v4 = v2[4];
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(v1 + 8);
        *(_DWORD *)std::string buf = 134217984;
        __p[0] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#I [Observer %p] Removing observer.", buf, 0xCu);
      }
      sub_100055984(v2 + 9, v3, (uint64_t)buf);
      sub_100056668((uint64_t)buf, 0);
      if (!v2[12])
      {
        uint64_t v6 = (std::__shared_weak_count *)v2[8];
        v2[7] = 0;
        v2[8] = 0;
        if (v6) {
          sub_10000B678(v6);
        }
      }
    }
    buf[0] = 1;
    sub_100056ABC((uint64_t *)(v1 + 24), buf, "");
  }
  sub_100056A54(&v10);
  return sub_10000BA00((uint64_t *)&v9);
}

void sub_100056A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_100056A54(&a11);
  sub_10000BA00(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100056A54(uint64_t *result)
{
  uint64_t v1 = *result;
  *unint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(const void **)(v1 + 24);
    if (v2) {
      _Block_release(v2);
    }
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    operator delete();
  }
  return result;
}

void sub_100056ABC(uint64_t *a1, unsigned __int8 *a2, char *__s)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  sub_100018888(__p, __s);
  (*(void (**)(uint64_t, uint64_t, void **))(v3 + 16))(v3, v4, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100056B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100056B38(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  unint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      unint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_100056C24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void **)v2;
  if (*(void *)(*(void *)v2 + 96))
  {
    unint64_t v4 = (std::__shared_weak_count *)v3[6];
    if (v4)
    {
      unint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        float v17 = v5;
        uint64_t v6 = v3[5];
        if (v6)
        {
          unint64_t v7 = *(uint64_t **)(v2 + 8);
          uint64_t v8 = *v7;
          uint64_t v18 = v7[1];
          if (*v7 != v18)
          {
            do
            {
              xpc_object_t object[2] = 0;
              uint64_t v20 = 0;
              object[1] = 0;
              wis::GetProtobufTag();
              xpc_object_t v9 = xpc_null_create();
              for (uint64_t i = (void *)v3[11]; i; uint64_t i = (void *)*i)
              {
                unsigned __int8 v11 = sub_100056F94(i + 3, (unsigned int *)&v20);
                if (v11)
                {
                  unint64_t v12 = v3[4];
                  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
                  {
                    unint64_t v13 = v11 + 3;
                    if (*((char *)v11 + 47) < 0) {
                      unint64_t v13 = (void *)*v13;
                    }
                    uint64_t v14 = i[2];
                    *(_DWORD *)std::string buf = 134218498;
                    *(void *)&uint8_t buf[4] = v14;
                    __int16 v22 = 1024;
                    int v23 = v20;
                    __int16 v24 = 2080;
                    uint64_t v25 = v13;
                    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#I [Observer %p] Notifying for metric 0x%04x (%s).", buf, 0x1Cu);
                  }
                  if (xpc_get_type(v9) != (xpc_type_t)&_xpc_type_dictionary)
                  {
                    unint64_t v1 = v1 & 0xFFFFFFFF00000000 | *(unsigned int *)(*(void *)(v2 + 16) + 8);
                    sub_100054FD8((uint64_t)v3, (uint64_t)(v11 + 3), **(void **)(v2 + 24), buf);
                    uint64_t v15 = *(void **)buf;
                    *(void *)std::string buf = xpc_null_create();
                    xpc_release(v9);
                    xpc_release(*(xpc_object_t *)buf);
                    xpc_object_t v9 = v15;
                  }
                  uint64_t v16 = i[2];
                  object[0] = v9;
                  if (v9) {
                    xpc_retain(v9);
                  }
                  else {
                    object[0] = xpc_null_create();
                  }
                  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(*(void *)v6 + 16))(v6, v16, object);
                  xpc_release(object[0]);
                  object[0] = 0;
                }
              }
              xpc_release(v9);
              v8 += 24;
            }
            while (v8 != v18);
          }
        }
        sub_10000B678(v17);
      }
    }
  }
}

void sub_100056F0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  xpc_release(v15);
  sub_10000B678(v17);
  _Unwind_Resume(v16);
}

uint64_t *sub_100056F94(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (unint64_t result = *v6; result; unint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void sub_100057048()
{
}

void sub_1000570C4()
{
}

void sub_1000570E8(void *a1)
{
  sub_10000BA54(&v1, a1);
  operator new();
}

void *sub_1000571C0(void *a1, const char *a2, dispatch_qos_class_t a3, const ctu::OsLogLogger *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), a4);
  return a1;
}

void sub_100057214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

void sub_10005723C(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 40))
  {
    sub_1000A0F2C((uint64_t)v13);
    uint8x8_t v4 = (char *)v14[0];
    if (!v14[0]) {
      goto LABEL_13;
    }
    unint64_t v5 = v14;
    uint64_t v6 = (uint64_t *)v14[0];
    do
    {
      unint64_t v7 = (int *)v6;
      unint64_t v8 = (int *)v5;
      int v9 = *((_DWORD *)v6 + 8);
      if (v9 >= 0) {
        unint64_t v5 = v6;
      }
      else {
        ++v6;
      }
      uint64_t v6 = (uint64_t *)*v6;
    }
    while (v6);
    if (v5 != v14 && (v9 >= 0 ? (unint64_t v10 = v7) : (unint64_t v10 = v8), v10[8] < 1))
    {
      if (*((char *)v5 + 63) < 0)
      {
        sub_1000173FC(__p, (void *)v5[5], v5[6]);
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)(v5 + 5);
        uint64_t v12 = v5[7];
      }
      ctu::path_join_impl();
      sub_1000E7FA0(3, (uint64_t)__p, a2);
      if (os_log_type_enabled(*(os_log_t *)(a1 + 32), OS_LOG_TYPE_DEBUG)) {
        sub_100143630();
      }
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
      uint8x8_t v4 = (char *)v14[0];
    }
    else
    {
LABEL_13:
      *a2 = 0;
    }
    sub_100058A90((uint64_t)v13, v4);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_10005737C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, char *a16)
{
}

void sub_1000573B0(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 41) || *(unsigned char *)(a1 + 40))
  {
    sub_100018888(__p, "/System/Library/PrivateFrameworks/WirelessInsights.framework/Support");
    ctu::path_join_impl();
    sub_1000E7FA0(3, (uint64_t)__p, a2);
    if (os_log_type_enabled(*(os_log_t *)(a1 + 32), OS_LOG_TYPE_DEBUG)) {
      sub_100143698();
    }
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_100057464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100057484(void *a1@<X8>)
{
  sub_100018888(__p, "/System/Library/PrivateFrameworks/WirelessInsights.framework/Support");
  ctu::path_join_impl();
  sub_1000E7FA0(3, (uint64_t)__p, a1);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000574F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100057514(void *a1@<X8>)
{
  sub_100018888(__p, "/System/Library/PrivateFrameworks/WirelessInsights.framework/Support");
  ctu::path_join_impl();
  sub_1000E7FA0(3, (uint64_t)__p, a1);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100057584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000575A4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_100058AF4;
  v5[3] = &unk_1001B72D8;
  v5[4] = a1;
  void v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v3 = a1 + 16;
  int8x8_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8))
  {
    *a2 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    int v9 = sub_100058BAC;
    unint64_t v10 = &unk_1001B7318;
    unsigned __int8 v11 = a2;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    *a2 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    int v9 = sub_100058B00;
    unint64_t v10 = &unk_1001B72F8;
    unsigned __int8 v11 = a2;
    uint64_t v12 = &v6;
    dispatch_sync(v2, &block);
  }
}

void sub_1000576BC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (TelephonyRadiosGetRadio() - 7 > 1)
  {
    sub_10005723C(a1, a2);
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = *(NSObject **)(a1 + 32);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
        return;
      }
      LODWORD(v18) = 67109120;
      HIDWORD(v18) = sub_10006BFF4(v4);
      uint64_t v6 = "config:#I Read Hotship: Using Internal Hotship: dcid=%d";
    }
    else
    {
      sub_1000573B0(a1, &v18);
      uint64_t v7 = v18;
      uint64_t v18 = 0;
      uint64_t v8 = *a2;
      *a2 = v7;
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
        uint64_t v9 = v18;
        uint64_t v18 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
        uint64_t v7 = *a2;
      }
      if (v7)
      {
        char v5 = *(NSObject **)(a1 + 32);
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
          return;
        }
        int v10 = sub_10006BFF4(v7);
        LODWORD(v18) = 67109120;
        HIDWORD(v18) = v10;
        uint64_t v6 = "config:#I Read Hotship: Using Carrier Hotship: dcid=%d";
      }
      else
      {
        sub_100057484(&v18);
        uint64_t v11 = v18;
        uint64_t v18 = 0;
        uint64_t v12 = *a2;
        *a2 = v11;
        if (v12)
        {
          (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
          uint64_t v13 = v18;
          uint64_t v18 = 0;
          if (v13) {
            (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
          }
          uint64_t v11 = *a2;
        }
        char v5 = *(NSObject **)(a1 + 32);
        if (!v11)
        {
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
            return;
          }
          LOWORD(v18) = 0;
          uint64_t v6 = "config:#E No hotship files were detected!";
          uint64_t v15 = v5;
          os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
          uint32_t v17 = 2;
LABEL_23:
          _os_log_impl((void *)&_mh_execute_header, v15, v16, v6, (uint8_t *)&v18, v17);
          return;
        }
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
          return;
        }
        int v14 = sub_10006BFF4(v11);
        LODWORD(v18) = 67109120;
        HIDWORD(v18) = v14;
        uint64_t v6 = "config:#I Read Hotship: Using Default Hotship: dcid=%d";
      }
    }
    uint64_t v15 = v5;
    os_log_type_t v16 = OS_LOG_TYPE_INFO;
    uint32_t v17 = 8;
    goto LABEL_23;
  }

  sub_1000579C8(a1, a2);
}

void sub_10005797C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000579C8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100057514(a2);
  uint64_t v4 = *a2;
  char v5 = *(NSObject **)(a1 + 32);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (!v6) {
      return;
    }
    v10[0] = 67109120;
    v10[1] = sub_10006BFF4(v4);
    uint64_t v7 = "config:#I Read BestDiagConfiguration: picked the Diagnostics config; dcid=%d";
    uint64_t v8 = v5;
    uint32_t v9 = 8;
  }
  else
  {
    if (!v6) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v7 = "config:#I Read BestDiagConfiguration: no options detected";
    uint64_t v8 = v5;
    uint32_t v9 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v7, (uint8_t *)v10, v9);
}

void sub_100057AB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sub_100143700(v3);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_100057AD8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  sub_1000B9160(@"DeviceConfiguration", &cf);
  sub_100058C58(&theData, &cf);
  sub_10001570C(&cf);
  if (theData) {
    uint64_t v4 = sub_100057DD0;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    BytePtr = CFDataGetBytePtr(theData);
    if (BytePtr)
    {
      int Length = CFDataGetLength(theData);
      int v22 = 0;
      sub_1000B9160(@"InvestigationId", &cf);
      uint64_t v8 = (unsigned int *)cf;
      if (cf) {
        uint32_t v9 = sub_100057DD8;
      }
      else {
        uint32_t v9 = 0;
      }
      if (v9)
      {
        if (!cf
          || (CFTypeID v10 = CFGetTypeID(cf), TypeID = (wis *)CFNumberGetTypeID(), (wis *)v10 != TypeID)
          || (TypeID = (wis *)ctu::cf::assign((ctu::cf *)&v22, v8, v11), !TypeID))
        {
          int v22 = 0;
        }
      }
      wis::getWISTimestamp(TypeID);
      sub_1000E7CDC(BytePtr, Length, (std::__shared_weak_count **)buf);
      uint64_t v14 = *(void *)buf;
      *a2 = *(void *)buf;
      uint64_t v15 = *(NSObject **)(a1 + 32);
      if (v14)
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          int v16 = sub_10006BFF4(v14);
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v16;
          uint32_t v17 = "config:#I Read MobileConfiguration: dcid=%d";
          uint64_t v18 = v15;
          os_log_type_t v19 = OS_LOG_TYPE_INFO;
          uint32_t v20 = 8;
LABEL_25:
          _os_log_impl((void *)&_mh_execute_header, v18, v19, v17, buf, v20);
        }
      }
      else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        uint32_t v17 = "config:#E Read MobileConfiguration: Configuration failure while parsing. Aborting the load.";
        uint64_t v18 = v15;
        os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
        uint32_t v20 = 2;
        goto LABEL_25;
      }
      sub_10001570C(&cf);
      return sub_100058818((const void **)&theData);
    }
    uint64_t v12 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      LOWORD(cf) = 0;
      uint64_t v13 = "config:#I Read MobileConfiguration: not present (weird).";
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v12 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      LOWORD(cf) = 0;
      uint64_t v13 = "config:#I Read MobileConfiguration: not present.";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, v13, (uint8_t *)&cf, 2u);
    }
  }
  return sub_100058818((const void **)&theData);
}

void sub_100057D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  BOOL v6 = va_arg(va1, const void *);
  sub_10001570C((const void **)va);
  sub_100058818((const void **)va1);
  *uint64_t v3 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100057DD0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_100057DD8(uint64_t a1)
{
  return *(void *)a1;
}

void sub_100057DE0(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  v4[0] = a2;
  v4[1] = a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100058D6C;
  block[3] = &unk_1001B7338;
  void block[4] = a1;
  void block[5] = v4;
  uint64_t v3 = a1 + 16;
  int8x8_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

void sub_100057E74(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[0] = a2;
  v5[1] = a1;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  double v6[2] = sub_100059230;
  void v6[3] = &unk_1001B7358;
  v6[4] = a1;
  void v6[5] = v5;
  uint64_t v7 = v6;
  uint64_t v4 = a1 + 16;
  uint64_t v3 = *(NSObject **)(a1 + 16);
  if (*(void *)(v4 + 8))
  {
    *a3 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    CFTypeID v10 = sub_100058BAC;
    CFNumberRef v11 = &unk_1001B7318;
    uint64_t v12 = a3;
    uint64_t v13 = &v7;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    *a3 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    CFTypeID v10 = sub_100058B00;
    CFNumberRef v11 = &unk_1001B72F8;
    uint64_t v12 = a3;
    uint64_t v13 = &v7;
    dispatch_sync(v3, &block);
  }
}

void sub_100057F90(void *a1)
{
  sub_10000BA54(&v1, a1);
  operator new();
}

BOOL sub_100058068(uint64_t a1, uint64_t a2)
{
  v5[0] = a2;
  v5[1] = a1;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  double v6[2] = sub_1000595C4;
  void v6[3] = &unk_1001B7378;
  v6[4] = a1;
  void v6[5] = v5;
  uint64_t v7 = v6;
  uint64_t v3 = a1 + 16;
  int8x8_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8))
  {
    char v14 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    CFTypeID v10 = sub_10005987C;
    CFNumberRef v11 = &unk_1001B73B8;
    uint64_t v12 = &v14;
    uint64_t v13 = &v7;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    char v14 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    CFTypeID v10 = sub_100059840;
    CFNumberRef v11 = &unk_1001B7398;
    uint64_t v12 = &v14;
    uint64_t v13 = &v7;
    dispatch_sync(v2, &block);
  }
  return v14 != 0;
}

void sub_100058198(void *a1@<X8>)
{
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v2 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  sub_1000A50E4(v2, a1);
  if (v3) {
    sub_10000B678(v3);
  }
}

void sub_100058258(_Unwind_Exception *a1)
{
}

uint64_t sub_10005828C(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v3 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  sub_1000A5060(v3, a2);
  if (v4) {
    sub_10000B678(v4);
  }
  return 1;
}

void sub_100058350(_Unwind_Exception *a1)
{
}

void sub_100058384(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  char v6 = a2;
  v5[0] = &v6;
  v5[1] = a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_1000598B8;
  v7[3] = &unk_1001B73D8;
  void v7[4] = a1;
  void v7[5] = v5;
  uint64_t v8 = v7;
  uint64_t v4 = a1 + 16;
  uint64_t v3 = *(NSObject **)(a1 + 16);
  if (*(void *)(v4 + 8))
  {
    *a3 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    CFNumberRef v11 = sub_100058BAC;
    uint64_t v12 = &unk_1001B7318;
    uint64_t v13 = a3;
    char v14 = &v8;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    *a3 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    CFNumberRef v11 = sub_100058B00;
    uint64_t v12 = &unk_1001B72F8;
    uint64_t v13 = a3;
    char v14 = &v8;
    dispatch_sync(v3, &block);
  }
}

void sub_1000584A8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000AA650(a2);
  uint64_t v4 = *a2;
  if (*a2)
  {
    char v5 = *(NSObject **)(a1 + 32);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
      return;
    }
    LODWORD(v22) = 67109120;
    HIDWORD(v22) = sub_10006BFF4(v4);
    char v6 = "config:#I Read BestConfiguration: picked the Mobile Config; dcid=%d";
LABEL_25:
    uint32_t v20 = v5;
    uint32_t v21 = 8;
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v22, v21);
    return;
  }
  sub_100058198(&v22);
  uint64_t v7 = v22;
  uint64_t v22 = 0;
  uint64_t v8 = *a2;
  *a2 = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    uint64_t v9 = v22;
    uint64_t v22 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    }
    uint64_t v7 = *a2;
  }
  if (v7)
  {
    char v5 = *(NSObject **)(a1 + 32);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v10 = sub_10006BFF4(v7);
    LODWORD(v22) = 67109120;
    HIDWORD(v22) = v10;
    char v6 = "config:#I Read BestConfiguration: picked the Custom Config; dcid=%d";
    goto LABEL_25;
  }
  sub_1000AA64C(a1, &v22);
  uint64_t v11 = v22;
  uint64_t v22 = 0;
  uint64_t v12 = *a2;
  *a2 = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = v22;
    uint64_t v22 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
    }
    uint64_t v11 = *a2;
  }
  if (v11)
  {
    char v5 = *(NSObject **)(a1 + 32);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v14 = sub_10006BFF4(v11);
    LODWORD(v22) = 67109120;
    HIDWORD(v22) = v14;
    char v6 = "config:#I Read BestConfiguration: picked the Tasked Config; dcid=%d";
    goto LABEL_25;
  }
  sub_1000576BC(a1, &v22);
  uint64_t v15 = v22;
  uint64_t v22 = 0;
  uint64_t v16 = *a2;
  *a2 = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
    uint64_t v17 = v22;
    uint64_t v22 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
    }
    uint64_t v15 = *a2;
  }
  char v5 = *(NSObject **)(a1 + 32);
  BOOL v18 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v15)
  {
    if (!v18) {
      return;
    }
    int v19 = sub_10006BFF4(v15);
    LODWORD(v22) = 67109120;
    HIDWORD(v22) = v19;
    char v6 = "config:#I Read BestConfiguration: picked the Hotship; dcid=%d";
    goto LABEL_25;
  }
  if (v18)
  {
    LOWORD(v22) = 0;
    char v6 = "config:#I Read BestConfiguration: no options detected";
    uint32_t v20 = v5;
    uint32_t v21 = 2;
    goto LABEL_26;
  }
}

void sub_1000587C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_100058818(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_10005884C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000588C4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_10005899C);
  __cxa_rethrow();
}

void sub_1000588EC(_Unwind_Exception *a1)
{
}

void sub_100058904(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10005893C(uint64_t a1)
{
}

uint64_t sub_100058958(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_10005899C(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(result + 4));
    sub_100029804(v1);
    operator delete();
  }
  return result;
}

void sub_1000589F4(uint64_t **a1)
{
  uint64_t v2 = a1;
  uint64_t v1 = **a1;
  if (sub_10006F978())
  {
    if (sub_10006FA24()) {
      *(unsigned char *)(v1 + 40) = 1;
    }
    else {
      *(unsigned char *)(v1 + 41) = 1;
    }
  }
  operator delete();
}

void sub_100058A64()
{
}

void sub_100058A90(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_100058A90(a1, *(void *)a2);
    sub_100058A90(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

void sub_100058AF4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_100058B00(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v6);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = v6;
  uint64_t v6 = 0;
  uint64_t v4 = *v2;
  *uint64_t v2 = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  return result;
}

uint64_t sub_100058BAC(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v6);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = v6;
  uint64_t v6 = 0;
  uint64_t v4 = *v2;
  *uint64_t v2 = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  return result;
}

void *sub_100058C58(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 == CFDataGetTypeID()) {
      char v5 = v3;
    }
    else {
      char v5 = 0;
    }
  }
  else
  {
    char v5 = 0;
  }

  return sub_100058CBC(a1, v5);
}

void *sub_100058CBC(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void sub_100058CF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    CFTypeRef v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_100058D6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  CFTypeRef v3 = *(uint64_t ***)v1;
  uint64_t v2 = *(void *)(v1 + 8);
  sub_10005723C(v2, &v20);
  uint32_t v21 = "Hotship (Internal)";
  if (v20)
  {
    sub_1000590B4(v3, &v21, &v20);
    uint64_t v4 = v20;
    uint64_t v20 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  char v5 = *(uint64_t ***)v1;
  sub_1000573B0(v2, &v19);
  uint32_t v21 = "Hotship (Carrier)";
  if (v19)
  {
    sub_1000590B4(v5, &v21, &v19);
    uint64_t v6 = v19;
    uint64_t v19 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v7 = *(uint64_t ***)v1;
  sub_100057484(&v18);
  uint32_t v21 = "Hotship (User)";
  if (v18)
  {
    sub_1000590B4(v7, &v21, &v18);
    uint64_t v8 = v18;
    uint64_t v18 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v9 = *(uint64_t ***)v1;
  sub_100057514(&v17);
  uint32_t v21 = "Hotship (D&U Disabled)";
  if (v17)
  {
    sub_1000590B4(v9, &v21, &v17);
    uint64_t v10 = v17;
    uint64_t v17 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v11 = *(uint64_t ***)v1;
  sub_1000AA64C(v2, &v16);
  uint32_t v21 = "Last Server Tasking";
  if (v16)
  {
    sub_1000590B4(v11, &v21, &v16);
    uint64_t v12 = v16;
    uint64_t v16 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v13 = *(uint64_t ***)v1;
  sub_1000AA650(&v15);
  uint32_t v21 = "MobileConfiguration";
  if (v15)
  {
    sub_1000590B4(v13, &v21, &v15);
    uint64_t v14 = v15;
    uint64_t v15 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
    }
  }
}

void sub_100059014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000590B4(uint64_t **a1, char **a2, uint64_t *a3)
{
  sub_100059150((uint64_t)a1, a2, a3, (uint64_t)v8);
  uint64_t v4 = (uint64_t **)sub_10001893C((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  char v5 = *v4;
  if (!*v4)
  {
    sub_10001716C(a1, v7, v4, v8[0]);
    char v5 = v8[0];
    v8[0] = 0;
  }
  sub_1000591D8((uint64_t)v8, 0);
  return v5;
}

void sub_100059138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000591D8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100059150@<X0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = sub_100018888(v8 + 4, *a2);
  uint64_t v10 = *a3;
  *a3 = 0;
  v8[7] = v10;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1000591C0(_Unwind_Exception *a1)
{
  sub_1000591D8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1000591D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100058CF4((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_100059230(void *a1@<X8>, uint64_t a2@<X0>)
{
  CFTypeRef v3 = **(uint64_t ***)(a2 + 40);
  uint64_t v2 = *(void *)(*(void *)(a2 + 40) + 8);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    switch(*((unsigned char *)v3 + 23))
    {
      case 0xE:
        goto LABEL_5;
      case 0x11:
        goto LABEL_12;
      case 0x12:
        goto LABEL_22;
      case 0x13:
        goto LABEL_32;
      case 0x16:
        goto LABEL_49;
      default:
        goto LABEL_56;
    }
  }
  switch(v3[1])
  {
    case 14:
      CFTypeRef v3 = (uint64_t *)*v3;
LABEL_5:
      uint64_t v4 = (uint64_t *)*v3;
      uint64_t v5 = *(uint64_t *)((char *)v3 + 6);
      if (v4 != (uint64_t *)0x2070696873746F48 || v5 != 0x2972657355282070) {
        goto LABEL_56;
      }
      sub_100057484(a1);
      break;
    case 17:
      CFTypeRef v3 = (uint64_t *)*v3;
LABEL_12:
      uint64_t v7 = (uint64_t *)*v3;
      uint64_t v8 = v3[1];
      int v9 = *((unsigned __int8 *)v3 + 16);
      if (v7 != (uint64_t *)0x2070696873746F48 || v8 != 0x7265697272614328 || v9 != 41) {
        goto LABEL_56;
      }
      sub_1000573B0(v2, a1);
      break;
    case 18:
      CFTypeRef v3 = (uint64_t *)*v3;
LABEL_22:
      uint64_t v12 = (uint64_t *)*v3;
      uint64_t v13 = v3[1];
      int v14 = *((unsigned __int16 *)v3 + 8);
      if (v12 != (uint64_t *)0x2070696873746F48 || v13 != 0x616E7265746E4928 || v14 != 10604) {
        goto LABEL_56;
      }
      sub_10005723C(v2, a1);
      break;
    case 19:
      CFTypeRef v3 = (uint64_t *)*v3;
LABEL_32:
      if (*v3 == 0x726553207473614CLL
        && v3[1] == 0x6B73615420726576
        && *(uint64_t *)((char *)v3 + 11) == 0x676E696B73615420)
      {
        sub_1000AA64C(v2, a1);
      }
      else
      {
        uint64_t v19 = (uint64_t *)*v3;
        uint64_t v20 = v3[1];
        uint64_t v21 = *(uint64_t *)((char *)v3 + 11);
        if (v19 != (uint64_t *)0x6F43656C69626F4DLL || v20 != 0x746172756769666ELL || v21 != 0x6E6F697461727567) {
          goto LABEL_56;
        }
        sub_1000AA650(a1);
      }
      break;
    case 22:
      CFTypeRef v3 = (uint64_t *)*v3;
LABEL_49:
      __int16 v24 = (uint64_t *)*v3;
      uint64_t v25 = v3[1];
      uint64_t v26 = *(uint64_t *)((char *)v3 + 14);
      if (v24 != (uint64_t *)0x2070696873746F48 || v25 != 0x7369442055264428 || v26 != 0x2964656C62617369) {
        goto LABEL_56;
      }
      sub_100057514(a1);
      break;
    default:
LABEL_56:
      *a1 = 0;
      break;
  }
}

void sub_1000594A0(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v1 = *(NSObject **)(**(void **)a1 + 32);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "config:#I Clearing all custom configs tasked (either OTA or Dev)", buf, 2u);
  }
  sub_1000E7E90();
}

void sub_100059580()
{
}

uint64_t sub_1000595C4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = v1[1];
  if ((**(unsigned int (***)(void))*v1)())
  {
    CFTypeRef v3 = *(NSObject **)(v2 + 32);
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
    if (v4)
    {
      LOWORD(v18) = 0;
      uint64_t v5 = "config:#I Save Config: removing any existing dev config";
      uint64_t v6 = v3;
      uint32_t v7 = 2;
LABEL_4:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v18, v7);
    }
LABEL_5:
    sub_10005828C(v4, *v1);
    return 1;
  }
  else
  {
    switch(sub_1000E8260(*v1))
    {
      case 0u:
        int v9 = *(NSObject **)(v2 + 32);
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v10) {
          return result;
        }
        LOWORD(v18) = 0;
        uint64_t v11 = "config:#E Save Config SKIPPED: unknown config type";
        break;
      case 1u:
        uint64_t v12 = *(NSObject **)(v2 + 32);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          int v13 = sub_10006BFF4(*v1);
          int v18 = 67109120;
          int v19 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "config:#I Save Config: saving investigation config: dcid=%d", (uint8_t *)&v18, 8u);
        }
        return sub_10006FAE8();
      case 2u:
        int v9 = *(NSObject **)(v2 + 32);
        BOOL v14 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v14) {
          return result;
        }
        LOWORD(v18) = 0;
        uint64_t v11 = "config:#E Save Config SKIPPED: cannot write the Diagnostics config";
        break;
      case 3u:
        int v9 = *(NSObject **)(v2 + 32);
        BOOL v15 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v15) {
          return result;
        }
        LOWORD(v18) = 0;
        uint64_t v11 = "config:#E Save Config SKIPPED: cannot save base configs";
        break;
      case 4u:
        uint64_t v16 = *(NSObject **)(v2 + 32);
        BOOL v4 = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
        if (!v4) {
          goto LABEL_5;
        }
        int v17 = sub_10006BFF4(*v1);
        int v18 = 67109120;
        int v19 = v17;
        uint64_t v5 = "config:#I Save Config: saving development config: dcid=%d";
        uint64_t v6 = v16;
        uint32_t v7 = 8;
        goto LABEL_4;
      default:
        return 0;
    }
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v18, 2u);
    return 0;
  }
}

uint64_t sub_100059840(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t sub_10005987C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

void sub_1000598B8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  CFTypeRef v3 = **(unsigned __int8 ***)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  int v4 = *v3;
  if (v4 == 2)
  {
    sub_1000584A8(v2, a2);
  }
  else if (v4 == 1)
  {
    sub_1000579C8(v2, a2);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1000598E4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100059920(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x12u);
}

uint64_t sub_100059940()
{
  if ((byte_1001D6A10 & 1) == 0)
  {
    byte_1001D6A10 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E5C, &stru_1001D69C0, (void *)&_mh_execute_header);
  }
  return result;
}

void *sub_10005997C(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_100059984()
{
  sub_100067984(&v2);
  uint64_t v0 = sub_100067E20(v2);
  if (v3) {
    sub_10000B678(v3);
  }
  return v0;
}

void sub_1000599CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10000B678(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000599E4(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_1001B7408;
  a1[1] = *(void *)(a2 + 8);
  sub_100059ED8((uint64_t)(a1 + 2), a3);
  return a1;
}

uint64_t sub_100059A38(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = **a3;
  uint64_t v4 = (*a3)[1];
  if (v3 == v4) {
    return 0;
  }
  uint64_t v6 = a1 + 16;
  while (1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    wis::GetProtobufTag();
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      uint32_t v7 = *(uint64_t **)(v3 + 8);
      uint64_t v8 = *v7;
      LODWORD(v7) = v7[1] - (*v7 + v20);
      v11[0] = 0;
      v11[1] = v8 + v20;
      _DWORD v11[2] = v8 + v20 + (int)v7;
      uint64_t v13 = 0;
      __int16 v14 = 0;
      int v12 = (int)v7;
      int v15 = (int)v7;
      long long v16 = xmmword_100174830;
      int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::default_recursion_limit_;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      char v9 = sub_100059B70(v6, a1);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v11);
      if (v9) {
        break;
      }
    }
    v3 += 24;
    if (v3 == v4) {
      return 0;
    }
  }
  return 1;
}

void sub_100059B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100059B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100029F0C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_100059BC4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 68) & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (!v4) {
      uint64_t v4 = *(void *)(awd::profile::Condition::default_instance((awd::profile::Condition *)a1) + 16);
    }
    int v5 = sub_1000B9A40(v4);
    uint64_t result = 0;
    switch(v5)
    {
      case 3:
        if (*(uint64_t *)(v4 + 8) < 1) {
          break;
        }
        goto LABEL_13;
      case 4:
        if (!*(void *)(v4 + 24)) {
          break;
        }
        goto LABEL_13;
      case 6:
        if (*(int *)(v4 + 16) < 1) {
          break;
        }
        goto LABEL_13;
      case 7:
        if (*(_DWORD *)(v4 + 20)) {
LABEL_13:
        }
          operator new();
        break;
      default:
        goto LABEL_14;
    }
  }
  uint64_t result = 0;
LABEL_14:
  *a2 = 0;
  return result;
}

uint64_t sub_100059CC0(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 24))(a1, a2);
}

unint64_t sub_100059CFC(uint64_t a1, unint64_t a2)
{
  return a2 % *(void *)(a1 + 8);
}

uint64_t sub_100059D0C(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 40))(a1, a2);
}

uint64_t sub_100059D48(uint64_t a1, uint64_t a2)
{
  lldiv_t v4 = lldiv(a2, *(void *)(a1 + 8));
  uint64_t rem = v4.rem;
  if (v4.rem < 0) {
    return *(void *)(a1 + 8) + v4.rem;
  }
  return rem;
}

void *sub_100059D94(void *a1)
{
  *a1 = off_1001B7408;
  sub_100059E54(a1 + 2);
  return a1;
}

void sub_100059DD8(void *a1)
{
  *a1 = off_1001B7408;
  sub_100059E54(a1 + 2);

  operator delete();
}

void sub_100059E40()
{
}

void *sub_100059E54(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100059ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_10005A544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10005A718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  BOOL v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)WISCoreAnalyticsObserver;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_10005A790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005A8C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005AB30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005AC2C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1001D7C50;
  qword_1001D7C50 = (uint64_t)v1;
}

const void **sub_10005AC84(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_10005ACB8()
{
}

void sub_10005AD00()
{
}

uint64_t *sub_10005AD28(uint64_t *a1)
{
  return a1;
}

void sub_10005AD54(id ***a1, long long **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      sub_10001387C(&__p, v2);
      xpc_object_t v11 = object;
      if (object) {
        xpc_retain(object);
      }
      else {
        xpc_object_t v11 = xpc_null_create();
      }
      unsigned __int8 v5 = sub_1000FB8E0(*a1);
      xpc_object_t v9 = xpc_BOOL_create(v5);
      if (!v9) {
        xpc_object_t v9 = xpc_null_create();
      }
      v8[0] = &v11;
      v8[1] = "is_improve_safety_allowed";
      sub_100014D08((uint64_t)v8, &v9, &v10);
      xpc_release(v10);
      xpc_object_t v10 = 0;
      xpc_release(v9);
      xpc_object_t v9 = 0;
      xpc_object_t v6 = v11;
      if (v11) {
        xpc_retain(v11);
      }
      else {
        xpc_object_t v6 = xpc_null_create();
      }
      xpc_object_t v7 = object;
      xpc_object_t object = v6;
      xpc_release(v7);
      xpc_release(v11);
      xpc_release(object);
      xpc_object_t object = 0;
      if (v13 < 0) {
        operator delete(__p);
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_10005AE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, char a15)
{
}

void sub_10005AEB0(uint64_t a1, int a2, long long **a3)
{
  if (a2 > 816134)
  {
    if (a2 > 3952737)
    {
      if (a2 <= 3960361)
      {
        if ((a2 - 3958274) > 7 || ((1 << (a2 - 2)) & 0xA1) == 0)
        {
          if ((a2 - 3952738) >= 2) {
            return;
          }
          goto LABEL_48;
        }
        goto LABEL_41;
      }
      if (a2 == 3960362) {
        goto LABEL_41;
      }
      if (a2 != 3973474)
      {
        int v7 = 3961874;
LABEL_40:
        if (a2 != v7) {
          return;
        }
        goto LABEL_41;
      }
    }
    else
    {
      if (a2 > 827764)
      {
        if ((a2 - 3952640) > 0x18 || ((1 << a2) & 0x1000003) == 0)
        {
          if (a2 == 827765)
          {
            unsigned __int8 v5 = "gci_oos_longest";
            goto LABEL_42;
          }
          unsigned __int16 v6 = -15834;
          goto LABEL_36;
        }
LABEL_41:
        unsigned __int8 v5 = "gci";
LABEL_42:
        sub_10005B230(a1, v5, a3);
        return;
      }
      if (a2 == 816135) {
        goto LABEL_41;
      }
      if (a2 == 827689)
      {
LABEL_54:
        unsigned __int8 v5 = "cell_id";
        goto LABEL_42;
      }
      if (a2 != 827746) {
        return;
      }
    }
    unsigned __int8 v5 = "last_known_gci";
    goto LABEL_42;
  }
  if (a2 > 806941)
  {
    if (a2 <= 806953)
    {
      if (a2 == 806942)
      {
        unsigned __int8 v5 = "cellid";
        goto LABEL_42;
      }
      if (a2 != 806948)
      {
        if (a2 != 806953) {
          return;
        }
        unsigned __int8 v5 = "gci_congestion";
        goto LABEL_42;
      }
      goto LABEL_41;
    }
    if ((a2 - 812546) > 7 || ((1 << (a2 - 2)) & 0xE1) == 0)
    {
      unsigned __int16 v6 = 20522;
LABEL_36:
      int v7 = v6 | 0xC0000;
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  if (a2 <= 806779)
  {
    if (a2 <= 803103)
    {
      if (a2 != 803009)
      {
        unsigned __int16 v4 = 16579;
LABEL_27:
        if (a2 != (v4 | 0xC0000)) {
          return;
        }
      }
LABEL_48:
      uint64_t v8 = operator new(0x10uLL);
      xpc_object_t v10 = (char *)(v8 + 2);
      xpc_object_t v11 = (char *)(v8 + 2);
      void *v8 = "gci";
      v8[1] = "cell_id";
      xpc_object_t v9 = (const char **)v8;
      sub_10005B340((uint64_t)v8, &v9, a3);
LABEL_49:
      operator delete(v8);
      return;
    }
    if (a2 != 803104)
    {
      if (a2 != 806738) {
        return;
      }
      unsigned __int8 v5 = "lte_cellid";
      goto LABEL_42;
    }
    goto LABEL_54;
  }
  if (a2 > 806912)
  {
    if (a2 == 806913)
    {
      uint64_t v8 = operator new(0x18uLL);
      xpc_object_t v10 = (char *)(v8 + 3);
      xpc_object_t v11 = (char *)(v8 + 3);
      void *v8 = "gci";
      v8[1] = "cell_id";
      void v8[2] = "lte_cell_id";
      xpc_object_t v9 = (const char **)v8;
      sub_10005B340((uint64_t)v8, &v9, a3);
      goto LABEL_49;
    }
    if (a2 != 806936)
    {
      unsigned __int16 v4 = 20507;
      goto LABEL_27;
    }
    goto LABEL_48;
  }
  if (a2 == 806780 || a2 == 806912) {
    goto LABEL_48;
  }
}

void sub_10005B218(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10005B230(uint64_t a1, const char *a2, long long **a3)
{
  uint64_t v3 = *a3;
  unsigned __int16 v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      sub_10001387C(&__p, v3);
      xpc_object_t v6 = object;
      if (object) {
        xpc_retain(object);
      }
      else {
        xpc_object_t v6 = xpc_null_create();
      }
      if (xpc_dictionary_get_value(v6, a2)) {
        xpc_dictionary_set_value(v6, a2, 0);
      }
      if (v6)
      {
        xpc_retain(v6);
        xpc_object_t v7 = v6;
      }
      else
      {
        xpc_object_t v7 = xpc_null_create();
      }
      xpc_object_t v8 = object;
      xpc_object_t object = v7;
      xpc_release(v8);
      xpc_release(v6);
      xpc_release(object);
      xpc_object_t object = 0;
      if (v10 < 0) {
        operator delete(__p);
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
}

void sub_10005B320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  xpc_release(v9);
  sub_10005B478((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10005B340(uint64_t a1, const char ***a2, long long **a3)
{
  uint64_t v3 = *a3;
  unsigned __int16 v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      sub_10001387C(&__p, v3);
      xpc_object_t v6 = object;
      if (object) {
        xpc_retain(object);
      }
      else {
        xpc_object_t v6 = xpc_null_create();
      }
      xpc_object_t v7 = *a2;
      xpc_object_t v8 = a2[1];
      while (v7 != v8)
      {
        xpc_object_t v9 = *v7;
        if (xpc_dictionary_get_value(v6, *v7)) {
          xpc_dictionary_set_value(v6, v9, 0);
        }
        ++v7;
      }
      if (v6)
      {
        xpc_retain(v6);
        xpc_object_t v10 = v6;
      }
      else
      {
        xpc_object_t v10 = xpc_null_create();
      }
      xpc_object_t v11 = object;
      xpc_object_t object = v10;
      xpc_release(v11);
      xpc_release(v6);
      xpc_release(object);
      xpc_object_t object = 0;
      if (v13 < 0) {
        operator delete(__p);
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
}

void sub_10005B458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  xpc_release(v9);
  sub_10005B478((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10005B478(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10005B4BC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1000FB8DC();
    operator delete();
  }
  return result;
}

void sub_10005B5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005B680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005B788(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10005B86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005B994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005BA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005BCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  uint64_t v19 = v18;

  _Unwind_Resume(a1);
}

id sub_10005BCF4(uint64_t a1)
{
  return [*(id *)(a1 + 32) createTSAnomalyWithContext:*(void *)(a1 + 40) anomaly:*(void *)(a1 + 48) homePLMN:*(void *)(a1 + 56)];
}

void sub_10005BEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10005C0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_10005C150()
{
}

void sub_10005C158()
{
}

void sub_10005C160()
{
}

void sub_10005C168()
{
}

NSNumber *__cdecl sub_10005C170(id a1, RelevantTSAnomaly *a2)
{
  uint64_t v2 = [(RelevantTSAnomaly *)a2 anomaly];
  uint64_t v3 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v2 type]);

  return (NSNumber *)v3;
}

void sub_10005C1D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005C1E4(uint64_t a1, void *a2)
{
  id v37 = a2;
  id v42 = objc_alloc_init((Class)NSMutableArray);
  id v40 = objc_alloc_init((Class)NSMutableSet);
  id v41 = objc_alloc_init((Class)NSMutableArray);
  id v3 = objc_alloc_init((Class)NSMutableSet);
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  obunint64_t j = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v51 objects:v66 count:16];
  uint64_t v46 = a1;
  if (v4)
  {
    id v43 = v4;
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v39 = *(void *)v52;
    do
    {
      for (uint64_t i = 0; i != v43; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v52 != v39) {
          objc_enumerationMutation(obj);
        }
        xpc_object_t v7 = *(void **)(*((void *)&v51 + 1) + 8 * i);
        xpc_object_t v8 = [v7 predictedTimesUntilAnomaly];
        [v42 addObjectsFromArray:v8];

        xpc_object_t v9 = [v7 anomaly];
        xpc_object_t v10 = [v9 objectID];
        [v40 addObject:v10];

        xpc_object_t v11 = [v7 anomaly];
        int v12 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v11 duration]);
        [v41 addObject:v12];

        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        char v13 = [v7 anomaly];
        __int16 v14 = [v13 predictionSourceOf];

        id v15 = [v14 countByEnumeratingWithState:&v47 objects:v65 count:16];
        if (v15)
        {
          uint64_t v16 = *(void *)v48;
          do
          {
            for (unint64_t j = 0; j != v15; unint64_t j = (char *)j + 1)
            {
              if (*(void *)v48 != v16) {
                objc_enumerationMutation(v14);
              }
              uint64_t v18 = *(void **)(*((void *)&v47 + 1) + 8 * (void)j);
              uint64_t v19 = [v18 objectID];
              unsigned __int8 v20 = [v3 containsObject:v19];

              if ((v20 & 1) == 0)
              {
                unsigned int v21 = [v18 didAnomalyHappen];
                uint64_t v22 = [v18 objectID];
                [v3 addObject:v22];

                [*(id *)(v46 + 40) refreshObject:v18 mergeChanges:0];
                ++v6;
                v5 += v21;
              }
            }
            id v15 = [v14 countByEnumeratingWithState:&v47 objects:v65 count:16];
          }
          while (v15);
        }
      }
      id v43 = [obj countByEnumeratingWithState:&v51 objects:v66 count:16];
    }
    while (v43);
  }
  else
  {
    unint64_t v5 = 0;
    unint64_t v6 = 0;
  }

  +[FMUtil meanOfSample:v42];
  double v24 = v23;
  +[FMUtil probabilityOfNextPickInRange:v42 aroundMean:(double)*(unint64_t *)(v46 + 64) ofSample:v23];
  double v26 = v25;
  +[FMUtil meanOfSample:v41];
  double v28 = v27;
  +[FMUtil probabilityOfNextPickInRange:v41 aroundMean:(double)*(unint64_t *)(v46 + 72) ofSample:v27];
  double v30 = v29;
  if (v6 >= *(void *)(v46 + 88)) {
    double v31 = (double)v5 / (double)v6;
  }
  else {
    double v31 = *(double *)(v46 + 80);
  }
  uint64_t v32 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 138413314;
    id v56 = v37;
    __int16 v57 = 2112;
    id v58 = v42;
    __int16 v59 = 2112;
    id v60 = v41;
    __int16 v61 = 2048;
    unint64_t v62 = v6;
    __int16 v63 = 2048;
    unint64_t v64 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "FederatedMobility[FMCoreData+TimeSeriesPredictor]:#D Predicting anomaly of type %@ based on predictedTimesUntilAnomaly: %@, durations %@, numPredictions %lu, numPredictionsCorrect %lu", buf, 0x34u);
  }
  signed __int16 v33 = (unsigned __int16)[v37 intValue];
  uint64_t v34 = *(void *)(v46 + 48);
  id v35 = [v40 copy];
  uint64_t v36 = +[FMTSPredictionFactory predictionWithType:predictionTime:predictionSources:numPrevTimesUntilAnomaly:numPrevPredictions:numPrevPredictionsCorrect:predictedTimeUntilAnomaly:predictedDuration:confidenceAnomaly:confidenceDuration:confidenceTimeUntilAnomaly:predictionTimestamp:](FMTSPredictionFactory, "predictionWithType:predictionTime:predictionSources:numPrevTimesUntilAnomaly:numPrevPredictions:numPrevPredictionsCorrect:predictedTimeUntilAnomaly:predictedDuration:confidenceAnomaly:confidenceDuration:confidenceTimeUntilAnomaly:predictionTimestamp:", v33, v34, v35, [v42 count], v6, v5, v31, v30, v26, __PAIR64__(llround(v28), llround(v24)), *(void *)(v46 + 96));

  [*(id *)(v46 + 56) addObject:v36];
}

void sub_10005C6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10005CD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);

  _Unwind_Resume(a1);
}

NSNumber *__cdecl sub_10005CE50(id a1, FMTSEventProtocol *a2)
{
  uint64_t v2 = a2;
  id v3 = +[NSNumber numberWithInt:[(FMTSEventProtocol *)v2 type]];

  return (NSNumber *)v3;
}

void sub_10005CEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005CEBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v14[0] = v5;
  v13[0] = @"event_type";
  v13[1] = @"num_events";
  xpc_object_t v7 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v6 count]);
  v14[1] = v7;
  v13[2] = @"num_events_total";
  xpc_object_t v8 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) count]);
  void v14[2] = v8;
  xpc_object_t v9 = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:3];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_10005D084;
  void v11[3] = &unk_1001B5EB8;
  id v12 = v9;
  id v10 = v9;
  sub_100005B9C(@"com.apple.Telephony.fedMobilityTimeSeriesSourceEvents", v11);
}

void sub_10005D03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_10005D084(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_10005D08C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005D09C(uint64_t a1)
{
}

void sub_10005D0A4(uint64_t a1)
{
  id v42 = +[NSFetchRequest fetchRequestWithEntityName:@"TSAnomaly"];
  uint64_t v2 = +[NSPredicate predicateWithFormat:@"homePLMN == %@", *(void *)(a1 + 32)];
  [v42 setPredicate:v2];

  [v42 setReturnsObjectsAsFaults:0];
  id v3 = *(void **)(a1 + 40);
  id v58 = 0;
  id v41 = [v3 executeFetchRequest:v42 error:&v58];
  id v40 = v58;
  if (v40)
  {
    id v4 = *(NSObject **)(qword_1001D8080 + 136);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v5 = [v40 localizedDescription];
      sub_100143A64(v5, buf, v4);
    }
    goto LABEL_39;
  }
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v41 count];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  id v6 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = [v41 count];
    *(_DWORD *)std::string buf = 134217984;
    unint64_t v60 = (unint64_t)v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "FederatedMobility[FMCoreData+TimeSeriesPredictor]:#I Fetch done, %lu results", buf, 0xCu);
  }
  id v43 = objc_alloc_init((Class)NSMutableArray);
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  obunint64_t j = v41;
  id v46 = [obj countByEnumeratingWithState:&v54 objects:v66 count:16];
  if (v46)
  {
    uint64_t v45 = *(void *)v55;
    do
    {
      long long v48 = 0;
      do
      {
        if (*(void *)v55 != v45) {
          objc_enumerationMutation(obj);
        }
        long long v49 = *(void **)(*((void *)&v54 + 1) + 8 * (void)v48);
        xpc_object_t v8 = *(void **)(a1 + 48);
        xpc_object_t v9 = [v49 events];
        id v10 = [v8 sortObjects:v9 byKey:&stru_1001B75B0];

        id v11 = objc_alloc_init((Class)NSMutableArray);
        unint64_t v12 = 0;
        double v13 = 0.0;
        uint64_t v14 = 1;
        do
        {
          id v15 = +[NSNumber numberWithInt:v14];
          uint64_t v16 = [*(id *)(a1 + 56) objectForKey:v15];
          int v17 = [v10 objectForKey:v15];
          uint64_t v18 = [*(id *)(a1 + 48) compareObservedEvents:v16 withStoredEvents:v17 ofType:(__int16)v14 withPredictionAdvanceTime:*(unsigned int *)(a1 + 104) atCurrentTimestamp:*(void *)(a1 + 88) withContext:*(void *)(a1 + 40)];
          uint64_t v19 = v18;
          if (v18)
          {
            [v18 averageEventDistance];
            double v21 = v20;
            uint64_t v22 = [v19 predictedTimesUntilAnomaly];
            [v11 addObjectsFromArray:v22];

            double v13 = v13 + v21;
            ++v12;
          }
          else
          {
            double v23 = *(NSObject **)(qword_1001D8080 + 136);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 67109120;
              LODWORD(v60) = v14;
              _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "FederatedMobility[FMCoreData+TimeSeriesPredictor]:Failed to compare events of type %d", buf, 8u);
            }
          }

          uint64_t v14 = (v14 + 1);
        }
        while (v14 != 5);
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        double v24 = [v49 events];
        id v25 = [v24 countByEnumeratingWithState:&v50 objects:v65 count:16];
        if (v25)
        {
          uint64_t v26 = *(void *)v51;
          do
          {
            for (uint64_t i = 0; i != v25; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v51 != v26) {
                objc_enumerationMutation(v24);
              }
              [*(id *)(a1 + 40) refreshObject:*(void *)(*((void *)&v50 + 1) + 8 * i) mergeChanges:0];
            }
            id v25 = [v24 countByEnumeratingWithState:&v50 objects:v65 count:16];
          }
          while (v25);
        }

        double v28 = *(NSObject **)(qword_1001D8080 + 136);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 138412802;
          unint64_t v60 = (unint64_t)v49;
          __int16 v61 = 2048;
          double v62 = v13;
          __int16 v63 = 2048;
          unint64_t v64 = v12;
          _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "FederatedMobility[FMCoreData+TimeSeriesPredictor]:#D Distance for anomaly %@: %f. Number of used event types: %lu", buf, 0x20u);
          if (!v12) {
            goto LABEL_29;
          }
        }
        else if (!v12)
        {
          goto LABEL_29;
        }
        if (v13 <= *(double *)(a1 + 96))
        {
          double v29 = [RelevantTSAnomaly alloc];
          id v30 = [v11 copy];
          id v31 = [(RelevantTSAnomaly *)v29 init:v49 dist:v30 predictedTimesUntilAnomaly:v13];
          [v43 addObject:v31];
        }
        if (v12 <= 2)
        {
LABEL_29:
          uint64_t v32 = *(NSObject **)(qword_1001D8080 + 136);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            unint64_t v60 = v12;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "FederatedMobility[FMCoreData+TimeSeriesPredictor]:#N Used fewer event types than were available: %lu", buf, 0xCu);
          }
        }

        long long v48 = (char *)v48 + 1;
      }
      while (v48 != v46);
      id v33 = [obj countByEnumeratingWithState:&v54 objects:v66 count:16];
      id v46 = v33;
    }
    while (v33);
  }

  uint64_t v34 = [*(id *)(a1 + 48) getFMTSPredictionsFromRelevantTSAnomalies:v43 atCurrentTimestamp:*(void *)(a1 + 88) withContext:*(void *)(a1 + 40)];
  uint64_t v36 = *(void *)(a1 + 80);
  uint64_t v35 = a1 + 80;
  uint64_t v37 = *(void *)(v36 + 8);
  unint64_t v38 = *(void **)(v37 + 40);
  *(void *)(v37 + 40) = v34;

  uint64_t v39 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
    sub_1001439E0(v35, v39);
  }

LABEL_39:
}

void sub_10005D6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

NSNumber *__cdecl sub_10005D808(id a1, TSEvent *a2)
{
  uint64_t v2 = a2;
  id v3 = +[NSNumber numberWithInt:[(TSEvent *)v2 type]];

  return (NSNumber *)v3;
}

void sub_10005D864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10005D874(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10005D954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005DEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_10005E260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_10005E2DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  xpc_object_t v8 = [FMTSEventCellChanged alloc];
  xpc_object_t v9 = [v6 details];
  id v10 = [(FMTSEventCellChanged *)v8 initWithTimestamp:0 andDict:v9];

  double v11 = 1.0;
  if (!v10) {
    goto LABEL_17;
  }
  uint64_t v29 = a1;
  unint64_t v12 = [v7 fromCellGCI];
  double v13 = [(FMTSEventCellChanged *)v10 fromCellGCI];
  if ([v12 isEqualToString:v13])
  {
    uint64_t v14 = [v7 toCellGCI];
    id v15 = [(FMTSEventCellChanged *)v10 toCellGCI];
    unsigned __int8 v16 = [v14 isEqualToString:v15];

    double v11 = 0.0;
    if (v16) {
      goto LABEL_17;
    }
  }
  else
  {
  }
  int v17 = [v7 fromCellGCI];
  uint64_t v18 = [(FMTSEventCellChanged *)v10 toCellGCI];
  unsigned int v19 = [v17 isEqualToString:v18];
  if (v19)
  {
    double v28 = [v7 toCellGCI];
    uint64_t v26 = [(FMTSEventCellChanged *)v10 fromCellGCI];
    if (!objc_msgSend(v28, "isEqualToString:"))
    {

LABEL_16:
      double v11 = *(double *)(v29 + 32);
      goto LABEL_17;
    }
  }
  double v27 = v17;
  double v20 = [v7 toCellGCI];
  double v21 = [(FMTSEventCellChanged *)v10 fromCellGCI];
  if ([v20 isEqualToString:v21])
  {
    uint64_t v22 = [v7 fromCellGCI];
    double v23 = [(FMTSEventCellChanged *)v10 toCellGCI];
    char v24 = [v22 isEqualToString:v23] ^ 1;
  }
  else
  {
    char v24 = 0;
  }

  if (v19)
  {
  }
  double v11 = 1.0;
  if (v24) {
    goto LABEL_16;
  }
LABEL_17:

  return v11;
}

void sub_10005E550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, _Unwind_Exception *exception_object)
{
  if (v19)
  {
  }
  _Unwind_Resume(a1);
}

double sub_10005E63C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  xpc_object_t v8 = [FMTSEventSignalStrengthChanged alloc];
  xpc_object_t v9 = [v6 details];
  id v10 = [(FMTSEventSignalStrengthChanged *)v8 initWithTimestamp:0 andDict:v9];

  double v11 = [v7 fromBars];
  unint64_t v12 = [(FMTSEventSignalStrengthChanged *)v10 fromBars];
  if ([v11 isEqualToNumber:v12])
  {
    double v13 = [v7 toBars];
    uint64_t v14 = [(FMTSEventSignalStrengthChanged *)v10 toBars];
    unsigned __int8 v15 = [v13 isEqualToNumber:v14];

    double v16 = 0.0;
    if (v15) {
      goto LABEL_7;
    }
  }
  else
  {
  }
  int v17 = [v7 fromBars];
  uint64_t v18 = [v7 toBars];
  id v19 = [v17 compare:v18];
  double v20 = [(FMTSEventSignalStrengthChanged *)v10 fromBars];
  double v21 = [(FMTSEventSignalStrengthChanged *)v10 toBars];
  id v22 = [v20 compare:v21];

  double v16 = 1.0;
  if (v19 == v22) {
    double v16 = *(double *)(a1 + 32);
  }
LABEL_7:

  return v16;
}

void sub_10005E7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005E860()
{
}

void sub_10005E868()
{
}

double sub_10005E870(id a1, FMTSEventProtocol *a2, TSEvent *a3)
{
  return 0.0;
}

double sub_10005E878(id a1, FMTSEventProtocol *a2, TSEvent *a3)
{
  return 0.0;
}

void sub_10005E97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

id sub_10005E9A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) createTSPredictionWithContext:*(void *)(a1 + 40) prediction:*(void *)(a1 + 48)];
}

uint64_t sub_10005E9D4(uint64_t result)
{
  *(void *)uint64_t result = off_1001B7688;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

uint64_t sub_10005E9FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 76);
  if (v5)
  {
    PB::TextFormatter::format(this, "count", *(void *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "duration_ms", *(void *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_19:
  PB::TextFormatter::format(this, "maxValue", *(void *)(a1 + 24));
  if ((*(_WORD *)(a1 + 76) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "minValue", *(void *)(a1 + 32));
LABEL_6:
  if (*(void *)(a1 + 40)) {
    PB::TextFormatter::format();
  }
  __int16 v6 = *(_WORD *)(a1 + 76);
  if ((v6 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "sum", *(void *)(a1 + 48));
    __int16 v6 = *(_WORD *)(a1 + 76);
    if ((v6 & 0x80) == 0)
    {
LABEL_10:
      if ((v6 & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_23;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(this, "sumOverflow", *(unsigned char *)(a1 + 72));
  __int16 v6 = *(_WORD *)(a1 + 76);
  if ((v6 & 0x20) == 0)
  {
LABEL_11:
    if ((v6 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "sumSquares", *(void *)(a1 + 56));
  __int16 v6 = *(_WORD *)(a1 + 76);
  if ((v6 & 0x100) == 0)
  {
LABEL_12:
    if ((v6 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "sumSquaresOverflow", *(unsigned char *)(a1 + 73));
  if ((*(_WORD *)(a1 + 76) & 0x40) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 64));
LABEL_14:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10005EB78(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((unsigned __int16)(v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 76) |= 0x40u;
          unint64_t v20 = *((void *)this + 1);
          unint64_t v21 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)this + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_134;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_84:
            uint64_t v25 = 0;
            goto LABEL_134;
          }
          char v85 = 0;
          unsigned int v86 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)this + 1);
          }
          while (2)
          {
            if (v21 == v20)
            {
              uint64_t v25 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v87 = v20 + 1;
              char v88 = *(unsigned char *)(v22 + v20);
              *((void *)this + 1) = v87;
              v25 |= (unint64_t)(v88 & 0x7F) << v85;
              if (v88 < 0)
              {
                v85 += 7;
                unint64_t v20 = v87;
                BOOL v14 = v86++ > 8;
                if (v14) {
                  goto LABEL_84;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v25 = 0;
              }
            }
            break;
          }
LABEL_134:
          *(void *)(a1 + 64) = v25;
          goto LABEL_159;
        case 2u:
          operator new();
        case 3u:
          *(_WORD *)(a1 + 76) |= 2u;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_138;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_91:
            uint64_t v34 = 0;
            goto LABEL_138;
          }
          char v89 = 0;
          unsigned int v90 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              uint64_t v34 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v91 = v29 + 1;
              char v92 = *(unsigned char *)(v31 + v29);
              *((void *)this + 1) = v91;
              v34 |= (unint64_t)(v92 & 0x7F) << v89;
              if (v92 < 0)
              {
                v89 += 7;
                unint64_t v29 = v91;
                BOOL v14 = v90++ > 8;
                if (v14) {
                  goto LABEL_91;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v34 = 0;
              }
            }
            break;
          }
LABEL_138:
          *(void *)(a1 + 16) = v34;
          goto LABEL_159;
        case 4u:
          *(_WORD *)(a1 + 76) |= 1u;
          unint64_t v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          uint64_t v39 = *(void *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_142;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_98:
            uint64_t v42 = 0;
            goto LABEL_142;
          }
          char v93 = 0;
          unsigned int v94 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)this + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              uint64_t v42 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v95 = v37 + 1;
              char v96 = *(unsigned char *)(v39 + v37);
              *((void *)this + 1) = v95;
              v42 |= (unint64_t)(v96 & 0x7F) << v93;
              if (v96 < 0)
              {
                v93 += 7;
                unint64_t v37 = v95;
                BOOL v14 = v94++ > 8;
                if (v14) {
                  goto LABEL_98;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v42 = 0;
              }
            }
            break;
          }
LABEL_142:
          *(void *)(a1 + 8) = v42;
          goto LABEL_159;
        case 5u:
          *(_WORD *)(a1 + 76) |= 0x10u;
          unint64_t v45 = *((void *)this + 1);
          unint64_t v46 = *((void *)this + 2);
          uint64_t v47 = *(void *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)this + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_146;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v14 = v49++ > 8;
            }
            while (!v14);
LABEL_105:
            uint64_t v50 = 0;
            goto LABEL_146;
          }
          char v97 = 0;
          unsigned int v98 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)this + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              uint64_t v50 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v99 = v45 + 1;
              char v100 = *(unsigned char *)(v47 + v45);
              *((void *)this + 1) = v99;
              v50 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                unint64_t v45 = v99;
                BOOL v14 = v98++ > 8;
                if (v14) {
                  goto LABEL_105;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v50 = 0;
              }
            }
            break;
          }
LABEL_146:
          *(void *)(a1 + 48) = v50;
          goto LABEL_159;
        case 6u:
          *(_WORD *)(a1 + 76) |= 0x20u;
          unint64_t v53 = *((void *)this + 1);
          unint64_t v54 = *((void *)this + 2);
          uint64_t v55 = *(void *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v59 = v53 + 1;
              *((void *)this + 1) = v53 + 1;
              char v60 = *(unsigned char *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_150;
              }
              v56 += 7;
              unint64_t v53 = v59;
              BOOL v14 = v57++ > 8;
            }
            while (!v14);
LABEL_112:
            uint64_t v58 = 0;
            goto LABEL_150;
          }
          char v101 = 0;
          unsigned int v102 = 0;
          uint64_t v58 = 0;
          if (v54 <= v53) {
            unint64_t v54 = *((void *)this + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              uint64_t v58 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v103 = v53 + 1;
              char v104 = *(unsigned char *)(v55 + v53);
              *((void *)this + 1) = v103;
              v58 |= (unint64_t)(v104 & 0x7F) << v101;
              if (v104 < 0)
              {
                v101 += 7;
                unint64_t v53 = v103;
                BOOL v14 = v102++ > 8;
                if (v14) {
                  goto LABEL_112;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v58 = 0;
              }
            }
            break;
          }
LABEL_150:
          *(void *)(a1 + 56) = v58;
          goto LABEL_159;
        case 7u:
          *(_WORD *)(a1 + 76) |= 8u;
          unint64_t v61 = *((void *)this + 1);
          unint64_t v62 = *((void *)this + 2);
          uint64_t v63 = *(void *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v66 = 0;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)this + 1) = v61 + 1;
              char v68 = *(unsigned char *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_154;
              }
              v64 += 7;
              unint64_t v61 = v67;
              BOOL v14 = v65++ > 8;
            }
            while (!v14);
LABEL_119:
            uint64_t v66 = 0;
            goto LABEL_154;
          }
          char v105 = 0;
          unsigned int v106 = 0;
          uint64_t v66 = 0;
          if (v62 <= v61) {
            unint64_t v62 = *((void *)this + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              uint64_t v66 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v107 = v61 + 1;
              char v108 = *(unsigned char *)(v63 + v61);
              *((void *)this + 1) = v107;
              v66 |= (unint64_t)(v108 & 0x7F) << v105;
              if (v108 < 0)
              {
                v105 += 7;
                unint64_t v61 = v107;
                BOOL v14 = v106++ > 8;
                if (v14) {
                  goto LABEL_119;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v66 = 0;
              }
            }
            break;
          }
LABEL_154:
          *(void *)(a1 + 32) = v66;
          goto LABEL_159;
        case 8u:
          *(_WORD *)(a1 + 76) |= 4u;
          unint64_t v69 = *((void *)this + 1);
          unint64_t v70 = *((void *)this + 2);
          uint64_t v71 = *(void *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)this + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_158;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_126:
            uint64_t v74 = 0;
            goto LABEL_158;
          }
          char v109 = 0;
          unsigned int v110 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)this + 1);
          }
          break;
        case 9u:
          *(_WORD *)(a1 + 76) |= 0x80u;
          unint64_t v77 = *((void *)this + 1);
          if (v77 >= *((void *)this + 2))
          {
            BOOL v80 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v78 = v77 + 1;
            int v79 = *(unsigned __int8 *)(*(void *)this + v77);
            *((void *)this + 1) = v78;
            BOOL v80 = v79 != 0;
          }
          *(unsigned char *)(a1 + 72) = v80;
          goto LABEL_159;
        case 0xAu:
          *(_WORD *)(a1 + 76) |= 0x100u;
          unint64_t v81 = *((void *)this + 1);
          if (v81 >= *((void *)this + 2))
          {
            BOOL v84 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v82 = v81 + 1;
            int v83 = *(unsigned __int8 *)(*(void *)this + v81);
            *((void *)this + 1) = v82;
            BOOL v84 = v83 != 0;
          }
          *(unsigned char *)(a1 + 73) = v84;
          goto LABEL_159;
        default:
          uint64_t result = PB::Reader::skip(this, (unsigned __int16)(v11 >> 3), v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_159;
      }
      while (1)
      {
        if (v70 == v69)
        {
          uint64_t v74 = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_158;
        }
        unint64_t v111 = v69 + 1;
        char v112 = *(unsigned char *)(v71 + v69);
        *((void *)this + 1) = v111;
        v74 |= (unint64_t)(v112 & 0x7F) << v109;
        if ((v112 & 0x80) == 0) {
          break;
        }
        v109 += 7;
        unint64_t v69 = v111;
        BOOL v14 = v110++ > 8;
        if (v14) {
          goto LABEL_126;
        }
      }
      if (*((unsigned char *)this + 24)) {
        uint64_t v74 = 0;
      }
LABEL_158:
      *(void *)(a1 + 24) = v74;
LABEL_159:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    uint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        LODWORD(v11) = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10005F440(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_WORD *)(result + 76) & 0x40) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 64), 1u);
  }
  if (*(void *)(v3 + 40)) {
    uint64_t result = PB::Writer::write();
  }
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 3u);
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 1) == 0)
    {
LABEL_7:
      if ((v4 & 0x10) == 0) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 4u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 5u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 6u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 7u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
LABEL_20:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 72), 9u);
    if ((*(_WORD *)(v3 + 76) & 0x100) == 0) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 8u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) != 0) {
    goto LABEL_20;
  }
LABEL_12:
  if ((v4 & 0x100) == 0) {
    return result;
  }
LABEL_21:
  char v5 = *(unsigned char *)(v3 + 73);

  return PB::Writer::write(this, v5, 0xAu);
}

void sub_10005F584(PB::Base *this)
{
  *(void *)this = off_1001B7688;
  uint64_t v4 = *((void *)this + 5);
  unint64_t v2 = (void *)((char *)this + 40);
  uint64_t v3 = v4;
  *unint64_t v2 = 0;
  if (v4) {
    sub_10005F658((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

void sub_10005F5E4(PB::Base *this)
{
  *(void *)this = off_1001B7688;
  uint64_t v4 = *((void *)this + 5);
  unint64_t v2 = (void *)((char *)this + 40);
  uint64_t v3 = v4;
  *unint64_t v2 = 0;
  if (v4) {
    sub_10005F658((uint64_t)v2, v3);
  }
  PB::Base::~Base(this);

  operator delete();
}

void sub_10005F658(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    operator delete();
  }
}

uint64_t sub_10005F6B4(uint64_t result, uint64_t a2)
{
  qword_1001D7C60 = result;
  qword_1001D7C68 = a2;
  return result;
}

void sub_10005F6C8(uint64_t *a1, uint64_t a2, unsigned int a3, const wireless_diagnostics::google::protobuf::MessageLite *a4, uint64_t a5)
{
  if (qword_1001D7C60)
  {
    awd::metrics::AwddStartup::AwddStartup(v20);
    v21 |= 1u;
    v20[1] = qword_1001D7C60;
    unsigned int v10 = (std::__shared_weak_count *)a1[1];
    if (v10)
    {
      uint64_t v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        char v13 = v11;
        uint64_t v14 = *a1;
        if (*a1)
        {
          wis::serializeMetric((uint64_t *)&v18, (wis *)v20, a4, v12);
          char v15 = (char *)operator new(0x30uLL);
          *((void *)v15 + 1) = 0;
          *((void *)v15 + 2) = 0;
          *(_OWORD *)(v15 + 24) = v18;
          *(void *)char v15 = off_1001B6FF8;
          *((void *)v15 + 5) = v19;
          unsigned int v16 = v15 + 24;
          unint64_t v17 = (std::__shared_weak_count *)v15;
          atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
          (*(void (**)(uint64_t, const wireless_diagnostics::google::protobuf::MessageLite *, uint64_t, uint64_t, void, uint64_t, char **))(*(void *)v14 + 24))(v14, a4, a5, a2, a3, 7, &v16);
          if (v17) {
            sub_10000B678(v17);
          }
          sub_10000B678((std::__shared_weak_count *)v15);
        }
        sub_10000B678(v13);
      }
    }
    awd::metrics::AwddStartup::~AwddStartup((awd::metrics::AwddStartup *)v20);
  }
}

void sub_10005F824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (a10) {
    sub_10000B678(a10);
  }
  sub_10000B678(v15);
  sub_10000B678(v14);
  awd::metrics::AwddStartup::~AwddStartup((awd::metrics::AwddStartup *)&a14);
  _Unwind_Resume(a1);
}

void sub_10005F874(uint64_t *a1, uint64_t a2, unsigned int a3, const wireless_diagnostics::google::protobuf::MessageLite *a4, uint64_t a5)
{
  if (qword_1001D7C68)
  {
    awd::metrics::AwddShutdown::AwddShutdown(v20);
    v21 |= 1u;
    v20[1] = qword_1001D7C68;
    unsigned int v10 = (std::__shared_weak_count *)a1[1];
    if (v10)
    {
      uint64_t v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        char v13 = v11;
        uint64_t v14 = *a1;
        if (*a1)
        {
          wis::serializeMetric((uint64_t *)&v18, (wis *)v20, a4, v12);
          char v15 = (char *)operator new(0x30uLL);
          *((void *)v15 + 1) = 0;
          *((void *)v15 + 2) = 0;
          *(_OWORD *)(v15 + 24) = v18;
          *(void *)char v15 = off_1001B6FF8;
          *((void *)v15 + 5) = v19;
          unsigned int v16 = v15 + 24;
          unint64_t v17 = (std::__shared_weak_count *)v15;
          atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
          (*(void (**)(uint64_t, const wireless_diagnostics::google::protobuf::MessageLite *, uint64_t, uint64_t, void, uint64_t, char **))(*(void *)v14 + 24))(v14, a4, a5, a2, a3, 7, &v16);
          if (v17) {
            sub_10000B678(v17);
          }
          sub_10000B678((std::__shared_weak_count *)v15);
        }
        sub_10000B678(v13);
      }
    }
    awd::metrics::AwddShutdown::~AwddShutdown((awd::metrics::AwddShutdown *)v20);
  }
}

void sub_10005F9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (a10) {
    sub_10000B678(a10);
  }
  sub_10000B678(v15);
  sub_10000B678(v14);
  awd::metrics::AwddShutdown::~AwddShutdown((awd::metrics::AwddShutdown *)&a14);
  _Unwind_Resume(a1);
}

void sub_10005FBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26)
{
  uint64_t v34 = v30;
  char v32 = *(void **)(v31 - 96);

  _Unwind_Resume(a1);
}

void sub_10005FCA8()
{
}

void sub_10005FCC0()
{
}

void sub_10005FCD8()
{
}

void sub_10005FCEC()
{
}

void sub_10005FCFC()
{
}

void sub_10005FD08()
{
}

void sub_10005FD14()
{
}

void sub_10005FE2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005FE78()
{
}

void sub_10005FE80()
{
}

void sub_10005FE88()
{
}

void sub_1000600E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100060138()
{
}

void sub_1000601B8()
{
}

void *sub_1000601DC(void *a1, const char *a2, dispatch_qos_class_t a3, const ctu::OsLogLogger *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), a4);
  return a1;
}

void sub_100060230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

void sub_100060258(std::string *a1, xpc_object_t **a2)
{
  std::string::append(a1, "-XPC");
  uint64_t v3 = *a2;
  if (*a2 && (xpc_object_t v4 = *v3) != 0)
  {
    xpc_retain(*v3);
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    if (!v4)
    {
      xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_9;
    }
  }
  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary) {
    xpc_retain(v4);
  }
  else {
    xpc_null_create();
  }
LABEL_9:
  xpc_release(v4);
  operator new();
}

void sub_1000604C4(_Unwind_Exception *a1)
{
  sub_10000B678(v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void sub_100060578(void *a1)
{
  unint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      char v5 = v4;
      if (a1[5])
      {
        sub_1000040D0((uint64_t)v3);
        if (v3[5] == v3[6])
        {
          __int16 v6 = v3[4];
          if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t v8 = 0;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "life:#I No activities remaining; cancelling activity timer.",
              v8,
              2u);
          }
          uint64_t v7 = v3[8];
          v3[8] = 0;
          if (v7) {
            (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
          }
        }
        else
        {
          sub_100060670(v3);
        }
      }
      sub_10000B678(v5);
    }
  }
}

void sub_10006065C(_Unwind_Exception *a1)
{
  sub_10000B678(v1);
  _Unwind_Resume(a1);
}

void sub_100060670(void *a1)
{
  unint64_t v2 = (long long **)a1[5];
  uint64_t v3 = (long long **)a1[6];
  memset(&__p, 0, sizeof(__p));
  if (v2 == v3) {
    goto LABEL_48;
  }
  xpc_object_t v4 = (std::__shared_weak_count *)v2[1];
  if (v4)
  {
    char v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      __int16 v6 = *v2;
      if (*v2)
      {
        if (*((char *)v6 + 23) < 0)
        {
          sub_1000173FC(&buf, *(void **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v7 = *v6;
          buf.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v7;
        }
        std::string::size_type v8 = 1;
        goto LABEL_12;
      }
    }
  }
  else
  {
    char v5 = 0;
  }
  sub_100018888(&buf, "<expired>");
  std::string::size_type v8 = 0;
  if (v5) {
LABEL_12:
  }
    sub_10000B678(v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = buf;
  for (uint64_t i = v2 + 2; i != v3; i += 2)
  {
    sub_100055C50(&buf, ",", 1uLL);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = buf.__r_.__value_.__l.__size_;
    }
    std::string::append(&__p, (const std::string::value_type *)p_buf, size);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    unsigned int v12 = (std::__shared_weak_count *)i[1];
    if (v12)
    {
      char v13 = std::__shared_weak_count::lock(v12);
      if (v13)
      {
        uint64_t v14 = *i;
        if (*i)
        {
          ++v8;
          if (*((char *)v14 + 23) < 0)
          {
            sub_1000173FC(&buf, *(void **)v14, *((void *)v14 + 1));
          }
          else
          {
            long long v15 = *v14;
            buf.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v15;
          }
LABEL_31:
          sub_10000B678(v13);
          goto LABEL_32;
        }
      }
    }
    else
    {
      char v13 = 0;
    }
    sub_100018888(&buf, "<expired>");
    if (v13) {
      goto LABEL_31;
    }
LABEL_32:
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v16 = &buf;
    }
    else {
      unsigned int v16 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v17 = buf.__r_.__value_.__l.__size_;
    }
    std::string::append(&__p, (const std::string::value_type *)v16, v17);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  if (v8)
  {
    long long v18 = a1[4];
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
      goto LABEL_51;
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218242;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v8;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
    unint64_t v20 = "life:#I %zd activities remaining: %{public}s";
    int v21 = v18;
    uint32_t v22 = 22;
    goto LABEL_50;
  }
LABEL_48:
  char v23 = a1[4];
  if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO)) {
    goto LABEL_51;
  }
  LOWORD(buf.__r_.__value_.__l.__data_) = 0;
  unint64_t v20 = "life:#I No activities.";
  int v21 = v23;
  uint32_t v22 = 2;
LABEL_50:
  _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, v20, (uint8_t *)&buf, v22);
LABEL_51:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100060940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_10000B678(v21);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000609AC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000609C8(uint64_t a1)
{
  id v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1000609D8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100060A50(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_100060B28);
  __cxa_rethrow();
}

void sub_100060A78(_Unwind_Exception *a1)
{
}

void sub_100060A90(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100060AC8(uint64_t a1)
{
}

uint64_t sub_100060AE4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100060B28(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 64);
    *(void *)(v1 + 64) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = (void **)(v1 + 40);
    sub_100060BBC(&v3);
    ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(v1 + 32));
    sub_100029804((void *)v1);
    operator delete();
  }
  return result;
}

void sub_100060BBC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100060C10((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100060C10(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    xpc_object_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

void sub_100060C60(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100060C98(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else {
    return 0;
  }
}

void sub_100060CD8(uint64_t a1)
{
  *(void *)a1 = off_1001B77C8;
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;

  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a1);
}

void sub_100060D38(uint64_t a1)
{
  *(void *)a1 = off_1001B77C8;
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a1);

  operator delete();
}

void sub_100060DAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
}

uint64_t sub_100060E0C(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else {
    return 0;
  }
}

void sub_100060E50(uint64_t a1)
{
  *(void *)a1 = off_1001B7828;
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;

  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a1);
}

void sub_100060EB0(uint64_t a1)
{
  *(void *)a1 = off_1001B7828;
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a1);

  operator delete();
}

void sub_100060F24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
}

uint64_t sub_100060F84(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100060FC8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100061040((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100061040(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1000610D4((uint64_t)v12);
  return v10;
}

uint64_t sub_1000610D4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10006110C(a1);
  }
  return a1;
}

void sub_10006110C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    v1 += 16;
  }
}

void **sub_100061150(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100061184(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    xpc_object_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t sub_1000611D8()
{
  if ((byte_1001D6D80 & 1) == 0)
  {
    byte_1001D6D80 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E84, &unk_1001D6D30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100061214()
{
  if ((byte_1001D6EF0 & 1) == 0)
  {
    byte_1001D6EF0 = 1;
    return __cxa_atexit((void (*)(void *))sub_100051554, &stru_1001D6EA0, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1000612F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000613A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100061468(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_100061A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_100061B04(uint64_t a1)
{
  if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 48), OS_LOG_TYPE_DEBUG)) {
    sub_100143D48();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained performDatabaseMaintenance];
}

void sub_100061B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100061C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)FMCoreData;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t sub_100061CBC(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = [*(id *)(a1 + 32) container];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100061D98;
  uint64_t v4[3] = &unk_1001B7880;
  v4[4] = &v5;
  [v1 loadPersistentStoresWithCompletionHandler:v4];

  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_100061D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100061D98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(qword_1001D8080 + 136);
  if (v6)
  {
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR))
    {
      char v8 = [v6 localizedDescription];
      sub_100143E1C((uint64_t)v5, v8, v9, v7);
    }
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
      sub_100143DB0();
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_100061E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100062108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000621B8(void *a1)
{
  uint64_t v2 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100143F3C((uint64_t)a1, v2);
  }
  uint64_t v4 = a1[5];
  uint64_t v3 = (void *)a1[6];
  uint64_t v5 = a1[4];
  id v14 = 0;
  [v3 destroyPersistentStoreAtURL:v5 withType:v4 options:0 error:&v14];
  id v6 = v14;
  uint64_t v7 = *(NSObject **)(qword_1001D8080 + 136);
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = a1[4];
      uint64_t v8 = a1[5];
      uint64_t v10 = [v6 localizedDescription];
      *(_DWORD *)std::string buf = 138412802;
      uint64_t v16 = v9;
      __int16 v17 = 2112;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      unint64_t v20 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "FederatedMobility[FMCoreData]:Failed to destroy store (%@, %@): %@", buf, 0x20u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = a1[4];
    uint64_t v12 = a1[5];
    *(_DWORD *)std::string buf = 138412546;
    uint64_t v16 = v11;
    __int16 v17 = 2112;
    uint64_t v18 = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "FederatedMobility[FMCoreData]:#I Successfully destroyed store (%@, %@)", buf, 0x16u);
  }

  return v6 == 0;
}

void sub_100062350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000624AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000624E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000624F0(uint64_t a1)
{
}

void sub_1000624F8(uint64_t a1)
{
  uint64_t v2 = +[NSFetchRequest fetchRequestWithEntityName:@"Configuration"];
  id v3 = [objc_alloc((Class)NSSortDescriptor) initWithKey:@"version" ascending:0];
  id v15 = v3;
  uint64_t v4 = +[NSArray arrayWithObjects:&v15 count:1];
  [v2 setSortDescriptors:v4];

  [v2 setFetchLimit:1];
  uint64_t v5 = *(void **)(a1 + 32);
  id v14 = 0;
  id v6 = [v5 executeFetchRequest:v2 error:&v14];
  id v7 = v14;
  if (v7)
  {
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR))
    {
      [v7 localizedDescription];
      objc_claimAutoreleasedReturnValue();
      sub_100144060();
    }
  }
  else if ([v6 count])
  {
    uint64_t v8 = [v6 objectAtIndexedSubscript:0];
    uint64_t v9 = [v8 prevValues];
    if (v9)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {

        uint64_t v9 = 0;
      }
    }
    uint64_t v10 = [v8 values];
    if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      id v11 = -[FMStoredConfiguration init:prevValues:values:]([FMStoredConfiguration alloc], "init:prevValues:values:", [v8 version], v9, v10);
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
      char v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }
    else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR))
    {
      sub_10014402C();
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG))
  {
    sub_100143FF8();
  }
}

void sub_100062778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100062948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006298C(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = *(void *)(a1 + 32);
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v43 = v22;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "FederatedMobility[FMCoreData]:#D Updating config in DB, old config: %@", buf, 0xCu);
    uint64_t v2 = *(NSObject **)(qword_1001D8080 + 136);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_1001441E8(a1, v2, v3);
  }
  uint64_t v4 = +[NSEntityDescription insertNewObjectForEntityForName:@"Configuration" inManagedObjectContext:*(void *)(a1 + 48)];
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5) {
    id v6 = (char *)[v5 version] + 1;
  }
  else {
    id v6 = 0;
  }
  [v4 setVersion:v6];
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    uint64_t v8 = [*(id *)(a1 + 32) values];
  }
  else
  {
    uint64_t v8 = 0;
  }
  [v4 setPrevValues:v8];
  if (v7) {

  }
  [v4 setValues:*(void *)(a1 + 40)];
  uint64_t v9 = *(void **)(a1 + 48);
  id v39 = 0;
  [v9 save:&v39];
  id v10 = v39;
  if (!v10)
  {
    uint64_t v12 = +[NSFetchRequest fetchRequestWithEntityName:@"Configuration"];
    char v13 = *(void **)(a1 + 48);
    id v38 = 0;
    id v14 = (char *)[v13 countForFetchRequest:v12 error:&v38];
    id v15 = v38;
    if (v15)
    {
      id v11 = v15;
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR))
      {
        [v11 localizedDescription];
        objc_claimAutoreleasedReturnValue();
        sub_100144160();
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
      goto LABEL_40;
    }
    if ((unint64_t)v14 < 0xB)
    {
      id v11 = 0;
LABEL_40:

      goto LABEL_41;
    }
    uint64_t v16 = +[NSFetchRequest fetchRequestWithEntityName:@"Configuration"];
    id v17 = [objc_alloc((Class)NSSortDescriptor) initWithKey:@"version" ascending:1];
    id v41 = v17;
    uint64_t v18 = +[NSArray arrayWithObjects:&v41 count:1];
    [v16 setSortDescriptors:v18];

    [v16 setFetchLimit:v14 - 10];
    __int16 v19 = *(void **)(a1 + 48);
    id v37 = 0;
    unint64_t v20 = [v19 executeFetchRequest:v16 error:&v37];
    id v21 = v37;
    if (v21)
    {
      id v11 = v21;
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR))
      {
        [v11 localizedDescription];
        objc_claimAutoreleasedReturnValue();
        sub_10014411C();
      }
    }
    else
    {
      uint64_t v31 = v16;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      unint64_t v30 = v20;
      id v23 = v20;
      id v24 = [v23 countByEnumeratingWithState:&v33 objects:v40 count:16];
      if (v24)
      {
        uint64_t v25 = *(void *)v34;
        do
        {
          for (uint64_t i = 0; i != v24; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v34 != v25) {
              objc_enumerationMutation(v23);
            }
            uint64_t v27 = *(void *)(*((void *)&v33 + 1) + 8 * i);
            double v28 = *(NSObject **)(qword_1001D8080 + 136);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)std::string buf = 138412290;
              uint64_t v43 = v27;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "FederatedMobility[FMCoreData]:#I Deleting Configuration: %@", buf, 0xCu);
            }
            [*(id *)(a1 + 48) deleteObject:v27];
          }
          id v24 = [v23 countByEnumeratingWithState:&v33 objects:v40 count:16];
        }
        while (v24);
      }

      uint64_t v16 = v31;
      unint64_t v20 = v30;
      unint64_t v29 = *(void **)(a1 + 48);
      id v32 = 0;
      [v29 save:&v32];
      id v11 = v32;
      if (!v11) {
        goto LABEL_39;
      }
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR))
      {
        [v11 localizedDescription];
        objc_claimAutoreleasedReturnValue();
        sub_1001440D8();
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
LABEL_39:

    goto LABEL_40;
  }
  id v11 = v10;
  if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR))
  {
    [v11 localizedDescription];
    objc_claimAutoreleasedReturnValue();
    sub_1001441A4();
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
LABEL_41:
}

void sub_100062E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100063040(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_100063318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_100063624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_100063954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_100063B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100063D5C(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1000642E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1000646E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

BOOL sub_100064758(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 objectID];
  uint64_t v4 = [*(id *)(a1 + 32) objectID];
  BOOL v5 = v3 == v4;

  return v5;
}

void sub_1000647A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100064D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_100065448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_100065610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000657C4(_Unwind_Exception *a1)
{
  BOOL v5 = v4;

  _Unwind_Resume(a1);
}

void sub_100065CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100066004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100066380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100066730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100066988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100066CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_100066E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100066EA8(uint64_t a1)
{
  uint64_t v2 = +[FMConfiguration sharedInstance];
  +[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", (double)-(uint64_t)[v2 OOSAreasDatabaseTimeToLive]);
  id v4 = (id)objc_claimAutoreleasedReturnValue();

  id v3 = [*(id *)(a1 + 32) deleteOutOfServiceAreasOlderThan:v4 WithContext:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) deleteOutOfServiceDurationsOlderThan:v4 WithContext:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) deleteCongestionAreasOlderThan:v4 withContext:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) deleteCongestionOccurrencesOlderThan:v4 withContext:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) deleteTSAnomaliesWithContext:*(void *)(a1 + 40) olderThan:v4];
  [*(id *)(a1 + 32) sendOnDeviceDBTelemetryEventWithContext:*(void *)(a1 + 40) andNumberOfDeletedOOSAreasStale:v3];
}

void sub_100066F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000672B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_10006736C(uint64_t a1)
{
  v13[0] = @"HighestSeenCount";
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v2 seenCount]);
  }
  else {
  id v3 = +[NSNull null];
  }
  v14[0] = v3;
  v13[1] = @"numNextCells";
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    BOOL v5 = [*(id *)(a1 + 32) nextCells];
    id v6 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v5 count]);
  }
  else
  {
    id v6 = +[NSNull null];
    BOOL v5 = v6;
  }
  v14[1] = v6;
  v13[2] = @"NumDeletionsDBEntryStale";
  uint64_t v7 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 40)];
  void v14[2] = v7;
  void v13[3] = @"NumDeletionsDBMaintenance";
  uint64_t v8 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 40)];
  void v14[3] = v8;
  v13[4] = @"NumOOSAreas";
  uint64_t v9 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 48)];
  v14[4] = v9;
  v13[5] = @"NumOOSDurations";
  id v10 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 56)];
  v14[5] = v10;
  id v11 = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:6];

  if (v4) {

  }
  return v11;
}

void sub_100067578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000678E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100067984(void *a1@<X8>)
{
  sub_100067AB8(qword_1001D7C70, a1);
  if (!*a1)
  {
    uint64_t v2 = (std::mutex *)sub_100067B1C();
    std::mutex::lock(v2);
    sub_100067AB8(qword_1001D7C70, &v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v3;
    if (v4)
    {
      sub_10000B678(v4);
      if (*((void *)&v5 + 1)) {
        sub_10000B678(*((std::__shared_weak_count **)&v5 + 1));
      }
      if (!*a1) {
LABEL_8:
      }
        sub_100067B90();
    }
    else if (!(void)v3)
    {
      goto LABEL_8;
    }
    std::mutex::unlock(v2);
  }
}

void sub_100067A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10000B678(a10);
  }
  std::mutex::unlock(v11);
  char v13 = *(std::__shared_weak_count **)(v10 + 8);
  if (v13) {
    sub_10000B678(v13);
  }
  _Unwind_Resume(a1);
}

void sub_100067AB8(void *a1@<X0>, void *a2@<X8>)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }

  std::__sp_mut::unlock(sp_mut);
}

uint64_t *sub_100067B1C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D7CC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001D7CC0))
  {
    qword_1001D7C80 = 850045863;
    unk_1001D7C88 = 0u;
    unk_1001D7C98 = 0u;
    unk_1001D7CA8 = 0u;
    qword_1001D7CB8 = 0;
    __cxa_guard_release(&qword_1001D7CC0);
  }
  return &qword_1001D7C80;
}

void sub_100067B90()
{
}

void sub_100067CD8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_10006829C);
  __cxa_rethrow();
}

void sub_100067D00(_Unwind_Exception *a1)
{
}

void sub_100067D3C(uint64_t *a1, uint64_t *a2)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;

  std::__sp_mut::unlock(sp_mut);
}

void *sub_100067DA8(void *a1)
{
  uint64_t v2 = dispatch_queue_create("PRNGenerator", 0);
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = v2;
  if (v2)
  {
    long long v3 = v2;
    dispatch_retain(v2);
    a1[4] = 0;
    dispatch_release(v3);
  }
  else
  {
    a1[4] = 0;
  }
  *a1 = &off_1001B7978;
  return a1;
}

uint64_t sub_100067E20(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_10006815C;
  v5[3] = &unk_1001B7A20;
  v5[4] = a1 + 8;
  void v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8))
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000681C4;
    uint64_t v10 = &unk_1001B7A60;
    id v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_100068188;
    uint64_t v10 = &unk_1001B7A40;
    id v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13;
}

uint64_t sub_100067F48(uint64_t a1)
{
  uint64_t v2 = 0x270F00000000;
  return sub_100067FF8((uint64_t)&v2, a1 + 40, &v2);
}

uint64_t sub_100067F80(uint64_t a1)
{
  return a1;
}

void sub_100067FAC(uint64_t a1)
{
  sub_100029804((void *)(a1 + 8));

  operator delete();
}

uint64_t sub_100067FF8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = a3[1];
  int v4 = result - *a3;
  if (result != *a3)
  {
    unsigned int v6 = v4 + 1;
    if (v4 == -1)
    {
      return sub_1000680BC(a2);
    }
    else
    {
      uint64_t v8 = __clz(v6);
      uint64_t v9 = 31;
      if (((v6 << v8) & 0x7FFFFFFF) != 0) {
        uint64_t v9 = 32;
      }
      unint64_t v10 = v9 - v8;
      unint64_t v11 = v10 >> 5;
      if ((v10 & 0x1F) != 0) {
        ++v11;
      }
      if (v11 <= v10) {
        unsigned int v12 = 0xFFFFFFFF >> -(v10 / v11);
      }
      else {
        unsigned int v12 = 0;
      }
      do
        unsigned int v13 = sub_1000680BC(a2) & v12;
      while (v13 >= v6);
      return *a3 + v13;
    }
  }
  return result;
}

uint64_t sub_1000680BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2496);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  unsigned int v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(void *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (v1 << 15) & 0xEFC60000 ^ v1 ^ (((v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_10006815C(uint64_t a1)
{
  return (****(uint64_t (*****)(void))(a1 + 40))(**(void **)(a1 + 40));
}

uint64_t sub_100068188(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000681C4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

void sub_100068204(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10006823C(uint64_t a1)
{
}

uint64_t sub_100068258(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10006829C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_1000682E0(uint64_t result, int a2)
{
  if (a2 || !*(unsigned char *)(result + 36))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parsing failed in metric");
  }
  return result;
}

void sub_100068340(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100068354(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unsigned int v3 = *(std::__shared_weak_count **)(v1 + 16);
    if (v3) {
      sub_10000B678(v3);
    }
    v1 += 24;
  }
}

void sub_100068430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000684BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100068588(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1001D7CC8;
  qword_1001D7CC8 = (uint64_t)v1;
}

void sub_1000688C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_100068928(id a1, __CFString *a2, __CFDictionary *a3)
{
  int v4 = *(NSObject **)(qword_1001D8080 + 48);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100144E18((uint64_t)a2, v4);
  }
}

void sub_100068978(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained ctServerRadioStateChangedNotification:a2];
}

void sub_1000689C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100068A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)TelephonyStateRelay;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100068B24(void *a1)
{
  uint64_t v2 = objc_alloc_init(TelephonyDelegateEntry);
  [(TelephonyDelegateEntry *)v2 setDelegate:a1[4]];
  [(TelephonyDelegateEntry *)v2 setQueue:a1[6]];
  [*(id *)(a1[5] + 16) addObject:v2];
}

void sub_100068B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100068C54(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) findDelegateEntryByDelegate:*(void *)(a1 + 40)];
  if (v2) {
    [*(id *)(*(void *)(a1 + 32) + 16) removeObject:v2];
  }
}

void sub_100068CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100068D34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100069010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, const void *);

  sub_10005AC84((const void **)va);
  sub_10005AC84((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100069050(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_100069058(uint64_t a1)
{
  return *(void *)a1;
}

id sub_100069060(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 airplaneModeStatusChanged];
}

void sub_1000691D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  sub_10005AC84((const void **)va);
  _Unwind_Resume(a1);
}

void sub_100069294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100069448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006959C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100069654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000696CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100069738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000697E8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) findDelegateEntryByDelegate:*(void *)(a1 + 40)];
  if (v2)
  {
    id v3 = *(id *)(*(void *)(a1 + 32) + 80);
    int v4 = [v2 queue];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    double v6[2] = sub_1000698D8;
    void v6[3] = &unk_1001B7948;
    id v7 = v2;
    id v8 = v3;
    id v5 = v3;
    dispatch_async(v4, v6);
  }
}

void sub_1000698C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000698D8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 handleUpdate:0 forKey:14 withState:*(void *)(a1 + 40)];
}

void sub_100069934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100069A0C(uint64_t a1)
{
  id v2 = +[NSString stringWithUTF8String:"NotSet"];
  id v3 = [*(id *)(a1 + 32) slotID];
  if (v3 == (id)1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    if (v3 != (id)2) {
      goto LABEL_6;
    }
    uint64_t v4 = 1;
  }
  uint64_t v5 = [*(id *)(*(void *)(a1 + 40) + 48) objectAtIndexedSubscript:v4];

  id v2 = (void *)v5;
LABEL_6:
  unsigned int v6 = +[NSString stringWithUTF8String:"NotSet"];
  unsigned __int8 v7 = [v2 isEqual:v6];

  if ((v7 & 1) == 0)
  {
    id v8 = [*(id *)(a1 + 40) findDelegateEntryByDelegate:*(void *)(a1 + 48)];
    uint64_t v9 = v8;
    if (v8)
    {
      unint64_t v10 = [v8 queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100069B98;
      block[3] = &unk_1001B6698;
      id v12 = v9;
      id v13 = *(id *)(a1 + 32);
      id v14 = v2;
      dispatch_async(v10, block);
    }
  }
}

void sub_100069B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100069B98(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 handleUpdate:*(void *)(a1 + 40) forKey:9 withState:*(void *)(a1 + 48)];
}

void sub_100069BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100069CC8(uint64_t a1)
{
  id v2 = +[NSNumber numberWithBool:0];
  id v3 = [*(id *)(a1 + 32) slotID];
  if (v3 == (id)1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    if (v3 != (id)2) {
      goto LABEL_6;
    }
    uint64_t v4 = 1;
  }
  uint64_t v5 = [*(id *)(*(void *)(a1 + 40) + 56) objectAtIndexedSubscript:v4];

  id v2 = (void *)v5;
LABEL_6:
  unsigned int v6 = [*(id *)(a1 + 40) findDelegateEntryByDelegate:*(void *)(a1 + 48)];
  unsigned __int8 v7 = v6;
  if (v6)
  {
    id v8 = [v6 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100069E1C;
    block[3] = &unk_1001B6698;
    id v10 = v7;
    id v11 = *(id *)(a1 + 32);
    id v12 = v2;
    dispatch_async(v8, block);
  }
}

void sub_100069DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100069E1C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 handleUpdate:*(void *)(a1 + 40) forKey:13 withState:*(void *)(a1 + 48)];
}

void sub_100069E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100069F20(uint64_t a1)
{
  id v2 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 40)];
  id v3 = [*(id *)(a1 + 32) findDelegateEntryByDelegate:*(void *)(a1 + 40)];
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = [v3 queue];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    double v6[2] = sub_10006A020;
    void v6[3] = &unk_1001B7948;
    id v7 = v4;
    id v8 = v2;
    dispatch_async(v5, v6);
  }
}

void sub_10006A004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006A020(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 handleUpdate:0 forKey:7 withState:*(void *)(a1 + 40)];
}

void sub_10006A07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006A3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10006A410(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 48), OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = [*(id *)(a1 + 32) uuid];
    uint64_t v5 = [v3 localSenderIdentityUUID];
    sub_10014513C(v4, v5, (uint64_t)&v11);
  }
  if ([v3 service] == 1)
  {
    unsigned int v6 = [v3 localSenderIdentityUUID];
    id v7 = [*(id *)(a1 + 32) uuid];
    unsigned int v8 = [v6 isEqual:v7];

    uint64_t v9 = v8 ^ 1;
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_10006A520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006A5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006A714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006A7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006A854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006A980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006AB24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006AC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006AD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

const void **sub_10006AE58(const void **a1)
{
  id v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_10006AE8C(const void **a1)
{
  id v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_10006AEC0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10006AED0(uint64_t a1)
{
}

int64_t sub_10006AED8(id a1, OutOfServiceArea *a2, OutOfServiceArea *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  unsigned int v6 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_1001453D0(v11, (int)[(OutOfServiceArea *)v4 seenCount], (int)[(OutOfServiceArea *)v5 seenCount], v6);
  }
  unsigned int v7 = [(OutOfServiceArea *)v4 seenCount];
  if (v7 == [(OutOfServiceArea *)v5 seenCount])
  {
    int64_t v8 = 0;
  }
  else
  {
    int v9 = [(OutOfServiceArea *)v4 seenCount];
    if (v9 > (int)[(OutOfServiceArea *)v5 seenCount]) {
      int64_t v8 = -1;
    }
    else {
      int64_t v8 = 1;
    }
  }

  return v8;
}

void sub_10006AFDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006B548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  _Unwind_Resume(a1);
}

int64_t sub_10006B6E4(id a1, OutOfServiceDuration *a2, OutOfServiceDuration *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  unsigned int v6 = [(OutOfServiceDuration *)v4 seconds];
  if (v6 == [(OutOfServiceDuration *)v5 seconds])
  {
    int64_t v7 = 0;
  }
  else
  {
    int v8 = [(OutOfServiceDuration *)v4 seconds];
    if (v8 < (int)[(OutOfServiceDuration *)v5 seconds]) {
      int64_t v7 = -1;
    }
    else {
      int64_t v7 = 1;
    }
  }

  return v7;
}

void sub_10006B76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int64_t sub_10006B780(id a1, ServingCell *a2, ServingCell *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  unsigned int v6 = [(ServingCell *)v4 lastSeen];
  if (v6)
  {
  }
  else
  {
    int64_t v7 = [(ServingCell *)v5 lastSeen];

    if (!v7) {
      goto LABEL_11;
    }
  }
  int v8 = [(ServingCell *)v4 lastSeen];

  if (v8)
  {
    int v9 = [(ServingCell *)v5 lastSeen];

    if (v9)
    {
      id v10 = [(ServingCell *)v4 lastSeen];
      uint64_t v11 = [(ServingCell *)v5 lastSeen];
      unsigned __int8 v12 = [v10 isEqualToDate:v11];

      if (v12)
      {
        int64_t v7 = 0;
      }
      else
      {
        id v13 = [(ServingCell *)v5 lastSeen];
        id v14 = [(ServingCell *)v4 lastSeen];
        int64_t v7 = (int64_t)[v13 compare:v14];
      }
    }
    else
    {
      int64_t v7 = -1;
    }
  }
  else
  {
    int64_t v7 = 1;
  }
LABEL_11:

  return v7;
}

void sub_10006B8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10006B8FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = [v5 seenCount];
  if (v7 == [v6 seenCount])
  {
    uint64_t v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    int v9 = [v5 seenCount];
    if (v9 > (int)[v6 seenCount]) {
      uint64_t v8 = -1;
    }
    else {
      uint64_t v8 = 1;
    }
  }

  return v8;
}

void sub_10006B9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006BB44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10006BB78(uint64_t a1, xpc_object_t *a2)
{
  *(void *)a1 = off_1001B7CB8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v11 = a2;
    unsigned __int8 v12 = "WISMessageType";
    sub_10000B7A4((uint64_t)&v11, &object);
    int v5 = xpc::dyn_cast_or_default((xpc *)&object, 0, v4);
    xpc_release(object);
    if (v5 == 1)
    {
      uint64_t v11 = a2;
      unsigned __int8 v12 = "WISMessageDeviceConfigurationId";
      sub_10000B7A4((uint64_t)&v11, &object);
      *(_DWORD *)(a1 + 8) = xpc::dyn_cast_or_default((xpc *)&object, 0, v6);
      xpc_release(object);
      uint64_t v11 = a2;
      unsigned __int8 v12 = "WISMessageComponentId";
      sub_10000B7A4((uint64_t)&v11, &object);
      *(_DWORD *)(a1 + 12) = xpc::dyn_cast_or_default((xpc *)&object, 0, v7);
      xpc_release(object);
      uint64_t v11 = a2;
      unsigned __int8 v12 = "WISMessagePid";
      sub_10000B7A4((uint64_t)&v11, &object);
      *(_DWORD *)(a1 + 16) = xpc::dyn_cast_or_default((xpc *)&object, 0, v8);
      xpc_release(object);
      uint64_t v11 = a2;
      unsigned __int8 v12 = "WISMessageNeedsConfiguration";
      sub_10000B7A4((uint64_t)&v11, &object);
      *(unsigned char *)(a1 + 20) = xpc::dyn_cast_or_default((xpc *)&object, 0, v9);
      xpc_release(object);
    }
  }
  return a1;
}

void sub_10006BCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void sub_10006BD78(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v17 = xpc_int64_create(1);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  id v15 = a2;
  uint64_t v16 = "WISMessageType";
  sub_100014D08((uint64_t)&v15, &v17, &v18);
  xpc_release(v18);
  xpc_object_t v18 = 0;
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_object_t v13 = xpc_int64_create(*(unsigned int *)(a1 + 8));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  id v15 = a2;
  uint64_t v16 = "WISMessageDeviceConfigurationId";
  sub_100014D08((uint64_t)&v15, &v13, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_object_t v11 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  id v15 = a2;
  uint64_t v16 = "WISMessageComponentId";
  sub_100014D08((uint64_t)&v15, &v11, &v12);
  xpc_release(v12);
  xpc_object_t v12 = 0;
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_object_t v9 = xpc_int64_create(*(int *)(a1 + 16));
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  id v15 = a2;
  uint64_t v16 = "WISMessagePid";
  sub_100014D08((uint64_t)&v15, &v9, &v10);
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_release(v9);
  xpc_object_t v9 = 0;
  xpc_object_t v7 = xpc_BOOL_create(*(unsigned char *)(a1 + 20));
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  id v15 = a2;
  uint64_t v16 = "WISMessageNeedsConfiguration";
  sub_100014D08((uint64_t)&v15, &v7, &v8);
  xpc_release(v8);
  xpc_object_t v8 = 0;
  xpc_release(v7);
}

uint64_t sub_10006BFF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_10006BFFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_10006C004(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

void sub_10006C010()
{
}

uint64_t sub_10006C024@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_10006F8E4();
  if (result)
  {
    xpc_object_t v4 = operator new(0x30uLL);
    v4[1] = 0;
    void v4[2] = 0;
    void *v4 = off_1001B7D28;
    uint64_t v4[3] = 0;
    v4[4] = 0;
    void v4[5] = kCLLocationAccuracyAggressivePrecisionReduction;
    xpc_object_t v5 = objc_alloc_init(WISCLLocationManager);
    xpc_object_t v6 = (void *)v4[3];
    uint64_t v4[3] = v5;

    id v7 = objc_alloc_init((Class)CLLocation);
    xpc_object_t v8 = (void *)v4[4];
    v4[4] = v7;

    operator new();
  }
  *a1 = 0;
  a1[1] = 0;
  return result;
}

void sub_10006C2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  pthread_mutex_unlock(&stru_1001D6968);
  if (a14) {
    sub_10000B678(a14);
  }
  xpc_object_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    sub_10000B678(v17);
  }
  sub_10000B678(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_10006C3A8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10006C3C4(uint64_t a1)
{
  id v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_10006C3D4(void *a1, const char *a2, dispatch_qos_class_t a3, const ctu::OsLogLogger *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), a4);
  return a1;
}

void sub_10006C428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

void *sub_10006C450(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    sub_10000B678(v2);
  }
  sub_10006D008(a1 + 56, *(void **)(a1 + 64));
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 32));

  return sub_100029804((void *)a1);
}

void sub_10006C4D4(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10000BA54(&v6, a1);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10006C67C;
  v5[3] = &unk_1001B5FC0;
  v5[4] = a1;
  sub_10006C588(a3, &v6, v5);
  if (v7) {
    sub_10000B678(v7);
  }
}

void sub_10006C570(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    sub_10000B678(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006C588(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *a2;
  id v7 = (NSObject **)(*a2 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  _DWORD v10[2] = sub_10006D0C4;
  v10[3] = &unk_1001B7E60;
  xpc_object_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = v6;
  xpc_object_t v13 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v9 = v5;
  id v11 = v9;
  sub_100123EA0(a1, v7, (uint64_t)v10);

  if (v13) {
    sub_10000B678(v13);
  }
}

void sub_10006C658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10000B678(a16);
  }

  _Unwind_Resume(a1);
}

void sub_10006C67C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  [**(id **)(v1 + 80) prepareForShutdown];
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 88);
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 88) = 0;
  if (v3) {
    sub_10000B678(v3);
  }
}

void sub_10006C6D4(void *a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    sub_10000BA54(&v6, a1);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_10006C78C;
    v5[3] = &unk_1001B5FC0;
    v5[4] = a1;
    sub_10006C588(a3, &v6, v5);
    if (v7) {
      sub_10000B678(v7);
    }
  }
}

void sub_10006C774(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    sub_10000B678(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006C78C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10000BA54(&v11, (void *)v1);
  uint64_t v4 = v11;
  uint64_t v3 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10000B678(v3);
    id v5 = (id **)(v1 + 80);
    uint64_t v6 = **(void ***)(v1 + 80);
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    id v5 = (id **)(v1 + 80);
    uint64_t v6 = **(void ***)(v1 + 80);
  }
  uint64_t v16 = 0;
  id v7 = operator new(0x20uLL);
  *id v7 = off_1001B7EA0;
  v7[1] = v1;
  _DWORD v7[2] = v4;
  v7[3] = v3;
  uint64_t v16 = v7;
  [v6 onAuthStatusUpdateCallback:v15];
  sub_10006D524(v15);
  id v8 = **v5;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  id v14 = 0;
  id v9 = operator new(0x20uLL);
  *id v9 = off_1001B7F50;
  v9[1] = v1;
  double v9[2] = v4;
  v9[3] = v3;
  id v14 = v9;
  [v8 onLocationUpdateCallback:v13];
  sub_10006DBA4(v13);
  *(unsigned char *)(v1 + 41) = [**v5 locationAllowed];
  pthread_mutex_lock(&stru_1001D66E0);
  long long v10 = xmmword_1001D6720;
  if (*((void *)&xmmword_1001D6720 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6720 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D66E0);
  if ((void)v10) {
    sub_100071880((void *)v10);
  }
  if (*((void *)&v10 + 1)) {
    sub_10000B678(*((std::__shared_weak_count **)&v10 + 1));
  }
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10006C95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_10001F4A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006C9C8(void *a1)
{
  sub_10000BA54(&v1, a1);
  operator new();
}

void sub_10006CAA0(void *a1)
{
  sub_10000BA54(&v1, a1);
  operator new();
}

void sub_10006CB78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B7D28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10006CB98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B7D28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

id *sub_10006CBEC(uint64_t a1)
{
  return sub_10006CBF8((id *)(a1 + 24));
}

id *sub_10006CBF8(id *a1)
{
  id v2 = *a1;
  *a1 = 0;

  id v3 = a1[1];
  a1[1] = 0;

  return a1;
}

void sub_10006CC44(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10006CCBC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_10006CD94);
  __cxa_rethrow();
}

void sub_10006CCE4(_Unwind_Exception *a1)
{
}

void sub_10006CCFC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10006CD34(uint64_t a1)
{
}

uint64_t sub_10006CD50(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10006CD94(uint64_t result)
{
  if (result)
  {
    sub_10006C450(result);
    operator delete();
  }
  return result;
}

void sub_10006CDD4(void *a1, void *a2)
{
  id v3 = a2;
  sub_10000BA54(&v10, a1);
  uint64_t v4 = a1[2];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10006CEB0;
  block[3] = &unk_1001B7DD0;
  uint64_t v8 = v10;
  id v9 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v5 = v3;
  id v7 = v5;
  dispatch_async(v4, block);

  if (v9) {
    sub_10000B678(v9);
  }
  if (v11) {
    sub_10000B678(v11);
  }
}

uint64_t sub_10006CEB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10006CEC0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10006CEDC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_10006CEEC(void *a1)
{
  *a1 = off_1001B7E10;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_10006CF38(void *a1)
{
  *a1 = off_1001B7E10;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10000B678(v1);
  }

  operator delete();
}

void *sub_10006CFA4@<X0>(void *a1@<X8>)
{
  return sub_100018888(a1, "WISLocation");
}

unsigned char *sub_10006CFB4@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 1;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_10006CFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10006D000(uint64_t a1, int a2, uint64_t a3)
{
}

void sub_10006D008(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10006D008(a1, *a2);
    sub_10006D008(a1, a2[1]);
    sub_10006D064(a2 + 4);
    operator delete(a2);
  }
}

void sub_10006D064(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    dispatch_group_leave(v2);
    id v3 = a1[6];
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
}

void sub_10006D0C4(uint64_t a1, NSObject **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  dispatch_group_t group = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
}

void sub_10006D120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006D144(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10006D160(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_10006D170(void *a1)
{
  *a1 = off_1001B7EA0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10006D1BC(void *a1)
{
  *a1 = off_1001B7EA0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_10006D228(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = off_1001B7EA0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10006D28C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1001B7EA0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10006D2CC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10006D2DC(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_10006D31C(void *a1, char *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    char v4 = *a2;
    id v5 = (void *)a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      id v7 = v6;
      if (a1[2])
      {
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472;
        void v8[2] = sub_10006D41C;
        uint64_t v8[3] = &unk_1001B7F10;
        v8[4] = v5;
        char v9 = v4;
        sub_10006CDD4(v5, v8);
      }
      sub_10000B678(v7);
    }
  }
}

uint64_t sub_10006D3D0(uint64_t a1, uint64_t a2)
{
  if (sub_1000233A4(a2, (uint64_t)&off_1001B7F30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10006D410()
{
  return &off_1001B7F30;
}

void sub_10006D41C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  *(unsigned char *)(v1 + 41) = v2;
  uint64_t v3 = *(NSObject **)(v1 + 32);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "loc:#I Location auth status update call back with %d", (uint8_t *)v5, 8u);
  }
  pthread_mutex_lock(&stru_1001D66E0);
  long long v4 = xmmword_1001D6720;
  if (*((void *)&xmmword_1001D6720 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6720 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D66E0);
  if ((void)v4) {
    sub_100071880((void *)v4);
  }
  if (*((void *)&v4 + 1)) {
    sub_10000B678(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_10006D518(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10001F4A8(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_10006D524(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10006D5A8(void *a1)
{
  *a1 = off_1001B7F50;
  int v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10006D5F4(void *a1)
{
  *a1 = off_1001B7F50;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_10006D660(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = off_1001B7F50;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10006D6C4(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1001B7F50;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10006D704(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10006D714(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_10006D754(void *a1, id *a2)
{
  id v3 = *a2;
  long long v4 = (std::__shared_weak_count *)a1[3];
  if (v4)
  {
    id v5 = (void *)a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      if (a1[2])
      {
        id v7 = v3;
        sub_10000BA54(&v8, v5);
        operator new();
      }
      sub_10000B678(v6);
    }
  }
}

uint64_t sub_10006D874(uint64_t a1, uint64_t a2)
{
  if (sub_1000233A4(a2, (uint64_t)&off_1001B7FC0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10006D8B4()
{
  return &off_1001B7FC0;
}

uint64_t *sub_10006D8C0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v15 = a1;
  uint64_t v16 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v4 = *(void *)(v2 + 80);
  if (v4)
  {
    id v5 = *(NSObject **)(v2 + 32);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(*(id *)(v1 + 8), "coordinate", v15, v16);
      uint64_t v13 = v12;
      [*(id *)(v1 + 8) coordinate];
      buf[0] = 134283777;
      *(void *)&buf[1] = v13;
      LOWORD(buf[3]) = 2049;
      *(void *)((char *)&buf[3] + 2) = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "loc:#D Location update call back with latitude: %{private}f, longitude: %{private}f", (uint8_t *)buf, 0x16u);
      uint64_t v4 = *(void *)(v2 + 80);
    }
    sub_10006DB38(v4, *(void **)(v1 + 8));
    *(unsigned char *)(v2 + 40) = 1;
    pthread_mutex_lock(&stru_1001D67F0);
    uint64_t v6 = (void *)xmmword_1001D6830;
    if (!(void)xmmword_1001D6830) {
      sub_100027A48();
    }
    id v7 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6830 + 1);
    if (*((void *)&xmmword_1001D6830 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6830 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D67F0);
    if (v6)
    {
      [*(id *)(v1 + 8) coordinate];
      double v9 = v8;
      [*(id *)(v1 + 8) coordinate];
      sub_1000286C0(v6, v9, v10);
    }
    if (v7) {
      sub_10000B678(v7);
    }
  }
  sub_10006DAE8(&v16);
  return sub_10000BA00((uint64_t *)&v15);
}

void sub_10006DA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_10006DAE8(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {

    operator delete();
  }
  return result;
}

void sub_10006DB38(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v7 = *(void **)(a1 + 8);
  uint64_t v6 = (id *)(a1 + 8);
  id v5 = v7;
  id v8 = v4;
  if (v7)
  {
    *uint64_t v6 = 0;

    id v4 = v8;
  }
  if (v4)
  {
    objc_storeStrong(v6, a2);
    id v4 = v8;
  }
}

void *sub_10006DBA4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10006DC28(uint64_t **a1)
{
  uint64_t v1 = **a1;
  id v3 = *(id **)(v1 + 80);
  if (v3) {
    [*v3 startLocationUpdates];
  }
  operator delete();
}

void sub_10006DCA0()
{
}

void sub_10006DCCC(uint64_t **a1)
{
  uint64_t v1 = **a1;
  id v3 = *(id **)(v1 + 80);
  if (v3) {
    [*v3 stopLocationUpdates];
  }
  operator delete();
}

void sub_10006DD44()
{
}

uint64_t sub_10006DD70()
{
  if ((byte_1001D69B8 & 1) == 0)
  {
    byte_1001D69B8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100029800, &stru_1001D6968, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10006DDAC()
{
  if ((byte_1001D6730 & 1) == 0)
  {
    byte_1001D6730 = 1;
    return __cxa_atexit((void (*)(void *))sub_10001F66C, &stru_1001D66E0, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10006DDE8()
{
  if ((byte_1001D6840 & 1) == 0)
  {
    byte_1001D6840 = 1;
    return __cxa_atexit((void (*)(void *))sub_100022F54, &stru_1001D67F0, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10006DE24()
{
}

uint64_t sub_10006DE4C(uint64_t a1, xpc_object_t *a2)
{
  *(void *)a1 = off_1001B7FE0;
  *(_OWORD *)(a1 + 8) = 0u;
  id v4 = (_DWORD *)(a1 + 8);
  id v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_dictionary
    && xpc_dictionary_get_int64(*a2, "WISMessageType") == 2)
  {
    *(_DWORD *)(a1 + 12) = xpc_dictionary_get_int64(*a2, "WISMessageMetricId");
    *(_DWORD *)(a1 + 16) = xpc_dictionary_get_int64(*a2, "WISMessageProfileId");
    _DWORD *v4 = xpc_dictionary_get_int64(*a2, "WISMessageSourceComponentId");
    *(_DWORD *)(a1 + 24) = xpc_dictionary_get_int64(*a2, "WISMessageTriggerId");
    *(_DWORD *)(a1 + 20) = xpc_dictionary_get_int64(*a2, "WISMessageTriggeringComponentId");
    *(_DWORD *)(a1 + 28) = xpc_dictionary_get_int64(*a2, "WISMessageSubmissionId");
    size_t length = 0;
    xpc_object_t data = (char *)xpc_dictionary_get_data(*a2, "WISMessageSerializedMetrics", &length);
    sub_10006E1DC(v5, data, &data[length], length);
  }
  return a1;
}

void sub_10006DF8C(_Unwind_Exception *exception_object)
{
  id v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006DFB4(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_data(v4, "WISMessageSerializedMetrics", *(const void **)(a1 + 32), *(void *)(a1 + 40) - *(void *)(a1 + 32));
  xpc_dictionary_set_int64(v4, "WISMessageType", 2);
  xpc_dictionary_set_int64(v4, "WISMessageMetricId", *(unsigned int *)(a1 + 12));
  xpc_dictionary_set_int64(v4, "WISMessageProfileId", *(unsigned int *)(a1 + 16));
  xpc_dictionary_set_int64(v4, "WISMessageTriggerId", *(unsigned int *)(a1 + 24));
  xpc_dictionary_set_int64(v4, "WISMessageSourceComponentId", *(unsigned int *)(a1 + 8));
  xpc_dictionary_set_int64(v4, "WISMessageTriggeringComponentId", *(unsigned int *)(a1 + 20));
  xpc_dictionary_set_int64(v4, "WISMessageSubmissionId", *(unsigned int *)(a1 + 28));
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v4) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

uint64_t sub_10006E0FC(uint64_t a1)
{
  return *(void *)(a1 + 12);
}

uint64_t sub_10006E104(uint64_t a1)
{
  return *(void *)(a1 + 20);
}

uint64_t sub_10006E114(uint64_t a1)
{
  return a1 + 32;
}

void *sub_10006E11C(void *a1)
{
  *a1 = off_1001B7FE0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10006E16C(void *a1)
{
  *a1 = off_1001B7FE0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  operator delete();
}

void *sub_10006E1DC(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  id v7 = result;
  unint64_t v8 = result[2];
  double v9 = (unsigned char *)*result;
  if (v8 - *result >= a4)
  {
    uint64_t v14 = (unsigned char *)result[1];
    size_t v15 = v14 - v9;
    if (v14 - v9 >= a4)
    {
      size_t v19 = a3 - __src;
      if (v19) {
        uint64_t result = memmove((void *)*result, __src, v19);
      }
      uint64_t v12 = &v9[v19];
    }
    else
    {
      uint64_t v16 = &__src[v15];
      if (v14 != v9)
      {
        uint64_t result = memmove((void *)*result, __src, v15);
        double v9 = (unsigned char *)v7[1];
      }
      uint64_t v12 = v9;
      if (v16 != a3)
      {
        uint64_t v12 = v9;
        xpc_object_t v17 = v9;
        do
        {
          char v18 = *v16++;
          *v17++ = v18;
          ++v12;
        }
        while (v16 != a3);
      }
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *id v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_10002B5E0();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = sub_10001495C(v7, v11);
    uint64_t v12 = (unsigned char *)v7[1];
    while (v6 != a3)
    {
      char v13 = *v6++;
      *v12++ = v13;
    }
  }
  v7[1] = v12;
  return result;
}

uint64_t sub_10006E310(uint64_t a1, int a2, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    unsigned int int64 = xpc_dictionary_get_int64(object, "WISMessageMetricCountsArrayMetricId");
    int v5 = xpc_dictionary_get_int64(object, "WISMessageMetricCountsArrayCount");
    p_unsigned int int64 = &int64;
    *((_DWORD *)sub_10006E8A4((uint64_t **)(a1 + 16), &int64, (uint64_t)&unk_1001793E0, &p_int64) + 8) = v5;
  }
  return 1;
}

uint64_t sub_10006E3C4(uint64_t a1, xpc_object_t *a2)
{
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = off_1001B8020;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 32) = 0;
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_dictionary)
  {
    *(_DWORD *)(a1 + 8) = xpc_dictionary_get_int64(*a2, "WISMessageComponentId");
    *(_DWORD *)(a1 + 12) = xpc_dictionary_get_int64(*a2, "WISMessageTriggerId");
    xpc_object_t value = xpc_dictionary_get_value(*a2, "WISMessageMetricCountsArray");
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 0x40000000;
    applier[2] = sub_10006E500;
    applier[3] = &unk_1001B8038;
    applier[4] = a1;
    xpc_array_apply(value, applier);
    *(void *)(a1 + 40) = xpc_dictionary_get_int64(*a2, "WISMessageLongesttime");
  }
  return a1;
}

void sub_10006E4E0(_Unwind_Exception *a1)
{
  sub_10004B7F8(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10006E500(uint64_t a1, int a2, void *a3)
{
  return 1;
}

void sub_10006E524(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    int v5 = v4;
    xpc_dictionary_set_int64(v4, "WISMessageType", 5);
    xpc_dictionary_set_int64(v5, "WISMessageComponentId", *(unsigned int *)(a1 + 8));
    xpc_dictionary_set_int64(v5, "WISMessageTriggerId", *(unsigned int *)(a1 + 12));
    xpc_dictionary_set_int64(v5, "WISMessageLongesttime", *(void *)(a1 + 40));
    xpc_object_t v6 = xpc_array_create(0, 0);
    if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
    {
      if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_array)
      {
        xpc_retain(v6);
        xpc_object_t v7 = v6;
      }
      else
      {
        xpc_object_t v7 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
    }
    xpc_release(v6);
    unint64_t v8 = *(void **)(a1 + 16);
    if (v8 != (void *)(a1 + 24))
    {
      do
      {
        xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
        if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
        {
          if (xpc_get_type(v9) == (xpc_type_t)&_xpc_type_dictionary)
          {
            xpc_retain(v9);
            xpc_object_t v10 = v9;
          }
          else
          {
            xpc_object_t v10 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
        }
        xpc_release(v9);
        xpc_dictionary_set_int64(v10, "WISMessageMetricCountsArrayMetricId", *((unsigned int *)v8 + 7));
        xpc_dictionary_set_int64(v10, "WISMessageMetricCountsArrayCount", *((int *)v8 + 8));
        xpc_array_append_value(v7, v10);
        xpc_release(v10);
        size_t v11 = (void *)v8[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            size_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (void *)v8[2];
            BOOL v13 = *v12 == (void)v8;
            unint64_t v8 = v12;
          }
          while (!v13);
        }
        unint64_t v8 = v12;
      }
      while (v12 != (void *)(a1 + 24));
    }
    xpc_dictionary_set_value(v5, "WISMessageMetricCountsArray", v7);
    *a2 = v5;
    if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary) {
      xpc_retain(v5);
    }
    else {
      *a2 = xpc_null_create();
    }
    xpc_release(v5);
    xpc_release(v7);
  }
  else
  {
    *a2 = xpc_null_create();
  }
}

void sub_10006E79C(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006E7EC(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_10006E7F4(uint64_t a1)
{
  *(void *)a1 = off_1001B8020;
  sub_10004B7F8(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_10006E83C(uint64_t a1)
{
  *(void *)a1 = off_1001B8020;
  sub_10004B7F8(a1 + 16, *(void **)(a1 + 24));

  operator delete();
}

uint64_t *sub_10006E8A4(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  xpc_object_t v7 = a1 + 1;
  xpc_object_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        xpc_object_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        xpc_object_t v6 = *v9;
        xpc_object_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      xpc_object_t v6 = v9[1];
      if (!v6)
      {
        xpc_object_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    xpc_object_t v9 = a1 + 1;
LABEL_10:
    size_t v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_10001716C(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

__n128 sub_10006E964(__n128 *a1, unsigned __int32 a2, unsigned __int32 a3, __n128 *a4)
{
  a1->n128_u64[0] = (unint64_t)off_1001B8080;
  a1->n128_u32[2] = a2;
  a1->n128_u32[3] = a3;
  __n128 result = *a4;
  a1[1] = *a4;
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  return result;
}

void *sub_10006E994(void *a1)
{
  *a1 = off_1001B8080;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_10006E9E0(void *a1)
{
  *a1 = off_1001B8080;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_10000B678(v1);
  }

  operator delete();
}

void sub_10006EA4C(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v16 = xpc_int64_create(4);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  uint64_t v14 = a2;
  size_t v15 = "WISMessageType";
  sub_100014D08((uint64_t)&v14, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_object_t v12 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  uint64_t v14 = a2;
  size_t v15 = "WISMessageComponentId";
  sub_100014D08((uint64_t)&v14, &v12, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  xpc_object_t v12 = 0;
  xpc_object_t v10 = xpc_int64_create(*(unsigned int *)(a1 + 8));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  uint64_t v14 = a2;
  size_t v15 = "WISMessageDeviceConfigurationId";
  sub_100014D08((uint64_t)&v14, &v10, &v11);
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_release(v10);
  xpc_object_t v10 = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    xpc_object_t v8 = xpc_data_create(*(const void **)v7, *(void *)(v7 + 8) - *(void *)v7);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
    uint64_t v14 = a2;
    size_t v15 = "WISMessageComponentConfigurationBuffer";
    sub_100014D08((uint64_t)&v14, &v8, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_release(v8);
  }
}

void sub_10006EC78(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10006ECE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_10006ED90((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006ED0C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10006ED44(uint64_t a1)
{
}

uint64_t sub_10006ED4C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10006ED90(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_10006EDEC(void *a1@<X8>)
{
  sub_10006F56C(a1);
  pthread_mutex_lock(&stru_1001D6968);
  if (!(void)xmmword_1001D69A8) {
    sub_10012402C();
  }
  if (*((void *)&xmmword_1001D69A8 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D69A8 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6968);
  uint64_t v2 = a1[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_10006EF38(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&stru_1001D6968);
  id v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10000B678(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10006EFA4(uint64_t a1)
{
  uint64_t v2 = dispatch_queue_create("PowerMonitor", 0);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v2;
  if (v2)
  {
    id v3 = v2;
    dispatch_retain(v2);
    *(void *)(a1 + 24) = 0;
    dispatch_release(v3);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_10006F00C(uint64_t a1)
{
  IODeregisterForSystemPower((io_object_t *)(a1 + 32));
  io_connect_t v2 = *(_DWORD *)(a1 + 48);
  if (v2)
  {
    IOServiceClose(v2);
    *(_DWORD *)(a1 + 48) = 0;
  }
  id v3 = *(IONotificationPort **)(a1 + 40);
  if (v3)
  {
    IONotificationPortDestroy(v3);
    *(void *)(a1 + 40) = 0;
  }
}

void sub_10006F054(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10000BA54(&v7, a1);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  double v6[2] = sub_10006F184;
  void v6[3] = &unk_1001B8128;
  void v6[4] = a1;
  xpc_object_t v5 = (NSObject **)(v7 + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  double v9[2] = sub_10006F784;
  v9[3] = &unk_1001B8218;
  void v9[5] = v7;
  uint64_t v10 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void v9[4] = v6;
  sub_100123EA0(a3, v5, (uint64_t)v9);
  if (v10) {
    sub_10000B678(v10);
  }
  if (v8) {
    sub_10000B678(v8);
  }
}

void sub_10006F160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_10000B678(a22);
  }
  if (a15) {
    sub_10000B678(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006F184(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  io_connect_t v2 = *(NSObject **)(qword_1001D8080 + 72);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "power:#I PowerMonitor shutdown.", v3, 2u);
  }
  sub_10006F00C(v1);
}

void sub_10006F1FC(void *a1, int a2, uint64_t a3)
{
  if (a2 == 2)
  {
    sub_10000BA54(&v7, a1);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    double v6[2] = sub_10006F334;
    void v6[3] = &unk_1001B8148;
    void v6[4] = a1;
    xpc_object_t v5 = (NSObject **)(v7 + 16);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1174405120;
    double v9[2] = sub_10006F784;
    v9[3] = &unk_1001B8218;
    void v9[5] = v7;
    uint64_t v10 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    void v9[4] = v6;
    sub_100123EA0(a3, v5, (uint64_t)v9);
    if (v10) {
      sub_10000B678(v10);
    }
    if (v8) {
      sub_10000B678(v8);
    }
  }
}

void sub_10006F310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_10000B678(a22);
  }
  if (a15) {
    sub_10000B678(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006F334(uint64_t a1)
{
}

void sub_10006F33C(uint64_t a1)
{
  *(_DWORD *)(a1 + 48) = IORegisterForSystemPower((void *)a1, (IONotificationPortRef *)(a1 + 40), (IOServiceInterestCallback)sub_10006F3A4, (io_object_t *)(a1 + 32));
  io_connect_t v2 = *(IONotificationPort **)(a1 + 40);
  if (v2)
  {
    id v3 = *(NSObject **)(a1 + 16);
    IONotificationPortSetDispatchQueue(v2, v3);
  }
}

void sub_10006F3A4(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  pthread_mutex_lock(&stru_1001D6CD8);
  long long v6 = xmmword_1001D6D18;
  if (*((void *)&xmmword_1001D6D18 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6D18 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6CD8);
  if ((void)v6)
  {
    if (a3 == -536870288)
    {
LABEL_7:
      IOAllowPowerChange(*(_DWORD *)(v6 + 48), a4);
      goto LABEL_18;
    }
    if (a3 != -536870144)
    {
      if (a3 != -536870272) {
        goto LABEL_18;
      }
      goto LABEL_7;
    }
    uint64_t v7 = *(NSObject **)(qword_1001D8080 + 72);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "power:#I Change is has powered on.", buf, 2u);
    }
    pthread_mutex_lock(&stru_1001D6A18);
    uint64_t v9 = off_1001D6A58;
    xpc_object_t v8 = (std::__shared_weak_count *)*(&off_1001D6A58 + 1);
    if (*(&off_1001D6A58 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1001D6A58 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D6A18);
    if (v9)
    {
      uint64_t v10 = *(NSObject **)(qword_1001D8080 + 72);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)xpc_object_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "power:#I Sending wake from low power trigger.", v11, 2u);
      }
      sub_1000512B4(v9, (ctu *)0x70004);
    }
    if (v8) {
      sub_10000B678(v8);
    }
  }
LABEL_18:
  if (*((void *)&v6 + 1)) {
    sub_10000B678(*((std::__shared_weak_count **)&v6 + 1));
  }
}

void sub_10006F534(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_10000B678(v2);
  }
  if (v1) {
    sub_10000B678(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006F56C(void *a1@<X8>)
{
  io_connect_t v2 = operator new(0x50uLL);
  v2[1] = 0;
  v2[2] = 0;
  *io_connect_t v2 = off_1001B8178;
  sub_10006EFA4((uint64_t)(v2 + 3));
  *a1 = v2 + 3;
  a1[1] = v2;

  sub_10002A1E4((uint64_t)a1, v2 + 3, (uint64_t)(v2 + 3));
}

void sub_10006F5EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B8178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10006F60C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B8178;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_10006F660(uint64_t a1)
{
  return sub_100029804((void *)(a1 + 24));
}

void *sub_10006F66C(void *a1)
{
  *a1 = off_1001B81C8;
  io_connect_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_10006F6B8(void *a1)
{
  *a1 = off_1001B81C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10000B678(v1);
  }

  operator delete();
}

void *sub_10006F724@<X0>(void *a1@<X8>)
{
  return sub_100018888(a1, "PowerMonitor");
}

unsigned char *sub_10006F734@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  io_connect_t v2 = operator new(1uLL);
  *a1 = v2;
  *io_connect_t v2 = 0;
  __n128 result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_10006F770(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10006F77C(uint64_t a1, int a2, uint64_t a3)
{
}

void sub_10006F784(uint64_t a1, NSObject **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  dispatch_group_t group = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
}

void sub_10006F7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006F804(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10006F820(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

uint64_t sub_10006F830()
{
  if ((byte_1001D69B8 & 1) == 0)
  {
    byte_1001D69B8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100029800, &stru_1001D6968, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10006F86C()
{
  if ((byte_1001D6D28 & 1) == 0)
  {
    byte_1001D6D28 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E80, &stru_1001D6CD8, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10006F8A8()
{
  if ((byte_1001D6A68 & 1) == 0)
  {
    byte_1001D6A68 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E60, &stru_1001D6A18, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10006F8E4()
{
  return 1;
}

BOOL sub_10006F8EC()
{
  uint64_t v0 = (BOOL *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  char v6 = 0;
  CFTypeID v2 = CFGetTypeID(v0);
  BOOL v4 = 0;
  if (v2 == CFBooleanGetTypeID())
  {
    ctu::cf::assign((ctu::cf *)&v6, v1, v3);
    BOOL v4 = v6 != 0;
  }
  CFRelease(v1);
  return v4;
}

BOOL sub_10006F978()
{
  uint64_t v0 = (const void *)MGCopyAnswer();
  CFTypeRef cf1 = v0;
  if (v0) {
    uint64_t v1 = sub_100057DD8;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1)
  {
    if (CFEqual(v0, @"Internal")) {
      BOOL v2 = 1;
    }
    else {
      BOOL v2 = CFEqual(cf1, @"Carrier") != 0;
    }
  }
  else
  {
    BOOL v2 = 0;
  }
  sub_10001570C(&cf1);
  return v2;
}

void sub_10006FA10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001570C((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_10006FA24()
{
  uint64_t v0 = (const void *)MGCopyAnswer();
  BOOL v4 = v0;
  if (v0) {
    uint64_t v1 = sub_100057DD8;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    BOOL v2 = CFEqual(v0, @"Internal") != 0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_10001570C(&v4);
  return v2;
}

void sub_10006FAA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001570C((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006FAB4(char a1)
{
  if ((a1 & 0xFE) == 2) {
    return 0x40000000;
  }
  else {
    return 0x10000000;
  }
}

uint64_t sub_10006FAE8()
{
  return 0;
}

uint64_t sub_10006FAF0()
{
  memset(&v2, 0, sizeof(v2));
  time_t v1 = time(0);
  localtime_r(&v1, &v2);
  return v2.tm_gmtoff;
}

void sub_10006FB38(uint64_t a1@<X0>, void *a2@<X8>)
{
  CFNotificationCenterRef DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  if (DarwinNotifyCenter)
  {
    xpc_object_t v5 = DarwinNotifyCenter;
    char v6 = (char *)operator new(0x38uLL);
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)char v6 = off_1001B8258;
    *(_OWORD *)(v6 + 24) = 0u;
    uint64_t v7 = v6 + 24;
    *(_OWORD *)(v6 + 40) = 0u;
    sub_10006FDDC((void *)v6 + 3, a1);
    CFNotificationCenterAddObserver(v5, v7, (CFNotificationCallback)sub_10006FC40, @"logging tasks have changed", v7, CFNotificationSuspensionBehaviorDeliverImmediately);
    CFNotificationCenterAddObserver(v5, v7, (CFNotificationCallback)sub_10006FC40, @"com.apple.OTACrashCopier.SubmissionPreferenceChanged", v7, CFNotificationSuspensionBehaviorDeliverImmediately);
    *a2 = v6 + 24;
    a2[1] = v6;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_10006FC2C(_Unwind_Exception *a1)
{
  sub_10000B678(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006FC40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (!v2) {
    sub_100029F0C();
  }
  CFBooleanRef v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);

  return v3();
}

void sub_10006FC90(const void **a1)
{
  CFNotificationCenterRef DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  if (DarwinNotifyCenter)
  {
    CFBooleanRef v3 = *a1;
    CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, v3);
  }
}

void sub_10006FCD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B8258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10006FCF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B8258;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_10006FD4C(uint64_t a1)
{
  return sub_10006FD58((void *)(a1 + 24));
}

void *sub_10006FD58(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10006FDDC(void *a1, uint64_t a2)
{
  sub_10006FE60(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_10006FE60(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char *sub_10006FEE8@<X0>(const void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = (char *)sub_100015244(a2, a1);
  if ((char *)(a2 + 8) == result)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  else if (result[79] < 0)
  {
    uint64_t v7 = (void *)*((void *)result + 7);
    unint64_t v8 = *((void *)result + 8);
    return (char *)sub_1000173FC((unsigned char *)a3, v7, v8);
  }
  else
  {
    long long v6 = *(_OWORD *)(result + 56);
    *(void *)(a3 + 16) = *((void *)result + 9);
    *(_OWORD *)a3 = v6;
  }
  return result;
}

void sub_10006FF6C(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1000173FC(__p, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    std::string::size_type v26 = a2->__r_.__value_.__r.__words[2];
  }
  sub_1000703A4(v24, (const void ***)(a1 + 96));
  sub_10006FEE8((const void **)__p, (uint64_t)v24, (uint64_t)&v27);
  sub_100013D8C((uint64_t)v24, (void *)v24[1]);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = HIBYTE(v28);
  if (v28 < 0) {
    uint64_t v6 = *((void *)&v27 + 1);
  }
  if (v6)
  {
    *(_OWORD *)a3 = v27;
    *(void *)(a3 + 16) = v28;
  }
  else
  {
    sub_100018888(v22, "kCellular");
    sub_100018888(v20, "cellular");
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v7 = (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
      unint64_t size = a2->__r_.__value_.__l.__size_;
    }
    else
    {
      uint64_t v7 = (unsigned __int8 *)a2;
      unint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    unint64_t v9 = v23;
    uint64_t v10 = (void **)v22[0];
    if ((v23 & 0x80u) != 0) {
      unint64_t v9 = (unint64_t)v22[1];
    }
    else {
      uint64_t v10 = v22;
    }
    if (size >= v9) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = size;
    }
    xpc_object_t v12 = &v7[v11];
    if (v9 && v11)
    {
      BOOL v13 = v7;
      uint64_t v14 = &v7[v11];
      do
      {
        if (*v13 == *(unsigned __int8 *)v10)
        {
          uint64_t v15 = 1;
          while (v9 != v15)
          {
            if (&v13[v15] == v12) {
              goto LABEL_32;
            }
            int v16 = v13[v15];
            int v17 = *((unsigned __int8 *)v10 + v15++);
            if (v16 != v17) {
              goto LABEL_23;
            }
          }
          uint64_t v14 = v13;
        }
LABEL_23:
        ++v13;
      }
      while (v13 != v12);
    }
    else
    {
      uint64_t v14 = &v7[v11];
    }
LABEL_32:
    BOOL v18 = v14 != v12 || v9 == 0;
    if (v18 && v14 - v7 != -1)
    {
      uint64_t v19 = (uint64_t)a2;
      if ((*((unsigned char *)&a2->__r_.__value_.__s + 23) & 0x80) != 0) {
        uint64_t v19 = a2->__r_.__value_.__r.__words[0];
      }
      sub_1000701F4(a2, v19, v19 + v9, (const std::string::value_type *)v20);
    }
    *(_OWORD *)a3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    *(void *)(a3 + 16) = *((void *)&a2->__r_.__value_.__l + 2);
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if ((char)v23 < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)v27);
    }
  }
}

void sub_10007017C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v30 - 33) < 0) {
    operator delete(*(void **)(v30 - 56));
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1000701F4(std::string *a1, uint64_t a2, uint64_t a3, const std::string::value_type *a4)
{
  uint64_t v4 = a1;
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v4 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v5 = a2 - (void)v4;
  std::string::size_type v6 = a3 - a2;
  std::string::size_type v7 = *((void *)a4 + 1);
  if (a4[23] >= 0)
  {
    std::string::size_type v8 = *((unsigned __int8 *)a4 + 23);
  }
  else
  {
    a4 = *(const std::string::value_type **)a4;
    std::string::size_type v8 = v7;
  }
  return std::string::replace(a1, v5, v6, a4, v8);
}

uint64_t *sub_10007022C(uint64_t **a1, std::string *a2, uint64_t a3)
{
  std::string::size_type v6 = (uint64_t **)sub_10001893C((uint64_t)a1, &v9, (const void **)&a2->__r_.__value_.__l.__data_);
  if (*v6) {
    return *v6;
  }
  std::string::size_type v7 = v6;
  std::string::operator=((std::string *)(a3 + 32), a2);
  sub_10001716C(a1, v9, v7, (uint64_t *)a3);
  return (uint64_t *)a3;
}

uint64_t *sub_1000702B0(uint64_t **a1, std::string *a2, uint64_t a3)
{
  std::string::size_type v6 = (uint64_t **)sub_10001893C((uint64_t)a1, &v9, (const void **)&a2->__r_.__value_.__l.__data_);
  if (*v6) {
    return *v6;
  }
  std::string::size_type v7 = v6;
  std::string::operator=((std::string *)(a3 + 32), a2);
  std::string::operator=((std::string *)(a3 + 56), a2 + 1);
  sub_10001716C(a1, v9, v7, (uint64_t *)a3);
  return (uint64_t *)a3;
}

uint64_t sub_10007034C(uint64_t a1)
{
  sub_100013D8C(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    CFBooleanRef v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        CFBooleanRef v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_100013D8C(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_1000703A4(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1000703FC(a1, *a2, a2 + 1);
  return a1;
}

void sub_1000703E4(_Unwind_Exception *a1)
{
  sub_100013D8C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1000703FC(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    std::string::size_type v5 = (uint64_t **)result;
    std::string::size_type v6 = result + 1;
    do
    {
      uint64_t result = sub_100070488(v5, v6, v4 + 4, (long long *)v4 + 2);
      std::string::size_type v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          std::string::size_type v8 = (const void ***)v7;
          std::string::size_type v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          std::string::size_type v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100070488(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  std::string::size_type v6 = sub_100016E38(a1, a2, &v12, &v11, a3);
  std::string::size_type v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    std::string::size_type v8 = (uint64_t **)v6;
    sub_100018C38((uint64_t)a1, a4, (uint64_t)v10);
    sub_10001716C(a1, (uint64_t)v12, v8, v10[0]);
    std::string::size_type v7 = v10[0];
    v10[0] = 0;
    sub_100018D3C((uint64_t)v10, 0);
  }
  return v7;
}

void sub_1000705B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000705C8()
{
}

void sub_100070848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  pthread_mutex_unlock(&stru_1001D6968);
  if (a14) {
    sub_10000B678(a14);
  }
  int v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    sub_10000B678(v16);
  }
  _Unwind_Resume(a1);
}

void sub_1000708E4(uint64_t a1)
{
}

void sub_1000708EC(uint64_t a1)
{
  int RadioVendor = TelephonyRadiosGetRadioVendor();
  if (RadioVendor)
  {
    int v3 = RadioVendor;
    sub_100047994();
    sub_1000EF8EC();
    sub_10002732C();
    sub_1000B9108();
    if (v3 == 3)
    {
      sub_100070E34(&v6);
      long long v4 = v6;
      long long v6 = 0uLL;
      std::string::size_type v5 = *(std::__shared_weak_count **)(a1 + 48);
      *(_OWORD *)(a1 + 40) = v4;
      if (v5)
      {
        sub_10000B678(v5);
        if (*((void *)&v6 + 1)) {
          sub_10000B678(*((std::__shared_weak_count **)&v6 + 1));
        }
      }
    }
  }
}

uint64_t sub_100070968(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100070984(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_100070994(void *a1, const char *a2, dispatch_qos_class_t a3, const char *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.wis.wirelessinsightsd", a4);
  return a1;
}

void sub_1000709F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

void *sub_100070A1C(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_10000B678(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 4));

  return sub_100029804(a1);
}

void sub_100070A64(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10000BA54(&v5, a1);
  long long v4 = (NSObject **)(v5 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1174405120;
  _DWORD v7[2] = sub_100070F5C;
  v7[3] = &unk_1001B8450;
  void v7[5] = v5;
  std::string::size_type v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void v7[4] = &stru_1001B82E8;
  sub_100123D98(a3, v4, (uint64_t)v7);
  if (v8) {
    sub_10000B678(v8);
  }
  if (v6) {
    sub_10000B678(v6);
  }
}

void sub_100070B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_10000B678(a18);
  }
  if (a11) {
    sub_10000B678(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100070B54(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100070BCC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_100070CA4);
  __cxa_rethrow();
}

void sub_100070BF4(_Unwind_Exception *a1)
{
}

void sub_100070C0C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100070C44(uint64_t a1)
{
}

uint64_t sub_100070C60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_100070CA4(void *result)
{
  if (result)
  {
    sub_100070A1C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100070CE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100070CF4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100070D10(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_100070D20(void *a1)
{
  *a1 = off_1001B83B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_100070D6C(void *a1)
{
  *a1 = off_1001B83B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10000B678(v1);
  }

  operator delete();
}

void *sub_100070DD8@<X0>(void *a1@<X8>)
{
  return sub_100018888(a1, "WISMetrics");
}

unsigned char *sub_100070DE8@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 0;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_100070E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *sub_100070E34@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x20uLL);
  uint64_t result = sub_100070E80(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100070E6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100070E80(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B8408;
  sub_1000F1898(a1 + 3);
  return a1;
}

void sub_100070EC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100070EDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B8408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100070EFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B8408;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

id *sub_100070F50(uint64_t a1)
{
  return sub_1000F189C((id *)(a1 + 24));
}

uint64_t sub_100070F5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100070F6C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100070F88(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

uint64_t sub_100070F98()
{
  if ((byte_1001D69B8 & 1) == 0)
  {
    byte_1001D69B8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100029800, &stru_1001D6968, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100070FD4()
{
}

void sub_100071240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  pthread_mutex_unlock(&stru_1001D6968);
  if (a14) {
    sub_10000B678(a14);
  }
  int v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    sub_10000B678(v16);
  }
  _Unwind_Resume(a1);
}

void sub_1000712DC(uint64_t a1)
{
}

void sub_1000712E4(uint64_t a1)
{
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v2 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  int v3 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  *(_DWORD *)(a1 + 40) = sub_1000A446C(v2);
  if (v3) {
    sub_10000B678(v3);
  }
  sCreateWISMetadataLoaderForXpcConversion();
  long long v4 = v10;
  long long v10 = 0uLL;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v4;
  if (v5)
  {
    sub_10000B678(v5);
    if (*((void *)&v10 + 1)) {
      sub_10000B678(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  *(unsigned char *)(a1 + 73) = TelephonyRadiosGetRadio() != 7;
  BOOL v6 = sub_10007168C();
  *(unsigned char *)(a1 + 72) = v6;
  std::string::size_type v7 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = *(_DWORD *)(a1 + 40);
    int v9 = *(unsigned __int8 *)(a1 + 73);
    LODWORD(v10) = 67109632;
    DWORD1(v10) = v8;
    WORD4(v10) = 1024;
    *(_DWORD *)((char *)&v10 + 10) = v9;
    HIWORD(v10) = 1024;
    BOOL v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "conv:#I ConversionController init: BlockMask = %d, shimAPEventsToCA = %{BOOL}d, shimBBEventsToCA = %{BOOL}d", (uint8_t *)&v10, 0x14u);
  }
}

void sub_10007147C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000714C4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000714E0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_10000B678(v1);
  }
}

void sub_1000714F0(void *a1)
{
  uint64_t v1 = sub_1000715A4(a1, "ConversionController", QOS_CLASS_UTILITY, "conv");
  *((_DWORD *)v1 + 10) = 0;
  *((unsigned char *)v1 + 44) = 0;
  operator new();
}

void sub_100071564()
{
}

void *sub_1000715A4(void *a1, const char *a2, dispatch_qos_class_t a3, const char *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.wis.wirelessinsightsd", a4);
  return a1;
}

void sub_100071604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

void *sub_10007162C(uint64_t a1)
{
  long long v4 = (void **)(a1 + 80);
  sub_100060BBC(&v4);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_10000B678(v2);
  }
  sub_100071EE8((uint64_t **)(a1 + 48), 0);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 32));
  return sub_100029804((void *)a1);
}

BOOL sub_10007168C()
{
  uint64_t v10 = 0x700000000;
  sub_1000720F4((uint64_t)v8, (int *)&v10, 2);
  int Radio = TelephonyRadiosGetRadio();
  if (!v9[0]) {
    goto LABEL_11;
  }
  uint64_t v1 = v9;
  uint64_t v2 = v9[0];
  do
  {
    int v3 = v2;
    long long v4 = v1;
    int v5 = *((_DWORD *)v2 + 7);
    if (v5 >= Radio) {
      uint64_t v1 = (void **)v2;
    }
    else {
      ++v2;
    }
    uint64_t v2 = (void *)*v2;
  }
  while (v2);
  if (v1 == v9) {
    goto LABEL_11;
  }
  if (v5 < Radio) {
    int v3 = v4;
  }
  if (Radio < *((_DWORD *)v3 + 7)) {
LABEL_11:
  }
    uint64_t v1 = v9;
  BOOL v6 = v1 == v9;
  sub_10004B7F8((uint64_t)v8, v9[0]);
  return v6;
}

void sub_100071770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_100071790(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10000BA54(&v5, a1);
  long long v4 = (NSObject **)(v5 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1174405120;
  _DWORD v7[2] = sub_100071F38;
  v7[3] = &unk_1001B8678;
  void v7[5] = v5;
  int v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void v7[4] = &stru_1001B84D0;
  sub_100123D98(a3, v4, (uint64_t)v7);
  if (v8) {
    sub_10000B678(v8);
  }
  if (v6) {
    sub_10000B678(v6);
  }
}

void sub_100071858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_10000B678(a18);
  }
  if (a11) {
    sub_10000B678(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100071880(void *a1)
{
  sub_10000BA54(&v1, a1);
  operator new();
}

xpc_object_t sub_100071960(uint64_t a1)
{
  xpc_object_t v1 = *(xpc_object_t *)(a1 + 32);
  if (v1) {
    xpc_retain(*(xpc_object_t *)(a1 + 32));
  }
  else {
    xpc_object_t v1 = xpc_null_create();
  }
  xpc_object_t v2 = xpc_null_create();
  xpc_release(v2);
  return v1;
}

void sub_1000719A8(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1000719C4(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 32) = result;
  return result;
}

void sub_100071A04(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
}

void sub_100071A34(void *a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  sub_10000BA54(&v2, a1);
  operator new();
}

uint64_t sub_100071B20(uint64_t a1)
{
  int v3 = *(long long **)(a1 + 80);
  uint64_t v2 = *(long long **)(a1 + 88);
  uint64_t v1 = a1 + 80;
  if (v3 == v2)
  {
    uint64_t v2 = *(long long **)(a1 + 80);
  }
  else
  {
    uint64_t v5 = v3 + 1;
    while (1)
    {
      uint64_t v6 = *((void *)v5 - 1);
      if (!v6 || *(void *)(v6 + 8) == -1) {
        break;
      }
      if (v5++ == v2)
      {
        int v3 = *(long long **)(a1 + 88);
        goto LABEL_18;
      }
    }
    int v3 = v5 - 1;
    if (v5 - 1 != v2 && v5 != v2)
    {
      do
      {
        uint64_t v8 = *((void *)v5 + 1);
        if (v8 && *(void *)(v8 + 8) != -1)
        {
          uint64_t v9 = *(void *)v5;
          *(void *)uint64_t v5 = 0;
          *((void *)v5 + 1) = 0;
          uint64_t v10 = (std::__shared_weak_count *)*((void *)v3 + 1);
          *(void *)int v3 = v9;
          *((void *)v3 + 1) = v8;
          if (v10) {
            std::__shared_weak_count::__release_weak(v10);
          }
          ++v3;
        }
        ++v5;
      }
      while (v5 != v2);
      uint64_t v2 = *(long long **)(a1 + 88);
    }
  }
LABEL_18:

  return sub_100003CCC(v1, (uint64_t)v3, v2);
}

void sub_100071C08(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100071C80(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_100071D58);
  __cxa_rethrow();
}

void sub_100071CA8(_Unwind_Exception *a1)
{
}

void sub_100071CC0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100071CF8(uint64_t a1)
{
}

uint64_t sub_100071D14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100071D58(uint64_t result)
{
  if (result)
  {
    sub_10007162C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100071D98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100071DA8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100071DC4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_100071DD4(void *a1)
{
  *a1 = off_1001B8628;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_100071E20(void *a1)
{
  *a1 = off_1001B8628;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10000B678(v1);
  }

  operator delete();
}

void *sub_100071E8C@<X0>(void *a1@<X8>)
{
  return sub_100018888(a1, "ConversionController");
}

unsigned char *sub_100071E9C@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 0;
  xpc_object_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_100071ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *sub_100071EE8(uint64_t **a1, uint64_t *a2)
{
  xpc_object_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10005AD28(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100071F38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100071F48(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100071F64(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void sub_100071F74(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 32;
      sub_100013380(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_100071FC8(uint64_t **a1)
{
  uint64_t v5 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = *(NSObject **)(v2 + 32);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v4 = *((unsigned __int8 *)v1 + 8);
    *(_DWORD *)std::string buf = 67109120;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "conv:#I Setting location allowed to %{BOOL}d ", buf, 8u);
  }
  *(unsigned char *)(v2 + 44) = *((unsigned char *)v1 + 8);
  operator delete();
}

void sub_1000720A0(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100013380(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

uint64_t sub_1000720F4(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      sub_100072174((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_10007215C(_Unwind_Exception *a1)
{
  sub_10004B7F8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100072174(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t v6 = sub_1000721FC(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_10001716C(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1000721FC(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        BOOL v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    xpc_object_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      xpc_object_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          char v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      char v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_1000723A4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  if (*(void *)(v1 + 8)) {
    sub_100072468((uint64_t *)(*(void *)v1 + 80), (long long *)(v1 + 8));
  }
  sub_100072414(&v4);
  return sub_10000BA00((uint64_t *)&v3);
}

void sub_1000723F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100072414(uint64_t *result)
{
  uint64_t v1 = *result;
  *xpc_object_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      sub_10000B678(v2);
    }
    operator delete();
  }
  return result;
}

void *sub_100072468(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  int v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_10002B5E0();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    BOOL v14 = (char *)sub_10001E498((uint64_t)v4, v13);
    int v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 16), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    sub_100072588(a1, v19);
    uint64_t v9 = (void *)a1[1];
    sub_100061150(v19);
  }
  else
  {
    *int v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_100072574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100061150((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100072588(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100072600((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100072600(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100072694((uint64_t)v12);
  return v10;
}

uint64_t sub_100072694(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10006110C(a1);
  }
  return a1;
}

uint64_t sub_1000726CC()
{
  if ((byte_1001D69B8 & 1) == 0)
  {
    byte_1001D69B8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100029800, &stru_1001D6968, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100072708()
{
  if ((byte_1001D6A10 & 1) == 0)
  {
    byte_1001D6A10 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E5C, &stru_1001D69C0, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100072744()
{
  if ((byte_1001D6C78 & 1) == 0)
  {
    byte_1001D6C78 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E78, &stru_1001D6C28, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1000728E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100072ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100072B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100072C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100072DA8(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1000730D4(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_100073330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000734C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100073588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100073598(id a1, NSUUID *a2, FMOOSContextState *a3, BOOL *a4)
{
  uint64_t v4 = a3;
  [(FMOOSContextState *)v4 setOosAreaEntry:0];
  [(FMOOSContextState *)v4 setClientPrediction:0];
  [(FMOOSContextState *)v4 setPreviousCrowdsourcedOOSInsights:0];
  [(FMOOSContextState *)v4 setPredictionSuppressionReason:0];
}

void sub_100073604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000739E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100073A3C(id *a1, uint64_t *a2)
{
  uint64_t v4 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSModel]:#I Crowdsourced OOS learnings: On queue", buf, 2u);
  }
  if (*a2)
  {
    sub_10009D728(*a2, (uint64_t)buf);
    uint64_t v5 = *(unsigned int *)buf;
    uint64_t v6 = v80;
    uint64_t v7 = v83;
    int v8 = v84;
    long long v9 = *(NSObject **)(qword_1001D8080 + 136);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v85[0] = 67109888;
      v85[1] = v5;
      LOWORD(v85[2]) = 1024;
      *(_DWORD *)((char *)&v85[2] + 2) = v6;
      HIWORD(v85[3]) = 1024;
      v85[4] = v7;
      LOWORD(v85[5]) = 1024;
      *(_DWORD *)((char *)&v85[5] + 2) = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSModel]:#I Crowdsourced OOS learnings: Recovery Predictions MCC: %d, MNC: %d, RAT: %u, maxCount = %d", (uint8_t *)v85, 0x1Au);
    }
    if ((unsigned __int16)sub_10009DC4C((unsigned int *)*a2) <= 0xFFu)
    {
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 128), OS_LOG_TYPE_ERROR)) {
        sub_100145814();
      }
      return;
    }
    unsigned int v78 = sub_10009DC4C((unsigned int *)*a2);
    uint64_t v10 = *(NSObject **)(qword_1001D8080 + 136);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v85[0] = 67109120;
      v85[1] = v78;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSModel]:#I Crowdsourced OOS learnings OOSRatePerTile: %d", (uint8_t *)v85, 8u);
    }
    unint64_t v11 = sub_10009E0C0((unsigned int *)*a2);
    uint64_t v12 = +[FMConfiguration sharedInstance];
    BOOL v13 = v11 < (unint64_t)[v12 CellCoverageTileMinNumberOfObservations];

    if (v13)
    {
      long long v14 = *(NSObject **)(qword_1001D8080 + 128);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        long long v15 = +[FMConfiguration sharedInstance];
        id v16 = [v15 CellCoverageTileMinNumberOfObservations];
        v85[0] = 134218240;
        *(void *)&v85[1] = v11;
        LOWORD(v85[3]) = 2048;
        *(void *)((char *)&v85[3] + 2) = v16;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "FederatedMobility[FMOOSModel]:Crowdsourced OOS learnings: total number of observations: %llu <  Min number of observations required %lu", (uint8_t *)v85, 0x16u);
      }
      return;
    }
    long long v17 = [a1[4] subscriptionID];
    id v73 = [v17 unsignedIntegerValue];

    if ((unint64_t)v73 >= 2)
    {
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR)) {
        sub_100145848();
      }
      return;
    }
    int v18 = [a1[4] previousCrowdsourcedOOSInsights];
    if (!v18) {
      goto LABEL_48;
    }
    uint64_t v19 = [a1[4] previousCrowdsourcedOOSInsights];
    if (([v19 isSent] & 1) == 0)
    {

      goto LABEL_48;
    }
    uint64_t v20 = [a1[4] previousCrowdsourcedOOSInsights];
    if (![v20 maxCount])
    {

      goto LABEL_48;
    }
    char v21 = [a1[4] previousCrowdsourcedOOSInsights];
    int v22 = [v21 lastOosRate];
    BOOL v76 = v22 == 0;

    if (v76)
    {
LABEL_48:
      id v75 = +[NSNumber numberWithUnsignedInt:v78];
      uint64_t v50 = [a1[4] previousCrowdsourcedOOSInsights];
      uint64_t v74 = v75;
      id v51 = v75;
      if (v50)
      {
        char v52 = [a1[4] previousCrowdsourcedOOSInsights];
        unint64_t v53 = [v52 minOosRate];
        BOOL v54 = [v53 compare:v75] == (id)-1;

        id v51 = v75;
        uint64_t v74 = v75;
        if (v54)
        {
          uint64_t v55 = [a1[4] previousCrowdsourcedOOSInsights];
          uint64_t v74 = [v55 minOosRate];

          id v51 = v75;
        }
      }
      char v56 = v51;
      unsigned int v57 = [a1[4] previousCrowdsourcedOOSInsights];
      unint64_t v77 = v56;
      if (v57)
      {
        uint64_t v58 = [a1[4] previousCrowdsourcedOOSInsights];
        unint64_t v59 = [v58 maxOosRate];
        BOOL v60 = [v59 compare:v75] == (id)1;

        unint64_t v77 = v75;
        if (v60)
        {
          unint64_t v61 = [a1[4] previousCrowdsourcedOOSInsights];
          unint64_t v77 = [v61 maxOosRate];
        }
      }
      unint64_t v62 = [FMOOSClientCrowdsourcedPrediction alloc];
      [a1[5] latitude];
      double v64 = v63;
      [a1[5] longitude];
      BYTE4(v72) = 0;
      LODWORD(v72) = v8;
      id v66 = -[FMOOSClientCrowdsourcedPrediction initLastOosRate:minOosRate:maxOosRate:mcc:mnc:rat:maxCount:isSent:latitude:longitude:band:arfcn:](v62, "initLastOosRate:minOosRate:maxOosRate:mcc:mnc:rat:maxCount:isSent:latitude:longitude:band:arfcn:", v75, v74, v77, v5, v6, v7, v64, v65, v72, v81, v82);
      [a1[4] setPreviousCrowdsourcedOOSInsights:v66];

      unsigned int v67 = [a1[6] isEqualToString:@"OutOfService"];
      if (v67)
      {
        unsigned int v57 = +[FMConfiguration sharedInstance];
        [v57 sendCrowdsourcedPredictionLikelihood];
        if (+[FMUtil randomlyFalseWithLikelihood:v68])
        {

LABEL_59:
          uint64_t v71 = *(NSObject **)(qword_1001D8080 + 136);
          if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
          {
            LOWORD(v85[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSModel]:#I Crowdsourced OOS learnings: Not sending Crowdsourced prediction due to randomized suppression", (uint8_t *)v85, 2u);
          }
          objc_msgSend(a1[4], "setPredictionSuppressionReason:", objc_msgSend(a1[4], "predictionSuppressionReason") | 0x20000);

          return;
        }
      }
      id v69 = [a1[4] predictionSuppressionReason];
      if (v67)
      {
        BOOL v70 = (v69 & 0x20000) == 0;

        if (!v70) {
          goto LABEL_59;
        }
      }
      else if ((v69 & 0x20000) != 0)
      {
        goto LABEL_59;
      }
      operator new();
    }
    unsigned __int8 v23 = *(NSObject **)(qword_1001D8080 + 136);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      LOWORD(v85[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSModel]:#I Crowdsourced OOS learnings: Checking if crowdsourced insight needs to be resent", (uint8_t *)v85, 2u);
    }
    id v24 = [a1[4] previousCrowdsourcedOOSInsights];
    uint64_t v25 = [v24 lastOosRate];
    unsigned int v26 = [v25 intValue];

    long long v27 = +[FMConfiguration sharedInstance];
    id v28 = [v27 CrowdsourcedOOSRateDiffThreshold];
    LODWORD(v29) = v26 - v78;
    if ((int)(v26 - v78) >= 0) {
      unint64_t v29 = v29;
    }
    else {
      unint64_t v29 = v78 - v26;
    }
    BOOL v30 = (unint64_t)v28 > v29;

    if (v30)
    {
      uint64_t v31 = *(NSObject **)(qword_1001D8080 + 136);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        id v32 = +[FMConfiguration sharedInstance];
        id v33 = [v32 CrowdsourcedOOSRateDiffThreshold];
        v85[0] = 134217984;
        *(void *)&v85[1] = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSModel]:#I Crowdsourced OOS learnings: OOS Rate has not changed, while OOS, by more than %lu", (uint8_t *)v85, 0xCu);
      }
      long long v34 = [a1[4] previousCrowdsourcedOOSInsights];
      int v35 = v8 - [v34 maxCount];
      if (v35 >= 0) {
        int v36 = v35;
      }
      else {
        int v36 = -v35;
      }
      id v37 = [a1[4] previousCrowdsourcedOOSInsights];
      unsigned int v38 = [v37 maxCount];

      id v39 = +[FMConfiguration sharedInstance];
      BOOL v40 = (double)v36 * 100.0 / (double)v38 < (double)(unint64_t)[v39 CrowdsourcedMaxCountDiffPercentThreshold];

      if (v40)
      {
        id v41 = *(NSObject **)(qword_1001D8080 + 136);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          uint64_t v42 = +[FMConfiguration sharedInstance];
          id v43 = [v42 CrowdsourcedMaxCountDiffPercentThreshold];
          v85[0] = 134217984;
          *(void *)&v85[1] = v43;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSModel]:#I Crowdsourced OOS learnings: Max Count has not changed, while OOS, by more than %lu percent, not resending insight", (uint8_t *)v85, 0xCu);
        }
        return;
      }
      char v44 = [a1[4] previousCrowdsourcedOOSInsights];
      if ([v44 mcc] == v5)
      {
        unint64_t v45 = [a1[4] previousCrowdsourcedOOSInsights];
        if ([v45 mnc] == v6)
        {
          unint64_t v46 = [a1[4] previousCrowdsourcedOOSInsights];
          BOOL v47 = [v46 rat] == v7;

          if (v47)
          {
            char v48 = *(NSObject **)(qword_1001D8080 + 136);
            if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
            {
              LOWORD(v85[0]) = 0;
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSModel]:#I Crowdsourced OOS learnings: No change in MCC, MNC, or RAT, while OOS, not resending insight", (uint8_t *)v85, 2u);
            }
            return;
          }
          goto LABEL_46;
        }
      }
    }
LABEL_46:
    unsigned int v49 = *(NSObject **)(qword_1001D8080 + 136);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      LOWORD(v85[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSModel]:#I Crowdsourced OOS learnings: Insight needs to be resent", (uint8_t *)v85, 2u);
    }
    goto LABEL_48;
  }
  if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 128), OS_LOG_TYPE_ERROR)) {
    sub_1001457E0();
  }
}

void sub_100074714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100074998()
{
}

void sub_1000749EC()
{
}

void sub_100074A10()
{
}

void sub_100074A54()
{
}

void sub_1000753A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10007572C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100075920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100075944(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v6 oosAreaEntry];
  if (!v7)
  {
LABEL_4:
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
      sub_100145DAC();
    }
    goto LABEL_18;
  }
  int v8 = [v6 oosAreaEntry];
  long long v9 = [v8 clientPrediction];
  if (v9)
  {
    uint64_t v10 = [v6 oosAreaEntry];
    unint64_t v11 = [v10 clientPrediction];
    unsigned int v12 = [v11 isSent];

    if (v12) {
      goto LABEL_4;
    }
  }
  else
  {
  }
  BOOL v13 = [v6 previousCrowdsourcedOOSInsights];

  if (!v13)
  {
LABEL_14:
    [*(id *)(a1 + 40) fetchAndSendCrowdsourcedOOSInsightsPerTileForState:v6 atLocation:*(void *)(a1 + 32) withReason:@"LocationChangeDuringOOS"];
    goto LABEL_18;
  }
  id v14 = objc_alloc((Class)CLLocation);
  [*(id *)(a1 + 32) latitude];
  double v16 = v15;
  [*(id *)(a1 + 32) longitude];
  id v18 = [v14 initWithLatitude:v16 longitude:v17];
  id v19 = objc_alloc((Class)CLLocation);
  uint64_t v20 = [v6 previousCrowdsourcedOOSInsights];
  [v20 latitude];
  double v22 = v21;
  unsigned __int8 v23 = [v6 previousCrowdsourcedOOSInsights];
  [v23 longitude];
  id v25 = [v19 initWithLatitude:v22 longitude:v24];

  [v18 distanceFromLocation:v25];
  double v27 = v26;
  id v28 = *(NSObject **)(qword_1001D8080 + 128);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    [*(id *)(a1 + 32) latitude];
    double v30 = v29;
    [*(id *)(a1 + 32) longitude];
    id v32 = v31;
    id v33 = [v6 previousCrowdsourcedOOSInsights];
    [v33 latitude];
    uint64_t v35 = v34;
    int v36 = [v6 previousCrowdsourcedOOSInsights];
    [v36 longitude];
    int v46 = 134284289;
    double v47 = v30;
    __int16 v48 = 2049;
    id v49 = v32;
    __int16 v50 = 2049;
    uint64_t v51 = v35;
    __int16 v52 = 2049;
    uint64_t v53 = v37;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSModel]:#I Crowdsourced OOS learnings: Current Location Lat:%{private}lf, Long: %{private}lf, Previous Location Lat: %{private}lf, Long: %{private}lf", (uint8_t *)&v46, 0x2Au);
  }
  unsigned int v38 = +[FMConfiguration sharedInstance];
  BOOL v39 = v27 >= (double)(unint64_t)[v38 CrowdsourcedMinDistanceChangedWhileOOSThreshold];

  BOOL v40 = *(NSObject **)(qword_1001D8080 + 128);
  BOOL v41 = os_log_type_enabled(v40, OS_LOG_TYPE_INFO);
  if (v39)
  {
    if (v41)
    {
      uint64_t v42 = +[FMConfiguration sharedInstance];
      id v43 = [v42 CrowdsourcedMinDistanceChangedWhileOOSThreshold];
      int v46 = 134218240;
      double v47 = v27;
      __int16 v48 = 2048;
      id v49 = v43;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSModel]:#I Crowdsourced OOS learnings:distanceChanged: %f is more than %lu", (uint8_t *)&v46, 0x16u);
    }
    goto LABEL_14;
  }
  if (v41)
  {
    char v44 = +[FMConfiguration sharedInstance];
    id v45 = [v44 CrowdsourcedMinDistanceChangedWhileOOSThreshold];
    int v46 = 134218240;
    double v47 = v27;
    __int16 v48 = 2048;
    id v49 = v45;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "FederatedMobility[FMOOSModel]:#I Crowdsourced OOS learnings:distanceChanged: %f is less than %lu", (uint8_t *)&v46, 0x16u);
  }
LABEL_18:
}

void sub_100075D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100075E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100075F78(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_100076030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100076214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_100076254(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2];
}

void sub_1000775E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *a47,void *a48,void *a49,void *a50,uint64_t a51,uint64_t a52,void *a53,_Unwind_Exception *exception_objecta,void *a55,void *a56,void *a57,void *a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Unwind_Resume(a1);
}

id sub_100077BF8(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 radioAccessTechnology];
  uint64_t v4 = [*(id *)(a1 + 32) radioAccessTechnology];
  id v5 = [v3 isEqualToString:v4];

  return v5;
}

void sub_100077C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100077C78(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100077C80(uint64_t a1)
{
  v9[0] = @"predictionType";
  v9[1] = @"predictionSource";
  v10[0] = @"outofservice";
  v10[1] = @"on-device";
  double v9[2] = @"predictionCorrect";
  uint64_t v2 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  _DWORD v10[2] = v2;
  v9[3] = @"seenCount";
  uint64_t v3 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) oosAreaSeenCount]);
  v10[3] = v3;
  void v9[4] = @"predictionSent";
  uint64_t v4 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 32) isSent]);
  void v10[4] = v4;
  void v9[5] = @"predictedDuration";
  [*(id *)(a1 + 32) predictedOOSDuration];
  id v6 = +[NSNumber numberWithLongLong:llround(v5)];
  v10[5] = v6;
  uint64_t v7 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:6];

  return v7;
}

void sub_100077E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100077F8C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10004F03C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100077FDC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1000AFEE0();
    operator delete();
  }
  return result;
}

uint64_t sub_10007802C()
{
  if ((byte_1001D6C20 & 1) == 0)
  {
    byte_1001D6C20 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E74, &stru_1001D6BD0, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100078068(void *a1@<X8>)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v4 = xpc_null_create();
LABEL_8:
    *a1 = v4;
    goto LABEL_9;
  }
  xpc_retain(v3);
LABEL_9:
  xpc_release(v3);
}

uint64_t sub_100078108(uint64_t a1)
{
  *(void *)a1 = off_1001B87B8;
  xpc_object_t v3 = (void **)(a1 + 24);
  sub_10000B6EC(&v3);
  return a1;
}

void sub_100078160(uint64_t a1)
{
  *(void *)a1 = off_1001B87B8;
  uint64_t v1 = (void **)(a1 + 24);
  sub_10000B6EC(&v1);
  operator delete();
}

void sub_1000781CC()
{
}

void sub_100078348()
{
}

void sub_100078390(uint64_t a1@<X8>)
{
  sub_10008676C(__p);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(void *)(a1 + 16) = v3;
  __p[1] = 0;
  uint64_t v3 = 0;
  __p[0] = 0;
  ctu::path_join_impl();
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000783F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  sub_100141970((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007841C()
{
  sub_100078390((uint64_t)&__p);
  std::__fs::filesystem::path v1 = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::__remove(&v1, 0);
  if (SHIBYTE(v1.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_10007848C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_100141970((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL sub_1000784B0(uint64_t a1, char *a2)
{
  ppDb = 0;
  sub_10004EDE4(&__p, a2);
  sub_100078BF0(&__p, &off_1001B87E8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000173FC(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = __p;
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  int v4 = sqlite3_open_v2((const char *)p_buf, &ppDb, 6, 0);
  int v5 = v4;
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_9;
    }
LABEL_12:
    int v8 = sqlite3_backup_init(ppDb, "main", *(sqlite3 **)(a1 + 40), "main");
    long long v9 = v8;
    if (v8)
    {
      sqlite3_backup_step(v8, -1);
      sqlite3_backup_finish(v9);
    }
    int v10 = sqlite3_errcode(ppDb);
    BOOL v7 = v10 == 0;
    unint64_t v11 = *(NSObject **)(a1 + 32);
    if (v10)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v10;
        unsigned int v12 = "persist:#E Sqlite backup failed with err=%d";
        BOOL v13 = v11;
        os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
        uint32_t v15 = 8;
LABEL_19:
        _os_log_impl((void *)&_mh_execute_header, v13, v14, v12, (uint8_t *)&buf, v15);
      }
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      unsigned int v12 = "persist:#I Sqlite backup succeeded";
      BOOL v13 = v11;
      os_log_type_t v14 = OS_LOG_TYPE_INFO;
      uint32_t v15 = 2;
      goto LABEL_19;
    }
    sqlite3_close(ppDb);
    goto LABEL_21;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (!v5) {
    goto LABEL_12;
  }
LABEL_9:
  id v6 = *(NSObject **)(a1 + 32);
  BOOL v7 = 0;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "persist:#E Unable to create backup database with err=%d", (uint8_t *)&buf, 8u);
    BOOL v7 = 0;
  }
LABEL_21:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1000786CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100078710(uint64_t a1, uint64_t a2)
{
  v4[0] = a1;
  v4[1] = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100078C7C;
  block[3] = &unk_1001B8900;
  void block[4] = a1;
  void block[5] = v4;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

const void **sub_100078794(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1000787C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B8800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000787E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B8800;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10007883C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100078868(uint64_t a1)
{
  nullsub_15(a1);

  operator delete();
}

uint64_t sub_1000788A0()
{
  return CFPreferencesAppSynchronize(@"com.apple.wirelessinsightsd.persistent");
}

BOOL sub_1000788AC(int a1, CFStringRef key)
{
  CFPropertyListRef v5 = CFPreferencesCopyAppValue(key, @"com.apple.wirelessinsightsd.persistent");
  if (v5) {
    uint64_t v2 = sub_100057DD8;
  }
  else {
    uint64_t v2 = 0;
  }
  BOOL v3 = v2 != 0;
  sub_10001570C(&v5);
  return v3;
}

uint64_t sub_100078910(int a1, CFStringRef key, CFPropertyListRef value)
{
  CFPreferencesSetAppValue(key, value, @"com.apple.wirelessinsightsd.persistent");

  return CFPreferencesAppSynchronize(@"com.apple.wirelessinsightsd.persistent");
}

void sub_100078958(int a1, CFStringRef key, CFPropertyListRef value)
{
}

CFPropertyListRef sub_100078970@<X0>(CFStringRef key@<X1>, void *a2@<X8>)
{
  CFPropertyListRef result = CFPreferencesCopyAppValue(key, @"com.apple.wirelessinsightsd.persistent");
  *a2 = result;
  return result;
}

void sub_1000789A4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100078A1C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_100078AF4);
  __cxa_rethrow();
}

void sub_100078A44(_Unwind_Exception *a1)
{
}

void sub_100078A5C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100078A94(uint64_t a1)
{
}

uint64_t sub_100078AB0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100078AF4(uint64_t result)
{
  if (result)
  {
    sub_1000A18A8();
    operator delete();
  }
  return result;
}

uint64_t *sub_100078B34(uint64_t **a1)
{
  std::__fs::filesystem::path v1 = *a1;
  BOOL v3 = a1;
  int v4 = v1;
  sub_1000A18AC(*v1);
  sub_100078B94((uint64_t *)&v4);
  return sub_10000BA00((uint64_t *)&v3);
}

void sub_100078B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100078B94(uint64_t *result)
{
  uint64_t v1 = *result;
  *CFPropertyListRef result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2) {
      sub_10000B678(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100078BE8(uint64_t a1)
{
  return *(void *)a1;
}

std::string *sub_100078BF0(std::string *this, char **a2)
{
  if (**a2 == 47)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      this->__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
    }
  }
  else if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_)
  {
    std::string::push_back(this, 47);
  }
  int v4 = *a2 - 1;
  while (*++v4)
    ;
  sub_10004E654(this, *a2, v4);
  return this;
}

void sub_100078C7C(uint64_t a1)
{
  uint64_t v1 = *(char ***)(a1 + 40);
  uint64_t v2 = (uint64_t)*v1;
  BOOL v3 = *((void *)*v1 + 4);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__pn_.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "persist:#I Backing up persistent database", (uint8_t *)&buf, 2u);
  }
  sub_1000784B0(v2, v1[1]);
  int v4 = *(NSObject **)(v2 + 32);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__pn_.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "persist:#I Backing up persistent plist", (uint8_t *)&buf, 2u);
  }
  (*(void (**)(void))(**(void **)(v2 + 48) + 16))(*(void *)(v2 + 48));
  sub_100018888(&__to, "/var/wireless/Library/Preferences");
  ctu::path_join_impl();
  std::__fs::filesystem::path buf = __to;
  CFPropertyListRef v5 = v1[1];
  if (v5[23] < 0)
  {
    sub_1000173FC(&v8, *(void **)v5, *((void *)v5 + 1));
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    v8.__pn_.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
    *(_OWORD *)&v8.__pn_.__r_.__value_.__l.__data_ = v6;
  }
  ctu::path_join_impl();
  std::__fs::filesystem::path __to = v8;
  std::__fs::filesystem::__copy_file(&buf, &__to, overwrite_existing, 0);
  BOOL v7 = *(NSObject **)(v2 + 32);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LOWORD(v8.__pn_.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "persist:#I Sqlite backup succeeded", (uint8_t *)&v8, 2u);
  }
  if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__to.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_100078E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100078EA8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_100078EDC(uint64_t a1)
{
  return a1;
}

BOOL sub_100078F54(uint64_t a1, xpc_object_t *a2, uint64_t *a3)
{
  if (xpc_get_type(*a2) != (xpc_type_t)&_xpc_type_dictionary) {
    return 0;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(void *)(a1 + 8)) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(a1 + 23))
  {
    return 0;
  }
  uint64_t v31 = 0;
  id v32 = (void **)&v31;
  uint64_t v33 = 0x3002000000;
  uint64_t v34 = sub_1000793AC;
  uint64_t v35 = sub_1000793E0;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v8 = v7;
  if (v7)
  {
    xpc_object_t v36 = v7;
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v36 = v8;
    if (!v8)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
      goto LABEL_14;
    }
  }
  if (xpc_get_type(v8) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v9 = xpc_null_create();
LABEL_14:
    xpc_object_t v36 = v9;
    goto LABEL_15;
  }
  xpc_retain(v8);
LABEL_15:
  xpc_release(v8);
  uint64_t v25 = 0;
  double v26 = &v25;
  uint64_t v27 = 0x4002000000;
  id v28 = sub_100079410;
  double v29 = sub_100079434;
  memset(v30, 0, sizeof(v30));
  xpc_object_t v10 = *a2;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 1174405120;
  applier[2] = sub_100079460;
  applier[3] = &unk_1001B8968;
  xpc_object_t v24 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v24 = xpc_null_create();
  }
  applier[4] = &v31;
  void applier[5] = &v25;
  BOOL v6 = xpc_dictionary_apply(v10, applier);
  if (v6)
  {
    unint64_t v11 = (xpc_object_t *)v26[5];
    unsigned int v12 = (xpc_object_t *)v26[6];
    if (v11 == v12)
    {
      sub_1000124C4(__p, (long long *)a1, v32 + 5);
      sub_1000120A0(a3, (long long *)__p);
      sub_10005B478((uint64_t)__p);
    }
    else
    {
      do
      {
        xpc_object_t v13 = *v11;
        if (*v11) {
          xpc_retain(*v11);
        }
        else {
          xpc_object_t v13 = xpc_null_create();
        }
        xpc_object_t v14 = v32[5];
        double v21 = v14;
        if (v14)
        {
          xpc_retain(v14);
        }
        else
        {
          xpc_object_t v14 = xpc_null_create();
          double v21 = v14;
        }
        uint64_t v20 = v13;
        if (v13)
        {
          xpc_retain(v13);
          xpc_object_t v15 = v13;
        }
        else
        {
          xpc_object_t v15 = xpc_null_create();
          uint64_t v20 = v15;
        }
        sub_100079C20(&v21, &v20, &v22);
        xpc_release(v15);
        uint64_t v20 = 0;
        xpc_release(v14);
        double v21 = 0;
        sub_1000124C4(__p, (long long *)a1, &v22);
        sub_1000120A0(a3, (long long *)__p);
        xpc_release(object);
        xpc_object_t object = 0;
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        xpc_release(v22);
        xpc_release(v13);
        ++v11;
      }
      while (v11 != v12);
    }
  }
  xpc_release(v24);
  xpc_object_t v24 = 0;
  _Block_object_dispose(&v25, 8);
  __p[0] = v30;
  sub_10007BC90((void ***)__p);
  _Block_object_dispose(&v31, 8);
  xpc_release(v36);
  return v6;
}

void sub_1000792A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,xpc_object_t object,char a23)
{
  sub_10005B478((uint64_t)&a9);
  xpc_release(object);
  xpc_object_t object = 0;
  _Block_object_dispose(&a23, 8);
  sub_10007BC90((void ***)&a9);
  _Block_object_dispose((const void *)(v23 - 128), 8);
  xpc_release(*(xpc_object_t *)(v23 - 88));
  _Unwind_Resume(a1);
}

void sub_100079378(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
  xpc_release(v14);
  xpc_release(object);
  JUMPOUT(0x100079318);
}

xpc_object_t sub_1000793AC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  xpc_object_t result = xpc_null_create();
  *(void *)(a2 + 40) = result;
  return result;
}

void sub_1000793E0(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

__n128 sub_100079410(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_100079434(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_10007BC90(&v1);
}

uint64_t sub_100079460(void *a1, void **a2, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v20 = a1 + 6;
    double v21 = a2;
    sub_100079B84((uint64_t)&v20, &v38);
    sub_100018888(&v36, (char *)a2);
    sub_100079994(&v38, &v36, (void **)&v31);
    if (v37 < 0) {
      operator delete((void *)v36);
    }
    xpc_release(v38);
    unsigned int v38 = 0;
    if (xpc_get_type(v31) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_object_t v10 = *(xpc_object_t *)(*(void *)(a1[4] + 8) + 40);
      uint64_t v35 = v10;
      if (v10)
      {
        xpc_retain(v10);
      }
      else
      {
        xpc_object_t v10 = xpc_null_create();
        uint64_t v35 = v10;
      }
      unint64_t v11 = v31;
      uint64_t v34 = v31;
      if (v31)
      {
        xpc_retain(v31);
      }
      else
      {
        unint64_t v11 = (xpc_object_t *)xpc_null_create();
        uint64_t v34 = v11;
      }
      sub_100079C20(&v35, (void **)&v34, &v20);
      uint64_t v12 = *(void *)(a1[4] + 8);
      xpc_object_t v13 = v20;
      xpc_object_t v20 = xpc_null_create();
      xpc_object_t v14 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v13;
      xpc_release(v14);
      xpc_release(v20);
      xpc_object_t v20 = 0;
      xpc_release(v11);
      uint64_t v34 = 0;
      xpc_release(v10);
      uint64_t v35 = 0;
      xpc_release(v31);
      return 1;
    }
    xpc_release(v31);
    return 0;
  }
  xpc_type_t v7 = type;
  xpc_object_t v8 = (xpc_type_t *)qword_1001D7CF0;
  if (qword_1001D7CF0 != qword_1001D7CF8)
  {
    while (*v8 != type)
    {
      if (++v8 == (xpc_type_t *)qword_1001D7CF8)
      {
        xpc_object_t v8 = (xpc_type_t *)qword_1001D7CF8;
        break;
      }
    }
  }
  if (v8 == (xpc_type_t *)qword_1001D7CF8)
  {
    if (sub_100079F48(object))
    {
      xpc_object_t v20 = a1 + 6;
      double v21 = a2;
      sub_100002988((uint64_t)&v20, &v28);
      sub_100079FA8(&v28, &v29);
      uint64_t v31 = (xpc_object_t *)(*(void *)(a1[4] + 8) + 40);
      id v32 = a2;
      sub_10007A1B0((uint64_t)&v31, &v29, &objecta);
      xpc_release(objecta);
      xpc_object_t objecta = 0;
      xpc_release(v29);
      xpc_object_t v29 = 0;
      xpc_release(v28);
      return 1;
    }
    if (sub_10007A230(object))
    {
      xpc_object_t v20 = a1 + 6;
      double v21 = a2;
      sub_100002988((uint64_t)&v20, &v25);
      sub_10007A290((xpc::object *)&v25, &v26);
      uint64_t v31 = (xpc_object_t *)(*(void *)(a1[4] + 8) + 40);
      id v32 = a2;
      sub_100014D08((uint64_t)&v31, &v26, &v27);
      xpc_release(v27);
      xpc_object_t v27 = 0;
      xpc_release(v26);
      xpc_object_t v26 = 0;
      xpc_release(v25);
      return 1;
    }
    if (sub_10007A680(object))
    {
      xpc_object_t v20 = a1 + 6;
      double v21 = a2;
      sub_100002988((uint64_t)&v20, &v22);
      sub_10007A6E0((xpc::object *)&v22, &v23);
      uint64_t v31 = (xpc_object_t *)(*(void *)(a1[4] + 8) + 40);
      id v32 = a2;
      sub_100014D08((uint64_t)&v31, &v23, &v24);
      xpc_release(v24);
      xpc_object_t v24 = 0;
      xpc_release(v23);
      xpc_object_t v23 = 0;
      xpc_release(v22);
      return 1;
    }
    if (v7 == (xpc_type_t)&_xpc_type_array)
    {
      uint64_t v31 = (xpc_object_t *)(a1 + 6);
      id v32 = a2;
      sub_100002988((uint64_t)&v31, &v19);
      sub_100018888(__p, (char *)a2);
      sub_10007AAD0(&v19, (long long *)__p, (uint64_t)&v20);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      xpc_release(v19);
      xpc_object_t v19 = 0;
      uint64_t v15 = *(void *)(a1[5] + 8);
      double v16 = (uint64_t *)(v15 + 40);
      if (v20 != v21)
      {
        sub_10007C0E8(v16, *(void ***)(v15 + 48), (xpc_object_t *)v20, v21, ((char *)v21 - (unsigned char *)v20) >> 3);
        uint64_t v31 = &v20;
        sub_10007BC90(&v31);
        return 1;
      }
      sub_10007BD40((uint64_t)v16, 0, 0, 0);
      uint64_t v31 = &v20;
      sub_10007BC90(&v31);
    }
    return 0;
  }
  xpc_object_t v20 = a1 + 6;
  double v21 = a2;
  uint64_t v31 = (xpc_object_t *)(*(void *)(a1[4] + 8) + 40);
  id v32 = a2;
  sub_100079EC0((uint64_t)&v31, (uint64_t)&v20, &v33);
  xpc_release(v33);
  return 1;
}

void sub_100079850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t object, char a17, uint64_t a18, uint64_t a19, xpc_object_t a20,uint64_t a21,uint64_t a22,xpc_object_t a23,uint64_t a24,uint64_t a25,xpc_object_t a26)
{
  *(void *)(v26 - 120) = &a17;
  sub_10007BC90((void ***)(v26 - 120));
  _Unwind_Resume(a1);
}

void sub_100079994(void **a1@<X0>, long long *a2@<X1>, void **a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (v6)
  {
    *a3 = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    *a3 = v7;
    if (!v7)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v7) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_8:
  *a3 = v8;
LABEL_9:
  xpc_release(v7);
  xpc_object_t v9 = *a1;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 1174405120;
  applier[2] = sub_10007B1F0;
  applier[3] = &unk_1001B89D0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000173FC(&__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __p = *a2;
    uint64_t v14 = *((void *)a2 + 2);
  }
  xpc_object_t v10 = *a3;
  xpc_object_t v15 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v15 = xpc_null_create();
  }
  unint64_t v11 = *a1;
  xpc_object_t object = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_dictionary_apply(v9, applier);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v15);
  xpc_object_t v15 = 0;
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
}

void sub_100079B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, xpc_object_t a20,xpc_object_t object)
{
  sub_1000551DC(v21);
  _Unwind_Resume(a1);
}

void sub_100079B84(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v4) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void sub_100079C20(void **a1@<X0>, void **a2@<X1>, void **a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (v6)
  {
    *a3 = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    *a3 = v7;
    if (!v7)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v7) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_8:
  *a3 = v8;
LABEL_9:
  xpc_release(v7);
  xpc_object_t v9 = *a1;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 1174405120;
  applier[2] = sub_10007B62C;
  applier[3] = &unk_1001B8A00;
  xpc_object_t v10 = *a3;
  xpc_object_t v18 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v18 = xpc_null_create();
  }
  unint64_t v11 = *a1;
  xpc_object_t v19 = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_apply(v9, applier);
  uint64_t v12 = *a2;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1174405120;
  void v14[2] = sub_10007B71C;
  void v14[3] = &unk_1001B8A30;
  xpc_object_t v15 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_object_t v13 = *a2;
  xpc_object_t object = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_dictionary_apply(v12, v14);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v15);
  xpc_object_t v15 = 0;
  xpc_release(v19);
  xpc_object_t v19 = 0;
  xpc_release(v18);
}

void sub_100079E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t a19, xpc_object_t a20)
{
  xpc_release(object);
  xpc_release(a13);
  xpc_release(a20);
  xpc_release(a19);
  sub_1000551DC(v20);
  _Unwind_Resume(a1);
}

void sub_100079EC0(uint64_t a1@<X0>, uint64_t a2@<X1>, xpc_object_t *a3@<X8>)
{
  sub_10000B7A4(a2, &object);
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  sub_100014D08(a1, &v5, a3);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  xpc_release(object);
}

BOOL sub_100079F48(void *a1)
{
  if (xpc_get_type(a1) != (xpc_type_t)&_xpc_type_array) {
    return 0;
  }

  return xpc_array_apply(a1, &stru_1001B8A80);
}

void sub_100079FA8(void **a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  if (!sub_100079F48(*a1))
  {
    xpc_object_t v7 = xpc_array_create(0, 0);
    xpc_object_t v8 = v7;
    if (v7)
    {
      *a2 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
      *a2 = v8;
      if (!v8)
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v8 = 0;
        goto LABEL_19;
      }
    }
    if (xpc_get_type(v8) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v8);
LABEL_20:
      xpc_release(v8);
      goto LABEL_21;
    }
    xpc_object_t v9 = xpc_null_create();
LABEL_19:
    *a2 = v9;
    goto LABEL_20;
  }
  xpc_object_t v6 = *a1;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 1174405120;
  applier[2] = sub_10007B804;
  applier[3] = &unk_1001B8B20;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_array_apply(v6, applier);
  *a2 = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(object);
  xpc_object_t object = 0;
LABEL_21:
  xpc_release(v5);
}

void sub_10007A164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v14);
  _Unwind_Resume(a1);
}

xpc_object_t sub_10007A1B0@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

xpc_object_t *sub_10007A1FC(xpc_object_t *a1)
{
  *a1 = 0;
  return a1;
}

BOOL sub_10007A230(void *a1)
{
  if (xpc_get_type(a1) != (xpc_type_t)&_xpc_type_array) {
    return 0;
  }

  return xpc_array_apply(a1, &stru_1001B8AC0);
}

void sub_10007A290(xpc::object *a1@<X0>, xpc_object_t *a2@<X8>)
{
  sub_100018888(v38, ";");
  sub_100018888(v36, " ");
  memset(&v35, 0, sizeof(v35));
  uint64_t v29 = 0;
  double v30 = &v29;
  uint64_t v31 = 0x4002000000;
  id v32 = sub_10007B990;
  xpc_object_t v33 = sub_10007B9B4;
  memset(v34, 0, sizeof(v34));
  xpc_object_t v4 = *(void **)a1;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 0x40000000;
  applier[2] = sub_10007B9E0;
  applier[3] = &unk_1001B8B58;
  void applier[4] = &v29;
  if (!xpc_array_apply(v4, applier))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((uint64_t *)__p, a1);
      sub_100145F20();
    }
    *(void *)string = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    xpc_object_t v20 = xpc_string_create(string);
    *a2 = v20;
    if (!v20) {
      *a2 = xpc_null_create();
    }
    if (SHIBYTE(v25) < 0) {
      operator delete(*(void **)string);
    }
    goto LABEL_52;
  }
  uint64_t v5 = v30[5];
  xpc_object_t v6 = (long long *)v30[6];
  unint64_t v7 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v5) >> 3));
  if (v6 == (long long *)v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  sub_10007CAD8(v5, v6, (uint64_t)string, v8, 1);
  xpc_object_t v9 = (long long *)v30[5];
  xpc_object_t v10 = (long long *)v30[6];
  if (v9 == v10) {
    goto LABEL_47;
  }
  while (1)
  {
    if (*((char *)v9 + 23) < 0)
    {
      sub_1000173FC(__p, *(void **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v11 = *v9;
      uint64_t v27 = *((void *)v9 + 2);
      *(_OWORD *)long long __p = v11;
    }
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v35.__r_.__value_.__l.__size_;
    }
    xpc_object_t v13 = (void *)HIBYTE(v27);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
      if (size + HIBYTE(v27) >= 0x3E9) {
        goto LABEL_47;
      }
      goto LABEL_16;
    }
    if ((char *)__p[1] + size >= (void *)0x3E9) {
      break;
    }
LABEL_16:
    if (size)
    {
      if ((v37 & 0x80u) == 0) {
        uint64_t v14 = (const std::string::value_type *)v36;
      }
      else {
        uint64_t v14 = (const std::string::value_type *)v36[0];
      }
      if ((v37 & 0x80u) == 0) {
        std::string::size_type v15 = v37;
      }
      else {
        std::string::size_type v15 = (std::string::size_type)v36[1];
      }
      std::string::append(&v35, v14, v15);
      xpc_object_t v13 = (void *)HIBYTE(v27);
    }
    if ((char)v13 >= 0) {
      double v16 = __p;
    }
    else {
      double v16 = (void **)__p[0];
    }
    if ((char)v13 >= 0) {
      double v17 = v13;
    }
    else {
      double v17 = __p[1];
    }
    std::string::append(&v35, (const std::string::value_type *)v16, (std::string::size_type)v17);
    if ((v39 & 0x80u) == 0) {
      xpc_object_t v18 = (const std::string::value_type *)v38;
    }
    else {
      xpc_object_t v18 = (const std::string::value_type *)v38[0];
    }
    if ((v39 & 0x80u) == 0) {
      std::string::size_type v19 = v39;
    }
    else {
      std::string::size_type v19 = (std::string::size_type)v38[1];
    }
    std::string::append(&v35, v18, v19);
    if (SHIBYTE(v27) < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v9 = (long long *)((char *)v9 + 24);
    if (v9 == v10) {
      goto LABEL_47;
    }
  }
  operator delete(__p[0]);
LABEL_47:
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v21 = &v35;
  }
  else {
    double v21 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v22 = xpc_string_create((const char *)v21);
  *a2 = v22;
  if (!v22) {
    *a2 = xpc_null_create();
  }
LABEL_52:
  _Block_object_dispose(&v29, 8);
  *(void *)string = v34;
  sub_10002F868((void ***)string);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if ((char)v37 < 0) {
    operator delete(v36[0]);
  }
  if ((char)v39 < 0) {
    operator delete(v38[0]);
  }
}

void sub_10007A5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a2) {
    sub_10001F4A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10007A680(void *a1)
{
  if (xpc_get_type(a1) != (xpc_type_t)&_xpc_type_array) {
    return 0;
  }

  return xpc_array_apply(a1, &stru_1001B8B00);
}

void sub_10007A6E0(xpc::object *a1@<X0>, xpc_object_t *a2@<X8>)
{
  sub_100018888(v38, ";");
  sub_100018888(v36, " ");
  memset(&v35, 0, sizeof(v35));
  uint64_t v29 = 0;
  double v30 = &v29;
  uint64_t v31 = 0x4002000000;
  id v32 = sub_10007B990;
  xpc_object_t v33 = sub_10007B9B4;
  memset(v34, 0, sizeof(v34));
  xpc_object_t v4 = *(void **)a1;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 0x40000000;
  applier[2] = sub_10007BADC;
  applier[3] = &unk_1001B8B80;
  void applier[4] = &v29;
  if (!xpc_array_apply(v4, applier))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((uint64_t *)__p, a1);
      sub_100145F84();
    }
    *(void *)string = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    xpc_object_t v20 = xpc_string_create(string);
    *a2 = v20;
    if (!v20) {
      *a2 = xpc_null_create();
    }
    if (SHIBYTE(v25) < 0) {
      operator delete(*(void **)string);
    }
    goto LABEL_52;
  }
  uint64_t v5 = v30[5];
  xpc_object_t v6 = (long long *)v30[6];
  unint64_t v7 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v5) >> 3));
  if (v6 == (long long *)v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  sub_10007CAD8(v5, v6, (uint64_t)string, v8, 1);
  xpc_object_t v9 = (long long *)v30[5];
  xpc_object_t v10 = (long long *)v30[6];
  if (v9 == v10) {
    goto LABEL_47;
  }
  while (1)
  {
    if (*((char *)v9 + 23) < 0)
    {
      sub_1000173FC(__p, *(void **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v11 = *v9;
      uint64_t v27 = *((void *)v9 + 2);
      *(_OWORD *)long long __p = v11;
    }
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v35.__r_.__value_.__l.__size_;
    }
    xpc_object_t v13 = (void *)HIBYTE(v27);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
      if (size + HIBYTE(v27) >= 0x3E9) {
        goto LABEL_47;
      }
      goto LABEL_16;
    }
    if ((char *)__p[1] + size >= (void *)0x3E9) {
      break;
    }
LABEL_16:
    if (size)
    {
      if ((v37 & 0x80u) == 0) {
        uint64_t v14 = (const std::string::value_type *)v36;
      }
      else {
        uint64_t v14 = (const std::string::value_type *)v36[0];
      }
      if ((v37 & 0x80u) == 0) {
        std::string::size_type v15 = v37;
      }
      else {
        std::string::size_type v15 = (std::string::size_type)v36[1];
      }
      std::string::append(&v35, v14, v15);
      xpc_object_t v13 = (void *)HIBYTE(v27);
    }
    if ((char)v13 >= 0) {
      double v16 = __p;
    }
    else {
      double v16 = (void **)__p[0];
    }
    if ((char)v13 >= 0) {
      double v17 = v13;
    }
    else {
      double v17 = __p[1];
    }
    std::string::append(&v35, (const std::string::value_type *)v16, (std::string::size_type)v17);
    if ((v39 & 0x80u) == 0) {
      xpc_object_t v18 = (const std::string::value_type *)v38;
    }
    else {
      xpc_object_t v18 = (const std::string::value_type *)v38[0];
    }
    if ((v39 & 0x80u) == 0) {
      std::string::size_type v19 = v39;
    }
    else {
      std::string::size_type v19 = (std::string::size_type)v38[1];
    }
    std::string::append(&v35, v18, v19);
    if (SHIBYTE(v27) < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v9 = (long long *)((char *)v9 + 24);
    if (v9 == v10) {
      goto LABEL_47;
    }
  }
  operator delete(__p[0]);
LABEL_47:
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v21 = &v35;
  }
  else {
    double v21 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v22 = xpc_string_create((const char *)v21);
  *a2 = v22;
  if (!v22) {
    *a2 = xpc_null_create();
  }
LABEL_52:
  _Block_object_dispose(&v29, 8);
  *(void *)string = v34;
  sub_10002F868((void ***)string);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if ((char)v37 < 0) {
    operator delete(v36[0]);
  }
  if ((char)v39 < 0) {
    operator delete(v38[0]);
  }
}

void sub_10007AA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a2) {
    sub_10001F4A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007AAD0(void **a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x4002000000;
  uint64_t v14 = sub_100079410;
  std::string::size_type v15 = sub_100079434;
  memset(v16, 0, sizeof(v16));
  uint64_t v5 = *a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1174405120;
  _DWORD v7[2] = sub_10007AD44;
  v7[3] = &unk_1001B89A0;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000173FC(&__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __p = *a2;
    uint64_t v10 = *((void *)a2 + 2);
  }
  void v7[4] = &v11;
  if (!xpc_array_apply(v5, v7)) {
    sub_10007BD40((uint64_t)(v12 + 5), 0, 0, 0);
  }
  xpc_object_t v6 = v12;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_10007C92C((void **)a3, (void **)v6[5], (void **)v6[6], (v6[6] - v6[5]) >> 3);
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)__p);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  _Block_object_dispose(&v11, 8);
  double v17 = (void **)v16;
  sub_10007BC90(&v17);
}

void sub_10007AC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  xpc_release(object);
  _Block_object_dispose(&a21, 8);
  *(void *)(v22 - 40) = v21;
  sub_10007BC90((void ***)(v22 - 40));
  _Unwind_Resume(a1);
}

xpc_object_t sub_10007ACD4(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

void sub_10007AD14(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
}

uint64_t sub_10007AD44(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (type == (xpc_type_t)&_xpc_type_string)
    {
      xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v7 = v6;
      if (v6)
      {
        xpc_object_t v14 = v6;
      }
      else
      {
        xpc_object_t v7 = xpc_null_create();
        xpc_object_t v14 = v7;
        if (!v7)
        {
          xpc_object_t v9 = xpc_null_create();
          xpc_object_t v7 = 0;
          goto LABEL_19;
        }
      }
      if (xpc_get_type(v7) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_retain(v7);
        goto LABEL_20;
      }
      xpc_object_t v9 = xpc_null_create();
LABEL_19:
      xpc_object_t v14 = v9;
LABEL_20:
      xpc_release(v7);
      uint64_t v17 = a1 + 40;
      uint64_t v18 = a2;
      uint64_t v10 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      objecta[0] = &v14;
      objecta[1] = v10;
      sub_100054E28((uint64_t)&v17, &v21);
      xpc_object_t v11 = v21;
      if (v21)
      {
        xpc_retain(v21);
        xpc_object_t v20 = v11;
      }
      else
      {
        xpc_object_t v11 = xpc_null_create();
        xpc_object_t v20 = v11;
        if (!v11)
        {
          xpc_object_t v11 = 0;
          xpc_object_t v20 = xpc_null_create();
          goto LABEL_26;
        }
      }
      xpc_retain(v11);
LABEL_26:
      sub_100014D08((uint64_t)objecta, &v20, &v13);
      xpc_release(v20);
      xpc_object_t v20 = 0;
      xpc_release(v11);
      xpc_release(v21);
      xpc_release(v13);
      xpc_object_t v13 = 0;
      sub_10007B00C((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v14);
      xpc_release(v14);
      return 1;
    }
    return 0;
  }
  uint64_t v17 = a1 + 40;
  uint64_t v18 = a2;
  sub_10001258C((uint64_t)&v17, &v19);
  if (*(char *)(a1 + 71) < 0)
  {
    sub_1000173FC(__p, *(void **)(a1 + 48), *(void *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 64);
  }
  sub_100079994(&v19, (long long *)__p, objecta);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(v19);
  std::string::size_type v19 = 0;
  if (xpc_get_type(objecta[0]) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_release(objecta[0]);
    return 0;
  }
  sub_10007B00C((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), objecta);
  xpc_release(objecta[0]);
  return 1;
}

void sub_10007AF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  xpc_release(*(xpc_object_t *)(v18 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_10007B00C(uint64_t *a1, void **a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  xpc_object_t v6 = (void **)a1[1];
  if ((unint64_t)v6 >= v4)
  {
    uint64_t v9 = ((uint64_t)v6 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_10002B5E0();
    }
    uint64_t v10 = v4 - *a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = a1 + 2;
    if (v12) {
      xpc_object_t v13 = (char *)sub_100038500((uint64_t)(a1 + 2), v12);
    }
    else {
      xpc_object_t v13 = 0;
    }
    xpc_object_t v14 = v13;
    std::string::size_type v15 = (void **)&v13[8 * v9];
    uint64_t v17 = &v13[8 * v12];
    sub_10007BF84(v5, v15, a2);
    uint64_t v16 = v15 + 1;
    sub_10007C8B4(a1, &v14);
    uint64_t v8 = (void **)a1[1];
    uint64_t result = sub_10007C824((uint64_t)&v14);
  }
  else
  {
    uint64_t result = (uint64_t)sub_10007BF84((uint64_t)(a1 + 2), v6, a2);
    uint64_t v8 = v6 + 1;
    a1[1] = (uint64_t)(v6 + 1);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_10007B10C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10007C824((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_10007B120(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)(a1 + 40) = xpc_null_create();
  }
  uint64_t result = (unsigned char *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0) {
    return sub_1000173FC(result, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)uint64_t result = v6;
  return result;
}

void sub_10007B198(_Unwind_Exception *a1)
{
  sub_10007A1FC(v1);
  _Unwind_Resume(a1);
}

void sub_10007B1B0(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

uint64_t sub_10007B1F0(uint64_t a1, const std::string::value_type *a2, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  sub_1000133D8((const void **)(a1 + 32), (const void **)qword_1001D7CD8, (uint64_t)&v27);
  xpc_object_t v7 = std::string::append(&v27, a2);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v29 = v7->__r_.__value_.__r.__words[2];
  long long v28 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (sub_100079F48(object))
  {
    v27.__r_.__value_.__r.__words[0] = a1 + 64;
    v27.__r_.__value_.__l.__size_ = (std::string::size_type)a2;
    sub_100002988((uint64_t)&v27, &v24);
    sub_100079FA8(&v24, &v25);
    uint64_t v9 = &v28;
    if (v29 < 0) {
      uint64_t v9 = (long long *)v28;
    }
    uint64_t v22 = a1 + 56;
    xpc_object_t v23 = v9;
    sub_10007A1B0((uint64_t)&v22, &v25, &objecta);
    xpc_release(objecta);
    xpc_object_t objecta = 0;
    xpc_release(v25);
    xpc_object_t v25 = 0;
    xpc_release(v24);
    xpc_object_t v24 = 0;
  }
  else if (sub_10007A230(object))
  {
    v27.__r_.__value_.__r.__words[0] = a1 + 64;
    v27.__r_.__value_.__l.__size_ = (std::string::size_type)a2;
    sub_100002988((uint64_t)&v27, &v19);
    sub_10007A290((xpc::object *)&v19, &v20);
    uint64_t v10 = &v28;
    if (v29 < 0) {
      uint64_t v10 = (long long *)v28;
    }
    uint64_t v22 = a1 + 56;
    xpc_object_t v23 = v10;
    sub_100014D08((uint64_t)&v22, &v20, &v21);
    xpc_release(v21);
    xpc_object_t v21 = 0;
    xpc_release(v20);
    xpc_object_t v20 = 0;
    xpc_release(v19);
    xpc_object_t v19 = 0;
  }
  else if (sub_10007A680(object))
  {
    v27.__r_.__value_.__r.__words[0] = a1 + 64;
    v27.__r_.__value_.__l.__size_ = (std::string::size_type)a2;
    sub_100002988((uint64_t)&v27, &v16);
    sub_10007A6E0((xpc::object *)&v16, &v17);
    uint64_t v11 = &v28;
    if (v29 < 0) {
      uint64_t v11 = (long long *)v28;
    }
    uint64_t v22 = a1 + 56;
    xpc_object_t v23 = v11;
    sub_100014D08((uint64_t)&v22, &v17, &v18);
    xpc_release(v18);
    xpc_object_t v18 = 0;
    xpc_release(v17);
    xpc_object_t v17 = 0;
    xpc_release(v16);
    xpc_object_t v16 = 0;
  }
  else
  {
    unint64_t v12 = (xpc_type_t *)qword_1001D7CF0;
    if (qword_1001D7CF0 != qword_1001D7CF8)
    {
      while (*v12 != type)
      {
        if (++v12 == (xpc_type_t *)qword_1001D7CF8)
        {
          unint64_t v12 = (xpc_type_t *)qword_1001D7CF8;
          break;
        }
      }
    }
    if (v12 != (xpc_type_t *)qword_1001D7CF8)
    {
      v27.__r_.__value_.__r.__words[0] = a1 + 64;
      v27.__r_.__value_.__l.__size_ = (std::string::size_type)a2;
      xpc_object_t v13 = &v28;
      if (v29 < 0) {
        xpc_object_t v13 = (long long *)v28;
      }
      uint64_t v22 = a1 + 56;
      xpc_object_t v23 = v13;
      sub_100079EC0((uint64_t)&v22, (uint64_t)&v27, &v15);
      xpc_release(v15);
      xpc_object_t v15 = 0;
    }
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  return 1;
}

void sub_10007B498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, xpc_object_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t a19)
{
  xpc_release(object);
  if (*(char *)(v19 - 41) < 0) {
    operator delete(*(void **)(v19 - 64));
  }
  _Unwind_Resume(a1);
}

xpc_object_t sub_10007B534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 32;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_1000173FC((unsigned char *)v4, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(v4 + 16) = *(void *)(a2 + 48);
    *(_OWORD *)uint64_t v4 = v5;
  }
  long long v6 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    *(void *)(a1 + 56) = xpc_null_create();
  }
  xpc_object_t v7 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v7;
  if (v7) {
    return xpc_retain(v7);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 64) = result;
  return result;
}

void sub_10007B5C4(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

uint64_t sub_10007B62C(uint64_t a1, uint64_t a2)
{
  v4[0] = a1 + 40;
  v4[1] = a2;
  v3[0] = a1 + 32;
  v3[1] = a2;
  sub_100079EC0((uint64_t)v3, (uint64_t)v4, &v5);
  xpc_release(v5);
  return 1;
}

xpc_object_t sub_10007B678(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)(a1 + 32) = xpc_null_create();
  }
  xpc_object_t v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    return xpc_retain(v5);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_10007B6DC(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
}

uint64_t sub_10007B71C(uint64_t a1, uint64_t a2)
{
  v4[0] = a1 + 40;
  v4[1] = a2;
  v3[0] = a1 + 32;
  v3[1] = a2;
  sub_100079EC0((uint64_t)v3, (uint64_t)v4, &v5);
  xpc_release(v5);
  return 1;
}

BOOL sub_10007B768(id a1, unint64_t a2, void *a3)
{
  xpc_type_t type = xpc_get_type(a3);
  return type == (xpc_type_t)&_xpc_type_int64
      || type == (xpc_type_t)&_xpc_type_uint64
      || type == (xpc_type_t)&_xpc_type_double;
}

BOOL sub_10007B7AC(id a1, unint64_t a2, void *a3)
{
  return xpc_get_type(a3) == (xpc_type_t)&_xpc_type_string;
}

BOOL sub_10007B7D8(id a1, unint64_t a2, void *a3)
{
  return xpc_get_type(a3) == (xpc_type_t)&_xpc_type_data;
}

uint64_t sub_10007B804(uint64_t a1, int a2, xpc_object_t object)
{
  xpc_object_t v3 = object;
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_int64 && !xpc_int64_get_value(v3)
    || type == (xpc_type_t)&_xpc_type_uint64 && !xpc_uint64_get_value(v3)
    || type == (xpc_type_t)&_xpc_type_double && xpc_double_get_value(v3) == 0.0)
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v6);
    xpc_release(v6);
  }
  else
  {
    if (v3) {
      xpc_retain(v3);
    }
    else {
      xpc_object_t v3 = xpc_null_create();
    }
    xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v3);
    xpc_release(v3);
  }
  return 1;
}

void sub_10007B8E8(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t sub_10007B920(uint64_t a1, uint64_t a2)
{
  xpc_object_t v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 32) = result;
  return result;
}

void sub_10007B960(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
}

__n128 sub_10007B990(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_10007B9B4(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_10002F868(&v1);
}

char *sub_10007B9E0(uint64_t a1, int a2, xpc_object_t object)
{
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_string) {
    return 0;
  }
  __n128 result = (char *)xpc_string_get_string_ptr(object);
  if (result)
  {
    sub_100018888(__p, result);
    xpc_object_t v6 = *(uint64_t **)(*(void *)(a1 + 32) + 8);
    unint64_t v7 = v6[6];
    if (v7 >= v6[7])
    {
      uint64_t v9 = sub_10007C9B4(v6 + 5, (long long *)__p);
    }
    else
    {
      if (SHIBYTE(v11) < 0)
      {
        sub_1000173FC((unsigned char *)v6[6], __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v8 = *(_OWORD *)__p;
        *(void *)(v7 + 16) = v11;
        *(_OWORD *)unint64_t v7 = v8;
      }
      uint64_t v9 = v7 + 24;
      void v6[6] = v7 + 24;
    }
    void v6[6] = v9;
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    return (char *)1;
  }
  return result;
}

void sub_10007BAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = v16;
  *(void *)(v17 + 48) = v15;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10007BADC(uint64_t a1, int a2, xpc_object_t object)
{
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_data) {
    return 0;
  }
  bytes_ptr = (void *)xpc_data_get_bytes_ptr(object);
  size_t length = xpc_data_get_length(object);
  sub_100055C50(__p, bytes_ptr, length);
  long long v8 = (void *)HIBYTE(v15);
  if (v15 < 0) {
    long long v8 = __p[1];
  }
  BOOL v5 = v8 != 0;
  if (v8)
  {
    uint64_t v9 = *(uint64_t **)(*(void *)(a1 + 32) + 8);
    unint64_t v10 = v9[6];
    if (v10 >= v9[7])
    {
      uint64_t v12 = sub_10007C9B4(v9 + 5, (long long *)__p);
    }
    else
    {
      if (SHIBYTE(v15) < 0)
      {
        sub_1000173FC((unsigned char *)v9[6], __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v11 = *(_OWORD *)__p;
        *(void *)(v10 + 16) = v15;
        *(_OWORD *)unint64_t v10 = v11;
      }
      uint64_t v12 = v10 + 24;
      void v9[6] = v10 + 24;
    }
    void v9[6] = v12;
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_100145FE8();
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_10007BBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v16 + 48) = v15;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007BC20(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 32;
        sub_100013380((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_10007BC90(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_10007BCE4((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10007BCE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    do
    {
      xpc_object_t v6 = *(void **)(v5 - 8);
      v5 -= 8;
      xpc_release(v6);
      *(void *)(v4 - 8) = 0;
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void sub_10007BD40(uint64_t a1, void **a2, void **a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void ***)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)
  {
    sub_10007BE70((uint64_t *)a1);
    if (a4 >> 61) {
      sub_10002B5E0();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_10007BEAC((void *)a1, v12);
    xpc_object_t v13 = sub_10007BEF0(v8, a2, a3, *(void ***)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[v14];
    sub_10007C064((uint64_t)&v17, a2, v15, v9);
    xpc_object_t v13 = sub_10007BEF0(v8, v15, a3, *(void ***)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_10007C064((uint64_t)&v18, a2, a3, v9);
  sub_10007BCE4(a1, v16);
}

void sub_10007BE60(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10007BE68(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10007BE70(uint64_t *a1)
{
  if (*a1)
  {
    sub_10007BCE4((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_10007BEAC(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10002B5E0();
  }
  __n128 result = (char *)sub_100038500((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void **sub_10007BEF0(uint64_t a1, void **a2, void **a3, void **a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  unint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  double v9[2] = &v12;
  if (a2 != a3)
  {
    xpc_object_t v6 = a2;
    do
    {
      sub_10007BF84(a1, v4, v6++);
      uint64_t v4 = ++v12;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10007BFC4((uint64_t)v9);
  return v4;
}

xpc_object_t sub_10007BF84(uint64_t a1, void **a2, void **a3)
{
  uint64_t v3 = *a3;
  *a2 = *a3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t sub_10007BFC4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10007C010(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

void sub_10007C010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3;
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = *(void **)(v7 - 8);
      v7 -= 8;
      xpc_release(v8);
      *(void *)(v6 - 8) = 0;
      uint64_t v6 = v7;
    }
    while (v7 != a5);
  }
}

xpc_object_t *sub_10007C064(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3, void **a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      xpc_object_t v7 = *v5;
      if (*v5) {
        xpc_retain(*v5);
      }
      else {
        xpc_object_t v7 = xpc_null_create();
      }
      uint64_t v8 = *a4;
      *a4 = v7;
      xpc_release(v8);
      ++v5;
      ++a4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void **sub_10007C0E8(uint64_t *a1, void **a2, xpc_object_t *a3, void **a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    xpc_object_t v7 = a3;
    uint64_t v10 = (uint64_t)(a1 + 2);
    uint64_t v9 = a1[2];
    uint64_t v11 = (void **)a1[1];
    if (a5 <= (v9 - (uint64_t)v11) >> 3)
    {
      uint64_t v18 = (char *)v11 - (char *)a2;
      uint64_t v19 = v11 - a2;
      if (v19 >= a5)
      {
        xpc_object_t v20 = &a3[a5];
      }
      else
      {
        xpc_object_t v20 = &a3[v19];
        a1[1] = (uint64_t)sub_10007C3E8((uint64_t)(a1 + 2), v20, a4, v11);
        if (v18 < 1) {
          return v5;
        }
      }
      sub_10007C294((uint64_t)a1, (uint64_t)v5, (unint64_t)v11, (uint64_t)&v5[a5]);
      sub_10007C544((uint64_t)v25, v7, v20, v5);
    }
    else
    {
      uint64_t v12 = *a1;
      unint64_t v13 = a5 + (((uint64_t)v11 - *a1) >> 3);
      if (v13 >> 61) {
        sub_10002B5E0();
      }
      uint64_t v14 = ((uint64_t)a2 - v12) >> 3;
      uint64_t v15 = v9 - v12;
      if (v15 >> 2 > v13) {
        unint64_t v13 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v13;
      }
      v25[4] = a1 + 2;
      if (v16) {
        char v17 = (char *)sub_100038500((uint64_t)(a1 + 2), v16);
      }
      else {
        char v17 = 0;
      }
      xpc_object_t v21 = (void **)&v17[8 * v14];
      v25[0] = v17;
      v25[1] = v21;
      void v25[3] = &v17[8 * v16];
      uint64_t v22 = 8 * a5;
      xpc_object_t v23 = &v21[a5];
      do
      {
        sub_10007C47C(v10, v21++, v7++);
        v22 -= 8;
      }
      while (v22);
      v25[2] = v23;
      uint64_t v5 = (void **)sub_10007C334((uint64_t)a1, (uint64_t)v25, v5);
      sub_10007C824((uint64_t)v25);
    }
  }
  return v5;
}

void sub_10007C274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007C294(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (void *)v6;
  if (v7 < a3)
  {
    uint64_t v10 = (xpc_object_t *)(a2 + v6 - a4);
    uint64_t v8 = *(void **)(a1 + 8);
    do
    {
      void *v8 = *v10;
      *v10++ = xpc_null_create();
      ++v8;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_10007C4BC((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_10007C334(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = a1 + 16;
  sub_10007C5C8(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = sub_10007C67C(v7, a3, *(xpc_object_t **)(a1 + 8), *(xpc_object_t **)(a2 + 16));
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = v11;
  *(void *)a2 = *(void *)(a2 + 8);
  return v6;
}

void **sub_10007C3E8(uint64_t a1, void **a2, void **a3, void **a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  char v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  double v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_10007C47C(a1, v4, v6++);
      uint64_t v4 = ++v12;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10007BFC4((uint64_t)v9);
  return v4;
}

xpc_object_t sub_10007C47C(uint64_t a1, void **a2, void **a3)
{
  uint64_t v3 = *a3;
  *a2 = *a3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t sub_10007C4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v7 = (void **)(a4 - 8);
  for (uint64_t i = a3; i != a2; i -= 8)
  {
    uint64_t v9 = *(void **)(i - 8);
    *(void *)(i - 8) = xpc_null_create();
    char v10 = *v7;
    *v7-- = v9;
    v4 -= 8;
    xpc_release(v10);
  }
  return a3;
}

xpc_object_t *sub_10007C544(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3, void **a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      xpc_object_t v7 = *v5;
      if (*v5) {
        xpc_retain(*v5);
      }
      else {
        xpc_object_t v7 = xpc_null_create();
      }
      uint64_t v8 = *a4;
      *a4 = v7;
      xpc_release(v8);
      ++v5;
      ++a4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_10007C5C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = a3;
    do
    {
      uint64_t v11 = *(void *)(v10 - 8);
      v10 -= 8;
      *(void *)(v7 - 8) = v11;
      *(void *)(v9 - 8) = xpc_null_create();
      uint64_t v7 = *((void *)&v17 + 1) - 8;
      *((void *)&v17 + 1) -= 8;
      uint64_t v9 = v10;
    }
    while (v10 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_10007C710((uint64_t)v14);
  return v12;
}

xpc_object_t *sub_10007C67C(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3, xpc_object_t *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      xpc_object_t *v4 = *v6;
      *v6++ = xpc_null_create();
      uint64_t v4 = ++v11;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_10007BFC4((uint64_t)v8);
  return v4;
}

uint64_t sub_10007C710(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10007C748((uint64_t *)a1);
  }
  return a1;
}

void sub_10007C748(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_10007C7C0(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_10007C7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(xpc_object_t **)(a2 + 32); i != *(xpc_object_t **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    xpc_release(*i);
    xpc_object_t *i = 0;
    uint64_t i = (xpc_object_t *)(*(void *)(a2 + 32) + 8);
  }
}

uint64_t sub_10007C824(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10007C85C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v6 = *(void **)(i - 8);
    uint64_t v5 = (void *)(i - 8);
    *(void *)(a1 + 16) = v5;
    xpc_release(v6);
    *uint64_t v5 = 0;
  }
}

uint64_t sub_10007C8B4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10007C5C8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void **sub_10007C92C(void **result, void **a2, void **a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10007BEAC(result, a4);
    uint64_t result = sub_10007C3E8((uint64_t)(v6 + 2), a2, a3, (void **)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10007C994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10007BC90(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C9B4(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_10002B5E0();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100009078(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000173FC(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  uint64_t v16 = v11 + 24;
  sub_10002F59C(a1, v15);
  uint64_t v13 = a1[1];
  sub_10002F734((uint64_t)v15);
  return v13;
}

void sub_10007CAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002F734((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007CAD8(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_10007CF00(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    uint64_t v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (const void **)a1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        if (sub_1000189DC(a3, v7, v11))
        {
          long long v17 = *(_OWORD *)v10;
          uint64_t v18 = v10[2];
          v10[1] = 0;
          _DWORD v10[2] = 0;
          char *v10 = 0;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            uint64_t v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0) {
              operator delete(*v14);
            }
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 40) = *(void *)(v13 + 16);
            *(unsigned char *)(v13 + 23) = 0;
            *(unsigned char *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (sub_1000189DC(a3, (const void **)&v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }
        uint64_t v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_10007D028(const void **a1, const void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    char v6 = a1;
    uint64_t v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        uint64_t v10 = v6;
        char v6 = v7;
        if (sub_1000189DC(a3, v7, v10))
        {
          long long v16 = *(_OWORD *)v6;
          long long v17 = v6[2];
          v6[1] = 0;
          double v6[2] = 0;
          *char v6 = 0;
          uint64_t v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((unsigned char *)v11 + 47) = 0;
            *((unsigned char *)v11 + 24) = 0;
            BOOL v13 = sub_1000189DC(a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = v11 + 6;
          if (v14 < 0) {
            operator delete((void *)*v15);
          }
          *(_OWORD *)int v15 = v16;
          void v15[2] = v17;
        }
        uint64_t v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t sub_10007D134(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = sub_1000189DC(a4, a2, a1);
  uint64_t result = sub_1000189DC(a4, a3, a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    BOOL v13 = a2[2];
    long long v14 = *(_OWORD *)a2;
    int v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_1000189DC(a4, a2, a1)) {
      return 1;
    }
    long long v16 = a1[2];
    long long v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = a1[2];
    long long v20 = *(_OWORD *)a1;
    xpc_object_t v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_1000189DC(a4, a3, a2)) {
      return 1;
    }
    uint64_t v22 = a2[2];
    long long v23 = *(_OWORD *)a2;
    unint64_t v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  uint64_t v10 = a1[2];
  long long v11 = *(_OWORD *)a1;
  uint64_t v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **sub_10007D280(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v16 = *(_OWORD *)a1;
  long long v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (sub_1000189DC(a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    char v6 = a1;
    do
      v6 += 3;
    while (!sub_1000189DC(a3, (const void **)&v16, v6));
  }
  else
  {
    uint64_t v7 = a1 + 3;
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      BOOL v8 = sub_1000189DC(a3, (const void **)&v16, v7);
      uint64_t v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (sub_1000189DC(a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    long long v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    long long v18 = v9;
    long long v10 = *(_OWORD *)v4;
    double v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)char v6 = v10;
    long long v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!sub_1000189DC(a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (sub_1000189DC(a3, (const void **)&v16, (const void **)v4));
  }
  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0) {
      operator delete(*v12);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((unsigned char *)v6 - 1) = 0;
    *((unsigned char *)v6 - 24) = 0;
  }
  long long v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

unint64_t sub_10007D414(long long *a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  do
    v6 += 24;
  while (sub_1000189DC(a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while (!sub_1000189DC(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!sub_1000189DC(a3, a2, (const void **)&v17));
  }
  unint64_t v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    long long v9 = a2;
    do
    {
      long long v19 = *(_OWORD *)v8;
      long long v10 = v19;
      long long v20 = *(const void **)(v8 + 16);
      long long v11 = v20;
      uint64_t v12 = v9[2];
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = v12;
      double v9[2] = v11;
      *(_OWORD *)long long v9 = v10;
      do
        v8 += 24;
      while (sub_1000189DC(a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_1000189DC(a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  long long v13 = (void **)(v8 - 24);
  if ((long long *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0) {
      operator delete(*v13);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v14 = *(_OWORD *)v13;
    *((void *)a1 + 2) = *(void *)(v8 - 8);
    *a1 = v14;
    *(unsigned char *)(v8 - 1) = 0;
    *(unsigned char *)(v8 - 24) = 0;
  }
  long long v15 = v17;
  *(void *)(v8 - 8) = v18;
  *(_OWORD *)long long v13 = v15;
  return v8 - 24;
}

BOOL sub_10007D5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      if (sub_1000189DC(a3, (const void **)(a2 - 24), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)uint64_t v8 = v10;
        *(void *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      sub_10007D134((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_10007D7F8(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_10007D8E4(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a1 + 72), (long long *)(a2 - 24), a3);
      return 1;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      sub_10007D134((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (sub_1000189DC(a3, (const void **)v13, v12))
    {
      long long v22 = *(_OWORD *)v13;
      uint64_t v23 = *(void *)(v13 + 16);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 88) = *(void *)(v17 + 64);
        *(unsigned char *)(v17 + 71) = 0;
        *(unsigned char *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }
        BOOL v19 = sub_1000189DC(a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 sub_10007D7F8(uint64_t a1, const void **a2, const void **a3, long long *a4, uint64_t a5)
{
  sub_10007D134((const void **)a1, a2, a3, a5);
  if (sub_1000189DC(a5, (const void **)a4, a3))
  {
    uint64_t v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((void *)a4 + 2) = v11;
    if (sub_1000189DC(a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_1000189DC(a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 sub_10007D8E4(uint64_t a1, const void **a2, const void **a3, long long *a4, long long *a5, uint64_t a6)
{
  sub_10007D7F8(a1, a2, a3, a4, a6);
  if (sub_1000189DC(a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    long long v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4 = *a5;
    *((void *)a4 + 2) = v15;
    *a5 = v14;
    *((void *)a5 + 2) = v13;
    if (sub_1000189DC(a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      long long v17 = *(_OWORD *)a3;
      uint64_t v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((void *)a4 + 2) = v16;
      if (sub_1000189DC(a6, a3, a2))
      {
        BOOL v19 = a2[2];
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_1000189DC(a6, a2, (const void **)a1))
        {
          long long v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

long long *sub_10007DA08(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_10007DC54(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (sub_1000189DC(a4, (const void **)v14, (const void **)a1))
        {
          uint64_t v15 = *((void *)v14 + 2);
          long long v16 = *v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *long long v14 = *(_OWORD *)a1;
          *((void *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          sub_10007DC54(a1, a4, v9, (__n128 *)a1);
        }
        long long v14 = (long long *)((char *)v14 + 24);
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = (long long *)((char *)a2 - 24);
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)long long v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v22 = sub_10007DDF0(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (long long *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(unsigned char *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          long long v25 = *v19;
          *(void *)(v23 + 16) = *((void *)v19 + 2);
          *(_OWORD *)uint64_t v23 = v25;
          *(void *)BOOL v19 = v20;
          *((void *)v19 + 1) = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((unsigned char *)v19 + 23) = v21;
          sub_10007DECC(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        BOOL v19 = (long long *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_10007DC3C(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10007DC54(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_1000189DC(a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        uint64_t v12 = v14;
      }
      if (!sub_1000189DC(a2, (const void **)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          long long v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          *unint64_t v7 = v17;
          *(unsigned char *)(v13 + 23) = 0;
          *(unsigned char *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_1000189DC(a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            uint64_t v18 = v19;
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (sub_1000189DC(a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        *long long v16 = result;
      }
    }
  }
  return result;
}

uint64_t sub_10007DDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_1000189DC(a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      uint64_t v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(unsigned char *)(v9 + 23) = 0;
    *(unsigned char *)uint64_t v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double sub_10007DECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * v8);
    uint64_t v10 = (long long *)(a2 - 24);
    if (sub_1000189DC(a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      long long v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      while (1)
      {
        long long v12 = v9;
        if (*((char *)v10 + 23) < 0) {
          operator delete(*(void **)v10);
        }
        long long v13 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        long long *v10 = v13;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!sub_1000189DC(a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0) {
            operator delete(*(void **)v12);
          }
          break;
        }
      }
      double result = *(double *)&v14;
      long long *v12 = v14;
      *((void *)v12 + 2) = v15;
    }
  }
  return result;
}

uint64_t sub_10007DFEC()
{
  sub_100018888(qword_1001D7CD8, "_");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1001D7CD8, (void *)&_mh_execute_header);
  qword_1001D7CF8 = 0;
  unk_1001D7D00 = 0;
  qword_1001D7CF0 = 0;
  uint64_t v0 = operator new(0x40uLL);
  qword_1001D7CF8 = (uint64_t)(v0 + 4);
  unk_1001D7D00 = v0 + 4;
  _OWORD *v0 = *(_OWORD *)&off_1001B8920;
  v0[1] = *(_OWORD *)&off_1001B8930;
  v0[2] = *(_OWORD *)&off_1001B8940;
  v0[3] = *(_OWORD *)&off_1001B8950;
  qword_1001D7CF0 = (uint64_t)v0;

  return __cxa_atexit((void (*)(void *))sub_100078EA8, &qword_1001D7CF0, (void *)&_mh_execute_header);
}

void sub_10007E384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10007E3C4(uint64_t a1)
{
  double v2 = kCLLocationAccuracyBystander;
  id v6 = [*(id *)(a1 + 32) locationManager];
  [v6 setDesiredAccuracy:v2];

  id v7 = +[FMConfiguration sharedInstance];
  id v3 = [v7 coreLocationDistanceFilter];
  uint64_t v4 = [*(id *)(a1 + 32) locationManager];
  [v4 setDistanceFilter:(double)(unint64_t)v3];

  id v8 = [*(id *)(a1 + 32) locationManager];
  [v8 startUpdatingLocation];

  id v9 = [*(id *)(a1 + 32) locationManager];
  [v9 _startLeechingVisits];

  uint64_t v5 = *(void **)(a1 + 32);
  id v10 = [v5 authorizationManager];
  objc_msgSend(v5, "locationManagerDidChangeAuthorization:");
}

void sub_10007E4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10007E504(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained locationManager];
  [v1 _requestVisitState];
}

void sub_10007E55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10007E63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  id v10 = v9;

  a9.super_class = (Class)FMCoreLocationController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_10007E790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E8F8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_10007EBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007EEB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007F000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007F0B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007F264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10007F288(uint64_t a1)
{
  double v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  id v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    sub_10000B678(v4);
  }
  id v6 = (void **)(a1 + 32);
  sub_10000B6EC(&v6);
  return a1;
}

uint64_t sub_10007F2F0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

__n128 sub_10007F2F8@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  *(unsigned char *)(a1 + 1) = 0;
  __n128 result = *(__n128 *)(a1 + 72);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(a1 + 88);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  return result;
}

uint64_t sub_10007F318(uint64_t a1)
{
  return a1 + 96;
}

void sub_10007F320()
{
}

void sub_10007F590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  pthread_mutex_unlock(&stru_1001D6968);
  if (a14) {
    sub_10000B678(a14);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    sub_10000B678(v16);
  }
  _Unwind_Resume(a1);
}

void sub_10007F62C(uint64_t a1)
{
}

void sub_10007F634(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)double v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "submit:#I Initializing SubmitterController", v2, 2u);
  }
}

uint64_t sub_10007F694(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10007F6B0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_10000B678(v1);
  }
}

void sub_10007F6C0(uint64_t a1)
{
  sub_10007F870((void *)(a1 + 8), "SubmitterController", QOS_CLASS_DEFAULT, (const ctu::OsLogLogger *)(qword_1001D8080 + 104));
  *(void *)a1 = off_1001B8C30;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 48) = off_1001B8C80;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  int v3 = 0;
  sCreateBestChoiceMetadataLoaderDelegate();
  sub_1000822CC((uint64_t)&v3, &v4, (void *)(a1 + 128));
  uint64_t v2 = v4;
  uint64_t v4 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_10002BE78();
}

void sub_10007F7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v11 + 136);
  if (v16) {
    sub_10000B678(v16);
  }
  sub_1000810E8(v13, 0);
  a10 = (void **)(v11 + 96);
  sub_10008254C(&a10);
  if (*(char *)(v11 + 95) < 0) {
    operator delete(*v14);
  }
  nullsub_15(v12);
  nullsub_15(v11);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(v11 + 40));
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

void *sub_10007F870(void *a1, const char *a2, dispatch_qos_class_t a3, const ctu::OsLogLogger *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), a4);
  return a1;
}

void sub_10007F8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

void sub_10007F8EC(void *a1)
{
  sub_10007FA30((uint64_t)a1);
  id v6 = a1;
  sub_10007FAF8((uint64_t *)&v6, 0);
  sub_10007FAF8((uint64_t *)&v6, 1u);
  sub_10007FAF8((uint64_t *)&v6, 2u);
  sub_10006FA24();
  sub_10007FAF8((uint64_t *)&v6, 3u);
  uint64_t v2 = a1[12];
  uint64_t v3 = a1[13];
  while (v2 != v3)
  {
    sub_100049604(v2);
    sub_100049644(v2);
    v2 += 64;
  }
  uint64_t v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = (uint64_t)(a1[13] - a1[12]) >> 6;
    *(_DWORD *)std::__fs::filesystem::path buf = 134217984;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "submit:#I SubmitterController has %zd files", buf, 0xCu);
  }
}

void sub_10007FA24(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10001F4A8(a1);
}

const void **sub_10007FA30(uint64_t a1)
{
  char v8 = 1;
  sub_1000B9818(@"Anonymous", &v6);
  sub_100082794(&v7, &v6);
  sub_10001570C(&v6);
  if (v7) {
    uint64_t v3 = sub_1000803D4;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    int v4 = ctu::cf::assign((ctu::cf *)&v8, v7, v2) ^ 1;
    if (v8) {
      LOBYTE(v4) = 1;
    }
  }
  else
  {
    LOBYTE(v4) = 1;
  }
  char v8 = v4;
  *(unsigned char *)(a1 + 61) = v4;
  return sub_100081E20((const void **)&v7);
}

void sub_10007FAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100081E20((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_10007FAF8(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  BOOL result = sub_10009E904(a2);
  if (result) {
    sub_10002C52C(*(void **)(v3 + 144), a2);
  }
  return result;
}

void sub_10007FC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v11 + 104) = v10;
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007FCC4(uint64_t a1)
{
  sub_10000BA54(&v1, (void *)(a1 + 8));
  operator new();
}

void sub_10007FDA4(uint64_t a1)
{
}

void sub_10007FDAC(uint64_t a1, int a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (!a2)
  {
    sub_10007FE20(a1);
    sub_10007FEA4(a1);
  }
}

void sub_10007FE20(uint64_t a1)
{
  uint64_t v3 = a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100083210;
  block[3] = &unk_1001B8FC8;
  void block[4] = a1 + 8;
  void block[5] = &v3;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void sub_10007FEA4(uint64_t a1)
{
  uint64_t v3 = a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000831E0;
  block[3] = &unk_1001B8FA8;
  void block[4] = a1 + 8;
  void block[5] = &v3;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void sub_10007FF28(uint64_t a1, int a2)
{
}

void sub_10007FF30(void *a1)
{
}

void sub_10007FF68(void *a1)
{
  sub_100080744(a1, &dsema);
}

void sub_10007FFCC(uint64_t a1)
{
}

void sub_100080008(uint64_t a1)
{
  sub_10000BA54(&v1, (void *)(a1 + 8));
  operator new();
}

void sub_1000800E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000BA54(&v7, (void *)(a1 + 8));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  double v6[2] = sub_100080218;
  void v6[3] = &unk_1001B8CA8;
  void v6[4] = a1;
  uint64_t v5 = (NSObject **)(v7 + 24);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  double v9[2] = sub_1000826E8;
  void v9[3] = &unk_1001B8F08;
  void v9[5] = v7;
  uint64_t v10 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void v9[4] = v6;
  sub_100123EA0(a3, v5, (uint64_t)v9);
  if (v10) {
    sub_10000B678(v10);
  }
  if (v8) {
    sub_10000B678(v8);
  }
}

void sub_1000801F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_10000B678(a22);
  }
  if (a15) {
    sub_10000B678(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100080218(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "submit:#I Shutting down: flushing files to disk", v5, 2u);
  }
  uint64_t v3 = v1[12];
  uint64_t v4 = v1[13];
  while (v3 != v4)
  {
    sub_10004993C(v3);
    v3 += 64;
  }
}

void sub_100080298(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    sub_10000BA54(&v7, (void *)(a1 + 8));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    double v6[2] = sub_1000803CC;
    void v6[3] = &unk_1001B8CC8;
    void v6[4] = a1;
    uint64_t v5 = (NSObject **)(v7 + 24);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1174405120;
    double v9[2] = sub_1000826E8;
    void v9[3] = &unk_1001B8F08;
    void v9[5] = v7;
    uint64_t v10 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    void v9[4] = v6;
    sub_100123EA0(a3, v5, (uint64_t)v9);
    if (v10) {
      sub_10000B678(v10);
    }
    if (v8) {
      sub_10000B678(v8);
    }
  }
}

void sub_1000803A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_10000B678(a22);
  }
  if (a15) {
    sub_10000B678(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000803CC(uint64_t a1)
{
}

uint64_t sub_1000803D4(uint64_t a1)
{
  return *(void *)a1;
}

void sub_1000803DC(void *a1)
{
}

void sub_100080500(void *a1)
{
}

void sub_100080528(void *a1)
{
  uint64_t v2 = a1[12];
  uint64_t v3 = a1[13];
  while (v2 != v3)
  {
    if (sub_1000495A4(v2)) {
      sub_10004A768(v2);
    }
    v2 += 64;
  }
  uint64_t v4 = (void *)a1[18];

  sub_10002C1D0(v4);
}

void sub_10008058C(void *a1)
{
  uint64_t v2 = a1[12];
  uint64_t v3 = a1[13];
  while (v2 != v3)
  {
    if (sub_1000495B4(v2)) {
      sub_10004A768(v2);
    }
    v2 += 64;
  }
  uint64_t v4 = (void *)a1[18];

  sub_10002CAB0(v4);
}

void sub_1000805F0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3 = (void *)(a1 + 8);
  v4[4] = a1;
  char v5 = a2;
  sub_1000828B0((uint64_t)&v6, a3);
  sub_10000BA54(v4, v3);
  operator new();
}

void sub_100080734(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10001F4A8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100080744(void *a1@<X0>, dispatch_semaphore_t *a2@<X8>)
{
  dispatch_semaphore_t v4 = dispatch_semaphore_create(0);
  *a2 = v4;
  void __p[3] = a1;
  __p[4] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  sub_100018888(__p, "Submit-publish");
  sub_1000035F0();
}

void sub_100080894(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10000BA54(&v3, (void *)(a1 + 8));
  operator new();
}

void sub_100080988(uint64_t a1, ctu *a2)
{
  pthread_mutex_lock(&stru_1001D6A18);
  uint64_t v3 = off_1001D6A58;
  if (!off_1001D6A58) {
    sub_10004F130();
  }
  if (*(&off_1001D6A58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1001D6A58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6A18);
  sub_1000512B4(v3, a2);
}

void sub_100080A48(_Unwind_Exception *a1)
{
}

void sub_100080A7C(uint64_t a1, int a2, unint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v5 = *(void *)(a1 + 96);
  for (uint64_t i = *(void *)(a1 + 104); v5 != i; v5 += 64)
    sub_10004ABCC(v5, a2, a3, a4, a5);
}

void sub_100080AE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return;
  }
  if (!*(unsigned char *)v2 && *(void *)(v2 + 32) == *(void *)(v2 + 40))
  {
    uint64_t v17 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v18 = *(_DWORD *)(v2 + 4);
    int v19 = *(_DWORD *)(v2 + 8);
    int v20 = *(_DWORD *)(v2 + 12);
    int v21 = 67109632;
    int v22 = v18;
    __int16 v23 = 1024;
    int v24 = v19;
    __int16 v25 = 1024;
    int v26 = v20;
    uint64_t v14 = "submit:#I Trigger(cid=0x%x, trid=0x%x, sid=%u): Requested not to publish.";
    uint64_t v15 = v17;
    os_log_type_t v16 = OS_LOG_TYPE_INFO;
    goto LABEL_12;
  }
  sub_100014DA4(a1);
  uint64_t v5 = *(void **)(a1 + 120);
  if (!v5)
  {
    uint64_t v10 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v11 = *(_DWORD *)(*a2 + 4);
    int v12 = *(_DWORD *)(*a2 + 8);
    int v13 = *(_DWORD *)(*a2 + 12);
    int v21 = 67109632;
    int v22 = v11;
    __int16 v23 = 1024;
    int v24 = v12;
    __int16 v25 = 1024;
    int v26 = v13;
    uint64_t v14 = "submit:#E Trigger(cid=0x%x, trid=0x%x, sid=%u): Failed to write because no processor is ready.";
    uint64_t v15 = v10;
    os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v14, (uint8_t *)&v21, 0x14u);
    return;
  }
  unint64_t v6 = *(void *)(*a2 + 4);
  int v7 = *(_DWORD *)(*a2 + 12);
  uint64_t v8 = *(void *)(*a2 + 16);
  id v9 = (uint64_t **)(*a2 + 32);

  sub_1000E7264(v5, a1, v6, v7, v8, v9);
}

void sub_100080C90(uint64_t a1)
{
  uint64_t v2 = dispatch_group_create();
  uint64_t v3 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v3);
    dispatch_release(v3);
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  sub_10000BA54(&v4, (void *)(a1 + 8));
  operator new();
}

void sub_100080DC8()
{
  sub_100018888(&__p, "Submit-publishAndSubmit");
  sub_1000035F0();
}

void sub_100080EC4(void *a1)
{
  void __p[3] = a1;
  sub_100018888(__p, "Submit-now");
  sub_1000035F0();
}

void sub_100080FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10000BA54(&v3, (void *)(a1 + 8));
  operator new();
}

uint64_t sub_1000810E8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1000E7260();
    operator delete();
  }
  return result;
}

void sub_100081138()
{
  sub_100018888(&__p, "Submit-setConfig");
  sub_1000035F0();
}

void sub_1000813B8(void *a1)
{
}

void sub_100081404(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)long long __p = 0u;
  long long v56 = 0u;
  float v57 = 1.0;
  uint64_t v4 = *(int *)(a1 + 80);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(a1 + 72);
    unint64_t v6 = &v5[v4];
    do
    {
      uint64_t v7 = *v5;
      sub_100049120(*(_DWORD *)(*v5 + 8), *(void *)(*v5 + 24), &value);
      unint64_t v8 = *(unsigned int *)(v7 + 12);
      if (v8 == 1)
      {
        if (!*(unsigned char *)(v7 + 20))
        {
LABEL_9:
          unint64_t v8 = 0;
          goto LABEL_10;
        }
        unint64_t v8 = 1;
      }
      else if (v8 != 2)
      {
        if (v8 != 3) {
          goto LABEL_9;
        }
        unint64_t v8 = 3;
      }
LABEL_10:
      unint64_t v9 = (unint64_t)__p[1];
      if (__p[1])
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v8;
          if (__p[1] <= (void *)v8) {
            unint64_t v2 = v8 % (unint64_t)__p[1];
          }
        }
        else
        {
          unint64_t v2 = (LODWORD(__p[1]) + 3) & v8;
        }
        int v11 = (uint64_t ***)*((void *)__p[0] + v2);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = (uint64_t **)*i)
          {
            unint64_t v13 = (unint64_t)i[1];
            if (v13 == v8)
            {
              if (*((unsigned __int8 *)i + 16) == v8) {
                goto LABEL_90;
              }
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if ((void *)v13 >= __p[1]) {
                  v13 %= (unint64_t)__p[1];
                }
              }
              else
              {
                v13 &= (unint64_t)__p[1] - 1;
              }
              if (v13 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v14 = operator new(0x20uLL);
      *(void *)std::__fs::filesystem::path buf = v14;
      *(void *)&uint8_t buf[8] = &v56;
      *uint64_t v14 = 0;
      v14[1] = v8;
      *((unsigned char *)v14 + 16) = v8;
      void v14[3] = 0;
      xpc_object_t v15 = xpc_array_create(0, 0);
      xpc_object_t v16 = v15;
      if (v15)
      {
        void v14[3] = v15;
      }
      else
      {
        xpc_object_t v16 = xpc_null_create();
        void v14[3] = v16;
        if (!v16)
        {
          xpc_object_t v17 = xpc_null_create();
          xpc_object_t v16 = 0;
          goto LABEL_33;
        }
      }
      if (xpc_get_type(v16) != (xpc_type_t)&_xpc_type_array)
      {
        xpc_object_t v17 = xpc_null_create();
LABEL_33:
        void v14[3] = v17;
        goto LABEL_34;
      }
      xpc_retain(v16);
LABEL_34:
      xpc_release(v16);
      uint8_t buf[16] = 1;
      float v18 = (float)(unint64_t)(*((void *)&v56 + 1) + 1);
      if (!v9 || (float)(v57 * (float)v9) < v18)
      {
        BOOL v19 = v9 >= 3 && (v9 & (v9 - 1)) == 0;
        unint64_t v20 = (2 * v9) | !v19;
        unint64_t v21 = vcvtps_u32_f32(v18 / v57);
        if (v20 <= v21) {
          int8x8_t prime = (int8x8_t)v21;
        }
        else {
          int8x8_t prime = (int8x8_t)v20;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }
        unint64_t v9 = (unint64_t)__p[1];
        if ((void *)*(void *)&prime <= __p[1])
        {
          if ((void *)*(void *)&prime < __p[1])
          {
            unint64_t v29 = vcvtps_u32_f32((float)*((unint64_t *)&v56 + 1) / v57);
            if (__p[1] < (void *)3
              || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
            {
              unint64_t v29 = std::__next_prime(v29);
            }
            else
            {
              uint64_t v31 = 1 << -(char)__clz(v29 - 1);
              if (v29 >= 2) {
                unint64_t v29 = v31;
              }
            }
            if (*(void *)&prime <= v29) {
              int8x8_t prime = (int8x8_t)v29;
            }
            if (*(void *)&prime >= v9)
            {
              unint64_t v9 = (unint64_t)__p[1];
            }
            else
            {
              if (prime) {
                goto LABEL_47;
              }
              long long v36 = __p[0];
              __p[0] = 0;
              if (v36) {
                operator delete(v36);
              }
              unint64_t v9 = 0;
              __p[1] = 0;
            }
          }
        }
        else
        {
LABEL_47:
          if (*(void *)&prime >> 61) {
            sub_10002A63C();
          }
          __int16 v23 = operator new(8 * *(void *)&prime);
          int v24 = __p[0];
          __p[0] = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          __p[1] = (void *)prime;
          do
            *((void *)__p[0] + v25++) = 0;
          while (*(void *)&prime != v25);
          int v26 = (void **)v56;
          if ((void)v56)
          {
            unint64_t v27 = *(void *)(v56 + 8);
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *((void *)__p[0] + v27) = &v56;
            for (j = *v26; j; unint64_t v27 = v33)
            {
              unint64_t v33 = j[1];
              if (v28.u32[0] > 1uLL)
              {
                if (v33 >= *(void *)&prime) {
                  v33 %= *(void *)&prime;
                }
              }
              else
              {
                v33 &= *(void *)&prime - 1;
              }
              if (v33 != v27)
              {
                if (!*((void *)__p[0] + v33))
                {
                  *((void *)__p[0] + v33) = v26;
                  goto LABEL_72;
                }
                *int v26 = (void *)*j;
                *unint64_t j = **((void **)__p[0] + v33);
                **((void **)__p[0] + v33) = j;
                unint64_t j = v26;
              }
              unint64_t v33 = v27;
LABEL_72:
              int v26 = (void **)j;
              unint64_t j = (void *)*j;
            }
          }
          unint64_t v9 = (unint64_t)prime;
        }
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v9 <= v8) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 + 3) & v8;
        }
      }
      uint64_t v34 = (void *)*((void *)__p[0] + v2);
      if (v34)
      {
        **(void **)std::__fs::filesystem::path buf = *v34;
        *uint64_t v34 = *(void *)buf;
      }
      else
      {
        **(void **)std::__fs::filesystem::path buf = v56;
        *(void *)&long long v56 = *(void *)buf;
        *((void *)__p[0] + v2) = &v56;
        if (**(void **)buf)
        {
          unint64_t v35 = *(void *)(**(void **)buf + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v35 >= v9) {
              v35 %= v9;
            }
          }
          else
          {
            v35 &= v9 - 1;
          }
          *((void *)__p[0] + v35) = *(void *)buf;
        }
      }
      uint64_t i = *(uint64_t ***)buf;
      *(void *)std::__fs::filesystem::path buf = 0;
      ++*((void *)&v56 + 1);
      sub_1000833F4((uint64_t)buf);
LABEL_90:
      xpc_array_append_value(i[3], value);
      xpc_release(value);
      ++v5;
    }
    while (v5 != v6);
  }
  unsigned __int8 v37 = *(NSObject **)(qword_1001D8080 + 104);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__fs::filesystem::path buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "submit:#I File parsing completed. Stats follow.", buf, 2u);
  }
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  unsigned int v38 = (unsigned __int8 *)v56;
  if ((void)v56)
  {
    while (1)
    {
      unsigned __int8 v39 = *(NSObject **)(qword_1001D8080 + 104);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        BOOL v40 = sub_1000AA324(v38[16]);
        size_t count = xpc_array_get_count(*((xpc_object_t *)v38 + 3));
        *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
        *(void *)&uint8_t buf[4] = v40;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = count;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "submit:#I  - %s: %zd fragments", buf, 0x16u);
      }
      xpc_object_t v42 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v43 = v42;
      if (v42)
      {
        xpc_object_t value = v42;
      }
      else
      {
        xpc_object_t v43 = xpc_null_create();
        xpc_object_t value = v43;
        if (!v43)
        {
          xpc_object_t v44 = xpc_null_create();
          xpc_object_t v43 = 0;
          goto LABEL_113;
        }
      }
      if (xpc_get_type(v43) != (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v44 = xpc_null_create();
LABEL_113:
        xpc_object_t value = v44;
        goto LABEL_114;
      }
      xpc_retain(v43);
LABEL_114:
      xpc_release(v43);
      id v45 = (void *)*((void *)v38 + 3);
      xpc_object_t v52 = v45;
      if (v45) {
        xpc_retain(v45);
      }
      else {
        xpc_object_t v52 = xpc_null_create();
      }
      *(void *)std::__fs::filesystem::path buf = &value;
      *(void *)&uint8_t buf[8] = "files";
      sub_10007A1B0((uint64_t)buf, &v52, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v52);
      xpc_object_t v52 = 0;
      *(void *)std::__fs::filesystem::path buf = v38 + 16;
      int v46 = sub_100083440(a2, v38 + 16, (uint64_t)&unk_1001793E0, (unsigned char **)buf);
      double v47 = (uint64_t *)value;
      if (value) {
        xpc_retain(value);
      }
      else {
        double v47 = (uint64_t *)xpc_null_create();
      }
      __int16 v48 = v46[3];
      void v46[3] = v47;
      xpc_release(v48);
      xpc_release(value);
      unsigned int v38 = *(unsigned __int8 **)v38;
      if (!v38)
      {
        id v49 = (xpc_object_t *)v56;
        if ((void)v56)
        {
          do
          {
            __int16 v50 = (xpc_object_t *)*v49;
            xpc_release(v49[3]);
            operator delete(v49);
            id v49 = v50;
          }
          while (v50);
        }
        break;
      }
    }
  }
  uint64_t v51 = __p[0];
  __p[0] = 0;
  if (v51) {
    operator delete(v51);
  }
}

void sub_100081B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
  {
    sub_1000833F4((uint64_t)&a21);
    sub_10001F4A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100081BEC(uint64_t a1)
{
  sub_100081ED8(a1);

  operator delete();
}

uint64_t sub_100081C24(uint64_t a1)
{
  return sub_100081ED8(a1 - 48);
}

void sub_100081C2C(uint64_t a1)
{
  sub_100081ED8(a1 - 48);

  operator delete();
}

uint64_t sub_100081C68(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100081D18((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100081CE0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_10002A63C();
  }
  return operator new(a2 << 6);
}

uint64_t sub_100081D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      uint64_t v13 = a3 + v11;
      ctu::OsLogLogger::OsLogLogger();
      uint64_t v14 = *(void *)(a3 + v11 - 56);
      *(void *)(v13 - 56) = 0;
      *(void *)(v12 - 56) = v14;
      uint64_t v15 = *(void *)(a3 + v11 - 32);
      *(_OWORD *)(v12 - 48) = *(_OWORD *)(a3 + v11 - 48);
      *(void *)(v12 - 32) = v15;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 16) = 0;
      *(void *)(v12 - 8) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)(a3 + v11 - 24);
      *(void *)(v12 - 8) = *(void *)(a3 + v11 - 8);
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 8) = 0;
      v11 -= 64;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

uint64_t sub_100081DD0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    sub_1000495A0(i - 64);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const void **sub_100081E20(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_100081E54(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100081ED8(uint64_t a1)
{
  *(void *)a1 = off_1001B8C30;
  uint64_t v2 = a1 + 48;
  *(void *)(a1 + 48) = off_1001B8C80;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 168);
  if (v3) {
    sub_10000B678(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    sub_10000B678(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 136);
  if (v5) {
    sub_10000B678(v5);
  }
  sub_1000810E8((uint64_t *)(a1 + 120), 0);
  uint64_t v7 = (void **)(a1 + 96);
  sub_10008254C(&v7);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  nullsub_15(v2);
  nullsub_15(a1);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100029804((void *)(a1 + 8));
  return a1;
}

void sub_100081FB4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100082034(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_10008210C);
  __cxa_rethrow();
}

void sub_10008205C(_Unwind_Exception *a1)
{
}

void sub_100082074(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000820AC(uint64_t a1)
{
}

uint64_t sub_1000820C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10008210C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100082138(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t result = std::uncaught_exceptions();
  if (result) {
    std::terminate();
  }
  return result;
}

uint64_t sub_100082184(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000821A0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_1000821B0(void *a1)
{
  *a1 = off_1001B8E68;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_1000821FC(void *a1)
{
  *a1 = off_1001B8E68;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10000B678(v1);
  }

  operator delete();
}

void *sub_100082268@<X0>(void *a1@<X8>)
{
  return sub_100018888(a1, "SubmitterController");
}

unsigned char *sub_100082278@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 3;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_1000822B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000822C4(uint64_t a1, int a2, uint64_t a3)
{
}

void *sub_1000822CC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  uint64_t result = sub_100082330(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10008231C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100082330(void *a1, uint64_t a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B8EC0;
  sub_100082444((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_100082390(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000823A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B8EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000823C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B8EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100082418(uint64_t a1)
{
  return sub_1000824D0((uint64_t)&v2, (uint64_t *)(a1 + 24));
}

uint64_t sub_100082444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  uint64_t v6 = v4;
  WISMetadataLoader::WISMetadataLoader();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void sub_1000824B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100146204(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000824D0(uint64_t a1, uint64_t *a2)
{
  sub_100038238((uint64_t)(a2 + 4));
  uint64_t v3 = (std::__shared_weak_count *)a2[3];
  if (v3) {
    sub_10000B678(v3);
  }
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    char v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

void sub_10008254C(void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    char v5 = v2;
    if (v4 != v2)
    {
      do
        sub_1000495A0((uint64_t)v4 - 64);
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1000825D0(uint64_t **a1)
{
  char v5 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 104);
  while (v3 != v4)
  {
    sub_1000495C8(v3, *((unsigned __int8 *)v1 + 8));
    v3 += 64;
  }
  *(unsigned char *)(v2 + 60) = *((unsigned char *)v1 + 8);
  if (!std::uncaught_exceptions()) {
    operator delete();
  }
  std::terminate();
}

void sub_10008265C(uint64_t **a1)
{
  uint64_t v4 = a1;
  uint64_t v1 = **a1;
  *(unsigned char *)(v1 + 63) = *((unsigned char *)*a1 + 8);
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 104);
  while (v2 != v3)
  {
    sub_100049644(v2);
    v2 += 64;
  }
  if (!std::uncaught_exceptions()) {
    operator delete();
  }
  std::terminate();
}

void sub_1000826E8(uint64_t a1, NSObject **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  dispatch_group_t group = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
}

void sub_100082744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100082768(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100082784(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_100082794(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 == CFBooleanGetTypeID()) {
      char v5 = v3;
    }
    else {
      char v5 = 0;
    }
  }
  else
  {
    char v5 = 0;
  }

  return sub_1000827F8(a1, v5);
}

void *sub_1000827F8(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void sub_100082830(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B8F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100082850(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B8F48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000828A4(uint64_t a1)
{
  return sub_10007F288(a1 + 24);
}

uint64_t sub_1000828B0(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    CFTypeRef v3 = (void *)(a1 + 24);
  }
  *CFTypeRef v3 = 0;
  return a1;
}

uint64_t *sub_100082930(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(void **)v1;
  sub_1000B9818(@"AppleCarePublishOnGet", (CFPropertyListRef *)buf);
  sub_100082794(&v12, (CFTypeRef *)buf);
  sub_10001570C((const void **)buf);
  if (v12) {
    CFTypeRef v3 = sub_1000803D4;
  }
  else {
    CFTypeRef v3 = 0;
  }
  if (!v3 || CFEqual(v12, kCFBooleanTrue))
  {
    uint64_t v4 = v2[5];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::__fs::filesystem::path buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "submit:#I Closing AC files prior to returning them to API", buf, 2u);
    }
    sub_10008058C(v2);
  }
  sub_10002CB88(v2[18], *(unsigned char *)(v1 + 8), buf);
  memset(v9, 0, sizeof(v9));
  sub_100082B7C((char *)v9, *(long long **)buf, v11, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *(void *)buf) >> 3));
  uint64_t v5 = *(void *)(v1 + 40);
  if (!v5) {
    sub_100029F0C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 48))(v5, v9);
  uint64_t v13 = (uint8_t *)v9;
  sub_10002F868((void ***)&v13);
  uint64_t v13 = buf;
  sub_10002F868((void ***)&v13);
  sub_100081E20(&v12);
  if (std::uncaught_exceptions()) {
    std::terminate();
  }
  sub_100082B2C(&v8);
  return sub_10000BA00((uint64_t *)&v7);
}

uint64_t *sub_100082B2C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_100081E54((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

char *sub_100082B7C(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100082C04(result, a4);
    uint64_t result = sub_100082C58((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_100082BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10002F868(&a9);
  _Unwind_Resume(a1);
}

char *sub_100082C04(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_10002B5E0();
  }
  uint64_t result = (char *)sub_100009078((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

char *sub_100082C58(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  double v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1000173FC(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      uint64_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_100082D18((uint64_t)v9);
  return v4;
}

void sub_100082D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100082D18(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100082D50(a1);
  }
  return a1;
}

void sub_100082D50(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void sub_100082D98(void *a1)
{
  uint64_t v1 = (void **)*a1;
  uint64_t v2 = a1;
  CFTypeRef v3 = v1;
  sub_1000803DC(*v1);
}

uint64_t *sub_100082EAC(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 24);
    if (v2) {
      sub_10000B678(v2);
    }
    CFTypeRef v3 = *(NSObject **)(v1 + 8);
    if (v3) {
      dispatch_release(v3);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100082F0C(void **a1)
{
  uint64_t v1 = *a1;
  CFTypeRef v3 = a1;
  uint64_t v4 = v1;
  (*(void (**)(void, void *))(*(void *)*v1 + 56))(*v1, v1 + 1);
  if (std::uncaught_exceptions()) {
    std::terminate();
  }
  sub_100072414((uint64_t *)&v4);
  return sub_10000BA00((uint64_t *)&v3);
}

void sub_100082FA0(void **a1)
{
  uint64_t v9 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)**a1;
  CFTypeRef v3 = v2[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = (uint64_t)(v2[13] - v2[12]) >> 6;
    *(_DWORD *)std::__fs::filesystem::path buf = 134217984;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "submit:#I Flushing %zu files to disk", buf, 0xCu);
  }
  uint64_t v5 = v2[12];
  uint64_t v6 = v2[13];
  while (v5 != v6)
  {
    sub_10004993C(v5);
    v5 += 64;
  }
  if (!std::uncaught_exceptions())
  {
    long long v7 = v1[1];
    if (v7)
    {
      dispatch_group_leave(v7);
      uint64_t v8 = v1[1];
      if (v8) {
        dispatch_release(v8);
      }
    }
    operator delete();
  }
  std::terminate();
}

void sub_1000830B8(uint64_t a1)
{
}

void sub_100083138(uint64_t *a1)
{
  uint64_t v5 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = *(NSObject **)(*(void *)*a1 + 40);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
  if (v3)
  {
    *(_WORD *)std::__fs::filesystem::path buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "submit:#I Calling sTriggerDiagnosticsUpload only", buf, 2u);
  }
  nullsub_15(v3);
  if (!std::uncaught_exceptions())
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4) {
      sub_10000B678(v4);
    }
    operator delete();
  }
  std::terminate();
}

uint64_t sub_1000831E0(uint64_t a1)
{
  sub_10002C0D0(*(void *)(**(void **)(a1 + 40) + 144));
  uint64_t result = std::uncaught_exceptions();
  if (result) {
    std::terminate();
  }
  return result;
}

uint64_t sub_100083210(uint64_t a1)
{
  sub_10002C150(*(void *)(**(void **)(a1 + 40) + 144));
  uint64_t result = std::uncaught_exceptions();
  if (result) {
    std::terminate();
  }
  return result;
}

void sub_100083240(uint64_t **a1)
{
  long long v7 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 168);
  *(void *)(v2 + 160) = v3;
  *(void *)(v2 + 168) = v4;
  if (v5) {
    sub_10000B678(v5);
  }
  if (!std::uncaught_exceptions())
  {
    uint64_t v6 = (std::__shared_weak_count *)v1[2];
    if (v6) {
      sub_10000B678(v6);
    }
    operator delete();
  }
  std::terminate();
}

uint64_t sub_1000832CC(uint64_t a1)
{
  sub_100083308(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100083308(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_10008334C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_10008334C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
}

void sub_10008337C(uint64_t **a1)
{
  uint64_t v4 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  *(unsigned char *)(v2 + 62) = 0;
  sub_1000810E8((uint64_t *)(v2 + 120), 0);
  if (!std::uncaught_exceptions())
  {
    uint64_t v3 = (std::__shared_weak_count *)v1[2];
    if (v3) {
      sub_10000B678(v3);
    }
    operator delete();
  }
  std::terminate();
}

uint64_t sub_1000833F4(uint64_t a1)
{
  uint64_t v2 = *(xpc_object_t **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      xpc_release(v2[3]);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t **sub_100083440(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v11 = (unint64_t)i[1];
        if (v11 == v6)
        {
          if (*((unsigned __int8 *)i + 16) == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_10008368C(a1, *a2, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_10002D4B4(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  float v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    void *v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  uint64_t i = (uint64_t **)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_100083700((uint64_t)v21, 0);
  return i;
}

void sub_100083674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100083700((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

xpc_object_t sub_10008368C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x20uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  *((unsigned char *)v8 + 16) = **a3;
  xpc_object_t result = xpc_null_create();
  void v8[3] = result;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100083700(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10008334C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_100083758()
{
  if ((byte_1001D69B8 & 1) == 0)
  {
    byte_1001D69B8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100029800, &stru_1001D6968, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100083794()
{
  if ((byte_1001D6B18 & 1) == 0)
  {
    byte_1001D6B18 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E68, &stru_1001D6AC8, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000837D0()
{
  if ((byte_1001D6A68 & 1) == 0)
  {
    byte_1001D6A68 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E60, &stru_1001D6A18, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10008380C()
{
  if ((byte_1001D6A10 & 1) == 0)
  {
    byte_1001D6A10 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E5C, &stru_1001D69C0, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1000839DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100083B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100083C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100083C6C(uint64_t a1, xpc_object_t *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1001B8FF8;
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_dictionary)
  {
    *(_DWORD *)(a1 + 8) = xpc_dictionary_get_int64(*a2, "WISMessageComponentId");
    *(_DWORD *)(a1 + 16) = xpc_dictionary_get_int64(*a2, "WISMessageTriggerId");
    *(_DWORD *)(a1 + 20) = xpc_dictionary_get_int64(*a2, "WISMessageSubmisssionId");
    *(_DWORD *)(a1 + 12) = xpc_dictionary_get_int64(*a2, "WISMessageTriggeringComponentId");
  }
  return a1;
}

void sub_100083D20(unsigned int *a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "WISMessageType", 3);
    xpc_dictionary_set_int64(v5, "WISMessageComponentId", a1[2]);
    xpc_dictionary_set_int64(v5, "WISMessageTriggerId", a1[4]);
    xpc_dictionary_set_int64(v5, "WISMessageSubmisssionId", a1[5]);
    xpc_dictionary_set_int64(v5, "WISMessageTriggeringComponentId", a1[3]);
    *a2 = v5;
    if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary) {
      xpc_retain(v5);
    }
    else {
      *a2 = xpc_null_create();
    }
    xpc_release(v5);
  }
  else
  {
    *a2 = xpc_null_create();
  }
}

uint64_t sub_100083E14(uint64_t a1)
{
  return *(void *)(a1 + 12);
}

void sub_100083E28()
{
}

void sub_100083E3C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D7D98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001D7D98))
  {
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D08, "com.apple.wis.wirelessinsightsd", "config");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D10, "com.apple.wis.wirelessinsightsd", "conn");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D18, "com.apple.wis.wirelessinsightsd", "file");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D20, "com.apple.wis.wirelessinsightsd", "file.helpers");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D28, "com.apple.wis.wirelessinsightsd", "life");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D30, "com.apple.wis.wirelessinsightsd", "loc");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D38, "com.apple.wis.wirelessinsightsd", "main");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D40, "com.apple.wis.wirelessinsightsd", "metric");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D48, "com.apple.wis.wirelessinsightsd", "persist");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D50, "com.apple.wis.wirelessinsightsd", "power");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D58, "com.apple.wis.wirelessinsightsd", "prefs");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D60, "com.apple.wis.wirelessinsightsd", "rule");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D68, "com.apple.wis.wirelessinsightsd", "sanitize");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D70, "com.apple.wis.wirelessinsightsd", "submit");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D78, "com.apple.wis.wirelessinsightsd", "providers");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D80, "com.apple.wis.wirelessinsightsd", "abm");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D88, "com.apple.wis.wirelessinsightsd", "insight.config");
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_1001D7D90, "com.apple.wis.wirelessinsightsd", "federated.mobility");
    __cxa_atexit((void (*)(void *))sub_1000841E4, &unk_1001D7D08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001D7D98);
  }
  qword_1001D8080 = (uint64_t)&unk_1001D7D08;
}

void sub_100084078(_Unwind_Exception *a1)
{
}

void sub_10008417C()
{
}

void sub_100084184()
{
}

void sub_10008418C()
{
}

void sub_100084194()
{
}

void sub_10008419C()
{
}

void sub_1000841A4()
{
}

void sub_1000841AC()
{
}

void sub_1000841B4()
{
}

void sub_1000841BC()
{
}

void sub_1000841C4()
{
}

void sub_1000841CC()
{
}

void sub_1000841D4()
{
}

void sub_1000841DC()
{
}

void sub_1000841E8(uint64_t a1)
{
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 136));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 128));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 120));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 112));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 104));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 96));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 88));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 80));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 72));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 64));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 56));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 48));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 32));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 24));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 16));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 8));

  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)a1);
}

uint64_t sub_1000842A4(uint64_t result, int a2)
{
  *(void *)uint64_t result = off_1001B9038;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_1000842C8(uint64_t a1, xpc_object_t *a2)
{
  *(void *)a1 = off_1001B9038;
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_dictionary) {
    *(_DWORD *)(a1 + 8) = xpc_dictionary_get_int64(*a2, "WISMessageControlMessageType");
  }
  return a1;
}

void sub_10008433C(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v11 = xpc_int64_create(7);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  uint64_t v9 = a2;
  char v10 = "WISMessageType";
  sub_100014D08((uint64_t)&v9, &v11, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_object_t v7 = xpc_int64_create(*(int *)(a1 + 8));
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  uint64_t v9 = a2;
  char v10 = "WISMessageControlMessageType";
  sub_100014D08((uint64_t)&v9, &v7, &v8);
  xpc_release(v8);
  xpc_object_t v8 = 0;
  xpc_release(v7);
}

void sub_1000844A8()
{
}

void sub_1000844BC(int a1@<W0>, void *a2@<X2>, void **a3@<X8>)
{
  xpc_object_t v7 = +[NSData dataWithBytesNoCopy:*a2 length:a2[1] - *a2 freeWhenDone:0];
  if (v7)
  {
    sub_1000AA34C();
    sub_1000AA0A0(a1, (uint64_t)__p);
    xpc_object_t v8 = *(NSObject **)(qword_1001D8080 + 24);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = __p;
      if (SHIBYTE(v22) < 0) {
        uint64_t v9 = (void **)__p[0];
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315138;
      int v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "file.helpers:#N Publishing %s", buf, 0xCu);
    }
    if (SHIBYTE(v22) >= 0) {
      char v10 = __p;
    }
    else {
      char v10 = (void **)__p[0];
    }
    xpc_object_t v11 = +[NSString stringWithUTF8String:v10];
    id v20 = 0;
    unsigned __int8 v12 = [v7 writeToFile:v11 options:sub_10006FAB4(a1) | 1 error:&v20];
    id v13 = v20;

    if (v12)
    {
      *(_OWORD *)a3 = *(_OWORD *)__p;
      a3[2] = v22;
      a3 = __p;
    }
    else
    {
      BOOL v14 = *(NSObject **)(qword_1001D8080 + 24);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = [v13 domain];
        unint64_t v16 = (void **)[v15 UTF8String];
        id v17 = [v13 code];
        id v18 = [v13 localizedDescription];
        id v19 = [v18 UTF8String];
        *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
        int v26 = v16;
        __int16 v27 = 2048;
        id v28 = v17;
        __int16 v29 = 2080;
        id v30 = v19;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "file.helpers:#E Failed to publish: %s:%ld (%s)", buf, 0x20u);
      }
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;

    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0) {
      operator delete(v23);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_10008475C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10001F4A8(a1);
}

uint64_t sub_100084768(uint64_t result, int a2)
{
  *(void *)uint64_t result = off_1001B9078;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_10008478C(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    xpc_object_t v5 = v4;
    xpc_dictionary_set_int64(v4, "WISMessageType", 13);
    xpc_dictionary_set_int64(v5, "WISMessageTimerId", *(unsigned int *)(a1 + 8));
    *a2 = v5;
    if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary) {
      xpc_retain(v5);
    }
    else {
      *a2 = xpc_null_create();
    }
    xpc_release(v5);
  }
  else
  {
    *a2 = xpc_null_create();
  }
}

void sub_100084848()
{
}

void sub_1000848E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100084A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100084BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100084BF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  xpc_object_t v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  if (v7)
  {
    [*(id *)(a1 + 40) setObject:v7 forKeyedSubscript:v5];
  }
  else
  {
    xpc_object_t v8 = *(NSObject **)(qword_1001D8080 + 136);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412546;
      id v10 = v5;
      __int16 v11 = 2112;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "FederatedMobility[FMConfiguration]:#N Missing config value for key %@, using default %@", (uint8_t *)&v9, 0x16u);
    }
    [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v5];
  }
}

void sub_100084D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000860A4(id a1, NSString *a2, id a3, BOOL *a4)
{
  id v6 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_10014630C((uint64_t)a2, (uint64_t)a3, v6);
  }
}

void sub_1000861EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100086210(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  xpc_object_t v7 = [*(id *)(a1 + 32) configAsDict];
  xpc_object_t v8 = [v7 objectForKeyedSubscript:v6];

  int v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:v6];
  id v10 = v9;
  if (!v8)
  {
    id v13 = *(NSObject **)(qword_1001D8080 + 136);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_100146394((uint64_t)v6, v13);
    }
    goto LABEL_11;
  }
  if (!v9)
  {
    __int16 v11 = *(NSObject **)(qword_1001D8080 + 136);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v14 = 138412290;
      id v15 = v6;
      id v12 = "FederatedMobility[FMConfiguration]:#I Key %@ missing in other config during compatibility check";
      goto LABEL_10;
    }
LABEL_11:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    *a4 = 1;
    goto LABEL_12;
  }
  if (([v9 isEqual:v8] & 1) == 0)
  {
    __int16 v11 = *(NSObject **)(qword_1001D8080 + 136);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v14 = 138412290;
      id v15 = v6;
      id v12 = "FederatedMobility[FMConfiguration]:#I Key %@ has different value in other config during compatibility check";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v12, (uint8_t *)&v14, 0xCu);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
LABEL_12:
}

void sub_1000863B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100086618@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (a1 == 3 || a1 == 2)
  {
    id v5 = (char *)sub_1000A1110();
    sub_100018888(a2, v5);
    ctu::path_join_impl();
    return ctu::path_join_impl();
  }
  else
  {
    uint64_t v3 = (char *)sub_1000A1110();
    sub_100018888(a2, v3);
    return ctu::path_join_impl();
  }
}

void sub_1000866EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100086714@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)sub_1000A1110();
  sub_100018888(a1, v2);
  return ctu::path_join_impl();
}

void sub_100086750(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10008676C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)sub_1000A1110();

  return sub_100018888(a1, v2);
}

void sub_100086874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100086AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100086B0C()
{
}

void sub_100086CB0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&stru_1001D6968);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10000B678(v3);
  }
  _Unwind_Resume(a1);
}

void *sub_100086D3C(void *a1, const char *a2, dispatch_qos_class_t a3, const char *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.wis.wirelessinsightsd", a4);
  return a1;
}

void sub_100086D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_100086DC4(uint64_t a1)
{
  uint64_t v2 = nullsub_15(a1);
  uint64_t v3 = (void *)(v2 + 8);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(v2 + 40));
  sub_100029804(v3);
  return a1;
}

void sub_100086E00(uint64_t a1)
{
  uint64_t v1 = nullsub_15(a1);
  uint64_t v2 = (void *)(v1 + 8);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(v1 + 40));
  sub_100029804(v2);

  operator delete();
}

uint64_t sub_100086E5C(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)xpc_object_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "timer:#I Init TimersManager", v4, 2u);
  }
  return nullsub_15(a1);
}

void sub_100086EC8(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "timer:#I Starting TimersManager", v3, 2u);
  }
  sub_100052CDC(a1);
}

void sub_100086F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000BA54(&v5, (void *)(a1 + 8));
  xpc_object_t v4 = (NSObject **)(v5 + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1174405120;
  _DWORD v7[2] = sub_1000889B4;
  v7[3] = &unk_1001B9418;
  void v7[5] = v5;
  xpc_object_t v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void v7[4] = &stru_1001B9200;
  sub_100123D98(a3, v4, (uint64_t)v7);
  if (v8) {
    sub_10000B678(v8);
  }
  if (v6) {
    sub_10000B678(v6);
  }
}

void sub_100086FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_10000B678(a18);
  }
  if (a11) {
    sub_10000B678(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100087024(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 2)
  {
    sub_10000BA54(&v9, (void *)(a1 + 8));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 0x40000000;
    void v8[2] = sub_100087264;
    void v8[3] = &unk_1001B9240;
    v8[4] = a1;
    xpc_object_t v7 = (NSObject **)(v9 + 24);
    int v14 = _NSConcreteStackBlock;
    uint64_t v15 = 1174405120;
    unint64_t v16 = sub_1000889F0;
    id v17 = &unk_1001B9450;
    uint64_t v19 = v9;
    id v20 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v18 = v8;
    sub_100123EA0(a3, v7, (uint64_t)&v14);
    if (v20) {
      sub_10000B678(v20);
    }
    id v6 = v10;
    if (v10) {
      goto LABEL_8;
    }
  }
  else if (!a2)
  {
    sub_10000BA54(&v12, (void *)(a1 + 8));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 0x40000000;
    _DWORD v11[2] = sub_10008725C;
    void v11[3] = &unk_1001B9220;
    void v11[4] = a1;
    uint64_t v5 = (NSObject **)(v12 + 24);
    int v14 = _NSConcreteStackBlock;
    uint64_t v15 = 1174405120;
    unint64_t v16 = sub_1000889F0;
    id v17 = &unk_1001B9450;
    uint64_t v19 = v12;
    id v20 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v18 = v11;
    sub_100123EA0(a3, v5, (uint64_t)&v14);
    if (v20) {
      sub_10000B678(v20);
    }
    id v6 = v13;
    if (v13) {
LABEL_8:
    }
      sub_10000B678(v6);
  }
}

void sub_10008721C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  id v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18) {
    sub_10000B678(v18);
  }
  if (a16) {
    sub_10000B678(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008725C(uint64_t a1)
{
  return sub_100086E5C(*(void *)(a1 + 32));
}

void sub_100087264(uint64_t a1)
{
}

void sub_10008726C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    sub_100018888(&v3, "Timer-setConfig");
    sub_1000035F0();
  }
}

void sub_1000873F4(void *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_10000B678(v3);
  }
  sub_10001F4A8(a1);
}

void sub_10008742C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10000B678(a11);
  }
  id v13 = *(std::__shared_weak_count **)(v11 - 88);
  if (v13) {
    sub_10000B678(v13);
  }
  _Unwind_Resume(a1);
}

void sub_100087450(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 208))
  {
    pthread_mutex_lock(&stru_1001D69C0);
    uint64_t v4 = xmmword_1001D6A00;
    if (!(void)xmmword_1001D6A00) {
      sub_1000781CC();
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
    if (*((void *)&xmmword_1001D6A00 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D69C0);
    sub_1000A4144(v4, &v12);
    if (v5) {
      sub_10000B678(v5);
    }
    id v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = (v12[1] - *v12) >> 4;
      *(_DWORD *)std::__fs::filesystem::path buf = 134217984;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "timer:#I Destroying old timers (%zd expected to be cleared)", buf, 0xCu);
    }
    uint64_t v8 = *v12;
    uint64_t v9 = v12[1];
    while (v8 != v9)
    {
      sub_100053ED4(a1, *(void *)v8, (ctu *)*(unsigned int *)(v8 + 8));
      v8 += 16;
    }
    if (*(_DWORD *)(a2 + 16))
    {
      sub_100054044(a1);
      id v10 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::__fs::filesystem::path buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "timer:#I Creating new timers.", buf, 2u);
      }
      pthread_mutex_lock(&stru_1001D69C0);
      if (!(void)xmmword_1001D6A00) {
        sub_1000781CC();
      }
      if (*((void *)&xmmword_1001D6A00 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&stru_1001D69C0);
      sub_1000A4060();
    }
    uint64_t v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::__fs::filesystem::path buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "timer:#N The device config is empty; no timers will be set up",
        buf,
        2u);
    }
    sub_100053F50();
    if (v13) {
      sub_10000B678(v13);
    }
  }
}

void sub_100087850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10000B678(a10);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100087904(uint64_t a1, int a2, uint64_t a3)
{
  if (a3 > 999)
  {
    pthread_mutex_lock(&stru_1001D69C0);
    uint64_t v5 = xmmword_1001D6A00;
    if (!(void)xmmword_1001D6A00) {
      sub_1000781CC();
    }
    id v6 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
    if (*((void *)&xmmword_1001D6A00 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D69C0);
    int v7 = sub_1000A3550(v5);
    if (v6) {
      sub_10000B678(v6);
    }
    pthread_mutex_lock(&stru_1001D69C0);
    uint64_t v8 = xmmword_1001D6A00;
    if (!(void)xmmword_1001D6A00) {
      sub_1000781CC();
    }
    if (*((void *)&xmmword_1001D6A00 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D69C0);
    sub_1000A3F60(v8, a3 / 1000, a2, v7);
  }
  uint64_t v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134217984;
    uint64_t v12 = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "timer:#E Timer interval of %lldms not supported.", (uint8_t *)&v11, 0xCu);
  }
  return a3 > 999;
}

void sub_100087B20(_Unwind_Exception *a1)
{
}

void sub_100087B88()
{
  sub_100018888(&__p, "Timer-setPub");
  sub_1000035F0();
}

void sub_100087CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100087D08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v2 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  int v4 = sub_1000A3E3C(v2);
  if (v3) {
    sub_10000B678(v3);
  }
  if (v4)
  {
    sub_100052CE0(v1, 1);
  }
  else
  {
    uint64_t v5 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v6) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "timer:#I setPublicationTimer: timers are disabled; nothing to do",
        (uint8_t *)&v6,
        2u);
    }
  }
}

void sub_100087E18(_Unwind_Exception *a1)
{
}

void sub_100087E4C(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4) = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "timer:#N Publication timer fired: submitting logs", (uint8_t *)&v4, 2u);
  }
  pthread_mutex_lock(&stru_1001D6C28);
  uint64_t v2 = xmmword_1001D6C68;
  if (!(void)xmmword_1001D6C68) {
    sub_10007F320();
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6C68 + 1);
  if (*((void *)&xmmword_1001D6C68 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6C68 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6C28);
  sub_10007FF68(v2);
  if (v3) {
    sub_10000B678(v3);
  }
}

void sub_100087F38(_Unwind_Exception *a1)
{
}

void sub_100087F58(uint64_t a1, uint64_t a2, ctu *a3, int a4)
{
  uint64_t v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v15 = 134218496;
    *(void *)&v15[4] = a2;
    *(_WORD *)&v15[12] = 1024;
    *(_DWORD *)&v15[14] = a3;
    __int16 v16 = 1024;
    int v17 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "timer:#I Job ctx is %lld sec, trid=0x%x, dcid=%d", v15, 0x18u);
  }
  if (a2 >= 1 && a3 && a4)
  {
    pthread_mutex_lock(&stru_1001D69C0);
    uint64_t v9 = xmmword_1001D6A00;
    if (!(void)xmmword_1001D6A00) {
      sub_1000781CC();
    }
    id v10 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
    if (*((void *)&xmmword_1001D6A00 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D69C0);
    int v11 = sub_1000A3550(v9);
    if (v10) {
      sub_10000B678(v10);
    }
    uint64_t v12 = *(NSObject **)(a1 + 40);
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
    if (v11 == a4)
    {
      if (v13)
      {
        *(_DWORD *)uint64_t v15 = 67109120;
        *(_DWORD *)&v15[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "timer:#I Executing timer callback for trigger 0x%x", v15, 8u);
      }
      pthread_mutex_lock(&stru_1001D6A18);
      uint64_t v14 = off_1001D6A58;
      if (!off_1001D6A58) {
        sub_10004F130();
      }
      if (*(&off_1001D6A58 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1001D6A58 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&stru_1001D6A18);
      sub_1000512B4(v14, a3);
    }
    if (v13)
    {
      *(_DWORD *)uint64_t v15 = 67109376;
      *(_DWORD *)&v15[4] = a3;
      *(_WORD *)&v15[8] = 1024;
      *(_DWORD *)&v15[10] = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "timer:#I In timer callback for trigger 0x%x: device config numbers do not match (expect %d.  We've been reconfigured; ignoring.",
        v15,
        0xEu);
    }
  }
}

void sub_1000881F8(_Unwind_Exception *a1)
{
}

void sub_100088260(uint64_t a1, uint64_t a2)
{
  if (a2 == 86400)
  {
    long long v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      uint64_t v10 = wis::asString((wis *)1, v7);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "timer:#N Sending %s-Timer notification to client", (uint8_t *)&v9, 0xCu);
    }
    pthread_mutex_lock(&stru_1001D6C80);
    uint64_t v8 = xmmword_1001D6CC0;
    if (!(void)xmmword_1001D6CC0) {
      sub_1000B14D8();
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6CC0 + 1);
    if (*((void *)&xmmword_1001D6CC0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6CC0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D6C80);
    sub_1000B4320(v8, 1);
  }
  else
  {
    if (a2 != 3600) {
      return;
    }
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      uint64_t v10 = wis::asString((wis *)2, v3);
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "timer:#N Sending %s-Timer notification to client", (uint8_t *)&v9, 0xCu);
    }
    pthread_mutex_lock(&stru_1001D6C80);
    uint64_t v4 = xmmword_1001D6CC0;
    if (!(void)xmmword_1001D6CC0) {
      sub_1000B14D8();
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6CC0 + 1);
    if (*((void *)&xmmword_1001D6CC0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6CC0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D6C80);
    sub_1000B4320(v4, 2);
  }
  if (v5) {
    sub_10000B678(v5);
  }
}

void sub_100088474(_Unwind_Exception *a1)
{
}

void sub_1000884E0(uint64_t a1)
{
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v2 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  unsigned int v3 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  int v4 = sub_1000A3E3C(v2);
  if (v3) {
    sub_10000B678(v3);
  }
  if (v4)
  {
    sub_100052CE0(a1, 0);
    pthread_mutex_lock(&stru_1001D69C0);
    uint64_t v5 = xmmword_1001D6A00;
    if (!(void)xmmword_1001D6A00) {
      sub_1000781CC();
    }
    long long v6 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
    if (*((void *)&xmmword_1001D6A00 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D69C0);
    sub_1000A4144(v5, &v10);
    if (v6) {
      sub_10000B678(v6);
    }
    uint64_t v7 = *v10;
    uint64_t v8 = v10[1];
    while (v7 != v8)
    {
      sub_1000534E8(a1, *(void *)v7, (ctu *)*(unsigned int *)(v7 + 8), *(_DWORD *)(v7 + 12));
      v7 += 16;
    }
    if (v11) {
      sub_10000B678(v11);
    }
  }
  else
  {
    int v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::__fs::filesystem::path buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "timer:#I Recreate timers: timers are disabled; nothing to do",
        buf,
        2u);
    }
  }
}

void sub_1000886B4(_Unwind_Exception *a1)
{
}

void sub_100088718(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100088798(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_100088870);
  __cxa_rethrow();
}

void sub_1000887C0(_Unwind_Exception *a1)
{
}

void sub_1000887D8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100088810(uint64_t a1)
{
}

uint64_t sub_10008882C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100088870(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *sub_10008889C(void *a1)
{
  *a1 = off_1001B93C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_1000888E8(void *a1)
{
  *a1 = off_1001B93C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10000B678(v1);
  }

  operator delete();
}

void *sub_100088954@<X0>(void *a1@<X8>)
{
  return sub_100018888(a1, "TimersManager");
}

unsigned char *sub_100088964@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 0;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_1000889A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000889AC(uint64_t a1, int a2, uint64_t a3)
{
}

uint64_t sub_1000889B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000889C4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000889E0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void sub_1000889F0(uint64_t a1, NSObject **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  dispatch_group_t group = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
}

void sub_100088A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100088A70(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)v1;
  unsigned int v3 = *(NSObject **)(*(void *)v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__fs::filesystem::path buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "timer:#I Setting new device config", buf, 2u);
  }
  sub_100087450(v2, v1 + 24);
  sub_100088B1C(&v6);
  return sub_10000BA00((uint64_t *)&v5);
}

void sub_100088B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100088B1C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    awd::profile::DeviceConfiguration::~DeviceConfiguration((awd::profile::DeviceConfiguration *)(v1 + 24));
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      sub_10000B678(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100088B78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100088B88()
{
  if ((byte_1001D69B8 & 1) == 0)
  {
    byte_1001D69B8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100029800, &stru_1001D6968, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100088BC4()
{
  if ((byte_1001D6A10 & 1) == 0)
  {
    byte_1001D6A10 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E5C, &stru_1001D69C0, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100088C00()
{
  if ((byte_1001D6C78 & 1) == 0)
  {
    byte_1001D6C78 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E78, &stru_1001D6C28, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100088C3C()
{
  if ((byte_1001D6A68 & 1) == 0)
  {
    byte_1001D6A68 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E60, &stru_1001D6A18, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100088C78()
{
  if ((byte_1001D6CD0 & 1) == 0)
  {
    byte_1001D6CD0 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E7C, &stru_1001D6C80, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100088CB4(uint64_t result, char a2, char a3, char a4)
{
  *(void *)uint64_t result = off_1001B94C8;
  *(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(result + 12) = a2;
  *(unsigned char *)(result + 13) = a3;
  *(unsigned char *)(result + 14) = a4;
  return result;
}

uint64_t sub_100088CE4(uint64_t result, int a2, char a3, char a4, char a5)
{
  *(void *)uint64_t result = off_1001B94C8;
  *(_DWORD *)(result + 8) = a2;
  *(unsigned char *)(result + 12) = a3;
  *(unsigned char *)(result + 13) = a4;
  *(unsigned char *)(result + 14) = a5;
  return result;
}

void sub_100088D14(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v17 = xpc_int64_create(8);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  uint64_t v15 = a2;
  __int16 v16 = "WISMessageType";
  sub_100014D08((uint64_t)&v15, &v17, &v18);
  xpc_release(v18);
  xpc_object_t v18 = 0;
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_object_t v13 = xpc_int64_create(*(unsigned int *)(a1 + 8));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  uint64_t v15 = a2;
  __int16 v16 = "WISMessageComponentId";
  sub_100014D08((uint64_t)&v15, &v13, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_object_t v11 = xpc_int64_create(*(unsigned __int8 *)(a1 + 12));
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  uint64_t v15 = a2;
  __int16 v16 = "WISMessagePII";
  sub_100014D08((uint64_t)&v15, &v11, &v12);
  xpc_release(v12);
  xpc_object_t v12 = 0;
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_object_t v9 = xpc_int64_create(*(unsigned __int8 *)(a1 + 13));
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  uint64_t v15 = a2;
  __int16 v16 = "WISMessageLocKey";
  sub_100014D08((uint64_t)&v15, &v9, &v10);
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_release(v9);
  xpc_object_t v9 = 0;
  xpc_object_t v7 = xpc_int64_create(*(unsigned __int8 *)(a1 + 14));
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  uint64_t v15 = a2;
  __int16 v16 = "WISMessageShimKey";
  sub_100014D08((uint64_t)&v15, &v7, &v8);
  xpc_release(v8);
  xpc_object_t v8 = 0;
  xpc_release(v7);
}

void sub_100088F94()
{
}

uint64_t *sub_100088FA8(uint64_t *a1, uint64_t a2)
{
  a1[1] = 0;
  *a1 = 0;
  uint64_t v12 = a2;
  xpc_object_t v13 = "InvestigationId";
  sub_10000B7A4((uint64_t)&v12, &object);
  uint64_t v5 = xpc::dyn_cast_or_default((xpc *)&object, 0, v4);
  xpc_release(object);
  uint64_t v12 = a2;
  xpc_object_t v13 = "Config";
  sub_10000B7A4((uint64_t)&v12, &object);
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_null)
  {
    xpc_object_t v7 = *(NSObject **)qword_1001D8080;
    if (os_log_type_enabled(*(os_log_t *)qword_1001D8080, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "config:#N No config specifed -> load the default", (uint8_t *)&v12, 2u);
    }
    sub_1000E7E90();
  }
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_data)
  {
    xpc_object_t v6 = *(NSObject **)qword_1001D8080;
    if (os_log_type_enabled(*(os_log_t *)qword_1001D8080, OS_LOG_TYPE_ERROR)) {
      sub_10014640C(v6);
    }
    operator new();
  }
  bytes_ptr = xpc_data_get_bytes_ptr(object);
  size_t length = (wis *)xpc_data_get_length(object);
  uint64_t WISTimestamp = wis::getWISTimestamp(length);
  sub_1000EF9E0(a1, bytes_ptr, (uint64_t)length, v5, WISTimestamp, 4);
  xpc_release(object);
  return a1;
}

void sub_1000891D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  uint64_t v15 = *v13;
  uint64_t *v13 = 0;
  if (v15) {
    sub_10005F658((uint64_t)v13, v15);
  }
  uint64_t v16 = *v12;
  uint64_t *v12 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  _Unwind_Resume(a1);
}

void sub_100089410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100089860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_100089DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10008A0FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008A440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10008A7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10008A9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10008AA20(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000173FC(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    __dst[3] = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    __dst[3] = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_11;
    }
  }
  if (xpc_get_type(v5) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v6 = xpc_null_create();
LABEL_11:
    __dst[3] = v6;
    goto LABEL_12;
  }
  xpc_retain(v5);
LABEL_12:
  xpc_release(v5);
  return __dst;
}

uint64_t sub_10008AAF4(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10008AB40()
{
  xpc_object_t v0 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v1 = v0;
  if (v0)
  {
    xpc_object_t v9 = v0;
  }
  else
  {
    xpc_object_t v1 = xpc_null_create();
    xpc_object_t v9 = v1;
    if (!v1)
    {
      xpc_object_t v2 = xpc_null_create();
      xpc_object_t v1 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v1) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v1);
    goto LABEL_9;
  }
  xpc_object_t v2 = xpc_null_create();
LABEL_8:
  xpc_object_t v9 = v2;
LABEL_9:
  xpc_release(v1);
  sub_100018888(__p, CASendEventOptionKeyLogPayload);
  xpc_object_t v5 = xpc_BOOL_create(1);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  long long v3 = __p;
  if (v8 < 0) {
    long long v3 = (void **)__p[0];
  }
  v4[0] = &v9;
  v4[1] = v3;
  sub_100014D08((uint64_t)v4, &v5, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v5);
  xpc_object_t v5 = 0;
  analytics_send_event_with_options();
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  xpc_release(v9);
}

void sub_10008AC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v18 - 24));
  _Unwind_Resume(a1);
}

xpc_object_t sub_10008ACD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v2 = *(void **)(a1 + 24);
  *a2 = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void sub_10008AD38(const void **__s1, void **a2)
{
  long long v3 = __s1;
  int v4 = *((unsigned __int8 *)__s1 + 23);
  if ((*((char *)__s1 + 23) & 0x80000000) == 0)
  {
    if (v4 != 40)
    {
      if (v4 != 43)
      {
        if (v4 == 46)
        {
          if (memcmp(__s1, "com.apple.Baseband.cellularSIValidationFailure", 0x2EuLL))
          {
            if (!memcmp(v3, "com.apple.Baseband.cellularDynamicRatSelection", 0x2EuLL)) {
              goto LABEL_40;
            }
            goto LABEL_29;
          }
          goto LABEL_38;
        }
LABEL_29:
        xpc_object_t v7 = *(NSObject **)(qword_1001D8080 + 112);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
          return;
        }
        goto LABEL_33;
      }
      if (memcmp(__s1, "com.apple.Baseband.cellularVoiceLastCallEnd", 0x2BuLL)) {
        goto LABEL_29;
      }
      goto LABEL_36;
    }
    if (memcmp(__s1, "com.apple.Baseband.cellularNrDlPdcpStats", 0x28uLL))
    {
      xpc_object_t v6 = v3;
      goto LABEL_25;
    }
LABEL_34:
    char v8 = *a2;
    xpc_object_t object = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    sub_10008D370((std::string::size_type)&object);
    xpc_release(object);
    return;
  }
  xpc_object_t v5 = __s1[1];
  if (v5 == (const void *)43)
  {
    if (!memcmp(*__s1, "com.apple.Baseband.cellularVoiceLastCallEnd", 0x2BuLL))
    {
LABEL_36:
      xpc_object_t v9 = *a2;
      xpc_object_t v16 = v9;
      if (v9) {
        xpc_retain(v9);
      }
      else {
        xpc_object_t v16 = xpc_null_create();
      }
      sub_10008CA20((uint64_t)&v16);
      xpc_release(v16);
      return;
    }
    xpc_object_t v5 = v3[1];
  }
  else if (v5 == (const void *)46 && !memcmp(*__s1, "com.apple.Baseband.cellularSIValidationFailure", 0x2EuLL))
  {
LABEL_38:
    xpc_object_t v10 = *a2;
    xpc_object_t v17 = v10;
    if (v10) {
      xpc_retain(v10);
    }
    else {
      xpc_object_t v17 = xpc_null_create();
    }
    sub_10008BC20((std::string::size_type)&v17);
    xpc_release(v17);
    return;
  }
  if (v5 == (const void *)46)
  {
    if (!memcmp(*v3, "com.apple.Baseband.cellularDynamicRatSelection", 0x2EuLL))
    {
LABEL_40:
      xpc_object_t v11 = *a2;
      xpc_object_t v15 = v11;
      if (v11) {
        xpc_retain(v11);
      }
      else {
        xpc_object_t v15 = xpc_null_create();
      }
      sub_10008D050(&v15);
      xpc_release(v15);
      return;
    }
    xpc_object_t v5 = v3[1];
  }
  if (v5 != (const void *)40) {
    goto LABEL_31;
  }
  if (!memcmp(*v3, "com.apple.Baseband.cellularNrDlPdcpStats", 0x28uLL)) {
    goto LABEL_34;
  }
  if (v3[1] != (const void *)40)
  {
LABEL_31:
    xpc_object_t v7 = *(NSObject **)(qword_1001D8080 + 112);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      return;
    }
LABEL_32:
    long long v3 = (const void **)*v3;
LABEL_33:
    *(_DWORD *)std::__fs::filesystem::path buf = 136315138;
    uint64_t v19 = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WISABC:#D Event %s has no ABC rule", buf, 0xCu);
    return;
  }
  xpc_object_t v6 = *v3;
LABEL_25:
  if (memcmp(v6, "com.apple.Baseband.cellularNrUlPdcpStats", 0x28uLL))
  {
    xpc_object_t v7 = *(NSObject **)(qword_1001D8080 + 112);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    if ((v4 & 0x80) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  uint64_t v12 = *a2;
  xpc_object_t v13 = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    xpc_object_t v13 = xpc_null_create();
  }
  sub_10008DD90((std::string::size_type)&v13);
  xpc_release(v13);
}

void sub_10008B084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11, xpc_object_t a12, xpc_object_t a13, xpc_object_t a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10001F4A8(exception_object);
}

void sub_10008B124(std::string::size_type a1, uint64_t a2)
{
  if (sub_1000153A8())
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_1000173FC(__p, *(void **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a1;
      uint64_t v7 = *(void *)(a1 + 16);
    }
    BOOL v4 = sub_100015740((const void **)__p);
    BOOL v5 = v4;
    if (SHIBYTE(v7) < 0)
    {
      operator delete(__p[0]);
      if (!v5) {
        return;
      }
    }
    else if (!v4)
    {
      return;
    }
    sub_10008B2D0(a1, a2);
  }
}

void sub_10008B1E8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2 == 1)
  {
    uint64_t v14 = __cxa_begin_catch(a1);
    xpc_object_t v15 = *(NSObject **)(qword_1001D8080 + 112);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)v13 + 23) < 0) {
        xpc_object_t v13 = (uint64_t **)*v13;
      }
      uint64_t v16 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
      LODWORD(buf) = 136446466;
      *(void *)((char *)&buf + 4) = v13;
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "WISABC:Error parsing ABC for %{public}s: ('%s')", (uint8_t *)&buf, 0x16u);
    }
    __cxa_end_catch();
    JUMPOUT(0x10008B1B8);
  }
  _Unwind_Resume(a1);
}

void sub_10008B2D0(std::string::size_type a1, uint64_t a2)
{
  size_t v4 = strlen("com.apple.AVConference.IMSCallSummaryStats");
  size_t v5 = v4;
  size_t v6 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    size_t v8 = *(void *)(a1 + 8);
    if (v4 != v8)
    {
      size_t v10 = strlen("com.apple.AVConference.IMSCallAudioFrameStats");
      goto LABEL_15;
    }
    if (v4 == -1) {
      goto LABEL_136;
    }
    uint64_t v7 = *(const void **)a1;
  }
  else
  {
    if (v4 != v6)
    {
      size_t v10 = strlen("com.apple.AVConference.IMSCallAudioFrameStats");
      goto LABEL_12;
    }
    uint64_t v7 = (const void *)a1;
    if (v5 == -1) {
LABEL_136:
    }
      sub_1000983B4();
  }
  uint64_t v9 = memcmp(v7, "com.apple.AVConference.IMSCallSummaryStats", v5);
  if (!v9)
  {
    sub_10008E8F4(v9, a2);
    return;
  }
  size_t v10 = strlen("com.apple.AVConference.IMSCallAudioFrameStats");
  if ((v6 & 0x80) == 0)
  {
LABEL_12:
    size_t v8 = v6;
    xpc_object_t v11 = (const void *)a1;
    if (v10 != v6)
    {
      size_t v12 = strlen("com.apple.AVConference.IMSCallAudioDistortionSummary");
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  size_t v8 = *(void *)(a1 + 8);
LABEL_15:
  if (v10 != v8)
  {
    size_t v12 = strlen("com.apple.AVConference.IMSCallAudioDistortionSummary");
    goto LABEL_30;
  }
  if (v8 == -1) {
    sub_1000983B4();
  }
  xpc_object_t v11 = *(const void **)a1;
LABEL_18:
  uint64_t v13 = memcmp(v11, "com.apple.AVConference.IMSCallAudioFrameStats", v8);
  if (!v13)
  {
    sub_10008F194(v13, a2);
    return;
  }
  size_t v12 = strlen("com.apple.AVConference.IMSCallAudioDistortionSummary");
  if ((v6 & 0x80) == 0)
  {
LABEL_20:
    size_t v8 = v6;
    uint64_t v14 = (const void *)a1;
    if (v12 != v6)
    {
      size_t v15 = strlen("com.apple.Telephony.RCSMessageSendReceive");
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  size_t v8 = *(void *)(a1 + 8);
LABEL_30:
  if (v12 != v8)
  {
    size_t v15 = strlen("com.apple.Telephony.RCSMessageSendReceive");
    goto LABEL_42;
  }
  if (v8 == -1) {
    sub_1000983B4();
  }
  uint64_t v14 = *(const void **)a1;
LABEL_33:
  if (!memcmp(v14, "com.apple.AVConference.IMSCallAudioDistortionSummary", v8))
  {
    sub_10008FAA8((uint64_t *)a1, a2);
    return;
  }
  size_t v15 = strlen("com.apple.Telephony.RCSMessageSendReceive");
  if ((v6 & 0x80) == 0)
  {
LABEL_35:
    size_t v8 = v6;
    uint64_t v16 = (const void *)a1;
    if (v15 != v6)
    {
      size_t v17 = strlen("com.apple.Telephony.RCSMessageProvisionRegistration");
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  size_t v8 = *(void *)(a1 + 8);
LABEL_42:
  if (v15 != v8)
  {
    size_t v17 = strlen("com.apple.Telephony.RCSMessageProvisionRegistration");
    goto LABEL_54;
  }
  if (v8 == -1) {
    sub_1000983B4();
  }
  uint64_t v16 = *(const void **)a1;
LABEL_45:
  if (!memcmp(v16, "com.apple.Telephony.RCSMessageSendReceive", v8))
  {
    sub_1000903E4(a1, a2);
    return;
  }
  size_t v17 = strlen("com.apple.Telephony.RCSMessageProvisionRegistration");
  if ((v6 & 0x80) == 0)
  {
LABEL_47:
    size_t v8 = v6;
    uint64_t v18 = (const void *)a1;
    if (v17 != v6)
    {
      size_t v19 = strlen("com.apple.Telephony.RCSMessageProvisioning");
LABEL_59:
      id v20 = (const void *)a1;
      if (v19 != v6)
      {
LABEL_70:
        if (sub_10008BB8C((void *)a1, "com.apple.Telephony.RCSMessageSessionSetup"))
        {
          sub_100091860((uint64_t *)a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.Telephony.RCSPagerMessageSendReceive"))
        {
          sub_100092004((uint64_t *)a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.Telephony.RCSMSRPMessageSendReceive"))
        {
          sub_10009276C((uint64_t *)a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.Telephony.metricCCStwCPSummary"))
        {
          sub_100092ED4((uint64_t *)a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.Telephony.metricCCStwRequest"))
        {
          sub_100093544((uint64_t *)a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.Telephony.metricCCStwMessageOutgoing"))
        {
          sub_100093C0C((uint64_t *)a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.telephony.metricCCStwMessageIncoming"))
        {
          sub_10009450C((uint64_t *)a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.IDS.QualifiedContacts"))
        {
          sub_100094A28((uint64_t *)a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.Messages.IMMetricsCollectorEventSMSSentMessageSingleComponent"))
        {
          sub_100094E24((uint64_t *)a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.Messages.IMMetricsCollectorEventIMessageSentMessageSingleComponent"))
        {
          sub_1000954BC((uint64_t *)a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.IDS.OffTheGridMode"))
        {
          sub_100095B80((uint64_t *)a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.Telephony.atm_Registration_Result"))
        {
          sub_10009603C(a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.Telephony.RCSSIPRefer"))
        {
          sub_100096AAC((uint64_t *)a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.Telephony.RCSMessageSIPOptions"))
        {
          sub_10009725C((uint64_t *)a1, a2);
        }
        else if (sub_10008BB8C((void *)a1, "com.apple.Telephony.RCSMessageSessionEnd"))
        {
          sub_100097890((uint64_t *)a1, a2);
        }
        else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 112), OS_LOG_TYPE_DEBUG))
        {
          sub_100146ABC();
        }
        return;
      }
      goto LABEL_69;
    }
    goto LABEL_57;
  }
  size_t v8 = *(void *)(a1 + 8);
LABEL_54:
  if (v17 != v8)
  {
    size_t v19 = strlen("com.apple.Telephony.RCSMessageProvisioning");
    goto LABEL_66;
  }
  if (v8 == -1) {
    sub_1000983B4();
  }
  uint64_t v18 = *(const void **)a1;
LABEL_57:
  if (!memcmp(v18, "com.apple.Telephony.RCSMessageProvisionRegistration", v8))
  {
    sub_100090A38((uint64_t *)a1, a2);
    return;
  }
  size_t v19 = strlen("com.apple.Telephony.RCSMessageProvisioning");
  if ((v6 & 0x80) == 0) {
    goto LABEL_59;
  }
  size_t v8 = *(void *)(a1 + 8);
LABEL_66:
  if (v19 != v8) {
    goto LABEL_70;
  }
  if (v8 == -1) {
    sub_1000983B4();
  }
  id v20 = *(const void **)a1;
  size_t v6 = v8;
LABEL_69:
  if (memcmp(v20, "com.apple.Telephony.RCSMessageProvisioning", v6)) {
    goto LABEL_70;
  }

  sub_100090E7C((uint64_t *)a1, a2);
}

BOOL sub_10008BB8C(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_1000983B4();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void sub_10008BC20(std::string::size_type a1)
{
  sub_100018888(&__str, "");
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  p_p = &__p;
  sub_1000134A4((uint64_t)&__p, size + 14);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    memmove(p_p, p_str, size);
  }
  strcpy((char *)p_p + size, "failure_cause:");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = __p;
  *(void *)&long long v74 = a1;
  *((void *)&v74 + 1) = "failure_cause";
  sub_10000B7A4((uint64_t)&v74, &v71);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v5 = &__str;
  }
  else {
    size_t v5 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = __str.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::string::insert(&v72, 0, (const std::string::value_type *)v5, v6);
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[0];
  *(void *)id v75 = v7->__r_.__value_.__l.__size_;
  *(void *)&v75[7] = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
  char v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = v8;
  __str.__r_.__value_.__l.__size_ = *(void *)v75;
  *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)&v75[7];
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = v9;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  xpc_release(v71);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v10 = __str.__r_.__value_.__l.__size_;
  }
  xpc_object_t v11 = &__p;
  sub_1000134A4((uint64_t)&__p, v10 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    xpc_object_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v12 = &__str;
    }
    else {
      size_t v12 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, " frequency:");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = __p;
  v72.__r_.__value_.__r.__words[0] = a1;
  v72.__r_.__value_.__l.__size_ = (std::string::size_type)"frequency";
  sub_10000B7A4((uint64_t)&v72, v75);
  int v14 = xpc::dyn_cast_or_default((xpc *)v75, 0, v13);
  std::to_string(&__p, v14);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v15 = &__str;
  }
  else {
    size_t v15 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = __str.__r_.__value_.__l.__size_;
  }
  size_t v17 = std::string::insert(&__p, 0, (const std::string::value_type *)v15, v16);
  std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
  *(void *)&long long v74 = v17->__r_.__value_.__l.__size_;
  *(void *)((char *)&v74 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
  char v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = v18;
  __str.__r_.__value_.__l.__size_ = v74;
  *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v74 + 7);
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = v19;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(*(xpc_object_t *)v75);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = __str.__r_.__value_.__l.__size_;
  }
  unint64_t v21 = &__p;
  sub_1000134A4((uint64_t)&__p, v20 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v20)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &__str;
    }
    else {
      int v22 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    memmove(v21, v22, v20);
  }
  strcpy((char *)v21 + v20, " main_plmn:");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = __p;
  *(void *)&long long v74 = a1;
  *((void *)&v74 + 1) = "main_plmn";
  sub_10000B7A4((uint64_t)&v74, &v71);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v23 = &__str;
  }
  else {
    __int16 v23 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v24 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v24 = __str.__r_.__value_.__l.__size_;
  }
  uint64_t v25 = std::string::insert(&v72, 0, (const std::string::value_type *)v23, v24);
  std::string::size_type v26 = v25->__r_.__value_.__r.__words[0];
  *(void *)id v75 = v25->__r_.__value_.__l.__size_;
  *(void *)&v75[7] = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  char v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = v26;
  __str.__r_.__value_.__l.__size_ = *(void *)v75;
  *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)&v75[7];
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = v27;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  xpc_release(v71);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
  }
  __int16 v29 = &__p;
  sub_1000134A4((uint64_t)&__p, v28 + 5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    __int16 v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v28)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v30 = &__str;
    }
    else {
      id v30 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    memmove(v29, v30, v28);
  }
  strcpy((char *)v29 + v28, " rat:");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = __p;
  *(void *)&long long v74 = a1;
  *((void *)&v74 + 1) = "rat";
  sub_10000B7A4((uint64_t)&v74, &v71);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v31 = &__str;
  }
  else {
    uint64_t v31 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v32 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v32 = __str.__r_.__value_.__l.__size_;
  }
  unint64_t v33 = std::string::insert(&v72, 0, (const std::string::value_type *)v31, v32);
  std::string::size_type v34 = v33->__r_.__value_.__r.__words[0];
  *(void *)id v75 = v33->__r_.__value_.__l.__size_;
  *(void *)&v75[7] = *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7);
  char v35 = HIBYTE(v33->__r_.__value_.__r.__words[2]);
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = v34;
  __str.__r_.__value_.__l.__size_ = *(void *)v75;
  *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)&v75[7];
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = v35;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  xpc_release(v71);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v36 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v36 = __str.__r_.__value_.__l.__size_;
  }
  unsigned __int8 v37 = &__p;
  sub_1000134A4((uint64_t)&__p, v36 + 6);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unsigned __int8 v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v36)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v38 = &__str;
    }
    else {
      unsigned int v38 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    memmove(v37, v38, v36);
  }
  strcpy((char *)v37 + v36, " band:");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = __p;
  v72.__r_.__value_.__r.__words[0] = a1;
  v72.__r_.__value_.__l.__size_ = (std::string::size_type)"band";
  sub_10000B7A4((uint64_t)&v72, v75);
  int v40 = xpc::dyn_cast_or_default((xpc *)v75, 0, v39);
  std::to_string(&__p, v40);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v41 = &__str;
  }
  else {
    BOOL v41 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = __str.__r_.__value_.__l.__size_;
  }
  xpc_object_t v43 = std::string::insert(&__p, 0, (const std::string::value_type *)v41, v42);
  std::string::size_type v44 = v43->__r_.__value_.__r.__words[0];
  *(void *)&long long v74 = v43->__r_.__value_.__l.__size_;
  *(void *)((char *)&v74 + 7) = *(std::string::size_type *)((char *)&v43->__r_.__value_.__r.__words[1] + 7);
  char v45 = HIBYTE(v43->__r_.__value_.__r.__words[2]);
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = v44;
  __str.__r_.__value_.__l.__size_ = v74;
  *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v74 + 7);
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = v45;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(*(xpc_object_t *)v75);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v46 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v46 = __str.__r_.__value_.__l.__size_;
  }
  double v47 = &__p;
  sub_1000134A4((uint64_t)&__p, v46 + 16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    double v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v46)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v48 = &__str;
    }
    else {
      __int16 v48 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    memmove(v47, v48, v46);
  }
  strcpy((char *)v47 + v46, " barring_time_s:");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = __p;
  v72.__r_.__value_.__r.__words[0] = a1;
  v72.__r_.__value_.__l.__size_ = (std::string::size_type)"barring_time_s";
  sub_10000B7A4((uint64_t)&v72, v75);
  int v50 = xpc::dyn_cast_or_default((xpc *)v75, 0, v49);
  std::to_string(&__p, v50);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v51 = &__str;
  }
  else {
    uint64_t v51 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v52 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v52 = __str.__r_.__value_.__l.__size_;
  }
  uint64_t v53 = std::string::insert(&__p, 0, (const std::string::value_type *)v51, v52);
  std::string::size_type v54 = v53->__r_.__value_.__r.__words[0];
  *(void *)&long long v74 = v53->__r_.__value_.__l.__size_;
  *(void *)((char *)&v74 + 7) = *(std::string::size_type *)((char *)&v53->__r_.__value_.__r.__words[1] + 7);
  char v55 = HIBYTE(v53->__r_.__value_.__r.__words[2]);
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = v54;
  __str.__r_.__value_.__l.__size_ = v74;
  *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v74 + 7);
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = v55;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(*(xpc_object_t *)v75);
  sub_100018888(&__p, "Cellular");
  memset(&v69, 0, sizeof(v69));
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  int v70 = 65537;
  std::string::assign((std::string *)&v66, "Rat Retention");
  std::string::assign((std::string *)((char *)&v67 + 8), "SI Validation Failure");
  std::string::operator=(&v69, &__str);
  long long v56 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
  {
    LOWORD(v72.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "WISABC:#I Rule satisfied and triggering ABC for event: cellularSIValidationFailure", (uint8_t *)&v72, 2u);
  }
  sub_10009827C((char *)__dst, (long long *)&__p);
  sub_1000CA1B0((uint64_t *)__dst);
  if (v64 < 0) {
    operator delete(v63);
  }
  if (v62 < 0) {
    operator delete(v61);
  }
  if (v60 < 0) {
    operator delete(v59);
  }
  if (v58 < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(*((void **)&v67 + 1));
  }
  if (SBYTE7(v67) < 0) {
    operator delete((void *)v66);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_10008C5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,long long __p,int a24,__int16 a25,char a26,char a27)
{
  sub_100098014((uint64_t)&a10);
  sub_100098014((uint64_t)&__p);
  if (*(char *)(v27 - 89) < 0) {
    operator delete(*(void **)(v27 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_10008CA20(uint64_t a1)
{
  sub_100018888(&v38, "null");
  sub_100018888(&v36, "null");
  sub_100018888(&v34, "null");
  sub_100018888(&__str, "null");
  sub_100018888(&v32, "");
  uint64_t v27 = a1;
  std::string::size_type v28 = "type_of_call";
  sub_10000B7A4((uint64_t)&v27, &v29);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  long long v38 = buf;
  uint64_t v39 = v31;
  HIBYTE(v31) = 0;
  LOBYTE(buf) = 0;
  xpc_release(v29);
  uint64_t v27 = a1;
  std::string::size_type v28 = "dynamic_type";
  sub_10000B7A4((uint64_t)&v27, &v29);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  long long v36 = buf;
  uint64_t v37 = v31;
  HIBYTE(v31) = 0;
  LOBYTE(buf) = 0;
  xpc_release(v29);
  uint64_t v27 = a1;
  std::string::size_type v28 = "gci";
  sub_10000B7A4((uint64_t)&v27, &v29);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  long long v34 = buf;
  uint64_t v35 = v31;
  HIBYTE(v31) = 0;
  LOBYTE(buf) = 0;
  xpc_release(v29);
  if (SHIBYTE(v39) < 0)
  {
    if (*((void *)&v38 + 1) != 5) {
      goto LABEL_16;
    }
    xpc_object_t v2 = (long long *)v38;
  }
  else
  {
    if (SHIBYTE(v39) != 5) {
      goto LABEL_16;
    }
    xpc_object_t v2 = &v38;
  }
  int v3 = *(_DWORD *)v2;
  int v4 = *((unsigned __int8 *)v2 + 4);
  if (v3 == 1414295382 && v4 == 69)
  {
    if (SHIBYTE(v37) < 0)
    {
      if (*((void *)&v36 + 1) == 10 && *(void *)v36 == 0x5F43494D414E5944 && *(_WORD *)(v36 + 8) == 16723)
      {
LABEL_49:
        std::string::assign(&__str, "Dynamic VoNR/SA False Positive");
        std::operator+<char>();
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
        std::string v32 = __p;
        sub_100018888(&__p, "Cellular");
        memset(&v25, 0, sizeof(v25));
        long long v24 = 0u;
        long long v23 = 0u;
        long long v22 = 0u;
        int v26 = 65537;
        std::string::assign((std::string *)&v22, "IMS Call KPI");
        std::string::operator=((std::string *)((char *)&v23 + 8), &__str);
        std::string::operator=(&v25, &v32);
        size_t v12 = *(NSObject **)(qword_1001D8080 + 112);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "WISABC:#I Rule satisfied and triggering ABC for event: cellularVoiceLastCallEnd", (uint8_t *)&buf, 2u);
        }
        sub_10009827C((char *)__dst, (long long *)&__p);
        sub_1000CA1B0((uint64_t *)__dst);
        if (v20 < 0) {
          operator delete(v19);
        }
        if (v18 < 0) {
          operator delete(v17);
        }
        if (v16 < 0) {
          operator delete(v15);
        }
        if (v14 < 0) {
          operator delete(__dst[0]);
        }
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v24) < 0) {
          operator delete(*((void **)&v23 + 1));
        }
        if (SBYTE7(v23) < 0) {
          operator delete((void *)v22);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_16;
      }
      if (*((void *)&v36 + 1) != 12) {
        goto LABEL_16;
      }
      std::string::size_type v6 = (long long *)v36;
    }
    else
    {
      if (HIBYTE(v37) == 10)
      {
        if ((void)v36 != 0x5F43494D414E5944 || WORD4(v36) != 16723) {
          goto LABEL_16;
        }
        goto LABEL_49;
      }
      if (HIBYTE(v37) != 12) {
        goto LABEL_16;
      }
      std::string::size_type v6 = &v36;
    }
    uint64_t v8 = *(void *)v6;
    int v9 = *((_DWORD *)v6 + 2);
    if (v8 != 0x5F43494D414E5944 || v9 != 1380872022) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_16:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
}

void sub_10008CED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_100098014((uint64_t)&a10);
  sub_100098014((uint64_t)&__p);
  if (*(char *)(v28 - 153) < 0) {
    operator delete(*(void **)(v28 - 176));
  }
  if (*(char *)(v28 - 129) < 0) {
    operator delete(*(void **)(v28 - 152));
  }
  if (*(char *)(v28 - 105) < 0) {
    operator delete(*(void **)(v28 - 128));
  }
  if (*(char *)(v28 - 73) < 0) {
    operator delete(*(void **)(v28 - 96));
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_10008D050(void *a1)
{
  sub_100018888(&__str, "null");
  sub_100018888(&v22, "");
  v14[0] = a1;
  v14[1] = "is_decision_to_switch";
  sub_10000B7A4((uint64_t)v14, buf);
  int v3 = xpc::dyn_cast_or_default((xpc *)buf, 0, v2);
  xpc_release(*(xpc_object_t *)buf);
  v14[0] = a1;
  v14[1] = "is_drs_switch_successful";
  sub_10000B7A4((uint64_t)v14, buf);
  LODWORD(a1) = xpc::dyn_cast_or_default((xpc *)buf, 0, v4);
  xpc_release(*(xpc_object_t *)buf);
  if (((v3 ^ 1 | a1) & 1) == 0)
  {
    std::string::assign(&__str, "Switch Failed");
    std::string::assign(&v22, "is_decision_to_switch:true is_drs_switch_successful:false");
    sub_100018888(v14, "Cellular");
    memset(&v19, 0, sizeof(v19));
    long long v18 = 0u;
    long long v17 = 0u;
    long long v16 = 0u;
    int v20 = 65537;
    std::string::assign((std::string *)&v16, "Dynamic RAT Selection");
    std::string::operator=((std::string *)((char *)&v17 + 8), &__str);
    std::string::operator=(&v19, &v22);
    size_t v5 = *(NSObject **)(qword_1001D8080 + 112);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "WISABC:#I Rule satisfied and triggering ABC for event: cellularDynamicRatSelection", buf, 2u);
    }
    sub_10009827C((char *)v6, (long long *)v14);
    sub_1000CA1B0((uint64_t *)v6);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
    if (v9 < 0) {
      operator delete(v8);
    }
    if (v7 < 0) {
      operator delete(v6[0]);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(*((void **)&v17 + 1));
    }
    if (SBYTE7(v17) < 0) {
      operator delete((void *)v16);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_10008D28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_100098014((uint64_t)&a9);
  sub_100098014((uint64_t)&a22);
  if (*(char *)(v22 - 57) < 0) {
    operator delete(*(void **)(v22 - 80));
  }
  if (*(char *)(v22 - 33) < 0) {
    operator delete(*(void **)(v22 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_10008D370(std::string::size_type a1)
{
  *(void *)long long buf = a1;
  std::string::size_type v44 = "rb_is_srb";
  sub_10000B7A4((uint64_t)buf, object);
  int v3 = xpc::dyn_cast_or_default((xpc *)object, 0, v2);
  xpc_release(object[0]);
  if (v3)
  {
    BOOL v4 = *(NSObject **)(qword_1001D8080 + 112);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    size_t v5 = "WISABC:#I rb_is_srb is false for Event: cellularNrDlPdcpStats and hence skipping rule";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v5, buf, 2u);
    return;
  }
  *(void *)long long buf = a1;
  std::string::size_type v44 = "rb_pdu_discard_perc_bin_index";
  sub_10000B7A4((uint64_t)buf, object);
  int v7 = xpc::dyn_cast_or_default((xpc *)object, 0, v6);
  xpc_release(object[0]);
  if (v7 <= 12)
  {
    BOOL v4 = *(NSObject **)(qword_1001D8080 + 112);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    size_t v5 = "WISABC:#I rb_pdu_discard_perc_bin_index did not satisfy trigger condition for Event: cellularNrDlPdcpStats and "
         "hence skipping rule";
    goto LABEL_7;
  }
  sub_100018888(&v53, "");
  sub_100018888(&v51, "");
  sub_100018888(&v49, "");
  __str.__r_.__value_.__r.__words[0] = a1;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)"deployment";
  sub_10000B7A4((uint64_t)&__str, v48);
  *(void *)long long buf = 0;
  std::string::size_type v44 = 0;
  uint64_t v45 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v45) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  long long v53 = *(_OWORD *)object;
  uint64_t v54 = v36;
  HIBYTE(v36) = 0;
  LOBYTE(object[0]) = 0;
  xpc_release(*(xpc_object_t *)v48);
  __str.__r_.__value_.__r.__words[0] = a1;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)"rb_rb_mode";
  sub_10000B7A4((uint64_t)&__str, v48);
  *(void *)long long buf = 0;
  std::string::size_type v44 = 0;
  uint64_t v45 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v45) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
  long long v51 = *(_OWORD *)object;
  uint64_t v52 = v36;
  HIBYTE(v36) = 0;
  LOBYTE(object[0]) = 0;
  xpc_release(*(xpc_object_t *)v48);
  __str.__r_.__value_.__r.__words[0] = a1;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)"reason";
  sub_10000B7A4((uint64_t)&__str, v48);
  *(void *)long long buf = 0;
  std::string::size_type v44 = 0;
  uint64_t v45 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v45) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)v49);
  }
  long long v49 = *(_OWORD *)object;
  uint64_t v50 = v36;
  HIBYTE(v36) = 0;
  LOBYTE(object[0]) = 0;
  xpc_release(*(xpc_object_t *)v48);
  *(void *)long long buf = a1;
  std::string::size_type v44 = "is_data_preferred";
  sub_10000B7A4((uint64_t)buf, object);
  xpc::dyn_cast_or_default((xpc *)object, 0, v8);
  xpc_release(object[0]);
  *(void *)long long buf = a1;
  std::string::size_type v44 = "is_dc_active";
  sub_10000B7A4((uint64_t)buf, object);
  xpc::dyn_cast_or_default((xpc *)object, 0, v9);
  xpc_release(object[0]);
  *(void *)long long buf = a1;
  std::string::size_type v44 = "is_vonr_active";
  sub_10000B7A4((uint64_t)buf, object);
  xpc::dyn_cast_or_default((xpc *)object, 0, v10);
  xpc_release(object[0]);
  sub_100002260((uint64_t)buf);
  char v11 = sub_100004D64(buf, (uint64_t)"deployment: ", 12);
  if (v54 >= 0) {
    size_t v12 = &v53;
  }
  else {
    size_t v12 = (long long *)v53;
  }
  if (v54 >= 0) {
    uint64_t v13 = HIBYTE(v54);
  }
  else {
    uint64_t v13 = *((void *)&v53 + 1);
  }
  char v14 = sub_100004D64(v11, (uint64_t)v12, v13);
  char v15 = sub_100004D64(v14, (uint64_t)" rb_rb_mode: ", 13);
  if (v52 >= 0) {
    long long v16 = &v51;
  }
  else {
    long long v16 = (long long *)v51;
  }
  if (v52 >= 0) {
    uint64_t v17 = HIBYTE(v52);
  }
  else {
    uint64_t v17 = *((void *)&v51 + 1);
  }
  long long v18 = sub_100004D64(v15, (uint64_t)v16, v17);
  std::string v19 = sub_100004D64(v18, (uint64_t)" reason: ", 9);
  if (v50 >= 0) {
    int v20 = &v49;
  }
  else {
    int v20 = (long long *)v49;
  }
  if (v50 >= 0) {
    uint64_t v21 = HIBYTE(v50);
  }
  else {
    uint64_t v21 = *((void *)&v49 + 1);
  }
  uint64_t v22 = sub_100004D64(v19, (uint64_t)v20, v21);
  sub_100004D64(v22, (uint64_t)" is_data_preferred: ", 20);
  long long v23 = (void *)std::ostream::operator<<();
  sub_100004D64(v23, (uint64_t)" is_dc_active: ", 15);
  long long v24 = (void *)std::ostream::operator<<();
  sub_100004D64(v24, (uint64_t)" is_vonr_active: ", 17);
  std::string v25 = (void *)std::ostream::operator<<();
  sub_100004D64(v25, (uint64_t)" rb_pdu_discard_perc_bin_index: ", 32);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_100018888(object, "Cellular");
  memset(&v40, 0, sizeof(v40));
  long long v39 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  int v41 = 65537;
  std::string::assign((std::string *)&v37, "PDCP Performance");
  std::string::assign((std::string *)((char *)&v38 + 8), "DL PDCP Discard Rate");
  std::string::operator=(&v40, &__str);
  int v26 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int16 v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "WISABC:#I Rule satisfied and triggering ABC for event: cellularNrDlPdcpStats", v48, 2u);
  }
  sub_10009827C((char *)__dst, (long long *)object);
  sub_1000CA1B0((uint64_t *)__dst);
  if (v34 < 0) {
    operator delete(__p);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete(*((void **)&v38 + 1));
  }
  if (SBYTE7(v38) < 0) {
    operator delete((void *)v37);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(object[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v47 < 0) {
    operator delete(v46);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)v49);
  }
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
}

void sub_10008DA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xpc_object_t object,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  sub_100098014((uint64_t)&a10);
  sub_100098014((uint64_t)&object);
  if (a41 < 0) {
    operator delete(__p);
  }
  sub_10004E93C((uint64_t)&a42);
  if (*(char *)(v47 - 137) < 0) {
    operator delete(*(void **)(v47 - 160));
  }
  if (*(char *)(v47 - 105) < 0) {
    operator delete(*(void **)(v47 - 128));
  }
  if (*(char *)(v47 - 73) < 0) {
    operator delete(*(void **)(v47 - 96));
  }
  _Unwind_Resume(a1);
}

void sub_10008DD90(std::string::size_type a1)
{
  *(void *)long long buf = a1;
  __int16 v48 = "rb_is_srb";
  sub_10000B7A4((uint64_t)buf, object);
  int v3 = xpc::dyn_cast_or_default((xpc *)object, 0, v2);
  xpc_release(object[0]);
  if (v3)
  {
    BOOL v4 = *(NSObject **)(qword_1001D8080 + 112);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    size_t v5 = "WISABC:#I rb_is_srb is false for Event: cellularNrUlPdcpStats and hence skipping rule";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v5, buf, 2u);
    return;
  }
  *(void *)long long buf = a1;
  __int16 v48 = "rb_pdu_discard_perc_bin_index";
  sub_10000B7A4((uint64_t)buf, object);
  int v7 = xpc::dyn_cast_or_default((xpc *)object, 0, v6);
  xpc_release(object[0]);
  if (v7 <= 11)
  {
    BOOL v4 = *(NSObject **)(qword_1001D8080 + 112);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    size_t v5 = "WISABC:#I rb_pdu_discard_perc_bin_index did not satisfy trigger condition for Event: cellularNrUlPdcpStats and "
         "hence skipping rule";
    goto LABEL_7;
  }
  sub_100018888(&v59, "");
  sub_100018888(&v57, "");
  sub_100018888(&v55, "");
  sub_100018888(&v53, "");
  __str.__r_.__value_.__r.__words[0] = a1;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)"deployment";
  sub_10000B7A4((uint64_t)&__str, v52);
  *(void *)long long buf = 0;
  __int16 v48 = 0;
  uint64_t v49 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v49) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete((void *)v59);
  }
  long long v59 = *(_OWORD *)object;
  uint64_t v60 = v40;
  HIBYTE(v40) = 0;
  LOBYTE(object[0]) = 0;
  xpc_release(*(xpc_object_t *)v52);
  __str.__r_.__value_.__r.__words[0] = a1;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)"rb_rb_mode";
  sub_10000B7A4((uint64_t)&__str, v52);
  *(void *)long long buf = 0;
  __int16 v48 = 0;
  uint64_t v49 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v49) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  long long v57 = *(_OWORD *)object;
  uint64_t v58 = v40;
  HIBYTE(v40) = 0;
  LOBYTE(object[0]) = 0;
  xpc_release(*(xpc_object_t *)v52);
  __str.__r_.__value_.__r.__words[0] = a1;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)"reason";
  sub_10000B7A4((uint64_t)&__str, v52);
  *(void *)long long buf = 0;
  __int16 v48 = 0;
  uint64_t v49 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v49) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete((void *)v55);
  }
  long long v55 = *(_OWORD *)object;
  uint64_t v56 = v40;
  HIBYTE(v40) = 0;
  LOBYTE(object[0]) = 0;
  xpc_release(*(xpc_object_t *)v52);
  __str.__r_.__value_.__r.__words[0] = a1;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)"rb_rat";
  sub_10000B7A4((uint64_t)&__str, v52);
  *(void *)long long buf = 0;
  __int16 v48 = 0;
  uint64_t v49 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v49) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  long long v53 = *(_OWORD *)object;
  uint64_t v54 = v40;
  HIBYTE(v40) = 0;
  LOBYTE(object[0]) = 0;
  xpc_release(*(xpc_object_t *)v52);
  *(void *)long long buf = a1;
  __int16 v48 = "is_data_preferred";
  sub_10000B7A4((uint64_t)buf, object);
  xpc::dyn_cast_or_default((xpc *)object, 0, v8);
  xpc_release(object[0]);
  *(void *)long long buf = a1;
  __int16 v48 = "is_dc_active";
  sub_10000B7A4((uint64_t)buf, object);
  xpc::dyn_cast_or_default((xpc *)object, 0, v9);
  xpc_release(object[0]);
  *(void *)long long buf = a1;
  __int16 v48 = "is_vonr_active";
  sub_10000B7A4((uint64_t)buf, object);
  xpc::dyn_cast_or_default((xpc *)object, 0, v10);
  xpc_release(object[0]);
  sub_100002260((uint64_t)buf);
  char v11 = sub_100004D64(buf, (uint64_t)"deployment: ", 12);
  if (v60 >= 0) {
    size_t v12 = &v59;
  }
  else {
    size_t v12 = (long long *)v59;
  }
  if (v60 >= 0) {
    uint64_t v13 = HIBYTE(v60);
  }
  else {
    uint64_t v13 = *((void *)&v59 + 1);
  }
  char v14 = sub_100004D64(v11, (uint64_t)v12, v13);
  char v15 = sub_100004D64(v14, (uint64_t)" rb_rb_mode: ", 13);
  if (v58 >= 0) {
    long long v16 = &v57;
  }
  else {
    long long v16 = (long long *)v57;
  }
  if (v58 >= 0) {
    uint64_t v17 = HIBYTE(v58);
  }
  else {
    uint64_t v17 = *((void *)&v57 + 1);
  }
  long long v18 = sub_100004D64(v15, (uint64_t)v16, v17);
  std::string v19 = sub_100004D64(v18, (uint64_t)" reason: ", 9);
  if (v56 >= 0) {
    int v20 = &v55;
  }
  else {
    int v20 = (long long *)v55;
  }
  if (v56 >= 0) {
    uint64_t v21 = HIBYTE(v56);
  }
  else {
    uint64_t v21 = *((void *)&v55 + 1);
  }
  uint64_t v22 = sub_100004D64(v19, (uint64_t)v20, v21);
  sub_100004D64(v22, (uint64_t)" is_data_preferred: ", 20);
  long long v23 = (void *)std::ostream::operator<<();
  sub_100004D64(v23, (uint64_t)" is_dc_active: ", 15);
  long long v24 = (void *)std::ostream::operator<<();
  sub_100004D64(v24, (uint64_t)" is_vonr_active: ", 17);
  std::string v25 = (void *)std::ostream::operator<<();
  int v26 = sub_100004D64(v25, (uint64_t)" rb_rat: ", 9);
  if (v54 >= 0) {
    uint64_t v27 = &v53;
  }
  else {
    uint64_t v27 = (long long *)v53;
  }
  if (v54 >= 0) {
    uint64_t v28 = HIBYTE(v54);
  }
  else {
    uint64_t v28 = *((void *)&v53 + 1);
  }
  xpc_object_t v29 = sub_100004D64(v26, (uint64_t)v27, v28);
  sub_100004D64(v29, (uint64_t)" rb_pdu_discard_perc_bin_index: ", 32);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_100018888(object, "Cellular");
  memset(&v44, 0, sizeof(v44));
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  int v45 = 65537;
  std::string::assign((std::string *)&v41, "PDCP Performance");
  std::string::assign((std::string *)((char *)&v42 + 8), "UL PDCP Discard Rate");
  std::string::operator=(&v44, &__str);
  char v30 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v52 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "WISABC:#I Rule satisfied and triggering ABC for event: cellularNrUlPdcpStats", v52, 2u);
  }
  sub_10009827C((char *)__dst, (long long *)object);
  sub_1000CA1B0((uint64_t *)__dst);
  if (v38 < 0) {
    operator delete(__p);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v34 < 0) {
    operator delete(v33);
  }
  if (v32 < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete(*((void **)&v42 + 1));
  }
  if (SBYTE7(v42) < 0) {
    operator delete((void *)v41);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(object[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v51 < 0) {
    operator delete(v50);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete((void *)v55);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete((void *)v59);
  }
}

void sub_10008E4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xpc_object_t object,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  sub_100098014((uint64_t)&a10);
  sub_100098014((uint64_t)&object);
  if (a41 < 0) {
    operator delete(__p);
  }
  sub_10004E93C((uint64_t)&a42);
  if (*(char *)(v47 - 169) < 0) {
    operator delete(*(void **)(v47 - 192));
  }
  if (*(char *)(v47 - 137) < 0) {
    operator delete(*(void **)(v47 - 160));
  }
  if (*(char *)(v47 - 105) < 0) {
    operator delete(*(void **)(v47 - 128));
  }
  if (*(char *)(v47 - 73) < 0) {
    operator delete(*(void **)(v47 - 96));
  }
  _Unwind_Resume(a1);
}

void sub_10008E8F4(uint64_t a1, uint64_t a2)
{
  int v3 = sub_100098078(a2, "cellularSignalBars");
  LODWORD(v42.__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v3, (int *)&v42);
  if (SLODWORD(v42.__r_.__value_.__l.__data_) > 2)
  {
    sub_100018888(&__str, "");
    BOOL v4 = sub_100098078(a2, "frameErasureRateMean");
    LODWORD(v42.__r_.__value_.__l.__data_) = 0;
    sub_1000989D0(v4, (int *)&v42);
    if (SLODWORD(v42.__r_.__value_.__l.__data_) < 14)
    {
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 112), OS_LOG_TYPE_DEBUG)) {
        sub_100146D20();
      }
    }
    else
    {
      std::string::assign(&__str, "Frame Erasure Rate");
      sub_100018888(&v48, "");
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v48.__r_.__value_.__l.__size_;
      }
      int v6 = &v42;
      sub_1000134A4((uint64_t)&v42, size + 9);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v6 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v7 = &v48;
        }
        else {
          int v7 = (std::string *)v48.__r_.__value_.__r.__words[0];
        }
        memmove(v6, v7, size);
      }
      strcpy((char *)v6 + size, "callType:");
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      std::string v48 = v42;
      BOOL v8 = sub_100098078(a2, "callType");
      unsigned int v50 = 0;
      sub_1000989D0(v8, (int *)&v50);
      if (v50 > 3) {
        BOOL v9 = "Invalid";
      }
      else {
        BOOL v9 = off_1001B9578[v50];
      }
      sub_100018888(&v42, v9);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v10 = &v48;
      }
      else {
        BOOL v10 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v11 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v11 = v48.__r_.__value_.__l.__size_;
      }
      size_t v12 = std::string::insert(&v42, 0, (const std::string::value_type *)v10, v11);
      std::string::size_type v13 = v12->__r_.__value_.__r.__words[0];
      *(void *)long long buf = v12->__r_.__value_.__l.__size_;
      *(void *)&buf[7] = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
      char v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      v48.__r_.__value_.__r.__words[0] = v13;
      v48.__r_.__value_.__l.__size_ = *(void *)buf;
      *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 7) = *(void *)&buf[7];
      *((unsigned char *)&v48.__r_.__value_.__s + 23) = v14;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v15 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v15 = v48.__r_.__value_.__l.__size_;
      }
      long long v16 = &v42;
      sub_1000134A4((uint64_t)&v42, v15 + 20);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v16 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if (v15)
      {
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v17 = &v48;
        }
        else {
          uint64_t v17 = (std::string *)v48.__r_.__value_.__r.__words[0];
        }
        memmove(v16, v17, v15);
      }
      strcpy((char *)v16 + v15, " cellularSignalBars:");
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      std::string v48 = v42;
      long long v18 = sub_100098078(a2, "cellularSignalBars");
      int v51 = 0;
      sub_1000989D0(v18, &v51);
      std::to_string(&v42, v51);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v19 = &v48;
      }
      else {
        std::string v19 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v20 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v20 = v48.__r_.__value_.__l.__size_;
      }
      uint64_t v21 = std::string::insert(&v42, 0, (const std::string::value_type *)v19, v20);
      std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
      *(void *)long long buf = v21->__r_.__value_.__l.__size_;
      *(void *)&buf[7] = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
      char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      v48.__r_.__value_.__r.__words[0] = v22;
      v48.__r_.__value_.__l.__size_ = *(void *)buf;
      *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 7) = *(void *)&buf[7];
      *((unsigned char *)&v48.__r_.__value_.__s + 23) = v23;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v24 = v48.__r_.__value_.__l.__size_;
      }
      std::string v25 = &v42;
      sub_1000134A4((uint64_t)&v42, v24 + 5);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v25 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if (v24)
      {
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v26 = &v48;
        }
        else {
          int v26 = (std::string *)v48.__r_.__value_.__r.__words[0];
        }
        memmove(v25, v26, v24);
      }
      strcpy((char *)v25 + v24, " RAT:");
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      std::string v48 = v42;
      uint64_t v27 = sub_100098078(a2, "cellularRadioTech");
      sub_100098230((uint64_t)v27, &v42);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = &v48;
      }
      else {
        uint64_t v28 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v29 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v29 = v48.__r_.__value_.__l.__size_;
      }
      char v30 = std::string::insert(&v42, 0, (const std::string::value_type *)v28, v29);
      std::string::size_type v31 = v30->__r_.__value_.__r.__words[0];
      *(void *)long long buf = v30->__r_.__value_.__l.__size_;
      *(void *)&buf[7] = *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
      char v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      v48.__r_.__value_.__r.__words[0] = v31;
      v48.__r_.__value_.__l.__size_ = *(void *)buf;
      *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 7) = *(void *)&buf[7];
      *((unsigned char *)&v48.__r_.__value_.__s + 23) = v32;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      sub_100018888(&v42, "Cellular");
      memset(&v46, 0, sizeof(v46));
      long long v45 = 0u;
      long long v44 = 0u;
      long long v43 = 0u;
      int v47 = 65537;
      std::string::assign((std::string *)&v43, "Audio Quality");
      std::string::operator=((std::string *)((char *)&v44 + 8), &__str);
      std::string::operator=(&v46, &v48);
      unint64_t v33 = *(NSObject **)(qword_1001D8080 + 112);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "WISABC:#I Rule satisfied and triggering ABC for event: IMSCallSummaryStats", buf, 2u);
      }
      sub_10009827C((char *)v34, (long long *)&v42);
      sub_1000CA1B0((uint64_t *)v34);
      if (v41 < 0) {
        operator delete(__p);
      }
      if (v39 < 0) {
        operator delete(v38);
      }
      if (v37 < 0) {
        operator delete(v36);
      }
      if (v35 < 0) {
        operator delete(v34[0]);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v45) < 0) {
        operator delete(*((void **)&v44 + 1));
      }
      if (SBYTE7(v44) < 0) {
        operator delete((void *)v43);
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 112), OS_LOG_TYPE_DEBUG))
  {
    sub_100146C94();
  }
}

void sub_10008EF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,long long __p,int a23,__int16 a24,char a25,char a26)
{
  sub_100098014((uint64_t)&a9);
  sub_100098014((uint64_t)&__p);
  if (*(char *)(v26 - 121) < 0) {
    operator delete(*(void **)(v26 - 144));
  }
  if (*(char *)(v26 - 89) < 0) {
    operator delete(*(void **)(v26 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_10008F194(uint64_t a1, uint64_t a2)
{
  int v3 = sub_100098078(a2, "cellularSignalBars");
  LODWORD(v46.__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v3, (int *)&v46);
  if (SLODWORD(v46.__r_.__value_.__l.__data_) <= 2)
  {
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 112), OS_LOG_TYPE_DEBUG)) {
      sub_100146DB0();
    }
    return;
  }
  sub_100018888(&__str, "");
  BOOL v4 = sub_100098078(a2, "speechBadFrameCount");
  LODWORD(v46.__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v4, (int *)&v46);
  if (SLODWORD(v46.__r_.__value_.__l.__data_) <= 0)
  {
    int v6 = sub_100098078(a2, "speechLostFrameCount");
    LODWORD(v46.__r_.__value_.__l.__data_) = 0;
    sub_1000989D0(v6, (int *)&v46);
    if (SLODWORD(v46.__r_.__value_.__l.__data_) < 6)
    {
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 112), OS_LOG_TYPE_DEBUG)) {
        sub_100146E3C();
      }
      goto LABEL_104;
    }
    size_t v5 = "Loss Frame Rate";
  }
  else
  {
    size_t v5 = "Bad Frame Rate";
  }
  std::string::assign(&__str, v5);
  sub_100018888(&v52, "");
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v52.__r_.__value_.__l.__size_;
  }
  BOOL v8 = &v46;
  sub_1000134A4((uint64_t)&v46, size + 9);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    BOOL v8 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v9 = &v52;
    }
    else {
      BOOL v9 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    memmove(v8, v9, size);
  }
  strcpy((char *)v8 + size, "callType:");
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  std::string v52 = v46;
  BOOL v10 = sub_100098078(a2, "callType");
  unsigned int v54 = 0;
  sub_1000989D0(v10, (int *)&v54);
  if (v54 > 3) {
    std::string::size_type v11 = "Invalid";
  }
  else {
    std::string::size_type v11 = off_1001B9578[v54];
  }
  sub_100018888(&v46, v11);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v12 = &v52;
  }
  else {
    size_t v12 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = v52.__r_.__value_.__l.__size_;
  }
  char v14 = std::string::insert(&v46, 0, (const std::string::value_type *)v12, v13);
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
  *(void *)long long buf = v14->__r_.__value_.__l.__size_;
  *(void *)&buf[7] = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  v52.__r_.__value_.__r.__words[0] = v15;
  v52.__r_.__value_.__l.__size_ = *(void *)buf;
  *(std::string::size_type *)((char *)&v52.__r_.__value_.__r.__words[1] + 7) = *(void *)&buf[7];
  *((unsigned char *)&v52.__r_.__value_.__s + 23) = v16;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v52.__r_.__value_.__l.__size_;
  }
  long long v18 = &v46;
  sub_1000134A4((uint64_t)&v46, v17 + 15);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v18 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if (v17)
  {
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v19 = &v52;
    }
    else {
      std::string v19 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, " statDirection:");
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  std::string v52 = v46;
  std::string::size_type v20 = sub_100098078(a2, "statDirection");
  int v55 = 0;
  sub_1000989D0(v20, &v55);
  uint64_t v21 = "Invalid";
  if (v55 == 1) {
    uint64_t v21 = "DL";
  }
  if (v55) {
    std::string::size_type v22 = (char *)v21;
  }
  else {
    std::string::size_type v22 = "UL";
  }
  sub_100018888(&v46, v22);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v23 = &v52;
  }
  else {
    char v23 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v24 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v24 = v52.__r_.__value_.__l.__size_;
  }
  std::string v25 = std::string::insert(&v46, 0, (const std::string::value_type *)v23, v24);
  std::string::size_type v26 = v25->__r_.__value_.__r.__words[0];
  *(void *)long long buf = v25->__r_.__value_.__l.__size_;
  *(void *)&buf[7] = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  char v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  v52.__r_.__value_.__r.__words[0] = v26;
  v52.__r_.__value_.__l.__size_ = *(void *)buf;
  *(std::string::size_type *)((char *)&v52.__r_.__value_.__r.__words[1] + 7) = *(void *)&buf[7];
  *((unsigned char *)&v52.__r_.__value_.__s + 23) = v27;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = v52.__r_.__value_.__l.__size_;
  }
  std::string::size_type v29 = &v46;
  sub_1000134A4((uint64_t)&v46, v28 + 20);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v29 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if (v28)
  {
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v30 = &v52;
    }
    else {
      char v30 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    memmove(v29, v30, v28);
  }
  strcpy((char *)v29 + v28, " cellularSignalBars:");
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  std::string v52 = v46;
  std::string::size_type v31 = sub_100098078(a2, "cellularSignalBars");
  int v56 = 0;
  sub_1000989D0(v31, &v56);
  std::to_string(&v46, v56);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v32 = &v52;
  }
  else {
    char v32 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v33 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v33 = v52.__r_.__value_.__l.__size_;
  }
  char v34 = std::string::insert(&v46, 0, (const std::string::value_type *)v32, v33);
  std::string::size_type v35 = v34->__r_.__value_.__r.__words[0];
  *(void *)long long buf = v34->__r_.__value_.__l.__size_;
  *(void *)&buf[7] = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
  char v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  v52.__r_.__value_.__r.__words[0] = v35;
  v52.__r_.__value_.__l.__size_ = *(void *)buf;
  *(std::string::size_type *)((char *)&v52.__r_.__value_.__r.__words[1] + 7) = *(void *)&buf[7];
  *((unsigned char *)&v52.__r_.__value_.__s + 23) = v36;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  sub_100018888(&v46, "Cellular");
  memset(&v50, 0, sizeof(v50));
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  int v51 = 65537;
  std::string::assign((std::string *)&v47, "Audio Quality");
  std::string::operator=((std::string *)((char *)&v48 + 8), &__str);
  std::string::operator=(&v50, &v52);
  char v37 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "WISABC:#I Rule satisfied and triggering ABC for event: IMSCallAudioFrameStats", buf, 2u);
  }
  sub_10009827C((char *)v38, (long long *)&v46);
  sub_1000CA1B0((uint64_t *)v38);
  if (v45 < 0) {
    operator delete(__p);
  }
  if (v43 < 0) {
    operator delete(v42);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(*((void **)&v48 + 1));
  }
  if (SBYTE7(v48) < 0) {
    operator delete((void *)v47);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
LABEL_104:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_10008F874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,long long __p,int a23,__int16 a24,char a25,char a26)
{
  sub_100098014((uint64_t)&a9);
  sub_100098014((uint64_t)&__p);
  if (*(char *)(v26 - 121) < 0) {
    operator delete(*(void **)(v26 - 144));
  }
  if (*(char *)(v26 - 97) < 0) {
    operator delete(*(void **)(v26 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_10008FAA8(uint64_t *a1, uint64_t a2)
{
  BOOL v4 = sub_100098078(a2, "cellularSignalBars");
  LODWORD(v48.__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v4, (int *)&v48);
  if (SLODWORD(v48.__r_.__value_.__l.__data_) <= 2)
  {
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 112), OS_LOG_TYPE_DEBUG)) {
      sub_100146ECC();
    }
    return;
  }
  sub_100018888(&__str, "");
  size_t v5 = sub_100098078(a2, "AverageSpeechLossCount");
  LODWORD(v48.__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v5, (int *)&v48);
  if (SLODWORD(v48.__r_.__value_.__l.__data_) <= 2)
  {
    int v7 = sub_100098078(a2, "ContinuousSpeechLossCount");
    LODWORD(v48.__r_.__value_.__l.__data_) = 0;
    sub_1000989D0(v7, (int *)&v48);
    if (SLODWORD(v48.__r_.__value_.__l.__data_) < 7)
    {
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 112), OS_LOG_TYPE_DEBUG)) {
        sub_100146F58();
      }
      goto LABEL_107;
    }
    int v6 = "Cont Speech Loss per Speech Segment";
  }
  else
  {
    int v6 = "Avg Speech Loss per Speech Segment";
  }
  std::string::assign(&__str, v6);
  sub_100018888(&v54, "");
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v54.__r_.__value_.__l.__size_;
  }
  BOOL v9 = &v48;
  sub_1000134A4((uint64_t)&v48, size + 9);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    BOOL v9 = (std::string *)v48.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v10 = &v54;
    }
    else {
      BOOL v10 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    memmove(v9, v10, size);
  }
  strcpy((char *)v9 + size, "callType:");
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  std::string v54 = v48;
  std::string::size_type v11 = sub_100098078(a2, "callType");
  unsigned int v56 = 0;
  sub_1000989D0(v11, (int *)&v56);
  if (v56 > 3) {
    size_t v12 = "Invalid";
  }
  else {
    size_t v12 = off_1001B9578[v56];
  }
  sub_100018888(&v48, v12);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = &v54;
  }
  else {
    std::string::size_type v13 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = v54.__r_.__value_.__l.__size_;
  }
  std::string::size_type v15 = std::string::insert(&v48, 0, (const std::string::value_type *)v13, v14);
  std::string::size_type v16 = v15->__r_.__value_.__r.__words[0];
  *(void *)long long buf = v15->__r_.__value_.__l.__size_;
  *(void *)&buf[7] = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  v54.__r_.__value_.__r.__words[0] = v16;
  v54.__r_.__value_.__l.__size_ = *(void *)buf;
  *(std::string::size_type *)((char *)&v54.__r_.__value_.__r.__words[1] + 7) = *(void *)&buf[7];
  *((unsigned char *)&v54.__r_.__value_.__s + 23) = v17;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v18 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v18 = v54.__r_.__value_.__l.__size_;
  }
  std::string v19 = &v48;
  sub_1000134A4((uint64_t)&v48, v18 + 15);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v19 = (std::string *)v48.__r_.__value_.__r.__words[0];
  }
  if (v18)
  {
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = &v54;
    }
    else {
      std::string::size_type v20 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, " statDirection:");
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  std::string v54 = v48;
  uint64_t v21 = sub_100098078(a2, "statDirection");
  int v57 = 0;
  sub_1000989D0(v21, &v57);
  std::string::size_type v22 = "Invalid";
  if (v57 == 1) {
    std::string::size_type v22 = "DL";
  }
  if (v57) {
    char v23 = (char *)v22;
  }
  else {
    char v23 = "UL";
  }
  sub_100018888(&v48, v23);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v24 = &v54;
  }
  else {
    std::string::size_type v24 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = v54.__r_.__value_.__l.__size_;
  }
  uint64_t v26 = std::string::insert(&v48, 0, (const std::string::value_type *)v24, v25);
  std::string::size_type v27 = v26->__r_.__value_.__r.__words[0];
  *(void *)long long buf = v26->__r_.__value_.__l.__size_;
  *(void *)&buf[7] = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
  char v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  v54.__r_.__value_.__r.__words[0] = v27;
  v54.__r_.__value_.__l.__size_ = *(void *)buf;
  *(std::string::size_type *)((char *)&v54.__r_.__value_.__r.__words[1] + 7) = *(void *)&buf[7];
  *((unsigned char *)&v54.__r_.__value_.__s + 23) = v28;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v29 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v29 = v54.__r_.__value_.__l.__size_;
  }
  char v30 = &v48;
  sub_1000134A4((uint64_t)&v48, v29 + 20);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v30 = (std::string *)v48.__r_.__value_.__r.__words[0];
  }
  if (v29)
  {
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = &v54;
    }
    else {
      std::string::size_type v31 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, " cellularSignalBars:");
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  std::string v54 = v48;
  char v32 = sub_100098078(a2, "cellularSignalBars");
  int v58 = 0;
  sub_1000989D0(v32, &v58);
  std::to_string(&v48, v58);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v33 = &v54;
  }
  else {
    std::string::size_type v33 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v34 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v34 = v54.__r_.__value_.__l.__size_;
  }
  std::string::size_type v35 = std::string::insert(&v48, 0, (const std::string::value_type *)v33, v34);
  std::string::size_type v36 = v35->__r_.__value_.__r.__words[0];
  *(void *)long long buf = v35->__r_.__value_.__l.__size_;
  *(void *)&buf[7] = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
  char v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  v54.__r_.__value_.__r.__words[0] = v36;
  v54.__r_.__value_.__l.__size_ = *(void *)buf;
  *(std::string::size_type *)((char *)&v54.__r_.__value_.__r.__words[1] + 7) = *(void *)&buf[7];
  *((unsigned char *)&v54.__r_.__value_.__s + 23) = v37;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  sub_100018888(&v48, "Cellular");
  memset(&v52, 0, sizeof(v52));
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  int v53 = 65537;
  std::string::assign((std::string *)&v49, "Audio Quality");
  std::string::operator=((std::string *)((char *)&v50 + 8), &__str);
  std::string::operator=(&v52, &v54);
  char v38 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) >= 0) {
      char v39 = a1;
    }
    else {
      char v39 = (uint64_t *)*a1;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v39;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
  }
  sub_10009827C((char *)v40, (long long *)&v48);
  sub_1000CA1B0((uint64_t *)v40);
  if (v47 < 0) {
    operator delete(__p);
  }
  if (v45 < 0) {
    operator delete(v44);
  }
  if (v43 < 0) {
    operator delete(v42);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(*((void **)&v50 + 1));
  }
  if (SBYTE7(v50) < 0) {
    operator delete((void *)v49);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
LABEL_107:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1000901B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,long long __p,int a23,__int16 a24,char a25,char a26)
{
  sub_100098014((uint64_t)&a9);
  sub_100098014((uint64_t)&__p);
  if (*(char *)(v26 - 137) < 0) {
    operator delete(*(void **)(v26 - 160));
  }
  if (*(char *)(v26 - 113) < 0) {
    operator delete(*(void **)(v26 - 136));
  }
  _Unwind_Resume(a1);
}

void sub_1000903E4(std::string::size_type a1, uint64_t a2)
{
  sub_100018888(&v49, "");
  sub_100018888(v48, "");
  BOOL v4 = sub_100098078(a2, "is_success");
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_100098C84(v4, &__p);
  int v5 = __p.__r_.__value_.__s.__data_[0];
  int v6 = sub_100098078(a2, "is_chatbot");
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_100098C84(v6, &__p);
  int v7 = __p.__r_.__value_.__s.__data_[0];
  BOOL v8 = sub_100098078(a2, "direction");
  sub_100098230((uint64_t)v8, &__p);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  std::string v49 = __p;
  BOOL v9 = sub_100098078(a2, "error_string");
  sub_100098230((uint64_t)v9, &__p);
  BOOL v10 = sub_100098078(a2, "message_type");
  sub_100098230((uint64_t)v10, &buf);
  if (v5) {
    goto LABEL_4;
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
LABEL_4:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (buf.__r_.__value_.__l.__size_)
      {
        size_t v12 = (void *)buf.__r_.__value_.__r.__words[0];
LABEL_66:
        operator delete(v12);
        goto LABEL_67;
      }
    }
    else if (*((unsigned char *)&buf.__r_.__value_.__s + 23))
    {
      goto LABEL_67;
    }
  }
  std::operator+<char>();
  std::string::size_type v13 = std::string::append(&v44, " error_string: ");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
  }
  char v17 = std::string::append(&v45, (const std::string::value_type *)p_p, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::string v19 = std::string::append(&v46, " isChatbot: ");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v43, v7);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &v43;
  }
  else {
    uint64_t v21 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = v43.__r_.__value_.__l.__size_;
  }
  char v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
  std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
  v50[0] = v23->__r_.__value_.__l.__size_;
  *(void *)((char *)v50 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
  char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if ((v48[23] & 0x80000000) != 0) {
    operator delete(*(void **)v48);
  }
  *(void *)std::string v48 = v24;
  *(void *)&uint8_t v48[8] = v50[0];
  *(void *)&v48[15] = *(void *)((char *)v50 + 7);
  v48[23] = v25;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_100018888(&__p, "Telephony");
  sub_100018888(&v37, "RCS");
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000173FC(&v39, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    std::string v39 = v49;
  }
  if ((v48[23] & 0x80000000) != 0)
  {
    sub_1000173FC(&v40, *(void **)v48, *(unint64_t *)&v48[8]);
  }
  else
  {
    long long v40 = *(_OWORD *)v48;
    uint64_t v41 = *(void *)&v48[16];
  }
  int v42 = 0x10000;
  uint64_t v26 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 23) >= 0) {
      std::string::size_type v27 = a1;
    }
    else {
      std::string::size_type v27 = *(void *)a1;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", (uint8_t *)&buf, 0xCu);
  }
  sub_10009827C((char *)v28, (long long *)&__p);
  sub_1000CA1B0((uint64_t *)v28);
  if (v35 < 0) {
    operator delete(v34);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  if (v31 < 0) {
    operator delete(v30);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v38 < 0)
  {
    size_t v12 = v37;
    goto LABEL_66;
  }
LABEL_67:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v48[23] & 0x80000000) != 0) {
    operator delete(*(void **)v48);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
}

void sub_100090874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v55 - 129) < 0) {
    operator delete(*(void **)(v55 - 152));
  }
  if (*(char *)(v55 - 105) < 0) {
    operator delete(*(void **)(v55 - 128));
  }
  _Unwind_Resume(exception_object);
}

char *sub_100090A38(uint64_t *a1, uint64_t a2)
{
  BOOL v4 = sub_100098078(a2, "is_registered");
  LOBYTE(v31[0]) = 0;
  sub_100098C84(v4, v31);
  int v5 = sub_100098078(a2, "is_provisioned");
  LOBYTE(v31[0]) = 0;
  xpc_object_t result = sub_100098C84(v5, v31);
  if (!LOBYTE(v31[0]))
  {
    sub_100002260((uint64_t)v31);
    int v7 = sub_100004D64(v31, (uint64_t)"is_registered: ", 15);
    *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) |= 1u;
    BOOL v8 = (void *)std::ostream::operator<<();
    BOOL v9 = sub_100004D64(v8, (uint64_t)" is_provisioned: ", 17);
    *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 8) |= 1u;
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_100018888(v20, "Telephony");
    sub_100018888(&v22, "RCS");
    sub_100018888(&v24, "RCSMessageProvisionRegistrationDaily");
    if (SHIBYTE(v30) < 0)
    {
      sub_1000173FC(&v26, v29[0], (unint64_t)v29[1]);
    }
    else
    {
      long long v26 = *(_OWORD *)v29;
      uint64_t v27 = v30;
    }
    int v28 = 0x10000;
    BOOL v10 = *(NSObject **)(qword_1001D8080 + 112);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        std::string::size_type v11 = a1;
      }
      else {
        std::string::size_type v11 = (uint64_t *)*a1;
      }
      *(_DWORD *)std::string buf = 136315138;
      std::string::size_type v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
    }
    sub_10009827C((char *)v12, (long long *)v20);
    sub_1000CA1B0((uint64_t *)v12);
    if (v19 < 0) {
      operator delete(__p);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    if (SHIBYTE(v27) < 0) {
      operator delete((void *)v26);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v29[0]);
    }
    if (v32 < 0) {
      operator delete((void *)v31[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (char *)std::ios::~ios();
  }
  return result;
}

void sub_100090DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  sub_10004E93C((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_100090E7C(uint64_t *a1, uint64_t a2)
{
  long long v57 = 0uLL;
  uint64_t v58 = 0;
  long long __p = 0uLL;
  uint64_t v56 = 0;
  long long v53 = 0uLL;
  uint64_t v54 = 0;
  memset(&v52, 0, sizeof(v52));
  sub_100018888(&v64, "null");
  sub_100018888(v66, "kFullXml");
  sub_100018888(v67, "kRefreshXml");
  sub_100018888(&v68, "kClientAuthenticityXml");
  sub_100018888(v70, "kClientAuthenticityResponseXml");
  sub_100018888(v71, "kAccessControlXml");
  sub_100018888(v72, "kCodeResponse");
  sub_100018888(v73, "kEmptyClientAuthOutput");
  sub_100018888(v74, "kResponseWithNeedsPSAccess");
  sub_100018888(v75, "kAttestationResponse");
  sub_100098DB0((uint64_t)v51, (unsigned __int8 *)&v64, 10);
  for (uint64_t i = 0; i != -30; i -= 3)
  {
    if (SHIBYTE(v75[i + 2]) < 0) {
      operator delete((void *)v75[i]);
    }
  }
  int v5 = sub_100098078(a2, "response");
  unsigned int v59 = 0;
  sub_1000989D0(v5, (int *)&v59);
  sub_100097F00(v59, &v64);
  if (SHIBYTE(v56) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v64;
  uint64_t v56 = v65;
  int v6 = sub_100098078(a2, "phase");
  unsigned int v60 = 0;
  sub_1000989D0(v6, (int *)&v60);
  sub_100097ED4(v60, &v64);
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  long long v57 = v64;
  uint64_t v58 = v65;
  int v7 = sub_100098078(a2, "code");
  unsigned int v60 = 0;
  sub_1000989D0(v7, (int *)&v60);
  if (v58 < 0)
  {
    if (*((void *)&v57 + 1) != 22)
    {
      BOOL v9 = v60 != 200;
      goto LABEL_23;
    }
    BOOL v8 = (unint64_t *)v57;
  }
  else
  {
    if (HIBYTE(v58) != 22)
    {
      BOOL v9 = v60 != 200;
      goto LABEL_20;
    }
    BOOL v8 = (unint64_t *)&v57;
  }
  if (bswap64(*v8) == 0x6B496E697469616CLL
    && bswap64(v8[1]) == 0x496E736563757265
    && bswap64(*(unint64_t *)((char *)v8 + 14)) == 0x7265416363657373
    && v60 != 200
    && v60 != 511)
  {
    char v17 = "RCSMessageProvisioningInitialInsecureAccess";
    goto LABEL_42;
  }
  BOOL v9 = v60 != 200;
  if (v58 < 0)
  {
LABEL_23:
    if (*((void *)&v57 + 1) == 22)
    {
      BOOL v10 = (uint64_t *)v57;
LABEL_25:
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      uint64_t v13 = *(uint64_t *)((char *)v10 + 14);
      if (v11 == 0x6C616974696E496BLL && v12 == 0x6572756365736E49 && v13 == 0x7373656363416572) {
        goto LABEL_37;
      }
      goto LABEL_35;
    }
    goto LABEL_35;
  }
LABEL_20:
  if (HIBYTE(v58) == 22)
  {
    BOOL v10 = (uint64_t *)&v57;
    goto LABEL_25;
  }
LABEL_35:
  if (v9)
  {
    char v17 = "RCSMessageProvisioningOtherPhase";
    goto LABEL_42;
  }
LABEL_37:
  if (sub_1000552E0(v51, (unsigned __int8 *)&__p)) {
    goto LABEL_94;
  }
  char v17 = "RCSMessageProvisioningXMLs";
LABEL_42:
  std::string::assign(&v52, v17);
  long long v18 = sub_100098078(a2, "transport");
  unsigned int v61 = 0;
  sub_1000989D0(v18, (int *)&v61);
  sub_100097F2C(v61, &v64);
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  long long v53 = v64;
  uint64_t v54 = v65;
  sub_100002260((uint64_t)&v64);
  char v19 = sub_100004D64(&v64, (uint64_t)"Phase: ", 7);
  if (v58 >= 0) {
    long long v20 = &v57;
  }
  else {
    long long v20 = (long long *)v57;
  }
  if (v58 >= 0) {
    uint64_t v21 = HIBYTE(v58);
  }
  else {
    uint64_t v21 = *((void *)&v57 + 1);
  }
  std::string::size_type v22 = sub_100004D64(v19, (uint64_t)v20, v21);
  sub_100004D64(v22, (uint64_t)" Code: ", 7);
  char v23 = (void *)std::ostream::operator<<();
  std::string::size_type v24 = sub_100004D64(v23, (uint64_t)" Response: ", 11);
  if (v56 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (long long *)__p;
  }
  if (v56 >= 0) {
    uint64_t v26 = HIBYTE(v56);
  }
  else {
    uint64_t v26 = *((void *)&__p + 1);
  }
  uint64_t v27 = sub_100004D64(v24, (uint64_t)p_p, v26);
  int v28 = sub_100004D64(v27, (uint64_t)" Transport: ", 12);
  if (v54 >= 0) {
    char v29 = &v53;
  }
  else {
    char v29 = (long long *)v53;
  }
  if (v54 >= 0) {
    uint64_t v30 = HIBYTE(v54);
  }
  else {
    uint64_t v30 = *((void *)&v53 + 1);
  }
  sub_100004D64(v28, (uint64_t)v29, v30);
  std::stringbuf::str();
  sub_100018888(v41, "Telephony");
  sub_100018888(&v43, "RCS");
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000173FC(&v45, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = v52;
  }
  if (SHIBYTE(v50) < 0)
  {
    sub_1000173FC(&v46, v49[0], (unint64_t)v49[1]);
  }
  else
  {
    long long v46 = *(_OWORD *)v49;
    uint64_t v47 = v50;
  }
  int v48 = 0x10000;
  char v31 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) >= 0) {
      char v32 = a1;
    }
    else {
      char v32 = (uint64_t *)*a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    double v63 = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
  }
  sub_10009827C((char *)__dst, (long long *)v41);
  sub_1000CA1B0((uint64_t *)__dst);
  if (v40 < 0) {
    operator delete(v39);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v34 < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)v46);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete(v49[0]);
  }
  if (v69 < 0) {
    operator delete(v68);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_94:
  sub_100055F8C((uint64_t)v51);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
}

void sub_10009162C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  sub_10004E93C((uint64_t)&a75);
  sub_100055F8C((uint64_t)&a51);
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  _Unwind_Resume(a1);
}

void sub_100091860(uint64_t *a1, uint64_t a2)
{
  sub_100018888(&v59, "");
  BOOL v4 = sub_100098078(a2, "is_successful");
  v54[0].__r_.__value_.__s.__data_[0] = 0;
  sub_100098C84(v4, v54);
  int v5 = v54[0].__r_.__value_.__s.__data_[0];
  int v6 = sub_100098078(a2, "error_code");
  LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v6, (int *)v54);
  int data = (int)v54[0].__r_.__value_.__l.__data_;
  BOOL v8 = sub_100098078(a2, "failure_reason");
  sub_100098230((uint64_t)v8, v54);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  std::string v59 = v54[0];
  BOOL v9 = sub_100098078(a2, "latency");
  int v60 = 0;
  sub_1000989D0(v9, &v60);
  int v10 = v60;
  if (v5)
  {
    if (data != 200 || v60 < 10001) {
      goto LABEL_80;
    }
    uint64_t v11 = "RCSSIPSessionSetupLatency";
    goto LABEL_12;
  }
  std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v59.__r_.__value_.__l.__size_;
  }
  if (size && data != 200)
  {
    uint64_t v11 = "RCSSIPSessionSetup";
LABEL_12:
    sub_100018888(&v58, "");
    uint64_t v13 = sub_100098078(a2, "direction");
    sub_100098230((uint64_t)v13, v54);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    std::string v58 = v54[0];
    sub_100018888(&v57, "");
    long long v14 = sub_100098078(a2, "invite_type");
    sub_100098230((uint64_t)v14, v54);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    std::string v57 = v54[0];
    sub_100002260((uint64_t)v54);
    char v15 = sub_100004D64(v54, (uint64_t)"direction: ", 11);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = &v58;
    }
    else {
      std::string::size_type v16 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v17 = v58.__r_.__value_.__l.__size_;
    }
    long long v18 = sub_100004D64(v15, (uint64_t)v16, v17);
    char v19 = sub_100004D64(v18, (uint64_t)" failure_reason: ", 17);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v20 = &v59;
    }
    else {
      long long v20 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = v59.__r_.__value_.__l.__size_;
    }
    std::string::size_type v22 = sub_100004D64(v19, (uint64_t)v20, v21);
    sub_100004D64(v22, (uint64_t)" error_code: ", 13);
    char v23 = (void *)std::ostream::operator<<();
    std::string::size_type v24 = sub_100004D64(v23, (uint64_t)" invite_type: ", 14);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v25 = &v57;
    }
    else {
      char v25 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v26 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v26 = v57.__r_.__value_.__l.__size_;
    }
    uint64_t v27 = sub_100004D64(v24, (uint64_t)v25, v26);
    int v28 = sub_100004D64(v27, (uint64_t)" latency:", 9);
    if (v10 >> 4 >= 0x271) {
      char v29 = ">10secs";
    }
    else {
      char v29 = "5-10secs";
    }
    if (v10 >= 5000) {
      uint64_t v30 = (char *)v29;
    }
    else {
      uint64_t v30 = "<5secs";
    }
    sub_100018888(__p, v30);
    if ((v44 & 0x80u) == 0) {
      char v31 = __p;
    }
    else {
      char v31 = (void **)__p[0];
    }
    if ((v44 & 0x80u) == 0) {
      uint64_t v32 = v44;
    }
    else {
      uint64_t v32 = (uint64_t)__p[1];
    }
    sub_100004D64(v28, (uint64_t)v31, v32);
    if ((char)v44 < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    sub_100018888(__p, "Telephony");
    sub_100018888(&v45, "RCS");
    sub_100018888(&v47, v11);
    if (SHIBYTE(v53) < 0)
    {
      sub_1000173FC(&v49, v52[0], (unint64_t)v52[1]);
    }
    else
    {
      long long v49 = *(_OWORD *)v52;
      uint64_t v50 = v53;
    }
    int v51 = 0x10000;
    char v33 = *(NSObject **)(qword_1001D8080 + 112);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        char v34 = a1;
      }
      else {
        char v34 = (uint64_t *)*a1;
      }
      *(_DWORD *)std::string buf = 136315138;
      char v62 = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
    }
    sub_10009827C((char *)v35, (long long *)__p);
    sub_1000CA1B0((uint64_t *)v35);
    if (v42 < 0) {
      operator delete(v41);
    }
    if (v40 < 0) {
      operator delete(v39);
    }
    if (v38 < 0) {
      operator delete(v37);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    if (SHIBYTE(v50) < 0) {
      operator delete((void *)v49);
    }
    if (v48 < 0) {
      operator delete(v47);
    }
    if (v46 < 0) {
      operator delete(v45);
    }
    if ((char)v44 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v53) < 0) {
      operator delete(v52[0]);
    }
    *(std::string::size_type *)((char *)v54[0].__r_.__value_.__r.__words
    if (v56 < 0) {
      operator delete(v55);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
  }
LABEL_80:
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
}

void sub_100091E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (*(char *)(v50 - 105) < 0) {
    operator delete(*(void **)(v50 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_100092004(uint64_t *a1, uint64_t a2)
{
  memset(&v50, 0, sizeof(v50));
  memset(&v49, 0, sizeof(v49));
  sub_100018888(&v48, "");
  BOOL v4 = sub_100098078(a2, "is_successful");
  v45[0].__r_.__value_.__s.__data_[0] = 0;
  sub_100098C84(v4, v45);
  int v5 = v45[0].__r_.__value_.__s.__data_[0];
  int v6 = sub_100098078(a2, "direction");
  sub_100098230((uint64_t)v6, v45);
  std::string v50 = v45[0];
  int v7 = sub_100098078(a2, "sip_error_code");
  LODWORD(v45[0].__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v7, (int *)v45);
  int data = (int)v45[0].__r_.__value_.__l.__data_;
  BOOL v9 = sub_100098078(a2, "latency");
  int v51 = 0;
  sub_1000989D0(v9, &v51);
  int v10 = v51;
  if (!v5 && data != 200)
  {
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v50.__r_.__value_.__l.__size_ != 2) {
        goto LABEL_76;
      }
      uint64_t v11 = (std::string *)v50.__r_.__value_.__r.__words[0];
      if (*(_WORD *)v50.__r_.__value_.__l.__data_ != 20301) {
        goto LABEL_9;
      }
    }
    else
    {
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) != 2) {
        goto LABEL_76;
      }
      if (LOWORD(v50.__r_.__value_.__l.__data_) != 20301)
      {
        uint64_t v11 = &v50;
LABEL_9:
        if (LOWORD(v11->__r_.__value_.__l.__data_) != 21581) {
          goto LABEL_76;
        }
        uint64_t v12 = "RCSPagerMessageReceiveIPT";
        goto LABEL_22;
      }
    }
    uint64_t v12 = "RCSPagerMessageSendIPT";
LABEL_22:
    std::string::assign(&v48, v12);
    long long v14 = sub_100098078(a2, "message_type");
    sub_100098230((uint64_t)v14, v45);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    std::string v49 = v45[0];
    sub_100002260((uint64_t)v45);
    char v15 = sub_100004D64(v45, (uint64_t)"message_type: ", 14);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = &v49;
    }
    else {
      std::string::size_type v16 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v49.__r_.__value_.__l.__size_;
    }
    long long v18 = sub_100004D64(v15, (uint64_t)v16, size);
    sub_100004D64(v18, (uint64_t)" sip_error_code: ", 17);
    char v19 = (void *)std::ostream::operator<<();
    long long v20 = sub_100004D64(v19, (uint64_t)" latency: ", 10);
    if (v10 >> 4 >= 0x271) {
      std::string::size_type v21 = ">10secs";
    }
    else {
      std::string::size_type v21 = "5-10secs";
    }
    if (v10 >= 5000) {
      std::string::size_type v22 = (char *)v21;
    }
    else {
      std::string::size_type v22 = "<5secs";
    }
    sub_100018888(__p, v22);
    if ((v36 & 0x80u) == 0) {
      char v23 = __p;
    }
    else {
      char v23 = (void **)__p[0];
    }
    if ((v36 & 0x80u) == 0) {
      uint64_t v24 = v36;
    }
    else {
      uint64_t v24 = (uint64_t)__p[1];
    }
    sub_100004D64(v20, (uint64_t)v23, v24);
    if ((char)v36 < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    sub_100018888(__p, "Telephony");
    sub_100018888(&v37, "RCS");
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000173FC(&v39, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    }
    else {
      std::string v39 = v48;
    }
    if (SHIBYTE(v44) < 0)
    {
      sub_1000173FC(&v40, v43[0], (unint64_t)v43[1]);
    }
    else
    {
      long long v40 = *(_OWORD *)v43;
      uint64_t v41 = v44;
    }
    int v42 = 0x10000;
    char v25 = *(NSObject **)(qword_1001D8080 + 112);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        std::string::size_type v26 = a1;
      }
      else {
        std::string::size_type v26 = (uint64_t *)*a1;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v53 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
    }
    sub_10009827C((char *)__dst, (long long *)__p);
    sub_1000CA1B0((uint64_t *)__dst);
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v30 < 0) {
      operator delete(v29);
    }
    if (v28 < 0) {
      operator delete(__dst[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete((void *)v40);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (v38 < 0) {
      operator delete(v37);
    }
    if ((char)v36 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v44) < 0) {
      operator delete(v43[0]);
    }
    *(std::string::size_type *)((char *)v45[0].__r_.__value_.__r.__words
    if (v47 < 0) {
      operator delete(v46);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    goto LABEL_76;
  }
  if (v5 && data == 200 && v51 >= 5001)
  {
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v50.__r_.__value_.__l.__size_ != 2) {
        goto LABEL_76;
      }
      uint64_t v13 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) != 2) {
        goto LABEL_76;
      }
      uint64_t v13 = &v50;
    }
    if (LOWORD(v13->__r_.__value_.__l.__data_) == 20301)
    {
      uint64_t v12 = "RCSPagerMessageSendLatencyIPT";
      goto LABEL_22;
    }
  }
LABEL_76:
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
}

void sub_1000925D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  if (*(char *)(v51 - 161) < 0) {
    operator delete(*(void **)(v51 - 184));
  }
  if (*(char *)(v51 - 137) < 0) {
    operator delete(*(void **)(v51 - 160));
  }
  if (*(char *)(v51 - 105) < 0) {
    operator delete(*(void **)(v51 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_100092714(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 112), OS_LOG_TYPE_ERROR)) {
      sub_100146FE8();
    }
    __cxa_end_catch();
    JUMPOUT(0x100092570);
  }
  if (*(char *)(v2 - 161) < 0) {
    operator delete(*(void **)(v2 - 184));
  }
  if (*(char *)(v2 - 137) < 0) {
    operator delete(*(void **)(v2 - 160));
  }
  if (*(char *)(v2 - 105) < 0) {
    operator delete(*(void **)(v2 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_100092760()
{
}

void sub_10009276C(uint64_t *a1, uint64_t a2)
{
  memset(&v50, 0, sizeof(v50));
  memset(&v49, 0, sizeof(v49));
  sub_100018888(&v48, "");
  BOOL v4 = sub_100098078(a2, "is_successful");
  v45[0].__r_.__value_.__s.__data_[0] = 0;
  sub_100098C84(v4, v45);
  int v5 = v45[0].__r_.__value_.__s.__data_[0];
  int v6 = sub_100098078(a2, "msrp_error_code");
  LODWORD(v45[0].__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v6, (int *)v45);
  int data = (int)v45[0].__r_.__value_.__l.__data_;
  BOOL v8 = sub_100098078(a2, "direction");
  sub_100098230((uint64_t)v8, v45);
  std::string v49 = v45[0];
  BOOL v9 = sub_100098078(a2, "latency");
  int v51 = 0;
  sub_1000989D0(v9, &v51);
  int v10 = v51;
  if (!v5 && data != 200)
  {
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v49.__r_.__value_.__l.__size_ != 2) {
        goto LABEL_76;
      }
      uint64_t v11 = (std::string *)v49.__r_.__value_.__r.__words[0];
      if (*(_WORD *)v49.__r_.__value_.__l.__data_ != 20301) {
        goto LABEL_9;
      }
    }
    else
    {
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) != 2) {
        goto LABEL_76;
      }
      if (LOWORD(v49.__r_.__value_.__l.__data_) != 20301)
      {
        uint64_t v11 = &v49;
LABEL_9:
        if (LOWORD(v11->__r_.__value_.__l.__data_) != 21581) {
          goto LABEL_76;
        }
        uint64_t v12 = "RCSMSRPMessageReceiveIPT";
        goto LABEL_22;
      }
    }
    uint64_t v12 = "RCSMSRPMessageSendIPT";
LABEL_22:
    std::string::assign(&v48, v12);
    long long v14 = sub_100098078(a2, "message_type");
    sub_100098230((uint64_t)v14, v45);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    std::string v50 = v45[0];
    sub_100002260((uint64_t)v45);
    char v15 = sub_100004D64(v45, (uint64_t)"message_type: ", 14);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = &v50;
    }
    else {
      std::string::size_type v16 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v50.__r_.__value_.__l.__size_;
    }
    long long v18 = sub_100004D64(v15, (uint64_t)v16, size);
    sub_100004D64(v18, (uint64_t)" msrp_error_code: ", 18);
    char v19 = (void *)std::ostream::operator<<();
    long long v20 = sub_100004D64(v19, (uint64_t)" latency:", 9);
    if (v10 >> 4 >= 0x271) {
      std::string::size_type v21 = ">10secs";
    }
    else {
      std::string::size_type v21 = "5-10secs";
    }
    if (v10 >= 5000) {
      std::string::size_type v22 = (char *)v21;
    }
    else {
      std::string::size_type v22 = "<5secs";
    }
    sub_100018888(__p, v22);
    if ((v36 & 0x80u) == 0) {
      char v23 = __p;
    }
    else {
      char v23 = (void **)__p[0];
    }
    if ((v36 & 0x80u) == 0) {
      uint64_t v24 = v36;
    }
    else {
      uint64_t v24 = (uint64_t)__p[1];
    }
    sub_100004D64(v20, (uint64_t)v23, v24);
    if ((char)v36 < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    sub_100018888(__p, "Telephony");
    sub_100018888(&v37, "RCS");
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000173FC(&v39, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    }
    else {
      std::string v39 = v48;
    }
    if (SHIBYTE(v44) < 0)
    {
      sub_1000173FC(&v40, v43[0], (unint64_t)v43[1]);
    }
    else
    {
      long long v40 = *(_OWORD *)v43;
      uint64_t v41 = v44;
    }
    int v42 = 0x10000;
    char v25 = *(NSObject **)(qword_1001D8080 + 112);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        std::string::size_type v26 = a1;
      }
      else {
        std::string::size_type v26 = (uint64_t *)*a1;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v53 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
    }
    sub_10009827C((char *)__dst, (long long *)__p);
    sub_1000CA1B0((uint64_t *)__dst);
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v30 < 0) {
      operator delete(v29);
    }
    if (v28 < 0) {
      operator delete(__dst[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete((void *)v40);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (v38 < 0) {
      operator delete(v37);
    }
    if ((char)v36 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v44) < 0) {
      operator delete(v43[0]);
    }
    *(std::string::size_type *)((char *)v45[0].__r_.__value_.__r.__words
    if (v47 < 0) {
      operator delete(v46);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    goto LABEL_76;
  }
  if (v5 && data == 200 && v51 >= 5001)
  {
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v49.__r_.__value_.__l.__size_ != 2) {
        goto LABEL_76;
      }
      uint64_t v13 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) != 2) {
        goto LABEL_76;
      }
      uint64_t v13 = &v49;
    }
    if (LOWORD(v13->__r_.__value_.__l.__data_) == 20301)
    {
      uint64_t v12 = "RCSMSRPMessageSendLatencyIPT";
      goto LABEL_22;
    }
  }
LABEL_76:
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
}

void sub_100092D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  if (*(char *)(v51 - 161) < 0) {
    operator delete(*(void **)(v51 - 184));
  }
  if (*(char *)(v51 - 137) < 0) {
    operator delete(*(void **)(v51 - 160));
  }
  if (*(char *)(v51 - 105) < 0) {
    operator delete(*(void **)(v51 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_100092E7C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 112), OS_LOG_TYPE_ERROR)) {
      sub_100146FE8();
    }
    __cxa_end_catch();
    JUMPOUT(0x100092CD8);
  }
  if (*(char *)(v2 - 161) < 0) {
    operator delete(*(void **)(v2 - 184));
  }
  if (*(char *)(v2 - 137) < 0) {
    operator delete(*(void **)(v2 - 160));
  }
  if (*(char *)(v2 - 105) < 0) {
    operator delete(*(void **)(v2 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_100092EC8()
{
}

void sub_100092ED4(uint64_t *a1, uint64_t a2)
{
  memset(&__s1, 0, sizeof(__s1));
  memset(&v54, 0, sizeof(v54));
  BOOL v4 = sub_100098078(a2, "authStatusForSimConfig0");
  sub_100098230((uint64_t)v4, v51);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  std::string __s1 = v51[0];
  int v5 = sub_100098078(a2, "authStatusForSimConfig1");
  sub_100098230((uint64_t)v5, v51);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  std::string v54 = v51[0];
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (HIBYTE(__s1.__r_.__value_.__r.__words[2]) != 28)
    {
      if (HIBYTE(__s1.__r_.__value_.__r.__words[2]) == 33
        && !memcmp(&__s1, "CCStwSatSmsAuthStatusUnauthorized", 0x21uLL))
      {
        goto LABEL_48;
      }
LABEL_26:
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v54.__r_.__value_.__l.__size_ != 28)
        {
          if (v54.__r_.__value_.__l.__size_ != 33) {
            goto LABEL_89;
          }
          long long v14 = (std::string *)v54.__r_.__value_.__r.__words[0];
LABEL_33:
          if (memcmp(v14, "CCStwSatSmsAuthStatusUnauthorized", 0x21uLL)) {
            goto LABEL_89;
          }
          goto LABEL_48;
        }
        char v15 = (std::string *)v54.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(v54.__r_.__value_.__r.__words[2]) != 28)
        {
          if (HIBYTE(v54.__r_.__value_.__r.__words[2]) != 33) {
            goto LABEL_89;
          }
          long long v14 = &v54;
          goto LABEL_33;
        }
        char v15 = &v54;
      }
      std::string::size_type v16 = v15->__r_.__value_.__r.__words[0];
      std::string::size_type size = v15->__r_.__value_.__l.__size_;
      std::string::size_type v18 = v15->__r_.__value_.__r.__words[2];
      int data = (int)v15[1].__r_.__value_.__l.__data_;
      if (v16 != 0x7461537774534343
        || size != 0x5368747541736D53
        || v18 != 0x6B6E557375746174
        || data != 1853321070)
      {
        goto LABEL_89;
      }
      goto LABEL_48;
    }
    p_s1 = &__s1;
LABEL_16:
    std::string::size_type v7 = p_s1->__r_.__value_.__r.__words[0];
    std::string::size_type v8 = p_s1->__r_.__value_.__l.__size_;
    std::string::size_type v9 = p_s1->__r_.__value_.__r.__words[2];
    int v10 = (int)p_s1[1].__r_.__value_.__l.__data_;
    if (v7 == 0x7461537774534343 && v8 == 0x5368747541736D53 && v9 == 0x6B6E557375746174 && v10 == 1853321070) {
      goto LABEL_48;
    }
    goto LABEL_26;
  }
  if (__s1.__r_.__value_.__l.__size_ == 28)
  {
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_16;
  }
  if (__s1.__r_.__value_.__l.__size_ != 33
    || memcmp(__s1.__r_.__value_.__l.__data_, "CCStwSatSmsAuthStatusUnauthorized", 0x21uLL))
  {
    goto LABEL_26;
  }
LABEL_48:
  sub_100002260((uint64_t)v51);
  char v23 = sub_100004D64(v51, (uint64_t)"authStatusForSimConfig0: ", 25);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v24 = &__s1;
  }
  else {
    uint64_t v24 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = __s1.__r_.__value_.__l.__size_;
  }
  std::string::size_type v26 = sub_100004D64(v23, (uint64_t)v24, v25);
  uint64_t v27 = sub_100004D64(v26, (uint64_t)" authStatusForSimConfig1: ", 26);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v28 = &v54;
  }
  else {
    char v28 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v29 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v29 = v54.__r_.__value_.__l.__size_;
  }
  sub_100004D64(v27, (uint64_t)v28, v29);
  std::stringbuf::str();
  sub_100018888(v40, "Cellular");
  sub_100018888(&v42, "STW");
  sub_100018888(&v44, "AuthError");
  if (SHIBYTE(v50) < 0)
  {
    sub_1000173FC(&v46, v49[0], (unint64_t)v49[1]);
  }
  else
  {
    long long v46 = *(_OWORD *)v49;
    uint64_t v47 = v50;
  }
  int v48 = 65537;
  char v30 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) >= 0) {
      char v31 = a1;
    }
    else {
      char v31 = (uint64_t *)*a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    std::string v57 = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
  }
  sub_10009827C((char *)v32, (long long *)v40);
  sub_1000CA1B0((uint64_t *)v32);
  if (v39 < 0) {
    operator delete(__p);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)v46);
  }
  if (v45 < 0) {
    operator delete(v44);
  }
  if (v43 < 0) {
    operator delete(v42);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete(v49[0]);
  }
  *(std::string::size_type *)((char *)v51[0].__r_.__value_.__r.__words
  if (v53 < 0) {
    operator delete(v52);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_89:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
}

void sub_10009342C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  sub_10004E93C((uint64_t)&a50);
  if (*(char *)(v50 - 105) < 0) {
    operator delete(*(void **)(v50 - 128));
  }
  if (*(char *)(v50 - 73) < 0) {
    operator delete(*(void **)(v50 - 96));
  }
  _Unwind_Resume(a1);
}

void sub_1000934EC(void *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 112), OS_LOG_TYPE_ERROR)) {
      sub_100146FE8();
    }
    __cxa_end_catch();
    JUMPOUT(0x1000933DCLL);
  }
  JUMPOUT(0x1000934C4);
}

void sub_100093538()
{
}

void sub_100093544(uint64_t *a1, uint64_t a2)
{
  memset(&v47, 0, sizeof(v47));
  memset(&v46, 0, sizeof(v46));
  BOOL v4 = sub_100098078(a2, "cellServiceStatus");
  sub_100098230((uint64_t)v4, &v42);
  int v5 = sub_100098078(a2, "result");
  __c[0] = 0;
  sub_100098C84(v5, __c);
  std::string::operator=(&v47, __c[0]);
  if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) != 32) {
      goto LABEL_75;
    }
    BOOL v6 = v42.__r_.__value_.__r.__words[0] == 0x6C65437774534343
      && v42.__r_.__value_.__l.__size_ == 0x656369767265536CLL;
    BOOL v7 = v6 && v42.__r_.__value_.__r.__words[2] == 0x416B737574617453;
    if (!v7 || v43 != 0x656C62616C696176) {
      goto LABEL_75;
    }
    goto LABEL_29;
  }
  if (v42.__r_.__value_.__l.__size_ != 32)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    goto LABEL_75;
  }
  BOOL v12 = *(void *)v42.__r_.__value_.__l.__data_ != 0x6C65437774534343
     || *(void *)(v42.__r_.__value_.__r.__words[0] + 8) != 0x656369767265536CLL
     || *(void *)(v42.__r_.__value_.__r.__words[0] + 16) != 0x416B737574617453
     || *(void *)(v42.__r_.__value_.__r.__words[0] + 24) != 0x656C62616C696176;
  operator delete(v42.__r_.__value_.__l.__data_);
  if (!v12)
  {
LABEL_29:
    uint64_t v13 = sub_100098078(a2, "requestReason");
    sub_100098230((uint64_t)v13, &v42);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    std::string v46 = v42;
    long long v14 = sub_100098078(a2, "result");
    unsigned __int8 v48 = 0;
    sub_100098C84(v14, &v48);
    std::to_string(&v42, v48);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    std::string v47 = v42;
    sub_100002260((uint64_t)&v42);
    char v15 = sub_100004D64(&v42, (uint64_t)"RequestResult: ", 15);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = &v47;
    }
    else {
      std::string::size_type v16 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
    std::string::size_type v18 = sub_100004D64(v15, (uint64_t)v16, size);
    char v19 = sub_100004D64(v18, (uint64_t)" ReasonForRequestingSatellite: ", 31);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v20 = &v46;
    }
    else {
      long long v20 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = v46.__r_.__value_.__l.__size_;
    }
    sub_100004D64(v19, (uint64_t)v20, v21);
    std::stringbuf::str();
    sub_100018888(__c, "Cellular");
    sub_100018888(&v33, "STW");
    sub_100018888(&v35, "CellServiceStatusAvailable");
    if (SHIBYTE(v41) < 0)
    {
      sub_1000173FC(&v37, v40[0], (unint64_t)v40[1]);
    }
    else
    {
      long long v37 = *(_OWORD *)v40;
      uint64_t v38 = v41;
    }
    int v39 = 65537;
    std::string::size_type v22 = *(NSObject **)(qword_1001D8080 + 112);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        char v23 = a1;
      }
      else {
        char v23 = (uint64_t *)*a1;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v50 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
    }
    sub_10009827C((char *)v24, (long long *)__c);
    sub_1000CA1B0((uint64_t *)v24);
    if (v31 < 0) {
      operator delete(__p);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete((void *)v37);
    }
    if (v36 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (__c[23] < 0) {
      operator delete(*(void **)__c);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
    *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words
    if (v45 < 0) {
      operator delete(v44);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_75:
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
}

void sub_100093A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  sub_10004E93C((uint64_t)&a50);
  if (*(char *)(v50 - 121) < 0) {
    operator delete(*(void **)(v50 - 144));
  }
  if (*(char *)(v50 - 89) < 0) {
    operator delete(*(void **)(v50 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_100093B98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 112), OS_LOG_TYPE_ERROR)) {
      sub_100146FE8();
    }
    __cxa_end_catch();
    JUMPOUT(0x1000939FCLL);
  }
  JUMPOUT(0x100093B70);
}

void sub_100093C00()
{
}

void sub_100093C0C(uint64_t *a1, uint64_t a2)
{
  memset(&v61, 0, sizeof(v61));
  memset(&v60, 0, sizeof(v60));
  memset(&v59, 0, sizeof(v59));
  memset(&v58, 0, sizeof(v58));
  memset(&v57, 0, sizeof(v57));
  BOOL v4 = sub_100098078(a2, "messageSendResult");
  sub_100098230((uint64_t)v4, &v54);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  std::string v59 = v54;
  if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 9)
    {
      int v5 = &v59;
      goto LABEL_8;
    }
LABEL_12:
    char v9 = 0;
    goto LABEL_13;
  }
  if (v59.__r_.__value_.__l.__size_ != 9) {
    goto LABEL_12;
  }
  int v5 = (std::string *)v59.__r_.__value_.__r.__words[0];
LABEL_8:
  std::string::size_type v6 = v5->__r_.__value_.__r.__words[0];
  int v7 = v5->__r_.__value_.__s.__data_[8];
  if (v6 != 0x656C6C65636E6143 || v7 != 100) {
    goto LABEL_12;
  }
  std::string::assign(&v58, "MessageError");
  char v9 = 1;
LABEL_13:
  int v10 = sub_100098078(a2, "messageSendLatency");
  int v62 = 0;
  sub_1000989D0(v10, &v62);
  int v11 = v62;
  BOOL v12 = sub_100098078(a2, "signalEnvironmentClassification");
  sub_100098230((uint64_t)v12, &v54);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  std::string v57 = v54;
  if (v11 < 50001) {
    goto LABEL_45;
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v57.__r_.__value_.__l.__size_ == 5
      && *(_DWORD *)v57.__r_.__value_.__l.__data_ == 1634891090
      && *(unsigned char *)(v57.__r_.__value_.__r.__words[0] + 4) == 108)
    {
      goto LABEL_47;
    }
    if (v57.__r_.__value_.__l.__size_ != 11) {
      goto LABEL_45;
    }
    long long v14 = (std::string *)v57.__r_.__value_.__r.__words[0];
    if (*(void *)v57.__r_.__value_.__l.__data_ == 0x6E61436E61627255
      && *(void *)(v57.__r_.__value_.__r.__words[0] + 3) == 0x6E6F796E61436E61)
    {
      goto LABEL_47;
    }
    goto LABEL_35;
  }
  if (HIBYTE(v57.__r_.__value_.__r.__words[2]) == 5)
  {
    if (LODWORD(v57.__r_.__value_.__l.__data_) == 1634891090 && v57.__r_.__value_.__s.__data_[4] == 108) {
      goto LABEL_47;
    }
LABEL_45:
    if ((v9 & 1) == 0) {
      goto LABEL_102;
    }
    goto LABEL_48;
  }
  if (HIBYTE(v57.__r_.__value_.__r.__words[2]) != 11) {
    goto LABEL_45;
  }
  if (v57.__r_.__value_.__r.__words[0] == 0x6E61436E61627255
    && *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 3) == 0x6E6F796E61436E61)
  {
    goto LABEL_47;
  }
  long long v14 = &v57;
LABEL_35:
  std::string::size_type v17 = v14->__r_.__value_.__r.__words[0];
  uint64_t v18 = *(std::string::size_type *)((char *)v14->__r_.__value_.__r.__words + 3);
  if (v17 != 0x616C696176616E55 || v18 != 0x656C62616C696176) {
    goto LABEL_45;
  }
LABEL_47:
  std::string::assign(&v58, "MessageDelay");
LABEL_48:
  std::string::size_type v21 = sub_100098078(a2, "messageType");
  sub_100098230((uint64_t)v21, &v54);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  std::string v61 = v54;
  std::string::size_type v22 = sub_100098078(a2, "messageSize");
  int v63 = 0;
  sub_1000989D0(v22, &v63);
  std::to_string(&v54, v63);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  std::string v60 = v54;
  sub_100002260((uint64_t)&v54);
  char v23 = sub_100004D64(&v54, (uint64_t)"messageType: ", 13);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v24 = &v61;
  }
  else {
    uint64_t v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v61.__r_.__value_.__l.__size_;
  }
  std::string::size_type v26 = sub_100004D64(v23, (uint64_t)v24, size);
  char v27 = sub_100004D64(v26, (uint64_t)" messageSize: ", 14);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v28 = &v60;
  }
  else {
    char v28 = (std::string *)v60.__r_.__value_.__r.__words[0];
  }
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v29 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v29 = v60.__r_.__value_.__l.__size_;
  }
  char v30 = sub_100004D64(v27, (uint64_t)v28, v29);
  char v31 = sub_100004D64(v30, (uint64_t)" msgSendResult: ", 16);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v32 = &v59;
  }
  else {
    char v32 = (std::string *)v59.__r_.__value_.__r.__words[0];
  }
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v33 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v33 = v59.__r_.__value_.__l.__size_;
  }
  sub_100004D64(v31, (uint64_t)v32, v33);
  std::stringbuf::str();
  sub_100018888(v44, "Cellular");
  sub_100018888(&v46, "STW");
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000173FC(&v48, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  }
  else {
    std::string v48 = v58;
  }
  if (SHIBYTE(v53) < 0)
  {
    sub_1000173FC(&v49, v52[0], (unint64_t)v52[1]);
  }
  else
  {
    long long v49 = *(_OWORD *)v52;
    uint64_t v50 = v53;
  }
  int v51 = 65537;
  char v34 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) >= 0) {
      char v35 = a1;
    }
    else {
      char v35 = (uint64_t *)*a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v65 = v35;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
  }
  sub_10009827C((char *)v36, (long long *)v44);
  sub_1000CA1B0((uint64_t *)v36);
  if (v43 < 0) {
    operator delete(__p);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)v49);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (v47 < 0) {
    operator delete(v46);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[0]);
  }
  if (v56 < 0) {
    operator delete(v55);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_102:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
}

void sub_1000942E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 112), OS_LOG_TYPE_ERROR)) {
      sub_100146FE8();
    }
    __cxa_end_catch();
    JUMPOUT(0x100093CFCLL);
  }
  if (*(char *)(v50 - 217) < 0) {
    operator delete(*(void **)(v50 - 240));
  }
  if (*(char *)(v50 - 193) < 0) {
    operator delete(*(void **)(v50 - 216));
  }
  if (*(char *)(v50 - 169) < 0) {
    operator delete(*(void **)(v50 - 192));
  }
  if (*(char *)(v50 - 137) < 0) {
    operator delete(*(void **)(v50 - 160));
  }
  if (*(char *)(v50 - 105) < 0) {
    operator delete(*(void **)(v50 - 128));
  }
  _Unwind_Resume(exception_object);
}

void sub_10009450C(uint64_t *a1, uint64_t a2)
{
  memset(&v39, 0, sizeof(v39));
  int v3 = sub_100098078(a2, "messageType");
  sub_100098230((uint64_t)v3, v36);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  std::string v39 = v36[0];
  if ((SHIBYTE(v36[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v36[0].__r_.__value_.__r.__words[2]) == 15)
    {
      if (v39.__r_.__value_.__r.__words[0] != 0x45636972656E6547
        || *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7) != 0x67734D726F727245)
      {
        goto LABEL_63;
      }
      goto LABEL_28;
    }
    if (HIBYTE(v36[0].__r_.__value_.__r.__words[2]) != 20) {
      goto LABEL_63;
    }
    BOOL v4 = &v39;
    goto LABEL_14;
  }
  if (v39.__r_.__value_.__l.__size_ != 15
    || (*(void *)v39.__r_.__value_.__l.__data_ == 0x45636972656E6547
      ? (BOOL v5 = *(void *)(v39.__r_.__value_.__r.__words[0] + 7) == 0x67734D726F727245)
      : (BOOL v5 = 0),
        !v5))
  {
    if (v39.__r_.__value_.__l.__size_ != 20) {
      goto LABEL_63;
    }
    BOOL v4 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_14:
    std::string::size_type v6 = v4->__r_.__value_.__r.__words[0];
    std::string::size_type size = v4->__r_.__value_.__l.__size_;
    int v8 = v4->__r_.__value_.__r.__words[2];
    if (v6 != 0x6567617373654D69 || size != 0x6F7272456574694CLL || v8 != 1735609714) {
      goto LABEL_63;
    }
  }
LABEL_28:
  sub_100002260((uint64_t)v36);
  BOOL v12 = sub_100004D64(v36, (uint64_t)"messageType: ", 13);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v39;
  }
  else {
    uint64_t v13 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = v39.__r_.__value_.__l.__size_;
  }
  sub_100004D64(v12, (uint64_t)v13, v14);
  std::stringbuf::str();
  sub_100018888(v25, "Cellular");
  sub_100018888(&v27, "STW");
  sub_100018888(&v29, "MessageError");
  if (SHIBYTE(v35) < 0)
  {
    sub_1000173FC(&v31, v34[0], (unint64_t)v34[1]);
  }
  else
  {
    long long v31 = *(_OWORD *)v34;
    uint64_t v32 = v35;
  }
  int v33 = 65537;
  char v15 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) >= 0) {
      std::string::size_type v16 = a1;
    }
    else {
      std::string::size_type v16 = (uint64_t *)*a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    char v41 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
  }
  sub_10009827C((char *)v17, (long long *)v25);
  sub_1000CA1B0((uint64_t *)v17);
  if (v24 < 0) {
    operator delete(__p);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[0]);
  }
  *(std::string::size_type *)((char *)v36[0].__r_.__value_.__r.__words
  if (v38 < 0) {
    operator delete(v37);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_63:
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
}

void sub_10009494C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  sub_10004E93C((uint64_t)&a50);
  if (*(char *)(v50 - 89) < 0) {
    operator delete(*(void **)(v50 - 112));
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_100094A28(uint64_t *a1, uint64_t a2)
{
  BOOL v4 = sub_100098078(a2, "qualifiedHandlesCount");
  LODWORD(v30[0]) = 0;
  sub_1000989D0(v4, (int *)v30);
  int v5 = v30[0];
  std::string::size_type v6 = sub_100098078(a2, "qualifiedHandlesIML");
  LODWORD(v30[0]) = 0;
  xpc_object_t result = sub_1000989D0(v6, (int *)v30);
  if (v5 < SLODWORD(v30[0]))
  {
    sub_100002260((uint64_t)v30);
    sub_100004D64(v30, (uint64_t)"NumQualifiedContacts: ", 22);
    int v8 = (void *)std::ostream::operator<<();
    sub_100004D64(v8, (uint64_t)" NumQualifiediMLContacts: ", 26);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_100018888(v19, "Cellular");
    sub_100018888(&v21, "STW");
    sub_100018888(&v23, "QualifiedContactsError");
    if (SHIBYTE(v29) < 0)
    {
      sub_1000173FC(&v25, v28[0], (unint64_t)v28[1]);
    }
    else
    {
      long long v25 = *(_OWORD *)v28;
      uint64_t v26 = v29;
    }
    int v27 = 65537;
    char v9 = *(NSObject **)(qword_1001D8080 + 112);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        int v10 = a1;
      }
      else {
        int v10 = (uint64_t *)*a1;
      }
      *(_DWORD *)std::string buf = 136315138;
      int v33 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
    }
    sub_10009827C((char *)v11, (long long *)v19);
    sub_1000CA1B0((uint64_t *)v11);
    if (v18 < 0) {
      operator delete(__p);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
    if (v24 < 0) {
      operator delete(v23);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(v28[0]);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (unsigned char *)std::ios::~ios();
  }
  return result;
}

void sub_100094D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  sub_10004E93C((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_100094E24(uint64_t *a1, uint64_t a2)
{
  memset(&v51, 0, sizeof(v51));
  memset(&v50, 0, sizeof(v50));
  memset(&v49, 0, sizeof(v49));
  BOOL v4 = sub_100098078(a2, "cellularRadioTech");
  sub_100098230((uint64_t)v4, &v46);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  std::string v51 = v46;
  int v5 = sub_100098078(a2, "IMMetricsCollectorFzErrorKey");
  LODWORD(v46.__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v5, (int *)&v46);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v51.__r_.__value_.__l.__size_ == 9)
    {
      std::string::size_type v6 = (std::string *)v51.__r_.__value_.__r.__words[0];
      goto LABEL_8;
    }
LABEL_14:
    BOOL v10 = 0;
    goto LABEL_15;
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) != 9) {
    goto LABEL_14;
  }
  std::string::size_type v6 = &v51;
LABEL_8:
  std::string::size_type v7 = v6->__r_.__value_.__r.__words[0];
  int v8 = v6->__r_.__value_.__s.__data_[8];
  BOOL v10 = v7 == 0x74696C6C65746153 && v8 == 101;
LABEL_15:
  BOOL v11 = SLODWORD(v46.__r_.__value_.__l.__data_) > 0 && v10;
  char v12 = sub_100098078(a2, "signalEnvironmentClassification");
  sub_100098230((uint64_t)v12, &v46);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  std::string v50 = v46;
  uint64_t v13 = sub_100098078(a2, "IMMetricsCollectorSendDurationKey");
  int v52 = 0;
  sub_1000989D0(v13, &v52);
  std::to_string(&v46, v52);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  std::string v49 = v46;
  if (v11)
  {
    sub_100002260((uint64_t)&v46);
    char v14 = sub_100004D64(&v46, (uint64_t)"RAT: ", 5);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v15 = &v51;
    }
    else {
      char v15 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v51.__r_.__value_.__l.__size_;
    }
    std::string::size_type v17 = sub_100004D64(v14, (uint64_t)v15, size);
    char v18 = sub_100004D64(v17, (uint64_t)"Duration: ", 10);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v19 = &v49;
    }
    else {
      char v19 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = v49.__r_.__value_.__l.__size_;
    }
    std::string::size_type v21 = sub_100004D64(v18, (uint64_t)v19, v20);
    char v22 = sub_100004D64(v21, (uint64_t)" Environment: ", 14);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v23 = &v50;
    }
    else {
      char v23 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v24 = v50.__r_.__value_.__l.__size_;
    }
    sub_100004D64(v22, (uint64_t)v23, v24);
    std::stringbuf::str();
    sub_100018888(v35, "Cellular");
    sub_100018888(&v37, "STW");
    sub_100018888(&v39, "MessageError");
    if (SHIBYTE(v45) < 0)
    {
      sub_1000173FC(&v41, v44[0], (unint64_t)v44[1]);
    }
    else
    {
      long long v41 = *(_OWORD *)v44;
      uint64_t v42 = v45;
    }
    int v43 = 65537;
    long long v25 = *(NSObject **)(qword_1001D8080 + 112);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v26 = a1;
      }
      else {
        uint64_t v26 = (uint64_t *)*a1;
      }
      *(_DWORD *)std::string buf = 136315138;
      std::string v54 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
    }
    sub_10009827C((char *)v27, (long long *)v35);
    sub_1000CA1B0((uint64_t *)v27);
    if (v34 < 0) {
      operator delete(__p);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v30 < 0) {
      operator delete(v29);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete((void *)v41);
    }
    if (v40 < 0) {
      operator delete(v39);
    }
    if (v38 < 0) {
      operator delete(v37);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words
    if (v48 < 0) {
      operator delete(v47);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
}

void sub_10009530C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  sub_10004E93C((uint64_t)&a50);
  if (*(char *)(v50 - 153) < 0) {
    operator delete(*(void **)(v50 - 176));
  }
  if (*(char *)(v50 - 121) < 0) {
    operator delete(*(void **)(v50 - 144));
  }
  if (*(char *)(v50 - 89) < 0) {
    operator delete(*(void **)(v50 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_1000954BC(uint64_t *a1, uint64_t a2)
{
  memset(&v53, 0, sizeof(v53));
  memset(&v52, 0, sizeof(v52));
  memset(&v51, 0, sizeof(v51));
  BOOL v4 = sub_100098078(a2, "cellularRadioTech");
  sub_100098230((uint64_t)v4, &v48);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  std::string v53 = v48;
  int v5 = sub_100098078(a2, "IMMetricsCollectorFzErrorKey");
  LODWORD(v48.__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v5, (int *)&v48);
  int data = (int)v48.__r_.__value_.__l.__data_;
  std::string::size_type v7 = sub_100098078(a2, "IMMetricsCollectorMessageErrorKey");
  LODWORD(v48.__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v7, (int *)&v48);
  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) == 9)
    {
      int v8 = &v53;
      goto LABEL_8;
    }
LABEL_12:
    BOOL v12 = 0;
    goto LABEL_13;
  }
  if (v53.__r_.__value_.__l.__size_ != 9) {
    goto LABEL_12;
  }
  int v8 = (std::string *)v53.__r_.__value_.__r.__words[0];
LABEL_8:
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[0];
  int v10 = v8->__r_.__value_.__s.__data_[8];
  if (v9 != 0x74696C6C65746153 || v10 != 101) {
    goto LABEL_12;
  }
  BOOL v12 = data > 0 || (LODWORD(v48.__r_.__value_.__l.__data_) - 1) < 3;
LABEL_13:
  uint64_t v13 = sub_100098078(a2, "signalEnvironmentClassification");
  sub_100098230((uint64_t)v13, &v48);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  std::string v52 = v48;
  char v14 = sub_100098078(a2, "IMMetricsCollectorSendDurationKey");
  int v54 = 0;
  sub_1000989D0(v14, &v54);
  std::to_string(&v48, v54);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  std::string v51 = v48;
  if (v12)
  {
    sub_100002260((uint64_t)&v48);
    char v15 = sub_100004D64(&v48, (uint64_t)"RAT: ", 5);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v16 = &v53;
    }
    else {
      char v16 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v53.__r_.__value_.__l.__size_;
    }
    char v18 = sub_100004D64(v15, (uint64_t)v16, size);
    char v19 = sub_100004D64(v18, (uint64_t)"Duration: ", 10);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = &v51;
    }
    else {
      std::string::size_type v20 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = v51.__r_.__value_.__l.__size_;
    }
    char v22 = sub_100004D64(v19, (uint64_t)v20, v21);
    char v23 = sub_100004D64(v22, (uint64_t)" Environment: ", 14);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = &v52;
    }
    else {
      std::string::size_type v24 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = v52.__r_.__value_.__l.__size_;
    }
    sub_100004D64(v23, (uint64_t)v24, v25);
    std::stringbuf::str();
    sub_100018888(v37, "Cellular");
    sub_100018888(&v39, "STW");
    sub_100018888(&v41, "MessageError");
    if (SHIBYTE(v47) < 0)
    {
      sub_1000173FC(&v43, v46[0], (unint64_t)v46[1]);
    }
    else
    {
      long long v43 = *(_OWORD *)v46;
      uint64_t v44 = v47;
    }
    int v45 = 65537;
    int v27 = *(NSObject **)(qword_1001D8080 + 112);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        char v28 = a1;
      }
      else {
        char v28 = (uint64_t *)*a1;
      }
      *(_DWORD *)std::string buf = 136315138;
      char v56 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
    }
    sub_10009827C((char *)v29, (long long *)v37);
    sub_1000CA1B0((uint64_t *)v29);
    if (v36 < 0) {
      operator delete(__p);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    if (SHIBYTE(v44) < 0) {
      operator delete((void *)v43);
    }
    if (v42 < 0) {
      operator delete(v41);
    }
    if (v40 < 0) {
      operator delete(v39);
    }
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(v46[0]);
    }
    *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words
    if (v50 < 0) {
      operator delete(v49);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
}

void sub_1000959CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  sub_10004E93C((uint64_t)&a50);
  if (*(char *)(v50 - 153) < 0) {
    operator delete(*(void **)(v50 - 176));
  }
  if (*(char *)(v50 - 121) < 0) {
    operator delete(*(void **)(v50 - 144));
  }
  if (*(char *)(v50 - 89) < 0) {
    operator delete(*(void **)(v50 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_100095B80(uint64_t *a1, uint64_t a2)
{
  memset(&v35, 0, sizeof(v35));
  BOOL v4 = sub_100098078(a2, "currentlyConnected");
  v32[0].__r_.__value_.__s.__data_[0] = 0;
  sub_100098C84(v4, v32);
  int v5 = v32[0].__r_.__value_.__s.__data_[0];
  std::string::size_type v6 = sub_100098078(a2, "currentMode");
  LODWORD(v32[0].__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v6, (int *)v32);
  if (v5 && LODWORD(v32[0].__r_.__value_.__l.__data_) < 2)
  {
    std::string::size_type v7 = sub_100098078(a2, "cellularRadioTech");
    sub_100098230((uint64_t)v7, v32);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    std::string v35 = v32[0];
    sub_100002260((uint64_t)v32);
    int v8 = sub_100004D64(v32, (uint64_t)"cellularRadioTech: ", 19);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = &v35;
    }
    else {
      std::string::size_type v9 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v35.__r_.__value_.__l.__size_;
    }
    sub_100004D64(v8, (uint64_t)v9, size);
    std::stringbuf::str();
    sub_100018888(v21, "Cellular");
    sub_100018888(&v23, "STW");
    sub_100018888(&v25, "OTGError");
    if (SHIBYTE(v31) < 0)
    {
      sub_1000173FC(&v27, v30[0], (unint64_t)v30[1]);
    }
    else
    {
      long long v27 = *(_OWORD *)v30;
      uint64_t v28 = v31;
    }
    int v29 = 65537;
    BOOL v11 = *(NSObject **)(qword_1001D8080 + 112);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        BOOL v12 = a1;
      }
      else {
        BOOL v12 = (uint64_t *)*a1;
      }
      *(_DWORD *)std::string buf = 136315138;
      char v37 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
    }
    sub_10009827C((char *)v13, (long long *)v21);
    sub_1000CA1B0((uint64_t *)v13);
    if (v20 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)v27);
    }
    if (v26 < 0) {
      operator delete(v25);
    }
    if (v24 < 0) {
      operator delete(v23);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete(v30[0]);
    }
    *(std::string::size_type *)((char *)v32[0].__r_.__value_.__r.__words
    if (v34 < 0) {
      operator delete(v33);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_100095F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  sub_10004E93C((uint64_t)&a50);
  if (*(char *)(v50 - 73) < 0) {
    operator delete(*(void **)(v50 - 96));
  }
  _Unwind_Resume(a1);
}

void sub_10009603C(std::string::size_type a1, uint64_t a2)
{
  BOOL v4 = sub_100098078(a2, "is_RCS");
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  sub_100098C84(v4, buf);
  if (buf[0].__r_.__value_.__s.__data_[0])
  {
    int v5 = sub_100098078(a2, "result");
    sub_100098230((uint64_t)v5, buf);
    std::string __p = buf[0];
    std::string::size_type v6 = sub_100098078(a2, "type");
    sub_100098230((uint64_t)v6, buf);
    std::string v71 = buf[0];
    std::string::size_type v7 = sub_100098078(a2, "latency");
    uint64_t v73 = 0;
    sub_100098E2C(v7, &v73);
    uint64_t v8 = v73;
    if (v73 > 10000)
    {
      int v9 = 1;
LABEL_4:
      memset(&v70, 0, sizeof(v70));
      memset(&v69, 0, sizeof(v69));
      memset(&v68, 0, sizeof(v68));
      memset(&v67, 0, sizeof(v67));
      sub_100002260((uint64_t)buf);
      int v10 = sub_100098078(a2, "q_reason");
      sub_100098230((uint64_t)v10, &v58);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      std::string v70 = v58;
      BOOL v11 = sub_100098078(a2, "rereg_reason");
      sub_100098230((uint64_t)v11, &v58);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      std::string v69 = v58;
      BOOL v12 = sub_100098078(a2, "primaryNetworkInterface");
      sub_100098230((uint64_t)v12, &v58);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      std::string v68 = v58;
      if (v9)
      {
        uint64_t v13 = "10secs-1min";
        if (v8 > 60000) {
          uint64_t v13 = "1min-5mins";
        }
        if (v8 <= 300000) {
          char v14 = v13;
        }
        else {
          char v14 = ">5mins";
        }
        std::string::assign(&v67, v14);
        char v15 = sub_100004D64(buf, (uint64_t)"latency: ", 9);
        if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v16 = &v67;
        }
        else {
          char v16 = (std::string *)v67.__r_.__value_.__r.__words[0];
        }
        if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v67.__r_.__value_.__l.__size_;
        }
        char v18 = sub_100004D64(v15, (uint64_t)v16, size);
        char v19 = sub_100004D64(v18, (uint64_t)" result: ", 9);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
        }
      }
      else
      {
        char v24 = sub_100004D64(buf, (uint64_t)"result: ", 8);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v25 = &__p;
        }
        else {
          std::string::size_type v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
        }
        long long v27 = sub_100004D64(v24, (uint64_t)v25, v26);
        uint64_t v28 = sub_100004D64(v27, (uint64_t)" q_reason: ", 11);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v29 = &v70;
        }
        else {
          int v29 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v30 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v30 = v70.__r_.__value_.__l.__size_;
        }
        uint64_t v31 = sub_100004D64(v28, (uint64_t)v29, v30);
        char v19 = sub_100004D64(v31, (uint64_t)" rereg_reason: ", 15);
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &v69;
        }
        else {
          p_p = (std::string *)v69.__r_.__value_.__r.__words[0];
        }
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v21 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v21 = v69.__r_.__value_.__l.__size_;
        }
      }
      char v32 = sub_100004D64(v19, (uint64_t)p_p, v21);
      int v33 = sub_100004D64(v32, (uint64_t)" primaryNetworkInterface: ", 26);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v34 = &v68;
      }
      else {
        char v34 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v68.__r_.__value_.__l.__size_;
      }
      sub_100004D64(v33, (uint64_t)v34, v35);
      std::stringbuf::str();
      sub_100018888(&v58, "Telephony");
      sub_100018888(&v59, "RCS");
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        sub_1000173FC(&v61, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
      }
      else {
        std::string v61 = v71;
      }
      if (SHIBYTE(v66) < 0)
      {
        sub_1000173FC(&v62, v65[0], (unint64_t)v65[1]);
      }
      else
      {
        long long v62 = *(_OWORD *)v65;
        uint64_t v63 = v66;
      }
      int v64 = 65537;
      char v36 = *(NSObject **)(qword_1001D8080 + 112);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a1 + 23) >= 0) {
          std::string::size_type v37 = a1;
        }
        else {
          std::string::size_type v37 = *(void *)a1;
        }
        *(_DWORD *)long long v74 = 136315138;
        std::string::size_type v75 = v37;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", v74, 0xCu);
      }
      sub_10009827C((char *)v50, (long long *)&v58);
      sub_1000CA1B0((uint64_t *)v50);
      if (v57 < 0) {
        operator delete(v56);
      }
      if (v55 < 0) {
        operator delete(v54);
      }
      if (v53 < 0) {
        operator delete(v52);
      }
      if (v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v63) < 0) {
        operator delete((void *)v62);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (v60 < 0) {
        operator delete(v59);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v66) < 0) {
        operator delete(v65[0]);
      }
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words
      if (v78 < 0) {
        operator delete(v77);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      goto LABEL_130;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 19) {
        goto LABEL_108;
      }
      char v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 19) {
        goto LABEL_108;
      }
      char v38 = &__p;
    }
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    std::string::size_type v40 = v38->__r_.__value_.__l.__size_;
    uint64_t v41 = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 3);
    if (v39 == 0x4C4C41435F4D5441 && v40 == 0x5F7375746174535FLL && v41 == 0x3030325F73757461) {
      goto LABEL_130;
    }
LABEL_108:
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v71.__r_.__value_.__l.__size_ != 10)
      {
        if (v71.__r_.__value_.__l.__size_ == 12
          && *(void *)v71.__r_.__value_.__l.__data_ == 0x5F4745525F4D5441
          && *(_DWORD *)(v71.__r_.__value_.__r.__words[0] + 8) == 1414090313)
        {
          goto LABEL_135;
        }
        goto LABEL_130;
      }
      std::string v46 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v71.__r_.__value_.__r.__words[2]) != 10)
      {
        if (HIBYTE(v71.__r_.__value_.__r.__words[2]) != 12) {
          goto LABEL_130;
        }
        if (v71.__r_.__value_.__r.__words[0] != 0x5F4745525F4D5441
          || LODWORD(v71.__r_.__value_.__r.__words[1]) != 1414090313)
        {
          goto LABEL_130;
        }
LABEL_135:
        int v9 = 0;
        goto LABEL_4;
      }
      std::string v46 = &v71;
    }
    std::string::size_type v47 = v46->__r_.__value_.__r.__words[0];
    int v48 = LOWORD(v46->__r_.__value_.__r.__words[1]);
    if (v47 == 0x5F4745525F4D5441 && v48 == 17746) {
      goto LABEL_135;
    }
LABEL_130:
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  char v22 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 23) >= 0) {
      std::string::size_type v23 = a1;
    }
    else {
      std::string::size_type v23 = *(void *)a1;
    }
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "WISABC:#I Event: %s is not for RCS and hence skipping rule", (uint8_t *)buf, 0xCu);
  }
}

void sub_1000969B8()
{
}

void sub_100096A10(void *a1, int a2)
{
  if (a2 == 1)
  {
    sub_100147370(a1);
    JUMPOUT(0x100096978);
  }
  JUMPOUT(0x100096AA4);
}

void sub_100096A30()
{
}

void sub_100096AAC(uint64_t *a1, uint64_t a2)
{
  memset(&v54, 0, sizeof(v54));
  memset(&v53, 0, sizeof(v53));
  memset(&v52, 0, sizeof(v52));
  sub_100018888(&v51, "");
  BOOL v4 = sub_100098078(a2, "is_success");
  v48.__r_.__value_.__s.__data_[0] = 0;
  sub_100098C84(v4, &v48);
  int v5 = v48.__r_.__value_.__s.__data_[0];
  std::string::size_type v6 = sub_100098078(a2, "latency");
  int v55 = 0;
  sub_1000989D0(v6, &v55);
  int v7 = v55;
  if (v5)
  {
    if (v55 < 5001) {
      goto LABEL_75;
    }
    std::string::assign(&v51, "RCSSIPReferLatency");
  }
  else
  {
    std::string::assign(&v51, "RCSSIPRefer");
  }
  uint64_t v8 = sub_100098078(a2, "sip_error_code");
  int v56 = 0;
  sub_1000989D0(v8, &v56);
  std::to_string(&v48, v56);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  std::string v54 = v48;
  int v9 = sub_100098078(a2, "method");
  sub_100098230((uint64_t)v9, &v48);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  std::string v53 = v48;
  int v10 = sub_100098078(a2, "failure_reason");
  sub_100098230((uint64_t)v10, &v48);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  std::string v52 = v48;
  sub_100002260((uint64_t)&v48);
  BOOL v11 = sub_100004D64(&v48, (uint64_t)"sip_error_code: ", 16);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v12 = &v54;
  }
  else {
    BOOL v12 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v54.__r_.__value_.__l.__size_;
  }
  char v14 = sub_100004D64(v11, (uint64_t)v12, size);
  char v15 = sub_100004D64(v14, (uint64_t)" method: ", 9);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v16 = &v53;
  }
  else {
    char v16 = (std::string *)v53.__r_.__value_.__r.__words[0];
  }
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v53.__r_.__value_.__l.__size_;
  }
  char v18 = sub_100004D64(v15, (uint64_t)v16, v17);
  char v19 = sub_100004D64(v18, (uint64_t)" failure_reason: ", 17);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v20 = &v52;
  }
  else {
    char v20 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v21 = v52.__r_.__value_.__l.__size_;
  }
  char v22 = sub_100004D64(v19, (uint64_t)v20, v21);
  std::string::size_type v23 = sub_100004D64(v22, (uint64_t)" latency: ", 10);
  if (v7 >> 4 >= 0x271) {
    char v24 = ">10secs";
  }
  else {
    char v24 = "5-10secs";
  }
  if (v7 >= 5000) {
    std::string::size_type v25 = (char *)v24;
  }
  else {
    std::string::size_type v25 = "<5secs";
  }
  sub_100018888(__p, v25);
  if ((v39 & 0x80u) == 0) {
    std::string::size_type v26 = __p;
  }
  else {
    std::string::size_type v26 = (void **)__p[0];
  }
  if ((v39 & 0x80u) == 0) {
    uint64_t v27 = v39;
  }
  else {
    uint64_t v27 = (uint64_t)__p[1];
  }
  sub_100004D64(v23, (uint64_t)v26, v27);
  if ((char)v39 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  sub_100018888(__p, "Telephony");
  sub_100018888(&v40, "RCS");
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000173FC(&v42, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  }
  else {
    std::string v42 = v51;
  }
  if (SHIBYTE(v47) < 0)
  {
    sub_1000173FC(&v43, v46[0], (unint64_t)v46[1]);
  }
  else
  {
    long long v43 = *(_OWORD *)v46;
    uint64_t v44 = v47;
  }
  int v45 = 0x10000;
  uint64_t v28 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) >= 0) {
      int v29 = a1;
    }
    else {
      int v29 = (uint64_t *)*a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    std::string v58 = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
  }
  sub_10009827C((char *)__dst, (long long *)__p);
  sub_1000CA1B0((uint64_t *)__dst);
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  if (v31 < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)v43);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if ((char)v39 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(v46[0]);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_75:
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
}

void sub_10009706C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  if (*(char *)(v51 - 177) < 0) {
    operator delete(*(void **)(v51 - 200));
  }
  if (*(char *)(v51 - 153) < 0) {
    operator delete(*(void **)(v51 - 176));
  }
  if (*(char *)(v51 - 121) < 0) {
    operator delete(*(void **)(v51 - 144));
  }
  if (*(char *)(v51 - 89) < 0) {
    operator delete(*(void **)(v51 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_10009725C(uint64_t *a1, uint64_t a2)
{
  sub_100018888(&v44, "");
  BOOL v4 = sub_100098078(a2, "is_success");
  LOBYTE(v42[0]) = 0;
  sub_100098C84(v4, v42);
  int v5 = LOBYTE(v42[0]);
  std::string::size_type v6 = sub_100098078(a2, "delay");
  int v45 = 0;
  sub_1000989D0(v6, &v45);
  int v7 = v45;
  uint64_t v8 = sub_100098078(a2, "sip_error_code");
  int v46 = 0;
  sub_1000989D0(v8, &v46);
  __int32 v9 = v46;
  int v10 = (__int32 *)operator new(0xCuLL);
  *(void *)int v10 = 0xC800000000;
  _DWORD v10[2] = 404;
  BOOL v11 = wmemchr(v10, v9, 3uLL);
  if (v11) {
    BOOL v12 = v11;
  }
  else {
    BOOL v12 = v10 + 3;
  }
  if ((char *)v12 - (char *)v10 == 12)
  {
    uint64_t v13 = "RCSSIPOptions";
  }
  else
  {
    if (!v5 || v7 < 2001) {
      goto LABEL_63;
    }
    uint64_t v13 = "RCSSIPOptionsDelay";
  }
  std::string::assign(&v44, v13);
  sub_100002260((uint64_t)v42);
  char v14 = sub_100004D64(v42, (uint64_t)"sip_error_code: ", 16);
  std::to_string(&v33, v9);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v15 = &v33;
  }
  else {
    char v15 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v33.__r_.__value_.__l.__size_;
  }
  std::string::size_type v17 = sub_100004D64(v14, (uint64_t)v15, size);
  char v18 = sub_100004D64(v17, (uint64_t)" delay: ", 8);
  if (v7 >> 4 >= 0x271) {
    char v19 = ">10secs";
  }
  else {
    char v19 = "5-10secs";
  }
  if (v7 >= 5000) {
    char v20 = (char *)v19;
  }
  else {
    char v20 = "<5secs";
  }
  sub_100018888(__p, v20);
  if (v41 >= 0) {
    std::string::size_type v21 = __p;
  }
  else {
    std::string::size_type v21 = (void **)__p[0];
  }
  if (v41 >= 0) {
    uint64_t v22 = HIBYTE(v41);
  }
  else {
    uint64_t v22 = (uint64_t)__p[1];
  }
  sub_100004D64(v18, (uint64_t)v21, v22);
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  sub_100018888(&v33, "Telephony");
  sub_100018888(&v34, "RCS");
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000173FC(&v36, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else {
    std::string v36 = v44;
  }
  if (SHIBYTE(v41) < 0)
  {
    sub_1000173FC(&v37, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long v37 = *(_OWORD *)__p;
    uint64_t v38 = v41;
  }
  int v39 = 0x10000;
  std::string::size_type v23 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) >= 0) {
      char v24 = a1;
    }
    else {
      char v24 = (uint64_t *)*a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    std::string v48 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
  }
  sub_10009827C((char *)v25, (long long *)&v33);
  sub_1000CA1B0((uint64_t *)v25);
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
  if (v43 < 0) {
    operator delete((void *)v42[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_63:
  operator delete(v10);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

void sub_100097718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  sub_10004E93C((uint64_t)&a50);
  operator delete(v50);
  if (*(char *)(v51 - 105) < 0) {
    operator delete(*(void **)(v51 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_100097890(uint64_t *a1, uint64_t a2)
{
  memset(&v48, 0, sizeof(v48));
  memset(&v47, 0, sizeof(v47));
  BOOL v4 = sub_100098078(a2, "msrp_end_reason");
  sub_100098230((uint64_t)v4, v44);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  std::string v47 = v44[0];
  int v5 = sub_100098078(a2, "msrp_error_code");
  LODWORD(v44[0].__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v5, (int *)v44);
  int data = (int)v44[0].__r_.__value_.__l.__data_;
  int v7 = sub_100098078(a2, "sip_error_code");
  LODWORD(v44[0].__r_.__value_.__l.__data_) = 0;
  sub_1000989D0(v7, (int *)v44);
  int v8 = (int)v44[0].__r_.__value_.__l.__data_;
  __int32 v9 = sub_100098078(a2, "sip_end_reason");
  sub_100098230((uint64_t)v9, v44);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::string v48 = v44[0];
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v47.__r_.__value_.__l.__size_ == 2)
    {
      int v10 = (std::string *)v47.__r_.__value_.__r.__words[0];
LABEL_10:
      if (LOWORD(v10->__r_.__value_.__l.__data_) == 19279) {
        goto LABEL_68;
      }
    }
  }
  else if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) == 2)
  {
    int v10 = &v47;
    goto LABEL_10;
  }
  sub_100002260((uint64_t)v44);
  BOOL v11 = sub_100004D64(v44, (uint64_t)"msrp_end_reason: ", 17);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v12 = &v47;
  }
  else {
    BOOL v12 = (std::string *)v47.__r_.__value_.__r.__words[0];
  }
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v47.__r_.__value_.__l.__size_;
  }
  char v14 = sub_100004D64(v11, (uint64_t)v12, size);
  char v15 = sub_100004D64(v14, (uint64_t)" msrp_error_code: ", 18);
  std::to_string(&v36, data);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v16 = &v36;
  }
  else {
    char v16 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v36.__r_.__value_.__l.__size_;
  }
  char v18 = sub_100004D64(v15, (uint64_t)v16, v17);
  char v19 = sub_100004D64(v18, (uint64_t)" sip_end_reason: ", 17);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v20 = &v48;
  }
  else {
    char v20 = (std::string *)v48.__r_.__value_.__r.__words[0];
  }
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v21 = v48.__r_.__value_.__l.__size_;
  }
  uint64_t v22 = sub_100004D64(v19, (uint64_t)v20, v21);
  std::string::size_type v23 = sub_100004D64(v22, (uint64_t)" sip_error_code: ", 17);
  std::to_string(&v43, v8);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v24 = &v43;
  }
  else {
    char v24 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = v43.__r_.__value_.__l.__size_;
  }
  sub_100004D64(v23, (uint64_t)v24, v25);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  sub_100018888(&v36, "Telephony");
  sub_100018888(&v37, "RCS");
  sub_100018888(&v39, "MSRPSessionEndStats");
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000173FC(&v41, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v41 = v43;
  }
  int v42 = 0x10000;
  char v26 = *(NSObject **)(qword_1001D8080 + 112);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v27 = a1;
    }
    else {
      uint64_t v27 = (uint64_t *)*a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    char v50 = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "WISABC:#I Triggering ABC for event: %s", buf, 0xCu);
  }
  sub_10009827C((char *)v28, (long long *)&v36);
  sub_1000CA1B0((uint64_t *)v28);
  if (v35 < 0) {
    operator delete(__p);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  if (v31 < 0) {
    operator delete(v30);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (v40 < 0) {
    operator delete(v39);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  *(std::string::size_type *)((char *)v44[0].__r_.__value_.__r.__words
  if (v46 < 0) {
    operator delete(v45);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_68:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
}

void sub_100097D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  sub_10004E93C((uint64_t)&a50);
  if (*(char *)(v50 - 121) < 0) {
    operator delete(*(void **)(v50 - 144));
  }
  if (*(char *)(v50 - 89) < 0) {
    operator delete(*(void **)(v50 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_100097EC8()
{
}

void *sub_100097ED4@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 7) {
    uint64_t v2 = "Invalid";
  }
  else {
    uint64_t v2 = off_1001B9598[a1];
  }
  return sub_100018888(a2, v2);
}

void *sub_100097F00@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0x12) {
    uint64_t v2 = "Invalid";
  }
  else {
    uint64_t v2 = off_1001B95D8[a1];
  }
  return sub_100018888(a2, v2);
}

void *sub_100097F2C@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 5) {
    uint64_t v2 = "Invalid";
  }
  else {
    uint64_t v2 = off_1001B9670[a1];
  }
  return sub_100018888(a2, v2);
}

uint64_t sub_100097F58@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  uint64_t result = sub_1000134A4((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void **)*a3;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      __int32 v9 = a2;
    }
    else {
      __int32 v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v9, v6);
  }
  int v10 = (char *)a3 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

uint64_t sub_100098014(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_100098078(uint64_t a1, char *a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      __int32 v9 = (char *)sub_1000985A0((char *)a1);
      sub_100018888(&v12, v9);
      int v10 = std::string::insert(&v12, 0, "cannot use operator[] with a string argument with ");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      sub_10009845C(305, (uint64_t)__p, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    BOOL v4 = operator new(0x18uLL);
    void v4[2] = 0;
    v4[1] = 0;
    void *v4 = v4 + 1;
    *(void *)(a1 + 8) = v4;
  }
  int v5 = *(uint64_t ***)(a1 + 8);
  sub_100018888(__p, a2);
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  size_t v6 = sub_1000988C8(v5, (const void **)__p, (uint64_t)&unk_1001793E0, &v12);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  return (char *)v6 + 56;
}

void sub_1000981B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100098230@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return sub_100098B44(a1, a2);
}

void sub_100098260(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10009827C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000173FC(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000173FC(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_1000173FC(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  size_t v7 = __dst + 72;
  if (*((char *)a2 + 95) < 0)
  {
    sub_1000173FC(v7, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)size_t v7 = v8;
  }
  *((_DWORD *)__dst + 24) = *((_DWORD *)a2 + 24);
  return __dst;
}

void sub_100098368(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000983B4()
{
}

void sub_1000983CC(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100098428(exception, a1);
}

void sub_100098414(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100098428(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_10009845C(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_100018888(&__p, "type_error");
  sub_10009861C(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    size_t v7 = (const std::string::value_type *)a2;
  }
  else {
    size_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  __int32 v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)char v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    long long v11 = (char *)v15;
  }
  else {
    long long v11 = (char *)v15[0];
  }
  sub_1000987A0((uint64_t)a3, a1, v11);
  *a3 = off_1001B9560;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_100098558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_1000985A0(char *a1)
{
  unint64_t v1 = *a1;
  if (v1 > 9) {
    return "number";
  }
  else {
    return off_1001B96A0[v1];
  }
}

void sub_1000985C8(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_1001B9538;
  std::runtime_error::~runtime_error(a1 + 1);

  std::exception::~exception(a1);
}

void sub_10009861C(int a1@<W1>, std::string *a2@<X8>)
{
  std::operator+<char>();
  long long v4 = std::string::append(&v12, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::size_type v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  long long v10 = std::string::append(&v14, "] ");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_10009873C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000987A0(uint64_t a1, int a2, char *a3)
{
  *(void *)a1 = off_1001B9538;
  *(_DWORD *)(a1 + 8) = a2;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), a3);
  return a1;
}

void sub_1000987F0(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const char *sub_100098804(const std::runtime_error *a1)
{
  return std::runtime_error::what(a1 + 1);
}

void sub_10009880C(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_1001B9538;
  std::runtime_error::~runtime_error(a1 + 1);

  std::exception::~exception(a1);
}

void sub_100098860(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_1001B9538;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);

  operator delete();
}

_OWORD *sub_1000988C8(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  int v6 = (void **)sub_10001893C((uint64_t)a1, &v12, a2);
  size_t v7 = *v6;
  if (!*v6)
  {
    std::string::size_type v8 = (uint64_t **)v6;
    size_t v7 = operator new(0x48uLL);
    long long v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    double v9[2] = 0;
    *long long v9 = 0;
    *((unsigned char *)v7 + 56) = 0;
    *((void *)v7 + 8) = 0;
    sub_10001716C(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_100098968(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_1001B9538;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);

  operator delete();
}

unsigned char *sub_1000989D0(unsigned char *result, int *a2)
{
  uint64_t v2 = result;
  switch(*result)
  {
    case 4:
      int v3 = result[8];
      break;
    case 5:
    case 6:
      int v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      int v3 = (int)*((double *)result + 1);
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      long long v5 = (char *)sub_1000985A0(v2);
      sub_100018888(&v8, v5);
      int v6 = std::string::insert(&v8, 0, "type must be number, but is ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
      long long v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      sub_10009845C(302, (uint64_t)&v9, exception);
  }
  *a2 = v3;
  return result;
}

void sub_100098AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

std::string *sub_100098B44(uint64_t a1, std::string *this)
{
  if (*(unsigned char *)a1 != 3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    long long v7 = (char *)sub_1000985A0((char *)a1);
    sub_100018888(&v10, v7);
    std::string v8 = std::string::insert(&v10, 0, "type must be string, but is ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
    long long v11 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    sub_10009845C(302, (uint64_t)&v11, exception);
  }
  long long v4 = *(const std::string **)(a1 + 8);

  return std::string::operator=(this, v4);
}

void sub_100098C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

char *sub_100098C84(char *result, unsigned char *a2)
{
  uint64_t v2 = result;
  if (*result != 4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    long long v4 = (char *)sub_1000985A0(v2);
    sub_100018888(&v7, v4);
    long long v5 = std::string::insert(&v7, 0, "type must be BOOLean, but is ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    long long v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    sub_10009845C(302, (uint64_t)&v8, exception);
  }
  *a2 = result[8];
  return result;
}

void sub_100098D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_100098DB0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      sub_100056014(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_100098E18(_Unwind_Exception *a1)
{
  sub_100055F8C(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_100098E2C(unsigned char *result, uint64_t *a2)
{
  uint64_t v2 = result;
  switch(*result)
  {
    case 4:
      uint64_t v3 = result[8];
      break;
    case 5:
    case 6:
      uint64_t v3 = *((void *)result + 1);
      break;
    case 7:
      uint64_t v3 = (uint64_t)*((double *)result + 1);
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v5 = (char *)sub_1000985A0(v2);
      sub_100018888(&v8, v5);
      long long v6 = std::string::insert(&v8, 0, "type must be number, but is ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
      long long v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      sub_10009845C(302, (uint64_t)&v9, exception);
  }
  *a2 = v3;
  return result;
}

void sub_100098F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_100098FA0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

BOOL sub_100098FB8@<W0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(NSObject **)(a1 + 112);
  return os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
}

void sub_100098FE8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100099014(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_10009904C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_100099078(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t sub_100099098()
{
  return v0;
}

void sub_1000990A8()
{
  qword_1001D7DA8 = (uint64_t)"com.apple.AVConference.IMSCallSummaryStats";
  unk_1001D7DB0 = "com.apple.AVConference.IMSCallAudioFrameStats";
  qword_1001D7DB8 = (uint64_t)"com.apple.AVConference.IMSCallAudioDistortionSummary";
  unk_1001D7DC0 = "com.apple.Telephony.RCSMessageProvisionRegistration";
  qword_1001D7DC8 = (uint64_t)"com.apple.Telephony.RCSMessageSendReceive";
  unk_1001D7DD0 = "com.apple.Telephony.RCSMessageProvisioning";
  qword_1001D7DD8 = (uint64_t)"com.apple.Telephony.RCSMessageSessionSetup";
  unk_1001D7DE0 = "com.apple.Telephony.RCSPagerMessageSendReceive";
  qword_1001D7DE8 = (uint64_t)"com.apple.Telephony.RCSMSRPMessageSendReceive";
  unk_1001D7DF0 = "com.apple.Telephony.RCSMessageSIPOptions";
  qword_1001D7DF8 = (uint64_t)"com.apple.Telephony.RCSSIPRefer";
  unk_1001D7E00 = "com.apple.Telephony.RCSMessageSessionEnd";
  qword_1001D7E08 = (uint64_t)"com.apple.Telephony.metricCCStwCPSummary";
  unk_1001D7E10 = "com.apple.Telephony.metricCCStwRequest";
  qword_1001D7E18 = (uint64_t)"com.apple.Telephony.metricCCStwMessageOutgoing";
  unk_1001D7E20 = "com.apple.telephony.metricCCStwMessageIncoming";
  qword_1001D7E28 = (uint64_t)"com.apple.IDS.QualifiedContacts";
  unk_1001D7E30 = "com.apple.Messages.IMMetricsCollectorEventSMSSentMessageSingleComponent";
  qword_1001D7E38 = (uint64_t)"com.apple.Messages.IMMetricsCollectorEventIMessageSentMessageSingleComponent";
  unk_1001D7E40 = "com.apple.IDS.OffTheGridMode";
  qword_1001D7E48 = (uint64_t)"com.apple.Telephony.atm_Registration_Result";
}

void sub_100099294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100099350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100099458(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10009953C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000995D8(uint64_t a1)
{
  long long v24 = 0u;
  long long v25 = 0u;
  int v26 = 1065353216;
  uint64_t v2 = *(int *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = v3 + 8 * v2;
    do
    {
      uint64_t v5 = *(int *)(*(void *)v3 + 16);
      if (v5)
      {
        uint64_t v6 = *(void *)(*(void *)v3 + 8);
        uint64_t v7 = 8 * v5;
        do
        {
          *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)v6 + 68);
          sub_1000998FC((uint64_t)&v24, (unsigned int *)buf, buf);
          v6 += 8;
          v7 -= 8;
        }
        while (v7);
      }
      v3 += 8;
    }
    while (v3 != v4);
  }
  std::string v8 = *(uint64_t **)(a1 + 72);
  uint64_t v9 = *(int *)(a1 + 80);
  if (v9)
  {
    for (uint64_t i = 8 * v9; i; i -= 8)
    {
      uint64_t v11 = *v8;
      *(_DWORD *)std::string buf = *(_DWORD *)(*v8 + 8);
      sub_100099B1C(&v24, (unsigned int *)buf);
      int v12 = *(_DWORD *)(v11 + 36);
      if ((v12 & 2) == 0)
      {
        *(_DWORD *)(v11 + 36) = v12 | 2;
        *(_DWORD *)(v11 + 12) = 1;
        unsigned int v13 = *(_DWORD *)(v11 + 8);
        if (v13 < 0x100)
        {
          char v14 = 0;
LABEL_14:
          *(_DWORD *)(v11 + 36) = v12 | 0xA;
          *(unsigned char *)(v11 + 20) = v14;
          goto LABEL_15;
        }
        if (v13 <= 0x1FF)
        {
          char v14 = 1;
          goto LABEL_14;
        }
      }
LABEL_15:
      ++v8;
    }
  }
  if (*((void *)&v25 + 1))
  {
    for (unint64_t j = (uint64_t *)v25; j; unint64_t j = (uint64_t *)*j)
    {
      int v16 = *((_DWORD *)j + 4);
      std::string::size_type v17 = *(NSObject **)(qword_1001D8080 + 104);
      if (v16)
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109120;
          int v28 = v16;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "config:#E MetricFile config for file#%d was missing from device config; dropping it.",
            buf,
            8u);
        }
      }
      else
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 67109120;
          int v28 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "config:#I MetricFile config for file#%d was missing; we grandfather this one in as a 'primary' file.",
            buf,
            8u);
        }
        int v18 = *(_DWORD *)(a1 + 84);
        uint64_t v19 = *(int *)(a1 + 80);
        if ((int)v19 >= v18)
        {
          if (v18 == *(_DWORD *)(a1 + 88))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 72), v18 + 1);
            int v18 = *(_DWORD *)(a1 + 84);
          }
          *(_DWORD *)(a1 + 84) = v18 + 1;
          sub_100099898();
        }
        uint64_t v20 = *(void *)(a1 + 72);
        *(_DWORD *)(a1 + 80) = v19 + 1;
        uint64_t v21 = *(void *)(v20 + 8 * v19);
        int v22 = *(_DWORD *)(v21 + 36);
        *(_DWORD *)(v21 + 8) = *((_DWORD *)j + 4);
        *(_DWORD *)(v21 + 12) = 1;
        *(_DWORD *)(v21 + 36) = v22 | 0xB;
        *(unsigned char *)(v21 + 20) = 0;
      }
    }
  }
  return sub_10002CF24((uint64_t)&v24);
}

void sub_10009987C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10002CF24((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100099898()
{
}

void sub_1000998D8()
{
}

void *sub_1000998FC(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_10002D4B4(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_100099B08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100099B1C(void *a1, unsigned int *a2)
{
  uint64_t result = sub_100056F94(a1, a2);
  if (result)
  {
    sub_100099B54(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_100099B54(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_100055984(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_100099B98(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = a1 + 1;
  uint64_t v3 = a2[1];
  a1[3] = *a2;
  a1[4] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 5), "com.apple.wis.wirelessinsightsd", "cond");
  return a1;
}

void sub_100099C00(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    sub_10000B678(v3);
  }
  sub_10009AC10(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100099C24(uint64_t a1)
{
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_10000B678(v2);
  }
  sub_10009AC10(a1, *(void **)(a1 + 8));
  return a1;
}

void sub_100099C68()
{
}

void sub_100099D90(_Unwind_Exception *a1)
{
  sub_100099F34(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100099DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int *)(a2 + 104);
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)(a2 + 96);
    for (uint64_t i = 8 * v2; i; i -= 8)
    {
      uint64_t v6 = *v4;
      if (*(unsigned char *)(*v4 + 68))
      {
        if (*(_DWORD *)(v6 + 20))
        {
          int v10 = *(_DWORD *)(v6 + 16);
          unsigned int v16 = *(_DWORD *)(v6 + 20);
          sub_100099F84(v6 + 32, &v15);
          *(_DWORD *)float v13 = v10;
          uint64_t v14 = v15;
          sub_10009AC94((uint64_t **)a1, &v16, (uint64_t)v13);
          uint64_t v11 = v14;
          uint64_t v14 = 0;
          if (v11) {
            (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
          }
          goto LABEL_12;
        }
        float v12 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)float v13 = 0;
          uint8x8_t v8 = v12;
          uint64_t v9 = "cond:#E TriggerConditionMap: skip trigger spec (no source trigger id)";
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v7 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)float v13 = 0;
          uint8x8_t v8 = v7;
          uint64_t v9 = "cond:#E TriggerConditionMap: skip trigger spec (no trigger id)";
LABEL_11:
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, v13, 2u);
        }
      }
LABEL_12:
      ++v4;
    }
  }
}

void sub_100099F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10014758C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100099F34(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100099C24(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100099F84@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(int *)(result + 8);
  if (v3)
  {
    long long v14 = 0uLL;
    v15[0] = 0;
    uint64_t v4 = *(uint64_t **)result;
    uint64_t v5 = 8 * v3;
    while (1)
    {
      sub_10009A684(*v4, &v17);
      uint64_t v6 = v17;
      if (v17)
      {
        uint64_t v7 = *((void *)&v14 + 1);
        if (*((void *)&v14 + 1) >= v15[0])
        {
          uint64_t v9 = (uint64_t)(*((void *)&v14 + 1) - v14) >> 3;
          if ((unint64_t)(v9 + 1) >> 61) {
            sub_10002B5E0();
          }
          unint64_t v10 = (uint64_t)(v15[0] - v14) >> 2;
          if (v10 <= v9 + 1) {
            unint64_t v10 = v9 + 1;
          }
          if (v15[0] - (void)v14 >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          v16[4] = v15;
          if (v11) {
            float v12 = (char *)sub_100038500((uint64_t)v15, v11);
          }
          else {
            float v12 = 0;
          }
          float v13 = &v12[8 * v9];
          v16[0] = v12;
          v16[1] = v13;
          void v16[3] = &v12[8 * v11];
          *(void *)float v13 = v6;
          uint64_t v16[2] = v13 + 8;
          sub_10009AE74((uint64_t *)&v14, v16);
          uint64_t v8 = *((void *)&v14 + 1);
          sub_10009B024(v16);
        }
        else
        {
          **((void **)&v14 + 1) = v17;
          uint64_t v8 = v7 + 8;
        }
        *((void *)&v14 + 1) = v8;
      }
      ++v4;
      v5 -= 8;
      if (!v5) {
        operator new();
      }
    }
  }
  *a2 = 0;
  return result;
}

void sub_10009A110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a9;
  sub_10009AB50(&a18);
  _Unwind_Resume(a1);
}

void sub_10009A174(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  unsigned int v36 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v7 = sub_10004468C(a1, &v36);
  uint64_t v9 = v8;
  if (v7 == v8)
  {
    char v33 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)std::string buf = 67109120;
    LODWORD(v38) = v36;
    char v30 = "cond:#I TriggerConditionMap has no conditions for trigger 0x%x";
    char v31 = v33;
    uint32_t v32 = 8;
    goto LABEL_32;
  }
  sub_10005997C(&v35, a3);
  uint64_t v10 = 0;
  uint64_t v34 = a1;
  uint64_t v11 = a1 + 24;
  do
  {
    int v12 = *((_DWORD *)v7 + 10);
    uint64_t v13 = v7[6];
    if (!v13 || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v13 + 16))(v13, v11, &v35))
    {
      uint64_t v15 = a4[1];
      unint64_t v14 = (unint64_t)a4[2];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = *a4;
        uint64_t v18 = (v15 - *a4) >> 2;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          sub_10002B5E0();
        }
        uint64_t v20 = v14 - (void)v17;
        if (v20 >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          int v22 = (char *)sub_10001E460((uint64_t)(a4 + 2), v21);
          uint64_t v17 = *a4;
          uint64_t v15 = a4[1];
        }
        else
        {
          int v22 = 0;
        }
        std::string::size_type v23 = &v22[4 * v18];
        *(_DWORD *)std::string::size_type v23 = v12;
        unsigned int v16 = v23 + 4;
        while (v15 != v17)
        {
          int v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        *a4 = v23;
        a4[1] = v16;
        a4[2] = &v22[4 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v15 = v12;
        unsigned int v16 = v15 + 4;
      }
      a4[1] = v16;
    }
    long long v25 = (uint64_t *)v7[1];
    if (v25)
    {
      do
      {
        int v26 = v25;
        long long v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      do
      {
        int v26 = (uint64_t *)v7[2];
        BOOL v27 = *v26 == (void)v7;
        uint64_t v7 = v26;
      }
      while (!v27);
    }
    ++v10;
    uint64_t v7 = v26;
  }
  while (v26 != v9);
  int v28 = *(NSObject **)(v34 + 40);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    uint64_t v29 = (a4[1] - *a4) >> 2;
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v38 = v10;
    __int16 v39 = 2048;
    uint64_t v40 = v29;
    __int16 v41 = 1024;
    unsigned int v42 = v36;
    char v30 = "cond:#I TriggerConditionMap evaluated %zd rules: %zd passed for trigger 0x%x";
    char v31 = v28;
    uint32_t v32 = 28;
LABEL_32:
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, v30, buf, v32);
  }
}

void sub_10009A418(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009A444(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  int v4 = *(_DWORD *)(a1 + 68);
  if ((~v4 & 3) != 0)
  {
    if ((v4 & 4) == 0) {
      return;
    }
    sub_10009A584(a1, &v6);
  }
  else
  {
    sub_10009A548(a1, &v6);
  }
  uint64_t v5 = v6;
  *a2 = v6;
  if (v5 && (*(unsigned char *)(a1 + 68) & 8) != 0)
  {
    if (*(unsigned char *)(a1 + 28)) {
      operator new();
    }
  }
}

void sub_10009A500(_Unwind_Exception *a1)
{
  void *v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_10009A548(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 68);
  if ((v2 & 0x20) != 0)
  {
    if ((v2 & 0x40) != 0) {
      sub_1000B9AB0(a1, a2);
    }
    else {
      sub_1000B9DEC(a1, a2);
    }
  }
  else if ((v2 & 0x40) != 0)
  {
    sub_1000BA018(a1, a2);
  }
  else if ((v2 & 0x80) != 0)
  {
    sub_1000ABBA0((awd::profile::Condition *)a1, a2);
  }
  else
  {
    if ((v2 & 0x200) != 0) {
      sub_1000D291C();
    }
    if ((v2 & 0x100) != 0) {
      sub_1000FBAF4();
    }
    *a2 = 0;
  }
}

void sub_10009A584(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1;
  int v4 = *(_DWORD *)(a1 + 68);
  if ((v4 & 0x20) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if ((v4 & 0x40) != 0)
    {
      if (!v5)
      {
        a1 = awd::profile::Condition::default_instance((awd::profile::Condition *)a1);
        uint64_t v5 = *(void *)(a1 + 32);
      }
      uint64_t v7 = *(void *)(v2 + 40);
      if (!v7) {
        uint64_t v7 = *(void *)(awd::profile::Condition::default_instance((awd::profile::Condition *)a1) + 40);
      }
      sub_1000BA244(v5, v7, a2);
    }
    else
    {
      if (!v5) {
        uint64_t v5 = *(void *)(awd::profile::Condition::default_instance((awd::profile::Condition *)a1) + 32);
      }
      sub_1000BA5B8(v5, a2);
    }
  }
  else if ((v4 & 0x40) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (!v6) {
      uint64_t v6 = *(void *)(awd::profile::Condition::default_instance((awd::profile::Condition *)a1) + 40);
    }
    sub_1000BA668(v6, a2);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_10009A684(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(int *)(a1 + 16);
  if (v3)
  {
    long long v14 = 0uLL;
    v15[0] = 0;
    int v4 = *(uint64_t **)(a1 + 8);
    uint64_t v5 = 8 * v3;
    do
    {
      sub_10009A444(*v4, &v17);
      uint64_t v6 = v17;
      if (v17)
      {
        uint64_t v7 = *((void *)&v14 + 1);
        if (*((void *)&v14 + 1) >= v15[0])
        {
          uint64_t v9 = (uint64_t)(*((void *)&v14 + 1) - v14) >> 3;
          if ((unint64_t)(v9 + 1) >> 61) {
            sub_10002B5E0();
          }
          unint64_t v10 = (uint64_t)(v15[0] - v14) >> 2;
          if (v10 <= v9 + 1) {
            unint64_t v10 = v9 + 1;
          }
          if (v15[0] - (void)v14 >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          v16[4] = v15;
          if (v11) {
            int v12 = (char *)sub_100038500((uint64_t)v15, v11);
          }
          else {
            int v12 = 0;
          }
          uint64_t v13 = &v12[8 * v9];
          v16[0] = v12;
          v16[1] = v13;
          void v16[3] = &v12[8 * v11];
          *(void *)uint64_t v13 = v6;
          uint64_t v16[2] = v13 + 8;
          sub_10009AE74((uint64_t *)&v14, v16);
          uint64_t v8 = *((void *)&v14 + 1);
          sub_10009B024(v16);
        }
        else
        {
          **((void **)&v14 + 1) = v17;
          uint64_t v8 = v7 + 8;
        }
        *((void *)&v14 + 1) = v8;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
    if ((void)v14 != *((void *)&v14 + 1)) {
      operator new();
    }
    *a2 = 0;
    v16[0] = &v14;
    sub_10009AB50((void ***)v16);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_10009A824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a9;
  sub_10009AB50(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10009A888(uint64_t a1)
{
  *(void *)a1 = off_1001B9700;
  uint64_t v3 = (void **)(a1 + 8);
  sub_10009AB50(&v3);
  return a1;
}

void sub_10009A8E0(uint64_t a1)
{
  *(void *)a1 = off_1001B9700;
  uint64_t v1 = (void **)(a1 + 8);
  sub_10009AB50(&v1);
  operator delete();
}

BOOL sub_10009A94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  int v4 = *(void **)(a1 + 16);
  if (v3 == v4)
  {
    uint64_t v8 = *(void **)(a1 + 8);
  }
  else
  {
    while ((*(unsigned int (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 16))(*v3, a2, a3))
    {
      if (++v3 == v4)
      {
        uint64_t v3 = v4;
        break;
      }
    }
    uint64_t v8 = v3;
    uint64_t v3 = *(void **)(a1 + 16);
  }
  return v8 == v3;
}

uint64_t sub_10009A9EC(uint64_t a1)
{
  *(void *)a1 = off_1001B9740;
  uint64_t v3 = (void **)(a1 + 8);
  sub_10009AB50(&v3);
  return a1;
}

void sub_10009AA44(uint64_t a1)
{
  *(void *)a1 = off_1001B9740;
  uint64_t v1 = (void **)(a1 + 8);
  sub_10009AB50(&v1);
  operator delete();
}

BOOL sub_10009AAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  int v4 = *(void **)(a1 + 16);
  if (v3 == v4)
  {
    uint64_t v8 = *(void **)(a1 + 8);
  }
  else
  {
    while (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 16))(*v3, a2, a3) & 1) == 0)
    {
      if (++v3 == v4)
      {
        uint64_t v3 = v4;
        break;
      }
    }
    uint64_t v8 = v3;
    uint64_t v3 = *(void **)(a1 + 16);
  }
  return v8 != v3;
}

void sub_10009AB50(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10009ABA4(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_10009ABA4(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    int v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void sub_10009AC10(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10009AC10(a1, *a2);
    sub_10009AC10(a1, a2[1]);
    uint64_t v4 = a2[6];
    a2[6] = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    operator delete(a2);
  }
}

_DWORD *sub_10009AC94(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x38uLL);
  uint64_t v7 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1[1];
  unsigned int v10 = *a2;
  unsigned char v6[8] = *a2;
  v6[10] = *(_DWORD *)a3;
  *((void *)v6 + 6) = v7;
  if (v9)
  {
    do
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v9;
        if (v10 >= *((_DWORD *)v9 + 8)) {
          break;
        }
        uint64_t v9 = (uint64_t *)*v9;
        unint64_t v11 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      uint64_t v9 = (uint64_t *)v9[1];
    }
    while (v9);
    unint64_t v11 = v8 + 1;
  }
  else
  {
    unint64_t v11 = a1 + 1;
  }
LABEL_8:
  sub_10001716C(a1, (uint64_t)v8, v11, (uint64_t *)v6);
  return v6;
}

void *sub_10009AD3C(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = off_1001B9780;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10009ADA8(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = off_1001B9780;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete();
}

uint64_t sub_10009AE34(uint64_t a1)
{
  return (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) ^ 1;
}

uint64_t sub_10009AE74(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10009AEEC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10009AEEC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10009AF84((uint64_t)v13);
  return v11;
}

uint64_t sub_10009AF84(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10009AFBC((void *)a1);
  }
  return a1;
}

void *sub_10009AFBC(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    void *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_10009B024(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_10009B05C(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      void v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void sub_10009B168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009B210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009B2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009B520(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10009B608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)FMModel;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_10009B700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009B710(uint64_t a1)
{
  long long v15 = [*(id *)(a1 + 32) findContextUuidsToDelete:*(void *)(a1 + 40)];
  uint64_t v2 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_1001476E0(v23, (uint64_t)[v15 count], (uint64_t)objc_msgSend(*(id *)(a1 + 40), "count"), v2);
  }
  uint64_t v3 = [*(id *)(a1 + 32) contextUUIDToStateMap];
  [v3 removeObjectsForKeys:v15];

  uint64_t v4 = +[NSDate now];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v5 = *(id *)(a1 + 40);
  id v6 = [v5 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        uint64_t v10 = [*(id *)(a1 + 32) contextUUIDToStateMap];
        uint64_t v11 = [v9 uuid];
        int v12 = [v10 objectForKey:v11];

        uint64_t v13 = *(NSObject **)(qword_1001D8080 + 136);
        BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
        if (v12)
        {
          if (v14)
          {
            *(_DWORD *)std::string buf = 138412290;
            unint64_t v21 = v9;
            _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "FederatedMobility[FMModel]:#D Updating existing context %@", buf, 0xCu);
          }
          [*(id *)(a1 + 32) _updateStateForContext:v9 atTime:v4 withExistingState:v12];
        }
        else
        {
          if (v14)
          {
            *(_DWORD *)std::string buf = 138412290;
            unint64_t v21 = v9;
            _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "FederatedMobility[FMModel]:#D Initializing data for new context %@", buf, 0xCu);
          }
          [*(id *)(a1 + 32) _initializeStateForContext:v9 atTime:v4];
        }
      }
      id v6 = [v5 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }
    while (v6);
  }
}

void sub_10009B9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_10009BC88(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleAirplaneModeActiveChanged:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10009BD68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10009BD7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleRegistrationStatusChanged:*(void *)(a1 + 40) registrationStatus:*(void *)(a1 + 48)];
}

void sub_10009BE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10009BE70(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleSignalStrengthChanged:*(void *)(a1 + 40) bars:*(void *)(a1 + 48)];
}

void sub_10009C04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10009C05C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleLocationUpdate:*(void *)(a1 + 40)];
}

id sub_10009C0EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleLocationAuthorizationUpdate:*(unsigned int *)(a1 + 40)];
}

void sub_10009C1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10009C1B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleVisitStarted:*(void *)(a1 + 40)];
}

void sub_10009C270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10009C280(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleVisitEnded:*(void *)(a1 + 40)];
}

id sub_10009C350(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleSignificantLocationsCleared];
}

void sub_10009C44C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10009C45C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleRegulatoryDomainEstimateUpdate:*(void *)(a1 + 40)];
}

void sub_10009C6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10009C7C0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  uint64_t v3 = (uint64_t **)(a1 + 16);
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(unsigned int **)(a2 + 24);
  if (!v4) {
    uint64_t v4 = *(unsigned int **)(sub_1000FA6D8() + 24);
  }
  uint64_t v5 = 0;
  int v9 = 134350337;
  do
  {
    unsigned __int8 v8 = *((unsigned char *)&v9 + v5);
    sub_10009C8C8(v8, v4, v7);
    if (v7[1] != v7[0]) {
      sub_10009E1F4(v3, &v8, (char *)&v8, (uint64_t)v7);
    }
    uint64_t v10 = (void **)v7;
    sub_10009E13C(&v10);
    ++v5;
  }
  while (v5 != 4);
  return a1;
}

void sub_10009C894(_Unwind_Exception *a1)
{
  sub_10009E0DC(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_10009C8C8(int a1@<W1>, unsigned int *a2@<X2>, void *a3@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v4 = a2 + 4;
      goto LABEL_6;
    case 2:
      uint64_t v4 = a2 + 10;
      goto LABEL_6;
    case 6:
      uint64_t v4 = a2 + 16;
      goto LABEL_6;
    case 8:
      uint64_t v4 = a2 + 22;
LABEL_6:
      uint64_t v5 = *v4;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      if ((int)v5 >= 1)
      {
        uint64_t v6 = 0;
        while (2)
        {
          switch(a1)
          {
            case 1:
              operator new();
            case 2:
              operator new();
            case 6:
              operator new();
            case 8:
              operator new();
            default:
              v6 += 8;
              if (8 * v5 == v6) {
                return;
              }
              continue;
          }
        }
      }
      break;
    default:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      break;
  }
}

void sub_10009CB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10009E13C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_10009CC10(unsigned int *a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    *a2 = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  *a2 = v5;
LABEL_9:
  xpc_release(v4);
  xpc_object_t v60 = xpc_int64_create(*a1);
  if (!v60) {
    xpc_object_t v60 = xpc_null_create();
  }
  __p[0] = a2;
  __p[1] = "mcc";
  sub_100014D08((uint64_t)__p, &v60, &v61);
  xpc_release(v61);
  xpc_object_t v61 = 0;
  xpc_release(v60);
  xpc_object_t v60 = 0;
  xpc_object_t v58 = xpc_int64_create(a1[1]);
  if (!v58) {
    xpc_object_t v58 = xpc_null_create();
  }
  __p[0] = a2;
  __p[1] = "mnc";
  sub_100014D08((uint64_t)__p, &v58, &v59);
  xpc_release(v59);
  xpc_object_t v59 = 0;
  xpc_release(v58);
  xpc_object_t v58 = 0;
  xpc_object_t v56 = xpc_int64_create(a1[3]);
  if (!v56) {
    xpc_object_t v56 = xpc_null_create();
  }
  __p[0] = a2;
  __p[1] = "InServiceCount";
  sub_100014D08((uint64_t)__p, &v56, &v57);
  xpc_release(v57);
  xpc_object_t v57 = 0;
  xpc_release(v56);
  xpc_object_t v56 = 0;
  xpc_object_t v54 = xpc_int64_create(a1[2]);
  if (!v54) {
    xpc_object_t v54 = xpc_null_create();
  }
  __p[0] = a2;
  __p[1] = "mLimitedServiceCount";
  sub_100014D08((uint64_t)__p, &v54, &v55);
  xpc_release(v55);
  xpc_object_t v55 = 0;
  xpc_release(v54);
  xpc_object_t v54 = 0;
  uint64_t v6 = (unsigned int *)*((void *)a1 + 2);
  char v33 = a1 + 6;
  if (v6 != a1 + 6)
  {
    do
    {
      xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v8 = v7;
      if (v7)
      {
        xpc_object_t v53 = v7;
      }
      else
      {
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t v53 = v8;
        if (!v8)
        {
          xpc_object_t v9 = xpc_null_create();
          xpc_object_t v8 = 0;
          goto LABEL_25;
        }
      }
      if (xpc_get_type(v8) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_retain(v8);
        goto LABEL_26;
      }
      xpc_object_t v9 = xpc_null_create();
LABEL_25:
      xpc_object_t v53 = v9;
LABEL_26:
      xpc_release(v8);
      if (*((void *)v6 + 6) != *((void *)v6 + 5))
      {
        unint64_t v10 = 0;
        do
        {
          unint64_t v11 = v10 + 1;
          std::to_string(&v50, v10 + 1);
          int v12 = std::string::insert(&v50, 0, "Cell_");
          long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          int64_t v52 = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v50.__r_.__value_.__l.__data_);
          }
          uint64_t v14 = *((void *)v6 + 5);
          if (v10 >= (*((void *)v6 + 6) - v14) >> 3) {
            sub_10009E508();
          }
          xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
          xpc_object_t v16 = v15;
          if (v15)
          {
            xpc_object_t v49 = v15;
          }
          else
          {
            xpc_object_t v16 = xpc_null_create();
            xpc_object_t v49 = v16;
            if (!v16)
            {
              xpc_object_t v17 = xpc_null_create();
              xpc_object_t v16 = 0;
              goto LABEL_38;
            }
          }
          if (xpc_get_type(v16) != (xpc_type_t)&_xpc_type_dictionary)
          {
            xpc_object_t v17 = xpc_null_create();
LABEL_38:
            xpc_object_t v49 = v17;
            goto LABEL_39;
          }
          xpc_retain(v16);
LABEL_39:
          xpc_release(v16);
          uint64_t v18 = *(void *)(v14 + 8 * v10);
          if (*(unsigned char *)(v18 + 4)) {
            std::to_string(&v50, *(_DWORD *)v18);
          }
          else {
            sub_100018888(&v50, "");
          }
          if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v19 = &v50;
          }
          else {
            long long v19 = (std::string *)v50.__r_.__value_.__r.__words[0];
          }
          xpc_object_t v47 = xpc_string_create((const char *)v19);
          if (!v47) {
            xpc_object_t v47 = xpc_null_create();
          }
          int v45 = &v49;
          char v46 = "arfcn";
          sub_100014D08((uint64_t)&v45, &v47, &object);
          xpc_release(object);
          xpc_object_t object = 0;
          xpc_release(v47);
          xpc_object_t v47 = 0;
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v50.__r_.__value_.__l.__data_);
          }
          uint64_t v20 = *(void *)(v14 + 8 * v10);
          if (*(unsigned char *)(v20 + 12)) {
            std::to_string(&v50, *(_DWORD *)(v20 + 8));
          }
          else {
            sub_100018888(&v50, "");
          }
          if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v21 = &v50;
          }
          else {
            unint64_t v21 = (std::string *)v50.__r_.__value_.__r.__words[0];
          }
          xpc_object_t v43 = xpc_string_create((const char *)v21);
          if (!v43) {
            xpc_object_t v43 = xpc_null_create();
          }
          int v45 = &v49;
          char v46 = "band";
          sub_100014D08((uint64_t)&v45, &v43, &v44);
          xpc_release(v44);
          xpc_object_t v44 = 0;
          xpc_release(v43);
          xpc_object_t v43 = 0;
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v50.__r_.__value_.__l.__data_);
          }
          uint64_t v22 = *(void *)(v14 + 8 * v10);
          if (*(unsigned char *)(v22 + 20)) {
            std::to_string(&v50, *(_DWORD *)(v22 + 16));
          }
          else {
            sub_100018888(&v50, "");
          }
          if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v23 = &v50;
          }
          else {
            std::string::size_type v23 = (std::string *)v50.__r_.__value_.__r.__words[0];
          }
          xpc_object_t v41 = xpc_string_create((const char *)v23);
          if (!v41) {
            xpc_object_t v41 = xpc_null_create();
          }
          int v45 = &v49;
          char v46 = "rsrp";
          sub_100014D08((uint64_t)&v45, &v41, &v42);
          xpc_release(v42);
          xpc_object_t v42 = 0;
          xpc_release(v41);
          xpc_object_t v41 = 0;
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v50.__r_.__value_.__l.__data_);
          }
          uint64_t v24 = *(void *)(v14 + 8 * v10);
          if (*(unsigned char *)(v24 + 28)) {
            std::to_string(&v50, *(_DWORD *)(v24 + 24));
          }
          else {
            sub_100018888(&v50, "");
          }
          if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v25 = &v50;
          }
          else {
            long long v25 = (std::string *)v50.__r_.__value_.__r.__words[0];
          }
          xpc_object_t v39 = xpc_string_create((const char *)v25);
          if (!v39) {
            xpc_object_t v39 = xpc_null_create();
          }
          int v45 = &v49;
          char v46 = "count";
          sub_100014D08((uint64_t)&v45, &v39, &v40);
          xpc_release(v40);
          xpc_object_t v40 = 0;
          xpc_release(v39);
          xpc_object_t v39 = 0;
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v50.__r_.__value_.__l.__data_);
          }
          xpc_object_t v37 = v49;
          if (v49) {
            xpc_retain(v49);
          }
          else {
            xpc_object_t v37 = xpc_null_create();
          }
          if (v52 >= 0) {
            int v26 = __p;
          }
          else {
            int v26 = (void **)__p[0];
          }
          v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
          v50.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
          sub_10009D480((uint64_t)&v50, &v37, &v38);
          xpc_release(v38);
          xpc_object_t v38 = 0;
          xpc_release(v37);
          xpc_object_t v37 = 0;
          xpc_release(v49);
          if (SHIBYTE(v52) < 0) {
            operator delete(__p[0]);
          }
          ++v10;
        }
        while (v11 < (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 3);
      }
      unint64_t v27 = *((char *)v6 + 32);
      int v28 = "???";
      if (v27 <= 8) {
        int v28 = (&off_1001B9800)[v27];
      }
      sub_100018888(__p, v28);
      xpc_object_t v35 = v53;
      if (v53) {
        xpc_retain(v53);
      }
      else {
        xpc_object_t v35 = xpc_null_create();
      }
      if (v52 >= 0) {
        uint64_t v29 = __p;
      }
      else {
        uint64_t v29 = (void **)__p[0];
      }
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v50.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
      sub_10009D480((uint64_t)&v50, &v35, &v36);
      xpc_release(v36);
      xpc_object_t v36 = 0;
      xpc_release(v35);
      xpc_object_t v35 = 0;
      if (SHIBYTE(v52) < 0) {
        operator delete(__p[0]);
      }
      xpc_release(v53);
      char v30 = (unsigned int *)*((void *)v6 + 1);
      if (v30)
      {
        do
        {
          char v31 = v30;
          char v30 = *(unsigned int **)v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          char v31 = (unsigned int *)*((void *)v6 + 2);
          BOOL v32 = *(void *)v31 == (void)v6;
          uint64_t v6 = v31;
        }
        while (!v32);
      }
      uint64_t v6 = v31;
    }
    while (v31 != v33);
  }
}

void sub_10009D394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,xpc_object_t object,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  xpc_release(*(xpc_object_t *)(v39 - 160));
  sub_1000551DC(a12);
  _Unwind_Resume(a1);
}

xpc_object_t sub_10009D480@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t sub_10009D4CC(uint64_t result)
{
  *(void *)xpc_object_t result = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = result + 24;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

void sub_10009D4EC(uint64_t a1, int32x2_t **a2)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  xpc_object_t v4 = (void *)(a1 + 24);
  sub_10009E520(a1 + 16, *(void **)(a1 + 24));
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = 0;
  void *v4 = 0;
  xpc_object_t v5 = *a2;
  if (*a2)
  {
    *(int32x2_t *)a1 = vrev64_s32(v5[1]);
    *(_DWORD *)(a1 + 8) = v5[5].i32[0];
    if (v5[3].i32[0] >= 1) {
      operator new();
    }
    sub_10009D62C((unsigned int *)a1);
  }
}

void sub_10009D5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10009E580((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_10009D62C(unsigned int *a1)
{
  sub_10009DC94(a1, &object);
  uint64_t v1 = *(NSObject **)(qword_1001D8080 + 128);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    xpc::object::to_string(v2, (xpc::object *)&object);
    sub_100147CC8((char *)v2, buf, v1);
  }
  xpc_release(object);
}

void sub_10009D6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

uint64_t sub_10009D6F8(uint64_t a1)
{
  return a1;
}

__n128 sub_10009D728@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void **)(a1 + 16);
  xpc_object_t v38 = (void *)(a1 + 24);
  if (v2 != (void *)(a1 + 24))
  {
    uint64_t v3 = 0;
    LOBYTE(v4) = 0;
    uint64_t v44 = 0;
    LOBYTE(v5) = 0;
    unsigned __int8 v43 = 0;
    __n128 v42 = 0u;
    xpc_object_t v40 = &unk_100173000;
    xpc_object_t v41 = &unk_100173000;
    while (1)
    {
      uint64_t v6 = *(NSObject **)(qword_1001D8080 + 128);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        BOOL v32 = (int *)v2[5];
        int v33 = *v32;
        int v34 = v32[1];
        int v35 = v32[2];
        LODWORD(v32) = v32[3];
        *(_DWORD *)std::string buf = 67109888;
        int v54 = v33;
        __int16 v55 = 1024;
        int v56 = v34;
        __int16 v57 = 1024;
        int v58 = v35;
        __int16 v59 = 1024;
        int v60 = (int)v32;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "insight_config:#D Crowdsourced learnings PLMN: MCC, MNC, LimitedServiceCount, InServiceCount: %d, %d, %d, %d", buf, 0x1Au);
      }
      uint64_t v7 = v2[5];
      xpc_object_t v8 = *(void **)(v7 + 16);
      uint64_t v39 = (void *)(v7 + 24);
      if (v8 != (void *)(v7 + 24)) {
        break;
      }
LABEL_45:
      char v30 = (void *)v2[1];
      if (v30)
      {
        do
        {
          char v31 = v30;
          char v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          char v31 = (void *)v2[2];
          BOOL v29 = *v31 == (void)v2;
          uint64_t v2 = v31;
        }
        while (!v29);
      }
      uint64_t v2 = v31;
      if (v31 == v38) {
        goto LABEL_53;
      }
    }
LABEL_6:
    xpc_object_t v9 = *(NSObject **)(qword_1001D8080 + 128);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = *((unsigned __int8 *)v8 + 32);
      *(_DWORD *)std::string buf = 67109120;
      int v54 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "insight_config:#I Crowdsourced learnings RAT: %hhu", buf, 8u);
    }
    int v12 = (uint64_t *)v8[5];
    unint64_t v11 = (uint64_t *)v8[6];
    while (1)
    {
      if (v12 == v11)
      {
        unint64_t v27 = (void *)v8[1];
        if (v27)
        {
          do
          {
            int v28 = v27;
            unint64_t v27 = (void *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            int v28 = (void *)v8[2];
            BOOL v29 = *v28 == (void)v8;
            xpc_object_t v8 = v28;
          }
          while (!v29);
        }
        xpc_object_t v8 = v28;
        if (v28 == v39) {
          goto LABEL_45;
        }
        goto LABEL_6;
      }
      long long v13 = (int *)*v12;
      uint64_t v14 = *(NSObject **)(qword_1001D8080 + 128);
      if (*(unsigned char *)(*v12 + 4))
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          int v15 = *v13;
          *(_DWORD *)std::string buf = 67109120;
          int v54 = v15;
          _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "insight_config:#D Crowdsourced learnings ARFCN: %d", buf, 8u);
        }
      }
      else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        sub_100147DC0(&v51, v52);
      }
      xpc_object_t v16 = (int *)*v12;
      xpc_object_t v17 = *(NSObject **)(qword_1001D8080 + 128);
      if (*(unsigned char *)(*v12 + 12))
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          int v18 = v16[2];
          *(_DWORD *)std::string buf = 67109120;
          int v54 = v18;
          _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "insight_config:#D Crowdsourced learnings Band: %d", buf, 8u);
        }
      }
      else if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        sub_100147D94(&v49, v50);
      }
      long long v19 = (int *)*v12;
      uint64_t v20 = *(NSObject **)(qword_1001D8080 + 128);
      if (*(unsigned char *)(*v12 + 20))
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          int v21 = v19[4];
          *(_DWORD *)std::string buf = 67109120;
          int v54 = v21;
          _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "insight_config:#D Crowdsourced learnings RSRP: %d", buf, 8u);
        }
      }
      else if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        sub_100147D68(&v47, v48);
      }
      uint64_t v22 = (int *)*v12;
      std::string::size_type v23 = *(NSObject **)(qword_1001D8080 + 128);
      if (!*(unsigned char *)(*v12 + 28)) {
        break;
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        int v26 = v22[6];
        *(_DWORD *)std::string buf = 67109120;
        int v54 = v26;
        _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "insight_config:#D Crowdsourced learnings Count: %d", buf, 8u);
        uint64_t v22 = (int *)*v12;
      }
      uint64_t v25 = v22[6];
      if (v25 <= v3) {
        goto LABEL_33;
      }
      if (*((unsigned char *)v22 + 12))
      {
        unsigned int v4 = v22[2];
        LODWORD(v40) = v4 >> 8;
        BYTE4(v44) = 1;
      }
      else
      {
        BYTE4(v44) = 0;
      }
      v24.n128_u64[0] = *(void *)v2[5];
      __n128 v42 = v24;
      LOBYTE(v44) = *((unsigned char *)v8 + 32);
      if (*((unsigned char *)v22 + 4))
      {
        int v5 = *v22;
        LODWORD(v41) = *v22 >> 8;
        unsigned __int8 v43 = 1;
      }
      else
      {
        unsigned __int8 v43 = 0;
      }
LABEL_38:
      ++v12;
      uint64_t v3 = v25;
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      sub_100147D3C(&v45, v46);
    }
LABEL_33:
    uint64_t v25 = v3;
    goto LABEL_38;
  }
  uint64_t v44 = 0;
  unsigned __int8 v43 = 0;
  LOBYTE(v5) = 0;
  LOBYTE(v4) = 0;
  LODWORD(v3) = 0;
  __n128 v42 = 0u;
  LODWORD(v41) = a1 + 24;
  LODWORD(v40) = a1 + 24;
LABEL_53:
  __n128 result = v42;
  *(void *)a2 = v42.n128_u64[0];
  *(void *)(a2 + 8) = v4 | ((unint64_t)(v40 & 0xFFFFFF) << 8) | ((unint64_t)BYTE4(v44) << 32);
  *(void *)(a2 + 16) = v5 | ((unint64_t)(v41 & 0xFFFFFF) << 8) | ((unint64_t)v43 << 32);
  *(unsigned char *)(a2 + 24) = v44;
  *(_DWORD *)(a2 + 28) = v3;
  return result;
}

uint64_t sub_10009DC4C(unsigned int *a1)
{
  unsigned int v1 = a1[1] + *a1 + a1[2];
  if (v1)
  {
    unsigned int v2 = (float)((float)((float)*a1 / (float)v1) * 100.0);
    unsigned int v1 = 1;
  }
  else
  {
    LOBYTE(v2) = 0;
  }
  return v2 | (v1 << 8);
}

void sub_10009DC94(unsigned int *a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v31 = xpc_double_create(*((double *)a1 + 5));
  if (!v31) {
    xpc_object_t v31 = xpc_null_create();
  }
  __p[0] = a2;
  __p[1] = "latitude";
  sub_100014D08((uint64_t)__p, &v31, &v32);
  xpc_release(v32);
  xpc_object_t v32 = 0;
  xpc_release(v31);
  xpc_object_t v31 = 0;
  xpc_object_t v29 = xpc_double_create(*((double *)a1 + 6));
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  __p[0] = a2;
  __p[1] = "longitude";
  sub_100014D08((uint64_t)__p, &v29, &v30);
  xpc_release(v30);
  xpc_object_t v30 = 0;
  xpc_release(v29);
  xpc_object_t v29 = 0;
  xpc_object_t v27 = xpc_int64_create(*a1);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  __p[0] = a2;
  __p[1] = "NoServiceCount";
  sub_100014D08((uint64_t)__p, &v27, &v28);
  xpc_release(v28);
  xpc_object_t v28 = 0;
  xpc_release(v27);
  xpc_object_t v27 = 0;
  xpc_object_t object = xpc_int64_create(a1[1]);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  __p[0] = a2;
  __p[1] = "LimitedServiceCount";
  sub_100014D08((uint64_t)__p, &object, &v26);
  xpc_release(v26);
  xpc_object_t v26 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_object_t v23 = xpc_int64_create(a1[2]);
  if (!v23) {
    xpc_object_t v23 = xpc_null_create();
  }
  __p[0] = a2;
  __p[1] = "InServiceCount";
  sub_100014D08((uint64_t)__p, &v23, &v24);
  xpc_release(v24);
  xpc_object_t v24 = 0;
  xpc_release(v23);
  xpc_object_t v23 = 0;
  xpc_object_t v21 = xpc_int64_create(*((void *)a1 + 4));
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  __p[0] = a2;
  __p[1] = "NumberofPLMNs";
  sub_100014D08((uint64_t)__p, &v21, &v22);
  xpc_release(v22);
  xpc_object_t v22 = 0;
  xpc_release(v21);
  xpc_object_t v21 = 0;
  uint64_t v7 = (unsigned int *)*((void *)a1 + 2);
  xpc_object_t v8 = a1 + 6;
  if (v7 != a1 + 6)
  {
    int v9 = 0;
    do
    {
      std::to_string(&v18, ++v9);
      int v10 = std::string::insert(&v18, 0, "PLMN_");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      int64_t v20 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      sub_10009CC10(*((unsigned int **)v7 + 5), &v16);
      if (v20 >= 0) {
        int v12 = __p;
      }
      else {
        int v12 = (void **)__p[0];
      }
      v18.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v18.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
      sub_10009D480((uint64_t)&v18, &v16, &v17);
      xpc_release(v17);
      xpc_object_t v17 = 0;
      xpc_release(v16);
      xpc_object_t v16 = 0;
      if (SHIBYTE(v20) < 0) {
        operator delete(__p[0]);
      }
      long long v13 = (unsigned int *)*((void *)v7 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          long long v13 = *(unsigned int **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (unsigned int *)*((void *)v7 + 2);
          BOOL v15 = *(void *)v14 == (void)v7;
          uint64_t v7 = v14;
        }
        while (!v15);
      }
      uint64_t v7 = v14;
    }
    while (v14 != v8);
  }
}

void sub_10009E078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_1000551DC(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_10009E0B8(uint64_t result, double a2)
{
  *(double *)(result + 40) = a2;
  return result;
}

unint64_t sub_10009E0C0(unsigned int *a1)
{
  return a1[1] + (unint64_t)*a1 + a1[2];
}

uint64_t sub_10009E0D4(uint64_t result, double a2)
{
  *(double *)(result + 48) = a2;
  return result;
}

void sub_10009E0DC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10009E0DC(a1, *(void *)a2);
    sub_10009E0DC(a1, *((void *)a2 + 1));
    xpc_object_t v4 = (void **)(a2 + 40);
    sub_10009E13C(&v4);
    operator delete(a2);
  }
}

void sub_10009E13C(void ***a1)
{
  unsigned int v2 = *a1;
  if (*v2)
  {
    sub_10009E190((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_10009E190(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void **)(result + 8);
  while (v3 != a2)
  {
    uint64_t v4 = *--v3;
    __n128 result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      operator delete();
    }
  }
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t **sub_10009E1F4(uint64_t **a1, unsigned __int8 *a2, char *a3, uint64_t a4)
{
  xpc_object_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    unsigned int v9 = *a2;
    while (1)
    {
      while (1)
      {
        int v10 = (uint64_t **)v7;
        unsigned int v11 = *((unsigned __int8 *)v7 + 32);
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        xpc_object_t v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        xpc_object_t v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v10 = a1 + 1;
LABEL_10:
    int v12 = (char *)operator new(0x40uLL);
    v12[32] = *a3;
    *(_OWORD *)(v12 + 40) = *(_OWORD *)a4;
    *((void *)v12 + 7) = *(void *)(a4 + 16);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    sub_10001716C(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t sub_10009E2CC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10009E344((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10009E344(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unsigned int v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10009E3DC((uint64_t)v13);
  return v11;
}

uint64_t sub_10009E3DC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10009E414(a1);
  }
  return a1;
}

uint64_t sub_10009E414(uint64_t result)
{
  unsigned int v1 = *(uint64_t **)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    uint64_t *v1 = 0;
    if (result) {
      operator delete();
    }
    ++v1;
  }
  return result;
}

uint64_t sub_10009E46C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10009E4A4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 8;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void sub_10009E508()
{
}

void sub_10009E520(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10009E520(a1, *a2);
    sub_10009E520(a1, a2[1]);
    sub_10009E580(a2 + 5, 0);
    operator delete(a2);
  }
}

uint64_t *sub_10009E580(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_10009E0DC(v2 + 16, *(char **)(v2 + 24));
    operator delete();
  }
  return result;
}

uint64_t *sub_10009E5E4(uint64_t **a1, void *a2, void *a3)
{
  uint64_t v6 = (uint64_t)(a1 + 1);
  uint64_t v7 = operator new(0x30uLL);
  _DWORD v11[2] = v6;
  *((void *)v7 + 4) = *a2;
  *((void *)v7 + 5) = *a3;
  *a3 = 0;
  char v12 = 1;
  uint64_t v8 = (uint64_t **)sub_10009E6D0((uint64_t)a1, v11, (unsigned int *)v7 + 8);
  unsigned int v9 = *v8;
  if (*v8)
  {
    sub_10009E580((uint64_t *)v7 + 5, 0);
    operator delete(v7);
    return v9;
  }
  else
  {
    sub_10001716C(a1, v11[0], v8, (uint64_t *)v7);
  }
  return (uint64_t *)v7;
}

void sub_10009E6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10009E734(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10009E6D0(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v4;
        unsigned int v9 = *((_DWORD *)v4 + 8);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        uint64_t v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        unsigned int v10 = *((_DWORD *)v8 + 9);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      uint64_t result = v8 + 1;
      uint64_t v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

void sub_10009E734(uint64_t a1, uint64_t *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_10009E580(__p + 5, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

unsigned char *sub_10009E78C(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = 0;
  *a2 = 0;
  return result;
}

void sub_10009E79C(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

uint64_t sub_10009E7B8(int a1)
{
  if (DiagnosticLogSubmissionEnabled())
  {
    uint64_t v2 = *(NSObject **)(qword_1001D8080 + 104);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      __int16 v12 = 0;
      uint64_t v3 = "submit:#I Diagnostics mode: kEnabled";
      uint64_t v4 = 2;
      uint64_t v5 = (uint8_t *)&v12;
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, v3, v5, 2u);
      return v4;
    }
    return 2;
  }
  if (!a1 || (DiagnosticLogSubmissionEnabled() & 1) != 0)
  {
    int v6 = BYSetupAssistantNeedsToRun();
    uint64_t v2 = *(NSObject **)(qword_1001D8080 + 104);
    BOOL v7 = os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
    if (!v6)
    {
      if (!v7) {
        return 1;
      }
      __int16 v9 = 0;
      uint64_t v3 = "submit:#I Diagnostics mode: kDiagnosticsOnly by default";
      uint64_t v4 = 1;
      uint64_t v5 = (uint8_t *)&v9;
      goto LABEL_14;
    }
    if (v7)
    {
      __int16 v10 = 0;
      uint64_t v3 = "submit:#I Diagnostics mode: kEnabled because BYSetupAssistantNeedsToRun";
      uint64_t v4 = 2;
      uint64_t v5 = (uint8_t *)&v10;
      goto LABEL_14;
    }
    return 2;
  }
  uint64_t v2 = *(NSObject **)(qword_1001D8080 + 104);
  uint64_t v4 = 1;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    uint64_t v3 = "submit:#I Diagnostics mode: kDiagnosticsOnly";
    uint64_t v5 = buf;
    goto LABEL_14;
  }
  return v4;
}

BOOL sub_10009E904(unsigned int a1)
{
  return a1 < 4;
}

void sub_10009E910(int a1, uint64_t a2, void *a3)
{
  sub_1000844BC(a1, a3, v46);
  uint64_t v5 = (void *)v47;
  if ((v47 & 0x80u) != 0) {
    uint64_t v5 = v46[1];
  }
  if (!v5)
  {
    char v14 = *(NSObject **)(qword_1001D8080 + 104);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_100147DEC(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    goto LABEL_42;
  }
  if ((a1 & 0xFE) == 2 && sub_10006FA24())
  {
    sub_1000844BC(0, a3, (void **)&__p);
    uint64_t v6 = v49;
    unsigned __int8 v7 = v49;
    if ((v49 & 0x80u) != 0) {
      uint64_t v6 = *((void *)&__p + 1);
    }
    if (!v6)
    {
      uint64_t v8 = *(NSObject **)(qword_1001D8080 + 104);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)char v45 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "submit:Submission did not generate a path; AC file not submitted OTA!",
          v45,
          2u);
        if ((v49 & 0x80) == 0) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
    }
    if ((v7 & 0x80) != 0) {
LABEL_11:
    }
      operator delete((void *)__p);
  }
LABEL_12:
  if (OSAInMultiUserMode())
  {
    if ((a1 & 0xFE) == 2) {
      goto LABEL_42;
    }
    if ((v47 & 0x80u) == 0) {
      __int16 v10 = v46;
    }
    else {
      __int16 v10 = (void **)v46[0];
    }
    uint64_t v11 = +[NSString stringWithUTF8String:v10];
    __int16 v12 = +[NSURL fileURLWithPath:v11 isDirectory:0];

    if (a1)
    {
      if (a1 != 1) {
        goto LABEL_34;
      }
      long long v13 = (id *)&kOSAProblemTypeAWDAnonymous;
    }
    else
    {
      long long v13 = (id *)&kOSAProblemTypeAWDPrimary;
    }
    id v24 = *v13;
    if (v24)
    {
      uint64_t v25 = v24;
      if (DiagnosticLogSubmissionEnabled())
      {
        char v26 = OSAMoveFileForSubmissions();
        xpc_object_t v27 = *(NSObject **)(qword_1001D8080 + 104);
        if (v26)
        {
          if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 104), OS_LOG_TYPE_INFO))
          {
            xpc_object_t v28 = v46;
            if ((v47 & 0x80u) != 0) {
              xpc_object_t v28 = (void **)v46[0];
            }
            LODWORD(__p) = 136315138;
            *(void *)((char *)&__p + 4) = v28;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "submit:#I OSAMoveFileForSubmission completed for file '%s'", (uint8_t *)&__p, 0xCu);
          }
        }
        else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 104), OS_LOG_TYPE_ERROR))
        {
          sub_100147E5C((char *)&v47, v46, v27);
        }
      }
      else
      {
        xpc_object_t v37 = *(NSObject **)(qword_1001D8080 + 104);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
          sub_100147EE8(v37, v38, v39, v40, v41, v42, v43, v44);
        }
      }
LABEL_41:

      goto LABEL_42;
    }
LABEL_34:
    xpc_object_t v29 = *(NSObject **)(qword_1001D8080 + 104);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      sub_100147E24(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    uint64_t v25 = 0;
    goto LABEL_41;
  }
  xpc_object_t v22 = *(NSObject **)(qword_1001D8080 + 104);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    xpc_object_t v23 = v46;
    if ((v47 & 0x80u) != 0) {
      xpc_object_t v23 = (void **)v46[0];
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "submit:#I OSAMoveFileForSubmission skipped for file '%s'", (uint8_t *)&__p, 0xCu);
  }
LABEL_42:
  if ((char)v47 < 0) {
    operator delete(v46[0]);
  }
}

void sub_10009EC9C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10001F4A8(a1);
}

void sub_10009ECA8(int *a1)
{
  uint64_t v2 = dispatch_queue_create("com.apple.wirelessinsightsd.BatteryChangeMonitor", 0);
  notify_register_dispatch("com.apple.system.powersources.source", a1, v2, &stru_1001B9868);
  if (IOPSGetTimeRemainingEstimate() == -2.0)
  {
    char v3 = 1;
    byte_1001D7459 = 1;
  }
  else
  {
    char v3 = 0;
  }
  byte_1001D7458 = v3;
}

void sub_10009ED20(id a1, int a2)
{
  if (IOPSGetTimeRemainingEstimate() == -2.0)
  {
    char v2 = 1;
    byte_1001D7459 = 1;
  }
  else
  {
    char v2 = 0;
  }
  byte_1001D7458 = v2;
}

void sub_10009ED60()
{
  if (!dword_1001D745C) {
    sub_10009ECA8(&dword_1001D745C);
  }
  CFStringRef v0 = CFStringCreateWithCString(kCFAllocatorDefault, "AppleRawMaxCapacity", 0x600u);
  CFStringRef v1 = CFStringCreateWithCString(kCFAllocatorDefault, "AppleRawCurrentCapacity", 0x600u);
  double v2 = sub_10009F324(v0, v1);
  if (v0) {
    CFRelease(v0);
  }
  if (v1) {
    CFRelease(v1);
  }
  int64_t v3 = llround(sub_10009F324(@"MaxCapacity", @"CurrentCapacity"));
  uint64_t v4 = qword_1001D7460;
  if (qword_1001D7460 == -1 || (double v5 = *(double *)&qword_1001D7468, *(double *)&qword_1001D7468 == -1.0))
  {
    qword_1001D7460 = v3;
    qword_1001D7468 = *(void *)&v2;
  }
  else
  {
    int v6 = byte_1001D7459;
    qword_1001D7460 = v3;
    qword_1001D7468 = *(void *)&v2;
    byte_1001D7459 = byte_1001D7458;
    unsigned __int8 v7 = (void **)sub_10009F4D4(&v18);
    sub_10009F068(v3, v7, (uint64_t)"currentBatteryCapacity", &v11);
    xpc_release(v18);
    sub_10009F068(v3 - v4, &v11, (uint64_t)"batteryCapacityChange", &v12);
    double v8 = round((v2 - v5) * 10.0) / 10.0;
    sub_10009F14C(&v12, (uint64_t)"rawCurrentBatteryCapacity", &v13, round(v2 * 10.0) / 10.0);
    sub_10009F14C(&v13, (uint64_t)"rawBatteryCapacityChange", &v14, v8);
    sub_10009F22C(v6 != 0, &v14, (uint64_t)"wasCharged", &v15);
    sub_10009F14C(&v15, (uint64_t)"absoluteRawBatteryCapacityChange", &object, fabs(v8));
    sub_10009F22C(v8 >= 0.0, &object, (uint64_t)"absoluteRawBatteryCapacityChangePositive", &v17);
    __int16 v9 = v17;
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v17);
    xpc_object_t v17 = 0;
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v15);
    xpc_object_t v15 = 0;
    xpc_release(v14);
    xpc_object_t v14 = 0;
    xpc_release(v13);
    xpc_object_t v13 = 0;
    xpc_release(v12);
    xpc_object_t v12 = 0;
    xpc_release(v11);
    xpc_object_t v10 = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t v10 = xpc_null_create();
    }
    sub_10009FB30((uint64_t)"com.apple.Telephony.batteryLevelReport", &v10);
    xpc_release(v10);
    xpc_object_t v10 = 0;
    xpc_release(v9);
  }
}

void sub_10009EFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  xpc_release(object);
  xpc_release(v11);
  _Unwind_Resume(a1);
}

void sub_10009F068(int64_t value@<X2>, void **a2@<X0>, uint64_t a3@<X1>, void **a4@<X8>)
{
  xpc_object_t v7 = xpc_int64_create(value);
  xpc_object_t v8 = v7;
  if (v7)
  {
    xpc_object_t v11 = v7;
LABEL_4:
    xpc_retain(v8);
    goto LABEL_5;
  }
  xpc_object_t v8 = xpc_null_create();
  xpc_object_t v11 = v8;
  if (v8) {
    goto LABEL_4;
  }
  xpc_object_t v8 = 0;
  xpc_object_t v11 = xpc_null_create();
LABEL_5:
  v10[0] = a2;
  v10[1] = a3;
  sub_100014D08((uint64_t)v10, &v11, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v11);
  xpc_object_t v11 = 0;
  __int16 v9 = *a2;
  *a4 = *a2;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    *a4 = xpc_null_create();
  }
  xpc_release(v8);
}

void sub_10009F14C(void **a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>, double a4@<D0>)
{
  xpc_object_t v7 = xpc_double_create(a4);
  xpc_object_t v8 = v7;
  if (v7)
  {
    xpc_object_t v11 = v7;
LABEL_4:
    xpc_retain(v8);
    goto LABEL_5;
  }
  xpc_object_t v8 = xpc_null_create();
  xpc_object_t v11 = v8;
  if (v8) {
    goto LABEL_4;
  }
  xpc_object_t v8 = 0;
  xpc_object_t v11 = xpc_null_create();
LABEL_5:
  v10[0] = a1;
  v10[1] = a2;
  sub_100014D08((uint64_t)v10, &v11, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v11);
  xpc_object_t v11 = 0;
  __int16 v9 = *a1;
  *a3 = *a1;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    *a3 = xpc_null_create();
  }
  xpc_release(v8);
}

void sub_10009F22C(BOOL value@<W2>, void **a2@<X0>, uint64_t a3@<X1>, void **a4@<X8>)
{
  xpc_object_t v7 = xpc_BOOL_create(value);
  xpc_object_t v8 = v7;
  if (v7)
  {
    xpc_object_t v11 = v7;
LABEL_4:
    xpc_retain(v8);
    goto LABEL_5;
  }
  xpc_object_t v8 = xpc_null_create();
  xpc_object_t v11 = v8;
  if (v8) {
    goto LABEL_4;
  }
  xpc_object_t v8 = 0;
  xpc_object_t v11 = xpc_null_create();
LABEL_5:
  v10[0] = a2;
  v10[1] = a3;
  sub_100014D08((uint64_t)v10, &v11, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v11);
  xpc_object_t v11 = 0;
  __int16 v9 = *a2;
  *a4 = *a2;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    *a4 = xpc_null_create();
  }
  xpc_release(v8);
}

double sub_10009F310()
{
  return sub_10009F324(@"MaxCapacity", @"CurrentCapacity");
}

double sub_10009F324(const __CFString *a1, const __CFString *a2)
{
  double v2 = -1.0;
  if (a1 && a2)
  {
    uint64_t v4 = (void *)sub_10009F458(a1);
    double v5 = (void *)sub_10009F458(a2);
    if (v4)
    {
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFNumberGetTypeID())
      {
        if (v5)
        {
          CFTypeID v7 = CFGetTypeID(v5);
          if (v7 == CFNumberGetTypeID())
          {
            int v15 = -1;
            CFTypeID v8 = CFGetTypeID(v4);
            int v10 = -1;
            if (v8 == CFNumberGetTypeID())
            {
              ctu::cf::assign((ctu::cf *)&v15, (int *)v4, v9);
              int v10 = v15;
            }
            int v14 = -1;
            CFTypeID v11 = CFGetTypeID(v5);
            if (v11 == CFNumberGetTypeID())
            {
              ctu::cf::assign((ctu::cf *)&v14, (int *)v5, v12);
              if (v10 >= 1 && (v14 & 0x80000000) == 0) {
                double v2 = (double)v14 * 100.0 / (double)v10;
              }
            }
          }
        }
      }
      CFRelease(v4);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
  return v2;
}

CFTypeRef sub_10009F458(const __CFString *a1)
{
  CFDictionaryRef v2 = IOServiceMatching("IOPMPowerSource");
  if (!v2) {
    return 0;
  }
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v2);
  if (!MatchingService) {
    return 0;
  }
  io_object_t v4 = MatchingService;
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(MatchingService, a1, kCFAllocatorDefault, 0);
  IOObjectRelease(v4);
  return CFProperty;
}

void *sub_10009F4D4(void *a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v2) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  *a1 = v3;
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v4);
  return a1;
}

void sub_10009F69C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009F8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009FA5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009FB30(uint64_t a1, void **a2)
{
  xpc_object_t v3 = xpc_null_create();
  xpc_object_t v4 = *a2;
  *a2 = v3;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v6 = v5;
  if (v5)
  {
    xpc_object_t v14 = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v14 = v6;
    if (!v6)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  xpc_object_t v14 = v7;
LABEL_9:
  xpc_release(v6);
  sub_100018888(__p, CASendEventOptionKeyLogPayload);
  xpc_object_t v10 = xpc_BOOL_create(1);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  CFTypeID v8 = __p;
  if (v13 < 0) {
    CFTypeID v8 = (void **)__p[0];
  }
  v9[0] = &v14;
  v9[1] = v8;
  sub_100014D08((uint64_t)v9, &v10, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v10);
  xpc_object_t v10 = 0;
  analytics_send_event_with_options();
  xpc_release(v4);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  xpc_release(v14);
}

void sub_10009FC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  xpc_release(*(xpc_object_t *)(v18 - 40));
  _Unwind_Resume(a1);
}

void sub_10009FD7C()
{
}

void sub_10009FDD4()
{
}

ctu::OsLogLogger *sub_10009FDF8(ctu::OsLogLogger *a1)
{
  uint64_t v2 = ctu::OsLogLogger::OsLogLogger(a1, (const ctu::OsLogLogger *)(qword_1001D8080 + 120));
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 16) = 0;
  xpc_object_t v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  *((void *)a1 + 3) = dispatch_queue_create("WISAbmClient", v3);
  sub_100018888(&__p, "wirelessinsightsd");
  abm::client::CreateManager();
  if (v6 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_10009FE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_object_t v17 = *((void *)v15 + 3);
  if (v17) {
    dispatch_release(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)v15 + 2);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  ctu::OsLogLogger::~OsLogLogger(v15);
  _Unwind_Resume(a1);
}

void sub_10009FED4(uint64_t a1)
{
  CFStringRef v1 = *(std::__shared_weak_count **)(a1 + 40);
  uint64_t v2 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  abm::client::EventsOn();
  if (v2) {
    sub_10000B678(v2);
  }
}

void sub_10009FF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10000B678(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009FF3C(uint64_t a1)
{
  CFStringRef v1 = *(std::__shared_weak_count **)(a1 + 40);
  uint64_t v2 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  abm::client::EventsOff();
  if (v2) {
    sub_10000B678(v2);
  }
}

void sub_10009FF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10000B678(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009FFA4(uint64_t a1@<X0>, char *a2@<X1>, NSObject **a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = 0;
  xpc_object_t v7 = *(std::__shared_weak_count **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  CFNumberRef v12 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100018888(&__p, a2);
  char v13 = _NSConcreteStackBlock;
  uint64_t v14 = 1174405120;
  int v15 = sub_1000A0134;
  uint64_t v16 = &unk_1001B9888;
  CFTypeID v8 = *a3;
  dispatch_object_t v17 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  dispatch_object_t object = 0;
  sub_1000A0A00((uint64_t)v19, a4);
  abm::client::RegisterEventHandler();
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v12) {
    sub_10000B678(v12);
  }
  sub_1000A0A98(v19);
  if (object) {
    dispatch_release(object);
  }
  if (v17) {
    dispatch_release(v17);
  }
}

void sub_1000A00DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_object_t a21,dispatch_object_t object)
{
  sub_1000A0A98(v22);
  if (object) {
    dispatch_release(object);
  }
  if (a21) {
    dispatch_release(a21);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_10000B678(a16);
  }
  _Unwind_Resume(a1);
}

void sub_1000A0134(uint64_t a1, xpc_object_t object)
{
  if (object)
  {
    xpc_object_t v3 = object;
    xpc_retain(object);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
  }
  sub_1000A0A00((uint64_t)v6, a1 + 48);
  xpc_object_t v7 = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_object_t v4 = *(NSObject **)(a1 + 40);
  dispatch_object_t objecta = v4;
  if (v4)
  {
    dispatch_retain(v4);
    xpc_object_t v5 = *(NSObject **)(a1 + 40);
    dispatch_group_t group = v5;
    if (v5)
    {
      dispatch_retain(v5);
      if (group) {
        dispatch_group_enter(group);
      }
    }
  }
  else
  {
    dispatch_group_t group = 0;
  }
  operator new();
}

void sub_1000A02CC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10001F4A8(exception_object);
}

uint64_t sub_1000A030C(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  xpc_object_t v5 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  return sub_1000A0A00(a1 + 48, a2 + 48);
}

void sub_1000A035C(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(NSObject **)(v1 + 40);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = *(NSObject **)(v1 + 32);
  if (v4) {
    dispatch_release(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A0380(void *a1)
{
  sub_1000A0A98(a1 + 6);
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = a1[4];
  if (v3)
  {
    dispatch_release(v3);
  }
}

void sub_1000A03D8(uint64_t a1, char *a2, uint64_t a3, NSObject **a4, uint64_t a5)
{
  xpc_object_t v7 = *(std::__shared_weak_count **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  CFNumberRef v12 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100018888(&__p, a2);
  char v13 = _NSConcreteStackBlock;
  uint64_t v14 = 1174405120;
  int v15 = sub_1000A0550;
  uint64_t v16 = &unk_1001B98B8;
  CFTypeID v8 = *a4;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  sub_1000A0C80((uint64_t)v18, a5);
  abm::client::PerformCommand();
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v12) {
    sub_10000B678(v12);
  }
  sub_1000A0D18(v18);
  if (object) {
    dispatch_release(object);
  }
}

void sub_1000A0504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,dispatch_object_t object)
{
  sub_1000A0D18(v22);
  if (object) {
    dispatch_release(object);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_10000B678(a17);
  }
  _Unwind_Resume(a1);
}

void sub_1000A0550(uint64_t a1, int *a2, xpc_object_t object)
{
  if (object)
  {
    xpc_object_t v5 = object;
    xpc_retain(object);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  sub_1000A0C80((uint64_t)v6, a1 + 40);
  int v7 = *a2;
  if (*((char *)a2 + 31) < 0)
  {
    sub_1000173FC(__p, *((void **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a2 + 2);
    xpc_object_t __p[2] = *((void **)a2 + 3);
  }
  xpc_object_t objecta = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t objecta = xpc_null_create();
  }
  operator new();
}

void sub_1000A06E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000A0D18((uint64_t *)va);
  xpc_release(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0730(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  return sub_1000A0C80(a1 + 40, a2 + 40);
}

void sub_1000A0770(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(NSObject **)(v1 + 32);
  if (v3) {
    dispatch_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A0788(uint64_t a1)
{
  sub_1000A0D18((void *)(a1 + 40));
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_release(v2);
  }
}

BOOL sub_1000A07D4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  xpc_object_t v3 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  abm::client::GetBasebandBootState();
  if (v3) {
    sub_10000B678(v3);
  }
  if (v6 < 0) {
    operator delete(__p);
  }
  return v4 == 0;
}

void sub_1000A0844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10000B678(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A085C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000A08E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_1000A098C((int)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A0908(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000A0940(uint64_t a1)
{
}

uint64_t sub_1000A0948(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1000A098C(int a1, ctu::OsLogLogger *this)
{
  if (this)
  {
    xpc_object_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
    if (v3) {
      sub_10000B678(v3);
    }
    int v4 = *((void *)this + 3);
    if (v4) {
      dispatch_release(v4);
    }
    xpc_object_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    ctu::OsLogLogger::~OsLogLogger(this);
    operator delete();
  }
}

uint64_t sub_1000A0A00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1000A0A98(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_1000A0B1C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(NSObject **)(v1 + 48);
    if (v2)
    {
      dispatch_group_leave(v2);
      uint64_t v3 = *(NSObject **)(v1 + 48);
      if (v3) {
        dispatch_release(v3);
      }
    }
    int v4 = *(NSObject **)(v1 + 40);
    if (v4) {
      dispatch_release(v4);
    }
    xpc_release(*(xpc_object_t *)(v1 + 32));
    *(void *)(v1 + 32) = 0;
    sub_1000A0A98((void *)v1);
    operator delete();
  }
  return result;
}

uint64_t *sub_1000A0B9C(void *a1)
{
  char v6 = a1;
  uint64_t v2 = (void *)a1[4];
  xpc_object_t v8 = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t v8 = xpc_null_create();
  }
  uint64_t v3 = a1[5];
  dispatch_object_t object = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  uint64_t v4 = a1[3];
  if (!v4) {
    sub_100029F0C();
  }
  (*(void (**)(uint64_t, xpc_object_t *, dispatch_object_t *))(*(void *)v4 + 48))(v4, &v8, &object);
  if (object) {
    dispatch_release(object);
  }
  xpc_release(v8);
  return sub_1000A0B1C((uint64_t *)&v6);
}

void sub_1000A0C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object, xpc_object_t a12)
{
  if (object) {
    dispatch_release(object);
  }
  xpc_release(a12);
  sub_1000A0B1C(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0C80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1000A0D18(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_1000A0D9C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 64));
    *(void *)(v1 + 64) = 0;
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    sub_1000A0D18((void *)v1);
    operator delete();
  }
  return result;
}

uint64_t *sub_1000A0E08(uint64_t a1)
{
  uint64_t v5 = a1;
  int v7 = *(_DWORD *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_1000173FC(&__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 56);
  }
  uint64_t v2 = *(void **)(a1 + 64);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100029F0C();
  }
  (*(void (**)(uint64_t, int *, xpc_object_t *))(*(void *)v3 + 48))(v3, &v7, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)__p);
  }
  return sub_1000A0D9C(&v5);
}

void sub_1000A0EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_1000A0F2C(uint64_t a1@<X8>)
{
  sub_100018888(v5, "/var/wireless/wirelessinsightsd");
  ctu::path_join_impl();
  int v7 = 1;
  long long v8 = *(_OWORD *)v5;
  uint64_t v9 = v6;
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v6 = 0;
  sub_100018888(__p, "/AppleInternal/Library/wirelessinsightsd");
  ctu::path_join_impl();
  int v10 = 0;
  long long v11 = *(_OWORD *)__p;
  uint64_t v12 = v4;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  sub_1000A13A4(a1, &v7, 2);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    if (*((char *)&v12 + i + 7) < 0) {
      operator delete(*(void **)((char *)&v11 + i));
    }
  }
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[0]);
  }
}

void sub_1000A1060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v30 = 0;
  while (1)
  {
    if (*(char *)(v28 + v30 + 63) < 0) {
      operator delete(*(void **)(v28 + v30 + 40));
    }
    v30 -= 32;
    if (v30 == -64)
    {
      if (a15 < 0) {
        operator delete(__p);
      }
      if (a21 < 0) {
        operator delete(a16);
      }
      _Unwind_Resume(exception_object);
    }
  }
}

const char *sub_1000A1110()
{
  return "/var/wireless/wirelessinsightsd";
}

void *sub_1000A111C@<X0>(void *a1@<X8>)
{
  return sub_100018888(a1, "/var/wireless/Library/Logs/CrashReporter/wirelessinsightsd");
}

uint64_t sub_1000A112C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1000173FC((unsigned char *)a2, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
  }
  return ctu::path_join_impl();
}

void sub_1000A1184(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A11A0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0;
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  do
  {
    sub_100018888(v18, "/var");
    ctu::path_join_impl();
    sub_1000A112C((uint64_t)v18, (uint64_t)__p);
    unint64_t v5 = a1[1];
    unint64_t v4 = a1[2];
    if (v5 >= v4)
    {
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
      unint64_t v8 = v7 + 1;
      if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_10002B5E0();
      }
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 3);
      if (2 * v9 > v8) {
        unint64_t v8 = 2 * v9;
      }
      if (v9 >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v8;
      }
      v20[4] = v3;
      if (v10) {
        long long v11 = (char *)sub_100009078(v3, v10);
      }
      else {
        long long v11 = 0;
      }
      uint64_t v12 = &v11[24 * v7];
      v20[0] = v11;
      v20[1] = v12;
      void v20[3] = &v11[24 * v10];
      long long v13 = *(_OWORD *)__p;
      *((void *)v12 + 2) = v17;
      *(_OWORD *)uint64_t v12 = v13;
      __p[1] = 0;
      uint64_t v17 = 0;
      __p[0] = 0;
      void v20[2] = v12 + 24;
      sub_10002F59C(a1, v20);
      uint64_t v14 = a1[1];
      sub_10002F734((uint64_t)v20);
      int v15 = SHIBYTE(v17);
      a1[1] = v14;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v6 = *(_OWORD *)__p;
      *(void *)(v5 + 16) = v17;
      *(_OWORD *)unint64_t v5 = v6;
      a1[1] = v5 + 24;
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    v2 += 8;
  }
  while (v2 != 24);
}

void sub_1000A1344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_10002F868((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A13A4(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_1000A1424((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1000A140C(_Unwind_Exception *a1)
{
  sub_100058A90(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1000A1424(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_1000A14A8(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_1000A1650((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10001716C(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_1000A14A8(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      unint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        unint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        unint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    char v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      char v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_1000A1650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  unsigned char v6[8] = *(_DWORD *)a2;
  uint64_t result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t result = sub_1000173FC(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a2 + 8);
    result[2] = *(void *)(a2 + 24);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1000A16E0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1000A16FC(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1000A16FC(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0) {
      operator delete(__p[5]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_1000A175C(void *a1, void *a2)
{
  uint64_t result = sub_1000A17B0(a1, "Persistence", QOS_CLASS_DEFAULT, "persist");
  uint64_t v4 = a2[1];
  result[6] = *a2;
  result[7] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  result[8] = 0;
  result[9] = 0;
  return result;
}

void *sub_1000A17B0(void *a1, const char *a2, dispatch_qos_class_t a3, const char *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.wis.wirelessinsightsd", a4);
  return a1;
}

void sub_1000A1810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

void *sub_1000A183C(uint64_t a1)
{
  uint64_t v2 = *(sqlite3 **)(a1 + 40);
  if (v2)
  {
    sqlite3_close_v2(v2);
    *(void *)(a1 + 40) = 0;
  }
  sub_1000A6140((const void **)(a1 + 72));
  sub_1000A6140((const void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_10000B678(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 32));

  return sub_100029804((void *)a1);
}

void sub_1000A18AC(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  BOOL v2 = sub_1000A1B30(a1);
  if ((*(unsigned int (**)(void, const __CFString *))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), @"filename"))
  {
    uint64_t v3 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "persist:#N Found old 'filename' key, forcing a reload of the config.", (uint8_t *)&__p, 2u);
    }
  }
  else if (!v2)
  {
    return;
  }
  uint64_t v4 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "persist:#N Forcing a load of configuration", (uint8_t *)&__p, 2u);
  }
  long long __p = 0;
  uint64_t v25 = 0;
  v26[0] = 0;
  int v6 = (char *)sub_100038500((uint64_t)v26, 1uLL);
  int v7 = &v6[8 * v5];
  *(void *)int v6 = @"filename";
  unint64_t v8 = v6 + 8;
  unint64_t v10 = (char *)__p;
  uint64_t v9 = v25;
  uint64_t v11 = v6;
  if (v25 != __p)
  {
    do
    {
      uint64_t v12 = *((void *)v9 - 1);
      v9 -= 8;
      *((void *)v11 - 1) = v12;
      v11 -= 8;
    }
    while (v9 != v10);
    uint64_t v9 = (char *)__p;
  }
  long long __p = v11;
  uint64_t v25 = v6 + 8;
  v26[0] = &v6[8 * v5];
  if (v9)
  {
    operator delete(v9);
    int v7 = (char *)v26[0];
  }
  uint64_t v25 = v6 + 8;
  if (v8 >= v7)
  {
    uint64_t v14 = (v8 - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v14 + 1) >> 61) {
      sub_10002B5E0();
    }
    uint64_t v15 = v7 - (unsigned char *)__p;
    uint64_t v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
      uint64_t v16 = v14 + 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      int v18 = (char *)sub_100038500((uint64_t)v26, v17);
    }
    else {
      int v18 = 0;
    }
    char v19 = &v18[8 * v14];
    uint64_t v20 = &v18[8 * v17];
    *(void *)char v19 = @"deviceconfigurationid";
    long long v13 = v19 + 8;
    int v22 = (char *)__p;
    uint64_t v21 = v25;
    if (v25 != __p)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      uint64_t v21 = (char *)__p;
    }
    long long __p = v19;
    uint64_t v25 = v13;
    v26[0] = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *((void *)v6 + 1) = @"deviceconfigurationid";
    long long v13 = v6 + 16;
  }
  uint64_t v25 = v13;
  sub_1000A1DBC(a1, (uint64_t **)&__p);
  if (__p)
  {
    uint64_t v25 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1000A1B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000A1B30(uint64_t a1)
{
  sub_100078390((uint64_t)__p);
  if (v15 >= 0) {
    BOOL v2 = __p;
  }
  else {
    BOOL v2 = (void **)__p[0];
  }
  uint64_t v3 = (sqlite3 **)(a1 + 40);
  if (sqlite3_open_v2((const char *)v2, (sqlite3 **)(a1 + 40), 2, 0))
  {
    uint64_t v4 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "persist:#N DB does not exist.", buf, 2u);
    }
    sub_1000A1E58();
  }
  *(void *)std::string buf = 0;
  uint64_t v11 = buf;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  void v9[2] = sub_1000A201C;
  void v9[3] = &unk_1001B9998;
  void v9[4] = buf;
  sub_100002B78(a1, "PRAGMA user_version;", (uint64_t)v9, 0, 0, 0);
  int v5 = *((_DWORD *)v11 + 6);
  int v6 = *(NSObject **)(a1 + 32);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5 != 1)
  {
    if (v7)
    {
      *(_DWORD *)uint64_t v16 = 67109376;
      int v17 = v5;
      __int16 v18 = 1024;
      int v19 = 1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "persist:#N DB exists but version %d does not match expected version %d.", v16, 0xEu);
    }
    if (*v3)
    {
      sqlite3_close_v2(*v3);
      *uint64_t v3 = 0;
    }
    sub_10007841C();
    sub_1000A1E58();
  }
  if (v7)
  {
    *(_DWORD *)uint64_t v16 = 67109120;
    int v17 = 1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "persist:#N DB opened successfully as version %d.", v16, 8u);
  }
  _Block_object_dispose(buf, 8);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  return v5 != 1;
}

void sub_1000A1D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A1DBC(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  while (v3 != v4)
  {
    uint64_t v5 = *v3++;
    (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v5, 0);
  }
  int v6 = *(uint64_t (**)(void))(**(void **)(a1 + 48) + 16);

  return v6();
}

void sub_1000A1E58()
{
  sub_100018888(&__p, "Persist-db");
  sub_1000035F0();
}

void sub_1000A1FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22) {
    sub_10000B678(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A201C(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sqlite3_column_int(a2, 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1000A2054(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unint64_t v8 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = a2;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 2048;
    v24[0] = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "persist:#I Inserting into triggers table (trid=0x%x, cid=0x%x, %lld sec)", buf, 0x18u);
  }
  sub_1000A23A4((uint64_t)buf);
  uint64_t v9 = sub_100004D64(v24, (uint64_t)"INSERT INTO triggers (trigger, component, longesttime) VALUES (", 63);
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 2;
  unint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = sub_100004D64(v10, (uint64_t)",", 1);
  *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 2;
  uint64_t v12 = (void *)std::ostream::operator<<();
  int v13 = sub_100004D64(v12, (uint64_t)",", 1);
  *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 2;
  uint64_t v14 = (void *)std::ostream::operator<<();
  sub_100004D64(v14, (uint64_t)");", 2);
  std::stringbuf::str();
  if (v19 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  sub_100002B78(a1, p_p, 0, 0, 0, 0);
  if (v19 < 0) {
    operator delete(__p);
  }
  v24[0] = v16;
  if (v25 < 0) {
    operator delete((void *)v24[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1000A236C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000A267C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A23A4(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 24));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v6;
  *(void *)a1 = v8;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1000A2654(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A267C(uint64_t a1)
{
  *(void *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void sub_1000A27B4()
{
  sub_100018888(&__p, "Persist-addTT");
  sub_1000035F0();
}

void sub_1000A293C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A2958(uint64_t a1)
{
  return sub_1000A2054(*(void *)(a1 + 32), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 68), *(void *)(a1 + 56));
}

void sub_1000A296C(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "persist:#N Truncating triggers table", v3, 2u);
  }
  sub_100002B78(a1, "DELETE FROM triggers;", 0, 0, 0, 0);
}

void sub_1000A29F0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "persist:#N Truncating component configurations table.", v3, 2u);
  }
  sub_100002B78(a1, "DELETE FROM ccs;", 0, 0, 0, 0);
}

void sub_1000A2A74(uint64_t a1, int a2)
{
  int v3 = a2;
  sub_100018888(&__p, "Persist-createCC");
  sub_1000035F0();
}

void sub_1000A2BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A2BFC(uint64_t a1, char a2)
{
  char v3 = a2;
  sub_100018888(&__p, "Persist-setPII");
  sub_1000035F0();
}

void sub_1000A2CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000A2CE8(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1000A6388;
  v5[3] = &unk_1001B9BA8;
  v5[4] = a1;
  void v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 16;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (*(void *)(v2 + 8))
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A64AC;
    unint64_t v10 = &unk_1001B9BE8;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6470;
    unint64_t v10 = &unk_1001B9BC8;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

void sub_1000A2E14(uint64_t a1, char a2)
{
  char v3 = a2;
  sub_100018888(&__p, "Persist-setShim");
  sub_1000035F0();
}

void sub_1000A2EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A2F00(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1000A6540;
  v5[3] = &unk_1001B9C28;
  v5[4] = a1;
  void v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 16;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (*(void *)(v2 + 8))
  {
    unsigned __int8 v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6664;
    unint64_t v10 = &unk_1001B9C68;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    unsigned __int8 v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6628;
    unint64_t v10 = &unk_1001B9C48;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13;
}

uint64_t sub_1000A3024(uint64_t a1)
{
  uint64_t result = sub_10006F8E4();
  if (result)
  {
    uint64_t v4 = a1;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 0x40000000;
    _DWORD v5[2] = sub_1000A66A0;
    v5[3] = &unk_1001B9C88;
    v5[4] = a1;
    void v5[5] = &v4;
    uint64_t v6 = v5;
    char v3 = *(NSObject **)(a1 + 16);
    if (*(void *)(a1 + 24))
    {
      char v13 = 0;
      block = _NSConcreteStackBlock;
      uint64_t v8 = 0x40000000;
      uint64_t v9 = sub_1000A67C4;
      unint64_t v10 = &unk_1001B9CC8;
      uint64_t v11 = &v13;
      uint64_t v12 = &v6;
      dispatch_async_and_wait(v3, &block);
    }
    else
    {
      char v13 = 0;
      block = _NSConcreteStackBlock;
      uint64_t v8 = 0x40000000;
      uint64_t v9 = sub_1000A6788;
      unint64_t v10 = &unk_1001B9CA8;
      uint64_t v11 = &v13;
      uint64_t v12 = &v6;
      dispatch_sync(v3, &block);
    }
    return v13 != 0;
  }
  return result;
}

uint64_t sub_1000A3164(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1000A6800;
  v5[3] = &unk_1001B9CE8;
  v5[4] = a1;
  void v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 16;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (*(void *)(v2 + 8))
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6854;
    unint64_t v10 = &unk_1001B9D28;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6818;
    unint64_t v10 = &unk_1001B9D08;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13;
}

uint64_t sub_1000A3288(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1000A6890;
  v5[3] = &unk_1001B9D48;
  v5[4] = a1;
  void v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 16;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (*(void *)(v2 + 8))
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6854;
    unint64_t v10 = &unk_1001B9D28;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6818;
    unint64_t v10 = &unk_1001B9D08;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13;
}

uint64_t sub_1000A33AC(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1000A68A8;
  v5[3] = &unk_1001B9D68;
  v5[4] = a1;
  void v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 16;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (*(void *)(v2 + 8))
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6854;
    unint64_t v10 = &unk_1001B9D28;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6818;
    unint64_t v10 = &unk_1001B9D08;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13;
}

void sub_1000A34D0(uint64_t a1)
{
  uint64_t v3 = a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000A6904;
  block[3] = &unk_1001B9D88;
  void block[4] = a1;
  void block[5] = &v3;
  uint64_t v2 = a1 + 16;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (*(void *)(v2 + 8)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t sub_1000A3550(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1000A695C;
  v5[3] = &unk_1001B9DA8;
  v5[4] = a1;
  void v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 16;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (*(void *)(v2 + 8))
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A69B0;
    unint64_t v10 = &unk_1001B9DE8;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6974;
    unint64_t v10 = &unk_1001B9DC8;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13;
}

uint64_t sub_1000A3674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(const void **__return_ptr))(**(void **)(a1 + 48) + 48))(&v7);
  sub_10005422C(&v8, &v7);
  sub_10001570C(&v7);
  LODWORD(v7) = a3;
  if (v8) {
    uint64_t v5 = sub_100053394;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5)
  {
    ctu::cf::assign((ctu::cf *)&v7, v8, v4);
    a3 = v7;
  }
  sub_1000541F8((const void **)&v8);
  return a3;
}

void sub_1000A3718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000541F8((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1000A373C(uint64_t a1, uint64_t a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)long long __p = *(_OWORD *)buf;
  uint64_t v9 = *(void *)&buf[16];
  uint64_t v6 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = __p;
    if (v9 < 0) {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = valuePtr;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "persist:#I Setting %s to %d", buf, 0x12u);
  }
  if (v5)
  {
    (*(void (**)(void, uint64_t, CFNumberRef))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), a2, v5);
    CFRelease(v5);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000A3890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A38C8()
{
  sub_1000155F0(&__p, 0);
  sub_1000A3934();
}

void sub_1000A3918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A3934()
{
  sub_100018888(&__p, "Persist-setBuild");
  sub_1000035F0();
}

void sub_1000A3AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    sub_10000B678(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A3AD8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1000A6C70;
  v5[3] = &unk_1001B9E08;
  v5[4] = a1;
  void v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6E3C;
    unint64_t v10 = &unk_1001B9E48;
    uint64_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6DD8;
    unint64_t v10 = &unk_1001B9E28;
    uint64_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_sync(v2, &block);
  }
}

void sub_1000A3BF8(uint64_t a1, int a2)
{
  int v5 = a2;
  v4[0] = a1;
  v4[1] = &v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000A6EA0;
  block[3] = &unk_1001B9E68;
  void block[4] = a1;
  void block[5] = v4;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

BOOL sub_1000A3C84(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1000A6EB8;
  v5[3] = &unk_1001B9E88;
  v5[4] = a1;
  void v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 16;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (*(void *)(v2 + 8))
  {
    int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A69B0;
    unint64_t v10 = &unk_1001B9DE8;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6974;
    unint64_t v10 = &unk_1001B9DC8;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

void sub_1000A3DB0(uint64_t a1, int a2)
{
  int v5 = a2;
  v4[0] = a1;
  v4[1] = &v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000A6ED0;
  block[3] = &unk_1001B9EA8;
  void block[4] = a1;
  void block[5] = v4;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

uint64_t sub_1000A3E3C(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1000A6EE8;
  v5[3] = &unk_1001B9EC8;
  v5[4] = a1;
  void v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 16;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (*(void *)(v2 + 8))
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6854;
    unint64_t v10 = &unk_1001B9D28;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6818;
    unint64_t v10 = &unk_1001B9D08;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13;
}

void sub_1000A3F60(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = a2;
  int v6 = a3;
  int v5 = a4;
  sub_100018888(&__p, "Persist-addTimer");
  sub_1000035F0();
}

void sub_1000A4044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A4060()
{
  sub_100018888(&__p, "Persist-clearTimers");
  sub_1000035F0();
}

void sub_1000A4128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A4144(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1000A72F4;
  v5[3] = &unk_1001B9F28;
  v5[4] = a1;
  void v5[5] = &v4;
  int v6 = v5;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8))
  {
    *a2 = 0;
    a2[1] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A78EC;
    unint64_t v10 = &unk_1001B9FE0;
    uint64_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A7884;
    unint64_t v10 = &unk_1001B9FC0;
    uint64_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_sync(v2, &block);
  }
}

void sub_1000A425C(uint64_t a1, void *a2)
{
  __p[5] = a2;
  sub_100018888(__p, "Persist-setBT");
  sub_1000035F0();
}

void sub_1000A432C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A4348(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1000A79E0;
  v5[3] = &unk_1001BA020;
  v5[4] = a1;
  void v5[5] = &v4;
  int v6 = v5;
  uint64_t v2 = a1 + 16;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (*(void *)(v2 + 8))
  {
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A7AFC;
    unint64_t v10 = &unk_1001BA060;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    uint64_t v13 = 0;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A7AC0;
    unint64_t v10 = &unk_1001BA040;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    uint64_t v13 = 0;
    dispatch_sync(v1, &block);
  }
  return v13;
}

uint64_t sub_1000A446C(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1000A7B38;
  v5[3] = &unk_1001BA080;
  v5[4] = a1;
  void v5[5] = &v4;
  int v6 = v5;
  uint64_t v2 = a1 + 16;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (*(void *)(v2 + 8))
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6854;
    unint64_t v10 = &unk_1001B9D28;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1000A6818;
    unint64_t v10 = &unk_1001B9D08;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13;
}

void sub_1000A4590(uint64_t a1@<X0>, char a2@<W1>, xpc_object_t *a3@<X8>)
{
  char v6 = a2;
  v5[0] = &v6;
  v5[1] = a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_1000A7C50;
  void v7[3] = &unk_1001BA0A0;
  void v7[4] = a1;
  void v7[5] = v5;
  uint64_t v8 = v7;
  uint64_t v4 = *(NSObject **)(a1 + 16);
  if (*(void *)(a1 + 24))
  {
    *a3 = xpc_null_create();
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    uint64_t v11 = sub_1000A8024;
    uint64_t v12 = &unk_1001BA0E0;
    unsigned int v13 = a3;
    uint64_t v14 = &v8;
    dispatch_async_and_wait(v4, &block);
  }
  else
  {
    *a3 = xpc_null_create();
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    uint64_t v11 = sub_1000A7FB4;
    uint64_t v12 = &unk_1001BA0C0;
    unsigned int v13 = a3;
    uint64_t v14 = &v8;
    dispatch_sync(v4, &block);
  }
}

void sub_1000A46E0()
{
  sub_100018888(&__p, "Persist-setMFC");
  sub_1000035F0();
}

void sub_1000A47AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A47C8(uint64_t a1, char a2)
{
  char v6 = a2;
  v5[0] = a1;
  v5[1] = &v6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_1000A82A0;
  void v7[3] = &unk_1001BA120;
  void v7[4] = a1;
  void v7[5] = v5;
  uint64_t v8 = v7;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8))
  {
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    uint64_t v11 = sub_1000A82EC;
    uint64_t v12 = &unk_1001BA160;
    unsigned int v13 = &v15;
    uint64_t v14 = &v8;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    uint64_t v11 = sub_1000A82B0;
    uint64_t v12 = &unk_1001BA140;
    unsigned int v13 = &v15;
    uint64_t v14 = &v8;
    dispatch_sync(v2, &block);
  }
  return v15;
}

unint64_t sub_1000A48F0(uint64_t a1, unsigned int a2)
{
  if (a2 > 3)
  {
    unsigned int v8 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    uint64_t v4 = off_1001BA398[(char)a2];
    sub_1000A4AF0((const void **)a1);
    CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 72);
    if (v5) {
      char v6 = sub_1000A4CAC;
    }
    else {
      char v6 = 0;
    }
    if (v6)
    {
      CFTypeRef Value = CFDictionaryGetValue(v5, v4);
      sub_1000A7B50(&theDict, &Value);
      CFDictionaryRef v7 = theDict;
    }
    else
    {
      CFDictionaryRef v7 = 0;
      CFDictionaryRef theDict = 0;
    }
    if (v7) {
      uint64_t v10 = sub_1000A4CAC;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10)
    {
      CFTypeRef Value = CFDictionaryGetValue(v7, @"id");
      sub_10005422C(&v19, &Value);
      CFTypeRef Value = CFDictionaryGetValue(theDict, @"mask");
      sub_10005422C(&v18, &Value);
      if (v19) {
        uint64_t v12 = sub_100053394;
      }
      else {
        uint64_t v12 = 0;
      }
      if (v12 && (v18 ? (unsigned int v13 = sub_100053394) : (unsigned int v13 = 0), v13))
      {
        LODWORD(Value) = 0;
        ctu::cf::assign((ctu::cf *)&Value, v19, v11);
        unsigned int v8 = Value;
        CFTypeRef Value = 0;
        ctu::cf::assign((ctu::cf *)&Value, v18, v14);
        unint64_t v9 = 0;
      }
      else
      {
        uint64_t v15 = sub_1000A4C34(a1, a2);
        unint64_t v9 = v15 & 0xFFFFFFFF00000000;
        unsigned int v8 = v15;
      }
      sub_1000541F8((const void **)&v18);
      sub_1000541F8((const void **)&v19);
    }
    else
    {
      uint64_t v16 = sub_1000A4C34(a1, a2);
      unsigned int v8 = v16;
      unint64_t v9 = v16 & 0xFFFFFFFF00000000;
    }
    sub_1000A6140((const void **)&theDict);
  }
  return v9 & 0xFFFFFFFF00000000 | v8;
}

void sub_1000A4AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000A6140((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_1000A4AF0(const void **result)
{
  if (result[9]) {
    uint64_t v1 = sub_1000A4CAC;
  }
  else {
    uint64_t v1 = 0;
  }
  if (!v1)
  {
    uint64_t v2 = result;
    (*(void (**)(const void **__return_ptr))(*(void *)result[6] + 48))(&v8);
    sub_1000A7BB4(&propertyList, &v8);
    sub_10001570C(&v8);
    if (propertyList) {
      uint64_t v3 = sub_100078BE8;
    }
    else {
      uint64_t v3 = 0;
    }
    if (v3)
    {
      CFTypeRef DeepCopy = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, propertyList, 2uLL);
      sub_1000A8338(&v8, &DeepCopy);
      uint64_t v4 = v2[9];
      v2[9] = v8;
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      uint64_t v4 = v2[9];
      v2[9] = Mutable;
    }
    unsigned int v8 = v4;
    sub_1000A6140(&v8);
    return sub_100078794(&propertyList);
  }
  return result;
}

void sub_1000A4C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100078794((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A4C34(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = sub_1000A3674(a1, @"uniquefilenumber", 1);
  sub_1000A373C(a1, @"uniquefilenumber", v4 + 1);
  uint64_t v5 = (int)sub_10006FAE8();

  return sub_1000A4DF0(a1, a2, v4, v5);
}

uint64_t sub_1000A4CAC(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_1000A4CB4(uint64_t a1, unsigned int a2)
{
  char v6 = a2;
  if (a2 > 3) {
    return 0;
  }
  v5[0] = a1;
  v5[1] = &v6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_1000A8328;
  void v7[3] = &unk_1001BA180;
  void v7[4] = a1;
  void v7[5] = v5;
  unsigned int v8 = v7;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8))
  {
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    CFNumberRef v11 = sub_1000A82EC;
    uint64_t v12 = &unk_1001BA160;
    unsigned int v13 = &v15;
    CFNumberRef v14 = &v8;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    CFNumberRef v11 = sub_1000A82B0;
    uint64_t v12 = &unk_1001BA140;
    unsigned int v13 = &v15;
    CFNumberRef v14 = &v8;
    dispatch_sync(v2, &block);
  }
  return v15;
}

uint64_t sub_1000A4DF0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t valuePtr = a3;
  uint64_t v15 = a4;
  if (a2 > 3) {
    return 0;
  }
  uint64_t v4 = a4;
  int v5 = a3;
  CFDictionaryRef v7 = off_1001BA398[(char)a2];
  sub_1000A4AF0((const void **)a1);
  uint64_t v16 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), v7);
  sub_1000A7B50(&value, &v16);
  if (value) {
    unsigned int v8 = sub_1000A4CAC;
  }
  else {
    unsigned int v8 = 0;
  }
  if (!v8)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint64_t v10 = value;
    xpc_object_t value = Mutable;
    uint64_t v16 = v10;
    sub_1000A6140(&v16);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), v7, value);
  }
  if (v5)
  {
    uint64_t v16 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue((CFMutableDictionaryRef)value, @"id", v16);
    sub_1000541F8(&v16);
    uint64_t v4 = v15;
  }
  if (v4 != 0xFFFFFFFFLL)
  {
    uint64_t v16 = CFNumberCreate(0, kCFNumberSInt64Type, &v15);
    CFDictionarySetValue((CFMutableDictionaryRef)value, @"mask", v16);
    sub_1000541F8(&v16);
  }
  (*(void (**)(void, const __CFString *, void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), @"filestate", *(void *)(a1 + 72));
  uint64_t v11 = valuePtr;
  sub_1000A6140((const void **)&value);
  return v11;
}

void sub_1000A4F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_1000A4FC4(uint64_t a1, char a2, void *a3)
{
  char v7 = a2;
  int v6 = *a3;
  v5[0] = a1;
  v5[1] = &v7;
  void v5[2] = &v6;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000A83A4;
  block[3] = &unk_1001BA1A0;
  void block[4] = a1;
  void block[5] = v5;
  uint64_t v4 = a1 + 16;
  uint64_t v3 = *(NSObject **)(a1 + 16);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
}

void sub_1000A5060(uint64_t a1, uint64_t a2)
{
  v4[0] = a1;
  v4[1] = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000A83C0;
  block[3] = &unk_1001BA1C0;
  void block[4] = a1;
  void block[5] = v4;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

void sub_1000A50E4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_1000A856C;
  void v5[3] = &unk_1001BA1E0;
  v5[4] = a1;
  void v5[5] = &v4;
  int v6 = v5;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8))
  {
    *a2 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    unint64_t v9 = sub_1000A8748;
    uint64_t v10 = &unk_1001BA220;
    uint64_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    *a2 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    unint64_t v9 = sub_1000A869C;
    uint64_t v10 = &unk_1001BA200;
    uint64_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_sync(v2, &block);
  }
}

void sub_1000A51FC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_1000A87F4;
  void v5[3] = &unk_1001BA240;
  v5[4] = a1;
  void v5[5] = &v4;
  int v6 = v5;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8))
  {
    *a2 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    unint64_t v9 = sub_1000A8748;
    uint64_t v10 = &unk_1001BA220;
    uint64_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    *a2 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    unint64_t v9 = sub_1000A869C;
    uint64_t v10 = &unk_1001BA200;
    uint64_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_sync(v2, &block);
  }
}

void sub_1000A5314(uint64_t a1, uint64_t a2)
{
  v4[0] = a2;
  v4[1] = a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000A89D0;
  block[3] = &unk_1001BA260;
  void block[4] = a1;
  void block[5] = v4;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

uint64_t sub_1000A5398(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a3 + 8);
    }
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    LOWORD(v16[0]) = 2048;
    *(void *)((char *)v16 + 2) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "persist:#I Inserting into component configuration table for cid 0x%x; config has size %zd",
      buf,
      0x12u);
  }
  sub_100002260((uint64_t)buf);
  uint64_t v8 = sub_100004D64(buf, (uint64_t)"INSERT INTO ccs (component, configuration) VALUES (", 51);
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 2;
  unint64_t v9 = (void *)std::ostream::operator<<();
  sub_100004D64(v9, (uint64_t)", ?1);", 6);
  std::stringbuf::str();
  if (v14 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 0x40000000;
  v12[2] = sub_1000A5674;
  void v12[3] = &unk_1001B99E8;
  void v12[4] = a3;
  sub_100002B78(a1, p_p, 0, (uint64_t)v12, 0, 0);
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1000A563C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_10004E93C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A5674(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v2 = *(const void ***)(a1 + 32);
  if (*((char *)v2 + 23) < 0)
  {
    uint64_t v2 = (const void **)*v2;
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  else
  {
    LODWORD(v3) = *((unsigned __int8 *)v2 + 23);
  }
  return sqlite3_bind_blob(a2, 1, v2, v3, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

void sub_1000A569C(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v6 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "persist:#I Reading from component configuration table for cid 0x%x", buf, 8u);
  }
  uint64_t v16 = 0;
  char v17 = &v16;
  uint64_t v18 = 0x3802000000;
  char v19 = sub_1000A5A94;
  uint64_t v21 = 0;
  int v22 = 0;
  uint64_t v20 = sub_1000A5AA4;
  sub_1000A23A4((uint64_t)buf);
  uint64_t v7 = sub_100004D64(v28, (uint64_t)"SELECT * FROM ccs WHERE component = ", 36);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 2;
  uint64_t v8 = (void *)std::ostream::operator<<();
  sub_100004D64(v8, (uint64_t)";", 1);
  std::stringbuf::str();
  if (v26 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 0x40000000;
  void v14[2] = sub_1000A5AB4;
  void v14[3] = &unk_1001B9A10;
  int v15 = a2;
  void v14[4] = &v16;
  v14[5] = a1;
  sub_100002B78(a1, p_p, (uint64_t)v14, 0, 0, 0);
  if (v26 < 0) {
    operator delete(__p);
  }
  uint64_t v10 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = (void *)v17[5];
    if (v11) {
      uint64_t v11 = (void *)(v11[1] - *v11);
    }
    LODWORD(__p) = 67109376;
    HIDWORD(__p) = a2;
    __int16 v24 = 2048;
    char v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "persist:#I Read from component configuration table for cid 0x%x; config vector has size %zd",
      (uint8_t *)&__p,
      0x12u);
  }
  uint64_t v12 = v17[6];
  *a3 = v17[5];
  a3[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  v28[0] = v13;
  if (v29 < 0) {
    operator delete((void *)v28[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  _Block_object_dispose(&v16, 8);
  if (v22) {
    sub_10000B678(v22);
  }
}

void sub_1000A5A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  sub_1000A267C((uint64_t)&a30);
  _Block_object_dispose(&a16, 8);
  if (a22) {
    sub_10000B678(a22);
  }
  _Unwind_Resume(a1);
}

__n128 sub_1000A5A94(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void sub_1000A5AA4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void sub_1000A5AB4(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = sqlite3_column_blob(a2, 1);
  int v6 = sqlite3_column_bytes(a2, 1);
  uint64_t v7 = *(NSObject **)(v4 + 32);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = *(_DWORD *)(a1 + 48);
    v9[0] = 67109376;
    v9[1] = v8;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "persist:#I Read from component configuration table for cid 0x%x; config data has size %d",
      (uint8_t *)v9,
      0xEu);
  }
  if (v5) {
    operator new();
  }
  operator new();
}

void sub_1000A5C0C()
{
}

void sub_1000A5C38(uint64_t a1, uint64_t a2)
{
  sub_10006EC78(&v2, a2);
}

uint64_t sub_1000A5C80(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000A5C9C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void sub_1000A5CAC(uint64_t a1, uint64_t a2)
{
  sub_100002B78(a1, "DELETE FROM aggregations;", 0, 0, 0, 0);
  if (*(_DWORD *)(sub_1000E82A8(a2) + 160))
  {
    uint64_t v4 = sub_1000E82A8(a2);
    uint64_t v5 = *(int *)(v4 + 160);
    if (v5)
    {
      int v6 = *(uint64_t **)(v4 + 152);
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6++;
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 0x40000000;
        _DWORD v9[2] = sub_1000A5DBC;
        void v9[3] = &unk_1001B9A60;
        void v9[4] = v8;
        sub_100002B78(a1, "INSERT INTO aggregations (metric, name, resetTime) VALUES (?1, ?2, ?3)", 0, (uint64_t)v9, 0, 0);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

uint64_t sub_1000A5DBC(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, *(unsigned int *)(*(void *)(a1 + 32) + 16));
  uint64_t v4 = *(const char **)(*(void *)(a1 + 32) + 8);
  if (v4[23] < 0)
  {
    uint64_t v4 = *(const char **)v4;
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 8);
  }
  else
  {
    LODWORD(v5) = *((unsigned __int8 *)v4 + 23);
  }
  int v6 = (wis *)sqlite3_bind_text(a2, 2, v4, v5, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_int64 WISTimestamp = wis::getWISTimestamp(v6);

  return sqlite3_bind_int64(a2, 3, WISTimestamp);
}

void sub_1000A5E40(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  int v6 = a2;
  v5[0] = &v6;
  v5[1] = a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_1000A8D84;
  void v7[3] = &unk_1001BA2D0;
  void v7[4] = a1;
  void v7[5] = v5;
  uint64_t v8 = v7;
  uint64_t v4 = a1 + 16;
  uint64_t v3 = *(NSObject **)(a1 + 16);
  if (*(void *)(v4 + 8))
  {
    *(_OWORD *)((char *)a3 + 58) = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *a3 = 0uLL;
    a3[1] = 0uLL;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    int v11 = sub_1000A9198;
    uint64_t v12 = &unk_1001BA338;
    uint64_t v13 = a3;
    char v14 = &v8;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    *(_OWORD *)((char *)a3 + 58) = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *a3 = 0uLL;
    a3[1] = 0uLL;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    int v11 = sub_1000A9114;
    uint64_t v12 = &unk_1001BA318;
    uint64_t v13 = a3;
    char v14 = &v8;
    dispatch_sync(v3, &block);
  }
}

void sub_1000A5F78(void *a1)
{
  sub_10000BA54(&v1, a1);
  operator new();
}

void sub_1000A6060(void *a1)
{
  sub_10000BA54(&v1, a1);
  operator new();
}

const void **sub_1000A6140(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_1000A6174(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

uint64_t sub_1000A61AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000A61BC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000A61D8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void sub_1000A61E8(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    sub_10000B678(v4);
  }
  if (*((void *)&v5 + 1)) {
    sub_10000B678(*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_1000A6250(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_1000A6260(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    sub_10000B678(v4);
  }
  if (*((void *)&v5 + 1)) {
    sub_10000B678(*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_1000A62C8(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    sub_10000B678(v4);
  }
  if (*((void *)&v5 + 1)) {
    sub_10000B678(*((std::__shared_weak_count **)&v5 + 1));
  }
}

uint64_t sub_1000A6330(uint64_t a1)
{
  uint64_t v1 = *(unsigned char ***)(a1 + 40);
  uint64_t v2 = *((void *)*v1 + 6);
  if (*v1[1]) {
    long long v3 = &kCFBooleanTrue;
  }
  else {
    long long v3 = &kCFBooleanFalse;
  }
  return (*(uint64_t (**)(uint64_t, const __CFString *, const CFBooleanRef))(*(void *)v2 + 32))(v2, @"collectPII", *v3);
}

BOOL sub_1000A6388(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  char v10 = 0;
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(v1 + 48) + 48))(&cf);
  BOOL v2 = 0;
  long long v3 = (BOOL *)cf;
  if (cf) {
    uint64_t v4 = sub_100057DD8;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4) {
    BOOL v5 = cf == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v10, v3, v7);
      BOOL v2 = v10 != 0;
    }
    else
    {
      BOOL v2 = 0;
    }
  }
  sub_10001570C(&cf);
  return v2;
}

void sub_1000A645C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_1000A6470(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000A64AC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000A64E8(uint64_t a1)
{
  uint64_t v1 = *(unsigned char ***)(a1 + 40);
  uint64_t v2 = *((void *)*v1 + 6);
  if (*v1[1] == 1) {
    long long v3 = &kCFBooleanTrue;
  }
  else {
    long long v3 = &kCFBooleanFalse;
  }
  return (*(uint64_t (**)(uint64_t, const __CFString *, const CFBooleanRef))(*(void *)v2 + 32))(v2, @"shimAllowed", *v3);
}

uint64_t sub_1000A6540(uint64_t a1)
{
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(**(void **)(a1 + 40) + 48) + 48))(&cf);
  uint64_t v1 = (uint64_t)cf;
  if (cf) {
    uint64_t v2 = sub_100057DD8;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2)
  {
    unsigned __int8 v6 = 0;
    if (cf)
    {
      CFTypeID v3 = CFGetTypeID(cf);
      if (v3 == CFBooleanGetTypeID())
      {
        ctu::cf::assign((ctu::cf *)&v6, (BOOL *)v1, v4);
        uint64_t v1 = v6;
      }
      else
      {
        uint64_t v1 = 0;
      }
    }
  }
  else
  {
    uint64_t v1 = sub_10006F8E4();
  }
  sub_10001570C(&cf);
  return v1;
}

void sub_1000A6610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001570C((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A6628(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000A6664(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

BOOL sub_1000A66A0(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  char v10 = 0;
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(v1 + 48) + 48))(&cf);
  BOOL v2 = 0;
  CFTypeID v3 = (BOOL *)cf;
  if (cf) {
    CFBooleanRef v4 = sub_100057DD8;
  }
  else {
    CFBooleanRef v4 = 0;
  }
  if (v4) {
    BOOL v5 = cf == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v10, v3, v7);
      BOOL v2 = v10 != 0;
    }
    else
    {
      BOOL v2 = 0;
    }
  }
  sub_10001570C(&cf);
  return v2;
}

void sub_1000A6774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_1000A6788(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000A67C4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000A6800(uint64_t a1)
{
  return sub_1000A3674(**(void **)(a1 + 40), @"deviceconfigurationid", 0);
}

uint64_t sub_1000A6818(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000A6854(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000A6890(uint64_t a1)
{
  return sub_1000A3674(**(void **)(a1 + 40), @"investigationid", 0);
}

uint64_t sub_1000A68A8(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  uint64_t v2 = sub_1000A3674(v1, @"submissionid", 1);
  sub_1000A373C(v1, @"submissionid", v2 + 1);
  return v2;
}

void sub_1000A6904(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  int v2 = sub_1000A3674(v1, @"deviceconfigurationserialnumber", 1) + 1;

  sub_1000A373C(v1, @"deviceconfigurationserialnumber", v2);
}

uint64_t sub_1000A695C(uint64_t a1)
{
  return sub_1000A3674(**(void **)(a1 + 40), @"deviceconfigurationserialnumber", 1);
}

uint64_t sub_1000A6974(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000A69B0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t *sub_1000A69EC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  CFBooleanRef v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(char *)(v1 + 31) < 0)
  {
    sub_1000173FC(__dst, *(void **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(v1 + 8);
    uint64_t v10 = *(void *)(v1 + 24);
    *(_OWORD *)long long __dst = v3;
  }
  if (SHIBYTE(v10) < 0)
  {
    sub_1000173FC(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)__dst;
    uint64_t v14 = v10;
  }
  uint64_t v12 = 0;
  if (SHIBYTE(v14) < 0)
  {
    sub_1000173FC(&v15, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long v15 = *(_OWORD *)__p;
    uint64_t v16 = v14;
  }
  char v17 = 0;
  if (ctu::cf::convert_copy())
  {
    CFBooleanRef v4 = v12;
    uint64_t v12 = v17;
    uint64_t v18 = v4;
    sub_10005AC84(&v18);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
  BOOL v5 = v12;
  int v11 = v12;
  uint64_t v12 = 0;
  sub_10005AC84(&v12);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__dst[0]);
  }
  (*(void (**)(void, const __CFString *, const void *))(**(void **)(v2 + 48) + 32))(*(void *)(v2 + 48), @"build", v5);
  sub_10005AC84(&v11);
  sub_1000A6BE0(&v8);
  return sub_10000BA00((uint64_t *)&v7);
}

void sub_1000A6B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, int a19, const void *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  sub_1000A6BE0(&a10);
  sub_10000BA00(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000A6BE0(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void *sub_1000A6C38(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

const void **sub_1000A6C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(const void **__return_ptr))(**(void **)(**(void **)(a1 + 40) + 48) + 48))(&v8);
  sub_1000A6D74(&v7, &v8);
  sub_10001570C(&v8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v7) {
    long long v3 = sub_100069050;
  }
  else {
    long long v3 = 0;
  }
  if (v3)
  {
    uint64_t v8 = 0;
    long long v9 = 0uLL;
    ctu::cf::assign();
    uint64_t v4 = v9;
    uint64_t v5 = *(void *)((char *)&v9 + 7);
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v4;
    *(void *)(a2 + 15) = v5;
    *(unsigned char *)(a2 + 23) = HIBYTE(v9);
  }
  return sub_10005AC84(&v7);
}

void sub_1000A6D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10005AC84((const void **)&a9);
  _Unwind_Resume(a1);
}

void *sub_1000A6D74(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 == CFStringGetTypeID()) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return sub_1000A6C38(a1, v5);
}

__n128 sub_1000A6DD8(uint64_t a1)
{
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 40) + 16))(&v4);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  __n128 result = v4;
  *(void *)(v2 + 16) = v5;
  *(__n128 *)uint64_t v2 = result;
  return result;
}

__n128 sub_1000A6E3C(uint64_t a1)
{
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 40) + 16))(&v4);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  __n128 result = v4;
  *(void *)(v2 + 16) = v5;
  *(__n128 *)uint64_t v2 = result;
  return result;
}

void sub_1000A6EA0(uint64_t a1)
{
}

uint64_t sub_1000A6EB8(uint64_t a1)
{
  return sub_1000A3674(**(void **)(a1 + 40), @"anonymous", 1);
}

void sub_1000A6ED0(uint64_t a1)
{
}

uint64_t sub_1000A6EE8(uint64_t a1)
{
  return sub_1000A3674(**(void **)(a1 + 40), @"publicationtimers", 0);
}

const void **sub_1000A6F00(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  (*(void (**)(void **__return_ptr))(**(void **)(*v1 + 48) + 48))(values);
  sub_1000A7168(&theArray, (CFTypeRef *)values);
  sub_10001570C((const void **)values);
  CFArrayRef v3 = theArray;
  if (theArray) {
    __n128 v4 = sub_1000A7160;
  }
  else {
    __n128 v4 = 0;
  }
  if (!v4)
  {
    CFArrayRef v5 = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);
    CFArrayRef v6 = theArray;
    CFArrayRef theArray = v5;
    values[0] = v6;
    sub_1000A7204((const void **)values);
    CFArrayRef v3 = theArray;
  }
  CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, v3);
  uint64_t valuePtr = *(void *)v1[1];
  CFNumberRef v11 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, (const void *)v1[2]);
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, (const void *)v1[3]);
  values[0] = v11;
  values[1] = v10;
  values[2] = v9;
  CFArrayRef v8 = CFArrayCreate(0, (const void **)values, 3, &kCFTypeArrayCallBacks);
  CFArrayAppendValue(MutableCopy, v8);
  (*(void (**)(void, const __CFString *, CFMutableArrayRef))(**(void **)(v2 + 48) + 32))(*(void *)(v2 + 48), @"timers", MutableCopy);
  sub_1000A7204((const void **)&v8);
  sub_1000541F8((const void **)&v9);
  sub_1000541F8((const void **)&v10);
  sub_1000541F8((const void **)&v11);
  sub_1000A7238((const void **)&MutableCopy);
  return sub_1000A7204((const void **)&theArray);
}

void sub_1000A70E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1000A7204((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A7160(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_1000A7168(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 == CFArrayGetTypeID()) {
      CFArrayRef v5 = v3;
    }
    else {
      CFArrayRef v5 = 0;
    }
  }
  else
  {
    CFArrayRef v5 = 0;
  }

  return sub_1000A71CC(a1, v5);
}

void *sub_1000A71CC(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

const void **sub_1000A7204(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_1000A7238(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1000A726C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  CFArrayRef v2 = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);
  (*(void (**)(void, const __CFString *, CFArrayRef))(**(void **)(v1 + 48) + 32))(*(void *)(v1 + 48), @"timers", v2);

  CFRelease(v2);
}

void sub_1000A72F4()
{
}

void sub_1000A767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1000A7204((const void **)va);
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    sub_10000B678(v12);
  }
  _Unwind_Resume(a1);
}

void sub_1000A7710(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000A7780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_1000A7828((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A77A4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000A77DC(uint64_t a1)
{
}

uint64_t sub_1000A77E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1000A7828(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CFArrayRef v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_1000A7884(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  CFTypeID v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    sub_10000B678(v4);
  }
  if (*((void *)&v5 + 1)) {
    sub_10000B678(*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_1000A78EC(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  CFTypeID v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    sub_10000B678(v4);
  }
  if (*((void *)&v5 + 1)) {
    sub_10000B678(*((std::__shared_weak_count **)&v5 + 1));
  }
}

const void **sub_1000A7954(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 8);
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberLongLongType, *(const void **)v1);
  (*(void (**)(void, const __CFString *, CFNumberRef))(**(void **)(v2 + 48) + 32))(*(void *)(v2 + 48), @"lastboottime", v4);
  return sub_1000541F8((const void **)&v4);
}

void sub_1000A79CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000541F8((const void **)va);
  _Unwind_Resume(a1);
}

const void *sub_1000A79E0(uint64_t a1)
{
  (*(void (**)(const void **__return_ptr))(**(void **)(**(void **)(a1 + 40) + 48) + 48))(&v4);
  sub_10005422C(&number, &v4);
  sub_10001570C(&v4);
  if (number) {
    uint64_t v1 = sub_100053394;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1)
  {
    CFNumberRef v4 = 0;
    CFNumberGetValue(number, kCFNumberLongLongType, &v4);
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v2 = 0;
  }
  sub_1000541F8((const void **)&number);
  return v2;
}

void sub_1000A7A9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000541F8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A7AC0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000A7AFC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000A7B38(uint64_t a1)
{
  return sub_1000A3674(**(void **)(a1 + 40), @"conversionMask", 0);
}

void *sub_1000A7B50(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 == CFDictionaryGetTypeID()) {
      long long v5 = v3;
    }
    else {
      long long v5 = 0;
    }
  }
  else
  {
    long long v5 = 0;
  }

  return sub_1000A6174(a1, v5);
}

void *sub_1000A7BB4(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 == CFDictionaryGetTypeID()) {
      long long v5 = v3;
    }
    else {
      long long v5 = 0;
    }
  }
  else
  {
    long long v5 = 0;
  }

  return sub_1000A7C18(a1, v5);
}

void *sub_1000A7C18(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void sub_1000A7C50(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  CFTypeRef v3 = *(char ***)(a1 + 40);
  unint64_t v4 = **v3;
  if (v4 >= 4)
  {
    xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v15 = v14;
    if (v14)
    {
      *a2 = v14;
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      *a2 = v15;
      if (!v15)
      {
        xpc_object_t v16 = xpc_null_create();
        xpc_object_t v15 = 0;
        goto LABEL_28;
      }
    }
    if (xpc_get_type(v15) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v15);
LABEL_29:
      xpc_release(v15);
      return;
    }
    xpc_object_t v16 = xpc_null_create();
LABEL_28:
    *a2 = v16;
    goto LABEL_29;
  }
  long long v5 = v3[1];
  CFArrayRef v6 = off_1001BA398[v4];
  sub_1000A7BB4(&theDict, (CFTypeRef *)v5 + 8);
  CFDictionaryRef v7 = theDict;
  if (theDict) {
    CFArrayRef v8 = sub_100078BE8;
  }
  else {
    CFArrayRef v8 = 0;
  }
  if (!v8)
  {
    (*(void (**)(const void **__return_ptr))(**((void **)v5 + 6) + 48))(&v23);
    sub_1000A7BB4(&object, &v23);
    CFNumberRef v9 = theDict;
    CFDictionaryRef theDict = (CFDictionaryRef)object;
    char v26 = v9;
    xpc_object_t object = 0;
    sub_100078794((const void **)&v26);
    sub_100078794((const void **)&object);
    sub_10001570C(&v23);
    CFDictionaryRef v7 = theDict;
    if (!(theDict ? sub_100078BE8 : 0))
    {
      xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v20 = v19;
      if (v19)
      {
        *a2 = v19;
      }
      else
      {
        xpc_object_t v20 = xpc_null_create();
        *a2 = v20;
        if (!v20)
        {
          xpc_object_t v22 = xpc_null_create();
          xpc_object_t v20 = 0;
          goto LABEL_47;
        }
      }
      if (xpc_get_type(v20) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_retain(v20);
LABEL_48:
        xpc_release(v20);
        goto LABEL_44;
      }
      xpc_object_t v22 = xpc_null_create();
LABEL_47:
      *a2 = v22;
      goto LABEL_48;
    }
  }
  xpc_object_t object = (xpc_object_t)CFDictionaryGetValue(v7, v6);
  sub_1000A7BB4(&v26, (CFTypeRef *)&object);
  if (v26) {
    uint64_t v12 = sub_100078BE8;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v12)
  {
    ctu::cf_to_xpc((uint64_t *)&object, v26, v11);
    xpc_object_t v13 = object;
    *a2 = object;
    if (v13 && xpc_get_type(v13) == (xpc_type_t)&_xpc_type_dictionary) {
      xpc_retain(v13);
    }
    else {
      *a2 = xpc_null_create();
    }
    xpc_release(object);
    goto LABEL_43;
  }
  xpc_object_t v17 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v18 = v17;
  if (v17)
  {
    *a2 = v17;
  }
  else
  {
    xpc_object_t v18 = xpc_null_create();
    *a2 = v18;
    if (!v18)
    {
      xpc_object_t v21 = xpc_null_create();
      xpc_object_t v18 = 0;
      goto LABEL_41;
    }
  }
  if (xpc_get_type(v18) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v21 = xpc_null_create();
LABEL_41:
    *a2 = v21;
    goto LABEL_42;
  }
  xpc_retain(v18);
LABEL_42:
  xpc_release(v18);
LABEL_43:
  sub_100078794((const void **)&v26);
LABEL_44:
  sub_100078794((const void **)&theDict);
}

void sub_1000A7F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, const void *a11)
{
}

void sub_1000A7FB4(uint64_t a1)
{
  (*(void (**)(xpc_object_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&object);
  uint64_t v2 = *(void ***)(a1 + 32);
  xpc_object_t v3 = object;
  xpc_object_t object = xpc_null_create();
  unint64_t v4 = *v2;
  *uint64_t v2 = v3;
  xpc_release(v4);
  xpc_release(object);
}

void sub_1000A8024(uint64_t a1)
{
  (*(void (**)(xpc_object_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&object);
  uint64_t v2 = *(void ***)(a1 + 32);
  xpc_object_t v3 = object;
  xpc_object_t object = xpc_null_create();
  unint64_t v4 = *v2;
  *uint64_t v2 = v3;
  xpc_release(v4);
  xpc_release(object);
}

void sub_1000A8094(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  unint64_t v4 = *(const void **)(v2 + 64);
  *(void *)(v2 + 64) = Mutable;
  xpc_object_t v13 = v4;
  sub_1000A6140(&v13);
  long long v5 = *(void **)(v1[1] + 16);
  if (v5)
  {
    while (1)
    {
      sub_1000A8254((uint64_t)&v13, (uint64_t)(v5 + 2));
      if ((unint64_t)(char)v13 > 3)
      {
        int v8 = 1;
      }
      else
      {
        CFArrayRef v6 = off_1001BA398[(char)v13];
        xpc_object_t v10 = object;
        if (object) {
          xpc_retain(object);
        }
        else {
          xpc_object_t v10 = xpc_null_create();
        }
        xpc::bridge((uint64_t *)&v11, (xpc *)&v10, v7);
        sub_1000A7BB4(&value, &v11);
        sub_10001570C(&v11);
        xpc_release(v10);
        if (value ? sub_100078BE8 : 0)
        {
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v2 + 64), v6, value);
          int v8 = 0;
        }
        else
        {
          int v8 = 3;
        }
        sub_100078794((const void **)&value);
      }
      xpc_release(object);
      if (v8 != 3)
      {
        if (v8) {
          break;
        }
      }
      long long v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_17;
      }
    }
  }
  else
  {
LABEL_17:
    (*(void (**)(void, const __CFString *, void))(**(void **)(v2 + 48) + 32))(*(void *)(v2 + 48), @"fileconfig", *(void *)(v2 + 64));
  }
}

void sub_1000A8204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, char a11, int a12, const void *a13, uint64_t a14, xpc_object_t object)
{
}

uint64_t sub_1000A8254(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  xpc_object_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    *(void *)(a1 + 8) = xpc_null_create();
  }
  return a1;
}

unint64_t sub_1000A82A0(uint64_t a1)
{
  return sub_1000A48F0(**(void **)(a1 + 40), **(unsigned __int8 **)(*(void *)(a1 + 40) + 8));
}

uint64_t sub_1000A82B0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  xpc_object_t v3 = *(uint64_t **)(a1 + 32);
  *xpc_object_t v3 = result;
  v3[1] = v4;
  return result;
}

uint64_t sub_1000A82EC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  xpc_object_t v3 = *(uint64_t **)(a1 + 32);
  *xpc_object_t v3 = result;
  v3[1] = v4;
  return result;
}

uint64_t sub_1000A8328(uint64_t a1)
{
  return sub_1000A4C34(**(void **)(a1 + 40), **(unsigned __int8 **)(*(void *)(a1 + 40) + 8));
}

void *sub_1000A8338(void *a1, CFTypeRef *a2)
{
  CFTypeRef v4 = *a2;
  if (*a2 && (CFTypeID v5 = CFGetTypeID(*a2), v5 == CFDictionaryGetTypeID()))
  {
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
    if (*a2) {
      CFRelease(*a2);
    }
  }
  return a1;
}

uint64_t sub_1000A83A4(uint64_t a1)
{
  return sub_1000A4DF0(**(void **)(a1 + 40), **(unsigned __int8 **)(*(void *)(a1 + 40) + 8), 0, **(int **)(*(void *)(a1 + 40) + 16));
}

void sub_1000A83C0(uint64_t a1)
{
}

void sub_1000A83D8(uint64_t a1, unsigned int (***a2)(void), uint64_t a3)
{
  if ((**a2)(a2))
  {
    CFArrayRef v6 = *(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32);
    v6(a1, a3, 0);
  }
  else
  {
    sub_1000E83B8((uint64_t)a2, &object);
    xpc_object_t v8 = object;
    if (object) {
      xpc_retain(object);
    }
    else {
      xpc_object_t v8 = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&v9, (xpc *)&v8, v7);
    sub_1000A7BB4(&v10, &v9);
    sub_10001570C(&v9);
    xpc_release(v8);
    (*(void (**)(uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a3, v10);
    sub_100078794(&v10);
    xpc_release(object);
  }
}

void sub_1000A8520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, char a10, int a11, const void *a12, xpc_object_t object)
{
}

const void **sub_1000A856C@<X0>(uint64_t a1@<X0>, std::__shared_weak_count **a2@<X8>)
{
  return sub_1000A8584(*(void *)(**(void **)(a1 + 40) + 48), a2);
}

const void **sub_1000A8584@<X0>(uint64_t a1@<X0>, std::__shared_weak_count **a2@<X8>)
{
  (*(void (**)(xpc_object_t *__return_ptr))(*(void *)a1 + 48))(&v7);
  sub_1000A7BB4(&v8, (CFTypeRef *)&v7);
  sub_10001570C((const void **)&v7);
  ctu::cf_to_xpc((uint64_t *)&object, v8, v3);
  xpc_object_t v4 = object;
  xpc_object_t v7 = object;
  if (object && xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_release(object);
  sub_1000E85E4(&v7, a2);
  xpc_release(v7);
  return sub_100078794((const void **)&v8);
}

void sub_1000A865C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, const void *a12)
{
}

uint64_t sub_1000A869C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v6);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = v6;
  uint64_t v6 = 0;
  uint64_t v4 = *v2;
  *uint64_t v2 = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  return result;
}

uint64_t sub_1000A8748(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v6);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = v6;
  uint64_t v6 = 0;
  uint64_t v4 = *v2;
  *uint64_t v2 = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  return result;
}

void sub_1000A87F4(uint64_t a1@<X0>, std::__shared_weak_count **a2@<X8>)
{
  uint64_t v3 = **(void **)(a1 + 40);
  sub_1000A88F8(*(void *)(v3 + 48), __p);
  if (__p[0] == __p[1])
  {
    sub_1000A88F8(*(void *)(v3 + 48), &v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)long long __p = v4;
    uint64_t v7 = v5;
  }
  sub_1000A3674(v3, @"investigationid", 0);
  sub_1000A3674(v3, @"tasked_time", 0);
  sub_1000E7CDC(__p[0], LODWORD(__p[1]) - LODWORD(__p[0]), a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1000A88D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_1000A88F8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(const void **__return_ptr))(*(void *)a1 + 48))(&v4);
  sub_100058C58(&v5, &v4);
  sub_10001570C(&v4);
  if (v5) {
    uint64_t v2 = sub_100057DD0;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2) {
    ctu::cf::assign();
  }
  return sub_100058818(&v5);
}

void sub_1000A8994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100058818((const void **)va);
  long long v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_1000A89D0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = v1[1];
  int v3 = sub_10006BFF4(*v1);
  int v4 = sub_10000B7EC(*v1);
  sub_1000E82B0(*v1, (unint64_t *)&bytes);
  uint64_t v5 = *(NSObject **)(v2 + 32);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v3;
    __int16 v19 = 1024;
    int v20 = v4;
    __int16 v21 = 2048;
    int64_t v22 = v17 - bytes;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "persist:#I Saving device config DCID=%d, IID=%d, with %zd bytes", buf, 0x18u);
  }
  sub_1000A373C(v2, @"deviceconfigurationid", v3);
  sub_1000A373C(v2, @"investigationid", v4);
  int v6 = sub_10001E6C4(*v1);
  sub_1000A373C(v2, @"tasked_time", v6);
  CFDataRef v15 = 0;
  CFDataRef v7 = CFDataCreate(kCFAllocatorDefault, bytes, (v17 - bytes));
  if (v7)
  {
    CFDataRef v8 = v15;
    CFDataRef v15 = v7;
    *(void *)std::string buf = v8;
    sub_100058818((const void **)buf);
  }
  if (v15) {
    CFNumberRef v9 = sub_100057DD0;
  }
  else {
    CFNumberRef v9 = 0;
  }
  if (v9) {
    (*(void (**)(void, const __CFString *))(**(void **)(v2 + 48) + 32))(*(void *)(v2 + 48), @"deviceConfig");
  }
  sub_1000A296C(v2);
  sub_1000A5CAC(v2, *v1);
  sub_1000A29F0(v2);
  if (((**(uint64_t (***)(void))*v1)() & 1) == 0)
  {
    uint64_t v10 = sub_1000E82A8(*v1);
    uint64_t v11 = *(int *)(v10 + 16);
    if (v11)
    {
      uint64_t v12 = *(wireless_diagnostics::google::protobuf::MessageLite ***)(v10 + 8);
      uint64_t v13 = 8 * v11;
      do
      {
        int v14 = *((_DWORD *)*v12 + 14);
        wireless_diagnostics::google::protobuf::MessageLite::SerializeAsString((uint64_t *)buf, *v12);
        sub_1000A5398(v2, v14, (uint64_t)buf);
        if (SHIBYTE(v22) < 0) {
          operator delete(*(void **)buf);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  sub_100058818((const void **)&v15);
  if (bytes)
  {
    xpc_object_t v17 = bytes;
    operator delete(bytes);
  }
}

void sub_1000A8C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_1000A8C94(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    int v6 = result;
    uint64_t result = sub_10001495C(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000A8CF4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A8D10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001BA290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000A8D30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001BA290;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000A8D84(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  std::to_string(&v13, ***(_DWORD ***)(a1 + 40));
  int v4 = std::string::insert(&v13, 0, "SELECT name, count, sum, sum2, min, max, resetTime, (sumMax>9223372036854775807), (sum2>9223372036854775807) FROM aggregations WHERE metric=");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v21 = v4->__r_.__value_.__r.__words[2];
  long long v20 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  v13.__r_.__value_.__r.__words[0] = 0;
  v13.__r_.__value_.__l.__size_ = (std::string::size_type)&v13;
  v13.__r_.__value_.__r.__words[2] = 0x7802000000;
  int v14 = sub_1000A8F90;
  CFDataRef v15 = sub_1000A8FC4;
  *(_OWORD *)long long __p = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  memset(v19, 0, sizeof(v19));
  if (v21 >= 0) {
    int v6 = (char *)&v20;
  }
  else {
    int v6 = (char *)v20;
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 0x40000000;
  v12[2] = sub_1000A8FD8;
  void v12[3] = &unk_1001BA2F8;
  void v12[4] = &v13;
  sub_100002B78(v3, v6, (uint64_t)v12, 0, 0, 0);
  std::string::size_type size = v13.__r_.__value_.__l.__size_;
  if (*(char *)(v13.__r_.__value_.__l.__size_ + 63) < 0)
  {
    sub_1000173FC((unsigned char *)a2, *(void **)(v13.__r_.__value_.__l.__size_ + 40), *(void *)(v13.__r_.__value_.__l.__size_ + 48));
  }
  else
  {
    long long v8 = *(_OWORD *)(v13.__r_.__value_.__l.__size_ + 40);
    *(void *)(a2 + 16) = *(void *)(v13.__r_.__value_.__l.__size_ + 56);
    *(_OWORD *)a2 = v8;
  }
  long long v9 = *(_OWORD *)(size + 64);
  long long v10 = *(_OWORD *)(size + 80);
  long long v11 = *(_OWORD *)(size + 96);
  *(_WORD *)(a2 + 72) = *(_WORD *)(size + 112);
  *(_OWORD *)(a2 + 56) = v11;
  *(_OWORD *)(a2 + 40) = v10;
  *(_OWORD *)(a2 + 24) = v9;
  _Block_object_dispose(&v13, 8);
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
}

void sub_1000A8F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1000A8F90(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v2;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  __n128 result = *(__n128 *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = v5;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

void sub_1000A8FC4(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

uint64_t sub_1000A8FD8(uint64_t a1, sqlite3_stmt *a2)
{
  long long v4 = sqlite3_column_text(a2, 0);
  if (v4) {
    std::string::assign((std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (const std::string::value_type *)v4);
  }
  long long v5 = (wis *)sqlite3_column_int64(a2, 1);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 64) = v5;
  uint64_t WISTimestamp = wis::getWISTimestamp(v5);
  uint64_t result = sqlite3_column_int64(a2, 6);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 104) = WISTimestamp - result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 64))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 72) = sqlite3_column_int64(a2, 2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 80) = sqlite3_column_int64(a2, 3);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 88) = sqlite3_column_int64(a2, 4);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 96) = sqlite3_column_int64(a2, 5);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 112) = sqlite3_column_int(a2, 7) != 0;
    uint64_t result = sqlite3_column_int(a2, 8);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 113) = result != 0;
  }
  return result;
}

__n128 sub_1000A9114(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v7);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  long long v3 = v7;
  *(void *)(v2 + 16) = v8;
  *(_OWORD *)uint64_t v2 = v3;
  __n128 result = v9;
  long long v5 = v10;
  long long v6 = v11;
  *(_WORD *)(v2 + 72) = v12;
  *(_OWORD *)(v2 + 56) = v6;
  *(_OWORD *)(v2 + 40) = v5;
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1000A9198(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v7);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  long long v3 = v7;
  *(void *)(v2 + 16) = v8;
  *(_OWORD *)uint64_t v2 = v3;
  __n128 result = v9;
  long long v5 = v10;
  long long v6 = v11;
  *(_WORD *)(v2 + 72) = v12;
  *(_OWORD *)(v2 + 56) = v6;
  *(_OWORD *)(v2 + 40) = v5;
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_1000A921C(uint64_t **a1)
{
  long long v3 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  void v4[2] = sub_1000A9308;
  uint64_t v4[3] = &unk_1001BA358;
  v4[4] = v1[2];
  int v5 = *((_DWORD *)v1 + 2);
  sub_100002B78(v2, "UPDATE aggregations SET count=count+1, sum=sum+?1, sum2=sum2+(?1*?1), min=MIN(COALESCE(min,?1),?1), max=MAX(COALESCE(max,?1),?1), sumMax=MAX(sumMax,sum+?1) WHERE metric=?2", 0, (uint64_t)v4, 0, 0);
  operator delete();
}

void sub_1000A92DC()
{
}

uint64_t sub_1000A9308(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, *(void *)(a1 + 32));
  sqlite3_int64 v4 = *(unsigned int *)(a1 + 40);

  return sqlite3_bind_int64(a2, 2, v4);
}

void sub_1000A9358(uint64_t **a1)
{
  long long v3 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  void v4[2] = sub_1000A943C;
  uint64_t v4[3] = &unk_1001BA378;
  int v5 = *((_DWORD *)v1 + 2);
  sub_100002B78(v2, "UPDATE aggregations SET count=0, sum=0, sum2=0, min=NULL, max=NULL, sumMax=NULL, resetTime=?1 WHERE metric=?2", 0, (uint64_t)v4, 0, 0);
  operator delete();
}

void sub_1000A9410()
{
}

uint64_t sub_1000A943C(unsigned int *a1, sqlite3_stmt *a2)
{
  sqlite3_int64 WISTimestamp = wis::getWISTimestamp((wis *)a1);
  sqlite3_bind_int64(a2, 1, WISTimestamp);
  sqlite3_int64 v5 = a1[8];

  return sqlite3_bind_int64(a2, 2, v5);
}

void sub_1000A9490()
{
}

void sub_1000A9710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  pthread_mutex_unlock(&stru_1001D6968);
  if (a14) {
    sub_10000B678(a14);
  }
  xpc_object_t v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    sub_10000B678(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A97B0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000A97CC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_1000A97DC(void *a1, const char *a2, dispatch_qos_class_t a3, const char *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.wis.wirelessinsightsd", a4);
  return a1;
}

void sub_1000A983C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

void sub_1000A9864(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10000BA54(&v5, a1);
  sqlite3_int64 v4 = (NSObject **)(v5 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1174405120;
  _DWORD v7[2] = sub_1000A9E54;
  void v7[3] = &unk_1001BA520;
  void v7[5] = v5;
  uint64_t v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void v7[4] = &stru_1001BA408;
  sub_100123D98(a3, v4, (uint64_t)v7);
  if (v8) {
    sub_10000B678(v8);
  }
  if (v6) {
    sub_10000B678(v6);
  }
}

void sub_1000A992C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_10000B678(a18);
  }
  if (a11) {
    sub_10000B678(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A9954(capabilities::abs *a1, uint64_t *a2)
{
  if (*a2)
  {
    if (capabilities::abs::supportsBasebandInsights(a1))
    {
      pthread_mutex_lock(&stru_1001D6B78);
      sqlite3_int64 v4 = (void *)xmmword_1001D6BB8;
      if (!(void)xmmword_1001D6BB8) {
        sub_1000E9610();
      }
      if (*((void *)&xmmword_1001D6BB8 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6BB8 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&stru_1001D6B78);
      if (!v4)
      {
        uint64_t v5 = *((void *)a1 + 4);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          sub_10014801C(v5);
        }
      }
      long long v6 = *((void *)a1 + 4);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#I Sending Insights to Baseband...", buf, 2u);
      }
      uint64_t v7 = *a2;
      *a2 = 0;
      uint64_t v10 = v7;
      sub_1000E9F34(v4, &v10);
    }
    __n128 v9 = *((void *)a1 + 4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#I Baseband Insights are not enabled", buf, 2u);
    }
  }
  else
  {
    uint64_t v8 = *((void *)a1 + 4);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100147FD8(v8);
    }
  }
}

void sub_1000A9B20(_Unwind_Exception *a1)
{
}

void sub_1000A9B60(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000A9BD8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_1000A9CB0);
  __cxa_rethrow();
}

void sub_1000A9C00(_Unwind_Exception *a1)
{
}

void sub_1000A9C18(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000A9C50(uint64_t a1)
{
}

uint64_t sub_1000A9C6C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_1000A9CB0(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(result + 4));
    sub_100029804(v1);
    operator delete();
  }
  return result;
}

uint64_t sub_1000A9D08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000A9D18(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000A9D34(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_1000A9D44(void *a1)
{
  *a1 = off_1001BA4D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_1000A9D90(void *a1)
{
  *a1 = off_1001BA4D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10000B678(v1);
  }

  operator delete();
}

void *sub_1000A9DFC@<X0>(void *a1@<X8>)
{
  return sub_100018888(a1, "InsightsManager");
}

unsigned char *sub_1000A9E0C@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 0;
  __n128 result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_1000A9E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000A9E54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000A9E64(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000A9E80(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

uint64_t sub_1000A9E90()
{
  if ((byte_1001D69B8 & 1) == 0)
  {
    byte_1001D69B8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100029800, &stru_1001D6968, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000A9ECC()
{
  if ((byte_1001D6BC8 & 1) == 0)
  {
    byte_1001D6BC8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E70, &stru_1001D6B78, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1000A9F08()
{
  sub_1000A9F98((uint64_t)__p);
  sub_10002FD58((uint64_t *)__p);
}

void sub_1000A9F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a9) {
    sub_100148060(a9);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A9F98(uint64_t a1@<X8>)
{
  sub_100086714(__p);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(void *)(a1 + 16) = v3;
  __p[1] = 0;
  uint64_t v3 = 0;
  __p[0] = 0;
  ctu::path_join_impl();
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000AA014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  sub_100141970((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000AA038()
{
  sub_1000A9F98((uint64_t)&__p);
  sub_10003009C();
}

void sub_1000AA084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AA0A0(int a1@<W0>, uint64_t a2@<X8>)
{
  sub_100086618(a1, __p);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v4;
  __p[1] = 0;
  uint64_t v4 = 0;
  __p[0] = 0;
  ctu::path_join_impl();
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000AA11C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  sub_100141970((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA140(unsigned int a1)
{
  sub_100002260((uint64_t)v9);
  uint64_t v2 = sub_100004D64(v9, (uint64_t)"wirelessinsightsd-", 18);
  if (a1 > 3) {
    uint64_t v3 = "<unknown>";
  }
  else {
    uint64_t v3 = off_1001BA568[(char)a1];
  }
  size_t v4 = strlen(v3);
  uint64_t v5 = sub_100004D64(v2, (uint64_t)v3, v4);
  char v11 = 45;
  sub_100004D64(v5, (uint64_t)&v11, 1);
  long long v6 = (void *)std::ostream::operator<<();
  sub_100004D64(v6, (uint64_t)"-fragment-", 10);
  uint64_t v7 = (void *)std::ostream::operator<<();
  sub_100004D64(v7, (uint64_t)".metriclog", 10);
  std::stringbuf::str();
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1000AA310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const char *sub_1000AA324(unsigned int a1)
{
  if (a1 > 3) {
    return "<unknown>";
  }
  else {
    return off_1001BA568[(char)a1];
  }
}

uint64_t sub_1000AA34C()
{
  sub_100030478(&v18);
  sub_100002260((uint64_t)v16);
  sub_100004D64(v16, (uint64_t)"wirelessinsightsd-", 18);
  CFStringRef v0 = (void *)std::ostream::operator<<();
  char v19 = 45;
  uint64_t v1 = sub_100004D64(v0, (uint64_t)&v19, 1);
  *(void *)((char *)v1 + *(void *)(*v1 - 24) + 24) = 2;
  char v15 = 48;
  sub_10004E874(v1, &v15);
  uint64_t v2 = (void *)std::ostream::operator<<();
  char v19 = 45;
  uint64_t v3 = sub_100004D64(v2, (uint64_t)&v19, 1);
  *(void *)((char *)v3 + *(void *)(*v3 - 24) + 24) = 2;
  char v14 = 48;
  sub_10004E874(v3, &v14);
  size_t v4 = (void *)std::ostream::operator<<();
  char v19 = 45;
  uint64_t v5 = sub_100004D64(v4, (uint64_t)&v19, 1);
  *(void *)((char *)v5 + *(void *)(*v5 - 24) + 24) = 2;
  char v13 = 48;
  sub_10004E874(v5, &v13);
  long long v6 = (void *)std::ostream::operator<<();
  *(void *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2;
  char v12 = 48;
  sub_10004E874(v6, &v12);
  uint64_t v7 = (void *)std::ostream::operator<<();
  *(void *)((char *)v7 + *(void *)(*v7 - 24) + 24) = 2;
  char v11 = 48;
  sub_10004E874(v7, &v11);
  uint64_t v8 = (void *)std::ostream::operator<<();
  char v19 = 45;
  sub_100004D64(v8, (uint64_t)&v19, 1);
  __n128 v9 = (void *)std::ostream::operator<<();
  sub_100004D64(v9, (uint64_t)".consolidated.metriclog", 23);
  std::stringbuf::str();
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1000AA624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10004E93C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000AA650(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1000AA658(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[3] = 0;
  a1[2] = a1 + 3;
  a1[4] = 0;
  a1[6] = 0;
  a1[5] = a1 + 6;
  a1[7] = 0;
  a1[9] = 0;
  a1[8] = a1 + 9;
  a1[12] = 0;
  a1[11] = a1 + 12;
  a1[10] = 0;
  a1[13] = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 14), "com.apple.wis.wirelessinsightsd", "cond");
  return a1;
}

void sub_1000AA710(_Unwind_Exception *a1)
{
  sub_10004B7F8(v4, *(void **)(v1 + 96));
  sub_10004B7F8(v5, *(void **)(v1 + 72));
  sub_10004B7F8(v3, *(void **)(v1 + 48));
  sub_1000AB2C8(v2, *(void **)(v1 + 24));
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 8);
  if (v7) {
    sub_10000B678(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA758(uint64_t a1)
{
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 112));
  sub_10004B7F8(a1 + 88, *(void **)(a1 + 96));
  sub_10004B7F8(a1 + 64, *(void **)(a1 + 72));
  sub_10004B7F8(a1 + 40, *(void **)(a1 + 48));
  sub_1000AB2C8(a1 + 16, *(void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_1000AA7C0()
{
}

void sub_1000AA8D4(_Unwind_Exception *a1)
{
  sub_1000AB324(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1000AA90C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int *)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a2 + 8);
    uint64_t v28 = &v3[v2];
    uint64_t v4 = (uint64_t **)(a1 + 16);
    uint64_t v31 = (uint64_t **)(a1 + 88);
    uint64_t v32 = (uint64_t **)(a1 + 40);
    do
    {
      char v29 = v3;
      uint64_t v5 = *v3;
      uint64_t v6 = *(int *)(*v3 + 16);
      if (v6)
      {
        uint64_t v7 = *(uint64_t **)(v5 + 8);
        uint64_t v8 = &v7[v6];
        uint64_t v9 = *(unsigned int *)(v5 + 56);
        uint64_t v30 = v8;
        do
        {
          uint64_t v10 = *v7;
          if (*(unsigned char *)(*v7 + 132))
          {
            unsigned int v39 = *(_DWORD *)(v10 + 8);
            uint64_t v12 = *(int *)(v10 + 48);
            if (v12)
            {
              char v13 = *(uint64_t **)(v10 + 40);
              char v14 = &v13[v12];
              do
              {
                uint64_t v15 = *v13;
                if (*(unsigned char *)(*v13 + 132))
                {
                  int v17 = *(_DWORD *)(v15 + 8);
                  uint64_t v18 = *(int *)(v15 + 56);
                  if (v18)
                  {
                    char v19 = *(_DWORD ***)(v15 + 48);
                    uint64_t v20 = 8 * v18;
                    do
                    {
                      int64_t v21 = *v19;
                      int64_t v22 = operator new(4uLL);
                      long long __p = v22;
                      *int64_t v22 = v17;
                      xpc_object_t v37 = v22 + 1;
                      uint64_t v38 = v22 + 1;
                      sub_1000AAC28(v21, (uint64_t)&__p, (uint64_t)buf);
                      if (v42)
                      {
                        unint64_t v34 = v9 | ((unint64_t)v39 << 32);
                        int v35 = v17;
                        sub_1000AB3F8(v4, (uint64_t)&v34, (uint64_t)buf);
                      }
                      sub_1000AB374(buf);
                      if (__p)
                      {
                        xpc_object_t v37 = __p;
                        operator delete(__p);
                      }
                      ++v19;
                      v20 -= 8;
                    }
                    while (v20);
                  }
                  *(void *)std::string buf = v9 | ((unint64_t)v39 << 32);
                  int v41 = v17;
                  LODWORD(__p) = *(_DWORD *)(v10 + 68);
                  sub_1000AB614(v32, (unsigned int *)buf, (uint64_t)buf, (int *)&__p);
                  *(_DWORD *)std::string buf = *(_DWORD *)(v10 + 68);
                  sub_1000AB748(v31, &v39, &v39, (int *)buf);
                }
                else
                {
                  xpc_object_t v16 = *(NSObject **)(a1 + 112);
                  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)std::string buf = 67109120;
                    *(_DWORD *)&uint8_t buf[4] = v39;
                    _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "cond:MetricProcessingMap: Got metric with no metric id in profile 0x%x", buf, 8u);
                  }
                }
                ++v13;
              }
              while (v13 != v14);
            }
            uint64_t v8 = v30;
          }
          else
          {
            char v11 = *(NSObject **)(a1 + 112);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "cond:#E MetricProcessingMap: Got profile with no profile id.", buf, 2u);
            }
          }
          ++v7;
        }
        while (v7 != v8);
      }
      uint64_t v3 = v29 + 1;
    }
    while (v29 + 1 != v28);
  }
  uint64_t v23 = *(int *)(a2 + 80);
  if (v23)
  {
    uint64_t v24 = *(void *)(a2 + 72);
    uint64_t v25 = 8 * v23;
    do
    {
      int v26 = *(_DWORD *)(*(void *)v24 + 12);
      *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)v24 + 8);
      LOBYTE(__p) = v26 == 1;
      sub_1000AB80C((uint64_t **)(a1 + 64), (unsigned int *)buf, buf, &__p);
      v24 += 8;
      v25 -= 8;
    }
    while (v25);
  }
}

void sub_1000AABF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000AAC28(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1 + 13;
  if (a1[13])
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2 + 16;
    while (1)
    {
      int v8 = v6[4];
      uint64_t v10 = *(_DWORD **)(a2 + 8);
      unint64_t v9 = *(void *)(a2 + 16);
      if ((unint64_t)v10 >= v9)
      {
        a1 = *(_DWORD **)a2;
        uint64_t v12 = ((uint64_t)v10 - *(void *)a2) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          sub_10002B5E0();
        }
        uint64_t v14 = v9 - (void)a1;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          xpc_object_t v16 = (char *)sub_10001E460(v7, v15);
          a1 = *(_DWORD **)a2;
          uint64_t v10 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          xpc_object_t v16 = 0;
        }
        int v17 = &v16[4 * v12];
        *(_DWORD *)int v17 = v8;
        uint64_t v11 = (uint64_t)(v17 + 4);
        while (v10 != a1)
        {
          int v18 = *--v10;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        *(void *)a2 = v17;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v16[4 * v15];
        if (a1) {
          operator delete(a1);
        }
      }
      else
      {
        _DWORD *v10 = v8;
        uint64_t v11 = (uint64_t)(v10 + 1);
      }
      *(void *)(a2 + 8) = v11;
      int v19 = *v4;
      if ((*v4 & 2) != 0)
      {
        uint64_t v20 = *((void *)v6 + 1);
        xpc_object_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        sub_10001E158(&v37, *(const void **)a2, v11, (v11 - *(void *)a2) >> 2);
        sub_1000D2F1C((char *)&v37, v20, a3);
        int64_t v21 = v37;
        if (!v37) {
          return;
        }
        uint64_t v38 = v37;
        goto LABEL_40;
      }
      if ((v19 & 4) != 0)
      {
        double v22 = *((double *)v6 + 3);
        int v35 = 0;
        uint64_t v36 = 0;
        unint64_t v34 = 0;
        sub_10001E158(&v34, *(const void **)a2, v11, (v11 - *(void *)a2) >> 2);
        sub_1000D3080((uint64_t)&v34, a3, v22);
        int64_t v21 = v34;
        if (!v34) {
          return;
        }
        int v35 = v34;
        goto LABEL_40;
      }
      if ((v19 & 8) != 0)
      {
        int v23 = v6[5];
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        sub_10001E158(&v31, *(const void **)a2, v11, (v11 - *(void *)a2) >> 2);
        sub_1000D2FCC((char *)&v31, v23, a3);
        int64_t v21 = v31;
        if (!v31) {
          return;
        }
        uint64_t v32 = v31;
        goto LABEL_40;
      }
      if ((v19 & 0x10) != 0)
      {
        char v24 = *((unsigned char *)v6 + 40);
        char v29 = 0;
        uint64_t v30 = 0;
        uint64_t v28 = 0;
        sub_10001E158(&v28, *(const void **)a2, v11, (v11 - *(void *)a2) >> 2);
        sub_1000D3130((char *)&v28, v24, a3);
        int64_t v21 = v28;
        if (!v28) {
          return;
        }
        char v29 = v28;
        goto LABEL_40;
      }
      if ((v19 & 0x20) == 0) {
        break;
      }
      uint64_t v6 = (_DWORD *)*((void *)v6 + 4);
      if (!v6)
      {
        a1 = (_DWORD *)awd::profile::ProcessingRule::default_instance((awd::profile::ProcessingRule *)a1);
        uint64_t v6 = (_DWORD *)*((void *)a1 + 4);
      }
      uint64_t v4 = v6 + 13;
      if ((v6[13] & 1) == 0) {
        goto LABEL_2;
      }
    }
    if ((v19 & 0x40) == 0) {
      goto LABEL_2;
    }
    long long __p = 0;
    int v26 = 0;
    uint64_t v27 = 0;
    sub_10001E158(&__p, *(const void **)a2, v11, (v11 - *(void *)a2) >> 2);
    sub_1000D31D8((uint64_t)&__p, v6[11], a3);
    int64_t v21 = __p;
    if (__p)
    {
      int v26 = __p;
LABEL_40:
      operator delete(v21);
    }
  }
  else
  {
LABEL_2:
    *(void *)(a3 + 24) = 0;
  }
}

void sub_1000AAF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p)
  {
    *double v22 = __p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AAF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (!a25) {
    JUMPOUT(0x1000AAF58);
  }
  JUMPOUT(0x1000AAF4CLL);
}

unint64_t sub_1000AAF70(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  wis::GetProtobufTag();
  uint64_t v6 = *a2;
  int v7 = 0;
  uint64_t v4 = sub_1000AB8D4(a1 + 40, (unsigned int *)&v6);
  if ((uint64_t *)(a1 + 48) == v4) {
    return 0;
  }
  else {
    return *((unsigned int *)v4 + 10) | (unint64_t)&_mh_execute_header;
  }
}

BOOL sub_1000AAFE8(uint64_t *a1, int *a2)
{
  wis::GetProtobufTag();
  *(void *)uint64_t v33 = *(void *)a2;
  LODWORD(v34) = 0;
  uint64_t v4 = sub_1000AB9C4((uint64_t)(a1 + 2), (unsigned int *)v33);
  uint64_t v6 = v5;
  if (v4 == v5)
  {
    uint64_t v20 = a1[14];
    BOOL result = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      int v21 = *a2;
      int v22 = a2[1];
      *(_DWORD *)uint64_t v33 = 67109632;
      *(_DWORD *)&v33[4] = v21;
      LOWORD(v34) = 1024;
      *(_DWORD *)((char *)&v34 + 2) = v22;
      HIWORD(v34) = 1024;
      LODWORD(v35) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "cond:#D MetricProcessingMap for cid 0x%x, profid 0x%x, metric 0x%x: no rules", v33, 0x14u);
      return 0;
    }
  }
  else
  {
    *(void *)uint64_t v33 = a2;
    uint64_t v34 = 0;
    int v7 = (std::__shared_weak_count *)a1[1];
    uint64_t v35 = *a1;
    uint64_t v36 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    int v37 = 0;
    do
    {
      uint64_t v10 = v4[9];
      if (!v10) {
        sub_100029F0C();
      }
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v10 + 48))(v10, v33);
      uint64_t v12 = (uint64_t *)v4[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v13 = (uint64_t *)v4[2];
          BOOL v14 = *v13 == (void)v4;
          uint64_t v4 = v13;
        }
        while (!v14);
      }
      v8 += v11;
      ++v9;
      uint64_t v4 = v13;
    }
    while (v13 != v6);
    unint64_t v15 = a1[14];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      int v16 = *a2;
      int v17 = a2[1];
      *(_DWORD *)std::string buf = 67110144;
      int v24 = v16;
      __int16 v25 = 1024;
      int v26 = v17;
      __int16 v27 = 1024;
      int v28 = 0;
      __int16 v29 = 2048;
      uint64_t v30 = v9;
      __int16 v31 = 2048;
      uint64_t v32 = v8;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "cond:#I MetricProcessingMap for cid 0x%x, profid 0x%x, metric 0x%x: evaluated %zd rules and %zd passed", buf, 0x28u);
    }
    if (v8) {
      sub_1000D2F04(v33);
    }
    if (v36) {
      sub_10000B678(v36);
    }
    uint64_t v18 = v34;
    uint64_t v34 = 0;
    if (v18) {
      sub_10006ED90((uint64_t)&v34, v18);
    }
    return v8 != 0;
  }
  return result;
}

void sub_1000AB260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000AB284((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AB284(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_10000B678(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    sub_10006ED90(a1 + 8, v3);
  }
  return a1;
}

void sub_1000AB2C8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000AB2C8(a1, *a2);
    sub_1000AB2C8(a1, a2[1]);
    sub_1000AB374(a2 + 6);
    operator delete(a2);
  }
}

uint64_t sub_1000AB324(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1000AA758(result);
    operator delete();
  }
  return result;
}

void *sub_1000AB374(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_1000AB3F8(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 1);
  int v7 = operator new(0x50uLL);
  v12[0] = (uint64_t *)v7;
  v12[1] = v6;
  *((_DWORD *)v7 + 10) = *(_DWORD *)(a2 + 8);
  *((void *)v7 + 4) = *(void *)a2;
  sub_1000AB53C((uint64_t)v7 + 48, a3);
  char v13 = 1;
  uint64_t v8 = (uint64_t **)sub_1000AB4C0((uint64_t)a1, &v11, (unsigned int *)v7 + 8);
  sub_10001716C(a1, v11, v8, v12[0]);
  uint64_t v9 = v12[0];
  v12[0] = 0;
  sub_1000AB5BC((uint64_t)v12, 0);
  return v9;
}

void sub_1000AB4A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000AB5BC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1000AB4C0(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    do
    {
      while (1)
      {
        uint64_t v3 = v4;
        unsigned int v8 = *((_DWORD *)v4 + 8);
        if (v6 >= v8)
        {
          if (v8 < v6) {
            break;
          }
          unsigned int v9 = *((_DWORD *)v4 + 9);
          if (v7 >= v9 && (v9 < v7 || a3[2] >= *((_DWORD *)v4 + 10))) {
            break;
          }
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v10 = v3;
        if (!*v3) {
          goto LABEL_13;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v10 = v3 + 1;
  }
  else
  {
    uint64_t v10 = v3;
  }
LABEL_13:
  *a2 = v3;
  return v10;
}

uint64_t sub_1000AB53C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_1000AB5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000AB374(v2 + 6);
    }
    operator delete(v2);
  }
}

char *sub_1000AB614(uint64_t **a1, unsigned int *a2, uint64_t a3, int *a4)
{
  unsigned int v7 = sub_1000AB6B0((uint64_t)a1, &v12, a2);
  unsigned int v8 = (char *)*v7;
  if (!*v7)
  {
    unsigned int v9 = (uint64_t **)v7;
    unsigned int v8 = (char *)operator new(0x30uLL);
    *(void *)(v8 + 28) = *(void *)a3;
    int v10 = *a4;
    *((_DWORD *)v8 + 9) = *(_DWORD *)(a3 + 8);
    *((_DWORD *)v8 + 10) = v10;
    sub_10001716C(a1, v12, v9, (uint64_t *)v8);
  }
  return v8;
}

uint64_t *sub_1000AB6B0(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    unsigned int v8 = a3[2];
    while (1)
    {
      while (1)
      {
        unsigned int v9 = v4;
        unsigned int v10 = *((_DWORD *)v4 + 7);
        if (v6 >= v10) {
          break;
        }
LABEL_4:
        uint64_t v4 = (uint64_t *)*v9;
        uint64_t result = v9;
        if (!*v9) {
          goto LABEL_17;
        }
      }
      if (v10 >= v6)
      {
        unsigned int v11 = *((_DWORD *)v9 + 8);
        if (v7 < v11 || v11 >= v7 && v8 < *((_DWORD *)v9 + 9)) {
          goto LABEL_4;
        }
        unsigned int v12 = *((_DWORD *)v9 + 8);
        if (v12 >= v7 && (v7 < v12 || *((_DWORD *)v9 + 9) >= v8)) {
          goto LABEL_17;
        }
      }
      uint64_t result = v9 + 1;
      uint64_t v4 = (uint64_t *)v9[1];
      if (!v4) {
        goto LABEL_17;
      }
    }
  }
  unsigned int v9 = result;
LABEL_17:
  *a2 = v9;
  return result;
}

uint64_t **sub_1000AB748(uint64_t **a1, unsigned int *a2, _DWORD *a3, int *a4)
{
  unsigned int v8 = a1 + 1;
  unsigned int v7 = a1[1];
  if (v7)
  {
    unsigned int v9 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v10 = (uint64_t **)v7;
        unsigned int v11 = *((_DWORD *)v7 + 7);
        if (v9 >= v11) {
          break;
        }
        unsigned int v7 = *v10;
        unsigned int v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      unsigned int v7 = v10[1];
      if (!v7)
      {
        unsigned int v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v10 = a1 + 1;
LABEL_10:
    unsigned int v12 = (uint64_t *)operator new(0x28uLL);
    int v13 = *a4;
    *((_DWORD *)v12 + 7) = *a3;
    *((_DWORD *)v12 + 8) = v13;
    sub_10001716C(a1, (uint64_t)v10, v8, v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t **sub_1000AB80C(uint64_t **a1, unsigned int *a2, _DWORD *a3, unsigned char *a4)
{
  unsigned int v8 = a1 + 1;
  unsigned int v7 = a1[1];
  if (v7)
  {
    unsigned int v9 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v10 = (uint64_t **)v7;
        unsigned int v11 = *((_DWORD *)v7 + 7);
        if (v9 >= v11) {
          break;
        }
        unsigned int v7 = *v10;
        unsigned int v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      unsigned int v7 = v10[1];
      if (!v7)
      {
        unsigned int v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v10 = a1 + 1;
LABEL_10:
    unsigned int v12 = operator new(0x28uLL);
    v12[7] = *a3;
    *((unsigned char *)v12 + 32) = *a4;
    sub_10001716C(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t *sub_1000AB8D4(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t result = sub_1000AB950(a1, a2, *(uint64_t **)(a1 + 8), (uint64_t *)(a1 + 8));
  if (v3 == result) {
    return v3;
  }
  unsigned int v5 = *((_DWORD *)result + 7);
  if (*a2 < v5) {
    return v3;
  }
  if (v5 >= *a2)
  {
    unsigned int v6 = a2[1];
    unsigned int v7 = *((_DWORD *)result + 8);
    if (v6 < v7 || v7 >= v6 && a2[2] < *((_DWORD *)result + 9)) {
      return v3;
    }
  }
  return result;
}

uint64_t *sub_1000AB950(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = a4;
  if (a3)
  {
    unsigned int v5 = *a2;
    unsigned int v6 = a2[1];
    while (1)
    {
      unsigned int v7 = *((_DWORD *)a3 + 7);
      if (v7 >= v5)
      {
        if (v5 < v7) {
          goto LABEL_6;
        }
        unsigned int v8 = *((_DWORD *)a3 + 8);
        if (v8 >= v6) {
          break;
        }
      }
      ++a3;
LABEL_7:
      a3 = (uint64_t *)*a3;
      if (!a3) {
        return result;
      }
    }
    if (v6 >= v8)
    {
      if (*((_DWORD *)a3 + 9) < a2[2]) {
        ++a3;
      }
      else {
        uint64_t result = a3;
      }
      goto LABEL_7;
    }
LABEL_6:
    uint64_t result = a3;
    goto LABEL_7;
  }
  return result;
}

uint64_t *sub_1000AB9C4(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unsigned int v6 = *a2;
  unsigned int v7 = a2[1];
  unsigned int v8 = a2[2];
  while (1)
  {
    unsigned int v9 = *((_DWORD *)v3 + 8);
    if (v6 >= v9)
    {
      if (v9 < v6) {
        goto LABEL_6;
      }
      unsigned int v10 = *((_DWORD *)v3 + 9);
      if (v7 >= v10 && (v10 < v7 || v8 >= *((_DWORD *)v3 + 10))) {
        break;
      }
    }
    uint64_t v2 = v3;
LABEL_7:
    uint64_t v3 = (uint64_t *)*v3;
    if (!v3) {
      return v2;
    }
  }
  unsigned int v11 = *((_DWORD *)v3 + 9);
  if (v11 < v7 || v7 >= v11 && *((_DWORD *)v3 + 10) < v8)
  {
LABEL_6:
    ++v3;
    goto LABEL_7;
  }
  unsigned int v12 = sub_1000ABAB8(a1, a2, (uint64_t *)*v3, v3);
  sub_1000ABB2C(a1, a2, (uint64_t *)v3[1], v2);
  return v12;
}

uint64_t *sub_1000ABAB8(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = a4;
  if (a3)
  {
    unsigned int v5 = *a2;
    unsigned int v6 = a2[1];
    while (1)
    {
      unsigned int v7 = *((_DWORD *)a3 + 8);
      if (v7 >= v5)
      {
        if (v5 < v7) {
          goto LABEL_6;
        }
        unsigned int v8 = *((_DWORD *)a3 + 9);
        if (v8 >= v6) {
          break;
        }
      }
      ++a3;
LABEL_7:
      a3 = (uint64_t *)*a3;
      if (!a3) {
        return result;
      }
    }
    if (v6 >= v8)
    {
      if (*((_DWORD *)a3 + 10) < a2[2]) {
        ++a3;
      }
      else {
        uint64_t result = a3;
      }
      goto LABEL_7;
    }
LABEL_6:
    uint64_t result = a3;
    goto LABEL_7;
  }
  return result;
}

uint64_t *sub_1000ABB2C(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = a4;
  if (a3)
  {
    unsigned int v5 = *a2;
    unsigned int v6 = a2[1];
    while (1)
    {
      unsigned int v7 = *((_DWORD *)a3 + 8);
      if (v5 >= v7)
      {
        if (v7 < v5) {
          goto LABEL_6;
        }
        unsigned int v8 = *((_DWORD *)a3 + 9);
        if (v6 >= v8) {
          break;
        }
      }
      uint64_t result = a3;
LABEL_7:
      a3 = (uint64_t *)*a3;
      if (!a3) {
        return result;
      }
    }
    if (v8 >= v6)
    {
      if (a2[2] >= *((_DWORD *)a3 + 10)) {
        ++a3;
      }
      else {
        uint64_t result = a3;
      }
      goto LABEL_7;
    }
LABEL_6:
    ++a3;
    goto LABEL_7;
  }
  return result;
}

void sub_1000ABBA0(awd::profile::Condition *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 6);
  if (!v3) {
    uint64_t v3 = *(void *)(awd::profile::Condition::default_instance(a1) + 48);
  }
  switch(sub_1000B9A40(v3))
  {
    case 1u:
    case 2u:
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 88), OS_LOG_TYPE_ERROR)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3u:
      operator new();
    case 4u:
      operator new();
    case 6u:
      operator new();
    case 7u:
      operator new();
    case 0xCu:
      operator new();
    case 0xDu:
      uint64_t v4 = *(long long **)(v3 + 48);
      if (*((char *)v4 + 23) < 0)
      {
        sub_1000173FC(__p, *(void **)v4, *((void *)v4 + 1));
      }
      else
      {
        long long v5 = *v4;
        uint64_t v7 = *((void *)v4 + 2);
        *(_OWORD *)long long __p = v5;
      }
      operator new();
    default:
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 88), OS_LOG_TYPE_ERROR)) {
LABEL_7:
      }
        sub_100148098(v3);
LABEL_8:
      *a2 = 0;
      return;
  }
}

void sub_1000ABEE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_100059E54(&a17);
  if (v18 < 0) {
    operator delete(v17);
  }
  operator delete();
}

void *sub_1000ABFB4(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_1001BA598;
  v7[0] = off_1001BA5D8;
  void v7[3] = v7;
  sub_1000599E4(a1, a2, (uint64_t)v7);
  sub_100059E54(v7);
  *a1 = off_1001BA598;
  a1[6] = a3;
  sub_100059BC4(a2, a1 + 7);
  return a1;
}

void sub_1000AC084(_Unwind_Exception *a1)
{
  void *v1 = off_1001B7408;
  sub_100059E54(v1 + 2);
  _Unwind_Resume(a1);
}

void *sub_1000AC0C0(void *a1)
{
  *a1 = off_1001BA598;
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_1001B7408;
  sub_100059E54(a1 + 2);
  return a1;
}

void sub_1000AC154(void *a1)
{
  *a1 = off_1001BA598;
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_1001B7408;
  sub_100059E54(a1 + 2);

  operator delete();
}

void sub_1000AC20C()
{
}

void *sub_1000AC220()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001BA5D8;
  return result;
}

void sub_1000AC258(uint64_t a1, void *a2)
{
  *a2 = off_1001BA5D8;
}

BOOL sub_1000AC280(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  int v6 = *(_DWORD *)(*a2 + 12);
  MetricFileMetadataHelper::MetricFileMetadataHelper();
  uint64_t v63 = v5;
  int v64 = v6;
  while (1)
  {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
    if (v8 < 1) {
      break;
    }
    unsigned int v9 = *(char **)(a4 + 8);
    if ((unint64_t)v9 >= *(void *)(a4 + 16) || *v9 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
      *(_DWORD *)(a4 + 32) = TagFallback;
      if (TagFallback) {
        goto LABEL_6;
      }
LABEL_12:
      sub_1000ACEBC(a4, 0);
    }
    else
    {
      unint64_t TagFallback = *v9;
      *(_DWORD *)(a4 + 32) = TagFallback;
      *(void *)(a4 + 8) = v9 + 1;
      if (!TagFallback) {
        goto LABEL_12;
      }
LABEL_6:
      unint64_t v11 = wis::reflect::decodeTag((wis::reflect *)TagFallback, v7);
      unint64_t v12 = HIDWORD(v11);
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      uint64_t v73 = 0xFFFFFFFFLL;
      MetricFileMetadataHelper::getSubfieldType();
      long long v69 = v74;
      uint64_t v70 = v75;
      int BuiltinType = MetadataHelper::getBuiltinType();
      char v14 = v11;
      int DecodingType = wis::reflect::getDecodingType();
      switch(DecodingType)
      {
        case 0:
          switch(v14)
          {
            case 0:
              *(void *)BOOL v76 = 0;
              uint64_t v36 = *(char **)(a4 + 8);
              if ((unint64_t)v36 < *(void *)(a4 + 16) && (*v36 & 0x80000000) == 0)
              {
                *(void *)(a4 + 8) = v36 + 1;
                continue;
              }
              char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v76);
LABEL_129:
              if ((Varint64Fallback & 1) == 0) {
                goto LABEL_104;
              }
              continue;
            case 1:
              *(void *)BOOL v76 = 0;
              if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v76))goto LABEL_104; {
              continue;
              }
            case 2:
              LODWORD(__p) = 0;
              int v56 = *(char **)(a4 + 8);
              if ((unint64_t)v56 < *(void *)(a4 + 16) && (*v56 & 0x80000000) == 0)
              {
                unsigned int v41 = *v56;
                LODWORD(__p) = v41;
                *(void *)(a4 + 8) = v56 + 1;
                goto LABEL_115;
              }
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_104; {
              unsigned int v41 = __p;
              }
              break;
            case 5:
              v76[0] = 0;
              char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v76);
              goto LABEL_129;
            default:
              goto LABEL_104;
          }
          goto LABEL_115;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
          *(void *)BOOL v76 = 0;
          switch(v14)
          {
            case 0:
              int v16 = *(char **)(a4 + 8);
              if ((unint64_t)v16 < *(void *)(a4 + 16) && (*v16 & 0x80000000) == 0)
              {
                *(void *)BOOL v76 = *v16;
                *(void *)(a4 + 8) = v16 + 1;
LABEL_66:
                uint64_t v42 = *(void *)v76;
                switch(BuiltinType)
                {
                  case 1:
                  case 15:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)1>::decode();
                    continue;
                  case 2:
                  case 16:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)2>::decode();
                    continue;
                  case 3:
                  case 17:
                    if (v64 != v12) {
                      continue;
                    }
                    uint64_t v43 = v63;
                    uint64_t v44 = *(void *)(v63 + 56);
                    if (v44) {
                      goto LABEL_77;
                    }
                    goto LABEL_78;
                  case 4:
                  case 7:
                  case 9:
                  case 10:
                  case 12:
                  case 18:
                  case 21:
                  case 23:
                  case 24:
                  case 26:
                    continue;
                  case 5:
                  case 19:
                    uint64_t v42 = wis::protobuf::NumberConverter<(wis::reflect::Type)5>::decode();
                    if (v64 != v12) {
                      continue;
                    }
                    uint64_t v43 = v63;
                    uint64_t v44 = *(void *)(v63 + 56);
                    if (v44) {
                      goto LABEL_77;
                    }
                    goto LABEL_78;
                  case 6:
                  case 20:
                    if (v64 == v12)
                    {
                      uint64_t v45 = *(void *)(v63 + 56);
                      if (v45) {
                        LODWORD(v42) = (*(uint64_t (**)(uint64_t, void))(*(void *)v45 + 32))(v45, *(void *)v76);
                      }
                      if (*(void *)(v63 + 48) == (int)v42) {
                        goto LABEL_131;
                      }
                    }
                    continue;
                  case 8:
                  case 22:
                    uint64_t v46 = wis::protobuf::NumberConverter<(wis::reflect::Type)8>::decode();
                    if (v64 == v12)
                    {
                      uint64_t v47 = *(void *)(v63 + 56);
                      if (v47) {
                        LODWORD(v46) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v47 + 32))(v47, v46);
                      }
                      if (*(void *)(v63 + 48) == (int)v46) {
                        goto LABEL_131;
                      }
                    }
                    continue;
                  case 11:
                  case 25:
                    if (v64 != v12) {
                      continue;
                    }
                    uint64_t v43 = v63;
                    uint64_t v44 = *(void *)(v63 + 56);
                    if (v44) {
LABEL_77:
                    }
                      uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v44 + 40))(v44, v42);
LABEL_78:
                    if (*(void *)(v43 + 48) == v42) {
                      goto LABEL_131;
                    }
                    continue;
                  default:
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
                }
              }
              char LittleEndian64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v76);
LABEL_65:
              if (LittleEndian64Fallback) {
                goto LABEL_66;
              }
LABEL_104:
              sub_1000ACEBC(a4, v12);
              break;
            case 1:
              char LittleEndian64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v76);
              goto LABEL_65;
            case 2:
              goto LABEL_104;
            case 5:
              LODWORD(__p) = 0;
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_104; {
              *(void *)BOOL v76 = __p;
              }
              goto LABEL_66;
            default:
              goto LABEL_66;
          }
          break;
        case 13:
          LODWORD(__p) = 0;
          int v37 = *(char **)(a4 + 8);
          if ((unint64_t)v37 >= *(void *)(a4 + 16) || *v37 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_104; {
          }
            }
          else
          {
            LODWORD(__p) = *v37;
            *(void *)(a4 + 8) = v37 + 1;
          }
          *(void *)BOOL v76 = 0;
          uint64_t v77 = 0;
          uint64_t v78 = 0;
          char String = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadString();
          if ((SHIBYTE(v78) & 0x80000000) == 0) {
            goto LABEL_118;
          }
          std::string v50 = *(void **)v76;
          goto LABEL_117;
        case 14:
          LODWORD(__p) = 0;
          uint64_t v40 = *(char **)(a4 + 8);
          if ((unint64_t)v40 >= *(void *)(a4 + 16) || *v40 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_104; {
            unsigned int v41 = __p;
            }
          }
          else
          {
            unsigned int v41 = *v40;
            LODWORD(__p) = v41;
            *(void *)(a4 + 8) = v40 + 1;
          }
LABEL_115:
          sub_10003908C(v76, v41);
          char String = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadRaw((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, *(void **)v76, (int)__p);
          std::string v50 = *(void **)v76;
          if (*(void *)v76)
          {
            uint64_t v77 = *(void *)v76;
LABEL_117:
            operator delete(v50);
          }
LABEL_118:
          if ((String & 1) == 0) {
            goto LABEL_104;
          }
          continue;
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          unsigned int v68 = 0;
          int v17 = *(char **)(a4 + 8);
          if ((unint64_t)v17 >= *(void *)(a4 + 16) || *v17 < 0)
          {
            if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, &v68) & 1) == 0)goto LABEL_104; {
          }
            }
          else
          {
            unsigned int v68 = *v17;
            *(void *)(a4 + 8) = v17 + 1;
          }
          wis::reflect::getUnpackedType();
          int WireTypeForType = wis::reflect::getWireTypeForType();
          int v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v68);
          long long __p = 0;
          uint64_t v66 = 0;
          std::string v67 = 0;
          while (1)
          {
            int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
            if (v20 < 1) {
              break;
            }
            int v21 = v66;
            if (v66 >= v67)
            {
              int v23 = (char *)__p;
              uint64_t v24 = (v66 - (unsigned char *)__p) >> 3;
              unint64_t v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 61) {
                sub_10002B5E0();
              }
              uint64_t v26 = v67 - (unsigned char *)__p;
              if ((v67 - (unsigned char *)__p) >> 2 > v25) {
                unint64_t v25 = v26 >> 2;
              }
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v25;
              }
              if (v27)
              {
                int v28 = (char *)sub_100038500((uint64_t)&v67, v27);
                int v23 = (char *)__p;
                int v21 = v66;
              }
              else
              {
                int v28 = 0;
              }
              __int16 v29 = &v28[8 * v24];
              *(void *)__int16 v29 = 0;
              int v22 = v29 + 8;
              while (v21 != v23)
              {
                uint64_t v30 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v29 - 1) = v30;
                v29 -= 8;
              }
              long long __p = v29;
              uint64_t v66 = v22;
              std::string v67 = &v28[8 * v27];
              if (v23) {
                operator delete(v23);
              }
            }
            else
            {
              *(void *)uint64_t v66 = 0;
              int v22 = v21 + 8;
            }
            uint64_t v66 = v22;
            switch(WireTypeForType)
            {
              case 0:
                __int16 v31 = (unint64_t *)(v22 - 8);
                uint64_t v32 = *(char **)(a4 + 8);
                if ((unint64_t)v32 >= *(void *)(a4 + 16) || *v32 < 0)
                {
                  char v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v31);
LABEL_43:
                  if ((v33 & 1) == 0) {
                    goto LABEL_101;
                  }
                }
                else
                {
                  unint64_t *v31 = *v32;
                  *(void *)(a4 + 8) = v32 + 1;
                }
                break;
              case 1:
                char v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v22 - 1);
                goto LABEL_43;
              case 2:
                goto LABEL_101;
              case 5:
                v76[0] = 0;
                char LittleEndian32Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v76);
                *((void *)v66 - 1) = v76[0];
                if ((LittleEndian32Fallback & 1) == 0) {
                  goto LABEL_101;
                }
                continue;
              default:
                continue;
            }
          }
          switch(DecodingType)
          {
            case 15:
              sub_1000385BC((uint64_t *)&__p, v76);
              goto LABEL_98;
            case 16:
              sub_1000386C8((uint64_t *)&__p, v76);
              goto LABEL_98;
            case 17:
            case 18:
            case 24:
            case 25:
              sub_100038538((uint64_t *)&__p, v76);
              goto LABEL_98;
            case 19:
              sub_1000387D4((uint64_t *)&__p, v76);
              goto LABEL_98;
            case 20:
            case 21:
            case 23:
              sub_100038644((uint64_t *)&__p, v76);
              goto LABEL_98;
            case 22:
              sub_10003885C((uint64_t *)&__p, v76);
LABEL_98:
              std::string v48 = *(void **)v76;
              if (!*(void *)v76) {
                break;
              }
              uint64_t v77 = *(void *)v76;
LABEL_100:
              operator delete(v48);
              break;
            case 26:
              sub_100038750((uint64_t)&__p, v76);
              std::string v48 = *(void **)v76;
              if (!*(void *)v76) {
                break;
              }
              goto LABEL_100;
            default:
              __int16 v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v59, "This should never happen, no matter what the input!");
          }
LABEL_101:
          if (__p)
          {
            uint64_t v66 = (char *)__p;
            operator delete(__p);
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v19);
          if (v20 > 0) {
            goto LABEL_104;
          }
          continue;
        case 27:
          v76[0] = 0;
          uint64_t v38 = *(char **)(a4 + 8);
          if ((unint64_t)v38 >= *(void *)(a4 + 16) || *v38 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v76))goto LABEL_104; {
            int v39 = v76[0];
            }
          }
          else
          {
            int v39 = *v38;
            v76[0] = v39;
            *(void *)(a4 + 8) = v38 + 1;
          }
          int v51 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v39);
          ++*(_DWORD *)(a4 + 56);
          int v52 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
          wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v52);
          int v53 = *(_DWORD *)(a4 + 56);
          BOOL v54 = __OFSUB__(v53, 1);
          int v55 = v53 - 1;
          if (v55 < 0 == v54) {
            *(_DWORD *)(a4 + 56) = v55;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v51);
          continue;
        default:
          goto LABEL_104;
      }
    }
  }
LABEL_131:
  sub_100038238((uint64_t)&v62);
  if (v61) {
    sub_10000B678(v61);
  }
  return v8 > 0;
}

void sub_1000ACC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (a11) {
    sub_10000B678(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000ACE70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000ACEB0()
{
}

uint64_t sub_1000ACEBC(uint64_t result, int a2)
{
  if (a2 || !*(unsigned char *)(result + 36))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parsing failed in metric");
  }
  return result;
}

void sub_1000ACF1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1000ACF30(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_1001BA668;
  v7[0] = off_1001BA6A8;
  void v7[3] = v7;
  sub_1000599E4(a1, a2, (uint64_t)v7);
  sub_100059E54(v7);
  *a1 = off_1001BA668;
  a1[6] = a3;
  sub_100059BC4(a2, a1 + 7);
  return a1;
}

void sub_1000AD000(_Unwind_Exception *a1)
{
  void *v1 = off_1001B7408;
  sub_100059E54(v1 + 2);
  _Unwind_Resume(a1);
}

void *sub_1000AD03C(void *a1)
{
  *a1 = off_1001BA668;
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_1001B7408;
  sub_100059E54(a1 + 2);
  return a1;
}

void sub_1000AD0D0(void *a1)
{
  *a1 = off_1001BA668;
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_1001B7408;
  sub_100059E54(a1 + 2);

  operator delete();
}

void sub_1000AD188()
{
}

void *sub_1000AD19C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001BA6A8;
  return result;
}

void sub_1000AD1D4(uint64_t a1, void *a2)
{
  *a2 = off_1001BA6A8;
}

BOOL sub_1000AD1FC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  int v6 = *(_DWORD *)(*a2 + 12);
  MetricFileMetadataHelper::MetricFileMetadataHelper();
  uint64_t v62 = v5;
  int v63 = v6;
  while (1)
  {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
    if (v8 < 1) {
      break;
    }
    unsigned int v9 = *(char **)(a4 + 8);
    if ((unint64_t)v9 >= *(void *)(a4 + 16) || *v9 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
      *(_DWORD *)(a4 + 32) = TagFallback;
      if (TagFallback) {
        goto LABEL_6;
      }
LABEL_12:
      sub_1000ADDE8(a4, 0);
    }
    else
    {
      unint64_t TagFallback = *v9;
      *(_DWORD *)(a4 + 32) = TagFallback;
      *(void *)(a4 + 8) = v9 + 1;
      if (!TagFallback) {
        goto LABEL_12;
      }
LABEL_6:
      unint64_t v11 = wis::reflect::decodeTag((wis::reflect *)TagFallback, v7);
      unint64_t v12 = HIDWORD(v11);
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      uint64_t v72 = 0xFFFFFFFFLL;
      MetricFileMetadataHelper::getSubfieldType();
      long long v68 = v73;
      uint64_t v69 = v74;
      int BuiltinType = MetadataHelper::getBuiltinType();
      char v14 = v11;
      int DecodingType = wis::reflect::getDecodingType();
      switch(DecodingType)
      {
        case 0:
          switch(v14)
          {
            case 0:
              *(void *)uint64_t v75 = 0;
              uint64_t v36 = *(char **)(a4 + 8);
              if ((unint64_t)v36 < *(void *)(a4 + 16) && (*v36 & 0x80000000) == 0)
              {
                *(void *)(a4 + 8) = v36 + 1;
                continue;
              }
              char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v75);
LABEL_126:
              if ((Varint64Fallback & 1) == 0) {
                goto LABEL_101;
              }
              continue;
            case 1:
              *(void *)uint64_t v75 = 0;
              if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v75))goto LABEL_101; {
              continue;
              }
            case 2:
              LODWORD(__p) = 0;
              int v55 = *(char **)(a4 + 8);
              if ((unint64_t)v55 < *(void *)(a4 + 16) && (*v55 & 0x80000000) == 0)
              {
                unsigned int v41 = *v55;
                LODWORD(__p) = v41;
                *(void *)(a4 + 8) = v55 + 1;
                goto LABEL_112;
              }
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_101; {
              unsigned int v41 = __p;
              }
              break;
            case 5:
              v75[0] = 0;
              char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v75);
              goto LABEL_126;
            default:
              goto LABEL_101;
          }
          goto LABEL_112;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
          *(void *)uint64_t v75 = 0;
          switch(v14)
          {
            case 0:
              int v16 = *(char **)(a4 + 8);
              if ((unint64_t)v16 < *(void *)(a4 + 16) && (*v16 & 0x80000000) == 0)
              {
                *(void *)uint64_t v75 = *v16;
                *(void *)(a4 + 8) = v16 + 1;
LABEL_66:
                uint64_t v42 = *(void *)v75;
                switch(BuiltinType)
                {
                  case 1:
                  case 15:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)1>::decode();
                    continue;
                  case 2:
                  case 16:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)2>::decode();
                    continue;
                  case 3:
                  case 6:
                  case 11:
                  case 12:
                  case 17:
                  case 20:
                  case 25:
                  case 26:
                    continue;
                  case 4:
                  case 18:
                    if (v63 != v12) {
                      continue;
                    }
                    uint64_t v43 = v62;
                    uint64_t v44 = *(void *)(v62 + 56);
                    if (v44) {
                      goto LABEL_79;
                    }
                    goto LABEL_80;
                  case 5:
                  case 19:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)5>::decode();
                    continue;
                  case 7:
                  case 21:
                    if (v63 != v12) {
                      continue;
                    }
                    uint64_t v45 = v62;
                    uint64_t v46 = *(void *)(v62 + 56);
                    if (v46) {
                      goto LABEL_84;
                    }
                    goto LABEL_85;
                  case 8:
                  case 22:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)8>::decode();
                    continue;
                  case 9:
                  case 23:
                    if (v63 != v12) {
                      continue;
                    }
                    uint64_t v45 = v62;
                    uint64_t v46 = *(void *)(v62 + 56);
                    if (v46) {
LABEL_84:
                    }
                      LODWORD(v42) = (*(uint64_t (**)(uint64_t, void))(*(void *)v46 + 16))(v46, *(void *)v75);
LABEL_85:
                    if (*(void *)(v45 + 48) == v42) {
                      goto LABEL_128;
                    }
                    continue;
                  case 10:
                  case 24:
                    if (v63 != v12) {
                      continue;
                    }
                    uint64_t v43 = v62;
                    uint64_t v44 = *(void *)(v62 + 56);
                    if (v44) {
LABEL_79:
                    }
                      uint64_t v42 = (*(uint64_t (**)(uint64_t, void))(*(void *)v44 + 24))(v44, *(void *)v75);
LABEL_80:
                    if (*(void *)(v43 + 48) == v42) {
                      goto LABEL_128;
                    }
                    continue;
                  default:
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
                }
              }
              char LittleEndian64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v75);
LABEL_65:
              if (LittleEndian64Fallback) {
                goto LABEL_66;
              }
LABEL_101:
              sub_1000ADDE8(a4, v12);
              break;
            case 1:
              char LittleEndian64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v75);
              goto LABEL_65;
            case 2:
              goto LABEL_101;
            case 5:
              LODWORD(__p) = 0;
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_101; {
              *(void *)uint64_t v75 = __p;
              }
              goto LABEL_66;
            default:
              goto LABEL_66;
          }
          break;
        case 13:
          LODWORD(__p) = 0;
          int v37 = *(char **)(a4 + 8);
          if ((unint64_t)v37 >= *(void *)(a4 + 16) || *v37 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_101; {
          }
            }
          else
          {
            LODWORD(__p) = *v37;
            *(void *)(a4 + 8) = v37 + 1;
          }
          *(void *)uint64_t v75 = 0;
          uint64_t v76 = 0;
          uint64_t v77 = 0;
          char String = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadString();
          if ((SHIBYTE(v77) & 0x80000000) == 0) {
            goto LABEL_115;
          }
          unsigned __int8 v49 = *(void **)v75;
          goto LABEL_114;
        case 14:
          LODWORD(__p) = 0;
          uint64_t v40 = *(char **)(a4 + 8);
          if ((unint64_t)v40 >= *(void *)(a4 + 16) || *v40 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_101; {
            unsigned int v41 = __p;
            }
          }
          else
          {
            unsigned int v41 = *v40;
            LODWORD(__p) = v41;
            *(void *)(a4 + 8) = v40 + 1;
          }
LABEL_112:
          sub_10003908C(v75, v41);
          char String = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadRaw((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, *(void **)v75, (int)__p);
          unsigned __int8 v49 = *(void **)v75;
          if (*(void *)v75)
          {
            uint64_t v76 = *(void *)v75;
LABEL_114:
            operator delete(v49);
          }
LABEL_115:
          if ((String & 1) == 0) {
            goto LABEL_101;
          }
          continue;
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          unsigned int v67 = 0;
          int v17 = *(char **)(a4 + 8);
          if ((unint64_t)v17 >= *(void *)(a4 + 16) || *v17 < 0)
          {
            if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, &v67) & 1) == 0)goto LABEL_101; {
          }
            }
          else
          {
            unsigned int v67 = *v17;
            *(void *)(a4 + 8) = v17 + 1;
          }
          wis::reflect::getUnpackedType();
          int WireTypeForType = wis::reflect::getWireTypeForType();
          int v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v67);
          long long __p = 0;
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          while (1)
          {
            int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
            if (v20 < 1) {
              break;
            }
            int v21 = v65;
            if (v65 >= v66)
            {
              int v23 = (char *)__p;
              uint64_t v24 = (v65 - (unsigned char *)__p) >> 3;
              unint64_t v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 61) {
                sub_10002B5E0();
              }
              uint64_t v26 = v66 - (unsigned char *)__p;
              if ((v66 - (unsigned char *)__p) >> 2 > v25) {
                unint64_t v25 = v26 >> 2;
              }
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v25;
              }
              if (v27)
              {
                int v28 = (char *)sub_100038500((uint64_t)&v66, v27);
                int v23 = (char *)__p;
                int v21 = v65;
              }
              else
              {
                int v28 = 0;
              }
              __int16 v29 = &v28[8 * v24];
              *(void *)__int16 v29 = 0;
              int v22 = v29 + 8;
              while (v21 != v23)
              {
                uint64_t v30 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v29 - 1) = v30;
                v29 -= 8;
              }
              long long __p = v29;
              uint64_t v65 = v22;
              uint64_t v66 = &v28[8 * v27];
              if (v23) {
                operator delete(v23);
              }
            }
            else
            {
              *(void *)uint64_t v65 = 0;
              int v22 = v21 + 8;
            }
            uint64_t v65 = v22;
            switch(WireTypeForType)
            {
              case 0:
                __int16 v31 = (unint64_t *)(v22 - 8);
                uint64_t v32 = *(char **)(a4 + 8);
                if ((unint64_t)v32 >= *(void *)(a4 + 16) || *v32 < 0)
                {
                  char v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v31);
LABEL_43:
                  if ((v33 & 1) == 0) {
                    goto LABEL_98;
                  }
                }
                else
                {
                  unint64_t *v31 = *v32;
                  *(void *)(a4 + 8) = v32 + 1;
                }
                break;
              case 1:
                char v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v22 - 1);
                goto LABEL_43;
              case 2:
                goto LABEL_98;
              case 5:
                v75[0] = 0;
                char LittleEndian32Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v75);
                *((void *)v65 - 1) = v75[0];
                if ((LittleEndian32Fallback & 1) == 0) {
                  goto LABEL_98;
                }
                continue;
              default:
                continue;
            }
          }
          switch(DecodingType)
          {
            case 15:
              sub_1000385BC((uint64_t *)&__p, v75);
              goto LABEL_95;
            case 16:
              sub_1000386C8((uint64_t *)&__p, v75);
              goto LABEL_95;
            case 17:
            case 18:
            case 24:
            case 25:
              sub_100038538((uint64_t *)&__p, v75);
              goto LABEL_95;
            case 19:
              sub_1000387D4((uint64_t *)&__p, v75);
              goto LABEL_95;
            case 20:
            case 21:
            case 23:
              sub_100038644((uint64_t *)&__p, v75);
              goto LABEL_95;
            case 22:
              sub_10003885C((uint64_t *)&__p, v75);
LABEL_95:
              uint64_t v47 = *(void **)v75;
              if (!*(void *)v75) {
                break;
              }
              uint64_t v76 = *(void *)v75;
LABEL_97:
              operator delete(v47);
              break;
            case 26:
              sub_100038750((uint64_t)&__p, v75);
              uint64_t v47 = *(void **)v75;
              if (!*(void *)v75) {
                break;
              }
              goto LABEL_97;
            default:
              int v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v58, "This should never happen, no matter what the input!");
          }
LABEL_98:
          if (__p)
          {
            uint64_t v65 = (char *)__p;
            operator delete(__p);
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v19);
          if (v20 > 0) {
            goto LABEL_101;
          }
          continue;
        case 27:
          v75[0] = 0;
          uint64_t v38 = *(char **)(a4 + 8);
          if ((unint64_t)v38 >= *(void *)(a4 + 16) || *v38 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v75))goto LABEL_101; {
            int v39 = v75[0];
            }
          }
          else
          {
            int v39 = *v38;
            v75[0] = v39;
            *(void *)(a4 + 8) = v38 + 1;
          }
          int v50 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v39);
          ++*(_DWORD *)(a4 + 56);
          int v51 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
          wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v51);
          int v52 = *(_DWORD *)(a4 + 56);
          BOOL v53 = __OFSUB__(v52, 1);
          int v54 = v52 - 1;
          if (v54 < 0 == v53) {
            *(_DWORD *)(a4 + 56) = v54;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v50);
          continue;
        default:
          goto LABEL_101;
      }
    }
  }
LABEL_128:
  sub_100038238((uint64_t)&v61);
  if (v60) {
    sub_10000B678(v60);
  }
  return v8 > 0;
}

void sub_1000ADB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (a11) {
    sub_10000B678(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000ADD9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000ADDDC()
{
}

uint64_t sub_1000ADDE8(uint64_t result, int a2)
{
  if (a2 || !*(unsigned char *)(result + 36))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parsing failed in metric");
  }
  return result;
}

void sub_1000ADE48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1000ADE5C(void *a1)
{
  *a1 = off_1001B7408;
  sub_100059E54(a1 + 2);
  return a1;
}

void sub_1000ADEA0(void *a1)
{
  *a1 = off_1001B7408;
  sub_100059E54(a1 + 2);

  operator delete();
}

void sub_1000ADF08()
{
}

void *sub_1000ADF1C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001BA768;
  return result;
}

void sub_1000ADF54(uint64_t a1, void *a2)
{
  *a2 = off_1001BA768;
}

BOOL sub_1000ADF7C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  int v6 = *(_DWORD *)(*a2 + 12);
  MetricFileMetadataHelper::MetricFileMetadataHelper();
  uint64_t v57 = v5;
  int v58 = v6;
  while (1)
  {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
    if (v8 < 1) {
      break;
    }
    unsigned int v9 = *(char **)(a4 + 8);
    if ((unint64_t)v9 >= *(void *)(a4 + 16) || *v9 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
      *(_DWORD *)(a4 + 32) = TagFallback;
      if (TagFallback) {
        goto LABEL_6;
      }
LABEL_12:
      sub_1000AEA58(a4, 0);
    }
    else
    {
      unint64_t TagFallback = *v9;
      *(_DWORD *)(a4 + 32) = TagFallback;
      *(void *)(a4 + 8) = v9 + 1;
      if (!TagFallback) {
        goto LABEL_12;
      }
LABEL_6:
      unint64_t v11 = wis::reflect::decodeTag((wis::reflect *)TagFallback, v7);
      unint64_t v12 = HIDWORD(v11);
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      uint64_t v67 = 0xFFFFFFFFLL;
      MetricFileMetadataHelper::getSubfieldType();
      long long v63 = v68;
      uint64_t v64 = v69;
      int BuiltinType = MetadataHelper::getBuiltinType();
      char v14 = v11;
      int DecodingType = wis::reflect::getDecodingType();
      switch(DecodingType)
      {
        case 0:
          switch(v14)
          {
            case 0:
              *(void *)uint64_t v70 = 0;
              uint64_t v36 = *(char **)(a4 + 8);
              if ((unint64_t)v36 < *(void *)(a4 + 16) && (*v36 & 0x80000000) == 0)
              {
                *(void *)(a4 + 8) = v36 + 1;
                continue;
              }
              char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v70);
LABEL_113:
              if ((Varint64Fallback & 1) == 0) {
                goto LABEL_88;
              }
              continue;
            case 1:
              *(void *)uint64_t v70 = 0;
              if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v70))goto LABEL_88; {
              continue;
              }
            case 2:
              LODWORD(__p) = 0;
              int v50 = *(char **)(a4 + 8);
              if ((unint64_t)v50 < *(void *)(a4 + 16) && (*v50 & 0x80000000) == 0)
              {
                unsigned int v41 = *v50;
                LODWORD(__p) = v41;
                *(void *)(a4 + 8) = v50 + 1;
                goto LABEL_99;
              }
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_88; {
              unsigned int v41 = __p;
              }
              break;
            case 5:
              v70[0] = 0;
              char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v70);
              goto LABEL_113;
            default:
              goto LABEL_88;
          }
          goto LABEL_99;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
          *(void *)uint64_t v70 = 0;
          switch(v14)
          {
            case 0:
              int v16 = *(char **)(a4 + 8);
              if ((unint64_t)v16 < *(void *)(a4 + 16) && (*v16 & 0x80000000) == 0)
              {
                *(void *)uint64_t v70 = *v16;
                *(void *)(a4 + 8) = v16 + 1;
LABEL_66:
                switch(BuiltinType)
                {
                  case 1:
                  case 15:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)1>::decode();
                    continue;
                  case 2:
                  case 16:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)2>::decode();
                    continue;
                  case 3:
                  case 4:
                  case 6:
                  case 7:
                  case 9:
                  case 10:
                  case 11:
                  case 17:
                  case 18:
                  case 20:
                  case 21:
                  case 23:
                  case 24:
                  case 25:
                    continue;
                  case 5:
                  case 19:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)5>::decode();
                    continue;
                  case 8:
                  case 22:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)8>::decode();
                    continue;
                  case 12:
                  case 26:
                    if (v58 == v12 && *(unsigned char *)(v57 + 48) == (*(void *)v70 != 0)) {
                      goto LABEL_115;
                    }
                    continue;
                  default:
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
                }
              }
              char LittleEndian64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v70);
LABEL_65:
              if (LittleEndian64Fallback) {
                goto LABEL_66;
              }
LABEL_88:
              sub_1000AEA58(a4, v12);
              break;
            case 1:
              char LittleEndian64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v70);
              goto LABEL_65;
            case 2:
              goto LABEL_88;
            case 5:
              LODWORD(__p) = 0;
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_88; {
              *(void *)uint64_t v70 = __p;
              }
              goto LABEL_66;
            default:
              goto LABEL_66;
          }
          break;
        case 13:
          LODWORD(__p) = 0;
          int v37 = *(char **)(a4 + 8);
          if ((unint64_t)v37 >= *(void *)(a4 + 16) || *v37 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_88; {
          }
            }
          else
          {
            LODWORD(__p) = *v37;
            *(void *)(a4 + 8) = v37 + 1;
          }
          *(void *)uint64_t v70 = 0;
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          char String = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadString();
          if ((SHIBYTE(v72) & 0x80000000) == 0) {
            goto LABEL_102;
          }
          uint64_t v44 = *(void **)v70;
          goto LABEL_101;
        case 14:
          LODWORD(__p) = 0;
          uint64_t v40 = *(char **)(a4 + 8);
          if ((unint64_t)v40 >= *(void *)(a4 + 16) || *v40 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_88; {
            unsigned int v41 = __p;
            }
          }
          else
          {
            unsigned int v41 = *v40;
            LODWORD(__p) = v41;
            *(void *)(a4 + 8) = v40 + 1;
          }
LABEL_99:
          sub_10003908C(v70, v41);
          char String = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadRaw((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, *(void **)v70, (int)__p);
          uint64_t v44 = *(void **)v70;
          if (*(void *)v70)
          {
            uint64_t v71 = *(void **)v70;
LABEL_101:
            operator delete(v44);
          }
LABEL_102:
          if ((String & 1) == 0) {
            goto LABEL_88;
          }
          continue;
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          unsigned int v62 = 0;
          int v17 = *(char **)(a4 + 8);
          if ((unint64_t)v17 >= *(void *)(a4 + 16) || *v17 < 0)
          {
            if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, &v62) & 1) == 0)goto LABEL_88; {
          }
            }
          else
          {
            unsigned int v62 = *v17;
            *(void *)(a4 + 8) = v17 + 1;
          }
          wis::reflect::getUnpackedType();
          int WireTypeForType = wis::reflect::getWireTypeForType();
          int v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v62);
          long long __p = 0;
          int v60 = 0;
          uint64_t v61 = 0;
          while (1)
          {
            int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
            if (v20 < 1) {
              break;
            }
            int v21 = v60;
            if (v60 >= v61)
            {
              int v23 = (char *)__p;
              uint64_t v24 = (v60 - (unsigned char *)__p) >> 3;
              unint64_t v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 61) {
                sub_10002B5E0();
              }
              uint64_t v26 = v61 - (unsigned char *)__p;
              if ((v61 - (unsigned char *)__p) >> 2 > v25) {
                unint64_t v25 = v26 >> 2;
              }
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v25;
              }
              if (v27)
              {
                int v28 = (char *)sub_100038500((uint64_t)&v61, v27);
                int v23 = (char *)__p;
                int v21 = v60;
              }
              else
              {
                int v28 = 0;
              }
              __int16 v29 = &v28[8 * v24];
              *(void *)__int16 v29 = 0;
              int v22 = v29 + 8;
              while (v21 != v23)
              {
                uint64_t v30 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v29 - 1) = v30;
                v29 -= 8;
              }
              long long __p = v29;
              int v60 = v22;
              uint64_t v61 = &v28[8 * v27];
              if (v23) {
                operator delete(v23);
              }
            }
            else
            {
              *(void *)int v60 = 0;
              int v22 = v21 + 8;
            }
            int v60 = v22;
            switch(WireTypeForType)
            {
              case 0:
                __int16 v31 = (unint64_t *)(v22 - 8);
                uint64_t v32 = *(char **)(a4 + 8);
                if ((unint64_t)v32 >= *(void *)(a4 + 16) || *v32 < 0)
                {
                  char v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v31);
LABEL_43:
                  if ((v33 & 1) == 0) {
                    goto LABEL_85;
                  }
                }
                else
                {
                  unint64_t *v31 = *v32;
                  *(void *)(a4 + 8) = v32 + 1;
                }
                break;
              case 1:
                char v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v22 - 1);
                goto LABEL_43;
              case 2:
                goto LABEL_85;
              case 5:
                v70[0] = 0;
                char LittleEndian32Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v70);
                *((void *)v60 - 1) = v70[0];
                if ((LittleEndian32Fallback & 1) == 0) {
                  goto LABEL_85;
                }
                continue;
              default:
                continue;
            }
          }
          switch(DecodingType)
          {
            case 15:
              sub_1000385BC((uint64_t *)&__p, v70);
              goto LABEL_82;
            case 16:
              sub_1000386C8((uint64_t *)&__p, v70);
              goto LABEL_82;
            case 17:
            case 18:
            case 24:
            case 25:
              sub_100038538((uint64_t *)&__p, v70);
              goto LABEL_82;
            case 19:
              sub_1000387D4((uint64_t *)&__p, v70);
              goto LABEL_82;
            case 20:
            case 21:
            case 23:
              sub_100038644((uint64_t *)&__p, v70);
              goto LABEL_82;
            case 22:
              sub_10003885C((uint64_t *)&__p, v70);
LABEL_82:
              uint64_t v42 = *(void **)v70;
              if (!*(void *)v70) {
                break;
              }
              uint64_t v71 = *(void **)v70;
LABEL_84:
              operator delete(v42);
              break;
            case 26:
              sub_100038750((uint64_t)&__p, v70);
              uint64_t v42 = *(void **)v70;
              if (!*(void *)v70) {
                break;
              }
              goto LABEL_84;
            default:
              BOOL v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v53, "This should never happen, no matter what the input!");
          }
LABEL_85:
          if (__p)
          {
            int v60 = (char *)__p;
            operator delete(__p);
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v19);
          if (v20 > 0) {
            goto LABEL_88;
          }
          continue;
        case 27:
          v70[0] = 0;
          uint64_t v38 = *(char **)(a4 + 8);
          if ((unint64_t)v38 >= *(void *)(a4 + 16) || *v38 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v70))goto LABEL_88; {
            int v39 = v70[0];
            }
          }
          else
          {
            int v39 = *v38;
            v70[0] = v39;
            *(void *)(a4 + 8) = v38 + 1;
          }
          int v45 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v39);
          ++*(_DWORD *)(a4 + 56);
          int v46 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
          wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v46);
          int v47 = *(_DWORD *)(a4 + 56);
          BOOL v48 = __OFSUB__(v47, 1);
          int v49 = v47 - 1;
          if (v49 < 0 == v48) {
            *(_DWORD *)(a4 + 56) = v49;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v45);
          continue;
        default:
          goto LABEL_88;
      }
    }
  }
LABEL_115:
  sub_100038238((uint64_t)&v56);
  if (v55) {
    sub_10000B678(v55);
  }
  return v8 > 0;
}

void sub_1000AE7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (a11) {
    sub_10000B678(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000AEA0C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000AEA4C()
{
}

uint64_t sub_1000AEA58(uint64_t result, int a2)
{
  if (a2 || !*(unsigned char *)(result + 36))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parsing failed in metric");
  }
  return result;
}

void sub_1000AEAB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AEACC(uint64_t a1)
{
  *(void *)a1 = off_1001BA7E8;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  *(void *)a1 = off_1001B7408;
  sub_100059E54((void *)(a1 + 16));
  return a1;
}

void sub_1000AEB40(uint64_t a1)
{
  *(void *)a1 = off_1001BA7E8;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  *(void *)a1 = off_1001B7408;
  sub_100059E54((void *)(a1 + 16));

  operator delete();
}

void sub_1000AEBD8()
{
}

void *sub_1000AEBEC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001BA828;
  return result;
}

void sub_1000AEC24(uint64_t a1, void *a2)
{
  *a2 = off_1001BA828;
}

BOOL sub_1000AEC4C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  int v6 = *(_DWORD *)(*a2 + 12);
  MetricFileMetadataHelper::MetricFileMetadataHelper();
  uint64_t v70 = v5;
  int v71 = v6;
  while (1)
  {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
    if (v8 < 1) {
      break;
    }
    unsigned int v9 = *(char **)(a4 + 8);
    if ((unint64_t)v9 >= *(void *)(a4 + 16) || *v9 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
      *(_DWORD *)(a4 + 32) = TagFallback;
      if (TagFallback) {
        goto LABEL_6;
      }
LABEL_12:
      sub_1000AF7C0(a4, 0);
    }
    else
    {
      unint64_t TagFallback = *v9;
      *(_DWORD *)(a4 + 32) = TagFallback;
      *(void *)(a4 + 8) = v9 + 1;
      if (!TagFallback) {
        goto LABEL_12;
      }
LABEL_6:
      unint64_t v11 = wis::reflect::decodeTag((wis::reflect *)TagFallback, v7);
      unint64_t v12 = HIDWORD(v11);
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v80 = 0xFFFFFFFFLL;
      MetricFileMetadataHelper::getSubfieldType();
      long long v76 = v81;
      uint64_t v77 = v82;
      int BuiltinType = MetadataHelper::getBuiltinType();
      BOOL v14 = v11;
      int DecodingType = wis::reflect::getDecodingType();
      switch(DecodingType)
      {
        case 0:
          switch(v14)
          {
            case 0:
              *(void *)unsigned __int8 v83 = 0;
              uint64_t v36 = *(char **)(a4 + 8);
              if ((unint64_t)v36 < *(void *)(a4 + 16) && (*v36 & 0x80000000) == 0)
              {
                *(void *)(a4 + 8) = v36 + 1;
                continue;
              }
              char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v83);
LABEL_135:
              if ((Varint64Fallback & 1) == 0) {
                goto LABEL_85;
              }
              continue;
            case 1:
              *(void *)unsigned __int8 v83 = 0;
              if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v83))goto LABEL_85; {
              continue;
              }
            case 2:
              LODWORD(__p) = 0;
              long long v63 = *(char **)(a4 + 8);
              if ((unint64_t)v63 < *(void *)(a4 + 16) && (*v63 & 0x80000000) == 0)
              {
                unsigned int v41 = *v63;
                LODWORD(__p) = v41;
                *(void *)(a4 + 8) = v63 + 1;
                goto LABEL_115;
              }
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_85; {
              unsigned int v41 = __p;
              }
              break;
            case 5:
              v83[0] = 0;
              char Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v83);
              goto LABEL_135;
            default:
              goto LABEL_85;
          }
          goto LABEL_115;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
          *(void *)unsigned __int8 v83 = 0;
          switch(v14)
          {
            case 0:
              int v16 = *(char **)(a4 + 8);
              if ((unint64_t)v16 < *(void *)(a4 + 16) && (*v16 & 0x80000000) == 0)
              {
                *(void *)unsigned __int8 v83 = *v16;
                *(void *)(a4 + 8) = v16 + 1;
LABEL_66:
                switch(BuiltinType)
                {
                  case 1:
                  case 15:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)1>::decode();
                    break;
                  case 2:
                  case 16:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)2>::decode();
                    break;
                  case 3:
                  case 4:
                  case 6:
                  case 7:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 17:
                  case 18:
                  case 20:
                  case 21:
                  case 23:
                  case 24:
                  case 25:
                  case 26:
                    continue;
                  case 5:
                  case 19:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)5>::decode();
                    break;
                  case 8:
                  case 22:
                    wis::protobuf::NumberConverter<(wis::reflect::Type)8>::decode();
                    break;
                  default:
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "This should never happen, no matter what the input!");
                }
                continue;
              }
              char LittleEndian64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v83);
LABEL_65:
              if (LittleEndian64Fallback) {
                goto LABEL_66;
              }
LABEL_85:
              sub_1000AF7C0(a4, v12);
              break;
            case 1:
              char LittleEndian64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v83);
              goto LABEL_65;
            case 2:
              goto LABEL_85;
            case 5:
              LODWORD(__p) = 0;
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_85; {
              *(void *)unsigned __int8 v83 = __p;
              }
              goto LABEL_66;
            default:
              goto LABEL_66;
          }
          break;
        case 13:
          LODWORD(__p) = 0;
          int v37 = *(char **)(a4 + 8);
          if ((unint64_t)v37 >= *(void *)(a4 + 16) || *v37 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_85; {
          }
            }
          else
          {
            LODWORD(__p) = *v37;
            *(void *)(a4 + 8) = v37 + 1;
          }
          *(void *)unsigned __int8 v83 = 0;
          int v84 = 0;
          uint64_t v85 = 0;
          char String = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadString();
          if (String)
          {
            uint64_t v44 = (unsigned int *)HIBYTE(v85);
            char v45 = HIBYTE(v85);
            if (v71 != v12) {
              goto LABEL_119;
            }
            uint64_t v46 = *(unsigned __int8 *)(v70 + 71);
            if ((v46 & 0x80u) == 0) {
              int v47 = (unsigned int *)*(unsigned __int8 *)(v70 + 71);
            }
            else {
              int v47 = *(unsigned int **)(v70 + 56);
            }
            if (v85 < 0) {
              uint64_t v44 = v84;
            }
            if (v47 == v44)
            {
              BOOL v48 = (const void **)(v70 + 48);
              if (v85 >= 0) {
                int v49 = v83;
              }
              else {
                int v49 = *(unsigned int **)v83;
              }
              if ((v46 & 0x80) != 0)
              {
                BOOL v14 = memcmp(*v48, v49, *(void *)(v70 + 56)) == 0;
              }
              else if (*(unsigned char *)(v70 + 71))
              {
                uint64_t v50 = v46 - 1;
                do
                {
                  int v52 = *(unsigned __int8 *)v48;
                  BOOL v48 = (const void **)((char *)v48 + 1);
                  int v51 = v52;
                  int v54 = *(unsigned __int8 *)v49;
                  int v49 = (unsigned int *)((char *)v49 + 1);
                  int v53 = v54;
                  BOOL v56 = v50-- != 0;
                  BOOL v14 = v51 == v53;
                }
                while (v51 == v53 && v56);
              }
              else
              {
                BOOL v14 = 1;
              }
            }
            else
            {
LABEL_119:
              BOOL v14 = 0;
            }
          }
          else
          {
            char v45 = HIBYTE(v85);
          }
          if (v45 < 0)
          {
            operator delete(*(void **)v83);
            if ((String & 1) == 0) {
              goto LABEL_85;
            }
          }
          else if ((String & 1) == 0)
          {
            goto LABEL_85;
          }
          if (v14) {
            goto LABEL_139;
          }
          continue;
        case 14:
          LODWORD(__p) = 0;
          uint64_t v40 = *(char **)(a4 + 8);
          if ((unint64_t)v40 >= *(void *)(a4 + 16) || *v40 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unsigned int *)&__p))goto LABEL_85; {
            unsigned int v41 = __p;
            }
          }
          else
          {
            unsigned int v41 = *v40;
            LODWORD(__p) = v41;
            *(void *)(a4 + 8) = v40 + 1;
          }
LABEL_115:
          sub_10003908C(v83, v41);
          char Raw = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadRaw((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, *(void **)v83, (int)__p);
          if (*(void *)v83)
          {
            int v84 = *(unsigned int **)v83;
            operator delete(*(void **)v83);
          }
          if ((Raw & 1) == 0) {
            goto LABEL_85;
          }
          continue;
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          unsigned int v75 = 0;
          int v17 = *(char **)(a4 + 8);
          if ((unint64_t)v17 >= *(void *)(a4 + 16) || *v17 < 0)
          {
            if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, &v75) & 1) == 0)goto LABEL_85; {
          }
            }
          else
          {
            unsigned int v75 = *v17;
            *(void *)(a4 + 8) = v17 + 1;
          }
          wis::reflect::getUnpackedType();
          int WireTypeForType = wis::reflect::getWireTypeForType();
          int v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v75);
          long long __p = 0;
          long long v73 = 0;
          uint64_t v74 = 0;
          while (1)
          {
            int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
            if (v20 < 1) {
              break;
            }
            int v21 = v73;
            if (v73 >= v74)
            {
              int v23 = (char *)__p;
              uint64_t v24 = (v73 - (unsigned char *)__p) >> 3;
              unint64_t v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 61) {
                sub_10002B5E0();
              }
              uint64_t v26 = v74 - (unsigned char *)__p;
              if ((v74 - (unsigned char *)__p) >> 2 > v25) {
                unint64_t v25 = v26 >> 2;
              }
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v25;
              }
              if (v27)
              {
                int v28 = (char *)sub_100038500((uint64_t)&v74, v27);
                int v23 = (char *)__p;
                int v21 = v73;
              }
              else
              {
                int v28 = 0;
              }
              __int16 v29 = &v28[8 * v24];
              *(void *)__int16 v29 = 0;
              int v22 = v29 + 8;
              while (v21 != v23)
              {
                uint64_t v30 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v29 - 1) = v30;
                v29 -= 8;
              }
              long long __p = v29;
              long long v73 = v22;
              uint64_t v74 = &v28[8 * v27];
              if (v23) {
                operator delete(v23);
              }
            }
            else
            {
              *(void *)long long v73 = 0;
              int v22 = v21 + 8;
            }
            long long v73 = v22;
            switch(WireTypeForType)
            {
              case 0:
                __int16 v31 = (unint64_t *)(v22 - 8);
                uint64_t v32 = *(char **)(a4 + 8);
                if ((unint64_t)v32 >= *(void *)(a4 + 16) || *v32 < 0)
                {
                  char v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v31);
LABEL_43:
                  if ((v33 & 1) == 0) {
                    goto LABEL_82;
                  }
                }
                else
                {
                  unint64_t *v31 = *v32;
                  *(void *)(a4 + 8) = v32 + 1;
                }
                break;
              case 1:
                char v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, (unint64_t *)v22 - 1);
                goto LABEL_43;
              case 2:
                goto LABEL_82;
              case 5:
                v83[0] = 0;
                char LittleEndian32Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v83);
                *((void *)v73 - 1) = v83[0];
                if ((LittleEndian32Fallback & 1) == 0) {
                  goto LABEL_82;
                }
                continue;
              default:
                continue;
            }
          }
          switch(DecodingType)
          {
            case 15:
              sub_1000385BC((uint64_t *)&__p, v83);
              goto LABEL_79;
            case 16:
              sub_1000386C8((uint64_t *)&__p, v83);
              goto LABEL_79;
            case 17:
            case 18:
            case 24:
            case 25:
              sub_100038538((uint64_t *)&__p, v83);
              goto LABEL_79;
            case 19:
              sub_1000387D4((uint64_t *)&__p, v83);
              goto LABEL_79;
            case 20:
            case 21:
            case 23:
              sub_100038644((uint64_t *)&__p, v83);
              goto LABEL_79;
            case 22:
              sub_10003885C((uint64_t *)&__p, v83);
LABEL_79:
              uint64_t v42 = *(unsigned int **)v83;
              if (!*(void *)v83) {
                break;
              }
              int v84 = *(unsigned int **)v83;
LABEL_81:
              operator delete(v42);
              break;
            case 26:
              sub_100038750((uint64_t)&__p, v83);
              uint64_t v42 = *(unsigned int **)v83;
              if (!*(void *)v83) {
                break;
              }
              goto LABEL_81;
            default:
              uint64_t v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v66, "This should never happen, no matter what the input!");
          }
LABEL_82:
          if (__p)
          {
            long long v73 = (char *)__p;
            operator delete(__p);
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v19);
          if (v20 > 0) {
            goto LABEL_85;
          }
          continue;
        case 27:
          v83[0] = 0;
          uint64_t v38 = *(char **)(a4 + 8);
          if ((unint64_t)v38 >= *(void *)(a4 + 16) || *v38 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v83))goto LABEL_85; {
            int v39 = v83[0];
            }
          }
          else
          {
            int v39 = *v38;
            v83[0] = v39;
            *(void *)(a4 + 8) = v38 + 1;
          }
          int v57 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v39);
          ++*(_DWORD *)(a4 + 56);
          int v58 = wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4);
          wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v58);
          int v59 = *(_DWORD *)(a4 + 56);
          BOOL v60 = __OFSUB__(v59, 1);
          int v61 = v59 - 1;
          if (v61 < 0 == v60) {
            *(_DWORD *)(a4 + 56) = v61;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)a4, v57);
          continue;
        default:
          goto LABEL_85;
      }
    }
  }
LABEL_139:
  sub_100038238((uint64_t)&v69);
  if (v68) {
    sub_10000B678(v68);
  }
  return v8 > 0;
}

void sub_1000AF564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (a11) {
    sub_10000B678(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000AF774(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000AF7B4()
{
}

uint64_t sub_1000AF7C0(uint64_t result, int a2)
{
  if (a2 || !*(unsigned char *)(result + 36))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parsing failed in metric");
  }
  return result;
}

void sub_1000AF820(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000AF834(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_1000AF960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AFA18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AFAF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AFBD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AFD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1000AFE60(void *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void *sub_1000AFEA0(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    sub_10000B678(v3);
  }
  return a1;
}

void sub_1000AFEE4(unint64_t *a1, uint64_t *a2)
{
  if (*a2)
  {
    if (*a1)
    {
      uint64_t v4 = (wis *)sub_10004F08C(*a2, (unint64_t *)&__p);
      if (__p == v13)
      {
        if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 128), OS_LOG_TYPE_ERROR)) {
          sub_100148460();
        }
      }
      else
      {
        unint64_t v5 = *a1;
        int v6 = *(_DWORD *)*a2;
        *(_DWORD *)(v5 + 40) = *(_DWORD *)(*a1 + 40) | 2;
        *(_DWORD *)(v5 + 32) = v6;
        uint64_t WISTimestamp = wis::getWISTimestamp(v4);
        *(_DWORD *)(v5 + 40) |= 1u;
        *(void *)(v5 + 8) = WISTimestamp;
        int v8 = *(_DWORD *)*a2;
        if (v8 == 4097) {
          operator new();
        }
        if (v8 == 4353) {
          operator new();
        }
        int v9 = (*(uint64_t (**)(void))(*(void *)*a1 + 72))();
        uint64_t v10 = (void *)a1[2];
        unint64_t v11 = a1[3];
        if (v9 <= v11 - (unint64_t)v10)
        {
          if (v9 < v11 - (unint64_t)v10) {
            a1[3] = (unint64_t)v10 + v9;
          }
        }
        else
        {
          sub_10000712C(a1 + 2, v9 - (v11 - (void)v10));
          uint64_t v10 = (void *)a1[2];
        }
        if ((wireless_diagnostics::google::protobuf::MessageLite::SerializeToArray((wireless_diagnostics::google::protobuf::MessageLite *)*a1, v10) & 1) == 0)
        {
          if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 128), OS_LOG_TYPE_ERROR)) {
            sub_100148494();
          }
          a1[3] = a1[2];
        }
      }
      if (__p)
      {
        int v13 = __p;
        operator delete(__p);
      }
    }
    else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 128), OS_LOG_TYPE_ERROR))
    {
      sub_10014842C();
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 128), OS_LOG_TYPE_ERROR))
  {
    sub_1001483F8();
  }
}

void sub_1000B01AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

uint64_t sub_1000B0210(uint64_t a1)
{
  return a1 + 16;
}

void *sub_1000B0218@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x48uLL);
  uint64_t result = sub_1000B0264(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1000B0250(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000B0264(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001BA8A8;
  sub_1000D0958((uint64_t)(a1 + 3));
  return a1;
}

void sub_1000B02AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000B02C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001BA8A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000B02E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001BA8A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000B0334(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1000B0404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B04B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B05D4(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1001D7E50;
  qword_1001D7E50 = (uint64_t)v1;
}

void sub_1000B06F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B07BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B07CC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) fmOosModel];
  if (v2
    || ([*(id *)(a1 + 32) fmCongestionModel], (uint64_t v2 = objc_claimAutoreleasedReturnValue()) != 0)
    || ([*(id *)(a1 + 32) fmTimeSeriesModel], (uint64_t v2 = objc_claimAutoreleasedReturnValue()) != 0))
  {
  }
  else
  {
    __int16 v29 = [*(id *)(a1 + 32) fmCoreData];

    if (!v29) {
      goto LABEL_8;
    }
  }
  uint64_t v3 = *(NSObject **)(qword_1001D8080 + 136);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    LOWORD(v30) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "FederatedMobility:#I Federated Mobility set, unsetting to shut it down", (uint8_t *)&v30, 2u);
  }
  [*(id *)(a1 + 32) setFmOosModel:0];
  [*(id *)(a1 + 32) setFmCongestionModel:0];
  [*(id *)(a1 + 32) setFmTimeSeriesModel:0];
  [*(id *)(a1 + 32) setFmCoreData:0];
LABEL_8:
  +[FMConfiguration replaceSharedInstanceWithValuesOrDefaults:*(void *)(a1 + 40)];
  uint64_t v4 = +[FMConfiguration sharedInstance];
  BOOL v5 = v4 == 0;

  int v6 = *(NSObject **)(qword_1001D8080 + 136);
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100148530();
    }
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v30 = 138412290;
      uint64_t v31 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "FederatedMobility:#I Initializing Federated Mobility with config: %@", (uint8_t *)&v30, 0xCu);
    }
    int v8 = objc_alloc_init(FMCoreData);
    [*(id *)(a1 + 32) setFmCoreData:v8];

    int v9 = [*(id *)(a1 + 32) fmCoreData];
    LODWORD(v8) = v9 == 0;

    if (v8)
    {
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_ERROR)) {
        sub_100148564();
      }
    }
    else
    {
      uint64_t v10 = +[FMConfiguration sharedInstance];
      unsigned int v11 = [v10 enableFedMobilityOOSLearnings];

      if (v11)
      {
        unint64_t v12 = [FMOOSModel alloc];
        int v13 = [*(id *)(a1 + 32) fmCoreData];
        BOOL v14 = [(FMOOSModel *)v12 initWithFMCoreData:v13];
        [*(id *)(a1 + 32) setFmOosModel:v14];

        unint64_t v15 = [*(id *)(a1 + 32) fmOosModel];
        dispatch_group_notify((dispatch_group_t)[v15 _initSyncGroup], (dispatch_queue_t)objc_msgSend(*(id *)(a1 + 32), "queue"), &stru_1001BA8E8);
      }
      else
      {
        int v16 = *(NSObject **)(qword_1001D8080 + 136);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          LOWORD(v30) = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "FederatedMobility:#I Not Initializing Federated Mobility OOS predictions due to config setting", (uint8_t *)&v30, 2u);
        }
      }
      int v17 = +[FMConfiguration sharedInstance];
      unsigned int v18 = [v17 enableCongestionPredictions];

      if (v18)
      {
        int v19 = [FMCongestionModel alloc];
        int v20 = [*(id *)(a1 + 32) fmCoreData];
        int v21 = [(FMCongestionModel *)v19 initWithFMCoreData:v20];
        [*(id *)(a1 + 32) setFmCongestionModel:v21];

        if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
          sub_100148600();
        }
      }
      else
      {
        int v22 = *(NSObject **)(qword_1001D8080 + 136);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          LOWORD(v30) = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "FederatedMobility:#I Not Initializing Federated Mobility congestion predictions due to config setting", (uint8_t *)&v30, 2u);
        }
      }
      int v23 = +[FMConfiguration sharedInstance];
      unsigned int v24 = [v23 FMTSEnableTimeSeriesPredictions];

      if (v24)
      {
        unint64_t v25 = [FMTimeSeriesModel alloc];
        uint64_t v26 = [*(id *)(a1 + 32) fmCoreData];
        unint64_t v27 = [(FMTimeSeriesModel *)v25 initWithFMCoreData:v26];
        [*(id *)(a1 + 32) setFmTimeSeriesModel:v27];

        if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
          sub_1001485CC();
        }
      }
      else
      {
        int v28 = *(NSObject **)(qword_1001D8080 + 136);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          LOWORD(v30) = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "FederatedMobility:#I Not Initializing Federated Mobility time series predictions due to config setting", (uint8_t *)&v30, 2u);
        }
      }
      if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
        sub_100148598();
      }
    }
  }
}

void sub_1000B0C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B0CD8(id a1)
{
  if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
    sub_100148634();
  }
}

void sub_1000B0DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)FederatedMobility;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000B10A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1000B10EC(uint64_t a1)
{
  if (os_log_type_enabled(*(os_log_t *)(qword_1001D8080 + 136), OS_LOG_TYPE_DEBUG)) {
    sub_100148750();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = [WeakRetained fmModel];
  [v3 handleSignificantLocationsCleared];
}

void sub_1000B1164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B1230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)FMCoreRoutineController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t **sub_1000B1308(uint64_t a1, unsigned int a2)
{
  unsigned int v5 = a2;
  char v4 = 0;
  uint64_t result = sub_1000AB80C((uint64_t **)(a1 + 8), &v5, &v5, &v4);
  if (v5 == 8 || v5 == 72 || v5 == 34) {
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

void sub_1000B1370(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = (void *)(a1 + 16);
  if (v2 != (void *)(a1 + 16))
  {
    unsigned int v5 = 0;
    int v6 = a2 + 2;
    do
    {
      if ((unint64_t)v5 >= *v6)
      {
        uint64_t v7 = *a2;
        uint64_t v8 = (v5 - *a2) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_10002B5E0();
        }
        uint64_t v10 = *v6 - (void)v7;
        if (v10 >> 1 > v9) {
          unint64_t v9 = v10 >> 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          unint64_t v12 = (char *)sub_10001E460((uint64_t)v6, v11);
          uint64_t v7 = *a2;
          unsigned int v5 = a2[1];
        }
        else
        {
          unint64_t v12 = 0;
        }
        int v13 = &v12[4 * v8];
        *(_DWORD *)int v13 = *((_DWORD *)v2 + 7);
        BOOL v14 = v13 + 4;
        while (v5 != v7)
        {
          int v15 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v15;
          v13 -= 4;
        }
        *a2 = v13;
        a2[1] = v14;
        a2[2] = &v12[4 * v11];
        if (v7) {
          operator delete(v7);
        }
        unsigned int v5 = v14;
      }
      else
      {
        *(_DWORD *)unsigned int v5 = *((_DWORD *)v2 + 7);
        v5 += 4;
      }
      a2[1] = v5;
      int v16 = (void *)v2[1];
      if (v16)
      {
        do
        {
          int v17 = v16;
          int v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          int v17 = (void *)v2[2];
          BOOL v18 = *v17 == (void)v2;
          uint64_t v2 = v17;
        }
        while (!v18);
      }
      uint64_t v2 = v17;
    }
    while (v17 != v3);
  }
}

void sub_1000B14B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B14D8()
{
}

void sub_1000B179C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  pthread_mutex_unlock(&stru_1001D6968);
  if (a14) {
    sub_10000B678(a14);
  }
  int v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    sub_10000B678(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000B183C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000B1858(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_1000B1868(void *a1, const char *a2, dispatch_qos_class_t a3, const char *a4)
{
  dispatch_object_t object = 0;
  sub_10002A670(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.wis.wirelessinsightsd", a4);
  return a1;
}

void sub_1000B18C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  sub_100029804(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B18F0(uint64_t a1)
{
  *(void *)a1 = off_1001BA948;
  uint64_t v3 = (void **)(a1 + 88);
  sub_1000B52A8(&v3);
  sub_1000B5210(a1 + 64, *(void **)(a1 + 72));
  nullsub_15(a1);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100029804((void *)(a1 + 8));
  return a1;
}

void sub_1000B1974(uint64_t a1)
{
  sub_1000B18F0(a1);

  operator delete();
}

void sub_1000B19AC(uint64_t a1)
{
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v2 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  BOOL v4 = sub_1000A2CE8(v2);
  sub_1000B1C00(a1, v4);
  if (v3) {
    sub_10000B678(v3);
  }
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v5 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  int v6 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  *(unsigned char *)(a1 + 51) = sub_1000A3024(v5);
  if (v6) {
    sub_10000B678(v6);
  }
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v7 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  *(unsigned char *)(a1 + 52) = sub_1000A2F00(v7);
  if (v8) {
    sub_10000B678(v8);
  }
}

void sub_1000B1B8C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B1C00(uint64_t a1, int a2)
{
  uint64_t result = sub_1000B1CFC(a1, a2);
  if (result != (*(unsigned char *)(a1 + 50) != 0))
  {
    *(unsigned char *)(a1 + 50) = result;
    pthread_mutex_lock(&stru_1001D6C28);
    uint64_t v4 = xmmword_1001D6C68;
    if (!(void)xmmword_1001D6C68) {
      sub_10007F320();
    }
    if (*((void *)&xmmword_1001D6C68 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6C68 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D6C28);
    sub_100080008(v4);
  }
  return result;
}

void sub_1000B1CDC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B1CFC(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  sub_1000B9818(@"Anonymous", &v7);
  sub_100082794(&v8, &v7);
  sub_10001570C(&v7);
  LOBYTE(v7) = 1;
  if (v8) {
    uint64_t v3 = sub_1000803D4;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    unsigned int v4 = ctu::cf::assign((ctu::cf *)&v7, v8, v2);
    if ((_BYTE)v7) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = v4;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  sub_100081E20((const void **)&v8);
  return v5;
}

void sub_1000B1DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100081E20((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1000B1DC4(uint64_t a1, uint64_t a2, NSObject **a3)
{
  sub_100123D48(a3, &object);
  sub_10000BA54(&v5, (void *)(a1 + 8));
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v4 = object;
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(v4);
  }
  sub_10000BA54(&v8, (void *)(a1 + 8));
  operator new();
}

void sub_1000B1FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, dispatch_group_t group, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    sub_10000B678(a26);
  }
  if (v26) {
    sub_10000B678(v26);
  }
  if (a16) {
    sub_10000B678(a16);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B2048(uint64_t a1, NSObject **a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  sub_1000B2198(v3);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1174405120;
  double v6[2] = sub_1000B224C;
  void v6[3] = &unk_1001BA960;
  unsigned int v4 = *a2;
  void v6[4] = v3;
  dispatch_group_t group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  sub_10000BA54(&v10, (void *)(v3 + 8));
  uint64_t v5 = *(NSObject **)(v3 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1000B50B8;
  block[3] = &unk_1001BABF0;
  void block[5] = v10;
  unint64_t v9 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void block[4] = v6;
  dispatch_async(v5, block);
  if (v9) {
    sub_10000B678(v9);
  }
  if (v11) {
    sub_10000B678(v11);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void sub_1000B2198(uint64_t a1)
{
  CFBooleanRef v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "client:#I Cancelling all client connections", v8, 2u);
  }
  uint64_t v3 = *(void **)(a1 + 64);
  unsigned int v4 = (void *)(a1 + 72);
  if (v3 != v4)
  {
    do
    {
      xpc_connection_cancel((xpc_connection_t)v3[4]);
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != v4);
  }
}

void sub_1000B224C(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFBooleanRef v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "client:#N ClientManager closed all XPC services", v2, 2u);
  }
}

void sub_1000B22B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    unsigned int v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void sub_1000B2304(uint64_t a1)
{
  CFBooleanRef v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void sub_1000B2354(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 2)
  {
    sub_10000BA54(&v9, (void *)(a1 + 8));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 0x40000000;
    void v8[2] = sub_1000B2594;
    void v8[3] = &unk_1001BA9D0;
    v8[4] = a1;
    BOOL v7 = (NSObject **)(v9 + 24);
    uint64_t v14 = _NSConcreteStackBlock;
    uint64_t v15 = 1174405120;
    int v16 = sub_1000B53FC;
    int v17 = &unk_1001BAC80;
    uint64_t v19 = v9;
    int v20 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v18 = v8;
    sub_100123EA0(a3, v7, (uint64_t)&v14);
    if (v20) {
      sub_10000B678(v20);
    }
    uint64_t v6 = v10;
    if (v10) {
      goto LABEL_8;
    }
  }
  else if (!a2)
  {
    sub_10000BA54(&v12, (void *)(a1 + 8));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 0x40000000;
    _DWORD v11[2] = sub_1000B258C;
    uint64_t v11[3] = &unk_1001BA9B0;
    void v11[4] = a1;
    uint64_t v5 = (NSObject **)(v12 + 24);
    uint64_t v14 = _NSConcreteStackBlock;
    uint64_t v15 = 1174405120;
    int v16 = sub_1000B53FC;
    int v17 = &unk_1001BAC80;
    uint64_t v19 = v12;
    int v20 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v18 = v11;
    sub_100123EA0(a3, v5, (uint64_t)&v14);
    if (v20) {
      sub_10000B678(v20);
    }
    uint64_t v6 = v13;
    if (v13) {
LABEL_8:
    }
      sub_10000B678(v6);
  }
}

void sub_1000B254C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  BOOL v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18) {
    sub_10000B678(v18);
  }
  if (a16) {
    sub_10000B678(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B258C(uint64_t a1)
{
}

void sub_1000B2594(uint64_t a1)
{
}

void sub_1000B25A0(uint64_t a1, int a2)
{
  if ((*(unsigned char *)(a1 + 51) != 0) == a2)
  {
    if (!*(unsigned char *)(a1 + 48)) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 48) = 1;
    *(unsigned char *)(a1 + 51) = a2;
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unsigned int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "client:#I Diag & Usage switch in location system services status changed, going to try to blast trigger", v4, 2u);
  }
  sub_1000B29F0(a1);
  *(unsigned char *)(a1 + 48) = 0;
LABEL_7:
  sub_1000B2B50(a1);
}

void sub_1000B2644(uint64_t a1)
{
  sub_10000BA54(&v1, (void *)(a1 + 8));
  operator new();
}

void sub_1000B271C(uint64_t a1, uint64_t a2, unsigned int a3, const wireless_diagnostics::google::protobuf::MessageLite *a4, uint64_t a5)
{
  uint64_t v10 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v23 = HIDWORD(a2);
    LOWORD(v24) = 1024;
    *(_DWORD *)((char *)&v24 + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "client:#I Going to submit a Diagnostics Allowed Metric since there was a trigger for this 0x%x from component 0x%x", buf, 0xEu);
  }
  unint64_t v11 = (wis *)awd::metrics::MetricCCDiagnosticsAllowed::MetricCCDiagnosticsAllowed((uint64_t)buf);
  char v12 = *(unsigned char *)(a1 + 51);
  v26 |= 1u;
  char v25 = v12;
  uint64_t WISTimestamp = wis::getWISTimestamp(v11);
  v26 |= 2u;
  uint64_t v24 = WISTimestamp;
  pthread_mutex_lock(&stru_1001D6A18);
  uint64_t v14 = off_1001D6A58;
  if (!off_1001D6A58) {
    sub_10004F130();
  }
  uint64_t v15 = (std::__shared_weak_count *)*(&off_1001D6A58 + 1);
  if (*(&off_1001D6A58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1001D6A58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6A18);
  wis::serializeMetric((uint64_t *)&v20, (wis *)buf, a4, v16);
  int v17 = (char *)operator new(0x30uLL);
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(_OWORD *)(v17 + 24) = v20;
  *(void *)int v17 = off_1001B6FF8;
  *((void *)v17 + 5) = v21;
  BOOL v18 = v17 + 24;
  uint64_t v19 = (std::__shared_weak_count *)v17;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v17 + 1, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, const wireless_diagnostics::google::protobuf::MessageLite *, uint64_t, uint64_t, void, uint64_t, char **))(*(void *)v14 + 24))(v14, a4, a5, a2, a3, 7, &v18);
  if (v19) {
    sub_10000B678(v19);
  }
  sub_10000B678((std::__shared_weak_count *)v17);
  if (v15) {
    sub_10000B678(v15);
  }
  awd::metrics::MetricCCDiagnosticsAllowed::~MetricCCDiagnosticsAllowed((awd::metrics::MetricCCDiagnosticsAllowed *)buf);
}

void sub_1000B2960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1000B29E8()
{
}

void sub_1000B29F0(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 49);
  CFBooleanRef v2 = *(NSObject **)(a1 + 40);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
  if (v1)
  {
    if (v3)
    {
      LOWORD(v5) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "client:#I Blasting DiagAllowed as trigger since it defined in the config as a trigger", (uint8_t *)&v5, 2u);
    }
    pthread_mutex_lock(&stru_1001D6A18);
    uint64_t v4 = off_1001D6A58;
    if (!off_1001D6A58) {
      sub_10004F130();
    }
    if (*(&off_1001D6A58 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1001D6A58 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D6A18);
    sub_1000512B4(v4, (ctu *)0x70006);
  }
  if (v3)
  {
    LOWORD(v5) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "client:#I Not blasting DiagAllowed as trigger since it was not in the config as a trigger", (uint8_t *)&v5, 2u);
  }
}

void sub_1000B2B1C(_Unwind_Exception *a1)
{
}

void sub_1000B2B50(uint64_t a1)
{
  void (**v7[2])(xpc_object_t *__return_ptr, void);

  CFBooleanRef v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_1001487B8(a1, v2);
  }
  BOOL v3 = *(void **)(a1 + 64);
  if (v3 != (void *)(a1 + 72))
  {
    do
    {
      sub_100088CB4((uint64_t)v7, *(unsigned char *)(a1 + 50), *(unsigned char *)(a1 + 51), *(unsigned char *)(a1 + 52));
      sub_1000B2C14(a1, v3 + 4, v7);
      uint64_t v4 = (void *)v3[1];
      if (v4)
      {
        do
        {
          long long v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          long long v5 = (void *)v3[2];
          BOOL v6 = *v5 == (void)v3;
          BOOL v3 = v5;
        }
        while (!v6);
      }
      BOOL v3 = v5;
    }
    while (v5 != (void *)(a1 + 72));
  }
}

void sub_1000B2C14(uint64_t a1, uint64_t *a2, void (***a3)(xpc_object_t *__return_ptr, void))
{
  if (xpc_get_type((xpc_object_t)*a2) == (xpc_type_t)&_xpc_type_connection)
  {
    (**a3)(&object, a3);
    xpc_type_t type = xpc_get_type(object);
    uint64_t v8 = *(NSObject **)(a1 + 40);
    if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int64_t int64 = xpc_dictionary_get_int64(object, "WISMessageType");
        sub_100148834(a2, buf, int64, v8);
      }
      xpc_connection_send_message((xpc_connection_t)*a2, object);
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "client:#E Failed to create xpc message in sendMessage_sync in wirelessinsightsd client manager", buf, 2u);
    }
    xpc_release(object);
  }
  else
  {
    BOOL v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "client:#E Got NULL connection in sendMessage_sync in wirelessinsightsd client manager", buf, 2u);
    }
  }
}

void sub_1000B2D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

__int32 *sub_1000B2DD4(uint64_t a1, int a2, unsigned __int32 a3, void **a4, int a5, int a6)
{
  char v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    sub_100148908(a3, v12);
  }
  int v13 = *(void **)(a1 + 72);
  if (!v13) {
    goto LABEL_14;
  }
  uint64_t v14 = *a4;
  uint64_t v15 = (uint64_t *)(a1 + 72);
  do
  {
    unint64_t v16 = v13[4];
    BOOL v17 = v16 >= (unint64_t)v14;
    if (v16 >= (unint64_t)v14) {
      BOOL v18 = v13;
    }
    else {
      BOOL v18 = v13 + 1;
    }
    if (v17) {
      uint64_t v15 = v13;
    }
    int v13 = (void *)*v18;
  }
  while (*v18);
  if (v15 == (uint64_t *)(a1 + 72) || (unint64_t)v14 < v15[4])
  {
LABEL_14:
    uint64_t v19 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      sub_100148890(a5, v19);
    }
    LODWORD(v30) = a5;
    v32[0] = 0;
    v32[1] = 0;
    uint64_t v31 = v32;
    char v33 = 0;
    sub_1000B4DE0((uint64_t)object, a4, (uint64_t)&v30);
    uint64_t v15 = sub_1000B56CC((uint64_t **)(a1 + 64), (unint64_t *)object, (uint64_t)object);
    sub_10004B7F8((uint64_t)&v35, v36);
    xpc_release(object[0]);
    object[0] = 0;
    sub_10004B7F8((uint64_t)&v31, v32[0]);
  }
  sub_1000B1308((uint64_t)(v15 + 5), a3);
  if (*((unsigned char *)v15 + 72))
  {
    long long v20 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      LOWORD(object[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "client:#I Add client to timer notificaiton", (uint8_t *)object, 2u);
    }
  }
  if (*(_DWORD *)(a1 + 56) != a2) {
    goto LABEL_32;
  }
  uint64_t v21 = v15[7];
  if (!v21) {
    goto LABEL_32;
  }
  int v22 = v15 + 7;
  do
  {
    unsigned __int32 v23 = *(_DWORD *)(v21 + 28);
    BOOL v24 = v23 >= a3;
    if (v23 >= a3) {
      char v25 = (uint64_t *)v21;
    }
    else {
      char v25 = (uint64_t *)(v21 + 8);
    }
    if (v24) {
      int v22 = (uint64_t *)v21;
    }
    uint64_t v21 = *v25;
  }
  while (*v25);
  if (v22 != v15 + 7 && *((_DWORD *)v22 + 7) <= a3) {
    BOOL v26 = *((unsigned __int8 *)v22 + 32) != 0;
  }
  else {
LABEL_32:
  }
    BOOL v26 = 1;
  unint64_t v27 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(object[0]) = 67109632;
    HIDWORD(object[0]) = a3;
    LOWORD(object[1]) = 1024;
    *(_DWORD *)((char *)&object[1] + 2) = a6;
    HIWORD(object[1]) = 1024;
    BOOL v35 = v26;
    _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "client:#D In block for registering component 0x%x needs config is %d and local needs config is %d", (uint8_t *)object, 0x14u);
  }
  sub_1000B32DC(a1);
  if ((v26 | a6) == 1)
  {
    pthread_mutex_lock(&stru_1001D69C0);
    uint64_t v28 = xmmword_1001D6A00;
    if (!(void)xmmword_1001D6A00) {
      sub_1000781CC();
    }
    if (*((void *)&xmmword_1001D6A00 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&stru_1001D69C0);
    sub_1000A2A74(v28, a3);
  }
  sub_100088CE4((uint64_t)object, a3, *(unsigned char *)(a1 + 50), *(unsigned char *)(a1 + 51), *(unsigned char *)(a1 + 52));
  sub_1000B2C14(a1, (uint64_t *)a4, (void (***)(xpc_object_t *__return_ptr, void))object);
  return sub_1000B361C((__int32 *)a1, (int)a4, a3);
}

void sub_1000B3200(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B329C(uint64_t a1)
{
  *(void *)a1 = 0;
  return a1;
}

uint64_t sub_1000B32DC(uint64_t result)
{
  int v1 = *(void **)(result + 64);
  unint64_t v16 = (void *)(result + 72);
  if (v1 != (void *)(result + 72))
  {
    uint64_t v2 = result;
    do
    {
      sub_100002260((uint64_t)v19);
      sub_1000B1370((uint64_t)(v1 + 5), (char **)buf);
      uint64_t v4 = *(char **)buf;
      BOOL v3 = *(char **)&buf[8];
      if (*(void *)buf != *(void *)&buf[8])
      {
        do
        {
          long long v5 = sub_100004D64(v19, (uint64_t)"0x", 2);
          *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v5 + *(void *)(*v5 - 24) + 8) & 0xFFFFFFB5 | 8;
          BOOL v6 = (void *)std::ostream::operator<<();
          sub_100004D64(v6, (uint64_t)",", 1);
          v4 += 4;
        }
        while (v4 != v3);
        uint64_t v4 = *(char **)buf;
      }
      if (v4)
      {
        *(void *)&uint8_t buf[8] = v4;
        operator delete(v4);
      }
      BOOL v7 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = v1[4];
        int v9 = *((_DWORD *)v1 + 10);
        std::stringbuf::str();
        p_p = &__p;
        if (v18 < 0) {
          p_p = __p;
        }
        *(_DWORD *)std::string buf = 134218498;
        *(void *)&uint8_t buf[4] = v8;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9;
        __int16 v22 = 2080;
        unsigned __int32 v23 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "client:#I \tClient with connection %p and pid %d: components {%s}", buf, 0x1Cu);
        if (v18 < 0) {
          operator delete(__p);
        }
      }
      v19[0] = v15;
      *(void *)((char *)v19 + *(void *)(v15 - 24)) = v14;
      if (v20 < 0) {
        operator delete((void *)v19[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      uint64_t result = std::ios::~ios();
      unint64_t v11 = (void *)v1[1];
      if (v11)
      {
        do
        {
          char v12 = v11;
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          char v12 = (void *)v1[2];
          BOOL v13 = *v12 == (void)v1;
          int v1 = v12;
        }
        while (!v13);
      }
      int v1 = v12;
    }
    while (v12 != v16);
  }
  return result;
}

void sub_1000B35E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_10004E93C((uint64_t)va);
  _Unwind_Resume(a1);
}

__int32 *sub_1000B361C(__int32 *result, int a2, __int32 __c)
{
  uint64_t v3 = *((void *)result + 11);
  for (uint64_t i = *((void *)result + 12); v3 != i; v3 += 48)
  {
    BOOL v6 = *(__int32 **)(v3 + 32);
    uint64_t result = wmemchr(*(__int32 **)(v3 + 24), __c, ((uint64_t)v6 - *(void *)(v3 + 24)) >> 2);
    if (result) {
      BOOL v7 = result;
    }
    else {
      BOOL v7 = v6;
    }
    if (v7 != *(__int32 **)(v3 + 32)) {
      sub_1000B3DB4();
    }
  }
  return result;
}

void sub_1000B36C0(uint64_t a1, void **a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1174405120;
  void v5[2] = sub_1000B37F0;
  void v5[3] = &unk_1001BA9F0;
  uint64_t v3 = *a2;
  v5[4] = a1;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_10000BA54(&v9, (void *)(a1 + 8));
  uint64_t v4 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1000B50B8;
  block[3] = &unk_1001BABF0;
  void block[5] = v9;
  uint64_t v8 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void block[4] = v5;
  dispatch_async(v4, block);
  if (v8) {
    sub_10000B678(v8);
  }
  if (v10) {
    sub_10000B678(v10);
  }
  xpc_release(object);
}

uint64_t sub_1000B37F0(uint64_t a1)
{
  return sub_1000B5898(*(void *)(a1 + 32) + 64, (unint64_t *)(a1 + 40));
}

xpc_object_t sub_1000B3804(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1000B3844(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void sub_1000B3874(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v10 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    block[0] = 67109888;
    block[1] = a3;
    __int16 v13 = 1024;
    int v14 = a5;
    __int16 v15 = 1024;
    int v16 = a6;
    __int16 v17 = 1024;
    int v18 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "client:#D Registering component 0x%x for pid %d (Needs config:%d, dcid=%u)", (uint8_t *)block, 0x1Au);
  }
  sub_100018888(&__p, "Client-new");
  sub_1000035F0();
}

void sub_1000B3AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2) {
    sub_10001F4A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B3B04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 64);
  unsigned __int32 v4 = *(_DWORD *)(a1 + 68);
  long long v5 = *(void **)(a1 + 56);
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_1000B2DD4(v2, v3, v4, &object, *(_DWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 76));
  xpc_release(object);
}

void sub_1000B3B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t sub_1000B3B9C(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned __int32 v4 = (void *)a2[7];
  a1[7] = v4;
  if (v4) {
    return xpc_retain(v4);
  }
  xpc_object_t result = xpc_null_create();
  a1[7] = result;
  return result;
}

void sub_1000B3BF4(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    sub_10000B678(v2);
  }
}

void sub_1000B3C48(uint64_t a1, uint64_t a2)
{
  v4[0] = a1;
  v4[1] = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  _DWORD block[2] = sub_1000B5920;
  block[3] = &unk_1001BACB0;
  void block[4] = a1 + 8;
  void block[5] = v4;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

void sub_1000B3CD0(uint64_t a1)
{
  sub_10000BA54(&v1, (void *)(a1 + 8));
  operator new();
}

void sub_1000B3DB4()
{
  pthread_mutex_lock(&stru_1001D6A18);
  uint64_t v0 = off_1001D6A58;
  if (!off_1001D6A58) {
    sub_10004F130();
  }
  if (*(&off_1001D6A58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1001D6A58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6A18);
  sub_100050D28(v0);
}

void sub_1000B3F78(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B3FC0(void *a1, uint64_t a2, uint64_t a3, int a4, unsigned int **a5)
{
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  int v23 = a4;
  BOOL v7 = *a5;
  BOOL v6 = a5[1];
  if (*a5 != v6)
  {
    uint64_t v8 = a1 + 9;
    do
    {
      unsigned int v9 = *v7;
      uint64_t v10 = (void *)a1[8];
      if (v10 != v8)
      {
        do
        {
          for (uint64_t i = (uint64_t *)v10[7]; i; uint64_t i = (uint64_t *)*i)
          {
            unsigned int v12 = *((_DWORD *)i + 7);
            if (v12 <= v9)
            {
              if (v12 >= v9) {
                sub_1000B3DB4();
              }
              ++i;
            }
          }
          __int16 v13 = (void *)v10[1];
          if (v13)
          {
            do
            {
              int v14 = v13;
              __int16 v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              int v14 = (void *)v10[2];
              BOOL v15 = *v14 == (void)v10;
              uint64_t v10 = v14;
            }
            while (!v15);
          }
          uint64_t v10 = v14;
        }
        while (v14 != v8);
      }
      if (sub_10006FAE8())
      {
        int v16 = a1[5];
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 67109120;
          unsigned int v25 = v9;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "client:#I Sent notification to hopefully launch cid 0x%x in order to absorb the trigger", buf, 8u);
        }
      }
      ++v7;
    }
    while (v7 != v6);
  }
  __int16 v17 = a1 + 11;
  unint64_t v18 = a1[12];
  if (v18 >= a1[13])
  {
    uint64_t result = sub_1000B5D70(v17, &v21, &v22, (uint64_t)a5);
  }
  else
  {
    sub_1000B5D08((uint64_t)v17, &v21, &v22, (uint64_t)a5);
    uint64_t result = v18 + 48;
  }
  a1[12] = result;
  return result;
}

void sub_1000B4198(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  BOOL v6 = (void *)(a1 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1174405120;
  void v8[2] = sub_1000B42D4;
  void v8[3] = &unk_1001BAA50;
  v8[4] = a1;
  void v8[5] = a2;
  int v13 = a4;
  uint64_t v11 = 0;
  uint64_t v12 = a3;
  long long __p = 0;
  uint64_t v10 = 0;
  sub_10001E158(&__p, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  sub_10000BA54(&v16, v6);
  BOOL v7 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  _DWORD block[2] = sub_1000B50B8;
  block[3] = &unk_1001BABF0;
  void block[5] = v16;
  BOOL v15 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void block[4] = v8;
  dispatch_async(v7, block);
  if (v15) {
    sub_10000B678(v15);
  }
  if (v17) {
    sub_10000B678(v17);
  }
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

uint64_t sub_1000B42D4(uint64_t a1)
{
  return sub_1000B3FC0(*(void **)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 72), *(_DWORD *)(a1 + 80), (unsigned int **)(a1 + 48));
}

void *sub_1000B42EC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = (void *)(a1 + 48);
  v2[2] = 0;
  return sub_10001E158(v2, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
}

void sub_1000B4308(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1000B4320(uint64_t a1, int a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  void v4[2] = sub_1000B4430;
  uint64_t v4[3] = &unk_1001BAA80;
  void v4[4] = a1;
  int v5 = a2;
  sub_10000BA54(&v8, (void *)(a1 + 8));
  uint64_t v3 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  _DWORD block[2] = sub_1000B50B8;
  block[3] = &unk_1001BABF0;
  void block[5] = v8;
  BOOL v7 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void block[4] = v4;
  dispatch_async(v3, block);
  if (v7) {
    sub_10000B678(v7);
  }
  if (v9) {
    sub_10000B678(v9);
  }
}

void sub_1000B4430(uint64_t a1)
{
  void (**v7[2])(xpc_object_t *__return_ptr, void);

  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 64);
  if (v2 != (void *)(v1 + 72))
  {
    do
    {
      if (*((unsigned char *)v2 + 72))
      {
        sub_100084768((uint64_t)v7, *(_DWORD *)(a1 + 40));
        sub_1000B2C14(v1, v2 + 4, v7);
      }
      unsigned __int32 v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          int v5 = v4;
          unsigned __int32 v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          int v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != (void *)(v1 + 72));
  }
}

void sub_1000B44DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3 != (void *)(a1 + 72))
  {
    do
    {
      unsigned __int32 v4 = (void *)v3[6];
      if (v4 != v3 + 7)
      {
        do
        {
          *((unsigned char *)v4 + 32) = 1;
          int v5 = (void *)v4[1];
          if (v5)
          {
            do
            {
              BOOL v6 = v5;
              int v5 = (void *)*v5;
            }
            while (v5);
          }
          else
          {
            do
            {
              BOOL v6 = (void *)v4[2];
              BOOL v17 = *v6 == (void)v4;
              unsigned __int32 v4 = v6;
            }
            while (!v17);
          }
          unsigned __int32 v4 = v6;
        }
        while (v6 != v3 + 7);
      }
      BOOL v7 = (void *)v3[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v3[2];
          BOOL v17 = *v8 == (void)v3;
          uint64_t v3 = v8;
        }
        while (!v17);
      }
      uint64_t v3 = v8;
    }
    while (v8 != (void *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 32);
  uint64_t v9 = *(int *)(a2 + 16);
  if (v9)
  {
    uint64_t v10 = 8 * v9;
    uint64_t v11 = *(void *)(a2 + 8);
    while (*(_DWORD *)(*(void *)v11 + 56) != 7)
    {
      v11 += 8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_30;
      }
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  if (v11 == *(void *)(a2 + 8) + 8 * v9)
  {
LABEL_30:
    *(unsigned char *)(a1 + 49) = 0;
  }
  else
  {
    uint64_t v12 = *(int *)(*(void *)v11 + 16);
    if (v12)
    {
      int v13 = *(uint64_t **)(*(void *)v11 + 8);
      uint64_t v14 = 8 * v12 - 8;
      do
      {
        uint64_t v15 = *v13++;
        BOOL v16 = *(_DWORD *)(v15 + 32) == 458758;
        BOOL v17 = *(_DWORD *)(v15 + 32) == 458758 || v14 == 0;
        v14 -= 8;
      }
      while (!v17);
    }
    else
    {
      BOOL v16 = 0;
    }
    *(unsigned char *)(a1 + 49) = v16;
  }
  sub_1000B1C00(a1, (*(unsigned char *)(a2 + 36) != 0) & (*(_DWORD *)(a2 + 208) >> 3));
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v18 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  sub_1000A2BFC(v18, *(unsigned char *)(a1 + 50));
}

void sub_1000B4774(_Unwind_Exception *a1)
{
}

void sub_1000B47B8(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100148980(a1, v2);
  }
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3 != (void *)(a1 + 72))
  {
    do
    {
      unsigned __int32 v4 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = v3[4];
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v10;
        _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "client:#D In sendAllConfigurations_sync for connection %p", buf, 0xCu);
      }
      sub_1000B1370((uint64_t)(v3 + 5), &v11);
      if (v11 != v12)
      {
        int v5 = *(_DWORD *)v11;
        pthread_mutex_lock(&stru_1001D69C0);
        uint64_t v6 = xmmword_1001D6A00;
        if (!(void)xmmword_1001D6A00) {
          sub_1000781CC();
        }
        if (*((void *)&xmmword_1001D6A00 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&stru_1001D69C0);
        sub_1000A2A74(v6, v5);
      }
      if (v11)
      {
        uint64_t v12 = v11;
        operator delete(v11);
      }
      sub_100088CB4((uint64_t)buf, *(unsigned char *)(a1 + 50), *(unsigned char *)(a1 + 51), *(unsigned char *)(a1 + 52));
      sub_1000B2C14(a1, v3 + 4, (void (***)(xpc_object_t *__return_ptr, void))buf);
      BOOL v7 = (void *)v3[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v3[2];
          BOOL v9 = *v8 == (void)v3;
          uint64_t v3 = v8;
        }
        while (!v9);
      }
      uint64_t v3 = v8;
    }
    while (v8 != (void *)(a1 + 72));
  }
}

void sub_1000B4AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

void sub_1000B4B78(uint64_t a1, int a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  void v4[2] = sub_1000B4C88;
  uint64_t v4[3] = &unk_1001BAAA0;
  void v4[4] = a1;
  int v5 = a2;
  sub_10000BA54(&v8, (void *)(a1 + 8));
  uint64_t v3 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  _DWORD block[2] = sub_1000B50B8;
  block[3] = &unk_1001BABF0;
  void block[5] = v8;
  BOOL v7 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void block[4] = v4;
  dispatch_async(v3, block);
  if (v7) {
    sub_10000B678(v7);
  }
  if (v9) {
    sub_10000B678(v9);
  }
}

void sub_1000B4C88(uint64_t a1)
{
}

void sub_1000B4C98(uint64_t a1, int a2)
{
  void (**buf)(xpc_object_t *__return_ptr, void);
  __int16 v12;
  int v13;

  uint64_t v2 = *(void **)(a1 + 64);
  uint64_t v3 = (void *)(a1 + 72);
  if (v2 != (void *)(a1 + 72))
  {
    do
    {
      uint64_t v6 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v10 = *((_DWORD *)v2 + 10);
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = a2;
        uint64_t v12 = 1024;
        int v13 = v10;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "client:#D Sending ctrl message 0x%x to connection for pid %d", (uint8_t *)&buf, 0xEu);
      }
      sub_1000842A4((uint64_t)&buf, a2);
      sub_1000B2C14(a1, v2 + 4, &buf);
      BOOL v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v9);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
}

uint64_t sub_1000B4DE0(uint64_t a1, void **a2, uint64_t a3)
{
  int v5 = *a2;
  *(void *)a1 = *a2;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    *(void *)a1 = xpc_null_create();
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a3;
  *(void *)(a1 + 16) = *(void *)(a3 + 8);
  uint64_t v6 = (void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a1 + 24;
  uint64_t v9 = *(void *)(a3 + 24);
  *(void *)(a1 + 32) = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *(void *)(a3 + 8) = v6;
    *uint64_t v6 = 0;
    *(void *)(a3 + 24) = 0;
  }
  else
  {
    *(void *)(a1 + 16) = v8;
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a3 + 32);
  return a1;
}

uint64_t **sub_1000B4E70(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((unsigned char *)v11 + 32) = 0;
    sub_10001716C(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1000B4F34(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000B4FB4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1000B508C);
  __cxa_rethrow();
}

void sub_1000B4FDC(_Unwind_Exception *a1)
{
}

void sub_1000B4FF4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000B502C(uint64_t a1)
{
}

uint64_t sub_1000B5048(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000B508C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1000B50B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000B50C8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000B50E4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void *sub_1000B50F4(void *a1)
{
  *a1 = off_1001BAC30;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10000B678(v2);
  }
  return a1;
}

void sub_1000B5140(void *a1)
{
  *a1 = off_1001BAC30;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10000B678(v1);
  }

  operator delete();
}

void *sub_1000B51AC@<X0>(void *a1@<X8>)
{
  return sub_100018888(a1, "ClientManager");
}

unsigned char *sub_1000B51BC@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 1;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_1000B51FC(uint64_t a1, uint64_t a2, NSObject **a3)
{
}

void sub_1000B5208(uint64_t a1, int a2, uint64_t a3)
{
}

void sub_1000B5210(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000B5210(a1, *a2);
    sub_1000B5210(a1, a2[1]);
    sub_1000B526C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1000B526C(uint64_t a1)
{
  *(void *)a1 = 0;
}

void sub_1000B52A8(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1000B52FC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1000B52FC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    unsigned __int32 v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void sub_1000B534C(uint64_t *a1)
{
  uint64_t v6 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = *(NSObject **)(*(void *)*a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "client:#N Flush of all incoming requests complete", buf, 2u);
  }
  uint64_t v3 = *(NSObject **)(v1 + 24);
  if (v3)
  {
    dispatch_group_leave(v3);
    unsigned __int32 v4 = *(NSObject **)(v1 + 24);
    if (v4) {
      dispatch_release(v4);
    }
  }
  int v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5) {
    sub_10000B678(v5);
  }
  operator delete();
}

void sub_1000B53FC(uint64_t a1, NSObject **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  dispatch_group_t group = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
}

void sub_1000B5458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B547C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000B5498(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10000B678(v1);
  }
}

void sub_1000B54A8(uint64_t **a1)
{
  unsigned int v8 = a1;
  uint64_t v1 = **a1;
  pthread_mutex_lock(&stru_1001D69C0);
  uint64_t v2 = xmmword_1001D6A00;
  if (!(void)xmmword_1001D6A00) {
    sub_1000781CC();
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&xmmword_1001D6A00 + 1);
  if (*((void *)&xmmword_1001D6A00 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1001D6A00 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D69C0);
  int v4 = sub_1000A2F00(v2);
  if (v3) {
    sub_10000B678(v3);
  }
  int v5 = *(unsigned __int8 *)(v1 + 52);
  uint64_t v6 = *(NSObject **)(v1 + 40);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v4 == v5)
  {
    if (v7)
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "client:#I Shim mode has not changed; skipping update. (enabled=%d)",
        buf,
        8u);
    }
  }
  else
  {
    if (v7)
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "client:#I Shim mode changed; updating clients. (enabled=%d -> %d)",
        buf,
        0xEu);
    }
    sub_1000B2B50(v1);
  }
  operator delete();
}

void sub_1000B5664()
{
}

uint64_t *sub_1000B56CC(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  BOOL v7 = a1 + 1;
  unsigned int v8 = a1 + 1;
  if (v5)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unint64_t v10 = v5[4];
        if (v9 >= v10) {
          break;
        }
        int v5 = *v8;
        BOOL v7 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      if (v10 >= v9) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        BOOL v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v11 = (uint64_t *)operator new(0x50uLL);
    v13[1] = v6;
    sub_1000B57B0((uint64_t)(v11 + 4), a3);
    char v14 = 1;
    sub_10001716C(a1, (uint64_t)v8, v7, v11);
    v13[0] = 0;
    sub_1000B5840((uint64_t)v13, 0);
    return v11;
  }
  return (uint64_t *)v8;
}

uint64_t sub_1000B57B0(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)a1 = xpc_null_create();
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  int v5 = (void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = a1 + 24;
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    *(void *)(a2 + 16) = v5;
    *int v5 = 0;
    *(void *)(a2 + 32) = 0;
  }
  else
  {
    *(void *)(a1 + 16) = v7;
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

void sub_1000B5840(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000B526C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_1000B5898(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  int v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      int v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_10002BA08((uint64_t **)a1, v4);
  sub_1000B526C((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void sub_1000B5920(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  uint64_t v3 = sub_1000E82A8(v1[1]);
  sub_1000B44DC(v2, v3);
}

void sub_1000B5A10(void **a1)
{
  char v14 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)**a1;
  uint64_t v3 = (_DWORD *)v2[11];
  uint64_t v4 = v2[12];
  if (v3 != (_DWORD *)v4)
  {
    while (v1[4] != v3[4] || v1[3] != v3[3] || v1[2] != v3[2])
    {
      v3 += 12;
      if (v3 == (_DWORD *)v4) {
        goto LABEL_16;
      }
    }
  }
  if (v3 != (_DWORD *)v4)
  {
    unint64_t v5 = v2[5];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = v1[2];
      int v7 = v1[3];
      int v8 = v1[4];
      *(_DWORD *)std::string buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v7;
      *(_WORD *)&buf[14] = 1024;
      int v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "client:#I Cancelling hold for new clients for Trigger(cid=0x%x, trid=0x%x, sid=%u)", buf, 0x14u);
      uint64_t v4 = v2[12];
    }
    sub_1000B5C8C((uint64_t)(v3 + 12), v4, (uint64_t)v3);
    uint64_t v10 = v9;
    for (uint64_t i = v2[12]; i != v10; i -= 48)
    {
      uint64_t v12 = *(void **)(i - 24);
      if (v12)
      {
        *(void *)(i - 16) = v12;
        operator delete(v12);
      }
    }
    v2[12] = v10;
  }
LABEL_16:
  pthread_mutex_lock(&stru_1001D6A18);
  uint64_t v13 = off_1001D6A58;
  if (!off_1001D6A58) {
    sub_10004F130();
  }
  if (*(&off_1001D6A58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1001D6A58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1001D6A18);
  sub_1000507C4(v13);
}

void sub_1000B5C24()
{
}

uint64_t sub_1000B5C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(void *)a3 = *(void *)v4;
    uint64_t v6 = *(void *)(v4 + 8);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v4 + 16);
    *(void *)(a3 + 8) = v6;
    sub_10001E1D4(a3 + 24, (__n128 *)(v4 + 24));
    a3 += 48;
    v4 += 48;
  }
  while (v4 != v5);
  return v5;
}

void *sub_1000B5D08(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  *(_DWORD *)(v5 + 16) = *((_DWORD *)a3 + 2);
  *(void *)(v5 + 8) = v6;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0;
  *(void *)(v5 + 24) = 0;
  uint64_t result = sub_10001E158((void *)(v5 + 24), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  *(void *)(a1 + 8) = v5 + 48;
  return result;
}

void sub_1000B5D68(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000B5D70(uint64_t *a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_10002B5E0();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 4);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v13 = 0x555555555555555;
  }
  else {
    unint64_t v13 = v7;
  }
  int v23 = a1 + 2;
  if (v13) {
    char v14 = (char *)sub_1000B5F28(v11, v13);
  }
  else {
    char v14 = 0;
  }
  uint64_t v15 = &v14[48 * v6];
  v20[0] = v14;
  v20[1] = v15;
  uint64_t v21 = v15;
  uint64_t v22 = &v14[48 * v13];
  *(void *)uint64_t v15 = *a2;
  uint64_t v16 = *a3;
  int v17 = *((_DWORD *)a3 + 2);
  *((void *)v15 + 3) = 0;
  v15 += 24;
  *((_DWORD *)v15 - 2) = v17;
  *((void *)v15 - 2) = v16;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  sub_10001E158(v15, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  v21 += 48;
  sub_1000B5EB0(a1, v20);
  uint64_t v18 = a1[1];
  sub_1000B60AC((uint64_t)v20);
  return v18;
}

void sub_1000B5E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000B60AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B5EB0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000B5F70((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000B5F28(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_10002A63C();
  }
  return operator new(48 * a2);
}

uint64_t sub_1000B5F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 48);
      a3 -= 48;
      *(void *)(v7 - 48) = v8;
      uint64_t v9 = *(void *)(a3 + 8);
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(a3 + 16);
      *(void *)(v7 - 40) = v9;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 8) = *(void *)(a3 + 40);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 48;
      *((void *)&v15 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1000B602C((uint64_t)v12);
  return v10;
}

uint64_t sub_1000B602C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000B6064(a1);
  }
  return a1;
}

void sub_1000B6064(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 24);
    if (v3)
    {
      *(void *)(v1 + 32) = v3;
      operator delete(v3);
    }
    v1 += 48;
  }
}

uint64_t sub_1000B60AC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000B60E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 48;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
}

uint64_t sub_1000B6140()
{
  if ((byte_1001D69B8 & 1) == 0)
  {
    byte_1001D69B8 = 1;
    return __cxa_atexit((void (*)(void *))sub_100029800, &stru_1001D6968, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000B617C()
{
  if ((byte_1001D6A10 & 1) == 0)
  {
    byte_1001D6A10 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E5C, &stru_1001D69C0, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000B61B8()
{
  if ((byte_1001D6C78 & 1) == 0)
  {
    byte_1001D6C78 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E78, &stru_1001D6C28, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000B61F4()
{
  if ((byte_1001D6A68 & 1) == 0)
  {
    byte_1001D6A68 = 1;
    return __cxa_atexit((void (*)(void *))sub_100042E60, &stru_1001D6A18, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1000B62D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B63D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B6480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B6630(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1000B6798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B696C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1001D7E60;
  qword_1001D7E60 = (uint64_t)v1;
}

void sub_1000B6ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000B6AEC(uint64_t a1)
{
  uint64_t v2 = +[TelephonyStateRelay sharedInstance];
  [*(id *)(a1 + 32) setCtRelay:v2];

  uint64_t v3 = [*(id *)(a1 + 32) ctRelay];
  objc_msgSend(v3, "addTelephonyStateDelegate:withQueue:", *(void *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "queue"));

  [*(id *)(a1 + 32) setIsAirplaneModeActive:0];
  uint64_t v4 = [*(id *)(a1 + 32) ctRelay];
  [v4 getAirplaneModeStatus:*(void *)(a1 + 32)];

  uint64_t v5 = *(void **)(a1 + 32);

  return [v5 populateSubscriptionContextsInUse];
}