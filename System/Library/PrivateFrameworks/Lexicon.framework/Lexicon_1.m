void sub_19E0B296C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_19E04137C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0B2A10(sqlite3 **a1, int a2, const char *a3, const char *a4, const char *a5, uint64_t a6, char a7, CFDictionaryRef theDict, CFErrorRef *a9)
{
  v68[2] = *MEMORY[0x1E4F143B8];
  sub_19E0B26DC((uint64_t)v66, theDict);
  uint64_t v15 = sqlite3_exec(*a1, "BEGIN TRANSACTION", 0, 0, 0);
  unsigned int v16 = v15;
  if (v15)
  {
    CFStringRef v17 = CFStringCreateWithFormat(0, 0, @"VulgarWordUsageDatabase: Error beginning a transaction: %d", v15);
    __p[0] = (void *)v17;
    sub_19E0B2750(v16, v17, a9);
    if (v17) {
      CFRelease(v17);
    }
LABEL_4:
    uint64_t v18 = 0;
    goto LABEL_46;
  }
  ppStmt = 0;
  if (!sqlite3_prepare_v2(*a1, "INSERT OR IGNORE INTO vword_usage (app, recipient, vword, word_reading, usage_count) VALUES (:app, :recipient, :vword, :word_reading, 0)", -1, &ppStmt, 0))
  {
    v19 = ppStmt;
    int v20 = sqlite3_bind_parameter_index(ppStmt, ":app");
    sqlite3_bind_text(v19, v20, a4, -1, 0);
    v21 = ppStmt;
    int v22 = sqlite3_bind_parameter_index(ppStmt, ":recipient");
    sqlite3_bind_text(v21, v22, a5, -1, 0);
    v23 = ppStmt;
    int v24 = sqlite3_bind_parameter_index(ppStmt, ":vword");
    sqlite3_bind_text(v23, v24, a3, -1, 0);
    v25 = ppStmt;
    int v26 = sqlite3_bind_parameter_index(ppStmt, ":word_reading");
    v27 = (const char *)(v67 ? v67 : v68);
    sqlite3_bind_text(v25, v26, v27, -1, 0);
    uint64_t v28 = sqlite3_step(ppStmt);
    sqlite3_finalize(ppStmt);
    if (v28 != 101)
    {
      CFStringRef v58 = CFStringCreateWithFormat(0, 0, @"VulgarWordUsageDatabase: Error evaluating an INSERT OR IGNORE statement: %d", v28);
      __p[0] = (void *)v58;
      sub_19E0B2750(v28, v58, a9);
      if (v58) {
        CFRelease(v58);
      }
      goto LABEL_4;
    }
  }
  std::operator+<char>();
  v29 = std::string::append(&v62, " WHERE app = :app AND recipient = :recipient AND vword = :vword AND word_reading = :word_reading", 0x60uLL);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  int64_t v64 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (v64 >= 0) {
    v31 = __p;
  }
  else {
    v31 = (void **)__p[0];
  }
  if (!sqlite3_prepare_v2(*a1, (const char *)v31, -1, &ppStmt, 0))
  {
    v32 = ppStmt;
    int v33 = sqlite3_bind_parameter_index(ppStmt, ":app");
    sqlite3_bind_text(v32, v33, a4, -1, 0);
    v34 = ppStmt;
    int v35 = sqlite3_bind_parameter_index(ppStmt, ":recipient");
    sqlite3_bind_text(v34, v35, a5, -1, 0);
    v36 = ppStmt;
    int v37 = sqlite3_bind_parameter_index(ppStmt, ":vword");
    sqlite3_bind_text(v36, v37, a3, -1, 0);
    v38 = ppStmt;
    int v39 = sqlite3_bind_parameter_index(ppStmt, ":word_reading");
    v40 = (const char *)(v67 ? v67 : v68);
    sqlite3_bind_text(v38, v39, v40, -1, 0);
    uint64_t v41 = sqlite3_step(ppStmt);
    sqlite3_finalize(ppStmt);
    if (v41 != 101)
    {
      CFStringRef v59 = CFStringCreateWithFormat(0, 0, @"VulgarWordUsageDatabase: Error evaluating an UPDATE usage_count statement: %d", v41);
      v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
      sub_19E0B2750(v41, v59, a9);
      if (v59) {
        CFRelease(v59);
      }
      goto LABEL_43;
    }
  }
  if (a7)
  {
    sub_19E0413C8(&v62, "UPDATE vword_usage SET last_use_timestamp = :last_use_timestamp WHERE app = :app AND recipient = :recipient AND vword = :vword AND word_reading = :word_reading");
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v42 = &v62;
    }
    else {
      v42 = (std::string *)v62.__r_.__value_.__r.__words[0];
    }
    if (!sqlite3_prepare_v2(*a1, (const char *)v42, -1, &ppStmt, 0))
    {
      v43 = ppStmt;
      int v44 = sqlite3_bind_parameter_index(ppStmt, ":last_use_timestamp");
      sqlite3_bind_double(v43, v44, *(double *)&a6);
      v45 = ppStmt;
      int v46 = sqlite3_bind_parameter_index(ppStmt, ":app");
      sqlite3_bind_text(v45, v46, a4, -1, 0);
      v47 = ppStmt;
      int v48 = sqlite3_bind_parameter_index(ppStmt, ":recipient");
      sqlite3_bind_text(v47, v48, a5, -1, 0);
      v49 = ppStmt;
      int v50 = sqlite3_bind_parameter_index(ppStmt, ":vword");
      sqlite3_bind_text(v49, v50, a3, -1, 0);
      v51 = ppStmt;
      int v52 = sqlite3_bind_parameter_index(ppStmt, ":word_reading");
      v53 = (const char *)(v67 ? v67 : v68);
      sqlite3_bind_text(v51, v52, v53, -1, 0);
      uint64_t v54 = sqlite3_step(ppStmt);
      sqlite3_finalize(ppStmt);
      if (v54 != 101)
      {
        CFStringRef v60 = CFStringCreateWithFormat(0, 0, @"VulgarWordUsageDatabase: Error evaluating an UPDATE last_use_timestamp statement: %d", v54);
        sub_19E0B2750(v54, v60, a9);
        if (v60) {
          CFRelease(v60);
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        goto LABEL_43;
      }
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v55 = sqlite3_exec(*a1, "COMMIT", 0, 0, 0);
  unsigned int v56 = v55;
  if (!v55)
  {
    uint64_t v18 = 1;
    goto LABEL_44;
  }
  CFStringRef v57 = CFStringCreateWithFormat(0, 0, @"VulgarWordUsageDatabase: Error committing a transaction: %d", v55);
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
  sub_19E0B2750(v56, v57, a9);
  if (v57) {
    CFRelease(v57);
  }
LABEL_43:
  uint64_t v18 = 0;
LABEL_44:
  if (SHIBYTE(v64) < 0) {
    operator delete(__p[0]);
  }
LABEL_46:
  if (v67 && v66[6] == 1) {
    free(v67);
  }
  return v18;
}

void sub_19E0B3028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,void *a29)
{
  if (a2) {
    sub_19E04137C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0B3128()
{
}

BOOL sub_19E0B317C(sqlite3 *a1, const char *a2, CFDictionaryRef theDict, CFErrorRef *a4)
{
  v21[2] = *MEMORY[0x1E4F143B8];
  sub_19E0B26DC((uint64_t)v19, theDict);
  ppStmt = 0;
  uint64_t v7 = sqlite3_prepare_v2(a1, "SELECT COUNT(*) FROM vword_usage WHERE vword = :vword AND word_reading = :word_reading AND usage_count >= 3", -1, &ppStmt, 0);
  unsigned int v8 = v7;
  if (v7)
  {
    CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"VulgarWordUsageDatabase: Error compiling the SELECT COUNT(*) statement: %d", v7);
    sub_19E0B2750(v8, v9, a4);
    if (v9) {
      CFRelease(v9);
    }
    BOOL v10 = 0;
  }
  else
  {
    v11 = ppStmt;
    int v12 = sqlite3_bind_parameter_index(ppStmt, ":vword");
    sqlite3_bind_text(v11, v12, a2, -1, 0);
    v13 = ppStmt;
    int v14 = sqlite3_bind_parameter_index(ppStmt, ":word_reading");
    if (v20) {
      uint64_t v15 = (const char *)v20;
    }
    else {
      uint64_t v15 = (const char *)v21;
    }
    sqlite3_bind_text(v13, v14, v15, -1, 0);
    if (sqlite3_step(ppStmt) == 100) {
      int v16 = sqlite3_column_int(ppStmt, 0);
    }
    else {
      int v16 = 0;
    }
    sqlite3_finalize(ppStmt);
    BOOL v10 = v16 > 0;
  }
  if (v20 && v19[6] == 1) {
    free(v20);
  }
  return v10;
}

void sub_19E0B3314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15)
{
  if (a2) {
    sub_19E04137C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0B336C(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = sub_19E0A70C4((unsigned __int16 *)(v3 + 32), a2);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || sub_19E0A70C4(a2, (unsigned __int16 *)(v5 + 32))) {
    return v2;
  }
  return v5;
}

uint64_t *sub_19E0B33E8(uint64_t **a1, unsigned __int16 *a2, unsigned __int16 *a3, _DWORD *a4)
{
  result = sub_19E09D6CC((uint64_t)a1, &v13, a2);
  if (!*result)
  {
    unsigned int v8 = (uint64_t **)result;
    CFStringRef v9 = (char *)operator new(0x38uLL);
    BOOL v10 = v9 + 32;
    unint64_t v11 = *a3;
    if (v11 >= 0xF)
    {
      *BOOL v10 = v11;
      operator new[]();
    }
    *(_OWORD *)BOOL v10 = *(_OWORD *)a3;
    *((_DWORD *)v9 + 12) = *a4;
    uint64_t v12 = v13;
    return sub_19E05D5F8(a1, v12, v8, (uint64_t *)v9);
  }
  return result;
}

void sub_19E0B34D0(_Unwind_Exception *a1)
{
  sub_19E09D760(0, v1);
  _Unwind_Resume(a1);
}

void sub_19E0B34E8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v6 = atomic_load(byte_1E9457268);
  if (v6)
  {
    unsigned __int8 v7 = atomic_load(byte_1E94578A0);
    if (v7)
    {
      printf("\tAdding retro-active sort-key change hints!");
      putchar(10);
    }
    else
    {
      unsigned int v8 = sub_19E08D084();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E038000, v8, OS_LOG_TYPE_DEFAULT, "\tAdding retro-active sort-key change hints!", buf, 2u);
      }
    }
  }
  uint64_t v9 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v10 = 0;
    do
    {
      unsigned __int16 v18 = 0;
      int v30 = 0x100000;
      __int16 v31 = 0;
      char v32 = 0;
      int v33 = 0;
      char v34 = 0;
      int v25 = 0x100000;
      __int16 v26 = 0;
      char v27 = 0;
      uint64_t v28 = 0;
      char v29 = 0;
      sub_19E039858((uint64_t)buf, *(unsigned __int16 **)(v9 + 8 * v10));
      unsigned int v11 = 0;
      for (i = 0; ; unsigned int v11 = HIWORD(i))
      {
        unsigned int v12 = v21;
        if (!v21)
        {
          sub_19E0398F4((unsigned __int16 *)buf);
          unsigned int v12 = v21;
        }
        if (v11 >= v12) {
          break;
        }
        unsigned int v13 = sub_19E0DE8C0((uint64_t)buf);
        sub_19E0B14D0((unsigned __int16 *)&v25, v13);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, int *))(*(void *)a2 + 8))(&v16, a2, &v25);
        if (v18 && !sub_19E0A7064((unsigned __int16 *)&v16, &v18))
        {
          uint64_t v14 = *(void *)(a3 + 24);
          if (!v14) {
            sub_19E0483E0();
          }
          (*(void (**)(uint64_t, unsigned __int16 *, int *))(*(void *)v14 + 48))(v14, &v18, &v30);
        }
        sub_19E03CD54((uint64_t)&v30, (unsigned __int16 *)&v25);
        sub_19E0A6FD4(&v18, (unsigned __int16 *)&v16);
        if ((unsigned __int16)v16 >= 0xFu)
        {
          if (v17) {
            MEMORY[0x19F3BA6E0](v17, 0x1000C8077774924);
          }
        }
      }
      if (v23) {
        BOOL v15 = v22 == 1;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15) {
        free(v23);
      }
      if (v28 && v27 == 1) {
        free(v28);
      }
      if (v33 && v32 == 1) {
        free(v33);
      }
      if (v18 >= 0xFu && v19) {
        MEMORY[0x19F3BA6E0](v19, 0x1000C8077774924);
      }
      ++v10;
      uint64_t v9 = *a1;
    }
    while (v10 < (a1[1] - *a1) >> 3);
  }
}

void sub_19E0B379C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9, uint64_t a10, unsigned __int16 a11, uint64_t a12, int a13, __int16 a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,void *a23)
{
  if (a23 && a22 == 1) {
    free(a23);
  }
  int v25 = *(void **)(v23 - 80);
  if (v25 && *(unsigned char *)(v23 - 82) == 1) {
    free(v25);
  }
  if (a11 >= 0xFu)
  {
    if (a12) {
      MEMORY[0x19F3BA6E0](a12, 0x1000C8077774924);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0B3858(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_19E0B38DC(uint64_t **a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  unsigned __int8 v7 = (uint64_t **)sub_19E09D6CC((uint64_t)a1, &v17, a2);
  if (!*v7)
  {
    unsigned int v8 = v7;
    uint64_t v9 = (char *)operator new(0x78uLL);
    v15[0] = v9;
    v15[1] = a1 + 1;
    char v16 = 0;
    unint64_t v10 = v9 + 32;
    unint64_t v11 = *a3;
    if (v11 >= 0xF)
    {
      *unint64_t v10 = v11;
      operator new[]();
    }
    *(_OWORD *)unint64_t v10 = *(_OWORD *)a3;
    *((void *)v9 + 6) = *(void *)a4;
    *(_OWORD *)(v9 + 56) = *(_OWORD *)(a4 + 8);
    *((void *)v9 + 9) = *(void *)(a4 + 24);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    long long v12 = *(_OWORD *)(a4 + 32);
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
    uint64_t v13 = *(void *)(a4 + 48);
    uint64_t v14 = *(void *)(a4 + 56);
    *(void *)(a4 + 40) = 0;
    *(void *)(a4 + 48) = 0;
    *(void *)(v9 + 109) = *(void *)(a4 + 61);
    *((_OWORD *)v9 + 5) = v12;
    *((void *)v9 + 12) = v13;
    *((void *)v9 + 13) = v14;
    char v16 = 1;
    sub_19E05D5F8(a1, v17, v8, (uint64_t *)v9);
    v15[0] = 0;
    sub_19E0D020C((uint64_t)v15);
  }
}

void sub_19E0B39F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_19E0B3A08(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  a1[1] = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  sub_19E05D05C(a1 + 1, (const void *)a2[1], a2[2], a2[2] - a2[1]);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  sub_19E05D05C(a1 + 4, (const void *)a2[4], a2[5], a2[5] - a2[4]);
  uint64_t v5 = a2[7];
  *(void *)((char *)a1 + 61) = *(uint64_t *)((char *)a2 + 61);
  a1[7] = v5;
  return a1;
}

void sub_19E0B3A88(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0B3AA4()
{
}

void sub_19E0B3B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E05B8E0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0B3B5C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (void *)a2;
  size_t v3 = result[5];
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E04147C();
  }
  uint64_t v4 = (const void *)result[4];
  if (v3 >= 0x17)
  {
    uint64_t v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v5 = v3 | 7;
    }
    uint64_t v6 = v5 + 1;
    unsigned __int8 v7 = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    *uint64_t v2 = v7;
    uint64_t v2 = v7;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = v3;
    if (!v3) {
      goto LABEL_9;
    }
  }
  result = memmove(v2, v4, v3);
LABEL_9:
  *((unsigned char *)v2 + v3) = 0;
  return result;
}

uint64_t sub_19E0B3BF8(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09DED8;
  sub_19E05D848(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_19E0B3C50(void *a1)
{
  if (a1)
  {
    sub_19E0B3C50(*a1);
    sub_19E0B3C50(a1[1]);
    sub_19E0CE5C0(a1 + 4);
    operator delete(a1);
  }
}

_OWORD *sub_19E0B3CA4(uint64_t **a1, void *a2, _OWORD **a3)
{
  uint64_t v5 = (void **)sub_19E0B4028((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unsigned __int8 v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    unsigned int v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *unsigned int v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((void *)v6 + 7) = 0;
    sub_19E05D5F8(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *sub_19E0B3D34(uint64_t **a1, unsigned __int16 *a2, unsigned __int16 *a3, _DWORD *a4)
{
  result = sub_19E09D6CC((uint64_t)a1, &v13, a2);
  if (!*result)
  {
    unsigned int v8 = (uint64_t **)result;
    uint64_t v9 = (char *)operator new(0x38uLL);
    unint64_t v10 = v9 + 32;
    unint64_t v11 = *a3;
    if (v11 >= 0xF)
    {
      *unint64_t v10 = v11;
      operator new[]();
    }
    *(_OWORD *)unint64_t v10 = *(_OWORD *)a3;
    *((_DWORD *)v9 + 12) = *a4;
    uint64_t v12 = v13;
    return sub_19E05D5F8(a1, v12, v8, (uint64_t *)v9);
  }
  return result;
}

void sub_19E0B3E1C(_Unwind_Exception *a1)
{
  sub_19E09D760(0, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0B3E34(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      unsigned __int8 v7 = (void *)v3;
      if (*(void *)a1 == v3) {
        goto LABEL_9;
      }
      unsigned int v8 = *(void **)(a1 + 8);
      uint64_t v9 = (void *)v3;
      if (v6)
      {
        do
        {
          unsigned __int8 v7 = v8;
          unsigned int v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          unsigned __int8 v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      if ((sub_19E05EE24(v7 + 4, v5 + 4) & 0x80) != 0)
      {
LABEL_9:
        if (!v6)
        {
          unsigned __int16 v18 = (void *)v3;
          unint64_t v11 = (uint64_t **)v3;
LABEL_14:
          uint64_t v12 = (uint64_t *)operator new(0x40uLL);
          uint64_t v13 = v12 + 4;
          if (*((char *)v5 + 55) < 0)
          {
            sub_19E03FA9C(v13, (void *)v5[4], v5[5]);
          }
          else
          {
            long long v14 = *((_OWORD *)v5 + 2);
            v12[6] = v5[6];
            *(_OWORD *)uint64_t v13 = v14;
          }
          v12[7] = v5[7];
          sub_19E05D5F8((uint64_t **)a1, (uint64_t)v18, v11, v12);
          goto LABEL_18;
        }
        unsigned __int16 v18 = v7;
        unint64_t v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        unint64_t v11 = (uint64_t **)sub_19E0B4028(a1, &v18, v5 + 4);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_18:
      BOOL v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          char v16 = v15;
          BOOL v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          char v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          uint64_t v5 = v16;
        }
        while (!v10);
      }
      uint64_t v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_19E0B3FAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  sub_19E0672C4(*v2);
  _Unwind_Resume(a1);
}

void *sub_19E0B3FD0(void *a1)
{
  *a1 = &unk_1EF099A58;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_19E0420B4(a1 + 2);
  return a1;
}

void *sub_19E0B4028(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unsigned __int8 v7 = v4;
        unsigned int v8 = v4 + 4;
        if ((sub_19E05EE24(a3, v4 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((sub_19E05EE24(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unsigned __int8 v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *sub_19E0B40BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  result = (void *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    v7[0] = &unk_1EF09A3D8;
    v7[1] = a3;
    v7[3] = v7;
    sub_19E042830(a1 + 2, a2, (uint64_t)v7);
    return sub_19E0B4198(v7);
  }
  return result;
}

void sub_19E0B4184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B4198((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0B4198(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E0B421C()
{
  return &unk_1EF0996D8;
}

uint64_t sub_19E0B4228(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0996D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0B4268(uint64_t a1, char *a2)
{
  return sub_19E044B84(*(void *)(a1 + 8), *a2);
}

uint64_t sub_19E0B427C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A3D8;
  a2[1] = v2;
  return result;
}

void *sub_19E0B42A0(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A3D8;
  result[1] = v3;
  return result;
}

void sub_19E0B42E8()
{
}

void *sub_19E0B4300(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  result = (void *)(*(uint64_t (**)(unint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    v9[0] = &unk_1EF09A380;
    v9[1] = a1;
    v9[2] = a3;
    v9[3] = v9;
    sub_19E0427A4(a1 + 2, a2, (uint64_t)v9, a4);
    return sub_19E0B43E4(v9);
  }
  return result;
}

void sub_19E0B43D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0B43E4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E0B4468()
{
  return &unk_1EF0996C8;
}

uint64_t sub_19E0B4474(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0996C8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0B44B4(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  int v8 = sub_19E0B4518(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);

  return sub_19E06E4F4(v9, v8, v6, v7, a4);
}

unint64_t sub_19E0B4518(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (v2 <= a2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_19E062A78(exception, "Marisa Payload");
      __cxa_throw(exception, (struct type_info *)off_1E599B428, MEMORY[0x1E4FBA1D0]);
    }
    return *(unsigned int *)(*(void *)(a1 + 24) + 4 * a2);
  }
  return a2;
}

void sub_19E0B4588(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_19E0B45A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF09A380;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0B45CC(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1EF09A380;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0B4618()
{
}

uint64_t sub_19E0B4630(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 112))(a1)) {
    return 0;
  }
  unint64_t v8 = 0;
  uint64_t v6 = sub_19E04245C(a1 + 2, a2, (uint64_t *)&v8);
  if (v6) {
    *a3 = sub_19E0B4518((uint64_t)a1, v8);
  }
  return v6;
}

void sub_19E0B46C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
}

BOOL sub_19E0B46E0(uint64_t a1, void *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

double sub_19E0B46F4@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void *sub_19E0B4700(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  v6[0] = &unk_1EF09A430;
  v6[1] = a1;
  v6[2] = a4;
  v6[3] = v6;
  sub_19E04268C((unint64_t *)(a1 + 16), a2, a3, (uint64_t)v6, a5);
  return sub_19E0B43E4(v6);
}

void sub_19E0B4788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0B479C()
{
  return &unk_1EF0996E8;
}

uint64_t sub_19E0B47A8(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0996E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0B47E8(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  int v8 = sub_19E0B4518(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);

  return sub_19E06E4F4(v9, v8, v6, v7, a4);
}

__n128 sub_19E0B4854(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF09A430;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0B487C(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1EF09A430;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0B48C8()
{
}

void *sub_19E0B48E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09A488;
  v5[1] = a1;
  v5[2] = a4;
  v5[3] = v5;
  sub_19E042600((uint64_t *)(a1 + 16), a2, a3, (uint64_t)v5);
  return sub_19E0B43E4(v5);
}

void sub_19E0B4968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0B497C()
{
  return &unk_1EF0996F8;
}

uint64_t sub_19E0B4988(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0996F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0B49C8(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  int v8 = sub_19E0B4518(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);

  return sub_19E06E4F4(v9, v8, v6, v7, a4);
}

__n128 sub_19E0B4A34(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF09A488;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0B4A5C(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1EF09A488;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0B4AA8()
{
}

uint64_t sub_19E0B4AC0(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  unint64_t v8 = 0;
  uint64_t v6 = sub_19E0424E8((uint64_t *)(a1 + 16), a2, a3, (uint64_t *)&v8);
  if (v6) {
    *a4 = sub_19E0B4518(a1, v8);
  }
  return v6;
}

uint64_t sub_19E0B4B20(uint64_t *a1, void *a2, unint64_t a3)
{
  if (a3 >= 0xF)
  {
    if (*a2 == 0x2065766F6C206557 && *(void *)((char *)a2 + 7) == 0x2E61736972614D20)
    {
      sub_19E0421E0(a1 + 2, (uint64_t)a2, a3);
      return 1;
    }
  }
  else if (a3 < 4)
  {
    return 0;
  }
  uint64_t v7 = (char *)a2 + 4;
  uint64_t v8 = *(unsigned int *)a2;
  sub_19E0421E0(a1 + 2, (uint64_t)a2 + 4, v8);
  a1[3] = (uint64_t)&v7[v8];
  a1[4] = (a3 - v8 - 4) >> 2;
  return 1;
}

uint64_t sub_19E0B4BDC(uint64_t a1, uint64_t **a2, int **a3)
{
  __p = 0;
  v38 = 0;
  uint64_t v39 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (v6 - v5) != a3[1] - *a3) {
    __assert_rtn("build", "MarisaTrie.h", 61, "keys.size() == values.size()");
  }
  uint64_t v9 = sub_19E0B4E00(a1, v5, v6, &__p);
  if (v9)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 48);
    unint64_t v13 = (v12 - v11) >> 2;
    if (v10 <= v13)
    {
      if (v10 >= v13)
      {
LABEL_20:
        uint64_t v27 = *(void *)(a1 + 40);
        int64_t v28 = (char *)a2[1] - (char *)*a2;
        if (v28)
        {
          unint64_t v29 = v28 / 24;
          int v30 = *a3;
          __int16 v31 = (uint64_t *)__p;
          if (v29 <= 1) {
            unint64_t v29 = 1;
          }
          do
          {
            int v33 = *v30++;
            int v32 = v33;
            uint64_t v34 = *v31++;
            *(_DWORD *)(v27 + 4 * v34) = v32;
            --v29;
          }
          while (v29);
        }
        uint64_t v35 = (*(void *)(a1 + 48) - v27) >> 2;
        *(void *)(a1 + 24) = v27;
        *(void *)(a1 + 32) = v35;
        goto LABEL_25;
      }
      uint64_t v26 = v11 - 0x5555555555555554 * (a2[1] - *a2);
    }
    else
    {
      unint64_t v14 = v10 - v13;
      uint64_t v15 = *(void *)(a1 + 56);
      if (v10 - v13 > (v15 - v12) >> 2)
      {
        if (v10 >> 62) {
          sub_19E041BEC();
        }
        uint64_t v16 = v15 - v11;
        if (v16 >> 1 > v10) {
          unint64_t v10 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v10;
        }
        unsigned __int16 v18 = (char *)sub_19E068D84(v17);
        uint64_t v19 = *(char **)(a1 + 40);
        int v20 = *(char **)(a1 + 48);
        unsigned __int16 v21 = &v18[4 * v13];
        uint64_t v23 = &v18[4 * v22];
        bzero(v21, 4 * v14);
        int v24 = &v21[4 * v14];
        while (v20 != v19)
        {
          int v25 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          *((_DWORD *)v21 - 1) = v25;
          v21 -= 4;
        }
        *(void *)(a1 + 40) = v21;
        *(void *)(a1 + 48) = v24;
        *(void *)(a1 + 56) = v23;
        if (v19) {
          operator delete(v19);
        }
        goto LABEL_20;
      }
      bzero(*(void **)(a1 + 48), 4 * v14);
      uint64_t v26 = v12 + 4 * v14;
    }
    *(void *)(a1 + 48) = v26;
    goto LABEL_20;
  }
LABEL_25:
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_19E0B4DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0B4E00(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  __p = 0;
  uint64_t v23 = 0;
  int v24 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        unint64_t v10 = (uint64_t *)*v6;
        uint64_t v9 = v6[1];
      }
      else
      {
        uint64_t v9 = *((unsigned __int8 *)v6 + 23);
        unint64_t v10 = v6;
      }
      if (v8 >= v24)
      {
        uint64_t v12 = (v8 - v7) >> 4;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60) {
          sub_19E041BEC();
        }
        uint64_t v14 = v24 - v7;
        if ((v24 - v7) >> 3 > v13) {
          unint64_t v13 = v14 >> 3;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        uint64_t v16 = (char *)sub_19E063BBC(v15);
        unsigned __int16 v18 = &v16[16 * v12];
        *(void *)unsigned __int16 v18 = v10;
        *((void *)v18 + 1) = v9;
        uint64_t v19 = (char *)__p;
        uint64_t v7 = v18;
        if (v8 != __p)
        {
          do
          {
            *((_OWORD *)v7 - 1) = *((_OWORD *)v8 - 1);
            v7 -= 16;
            v8 -= 16;
          }
          while (v8 != v19);
          uint64_t v8 = v19;
        }
        uint64_t v11 = v18 + 16;
        __p = v7;
        int v24 = &v16[16 * v17];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *(void *)uint64_t v8 = v10;
        *((void *)v8 + 1) = v9;
        uint64_t v11 = v8 + 16;
      }
      uint64_t v23 = v11;
      v6 += 3;
      uint64_t v8 = (char *)v11;
    }
    while (v6 != a3);
  }
  sub_19E0420B8((uint64_t *)(a1 + 16), (uint64_t *)&__p, a4, *(_DWORD *)(a1 + 8));
  if (__p)
  {
    uint64_t v23 = __p;
    operator delete(__p);
  }
  return 1;
}

uint64_t sub_19E0B4FB0(uint64_t a1, uint64_t **a2)
{
  return sub_19E0B4E00(a1, *a2, a2[1], 0);
}

uint64_t sub_19E0B4FC0@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  sub_19E0538DC((uint64_t)v14);
  sub_19E04238C(a1 + 2, (uint64_t)&v15);
  sub_19E05EEA4(__p, (uint64_t)v16);
  uint64_t v4 = a1[4];
  if (v4)
  {
    int v5 = HIBYTE(v13);
    if (v13 < 0) {
      int v5 = (int)__p[1];
    }
    *(_DWORD *)__s = v5;
    uint64_t v6 = (const std::string::value_type *)a1[3];
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    std::string::append(a2, __s, 4uLL);
    if (v13 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if (v13 >= 0) {
      std::string::size_type v8 = HIBYTE(v13);
    }
    else {
      std::string::size_type v8 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v7, v8);
    std::string::append(a2, v6, 4 * v4);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v13;
  }
  v14[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v15 = v9;
  v16[0] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19F3BA690](&v18);
}

void sub_19E0B51C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void *sub_19E0B5204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09A698;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E06C7E4(v5);
}

void sub_19E0B52A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E06C7E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0B52BC()
{
  return &unk_1EF099758;
}

uint64_t sub_19E0B52C8(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF099758)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0B5308(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0B532C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A698;
  a2[1] = v2;
  return result;
}

void *sub_19E0B5350(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A698;
  result[1] = v3;
  return result;
}

void sub_19E0B5398()
{
}

void *sub_19E0B53B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09A6F0;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E06C7E4(v5);
}

void sub_19E0B5454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E06C7E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0B5468()
{
  return &unk_1EF099768;
}

uint64_t sub_19E0B5474(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF099768)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0B54B4(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0B54D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A6F0;
  a2[1] = v2;
  return result;
}

void *sub_19E0B54FC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A6F0;
  result[1] = v3;
  return result;
}

void sub_19E0B5544()
{
}

uint64_t sub_19E0B555C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0B55B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = 0;
  int v44 = 0;
  unint64_t v45 = 0;
  __p = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  if (a2)
  {
    uint64_t v8 = a2;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      int64_t v13 = *(void **)(a3 + 8 * i);
      size_t v14 = *(void *)(a4 + 8 * i);
      size_t v38 = v14;
      uint64_t v39 = v13;
      uint64_t v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        uint64_t v16 = (void *)sub_19E0B5820(&v43, &v39, &v38);
      }
      else
      {
        sub_19E057A94(v44, v13, v14);
        uint64_t v16 = v15 + 3;
      }
      int v44 = v16;
      if (a5)
      {
        uint64_t v17 = *(void *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v19 = v10;
          uint64_t v20 = a5;
          uint64_t v21 = v8;
          uint64_t v22 = a3;
          uint64_t v23 = a4;
          uint64_t v24 = (v11 - v9) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            sub_19E041BEC();
          }
          unint64_t v26 = v19 - (void)v9;
          unint64_t v27 = (uint64_t)(v19 - (void)v9) >> 1;
          if (v27 > v25) {
            unint64_t v25 = v27;
          }
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v25;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_19E068D84(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          int v30 = (_DWORD *)(v28 + 4 * v24);
          *int v30 = v17;
          uint64_t v18 = v30 + 1;
          while (v11 != v9)
          {
            int v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--int v30 = v31;
          }
          __p = v30;
          uint64_t v41 = v18;
          unint64_t v32 = v28 + 4 * v29;
          unint64_t v42 = v32;
          if (v9) {
            operator delete(v9);
          }
          uint64_t v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          uint64_t v8 = v21;
          a5 = v20;
          unint64_t v10 = v32;
        }
        else
        {
          *(_DWORD *)uint64_t v11 = v17;
          uint64_t v18 = v11 + 4;
        }
        uint64_t v41 = v18;
        uint64_t v11 = (char *)v18;
      }
    }
  }
  uint64_t v33 = *a1;
  if (a5) {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 64))();
  }
  else {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 56))();
  }
  uint64_t v35 = v34;
  if (__p)
  {
    uint64_t v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19E041AD0((void ***)&__p);
  return v35;
}

void sub_19E0B57DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19E041AD0((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0B5820(uint64_t *a1, void **a2, size_t *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E041BEC();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  unint64_t v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_19E041C04(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v15 = v12;
  uint64_t v16 = &v12[24 * v5];
  uint64_t v17 = v16;
  uint64_t v18 = &v12[24 * v11];
  sub_19E057A94(v16, *a2, *a3);
  uint64_t v17 = v16 + 24;
  sub_19E041B74(a1, &v15);
  uint64_t v13 = a1[1];
  sub_19E041D6C((uint64_t)&v15);
  return v13;
}

void sub_19E0B591C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E041D6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E0B5930(void *a1)
{
  sub_19E0B3FD0(a1);

  JUMPOUT(0x19F3BA710);
}

void *sub_19E0B596C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E0B40BC((uint64_t *)(a1 + 8), a2, a3);
}

void *sub_19E0B5974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF09A640;
  v8[1] = a3;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0B4300((unint64_t *)(a1 + 8), a2, (uint64_t)v9, a4);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0B5A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0B5A50(uint64_t a1, void *a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    uint64_t v5 = operator new(0x28uLL);
    uint64_t v6 = v5;
    *uint64_t v5 = &unk_1EF099EB0;
    if (v3 == a2)
    {
      v5[4] = v5 + 1;
      (*(void (**)(void *))(*a2 + 24))(a2);
    }
    else
    {
      v5[4] = v3;
      a2[3] = 0;
    }
    *(void *)(a1 + 24) = v6;
  }
  return a1;
}

void *sub_19E0B5B00(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E0B5B84()
{
  return &unk_1EF0995D0;
}

uint64_t sub_19E0B5B90(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0995D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0B5BD0(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E0B5BE8(*(void *)(a1 + 32), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0B5BE8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[0] = a3;
  v7[1] = a4;
  int v6 = a2;
  if (!a1) {
    sub_19E0483E0();
  }
  return (*(uint64_t (**)(uint64_t, int *, void *, uint64_t))(*(void *)a1 + 48))(a1, &v6, v7, a5);
}

void sub_19E0B5C44(void *a1)
{
  sub_19E0B5B00(a1 + 1);

  operator delete(a1);
}

void *sub_19E0B5C80(uint64_t a1)
{
  return sub_19E0B5B00((void *)(a1 + 8));
}

uint64_t sub_19E0B5C88(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF099EB0;
  return sub_19E0B5CB4((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_19E0B5CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_19E0B5D4C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1EF099EB0;
  sub_19E0B5CB4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19E0B5DA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E0B5DB4(void *a1)
{
  *a1 = &unk_1EF099EB0;
  sub_19E0B5B00(a1 + 1);

  JUMPOUT(0x19F3BA710);
}

void *sub_19E0B5E18(void *a1)
{
  *a1 = &unk_1EF099EB0;
  sub_19E0B5B00(a1 + 1);
  return a1;
}

void *sub_19E0B5E5C()
{
  return &unk_1EF099748;
}

uint64_t sub_19E0B5E68(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF099748)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0B5EA8(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4 = *a2 & 0xFFFFFF;
  if (v4 != 0xFFFFFF) {
    return sub_19E0B5BE8(*(void *)(*(void *)(result + 8) + 24), v4, *a3, a3[1], a4);
  }
  return result;
}

uint64_t sub_19E0B5EE0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A640;
  a2[1] = v2;
  return result;
}

void *sub_19E0B5F04(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A640;
  result[1] = v3;
  return result;
}

void sub_19E0B5F4C()
{
}

uint64_t sub_19E0B5F64(uint64_t a1, uint64_t a2, int *a3)
{
  int v6 = 0;
  int v4 = sub_19E0B4630((uint64_t *)(a1 + 8), a2, &v6);
  uint64_t result = 0;
  if (v4)
  {
    if ((v6 & 0xFFFFFF) == 0xFFFFFF)
    {
      return 0;
    }
    else
    {
      *a3 = v6 & 0xFFFFFF;
      return 1;
    }
  }
  return result;
}

void sub_19E0B5FCC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
}

BOOL sub_19E0B5FE4(uint64_t a1, void *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

double sub_19E0B5FF8@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void *sub_19E0B6004(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  v10[0] = &unk_1EF09A640;
  v10[1] = a4;
  v10[3] = v10;
  sub_19E0B5A50((uint64_t)v11, v10);
  sub_19E0B4700(a1 + 8, a2, a3, (uint64_t)v11, a5);
  sub_19E06C7E4(v11);
  return sub_19E0B5B00(v10);
}

void sub_19E0B60C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0B60E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF09A640;
  v8[1] = a4;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0B48E0(a1 + 8, a2, a3, (uint64_t)v9);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0B61A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0B61C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 104))(v10);
  (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t, uint64_t))(*(void *)a1 + 120))(v12, a1, v10, a2, a3);
  if (v11 < 0) {
    operator delete(v10[1]);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 128))(a1, v12, a4);
  if (v13 < 0) {
    operator delete(v12[1]);
  }
  return v8;
}

void sub_19E0B62B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0B62E8(uint64_t a1, void *a2, unint64_t a3)
{
  return sub_19E0B4B20((uint64_t *)(a1 + 8), a2, a3);
}

uint64_t sub_19E0B62F0(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2) {
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  }
  uint64_t v5 = a1;
  v77[0] = 0;
  v77[1] = 0;
  v76 = v77;
  if (v4 == v3)
  {
    v74 = 0;
    uint64_t v75 = 0;
    v73 = (std::string *)&v74;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = a1 + 72;
    do
    {
      std::string::size_type v9 = 0;
      uint64_t v10 = v3 + 24 * v7;
      while (1)
      {
        std::string::size_type v11 = *(char *)(v10 + 23) < 0 ? *(void *)(v10 + 8) : *(unsigned __int8 *)(v10 + 23);
        if (v9 > v11) {
          break;
        }
        double v12 = *(double *)sub_19E0B6A0C(v8, (void *)v10);
        std::string::basic_string(&v78, (const std::string *)v10, 0, v9, (std::allocator<char> *)&v73);
        v73 = &v78;
        char v13 = (double *)sub_19E0B3CA4((uint64_t **)&v76, &v78, (_OWORD **)&v73);
        v13[7] = v12 + v13[7];
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        ++v9;
      }
      if (*(_DWORD *)(*a3 + 4 * v7) == 0xFFFFFF)
      {
        uint64_t v67 = 0;
        goto LABEL_109;
      }
      ++v7;
      uint64_t v3 = *a2;
      uint64_t v14 = a2[1];
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((v14 - *a2) >> 3));
    v74 = 0;
    uint64_t v75 = 0;
    v73 = (std::string *)&v74;
    if (v14 != v3)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = v3 + v15;
        int v18 = *(_DWORD *)(*a3 + 4 * v16);
        double v19 = *(double *)sub_19E0B6A0C((uint64_t)&v76, (void *)(v3 + v15));
        uint64_t v20 = *(unsigned __int8 *)(v17 + 23);
        if ((v20 & 0x80u) != 0) {
          uint64_t v20 = *(void *)(v17 + 8);
        }
        std::string::basic_string(&v78, (const std::string *)v17, 0, v20 - 1, (std::allocator<char> *)&v72);
        double v21 = *(double *)sub_19E0B6A0C((uint64_t)&v76, &v78);
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        uint64_t v22 = sub_19E0B6A4C((uint64_t **)&v73, (void *)v17, v17);
        int v23 = (int)(sqrt(v19 / v21) * 255.0);
        if (v23 >= 255) {
          int v24 = 255;
        }
        else {
          int v24 = v23;
        }
        if (v23) {
          BOOL v25 = 1;
        }
        else {
          BOOL v25 = v19 / v21 <= 0.0;
        }
        int v26 = v24 << 24;
        if (!v25) {
          int v26 = 0x1000000;
        }
        *((_DWORD *)v22 + 14) = v26 & 0xFF000000 | v18 & 0xFFFFFF;
        ++v16;
        uint64_t v3 = *a2;
        uint64_t v27 = a2[1];
        v15 += 24;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((v27 - *a2) >> 3));
      if (v27 != v3)
      {
        unint64_t v28 = 0;
        do
        {
          std::string::size_type v29 = 0;
          int v30 = (const std::string *)(v3 + 24 * v28);
          while (1)
          {
            std::string::size_type v31 = SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0
                ? v30->__r_.__value_.__l.__size_
                : HIBYTE(v30->__r_.__value_.__r.__words[2]);
            if (v29 >= v31 - 1) {
              break;
            }
            std::string::basic_string(&v72, v30, 0, v29, (std::allocator<char> *)&v78);
            unint64_t v32 = v30;
            if (SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0) {
              unint64_t v32 = (const std::string *)v30->__r_.__value_.__r.__words[0];
            }
            sub_19E0B6B6C((uint64_t)&__str, (const void **)&v72.__r_.__value_.__l.__data_, v32->__r_.__value_.__s.__data_[v29]);
            uint64_t v33 = v74;
            if (!v74) {
              goto LABEL_114;
            }
            uint64_t v34 = &v74;
            do
            {
              uint64_t v35 = v34;
              v36 = v33 + 32;
              int v37 = (char)sub_19E05EE24((void *)v33 + 4, &__str);
              if (v37 >= 0) {
                size_t v38 = v33;
              }
              else {
                size_t v38 = v33 + 8;
              }
              if (v37 >= 0) {
                uint64_t v34 = (char **)v33;
              }
              else {
                uint64_t v34 = v35;
              }
              uint64_t v33 = *(char **)v38;
            }
            while (*(void *)v38);
            if (v34 == &v74
              || (v37 >= 0 ? (uint64_t v39 = v36) : (uint64_t v39 = (char *)(v35 + 4)), (sub_19E05EE24(&__str, v39) & 0x80) != 0))
            {
LABEL_114:
              double v40 = *(double *)sub_19E0B6A0C((uint64_t)&v76, &v72);
              if (v40 > *(double *)sub_19E0B6A0C((uint64_t)&v76, &__str))
              {
                double v41 = *(double *)sub_19E0B6A0C((uint64_t)&v76, &__str);
                std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = __str.__r_.__value_.__l.__size_;
                }
                std::string::basic_string(&v78, &__str, 0, size - 1, (std::allocator<char> *)v79);
                double v43 = *(double *)sub_19E0B6A0C((uint64_t)&v76, &v78);
                if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v78.__r_.__value_.__l.__data_);
                }
                int v44 = sub_19E0B6A4C((uint64_t **)&v73, &__str, (uint64_t)&__str);
                int v45 = (int)(sqrt(v41 / v43) * 255.0);
                if (v45 >= 255) {
                  int v46 = 255;
                }
                else {
                  int v46 = v45;
                }
                if (v45) {
                  BOOL v47 = 1;
                }
                else {
                  BOOL v47 = v41 / v43 <= 0.0;
                }
                int v48 = (v46 << 24) | 0xFFFFFF;
                if (!v47) {
                  int v48 = 0x1FFFFFF;
                }
                *((_DWORD *)v44 + 14) = v48;
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v72.__r_.__value_.__l.__data_);
            }
            ++v29;
          }
          ++v28;
          uint64_t v3 = *a2;
        }
        while (v28 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      }
    }
    uint64_t v5 = a1;
  }
  memset(&v78, 0, sizeof(v78));
  memset(&v72, 0, sizeof(v72));
  v49 = (uint64_t *)v73;
  if (v73 != (std::string *)&v74)
  {
    int v50 = 0;
    v51 = 0;
    std::string::size_type v52 = 0;
    do
    {
      v53 = (long long *)(v49 + 4);
      uint64_t v54 = (_OWORD *)v78.__r_.__value_.__l.__size_;
      if (v78.__r_.__value_.__l.__size_ >= v78.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v56 = sub_19E0B6BF0((uint64_t *)&v78, v53);
      }
      else
      {
        if (*((char *)v49 + 55) < 0)
        {
          sub_19E03FA9C((unsigned char *)v78.__r_.__value_.__l.__size_, (void *)v49[4], v49[5]);
        }
        else
        {
          long long v55 = *v53;
          *(void *)(v78.__r_.__value_.__l.__size_ + 16) = v49[6];
          *uint64_t v54 = v55;
        }
        std::string::size_type v56 = (std::string::size_type)v54 + 24;
      }
      v78.__r_.__value_.__l.__size_ = v56;
      if ((unint64_t)v50 >= v52)
      {
        uint64_t v57 = (v50 - v51) >> 2;
        unint64_t v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v52 - (void)v51) >> 1 > v58) {
          unint64_t v58 = (uint64_t)(v52 - (void)v51) >> 1;
        }
        if (v52 - (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v58;
        }
        if (v59) {
          unint64_t v59 = (unint64_t)sub_19E068D84(v59);
        }
        else {
          uint64_t v60 = 0;
        }
        v61 = (char *)(v59 + 4 * v57);
        *(_DWORD *)v61 = *((_DWORD *)v49 + 14);
        std::string::size_type v62 = (std::string::size_type)(v61 + 4);
        while (v50 != v51)
        {
          int v63 = *((_DWORD *)v50 - 1);
          v50 -= 4;
          *((_DWORD *)v61 - 1) = v63;
          v61 -= 4;
        }
        std::string::size_type v52 = v59 + 4 * v60;
        v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
        v72.__r_.__value_.__l.__size_ = v62;
        v72.__r_.__value_.__r.__words[2] = v52;
        if (v51) {
          operator delete(v51);
        }
        v51 = v61;
        int v50 = (char *)v62;
      }
      else
      {
        *(_DWORD *)int v50 = *((_DWORD *)v49 + 14);
        v50 += 4;
      }
      v72.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
      int64_t v64 = (char *)v49[1];
      if (v64)
      {
        do
        {
          v65 = (char **)v64;
          int64_t v64 = *(char **)v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          v65 = (char **)v49[2];
          BOOL v66 = *v65 == (char *)v49;
          v49 = (uint64_t *)v65;
        }
        while (!v66);
      }
      v49 = (uint64_t *)v65;
    }
    while (v65 != &v74);
  }
  uint64_t v67 = sub_19E0B4BDC(v5 + 8, (uint64_t **)&v78, (int **)&v72);
  if (v72.__r_.__value_.__r.__words[0]) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
  sub_19E041AD0((void ***)&v72);
  sub_19E0672C4(v74);
LABEL_109:
  sub_19E0672C4(v77[0]);
  return v67;
}

void sub_19E0B6930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void **__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (__p) {
    operator delete(__p);
  }
  __p = &a30;
  sub_19E041AD0(&__p);
  sub_19E0672C4(a25);
  sub_19E0672C4(a28);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0B6A0C(uint64_t a1, void *a2)
{
  uint64_t v2 = *sub_19E0B4028(a1, &v4, a2);
  if (!v2) {
    sub_19E062A1C("map::at:  key not found");
  }
  return v2 + 56;
}

uint64_t **sub_19E0B6A4C(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v5;
        uint64_t v8 = v5 + 4;
        if ((sub_19E05EE24(a2, v5 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v5 = *v6;
        std::string::size_type v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if ((sub_19E05EE24(v8, a2) & 0x80) == 0) {
        return v6;
      }
      std::string::size_type v9 = v6 + 1;
      uint64_t v5 = v6[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    std::string::size_type v9 = a1 + 1;
LABEL_9:
    uint64_t v10 = (char *)operator new(0x40uLL);
    std::string::size_type v11 = v10 + 32;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_19E03FA9C(v11, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)std::string::size_type v11 = *(_OWORD *)a3;
      *((void *)v10 + 6) = *(void *)(a3 + 16);
    }
    *((_DWORD *)v10 + 14) = 0;
    *(void *)uint64_t v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v6;
    *std::string::size_type v9 = (uint64_t *)v10;
    double v12 = (uint64_t *)**a1;
    char v13 = (uint64_t *)v10;
    if (v12)
    {
      *a1 = v12;
      char v13 = *v9;
    }
    sub_19E05D650(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v10;
}

void sub_19E0B6B58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0B6B6C(uint64_t a1, const void **a2, char a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t result = sub_19E0A3A9C(a1, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    unint64_t v7 = (char *)result;
  }
  else {
    unint64_t v7 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v7, v8, v5);
  }
  std::string::size_type v9 = &v7[v5];
  *std::string::size_type v9 = a3;
  v9[1] = 0;
  return result;
}

uint64_t sub_19E0B6BF0(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E041BEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_19E041C04(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::string::size_type v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E03FA9C(v11, *(void **)a2, *((void *)a2 + 1));
    std::string::size_type v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string::size_type v11 = v12;
  }
  unint64_t v16 = v11 + 24;
  sub_19E041B74(a1, v15);
  uint64_t v13 = a1[1];
  sub_19E041D6C((uint64_t)v15);
  return v13;
}

void sub_19E0B6D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E041D6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0B6D14(uint64_t a1, void *a2)
{
  __p = 0;
  int v18 = 0;
  unint64_t v19 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v8 = (v5 - v3) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v4 - (void)v3) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v4 - (void)v3) >> 1;
        }
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_19E068D84(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        long long v12 = (_DWORD *)(v10 + 4 * v8);
        *long long v12 = v6;
        uint64_t v7 = v12 + 1;
        while (v5 != v3)
        {
          int v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--long long v12 = v13;
        }
        unint64_t v4 = v10 + 4 * v11;
        __p = v12;
        unint64_t v19 = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)unint64_t v5 = v6;
        uint64_t v7 = v5 + 4;
      }
      int v18 = v7;
      ++v6;
      unint64_t v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    int v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19E0B6E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0B6EB4@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return sub_19E0B4FC0((uint64_t *)(a1 + 8), a2);
}

void *sub_19E0B6EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09A7F8;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0B6F60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0B6F74()
{
  return &unk_1EF099798;
}

uint64_t sub_19E0B6F80(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF099798)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0B6FC0(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0B6FE4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A7F8;
  a2[1] = v2;
  return result;
}

void *sub_19E0B7008(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A7F8;
  result[1] = v3;
  return result;
}

void sub_19E0B7050()
{
}

void *sub_19E0B7068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09A850;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0B710C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0B7120()
{
  return &unk_1EF0997A8;
}

uint64_t sub_19E0B712C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0997A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0B716C(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0B7190(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A850;
  a2[1] = v2;
  return result;
}

void *sub_19E0B71B4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A850;
  result[1] = v3;
  return result;
}

void sub_19E0B71FC()
{
}

uint64_t sub_19E0B7214(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0B7270(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = 0;
  int v44 = 0;
  unint64_t v45 = 0;
  __p = 0;
  double v41 = 0;
  unint64_t v42 = 0;
  if (a2)
  {
    uint64_t v8 = a2;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      int v13 = *(void **)(a3 + 8 * i);
      size_t v14 = *(void *)(a4 + 8 * i);
      size_t v38 = v14;
      uint64_t v39 = v13;
      uint64_t v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        unint64_t v16 = (void *)sub_19E0B5820(&v43, &v39, &v38);
      }
      else
      {
        sub_19E057A94(v44, v13, v14);
        unint64_t v16 = v15 + 3;
      }
      int v44 = v16;
      if (a5)
      {
        uint64_t v17 = *(void *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v19 = v10;
          uint64_t v20 = a5;
          uint64_t v21 = v8;
          uint64_t v22 = a3;
          uint64_t v23 = a4;
          uint64_t v24 = (v11 - v9) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            sub_19E041BEC();
          }
          unint64_t v26 = v19 - (void)v9;
          unint64_t v27 = (uint64_t)(v19 - (void)v9) >> 1;
          if (v27 > v25) {
            unint64_t v25 = v27;
          }
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v25;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_19E068D84(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          int v30 = (_DWORD *)(v28 + 4 * v24);
          *int v30 = v17;
          int v18 = v30 + 1;
          while (v11 != v9)
          {
            int v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--int v30 = v31;
          }
          __p = v30;
          double v41 = v18;
          unint64_t v32 = v28 + 4 * v29;
          unint64_t v42 = v32;
          if (v9) {
            operator delete(v9);
          }
          unint64_t v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          uint64_t v8 = v21;
          a5 = v20;
          unint64_t v10 = v32;
        }
        else
        {
          *(_DWORD *)uint64_t v11 = v17;
          int v18 = v11 + 4;
        }
        double v41 = v18;
        uint64_t v11 = (char *)v18;
      }
    }
  }
  uint64_t v33 = *a1;
  if (a5) {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 64))();
  }
  else {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 56))();
  }
  uint64_t v35 = v34;
  if (__p)
  {
    double v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19E041AD0((void ***)&__p);
  return v35;
}

void sub_19E0B7494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19E041AD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E0B74D8(uint64_t a1)
{
  *(void *)a1 = &unk_1EF099BA8;
  sub_19E0672C4(*(char **)(a1 + 80));
  sub_19E0B3FD0((void *)(a1 + 8));

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0B7548(uint64_t a1)
{
  *(void *)a1 = &unk_1EF099BA8;
  sub_19E0672C4(*(char **)(a1 + 80));
  sub_19E0B3FD0((void *)(a1 + 8));
  return a1;
}

void sub_19E0B7598(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  sub_19E0B778C((void **)(a1 + 8), 256, 256);
  sub_19E0B7898((void **)(a1 + 16), 4, 0);
  sub_19E0B7970((void **)(a1 + 24), 1, 0);
  sub_19E0B7A48((void **)(a1 + 32), 256, 0);
  sub_19E0B7B50((void **)(a1 + 40), 1, 0);
  uint64_t v3 = 0;
  **(void **)(a1 + 8) = 0xFFFFFFFF00000000;
  unint64_t v4 = 0xFFFFFFFE00000000;
  for (uint64_t i = 8; i != 2048; i += 8)
  {
    uint64_t v6 = v3;
    if (i == 2040) {
      unint64_t v7 = 0xFFFFFFFF00000000;
    }
    else {
      unint64_t v7 = v4;
    }
    if (!v3) {
      uint64_t v6 = 4294967041;
    }
    *(void *)(*v2 + i) = v7 | v6;
    v4 -= 0x100000000;
    --v3;
  }
  *(void *)(a1 + 60) = 0x10000000100;
  *(_DWORD *)(*(void *)(a1 + 40) + 16) = 1;
  **(_DWORD **)(a1 + 16) = 4;
  *(void *)(a1 + 68) = 0x100000004;
  *(void *)a1 = 0;
  for (uint64_t j = 40; j != 297; ++j)
    *(_WORD *)(a1 + 2 * j) = j - 39;
}

void *sub_19E0B76A4(void *a1)
{
  *a1 = &unk_1EF0A0E80;
  sub_19E0B76F0((uint64_t)(a1 + 1), 0);
  return a1;
}

void sub_19E0B76F0(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 8;
  if (*(_DWORD *)(a1 + 76))
  {
    *(void *)uint64_t v4 = 0;
    *(void *)(a1 + 16) = 0;
  }
  else if (*(void *)v4)
  {
    free(*(void **)v4);
  }
  unint64_t v5 = *(void **)(a1 + 16);
  if (v5) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6) {
    free(v6);
  }
  unint64_t v7 = *(void **)(a1 + 32);
  if (v7) {
    free(v7);
  }
  uint64_t v8 = *(void **)(a1 + 40);
  if (v8) {
    free(v8);
  }
  *(_DWORD *)(v4 + 64) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  if (a2) {
    sub_19E0B7598(a1);
  }
  *(_DWORD *)(a1 + 76) = 0;
}

void sub_19E0B778C(void **a1, int a2, int a3)
{
  uint64_t v6 = malloc_type_realloc(*a1, 8 * a2, 0x100004000313F17uLL);
  if (!v6)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v6;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9457950, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9457950))
  {
    qword_1E9457948 = 0;
    __cxa_guard_release(&qword_1E9457950);
  }
  if (a3 != a2)
  {
    unint64_t v7 = (uint64_t *)((char *)*a1 + 8 * a3);
    uint64_t v8 = qword_1E9457948;
    uint64_t v9 = 8 * a2 - 8 * a3;
    do
    {
      *v7++ = v8;
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_19E0B7898(void **a1, int a2, int a3)
{
  uint64_t v6 = a2;
  unint64_t v7 = (char *)malloc_type_realloc(*a1, a2, 0x100004077774924uLL);
  if (!v7)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v7;
  if (a3 != a2)
  {
    uint64_t v8 = &v7[a3];
    bzero(v8, v6 - a3);
  }
}

void sub_19E0B7970(void **a1, int a2, int a3)
{
  size_t v6 = 4 * a2;
  unint64_t v7 = (char *)malloc_type_realloc(*a1, v6, 0x100004052888210uLL);
  if (!v7)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v7;
  if (a3 != a2)
  {
    uint64_t v8 = &v7[4 * a3];
    bzero(v8, v6 - 4 * a3);
  }
}

void sub_19E0B7A48(void **a1, int a2, int a3)
{
  size_t v6 = malloc_type_realloc(*a1, 2 * a2, 0x1000040BDFB0063uLL);
  if (!v6)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v6;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9457960, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9457960))
  {
    word_1E9457958 = 0;
    __cxa_guard_release(&qword_1E9457960);
  }
  if (a3 != a2)
  {
    unint64_t v7 = (__int16 *)((char *)*a1 + 2 * a3);
    __int16 v8 = word_1E9457958;
    uint64_t v9 = 2 * a2 - 2 * a3;
    do
    {
      *v7++ = v8;
      v9 -= 2;
    }
    while (v9);
  }
}

__n128 sub_19E0B7B50(void **a1, int a2, int a3)
{
  size_t v6 = malloc_type_realloc(*a1, 20 * a2, 0x1000040A86A77D5uLL);
  if (!v6)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v6;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9457980, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9457980))
  {
    *(void *)&xmmword_1E9457968 = 0;
    DWORD2(xmmword_1E9457968) = 16843008;
    *(void *)((char *)&xmmword_1E9457968 + 12) = 0;
    __cxa_guard_release(&qword_1E9457980);
  }
  if (a3 != a2)
  {
    __int16 v8 = (__n128 *)((char *)*a1 + 20 * a3);
    uint64_t v9 = 20 * a2 - 20 * a3;
    do
    {
      __n128 result = (__n128)xmmword_1E9457968;
      v8[1].n128_u32[0] = dword_1E9457978;
      *__int16 v8 = result;
      __int16 v8 = (__n128 *)((char *)v8 + 20);
      v9 -= 20;
    }
    while (v9);
  }
  return result;
}

void sub_19E0B7C88(uint64_t a1)
{
}

uint64_t sub_19E0B7C94()
{
  return 0;
}

BOOL sub_19E0B7C9C(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  if (a3)
  {
    uint64_t v8 = a1 + 8;
    uint64_t v51 = 0;
    if (!*(void *)(a1 + 40) || !*(void *)(a1 + 48)) {
      sub_19E0B8090(a1 + 8);
    }
    int v9 = **(_DWORD **)(a1 + 16);
    if ((v9 & 0x80000000) == 0)
    {
      unint64_t v10 = 0;
      while (a3 != v10)
      {
        int v11 = sub_19E0B82FC(v8, &v51, (unsigned __int8 *)(a2 + v10));
        unint64_t v12 = v11;
        uint64_t v51 = v11;
        ++v10;
        int v9 = *(_DWORD *)(*(void *)(a1 + 16) + 8 * v11);
        if (v9 < 0) {
          goto LABEL_11;
        }
      }
      char v57 = 0;
      uint64_t v17 = (unsigned __int8 *)&v57;
      goto LABEL_34;
    }
    unint64_t v12 = 0;
    unint64_t v10 = 0;
LABEL_11:
    unint64_t v13 = -v9;
    if (v13 >= 4)
    {
      size_t v14 = (unsigned __int8 *)(*(void *)(a1 + 24) + v13);
      int v50 = &v14[-v10];
      unint64_t v15 = v10;
      if (v10 < a3)
      {
        unint64_t v15 = v10;
        while (1)
        {
          int v16 = *v14++;
          if (*(unsigned __int8 *)(a2 + v15) != v16) {
            break;
          }
          if (a3 == ++v15) {
            goto LABEL_19;
          }
        }
      }
      if (v15 == a3)
      {
LABEL_19:
        unint64_t v15 = a3;
        if (!v50[a3])
        {
          int v30 = v50;
          goto LABEL_53;
        }
      }
      v49 = a4;
      if (HIDWORD(v12))
      {
        uint64_t v51 = v12;
        unint64_t v18 = -(uint64_t)*(int *)(*(void *)(a1 + 16) + 8 * v12);
        if (v13 > v18)
        {
          do
          {
            unsigned __int8 v56 = *(unsigned char *)(*(void *)(a1 + 24) + v18);
            uint64_t v51 = (int)sub_19E0B82FC(v8, &v51, &v56);
            ++v18;
          }
          while (v13 != v18);
        }
      }
      unint64_t v19 = v15 - v10;
      if (v15 > v10)
      {
        uint64_t v20 = (unsigned __int8 *)(a2 + v10);
        unint64_t v21 = v19;
        do
        {
          unsigned __int8 v22 = *v20++;
          unsigned __int8 v55 = v22;
          uint64_t v51 = (int)sub_19E0B82FC(v8, &v51, &v55);
          --v21;
        }
        while (v21);
      }
      if (v50[v15])
      {
        unsigned __int8 v54 = v50[v15];
        *(_DWORD *)(*(void *)(a1 + 16) + 8 * (int)sub_19E0B82FC(v8, &v51, &v54)) = v9 + ~v19;
        v19 -= 4;
      }
      BOOL v23 = __CFADD__(v19, v13);
      unint64_t v24 = v19 + v13;
      a4 = v49;
      if (!v23)
      {
        do
        {
          int v25 = *(_DWORD *)(a1 + 80);
          unint64_t v26 = *(int **)(a1 + 32);
          int v27 = *v26 + 1;
          *unint64_t v26 = v27;
          if (v25 == v27)
          {
            int v28 = 2 * *(_DWORD *)(a1 + 80);
            *(_DWORD *)(a1 + 80) = v28;
            sub_19E0B7970((void **)(a1 + 32), v28, **(_DWORD **)(a1 + 32));
          }
          *(_DWORD *)(*(void *)(a1 + 32) + 4 * **(int **)(a1 + 32)) = v13;
          v13 += 5;
        }
        while (v13 <= v24);
      }
      if (v15 == a3)
      {
        unsigned __int8 v53 = 0;
        uint64_t v17 = &v53;
LABEL_34:
        uint64_t v29 = (char *)(*(void *)(a1 + 16) + 8 * (int)sub_19E0B82FC(v8, &v51, v17));
LABEL_54:
        *(_DWORD *)uint64_t v29 = *a4;
        return a3 != 0;
      }
      if (v50[v15])
      {
        unint64_t v10 = v15 + 1;
      }
      else
      {
        unsigned __int8 v53 = 0;
        int v31 = sub_19E0B82FC(v8, &v51, &v53);
        unint64_t v10 = v15 + 1;
        *(_DWORD *)(*(void *)(a1 + 16) + 8 * v31) += *(_DWORD *)&v50[v15 + 1];
      }
      unsigned __int8 v52 = *(unsigned char *)(a2 + v15);
      unint64_t v12 = (int)sub_19E0B82FC(v8, &v51, &v52);
    }
    if (a3 == v10)
    {
      unint64_t v32 = *(int **)(a1 + 32);
      uint64_t v33 = *v32;
      if (v33)
      {
        uint64_t v34 = v32[v33];
        *(unsigned char *)(*(void *)(a1 + 24) + v34) = 0;
        *(_DWORD *)(*(void *)(a1 + 16) + 8 * v12) = -(int)v34;
        --**(_DWORD **)(a1 + 32);
        uint64_t v35 = v34 + *(void *)(a1 + 24);
        *(_DWORD *)(v35 + 1) = 0;
        uint64_t v29 = (char *)(v35 + 1);
        goto LABEL_54;
      }
    }
    int v36 = a3 - v10 + 5;
    size_t v38 = (_DWORD **)(a1 + 24);
    int v37 = *(int **)(a1 + 24);
    int v39 = *(_DWORD *)(a1 + 76);
    int v40 = *v37;
    if (v39 < *v37 + v36)
    {
      if (v39 <= v36) {
        int v41 = a3 - v10 + 5;
      }
      else {
        int v41 = *(_DWORD *)(a1 + 76);
      }
      *(_DWORD *)(a1 + 76) = v41 + v39;
      sub_19E0B7898((void **)(a1 + 24), v41 + v39, *v37);
      int v40 = **(_DWORD **)(a1 + 24);
    }
    *(_DWORD *)(*(void *)(a1 + 16) + 8 * v12) = -v40;
    unint64_t v42 = *(int **)(a1 + 24);
    uint64_t v43 = *v42;
    int v44 = (char *)v42 + v43;
    int v30 = (unsigned __int8 *)v42 + v43 - v10;
    unint64_t v45 = a3 - v10;
    if (a3 > v10)
    {
      int v46 = (char *)(a2 + v10);
      do
      {
        char v47 = *v46++;
        *v44++ = v47;
        --v45;
      }
      while (v45);
      unint64_t v42 = *v38;
      LODWORD(v43) = **v38;
    }
    int *v42 = v43 + v36;
LABEL_53:
    uint64_t v29 = (char *)&v30[a3 + 1];
    goto LABEL_54;
  }
  return a3 != 0;
}

void sub_19E0B8090(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = (void **)(a1 + 40);
  if (!v3)
  {
    sub_19E0B7B50(v2, *(int *)(a1 + 64) >> 8, 0);
    *(_DWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 52) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    unint64_t v19 = (int *)(a1 + 48);
    if (*(int *)(a1 + 64) >= 1)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = *(void *)(a1 + 40);
      int v23 = 256;
      while (1)
      {
        uint64_t v24 = v22 + 20 * v20;
        *(_WORD *)(v24 + 8) = 0;
        int v25 = (__int16 *)(v24 + 8);
        if ((int)v21 >= (v20 << 8) + 256) {
          break;
        }
        __int16 v26 = 0;
        uint64_t v27 = (int)v21;
        int v28 = (int *)(*(void *)(a1 + 8) + 8 * (int)v21 + 4);
        do
        {
          int v29 = *v28;
          v28 += 2;
          if (v29 < 0)
          {
            BOOL v16 = v26++ == 0;
            __int16 *v25 = v26;
            if (v16)
            {
              *(_DWORD *)(v22 + 20 * v20 + 16) = v21;
              __int16 v26 = 1;
            }
          }
          ++v27;
          LODWORD(v21) = v21 + 1;
        }
        while (v23 != v27);
        if (v26) {
          int v30 = (int *)(a1 + 56);
        }
        else {
          int v30 = (int *)(a1 + 48);
        }
        if (v26 == 1) {
          int v30 = (int *)(a1 + 52);
        }
        int v31 = *v30;
        if (*v30) {
          goto LABEL_42;
        }
        unint64_t v32 = (_DWORD *)(v22 + 20 * v20);
        if (!v26)
        {
          int v31 = 0;
          goto LABEL_43;
        }
        uint64_t v33 = v20;
LABEL_46:
        *(_DWORD *)(v22 + 20 * v33 + 4) = v20;
        _DWORD *v32 = v20;
        *int v30 = v20++;
        v23 += 256;
        uint64_t v21 = v27;
        if ((int)v27 >= *(_DWORD *)(a1 + 64)) {
          goto LABEL_2;
        }
      }
      int v31 = *v19;
      if (*v19)
      {
        int v30 = (int *)(a1 + 48);
        uint64_t v27 = v21;
LABEL_42:
        unint64_t v32 = (_DWORD *)(v22 + 20 * v20);
LABEL_43:
        uint64_t v21 = v27;
      }
      else
      {
        unint64_t v32 = (_DWORD *)(v22 + 20 * v20);
        int v30 = (int *)(a1 + 48);
      }
      uint64_t v34 = (int *)(v22 + 20 * v31);
      _DWORD *v32 = *v34;
      *(_DWORD *)(v22 + 20 * v20 + 4) = *v30;
      uint64_t v33 = *v34;
      uint64_t v27 = v21;
      unint64_t v32 = v34;
      goto LABEL_46;
    }
  }
LABEL_2:
  uint64_t v4 = (uint64_t *)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 64);
  if (!*(void *)(a1 + 32))
  {
    sub_19E0B7A48((void **)(a1 + 32), v5, 0);
    int v5 = *(_DWORD *)(a1 + 64);
    if (v5 >= 1)
    {
      for (uint64_t i = 0; i < v5; ++i)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        uint64_t v8 = *(unsigned int *)(v7 + 8 * i + 4);
        if ((v8 & 0x80000000) == 0)
        {
          uint64_t v9 = *(int *)(v7 + 8 * v8);
          unsigned int v10 = (v9 ^ i);
          if (v9 != i)
          {
            uint64_t v11 = *v4;
            uint64_t v12 = *v4 + 2 * v8;
            unsigned int v15 = *(unsigned __int8 *)(v12 + 1);
            size_t v14 = (unsigned char *)(v12 + 1);
            unsigned int v13 = v15;
            if (v8) {
              BOOL v16 = v13 == 0;
            }
            else {
              BOOL v16 = 0;
            }
            if (!v16 || (unsigned int v13 = 0, *(_DWORD *)(v7 + 8 * v9 + 4) == v8))
            {
              if (v13 < v10)
              {
                do
                {
                  int v17 = v9 ^ v13;
                  unsigned int v13 = *(unsigned __int8 *)(v11 + 2 * (int)(v9 ^ v13));
                  if (*(unsigned char *)(v11 + 2 * v17)) {
                    BOOL v18 = v13 >= v10;
                  }
                  else {
                    BOOL v18 = 1;
                  }
                }
                while (!v18);
                size_t v14 = (unsigned char *)(v11 + 2 * v17);
              }
            }
            *(unsigned char *)(v11 + 2 * (int)((v9 ^ i) ^ v9)) = v13;
            *size_t v14 = v10;
            int v5 = *(_DWORD *)(a1 + 64);
          }
        }
      }
    }
  }
  *(_DWORD *)(a1 + 60) = v5;
  *(_DWORD *)(a1 + 68) = **(_DWORD **)(a1 + 16);
  *(_DWORD *)(a1 + 72) = 1;
}

uint64_t sub_19E0B82FC(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2;
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *a2;
  int v8 = *(_DWORD *)(v6 + 8 * *a2);
  unsigned int v9 = *a3;
  if (v8 < 0 || (unint64_t v10 = v8 ^ v9, v11 = *(int *)(v6 + 8 * v10 + 4), (v11 & 0x80000000) != 0))
  {
    uint64_t result = sub_19E0B8914(a1, *(_DWORD *)(v6 + 8 * *a2), *a3, v7);
    unsigned int v22 = *a3;
    uint64_t v23 = *(void *)(a1 + 32);
    uint64_t v24 = v23 + 2 * *v4;
    unsigned int v27 = *(unsigned __int8 *)(v24 + 1);
    __int16 v26 = (unsigned char *)(v24 + 1);
    unsigned int v25 = v27;
    if ((v8 & 0x80000000) == 0 && v25 < v22)
    {
      do
      {
        int v28 = result ^ v25 ^ v22;
        unsigned int v25 = *(unsigned __int8 *)(v23 + 2 * v28);
        if (*(unsigned char *)(v23 + 2 * v28)) {
          BOOL v29 = v25 >= v22;
        }
        else {
          BOOL v29 = 1;
        }
      }
      while (!v29);
      __int16 v26 = (unsigned char *)(v23 + 2 * v28);
    }
    *(unsigned char *)(v23 + 2 * (int)result) = v25;
    *__int16 v26 = v22;
  }
  else
  {
    uint64_t result = v8 ^ v9;
    if (v11 != v7)
    {
      int v13 = *(_DWORD *)(v6 + 8 * v11);
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = *(unsigned __int8 *)(v14 + 2 * v7 + 1);
      LOBYTE(v16) = v15;
      LOBYTE(v17) = *(unsigned char *)(v14 + 2 * v11 + 1);
      while (1)
      {
        uint64_t v18 = 2 * (v13 ^ v17);
        int v17 = *(unsigned __int8 *)(v14 + v18);
        if (!*(unsigned char *)(v14 + v18)) {
          break;
        }
        int v16 = *(unsigned __int8 *)(v14 + 2 * (v8 ^ v16));
        if (!v16)
        {
          uint64_t v19 = a1;
          int v20 = *(_DWORD *)(v6 + 8 * *a2);
          int v21 = v9;
          goto LABEL_18;
        }
      }
      uint64_t v19 = a1;
      int v20 = *(_DWORD *)(v6 + 8 * v11);
      int v15 = *(unsigned __int8 *)(v14 + 2 * v11 + 1);
      int v21 = -1;
LABEL_18:
      int v30 = sub_19E0B8A5C(v19, v101, v20, v15, v21);
      int v31 = v30;
      if (v101 == v30)
      {
        signed int v43 = sub_19E0B8AD8(a1);
      }
      else
      {
        v99 = v4;
        int v32 = *(_DWORD *)(a1 + 56);
        if (v32)
        {
          int v33 = *(_DWORD *)(*(void *)(a1 + 40) + 20 * v32);
          int v34 = (__int16)((_WORD)v30 - (unsigned __int16)v101 + 1);
          int v97 = v33;
          int v95 = v34;
          do
          {
            uint64_t v35 = *(void *)(a1 + 40);
            int v36 = v32;
            int v37 = *(__int16 *)(v35 + 20 * v32 + 8);
            if (v37 >= v34 && v34 < *(__int16 *)(v35 + 20 * v32 + 10))
            {
              uint64_t v38 = v35 + 20 * v32;
              signed int v41 = *(_DWORD *)(v38 + 16);
              int v39 = (signed int *)(v38 + 16);
              signed int v40 = v41;
              uint64_t v42 = *(void *)(a1 + 8);
              signed int v43 = v41;
              do
              {
                int v44 = v101;
                uint64_t v4 = v99;
                while (1)
                {
                  int v45 = *++v44;
                  if ((*(_DWORD *)(v42 + 8 * (v43 ^ v101[0] ^ v45) + 4) & 0x80000000) == 0) {
                    break;
                  }
                  if (v44 == v31)
                  {
                    *int v39 = v43;
                    goto LABEL_36;
                  }
                }
                int v46 = *(_DWORD *)(v42 + 8 * v43 + 4);
                signed int v43 = -v46;
              }
              while (v40 + v46);
            }
            *(_WORD *)(v35 + 20 * v36 + 10) = v34;
            uint64_t v47 = a1 + 2 * v37;
            int v49 = *(__int16 *)(v47 + 80);
            int v48 = (_WORD *)(v47 + 80);
            if (v34 < v49) {
              *int v48 = v34;
            }
            uint64_t v50 = v35 + 20 * v36;
            int v32 = *(_DWORD *)(v50 + 4);
            int v51 = *(_DWORD *)(v50 + 12);
            *(_DWORD *)(v50 + 12) = v51 + 1;
            if (!v51)
            {
              sub_19E0B8B18(v35, v36, (_DWORD *)(a1 + 56), (int *)(a1 + 52));
              int v34 = v95;
              int v33 = v97;
            }
          }
          while (v36 != v33);
        }
        signed int v43 = sub_19E0B8BC4(a1) << 8;
        uint64_t v4 = v99;
LABEL_36:
        unint64_t v10 = v8 ^ v9;
      }
      int v94 = v43 ^ v101[0];
      LODWORD(v52) = *(_DWORD *)v4;
      if (v17) {
        int v53 = v8;
      }
      else {
        int v53 = v13;
      }
      if (!v17) {
        LODWORD(v52) = v11;
      }
      int v100 = v52;
      if (v17 && v101[0] == v9)
      {
        uint64_t v52 = (int)v52;
        *(unsigned char *)(*(void *)(a1 + 32) + 2 * (int)v52 + 1) = v9;
      }
      else
      {
        uint64_t v52 = (int)v52;
      }
      int v54 = v94;
      *(_DWORD *)(*(void *)(a1 + 8) + 8 * v52) = v94;
      if (v101 <= v31)
      {
        if (v9) {
          int v55 = -1;
        }
        else {
          int v55 = 0;
        }
        int v93 = v55;
        int v96 = v53;
        uint64_t v98 = (uint64_t)v53 >> 8;
        v91 = (int *)(a1 + 52);
        unsigned __int8 v56 = v101;
        uint64_t v92 = 2 * v10;
        while (1)
        {
          int v57 = sub_19E0B8914(a1, v54, *v56, v100);
          if (v56 == v31) {
            unsigned __int8 v58 = 0;
          }
          else {
            unsigned __int8 v58 = v56[1];
          }
          int v59 = v53 ^ *v56;
          *(unsigned char *)(*(void *)(a1 + 32) + 2 * v57) = v58;
          if (v17 && v59 == v10) {
            goto LABEL_88;
          }
          uint64_t v60 = *(void *)(a1 + 8);
          v61 = (int *)(v60 + 8 * v57);
          uint64_t v62 = v59;
          int v63 = (int *)(v60 + 8 * v59);
          int v64 = *v63;
          int *v61 = *v63;
          if (v64 >= 1 && *v56)
          {
            uint64_t v65 = *(void *)(a1 + 32);
            int v66 = *(unsigned __int8 *)(v65 + 2 * v59 + 1);
            *(unsigned char *)(v65 + 2 * v57 + 1) = v66;
            uint64_t v67 = *(void *)(a1 + 8);
            int v68 = *v61;
            do
            {
              *(_DWORD *)(v67 + 8 * (v68 ^ v66) + 4) = v57;
              int v68 = *v61;
              int v66 = *(unsigned __int8 *)(v65 + 2 * (*v61 ^ v66));
            }
            while (v66);
          }
          uint64_t v69 = *v4;
          if (!v17 && v59 == v69)
          {
            *uint64_t v4 = v57;
            uint64_t v69 = v57;
          }
          BOOL v70 = v17 == 0;
          if (v59 != v10) {
            BOOL v70 = 0;
          }
          if (!v70) {
            break;
          }
          uint64_t v71 = *(void *)(a1 + 32);
          uint64_t v72 = v71 + 2 * v69;
          unsigned int v75 = *(unsigned __int8 *)(v72 + 1);
          v74 = (unsigned char *)(v72 + 1);
          LOBYTE(v73) = v75;
          if (v75 < v9)
          {
            do
            {
              uint64_t v76 = v8 ^ v73;
              unsigned int v73 = *(unsigned __int8 *)(v71 + 2 * v76);
              if (*(unsigned char *)(v71 + 2 * v76)) {
                BOOL v77 = v73 >= v9;
              }
              else {
                BOOL v77 = 1;
              }
            }
            while (!v77);
            v74 = (unsigned char *)(v71 + 2 * v76);
          }
          *(unsigned char *)(v71 + v92) = v73;
          unsigned char *v74 = v9;
          *(unsigned char *)(*(void *)(a1 + 32) + 2 * v62 + 1) = 0;
          *int v63 = v93;
          *(_DWORD *)(v60 + 8 * v62 + 4) = *v4;
LABEL_87:
          int v53 = v96;
LABEL_88:
          if (++v56 > v31) {
            goto LABEL_89;
          }
        }
        unint64_t v10 = (unint64_t)v4;
        uint64_t v78 = *(void *)(a1 + 40);
        int v79 = v98;
        uint64_t v80 = v78 + 20 * (int)v98;
        int v82 = *(unsigned __int16 *)(v80 + 8);
        v81 = (__int16 *)(v80 + 8);
        __int16 *v81 = v82 + 1;
        v83 = (int *)(v81 + 4);
        if (!v82)
        {
          int *v83 = v59;
          *(void *)(*(void *)(a1 + 8) + 8 * v59) = -v59 | ((unint64_t)-v59 << 32);
          if (v59 >= 0x100)
          {
            sub_19E0B8B18(*(void *)(a1 + 40), v98, (_DWORD *)(a1 + 48), v91);
            int v79 = v98;
          }
          goto LABEL_84;
        }
        uint64_t v84 = *v83;
        uint64_t v85 = *(void *)(a1 + 8);
        uint64_t v86 = *(unsigned int *)(v85 + 8 * v84 + 4);
        *(void *)(v85 + 8 * v59) = -(int)v84 | (unint64_t)(v86 << 32);
        *(_DWORD *)(*(void *)(a1 + 8) + 8 * -(int)v86) = -v59;
        *(_DWORD *)(*(void *)(a1 + 8) + 8 * v84 + 4) = -v59;
        if (*v81 == 2)
        {
          int v79 = v98;
          if (v59 < 0x100) {
            goto LABEL_83;
          }
        }
        else
        {
          int v79 = v98;
          if (v59 < 0x100 || *(_DWORD *)(v78 + 20 * (int)v98 + 12) != 1) {
            goto LABEL_83;
          }
        }
        sub_19E0B8B18(*(void *)(a1 + 40), v79, v91, (int *)(a1 + 56));
        int v79 = v98;
LABEL_83:
        *(_DWORD *)(v78 + 20 * v79 + 12) = 0;
LABEL_84:
        uint64_t v87 = v78 + 20 * v79;
        int v89 = *(__int16 *)(v87 + 10);
        v88 = (_WORD *)(v87 + 10);
        int v90 = *(__int16 *)(a1 + 2 * *v81 + 80);
        if (v89 < v90) {
          _WORD *v88 = v90;
        }
        *(_WORD *)(*(void *)(a1 + 32) + 2 * v62) = 0;
        uint64_t v4 = (void *)v10;
        LODWORD(v10) = v8 ^ v9;
        int v54 = v94;
        goto LABEL_87;
      }
LABEL_89:
      if (v17) {
        return v54 ^ v9;
      }
      else {
        return v10;
      }
    }
  }
  return result;
}

uint64_t sub_19E0B8914(uint64_t a1, int a2, int a3, int a4)
{
  if (a2 < 0) {
    int v8 = sub_19E0B8AD8(a1);
  }
  else {
    int v8 = a3 ^ a2;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = v8;
  uint64_t v11 = (int *)(v9 + 8 * v8);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = (uint64_t)v8 >> 8;
  uint64_t v14 = v12 + 20 * (v8 >> 8);
  __int16 v16 = *(_WORD *)(v14 + 8);
  int v15 = (_WORD *)(v14 + 8);
  *int v15 = v16 - 1;
  if (v16 == 1)
  {
    if (v10 < 0x100) {
      goto LABEL_14;
    }
    uint64_t v23 = (_DWORD *)(a1 + 52);
    uint64_t v24 = (int *)(a1 + 48);
    goto LABEL_13;
  }
  uint64_t v17 = v9 + 8 * v10;
  int v18 = *v11;
  *(_DWORD *)(v9 + 8 * -*v11 + 4) = *(_DWORD *)(v17 + 4);
  uint64_t v19 = *(int *)(v17 + 4);
  *(_DWORD *)(v9 - 8 * v19) = v18;
  uint64_t v20 = v12 + 20 * (int)v13;
  int v22 = *(_DWORD *)(v20 + 16);
  int v21 = (_DWORD *)(v20 + 16);
  if (v10 == v22) {
    _DWORD *v21 = -(int)v19;
  }
  if (v10 >= 0x100 && *v15 == 1 && *(_DWORD *)(v12 + 20 * (int)v13 + 12) != 1)
  {
    uint64_t v23 = (_DWORD *)(a1 + 56);
    uint64_t v24 = (int *)(a1 + 52);
    uint64_t v12 = *(void *)(a1 + 40);
LABEL_13:
    sub_19E0B8B18(v12, v13, v23, v24);
  }
LABEL_14:
  if (a3) {
    int v25 = -1;
  }
  else {
    int v25 = 0;
  }
  int *v11 = v25;
  *(_DWORD *)(v9 + 8 * v10 + 4) = a4;
  if (a2 < 0) {
    *(_DWORD *)(*(void *)(a1 + 8) + 8 * a4) = v10 ^ a3;
  }
  return v10;
}

unsigned char *sub_19E0B8A5C(uint64_t a1, unsigned char *a2, int a3, int a4, int a5)
{
  if (a4)
  {
    --a2;
  }
  else
  {
    *a2 = 0;
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = 2 * a3;
    a4 = *(unsigned __int8 *)(v5 + v6);
    if (!*(unsigned char *)(v5 + v6)) {
      goto LABEL_9;
    }
  }
  if (a4 < a5)
  {
    do
    {
      *++a2 = a4;
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = 2 * (a4 ^ a3);
      a4 = *(unsigned __int8 *)(v7 + v8);
      if (*(unsigned char *)(v7 + v8)) {
        BOOL v9 = a4 < a5;
      }
      else {
        BOOL v9 = 0;
      }
    }
    while (v9);
  }
LABEL_9:
  if (a5 != -1) {
    *++a2 = a5;
  }
  if (a4)
  {
    do
    {
      *++a2 = a4;
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = 2 * (a4 ^ a3);
      a4 = *(unsigned __int8 *)(v10 + v11);
    }
    while (*(unsigned char *)(v10 + v11));
  }
  return a2;
}

uint64_t sub_19E0B8AD8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 52);
  if (v1) {
    return *(unsigned int *)(*(void *)(a1 + 40) + 20 * v1 + 16);
  }
  int v1 = *(_DWORD *)(a1 + 56);
  if (v1) {
    return *(unsigned int *)(*(void *)(a1 + 40) + 20 * v1 + 16);
  }
  else {
    return sub_19E0B8BC4(a1) << 8;
  }
}

uint64_t sub_19E0B8B18(uint64_t result, int a2, _DWORD *a3, int *a4)
{
  int v4 = a2;
  uint64_t v5 = result + 20 * a2;
  int v8 = *(_DWORD *)(v5 + 4);
  uint64_t v6 = (int *)(v5 + 4);
  int v7 = v8;
  if (v8 == a2)
  {
    int v9 = 0;
  }
  else
  {
    int v10 = *(_DWORD *)(result + 20 * a2);
    *(_DWORD *)(result + 20 * v10 + 4) = v7;
    int v9 = *v6;
    *(_DWORD *)(result + 20 * *v6) = v10;
    if (*a3 != a2) {
      goto LABEL_5;
    }
  }
  *a3 = v9;
LABEL_5:
  if (*a4)
  {
    uint64_t v11 = (int *)(result + 20 * a2);
LABEL_8:
    uint64_t v12 = (int *)(result + 20 * *a4);
    int *v11 = *v12;
    *uint64_t v6 = *a4;
    int v4 = *v12;
    uint64_t v11 = v12;
    goto LABEL_9;
  }
  uint64_t v11 = (int *)(result + 20 * a2);
  if (!*((_WORD *)v11 + 4)) {
    goto LABEL_8;
  }
LABEL_9:
  *(_DWORD *)(result + 20 * v4 + 4) = a2;
  int *v11 = a2;
  *a4 = a2;
  return result;
}

uint64_t sub_19E0B8BC4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == *(_DWORD *)(a1 + 60))
  {
    *(_DWORD *)(a1 + 60) = 2 * v2;
    sub_19E0B778C((void **)(a1 + 8), 2 * v2, 2 * v2);
    sub_19E0B7A48((void **)(a1 + 32), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 64));
    sub_19E0B7B50((void **)(a1 + 40), *(int *)(a1 + 60) >> 8, *(int *)(a1 + 64) >> 8);
    int v2 = *(_DWORD *)(a1 + 64);
  }
  *(_DWORD *)(*(void *)(a1 + 40) + 20 * (v2 >> 8) + 16) = v2;
  *(void *)(*(void *)(a1 + 8) + 8 * v2) = (-255 - v2) | ((unint64_t)~v2 << 32);
  uint64_t v3 = *(int *)(a1 + 64);
  uint64_t v4 = v3 + 1;
  unint64_t v5 = 0xFFFFFFFE00000000 - (v3 << 32);
  unsigned int v6 = -(int)v3;
  do
  {
    *(void *)(*(void *)(a1 + 8) + 8 * v4) = v5 + v6;
    uint64_t v7 = *(int *)(a1 + 64);
    uint64_t v8 = v4++ - 1;
    v5 -= 0x100000000;
    --v6;
  }
  while (v8 < v7 + 253);
  *(void *)(*(void *)(a1 + 8) + 8 * ((int)v7 + 255)) = (-254 - v7) | ((unint64_t)-(int)v7 << 32);
  int v9 = *(_DWORD *)(a1 + 64);
  int v10 = v9 >> 8;
  int v11 = *(_DWORD *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = (uint64_t)v9 >> 8;
  uint64_t v14 = (int *)(v12 + 20 * v10);
  if (v11)
  {
    int v15 = (int *)(v12 + 20 * v11);
    *uint64_t v14 = *v15;
    *(_DWORD *)(v12 + 20 * (int)v13 + 4) = *(_DWORD *)(a1 + 56);
    LODWORD(v13) = *v15;
    uint64_t v14 = v15;
  }
  *(_DWORD *)(v12 + 20 * (int)v13 + 4) = v10;
  *uint64_t v14 = v10;
  *(_DWORD *)(a1 + 56) = v10;
  int v16 = *(_DWORD *)(a1 + 64) + 256;
  *(_DWORD *)(a1 + 64) = v16;
  return ((v16 >> 8) - 1);
}

uint64_t sub_19E0B8D20(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
  if (result)
  {
    uint64_t v7 = a1[5];
    if (!v7) {
      __assert_rtn("enumerateChildren", "cedarpp.h", 261, "_ninfo");
    }
    uint64_t v8 = *a2;
    unint64_t v9 = HIDWORD(*a2);
    if (v9)
    {
      unsigned int v10 = -(int)v9;
      if ((v10 & 0x80000000) != 0)
      {
LABEL_5:
        if (*(unsigned char *)(a1[3] + -v10)) {
          return sub_19E0B8E84(*(void *)(a3 + 24), *(unsigned char *)(a1[3] + -v10));
        }
        return result;
      }
    }
    else
    {
      unsigned int v10 = *(_DWORD *)(a1[2] + 8 * v8);
      if ((v10 & 0x80000000) != 0) {
        goto LABEL_5;
      }
    }
    unint64_t v11 = v10;
    if (v8 && ((uint64_t v12 = a1[2], *(int *)(v12 + 8 * v11) < 1) || *(_DWORD *)(v12 + 8 * v11 + 4) != v8)) {
      uint64_t v13 = (unsigned __int8 *)(v7 + 2 * v8 + 1);
    }
    else {
      uint64_t v13 = (unsigned __int8 *)(v7 + 2 * v11);
    }
    int v14 = *v13;
    if (v14)
    {
      do
      {
        unint64_t v15 = v14 ^ v11;
        uint64_t result = sub_19E0B8E84(*(void *)(a3 + 24), v14);
        LOBYTE(v14) = *(unsigned char *)(a1[5] + 2 * v15);
      }
      while ((_BYTE)v14);
    }
  }
  return result;
}

uint64_t sub_19E0B8E84(uint64_t a1, char a2)
{
  char v3 = a2;
  if (!a1) {
    sub_19E0483E0();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 48))(a1, &v3);
}

void sub_19E0B8ED4(void *a1, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  if ((*(unsigned int (**)(void *))(*a1 + 112))(a1))
  {
    memset(&__p, 0, sizeof(__p));
    std::string::size_type v35 = 0;
    char v33 = 0;
    uint64_t v8 = a1 + 1;
    unint64_t v9 = *a2;
    unint64_t v36 = *a2;
    int v10 = sub_19E0B9170(a1 + 1, &v36, &v35);
    if (v10 != -2)
    {
      unint64_t v11 = HIDWORD(v9);
      uint64_t v31 = a3;
      std::string::size_type v32 = a4;
      while (1)
      {
        unint64_t v12 = v35;
        uint64_t v13 = v36;
        unint64_t v14 = HIDWORD(v36);
        if ((a4 & 0x80000000) != 0 || v35 <= v32)
        {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          char v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          if (size < v35)
          {
            std::string::resize(&__p, v35, 0);
            char v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          if (v16 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          p_p->__r_.__value_.__s.__data_[v12] = 0;
          uint64_t v18 = v13;
          unint64_t v19 = v12;
          if (v14)
          {
            uint64_t v18 = v13;
            unsigned int v30 = a4;
            uint64_t v20 = a1[3];
            size_t v21 = strlen((const char *)(v20 - *(int *)(a1[2] + 8 * v13)));
            if (v21 >= v12) {
              size_t v22 = v12;
            }
            else {
              size_t v22 = v21;
            }
            if (v12 >= v21) {
              unint64_t v19 = v12 - v21;
            }
            else {
              unint64_t v19 = 0;
            }
            size_t v23 = v20 - v22;
            a4 = v30;
            memcpy((char *)p_p + v19, (const void *)(v23 + (v13 >> 32)), v22);
          }
          for (; v19; --v19)
          {
            uint64_t v24 = a1[2];
            uint64_t v25 = *(int *)(v24 + 8 * v18 + 4);
            *((unsigned char *)&p_p[-1].__r_.__value_.__r.__words[2] + v19 + 7) = *(unsigned char *)(v24 + 8 * v25) ^ v18;
            uint64_t v18 = v25;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v26 = &__p;
          }
          else {
            __int16 v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          sub_19E06E4F4(*(void *)(v31 + 24), v10, (uint64_t)v26, v12, (uint64_t)&v33);
          unint64_t v11 = HIDWORD(v9);
          uint64_t v8 = a1 + 1;
        }
        if (v14)
        {
          if (!v11)
          {
            uint64_t v13 = v13;
            uint64_t v27 = a1[2];
            v12 -= *(int *)(v27 + 8 * v13) + (uint64_t)(int)v14;
            break;
          }
          goto LABEL_3;
        }
        uint64_t v27 = a1[2];
        uint64_t v29 = *(int *)(v27 + 8 * v13);
        unsigned int v28 = *(unsigned __int8 *)(a1[5] + 2 * v29);
        if (!*(unsigned char *)(a1[5] + 2 * v29)) {
          break;
        }
LABEL_37:
        unint64_t v36 = v29 ^ v28;
        std::string::size_type v35 = v12 + 1;
        int v10 = sub_19E0B9170(v8, &v36, &v35);
        if (v10 == -2) {
          goto LABEL_3;
        }
      }
      while (v13 != v9)
      {
        unsigned int v28 = *(unsigned __int8 *)(a1[5] + 2 * v13);
        uint64_t v13 = *(int *)(v27 + 8 * v13 + 4);
        --v12;
        if (v28)
        {
          uint64_t v29 = *(int *)(v27 + 8 * v13);
          goto LABEL_37;
        }
      }
    }
LABEL_3:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19E0B9150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0B9170(void *a1, unint64_t *a2, void *a3)
{
  uint64_t v3 = a1[4];
  if (!v3) {
    __assert_rtn("begin", "cedarpp.h", 690, "_ninfo");
  }
  unint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  if (v8)
  {
    int v9 = -(int)v8;
    if (-(int)v8 < 0) {
      goto LABEL_16;
    }
  }
  else
  {
    int v9 = *(_DWORD *)(a1[1] + 8 * v7);
    if (v9 < 0) {
      goto LABEL_16;
    }
  }
  unsigned int v10 = *(unsigned __int8 *)(v3 + 2 * v7 + 1);
  if (v7)
  {
    if (!*(unsigned char *)(v3 + 2 * v7 + 1))
    {
      uint64_t v11 = a1[1];
LABEL_14:
      uint64_t v13 = (unsigned int *)(v11 + 8 * (v9 ^ v10));
      return *v13;
    }
    goto LABEL_10;
  }
  unsigned int v10 = *(unsigned __int8 *)(v3 + 2 * (v9 ^ v10));
  if (v10)
  {
LABEL_10:
    uint64_t v11 = a1[1];
    do
    {
      unint64_t v12 = v9 ^ v10;
      *a2 = v12;
      int v9 = *(_DWORD *)(v11 + 8 * v12);
      unsigned int v10 = *(unsigned __int8 *)(v3 + 2 * v12 + 1);
      ++*a3;
    }
    while (v10 && (v9 & 0x80000000) == 0);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    LODWORD(v7) = *(_DWORD *)a2;
LABEL_16:
    uint64_t v14 = -v9;
    size_t v15 = strlen((const char *)(a1[2] + v14));
    *a2 = v7 | ((unint64_t)(v15 - v9) << 32);
    *a3 += v15;
    uint64_t v13 = (unsigned int *)(a1[2] + v14 + v15 + 1);
    return *v13;
  }
  return 4294967294;
}

uint64_t sub_19E0B92A8(uint64_t a1, unint64_t *a2, _DWORD *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if (result)
  {
    unint64_t v7 = *a2;
    unint64_t v9 = 0;
    unint64_t v10 = v7;
    int v8 = sub_19E0B9338(a1 + 8, (uint64_t)"", &v10, &v9, 0);
    *a3 = v8;
    return v8 != -1;
  }
  return result;
}

uint64_t sub_19E0B9338(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t a5)
{
  unint64_t v5 = *a3;
  unint64_t v6 = HIDWORD(*a3);
  if (!v6)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    unsigned int v8 = *(_DWORD *)(v7 + 8 * v5);
    if ((v8 & 0x80000000) == 0)
    {
      while (1)
      {
        unint64_t v9 = *a4;
        if (*a4 == a5) {
          break;
        }
        unint64_t v10 = v8 ^ *(unsigned __int8 *)(a2 + v9);
        if (*(_DWORD *)(v7 + 8 * v10 + 4) != v5) {
          return 4294967294;
        }
        *a4 = v9 + 1;
        *a3 = v10;
        unsigned int v8 = *(_DWORD *)(v7 + 8 * v10);
        LODWORD(v5) = v10;
        if ((v8 & 0x80000000) != 0) {
          goto LABEL_6;
        }
      }
      if (*(_DWORD *)(v7 + 8 * v8 + 4) == v5)
      {
        unint64_t v19 = (unsigned int *)(v7 + 8 * v8);
        return *v19;
      }
      return 0xFFFFFFFFLL;
    }
LABEL_6:
    unint64_t v6 = -v8;
  }
  unint64_t v11 = *a4;
  unint64_t v12 = *(void *)(a1 + 16) + v6;
  if (*a4 >= a5)
  {
    unint64_t v16 = *a4;
  }
  else
  {
    uint64_t v13 = (unsigned __int8 *)(*(void *)(a1 + 16) + v6);
    unint64_t v14 = *a4;
    while (1)
    {
      int v15 = *v13++;
      if (*(unsigned __int8 *)(a2 + v14) != v15) {
        break;
      }
      *a4 = ++v14;
      if (a5 == v14)
      {
        unint64_t v14 = a5;
        break;
      }
    }
    if (v14 == v11)
    {
      unint64_t v16 = v11;
    }
    else
    {
      *((_DWORD *)a3 + 1) = v6 - v11 + v14;
      unint64_t v16 = *a4;
    }
    if (v16 < a5) {
      return 4294967294;
    }
  }
  unint64_t v18 = v12 - v11;
  if (*(unsigned char *)(v18 + v16)) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v19 = (unsigned int *)(a5 + v18 + 1);
  return *v19;
}

uint64_t sub_19E0B9450(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = *a2;
  unint64_t v6 = 0;
  unint64_t v7 = v4;
  if (sub_19E0B9338(a1 + 8, a3, &v7, &v6, a4) == -2) {
    return -1;
  }
  else {
    return v7;
  }
}

BOOL sub_19E0B949C(uint64_t a1, void *a2)
{
  return *a2 != -1;
}

uint64_t sub_19E0B94AC()
{
  return 0;
}

void sub_19E0B94B4(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  v17[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, void *, const void *, size_t))(*(void *)a1 + 120))(a1, v17, a2, a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v16))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E04147C();
    }
    if (a3 >= 0x17)
    {
      uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v11 = a3 | 7;
      }
      uint64_t v12 = v11 + 1;
      unint64_t v10 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)a3;
      unint64_t v15 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v15) = a3;
      unint64_t v10 = __dst;
      if (!a3)
      {
LABEL_10:
        *((unsigned char *)v10 + a3) = 0;
        uint64_t v13 = operator new(0x28uLL);
        void *v13 = &unk_1EF0A1088;
        v13[1] = __dst;
        v13[2] = a2;
        v13[3] = a3;
        v13[4] = a4;
        v17[3] = v13;
        (*(void (**)(uint64_t, uint64_t *, void *, uint64_t))(*(void *)a1 + 136))(a1, &v16, v17, a5);
        sub_19E06C7E4(v17);
        if (SHIBYTE(v15) < 0) {
          operator delete(__dst[0]);
        }
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19E0B96B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_19E0B96E8()
{
  return &unk_1EF0A10E8;
}

uint64_t sub_19E0B96F4(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A10E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0B9734(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = a1[3];
  unint64_t v10 = v9 + v8;
  uint64_t v11 = a1[1];
  int v12 = *(char *)(v11 + 23);
  if (v12 < 0) {
    unint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    unint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  unint64_t v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    uint64_t v11 = a1[1];
    uint64_t v9 = a1[3];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
  uint64_t v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    uint64_t v11 = a1[1];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
LABEL_9:
  int v16 = *a2;
  if ((v12 & 0x80) != 0) {
    uint64_t v11 = *(void *)v11;
  }
  uint64_t v17 = *(void *)(a1[4] + 24);

  return sub_19E06E4F4(v17, v16, v11, v10, a4);
}

__n128 sub_19E0B9824(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A1088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0B9854(uint64_t a1)
{
  int v2 = (char *)operator new(0x28uLL);
  *(void *)int v2 = &unk_1EF0A1088;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_19E0B98A8()
{
}

uint64_t sub_19E0B98C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char v13 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v12 = result;
  if (a3)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, &v12, a2 + v9, 1);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v12);
      if (!result) {
        break;
      }
      int v11 = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)a1 + 128))(a1, &v12, &v11);
      if (result)
      {
        if (a3 >= v9 + 1) {
          uint64_t v10 = v9 + 1;
        }
        else {
          uint64_t v10 = a3;
        }
        uint64_t result = sub_19E06E4F4(*(void *)(a4 + 24), v11, a2, v10, (uint64_t)&v13);
        ++v9;
        if (v13) {
          return result;
        }
      }
      else
      {
        ++v9;
      }
    }
    while (v9 != a3);
  }
  return result;
}

BOOL sub_19E0B9A14(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  int v5 = sub_19E0B9338(a1 + 8, a2, &v9, &v8, a3);
  if (v5 == -2) {
    int v6 = -1;
  }
  else {
    int v6 = v5;
  }
  *a4 = v6;
  return v6 != -1;
}

uint64_t sub_19E0B9A68(uint64_t a1, int *a2, unint64_t a3)
{
  uint64_t v3 = a1 + 8;
  sub_19E0B9AA0(a1 + 8, a2, a3 >> 3);
  sub_19E0B8090(v3);
  return 1;
}

void sub_19E0B9AA0(uint64_t a1, int *a2, uint64_t a3)
{
  sub_19E0B76F0(a1, 0);
  if (a3) {
    unint64_t v6 = 8 * a3 - *a2;
  }
  else {
    unint64_t v6 = 0;
  }
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 8) = (char *)a2 + *a2;
  if ((v6 & 7) != 0) {
    int v7 = (v6 >> 3) + 1;
  }
  else {
    int v7 = v6 >> 3;
  }
  *(_DWORD *)(a1 + 64) = v7;
  *(_DWORD *)(a1 + 76) = 1;
}

uint64_t sub_19E0B9B18(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2) {
    __assert_rtn("build", "CedarMinimalPrefixTrie.h", 78, "keys.size() == values.size()");
  }
  if (v4 == v3)
  {
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    LODWORD(v11) = 1;
    do
    {
      uint64_t v12 = (uint64_t **)(v3 + v8);
      if (*((char *)v12 + 23) < 0)
      {
        unint64_t v14 = *v12;
        char v13 = v12[1];
      }
      else
      {
        char v13 = (uint64_t *)*((unsigned __int8 *)v12 + 23);
        unint64_t v14 = (uint64_t *)v12;
      }
      uint64_t v11 = v11 & (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 152))(a1, v14, v13, *a3 + v9);
      ++v10;
      uint64_t v3 = *a2;
      v9 += 4;
      v8 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  sub_19E0B8090(a1 + 8);
  return v11;
}

uint64_t sub_19E0B9C48(uint64_t a1, void *a2)
{
  std::string __p = 0;
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    int v5 = 0;
    unint64_t v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v8 = (v5 - v3) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v4 - (void)v3) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v4 - (void)v3) >> 1;
        }
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_19E068D84(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = (_DWORD *)(v10 + 4 * v8);
        *uint64_t v12 = v6;
        int v7 = v12 + 1;
        while (v5 != v3)
        {
          int v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--uint64_t v12 = v13;
        }
        unint64_t v4 = v10 + 4 * v11;
        std::string __p = v12;
        unint64_t v20 = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)int v5 = v6;
        int v7 = v5 + 4;
      }
      unint64_t v19 = v7;
      int v5 = (char *)v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v6++);
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    unint64_t v19 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_19E0B9DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0B9DEC@<X0>(void *a1@<X8>)
{
  return sub_19E0B9DF8(a1);
}

uint64_t sub_19E0B9DF8(void *a1)
{
  sub_19E0538DC((uint64_t)v4);
  std::ostream::write();
  std::ostream::write();
  sub_19E05EEA4(a1, (uint64_t)v5);
  v4[0] = *MEMORY[0x1E4FBA408];
  uint64_t v2 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v4[2] = v2;
  v5[0] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19F3BA690](&v7);
}

void sub_19E0B9F84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E053BB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E0B9F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A1008;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E06C7E4(v5);
}

void sub_19E0BA03C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E06C7E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BA050()
{
  return &unk_1EF0A1068;
}

uint64_t sub_19E0BA05C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1068)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BA09C(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0BA0C0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A1008;
  a2[1] = v2;
  return result;
}

void *sub_19E0BA0E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A1008;
  result[1] = v3;
  return result;
}

void sub_19E0BA12C()
{
}

void *sub_19E0BA144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A0F88;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E06C7E4(v5);
}

void sub_19E0BA1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E06C7E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BA1FC()
{
  return &unk_1EF0A0FE8;
}

uint64_t sub_19E0BA208(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A0FE8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BA248(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0BA26C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A0F88;
  a2[1] = v2;
  return result;
}

void *sub_19E0BA290(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A0F88;
  result[1] = v3;
  return result;
}

void sub_19E0BA2D8()
{
}

uint64_t sub_19E0BA2F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0BA34C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = 0;
  int v44 = 0;
  unint64_t v45 = 0;
  std::string __p = 0;
  signed int v41 = 0;
  unint64_t v42 = 0;
  if (a2)
  {
    uint64_t v8 = a2;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      int v13 = *(void **)(a3 + 8 * i);
      size_t v14 = *(void *)(a4 + 8 * i);
      size_t v38 = v14;
      int v39 = v13;
      uint64_t v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        int v16 = (void *)sub_19E0B5820(&v43, &v39, &v38);
      }
      else
      {
        sub_19E057A94(v44, v13, v14);
        int v16 = v15 + 3;
      }
      int v44 = v16;
      if (a5)
      {
        uint64_t v17 = *(void *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v19 = v10;
          uint64_t v20 = a5;
          uint64_t v21 = v8;
          uint64_t v22 = a3;
          uint64_t v23 = a4;
          uint64_t v24 = (v11 - v9) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            sub_19E041BEC();
          }
          unint64_t v26 = v19 - (void)v9;
          unint64_t v27 = (uint64_t)(v19 - (void)v9) >> 1;
          if (v27 > v25) {
            unint64_t v25 = v27;
          }
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v25;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_19E068D84(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          unsigned int v30 = (_DWORD *)(v28 + 4 * v24);
          *unsigned int v30 = v17;
          unint64_t v18 = v30 + 1;
          while (v11 != v9)
          {
            int v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--unsigned int v30 = v31;
          }
          std::string __p = v30;
          signed int v41 = v18;
          unint64_t v32 = v28 + 4 * v29;
          unint64_t v42 = v32;
          if (v9) {
            operator delete(v9);
          }
          unint64_t v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          uint64_t v8 = v21;
          a5 = v20;
          unint64_t v10 = v32;
        }
        else
        {
          *(_DWORD *)uint64_t v11 = v17;
          unint64_t v18 = v11 + 4;
        }
        signed int v41 = v18;
        uint64_t v11 = (char *)v18;
      }
    }
  }
  uint64_t v33 = *a1;
  if (a5) {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 64))();
  }
  else {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 56))();
  }
  uint64_t v35 = v34;
  if (__p)
  {
    signed int v41 = __p;
    operator delete(__p);
  }
  std::string __p = &v43;
  sub_19E041AD0((void ***)&__p);
  return v35;
}

void sub_19E0BA570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  std::string __p = &a16;
  sub_19E041AD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E0BA5B4(void *a1)
{
  sub_19E0B76A4(a1);

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0BA5F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_19E0B8D20((void *)(a1 + 8), a2, a3);
}

void *sub_19E0BA5F8(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF0A1208;
  v8[1] = a3;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0B8ED4((void *)(a1 + 8), a2, (uint64_t)v9, a4);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0BA6B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BA6D4()
{
  return &unk_1EF0A1268;
}

uint64_t sub_19E0BA6E0(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1268)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BA720(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF) {
    return sub_19E0B5BE8(*(void *)(*(void *)(result + 8) + 24), v4, *a3, a3[1], a4);
  }
  return result;
}

uint64_t sub_19E0BA758(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A1208;
  a2[1] = v2;
  return result;
}

void *sub_19E0BA77C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A1208;
  result[1] = v3;
  return result;
}

void sub_19E0BA7C4()
{
}

uint64_t sub_19E0BA7DC(uint64_t a1, unint64_t *a2, int *a3)
{
  int v6 = 0;
  int v4 = sub_19E0B92A8(a1 + 8, a2, &v6);
  uint64_t result = 0;
  if (v4)
  {
    if ((v6 & 0x7FFFFF) == 0x7FFFFF)
    {
      return 0;
    }
    else
    {
      *a3 = v6 & 0x7FFFFF;
      return 1;
    }
  }
  return result;
}

uint64_t sub_19E0BA844(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = *a2;
  unint64_t v6 = 0;
  unint64_t v7 = v4;
  if (sub_19E0B9338(a1 + 16, a3, &v7, &v6, a4) == -2) {
    return -1;
  }
  else {
    return v7;
  }
}

BOOL sub_19E0BA890(uint64_t a1, void *a2)
{
  return *a2 != -1;
}

uint64_t sub_19E0BA8A0()
{
  return 0;
}

void *sub_19E0BA8A8(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  v10[0] = &unk_1EF0A1208;
  v10[1] = a4;
  v10[3] = v10;
  sub_19E0B5A50((uint64_t)v11, v10);
  sub_19E0B94B4(a1 + 8, a2, a3, (uint64_t)v11, a5);
  sub_19E06C7E4(v11);
  return sub_19E0B5B00(v10);
}

void sub_19E0BA968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BA98C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF0A1208;
  v8[1] = a4;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0B98C0(a1 + 8, a2, a3, (uint64_t)v9);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0BAA44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0BAA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, &v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, &v10, a4);
}

uint64_t sub_19E0BAB34(uint64_t a1, int *a2, unint64_t a3)
{
  uint64_t v3 = a1 + 16;
  sub_19E0B9AA0(a1 + 16, a2, a3 >> 3);
  sub_19E0B8090(v3);
  return 1;
}

uint64_t sub_19E0BAB6C(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2) {
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  }
  uint64_t v5 = a1;
  v70[0] = 0;
  v70[1] = 0;
  uint64_t v69 = v70;
  if (v4 == v3)
  {
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    int v66 = (std::string *)&v67;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = a1 + 616;
    do
    {
      std::string::size_type v10 = 0;
      uint64_t v11 = v3 + 24 * v8;
      while (1)
      {
        std::string::size_type v12 = *(char *)(v11 + 23) < 0 ? *(void *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
        if (v10 > v12) {
          break;
        }
        double v13 = *(double *)sub_19E0B6A0C(v9, (void *)v11);
        std::string::basic_string(&v71, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v66);
        int v66 = &v71;
        size_t v14 = (double *)sub_19E0B3CA4((uint64_t **)&v69, &v71, (_OWORD **)&v66);
        v14[7] = v13 + v14[7];
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        ++v10;
      }
      if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF)
      {
        uint64_t v61 = 0;
        goto LABEL_96;
      }
      ++v8;
      uint64_t v3 = *a2;
      uint64_t v15 = a2[1];
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3));
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    int v66 = (std::string *)&v67;
    if (v15 != v3)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      do
      {
        uint64_t v18 = v3 + v16;
        int v19 = *(_DWORD *)(*a3 + 4 * v17);
        double v20 = *(double *)sub_19E0B6A0C((uint64_t)&v69, (void *)(v3 + v16));
        uint64_t v21 = *(unsigned __int8 *)(v18 + 23);
        if ((v21 & 0x80u) != 0) {
          uint64_t v21 = *(void *)(v18 + 8);
        }
        std::string::basic_string(&v71, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v65);
        double v22 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        uint64_t v23 = sub_19E0BB234((uint64_t **)&v66, (void *)v18, v18);
        int v24 = (int)(sqrt(v20 / v22) * 255.0);
        if (v24 >= 255) {
          int v25 = 255;
        }
        else {
          int v25 = v24;
        }
        if (v24) {
          BOOL v26 = 1;
        }
        else {
          BOOL v26 = v20 / v22 <= 0.0;
        }
        int v27 = v25 << 23;
        if (!v26) {
          int v27 = 0x800000;
        }
        *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
        ++v17;
        uint64_t v3 = *a2;
        uint64_t v28 = a2[1];
        v16 += 24;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
      if (v28 != v3)
      {
        unint64_t v29 = 0;
        do
        {
          std::string::size_type v30 = 0;
          int v31 = (const std::string *)(v3 + 24 * v29);
          while (1)
          {
            std::string::size_type v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                ? v31->__r_.__value_.__l.__size_
                : HIBYTE(v31->__r_.__value_.__r.__words[2]);
            if (v30 >= v32 - 1) {
              break;
            }
            std::string::basic_string(&v65, v31, 0, v30, (std::allocator<char> *)&v71);
            uint64_t v33 = v31;
            if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0) {
              uint64_t v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
            }
            sub_19E0B6B6C((uint64_t)&__str, (const void **)&v65.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
            if (&v67 == sub_19E05E980((uint64_t)&v66, &__str))
            {
              double v34 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &v65);
              if (v34 > *(double *)sub_19E0B6A0C((uint64_t)&v69, &__str))
              {
                double v35 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &__str);
                std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = __str.__r_.__value_.__l.__size_;
                }
                std::string::basic_string(&v71, &__str, 0, size - 1, (std::allocator<char> *)v72);
                double v37 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &v71);
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v71.__r_.__value_.__l.__data_);
                }
                size_t v38 = sub_19E0BB234((uint64_t **)&v66, &__str, (uint64_t)&__str);
                int v39 = (int)(sqrt(v35 / v37) * 255.0);
                if (v39 >= 255) {
                  int v40 = 255;
                }
                else {
                  int v40 = v39;
                }
                if (v39) {
                  BOOL v41 = 1;
                }
                else {
                  BOOL v41 = v35 / v37 <= 0.0;
                }
                int v42 = (v40 << 23) | 0x7FFFFF;
                if (!v41) {
                  int v42 = 0xFFFFFF;
                }
                *((_DWORD *)v38 + 14) = v42;
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v65.__r_.__value_.__l.__data_);
            }
            ++v30;
          }
          ++v29;
          uint64_t v3 = *a2;
        }
        while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      }
    }
    uint64_t v5 = a1;
  }
  memset(&v71, 0, sizeof(v71));
  memset(&v65, 0, sizeof(v65));
  uint64_t v43 = (uint64_t *)v66;
  if (v66 != (std::string *)&v67)
  {
    int v44 = 0;
    unint64_t v45 = 0;
    std::string::size_type v46 = 0;
    do
    {
      uint64_t v47 = (long long *)(v43 + 4);
      int v48 = (_OWORD *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_ >= v71.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v50 = sub_19E0B6BF0((uint64_t *)&v71, v47);
      }
      else
      {
        if (*((char *)v43 + 55) < 0)
        {
          sub_19E03FA9C((unsigned char *)v71.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
        }
        else
        {
          long long v49 = *v47;
          *(void *)(v71.__r_.__value_.__l.__size_ + 16) = v43[6];
          *int v48 = v49;
        }
        std::string::size_type v50 = (std::string::size_type)v48 + 24;
      }
      v71.__r_.__value_.__l.__size_ = v50;
      if ((unint64_t)v44 >= v46)
      {
        uint64_t v51 = (v44 - v45) >> 2;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v46 - (void)v45) >> 1 > v52) {
          unint64_t v52 = (uint64_t)(v46 - (void)v45) >> 1;
        }
        if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53) {
          unint64_t v53 = (unint64_t)sub_19E068D84(v53);
        }
        else {
          uint64_t v54 = 0;
        }
        int v55 = (char *)(v53 + 4 * v51);
        *(_DWORD *)int v55 = *((_DWORD *)v43 + 14);
        std::string::size_type v56 = (std::string::size_type)(v55 + 4);
        while (v44 != v45)
        {
          int v57 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v55 - 1) = v57;
          v55 -= 4;
        }
        std::string::size_type v46 = v53 + 4 * v54;
        v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v65.__r_.__value_.__l.__size_ = v56;
        v65.__r_.__value_.__r.__words[2] = v46;
        if (v45) {
          operator delete(v45);
        }
        unint64_t v45 = v55;
        int v44 = (char *)v56;
      }
      else
      {
        *(_DWORD *)int v44 = *((_DWORD *)v43 + 14);
        v44 += 4;
      }
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
      unsigned __int8 v58 = (char *)v43[1];
      if (v58)
      {
        do
        {
          int v59 = (char **)v58;
          unsigned __int8 v58 = *(char **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          int v59 = (char **)v43[2];
          BOOL v60 = *v59 == (char *)v43;
          uint64_t v43 = (uint64_t *)v59;
        }
        while (!v60);
      }
      uint64_t v43 = (uint64_t *)v59;
    }
    while (v59 != &v67);
  }
  uint64_t v61 = sub_19E0B9B18(v5 + 8, (uint64_t *)&v71, &v65);
  if (v65.__r_.__value_.__r.__words[0]) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  sub_19E041AD0((void ***)&v65);
  sub_19E0672C4(v67);
LABEL_96:
  sub_19E0672C4(v70[0]);
  return v61;
}

void sub_19E0BB158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  std::string __p = &a28;
  sub_19E041AD0(&__p);
  sub_19E0672C4(a23);
  sub_19E0672C4(a26);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E0BB234(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v5;
        unint64_t v8 = v5 + 4;
        if ((sub_19E05EE24(a2, v5 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v5 = *v6;
        uint64_t v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if ((sub_19E05EE24(v8, a2) & 0x80) == 0) {
        return v6;
      }
      uint64_t v9 = v6 + 1;
      uint64_t v5 = v6[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_9:
    std::string::size_type v10 = (char *)operator new(0x40uLL);
    uint64_t v11 = v10 + 32;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_19E03FA9C(v11, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)a3;
      *((void *)v10 + 6) = *(void *)(a3 + 16);
    }
    *((_DWORD *)v10 + 14) = 0;
    *(void *)std::string::size_type v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v6;
    *uint64_t v9 = (uint64_t *)v10;
    std::string::size_type v12 = (uint64_t *)**a1;
    double v13 = (uint64_t *)v10;
    if (v12)
    {
      *a1 = v12;
      double v13 = *v9;
    }
    sub_19E05D650(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v10;
}

void sub_19E0BB340(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0BB354(uint64_t a1, void *a2)
{
  std::string __p = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v8 = (v5 - v3) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v4 - (void)v3) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v4 - (void)v3) >> 1;
        }
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_19E068D84(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        std::string::size_type v12 = (_DWORD *)(v10 + 4 * v8);
        *std::string::size_type v12 = v6;
        uint64_t v7 = v12 + 1;
        while (v5 != v3)
        {
          int v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--std::string::size_type v12 = v13;
        }
        unint64_t v4 = v10 + 4 * v11;
        std::string __p = v12;
        unint64_t v19 = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)uint64_t v5 = v6;
        uint64_t v7 = v5 + 4;
      }
      uint64_t v18 = v7;
      ++v6;
      uint64_t v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19E0BB4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0BB4F4@<X0>(void *a1@<X8>)
{
  return sub_19E0B9DF8(a1);
}

void *sub_19E0BB500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A1188;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0BB5A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BB5B8()
{
  return &unk_1EF0A11E8;
}

uint64_t sub_19E0BB5C4(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A11E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BB604(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0BB628(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A1188;
  a2[1] = v2;
  return result;
}

void *sub_19E0BB64C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A1188;
  result[1] = v3;
  return result;
}

void sub_19E0BB694()
{
}

void *sub_19E0BB6AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A1108;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0BB750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BB764()
{
  return &unk_1EF0A1168;
}

uint64_t sub_19E0BB770(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1168)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BB7B0(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0BB7D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A1108;
  a2[1] = v2;
  return result;
}

void *sub_19E0BB7F8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A1108;
  result[1] = v3;
  return result;
}

void sub_19E0BB840()
{
}

uint64_t sub_19E0BB858(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0BB8B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = 0;
  int v44 = 0;
  unint64_t v45 = 0;
  std::string __p = 0;
  BOOL v41 = 0;
  unint64_t v42 = 0;
  if (a2)
  {
    uint64_t v8 = a2;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      int v13 = *(void **)(a3 + 8 * i);
      size_t v14 = *(void *)(a4 + 8 * i);
      size_t v38 = v14;
      int v39 = v13;
      uint64_t v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        uint64_t v16 = (void *)sub_19E0B5820(&v43, &v39, &v38);
      }
      else
      {
        sub_19E057A94(v44, v13, v14);
        uint64_t v16 = v15 + 3;
      }
      int v44 = v16;
      if (a5)
      {
        uint64_t v17 = *(void *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v19 = v10;
          uint64_t v20 = a5;
          uint64_t v21 = v8;
          uint64_t v22 = a3;
          uint64_t v23 = a4;
          uint64_t v24 = (v11 - v9) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            sub_19E041BEC();
          }
          unint64_t v26 = v19 - (void)v9;
          unint64_t v27 = (uint64_t)(v19 - (void)v9) >> 1;
          if (v27 > v25) {
            unint64_t v25 = v27;
          }
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v25;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_19E068D84(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          std::string::size_type v30 = (_DWORD *)(v28 + 4 * v24);
          *std::string::size_type v30 = v17;
          uint64_t v18 = v30 + 1;
          while (v11 != v9)
          {
            int v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--std::string::size_type v30 = v31;
          }
          std::string __p = v30;
          BOOL v41 = v18;
          unint64_t v32 = v28 + 4 * v29;
          unint64_t v42 = v32;
          if (v9) {
            operator delete(v9);
          }
          unint64_t v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          uint64_t v8 = v21;
          a5 = v20;
          unint64_t v10 = v32;
        }
        else
        {
          *(_DWORD *)uint64_t v11 = v17;
          uint64_t v18 = v11 + 4;
        }
        BOOL v41 = v18;
        uint64_t v11 = (char *)v18;
      }
    }
  }
  uint64_t v33 = *a1;
  if (a5) {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 64))();
  }
  else {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 56))();
  }
  uint64_t v35 = v34;
  if (__p)
  {
    BOOL v41 = __p;
    operator delete(__p);
  }
  std::string __p = &v43;
  sub_19E041AD0((void ***)&__p);
  return v35;
}

void sub_19E0BBAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  std::string __p = &a16;
  sub_19E041AD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E0BBB1C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A0DA8;
  sub_19E0672C4(*(char **)(a1 + 624));
  sub_19E0B76A4((void *)(a1 + 8));

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0BBB8C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A0DA8;
  sub_19E0672C4(*(char **)(a1 + 624));
  sub_19E0B76A4((void *)(a1 + 8));
  return a1;
}

uint64_t sub_19E0BBBDC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1EF09DBF0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 1;
  sub_19E05D254((uint64_t *)(a1 + 56), a2);
  *(unsigned char *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  sub_19E0BDC20(a1 + 88);
  return a1;
}

void sub_19E0BBC58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0BBC74(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09DBF0;
  sub_19E05D848(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_19E0BBCCC()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 112))(v0);
  if (!result) {
    return result;
  }
  char v7 = *((unsigned char *)v4 + 24);
  int v8 = *v4;
  unsigned int v9 = HIBYTE(*v4) & 3;
  if (v7 + 1 <= v9)
  {
    LODWORD(__dst[0]) = *v4;
    __dst[1] = *((void *)v4 + 1);
    LODWORD(__dst[2]) = v4[4];
    char v11 = v7 + 1;
    LOBYTE(__dst[3]) = v11;
    if (v9 >= v11) {
      char v12 = *((unsigned char *)&__dst[2] + v11);
    }
    else {
      char v12 = 0;
    }
    return sub_19E0BBF30(*(void *)(v2 + 24), v12);
  }
  else
  {
    unsigned int v10 = v8 & 0xFFFFFF;
    if ((v8 & 0xFFFFFF) != 0)
    {
      if (v10 < *(_DWORD *)(v5 + 84)) {
        __assert_rtn("enumerateChildren", "PatriciaTrie.h", 275, "cursor.isRoot() || firstChildOffset >= m_trieRootOffset");
      }
    }
    else
    {
      if (*((unsigned char *)v4 + 24)) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v8 == 0;
      }
      if (!v13 || *((unsigned char *)v4 + 16) != 0) {
        return result;
      }
      unsigned int v10 = 0;
    }
    uint64_t v15 = sub_19E0BBF80(v5, v10);
    uint64_t result = (uint64_t)memcpy(__dst, v15, 0x10CuLL);
    unint64_t v16 = 0x1FFFFFFFFFFFFD00;
    do
    {
      uint64_t v17 = &__dst[v16];
      *((_DWORD *)v17 + 1604) = v15[v16 + 802];
      v17[803] = v15[v16 + 803];
      *((_DWORD *)v17 + 1608) = v15[v16 + 804];
      v16 += 3;
    }
    while (v16 * 8);
    long long v25 = *((_OWORD *)v15 + 401);
    uint64_t v26 = v15[804];
    unsigned int v18 = __dst[1];
    if (LODWORD(__dst[1]))
    {
      unsigned int v19 = 0;
      do
      {
        uint64_t v20 = &__dst[3 * *((unsigned __int8 *)&__dst[1] + (int)v19 + 4)];
        int v21 = *((_DWORD *)v20 + 68);
        uint64_t v22 = v20[35];
        if ((v21 & 0x10FFFFFF) != 0x10000000 || (v22 & 0xFF00000000) != 0) {
          uint64_t result = sub_19E0BBF30(*(void *)(v2 + 24), __dst[3 * *((unsigned __int8 *)&__dst[1] + (int)v19 + 4) + 36]);
        }
        ++v19;
      }
      while (v19 < v18);
    }
  }
  return result;
}

uint64_t sub_19E0BBF30(uint64_t a1, char a2)
{
  char v3 = a2;
  if (!a1) {
    sub_19E0483E0();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 48))(a1, &v3);
}

void *sub_19E0BBF80(uint64_t a1, unsigned int a2)
{
  if (!*(unsigned char *)(a1 + 80)) {
    __assert_rtn("getTrieArrayCache", "PatriciaTrie.h", 361, "m_valid");
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2) {
    uint64_t v3 = v2 + a2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v2 + *(unsigned int *)(a1 + 84);
  uint64_t v5 = (void *)(a1 + 88);

  return sub_19E0BBFE8(v5, v3, v4);
}

void *sub_19E0BBFE8(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a1 + 805;
    if (a1[805] != a2) {
      sub_19E059CF4((uint64_t)(a1 + 805), a2);
    }
  }
  else
  {
    if (*a1 != a3) {
      sub_19E059CF4((uint64_t)a1, a3);
    }
    return a1;
  }
  return v4;
}

void sub_19E0BC04C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  memset(&v8, 0, sizeof(v8));
  std::string::reserve(&v8, 0x40uLL);
  sub_19E0BC0E0(a1, a2, (uint64_t)&v8, a3, a4);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_19E0BC0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0BC0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  v19[4] = *MEMORY[0x1E4F143B8];
  unsigned int v18 = a5;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if (result)
  {
    int v17 = 0;
    char v16 = 0;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 128))(a1, a2, &v17);
    if (!result
      || ((v11 = *(char *)(a3 + 23), v11 >= 0) ? (uint64_t v12 = a3) : (uint64_t v12 = *(void *)a3),
          v11 >= 0 ? (uint64_t v13 = *(unsigned __int8 *)(a3 + 23)) : (uint64_t v13 = *(void *)(a3 + 8)),
          uint64_t result = (void *)sub_19E06E4F4(*(void *)(a4 + 24), v17, v12, v13, (uint64_t)&v16),
          !v16))
    {
      if ((a5 & 0x80000000) != 0) {
        goto LABEL_14;
      }
      unint64_t v14 = *(unsigned __int8 *)(a3 + 23);
      if ((v14 & 0x80u) != 0) {
        unint64_t v14 = *(void *)(a3 + 8);
      }
      if (v14 < a5)
      {
LABEL_14:
        uint64_t v15 = operator new(0x28uLL);
        *uint64_t v15 = &unk_1EF09DE48;
        v15[1] = a3;
        void v15[2] = a1;
        v15[3] = a4;
        v15[4] = &v18;
        v19[3] = v15;
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v19);
        return sub_19E0BC298(v19);
      }
    }
  }
  return result;
}

void sub_19E0BC27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E0BC298((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BC298(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E0BC31C()
{
  return &unk_1EF09DEB8;
}

uint64_t sub_19E0BC328(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09DEB8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_19E0BC368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1 + 8;
  uint64_t v5 = *(std::string **)(a1 + 8);
  uint64_t v6 = *(void *)(v7 + 8);
  unsigned int v8 = *(char *)(a3 + 24);
  if ((*(unsigned char *)(a3 + 3) & 3u) >= v8) {
    std::string::value_type v9 = *(unsigned char *)(a3 + v8 + 16);
  }
  else {
    std::string::value_type v9 = 0;
  }
  std::string::push_back(v5, v9);
  uint64_t result = sub_19E0BC0E0(v6, a3, *(void *)(a1 + 8), *(void *)(a1 + 24), **(_DWORD **)(a1 + 32));
  int v11 = *(uint64_t **)(a1 + 8);
  if (*((char *)v11 + 23) < 0)
  {
    uint64_t v12 = v11[1] - 1;
    v11[1] = v12;
    int v11 = (uint64_t *)*v11;
  }
  else
  {
    uint64_t v12 = *((unsigned __int8 *)v11 + 23) - 1;
    *((unsigned char *)v11 + 23) = v12 & 0x7F;
  }
  *((unsigned char *)v11 + v12) = 0;
  return result;
}

__n128 sub_19E0BC418(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF09DE48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0BC448(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF09DE48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_19E0BC49C()
{
}

uint64_t sub_19E0BC4B4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if (result)
  {
    if (*(char *)(a2 + 24) + 1 <= (*(unsigned char *)(a2 + 3) & 3u))
    {
      return 0;
    }
    else
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *a3 = v6;
      return v6 != 0;
    }
  }
  return result;
}

uint64_t sub_19E0BC530@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v7 = *(_DWORD *)a2;
  *(_DWORD *)a5 = *(_DWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a5 + 8) = v8;
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a5 + 16) = v9;
  char v10 = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a5 + 24) = v10;
  if (a4)
  {
    uint64_t v11 = a4;
    uint64_t v13 = result;
    do
    {
      if (v10 == -1) {
        goto LABEL_17;
      }
      unsigned int v14 = *a3;
      if (v10 + 1 <= (HIBYTE(v7) & 3))
      {
        uint64_t result = sub_19E0BC6E0(a5);
        if (result != v14) {
          goto LABEL_16;
        }
        unsigned int v7 = *(_DWORD *)a5;
        uint64_t v8 = *(void *)(a5 + 8);
        unsigned int v9 = *(_DWORD *)(a5 + 16);
        char v10 = *(unsigned char *)(a5 + 24) + 1;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 112))(v13, a5);
        if (!result) {
          goto LABEL_16;
        }
        unsigned int v15 = *(_DWORD *)a5;
        if (*(char *)(a5 + 24) + 1 <= (HIBYTE(*(_DWORD *)a5) & 3u)) {
          __assert_rtn("advanceCursorToChildNode", "PatriciaTrie.h", 378, "!cursor.hasMorePatriciaKeyBytes()");
        }
        unsigned int v9 = v15 & 0xFFFFFF;
        if ((v15 & 0xFFFFFF) != 0) {
          goto LABEL_11;
        }
        uint64_t v8 = 0;
        char v10 = -1;
        if (*(unsigned char *)(a5 + 24) || v15)
        {
          unsigned int v7 = v15 & 0xFFFFFF;
          goto LABEL_18;
        }
        unsigned int v7 = 0;
        if (!*(unsigned char *)(a5 + 16))
        {
LABEL_11:
          uint64_t result = (uint64_t)sub_19E0BBF80(v13, v9);
          unsigned int v7 = *(_DWORD *)(result + 24 * v14 + 272);
          if (!v7 && !*(unsigned char *)(result + 24 * v14 + 288))
          {
LABEL_16:
            unsigned int v9 = 0;
            uint64_t v8 = 0;
            unsigned int v7 = 0;
LABEL_17:
            char v10 = -1;
            goto LABEL_18;
          }
          char v10 = 0;
          uint64_t v16 = result + 24 * v14;
          uint64_t v8 = *(void *)(v16 + 280);
          unsigned int v9 = *(_DWORD *)(v16 + 288);
        }
      }
LABEL_18:
      *(_DWORD *)a5 = v7;
      *(void *)(a5 + 8) = v8;
      *(_DWORD *)(a5 + 16) = v9;
      ++a3;
      *(unsigned char *)(a5 + 24) = v10;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_19E0BC6E0(uint64_t a1)
{
  unsigned int v1 = *(char *)(a1 + 24) + 1;
  if (v1 > (*(unsigned char *)(a1 + 3) & 3u)) {
    __assert_rtn("peekNextByte", "PatriciaTrie.h", 53, "hasMorePatriciaKeyBytes()");
  }
  return *(unsigned __int8 *)(a1 + v1 + 16);
}

BOOL sub_19E0BC734(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 80)) {
    BOOL v2 = *(unsigned __int8 *)(a2 + 24) == 255;
  }
  else {
    BOOL v2 = 1;
  }
  return !v2;
}

void sub_19E0BC750(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
}

void sub_19E0BC764(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 104))(v16);
  (*(void (**)(void *__return_ptr, uint64_t, void *, const void *, size_t))(*(void *)a1 + 120))(v19, a1, v16, a2, a3);
  LODWORD(v16[0]) = v19[0];
  v16[1] = v19[1];
  int v17 = v20;
  char v18 = (char)v21;
  if (v21 != 255)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E04147C();
    }
    if (a3 >= 0x17)
    {
      uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v11 = a3 | 7;
      }
      uint64_t v12 = v11 + 1;
      char v10 = operator new(v11 + 1);
      __p[1] = (void *)a3;
      unint64_t v15 = v12 | 0x8000000000000000;
      __p[0] = v10;
    }
    else
    {
      HIBYTE(v15) = a3;
      char v10 = __p;
      if (!a3)
      {
LABEL_10:
        *((unsigned char *)v10 + a3) = 0;
        uint64_t v13 = operator new(0x28uLL);
        void *v13 = &unk_1EF09DDC8;
        v13[1] = __p;
        v13[2] = a2;
        v13[3] = a3;
        v13[4] = a4;
        int v21 = v13;
        (*(void (**)(uint64_t, void *, void *, uint64_t))(*(void *)a1 + 136))(a1, v16, v19, a5);
        sub_19E06C7E4(v19);
        if (SHIBYTE(v15) < 0) {
          operator delete(__p[0]);
        }
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19E0BC95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_19E0BC990()
{
  return &unk_1EF09DE28;
}

uint64_t sub_19E0BC99C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09DE28)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BC9DC(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = a1[3];
  unint64_t v10 = v9 + v8;
  uint64_t v11 = a1[1];
  int v12 = *(char *)(v11 + 23);
  if (v12 < 0) {
    unint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    unint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  unsigned int v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    uint64_t v11 = a1[1];
    uint64_t v9 = a1[3];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
  uint64_t v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    uint64_t v11 = a1[1];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
LABEL_9:
  int v16 = *a2;
  if ((v12 & 0x80) != 0) {
    uint64_t v11 = *(void *)v11;
  }
  uint64_t v17 = *(void *)(a1[4] + 24);

  return sub_19E06E4F4(v17, v16, v11, v10, a4);
}

__n128 sub_19E0BCACC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF09DDC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0BCAFC(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x28uLL);
  *(void *)BOOL v2 = &unk_1EF09DDC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_19E0BCB50()
{
}

void *sub_19E0BCB68(void *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    unsigned int v7 = result;
    char v18 = 0;
    (*(void (**)(void *__return_ptr))(*result + 104))(v15);
    uint64_t v8 = 0;
    int v14 = 0;
    while (1)
    {
      __n128 result = (*(void *(**)(void *__return_ptr, void *, void *, uint64_t, uint64_t))(*v7 + 120))(v11, v7, v15, a2 + v8, 1);
      LODWORD(v15[0]) = v11[0];
      v15[1] = v11[1];
      int v16 = v12;
      unsigned __int8 v17 = v13;
      if (v13 == 255) {
        break;
      }
      __n128 result = (void *)(*(uint64_t (**)(void *, void *, int *))(*v7 + 128))(v7, v15, &v14);
      if (result)
      {
        unint64_t v9 = v8 + 1;
        if (a3 >= v8 + 1) {
          uint64_t v10 = v8 + 1;
        }
        else {
          uint64_t v10 = a3;
        }
        __n128 result = (void *)sub_19E06E4F4(*(void *)(a4 + 24), v14, a2, v10, (uint64_t)&v18);
        if (v18) {
          return result;
        }
        ++v8;
        if (v9 >= a3) {
          return result;
        }
      }
      else if (++v8 >= a3)
      {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_19E0BCCC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 104))(v9);
  (*(void (**)(void *__return_ptr, uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 120))(v10, a1, v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v10, a4);
}

uint64_t sub_19E0BCD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a3;
  uint64_t result = sub_19E05C8F8(a2, a3, 68, (_DWORD *)(a1 + 84));
  if (result)
  {
    int v8 = 0;
    uint64_t result = sub_19E05C8F8(*(void *)(a1 + 32), *(void *)(a1 + 40), 40, &v8);
    if (result)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = v8;
      *(_DWORD *)(a1 + 6504) = v8;
      *(void *)(a1 + 6512) = v5;
      *(void *)(a1 + 6520) = v6;
      *(_DWORD *)(a1 + 12944) = v7;
      *(void *)(a1 + 12952) = v5;
      *(void *)(a1 + 12960) = v6;
      *(unsigned char *)(a1 + 80) = 1;
    }
  }
  return result;
}

void sub_19E0BCE10(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) == (uint64_t)(a3[1] - *a3) >> 2)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    if (v4 != v3)
    {
      unint64_t v7 = 0;
      do
      {
        memset(v28, 0, sizeof(v28));
        *(_OWORD *)uint64_t v27 = 0u;
        LODWORD(v26) = *(_DWORD *)(*a3 + 4 * v7);
        HIDWORD(v26) = v7;
        int v8 = (char *)(v3 + 24 * v7);
        if (v8[23] < 0)
        {
          int v8 = *(char **)v8;
          unint64_t v9 = *(void *)(v3 + 24 * v7 + 8);
        }
        else
        {
          unint64_t v9 = v8[23];
        }
        sub_19E05B100(v27, v8, &v8[v9], v9);
        uint64_t v10 = v28[1];
        unint64_t v11 = v28[2];
        if (v9 <= v28[2] - v28[1])
        {
          if (v9 < v28[2] - v28[1])
          {
            unint64_t v11 = v28[1] + v9;
            v28[2] = v28[1] + v9;
          }
        }
        else
        {
          sub_19E07C4B4(&v28[1], v9 - (v28[2] - v28[1]));
          uint64_t v10 = v28[1];
          unint64_t v11 = v28[2];
        }
        if (v10 != v11)
        {
          uint64_t v12 = 0;
          do
          {
            *(unsigned char *)(v10 + v12) = v12;
            ++v12;
          }
          while (v10 + v12 != v11);
        }
        *(void *)uint64_t v29 = 0x3FF0000000000000;
        *(_DWORD *)&v29[8] = 1;
        v29[12] = 0;
        unsigned __int8 v13 = v23;
        if ((unint64_t)v23 >= v24)
        {
          unint64_t v15 = 0x8E38E38E38E38E39 * (((uint64_t)v23 - v22) >> 3);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x38E38E38E38E38ELL) {
            sub_19E041BEC();
          }
          if (0x1C71C71C71C71C72 * ((uint64_t)(v24 - v22) >> 3) > v16) {
            unint64_t v16 = 0x1C71C71C71C71C72 * ((uint64_t)(v24 - v22) >> 3);
          }
          if (0x8E38E38E38E38E39 * ((uint64_t)(v24 - v22) >> 3) >= 0x1C71C71C71C71C7) {
            unint64_t v17 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v17 = v16;
          }
          v25[4] = &v24;
          if (v17) {
            char v18 = (char *)sub_19E05CED0((uint64_t)&v24, v17);
          }
          else {
            char v18 = 0;
          }
          unsigned int v19 = &v18[72 * v15];
          v25[0] = v18;
          v25[1] = v19;
          v25[3] = &v18[72 * v17];
          *(void *)unsigned int v19 = v26;
          *((void *)v19 + 1) = 0;
          *((void *)v19 + 2) = 0;
          *((void *)v19 + 3) = 0;
          *(_OWORD *)(v19 + 8) = *(_OWORD *)v27;
          *((void *)v19 + 3) = v28[0];
          v27[0] = 0;
          v27[1] = 0;
          v28[0] = 0;
          *((void *)v19 + 4) = 0;
          *((void *)v19 + 5) = 0;
          *((void *)v19 + 6) = 0;
          *((_OWORD *)v19 + 2) = *(_OWORD *)&v28[1];
          *((void *)v19 + 6) = v28[3];
          memset(&v28[1], 0, 24);
          uint64_t v20 = *(void *)v29;
          *(void *)(v19 + 61) = *(void *)&v29[5];
          *((void *)v19 + 7) = v20;
          v25[2] = v19 + 72;
          sub_19E0BD220(&v22, v25);
          int v21 = v23;
          sub_19E0BD2E0((uint64_t)v25);
          uint64_t v23 = v21;
          if (v28[1])
          {
            v28[2] = v28[1];
            operator delete((void *)v28[1]);
          }
        }
        else
        {
          void *v23 = v26;
          v13[1] = 0;
          v13[3] = 0;
          v13[4] = 0;
          v13[2] = 0;
          *(_OWORD *)(v13 + 1) = *(_OWORD *)v27;
          v13[3] = v28[0];
          v27[0] = 0;
          v27[1] = 0;
          v28[0] = 0;
          v13[5] = 0;
          v13[6] = 0;
          *((_OWORD *)v13 + 2) = *(_OWORD *)&v28[1];
          v13[6] = v28[3];
          memset(&v28[1], 0, 24);
          uint64_t v14 = *(void *)v29;
          *(void *)((char *)v13 + 61) = *(void *)&v29[5];
          v13[7] = v14;
          uint64_t v23 = v13 + 9;
        }
        if (v27[0])
        {
          v27[1] = v27[0];
          operator delete(v27[0]);
        }
        ++v7;
        uint64_t v3 = *a2;
      }
      while (v7 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    }
    sub_19E05B860();
  }
  __assert_rtn("build", "PatriciaTrie.h", 140, "keys.size() == values.size()");
}

void sub_19E0BD1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  sub_19E05D1BC(&a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E0BD220(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 72) = *(void *)(v2 + v5 - 72);
      *(void *)(v6 - 64) = 0;
      *(void *)(v6 - 56) = 0;
      *(void *)(v6 - 48) = 0;
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(void *)(v6 - 48) = *(void *)(v2 + v5 - 48);
      *(void *)(v7 - 64) = 0;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v6 - 40) = 0;
      *(void *)(v6 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 40) = *(_OWORD *)(v2 + v5 - 40);
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      uint64_t v8 = *(void *)(v2 + v5 - 16);
      *(void *)(v6 - 11) = *(void *)(v2 + v5 - 11);
      *(void *)(v6 - 16) = v8;
      v5 -= 72;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  void *result = v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19E0BD2E0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    sub_19E0BD330((void *)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_19E0BD330(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

uint64_t sub_19E0BD388(uint64_t a1, void *a2)
{
  std::string __p = 0;
  unsigned int v19 = 0;
  unint64_t v20 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v8 = (v5 - v3) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v4 - (void)v3) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v4 - (void)v3) >> 1;
        }
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_19E068D84(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = (_DWORD *)(v10 + 4 * v8);
        *uint64_t v12 = v6;
        uint64_t v7 = v12 + 1;
        while (v5 != v3)
        {
          int v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--uint64_t v12 = v13;
        }
        unint64_t v4 = v10 + 4 * v11;
        std::string __p = v12;
        unint64_t v20 = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)uint64_t v5 = v6;
        uint64_t v7 = v5 + 4;
      }
      unsigned int v19 = v7;
      uint64_t v5 = (char *)v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v6++);
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    unsigned int v19 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_19E0BD508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0BD52C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (void *)a2;
  size_t v3 = result[5];
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E04147C();
  }
  unint64_t v4 = (const void *)result[4];
  if (v3 >= 0x17)
  {
    uint64_t v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v5 = v3 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v7 = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    *uint64_t v2 = v7;
    uint64_t v2 = v7;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = v3;
    if (!v3) {
      goto LABEL_9;
    }
  }
  uint64_t result = memmove(v2, v4, v3);
LABEL_9:
  *((unsigned char *)v2 + v3) = 0;
  return result;
}

void *sub_19E0BD5C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09DD48;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E06C7E4(v5);
}

void sub_19E0BD66C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E06C7E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BD680()
{
  return &unk_1EF09DDA8;
}

uint64_t sub_19E0BD68C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09DDA8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BD6CC(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0BD6F0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09DD48;
  a2[1] = v2;
  return result;
}

void *sub_19E0BD714(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09DD48;
  result[1] = v3;
  return result;
}

void sub_19E0BD75C()
{
}

void *sub_19E0BD774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09DCC8;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E06C7E4(v5);
}

void sub_19E0BD818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E06C7E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BD82C()
{
  return &unk_1EF09DD28;
}

uint64_t sub_19E0BD838(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09DD28)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BD878(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0BD89C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09DCC8;
  a2[1] = v2;
  return result;
}

void *sub_19E0BD8C0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09DCC8;
  result[1] = v3;
  return result;
}

void sub_19E0BD908()
{
}

uint64_t sub_19E0BD920(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0BD97C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = 0;
  int v44 = 0;
  unint64_t v45 = 0;
  std::string __p = 0;
  BOOL v41 = 0;
  unint64_t v42 = 0;
  if (a2)
  {
    uint64_t v8 = a2;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      int v13 = *(void **)(a3 + 8 * i);
      size_t v14 = *(void *)(a4 + 8 * i);
      size_t v38 = v14;
      int v39 = v13;
      uint64_t v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        unint64_t v16 = (void *)sub_19E0B5820(&v43, &v39, &v38);
      }
      else
      {
        sub_19E057A94(v44, v13, v14);
        unint64_t v16 = v15 + 3;
      }
      int v44 = v16;
      if (a5)
      {
        uint64_t v17 = *(void *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v19 = v10;
          uint64_t v20 = a5;
          uint64_t v21 = v8;
          uint64_t v22 = a3;
          uint64_t v23 = a4;
          uint64_t v24 = (v11 - v9) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            sub_19E041BEC();
          }
          unint64_t v26 = v19 - (void)v9;
          unint64_t v27 = (uint64_t)(v19 - (void)v9) >> 1;
          if (v27 > v25) {
            unint64_t v25 = v27;
          }
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v25;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_19E068D84(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          std::string::size_type v30 = (_DWORD *)(v28 + 4 * v24);
          *std::string::size_type v30 = v17;
          char v18 = v30 + 1;
          while (v11 != v9)
          {
            int v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--std::string::size_type v30 = v31;
          }
          std::string __p = v30;
          BOOL v41 = v18;
          unint64_t v32 = v28 + 4 * v29;
          unint64_t v42 = v32;
          if (v9) {
            operator delete(v9);
          }
          unint64_t v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          uint64_t v8 = v21;
          a5 = v20;
          unint64_t v10 = v32;
        }
        else
        {
          *(_DWORD *)uint64_t v11 = v17;
          char v18 = v11 + 4;
        }
        BOOL v41 = v18;
        uint64_t v11 = (char *)v18;
      }
    }
  }
  uint64_t v33 = *a1;
  if (a5) {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 64))();
  }
  else {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 56))();
  }
  uint64_t v35 = v34;
  if (__p)
  {
    BOOL v41 = __p;
    operator delete(__p);
  }
  std::string __p = &v43;
  sub_19E041AD0((void ***)&__p);
  return v35;
}

void sub_19E0BDBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  std::string __p = &a16;
  sub_19E041AD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E0BDBE4(uint64_t a1)
{
  sub_19E0BBC74(a1);

  JUMPOUT(0x19F3BA710);
}

double sub_19E0BDC20(uint64_t a1)
{
  uint64_t v1 = 272;
  do
  {
    uint64_t v2 = a1 + v1;
    *(_DWORD *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    v1 += 24;
  }
  while (v2 + 24 != a1 + 6416);
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v3 = -6144;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  do
  {
    uint64_t v4 = a1 + v3;
    *(_DWORD *)(v4 + 6416) = 0;
    *(void *)(v4 + 6424) = 0;
    *(_DWORD *)(v4 + 6432) = 0;
    v3 += 24;
  }
  while (v3);
  *(_DWORD *)(a1 + 6416) = 0;
  *(_OWORD *)(a1 + 6424) = 0u;
  uint64_t v5 = 6712;
  do
  {
    uint64_t v6 = a1 + v5;
    *(_DWORD *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    v5 += 24;
  }
  while (v6 + 24 != a1 + 12856);
  *(_OWORD *)(a1 + 6692) = 0u;
  *(_OWORD *)(a1 + 6664) = 0u;
  *(_OWORD *)(a1 + 6680) = 0u;
  *(_OWORD *)(a1 + 6632) = 0u;
  *(_OWORD *)(a1 + 6648) = 0u;
  *(_OWORD *)(a1 + 6600) = 0u;
  *(_OWORD *)(a1 + 6616) = 0u;
  *(_OWORD *)(a1 + 6568) = 0u;
  *(_OWORD *)(a1 + 6584) = 0u;
  *(_OWORD *)(a1 + 6536) = 0u;
  *(_OWORD *)(a1 + 6552) = 0u;
  *(_OWORD *)(a1 + 6504) = 0u;
  *(_OWORD *)(a1 + 6520) = 0u;
  *(_OWORD *)(a1 + 6472) = 0u;
  *(_OWORD *)(a1 + 6488) = 0u;
  *(_OWORD *)(a1 + 6440) = 0u;
  *(_OWORD *)(a1 + 6456) = 0u;
  uint64_t v7 = -6144;
  do
  {
    uint64_t v8 = a1 + v7;
    *(_DWORD *)(v8 + 12856) = 0;
    *(void *)(v8 + 12864) = 0;
    *(_DWORD *)(v8 + 12872) = 0;
    v7 += 24;
  }
  while (v7);
  *(_DWORD *)(a1 + 12856) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 12864) = 0u;
  return result;
}

uint64_t sub_19E0BDD28()
{
  return sub_19E0BBCCC();
}

void *sub_19E0BDD30(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF09E4C8;
  v8[1] = a3;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0BC04C(a1 + 8, a2, (uint64_t)v9, a4);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0BDDE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BDE0C()
{
  return &unk_1EF09E528;
}

uint64_t sub_19E0BDE18(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09E528)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BDE58(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF) {
    return sub_19E0B5BE8(*(void *)(*(void *)(result + 8) + 24), v4, *a3, a3[1], a4);
  }
  return result;
}

uint64_t sub_19E0BDE90(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09E4C8;
  a2[1] = v2;
  return result;
}

void *sub_19E0BDEB4(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09E4C8;
  result[1] = v3;
  return result;
}

void sub_19E0BDEFC()
{
}

uint64_t sub_19E0BDF14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 112))();
  if (result)
  {
    if (*(char *)(a2 + 24) + 1 > (*(unsigned char *)(a2 + 3) & 3u)
      && (int v6 = *(_DWORD *)(a2 + 8)) != 0
      && (int v7 = v6 & 0x7FFFFF, v7 != 0x7FFFFF))
    {
      *a3 = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_19E0BDFA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_19E0BC530(a1 + 8, a2, a3, a4, a5);
}

BOOL sub_19E0BDFA8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v2 = *(unsigned __int8 *)(a2 + 24) == 255;
  }
  else {
    BOOL v2 = 1;
  }
  return !v2;
}

void sub_19E0BDFC4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
}

void *sub_19E0BDFD8(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  v10[0] = &unk_1EF09E4C8;
  v10[1] = a4;
  v10[3] = v10;
  sub_19E0B5A50((uint64_t)v11, v10);
  sub_19E0BC764(a1 + 8, a2, a3, (uint64_t)v11, a5);
  sub_19E06C7E4(v11);
  return sub_19E0B5B00(v10);
}

void sub_19E0BE098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BE0BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF09E4C8;
  v8[1] = a4;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0BCB68((void *)(a1 + 8), a2, a3, (uint64_t)v9);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0BE174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0BE198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 104))(v9);
  (*(void (**)(void *__return_ptr, uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 120))(v10, a1, v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v10, a4);
}

uint64_t sub_19E0BE264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E0BCD8C(a1 + 8, a2, a3);
}

uint64_t sub_19E0BE26C(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2) {
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  }
  uint64_t v5 = a1;
  v69[0] = 0;
  v69[1] = 0;
  uint64_t v68 = v69;
  if (v4 == v3)
  {
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    std::string v65 = (std::string *)&v66;
    goto LABEL_61;
  }
  unint64_t v8 = 0;
  uint64_t v9 = a1 + 12976;
  while (1)
  {
    std::string::size_type v10 = 0;
    uint64_t v11 = v3 + 24 * v8;
    while (1)
    {
      std::string::size_type v12 = *(char *)(v11 + 23) < 0 ? *(void *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
      if (v10 > v12) {
        break;
      }
      double v13 = *(double *)sub_19E0B6A0C(v9, (void *)v11);
      std::string::basic_string(&v70, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v65);
      std::string v65 = &v70;
      size_t v14 = (double *)sub_19E0B3CA4((uint64_t **)&v68, &v70, (_OWORD **)&v65);
      v14[7] = v13 + v14[7];
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      ++v10;
    }
    if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF) {
      break;
    }
    ++v8;
    uint64_t v3 = *a2;
    uint64_t v15 = a2[1];
    if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3))
    {
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      std::string v65 = (std::string *)&v66;
      if (v15 != v3)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          uint64_t v18 = v3 + v16;
          int v19 = *(_DWORD *)(*a3 + 4 * v17);
          double v20 = *(double *)sub_19E0B6A0C((uint64_t)&v68, (void *)(v3 + v16));
          uint64_t v21 = *(unsigned __int8 *)(v18 + 23);
          if ((v21 & 0x80u) != 0) {
            uint64_t v21 = *(void *)(v18 + 8);
          }
          std::string::basic_string(&v70, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v64);
          double v22 = *(double *)sub_19E0B6A0C((uint64_t)&v68, &v70);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
          uint64_t v23 = sub_19E0BB234((uint64_t **)&v65, (void *)v18, v18);
          int v24 = (int)(sqrt(v20 / v22) * 255.0);
          if (v24 >= 255) {
            int v25 = 255;
          }
          else {
            int v25 = v24;
          }
          if (v24) {
            BOOL v26 = 1;
          }
          else {
            BOOL v26 = v20 / v22 <= 0.0;
          }
          int v27 = v25 << 23;
          if (!v26) {
            int v27 = 0x800000;
          }
          *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
          ++v17;
          uint64_t v3 = *a2;
          uint64_t v28 = a2[1];
          v16 += 24;
        }
        while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
        if (v28 != v3)
        {
          unint64_t v29 = 0;
          do
          {
            std::string::size_type v30 = 0;
            int v31 = (const std::string *)(v3 + 24 * v29);
            while (1)
            {
              std::string::size_type v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                  ? v31->__r_.__value_.__l.__size_
                  : HIBYTE(v31->__r_.__value_.__r.__words[2]);
              if (v30 >= v32 - 1) {
                break;
              }
              std::string::basic_string(&v64, v31, 0, v30, (std::allocator<char> *)&v70);
              uint64_t v33 = v31;
              if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0) {
                uint64_t v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
              }
              sub_19E0B6B6C((uint64_t)&__str, (const void **)&v64.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
              if (&v66 == sub_19E05E980((uint64_t)&v65, &__str))
              {
                double v34 = *(double *)sub_19E0B6A0C((uint64_t)&v68, &v64);
                if (v34 > *(double *)sub_19E0B6A0C((uint64_t)&v68, &__str))
                {
                  double v35 = *(double *)sub_19E0B6A0C((uint64_t)&v68, &__str);
                  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type size = __str.__r_.__value_.__l.__size_;
                  }
                  std::string::basic_string(&v70, &__str, 0, size - 1, (std::allocator<char> *)v71);
                  double v37 = *(double *)sub_19E0B6A0C((uint64_t)&v68, &v70);
                  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v70.__r_.__value_.__l.__data_);
                  }
                  size_t v38 = sub_19E0BB234((uint64_t **)&v65, &__str, (uint64_t)&__str);
                  int v39 = (int)(sqrt(v35 / v37) * 255.0);
                  if (v39 >= 255) {
                    int v40 = 255;
                  }
                  else {
                    int v40 = v39;
                  }
                  if (v39) {
                    BOOL v41 = 1;
                  }
                  else {
                    BOOL v41 = v35 / v37 <= 0.0;
                  }
                  int v42 = (v40 << 23) | 0x7FFFFF;
                  if (!v41) {
                    int v42 = 0xFFFFFF;
                  }
                  *((_DWORD *)v38 + 14) = v42;
                }
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v64.__r_.__value_.__l.__data_);
              }
              ++v30;
            }
            ++v29;
            uint64_t v3 = *a2;
          }
          while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
        }
      }
      uint64_t v5 = a1;
LABEL_61:
      memset(&v70, 0, sizeof(v70));
      memset(&v64, 0, sizeof(v64));
      uint64_t v43 = (uint64_t *)v65;
      if (v65 != (std::string *)&v66)
      {
        int v44 = 0;
        unint64_t v45 = 0;
        std::string::size_type v46 = 0;
        do
        {
          uint64_t v47 = (long long *)(v43 + 4);
          int v48 = (_OWORD *)v70.__r_.__value_.__l.__size_;
          if (v70.__r_.__value_.__l.__size_ >= v70.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v50 = sub_19E0B6BF0((uint64_t *)&v70, v47);
          }
          else
          {
            if (*((char *)v43 + 55) < 0)
            {
              sub_19E03FA9C((unsigned char *)v70.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
            }
            else
            {
              long long v49 = *v47;
              *(void *)(v70.__r_.__value_.__l.__size_ + 16) = v43[6];
              *int v48 = v49;
            }
            std::string::size_type v50 = (std::string::size_type)v48 + 24;
          }
          v70.__r_.__value_.__l.__size_ = v50;
          if ((unint64_t)v44 >= v46)
          {
            uint64_t v51 = (v44 - v45) >> 2;
            unint64_t v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62) {
              sub_19E041BEC();
            }
            if ((uint64_t)(v46 - (void)v45) >> 1 > v52) {
              unint64_t v52 = (uint64_t)(v46 - (void)v45) >> 1;
            }
            if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v52;
            }
            if (v53) {
              unint64_t v53 = (unint64_t)sub_19E068D84(v53);
            }
            else {
              uint64_t v54 = 0;
            }
            int v55 = (char *)(v53 + 4 * v51);
            *(_DWORD *)int v55 = *((_DWORD *)v43 + 14);
            std::string::size_type v56 = (std::string::size_type)(v55 + 4);
            while (v44 != v45)
            {
              int v57 = *((_DWORD *)v44 - 1);
              v44 -= 4;
              *((_DWORD *)v55 - 1) = v57;
              v55 -= 4;
            }
            std::string::size_type v46 = v53 + 4 * v54;
            v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
            v64.__r_.__value_.__l.__size_ = v56;
            v64.__r_.__value_.__r.__words[2] = v46;
            if (v45) {
              operator delete(v45);
            }
            unint64_t v45 = v55;
            int v44 = (char *)v56;
          }
          else
          {
            *(_DWORD *)int v44 = *((_DWORD *)v43 + 14);
            v44 += 4;
          }
          v64.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
          unsigned __int8 v58 = (uint64_t *)v43[1];
          if (v58)
          {
            do
            {
              int v59 = v58;
              unsigned __int8 v58 = (uint64_t *)*v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              int v59 = (uint64_t *)v43[2];
              BOOL v60 = *v59 == (void)v43;
              uint64_t v43 = v59;
            }
            while (!v60);
          }
          uint64_t v43 = v59;
        }
        while (v59 != &v66);
      }
      sub_19E0BCE10(v5 + 8, (uint64_t *)&v70, &v64);
    }
  }
  sub_19E0672C4(v69[0]);
  return 0;
}

void sub_19E0BE85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  std::string __p = &a28;
  sub_19E041AD0(&__p);
  sub_19E0672C4(a23);
  sub_19E0672C4(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0BE938(uint64_t a1, void *a2)
{
  std::string __p = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v8 = (v5 - v3) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v4 - (void)v3) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v4 - (void)v3) >> 1;
        }
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_19E068D84(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        std::string::size_type v12 = (_DWORD *)(v10 + 4 * v8);
        *std::string::size_type v12 = v6;
        uint64_t v7 = v12 + 1;
        while (v5 != v3)
        {
          int v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--std::string::size_type v12 = v13;
        }
        unint64_t v4 = v10 + 4 * v11;
        std::string __p = v12;
        unint64_t v19 = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)uint64_t v5 = v6;
        uint64_t v7 = v5 + 4;
      }
      uint64_t v18 = v7;
      ++v6;
      uint64_t v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19E0BEAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0BEAD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_19E0BD52C((void *)(a1 + 8), a2);
}

void *sub_19E0BEAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09E030;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0BEB84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BEB98()
{
  return &unk_1EF09E090;
}

uint64_t sub_19E0BEBA4(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09E090)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BEBE4(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0BEC08(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09E030;
  a2[1] = v2;
  return result;
}

void *sub_19E0BEC2C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09E030;
  result[1] = v3;
  return result;
}

void sub_19E0BEC74()
{
}

void *sub_19E0BEC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09DFB0;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0BED30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BED44()
{
  return &unk_1EF09E010;
}

uint64_t sub_19E0BED50(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09E010)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BED90(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0BEDB4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09DFB0;
  a2[1] = v2;
  return result;
}

void *sub_19E0BEDD8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09DFB0;
  result[1] = v3;
  return result;
}

void sub_19E0BEE20()
{
}

uint64_t sub_19E0BEE38(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0BEE94(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = 0;
  int v44 = 0;
  unint64_t v45 = 0;
  std::string __p = 0;
  BOOL v41 = 0;
  unint64_t v42 = 0;
  if (a2)
  {
    uint64_t v8 = a2;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      int v13 = *(void **)(a3 + 8 * i);
      size_t v14 = *(void *)(a4 + 8 * i);
      size_t v38 = v14;
      int v39 = v13;
      uint64_t v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        uint64_t v16 = (void *)sub_19E0B5820(&v43, &v39, &v38);
      }
      else
      {
        sub_19E057A94(v44, v13, v14);
        uint64_t v16 = v15 + 3;
      }
      int v44 = v16;
      if (a5)
      {
        uint64_t v17 = *(void *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v19 = v10;
          uint64_t v20 = a5;
          uint64_t v21 = v8;
          uint64_t v22 = a3;
          uint64_t v23 = a4;
          uint64_t v24 = (v11 - v9) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            sub_19E041BEC();
          }
          unint64_t v26 = v19 - (void)v9;
          unint64_t v27 = (uint64_t)(v19 - (void)v9) >> 1;
          if (v27 > v25) {
            unint64_t v25 = v27;
          }
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v25;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_19E068D84(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          std::string::size_type v30 = (_DWORD *)(v28 + 4 * v24);
          *std::string::size_type v30 = v17;
          uint64_t v18 = v30 + 1;
          while (v11 != v9)
          {
            int v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--std::string::size_type v30 = v31;
          }
          std::string __p = v30;
          BOOL v41 = v18;
          unint64_t v32 = v28 + 4 * v29;
          unint64_t v42 = v32;
          if (v9) {
            operator delete(v9);
          }
          unint64_t v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          uint64_t v8 = v21;
          a5 = v20;
          unint64_t v10 = v32;
        }
        else
        {
          *(_DWORD *)uint64_t v11 = v17;
          uint64_t v18 = v11 + 4;
        }
        BOOL v41 = v18;
        uint64_t v11 = (char *)v18;
      }
    }
  }
  uint64_t v33 = *a1;
  if (a5) {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 64))();
  }
  else {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 56))();
  }
  uint64_t v35 = v34;
  if (__p)
  {
    BOOL v41 = __p;
    operator delete(__p);
  }
  std::string __p = &v43;
  sub_19E041AD0((void ***)&__p);
  return v35;
}

void sub_19E0BF0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  std::string __p = &a16;
  sub_19E041AD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E0BF0FC(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09E408;
  sub_19E0672C4(*(char **)(a1 + 12984));
  sub_19E0BBC74(a1 + 8);

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0BF16C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09E408;
  sub_19E0672C4(*(char **)(a1 + 12984));
  sub_19E0BBC74(a1 + 8);
  return a1;
}

void sub_19E0BF1BC(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 8);
  if (v2) {
    sub_19E050760(v2);
  }
  sub_19E050624(*(_DWORD *)(a1 + 16), 0);
  *(void *)(a1 + 8) = v3;
  if (!v3) {
    __assert_rtn("init", "MutableBurstTrie.h", 302, "m_trie");
  }
}

uint64_t sub_19E0BF21C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09D8E8;
  sub_19E050760(*(char **)(a1 + 8));
  return a1;
}

uint64_t sub_19E0BF26C(uint64_t a1, char *a2, int a3)
{
  return sub_19E050DA8(*(_DWORD **)(a1 + 8), a2, a3);
}

BOOL sub_19E0BF274(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  return a3 && sub_19E050278(*(void *)(a1 + 8), a2, a3, *a4);
}

void **sub_19E0BF28C(uint64_t a1, void **a2, uint64_t a3)
{
  unsigned int v6 = 0;
  unsigned __int8 v13 = 0;
  do
  {
    unsigned __int8 v12 = v6;
    sub_19E0BF39C(&v11, *a2, &v12, 1uLL);
    if ((*(unsigned int (**)(uint64_t, void **))(*(void *)a1 + 112))(a1, &v11))
    {
      unsigned __int8 v14 = v12;
      uint64_t v7 = *(void *)(a3 + 24);
      if (!v7) {
        sub_19E0483E0();
      }
      (*(void (**)(uint64_t, unsigned __int8 *, void **, unsigned __int8 *))(*(void *)v7 + 48))(v7, &v14, &v11, &v13);
    }
    int v8 = v13;
    uint64_t result = sub_19E0BF420(&v11);
    if (v8) {
      break;
    }
  }
  while (v6++ < 0xFF);
  return result;
}

void sub_19E0BF384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void **sub_19E0BF39C(void *a1, void *a2, unsigned __int8 *a3, size_t a4)
{
  uint64_t v11 = sub_19E0532C8(a2);
  if (sub_19E052734((uint64_t)v11, a3, a4, v7, v8))
  {
    unint64_t v9 = v11;
    uint64_t v11 = 0;
  }
  else
  {
    unint64_t v9 = 0;
  }
  *a1 = v9;
  return sub_19E0BF420((void **)&v11);
}

void sub_19E0BF40C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0BF420((void **)va);
  _Unwind_Resume(a1);
}

void **sub_19E0BF420(void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    sub_19E051CDC(v2);
  }
  *a1 = 0;
  return a1;
}

void *sub_19E0BF458(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *a2;
  v6[0] = &unk_1EF09DB70;
  v6[1] = a3;
  v6[3] = v6;
  sub_19E051B74(v4, 0, (uint64_t)v6, a4);
  return sub_19E058B70(v6);
}

void sub_19E0BF4E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E058B70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BF4F8()
{
  return &unk_1EF09DBD0;
}

uint64_t sub_19E0BF504(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09DBD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BF544(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, int *a5, uint64_t a6, uint64_t *a7)
{
  return sub_19E06E4F4(*(void *)(*(void *)(a1 + 8) + 24), *a5, *a3, *a4, *a7);
}

uint64_t sub_19E0BF568(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09DB70;
  a2[1] = v2;
  return result;
}

void *sub_19E0BF58C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09DB70;
  result[1] = v3;
  return result;
}

void sub_19E0BF5D4()
{
}

uint64_t sub_19E0BF5EC(uint64_t a1, _DWORD **a2, _DWORD *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if (result)
  {
    unsigned int v6 = *a2;
    return sub_19E05335C(v6, a3);
  }
  return result;
}

void **sub_19E0BF65C@<X0>(void **a1@<X1>, unsigned __int8 *a2@<X2>, size_t a3@<X3>, void *a4@<X8>)
{
  return sub_19E0BF39C(a4, *a1, a2, a3);
}

BOOL sub_19E0BF668(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

void **sub_19E0BF678@<X0>(uint64_t a1@<X0>, void **a2@<X8>)
{
  return sub_19E0BF684(a2, *(void *)(a1 + 8));
}

void **sub_19E0BF684(void **a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v3 = sub_19E051B00(a2, 0, 0);
  if (*a1) {
    sub_19E051CDC(*a1);
  }
  *a1 = v3;
  return a1;
}

void *sub_19E0BF6D0(void *result, void *a2, size_t a3, uint64_t a4, int a5)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = (void *)result[1];
    v6[0] = &unk_1EF09DAF0;
    v6[1] = a4;
    v6[3] = v6;
    sub_19E050980(v5, a2, a3, 0, (uint64_t)v6, a5);
    return sub_19E057CB0(v6);
  }
  return result;
}

void sub_19E0BF764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E057CB0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BF778()
{
  return &unk_1EF09DB50;
}

uint64_t sub_19E0BF784(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09DB50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BF7C4(uint64_t result, uint64_t a2, uint64_t *a3, unsigned char **a4)
{
  unint64_t v4 = *a4;
  if (!**a4)
  {
    uint64_t v5 = result;
    uint64_t v6 = *a3;
    uint64_t v7 = sub_19E050428(*a3);
    uint64_t v8 = sub_19E050434(v6);
    uint64_t v9 = *(void *)(v5 + 8);
    int v10 = sub_19E050440(v6);
    uint64_t v11 = *(void *)(v9 + 24);
    return sub_19E06E4F4(v11, v10, v7, v8, (uint64_t)v4);
  }
  return result;
}

uint64_t sub_19E0BF868(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09DAF0;
  a2[1] = v2;
  return result;
}

void *sub_19E0BF88C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09DAF0;
  result[1] = v3;
  return result;
}

void sub_19E0BF8D4()
{
}

void **sub_19E0BF8EC(void **result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v7 = result;
    char v15 = 0;
    (*((void (**)(void **__return_ptr))*result + 13))(&v14);
    unint64_t v8 = 0;
    int v9 = 0;
    int v13 = 0;
    do
    {
      (*((void (**)(void **__return_ptr, void **, void **, unint64_t, uint64_t))*v7 + 15))(&v12, v7, &v14, a2 + v8, 1);
      int v10 = v14;
      unsigned __int8 v14 = v12;
      unsigned __int8 v12 = v10;
      sub_19E0BF420(&v12);
      if (((*((uint64_t (**)(void **, void **))*v7 + 14))(v7, &v14) & 1) == 0) {
        break;
      }
      if ((*((unsigned int (**)(void **, void **, int *))*v7 + 16))(v7, &v14, &v13))
      {
        unint64_t v8 = (v9 + 1);
        if (a3 >= v8) {
          uint64_t v11 = (v9 + 1);
        }
        else {
          uint64_t v11 = a3;
        }
        sub_19E06E4F4(*(void *)(a4 + 24), v13, a2, v11, (uint64_t)&v15);
        if (v15) {
          return sub_19E0BF420(&v14);
        }
      }
      else
      {
        unint64_t v8 = (v9 + 1);
      }
      int v9 = v8;
    }
    while (a3 > v8);
    return sub_19E0BF420(&v14);
  }
  return result;
}

void sub_19E0BFA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E0BF420((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_19E0BFA7C(uint64_t a1, const void *a2, uint64_t a3, _DWORD *a4)
{
  return a3 && sub_19E0517D8(*(void **)(a1 + 8), a2, a3, a4, 0);
}

BOOL sub_19E0BFA94(uint64_t a1, char *a2)
{
  unint64_t v4 = *(char **)(a1 + 8);
  if (v4) {
    sub_19E050760(v4);
  }
  uint64_t v5 = sub_19E0507F0(a2);
  *(void *)(a1 + 8) = v5;
  return v5 != 0;
}

uint64_t sub_19E0BFAD8(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2) {
    __assert_rtn("build", "MutableBurstTrie.h", 150, "keys.size() == values.size()");
  }
  if (v4 == v3) {
    return 1;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  LODWORD(v11) = 1;
  do
  {
    unsigned __int8 v12 = (uint64_t **)(v3 + v8);
    if (*((char *)v12 + 23) < 0)
    {
      unsigned __int8 v14 = *v12;
      int v13 = v12[1];
    }
    else
    {
      int v13 = (uint64_t *)*((unsigned __int8 *)v12 + 23);
      unsigned __int8 v14 = (uint64_t *)v12;
    }
    uint64_t v11 = v11 & (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 152))(a1, v14, v13, *a3 + v9);
    ++v10;
    uint64_t v3 = *a2;
    v9 += 4;
    v8 += 24;
  }
  while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  return v11;
}

uint64_t sub_19E0BFC00(uint64_t a1, void *a2)
{
  std::string __p = 0;
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v8 = (v5 - v3) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v4 - (void)v3) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v4 - (void)v3) >> 1;
        }
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_19E068D84(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        unsigned __int8 v12 = (_DWORD *)(v10 + 4 * v8);
        *unsigned __int8 v12 = v6;
        uint64_t v7 = v12 + 1;
        while (v5 != v3)
        {
          int v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--unsigned __int8 v12 = v13;
        }
        unint64_t v4 = v10 + 4 * v11;
        std::string __p = v12;
        unint64_t v20 = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)uint64_t v5 = v6;
        uint64_t v7 = v5 + 4;
      }
      unint64_t v19 = v7;
      uint64_t v5 = (char *)v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v6++);
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    unint64_t v19 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_19E0BFD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0BFDA4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_19E053394(*(void *)(a1 + 8), a2);
}

void *sub_19E0BFDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09DA70;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E06C7E4(v5);
}

void sub_19E0BFE50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E06C7E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0BFE64()
{
  return &unk_1EF09DAD0;
}

uint64_t sub_19E0BFE70(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09DAD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0BFEB0(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0BFED4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09DA70;
  a2[1] = v2;
  return result;
}

void *sub_19E0BFEF8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09DA70;
  result[1] = v3;
  return result;
}

void sub_19E0BFF40()
{
}

void *sub_19E0BFF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09D9F0;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E06C7E4(v5);
}

void sub_19E0BFFFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E06C7E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C0010()
{
  return &unk_1EF09DA50;
}

uint64_t sub_19E0C001C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09DA50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C005C(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0C0080(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09D9F0;
  a2[1] = v2;
  return result;
}

void *sub_19E0C00A4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09D9F0;
  result[1] = v3;
  return result;
}

void sub_19E0C00EC()
{
}

uint64_t sub_19E0C0104(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0C0160(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = 0;
  int v44 = 0;
  unint64_t v45 = 0;
  std::string __p = 0;
  BOOL v41 = 0;
  unint64_t v42 = 0;
  if (a2)
  {
    uint64_t v8 = a2;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      int v13 = *(void **)(a3 + 8 * i);
      size_t v14 = *(void *)(a4 + 8 * i);
      size_t v38 = v14;
      int v39 = v13;
      uint64_t v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        uint64_t v16 = (void *)sub_19E0B5820(&v43, &v39, &v38);
      }
      else
      {
        sub_19E057A94(v44, v13, v14);
        uint64_t v16 = v15 + 3;
      }
      int v44 = v16;
      if (a5)
      {
        uint64_t v17 = *(void *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v19 = v10;
          uint64_t v20 = a5;
          uint64_t v21 = v8;
          uint64_t v22 = a3;
          uint64_t v23 = a4;
          uint64_t v24 = (v11 - v9) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            sub_19E041BEC();
          }
          unint64_t v26 = v19 - (void)v9;
          unint64_t v27 = (uint64_t)(v19 - (void)v9) >> 1;
          if (v27 > v25) {
            unint64_t v25 = v27;
          }
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v25;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_19E068D84(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          std::string::size_type v30 = (_DWORD *)(v28 + 4 * v24);
          *std::string::size_type v30 = v17;
          uint64_t v18 = v30 + 1;
          while (v11 != v9)
          {
            int v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--std::string::size_type v30 = v31;
          }
          std::string __p = v30;
          BOOL v41 = v18;
          unint64_t v32 = v28 + 4 * v29;
          unint64_t v42 = v32;
          if (v9) {
            operator delete(v9);
          }
          unint64_t v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          uint64_t v8 = v21;
          a5 = v20;
          unint64_t v10 = v32;
        }
        else
        {
          *(_DWORD *)uint64_t v11 = v17;
          uint64_t v18 = v11 + 4;
        }
        BOOL v41 = v18;
        uint64_t v11 = (char *)v18;
      }
    }
  }
  uint64_t v33 = *a1;
  if (a5) {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 64))();
  }
  else {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 56))();
  }
  uint64_t v35 = v34;
  if (__p)
  {
    BOOL v41 = __p;
    operator delete(__p);
  }
  std::string __p = &v43;
  sub_19E041AD0((void ***)&__p);
  return v35;
}

void sub_19E0C0384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  std::string __p = &a16;
  sub_19E041AD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E0C03C8(uint64_t a1)
{
  sub_19E0BF21C(a1);

  JUMPOUT(0x19F3BA710);
}

void **sub_19E0C0404(uint64_t a1, void **a2, uint64_t a3)
{
  return sub_19E0BF28C(a1 + 8, a2, a3);
}

void *sub_19E0C040C(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF09E388;
  v8[1] = a3;
  v8[3] = v8;
  uint64_t v6 = sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0BF458(v6, a2, (uint64_t)v9, a4);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0C04B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C04D8()
{
  return &unk_1EF09E3E8;
}

uint64_t sub_19E0C04E4(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09E3E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C0524(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF) {
    return sub_19E0B5BE8(*(void *)(*(void *)(result + 8) + 24), v4, *a3, a3[1], a4);
  }
  return result;
}

uint64_t sub_19E0C055C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09E388;
  a2[1] = v2;
  return result;
}

void *sub_19E0C0580(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09E388;
  result[1] = v3;
  return result;
}

void sub_19E0C05C8()
{
}

uint64_t sub_19E0C05E0(uint64_t a1, _DWORD **a2, int *a3)
{
  int v7 = 0;
  int v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 112))();
  uint64_t result = 0;
  if (v5)
  {
    uint64_t result = sub_19E05335C(*a2, &v7);
    if (result)
    {
      if ((v7 & 0x7FFFFF) == 0x7FFFFF)
      {
        return 0;
      }
      else
      {
        *a3 = v7 & 0x7FFFFF;
        return 1;
      }
    }
  }
  return result;
}

void **sub_19E0C0674@<X0>(void **a1@<X1>, unsigned __int8 *a2@<X2>, size_t a3@<X3>, void *a4@<X8>)
{
  return sub_19E0BF39C(a4, *a1, a2, a3);
}

BOOL sub_19E0C0680(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

void **sub_19E0C0690@<X0>(uint64_t a1@<X0>, void **a2@<X8>)
{
  return sub_19E0BF684(a2, *(void *)(a1 + 16));
}

void *sub_19E0C069C(uint64_t a1, void *a2, size_t a3, uint64_t a4, int a5)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  v10[0] = &unk_1EF09E388;
  v10[1] = a4;
  v10[3] = v10;
  sub_19E0B5A50((uint64_t)v11, v10);
  sub_19E0BF6D0((void *)(a1 + 8), a2, a3, (uint64_t)v11, a5);
  sub_19E06C7E4(v11);
  return sub_19E0B5B00(v10);
}

void sub_19E0C075C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C0780(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF09E388;
  v8[1] = a4;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0BF8EC((void **)(a1 + 8), a2, a3, (uint64_t)v9);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0C0838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0C085C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 104))(&v10);
  (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t, uint64_t))(*(void *)a1 + 120))(&v11, a1, &v10, a2, a3);
  sub_19E0BF420(&v10);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 128))(a1, &v11, a4);
  sub_19E0BF420(&v11);
  return v8;
}

void sub_19E0C0940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0BF420((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_19E0C0960(uint64_t a1, char *a2)
{
  return sub_19E0BFA94(a1 + 8, a2);
}

uint64_t sub_19E0C0968(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2) {
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  }
  uint64_t v5 = a1;
  v70[0] = 0;
  v70[1] = 0;
  uint64_t v69 = v70;
  if (v4 == v3)
  {
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v66 = (std::string *)&v67;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = a1 + 32;
    do
    {
      std::string::size_type v10 = 0;
      uint64_t v11 = v3 + 24 * v8;
      while (1)
      {
        std::string::size_type v12 = *(char *)(v11 + 23) < 0 ? *(void *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
        if (v10 > v12) {
          break;
        }
        double v13 = *(double *)sub_19E0B6A0C(v9, (void *)v11);
        std::string::basic_string(&v71, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v66);
        uint64_t v66 = &v71;
        size_t v14 = (double *)sub_19E0B3CA4((uint64_t **)&v69, &v71, (_OWORD **)&v66);
        v14[7] = v13 + v14[7];
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        ++v10;
      }
      if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF)
      {
        uint64_t v61 = 0;
        goto LABEL_96;
      }
      ++v8;
      uint64_t v3 = *a2;
      uint64_t v15 = a2[1];
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3));
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v66 = (std::string *)&v67;
    if (v15 != v3)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      do
      {
        uint64_t v18 = v3 + v16;
        int v19 = *(_DWORD *)(*a3 + 4 * v17);
        double v20 = *(double *)sub_19E0B6A0C((uint64_t)&v69, (void *)(v3 + v16));
        uint64_t v21 = *(unsigned __int8 *)(v18 + 23);
        if ((v21 & 0x80u) != 0) {
          uint64_t v21 = *(void *)(v18 + 8);
        }
        std::string::basic_string(&v71, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v65);
        double v22 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        uint64_t v23 = sub_19E0BB234((uint64_t **)&v66, (void *)v18, v18);
        int v24 = (int)(sqrt(v20 / v22) * 255.0);
        if (v24 >= 255) {
          int v25 = 255;
        }
        else {
          int v25 = v24;
        }
        if (v24) {
          BOOL v26 = 1;
        }
        else {
          BOOL v26 = v20 / v22 <= 0.0;
        }
        int v27 = v25 << 23;
        if (!v26) {
          int v27 = 0x800000;
        }
        *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
        ++v17;
        uint64_t v3 = *a2;
        uint64_t v28 = a2[1];
        v16 += 24;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
      if (v28 != v3)
      {
        unint64_t v29 = 0;
        do
        {
          std::string::size_type v30 = 0;
          int v31 = (const std::string *)(v3 + 24 * v29);
          while (1)
          {
            std::string::size_type v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                ? v31->__r_.__value_.__l.__size_
                : HIBYTE(v31->__r_.__value_.__r.__words[2]);
            if (v30 >= v32 - 1) {
              break;
            }
            std::string::basic_string(&v65, v31, 0, v30, (std::allocator<char> *)&v71);
            uint64_t v33 = v31;
            if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0) {
              uint64_t v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
            }
            sub_19E0B6B6C((uint64_t)&__str, (const void **)&v65.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
            if (&v67 == sub_19E05E980((uint64_t)&v66, &__str))
            {
              double v34 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &v65);
              if (v34 > *(double *)sub_19E0B6A0C((uint64_t)&v69, &__str))
              {
                double v35 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &__str);
                std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = __str.__r_.__value_.__l.__size_;
                }
                std::string::basic_string(&v71, &__str, 0, size - 1, (std::allocator<char> *)v72);
                double v37 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &v71);
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v71.__r_.__value_.__l.__data_);
                }
                size_t v38 = sub_19E0BB234((uint64_t **)&v66, &__str, (uint64_t)&__str);
                int v39 = (int)(sqrt(v35 / v37) * 255.0);
                if (v39 >= 255) {
                  int v40 = 255;
                }
                else {
                  int v40 = v39;
                }
                if (v39) {
                  BOOL v41 = 1;
                }
                else {
                  BOOL v41 = v35 / v37 <= 0.0;
                }
                int v42 = (v40 << 23) | 0x7FFFFF;
                if (!v41) {
                  int v42 = 0xFFFFFF;
                }
                *((_DWORD *)v38 + 14) = v42;
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v65.__r_.__value_.__l.__data_);
            }
            ++v30;
          }
          ++v29;
          uint64_t v3 = *a2;
        }
        while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      }
    }
    uint64_t v5 = a1;
  }
  memset(&v71, 0, sizeof(v71));
  memset(&v65, 0, sizeof(v65));
  uint64_t v43 = (uint64_t *)v66;
  if (v66 != (std::string *)&v67)
  {
    int v44 = 0;
    unint64_t v45 = 0;
    std::string::size_type v46 = 0;
    do
    {
      uint64_t v47 = (long long *)(v43 + 4);
      int v48 = (_OWORD *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_ >= v71.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v50 = sub_19E0B6BF0((uint64_t *)&v71, v47);
      }
      else
      {
        if (*((char *)v43 + 55) < 0)
        {
          sub_19E03FA9C((unsigned char *)v71.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
        }
        else
        {
          long long v49 = *v47;
          *(void *)(v71.__r_.__value_.__l.__size_ + 16) = v43[6];
          *int v48 = v49;
        }
        std::string::size_type v50 = (std::string::size_type)v48 + 24;
      }
      v71.__r_.__value_.__l.__size_ = v50;
      if ((unint64_t)v44 >= v46)
      {
        uint64_t v51 = (v44 - v45) >> 2;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v46 - (void)v45) >> 1 > v52) {
          unint64_t v52 = (uint64_t)(v46 - (void)v45) >> 1;
        }
        if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53) {
          unint64_t v53 = (unint64_t)sub_19E068D84(v53);
        }
        else {
          uint64_t v54 = 0;
        }
        int v55 = (char *)(v53 + 4 * v51);
        *(_DWORD *)int v55 = *((_DWORD *)v43 + 14);
        std::string::size_type v56 = (std::string::size_type)(v55 + 4);
        while (v44 != v45)
        {
          int v57 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v55 - 1) = v57;
          v55 -= 4;
        }
        std::string::size_type v46 = v53 + 4 * v54;
        v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v65.__r_.__value_.__l.__size_ = v56;
        v65.__r_.__value_.__r.__words[2] = v46;
        if (v45) {
          operator delete(v45);
        }
        unint64_t v45 = v55;
        int v44 = (char *)v56;
      }
      else
      {
        *(_DWORD *)int v44 = *((_DWORD *)v43 + 14);
        v44 += 4;
      }
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
      unsigned __int8 v58 = (char *)v43[1];
      if (v58)
      {
        do
        {
          int v59 = (char **)v58;
          unsigned __int8 v58 = *(char **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          int v59 = (char **)v43[2];
          BOOL v60 = *v59 == (char *)v43;
          uint64_t v43 = (uint64_t *)v59;
        }
        while (!v60);
      }
      uint64_t v43 = (uint64_t *)v59;
    }
    while (v59 != &v67);
  }
  uint64_t v61 = sub_19E0BFAD8(v5 + 8, (uint64_t *)&v71, &v65);
  if (v65.__r_.__value_.__r.__words[0]) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  sub_19E041AD0((void ***)&v65);
  sub_19E0672C4(v67);
LABEL_96:
  sub_19E0672C4(v70[0]);
  return v61;
}

void sub_19E0C0F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  std::string __p = &a28;
  sub_19E041AD0(&__p);
  sub_19E0672C4(a23);
  sub_19E0672C4(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0C1030(uint64_t a1, void *a2)
{
  std::string __p = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v8 = (v5 - v3) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v4 - (void)v3) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v4 - (void)v3) >> 1;
        }
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_19E068D84(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        std::string::size_type v12 = (_DWORD *)(v10 + 4 * v8);
        *std::string::size_type v12 = v6;
        uint64_t v7 = v12 + 1;
        while (v5 != v3)
        {
          int v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--std::string::size_type v12 = v13;
        }
        unint64_t v4 = v10 + 4 * v11;
        std::string __p = v12;
        unint64_t v19 = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)uint64_t v5 = v6;
        uint64_t v7 = v5 + 4;
      }
      uint64_t v18 = v7;
      ++v6;
      uint64_t v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19E0C11AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0C11D0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_19E053394(*(void *)(a1 + 16), a2);
}

void *sub_19E0C11D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09E308;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0C127C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C1290()
{
  return &unk_1EF09E368;
}

uint64_t sub_19E0C129C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09E368)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C12DC(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0C1300(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09E308;
  a2[1] = v2;
  return result;
}

void *sub_19E0C1324(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09E308;
  result[1] = v3;
  return result;
}

void sub_19E0C136C()
{
}

void *sub_19E0C1384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09E288;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0C1428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C143C()
{
  return &unk_1EF09E2E8;
}

uint64_t sub_19E0C1448(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09E2E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C1488(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0C14AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09E288;
  a2[1] = v2;
  return result;
}

void *sub_19E0C14D0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09E288;
  result[1] = v3;
  return result;
}

void sub_19E0C1518()
{
}

uint64_t sub_19E0C1530(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0C158C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = 0;
  int v44 = 0;
  unint64_t v45 = 0;
  std::string __p = 0;
  BOOL v41 = 0;
  unint64_t v42 = 0;
  if (a2)
  {
    uint64_t v8 = a2;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      int v13 = *(void **)(a3 + 8 * i);
      size_t v14 = *(void *)(a4 + 8 * i);
      size_t v38 = v14;
      int v39 = v13;
      uint64_t v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        uint64_t v16 = (void *)sub_19E0B5820(&v43, &v39, &v38);
      }
      else
      {
        sub_19E057A94(v44, v13, v14);
        uint64_t v16 = v15 + 3;
      }
      int v44 = v16;
      if (a5)
      {
        uint64_t v17 = *(void *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v19 = v10;
          uint64_t v20 = a5;
          uint64_t v21 = v8;
          uint64_t v22 = a3;
          uint64_t v23 = a4;
          uint64_t v24 = (v11 - v9) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            sub_19E041BEC();
          }
          unint64_t v26 = v19 - (void)v9;
          unint64_t v27 = (uint64_t)(v19 - (void)v9) >> 1;
          if (v27 > v25) {
            unint64_t v25 = v27;
          }
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v25;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_19E068D84(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          std::string::size_type v30 = (_DWORD *)(v28 + 4 * v24);
          *std::string::size_type v30 = v17;
          uint64_t v18 = v30 + 1;
          while (v11 != v9)
          {
            int v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--std::string::size_type v30 = v31;
          }
          std::string __p = v30;
          BOOL v41 = v18;
          unint64_t v32 = v28 + 4 * v29;
          unint64_t v42 = v32;
          if (v9) {
            operator delete(v9);
          }
          unint64_t v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          uint64_t v8 = v21;
          a5 = v20;
          unint64_t v10 = v32;
        }
        else
        {
          *(_DWORD *)uint64_t v11 = v17;
          uint64_t v18 = v11 + 4;
        }
        BOOL v41 = v18;
        uint64_t v11 = (char *)v18;
      }
    }
  }
  uint64_t v33 = *a1;
  if (a5) {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 64))();
  }
  else {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 56))();
  }
  uint64_t v35 = v34;
  if (__p)
  {
    BOOL v41 = __p;
    operator delete(__p);
  }
  std::string __p = &v43;
  sub_19E041AD0((void ***)&__p);
  return v35;
}

void sub_19E0C17B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  std::string __p = &a16;
  sub_19E041AD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E0C17F4(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09E1B0;
  sub_19E0672C4(*(char **)(a1 + 40));
  sub_19E0BF21C(a1 + 8);

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0C1864(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09E1B0;
  sub_19E0672C4(*(char **)(a1 + 40));
  sub_19E0BF21C(a1 + 8);
  return a1;
}

void sub_19E0C18B4(uint64_t a1, uint64_t a2)
{
}

void *sub_19E0C18BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF0A16E0;
  v8[1] = a3;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E06E364(a1 + 8, a2, (uint64_t)v9, a4);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0C1974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C1998()
{
  return &unk_1EF0A1740;
}

uint64_t sub_19E0C19A4(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1740)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C19E4(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF) {
    return sub_19E0B5BE8(*(void *)(*(void *)(result + 8) + 24), v4, *a3, a3[1], a4);
  }
  return result;
}

uint64_t sub_19E0C1A1C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A16E0;
  a2[1] = v2;
  return result;
}

void *sub_19E0C1A40(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A16E0;
  result[1] = v3;
  return result;
}

void sub_19E0C1A88()
{
}

uint64_t sub_19E0C1AA0(uint64_t a1, uint64_t a2, int *a3)
{
  int v6 = 0;
  int v4 = sub_19E06E5B4((uint64_t *)(a1 + 8), a2, &v6);
  uint64_t result = 0;
  if (v4)
  {
    if ((v6 & 0x7FFFFF) == 0x7FFFFF)
    {
      return 0;
    }
    else
    {
      *a3 = v6 & 0x7FFFFF;
      return 1;
    }
  }
  return result;
}

uint64_t sub_19E0C1B08(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_19E06E628(a1 + 8, a2, a3, a4);
}

BOOL sub_19E0C1B10(uint64_t a1, uint64_t a2)
{
  return sub_19E04F090(a2);
}

uint64_t sub_19E0C1B18(uint64_t a1)
{
  return sub_19E04ED9C(*(unsigned int **)(a1 + 16));
}

void *sub_19E0C1B20(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  v10[0] = &unk_1EF0A16E0;
  v10[1] = a4;
  v10[3] = v10;
  sub_19E0B5A50((uint64_t)v11, v10);
  sub_19E06E6C0(a1 + 8, a2, a3, (uint64_t)v11, a5);
  sub_19E06C7E4(v11);
  return sub_19E0B5B00(v10);
}

void sub_19E0C1BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C1C04(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF0A16E0;
  v8[1] = a4;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E06EAD8(a1 + 8, a2, a3, (uint64_t)v9);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0C1CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0C1CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  v11[1] = v8;
  v12[0] = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, v11, a2, a3);
  v12[1] = v9;
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v12, a4);
}

uint64_t sub_19E0C1DAC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return 1;
}

BOOL sub_19E0C1DCC(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2) {
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  }
  uint64_t v5 = a1;
  v70[0] = 0;
  v70[1] = 0;
  uint64_t v69 = v70;
  if (v4 == v3)
  {
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v66 = (std::string *)&v67;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = a1 + 56;
    do
    {
      std::string::size_type v10 = 0;
      uint64_t v11 = v3 + 24 * v8;
      while (1)
      {
        std::string::size_type v12 = *(char *)(v11 + 23) < 0 ? *(void *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
        if (v10 > v12) {
          break;
        }
        double v13 = *(double *)sub_19E0B6A0C(v9, (void *)v11);
        std::string::basic_string(&v71, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v66);
        uint64_t v66 = &v71;
        size_t v14 = (double *)sub_19E0B3CA4((uint64_t **)&v69, &v71, (_OWORD **)&v66);
        v14[7] = v13 + v14[7];
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        ++v10;
      }
      if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF)
      {
        BOOL v61 = 0;
        goto LABEL_96;
      }
      ++v8;
      uint64_t v3 = *a2;
      uint64_t v15 = a2[1];
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3));
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v66 = (std::string *)&v67;
    if (v15 != v3)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      do
      {
        uint64_t v18 = v3 + v16;
        int v19 = *(_DWORD *)(*a3 + 4 * v17);
        double v20 = *(double *)sub_19E0B6A0C((uint64_t)&v69, (void *)(v3 + v16));
        uint64_t v21 = *(unsigned __int8 *)(v18 + 23);
        if ((v21 & 0x80u) != 0) {
          uint64_t v21 = *(void *)(v18 + 8);
        }
        std::string::basic_string(&v71, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v65);
        double v22 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        uint64_t v23 = sub_19E0BB234((uint64_t **)&v66, (void *)v18, v18);
        int v24 = (int)(sqrt(v20 / v22) * 255.0);
        if (v24 >= 255) {
          int v25 = 255;
        }
        else {
          int v25 = v24;
        }
        if (v24) {
          BOOL v26 = 1;
        }
        else {
          BOOL v26 = v20 / v22 <= 0.0;
        }
        int v27 = v25 << 23;
        if (!v26) {
          int v27 = 0x800000;
        }
        *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
        ++v17;
        uint64_t v3 = *a2;
        uint64_t v28 = a2[1];
        v16 += 24;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
      if (v28 != v3)
      {
        unint64_t v29 = 0;
        do
        {
          std::string::size_type v30 = 0;
          int v31 = (const std::string *)(v3 + 24 * v29);
          while (1)
          {
            std::string::size_type v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                ? v31->__r_.__value_.__l.__size_
                : HIBYTE(v31->__r_.__value_.__r.__words[2]);
            if (v30 >= v32 - 1) {
              break;
            }
            std::string::basic_string(&v65, v31, 0, v30, (std::allocator<char> *)&v71);
            uint64_t v33 = v31;
            if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0) {
              uint64_t v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
            }
            sub_19E0B6B6C((uint64_t)&__str, (const void **)&v65.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
            if (&v67 == sub_19E05E980((uint64_t)&v66, &__str))
            {
              double v34 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &v65);
              if (v34 > *(double *)sub_19E0B6A0C((uint64_t)&v69, &__str))
              {
                double v35 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &__str);
                std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = __str.__r_.__value_.__l.__size_;
                }
                std::string::basic_string(&v71, &__str, 0, size - 1, (std::allocator<char> *)v72);
                double v37 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &v71);
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v71.__r_.__value_.__l.__data_);
                }
                size_t v38 = sub_19E0BB234((uint64_t **)&v66, &__str, (uint64_t)&__str);
                int v39 = (int)(sqrt(v35 / v37) * 255.0);
                if (v39 >= 255) {
                  int v40 = 255;
                }
                else {
                  int v40 = v39;
                }
                if (v39) {
                  BOOL v41 = 1;
                }
                else {
                  BOOL v41 = v35 / v37 <= 0.0;
                }
                int v42 = (v40 << 23) | 0x7FFFFF;
                if (!v41) {
                  int v42 = 0xFFFFFF;
                }
                *((_DWORD *)v38 + 14) = v42;
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v65.__r_.__value_.__l.__data_);
            }
            ++v30;
          }
          ++v29;
          uint64_t v3 = *a2;
        }
        while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      }
    }
    uint64_t v5 = a1;
  }
  memset(&v71, 0, sizeof(v71));
  memset(&v65, 0, sizeof(v65));
  uint64_t v43 = (uint64_t *)v66;
  if (v66 != (std::string *)&v67)
  {
    int v44 = 0;
    unint64_t v45 = 0;
    std::string::size_type v46 = 0;
    do
    {
      uint64_t v47 = (long long *)(v43 + 4);
      int v48 = (_OWORD *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_ >= v71.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v50 = sub_19E0B6BF0((uint64_t *)&v71, v47);
      }
      else
      {
        if (*((char *)v43 + 55) < 0)
        {
          sub_19E03FA9C((unsigned char *)v71.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
        }
        else
        {
          long long v49 = *v47;
          *(void *)(v71.__r_.__value_.__l.__size_ + 16) = v43[6];
          *int v48 = v49;
        }
        std::string::size_type v50 = (std::string::size_type)v48 + 24;
      }
      v71.__r_.__value_.__l.__size_ = v50;
      if ((unint64_t)v44 >= v46)
      {
        uint64_t v51 = (v44 - v45) >> 2;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v46 - (void)v45) >> 1 > v52) {
          unint64_t v52 = (uint64_t)(v46 - (void)v45) >> 1;
        }
        if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53) {
          unint64_t v53 = (unint64_t)sub_19E068D84(v53);
        }
        else {
          uint64_t v54 = 0;
        }
        int v55 = (char *)(v53 + 4 * v51);
        *(_DWORD *)int v55 = *((_DWORD *)v43 + 14);
        std::string::size_type v56 = (std::string::size_type)(v55 + 4);
        while (v44 != v45)
        {
          int v57 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v55 - 1) = v57;
          v55 -= 4;
        }
        std::string::size_type v46 = v53 + 4 * v54;
        v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v65.__r_.__value_.__l.__size_ = v56;
        v65.__r_.__value_.__r.__words[2] = v46;
        if (v45) {
          operator delete(v45);
        }
        unint64_t v45 = v55;
        int v44 = (char *)v56;
      }
      else
      {
        *(_DWORD *)int v44 = *((_DWORD *)v43 + 14);
        v44 += 4;
      }
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
      unsigned __int8 v58 = (char *)v43[1];
      if (v58)
      {
        do
        {
          int v59 = (char **)v58;
          unsigned __int8 v58 = *(char **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          int v59 = (char **)v43[2];
          BOOL v60 = *v59 == (char *)v43;
          uint64_t v43 = (uint64_t *)v59;
        }
        while (!v60);
      }
      uint64_t v43 = (uint64_t *)v59;
    }
    while (v59 != &v67);
  }
  BOOL v61 = sub_19E06ED04((uint64_t *)(v5 + 8), (uint64_t **)&v71, (int **)&v65);
  if (v65.__r_.__value_.__r.__words[0]) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  sub_19E041AD0((void ***)&v65);
  sub_19E0672C4(v67);
LABEL_96:
  sub_19E0672C4(v70[0]);
  return v61;
}

void sub_19E0C23B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  std::string __p = &a28;
  sub_19E041AD0(&__p);
  sub_19E0672C4(a23);
  sub_19E0672C4(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0C2494(uint64_t a1, void *a2)
{
  std::string __p = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v8 = (v5 - v3) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v4 - (void)v3) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v4 - (void)v3) >> 1;
        }
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_19E068D84(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        std::string::size_type v12 = (_DWORD *)(v10 + 4 * v8);
        *std::string::size_type v12 = v6;
        uint64_t v7 = v12 + 1;
        while (v5 != v3)
        {
          int v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--std::string::size_type v12 = v13;
        }
        unint64_t v4 = v10 + 4 * v11;
        std::string __p = v12;
        unint64_t v19 = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)uint64_t v5 = v6;
        uint64_t v7 = v5 + 4;
      }
      uint64_t v18 = v7;
      ++v6;
      uint64_t v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19E0C2610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0C2634@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t __len = 0;
  uint64_t v3 = (void *)sub_19E050210(*(void **)(a1 + 16), &__len);
  return sub_19E057A94(a2, v3, __len);
}

void *sub_19E0C267C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A1660;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0C2720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C2734()
{
  return &unk_1EF0A16C0;
}

uint64_t sub_19E0C2740(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A16C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C2780(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0C27A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A1660;
  a2[1] = v2;
  return result;
}

void *sub_19E0C27C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A1660;
  result[1] = v3;
  return result;
}

void sub_19E0C2810()
{
}

void *sub_19E0C2828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A15E0;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0C28CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C28E0()
{
  return &unk_1EF0A1640;
}

uint64_t sub_19E0C28EC(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1640)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C292C(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0C2950(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A15E0;
  a2[1] = v2;
  return result;
}

void *sub_19E0C2974(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A15E0;
  result[1] = v3;
  return result;
}

void sub_19E0C29BC()
{
}

uint64_t sub_19E0C29D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0C2A30(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = 0;
  int v44 = 0;
  unint64_t v45 = 0;
  std::string __p = 0;
  BOOL v41 = 0;
  unint64_t v42 = 0;
  if (a2)
  {
    uint64_t v8 = a2;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      int v13 = *(void **)(a3 + 8 * i);
      size_t v14 = *(void *)(a4 + 8 * i);
      size_t v38 = v14;
      int v39 = v13;
      uint64_t v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        uint64_t v16 = (void *)sub_19E0B5820(&v43, &v39, &v38);
      }
      else
      {
        sub_19E057A94(v44, v13, v14);
        uint64_t v16 = v15 + 3;
      }
      int v44 = v16;
      if (a5)
      {
        uint64_t v17 = *(void *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v19 = v10;
          uint64_t v20 = a5;
          uint64_t v21 = v8;
          uint64_t v22 = a3;
          uint64_t v23 = a4;
          uint64_t v24 = (v11 - v9) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            sub_19E041BEC();
          }
          unint64_t v26 = v19 - (void)v9;
          unint64_t v27 = (uint64_t)(v19 - (void)v9) >> 1;
          if (v27 > v25) {
            unint64_t v25 = v27;
          }
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v25;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_19E068D84(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          std::string::size_type v30 = (_DWORD *)(v28 + 4 * v24);
          *std::string::size_type v30 = v17;
          uint64_t v18 = v30 + 1;
          while (v11 != v9)
          {
            int v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--std::string::size_type v30 = v31;
          }
          std::string __p = v30;
          BOOL v41 = v18;
          unint64_t v32 = v28 + 4 * v29;
          unint64_t v42 = v32;
          if (v9) {
            operator delete(v9);
          }
          unint64_t v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          uint64_t v8 = v21;
          a5 = v20;
          unint64_t v10 = v32;
        }
        else
        {
          *(_DWORD *)uint64_t v11 = v17;
          uint64_t v18 = v11 + 4;
        }
        BOOL v41 = v18;
        uint64_t v11 = (char *)v18;
      }
    }
  }
  uint64_t v33 = *a1;
  if (a5) {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 64))();
  }
  else {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 56))();
  }
  uint64_t v35 = v34;
  if (__p)
  {
    BOOL v41 = __p;
    operator delete(__p);
  }
  std::string __p = &v43;
  sub_19E041AD0((void ***)&__p);
  return v35;
}

void sub_19E0C2C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  std::string __p = &a16;
  sub_19E041AD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E0C2C98(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A1508;
  sub_19E0672C4(*(char **)(a1 + 64));
  *(void *)(a1 + 8) = &unk_1EF09B9F0;
  sub_19E06E0C4((uint64_t *)(a1 + 16), 0);
  sub_19E06DF34((void *)(a1 + 24));

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0C2D34(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A1508;
  sub_19E0672C4(*(char **)(a1 + 64));
  *(void *)(a1 + 8) = &unk_1EF09B9F0;
  sub_19E06E0C4((uint64_t *)(a1 + 16), 0);
  sub_19E06DF34((void *)(a1 + 24));
  return a1;
}

void *sub_19E0C2DB0(void *a1)
{
  *a1 = &unk_1EF0A1348;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  return sub_19E0C2E10(a1);
}

void *sub_19E0C2E10(void *a1)
{
  *a1 = &unk_1EF0A0940;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = &unk_1EF09B980;
  uint64_t v2 = a1[4];
  if (v2)
  {
    MEMORY[0x19F3BA6E0](v2, 0x1000C8052888210);
    a1[4] = 0;
  }
  return a1;
}

uint64_t sub_19E0C2E94(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5 = result;
  for (unsigned int i = 1; ; ++i)
  {
    uint64_t v7 = *(void *)(v5 + 24);
    unsigned int v8 = *(_DWORD *)(v7 + 4 * *a2);
    if (i == (*(_DWORD *)(v7 + 4 * ((v8 >> 10 << ((v8 >> 6) & 8)) ^ *a2 ^ i)) & 0x800000FF)) {
      break;
    }
    if (i > 0xFE) {
      return result;
    }
LABEL_7:
    ;
  }
  uint64_t result = sub_19E0C2F44(*(void *)(a3 + 24), i);
  if (i < 0xFF) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_19E0C2F44(uint64_t a1, char a2)
{
  char v3 = a2;
  if (!a1) {
    sub_19E0483E0();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t sub_19E0C2F94(uint64_t result, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if (*a2 != -1)
  {
    uint64_t v7 = result;
    unsigned long long v28 = 0u;
    memset(v27, 0, sizeof(v27));
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v25 = 0;
    uint64_t v26 = v4;
    sub_19E0C327C(v27, (__n128 *)__p);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    char v23 = 0;
    if (*((void *)&v28 + 1))
    {
      do
      {
        uint64_t v8 = *((void *)&v27[0] + 1);
        uint64_t v9 = v28;
        unint64_t v10 = (unint64_t)v28 >> 7;
        uint64_t v11 = *(void *)(*((void *)&v27[0] + 1) + 8 * ((unint64_t)v28 >> 7));
        uint64_t v12 = v28 & 0x7F;
        int v13 = (long long *)(v11 + 32 * v12);
        if (*((char *)v13 + 23) < 0)
        {
          sub_19E03FA9C(__p, *(void **)v13, *((void *)v13 + 1));
          uint64_t v8 = *((void *)&v27[0] + 1);
          uint64_t v9 = v28;
          unint64_t v10 = (unint64_t)v28 >> 7;
        }
        else
        {
          long long v14 = *v13;
          uint64_t v25 = *((void *)v13 + 2);
          *(_OWORD *)std::string __p = v14;
        }
        uint64_t v26 = *(void *)(v11 + 32 * v12 + 24);
        uint64_t v15 = *(void *)(v8 + 8 * v10) + 32 * (v28 & 0x7F);
        if (*(char *)(v15 + 23) < 0)
        {
          operator delete(*(void **)v15);
          uint64_t v9 = v28;
        }
        unint64_t v16 = v9 + 1;
        unsigned long long v28 = __PAIR128__(*((unint64_t *)&v28 + 1), v16) + __PAIR128__(-1, 0);
        if (v16 >= 0x100)
        {
          operator delete(**((void ***)&v27[0] + 1));
          *((void *)&v27[0] + 1) += 8;
          *(void *)&unsigned long long v28 = v28 - 128;
        }
        int v22 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t *, int *))(*(void *)v7 + 128))(v7, &v26, &v22)
          && (v25 >= 0 ? (uint64_t v17 = __p) : (uint64_t v17 = (void **)__p[0]),
              v25 >= 0 ? (uint64_t v18 = HIBYTE(v25)) : (uint64_t v18 = (uint64_t)__p[1]),
              sub_19E06E4F4(*(void *)(a3 + 24), v22, (uint64_t)v17, v18, (uint64_t)&v23),
              v23))
        {
          char v19 = 1;
        }
        else
        {
          if ((a4 & 0x80000000) != 0) {
            goto LABEL_25;
          }
          unint64_t v20 = HIBYTE(v25);
          if (v25 < 0) {
            unint64_t v20 = (unint64_t)__p[1];
          }
          if (v20 < a4)
          {
LABEL_25:
            v29[0] = &unk_1EF0A0B98;
            v29[1] = v27;
            v29[2] = __p;
            v29[3] = v29;
            (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v7 + 144))(v7, &v26, v29);
            sub_19E0C3820(v29);
          }
          char v19 = 0;
        }
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
        if (*((void *)&v28 + 1)) {
          char v21 = v19;
        }
        else {
          char v21 = 1;
        }
      }
      while ((v21 & 1) == 0);
    }
    return sub_19E0C38A4((uint64_t)v27);
  }
  return result;
}

void sub_19E0C3238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_19E0C38A4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

__n128 sub_19E0C327C(void *a1, __n128 *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 16 * (v4 - v5) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x80)
    {
      a1[4] = v8 - 128;
      uint64_t v12 = *(void *)v5;
      unint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          unint64_t v42 = (char *)sub_19E060B48(v41);
          int v44 = &v42[8 * (v41 >> 2)];
          unint64_t v45 = (uint64_t *)a1[1];
          uint64_t v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            int v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)int v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          std::string::size_type v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          unint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            int v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            int v22 = (char *)a1[1];
          }
          uint64_t v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)uint64_t v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    uint64_t v24 = (char *)a1[3];
    uint64_t v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      unint64_t v27 = operator new(0x1000uLL);
      unsigned long long v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          unint64_t v53 = (char *)sub_19E060B48(v51);
          uint64_t v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v55 = (uint64_t *)a1[1];
          std::string::size_type v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            std::string::size_type v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            int v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)int v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          BOOL v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        uint64_t v62 = (char *)a1[1];
        int v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = (uint64_t)&v63[-*a1] >> 2;
            }
            v99 = (char *)sub_19E060B48(v98);
            v101 = &v99[8 * (v98 >> 2)];
            uint64_t v102 = (uint64_t *)a1[1];
            int v63 = v101;
            uint64_t v103 = a1[2] - (void)v102;
            if (v103)
            {
              int v63 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v104 = 8 * (v103 >> 3);
              v105 = &v99[8 * (v98 >> 2)];
              do
              {
                uint64_t v106 = *v102++;
                *(void *)v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v63;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              int v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            std::string v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              uint64_t v62 = (char *)a1[1];
            }
            int v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)int v63 = v64;
      }
      else
      {
        *(void *)uint64_t v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    std::string::size_type v30 = (char *)sub_19E060B48(v29);
    uint64_t v32 = v31;
    uint64_t v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v111 = v34;
    uint64_t v35 = operator new(0x1000uLL);
    *(void *)&long long v36 = v33;
    *((void *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&long long v38 = v111;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&long long v36 = v33;
        *((void *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      unsigned int v75 = (char *)sub_19E060B48(v74);
      uint64_t v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v38 = v75;
      *((void *)&v38 + 1) = v33;
      *(void *)&long long v36 = v33;
      *((void *)&v36 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v108 = v36;
      long long v111 = v38;
      operator delete(v30);
      long long v36 = v108;
    }
    long long v38 = v111;
LABEL_56:
    *(void *)uint64_t v33 = v35;
    *(void *)&long long v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        uint64_t v80 = (unsigned char *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          uint64_t v86 = (char *)sub_19E060B48(v85);
          int v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          uint64_t v89 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            v91 = v79;
            uint64_t v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(void *)&long long v38 = v86;
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = v88;
          *((void *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            long long v109 = v36;
            long long v113 = v38;
            operator delete(v78);
            long long v36 = v109;
            long long v38 = v113;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          int v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            uint64_t v80 = (unsigned char *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v110 = *((void *)&v36 + 1);
            uint64_t v112 = v38;
            memmove((void *)(v84 - (v36 - *((void *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((void *)&v38 + 1));
            *((void *)&v36 + 1) = v110;
            *(void *)&long long v38 = v112;
          }
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = &v80[8 * v83];
        }
      }
      else
      {
        int v79 = (char *)*((void *)&v38 + 1);
      }
      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - 1) = v94;
      *((void *)&v38 + 1) -= 8;
    }
    int v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }
LABEL_84:
  int v96 = (__n128 *)(*(void *)&v5[(v9 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v9 & 0x7F));
  __n128 result = *a2;
  v96[1].n128_u64[0] = a2[1].n128_u64[0];
  *int v96 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  v96[1].n128_u64[1] = a2[1].n128_u64[1];
  ++a1[5];
  return result;
}

void sub_19E0C37F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void *sub_19E0C3820(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_19E0C38A4(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  char v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    char v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 >> 7];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(void *)(a1 + 40) + v5) & 0x7F);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 32;
        if (v8 - v7 == 4096)
        {
          uint64_t v10 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v10;
          uint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      char v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      char v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 64;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 128;
LABEL_16:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_19E0C3A08()
{
  return &unk_1EF0A0C08;
}

uint64_t sub_19E0C3A14(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A0C08)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void sub_19E0C3A54(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v4 = *(void **)(a1 + 8);
  sub_19E0B6B6C((uint64_t)&__p, *(const void ***)(a1 + 16), *a2);
  uint64_t v7 = *a3;
  sub_19E0C327C(v4, &__p);
  if (v6 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_19E0C3AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_19E0C3AD4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A0B98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0C3AFC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF0A0B98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0C3B48()
{
}

uint64_t sub_19E0C3B60(void *a1, unsigned int *a2, int *a3)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
  if (result)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a1[3];
    unsigned int v9 = *(_DWORD *)(v8 + 4 * v7);
    if ((v9 & 0x100) != 0) {
      int v10 = *(_DWORD *)(v8 + 4 * ((v9 >> 10 << ((v9 >> 6) & 8)) ^ v7)) & 0x7FFFFFFF;
    }
    else {
      int v10 = -1;
    }
    *a3 = v10;
    return v10 != -1;
  }
  return result;
}

uint64_t sub_19E0C3BF8(uint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t a4)
{
  return sub_19E0C3C04(*(void *)(a1 + 24), *a2, a3, a4);
}

uint64_t sub_19E0C3C04(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  unsigned int v4 = *(_DWORD *)(a1 + 4 * a2);
  if (a4)
  {
    while (1)
    {
      int v5 = *a3++;
      a2 = a2 ^ (v4 >> 10 << ((v4 >> 6) & 8)) ^ v5;
      unsigned int v4 = *(_DWORD *)(a1 + 4 * a2);
      if ((v4 & 0x800000FF) != v5) {
        break;
      }
      if (!--a4) {
        return a2;
      }
    }
    return -1;
  }
  int v6 = *a3;
  if (*a3)
  {
    uint64_t v7 = a3 + 1;
    while (1)
    {
      a2 = a2 ^ v6 ^ (v4 >> 10 << ((v4 >> 6) & 8));
      unsigned int v4 = *(_DWORD *)(a1 + 4 * a2);
      if ((v4 & 0x800000FF) != v6) {
        break;
      }
      int v8 = *v7++;
      int v6 = v8;
      if (!v8) {
        return a2;
      }
    }
    return -1;
  }
  return a2;
}

BOOL sub_19E0C3C90(uint64_t a1, void *a2)
{
  return *a2 != -1;
}

uint64_t sub_19E0C3CA0()
{
  return 0;
}

void sub_19E0C3CA8(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t *, const void *, size_t))(*(void *)a1 + 120))(a1, &v16, a2, a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v16))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E04147C();
    }
    if (a3 >= 0x17)
    {
      uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v11 = a3 | 7;
      }
      uint64_t v12 = v11 + 1;
      int v10 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)a3;
      unint64_t v15 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v15) = a3;
      int v10 = __dst;
      if (!a3)
      {
LABEL_10:
        *((unsigned char *)v10 + a3) = 0;
        uint64_t v13 = operator new(0x28uLL);
        void *v13 = &unk_1EF0A0B18;
        v13[1] = __dst;
        v13[2] = a2;
        v13[3] = a3;
        v13[4] = a4;
        v17[3] = v13;
        (*(void (**)(uint64_t, uint64_t *, void *, uint64_t))(*(void *)a1 + 136))(a1, &v16, v17, a5);
        sub_19E06C7E4(v17);
        if (SHIBYTE(v15) < 0) {
          operator delete(__dst[0]);
        }
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19E0C3EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_19E0C3EDC()
{
  return &unk_1EF0A0B78;
}

uint64_t sub_19E0C3EE8(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A0B78)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C3F28(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = a1[3];
  unint64_t v10 = v9 + v8;
  uint64_t v11 = a1[1];
  int v12 = *(char *)(v11 + 23);
  if (v12 < 0) {
    unint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    unint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  uint64_t v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    uint64_t v11 = a1[1];
    uint64_t v9 = a1[3];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
  uint64_t v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    uint64_t v11 = a1[1];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
LABEL_9:
  int v16 = *a2;
  if ((v12 & 0x80) != 0) {
    uint64_t v11 = *(void *)v11;
  }
  uint64_t v17 = *(void *)(a1[4] + 24);

  return sub_19E06E4F4(v17, v16, v11, v10, a4);
}

__n128 sub_19E0C4018(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A0B18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0C4048(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF0A0B18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_19E0C409C()
{
}

uint64_t sub_19E0C40B4(uint64_t a1, unsigned char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result = off_1EC301500();
  uint64_t v9 = *(_DWORD **)(v8 + 24);
  uint64_t v10 = (*v9 >> 10 << ((*v9 >> 6) & 8));
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = a2[v12];
      uint64_t v15 = v10 ^ v14;
      unsigned int v16 = v9[v15];
      if ((v16 & 0x800000FF) != v14) {
        break;
      }
      uint64_t v10 = v15 ^ (v16 >> 10 << ((v16 >> 6) & 8));
      if ((v16 & 0x100) != 0)
      {
        if (v13 <= 0x7F)
        {
          unint64_t v17 = result + 16 * v13;
          *(_DWORD *)unint64_t v17 = v9[v10] & 0x7FFFFFFF;
          *(void *)(v17 + 8) = v12 + 1;
        }
        ++v13;
      }
      ++v12;
    }
    while (a3 != v12);
  }
  else
  {
    unsigned int v18 = *a2;
    if (!*a2) {
      return result;
    }
    unint64_t v13 = 0;
    uint64_t v19 = 1;
    do
    {
      uint64_t v20 = v10 ^ v18;
      unsigned int v21 = v9[v20];
      if ((v21 & 0x800000FF) != v18) {
        break;
      }
      uint64_t v10 = v20 ^ (v21 >> 10 << ((v21 >> 6) & 8));
      if ((v21 & 0x100) != 0)
      {
        if (v13 <= 0x7F)
        {
          unint64_t v22 = result + 16 * v13;
          *(_DWORD *)unint64_t v22 = v9[v10] & 0x7FFFFFFF;
          *(void *)(v22 + 8) = v19;
        }
        ++v13;
      }
      unsigned int v18 = a2[v19++];
    }
    while (v18);
  }
  char v30 = 0;
  if (v13)
  {
    unint64_t v23 = v13 - 1;
    uint64_t v24 = (void *)(result + 8);
    do
    {
      int v25 = *((_DWORD *)v24 - 2);
      unint64_t v27 = *v24;
      v24 += 2;
      uint64_t v26 = v27;
      if (a3 >= v27) {
        uint64_t v28 = v26;
      }
      else {
        uint64_t v28 = a3;
      }
      uint64_t result = sub_19E06E4F4(*(void *)(a4 + 24), v25, (uint64_t)a2, v28, (uint64_t)&v30);
      if (v30) {
        BOOL v29 = 1;
      }
      else {
        BOOL v29 = v23 == 0;
      }
      --v23;
    }
    while (!v29);
  }
  return result;
}

BOOL sub_19E0C4240(uint64_t a1, unsigned char *a2, uint64_t a3, int *a4)
{
  unsigned int v4 = *(unsigned int **)(a1 + 24);
  unsigned int v5 = *v4;
  if (a3)
  {
    uint64_t v6 = 0;
    while (1)
    {
      int v7 = *a2++;
      v6 ^= (v5 >> 10 << ((v5 >> 6) & 8)) ^ v7;
      unsigned int v5 = v4[v6];
      if ((v5 & 0x800000FF) != v7) {
        break;
      }
      if (!--a3) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = *a2;
    if (*a2)
    {
      uint64_t v6 = 0;
      uint64_t v9 = a2 + 1;
      while (1)
      {
        v6 ^= (v5 >> 10 << ((v5 >> 6) & 8)) ^ v8;
        unsigned int v5 = v4[v6];
        if ((v5 & 0x800000FF) != v8) {
          break;
        }
        int v10 = *v9++;
        int v8 = v10;
        if (!v10)
        {
LABEL_10:
          if ((v5 & 0x100) != 0) {
            goto LABEL_13;
          }
          break;
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
      if ((v5 & 0x100) != 0)
      {
LABEL_13:
        int v11 = v4[v6 ^ (v5 >> 10 << ((v5 >> 6) & 8))] & 0x7FFFFFFF;
        goto LABEL_14;
      }
    }
  }
  int v11 = -1;
LABEL_14:
  *a4 = v11;
  return v11 != -1;
}

uint64_t sub_19E0C4308(void *a1, uint64_t a2, uint64_t a3)
{
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v6 = a1[4];
  if (v6)
  {
    MEMORY[0x19F3BA6E0](v6, 0x1000C8052888210);
    a1[4] = 0;
  }
  a1[2] = a3;
  a1[3] = a2;
  return 1;
}

void sub_19E0C4364(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  uint64_t v52 = 0;
  unint64_t v53 = 0;
  unint64_t v54 = 0;
  __n128 __p = 0;
  std::string::size_type v50 = 0;
  unint64_t v51 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  unint64_t v48 = 0;
  sub_19E0C470C((void **)&v52, v7);
  sub_19E0C47B4(&__p, v7);
  sub_19E0C485C((void **)&v46, v7);
  unint64_t v45 = v7;
  if (v5 != v6)
  {
    uint64_t v8 = 0;
    if (v7 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v7;
    }
    do
    {
      uint64_t v10 = *a2 + 24 * v8;
      if (*(char *)(v10 + 23) < 0) {
        uint64_t v10 = *(void *)v10;
      }
      int v11 = (char *)v53;
      if ((unint64_t)v53 >= v54)
      {
        uint64_t v13 = v52;
        uint64_t v14 = ((uint64_t)v53 - v52) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_19E041BEC();
        }
        uint64_t v16 = v54 - v52;
        if ((uint64_t)(v54 - v52) >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)sub_19E060B48(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (uint64_t *)(v17 + 8 * v14);
        uint64_t *v19 = v10;
        uint64_t v12 = v19 + 1;
        if (v11 != (char *)v13)
        {
          do
          {
            uint64_t v20 = *((void *)v11 - 1);
            v11 -= 8;
            *--uint64_t v19 = v20;
          }
          while (v11 != (char *)v13);
          int v11 = (char *)v52;
        }
        uint64_t v52 = (uint64_t)v19;
        unint64_t v54 = v17 + 8 * v18;
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        uint64_t *v53 = v10;
        uint64_t v12 = (uint64_t *)(v11 + 8);
      }
      unint64_t v53 = v12;
      uint64_t v21 = *a2 + 24 * v8;
      if (*(char *)(v21 + 23) < 0) {
        uint64_t v22 = *(void *)(v21 + 8);
      }
      else {
        uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
      }
      unint64_t v23 = v50;
      if (v50 >= v51)
      {
        int v25 = (char *)__p;
        uint64_t v26 = (v50 - (unsigned char *)__p) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          sub_19E041BEC();
        }
        uint64_t v28 = v51 - (unsigned char *)__p;
        if ((v51 - (unsigned char *)__p) >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          char v30 = (char *)sub_19E049FB0((uint64_t)&v51, v29);
          int v25 = (char *)__p;
          unint64_t v23 = v50;
        }
        else
        {
          char v30 = 0;
        }
        uint64_t v31 = &v30[8 * v26];
        *(void *)uint64_t v31 = v22;
        uint64_t v24 = v31 + 8;
        while (v23 != v25)
        {
          uint64_t v32 = *((void *)v23 - 1);
          v23 -= 8;
          *((void *)v31 - 1) = v32;
          v31 -= 8;
        }
        __n128 __p = v31;
        std::string::size_type v50 = v24;
        unint64_t v51 = &v30[8 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(void *)std::string::size_type v50 = v22;
        uint64_t v24 = v23 + 8;
      }
      std::string::size_type v50 = v24;
      int v33 = *(_DWORD *)(*a3 + 4 * v8);
      long long v34 = v47;
      if ((unint64_t)v47 >= v48)
      {
        long long v36 = (_DWORD *)v46;
        uint64_t v37 = ((uint64_t)v47 - v46) >> 2;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62) {
          sub_19E041BEC();
        }
        uint64_t v39 = v48 - v46;
        if ((uint64_t)(v48 - v46) >> 1 > v38) {
          unint64_t v38 = v39 >> 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40) {
          unint64_t v40 = (unint64_t)sub_19E068D84(v40);
        }
        else {
          uint64_t v41 = 0;
        }
        unint64_t v42 = (_DWORD *)(v40 + 4 * v37);
        _DWORD *v42 = v33;
        uint64_t v35 = v42 + 1;
        while (v34 != v36)
        {
          int v43 = *--v34;
          *--unint64_t v42 = v43;
        }
        uint64_t v46 = (uint64_t)v42;
        unint64_t v48 = v40 + 4 * v41;
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        _DWORD *v47 = v33;
        uint64_t v35 = v34 + 1;
      }
      uint64_t v47 = v35;
      ++v8;
    }
    while (v8 != v9);
  }
  sub_19E0C4904(a1 + 8, v45, v52, (uint64_t)__p, v46);
}

void sub_19E0C46C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0C470C(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_19E041BEC();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unsigned int v4 = (char *)sub_19E060B48(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v7 = &v4[8 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_19E0C47B4(void **a1, unint64_t a2)
{
  unsigned int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_19E041BEC();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_19E049FB0(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_19E0C485C(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_19E041BEC();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unsigned int v4 = (char *)sub_19E068D84(a2);
    int64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v7 = &v4[4 * v6];
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v9 != *a1)
    {
      uint64_t v10 = v5;
      do
      {
        int v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_19E0C4904(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a2;
  unint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  memset(v41, 0, 60);
  if (!a5)
  {
    unsigned int v9 = 1;
    do
    {
      unsigned int v10 = v9;
      unint64_t v11 = v9;
      v9 *= 2;
    }
    while (v11 < v5);
    if (v10) {
      sub_19E0C590C((uint64_t)v41 + 8, v10);
    }
    operator new[]();
  }
  uint64_t v6 = a4;
  uint64_t v53 = 0;
  long long v51 = 0uLL;
  long long v52 = 0uLL;
  long long v50 = 0uLL;
  long long v48 = 0uLL;
  memset(v49, 0, sizeof(v49));
  long long v46 = 0uLL;
  long long v47 = 0uLL;
  v54[0] = 0;
  sub_19E0C7138((uint64_t)&v50, 0x400u, v54);
  int v7 = DWORD2(v52);
  if (DWORD2(v52))
  {
    uint64_t v8 = v46 + 12 * *(unsigned int *)(v52 + 4 * DWORD2(v52) - 4);
    *(_DWORD *)(v8 + 7) = 0;
    *(void *)uint64_t v8 = 0;
    DWORD2(v52) = v7 - 1;
  }
  else
  {
    sub_19E0C6DD0((uint64_t)&v46);
  }
  sub_19E0C6F98((uint64_t)v49);
  sub_19E0C6FE8((uint64_t)&v47);
  if (DWORD2(v48) == HIDWORD(v48)) {
    sub_19E0C56FC((uint64_t)&v48, DWORD2(v48) + 1);
  }
  ++DWORD2(v48);
  uint64_t v53 = 1;
  *(unsigned char *)(v46 + 8) = -1;
  v54[0] = 0;
  sub_19E0C6F44((uint64_t)&v51, v54);
  if (!v5) {
    goto LABEL_45;
  }
  uint64_t v12 = 0;
  unint64_t v36 = v5 + 1;
  uint64_t v37 = v6;
  unint64_t v38 = v5;
LABEL_14:
  uint64_t v13 = *(void *)(a3 + 8 * v12);
  if (v6)
  {
    unint64_t v14 = *(void *)(v6 + 8 * v12);
  }
  else
  {
    uint64_t v15 = 0;
    while (*(unsigned __int8 *)(v13 + v15++))
      ;
    unint64_t v14 = v15 - 1;
  }
  int v17 = *(_DWORD *)(a5 + 4 * v12);
  if (v17 < 0)
  {
    long long v34 = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie/darts_clone.h:1"
          "146: exception: failed to insert key: negative value";
  }
  else if (v14)
  {
    unint64_t v18 = 0;
    unsigned int v19 = 0;
    while (1)
    {
      unsigned int v20 = *(_DWORD *)(v46 + 12 * v19);
      if (!v20) {
        goto LABEL_30;
      }
      unsigned int v21 = *(unsigned __int8 *)(v13 + v18);
      if (v18 < v14 && !*(unsigned char *)(v13 + v18)) {
        break;
      }
      unsigned int v22 = *(unsigned __int8 *)(v46 + 12 * v20 + 8);
      if (v21 < v22)
      {
        long long v34 = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Dev"
              "eloper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie/darts_c"
              "lone.h:1167: exception: failed to insert key: wrong key order";
        goto LABEL_59;
      }
      if (v21 > v22)
      {
        *(unsigned char *)(v46 + 12 * v20 + 10) = 1;
        sub_19E0C6928((uint64_t)&v46, v20);
LABEL_30:
        if (v18 <= v14)
        {
          do
          {
            if (v18 >= v14) {
              char v24 = 0;
            }
            else {
              char v24 = *(unsigned char *)(v13 + v18);
            }
            int v25 = DWORD2(v52);
            if (DWORD2(v52))
            {
              uint64_t v26 = v46;
              unsigned int v23 = *(_DWORD *)(v52 + 4 * DWORD2(v52) - 4);
              uint64_t v27 = v46 + 12 * v23;
              *(_DWORD *)(v27 + 7) = 0;
              *(void *)uint64_t v27 = 0;
              DWORD2(v52) = v25 - 1;
            }
            else
            {
              unsigned int v23 = DWORD2(v46);
              sub_19E0C6DD0((uint64_t)&v46);
              uint64_t v26 = v46;
            }
            v54[0] = v23;
            uint64_t v28 = (unsigned int *)(v26 + 12 * v19);
            unsigned int v29 = *v28;
            if (!*v28) {
              *(unsigned char *)(v26 + 12 * v23 + 9) = 1;
            }
            uint64_t v30 = v26 + 12 * v23;
            *(_DWORD *)(v30 + 4) = v29;
            *(unsigned char *)(v30 + 8) = v24;
            *uint64_t v28 = v23;
            sub_19E0C6F44((uint64_t)&v51, v54);
            ++v18;
            unsigned int v19 = v23;
          }
          while (v18 <= v14);
        }
        else
        {
          unsigned int v23 = v19;
        }
        *(_DWORD *)(v46 + 12 * v23) = v17;
        uint64_t v6 = v37;
        unint64_t v5 = v38;
LABEL_42:
        ++v12;
        if (*(void *)&v41[0]) {
          (*(void (**)(uint64_t, unint64_t))&v41[0])(v12, v36);
        }
        if (v12 == v5)
        {
LABEL_45:
          sub_19E0C6928((uint64_t)&v46, 0);
          char v31 = *(unsigned char *)(v46 + 8);
          int v32 = *(_DWORD *)v46;
          if (v31) {
            int v33 = (2 * *(unsigned __int8 *)(v46 + 9)) | (4 * v32);
          }
          else {
            int v33 = 2 * v32;
          }
          *(_DWORD *)long long v47 = v33 | *(unsigned __int8 *)(v46 + 10);
          *(unsigned char *)long long v48 = v31;
          if ((void)v46)
          {
            MEMORY[0x19F3BA6E0](v46, 0x1000C8077774924);
            *(void *)&long long v46 = 0;
          }
          *((void *)&v46 + 1) = 0;
          if ((void)v50)
          {
            MEMORY[0x19F3BA6E0](v50, 0x1000C8077774924);
            *(void *)&long long v50 = 0;
          }
          *((void *)&v50 + 1) = 0;
          if ((void)v51)
          {
            MEMORY[0x19F3BA6E0](v51, 0x1000C8077774924);
            *(void *)&long long v51 = 0;
          }
          *((void *)&v51 + 1) = 0;
          if ((void)v52)
          {
            MEMORY[0x19F3BA6E0](v52, 0x1000C8077774924);
            *(void *)&long long v52 = 0;
          }
          *((void *)&v52 + 1) = 0;
          operator new[]();
        }
        goto LABEL_14;
      }
      ++v18;
      unsigned int v19 = *(_DWORD *)(v46 + 12 * v19);
      if (v18 > v14) {
        goto LABEL_42;
      }
    }
    long long v34 = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie/darts_clone.h:1"
          "162: exception: failed to insert key: invalid null character";
  }
  else
  {
    long long v34 = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie/darts_clone.h:1"
          "148: exception: failed to insert key: zero-length key";
  }
LABEL_59:
  exception = __cxa_allocate_exception(0x10uLL);
  void *exception = &unk_1EF09B9A0;
  exception[1] = v34;
  __cxa_throw(exception, (struct type_info *)&unk_1EF09ADE0, (void (*)(void *))std::exception::~exception);
}

void sub_19E0C54F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

uint64_t sub_19E0C5538(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  sub_19E0C5618((uint64_t *)(a1 + 8));
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    MEMORY[0x19F3BA6E0](v3, 0x1000C80CBA68D63);
    *(void *)(a1 + 24) = 0;
  }
  sub_19E0C5664(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4)
  {
    MEMORY[0x19F3BA6E0](v4, 0x1000C8052888210);
    *(void *)(a1 + 48) = 0;
  }
  *(_DWORD *)(a1 + 56) = 0;
  sub_19E0C56B4((void *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    MEMORY[0x19F3BA6E0](v5, 0x1000C80CBA68D63);
    *(void *)(a1 + 24) = 0;
  }
  sub_19E0C5618(v2);
  if (*v2)
  {
    MEMORY[0x19F3BA6E0](*v2, 0x1000C8077774924);
    *uint64_t v2 = 0;
  }
  return a1;
}

uint64_t sub_19E0C5618(uint64_t *a1)
{
  sub_19E0C5890((uint64_t)a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x19F3BA6E0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  return result;
}

uint64_t sub_19E0C5664(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8)) {
    *(_DWORD *)(a1 + 8) = 0;
  }
  uint64_t result = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t result = MEMORY[0x19F3BA6E0]();
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *sub_19E0C56B4(void *a1)
{
  if (*a1)
  {
    MEMORY[0x19F3BA6E0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

void sub_19E0C56FC(uint64_t a1, unsigned int a2)
{
  if (a2 < 2 * *(_DWORD *)(a1 + 12))
  {
    int v2 = 1;
    do
    {
      unsigned int v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

const char *sub_19E0C5840(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    return *(const char **)(a1 + 8);
  }
  else {
    return "";
  }
}

void sub_19E0C5858(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0C5890(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 > a2)
  {
    *(_DWORD *)(a1 + 8) = a2;
    unsigned int v4 = a2;
  }
  if (*(_DWORD *)(a1 + 12) < a2) {
    sub_19E0C590C(a1, a2);
  }
  if (v4 < a2)
  {
    bzero((void *)(*(void *)a1 + 4 * v4), 4 * (~v4 + a2) + 4);
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_19E0C590C(uint64_t a1, unsigned int a2)
{
  if (a2 < 2 * *(_DWORD *)(a1 + 12))
  {
    int v2 = 1;
    do
    {
      unsigned int v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

uint64_t sub_19E0C5A50(uint64_t a1)
{
  sub_19E0C5664(a1);
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t result = MEMORY[0x19F3BA6E0](result, 0x1000C8052888210);
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

void *sub_19E0C5A94(void *a1)
{
  sub_19E0C5664((uint64_t)a1);
  int v2 = a1 + 2;
  sub_19E0C5664((uint64_t)(a1 + 2));
  sub_19E0C5664((uint64_t)(a1 + 4));
  sub_19E0C5A50((uint64_t)(a1 + 6));
  sub_19E0C5664((uint64_t)(a1 + 10));
  sub_19E0C5664((uint64_t)(a1 + 12));
  sub_19E0C5664((uint64_t)(a1 + 14));
  a1[16] = 0;
  sub_19E0C6378(a1 + 14);
  sub_19E0C6378(a1 + 12);
  sub_19E0C56B4(a1 + 10);
  sub_19E0C5A50((uint64_t)(a1 + 6));
  uint64_t v3 = a1[8];
  if (v3)
  {
    MEMORY[0x19F3BA6E0](v3, 0x1000C8052888210);
    a1[8] = 0;
  }
  sub_19E0C56B4(a1 + 6);
  sub_19E0C56B4(a1 + 4);
  sub_19E0C5664((uint64_t)(a1 + 2));
  if (*v2)
  {
    MEMORY[0x19F3BA6E0](*v2, 0x1000C8077774924);
    *int v2 = 0;
  }
  sub_19E0C5664((uint64_t)a1);
  if (*a1)
  {
    MEMORY[0x19F3BA6E0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

void sub_19E0C5BC0(uint64_t a1)
{
  int v2 = (void *)(a1 + 8);
  unint64_t v3 = *(unsigned int *)(a1 + 16);
  unsigned int v4 = v3 + 256;
  if ((v3 >> 8) - 16 > 0xFFFFFFEE)
  {
    sub_19E0C5890(a1 + 8, v3 + 256);
  }
  else
  {
    int v5 = 0;
    unint64_t v6 = ((v3 >> 8) - 16) << 8;
    uint64_t v7 = *(void *)(a1 + 24);
    while (1)
    {
      char v8 = v5;
      if (!*(unsigned char *)(v7 + 12 * ((v6 + v5) & 0xFFF) + 9)) {
        break;
      }
      if (++v5 == 256)
      {
        char v8 = 0;
        break;
      }
    }
    uint64_t v9 = 0;
    uint64_t v10 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(unsigned char *)(v7 + v10 + v9 + 8))
      {
        if (v6 >= *(unsigned int *)(a1 + 16))
        {
          sub_19E0C5BC0(a1);
          uint64_t v7 = *(void *)(a1 + 24);
        }
        unint64_t v11 = (int *)(v7 + v10 + v9);
        uint64_t v12 = v11[1];
        if (v6 == *(_DWORD *)(a1 + 56))
        {
          *(_DWORD *)(a1 + 56) = v12;
          if (v6 == v12) {
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 16);
          }
        }
        int v13 = *v11;
        *(_DWORD *)(v7 + 12 * (*v11 & 0xFFF) + 4) = v12;
        *(_DWORD *)(v7 + 12 * (v11[1] & 0xFFF)) = v13;
        *((unsigned char *)v11 + 8) = 1;
        *(unsigned char *)(*v2 + 4 * v6) = v8 ^ v6;
      }
      ++v6;
      v9 += 12;
    }
    while (v9 != 3072);
    sub_19E0C5890((uint64_t)v2, v3 + 256);
    if (v3 <= 0xFFFFFEFF)
    {
      uint64_t v14 = *(void *)(a1 + 24);
      unsigned int v15 = v3;
      do
        *(_WORD *)(v14 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v15 < v4);
    }
  }
  uint64_t v16 = *(void *)(a1 + 24);
  if ((int)v3 + 1 < v4)
  {
    int v17 = v3;
    do
    {
      *(_DWORD *)(v16 + 12 * (v17 & 0xFFF) + 4) = v17 + 1;
      *(_DWORD *)(v16 + 12 * ((v17 + 1) & 0xFFF)) = v17;
      int v18 = v17 + 2;
      ++v17;
    }
    while (v18 != v4);
  }
  uint64_t v19 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v16 + v19) = v3 + 255;
  int v20 = *(_DWORD *)(a1 + 56);
  uint64_t v21 = 12 * (v20 & 0xFFF);
  *(_DWORD *)(v16 + v19) = *(_DWORD *)(v16 + v21);
  LOWORD(v19) = *(_DWORD *)(v16 + v21);
  *(_DWORD *)(v16 + 12 * ((v3 + 255) & 0xFFF) + 4) = v20;
  *(_DWORD *)(v16 + 12 * (v19 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v16 + v21) = v3 + 255;
}

void sub_19E0C5DD4(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unint64_t v8 = a4;
  uint64_t v12 = (uint64_t *)(a1 + 32);
  while (1)
  {
    if (*(_DWORD *)(a1 + 40)) {
      *(_DWORD *)(a1 + 40) = 0;
    }
    int v13 = -1;
    if (a3 < v8)
    {
      for (unint64_t i = a3; v8 != i; ++i)
      {
        unsigned __int8 v53 = 0;
        uint64_t v15 = a2[2];
        if (v15)
        {
          if (*(void *)(v15 + 8 * i) > a5)
          {
            unsigned __int8 v53 = *(unsigned char *)(*(void *)(a2[1] + 8 * i) + a5);
            LODWORD(v16) = v53;
            if (!v53)
            {
              exception = __cxa_allocate_exception(0x10uLL);
              long long v50 = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Conten"
                    "ts/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/"
                    "trie/darts_clone.h:1731: exception: failed to build double-array: invalid null character";
              goto LABEL_81;
            }
            goto LABEL_21;
          }
        }
        else
        {
          unsigned __int8 v53 = *(unsigned char *)(*(void *)(a2[1] + 8 * i) + a5);
          LODWORD(v16) = v53;
          if (v53) {
            goto LABEL_21;
          }
        }
        uint64_t v17 = a2[3];
        if (v17)
        {
          if ((*(_DWORD *)(v17 + 4 * i) & 0x80000000) != 0) {
            goto LABEL_80;
          }
        }
        else if ((i & 0x80000000) != 0)
        {
LABEL_80:
          exception = __cxa_allocate_exception(0x10uLL);
          long long v50 = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/D"
                "eveloper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie/dar"
                "ts_clone.h:1733: exception: failed to build double-array: negative value";
LABEL_81:
          void *exception = &unk_1EF09B9A0;
          exception[1] = v50;
          __cxa_throw(exception, (struct type_info *)&unk_1EF09ADE0, (void (*)(void *))std::exception::~exception);
        }
        if (v13 == -1)
        {
          if (v17) {
            int v13 = *(_DWORD *)(v17 + 4 * i);
          }
          else {
            int v13 = i;
          }
        }
        uint64_t v16 = *(void (**)(unint64_t, uint64_t))a1;
        if (*(void *)a1)
        {
          v16(i + 1, *a2 + 1);
          LODWORD(v16) = 0;
        }
LABEL_21:
        int v18 = *(_DWORD *)(a1 + 40);
        if (!v18) {
          goto LABEL_25;
        }
        unsigned int v19 = *(unsigned __int8 *)(*v12 + (v18 - 1));
        if (v16 != v19)
        {
          if (v16 < v19)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            long long v50 = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents"
                  "/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie"
                  "/darts_clone.h:1748: exception: failed to build double-array: wrong key order";
            goto LABEL_81;
          }
LABEL_25:
          sub_19E0C6324((uint64_t)v12, &v53);
        }
      }
    }
    unsigned int v20 = *(_DWORD *)(a1 + 56);
    unsigned int v21 = *(_DWORD *)(a1 + 16);
    if (v20 >= v21)
    {
LABEL_39:
      int v26 = v21 | a6;
    }
    else
    {
      uint64_t v23 = *(void *)(a1 + 24);
      unsigned int v22 = *(unsigned __int8 **)(a1 + 32);
      int v24 = *v22;
      int v25 = *(_DWORD *)(a1 + 56);
      while (1)
      {
        int v26 = v25 ^ v24;
        unsigned int v27 = (v25 ^ v24) & 0xFFF;
        if (!*(unsigned char *)(v23 + 12 * v27 + 9)
          && (v26 == a6 || ((v26 ^ a6) & 0x1FE00000) == 0))
        {
          unint64_t v28 = *(unsigned int *)(a1 + 40);
          if (v28 < 2) {
            goto LABEL_40;
          }
          if (!*(unsigned char *)(v23 + 12 * (v27 ^ v22[1]) + 8)) {
            break;
          }
        }
LABEL_38:
        int v25 = *(_DWORD *)(v23 + 12 * (v25 & 0xFFF) + 4);
        if (v25 == v20) {
          goto LABEL_39;
        }
      }
      uint64_t v29 = 2;
      while (v28 != v29)
      {
        unint64_t v30 = v29;
        if (*(unsigned __int8 *)(v23 + 12 * (v27 ^ v22[v29++]) + 8))
        {
          if (v30 >= v28) {
            break;
          }
          goto LABEL_38;
        }
      }
    }
LABEL_40:
    sub_19E0C629C((unsigned int *)(*(void *)(a1 + 8) + 4 * a6), v26 ^ a6);
    if (*(_DWORD *)(a1 + 40))
    {
      unsigned int v32 = a6;
      unint64_t v33 = 0;
      int v34 = v13;
      uint64_t v35 = v32;
      unsigned int v52 = v34 | 0x80000000;
      uint64_t v36 = *v12;
      do
      {
        unsigned int v37 = v26 ^ *(unsigned __int8 *)(v36 + v33);
        if (*(_DWORD *)(a1 + 16) <= v37) {
          sub_19E0C5BC0(a1);
        }
        if (*(_DWORD *)(a1 + 56) == v37)
        {
          unsigned int v38 = v37 & 0xFFF;
          uint64_t v39 = *(void *)(a1 + 24);
          unsigned int v40 = *(_DWORD *)(v39 + 12 * (v37 & 0xFFF) + 4);
          *(_DWORD *)(a1 + 56) = v40;
          if (v40 == v37)
          {
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 16);
            unsigned int v40 = v37;
          }
        }
        else
        {
          uint64_t v39 = *(void *)(a1 + 24);
          unsigned int v38 = v37 & 0xFFF;
          unsigned int v40 = *(_DWORD *)(v39 + 12 * (v37 & 0xFFF) + 4);
        }
        uint64_t v41 = (int *)(v39 + 12 * v38);
        int v42 = *v41;
        *(_DWORD *)(v39 + 12 * (v42 & 0xFFF) + 4) = v40;
        *(_DWORD *)(v39 + 12 * (v41[1] & 0xFFF)) = v42;
        *((unsigned char *)v41 + 8) = 1;
        uint64_t v36 = *v12;
        if (*(unsigned char *)(*v12 + v33))
        {
          *(unsigned char *)(*(void *)(a1 + 8) + 4 * v37) = *(unsigned char *)(*v12 + v33);
        }
        else
        {
          uint64_t v43 = *(void *)(a1 + 8);
          *(_DWORD *)(v43 + 4 * v35) |= 0x100u;
          *(_DWORD *)(v43 + 4 * v37) = v52;
        }
        ++v33;
      }
      while (v33 < *(unsigned int *)(a1 + 40));
    }
    else
    {
      uint64_t v39 = *(void *)(a1 + 24);
    }
    *(unsigned char *)(v39 + 12 * (v26 & 0xFFF) + 9) = 1;
    unint64_t v8 = a4;
    if (a3 < a4)
    {
      uint64_t v44 = a2[2];
      while (v44 && *(void *)(v44 + 8 * a3) <= a5 || !*(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3) {
          return;
        }
      }
    }
    if (a3 == a4) {
      break;
    }
    uint64_t v45 = a2[2];
    if (v45 && *(void *)(v45 + 8 * a3) <= a5) {
      unsigned int v46 = 0;
    }
    else {
      unsigned int v46 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * a3) + a5);
    }
    unint64_t v47 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v45 && *(void *)(v45 + 8 * v47) <= a5) {
          int v48 = 0;
        }
        else {
          int v48 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v47) + a5);
        }
        if (v48 != v46)
        {
          sub_19E0C5DD4(a1, a2, a3, v47, a5 + 1, v26 ^ v46);
          uint64_t v45 = a2[2];
          if (v45 && *(void *)(v45 + 8 * v47) <= a5) {
            unsigned int v46 = 0;
          }
          else {
            unsigned int v46 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v47) + a5);
          }
          a3 = v47;
        }
        ++v47;
      }
      while (a4 != v47);
    }
    a6 = v26 ^ v46;
    ++a5;
  }
}

unsigned int *sub_19E0C629C(unsigned int *result, unsigned int a2)
{
  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = &unk_1EF09B9A0;
    exception[1] = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Content"
                   "s/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/tr"
                   "ie/darts_clone.h:1385: exception: failed to modify unit: too large offset";
    __cxa_throw(exception, (struct type_info *)&unk_1EF09ADE0, (void (*)(void *))std::exception::~exception);
  }
  int v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000) {
    int v2 = a2 << 10;
  }
  void *result = *result & 0x800001FF | v2;
  return result;
}

uint64_t sub_19E0C6324(uint64_t result, unsigned char *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 == *(_DWORD *)(result + 12)) {
    sub_19E0C56FC(result, v2 + 1);
  }
  *(_DWORD *)(result + 8) = v2 + 1;
  *(unsigned char *)(*(void *)result + v2) = *a2;
  return result;
}

void *sub_19E0C6378(void *a1)
{
  sub_19E0C5664((uint64_t)a1);

  return sub_19E0C56B4(a1);
}

void sub_19E0C63B0(uint64_t a1, unsigned int a2)
{
  if (a2 < 2 * *(_DWORD *)(a1 + 12))
  {
    int v2 = 1;
    do
    {
      unsigned int v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

unsigned int *sub_19E0C64F4(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v8 = *(unsigned int *)(a2[2] + 4 * a3);
  unint64_t v9 = v8 >> 2;
  unint64_t v10 = v8 >> 7;
  uint64_t v11 = a2[6];
  int v12 = 1 << (v8 >> 2);
  if ((v12 & *(_DWORD *)(v11 + 4 * (v8 >> 7))) != 0
    && (int v13 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * (sub_19E0C68CC(v11, a2[8], v8 >> 2) - 1))) != 0
    && ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (BOOL v15 = (v13 ^ a4) == 0) : (BOOL v15 = 1), v15))
  {
    if (*(unsigned char *)(a2[4] + v9))
    {
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v17 = a4;
    }
    else
    {
      uint64_t v17 = a4;
      uint64_t v16 = *(void *)(a1 + 8);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return sub_19E0C629C((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      *(_DWORD *)(a1 + 40) = 0;
    }
    if (v8 >= 4)
    {
      unint64_t v18 = v8 >> 2;
      do
      {
        char v48 = *(unsigned char *)(a2[4] + v18);
        sub_19E0C6324(a1 + 32, &v48);
        int v19 = *(_DWORD *)(a2[2] + 4 * v18);
        BOOL v20 = __CFADD__(v18, 1);
        LODWORD(v18) = v18 + 1;
        int v21 = v20;
      }
      while ((v19 & 1) != 0 && !v21);
    }
    unsigned int v22 = *(_DWORD *)(a1 + 56);
    unsigned int v23 = *(_DWORD *)(a1 + 16);
    if (v22 >= v23)
    {
LABEL_31:
      int v28 = v23 | a4;
    }
    else
    {
      uint64_t v25 = *(void *)(a1 + 24);
      int v24 = *(unsigned __int8 **)(a1 + 32);
      int v26 = *v24;
      int v27 = *(_DWORD *)(a1 + 56);
      while (1)
      {
        int v28 = v27 ^ v26;
        unsigned int v29 = (v27 ^ v26) & 0xFFF;
        if (!*(unsigned char *)(v25 + 12 * v29 + 9)
          && (v28 == a4 || ((v28 ^ a4) & 0x1FE00000) == 0))
        {
          unint64_t v30 = *(unsigned int *)(a1 + 40);
          if (v30 < 2) {
            goto LABEL_32;
          }
          if (!*(unsigned char *)(v25 + 12 * (v29 ^ v24[1]) + 8)) {
            break;
          }
        }
LABEL_30:
        int v27 = *(_DWORD *)(v25 + 12 * (v27 & 0xFFF) + 4);
        if (v27 == v22) {
          goto LABEL_31;
        }
      }
      uint64_t v31 = 2;
      while (v30 != v31)
      {
        unint64_t v32 = v31;
        if (*(unsigned __int8 *)(v25 + 12 * (v29 ^ v24[v31++]) + 8))
        {
          if (v32 >= v30) {
            break;
          }
          goto LABEL_30;
        }
      }
    }
LABEL_32:
    sub_19E0C629C((unsigned int *)(*(void *)(a1 + 8) + 4 * a4), v28 ^ a4);
    unint64_t v47 = v10;
    int v46 = v12;
    if (*(_DWORD *)(a1 + 40))
    {
      unint64_t v34 = 0;
      unsigned int v35 = *(_DWORD *)(a2[2] + 4 * a3) >> 2;
      do
      {
        unsigned int v36 = v28 ^ *(unsigned __int8 *)(*(void *)(a1 + 32) + v34);
        if (*(_DWORD *)(a1 + 16) <= v36) {
          sub_19E0C5BC0(a1);
        }
        if (*(_DWORD *)(a1 + 56) == v36)
        {
          unsigned int v37 = v36 & 0xFFF;
          uint64_t v38 = *(void *)(a1 + 24);
          unsigned int v39 = *(_DWORD *)(v38 + 12 * (v36 & 0xFFF) + 4);
          *(_DWORD *)(a1 + 56) = v39;
          if (v39 == v36)
          {
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 16);
            unsigned int v39 = v36;
          }
        }
        else
        {
          uint64_t v38 = *(void *)(a1 + 24);
          unsigned int v37 = v36 & 0xFFF;
          unsigned int v39 = *(_DWORD *)(v38 + 12 * (v36 & 0xFFF) + 4);
        }
        unsigned int v40 = (int *)(v38 + 12 * v37);
        int v41 = *v40;
        *(_DWORD *)(v38 + 12 * (v41 & 0xFFF) + 4) = v39;
        *(_DWORD *)(v38 + 12 * (v40[1] & 0xFFF)) = v41;
        *((unsigned char *)v40 + 8) = 1;
        if (*(unsigned char *)(a2[4] + v35))
        {
          *(unsigned char *)(*(void *)(a1 + 8) + 4 * v36) = *(unsigned char *)(*(void *)(a1 + 32) + v34);
          unsigned int v42 = *(_DWORD *)(a2[2] + 4 * v35);
        }
        else
        {
          uint64_t v43 = *(void *)(a1 + 8);
          *(_DWORD *)(v43 + 4 * a4) |= 0x100u;
          unsigned int v42 = *(_DWORD *)(a2[2] + 4 * v35);
          *(_DWORD *)(v43 + 4 * v36) = (v42 >> 1) | 0x80000000;
        }
        unsigned int v35 = ((int)(v42 << 31) >> 31) & (v35 + 1);
        ++v34;
      }
      while (v34 < *(unsigned int *)(a1 + 40));
    }
    else
    {
      uint64_t v38 = *(void *)(a1 + 24);
    }
    *(unsigned char *)(v38 + 12 * (v28 & 0xFFF) + 9) = 1;
    uint64_t result = (unsigned int *)a2[6];
    if ((result[v47] & v46) != 0)
    {
      uint64_t result = (unsigned int *)sub_19E0C68CC((uint64_t)result, a2[8], v9);
      *(_DWORD *)(*(void *)(a1 + 48) + 4 * (result - 1)) = v28;
    }
    do
    {
      if (*(unsigned char *)(a2[4] + v9)) {
        uint64_t result = (unsigned int *)sub_19E0C64F4(a1, a2, v9, v28 ^ *(unsigned __int8 *)(a2[4] + v9));
      }
      if (v9 == -1) {
        break;
      }
      int v45 = *(_DWORD *)(a2[2] + 4 * v9);
      LODWORD(v9) = v9 + 1;
    }
    while ((v45 & 1) != 0);
  }
  return result;
}

uint64_t sub_19E0C68CC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (a3 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  int v4 = *(_DWORD *)(a2 + v3);
  LODWORD(v3) = *(_DWORD *)(a1 + v3) & (0xFFFFFFFF >> ~(_BYTE)a3);
  LODWORD(v3) = ((((unint64_t)(((v3 >> 1) & 0x55555555) + (v3 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v3 >> 1) & 0x55555555) + (v3 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v3 >> 1) & 0x55555555) + (v3 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v3 >> 1) & 0x55555555) + (v3 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v3 + BYTE1(v3) + ((v3 + (v3 >> 8)) >> 16)) & 0x3Fu) + v4;
}

uint64_t sub_19E0C6928(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 104);
  uint64_t v4 = *(unsigned int *)(*(void *)(result + 96) + 4 * v3 - 4);
  if (v4 != a2)
  {
    uint64_t v57 = (void *)(result + 48);
    uint64_t v58 = (unsigned int **)(result + 80);
    int v5 = (uint64_t *)(result + 16);
    unint64_t v6 = (uint64_t *)(result + 32);
    uint64_t v59 = a2;
    while (1)
    {
      *(_DWORD *)(v2 + 104) = v3 - 1;
      unsigned int v7 = *(_DWORD *)(v2 + 88);
      if (*(void *)(v2 + 128) >= (unint64_t)(v7 - (v7 >> 2)))
      {
        unsigned int v8 = 2 * v7;
        sub_19E0C5664((uint64_t)v58);
        int v61 = 0;
        uint64_t result = sub_19E0C7138((uint64_t)v58, v8, &v61);
        unint64_t v9 = *(unsigned int *)(v2 + 24);
        if (v9 >= 2)
        {
          uint64_t v10 = *v6;
          for (unint64_t i = 1; i < v9; ++i)
          {
            if (!*(unsigned char *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              unsigned int v12 = 0;
              if (i)
              {
                unsigned int v13 = i;
                do
                {
                  int v14 = *(_DWORD *)(*v5 + 4 * v13);
                  unsigned int v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  unsigned int v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  BOOL v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              unsigned int v18 = *(_DWORD *)(v2 + 88);
              uint64_t v19 = v12 % v18;
              uint64_t v20 = *(void *)(v2 + 80);
              while (*(_DWORD *)(v20 + 4 * v19))
              {
                if (v19 + 1 == v18) {
                  uint64_t v19 = 0;
                }
                else {
                  uint64_t v19 = (v19 + 1);
                }
              }
              *(_DWORD *)(v20 + 4 * v19) = i;
              unint64_t v9 = *(unsigned int *)(v2 + 24);
            }
          }
        }
      }
      if (!v4)
      {
        unsigned int v36 = **v58;
        if (v36)
        {
          unsigned int v34 = 0;
          uint64_t v44 = *(void *)(v2 + 16);
          while (1)
          {
            unsigned int v45 = v36;
            if (*(_DWORD *)(*(void *)v2 + 4))
            {
              unsigned int v45 = v36;
              while ((*(_DWORD *)(v44 + 4 * v45) & 1) != 0)
              {
                ++v45;
                if (!*(_DWORD *)(*(void *)v2 + 12 * *(unsigned int *)(*(void *)v2 + 4) + 4)) {
                  goto LABEL_53;
                }
              }
            }
            else
            {
LABEL_53:
              if ((*(_DWORD *)(v44 + 4 * v45) & 1) == 0)
              {
LABEL_57:
                *(_DWORD *)(*v57 + 4 * (v36 >> 5)) |= 1 << v36;
                if (!v4) {
                  goto LABEL_72;
                }
                goto LABEL_71;
              }
            }
            unsigned int v34 = (v34 + 1) % *(_DWORD *)(v2 + 88);
            unsigned int v36 = (*v58)[v34];
            if (!v36) {
              goto LABEL_64;
            }
          }
        }
        unsigned int v34 = 0;
        unsigned int v46 = 0;
        goto LABEL_70;
      }
      int v21 = 0;
      uint64_t v22 = *(void *)v2;
      uint64_t v23 = v4;
      do
      {
        ++v21;
        LODWORD(v23) = *(_DWORD *)(v22 + 12 * v23 + 4);
      }
      while (v23);
      unsigned int v24 = 0;
      uint64_t v25 = v4;
      do
      {
        int v26 = (int *)(v22 + 12 * v25);
        int v27 = *((unsigned __int8 *)v26 + 8);
        int v28 = *v26;
        if (v27) {
          int v29 = (2 * *(unsigned __int8 *)(v22 + 12 * v25 + 9)) | (4 * v28);
        }
        else {
          int v29 = 2 * v28;
        }
        uint64_t v30 = v22 + 12 * v25;
        unsigned int v31 = ((v29 | *(unsigned __int8 *)(v30 + 10)) ^ ~(v27 << 24)) + ((v29 | *(unsigned __int8 *)(v30 + 10)) << 15);
        unsigned int v32 = 2057 * ((5 * (v31 ^ (v31 >> 12))) ^ ((5 * (v31 ^ (v31 >> 12))) >> 4));
        v24 ^= HIWORD(v32) ^ v32;
        uint64_t v25 = *(unsigned int *)(v30 + 4);
      }
      while (v25);
      unsigned int v33 = *(_DWORD *)(v2 + 88);
      unsigned int v34 = v24 % v33;
      uint64_t v35 = *(void *)(v2 + 80);
      unsigned int v36 = *(_DWORD *)(v35 + 4 * v34);
      if (v36)
      {
        uint64_t v37 = *v5;
        do
        {
          unsigned int v38 = v36;
          if (*(_DWORD *)(v22 + 12 * v4 + 4))
          {
            unsigned int v38 = v36;
            while ((*(_DWORD *)(v37 + 4 * v38) & 1) != 0)
            {
              ++v38;
              if (!*(_DWORD *)(v22 + 12 * *(unsigned int *)(v22 + 12 * v4 + 4) + 4)) {
                goto LABEL_33;
              }
            }
          }
          else
          {
LABEL_33:
            if ((*(_DWORD *)(v37 + 4 * v38) & 1) == 0)
            {
              uint64_t v39 = v4;
              while (1)
              {
                unsigned int v40 = (int *)(v22 + 12 * v39);
                int v41 = *((unsigned __int8 *)v40 + 8);
                int v42 = *v40;
                int v43 = v41 ? (2 * *(unsigned __int8 *)(v22 + 12 * v39 + 9)) | (4 * v42) : 2 * v42;
                if ((v43 | *(unsigned __int8 *)(v22 + 12 * v39 + 10)) != *(_DWORD *)(v37 + 4 * v38)
                  || v41 != *(unsigned __int8 *)(*v6 + v38))
                {
                  break;
                }
                uint64_t v39 = *(unsigned int *)(v22 + 12 * v39 + 4);
                --v38;
                if (!v39) {
                  goto LABEL_57;
                }
              }
            }
          }
          if (v34 + 1 == v33) {
            unsigned int v34 = 0;
          }
          else {
            ++v34;
          }
          unsigned int v36 = *(_DWORD *)(v35 + 4 * v34);
        }
        while (v36);
      }
      if (v21) {
        break;
      }
LABEL_64:
      unsigned int v46 = 0;
      if (v4) {
        goto LABEL_65;
      }
LABEL_70:
      unsigned int v36 = v46 + 1;
      *(_DWORD *)(*(void *)(v2 + 80) + 4 * v34) = v46 + 1;
      ++*(void *)(v2 + 128);
      if (!v4) {
        goto LABEL_72;
      }
      do
      {
LABEL_71:
        uint64_t v55 = *(unsigned int *)(*(void *)v2 + 12 * v4 + 4);
        int v60 = v4;
        uint64_t result = sub_19E0C6F44(v2 + 112, &v60);
        uint64_t v4 = v55;
      }
      while (v55);
LABEL_72:
      uint64_t v3 = *(unsigned int *)(v2 + 104);
      uint64_t v56 = *(void *)(v2 + 96) + 4 * v3;
      *(_DWORD *)(*(void *)v2 + 12 * *(unsigned int *)(v56 - 4)) = v36;
      uint64_t v4 = *(unsigned int *)(v56 - 4);
      if (v4 == v59) {
        goto LABEL_73;
      }
    }
    do
    {
      sub_19E0C6F98((uint64_t)v57);
      uint64_t result = sub_19E0C6FE8(v2 + 16);
      int v47 = *(_DWORD *)(v2 + 40);
      if (v47 == *(_DWORD *)(v2 + 44)) {
        sub_19E0C56FC(v2 + 32, v47 + 1);
      }
      *(_DWORD *)(v2 + 40) = v47 + 1;
      --v21;
    }
    while (v21);
    unsigned int v46 = *(_DWORD *)(v2 + 76) - 1;
LABEL_65:
    uint64_t v48 = *(void *)v2;
    uint64_t v49 = v4;
    do
    {
      long long v50 = (int *)(v48 + 12 * v49);
      int v51 = *((unsigned __int8 *)v50 + 8);
      int v52 = *v50;
      if (v51) {
        int v53 = (2 * *(unsigned __int8 *)(v48 + 12 * v49 + 9)) | (4 * v52);
      }
      else {
        int v53 = 2 * v52;
      }
      uint64_t v54 = 3 * v49;
      *(_DWORD *)(*(void *)(v2 + 16) + 4 * v46) = v53 | *(unsigned __int8 *)(v48 + 4 * v54 + 10);
      *(unsigned char *)(*(void *)(v2 + 32) + v46--) = v51;
      uint64_t v48 = *(void *)v2;
      uint64_t v49 = *(unsigned int *)(*(void *)v2 + 4 * v54 + 4);
    }
    while (v49);
    goto LABEL_70;
  }
LABEL_73:
  *(_DWORD *)(v2 + 104) = v3 - 1;
  return result;
}

uint64_t sub_19E0C6DD0(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 8);
  if (v1 == *(_DWORD *)(result + 12))
  {
    unsigned int v2 = v1 + 1;
    if (v1 + 1 < 2 * v1)
    {
      int v3 = 1;
      do
      {
        unsigned int v4 = v3;
        v3 *= 2;
      }
      while (v4 < v2);
    }
    operator new[]();
  }
  *(_DWORD *)(result + 8) = v1 + 1;
  uint64_t v5 = *(void *)result + 12 * v1;
  *(_DWORD *)(v5 + 7) = 0;
  *(void *)uint64_t v5 = 0;
  return result;
}

uint64_t sub_19E0C6F44(uint64_t result, _DWORD *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 == *(_DWORD *)(result + 12)) {
    sub_19E0C63B0(result, v2 + 1);
  }
  *(_DWORD *)(result + 8) = v2 + 1;
  *(_DWORD *)(*(void *)result + 4 * v2) = *a2;
  return result;
}

uint64_t sub_19E0C6F98(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 28);
  if ((v2 & 0x1F) == 0)
  {
    int v3 = 0;
    uint64_t result = sub_19E0C6F44(result, &v3);
    int v2 = *(_DWORD *)(v1 + 28);
  }
  *(_DWORD *)(v1 + 28) = v2 + 1;
  return result;
}

uint64_t sub_19E0C6FE8(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 8);
  if (v1 == *(_DWORD *)(result + 12))
  {
    unsigned int v2 = v1 + 1;
    if (v1 + 1 < 2 * v1)
    {
      int v3 = 1;
      do
      {
        unsigned int v4 = v3;
        v3 *= 2;
      }
      while (v4 < v2);
    }
    operator new[]();
  }
  *(_DWORD *)(result + 8) = v1 + 1;
  *(_DWORD *)(*(void *)result + 4 * v1) = 0;
  return result;
}

uint64_t sub_19E0C7138(uint64_t result, unsigned int a2, _DWORD *a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 > a2)
  {
    *(_DWORD *)(result + 8) = a2;
    unsigned int v3 = a2;
  }
  if (*(_DWORD *)(result + 12) < a2) {
    sub_19E0C63B0(result, a2);
  }
  if (v3 < a2)
  {
    uint64_t v4 = *(void *)result;
    do
    {
      *(_DWORD *)(result + 8) = v3 + 1;
      *(_DWORD *)(v4 + 4 * v3) = *a3;
      unsigned int v3 = *(_DWORD *)(result + 8);
    }
    while (v3 < a2);
  }
  return result;
}

void sub_19E0C71C0(uint64_t a1, uint64_t **a2)
{
  __n128 __p = 0;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  uint64_t v32 = 0;
  unsigned int v33 = 0;
  unint64_t v34 = 0;
  uint64_t v30 = 0;
  unsigned int v31 = 0;
  sub_19E0C470C((void **)&v32, v3);
  sub_19E0C47B4(&__p, v3);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      unint64_t v6 = v4;
      if (*((char *)v4 + 23) < 0) {
        unint64_t v6 = (uint64_t *)*v4;
      }
      unsigned int v7 = v33;
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v9 = v32;
        uint64_t v10 = (uint64_t)&v33[-v32] >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          sub_19E041BEC();
        }
        uint64_t v12 = v34 - v32;
        if ((uint64_t)(v34 - v32) >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)sub_19E060B48(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        unsigned int v15 = (void *)(v13 + 8 * v10);
        *unsigned int v15 = v6;
        unsigned int v8 = (char *)(v15 + 1);
        if (v7 != (char *)v9)
        {
          do
          {
            uint64_t v16 = *((void *)v7 - 1);
            v7 -= 8;
            *--unsigned int v15 = v16;
          }
          while (v7 != (char *)v9);
          unsigned int v7 = (char *)v32;
        }
        uint64_t v32 = (uint64_t)v15;
        unint64_t v34 = v13 + 8 * v14;
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(void *)unsigned int v33 = v6;
        unsigned int v8 = v7 + 8;
      }
      unsigned int v33 = v8;
      if (*((char *)v4 + 23) < 0) {
        uint64_t v17 = v4[1];
      }
      else {
        uint64_t v17 = *((unsigned __int8 *)v4 + 23);
      }
      unsigned int v18 = v30;
      if (v30 >= v31)
      {
        uint64_t v20 = (char *)__p;
        uint64_t v21 = (v30 - (unsigned char *)__p) >> 3;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          sub_19E041BEC();
        }
        uint64_t v23 = v31 - (unsigned char *)__p;
        if ((v31 - (unsigned char *)__p) >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          uint64_t v25 = (char *)sub_19E049FB0((uint64_t)&v31, v24);
          uint64_t v20 = (char *)__p;
          unsigned int v18 = v30;
        }
        else
        {
          uint64_t v25 = 0;
        }
        int v26 = &v25[8 * v21];
        *(void *)int v26 = v17;
        uint64_t v19 = v26 + 8;
        while (v18 != v20)
        {
          uint64_t v27 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v26 - 1) = v27;
          v26 -= 8;
        }
        __n128 __p = v26;
        uint64_t v30 = v19;
        unsigned int v31 = &v25[8 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(void *)uint64_t v30 = v17;
        uint64_t v19 = v18 + 8;
      }
      uint64_t v30 = v19;
      v4 += 3;
    }
    while (v4 != v5);
  }
  sub_19E0C4904(a1 + 8, v3, v32, (uint64_t)__p, 0);
}

void sub_19E0C741C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0C7454@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_19E057A94(a2, *(void **)(a1 + 24), 4 * *(void *)(a1 + 16));
}

void *sub_19E0C7464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A0A98;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E06C7E4(v5);
}

void sub_19E0C7508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E06C7E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C751C()
{
  return &unk_1EF0A0AF8;
}

uint64_t sub_19E0C7528(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A0AF8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C7568(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0C758C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A0A98;
  a2[1] = v2;
  return result;
}

void *sub_19E0C75B0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A0A98;
  result[1] = v3;
  return result;
}

void sub_19E0C75F8()
{
}

void *sub_19E0C7610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A0A18;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E06C7E4(v5);
}

void sub_19E0C76B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E06C7E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C76C8()
{
  return &unk_1EF0A0A78;
}

uint64_t sub_19E0C76D4(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A0A78)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C7714(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0C7738(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A0A18;
  a2[1] = v2;
  return result;
}

void *sub_19E0C775C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A0A18;
  result[1] = v3;
  return result;
}

void sub_19E0C77A4()
{
}

uint64_t sub_19E0C77BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

void sub_19E0C7818(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  uint64_t v8 = a1;
  if (a5)
  {
    __n128 __p = 0;
    int v26 = 0;
    unint64_t v27 = 0;
    sub_19E0C485C(&__p, a2);
    uint64_t v10 = (char *)__p;
    if (a2)
    {
      uint64_t v22 = v8;
      uint64_t v23 = v6;
      uint64_t v24 = v5;
      uint64_t v11 = 0;
      unint64_t v13 = v26;
      unint64_t v12 = v27;
      do
      {
        uint64_t v14 = *(void *)(a5 + 8 * v11);
        if ((unint64_t)v13 >= v12)
        {
          uint64_t v15 = (v13 - v10) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
          {
            int v26 = v13;
            sub_19E041BEC();
          }
          if ((uint64_t)(v12 - (void)v10) >> 1 > v16) {
            unint64_t v16 = (uint64_t)(v12 - (void)v10) >> 1;
          }
          if (v12 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            unint64_t v17 = (unint64_t)sub_19E068D84(v17);
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (char *)(v17 + 4 * v15);
          *(_DWORD *)uint64_t v19 = v14;
          uint64_t v20 = v19 + 4;
          while (v13 != v10)
          {
            int v21 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v19 - 1) = v21;
            v19 -= 4;
          }
          unint64_t v12 = v17 + 4 * v18;
          if (v10) {
            operator delete(v10);
          }
          uint64_t v10 = v19;
          unint64_t v13 = v20;
        }
        else
        {
          *(_DWORD *)unint64_t v13 = v14;
          v13 += 4;
        }
        ++v11;
      }
      while (v11 != a2);
      int v26 = v13;
      unint64_t v27 = v12;
      __n128 __p = v10;
      uint64_t v6 = v23;
      uint64_t v5 = v24;
      uint64_t v8 = v22;
    }
    sub_19E0C4904(v8 + 8, a2, v6, v5, (uint64_t)v10);
  }
  sub_19E0C4904(a1 + 8, a2, a3, a4, 0);
}

void sub_19E0C7998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0C79C8(void *a1)
{
  sub_19E0C2E10(a1);

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0C7A04(uint64_t result, void *a2, uint64_t a3)
{
  if (*a2 != -1)
  {
    uint64_t v3 = result;
    for (unsigned __int8 i = *(unsigned char *)(*(void *)(result + 40) + 2 * *a2); i; unsigned __int8 i = *(unsigned char *)(*(void *)(v3 + 40) + 2 * v10 + 1))
    {
      uint64_t v7 = *(void *)(v3 + 24);
      unsigned int v8 = *(_DWORD *)(v7 + 4 * *a2);
      uint64_t v9 = (v8 >> 10 << ((v8 >> 6) & 8)) ^ *a2 ^ i;
      if ((*(_DWORD *)(v7 + 4 * v9) & 0x800000FF) != i) {
        uint64_t v9 = -1;
      }
      uint64_t v10 = v9;
      uint64_t result = sub_19E0C2F44(*(void *)(a3 + 24), i);
    }
  }
  return result;
}

uint64_t sub_19E0C7AC8(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  BOOL v3 = a3 <= 3 || (a3 & 0xFFFFFFFFFFFFFFFCLL) == 4;
  uint64_t v4 = !v3;
  if (!v3)
  {
    uint64_t v7 = *a2;
    unint64_t v6 = a2[1];
    unsigned int v8 = a2 + 2;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9)
    {
      MEMORY[0x19F3BA6E0](v9, 0x1000C8052888210);
      *(void *)(a1 + 32) = 0;
    }
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    uint64_t v10 = (char *)v8 + v7;
    sub_19E0C7C38((char **)(a1 + 40), v6);
    unint64_t v11 = *(void *)(a1 + 56);
    unint64_t v12 = *(char **)(a1 + 40);
    if (v6 <= (uint64_t)(v11 - (void)v12) >> 1)
    {
      uint64_t v20 = *(char **)(a1 + 48);
      unint64_t v16 = (char **)(a1 + 48);
      uint64_t v19 = v20;
      size_t v21 = v20 - v12;
      unint64_t v22 = (v20 - v12) >> 1;
      if (v22 < v6)
      {
        if (v19 != v12)
        {
          memmove(v12, v10, v21);
          unint64_t v12 = *v16;
        }
        size_t v18 = 2 * v6 - 2 * v22;
        if (v22 == v6) {
          goto LABEL_30;
        }
        uint64_t v15 = v12;
        uint64_t v23 = &v10[2 * v22];
        goto LABEL_29;
      }
      size_t v18 = 2 * v6;
      if (!v6)
      {
LABEL_30:
        *unint64_t v16 = &v12[v18];
        return v4;
      }
      uint64_t v15 = v12;
    }
    else
    {
      if (v12)
      {
        *(void *)(a1 + 48) = v12;
        operator delete(v12);
        unint64_t v11 = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
      }
      if (v11 <= v6) {
        unint64_t v13 = v6;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v14 = v13;
      }
      if (v14 < 0) {
        sub_19E041BEC();
      }
      uint64_t v15 = (char *)sub_19E063B88(v14);
      unint64_t v12 = v15;
      *(void *)(a1 + 48) = v15;
      unint64_t v16 = (char **)(a1 + 48);
      *(v16 - 1) = v15;
      v16[1] = &v15[2 * v17];
      size_t v18 = 2 * v6;
    }
    uint64_t v23 = v10;
LABEL_29:
    memmove(v15, v23, v18);
    goto LABEL_30;
  }
  return v4;
}

void sub_19E0C7C38(char **a1, unint64_t a2)
{
  BOOL v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v19 = &v3[2 * a2];
    goto LABEL_20;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    uint64_t v19 = &v4[2 * v6];
LABEL_20:
    a1[1] = v19;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    sub_19E041BEC();
  }
  unint64_t v8 = v7 - v3;
  if (v8 <= a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = v8;
  }
  if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v10 = v9;
  }
  unint64_t v11 = (char *)sub_19E063B88(v10);
  unint64_t v12 = &v11[2 * v5];
  uint64_t v14 = &v11[2 * v13];
  bzero(v12, 2 * v6);
  uint64_t v15 = &v12[2 * v6];
  uint64_t v17 = *a1;
  unint64_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      __int16 v18 = *((_WORD *)v16 - 1);
      v16 -= 2;
      *((_WORD *)v12 - 1) = v18;
      v12 -= 2;
    }
    while (v16 != v17);
    unint64_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void sub_19E0C7D3C(uint64_t a1, uint64_t *a2, void *a3)
{
}

void sub_19E0C7D6C(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 40);
  sub_19E0C7C38((char **)(a1 + 40), *(void *)(a1 + 16));
  uint64_t v16 = 0;
  sub_19E0C7EA0(a1, &v16);
  uint64_t v4 = *(char **)(a1 + 40);
  BOOL v3 = *(char **)(a1 + 48);
  unint64_t v5 = v3;
  while (v5 != v4)
  {
    unint64_t v6 = v5;
    int v7 = *(v5 - 2);
    v5 -= 2;
    if (v7 | *(v6 - 1)) {
      goto LABEL_6;
    }
  }
  unint64_t v6 = *(char **)(a1 + 40);
LABEL_6:
  if (v6 != v3)
  {
    BOOL v3 = v6;
    *(void *)(a1 + 48) = v6;
  }
  unint64_t v8 = (v3 - v4) >> 1;
  if (v8 < (uint64_t)(*(void *)(a1 + 56) - (void)v4) >> 1)
  {
    if (v3 == v4)
    {
      uint64_t v13 = 0;
      uint64_t v11 = 2 * v8;
    }
    else
    {
      unint64_t v9 = (char *)sub_19E063B88((v3 - v4) >> 1);
      uint64_t v10 = *(char **)(a1 + 40);
      BOOL v3 = *(char **)(a1 + 48);
      uint64_t v11 = (uint64_t)&v9[2 * v8];
      uint64_t v13 = &v9[2 * v12];
      if (v3 != v10)
      {
        uint64_t v14 = v11;
        do
        {
          __int16 v15 = *((_WORD *)v3 - 1);
          v3 -= 2;
          *(_WORD *)(v14 - 2) = v15;
          v14 -= 2;
        }
        while (v3 != v10);
        BOOL v3 = (char *)*v2;
        goto LABEL_16;
      }
    }
    uint64_t v14 = v11;
LABEL_16:
    *(void *)(a1 + 40) = v14;
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v13;
    if (v3) {
      operator delete(v3);
    }
  }
}

void sub_19E0C7E90(void *a1)
{
}

void *sub_19E0C7EA0(uint64_t a1, void *a2)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  char v7 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = &unk_1EF0A1408;
  v4[1] = &v7;
  v4[2] = a1;
  void v4[3] = a2;
  v4[4] = &v6;
  v8[3] = v4;
  sub_19E0C2E94(a1, a2, (uint64_t)v8);
  return sub_19E0C3820(v8);
}

void sub_19E0C7F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E0C3820((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C7F64()
{
  return &unk_1EF0A1468;
}

uint64_t sub_19E0C7F70(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1468)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_19E0C7FB0(uint64_t a1, char *a2, void *a3)
{
  char v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char **)(a1 + 8);
  uint64_t v8 = *(void *)(v6 + 40);
  if (*v7)
  {
    *(unsigned char *)(v8 + 2 * **(void **)(a1 + 32) + 1) = v5;
  }
  else
  {
    *(unsigned char *)(v8 + 2 * **(void **)(a1 + 24)) = v5;
    *char v7 = 1;
  }
  uint64_t result = sub_19E0C7EA0(v6, a3);
  **(void **)(a1 + 32) = *a3;
  return result;
}

__n128 sub_19E0C8034(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A1408;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0C8064(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF0A1408;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_19E0C80B8()
{
}

void sub_19E0C80D0(uint64_t a1, uint64_t **a2)
{
}

std::string *sub_19E0C8100@<X0>(void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v5 = a1[2];
  uint64_t v4 = (const std::string::value_type *)a1[3];
  uint64_t v6 = (const std::string::value_type *)a1[5];
  uint64_t v7 = a1[6];
  memset(&v18, 0, sizeof(v18));
  std::string::resize(&v18, 4uLL, 0);
  std::string::size_type v8 = 4 * v5;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v9 = &v18;
  }
  else {
    unint64_t v9 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  LODWORD(v9->__r_.__value_.__l.__data_) = v8;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v18;
  }
  else {
    uint64_t v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v10, size);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = a1[5];
  uint64_t v12 = a1[6];
  memset(&v18, 0, sizeof(v18));
  std::string::resize(&v18, 4uLL, 0);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &v18;
  }
  else {
    uint64_t v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  LODWORD(v14->__r_.__value_.__l.__data_) = (unint64_t)(v12 - v13) >> 1;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v15 = &v18;
  }
  else {
    __int16 v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = v18.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v4, v8);
  return std::string::append(a2, v6, v7 - (void)v6);
}

void sub_19E0C8244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0C8284(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_19E0C82B4(void *a1)
{
  sub_19E0C2DB0(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0C82F0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF09B980;
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x19F3BA6E0](v2, 0x1000C8052888210);
    a1[3] = 0;
  }

  JUMPOUT(0x19F3BA710);
}

void *sub_19E0C8374(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF09B980;
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x19F3BA6E0](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sub_19E0C83D8(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_19E0C7A04(a1 + 8, a2, a3);
}

void *sub_19E0C83E0(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF0A1488;
  v8[1] = a3;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0C2F94(a1 + 8, a2, (uint64_t)v9, a4);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0C8498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C84BC()
{
  return &unk_1EF0A14E8;
}

uint64_t sub_19E0C84C8(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A14E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C8508(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF) {
    return sub_19E0B5BE8(*(void *)(*(void *)(result + 8) + 24), v4, *a3, a3[1], a4);
  }
  return result;
}

uint64_t sub_19E0C8540(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A1488;
  a2[1] = v2;
  return result;
}

void *sub_19E0C8564(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A1488;
  result[1] = v3;
  return result;
}

void sub_19E0C85AC()
{
}

uint64_t sub_19E0C85C4(uint64_t a1, unsigned int *a2, int *a3)
{
  int v6 = 0;
  int v4 = sub_19E0C3B60((void *)(a1 + 8), a2, &v6);
  uint64_t result = 0;
  if (v4)
  {
    if ((v6 & 0x7FFFFF) == 0x7FFFFF)
    {
      return 0;
    }
    else
    {
      *a3 = v6 & 0x7FFFFF;
      return 1;
    }
  }
  return result;
}

uint64_t sub_19E0C862C(uint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t a4)
{
  return sub_19E0C3C04(*(void *)(a1 + 32), *a2, a3, a4);
}

BOOL sub_19E0C8638(uint64_t a1, void *a2)
{
  return *a2 != -1;
}

uint64_t sub_19E0C8648()
{
  return 0;
}

void *sub_19E0C8650(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  v10[0] = &unk_1EF0A1488;
  v10[1] = a4;
  v10[3] = v10;
  sub_19E0B5A50((uint64_t)v11, v10);
  sub_19E0C3CA8(a1 + 8, a2, a3, (uint64_t)v11, a5);
  sub_19E06C7E4(v11);
  return sub_19E0B5B00(v10);
}

void sub_19E0C8710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C8734(uint64_t a1, unsigned char *a2, unint64_t a3, uint64_t a4)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF0A1488;
  v8[1] = a4;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0C40B4(a1 + 8, a2, a3, (uint64_t)v9);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0C87EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0C8810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, &v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, &v10, a4);
}

uint64_t sub_19E0C88DC(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  return sub_19E0C7AC8(a1 + 8, a2, a3);
}

uint64_t sub_19E0C88E4(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2) {
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  }
  uint64_t v5 = a1;
  v69[0] = 0;
  v69[1] = 0;
  uint64_t v68 = v69;
  if (v4 == v3)
  {
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v65 = (std::string *)&v66;
    goto LABEL_61;
  }
  unint64_t v8 = 0;
  uint64_t v9 = a1 + 72;
  while (1)
  {
    std::string::size_type v10 = 0;
    uint64_t v11 = v3 + 24 * v8;
    while (1)
    {
      std::string::size_type v12 = *(char *)(v11 + 23) < 0 ? *(void *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
      if (v10 > v12) {
        break;
      }
      double v13 = *(double *)sub_19E0B6A0C(v9, (void *)v11);
      std::string::basic_string(&v70, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v65);
      uint64_t v65 = &v70;
      uint64_t v14 = (double *)sub_19E0B3CA4((uint64_t **)&v68, &v70, (_OWORD **)&v65);
      v14[7] = v13 + v14[7];
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      ++v10;
    }
    if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF) {
      break;
    }
    ++v8;
    uint64_t v3 = *a2;
    uint64_t v15 = a2[1];
    if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3))
    {
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      uint64_t v65 = (std::string *)&v66;
      if (v15 != v3)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          uint64_t v18 = v3 + v16;
          int v19 = *(_DWORD *)(*a3 + 4 * v17);
          double v20 = *(double *)sub_19E0B6A0C((uint64_t)&v68, (void *)(v3 + v16));
          uint64_t v21 = *(unsigned __int8 *)(v18 + 23);
          if ((v21 & 0x80u) != 0) {
            uint64_t v21 = *(void *)(v18 + 8);
          }
          std::string::basic_string(&v70, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v64);
          double v22 = *(double *)sub_19E0B6A0C((uint64_t)&v68, &v70);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
          uint64_t v23 = sub_19E0BB234((uint64_t **)&v65, (void *)v18, v18);
          int v24 = (int)(sqrt(v20 / v22) * 255.0);
          if (v24 >= 255) {
            int v25 = 255;
          }
          else {
            int v25 = v24;
          }
          if (v24) {
            BOOL v26 = 1;
          }
          else {
            BOOL v26 = v20 / v22 <= 0.0;
          }
          int v27 = v25 << 23;
          if (!v26) {
            int v27 = 0x800000;
          }
          *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
          ++v17;
          uint64_t v3 = *a2;
          uint64_t v28 = a2[1];
          v16 += 24;
        }
        while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
        if (v28 != v3)
        {
          unint64_t v29 = 0;
          do
          {
            std::string::size_type v30 = 0;
            unsigned int v31 = (const std::string *)(v3 + 24 * v29);
            while (1)
            {
              std::string::size_type v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                  ? v31->__r_.__value_.__l.__size_
                  : HIBYTE(v31->__r_.__value_.__r.__words[2]);
              if (v30 >= v32 - 1) {
                break;
              }
              std::string::basic_string(&v64, v31, 0, v30, (std::allocator<char> *)&v70);
              unsigned int v33 = v31;
              if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0) {
                unsigned int v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
              }
              sub_19E0B6B6C((uint64_t)&__str, (const void **)&v64.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
              if (&v66 == sub_19E05E980((uint64_t)&v65, &__str))
              {
                double v34 = *(double *)sub_19E0B6A0C((uint64_t)&v68, &v64);
                if (v34 > *(double *)sub_19E0B6A0C((uint64_t)&v68, &__str))
                {
                  double v35 = *(double *)sub_19E0B6A0C((uint64_t)&v68, &__str);
                  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type size = __str.__r_.__value_.__l.__size_;
                  }
                  std::string::basic_string(&v70, &__str, 0, size - 1, (std::allocator<char> *)v71);
                  double v37 = *(double *)sub_19E0B6A0C((uint64_t)&v68, &v70);
                  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v70.__r_.__value_.__l.__data_);
                  }
                  unsigned int v38 = sub_19E0BB234((uint64_t **)&v65, &__str, (uint64_t)&__str);
                  int v39 = (int)(sqrt(v35 / v37) * 255.0);
                  if (v39 >= 255) {
                    int v40 = 255;
                  }
                  else {
                    int v40 = v39;
                  }
                  if (v39) {
                    BOOL v41 = 1;
                  }
                  else {
                    BOOL v41 = v35 / v37 <= 0.0;
                  }
                  int v42 = (v40 << 23) | 0x7FFFFF;
                  if (!v41) {
                    int v42 = 0xFFFFFF;
                  }
                  *((_DWORD *)v38 + 14) = v42;
                }
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v64.__r_.__value_.__l.__data_);
              }
              ++v30;
            }
            ++v29;
            uint64_t v3 = *a2;
          }
          while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
        }
      }
      uint64_t v5 = a1;
LABEL_61:
      memset(&v70, 0, sizeof(v70));
      memset(&v64, 0, sizeof(v64));
      int v43 = (uint64_t *)v65;
      if (v65 != (std::string *)&v66)
      {
        uint64_t v44 = 0;
        unsigned int v45 = 0;
        std::string::size_type v46 = 0;
        do
        {
          int v47 = (long long *)(v43 + 4);
          uint64_t v48 = (_OWORD *)v70.__r_.__value_.__l.__size_;
          if (v70.__r_.__value_.__l.__size_ >= v70.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v50 = sub_19E0B6BF0((uint64_t *)&v70, v47);
          }
          else
          {
            if (*((char *)v43 + 55) < 0)
            {
              sub_19E03FA9C((unsigned char *)v70.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
            }
            else
            {
              long long v49 = *v47;
              *(void *)(v70.__r_.__value_.__l.__size_ + 16) = v43[6];
              *uint64_t v48 = v49;
            }
            std::string::size_type v50 = (std::string::size_type)v48 + 24;
          }
          v70.__r_.__value_.__l.__size_ = v50;
          if ((unint64_t)v44 >= v46)
          {
            uint64_t v51 = (v44 - v45) >> 2;
            unint64_t v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62) {
              sub_19E041BEC();
            }
            if ((uint64_t)(v46 - (void)v45) >> 1 > v52) {
              unint64_t v52 = (uint64_t)(v46 - (void)v45) >> 1;
            }
            if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v52;
            }
            if (v53) {
              unint64_t v53 = (unint64_t)sub_19E068D84(v53);
            }
            else {
              uint64_t v54 = 0;
            }
            uint64_t v55 = (char *)(v53 + 4 * v51);
            *(_DWORD *)uint64_t v55 = *((_DWORD *)v43 + 14);
            std::string::size_type v56 = (std::string::size_type)(v55 + 4);
            while (v44 != v45)
            {
              int v57 = *((_DWORD *)v44 - 1);
              v44 -= 4;
              *((_DWORD *)v55 - 1) = v57;
              v55 -= 4;
            }
            std::string::size_type v46 = v53 + 4 * v54;
            v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
            v64.__r_.__value_.__l.__size_ = v56;
            v64.__r_.__value_.__r.__words[2] = v46;
            if (v45) {
              operator delete(v45);
            }
            unsigned int v45 = v55;
            uint64_t v44 = (char *)v56;
          }
          else
          {
            *(_DWORD *)uint64_t v44 = *((_DWORD *)v43 + 14);
            v44 += 4;
          }
          v64.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
          uint64_t v58 = (uint64_t *)v43[1];
          if (v58)
          {
            do
            {
              uint64_t v59 = v58;
              uint64_t v58 = (uint64_t *)*v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              uint64_t v59 = (uint64_t *)v43[2];
              BOOL v60 = *v59 == (void)v43;
              int v43 = v59;
            }
            while (!v60);
          }
          int v43 = v59;
        }
        while (v59 != &v66);
      }
      sub_19E0C4364(v5 + 8, (uint64_t *)&v70, &v64);
    }
  }
  sub_19E0672C4(v69[0]);
  return 0;
}

void sub_19E0C8EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  __n128 __p = &a28;
  sub_19E041AD0(&__p);
  sub_19E0672C4(a23);
  sub_19E0672C4(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0C8FB8(uint64_t a1, void *a2)
{
  __n128 __p = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v8 = (v5 - v3) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v4 - (void)v3) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v4 - (void)v3) >> 1;
        }
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_19E068D84(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        std::string::size_type v12 = (_DWORD *)(v10 + 4 * v8);
        *std::string::size_type v12 = v6;
        uint64_t v7 = v12 + 1;
        while (v5 != v3)
        {
          int v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--std::string::size_type v12 = v13;
        }
        unint64_t v4 = v10 + 4 * v11;
        __n128 __p = v12;
        unint64_t v19 = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)uint64_t v5 = v6;
        uint64_t v7 = v5 + 4;
      }
      uint64_t v18 = v7;
      ++v6;
      uint64_t v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19E0C9134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_19E0C9158@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return sub_19E0C8100((void *)(a1 + 8), a2);
}

void *sub_19E0C9160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A0CA8;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0C9204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C9218()
{
  return &unk_1EF0A0D08;
}

uint64_t sub_19E0C9224(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A0D08)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C9264(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0C9288(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A0CA8;
  a2[1] = v2;
  return result;
}

void *sub_19E0C92AC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A0CA8;
  result[1] = v3;
  return result;
}

void sub_19E0C92F4()
{
}

void *sub_19E0C930C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A0C28;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0C93B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C93C4()
{
  return &unk_1EF0A0C88;
}

uint64_t sub_19E0C93D0(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A0C88)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C9410(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0C9434(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A0C28;
  a2[1] = v2;
  return result;
}

void *sub_19E0C9458(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A0C28;
  result[1] = v3;
  return result;
}

void sub_19E0C94A0()
{
}

uint64_t sub_19E0C94B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0C9514(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  __n128 __p = 0;
  BOOL v41 = 0;
  unint64_t v42 = 0;
  if (a2)
  {
    uint64_t v8 = a2;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      int v13 = *(void **)(a3 + 8 * i);
      size_t v14 = *(void *)(a4 + 8 * i);
      size_t v38 = v14;
      int v39 = v13;
      uint64_t v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        uint64_t v16 = (void *)sub_19E0B5820(&v43, &v39, &v38);
      }
      else
      {
        sub_19E057A94(v44, v13, v14);
        uint64_t v16 = v15 + 3;
      }
      uint64_t v44 = v16;
      if (a5)
      {
        uint64_t v17 = *(void *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v19 = v10;
          uint64_t v20 = a5;
          uint64_t v21 = v8;
          uint64_t v22 = a3;
          uint64_t v23 = a4;
          uint64_t v24 = (v11 - v9) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            sub_19E041BEC();
          }
          unint64_t v26 = v19 - (void)v9;
          unint64_t v27 = (uint64_t)(v19 - (void)v9) >> 1;
          if (v27 > v25) {
            unint64_t v25 = v27;
          }
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v25;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_19E068D84(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          std::string::size_type v30 = (_DWORD *)(v28 + 4 * v24);
          *std::string::size_type v30 = v17;
          uint64_t v18 = v30 + 1;
          while (v11 != v9)
          {
            int v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--std::string::size_type v30 = v31;
          }
          __n128 __p = v30;
          BOOL v41 = v18;
          unint64_t v32 = v28 + 4 * v29;
          unint64_t v42 = v32;
          if (v9) {
            operator delete(v9);
          }
          unint64_t v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          uint64_t v8 = v21;
          a5 = v20;
          unint64_t v10 = v32;
        }
        else
        {
          *(_DWORD *)uint64_t v11 = v17;
          uint64_t v18 = v11 + 4;
        }
        BOOL v41 = v18;
        uint64_t v11 = (char *)v18;
      }
    }
  }
  uint64_t v33 = *a1;
  if (a5) {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 64))();
  }
  else {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 56))();
  }
  uint64_t v35 = v34;
  if (__p)
  {
    BOOL v41 = __p;
    operator delete(__p);
  }
  __n128 __p = &v43;
  sub_19E041AD0((void ***)&__p);
  return v35;
}

void sub_19E0C9738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __n128 __p = &a16;
  sub_19E041AD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E0C977C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A1288;
  sub_19E0672C4(*(char **)(a1 + 80));
  sub_19E0C2DB0((void *)(a1 + 8));

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0C97EC(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A1288;
  sub_19E0672C4(*(char **)(a1 + 80));
  sub_19E0C2DB0((void *)(a1 + 8));
  return a1;
}

uint64_t sub_19E0C983C(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_19E0C2E94(a1 + 8, a2, a3);
}

void *sub_19E0C9844(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF0A0D28;
  v8[1] = a3;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0C2F94(a1 + 8, a2, (uint64_t)v9, a4);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0C98FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C9920()
{
  return &unk_1EF0A0D88;
}

uint64_t sub_19E0C992C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A0D88)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0C996C(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF) {
    return sub_19E0B5BE8(*(void *)(*(void *)(result + 8) + 24), v4, *a3, a3[1], a4);
  }
  return result;
}

uint64_t sub_19E0C99A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A0D28;
  a2[1] = v2;
  return result;
}

void *sub_19E0C99C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A0D28;
  result[1] = v3;
  return result;
}

void sub_19E0C9A10()
{
}

uint64_t sub_19E0C9A28(uint64_t a1, unsigned int *a2, int *a3)
{
  int v6 = 0;
  int v4 = sub_19E0C3B60((void *)(a1 + 8), a2, &v6);
  uint64_t result = 0;
  if (v4)
  {
    if ((v6 & 0x7FFFFF) == 0x7FFFFF)
    {
      return 0;
    }
    else
    {
      *a3 = v6 & 0x7FFFFF;
      return 1;
    }
  }
  return result;
}

uint64_t sub_19E0C9A90(uint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t a4)
{
  return sub_19E0C3C04(*(void *)(a1 + 32), *a2, a3, a4);
}

BOOL sub_19E0C9A9C(uint64_t a1, void *a2)
{
  return *a2 != -1;
}

uint64_t sub_19E0C9AAC()
{
  return 0;
}

void *sub_19E0C9AB4(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  v10[0] = &unk_1EF0A0D28;
  v10[1] = a4;
  v10[3] = v10;
  sub_19E0B5A50((uint64_t)v11, v10);
  sub_19E0C3CA8(a1 + 8, a2, a3, (uint64_t)v11, a5);
  sub_19E06C7E4(v11);
  return sub_19E0B5B00(v10);
}

void sub_19E0C9B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0C9B98(uint64_t a1, unsigned char *a2, unint64_t a3, uint64_t a4)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF0A0D28;
  v8[1] = a4;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0C40B4(a1 + 8, a2, a3, (uint64_t)v9);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0C9C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0C9C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, &v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, &v10, a4);
}

uint64_t sub_19E0C9D40(void *a1, uint64_t a2, uint64_t a3)
{
  a1[3] = 0;
  a1[4] = 0;
  uint64_t v6 = a1[5];
  if (v6)
  {
    MEMORY[0x19F3BA6E0](v6, 0x1000C8052888210);
    a1[5] = 0;
  }
  a1[3] = a3;
  a1[4] = a2;
  return 1;
}

uint64_t sub_19E0C9D9C(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2) {
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  }
  uint64_t v5 = a1;
  v69[0] = 0;
  v69[1] = 0;
  uint64_t v68 = v69;
  if (v4 == v3)
  {
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v65 = (std::string *)&v66;
    goto LABEL_61;
  }
  unint64_t v8 = 0;
  uint64_t v9 = a1 + 48;
  while (1)
  {
    std::string::size_type v10 = 0;
    uint64_t v11 = v3 + 24 * v8;
    while (1)
    {
      std::string::size_type v12 = *(char *)(v11 + 23) < 0 ? *(void *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
      if (v10 > v12) {
        break;
      }
      double v13 = *(double *)sub_19E0B6A0C(v9, (void *)v11);
      std::string::basic_string(&v70, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v65);
      uint64_t v65 = &v70;
      size_t v14 = (double *)sub_19E0B3CA4((uint64_t **)&v68, &v70, (_OWORD **)&v65);
      v14[7] = v13 + v14[7];
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      ++v10;
    }
    if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF) {
      break;
    }
    ++v8;
    uint64_t v3 = *a2;
    uint64_t v15 = a2[1];
    if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3))
    {
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      uint64_t v65 = (std::string *)&v66;
      if (v15 != v3)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          uint64_t v18 = v3 + v16;
          int v19 = *(_DWORD *)(*a3 + 4 * v17);
          double v20 = *(double *)sub_19E0B6A0C((uint64_t)&v68, (void *)(v3 + v16));
          uint64_t v21 = *(unsigned __int8 *)(v18 + 23);
          if ((v21 & 0x80u) != 0) {
            uint64_t v21 = *(void *)(v18 + 8);
          }
          std::string::basic_string(&v70, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v64);
          double v22 = *(double *)sub_19E0B6A0C((uint64_t)&v68, &v70);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
          uint64_t v23 = sub_19E0BB234((uint64_t **)&v65, (void *)v18, v18);
          int v24 = (int)(sqrt(v20 / v22) * 255.0);
          if (v24 >= 255) {
            int v25 = 255;
          }
          else {
            int v25 = v24;
          }
          if (v24) {
            BOOL v26 = 1;
          }
          else {
            BOOL v26 = v20 / v22 <= 0.0;
          }
          int v27 = v25 << 23;
          if (!v26) {
            int v27 = 0x800000;
          }
          *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
          ++v17;
          uint64_t v3 = *a2;
          uint64_t v28 = a2[1];
          v16 += 24;
        }
        while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
        if (v28 != v3)
        {
          unint64_t v29 = 0;
          do
          {
            std::string::size_type v30 = 0;
            int v31 = (const std::string *)(v3 + 24 * v29);
            while (1)
            {
              std::string::size_type v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                  ? v31->__r_.__value_.__l.__size_
                  : HIBYTE(v31->__r_.__value_.__r.__words[2]);
              if (v30 >= v32 - 1) {
                break;
              }
              std::string::basic_string(&v64, v31, 0, v30, (std::allocator<char> *)&v70);
              uint64_t v33 = v31;
              if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0) {
                uint64_t v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
              }
              sub_19E0B6B6C((uint64_t)&__str, (const void **)&v64.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
              if (&v66 == sub_19E05E980((uint64_t)&v65, &__str))
              {
                double v34 = *(double *)sub_19E0B6A0C((uint64_t)&v68, &v64);
                if (v34 > *(double *)sub_19E0B6A0C((uint64_t)&v68, &__str))
                {
                  double v35 = *(double *)sub_19E0B6A0C((uint64_t)&v68, &__str);
                  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type size = __str.__r_.__value_.__l.__size_;
                  }
                  std::string::basic_string(&v70, &__str, 0, size - 1, (std::allocator<char> *)v71);
                  double v37 = *(double *)sub_19E0B6A0C((uint64_t)&v68, &v70);
                  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v70.__r_.__value_.__l.__data_);
                  }
                  size_t v38 = sub_19E0BB234((uint64_t **)&v65, &__str, (uint64_t)&__str);
                  int v39 = (int)(sqrt(v35 / v37) * 255.0);
                  if (v39 >= 255) {
                    int v40 = 255;
                  }
                  else {
                    int v40 = v39;
                  }
                  if (v39) {
                    BOOL v41 = 1;
                  }
                  else {
                    BOOL v41 = v35 / v37 <= 0.0;
                  }
                  int v42 = (v40 << 23) | 0x7FFFFF;
                  if (!v41) {
                    int v42 = 0xFFFFFF;
                  }
                  *((_DWORD *)v38 + 14) = v42;
                }
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v64.__r_.__value_.__l.__data_);
              }
              ++v30;
            }
            ++v29;
            uint64_t v3 = *a2;
          }
          while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
        }
      }
      uint64_t v5 = a1;
LABEL_61:
      memset(&v70, 0, sizeof(v70));
      memset(&v64, 0, sizeof(v64));
      uint64_t v43 = (uint64_t *)v65;
      if (v65 != (std::string *)&v66)
      {
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        std::string::size_type v46 = 0;
        do
        {
          int v47 = (long long *)(v43 + 4);
          uint64_t v48 = (_OWORD *)v70.__r_.__value_.__l.__size_;
          if (v70.__r_.__value_.__l.__size_ >= v70.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v50 = sub_19E0B6BF0((uint64_t *)&v70, v47);
          }
          else
          {
            if (*((char *)v43 + 55) < 0)
            {
              sub_19E03FA9C((unsigned char *)v70.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
            }
            else
            {
              long long v49 = *v47;
              *(void *)(v70.__r_.__value_.__l.__size_ + 16) = v43[6];
              *uint64_t v48 = v49;
            }
            std::string::size_type v50 = (std::string::size_type)v48 + 24;
          }
          v70.__r_.__value_.__l.__size_ = v50;
          if ((unint64_t)v44 >= v46)
          {
            uint64_t v51 = (v44 - v45) >> 2;
            unint64_t v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62) {
              sub_19E041BEC();
            }
            if ((uint64_t)(v46 - (void)v45) >> 1 > v52) {
              unint64_t v52 = (uint64_t)(v46 - (void)v45) >> 1;
            }
            if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v52;
            }
            if (v53) {
              unint64_t v53 = (unint64_t)sub_19E068D84(v53);
            }
            else {
              uint64_t v54 = 0;
            }
            uint64_t v55 = (char *)(v53 + 4 * v51);
            *(_DWORD *)uint64_t v55 = *((_DWORD *)v43 + 14);
            std::string::size_type v56 = (std::string::size_type)(v55 + 4);
            while (v44 != v45)
            {
              int v57 = *((_DWORD *)v44 - 1);
              v44 -= 4;
              *((_DWORD *)v55 - 1) = v57;
              v55 -= 4;
            }
            std::string::size_type v46 = v53 + 4 * v54;
            v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
            v64.__r_.__value_.__l.__size_ = v56;
            v64.__r_.__value_.__r.__words[2] = v46;
            if (v45) {
              operator delete(v45);
            }
            unint64_t v45 = v55;
            uint64_t v44 = (char *)v56;
          }
          else
          {
            *(_DWORD *)uint64_t v44 = *((_DWORD *)v43 + 14);
            v44 += 4;
          }
          v64.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
          uint64_t v58 = (uint64_t *)v43[1];
          if (v58)
          {
            do
            {
              uint64_t v59 = v58;
              uint64_t v58 = (uint64_t *)*v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              uint64_t v59 = (uint64_t *)v43[2];
              BOOL v60 = *v59 == (void)v43;
              uint64_t v43 = v59;
            }
            while (!v60);
          }
          uint64_t v43 = v59;
        }
        while (v59 != &v66);
      }
      sub_19E0C4364(v5 + 8, (uint64_t *)&v70, &v64);
    }
  }
  sub_19E0672C4(v69[0]);
  return 0;
}

void sub_19E0CA388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  __n128 __p = &a28;
  sub_19E041AD0(&__p);
  sub_19E0672C4(a23);
  sub_19E0672C4(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0CA464(uint64_t a1, void *a2)
{
  __n128 __p = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v8 = (v5 - v3) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v4 - (void)v3) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v4 - (void)v3) >> 1;
        }
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_19E068D84(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        std::string::size_type v12 = (_DWORD *)(v10 + 4 * v8);
        *std::string::size_type v12 = v6;
        uint64_t v7 = v12 + 1;
        while (v5 != v3)
        {
          int v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--std::string::size_type v12 = v13;
        }
        unint64_t v4 = v10 + 4 * v11;
        __n128 __p = v12;
        unint64_t v19 = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)uint64_t v5 = v6;
        uint64_t v7 = v5 + 4;
      }
      uint64_t v18 = v7;
      ++v6;
      uint64_t v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19E0CA5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0CA604@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_19E057A94(a2, *(void **)(a1 + 32), 4 * *(void *)(a1 + 24));
}

void sub_19E0CA614(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A0868;
  sub_19E0672C4(*(char **)(a1 + 56));
  sub_19E0C2E10((void *)(a1 + 8));

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0CA684(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A0868;
  sub_19E0672C4(*(char **)(a1 + 56));
  sub_19E0C2E10((void *)(a1 + 8));
  return a1;
}

double sub_19E0CA6D4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 80) && *(void *)a1) {
    MEMORY[0x19F3BA6E0]();
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    MEMORY[0x19F3BA6E0](v2, 0x1000C8077774924);
  }
  *(unsigned char *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_19E0CA740(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int16 v5 = 0;
  char v12 = 0;
  unint64_t v6 = (uint64_t *)(a1 + 8);
  do
  {
    char __s = v5;
    uint64_t v7 = *a2;
    unint64_t v13 = 0;
    uint64_t v14 = v7;
    uint64_t result = sub_19E0CA7F4(v6, &__s, &v14, &v13, 1uLL);
    uint64_t v9 = v14;
    if (result == -2) {
      uint64_t v9 = -1;
    }
    uint64_t v14 = v9;
    if (v9 != -1)
    {
      uint64_t result = sub_19E0CA8AC(*(void *)(a3 + 24), v5);
      if (v12) {
        break;
      }
    }
    unsigned int v10 = v5++;
  }
  while (v10 < 0xFF);
  return result;
}

uint64_t sub_19E0CA7F4(uint64_t *a1, char *__s, void *a3, unint64_t *a4, size_t a5)
{
  if (!a5) {
    a5 = strlen(__s);
  }
  uint64_t v9 = *a1;
  unsigned int v10 = *(_DWORD *)(*a1 + 8 * *a3);
  for (unint64_t i = *a4; i < a5; *a4 = i)
  {
    uint64_t v12 = v10 + __s[i] + 1;
    if (v10 != *(_DWORD *)(v9 + 8 * v12 + 4)) {
      return 4294967294;
    }
    *a3 = v12;
    unsigned int v10 = *(_DWORD *)(v9 + 8 * v12);
    unint64_t i = *a4 + 1;
  }
  unint64_t v13 = (int *)(v9 + 8 * v10);
  int v15 = *v13;
  int v14 = v13[1];
  if (v15 < 0 && v10 == v14) {
    return ~v15;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_19E0CA8AC(uint64_t a1, char a2)
{
  char v3 = a2;
  if (!a1) {
    sub_19E0483E0();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t sub_19E0CA8FC(uint64_t result, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if (*a2 != -1)
  {
    uint64_t v7 = result;
    unsigned long long v28 = 0u;
    memset(v27, 0, sizeof(v27));
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v25 = 0;
    uint64_t v26 = v4;
    sub_19E0CABE4(v27, (__n128 *)__p);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    char v23 = 0;
    if (*((void *)&v28 + 1))
    {
      do
      {
        uint64_t v8 = *((void *)&v27[0] + 1);
        uint64_t v9 = v28;
        unint64_t v10 = (unint64_t)v28 >> 7;
        uint64_t v11 = *(void *)(*((void *)&v27[0] + 1) + 8 * ((unint64_t)v28 >> 7));
        uint64_t v12 = v28 & 0x7F;
        unint64_t v13 = (long long *)(v11 + 32 * v12);
        if (*((char *)v13 + 23) < 0)
        {
          sub_19E03FA9C(__p, *(void **)v13, *((void *)v13 + 1));
          uint64_t v8 = *((void *)&v27[0] + 1);
          uint64_t v9 = v28;
          unint64_t v10 = (unint64_t)v28 >> 7;
        }
        else
        {
          long long v14 = *v13;
          uint64_t v25 = *((void *)v13 + 2);
          *(_OWORD *)__n128 __p = v14;
        }
        uint64_t v26 = *(void *)(v11 + 32 * v12 + 24);
        uint64_t v15 = *(void *)(v8 + 8 * v10) + 32 * (v28 & 0x7F);
        if (*(char *)(v15 + 23) < 0)
        {
          operator delete(*(void **)v15);
          uint64_t v9 = v28;
        }
        unint64_t v16 = v9 + 1;
        unsigned long long v28 = __PAIR128__(*((unint64_t *)&v28 + 1), v16) + __PAIR128__(-1, 0);
        if (v16 >= 0x100)
        {
          operator delete(**((void ***)&v27[0] + 1));
          *((void *)&v27[0] + 1) += 8;
          *(void *)&unsigned long long v28 = v28 - 128;
        }
        int v22 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t *, int *))(*(void *)v7 + 128))(v7, &v26, &v22)
          && (v25 >= 0 ? (unint64_t v17 = __p) : (unint64_t v17 = (void **)__p[0]),
              v25 >= 0 ? (uint64_t v18 = HIBYTE(v25)) : (uint64_t v18 = (uint64_t)__p[1]),
              sub_19E06E4F4(*(void *)(a3 + 24), v22, (uint64_t)v17, v18, (uint64_t)&v23),
              v23))
        {
          char v19 = 1;
        }
        else
        {
          if ((a4 & 0x80000000) != 0) {
            goto LABEL_25;
          }
          unint64_t v20 = HIBYTE(v25);
          if (v25 < 0) {
            unint64_t v20 = (unint64_t)__p[1];
          }
          if (v20 < a4)
          {
LABEL_25:
            v29[0] = &unk_1EF0A0658;
            v29[1] = v27;
            v29[2] = __p;
            v29[3] = v29;
            (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v7 + 144))(v7, &v26, v29);
            sub_19E0CB188(v29);
          }
          char v19 = 0;
        }
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
        if (*((void *)&v28 + 1)) {
          char v21 = v19;
        }
        else {
          char v21 = 1;
        }
      }
      while ((v21 & 1) == 0);
    }
    return sub_19E0C38A4((uint64_t)v27);
  }
  return result;
}

void sub_19E0CABA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_19E0C38A4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

__n128 sub_19E0CABE4(void *a1, __n128 *a2)
{
  uint64_t v4 = (char *)a1[2];
  unsigned __int16 v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 16 * (v4 - v5) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x80)
    {
      a1[4] = v8 - 128;
      uint64_t v12 = *(void *)v5;
      unint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          int v42 = (char *)sub_19E060B48(v41);
          uint64_t v44 = &v42[8 * (v41 >> 2)];
          unint64_t v45 = (uint64_t *)a1[1];
          uint64_t v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          std::string::size_type v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          unint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            int v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            int v22 = (char *)a1[1];
          }
          uint64_t v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)uint64_t v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      unsigned __int16 v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    int v24 = (char *)a1[3];
    uint64_t v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      int v27 = operator new(0x1000uLL);
      unsigned long long v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          unint64_t v53 = (char *)sub_19E060B48(v51);
          unsigned __int16 v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          std::string::size_type v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            std::string::size_type v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            uint64_t v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)uint64_t v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          int v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            unsigned __int16 v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        uint64_t v62 = (char *)a1[1];
        int v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = (uint64_t)&v63[-*a1] >> 2;
            }
            v99 = (char *)sub_19E060B48(v98);
            v101 = &v99[8 * (v98 >> 2)];
            uint64_t v102 = (uint64_t *)a1[1];
            int v63 = v101;
            uint64_t v103 = a1[2] - (void)v102;
            if (v103)
            {
              int v63 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v104 = 8 * (v103 >> 3);
              v105 = &v99[8 * (v98 >> 2)];
              do
              {
                uint64_t v106 = *v102++;
                *(void *)v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v63;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              int v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            std::string v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              uint64_t v62 = (char *)a1[1];
            }
            int v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)int v63 = v64;
      }
      else
      {
        *(void *)uint64_t v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    std::string::size_type v30 = (char *)sub_19E060B48(v29);
    uint64_t v32 = v31;
    uint64_t v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v111 = v34;
    double v35 = operator new(0x1000uLL);
    *(void *)&long long v36 = v33;
    *((void *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&long long v38 = v111;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&long long v36 = v33;
        *((void *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      unsigned int v75 = (char *)sub_19E060B48(v74);
      uint64_t v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v38 = v75;
      *((void *)&v38 + 1) = v33;
      *(void *)&long long v36 = v33;
      *((void *)&v36 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v108 = v36;
      long long v111 = v38;
      operator delete(v30);
      long long v36 = v108;
    }
    long long v38 = v111;
LABEL_56:
    *(void *)uint64_t v33 = v35;
    *(void *)&long long v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        uint64_t v80 = (unsigned char *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          uint64_t v86 = (char *)sub_19E060B48(v85);
          int v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          uint64_t v89 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            v91 = v79;
            uint64_t v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(void *)&long long v38 = v86;
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = v88;
          *((void *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            long long v109 = v36;
            long long v113 = v38;
            operator delete(v78);
            long long v36 = v109;
            long long v38 = v113;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          int v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            uint64_t v80 = (unsigned char *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v110 = *((void *)&v36 + 1);
            uint64_t v112 = v38;
            memmove((void *)(v84 - (v36 - *((void *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((void *)&v38 + 1));
            *((void *)&v36 + 1) = v110;
            *(void *)&long long v38 = v112;
          }
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = &v80[8 * v83];
        }
      }
      else
      {
        int v79 = (char *)*((void *)&v38 + 1);
      }
      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - 1) = v94;
      *((void *)&v38 + 1) -= 8;
    }
    int v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }
LABEL_84:
  int v96 = (__n128 *)(*(void *)&v5[(v9 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v9 & 0x7F));
  __n128 result = *a2;
  v96[1].n128_u64[0] = a2[1].n128_u64[0];
  *int v96 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  v96[1].n128_u64[1] = a2[1].n128_u64[1];
  ++a1[5];
  return result;
}

void sub_19E0CB158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void *sub_19E0CB188(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E0CB20C()
{
  return &unk_1EF0A06C8;
}

uint64_t sub_19E0CB218(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A06C8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void sub_19E0CB258(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v4 = *(void **)(a1 + 8);
  sub_19E0B6B6C((uint64_t)&__p, *(const void ***)(a1 + 16), *a2);
  uint64_t v7 = *a3;
  sub_19E0CABE4(v4, &__p);
  if (v6 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_19E0CB2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_19E0CB2D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A0658;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0CB300(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF0A0658;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0CB34C()
{
}

uint64_t sub_19E0CB364(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    uint64_t v7 = *a2;
    unint64_t v9 = 0;
    uint64_t v10 = v7;
    int v8 = sub_19E0CA7F4(a1 + 1, "", &v10, &v9, 0);
    *a3 = v8;
    return v8 != -1;
  }
  return result;
}

uint64_t sub_19E0CB3F4(uint64_t a1, uint64_t *a2, char *__s, size_t a4)
{
  uint64_t v4 = *a2;
  unint64_t v6 = 0;
  uint64_t v7 = v4;
  if (sub_19E0CA7F4((uint64_t *)(a1 + 8), __s, &v7, &v6, a4) == -2) {
    return -1;
  }
  else {
    return v7;
  }
}

BOOL sub_19E0CB440(uint64_t a1, void *a2)
{
  return *a2 != -1;
}

uint64_t sub_19E0CB450()
{
  return 0;
}

void sub_19E0CB458(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t *, const void *, size_t))(*(void *)a1 + 120))(a1, &v16, a2, a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v16))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E04147C();
    }
    if (a3 >= 0x17)
    {
      uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v11 = a3 | 7;
      }
      uint64_t v12 = v11 + 1;
      uint64_t v10 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)a3;
      unint64_t v15 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v15) = a3;
      uint64_t v10 = __dst;
      if (!a3)
      {
LABEL_10:
        *((unsigned char *)v10 + a3) = 0;
        uint64_t v13 = operator new(0x28uLL);
        void *v13 = &unk_1EF0A05D8;
        v13[1] = __dst;
        v13[2] = a2;
        v13[3] = a3;
        v13[4] = a4;
        v17[3] = v13;
        (*(void (**)(uint64_t, uint64_t *, void *, uint64_t))(*(void *)a1 + 136))(a1, &v16, v17, a5);
        sub_19E06C7E4(v17);
        if (SHIBYTE(v15) < 0) {
          operator delete(__dst[0]);
        }
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19E0CB658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_19E0CB68C()
{
  return &unk_1EF0A0638;
}

uint64_t sub_19E0CB698(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A0638)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0CB6D8(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = a1[3];
  unint64_t v10 = v9 + v8;
  uint64_t v11 = a1[1];
  int v12 = *(char *)(v11 + 23);
  if (v12 < 0) {
    unint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    unint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  uint64_t v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    uint64_t v11 = a1[1];
    uint64_t v9 = a1[3];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
  uint64_t v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    uint64_t v11 = a1[1];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
LABEL_9:
  int v16 = *a2;
  if ((v12 & 0x80) != 0) {
    uint64_t v11 = *(void *)v11;
  }
  uint64_t v17 = *(void *)(a1[4] + 24);

  return sub_19E06E4F4(v17, v16, v11, v10, a4);
}

__n128 sub_19E0CB7C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A05D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0CB7F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF0A05D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_19E0CB84C()
{
}

size_t sub_19E0CB864(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4)
{
  uint64_t v7 = off_1EC3014E8();
  size_t result = sub_19E0CB910(v9, v8, v7, a3);
  char v18 = 0;
  if (result)
  {
    size_t v11 = result - 1;
    int v12 = (void *)(v7 + 8);
    do
    {
      int v13 = *((_DWORD *)v12 - 2);
      size_t v15 = *v12;
      v12 += 2;
      uint64_t v14 = v15;
      if (a3 >= v15) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = a3;
      }
      size_t result = sub_19E06E4F4(*(void *)(a4 + 24), v13, a2, v16, (uint64_t)&v18);
      if (v18) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v11 == 0;
      }
      --v11;
    }
    while (!v17);
  }
  return result;
}

size_t sub_19E0CB910(int **a1, char *__s, uint64_t a3, size_t a4)
{
  if (a4)
  {
    uint64_t v7 = *a1;
    int v8 = **a1;
  }
  else
  {
    size_t result = strlen(__s);
    a4 = result;
    uint64_t v7 = *a1;
    int v8 = **a1;
    if (!result)
    {
LABEL_12:
      size_t v15 = &v7[2 * v8];
      if (v8 == v15[1])
      {
        int v16 = *v15;
        if (v16 < 0)
        {
          if (result <= 0x7F)
          {
            size_t v17 = a3 + 16 * result;
            *(_DWORD *)size_t v17 = ~v16;
            *(void *)(v17 + 8) = a4;
          }
          ++result;
        }
      }
      return result;
    }
  }
  uint64_t v10 = 0;
  size_t result = 0;
  while (1)
  {
    size_t v11 = &v7[2 * v8];
    if (v8 == v11[1])
    {
      int v12 = *v11;
      if (v12 < 0)
      {
        if (result <= 0x7F)
        {
          size_t v13 = a3 + 16 * result;
          *(_DWORD *)size_t v13 = ~v12;
          *(void *)(v13 + 8) = v10;
        }
        ++result;
      }
    }
    uint64_t v14 = v8 + __s[v10] + 1;
    if (v8 != v7[2 * v14 + 1]) {
      return result;
    }
    ++v10;
    int v8 = v7[2 * v14];
    if (a4 == v10) {
      goto LABEL_12;
    }
  }
}

uint64_t sub_19E0CBA08(uint64_t a1, char *__s, size_t a3, int *a4)
{
  unsigned __int16 v5 = __s;
  if (a3)
  {
    uint64_t v7 = *(int **)(a1 + 8);
    int v8 = *v7;
    goto LABEL_4;
  }
  a3 = strlen(__s);
  uint64_t v7 = *(int **)(a1 + 8);
  int v8 = *v7;
  if (a3)
  {
LABEL_4:
    while (1)
    {
      int v9 = *v5++;
      uint64_t v10 = (v8 + v9 + 1);
      if (v8 != v7[2 * v10 + 1]) {
        return 0;
      }
      int v8 = v7[2 * v10];
      if (!--a3) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t result = 0;
    int v12 = &v7[2 * v8];
    if (v8 == v12[1])
    {
      int v13 = *v12;
      if (v13 < 0)
      {
        if (v13)
        {
          *a4 = ~v13;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19E0CBAC0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a3 >> 3;
  sub_19E0CA6D4(a1 + 8);
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 24) = v5;
  return 1;
}

BOOL sub_19E0CBB0C(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  uint64_t v55 = 0;
  std::string::size_type v56 = 0;
  unint64_t v57 = 0;
  __n128 __p = 0;
  unint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v49 = 0;
  std::string::size_type v50 = 0;
  unint64_t v51 = 0;
  sub_19E0C470C(&v55, v7);
  sub_19E0C47B4(&__p, v7);
  sub_19E0C485C((void **)&v49, v7);
  uint64_t v48 = v7;
  if (v5 == v6)
  {
LABEL_60:
    uint64_t v44 = (void *)v49;
    BOOL v45 = sub_19E0CBECC((void *)(a1 + 8), v48, (uint64_t)v55, (uint64_t)__p, v49) == 0;
    if (!v44) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  uint64_t v8 = 0;
  if (v7 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v7;
  }
  while (1)
  {
    uint64_t v10 = *a2 + 24 * v8;
    if (*(char *)(v10 + 23) < 0) {
      uint64_t v10 = *(void *)v10;
    }
    size_t v11 = (char *)v56;
    if ((unint64_t)v56 >= v57)
    {
      int v13 = (char *)v55;
      uint64_t v14 = ((char *)v56 - (unsigned char *)v55) >> 3;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61) {
        sub_19E041BEC();
      }
      uint64_t v16 = v57 - (void)v55;
      if ((uint64_t)(v57 - (void)v55) >> 2 > v15) {
        unint64_t v15 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17) {
        unint64_t v17 = (unint64_t)sub_19E060B48(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = (uint64_t *)(v17 + 8 * v14);
      uint64_t *v19 = v10;
      int v12 = v19 + 1;
      if (v11 != v13)
      {
        do
        {
          uint64_t v20 = *((void *)v11 - 1);
          v11 -= 8;
          *--uint64_t v19 = v20;
        }
        while (v11 != v13);
        size_t v11 = (char *)v55;
      }
      uint64_t v55 = v19;
      unint64_t v57 = v17 + 8 * v18;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *std::string::size_type v56 = v10;
      int v12 = (uint64_t *)(v11 + 8);
    }
    std::string::size_type v56 = v12;
    uint64_t v21 = *a2 + 24 * v8;
    uint64_t v22 = *(char *)(v21 + 23) < 0 ? *(void *)(v21 + 8) : *(unsigned __int8 *)(v21 + 23);
    uint64_t v23 = v53;
    if (v53 >= v54)
    {
      uint64_t v25 = (char *)__p;
      uint64_t v26 = (v53 - (unsigned char *)__p) >> 3;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61) {
        sub_19E041BEC();
      }
      uint64_t v28 = v54 - (unsigned char *)__p;
      if ((v54 - (unsigned char *)__p) >> 2 > v27) {
        unint64_t v27 = v28 >> 2;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        std::string::size_type v30 = (char *)sub_19E049FB0((uint64_t)&v54, v29);
        uint64_t v25 = (char *)__p;
        uint64_t v23 = v53;
      }
      else
      {
        std::string::size_type v30 = 0;
      }
      uint64_t v31 = &v30[8 * v26];
      *(void *)uint64_t v31 = v22;
      int v24 = v31 + 8;
      while (v23 != v25)
      {
        uint64_t v32 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v31 - 1) = v32;
        v31 -= 8;
      }
      __n128 __p = v31;
      unint64_t v53 = v24;
      uint64_t v54 = &v30[8 * v29];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *(void *)unint64_t v53 = v22;
      int v24 = v23 + 8;
    }
    unint64_t v53 = v24;
    int v33 = *(_DWORD *)(*a3 + 4 * v8);
    if (v33 < 0) {
      break;
    }
    long long v34 = v50;
    if ((unint64_t)v50 >= v51)
    {
      long long v36 = (_DWORD *)v49;
      uint64_t v37 = ((uint64_t)v50 - v49) >> 2;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 62) {
        sub_19E041BEC();
      }
      uint64_t v39 = v51 - v49;
      if ((uint64_t)(v51 - v49) >> 1 > v38) {
        unint64_t v38 = v39 >> 1;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v38;
      }
      if (v40) {
        unint64_t v40 = (unint64_t)sub_19E068D84(v40);
      }
      else {
        uint64_t v41 = 0;
      }
      int v42 = (_DWORD *)(v40 + 4 * v37);
      _DWORD *v42 = v33;
      double v35 = v42 + 1;
      while (v34 != v36)
      {
        int v43 = *--v34;
        *--int v42 = v43;
      }
      uint64_t v49 = (uint64_t)v42;
      unint64_t v51 = v40 + 4 * v41;
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      *std::string::size_type v50 = v33;
      double v35 = v34 + 1;
    }
    std::string::size_type v50 = v35;
    if (++v8 == v9) {
      goto LABEL_60;
    }
  }
  BOOL v45 = 0;
  uint64_t v44 = (void *)v49;
  if (v49) {
LABEL_61:
  }
    operator delete(v44);
LABEL_62:
  if (__p)
  {
    unint64_t v53 = (char *)__p;
    operator delete(__p);
  }
  if (v55) {
    operator delete(v55);
  }
  return v45;
}

void sub_19E0CBE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0CBECC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 && a3)
  {
    a1[11] = 0;
    a1[4] = a3;
    a1[5] = a2;
    a1[6] = a4;
    a1[7] = a5;
    a1[8] = 0;
    sub_19E0CBFCC();
  }
  return 0;
}

void sub_19E0CBFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0CBFCC()
{
}

uint64_t sub_19E0CC0E8(uint64_t a1, void *a2, uint64_t a3)
{
  if ((*(_DWORD *)(a1 + 84) & 0x80000000) != 0) {
    return 0;
  }
  unint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  if (v5 < v6)
  {
    unsigned int v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(a1 + 48);
      if (v9)
      {
        size_t v10 = *(void *)(v9 + 8 * v5);
        size_t v11 = a2[1];
        if (v10 < v11) {
          goto LABEL_34;
        }
        int v12 = *(const char **)(*(void *)(a1 + 32) + 8 * v5);
      }
      else
      {
        int v12 = *(const char **)(*(void *)(a1 + 32) + 8 * v5);
        size_t v10 = strlen(v12);
        size_t v11 = a2[1];
        if (v10 < v11) {
          goto LABEL_34;
        }
      }
      if (v10 == v11) {
        unsigned int v13 = 0;
      }
      else {
        unsigned int v13 = v12[v11] + 1;
      }
      if (v8 > v13)
      {
        uint64_t result = 0;
        *(_DWORD *)(a1 + 84) = -3;
        return result;
      }
      uint64_t v14 = *(char **)a3;
      unint64_t v15 = *(char **)(a3 + 8);
      if (v13 != v8 || v14 == v15)
      {
        if (v14 != v15) {
          *((void *)v15 - 1) = v5;
        }
        size_t v16 = v11 + 1;
        unint64_t v17 = *(void *)(a3 + 16);
        if ((unint64_t)v15 >= v17)
        {
          uint64_t v19 = (v15 - v14) >> 5;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 59) {
            sub_19E041BEC();
          }
          uint64_t v21 = v17 - (void)v14;
          if (v21 >> 4 > v20) {
            unint64_t v20 = v21 >> 4;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v22 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            if (v22 >> 59) {
              sub_19E0416C4();
            }
            uint64_t v23 = (char *)operator new(32 * v22);
          }
          else
          {
            uint64_t v23 = 0;
          }
          int v24 = &v23[32 * v19];
          *(_DWORD *)int v24 = v13;
          *((void *)v24 + 1) = v16;
          *((void *)v24 + 2) = v5;
          uint64_t v25 = v24;
          if (v14 != v15)
          {
            do
            {
              long long v26 = *((_OWORD *)v15 - 1);
              *((_OWORD *)v25 - 2) = *((_OWORD *)v15 - 2);
              *((_OWORD *)v25 - 1) = v26;
              v25 -= 32;
              v15 -= 32;
            }
            while (v15 != v14);
            uint64_t v14 = *(char **)a3;
          }
          uint64_t v18 = v24 + 32;
          *(void *)a3 = v25;
          *(void *)(a3 + 8) = v24 + 32;
          *(void *)(a3 + 16) = &v23[32 * v22];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v15 = v13;
          uint64_t v18 = v15 + 32;
          *((void *)v15 + 1) = v16;
          *((void *)v15 + 2) = v5;
        }
        *(void *)(a3 + 8) = v18;
        unint64_t v6 = a2[3];
        unsigned int v8 = v13;
      }
LABEL_34:
      ++v5;
    }
    while (v5 < v6);
  }
  uint64_t v27 = *(void *)(a3 + 8) - *(void *)a3;
  uint64_t result = v27 >> 5;
  if (v27) {
    *(void *)(*(void *)a3 + 32 * result - 8) = v6;
  }
  return result;
}

unint64_t sub_19E0CC2D8(uint64_t a1, unsigned int **a2)
{
  if ((*(_DWORD *)(a1 + 84) & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v4 = **a2;
  if ((unint64_t)(v4 + 1) > *(void *)(a1 + 72)) {
    uint64_t v5 = v4 + 1;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 72);
  }
  unint64_t v6 = v5 - 1;
  if (*(void *)(a1 + 24) <= (unint64_t)(v5 - 1)) {
    sub_19E0CBFCC();
  }
  unint64_t v7 = 0;
  for (int i = 0; ; int i = 1)
  {
    do
    {
      while (1)
      {
        uint64_t v9 = v6++;
        if (*(void *)(a1 + 24) <= v6) {
          sub_19E0CBFCC();
        }
        if (!*(_DWORD *)(*(void *)a1 + 8 * v6 + 4)) {
          break;
        }
        ++v7;
      }
      if (!i) {
        *(void *)(a1 + 72) = v6;
      }
      unint64_t v10 = v6 - **a2;
      if (*(void *)(a1 + 24) <= v10 + *(a2[1] - 8)) {
        sub_19E0CBFCC();
      }
      uint64_t v11 = *(void *)(a1 + 8);
      int i = 1;
    }
    while (*(unsigned char *)(v11 + v10));
    uint64_t v12 = (char *)a2[1] - (char *)*a2;
    if ((unint64_t)v12 < 0x21) {
      break;
    }
    uint64_t v13 = v12 >> 5;
    if ((unint64_t)(v12 >> 5) <= 2) {
      uint64_t v13 = 2;
    }
    uint64_t v14 = *a2 + 8;
    uint64_t v15 = v13 - 1;
    while (1)
    {
      unsigned int v16 = *v14;
      v14 += 8;
      if (*(_DWORD *)(*(void *)a1 + 8 * (v10 + v16) + 4)) {
        break;
      }
      if (!--v15) {
        goto LABEL_25;
      }
    }
  }
LABEL_25:
  if ((double)v7 / (double)(unint64_t)(v9 - *(void *)(a1 + 72) + 2) >= 0.95) {
    *(void *)(a1 + 72) = v6;
  }
  *(unsigned char *)(v11 + v10) = 1;
  unint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = *a2;
  uint64_t v19 = a2[1];
  if (v17 <= v10 + *(v19 - 8) + 1) {
    unint64_t v17 = v10 + *(v19 - 8) + 1;
  }
  *(void *)(a1 + 16) = v17;
  if (v19 == v18) {
    return v10;
  }
  unint64_t v20 = ((char *)v19 - (char *)v18) >> 5;
  uint64_t v21 = *(void *)a1;
  if (v20 <= 1) {
    unint64_t v20 = 1;
  }
  unint64_t v22 = v18;
  do
  {
    unsigned int v23 = *v22;
    v22 += 8;
    *(_DWORD *)(v21 + 8 * (v10 + v23) + 4) = v10;
    --v20;
  }
  while (v20);
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  while (1)
  {
    memset(__p, 0, sizeof(__p));
    if (!sub_19E0CC0E8(a1, &v18[v24], (uint64_t)__p)) {
      break;
    }
    *(_DWORD *)(*(void *)a1 + 8 * (v10 + (*a2)[v24])) = sub_19E0CC2D8(a1, __p);
LABEL_44:
    if (__p[0]) {
      operator delete(__p[0]);
    }
    ++v25;
    uint64_t v18 = *a2;
    v24 += 8;
    if (v25 >= ((char *)a2[1] - (char *)*a2) >> 5) {
      return v10;
    }
  }
  uint64_t v26 = *(void *)(a1 + 56);
  uint64_t v27 = *(void *)&(*a2)[v24 + 4];
  if (v26) {
    LODWORD(v28) = *(_DWORD *)(v26 + 4 * v27);
  }
  else {
    uint64_t v28 = *(void *)&(*a2)[v24 + 4];
  }
  *(_DWORD *)(*(void *)a1 + 8 * (v10 + (*a2)[v24])) = ~v28;
  if (!v26 || (*(_DWORD *)(v26 + 4 * v27) & 0x80000000) == 0)
  {
    ++*(void *)(a1 + 64);
    unint64_t v29 = *(void (**)(void))(a1 + 88);
    if (v29) {
      v29();
    }
    goto LABEL_44;
  }
  *(_DWORD *)(a1 + 84) = -2;
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_19E0CC5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_19E0CC5F4(uint64_t a1, uint64_t **a2)
{
  __n128 __p = 0;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  uint64_t v35 = 0;
  long long v36 = 0;
  unint64_t v37 = 0;
  int v33 = 0;
  long long v34 = 0;
  sub_19E0C470C((void **)&v35, v3);
  sub_19E0C47B4(&__p, v3);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      unint64_t v6 = v4;
      if (*((char *)v4 + 23) < 0) {
        unint64_t v6 = (uint64_t *)*v4;
      }
      unint64_t v7 = v36;
      if ((unint64_t)v36 >= v37)
      {
        uint64_t v9 = v35;
        uint64_t v10 = (uint64_t)&v36[-v35] >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          sub_19E041BEC();
        }
        uint64_t v12 = v37 - v35;
        if ((uint64_t)(v37 - v35) >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)sub_19E060B48(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (void *)(v13 + 8 * v10);
        *uint64_t v15 = v6;
        unsigned int v8 = (char *)(v15 + 1);
        if (v7 != (char *)v9)
        {
          do
          {
            uint64_t v16 = *((void *)v7 - 1);
            v7 -= 8;
            *--uint64_t v15 = v16;
          }
          while (v7 != (char *)v9);
          unint64_t v7 = (char *)v35;
        }
        uint64_t v35 = (uint64_t)v15;
        unint64_t v37 = v13 + 8 * v14;
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(void *)long long v36 = v6;
        unsigned int v8 = v7 + 8;
      }
      long long v36 = v8;
      if (*((char *)v4 + 23) < 0) {
        uint64_t v17 = v4[1];
      }
      else {
        uint64_t v17 = *((unsigned __int8 *)v4 + 23);
      }
      uint64_t v18 = v33;
      if (v33 >= v34)
      {
        unint64_t v20 = (char *)__p;
        uint64_t v21 = (v33 - (unsigned char *)__p) >> 3;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          sub_19E041BEC();
        }
        uint64_t v23 = v34 - (unsigned char *)__p;
        if ((v34 - (unsigned char *)__p) >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          unint64_t v25 = (char *)sub_19E049FB0((uint64_t)&v34, v24);
          unint64_t v20 = (char *)__p;
          uint64_t v18 = v33;
        }
        else
        {
          unint64_t v25 = 0;
        }
        uint64_t v26 = &v25[8 * v21];
        *(void *)uint64_t v26 = v17;
        uint64_t v19 = v26 + 8;
        while (v18 != v20)
        {
          uint64_t v27 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v26 - 1) = v27;
          v26 -= 8;
        }
        __n128 __p = v26;
        int v33 = v19;
        long long v34 = &v25[8 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(void *)int v33 = v17;
        uint64_t v19 = v18 + 8;
      }
      int v33 = v19;
      v4 += 3;
    }
    while (v4 != v5);
  }
  uint64_t v28 = (void *)v35;
  int v29 = sub_19E0CBECC((void *)(a1 + 8), v3, v35, (uint64_t)__p, 0);
  if (__p)
  {
    int v33 = (char *)__p;
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }
  return v29 == 0;
}

void sub_19E0CC858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0CC890@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_19E057A94(a2, *(void **)(a1 + 8), 8 * *(void *)(a1 + 24));
}

void *sub_19E0CC8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A0558;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E06C7E4(v5);
}

void sub_19E0CC948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E06C7E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0CC95C()
{
  return &unk_1EF0A05B8;
}

uint64_t sub_19E0CC968(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A05B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0CC9A8(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0CC9CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A0558;
  a2[1] = v2;
  return result;
}

void *sub_19E0CC9F0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A0558;
  result[1] = v3;
  return result;
}

void sub_19E0CCA38()
{
}

void *sub_19E0CCA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A04D8;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E06C7E4(v5);
}

void sub_19E0CCAF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E06C7E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0CCB08()
{
  return &unk_1EF0A0538;
}

uint64_t sub_19E0CCB14(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A0538)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0CCB54(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0CCB78(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A04D8;
  a2[1] = v2;
  return result;
}

void *sub_19E0CCB9C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A04D8;
  result[1] = v3;
  return result;
}

void sub_19E0CCBE4()
{
}

uint64_t sub_19E0CCBFC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0CCC58(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  __n128 __p = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  if (a2)
  {
    uint64_t v8 = a2;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      unint64_t v13 = *(void **)(a3 + 8 * i);
      size_t v14 = *(void *)(a4 + 8 * i);
      size_t v38 = v14;
      uint64_t v39 = v13;
      uint64_t v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        uint64_t v16 = (void *)sub_19E0B5820(&v43, &v39, &v38);
      }
      else
      {
        sub_19E057A94(v44, v13, v14);
        uint64_t v16 = v15 + 3;
      }
      uint64_t v44 = v16;
      if (a5)
      {
        uint64_t v17 = *(void *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v19 = v10;
          uint64_t v20 = a5;
          uint64_t v21 = v8;
          uint64_t v22 = a3;
          uint64_t v23 = a4;
          uint64_t v24 = (v11 - v9) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            sub_19E041BEC();
          }
          unint64_t v26 = v19 - (void)v9;
          unint64_t v27 = (uint64_t)(v19 - (void)v9) >> 1;
          if (v27 > v25) {
            unint64_t v25 = v27;
          }
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v25;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_19E068D84(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          std::string::size_type v30 = (_DWORD *)(v28 + 4 * v24);
          *std::string::size_type v30 = v17;
          uint64_t v18 = v30 + 1;
          while (v11 != v9)
          {
            int v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--std::string::size_type v30 = v31;
          }
          __n128 __p = v30;
          uint64_t v41 = v18;
          unint64_t v32 = v28 + 4 * v29;
          unint64_t v42 = v32;
          if (v9) {
            operator delete(v9);
          }
          uint64_t v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          uint64_t v8 = v21;
          a5 = v20;
          unint64_t v10 = v32;
        }
        else
        {
          *(_DWORD *)unint64_t v11 = v17;
          uint64_t v18 = v11 + 4;
        }
        uint64_t v41 = v18;
        unint64_t v11 = (char *)v18;
      }
    }
  }
  uint64_t v33 = *a1;
  if (a5) {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 64))();
  }
  else {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 56))();
  }
  uint64_t v35 = v34;
  if (__p)
  {
    uint64_t v41 = __p;
    operator delete(__p);
  }
  __n128 __p = &v43;
  sub_19E041AD0((void ***)&__p);
  return v35;
}

void sub_19E0CCE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __n128 __p = &a16;
  sub_19E041AD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E0CCEC0(void *a1)
{
  *a1 = &unk_1EF0A0400;
  sub_19E0CA6D4((uint64_t)(a1 + 1));

  JUMPOUT(0x19F3BA710);
}

void *sub_19E0CCF24(void *a1)
{
  *a1 = &unk_1EF0A0400;
  sub_19E0CA6D4((uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_19E0CCF68(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_19E0CA740(a1 + 8, a2, a3);
}

void *sub_19E0CCF70(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF0A07E8;
  v8[1] = a3;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0CA8FC(a1 + 8, a2, (uint64_t)v9, a4);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0CD028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0CD04C()
{
  return &unk_1EF0A0848;
}

uint64_t sub_19E0CD058(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A0848)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0CD098(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF) {
    return sub_19E0B5BE8(*(void *)(*(void *)(result + 8) + 24), v4, *a3, a3[1], a4);
  }
  return result;
}

uint64_t sub_19E0CD0D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A07E8;
  a2[1] = v2;
  return result;
}

void *sub_19E0CD0F4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A07E8;
  result[1] = v3;
  return result;
}

void sub_19E0CD13C()
{
}

uint64_t sub_19E0CD154(uint64_t a1, uint64_t *a2, int *a3)
{
  int v6 = 0;
  int v4 = sub_19E0CB364((uint64_t *)(a1 + 8), a2, &v6);
  uint64_t result = 0;
  if (v4)
  {
    if ((v6 & 0x7FFFFF) == 0x7FFFFF)
    {
      return 0;
    }
    else
    {
      *a3 = v6 & 0x7FFFFF;
      return 1;
    }
  }
  return result;
}

uint64_t sub_19E0CD1BC(uint64_t a1, uint64_t *a2, char *__s, size_t a4)
{
  uint64_t v4 = *a2;
  unint64_t v6 = 0;
  uint64_t v7 = v4;
  if (sub_19E0CA7F4((uint64_t *)(a1 + 16), __s, &v7, &v6, a4) == -2) {
    return -1;
  }
  else {
    return v7;
  }
}

BOOL sub_19E0CD208(uint64_t a1, void *a2)
{
  return *a2 != -1;
}

uint64_t sub_19E0CD218()
{
  return 0;
}

void *sub_19E0CD220(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  v10[0] = &unk_1EF0A07E8;
  v10[1] = a4;
  v10[3] = v10;
  sub_19E0B5A50((uint64_t)v11, v10);
  sub_19E0CB458(a1 + 8, a2, a3, (uint64_t)v11, a5);
  sub_19E06C7E4(v11);
  return sub_19E0B5B00(v10);
}

void sub_19E0CD2E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0CD304(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF0A07E8;
  v8[1] = a4;
  v8[3] = v8;
  sub_19E0B5A50((uint64_t)v9, v8);
  sub_19E0CB864(a1 + 8, a2, a3, (uint64_t)v9);
  sub_19E06C7E4(v9);
  return sub_19E0B5B00(v8);
}

void sub_19E0CD3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E06C7E4((uint64_t *)va1);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0CD3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, &v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, &v10, a4);
}

uint64_t sub_19E0CD4AC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a3 >> 3;
  sub_19E0CA6D4(a1 + 16);
  *(void *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 96) = 1;
  *(void *)(a1 + 32) = v5;
  return 1;
}

BOOL sub_19E0CD4F8(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2) {
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  }
  uint64_t v5 = a1;
  v70[0] = 0;
  v70[1] = 0;
  uint64_t v69 = v70;
  if (v4 == v3)
  {
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v66 = (std::string *)&v67;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = a1 + 112;
    do
    {
      std::string::size_type v10 = 0;
      uint64_t v11 = v3 + 24 * v8;
      while (1)
      {
        std::string::size_type v12 = *(char *)(v11 + 23) < 0 ? *(void *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
        if (v10 > v12) {
          break;
        }
        double v13 = *(double *)sub_19E0B6A0C(v9, (void *)v11);
        std::string::basic_string(&v71, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v66);
        uint64_t v66 = &v71;
        size_t v14 = (double *)sub_19E0B3CA4((uint64_t **)&v69, &v71, (_OWORD **)&v66);
        v14[7] = v13 + v14[7];
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        ++v10;
      }
      if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF)
      {
        BOOL v61 = 0;
        goto LABEL_96;
      }
      ++v8;
      uint64_t v3 = *a2;
      uint64_t v15 = a2[1];
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3));
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v66 = (std::string *)&v67;
    if (v15 != v3)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      do
      {
        uint64_t v18 = v3 + v16;
        int v19 = *(_DWORD *)(*a3 + 4 * v17);
        double v20 = *(double *)sub_19E0B6A0C((uint64_t)&v69, (void *)(v3 + v16));
        uint64_t v21 = *(unsigned __int8 *)(v18 + 23);
        if ((v21 & 0x80u) != 0) {
          uint64_t v21 = *(void *)(v18 + 8);
        }
        std::string::basic_string(&v71, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v65);
        double v22 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        uint64_t v23 = sub_19E0BB234((uint64_t **)&v66, (void *)v18, v18);
        int v24 = (int)(sqrt(v20 / v22) * 255.0);
        if (v24 >= 255) {
          int v25 = 255;
        }
        else {
          int v25 = v24;
        }
        if (v24) {
          BOOL v26 = 1;
        }
        else {
          BOOL v26 = v20 / v22 <= 0.0;
        }
        int v27 = v25 << 23;
        if (!v26) {
          int v27 = 0x800000;
        }
        *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
        ++v17;
        uint64_t v3 = *a2;
        uint64_t v28 = a2[1];
        v16 += 24;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
      if (v28 != v3)
      {
        unint64_t v29 = 0;
        do
        {
          std::string::size_type v30 = 0;
          int v31 = (const std::string *)(v3 + 24 * v29);
          while (1)
          {
            std::string::size_type v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                ? v31->__r_.__value_.__l.__size_
                : HIBYTE(v31->__r_.__value_.__r.__words[2]);
            if (v30 >= v32 - 1) {
              break;
            }
            std::string::basic_string(&v65, v31, 0, v30, (std::allocator<char> *)&v71);
            uint64_t v33 = v31;
            if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0) {
              uint64_t v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
            }
            sub_19E0B6B6C((uint64_t)&__str, (const void **)&v65.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
            if (&v67 == sub_19E05E980((uint64_t)&v66, &__str))
            {
              double v34 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &v65);
              if (v34 > *(double *)sub_19E0B6A0C((uint64_t)&v69, &__str))
              {
                double v35 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &__str);
                std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = __str.__r_.__value_.__l.__size_;
                }
                std::string::basic_string(&v71, &__str, 0, size - 1, (std::allocator<char> *)v72);
                double v37 = *(double *)sub_19E0B6A0C((uint64_t)&v69, &v71);
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v71.__r_.__value_.__l.__data_);
                }
                size_t v38 = sub_19E0BB234((uint64_t **)&v66, &__str, (uint64_t)&__str);
                int v39 = (int)(sqrt(v35 / v37) * 255.0);
                if (v39 >= 255) {
                  int v40 = 255;
                }
                else {
                  int v40 = v39;
                }
                if (v39) {
                  BOOL v41 = 1;
                }
                else {
                  BOOL v41 = v35 / v37 <= 0.0;
                }
                int v42 = (v40 << 23) | 0x7FFFFF;
                if (!v41) {
                  int v42 = 0xFFFFFF;
                }
                *((_DWORD *)v38 + 14) = v42;
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v65.__r_.__value_.__l.__data_);
            }
            ++v30;
          }
          ++v29;
          uint64_t v3 = *a2;
        }
        while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      }
    }
    uint64_t v5 = a1;
  }
  memset(&v71, 0, sizeof(v71));
  memset(&v65, 0, sizeof(v65));
  uint64_t v43 = (uint64_t *)v66;
  if (v66 != (std::string *)&v67)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    std::string::size_type v46 = 0;
    do
    {
      uint64_t v47 = (long long *)(v43 + 4);
      uint64_t v48 = (_OWORD *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_ >= v71.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v50 = sub_19E0B6BF0((uint64_t *)&v71, v47);
      }
      else
      {
        if (*((char *)v43 + 55) < 0)
        {
          sub_19E03FA9C((unsigned char *)v71.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
        }
        else
        {
          long long v49 = *v47;
          *(void *)(v71.__r_.__value_.__l.__size_ + 16) = v43[6];
          *uint64_t v48 = v49;
        }
        std::string::size_type v50 = (std::string::size_type)v48 + 24;
      }
      v71.__r_.__value_.__l.__size_ = v50;
      if ((unint64_t)v44 >= v46)
      {
        uint64_t v51 = (v44 - v45) >> 2;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v46 - (void)v45) >> 1 > v52) {
          unint64_t v52 = (uint64_t)(v46 - (void)v45) >> 1;
        }
        if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53) {
          unint64_t v53 = (unint64_t)sub_19E068D84(v53);
        }
        else {
          uint64_t v54 = 0;
        }
        uint64_t v55 = (char *)(v53 + 4 * v51);
        *(_DWORD *)uint64_t v55 = *((_DWORD *)v43 + 14);
        std::string::size_type v56 = (std::string::size_type)(v55 + 4);
        while (v44 != v45)
        {
          int v57 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v55 - 1) = v57;
          v55 -= 4;
        }
        std::string::size_type v46 = v53 + 4 * v54;
        v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v65.__r_.__value_.__l.__size_ = v56;
        v65.__r_.__value_.__r.__words[2] = v46;
        if (v45) {
          operator delete(v45);
        }
        unint64_t v45 = v55;
        uint64_t v44 = (char *)v56;
      }
      else
      {
        *(_DWORD *)uint64_t v44 = *((_DWORD *)v43 + 14);
        v44 += 4;
      }
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
      uint64_t v58 = (char *)v43[1];
      if (v58)
      {
        do
        {
          uint64_t v59 = (char **)v58;
          uint64_t v58 = *(char **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          uint64_t v59 = (char **)v43[2];
          BOOL v60 = *v59 == (char *)v43;
          uint64_t v43 = (uint64_t *)v59;
        }
        while (!v60);
      }
      uint64_t v43 = (uint64_t *)v59;
    }
    while (v59 != &v67);
  }
  BOOL v61 = sub_19E0CBB0C(v5 + 8, (uint64_t *)&v71, &v65);
  if (v65.__r_.__value_.__r.__words[0]) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  sub_19E041AD0((void ***)&v65);
  sub_19E0672C4(v67);
LABEL_96:
  sub_19E0672C4(v70[0]);
  return v61;
}

void sub_19E0CDAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  __n128 __p = &a28;
  sub_19E041AD0(&__p);
  sub_19E0672C4(a23);
  sub_19E0672C4(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0CDBC0(uint64_t a1, void *a2)
{
  __n128 __p = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v8 = (v5 - v3) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v4 - (void)v3) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v4 - (void)v3) >> 1;
        }
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_19E068D84(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        std::string::size_type v12 = (_DWORD *)(v10 + 4 * v8);
        *std::string::size_type v12 = v6;
        uint64_t v7 = v12 + 1;
        while (v5 != v3)
        {
          int v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--std::string::size_type v12 = v13;
        }
        unint64_t v4 = v10 + 4 * v11;
        __n128 __p = v12;
        unint64_t v19 = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)uint64_t v5 = v6;
        uint64_t v7 = v5 + 4;
      }
      uint64_t v18 = v7;
      ++v6;
      uint64_t v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19E0CDD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0CDD60@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_19E057A94(a2, *(void **)(a1 + 16), 8 * *(void *)(a1 + 32));
}

void *sub_19E0CDD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A0768;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0CDE18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0CDE2C()
{
  return &unk_1EF0A07C8;
}

uint64_t sub_19E0CDE38(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A07C8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0CDE78(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0CDE9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A0768;
  a2[1] = v2;
  return result;
}

void *sub_19E0CDEC0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A0768;
  result[1] = v3;
  return result;
}

void sub_19E0CDF08()
{
}

void *sub_19E0CDF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A06E8;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E0B5B00(v5);
}

void sub_19E0CDFC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B5B00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0CDFD8()
{
  return &unk_1EF0A0748;
}

uint64_t sub_19E0CDFE4(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A0748)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0CE024(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0CE048(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A06E8;
  a2[1] = v2;
  return result;
}

void *sub_19E0CE06C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A06E8;
  result[1] = v3;
  return result;
}

void sub_19E0CE0B4()
{
}

uint64_t sub_19E0CE0CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0CE128(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  __n128 __p = 0;
  BOOL v41 = 0;
  unint64_t v42 = 0;
  if (a2)
  {
    uint64_t v8 = a2;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      int v13 = *(void **)(a3 + 8 * i);
      size_t v14 = *(void *)(a4 + 8 * i);
      size_t v38 = v14;
      int v39 = v13;
      uint64_t v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        uint64_t v16 = (void *)sub_19E0B5820(&v43, &v39, &v38);
      }
      else
      {
        sub_19E057A94(v44, v13, v14);
        uint64_t v16 = v15 + 3;
      }
      uint64_t v44 = v16;
      if (a5)
      {
        uint64_t v17 = *(void *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v19 = v10;
          uint64_t v20 = a5;
          uint64_t v21 = v8;
          uint64_t v22 = a3;
          uint64_t v23 = a4;
          uint64_t v24 = (v11 - v9) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            sub_19E041BEC();
          }
          unint64_t v26 = v19 - (void)v9;
          unint64_t v27 = (uint64_t)(v19 - (void)v9) >> 1;
          if (v27 > v25) {
            unint64_t v25 = v27;
          }
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v25;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_19E068D84(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          std::string::size_type v30 = (_DWORD *)(v28 + 4 * v24);
          *std::string::size_type v30 = v17;
          uint64_t v18 = v30 + 1;
          while (v11 != v9)
          {
            int v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--std::string::size_type v30 = v31;
          }
          __n128 __p = v30;
          BOOL v41 = v18;
          unint64_t v32 = v28 + 4 * v29;
          unint64_t v42 = v32;
          if (v9) {
            operator delete(v9);
          }
          unint64_t v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          uint64_t v8 = v21;
          a5 = v20;
          unint64_t v10 = v32;
        }
        else
        {
          *(_DWORD *)uint64_t v11 = v17;
          uint64_t v18 = v11 + 4;
        }
        BOOL v41 = v18;
        uint64_t v11 = (char *)v18;
      }
    }
  }
  uint64_t v33 = *a1;
  if (a5) {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 64))();
  }
  else {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 56))();
  }
  uint64_t v35 = v34;
  if (__p)
  {
    BOOL v41 = __p;
    operator delete(__p);
  }
  __n128 __p = &v43;
  sub_19E041AD0((void ***)&__p);
  return v35;
}

void sub_19E0CE34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __n128 __p = &a16;
  sub_19E041AD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E0CE390(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A0328;
  sub_19E0672C4(*(char **)(a1 + 120));
  *(void *)(a1 + 8) = &unk_1EF0A0400;
  sub_19E0CA6D4(a1 + 16);

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0CE420(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A0328;
  sub_19E0672C4(*(char **)(a1 + 120));
  *(void *)(a1 + 8) = &unk_1EF0A0400;
  sub_19E0CA6D4(a1 + 16);
  return a1;
}

void *sub_19E0CE490()
{
  return &unk_1EF099638;
}

uint64_t sub_19E0CE49C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF099638)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t *sub_19E0CE4DC(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = *(uint64_t ***)(a1 + 8);
  uint64_t result = (uint64_t *)sub_19E0B336C((uint64_t)v3, a2);
  if (v3 + 1 == (uint64_t **)result)
  {
    int v5 = 0;
    return sub_19E0B3D34(v3, a2, a2, &v5);
  }
  return result;
}

uint64_t sub_19E0CE53C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A068;
  a2[1] = v2;
  return result;
}

void *sub_19E0CE560(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A068;
  result[1] = v3;
  return result;
}

void sub_19E0CE5A8()
{
}

void sub_19E0CE5C0(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  if (*(unsigned __int16 *)a1 >= 0xFu && a1[1])
  {
    JUMPOUT(0x19F3BA6E0);
  }
}

uint64_t sub_19E0CE640()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 112))(v0);
  if (!result) {
    return result;
  }
  char v7 = *((unsigned char *)v4 + 24);
  int v8 = *v4;
  unsigned int v9 = HIBYTE(*v4) & 3;
  if (v7 + 1 <= v9)
  {
    LODWORD(__dst[0]) = *v4;
    __dst[1] = *((void *)v4 + 1);
    LODWORD(__dst[2]) = v4[4];
    char v11 = v7 + 1;
    LOBYTE(__dst[3]) = v11;
    if (v9 >= v11) {
      char v12 = *((unsigned char *)&__dst[2] + v11);
    }
    else {
      char v12 = 0;
    }
    return sub_19E0BBF30(*(void *)(v2 + 24), v12);
  }
  else
  {
    unsigned int v10 = v8 & 0xFFFFFF;
    if ((v8 & 0xFFFFFF) != 0)
    {
      if (v10 < *(_DWORD *)(v5 + 84)) {
        __assert_rtn("enumerateChildren", "PatriciaTrie.h", 275, "cursor.isRoot() || firstChildOffset >= m_trieRootOffset");
      }
    }
    else
    {
      if (*((unsigned char *)v4 + 24)) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v8 == 0;
      }
      if (!v13 || *((unsigned char *)v4 + 16) != 0) {
        return result;
      }
      unsigned int v10 = 0;
    }
    uint64_t v15 = sub_19E0BBF80(v5, v10);
    uint64_t result = (uint64_t)memcpy(__dst, v15, 0x10CuLL);
    unint64_t v16 = 0x1FFFFFFFFFFFFD00;
    do
    {
      uint64_t v17 = &__dst[v16];
      *((_DWORD *)v17 + 1604) = v15[v16 + 802];
      v17[803] = v15[v16 + 803];
      *((_DWORD *)v17 + 1608) = v15[v16 + 804];
      v16 += 3;
    }
    while (v16 * 8);
    long long v25 = *((_OWORD *)v15 + 401);
    uint64_t v26 = v15[804];
    unsigned int v18 = __dst[1];
    if (LODWORD(__dst[1]))
    {
      unsigned int v19 = 0;
      do
      {
        uint64_t v20 = &__dst[3 * *((unsigned __int8 *)&__dst[1] + (int)v19 + 4)];
        int v21 = *((_DWORD *)v20 + 68);
        uint64_t v22 = v20[35];
        if ((v21 & 0x10FFFFFF) != 0x10000000 || (v22 & 0xFF00000000) != 0) {
          uint64_t result = sub_19E0BBF30(*(void *)(v2 + 24), __dst[3 * *((unsigned __int8 *)&__dst[1] + (int)v19 + 4) + 36]);
        }
        ++v19;
      }
      while (v19 < v18);
    }
  }
  return result;
}

void sub_19E0CE8A4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  memset(&v8, 0, sizeof(v8));
  std::string::reserve(&v8, 0x40uLL);
  sub_19E0CE938(a1, a2, (uint64_t)&v8, a3, a4);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_19E0CE91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0CE938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  v19[4] = *MEMORY[0x1E4F143B8];
  unsigned int v18 = a5;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if (result)
  {
    int v17 = 0;
    char v16 = 0;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 128))(a1, a2, &v17);
    if (!result
      || ((v11 = *(char *)(a3 + 23), v11 >= 0) ? (uint64_t v12 = a3) : (uint64_t v12 = *(void *)a3),
          v11 >= 0 ? (uint64_t v13 = *(unsigned __int8 *)(a3 + 23)) : (uint64_t v13 = *(void *)(a3 + 8)),
          uint64_t result = (void *)sub_19E0B5BE8(*(void *)(a4 + 24), v17, v12, v13, (uint64_t)&v16),
          !v16))
    {
      if ((a5 & 0x80000000) != 0) {
        goto LABEL_14;
      }
      unint64_t v14 = *(unsigned __int8 *)(a3 + 23);
      if ((v14 & 0x80u) != 0) {
        unint64_t v14 = *(void *)(a3 + 8);
      }
      if (v14 < a5)
      {
LABEL_14:
        uint64_t v15 = operator new(0x28uLL);
        *uint64_t v15 = &unk_1EF09E130;
        v15[1] = a3;
        void v15[2] = a1;
        v15[3] = a4;
        v15[4] = &v18;
        v19[3] = v15;
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v19);
        return sub_19E0BC298(v19);
      }
    }
  }
  return result;
}

void sub_19E0CEAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E0BC298((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0CEAF0()
{
  return &unk_1EF09E190;
}

uint64_t sub_19E0CEAFC(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09E190)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_19E0CEB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1 + 8;
  uint64_t v5 = *(std::string **)(a1 + 8);
  uint64_t v6 = *(void *)(v7 + 8);
  unsigned int v8 = *(char *)(a3 + 24);
  if ((*(unsigned char *)(a3 + 3) & 3u) >= v8) {
    std::string::value_type v9 = *(unsigned char *)(a3 + v8 + 16);
  }
  else {
    std::string::value_type v9 = 0;
  }
  std::string::push_back(v5, v9);
  uint64_t result = sub_19E0CE938(v6, a3, *(void *)(a1 + 8), *(void *)(a1 + 24), **(_DWORD **)(a1 + 32));
  int v11 = *(uint64_t **)(a1 + 8);
  if (*((char *)v11 + 23) < 0)
  {
    uint64_t v12 = v11[1] - 1;
    v11[1] = v12;
    int v11 = (uint64_t *)*v11;
  }
  else
  {
    uint64_t v12 = *((unsigned __int8 *)v11 + 23) - 1;
    *((unsigned char *)v11 + 23) = v12 & 0x7F;
  }
  *((unsigned char *)v11 + v12) = 0;
  return result;
}

__n128 sub_19E0CEBEC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF09E130;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0CEC1C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF09E130;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_19E0CEC70()
{
}

uint64_t sub_19E0CEC88(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if (result)
  {
    if (*(char *)(a2 + 24) + 1 <= (*(unsigned char *)(a2 + 3) & 3u))
    {
      return 0;
    }
    else
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *a3 = v6;
      return v6 != 0;
    }
  }
  return result;
}

uint64_t sub_19E0CED04@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v7 = *(_DWORD *)a2;
  *(_DWORD *)a5 = *(_DWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a5 + 8) = v8;
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a5 + 16) = v9;
  char v10 = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a5 + 24) = v10;
  if (a4)
  {
    uint64_t v11 = a4;
    uint64_t v13 = result;
    do
    {
      if (v10 == -1) {
        goto LABEL_17;
      }
      unsigned int v14 = *a3;
      if (v10 + 1 <= (HIBYTE(v7) & 3))
      {
        uint64_t result = sub_19E0BC6E0(a5);
        if (result != v14) {
          goto LABEL_16;
        }
        unsigned int v7 = *(_DWORD *)a5;
        uint64_t v8 = *(void *)(a5 + 8);
        unsigned int v9 = *(_DWORD *)(a5 + 16);
        char v10 = *(unsigned char *)(a5 + 24) + 1;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 112))(v13, a5);
        if (!result) {
          goto LABEL_16;
        }
        unsigned int v15 = *(_DWORD *)a5;
        if (*(char *)(a5 + 24) + 1 <= (HIBYTE(*(_DWORD *)a5) & 3u)) {
          __assert_rtn("advanceCursorToChildNode", "PatriciaTrie.h", 378, "!cursor.hasMorePatriciaKeyBytes()");
        }
        unsigned int v9 = v15 & 0xFFFFFF;
        if ((v15 & 0xFFFFFF) != 0) {
          goto LABEL_11;
        }
        uint64_t v8 = 0;
        char v10 = -1;
        if (*(unsigned char *)(a5 + 24) || v15)
        {
          unsigned int v7 = v15 & 0xFFFFFF;
          goto LABEL_18;
        }
        unsigned int v7 = 0;
        if (!*(unsigned char *)(a5 + 16))
        {
LABEL_11:
          uint64_t result = (uint64_t)sub_19E0BBF80(v13, v9);
          unsigned int v7 = *(_DWORD *)(result + 24 * v14 + 272);
          if (!v7 && !*(unsigned char *)(result + 24 * v14 + 288))
          {
LABEL_16:
            unsigned int v9 = 0;
            uint64_t v8 = 0;
            unsigned int v7 = 0;
LABEL_17:
            char v10 = -1;
            goto LABEL_18;
          }
          char v10 = 0;
          uint64_t v16 = result + 24 * v14;
          uint64_t v8 = *(void *)(v16 + 280);
          unsigned int v9 = *(_DWORD *)(v16 + 288);
        }
      }
LABEL_18:
      *(_DWORD *)a5 = v7;
      *(void *)(a5 + 8) = v8;
      *(_DWORD *)(a5 + 16) = v9;
      ++a3;
      *(unsigned char *)(a5 + 24) = v10;
      --v11;
    }
    while (v11);
  }
  return result;
}

BOOL sub_19E0CEEB4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 80)) {
    BOOL v2 = *(unsigned __int8 *)(a2 + 24) == 255;
  }
  else {
    BOOL v2 = 1;
  }
  return !v2;
}

void sub_19E0CEED0(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
}

void sub_19E0CEEE4(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 104))(v16);
  (*(void (**)(void *__return_ptr, uint64_t, void *, const void *, size_t))(*(void *)a1 + 120))(v19, a1, v16, a2, a3);
  LODWORD(v16[0]) = v19[0];
  v16[1] = v19[1];
  int v17 = v20;
  char v18 = (char)v21;
  if (v21 != 255)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E04147C();
    }
    if (a3 >= 0x17)
    {
      uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v11 = a3 | 7;
      }
      uint64_t v12 = v11 + 1;
      char v10 = operator new(v11 + 1);
      __p[1] = (void *)a3;
      unint64_t v15 = v12 | 0x8000000000000000;
      __p[0] = v10;
    }
    else
    {
      HIBYTE(v15) = a3;
      char v10 = __p;
      if (!a3)
      {
LABEL_10:
        *((unsigned char *)v10 + a3) = 0;
        uint64_t v13 = operator new(0x28uLL);
        void *v13 = &unk_1EF09E0B0;
        v13[1] = __p;
        v13[2] = a2;
        v13[3] = a3;
        v13[4] = a4;
        int v21 = v13;
        (*(void (**)(uint64_t, void *, void *, uint64_t))(*(void *)a1 + 136))(a1, v16, v19, a5);
        sub_19E0B5B00(v19);
        if (SHIBYTE(v15) < 0) {
          operator delete(__p[0]);
        }
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19E0CF0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_19E0CF110()
{
  return &unk_1EF09E110;
}

uint64_t sub_19E0CF11C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09E110)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0CF15C(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = a1[3];
  unint64_t v10 = v9 + v8;
  uint64_t v11 = a1[1];
  int v12 = *(char *)(v11 + 23);
  if (v12 < 0) {
    unint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    unint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  unsigned int v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    uint64_t v11 = a1[1];
    uint64_t v9 = a1[3];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
  uint64_t v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    uint64_t v11 = a1[1];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
LABEL_9:
  int v16 = *a2;
  if ((v12 & 0x80) != 0) {
    uint64_t v11 = *(void *)v11;
  }
  uint64_t v17 = *(void *)(a1[4] + 24);

  return sub_19E0B5BE8(v17, v16, v11, v10, a4);
}

__n128 sub_19E0CF24C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF09E0B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0CF27C(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x28uLL);
  *(void *)BOOL v2 = &unk_1EF09E0B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_19E0CF2D0()
{
}

void *sub_19E0CF2E8(void *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    unsigned int v7 = result;
    char v18 = 0;
    (*(void (**)(void *__return_ptr))(*result + 104))(v15);
    uint64_t v8 = 0;
    int v14 = 0;
    while (1)
    {
      __n128 result = (*(void *(**)(void *__return_ptr, void *, void *, uint64_t, uint64_t))(*v7 + 120))(v11, v7, v15, a2 + v8, 1);
      LODWORD(v15[0]) = v11[0];
      v15[1] = v11[1];
      int v16 = v12;
      unsigned __int8 v17 = v13;
      if (v13 == 255) {
        break;
      }
      __n128 result = (void *)(*(uint64_t (**)(void *, void *, int *))(*v7 + 128))(v7, v15, &v14);
      if (result)
      {
        unint64_t v9 = v8 + 1;
        if (a3 >= v8 + 1) {
          uint64_t v10 = v8 + 1;
        }
        else {
          uint64_t v10 = a3;
        }
        __n128 result = (void *)sub_19E0B5BE8(*(void *)(a4 + 24), v14, a2, v10, (uint64_t)&v18);
        if (v18) {
          return result;
        }
        ++v8;
        if (v9 >= a3) {
          return result;
        }
      }
      else if (++v8 >= a3)
      {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_19E0CF440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 104))(v9);
  (*(void (**)(void *__return_ptr, uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 120))(v10, a1, v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v10, a4);
}

uint64_t sub_19E0CF50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a3;
  uint64_t result = sub_19E05C8F8(a2, a3, 68, (_DWORD *)(a1 + 84));
  if (result)
  {
    int v8 = 0;
    uint64_t result = sub_19E05C8F8(*(void *)(a1 + 32), *(void *)(a1 + 40), 40, &v8);
    if (result)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = v8;
      *(_DWORD *)(a1 + 6504) = v8;
      *(void *)(a1 + 6512) = v5;
      *(void *)(a1 + 6520) = v6;
      *(_DWORD *)(a1 + 12944) = v7;
      *(void *)(a1 + 12952) = v5;
      *(void *)(a1 + 12960) = v6;
      *(unsigned char *)(a1 + 80) = 1;
    }
  }
  return result;
}

void sub_19E0CF590(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) == (uint64_t)(a3[1] - *a3) >> 2)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    if (v4 != v3)
    {
      unint64_t v7 = 0;
      do
      {
        memset(v27, 0, sizeof(v27));
        *(_OWORD *)uint64_t v26 = 0u;
        LODWORD(v25) = *(_DWORD *)(*a3 + 4 * v7);
        HIDWORD(v25) = v7;
        int v8 = (char *)(v3 + 24 * v7);
        if (v8[23] < 0)
        {
          int v8 = *(char **)v8;
          unint64_t v9 = *(void *)(v3 + 24 * v7 + 8);
        }
        else
        {
          unint64_t v9 = v8[23];
        }
        sub_19E05B100(v26, v8, &v8[v9], v9);
        uint64_t v10 = v27[1];
        unint64_t v11 = v27[2];
        if (v9 <= v27[2] - v27[1])
        {
          if (v9 < v27[2] - v27[1])
          {
            unint64_t v11 = v27[1] + v9;
            _OWORD v27[2] = v27[1] + v9;
          }
        }
        else
        {
          sub_19E07C4B4(&v27[1], v9 - (v27[2] - v27[1]));
          uint64_t v10 = v27[1];
          unint64_t v11 = v27[2];
        }
        if (v10 != v11)
        {
          uint64_t v12 = 0;
          do
          {
            *(unsigned char *)(v10 + v12) = v12;
            ++v12;
          }
          while (v10 + v12 != v11);
        }
        *(void *)unint64_t v28 = 0x3FF0000000000000;
        *(_DWORD *)&v28[8] = 1;
        v28[12] = 0;
        unsigned __int8 v13 = v23;
        if ((unint64_t)v23 >= v24)
        {
          unint64_t v15 = 0x8E38E38E38E38E39 * (((uint64_t)v23 - v22) >> 3);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x38E38E38E38E38ELL) {
            sub_19E041BEC();
          }
          if (0x1C71C71C71C71C72 * ((uint64_t)(v24 - v22) >> 3) > v16) {
            unint64_t v16 = 0x1C71C71C71C71C72 * ((uint64_t)(v24 - v22) >> 3);
          }
          if (0x8E38E38E38E38E39 * ((uint64_t)(v24 - v22) >> 3) >= 0x1C71C71C71C71C7) {
            unint64_t v17 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v17 = v16;
          }
          v29[4] = &v24;
          if (v17) {
            char v18 = (char *)sub_19E05CED0((uint64_t)&v24, v17);
          }
          else {
            char v18 = 0;
          }
          unsigned int v19 = &v18[72 * v15];
          v29[0] = v18;
          v29[1] = v19;
          v29[3] = &v18[72 * v17];
          *(void *)unsigned int v19 = v25;
          *((void *)v19 + 1) = 0;
          *((void *)v19 + 2) = 0;
          *((void *)v19 + 3) = 0;
          *(_OWORD *)(v19 + 8) = *(_OWORD *)v26;
          *((void *)v19 + 3) = v27[0];
          v26[0] = 0;
          v26[1] = 0;
          v27[0] = 0;
          *((void *)v19 + 4) = 0;
          *((void *)v19 + 5) = 0;
          *((void *)v19 + 6) = 0;
          *((_OWORD *)v19 + 2) = *(_OWORD *)&v27[1];
          *((void *)v19 + 6) = v27[3];
          memset(&v27[1], 0, 24);
          uint64_t v20 = *(void *)v28;
          *(void *)(v19 + 61) = *(void *)&v28[5];
          *((void *)v19 + 7) = v20;
          v29[2] = v19 + 72;
          sub_19E0BD220(&v22, v29);
          int v21 = v23;
          sub_19E0BD2E0((uint64_t)v29);
          uint64_t v23 = v21;
          if (v27[1])
          {
            _OWORD v27[2] = v27[1];
            operator delete((void *)v27[1]);
          }
        }
        else
        {
          void *v23 = v25;
          v13[1] = 0;
          v13[3] = 0;
          v13[4] = 0;
          v13[2] = 0;
          *(_OWORD *)(v13 + 1) = *(_OWORD *)v26;
          v13[3] = v27[0];
          v26[0] = 0;
          v26[1] = 0;
          v27[0] = 0;
          v13[5] = 0;
          v13[6] = 0;
          *((_OWORD *)v13 + 2) = *(_OWORD *)&v27[1];
          v13[6] = v27[3];
          memset(&v27[1], 0, 24);
          uint64_t v14 = *(void *)v28;
          *(void *)((char *)v13 + 61) = *(void *)&v28[5];
          v13[7] = v14;
          uint64_t v23 = v13 + 9;
        }
        if (v26[0])
        {
          v26[1] = v26[0];
          operator delete(v26[0]);
        }
        ++v7;
        uint64_t v3 = *a2;
      }
      while (v7 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    }
    sub_19E0B3AA4();
  }
  __assert_rtn("build", "PatriciaTrie.h", 140, "keys.size() == values.size()");
}

void sub_19E0CF8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E05D1BC((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0CF918(uint64_t a1, void *a2)
{
  __n128 __p = 0;
  char v18 = 0;
  unint64_t v19 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    LODWORD(v6) = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v8 = (v5 - v3) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v4 - (void)v3) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v4 - (void)v3) >> 1;
        }
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_19E068D84(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = (_DWORD *)(v10 + 4 * v8);
        *uint64_t v12 = v6;
        unint64_t v7 = v12 + 1;
        while (v5 != v3)
        {
          int v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--uint64_t v12 = v13;
        }
        unint64_t v4 = v10 + 4 * v11;
        __n128 __p = v12;
        unint64_t v19 = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)uint64_t v5 = v6;
        unint64_t v7 = v5 + 4;
      }
      char v18 = v7;
      unint64_t v6 = (v6 + 1);
      uint64_t v5 = (char *)v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) >= v6);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    char v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19E0CFA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0CFAB8(uint64_t a1)
{
  sub_19E0B3BF8(a1);

  JUMPOUT(0x19F3BA710);
}

void *sub_19E0CFAF4()
{
  return &unk_1EF099618;
}

uint64_t sub_19E0CFB00(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF099618)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void sub_19E0CFB40(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6 + 8 != sub_19E0B336C(v6, a2)) {
    return;
  }
  long long v49 = 0;
  long long v47 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  *(_OWORD *)std::string::size_type v46 = 0u;
  unint64_t v7 = *a2;
  if (v7 <= 0xE) {
    uint64_t v8 = (char *)(a2 + 1);
  }
  else {
    uint64_t v8 = (char *)*((void *)a2 + 1);
  }
  sub_19E05B100(&v46[1], v8, &v8[v7], v7);
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v9 = *(void *)(a1 + 16);
  memset(v61, 0, sizeof(v61));
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  BOOL v60 = 0;
  sub_19E039858((uint64_t)v62, a3);
  unsigned int v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  for (i = 0; ; unsigned int v10 = HIWORD(i))
  {
    unsigned int v13 = v63;
    if (!v63)
    {
      sub_19E0398F4(v62);
      unsigned int v13 = v63;
    }
    if (v10 >= v13) {
      break;
    }
    char v14 = v61[0];
    if (v12 >= v60)
    {
      unint64_t v15 = (unint64_t)v58;
      unint64_t v16 = (unsigned char *)(v12 - v58);
      uint64_t v17 = v12 - v58 + 1;
      if (v17 < 0) {
        sub_19E041BEC();
      }
      unint64_t v18 = v60 - v58;
      if (2 * (v60 - v58) > (unint64_t)v17) {
        uint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v19 = v17;
      }
      if (v19) {
        uint64_t v20 = (char *)operator new(v19);
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v11 = &v16[(void)v20];
      int v21 = &v16[(void)v20];
      unsigned char *v21 = v14;
      uint64_t v22 = v21 + 1;
      if (v12 != (char *)v15)
      {
        uint64_t v23 = &v12[~v15];
        do
        {
          char v24 = *--v12;
          (v23--)[(void)v20] = v24;
        }
        while (v12 != (char *)v15);
        uint64_t v12 = v58;
        uint64_t v11 = v20;
      }
      uint64_t v58 = v11;
      uint64_t v59 = v22;
      BOOL v60 = &v20[v19];
      if (v12) {
        operator delete(v12);
      }
      uint64_t v12 = v22;
    }
    else
    {
      *v12++ = v61[0];
    }
    uint64_t v59 = v12;
    uint64_t v25 = sub_19E0DE8C0((uint64_t)v62);
    sub_19E08D1E0(&v57, v9, v25);
    sub_19E03EB40((uint64_t)&v53, v9, (uint64_t)v61, v25, (unsigned __int16 *)&v57);
    if (LOWORD(v61[0]) >= 0xFu && *((void *)&v61[0] + 1)) {
      MEMORY[0x19F3BA6E0](*((void *)&v61[0] + 1), 0x1000C8077774924);
    }
    v61[0] = v53;
    if ((unsigned __int16)v53 >= 0xFu) {
      LOWORD(v53) = 0;
    }
    LOBYTE(v61[1]) = v54;
    if (WORD4(v61[1]) >= 0xFu && *(void *)&v61[2]) {
      MEMORY[0x19F3BA6E0](*(void *)&v61[2], 0x1000C8077774924);
    }
    *(_OWORD *)((char *)&v61[1] + 8) = v55;
    if ((unsigned __int16)v55 >= 0xFu) {
      LOWORD(v55) = 0;
    }
    DWORD2(v61[2]) = v56;
    if ((unsigned __int16)v53 >= 0xFu && *((void *)&v53 + 1)) {
      MEMORY[0x19F3BA6E0](*((void *)&v53 + 1), 0x1000C8077774924);
    }
    if (v57.n128_u16[0] >= 0xFu)
    {
      if (v57.n128_u64[1]) {
        MEMORY[0x19F3BA6E0](v57.n128_u64[1], 0x1000C8077774924);
      }
    }
  }
  long long v44 = 0uLL;
  unint64_t v45 = 0;
  if (v12 == v11)
  {
    if (v65 && v64 == 1) {
      free(v65);
    }
    uint64_t v41 = v42;
    int v40 = v43;
    if (!v11) {
      goto LABEL_80;
    }
  }
  else
  {
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    unint64_t v31 = 0;
    do
    {
      if (v31 <= v11[v30])
      {
        do
        {
          unint64_t v32 = v31;
          if (v29 >= v28)
          {
            uint64_t v33 = (uint64_t)&v29[-v27 + 1];
            if (v33 < 0) {
              sub_19E041BEC();
            }
            if (2 * (uint64_t)&v28[-v27] > (unint64_t)v33) {
              uint64_t v33 = 2 * (void)&v28[-v27];
            }
            if ((unint64_t)&v28[-v27] >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v34 = v33;
            }
            if (v34) {
              uint64_t v35 = (char *)operator new(v34);
            }
            else {
              uint64_t v35 = 0;
            }
            long long v36 = &v29[(void)v35 - v27];
            char *v36 = v30;
            uint64_t v26 = v36 + 1;
            if (v29 != (char *)v27)
            {
              double v37 = &v29[~v27];
              do
              {
                char v38 = *--v29;
                (v37--)[(void)v35] = v38;
              }
              while (v29 != (char *)v27);
              long long v36 = v35;
            }
            unint64_t v28 = &v35[v34];
            if (v27) {
              operator delete((void *)v27);
            }
            unint64_t v27 = (unint64_t)v36;
          }
          else
          {
            char *v29 = v30;
            uint64_t v26 = v29 + 1;
          }
          unint64_t v31 = v32 + 1;
          uint64_t v11 = v58;
          uint64_t v29 = v26;
        }
        while (v32 < v58[v30]);
        uint64_t v12 = v59;
        uint64_t v29 = v26;
      }
      ++v30;
    }
    while (v30 < v12 - v11);
    *((void *)&v44 + 1) = v26;
    unint64_t v45 = v28;
    *(void *)&long long v44 = v27;
    if (v65) {
      BOOL v39 = v64 == 1;
    }
    else {
      BOOL v39 = 0;
    }
    if (v39) {
      free(v65);
    }
    uint64_t v41 = v42;
    int v40 = v43;
  }
  uint64_t v59 = v11;
  operator delete(v11);
LABEL_80:
  if (WORD4(v61[1]) >= 0xFu && *(void *)&v61[2]) {
    MEMORY[0x19F3BA6E0](*(void *)&v61[2], 0x1000C8077774924);
  }
  if (LOWORD(v61[0]) >= 0xFu && *((void *)&v61[0] + 1)) {
    MEMORY[0x19F3BA6E0](*((void *)&v61[0] + 1), 0x1000C8077774924);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__n128 __p = v44;
  long long v49 = v45;
  uint64_t v50 = 0;
  int v51 = 0;
  char v52 = 0;
  sub_19E0B38DC(*(uint64_t ***)(v41 + 8), v40, v40, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v46[1])
  {
    *(void **)&long long v47 = v46[1];
    operator delete(v46[1]);
  }
}

void sub_19E0D0060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,__int16 a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (*(unsigned __int16 *)(v33 - 168) >= 0xFu)
  {
    uint64_t v35 = *(void *)(v33 - 160);
    if (v35) {
      MEMORY[0x19F3BA6E0](v35, 0x1000C8077774924);
    }
  }
  if (*(unsigned __int16 *)(v33 - 192) >= 0xFu)
  {
    uint64_t v36 = *(void *)(v33 - 184);
    if (v36) {
      MEMORY[0x19F3BA6E0](v36, 0x1000C8077774924);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_19E0D0180(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF099FB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0D01A8(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x18uLL);
  *(void *)BOOL v2 = &unk_1EF099FB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0D01F4()
{
}

void sub_19E0D020C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_19E0CE5C0(v1 + 4);
    }
    operator delete(v1);
  }
}

void *sub_19E0D0264()
{
  return &unk_1EF099628;
}

uint64_t sub_19E0D0270(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF099628)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t *sub_19E0D02B0(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = *(uint64_t ***)(a1 + 8);
  __n128 result = (uint64_t *)sub_19E0B336C((uint64_t)v3, a2);
  if (v3 + 1 == (uint64_t **)result)
  {
    int v5 = 0;
    return sub_19E0B33E8(v3, a2, a2, &v5);
  }
  return result;
}

uint64_t sub_19E0D0310(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A010;
  a2[1] = v2;
  return result;
}

void *sub_19E0D0334(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A010;
  result[1] = v3;
  return result;
}

void sub_19E0D037C()
{
}

void sub_19E0D0394(uint64_t a1, const __CFString *a2)
{
  sub_19E039E88(a2, &__p);
  operator new();
}

void sub_19E0D0538()
{
}

void sub_19E0D054C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2) {
    munmap(v2, *(void *)(a1 + 8));
  }
  *(void *)(a1 + 8) = 0;

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0D05A8(uint64_t *a1, void *a2, unint64_t a3)
{
  if (a3 >= 0xF)
  {
    if (*a2 == 0x2065766F6C206557 && *(void *)((char *)a2 + 7) == 0x2E61736972614D20)
    {
      sub_19E0421E0(a1 + 2, (uint64_t)a2, a3);
      return 1;
    }
  }
  else if (a3 < 4)
  {
    return 0;
  }
  unint64_t v7 = (char *)a2 + 4;
  uint64_t v8 = *(unsigned int *)a2;
  sub_19E0421E0(a1 + 2, (uint64_t)a2 + 4, v8);
  a1[3] = (uint64_t)&v7[v8];
  a1[4] = (a3 - v8 - 4) >> 3;
  return 1;
}

void sub_19E0D0664(std::ios_base::failure *a1, const void **a2, uint64_t a3, unsigned int a4)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  uint64_t v9 = &v19;
  sub_19E0A3A9C((uint64_t)&v19, v8 + 13);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v10 = a2;
    }
    else {
      unsigned int v10 = *a2;
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, " failed for '");
  int v11 = *(char *)(a3 + 23);
  if (v11 >= 0) {
    uint64_t v12 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v12 = *(const std::string::value_type **)a3;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a3 + 8);
  }
  char v14 = std::string::append(&v19, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  unint64_t v16 = std::string::append(&v20, "'", 1uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __msg.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  *(void *)&__ec.__val_ = a4;
  __ec.__cat_ = std::generic_category();
  std::ios_base::failure::failure(a1, &__msg, &__ec);
  if (SHIBYTE(__msg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__msg.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_19E0D07CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0D0818(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  __n128 result = (void *)(*(uint64_t (**)(unint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    v9[0] = &unk_1EF098AD0;
    v9[1] = a1;
    v9[2] = a3;
    v9[3] = v9;
    sub_19E0427A4(a1 + 2, a2, (uint64_t)v9, a4);
    return sub_19E0B43E4(v9);
  }
  return result;
}

void sub_19E0D08E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0D08FC()
{
  return &unk_1EF0985A8;
}

uint64_t sub_19E0D0908(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0985A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0D0948(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  unint64_t v8 = sub_19E0D09A8(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(a1 + 16);

  return sub_19E0447D4(v9, v8, v6, v7, a4);
}

unint64_t sub_19E0D09A8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (v2 <= a2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_19E062A78(exception, "Marisa Payload");
      __cxa_throw(exception, (struct type_info *)off_1E599B428, MEMORY[0x1E4FBA1D0]);
    }
    return *(void *)(*(void *)(a1 + 24) + 8 * a2);
  }
  return a2;
}

void sub_19E0D0A18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_19E0D0A34(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF098AD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0D0A5C(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1EF098AD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0D0AA8()
{
}

void *sub_19E0D0AC0()
{
  return &unk_1EF098598;
}

uint64_t sub_19E0D0ACC(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF098598)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

std::string *sub_19E0D0B0C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  __n128 result = sub_19E069160(*(std::string **)(a1 + 8), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  *a4 = 1;
  return result;
}

uint64_t sub_19E0D0B48(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF098A78;
  a2[1] = v2;
  return result;
}

void *sub_19E0D0B6C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF098A78;
  result[1] = v3;
  return result;
}

void sub_19E0D0BB4()
{
}

void *sub_19E0D0BCC()
{
  return &unk_1EF098588;
}

uint64_t sub_19E0D0BD8(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF098588)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

const void **sub_19E0D0C18(const void **result, uint64_t a2, unsigned __int8 **a3, BOOL *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a3[1];
  if (!v4) {
    __assert_rtn("operator()", "LXLemmatizerImpl.cpp", 126, "!posAndLemma.empty()");
  }
  if (**a3 <= 0xCu)
  {
    uint64_t v6 = result;
    sub_19E0B13C0((uint64_t)v8, (char *)*a3 + 1, (unsigned __int16)((_WORD)v4 - 1));
    sub_19E03FD18((CFStringRef *)&v7, v8);
    if (v10)
    {
      if (v9 == 1) {
        free(v10);
      }
    }
    (*(void (**)(void))(*(void *)v6[1] + 16))();
    *a4 = *(unsigned char *)v6[2] != 0;
    return sub_19E040A10(&v7);
  }
  return result;
}

void sub_19E0D0D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
}

__n128 sub_19E0D0D64(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF098A20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0D0D8C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF098A20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0D0DD8()
{
}

uint64_t sub_19E0D0DF0(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  __n128 __p = 0;
  uint64_t v23 = 0;
  char v24 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        unsigned int v10 = (uint64_t *)*v6;
        uint64_t v9 = v6[1];
      }
      else
      {
        uint64_t v9 = *((unsigned __int8 *)v6 + 23);
        unsigned int v10 = v6;
      }
      if (v8 >= v24)
      {
        uint64_t v12 = (v8 - v7) >> 4;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60) {
          sub_19E041BEC();
        }
        uint64_t v14 = v24 - v7;
        if ((v24 - v7) >> 3 > v13) {
          unint64_t v13 = v14 >> 3;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        unint64_t v16 = (char *)sub_19E063BBC(v15);
        unint64_t v18 = &v16[16 * v12];
        *(void *)unint64_t v18 = v10;
        *((void *)v18 + 1) = v9;
        std::string v19 = (char *)__p;
        uint64_t v7 = v18;
        if (v8 != __p)
        {
          do
          {
            *((_OWORD *)v7 - 1) = *((_OWORD *)v8 - 1);
            v7 -= 16;
            v8 -= 16;
          }
          while (v8 != v19);
          unint64_t v8 = v19;
        }
        uint64_t v11 = v18 + 16;
        __n128 __p = v7;
        char v24 = &v16[16 * v17];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *(void *)unint64_t v8 = v10;
        *((void *)v8 + 1) = v9;
        uint64_t v11 = v8 + 16;
      }
      uint64_t v23 = v11;
      v6 += 3;
      unint64_t v8 = (char *)v11;
    }
    while (v6 != a3);
  }
  sub_19E0420B8((uint64_t *)(a1 + 16), (uint64_t *)&__p, a4, *(_DWORD *)(a1 + 8));
  if (__p)
  {
    uint64_t v23 = __p;
    operator delete(__p);
  }
  return 1;
}

uint64_t sub_19E0D0FA0@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  sub_19E0538DC((uint64_t)v14);
  sub_19E04238C(a1 + 2, (uint64_t)&v15);
  sub_19E05EEA4(__p, (uint64_t)v16);
  uint64_t v4 = a1[4];
  if (v4)
  {
    int v5 = HIBYTE(v13);
    if (v13 < 0) {
      int v5 = (int)__p[1];
    }
    *(_DWORD *)char __s = v5;
    uint64_t v6 = (const std::string::value_type *)a1[3];
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    std::string::append(a2, __s, 4uLL);
    if (v13 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if (v13 >= 0) {
      std::string::size_type v8 = HIBYTE(v13);
    }
    else {
      std::string::size_type v8 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v7, v8);
    std::string::append(a2, v6, 8 * v4);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v13;
  }
  v14[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v15 = v9;
  v16[0] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19F3BA690](&v18);
}

void sub_19E0D11A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void *sub_19E0D11E4(void *a1)
{
  *a1 = &unk_1EF098618;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_19E0420B4(a1 + 2);
  return a1;
}

void *sub_19E0D123C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  __n128 result = (void *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    v7[0] = &unk_1EF098B28;
    v7[1] = a3;
    v7[3] = v7;
    sub_19E042830(a1 + 2, a2, (uint64_t)v7);
    return sub_19E0B4198(v7);
  }
  return result;
}

void sub_19E0D1304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B4198((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0D1318()
{
  return &unk_1EF0985B8;
}

uint64_t sub_19E0D1324(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0985B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0D1364(uint64_t a1, char *a2)
{
  return sub_19E044B84(*(void *)(a1 + 8), *a2);
}

uint64_t sub_19E0D1378(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF098B28;
  a2[1] = v2;
  return result;
}

void *sub_19E0D139C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF098B28;
  result[1] = v3;
  return result;
}

void sub_19E0D13E4()
{
}

uint64_t sub_19E0D13FC(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 112))(a1)) {
    return 0;
  }
  unint64_t v8 = 0;
  uint64_t v6 = sub_19E04245C(a1 + 2, a2, (uint64_t *)&v8);
  if (v6) {
    *a3 = sub_19E0D09A8((uint64_t)a1, v8);
  }
  return v6;
}

void sub_19E0D1494(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
}

BOOL sub_19E0D14AC(uint64_t a1, void *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

double sub_19E0D14C0@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void *sub_19E0D14CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  v6[0] = &unk_1EF098B80;
  v6[1] = a1;
  v6[2] = a4;
  v6[3] = v6;
  sub_19E04268C((unint64_t *)(a1 + 16), a2, a3, (uint64_t)v6, a5);
  return sub_19E0B43E4(v6);
}

void sub_19E0D1554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0D1568()
{
  return &unk_1EF0985C8;
}

uint64_t sub_19E0D1574(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0985C8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0D15B4(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  unint64_t v8 = sub_19E0D09A8(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(a1 + 16);

  return sub_19E0447D4(v9, v8, v6, v7, a4);
}

__n128 sub_19E0D161C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF098B80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0D1644(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF098B80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0D1690()
{
}

void *sub_19E0D16A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF098BD8;
  v5[1] = a1;
  v5[2] = a4;
  v5[3] = v5;
  sub_19E042600((uint64_t *)(a1 + 16), a2, a3, (uint64_t)v5);
  return sub_19E0B43E4(v5);
}

void sub_19E0D1730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0D1744()
{
  return &unk_1EF0985D8;
}

uint64_t sub_19E0D1750(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0985D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0D1790(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  unint64_t v8 = sub_19E0D09A8(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(a1 + 16);

  return sub_19E0447D4(v9, v8, v6, v7, a4);
}

__n128 sub_19E0D17F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF098BD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0D1820(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF098BD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0D186C()
{
}

uint64_t sub_19E0D1884(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v8 = 0;
  uint64_t v6 = sub_19E0424E8((uint64_t *)(a1 + 16), a2, a3, (uint64_t *)&v8);
  if (v6) {
    *a4 = sub_19E0D09A8(a1, v8);
  }
  return v6;
}

uint64_t sub_19E0D18E4(void *a1, uint64_t **a2, uint64_t **a3)
{
  __n128 __p = 0;
  int v21 = 0;
  uint64_t v22 = 0;
  int v5 = *a2;
  uint64_t v6 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (v6 - v5) != a3[1] - *a3) {
    __assert_rtn("build", "MarisaTrie.h", 61, "keys.size() == values.size()");
  }
  uint64_t v9 = sub_19E0D0DF0((uint64_t)a1, v5, v6, &__p);
  if (v9)
  {
    sub_19E0458B8((uint64_t)(a1 + 5), 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    uint64_t v10 = a1[5];
    int64_t v11 = (char *)a2[1] - (char *)*a2;
    if (v11)
    {
      unint64_t v12 = v11 / 24;
      int64_t v13 = *a3;
      uint64_t v14 = (uint64_t *)__p;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      do
      {
        uint64_t v16 = *v13++;
        uint64_t v15 = v16;
        uint64_t v17 = *v14++;
        *(void *)(v10 + 8 * v17) = v15;
        --v12;
      }
      while (v12);
    }
    uint64_t v18 = (a1[6] - v10) >> 3;
    a1[3] = v10;
    a1[4] = v18;
  }
  if (__p)
  {
    int v21 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_19E0D1A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0D1A38(uint64_t a1, uint64_t **a2)
{
  return sub_19E0D0DF0(a1, *a2, a2[1], 0);
}

void *sub_19E0D1A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF098C30;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, v5);
  return sub_19E0B43E4(v5);
}

void sub_19E0D1AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0D1B00()
{
  return &unk_1EF0985E8;
}

uint64_t sub_19E0D1B0C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0985E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0D1B4C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0D1B70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF098C30;
  a2[1] = v2;
  return result;
}

void *sub_19E0D1B94(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF098C30;
  result[1] = v3;
  return result;
}

void sub_19E0D1BDC()
{
}

void *sub_19E0D1BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF098C88;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  return sub_19E0B43E4(v5);
}

void sub_19E0D1C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0D1CAC()
{
  return &unk_1EF0985F8;
}

uint64_t sub_19E0D1CB8(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0985F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0D1CF8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19E0D1D1C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF098C88;
  a2[1] = v2;
  return result;
}

void *sub_19E0D1D40(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF098C88;
  result[1] = v3;
  return result;
}

void sub_19E0D1D88()
{
}

uint64_t sub_19E0D1DA0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0D1DFC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  __n128 __p = 0;
  uint64_t v33 = 0;
  size_t v34 = 0;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      uint64_t v10 = *(void **)(a3 + 8 * i);
      size_t v11 = *(void *)(a4 + 8 * i);
      size_t v30 = v11;
      unint64_t v31 = v10;
      unint64_t v12 = v36;
      if ((unint64_t)v36 >= v37)
      {
        int64_t v13 = (void *)sub_19E0B5820(&v35, &v31, &v30);
      }
      else
      {
        sub_19E057A94(v36, v10, v11);
        int64_t v13 = v12 + 3;
      }
      uint64_t v36 = v13;
      if (a5)
      {
        uint64_t v14 = *(void *)(a5 + 8 * i);
        uint64_t v15 = v33;
        if (v33 >= v34)
        {
          uint64_t v17 = (char *)__p;
          uint64_t v18 = (v33 - (unsigned char *)__p) >> 3;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61) {
            sub_19E041BEC();
          }
          uint64_t v20 = v34 - (unsigned char *)__p;
          if ((v34 - (unsigned char *)__p) >> 2 > v19) {
            unint64_t v19 = v20 >> 2;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            uint64_t v22 = (char *)sub_19E049FB0((uint64_t)&v34, v21);
            uint64_t v17 = (char *)__p;
            uint64_t v15 = v33;
          }
          else
          {
            uint64_t v22 = 0;
          }
          uint64_t v23 = &v22[8 * v18];
          *(void *)uint64_t v23 = v14;
          uint64_t v16 = v23 + 8;
          while (v15 != v17)
          {
            uint64_t v24 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v23 - 1) = v24;
            v23 -= 8;
          }
          __n128 __p = v23;
          uint64_t v33 = v16;
          size_t v34 = &v22[8 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(void *)uint64_t v33 = v14;
          uint64_t v16 = v15 + 8;
        }
        uint64_t v33 = v16;
      }
    }
  }
  uint64_t v25 = *a1;
  if (a5) {
    uint64_t v26 = (*(uint64_t (**)(void))(v25 + 64))();
  }
  else {
    uint64_t v26 = (*(uint64_t (**)(void))(v25 + 56))();
  }
  uint64_t v27 = v26;
  if (__p)
  {
    uint64_t v33 = (char *)__p;
    operator delete(__p);
  }
  __n128 __p = &v35;
  sub_19E041AD0((void ***)&__p);
  return v27;
}

void sub_19E0D1FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __n128 __p = &a16;
  sub_19E041AD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E0D2040(void *a1)
{
  sub_19E0D11E4(a1);

  JUMPOUT(0x19F3BA710);
}

double sub_19E0D207C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(*(void *)(*(void *)(a1 + 8) + 24 * a2) + 40 * a3 + 24);
}

uint64_t sub_19E0D209C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(void *)(*(void *)(*(void *)(a1 + 8) + 24 * a2) + 40 * a3 + 32);
}

char *sub_19E0D20BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (char *)(*(void *)(*(void *)(a1 + 8) + 24 * a2) + 40 * a3);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

unint64_t sub_19E0D20EC(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
}

unint64_t sub_19E0D2108(uint64_t a1, uint64_t a2)
{
  return 0xCCCCCCCCCCCCCCCDLL
       * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 24 * a2 + 8) - *(void *)(*(void *)(a1 + 8) + 24 * a2)) >> 3);
}

void sub_19E0D2130(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09C1A8;
  uint64_t v1 = (void **)(a1 + 8);
  sub_19E0D21A8(&v1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0D21A8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_19E0D223C(&v6);
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19E0D223C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0) {
          operator delete(*(v4 - 5));
        }
        v4 -= 5;
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_19E0D22C8(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09C1A8;
  uint64_t v3 = (void **)(a1 + 8);
  sub_19E0D21A8(&v3);
  return a1;
}

void *sub_19E0D2320(void *__dst, void *__src, unint64_t a3)
{
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E04147C();
  }
  if (a3 >= 0xB)
  {
    uint64_t v7 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB) {
      uint64_t v7 = a3 | 3;
    }
    uint64_t v6 = sub_19E063B88(v7 + 1);
    __dst[1] = a3;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = a3;
    uint64_t v6 = __dst;
    if (!a3) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, 2 * a3);
LABEL_9:
  *((_WORD *)v6 + a3) = 0;
  return __dst;
}

void sub_19E0D23BC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 16), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(void *)(a1 + 16) = v3 + 24 * ((24 * v6 - 24) / 0x18) + 24;
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E041BEC();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E0416C4();
    }
    uint64_t v11 = 3 * v10;
    unint64_t v12 = (char *)operator new(24 * v10);
    int64_t v13 = &v12[8 * ((v3 - v4) >> 3)];
    uint64_t v14 = &v12[8 * v11];
    size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v3 == v4)
    {
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = v14;
      if (!v3) {
        return;
      }
    }
    else
    {
      do
      {
        uint64_t v17 = v13;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v3 - 24);
        v3 -= 24;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = *(void *)(v3 + 16);
        *(void *)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        *(void *)(v3 + 16) = 0;
      }
      while (v3 != v4);
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v3 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = v14;
      if (v3 != v19)
      {
        do
        {
          v3 -= 24;
          unint64_t v21 = (void **)v3;
          sub_19E0D223C(&v21);
        }
        while (v3 != v19);
        uint64_t v3 = v19;
      }
      if (!v3) {
        return;
      }
    }
    operator delete((void *)v3);
    return;
  }
  if (a2 < v5)
  {
    uint64_t v20 = v4 + 24 * a2;
    while (v3 != v20)
    {
      v3 -= 24;
      unint64_t v21 = (void **)v3;
      sub_19E0D223C(&v21);
    }
    *(void *)(a1 + 16) = v20;
  }
}

uint64_t sub_19E0D25D0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  unint64_t v5 = result;
  if (result)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
      if (!result) {
        break;
      }
      unint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 32))(a2, v6, 0);
      sub_19E0D2720((void **)a1, v8, v9);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 40))(a2, v6, 0);
      v7 += result;
      uint64_t v6 = v7;
    }
    while (v5 > v7);
  }
  return result;
}

void sub_19E0D26FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void **sub_19E0D2720(void **a1, void *__src, unint64_t a3)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v7 = (uint64_t)a1[1];
    unint64_t v6 = ((unint64_t)a1[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    unint64_t v6 = 10;
    uint64_t v7 = *((unsigned __int8 *)a1 + 23);
  }
  if (v6 - v7 >= a3)
  {
    if (a3)
    {
      unint64_t v8 = a1;
      if ((*((unsigned char *)a1 + 23) & 0x80) != 0) {
        unint64_t v8 = *a1;
      }
      memmove(&v8[v7], __src, 2 * a3);
      unint64_t v9 = v7 + a3;
      if (*((char *)a1 + 23) < 0) {
        a1[1] = (void *)v9;
      }
      else {
        *((unsigned char *)a1 + 23) = v9 & 0x7F;
      }
      v8[v9] = 0;
    }
  }
  else
  {
    sub_19E0D27E8(a1, v6, a3 - v6 + v7, v7, v7, 0, a3, __src);
  }
  return a1;
}

void sub_19E0D27E8(void **a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8)
{
  if (0x7FFFFFFFFFFFFFF6 - a2 < a3) {
    sub_19E04147C();
  }
  size_t v15 = (char *)a1;
  if (*((char *)a1 + 23) < 0) {
    size_t v15 = (char *)*a1;
  }
  unint64_t v16 = a3 + a2;
  if (a3 + a2 <= 2 * a2) {
    unint64_t v16 = 2 * a2;
  }
  uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v16 | 3) != 0xB) {
    uint64_t v17 = v16 | 3;
  }
  if (v16 >= 0xB) {
    uint64_t v18 = v17 + 1;
  }
  else {
    uint64_t v18 = 11;
  }
  if (a2 > 0x3FFFFFFFFFFFFFF2) {
    uint64_t v19 = 0x7FFFFFFFFFFFFFF7;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = (char *)sub_19E063B88(v19);
  unint64_t v21 = v20;
  uint64_t v23 = v22;
  if (a5) {
    memmove(v20, v15, 2 * a5);
  }
  if (a7) {
    memmove(&v21[2 * a5], a8, 2 * a7);
  }
  uint64_t v24 = a4 - (a6 + a5);
  if (v24) {
    memmove(&v21[2 * a5 + 2 * a7], &v15[2 * a5 + 2 * a6], 2 * v24);
  }
  if (a2 != 10) {
    operator delete(v15);
  }
  uint64_t v25 = (void *)(a7 + a5 + v24);
  *a1 = v21;
  a1[1] = v25;
  a1[2] = (void *)(v23 | 0x8000000000000000);
  *(_WORD *)&v21[2 * (void)v25] = 0;
}

void sub_19E0D2928(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09C8E8;
  uint64_t v2 = *(void **)(a1 + 1352);
  if (v2 && *(unsigned char *)(a1 + 1350) == 1) {
    free(v2);
  }
  sub_19E03A444(a1 + 1296);

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0D29A8(uint64_t a1, uint64_t a2, unsigned __int16 *a3, char a4)
{
  char v14 = *((unsigned char *)a3 + 16);
  if (a3[12] >= 0xFuLL)
  {
    LOWORD(v13) = a3[12];
    operator new[]();
  }
  long long v13 = *(_OWORD *)(a3 + 12);
  int v7 = sub_19E0D2B48(a2, a4, &v14, (unsigned __int16 *)&v13);
  size_t v8 = *a3;
  if (v8 <= 0xE) {
    unint64_t v9 = a3 + 1;
  }
  else {
    unint64_t v9 = (void *)*((void *)a3 + 1);
  }
  *sub_19E03E82C(&v11, v8 + 1, v9, v8) = a4;
  uint64_t result = sub_19E03EFB8(a1, &v11, v14, (unsigned __int16 *)&v13, v7);
  if (v11 >= 0xFu)
  {
    uint64_t result = v12;
    if (v12) {
      uint64_t result = MEMORY[0x19F3BA6E0](v12, 0x1000C8077774924);
    }
  }
  if ((unsigned __int16)v13 >= 0xFu)
  {
    uint64_t result = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1)) {
      return MEMORY[0x19F3BA6E0](*((void *)&v13 + 1), 0x1000C8077774924);
    }
  }
  return result;
}

void sub_19E0D2AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int16 a9, uint64_t a10, unsigned __int16 a11, uint64_t a12)
{
  if (a9 >= 0xFu && a10) {
    MEMORY[0x19F3BA6E0](a10, 0x1000C8077774924);
  }
  if (a11 >= 0xFu)
  {
    if (a12) {
      MEMORY[0x19F3BA6E0](a12, 0x1000C8077774924);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0D2B48(uint64_t a1, unsigned int a2, unsigned char *a3, unsigned __int16 *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  size_t v7 = *a4;
  if (v7)
  {
    if (v7 <= 0xE) {
      size_t v8 = a4 + 1;
    }
    else {
      size_t v8 = (void *)*((void *)a4 + 1);
    }
    *sub_19E03E82C(&v23, v7 + 1, v8, v7) = a2;
    if (*a4 >= 0xFu)
    {
      uint64_t v9 = *((void *)a4 + 1);
      if (v9) {
        MEMORY[0x19F3BA6E0](v9, 0x1000C8077774924);
      }
    }
    *(_OWORD *)a4 = v23;
    unsigned int v10 = *a4;
    goto LABEL_9;
  }
  uint64_t v16 = *a3;
  BOOL v17 = v16 != 254 && (v16 - 95) > 0x1D;
  if (!v17 && (a2 == 255 || a2 == 3))
  {
    *a3 = 0;
    return 4294967294;
  }
  if (!*a3)
  {
    unsigned int v18 = *(_DWORD *)(a1 + 4 * a2 + 12);
    if (*(unsigned char *)(a1 + a2 + 1036)) {
      BOOL v19 = v18 == 0;
    }
    else {
      BOOL v19 = 0;
    }
    if (!v19)
    {
      if (v18) {
        return v18;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
    if (a2 == 254 || a2 - 95 <= 0x1D)
    {
      *a3 = a2;
      if (*a4 >= 0xFu)
      {
        uint64_t v22 = *((void *)a4 + 1);
        if (v22) {
          MEMORY[0x19F3BA6E0](v22, 0x1000C8077774924);
        }
      }
    }
    *a4 = 1;
    *((unsigned char *)a4 + 2) = a2;
    return 4294967294;
  }
  if (*(unsigned char *)(a1 + v16 + 1036))
  {
    unsigned int v10 = 2;
    *a4 = 2;
    a4[1] = v16 | ((_WORD)a2 << 8);
LABEL_9:
    unsigned __int16 v11 = sub_19E0AF554((void *)(a1 + 1296), a4);
    if (v11)
    {
      uint64_t v12 = v11;
      if (v10 >= 0xF)
      {
        uint64_t v13 = *((void *)a4 + 1);
        if (v13) {
          MEMORY[0x19F3BA6E0](v13, 0x1000C8077774924);
        }
      }
      *a4 = 0;
      return *((unsigned int *)v12 + 8);
    }
    else if (*(_DWORD *)(a1 + 1336) > v10)
    {
      return 4294967294;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  if (qword_1E9457788 != -1) {
    dispatch_once(&qword_1E9457788, &unk_1EF09E538);
  }
  uint64_t v20 = qword_1E9457780;
  if (os_log_type_enabled((os_log_t)qword_1E9457780, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = *a3;
    LODWORD(v23) = 67109376;
    DWORD1(v23) = v21;
    WORD4(v23) = 1024;
    *(_DWORD *)((char *)&v23 + 10) = a2;
    _os_log_impl(&dword_19E038000, v20, OS_LOG_TYPE_DEFAULT, "found unknown lead_primary=%u, with sort_key_byte=%u", (uint8_t *)&v23, 0xEu);
  }
  return 0xFFFFFFFFLL;
}

os_log_t sub_19E0D2DBC()
{
  os_log_t result = os_log_create("com.apple.Lexicon", "SortKeyByteConverter");
  qword_1E9457780 = (uint64_t)result;
  return result;
}

void sub_19E0D2DEC(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v15 = 0x100000;
  __int16 v16 = 0;
  char v17 = 0;
  unsigned int v18 = 0;
  char v19 = 0;
  char v14 = 0;
  unsigned __int16 v12 = 0;
  LODWORD(v4) = *a3;
  if (*a3)
  {
    unint64_t v7 = 0;
    size_t v8 = a3 + 1;
    do
    {
      if (v4 <= 0xE) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = (unsigned __int16 *)*((void *)a3 + 1);
      }
      unsigned int v10 = sub_19E0D2B48(a2, *((unsigned __int8 *)v9 + v7), &v14, &v12);
      unsigned int v11 = v10;
      if (v10 != -2)
      {
        if (v10 == -1) {
          goto LABEL_12;
        }
        sub_19E0B14D0((unsigned __int16 *)&v15, v10);
      }
      ++v7;
      unint64_t v4 = *a3;
    }
    while (v7 < v4);
    if (*a3 && v11 == -2)
    {
LABEL_12:
      *(_DWORD *)a1 = 0x100000;
      *(_WORD *)(a1 + 4) = 0;
      *(unsigned char *)(a1 + 6) = 0;
      *(void *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 16) = 0;
      goto LABEL_14;
    }
  }
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 6) = 0;
  *(void *)(a1 + 8) = 0;
  sub_19E03CED8(a1, (unsigned __int16 *)&v15);
LABEL_14:
  if (v12 >= 0xFu && v13) {
    MEMORY[0x19F3BA6E0](v13, 0x1000C8077774924);
  }
  if (v18)
  {
    if (v17 == 1) {
      free(v18);
    }
  }
}

void sub_19E0D2F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int16 a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15)
{
  if (a9 >= 0xFu && a10) {
    MEMORY[0x19F3BA6E0](a10, 0x1000C8077774924);
  }
  if (a15) {
    BOOL v16 = a14 == 1;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16) {
    free(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0D2FB0(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  uint64_t v2 = a2[2];
  unint64_t v4 = v2 + 4;
  if (v3) {
    BOOL v5 = v4 > v3;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    uint64_t v7 = *a2;
    a2[2] = v4;
    if (v7)
    {
      unint64_t v8 = v2 + 8;
      if (!v3 || v8 <= v3)
      {
        unsigned int v10 = *(_DWORD *)(v7 + v2);
        a2[2] = v8;
        if (v10)
        {
          unsigned int v12 = bswap32(v10) - 1;
          do
          {
            unint64_t v14 = a2[1];
            uint64_t v13 = a2[2];
            unint64_t v15 = v13 + 4;
            if (v14) {
              BOOL v16 = v15 > v14;
            }
            else {
              BOOL v16 = 0;
            }
            if (v16) {
              break;
            }
            uint64_t v17 = *a2;
            a2[2] = v15;
            if (!v17) {
              break;
            }
            *(_DWORD *)__s1 = *(_DWORD *)(v17 + v13);
            size_t v18 = strnlen(__s1, 4uLL);
            sub_19E03E82C(&v25, v18, __s1, v18);
            unint64_t v20 = a2[1];
            uint64_t v19 = a2[2];
            unint64_t v21 = v19 + 4;
            if (v20)
            {
              if (v21 > v20) {
                goto LABEL_21;
              }
            }
            uint64_t v22 = *a2;
            a2[2] = v21;
            if (!v22)
            {
LABEL_21:
              int v23 = 1;
            }
            else
            {
              sub_19E0D3120(a1, &v25, bswap32(*(_DWORD *)(v22 + v19)));
              int v23 = 0;
            }
            if (v25 >= 0xFu && v26) {
              MEMORY[0x19F3BA6E0](v26, 0x1000C8077774924);
            }
            int v24 = v12-- ? v23 : 1;
          }
          while (v24 != 1);
        }
      }
    }
  }
}

void sub_19E0D30EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int16 a10, uint64_t a11)
{
  if (a10 >= 0xFu)
  {
    if (a11) {
      MEMORY[0x19F3BA6E0](a11, 0x1000C8077774924);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0D3120(uint64_t a1, unsigned __int16 *a2, int a3)
{
  int v4 = *a2;
  if ((v4 - 1) > 3) {
    return;
  }
  if (v4 == 1)
  {
    *(_DWORD *)(a1 + 4 * *((unsigned __int8 *)a2 + 2) + 12) = a3;
  }
  else if (!sub_19E0D35FC(a1, a2))
  {
    if (*a2 <= 0xEu) {
      unint64_t v8 = (unsigned __int8 *)(a2 + 1);
    }
    else {
      unint64_t v8 = (unsigned __int8 *)*((void *)a2 + 1);
    }
    *(unsigned char *)(a1 + *v8 + 1036) = 1;
  }
  unsigned int v9 = *a2;
  if (v9 <= 0xE) {
    unsigned int v10 = (unsigned __int8 *)(a2 + 1);
  }
  else {
    unsigned int v10 = (unsigned __int8 *)*((void *)a2 + 1);
  }
  unsigned int v11 = sub_19E0B24AC(v10, *a2);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 1304);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    unint64_t v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v3 = v11;
      if (v13 <= v11) {
        unint64_t v3 = v11 % v13;
      }
    }
    else
    {
      unint64_t v3 = (v13 - 1) & v11;
    }
    BOOL v16 = *(unsigned __int16 ***)(*(void *)(a1 + 1296) + 8 * v3);
    if (v16)
    {
      for (uint64_t i = *v16; i; uint64_t i = *(unsigned __int16 **)i)
      {
        unint64_t v18 = *((void *)i + 1);
        if (v18 == v12)
        {
          if (sub_19E0A7134(i + 8, a2)) {
            goto LABEL_87;
          }
        }
        else
        {
          if (v15 > 1)
          {
            if (v18 >= v13) {
              v18 %= v13;
            }
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v19 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = v12;
  unint64_t v20 = v19 + 16;
  if (v9 >= 0xF)
  {
    *unint64_t v20 = v9;
    operator new[]();
  }
  *(_OWORD *)unint64_t v20 = *(_OWORD *)a2;
  unint64_t v21 = (void *)(a1 + 1312);
  *((_DWORD *)v19 + 8) = a3;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 1320) + 1);
  float v23 = *(float *)(a1 + 1328);
  if (!v13 || (float)(v23 * (float)v13) < v22)
  {
    BOOL v24 = 1;
    if (v13 >= 3) {
      BOOL v24 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v13);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    else {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v13 = *(void *)(a1 + 1304);
    if (*(void *)&prime > v13) {
      goto LABEL_43;
    }
    if (*(void *)&prime < v13)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1320) / *(float *)(a1 + 1328));
      if (v13 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (*(void *)&prime <= v34) {
        int8x8_t prime = (int8x8_t)v34;
      }
      if (*(void *)&prime >= v13)
      {
        unint64_t v13 = *(void *)(a1 + 1304);
      }
      else
      {
        if (prime)
        {
LABEL_43:
          if (*(void *)&prime >> 61) {
            sub_19E0416C4();
          }
          unint64_t v28 = operator new(8 * *(void *)&prime);
          uint64_t v29 = *(void **)(a1 + 1296);
          *(void *)(a1 + 1296) = v28;
          if (v29) {
            operator delete(v29);
          }
          uint64_t v30 = 0;
          *(int8x8_t *)(a1 + 1304) = prime;
          do
            *(void *)(*(void *)(a1 + 1296) + 8 * v30++) = 0;
          while (*(void *)&prime != v30);
          unint64_t v31 = (void *)*v21;
          if (*v21)
          {
            unint64_t v32 = v31[1];
            uint8x8_t v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(void *)&prime) {
                v32 %= *(void *)&prime;
              }
            }
            else
            {
              v32 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 1296) + 8 * v32) = v21;
            unint64_t v37 = (void *)*v31;
            if (*v31)
            {
              do
              {
                unint64_t v38 = v37[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v38 >= *(void *)&prime) {
                    v38 %= *(void *)&prime;
                  }
                }
                else
                {
                  v38 &= *(void *)&prime - 1;
                }
                if (v38 != v32)
                {
                  uint64_t v39 = *(void *)(a1 + 1296);
                  if (!*(void *)(v39 + 8 * v38))
                  {
                    *(void *)(v39 + 8 * v38) = v31;
                    goto LABEL_68;
                  }
                  *unint64_t v31 = *v37;
                  *unint64_t v37 = **(void **)(*(void *)(a1 + 1296) + 8 * v38);
                  **(void **)(*(void *)(a1 + 1296) + 8 * v38) = v37;
                  unint64_t v37 = v31;
                }
                unint64_t v38 = v32;
LABEL_68:
                unint64_t v31 = v37;
                unint64_t v37 = (void *)*v37;
                unint64_t v32 = v38;
              }
              while (v37);
            }
          }
          unint64_t v13 = (unint64_t)prime;
          goto LABEL_72;
        }
        long long v44 = *(void **)(a1 + 1296);
        *(void *)(a1 + 1296) = 0;
        if (v44) {
          operator delete(v44);
        }
        unint64_t v13 = 0;
        *(void *)(a1 + 1304) = 0;
      }
    }
LABEL_72:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v12) {
        unint64_t v3 = v12 % v13;
      }
      else {
        unint64_t v3 = v12;
      }
    }
    else
    {
      unint64_t v3 = (v13 - 1) & v12;
    }
  }
  uint64_t v40 = *(void *)(a1 + 1296);
  uint64_t v41 = *(void **)(v40 + 8 * v3);
  if (v41)
  {
    *(void *)uint64_t v19 = *v41;
  }
  else
  {
    *(void *)uint64_t v19 = *v21;
    void *v21 = v19;
    *(void *)(v40 + 8 * v3) = v21;
    if (!*(void *)v19) {
      goto LABEL_86;
    }
    unint64_t v42 = *(void *)(*(void *)v19 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v42 >= v13) {
        v42 %= v13;
      }
    }
    else
    {
      v42 &= v13 - 1;
    }
    uint64_t v41 = (void *)(*(void *)(a1 + 1296) + 8 * v42);
  }
  *uint64_t v41 = v19;
LABEL_86:
  ++*(void *)(a1 + 1320);
  unsigned int v9 = *a2;
LABEL_87:
  unsigned int v43 = *(_DWORD *)(a1 + 1336);
  if (v43 <= v9) {
    unsigned int v43 = v9;
  }
  *(_DWORD *)(a1 + 1336) = v43;
}

void sub_19E0D35D8(_Unwind_Exception *a1)
{
  sub_19E085810(0, v1);
  _Unwind_Resume(a1);
}

BOOL sub_19E0D35FC(uint64_t a1, unsigned __int16 *a2)
{
  LODWORD(v2) = *a2;
  if (v2 < 2) {
    return 0;
  }
  int v4 = (void *)(a1 + 1296);
  BOOL v5 = a2 + 1;
  unint64_t v6 = 1;
  while (1)
  {
    uint64_t v7 = v2 <= 0xE ? v5 : (unsigned __int16 *)*((void *)a2 + 1);
    sub_19E03E82C(&v11, v6, v7, v6);
    unint64_t v8 = sub_19E0AF554(v4, &v11);
    BOOL v9 = v8 != 0;
    if (v11 >= 0xFu && v12) {
      MEMORY[0x19F3BA6E0](v12, 0x1000C8077774924);
    }
    if (v8) {
      break;
    }
    ++v6;
    unint64_t v2 = *a2;
    if (v6 >= v2) {
      return 0;
    }
  }
  return v9;
}

unsigned __int16 *sub_19E0D36C4(unsigned __int16 *result, uint64_t a2)
{
  unint64_t v2 = result;
  *((void *)result + 1) = 0;
  unint64_t v3 = (uint64_t **)(result + 4);
  *((void *)result + 2) = 0;
  *(void *)os_log_t result = result + 4;
  for (uint64_t i = (uint64_t *)(a2 + 1312); ; result = sub_19E0A6FD4(v10 + 20, (unsigned __int16 *)i + 8))
  {
    uint64_t i = (uint64_t *)*i;
    if (!i) {
      break;
    }
    BOOL v5 = *v3;
    unint64_t v6 = v3;
    uint64_t v7 = v3;
    if (*v3)
    {
      unsigned int v8 = *((_DWORD *)i + 8);
      while (1)
      {
        while (1)
        {
          uint64_t v7 = (uint64_t **)v5;
          unsigned int v9 = *((_DWORD *)v5 + 8);
          if (v8 >= v9) {
            break;
          }
          BOOL v5 = *v7;
          unint64_t v6 = v7;
          if (!*v7) {
            goto LABEL_11;
          }
        }
        if (v9 >= v8) {
          break;
        }
        BOOL v5 = v7[1];
        if (!v5)
        {
          unint64_t v6 = v7 + 1;
          goto LABEL_11;
        }
      }
      unsigned int v10 = (unsigned __int16 *)v7;
    }
    else
    {
LABEL_11:
      unsigned int v10 = (unsigned __int16 *)operator new(0x38uLL);
      *((_DWORD *)v10 + 8) = *((_DWORD *)i + 8);
      v10[20] = 0;
      *(void *)unsigned int v10 = 0;
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = v7;
      *unint64_t v6 = (uint64_t *)v10;
      uint64_t v11 = **(void **)v2;
      uint64_t v12 = (uint64_t *)v10;
      if (v11)
      {
        *(void *)unint64_t v2 = v11;
        uint64_t v12 = *v6;
      }
      sub_19E05D650(*((uint64_t **)v2 + 1), v12);
      ++*((void *)v2 + 2);
    }
  }
  return result;
}

void sub_19E0D37C0(_Unwind_Exception *a1)
{
  sub_19E08DAEC(*v1);
  _Unwind_Resume(a1);
}

void sub_19E0D37D4(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    int v4 = (void *)(a1 + 1296);
    do
    {
      if (!sub_19E0AF554(v4, (unsigned __int16 *)v2 + 8)) {
        sub_19E0D3120(a1, (unsigned __int16 *)v2 + 8, *((_DWORD *)v2 + 8));
      }
      unint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

os_log_t sub_19E0D3838()
{
  os_log_t result = os_log_create("com.apple.Lexicon", "Default");
  qword_1E9457790 = (uint64_t)result;
  return result;
}

uint64_t sub_19E0D3868(int a1, CFDictionaryRef theDict, CFErrorRef *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"locale");
  CFStringRef v5 = (const __CFString *)CFDictionaryGetValue(theDict, @"lexiconDataFile");
  CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(theDict, @"additionalDictionaryLocale");
  if (v6)
  {
    sub_19E039E88(v6, &valuePtr);
    *(_OWORD *)uint64_t v39 = valuePtr;
    uint64_t v40 = v44;
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
    LOBYTE(v39[0]) = 0;
  }
  char v41 = v7;
  CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"correctionMatchPenaltyWeight");
  if (v8)
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
    uint64_t v9 = valuePtr | 0x100000000;
  }
  else
  {
    uint64_t v9 = 0;
  }
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"completionLookAheadLimit");
  if (v10)
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
    uint64_t v11 = valuePtr | 0x100000000;
  }
  else
  {
    uint64_t v11 = 0;
  }
  CFStringRef v38 = 0;
  if (v5) {
    goto LABEL_14;
  }
  CFLocaleRef v12 = (const __CFLocale *)sub_19E039FA8(theDict);
  *(void *)&long long valuePtr = v12;
  CFStringRef cf = sub_19E0F4D8C(theDict, v12);
  CFStringRef v38 = cf;
  if (v12) {
    CFRelease(v12);
  }
  CFStringRef v5 = cf;
  if (cf)
  {
LABEL_14:
    sub_19E039E88(Value, &v35);
    sub_19E039E88(v5, v34);
    sub_19E05DB78((uint64_t)&valuePtr);
    sub_19E0D5968(&v51, v34);
    unint64_t v13 = sub_19E0416F8(&valuePtr, (uint64_t)" -d ", 4);
    sub_19E0D59D0((uint64_t)&__str, (std::__fs::filesystem::path *)&v51);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    BOOL v16 = sub_19E0416F8(v13, (uint64_t)p_str, size);
    uint64_t v17 = sub_19E0416F8(v16, (uint64_t)" -s ", 4);
    sub_19E0D5A98((uint64_t)__p, (std::__fs::filesystem::path *)&v51);
    if ((v50 & 0x80u) == 0) {
      unint64_t v18 = __p;
    }
    else {
      unint64_t v18 = (void **)__p[0];
    }
    if ((v50 & 0x80u) == 0) {
      uint64_t v19 = v50;
    }
    else {
      uint64_t v19 = (uint64_t)__p[1];
    }
    sub_19E0416F8(v17, (uint64_t)v18, v19);
    if ((char)v50 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    unint64_t v20 = sub_19E0416F8(&valuePtr, (uint64_t)" -S ", 4);
    if ((v37 & 0x80u) == 0) {
      unint64_t v21 = &v35;
    }
    else {
      unint64_t v21 = v35;
    }
    if ((v37 & 0x80u) == 0) {
      uint64_t v22 = v37;
    }
    else {
      uint64_t v22 = v36;
    }
    float v23 = sub_19E0416F8(v20, (uint64_t)v21, v22);
    BOOL v24 = sub_19E0416F8(v23, (uint64_t)" -i ", 4);
    if ((v37 & 0x80u) == 0) {
      unint64_t v25 = &v35;
    }
    else {
      unint64_t v25 = v35;
    }
    if ((v37 & 0x80u) == 0) {
      uint64_t v26 = v37;
    }
    else {
      uint64_t v26 = v36;
    }
    sub_19E0416F8(v24, (uint64_t)v25, v26);
    if (v41)
    {
      uint64_t v27 = sub_19E0416F8(&valuePtr, (uint64_t)" -A ", 4);
      if (v40 >= 0) {
        unint64_t v28 = v39;
      }
      else {
        unint64_t v28 = (void **)v39[0];
      }
      if (v40 >= 0) {
        uint64_t v29 = HIBYTE(v40);
      }
      else {
        uint64_t v29 = (uint64_t)v39[1];
      }
      sub_19E0416F8(v27, (uint64_t)v28, v29);
    }
    if ((v9 & 0x100000000) != 0)
    {
      sub_19E0416F8(&valuePtr, (uint64_t)" -c ", 4);
      std::ostream::operator<<();
    }
    if ((v11 & 0x100000000) != 0)
    {
      sub_19E0416F8(&valuePtr, (uint64_t)" -L ", 4);
      std::ostream::operator<<();
    }
    sub_19E05EEA4(&__dst, (uint64_t)&valuePtr + 8);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    *(void *)&long long valuePtr = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&valuePtr + *(void *)(valuePtr - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&valuePtr + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v46[1]) < 0) {
      operator delete(v45[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19F3BA690](v47);
    MEMORY[0x19F3BA640](&v42);
    operator new();
  }
  if (a3) {
    *a3 = sub_19E0A4344(@"Could not determine the location of the morpheme lexicon path, or one was not provided.");
  }
  if (v41 && SHIBYTE(v40) < 0) {
    operator delete(v39[0]);
  }
  return 0;
}

void sub_19E0D53F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,const void *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  MEMORY[0x19F3BA6E0](a17, 0x1000C8077774924);
  sub_19E070CA8((uint64_t)&a52);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a51);
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  sub_19E03D880(&a39, 0);
  if (a46)
  {
    if (a45 < 0) {
      operator delete(a40);
    }
  }
  _Unwind_Resume(a1);
}

std::string *sub_19E0D5968(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  sub_19E041DFC(a1, a2, &a2[v3]);
  return a1;
}

void sub_19E0D59B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E0D59D0(uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__parent_path(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E04147C();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v9;
  return result;
}

double sub_19E0D5A98(uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E04147C();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_19E0D5B60(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19F3BA690](a1 + 112);
  return a1;
}

uint64_t sub_19E0D5C64(void **a1, void *a2, uint64_t a3)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)v134 = 0u;
  long long v135 = 0u;
  float v136 = 1.0;
  uint64_t v118 = 2 * a3;
  dest = (UChar *)off_1EC3014B8();
  v121 = 0;
  BOOL v4 = 0;
  unint64_t v5 = 0;
  v124 = (const char *)(v6 + 16);
  do
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a2 + 232))();
    if (!v7 || v5 > 0x63) {
      break;
    }
    int v8 = 0;
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    v133[0] = 0;
    unint64_t v123 = v5 + 1;
    int64x2_t v132 = 0u;
    double v11 = 0.0;
    *(_OWORD *)v130 = 0u;
    memset(v131, 0, sizeof(v131));
    do
    {
      v10 += *(_DWORD *)(v7 + 80);
      unint64_t v12 = *(unsigned __int16 *)(v7 + 96);
      double v13 = *(double *)(v7 + 88);
      v8 += *(_DWORD *)(v7 + 76);
      if (*(void *)v7)
      {
        int v14 = (*(uint64_t (**)(void, void, void))(*(void *)*a2 + 72))(*a2, *(unsigned __int16 *)(*(void *)v7 + 100), *(unsigned __int16 *)(v7 + 102));
        v10 += v14;
        v8 += v14;
      }
      int v15 = *(unsigned __int8 *)(v7 + 124);
      if ((v15 & 0xFE) != 2)
      {
        if (v15 == 1)
        {
          sub_19E0D2320(&__p, *(void **)(v7 + 48), (unint64_t)*(unsigned __int16 *)(v7 + 96) >> 1);
        }
        else
        {
          uint64_t v16 = *(void *)(v7 + 104);
          if (v16)
          {
            sub_19E08E71C((uint64_t)&v141, (unsigned __int16 *)(v16 + 16));
            pErrorCode[0] = U_ZERO_ERROR;
            int32_t pDestLength = 0;
            if (v142.i64[0]) {
              uint64_t v17 = (const char *)v142.i64[0];
            }
            else {
              uint64_t v17 = v124;
            }
            u_strFromUTF8(dest, 128, &pDestLength, v17, (unsigned __int16)v141, pErrorCode);
            if (pErrorCode[0] < U_ILLEGAL_ARGUMENT_ERROR) {
              sub_19E0D2320(&__p, dest, pDestLength);
            }
            else {
              sub_19E063AC4(&__p, byte_19E132984);
            }
            if (v142.i64[0] && BYTE6(v141) == 1) {
              free((void *)v142.i64[0]);
            }
          }
          else
          {
            sub_19E063AC4(&__p, byte_19E132984);
          }
        }
        unint64_t v18 = *(const void **)(v7 + 104);
        if (v18)
        {
          CFTypeRef v19 = CFRetain(v18);
          CFTypeRef v20 = v19;
          *(void *)pErrorCode = v19;
          uint64_t v21 = v132.i64[1];
          if (v132.i64[1] >= v133[0])
          {
            uint64_t v30 = (v132.i64[1] - v132.i64[0]) >> 4;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 60) {
              sub_19E041BEC();
            }
            uint64_t v32 = v133[0] - v132.i64[0];
            if ((v133[0] - v132.i64[0]) >> 3 > v31) {
              unint64_t v31 = v32 >> 3;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            v144[0] = v133;
            unint64_t v34 = (char *)sub_19E063BBC(v33);
            uint64_t v36 = &v34[16 * v30];
            *(void *)uint64_t v36 = v20;
            *((_WORD *)v36 + 4) = *(_WORD *)(v7 + 96);
            uint64_t v37 = v132.i64[1];
            uint64_t v38 = v132.i64[0];
            if (v132.i64[1] == v132.i64[0])
            {
              int64x2_t v41 = vdupq_n_s64(v132.u64[1]);
              uint64_t v39 = &v34[16 * v30];
            }
            else
            {
              uint64_t v39 = &v34[16 * v30];
              do
              {
                uint64_t v40 = *(void *)(v37 - 16);
                v37 -= 16;
                *(void *)uint64_t v37 = 0;
                *((void *)v39 - 2) = v40;
                v39 -= 16;
                *((_WORD *)v39 + 4) = *(_WORD *)(v37 + 8);
              }
              while (v37 != v38);
              int64x2_t v41 = v132;
            }
            uint64_t v22 = v36 + 16;
            v132.i64[0] = (uint64_t)v39;
            v132.i64[1] = (uint64_t)(v36 + 16);
            int64x2_t v142 = v41;
            uint64_t v42 = v133[0];
            v133[0] = &v34[16 * v35];
            uint64_t v143 = v42;
            v141 = (int64x2_t *)v41.i64[0];
            sub_19E0D6A58((uint64_t)&v141);
          }
          else
          {
            *(void *)v132.i64[1] = v19;
            *(_WORD *)(v21 + 8) = *(_WORD *)(v7 + 96);
            uint64_t v22 = (char *)(v21 + 16);
          }
          v132.i64[1] = (uint64_t)v22;
        }
        else if (*(unsigned char *)(v7 + 124) == 1)
        {
          int32_t pDestLength = 0x100000;
          __int16 v149 = 0;
          char v150 = 0;
          v151 = 0;
          char v152 = 0;
          if ((v129 & 0x80u) == 0) {
            p_p = (UChar *)&__p;
          }
          else {
            p_p = (UChar *)__p;
          }
          if ((v129 & 0x80u) == 0) {
            uint64_t v24 = v129;
          }
          else {
            uint64_t v24 = v128;
          }
          sub_19E0B1F50((unsigned __int16 *)&pDestLength, p_p, v24);
          LODWORD(v141) = 0x100000;
          WORD2(v141) = 0;
          BYTE6(v141) = 0;
          v142.i64[0] = 0;
          v142.i8[8] = 0;
          v144[0] = 0;
          *(void *)((char *)v144 + 5) = 0;
          v144[2] = 0;
          v144[3] = 0;
          v144[4] = 0xFFFFFFFFLL;
          char v145 = 0;
          int v146 = 0;
          __int16 v147 = 0;
          sub_19E03CD54((uint64_t)&v141, (unsigned __int16 *)&pDestLength);
          int v25 = *(unsigned __int16 *)(v7 + 102) | (*(unsigned __int16 *)(v7 + 100) << 16);
          char v145 = 1;
          int v146 = v25;
          __int16 v147 = *(_DWORD *)(v7 + 80);
          LODWORD(v126) = 0;
          *(void *)pErrorCode = CFAbsoluteTimeGetCurrent();
          uint64_t v26 = sub_19E0D6AAC((uint64_t)&v141, (int *)&v126, (uint64_t *)pErrorCode);
          uint64_t v27 = v26;
          uint64_t v126 = v26;
          uint64_t v28 = v132.i64[1];
          if (v132.i64[1] >= v133[0])
          {
            uint64_t v45 = (v132.i64[1] - v132.i64[0]) >> 4;
            unint64_t v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 60) {
              sub_19E041BEC();
            }
            uint64_t v47 = v133[0] - v132.i64[0];
            if ((v133[0] - v132.i64[0]) >> 3 > v46) {
              unint64_t v46 = v47 >> 3;
            }
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v48 = v46;
            }
            v140 = v133;
            long long v49 = (char *)sub_19E063BBC(v48);
            std::string v51 = &v49[16 * v45];
            *(void *)std::string v51 = v27;
            *((_WORD *)v51 + 4) = *(_WORD *)(v7 + 96);
            uint64_t v52 = v132.i64[1];
            uint64_t v53 = v132.i64[0];
            if (v132.i64[1] == v132.i64[0])
            {
              int64x2_t v56 = vdupq_n_s64(v132.u64[1]);
              char v54 = &v49[16 * v45];
            }
            else
            {
              char v54 = &v49[16 * v45];
              do
              {
                uint64_t v55 = *(void *)(v52 - 16);
                v52 -= 16;
                *(void *)uint64_t v52 = 0;
                *((void *)v54 - 2) = v55;
                v54 -= 16;
                *((_WORD *)v54 + 4) = *(_WORD *)(v52 + 8);
              }
              while (v52 != v53);
              int64x2_t v56 = v132;
            }
            uint64_t v29 = v51 + 16;
            v132.i64[0] = (uint64_t)v54;
            v132.i64[1] = (uint64_t)(v51 + 16);
            int64x2_t v138 = v56;
            uint64_t v57 = v133[0];
            v133[0] = &v49[16 * v50];
            uint64_t v139 = v57;
            *(void *)pErrorCode = v56.i64[0];
            sub_19E0D6A58((uint64_t)pErrorCode);
          }
          else
          {
            *(void *)v132.i64[1] = v26;
            *(_WORD *)(v28 + 8) = *(_WORD *)(v7 + 96);
            uint64_t v29 = (char *)(v28 + 16);
          }
          v132.i64[1] = (uint64_t)v29;
          if (v142.i64[0] && BYTE6(v141) == 1) {
            free((void *)v142.i64[0]);
          }
          if (v151 && v150 == 1) {
            free(v151);
          }
        }
        if ((v129 & 0x80u) == 0) {
          unsigned int v43 = &__p;
        }
        else {
          unsigned int v43 = __p;
        }
        if ((v129 & 0x80u) == 0) {
          unint64_t v44 = v129;
        }
        else {
          unint64_t v44 = v128;
        }
        sub_19E0D2720(v130, v43, v44);
        if ((char)v129 < 0) {
          operator delete(__p);
        }
      }
      v9 += v12;
      double v11 = v11 + v13;
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7);
    *((void *)&v131[0] + 1) = __PAIR64__(v9, v10);
    *(double *)&v131[1] = v11;
    DWORD2(v131[1]) = v8;
    if (a3 >= 1)
    {
      int v58 = 2;
      if (!v9 || v118 != v9) {
        goto LABEL_127;
      }
LABEL_79:
      int v59 = SBYTE7(v131[0]);
      BOOL v60 = v130[1];
      __src = v130[0];
      if ((SBYTE7(v131[0]) & 0x80u) == 0) {
        BOOL v61 = (uint64_t *)v130;
      }
      else {
        BOOL v61 = (uint64_t *)v130[0];
      }
      if ((SBYTE7(v131[0]) & 0x80u) == 0) {
        unint64_t v62 = BYTE7(v131[0]);
      }
      else {
        unint64_t v62 = (unint64_t)v130[1];
      }
      unint64_t v63 = sub_19E086FCC(v61, 2 * v62);
      unint64_t v64 = v63;
      unint64_t v65 = (unint64_t)v134[1];
      if (v134[1])
      {
        uint8x8_t v66 = (uint8x8_t)vcnt_s8((int8x8_t)v134[1]);
        v66.i16[0] = vaddlv_u8(v66);
        if (v66.u32[0] > 1uLL)
        {
          unint64_t v12 = v63;
          if ((void *)v63 >= v134[1]) {
            unint64_t v12 = v63 % (unint64_t)v134[1];
          }
        }
        else
        {
          unint64_t v12 = ((unint64_t)v134[1] - 1) & v63;
        }
        uint64_t v67 = (uint64_t ***)*((void *)v134[0] + v12);
        if (v67)
        {
          for (uint64_t i = *v67; i; uint64_t i = (uint64_t **)*i)
          {
            unint64_t v69 = (unint64_t)i[1];
            if (v69 == v63)
            {
              uint64_t v70 = (uint64_t *)*((unsigned __int8 *)i + 39);
              int v71 = (char)v70;
              if ((char)v70 < 0) {
                uint64_t v70 = i[3];
              }
              if (v70 == (uint64_t *)v62)
              {
                if (!v62) {
                  goto LABEL_126;
                }
                int64_t v72 = v71 >= 0 ? i + 2 : (uint64_t **)i[2];
                uint64_t v73 = (char *)(v62 - 1);
                unint64_t v74 = v61;
                do
                {
                  int v76 = *(unsigned __int16 *)v72;
                  int64_t v72 = (uint64_t **)((char *)v72 + 2);
                  int v75 = v76;
                  int v78 = *(unsigned __int16 *)v74;
                  unint64_t v74 = (uint64_t *)((char *)v74 + 2);
                  int v77 = v78;
                  BOOL v80 = v73-- != 0;
                }
                while (v77 == v75 && v80);
                if (v77 == v75) {
                  goto LABEL_126;
                }
              }
            }
            else
            {
              if (v66.u32[0] > 1uLL)
              {
                if ((void *)v69 >= v134[1]) {
                  v69 %= (unint64_t)v134[1];
                }
              }
              else
              {
                v69 &= (unint64_t)v134[1] - 1;
              }
              if (v69 != v12) {
                break;
              }
            }
          }
        }
      }
      uint64_t v81 = operator new(0x28uLL);
      void *v81 = 0;
      v81[1] = v64;
      uint64_t v82 = v81 + 2;
      if (v59 < 0)
      {
        sub_19E06C18C(v82, __src, (unint64_t)v60);
      }
      else
      {
        *(_OWORD *)uint64_t v82 = *(_OWORD *)v130;
        v81[4] = *(void *)&v131[0];
      }
      float v83 = (float)(unint64_t)(*((void *)&v135 + 1) + 1);
      if (!v65 || (float)(v136 * (float)v65) < v83)
      {
        BOOL v84 = (v65 & (v65 - 1)) != 0;
        if (v65 < 3) {
          BOOL v84 = 1;
        }
        unint64_t v85 = v84 | (2 * v65);
        unint64_t v86 = vcvtps_u32_f32(v83 / v136);
        if (v85 <= v86) {
          int8x8_t prime = (int8x8_t)v86;
        }
        else {
          int8x8_t prime = (int8x8_t)v85;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }
        unint64_t v65 = (unint64_t)v134[1];
        if ((void *)*(void *)&prime <= v134[1])
        {
          if ((void *)*(void *)&prime < v134[1])
          {
            unint64_t v94 = vcvtps_u32_f32((float)*((unint64_t *)&v135 + 1) / v136);
            if (v134[1] < (void *)3
              || (uint8x8_t v95 = (uint8x8_t)vcnt_s8((int8x8_t)v134[1]), v95.i16[0] = vaddlv_u8(v95), v95.u32[0] > 1uLL))
            {
              unint64_t v94 = std::__next_prime(v94);
            }
            else
            {
              uint64_t v96 = 1 << -(char)__clz(v94 - 1);
              if (v94 >= 2) {
                unint64_t v94 = v96;
              }
            }
            if (*(void *)&prime <= v94) {
              int8x8_t prime = (int8x8_t)v94;
            }
            if (*(void *)&prime >= v65)
            {
              unint64_t v65 = (unint64_t)v134[1];
            }
            else
            {
              if (prime) {
                goto LABEL_131;
              }
              v116 = v134[0];
              v134[0] = 0;
              if (v116) {
                operator delete(v116);
              }
              unint64_t v65 = 0;
              v134[1] = 0;
            }
          }
        }
        else
        {
LABEL_131:
          if (*(void *)&prime >> 61) {
            sub_19E0416C4();
          }
          v88 = operator new(8 * *(void *)&prime);
          uint64_t v89 = v134[0];
          v134[0] = v88;
          if (v89) {
            operator delete(v89);
          }
          uint64_t v90 = 0;
          v134[1] = (void *)prime;
          do
            *((void *)v134[0] + v90++) = 0;
          while (*(void *)&prime != v90);
          v91 = (void **)v135;
          if ((void)v135)
          {
            unint64_t v92 = *(void *)(v135 + 8);
            uint8x8_t v93 = (uint8x8_t)vcnt_s8(prime);
            v93.i16[0] = vaddlv_u8(v93);
            if (v93.u32[0] > 1uLL)
            {
              if (v92 >= *(void *)&prime) {
                v92 %= *(void *)&prime;
              }
            }
            else
            {
              v92 &= *(void *)&prime - 1;
            }
            *((void *)v134[0] + v92) = &v135;
            for (uint64_t j = *v91; j; v92 = v98)
            {
              unint64_t v98 = j[1];
              if (v93.u32[0] > 1uLL)
              {
                if (v98 >= *(void *)&prime) {
                  v98 %= *(void *)&prime;
                }
              }
              else
              {
                v98 &= *(void *)&prime - 1;
              }
              if (v98 != v92)
              {
                if (!*((void *)v134[0] + v98))
                {
                  *((void *)v134[0] + v98) = v91;
                  goto LABEL_156;
                }
                char *v91 = (void *)*j;
                *uint64_t j = **((void **)v134[0] + v98);
                **((void **)v134[0] + v98) = j;
                uint64_t j = v91;
              }
              unint64_t v98 = v92;
LABEL_156:
              v91 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v65 = (unint64_t)prime;
        }
        if ((v65 & (v65 - 1)) != 0)
        {
          if (v64 >= v65) {
            unint64_t v12 = v64 % v65;
          }
          else {
            unint64_t v12 = v64;
          }
        }
        else
        {
          unint64_t v12 = (v65 - 1) & v64;
        }
      }
      v99 = v134[0];
      uint64_t v100 = (void *)*((void *)v134[0] + v12);
      if (v100)
      {
        void *v81 = *v100;
        unint64_t v5 = v123;
        goto LABEL_173;
      }
      void *v81 = v135;
      *(void *)&long long v135 = v81;
      v99[v12] = &v135;
      unint64_t v5 = v123;
      if (*v81)
      {
        unint64_t v101 = *(void *)(*v81 + 8);
        if ((v65 & (v65 - 1)) != 0)
        {
          if (v101 >= v65) {
            v101 %= v65;
          }
        }
        else
        {
          v101 &= v65 - 1;
        }
        uint64_t v100 = (char *)v134[0] + 8 * v101;
LABEL_173:
        *uint64_t v100 = v81;
      }
      ++*((void *)&v135 + 1);
      uint64_t v102 = (char *)a1[2];
      if (v4 >= v102)
      {
        unint64_t v105 = 0x8E38E38E38E38E39 * ((v4 - v121) >> 3) + 1;
        if (v105 > 0x38E38E38E38E38ELL) {
          sub_19E041BEC();
        }
        unint64_t v106 = 0x8E38E38E38E38E39 * ((v102 - v121) >> 3);
        if (2 * v106 > v105) {
          unint64_t v105 = 2 * v106;
        }
        if (v106 >= 0x1C71C71C71C71C7) {
          unint64_t v107 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v107 = v105;
        }
        if (v107 > 0x38E38E38E38E38ELL) {
          sub_19E0416C4();
        }
        long long v108 = (char *)operator new(72 * v107);
        long long v109 = &v108[8 * ((v4 - v121) >> 3)];
        *(_OWORD *)long long v109 = *(_OWORD *)v130;
        *((void *)v109 + 2) = *(void *)&v131[0];
        v130[1] = 0;
        *(void *)&v131[0] = 0;
        v130[0] = 0;
        *(_OWORD *)(v109 + 24) = *(_OWORD *)((char *)v131 + 8);
        *((_DWORD *)v109 + 10) = DWORD2(v131[1]);
        *((int64x2_t *)v109 + 3) = v132;
        *((void *)v109 + 8) = v133[0];
        v133[0] = 0;
        int64x2_t v132 = 0uLL;
        if (v4 == v121)
        {
          long long v111 = &v108[8 * ((v4 - v121) >> 3)];
          unint64_t v5 = v123;
        }
        else
        {
          uint64_t v110 = &v108[8 * ((v4 - v121) >> 3)];
          unint64_t v5 = v123;
          do
          {
            long long v111 = v110 - 72;
            long long v112 = *(_OWORD *)(v4 - 72);
            *((void *)v110 - 7) = *((void *)v4 - 7);
            *(_OWORD *)(v110 - 72) = v112;
            *((void *)v4 - 8) = 0;
            *((void *)v4 - 7) = 0;
            *((void *)v4 - 9) = 0;
            long long v113 = *((_OWORD *)v4 - 3);
            *((_DWORD *)v110 - 8) = *((_DWORD *)v4 - 8);
            *((_OWORD *)v110 - 3) = v113;
            *((void *)v110 - 2) = 0;
            *((void *)v110 - 1) = 0;
            *((void *)v110 - 3) = 0;
            *(_OWORD *)(v110 - 24) = *(_OWORD *)(v4 - 24);
            *((void *)v110 - 1) = *((void *)v4 - 1);
            *((void *)v4 - 3) = 0;
            *((void *)v4 - 2) = 0;
            *((void *)v4 - 1) = 0;
            v4 -= 72;
            v110 -= 72;
          }
          while (v4 != v121);
        }
        v114 = *a1;
        uint64_t v115 = (uint64_t)a1[1];
        BOOL v4 = v109 + 72;
        *a1 = v111;
        a1[1] = v109 + 72;
        a1[2] = &v108[72 * v107];
        while ((void *)v115 != v114)
        {
          v115 -= 72;
          sub_19E071294(v115);
        }
        if (v114) {
          operator delete(v114);
        }
      }
      else
      {
        long long v103 = *(_OWORD *)v130;
        *((void *)v4 + 2) = *(void *)&v131[0];
        *(_OWORD *)BOOL v4 = v103;
        v130[1] = 0;
        *(void *)&v131[0] = 0;
        v130[0] = 0;
        int v104 = DWORD2(v131[1]);
        *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)v131 + 8);
        *((_DWORD *)v4 + 10) = v104;
        *((void *)v4 + 7) = 0;
        *((void *)v4 + 8) = 0;
        *((void *)v4 + 6) = 0;
        *((int64x2_t *)v4 + 3) = v132;
        *((void *)v4 + 8) = v133[0];
        int64x2_t v132 = 0uLL;
        v133[0] = 0;
        v4 += 72;
      }
      a1[1] = v4;
      v121 = (char *)*a1;
      if (0x8E38E38E38E38E39 * ((v4 - (unsigned char *)*a1) >> 3) <= 0xE) {
        int v58 = 0;
      }
      else {
        int v58 = 3;
      }
      goto LABEL_196;
    }
    if (v9) {
      goto LABEL_79;
    }
LABEL_126:
    int v58 = 2;
LABEL_127:
    unint64_t v5 = v123;
LABEL_196:
    v141 = &v132;
    sub_19E0712F8((void ***)&v141);
    if (SBYTE7(v131[0]) < 0) {
      operator delete(v130[0]);
    }
  }
  while (v58 != 3);
  return sub_19E0D6BBC((uint64_t)v134);
}

void sub_19E0D6944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_19E0D6C24(1, v45);
  sub_19E0D6B70((uint64_t)&a30);
  sub_19E0D6BBC((uint64_t)&a40);
  a30 = a15;
  sub_19E071210((void ***)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0D6A58(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    sub_19E060B80((const void **)(i - 16), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_19E0D6AAC(uint64_t a1, int *a2, uint64_t *a3)
{
  if (qword_1EB4FED88 != -1) {
    dispatch_once(&qword_1EB4FED88, &unk_1EF09E578);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  double v7 = (double)*a2;
  uint64_t v8 = *a3;
  sub_19E039858(Instance + 16, (unsigned __int16 *)a1);
  long long v9 = *(_OWORD *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  long long v11 = *(_OWORD *)(a1 + 64);
  *(_WORD *)(Instance + 96) = *(_WORD *)(a1 + 80);
  *(_OWORD *)(Instance + 64) = v10;
  *(_OWORD *)(Instance + 80) = v11;
  *(_OWORD *)(Instance + 48) = v9;
  *(double *)(Instance + 104) = v7;
  *(void *)(Instance + 112) = v8;
  *(_DWORD *)(Instance + 120) = 0;
  return Instance;
}

uint64_t sub_19E0D6B70(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  sub_19E0712F8(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_19E0D6BBC(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  BOOL v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_19E0D6C24(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_19E0D6C84()
{
  qword_1EB4FED90 = 0;
  *(void *)algn_1EB4FED98 = "LXEntry";
  qword_1EB4FEDA0 = 0;
  unk_1EB4FEDA8 = 0;
  qword_1EB4FEDB0 = (uint64_t)sub_19E088418;
  unk_1EB4FEDB8 = 0u;
  unk_1EB4FEDC8 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB4FEDF0 = result;
  return result;
}

void sub_19E0D6CD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    sub_19E08F174(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_19E0616BC(v3);
  }

  JUMPOUT(0x19F3BA710);
}

void *sub_19E0D6D38(uint64_t a1, void *a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)(*a2 + 8);
  v4[0] = &unk_1EF09A2D0;
  v4[1] = a2;
  void v4[3] = v4;
  sub_19E0911C4(a1, v2, (uint64_t)v4);
  return sub_19E0AB4F8(v4);
}

void sub_19E0D6DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0AB4F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_19E0D6DDC(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_19E0D6E00(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_19E076F34(&v1);
}

uint64_t sub_19E0D6E2C(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(*(void *)a2 + 40)) {
    return sub_19E0A31B4((void *)(*(void *)(*(void *)(result + 32) + 8) + 40), (unsigned __int16 *)(*(void *)a2 + 8));
  }
  return result;
}

void *sub_19E0D6E50()
{
  return &unk_1EF0996B8;
}

uint64_t sub_19E0D6E5C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0996B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void sub_19E0D6E9C(uint64_t a1, void *a2)
{
  if (*a2)
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *a2 + 8);
    sub_19E0AB994();
  }
  __assert_rtn("operator()", "TIDynamicDictionaryImpl.cpp", 341, "false && \"Unexpectedly missing trie entry\"");
}

uint64_t sub_19E0D6F50(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A328;
  a2[1] = v2;
  return result;
}

void *sub_19E0D6F74(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A328;
  result[1] = v3;
  return result;
}

void sub_19E0D6FBC()
{
}

void *sub_19E0D6FD4()
{
  return &unk_1EF0996A8;
}

uint64_t sub_19E0D6FE0(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0996A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void sub_19E0D7020(uint64_t a1@<X0>, uint64_t *a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  if (*a2)
  {
    if (qword_1E94577A8[0] != -1) {
      dispatch_once(qword_1E94577A8, &unk_1EF09E598);
    }
    uint64_t v6 = qword_1E94577A0;
    if (os_log_type_enabled((os_log_t)qword_1E94577A0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(v5 + 16);
      if (!v8) {
        uint64_t v8 = v5 + 24;
      }
      int v9 = 136315138;
      uint64_t v10 = v8;
      _os_log_error_impl(&dword_19E038000, v6, OS_LOG_TYPE_ERROR, "found duplicate serialized entry with string='%s'", (uint8_t *)&v9, 0xCu);
    }
  }
  double v7 = **(atomic_uint ***)(a1 + 8);
  *a3 = v7;
  if (v7)
  {
    if ((int)atomic_fetch_add(v7, 1u) <= 0) {
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    }
  }
}

uint64_t sub_19E0D7158(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A2D0;
  a2[1] = v2;
  return result;
}

void *sub_19E0D717C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A2D0;
  result[1] = v3;
  return result;
}

void sub_19E0D71C4()
{
}

os_log_t sub_19E0D71DC()
{
  os_log_t result = os_log_create("com.apple.Lexicon", "DynamicDictionaryImpl");
  qword_1E94577A0 = (uint64_t)result;
  return result;
}

uint64_t sub_19E0D720C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(std::__shared_weak_count **)(result + 72);
    if (v2) {
      sub_19E0616BC(v2);
    }
    uint64_t v3 = *(void *)(v1 + 56);
    *(void *)(v1 + 56) = 0;
    if (v3) {
      sub_19E0D6CD8(v3);
    }
    BOOL v4 = *(void **)(v1 + 32);
    if (v4 && *(unsigned char *)(v1 + 30) == 1) {
      free(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    JUMPOUT(0x19F3BA710);
  }
  return result;
}

uint64_t sub_19E0D729C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09B5A8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0D72DC(uint64_t a1)
{
  return sub_19E0D720C(*(void *)(a1 + 24));
}

void sub_19E0D72E4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0D7320(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    sub_19E08F174(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_19E0616BC(v3);
  }
  return a1;
}

CFTypeRef **sub_19E0D7360(CFTypeRef **a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  CFTypeRef v2 = **a1;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(**a1);
  CFTypeID v3 = CFGetTypeID(v2);
  if (v3 != CFURLGetTypeID())
  {
    uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "Could not construct");
    __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v4 = CFURLCopyFileSystemPath((CFURLRef)v2, kCFURLPOSIXPathStyle);
  CFStringRef v5 = v4;
  if (!v4)
  {
    int v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
    goto LABEL_48;
  }
  CFTypeID v6 = CFGetTypeID(v4);
  if (v6 != CFStringGetTypeID())
  {
    uint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
    __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v5))
  {
    int v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not convert");
LABEL_48:
    __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CStringPtr = (char *)CFStringGetCStringPtr(v5, 0x8000100u);
  if (CStringPtr)
  {
    sub_19E0413C8(__p, CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(v5);
    maxBufLen.__r_.__value_.__r.__words[0] = 0;
    v35.location = 0;
    v35.length = Length;
    CFStringGetBytes(v5, v35, 0x8000100u, 0, 0, 0, 0, (CFIndex *)&maxBufLen);
    sub_19E041A24(__p, maxBufLen.__r_.__value_.__r.__words[0], 0);
    if (v33 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    v36.location = 0;
    v36.length = Length;
    CFStringGetBytes(v5, v36, 0x8000100u, 0, 0, (UInt8 *)v10, (CFIndex)maxBufLen.__r_.__value_.__l.__data_, (CFIndex *)&maxBufLen);
  }
  CFRelease(v5);
  sub_19E0D5968(&maxBufLen, (char *)__p);
  MEMORY[0x19F3BA5C0](&v30, &maxBufLen, 0, 0);
  if (SHIBYTE(maxBufLen.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(maxBufLen.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = v30;
  unint64_t v12 = v31;
  if (v31)
  {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    double v13 = v31;
    v28.__imp_.__ptr_ = v11;
    v28.__imp_.__cntrl_ = v12;
    if (v31)
    {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_19E0616BC(v13);
    }
  }
  else
  {
    v28.__imp_.__ptr_ = v30;
    v28.__imp_.__cntrl_ = 0;
  }
  while (v28.__imp_.__ptr_)
  {
    int v14 = (std::__fs::filesystem::directory_entry *)std::__fs::filesystem::directory_iterator::__dereference(&v28);
    sub_19E0D5A98((uint64_t)&maxBufLen, &v14->__p_);
    int v15 = SHIBYTE(maxBufLen.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(maxBufLen.__r_.__value_.__r.__words[2]) < 0) {
      sub_19E03FA9C(&__dst, maxBufLen.__r_.__value_.__l.__data_, maxBufLen.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = maxBufLen;
    }
    int v16 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    uint64_t v17 = (void *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    BOOL v20 = sub_19E0629E0(p_dst, size, "nlptemp-", 8uLL);
    BOOL v21 = v20;
    if (v16 < 0)
    {
      operator delete(v17);
      if (!v21) {
        goto LABEL_33;
      }
LABEL_32:
      std::__fs::filesystem::__remove(&v14->__p_, 0);
      goto LABEL_33;
    }
    if (v20) {
      goto LABEL_32;
    }
LABEL_33:
    if (v15 < 0) {
      operator delete(maxBufLen.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::directory_iterator::__increment(&v28, 0);
  }
  if (v28.__imp_.__cntrl_) {
    sub_19E0616BC(v28.__imp_.__cntrl_);
  }
  if (v31) {
    sub_19E0616BC(v31);
  }
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  CFRelease(v2);
  return a1;
}

void sub_19E0D7764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,long long __p,int a25,__int16 a26,char a27,char a28)
{
  if (a2)
  {
    if (a28 < 0) {
      operator delete((void *)__p);
    }
    CFRelease(v29);
    CFRelease(v28);
    if (a2 == 2)
    {
      uint64_t v32 = __cxa_begin_catch(exception_object);
      if (qword_1E94577A8[0] != -1) {
        dispatch_once(qword_1E94577A8, &unk_1EF09E598);
      }
      char v33 = qword_1E94577A0;
      if (os_log_type_enabled((os_log_t)qword_1E94577A0, OS_LOG_TYPE_FAULT))
      {
        uint64_t v34 = (*(uint64_t (**)(void *))(*(void *)v32 + 16))(v32);
        LODWORD(__p) = 136315394;
        *(void *)((char *)&__p + 4) = "cleanup_nlp_temp_files";
        WORD6(__p) = 2080;
        *(void *)((char *)&__p + 14) = v34;
        _os_log_fault_impl(&dword_19E038000, v33, OS_LOG_TYPE_FAULT, "%s: failed to clean up NLP temporary files: %s", (uint8_t *)&__p, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19E0D7618);
    }
    sub_19E04137C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_19E0D7A24(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_19E0D7A48(uint64_t a1)
{
  CFTypeRef v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_19E0D7A60(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*(_DWORD *)(*a2 + 40) && (*(unsigned char *)(v2 + 47) & 8) == 0 && (*(_DWORD *)(v2 + 48) & 0x80000000) == 0)
  {
    CFTypeID v3 = *(void **)(*(void *)(a1 + 32) + 8);
    CFStringRef v5 = (void *)v3[6];
    unint64_t v4 = v3[7];
    if ((unint64_t)v5 >= v4)
    {
      double v7 = (void *)v3[5];
      uint64_t v8 = v5 - v7;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61) {
        sub_19E041BEC();
      }
      uint64_t v10 = v4 - (void)v7;
      if (v10 >> 2 > v9) {
        unint64_t v9 = v10 >> 2;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        if (v11 >> 61) {
          sub_19E0416C4();
        }
        unint64_t v12 = (char *)operator new(8 * v11);
      }
      else
      {
        unint64_t v12 = 0;
      }
      double v13 = &v12[8 * v8];
      *(void *)double v13 = v2;
      CFTypeID v6 = v13 + 8;
      if (v5 != v7)
      {
        do
        {
          uint64_t v14 = *--v5;
          *((void *)v13 - 1) = v14;
          v13 -= 8;
        }
        while (v5 != v7);
        CFStringRef v5 = (void *)v3[5];
      }
      v3[5] = v13;
      v3[6] = v6;
      v3[7] = &v12[8 * v11];
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *CFStringRef v5 = v2;
      CFTypeID v6 = v5 + 1;
    }
    v3[6] = v6;
  }
}

void sub_19E0D7B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a3);
  CFAbsoluteTimeGetCurrent();

  sub_19E0AB994();
}

uint64_t LXLemmatizerCreate(const __CFString *a1, CFErrorRef *a2)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (const void *)sub_19E0D7D78();
  CFLocaleRef v5 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1);
  v8[0] = &unk_1EF0987B8;
  unsigned __int16 v8[3] = v8;
  CFStringRef v6 = (const __CFString *)sub_19E0F4688(0, v5);
  sub_19E0F4820(v8);
  if (v6) {
    sub_19E0D0394((uint64_t)v4 + 16, v6);
  }
  if (a2) {
    *a2 = sub_19E0A4344(@"Failed to get model path from locale");
  }
  CFRelease(v4);
  if (v5) {
    CFRelease(v5);
  }
  return 0;
}

void sub_19E0D7D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_19E04137C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0D7D78()
{
  if (qword_1EB4FED40 != -1) {
    dispatch_once(&qword_1EB4FED40, &unk_1EF09E5B8);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(void *)(Instance + 80) = 0;
  *(void *)(Instance + 24) = &unk_1EF098618;
  sub_19E0420AC((void *)(Instance + 40));
  *(void *)(Instance + 80) = 0;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  return Instance;
}

void sub_19E0D7E34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sub_19E0D054C(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0D7E50()
{
  qword_1EB4FECC8 = 0;
  unk_1EB4FECD0 = "LXLemmatizer";
  qword_1EB4FECD8 = 0;
  unk_1EB4FECE0 = 0;
  qword_1EB4FECE8 = (uint64_t)sub_19E0D7EA4;
  unk_1EB4FECF0 = 0u;
  unk_1EB4FED00 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB4FED28 = result;
  return result;
}

void sub_19E0D7EA4(uint64_t a1)
{
  sub_19E0D11E4((void *)(a1 + 24));
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    sub_19E0D054C(v2);
  }
}

void LXLemmatizerCreateFromFile(const __CFString *a1)
{
  uint64_t v2 = sub_19E0D7D78();
  sub_19E0D0394(v2 + 16, a1);
}

uint64_t LXLemmatizerCopyLemmaForStringWithPOS(uint64_t a1, const __CFString *a2, std::string::value_type a3)
{
  uint64_t v3 = 0;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1 || !a2) {
    return v3;
  }
  sub_19E039E88(a2, v18);
  std::string::push_back((std::string *)v18, 58);
  std::string v15 = *(std::string *)v18;
  memset(v18, 0, 24);
  std::string::push_back(&v15, a3);
  std::string v17 = v15;
  memset(&v15, 0, sizeof(v15));
  if ((v18[23] & 0x80000000) != 0) {
    operator delete(*(void **)v18);
  }
  memset(v18, 0, sizeof(v18));
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFStringRef v6 = &v17;
  }
  else {
    CFStringRef v6 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  sub_19E042718((uint64_t *)(a1 + 40), (uint64_t)v6, size, (uint64_t)v18, &v15);
  uint64_t v8 = (unint64_t *)(a1 + 24);
  if ((v18[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v18[8]);
  }
  __n128 __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  *(void *)unint64_t v18 = &unk_1EF098A78;
  *(void *)&v18[8] = &__p;
  *(void *)&v18[24] = v18;
  sub_19E0D0818(v8, (uint64_t)&v15, (uint64_t)v18, 0xFFFFFFFFLL);
  unint64_t v9 = (CFStringRef *)sub_19E0B43E4(v18);
  uint64_t v10 = HIBYTE(v14);
  if (v14 < 0) {
    uint64_t v10 = v13;
  }
  if (!v10)
  {
    uint64_t v3 = 0;
    if ((v14 & 0x8000000000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  sub_19E0A6D28(v9, (const UInt8 *)&__p);
  uint64_t v3 = *(void *)v18;
  *(void *)unint64_t v18 = 0;
  sub_19E040A10((const void **)v18);
  if (v14 < 0) {
LABEL_17:
  }
    operator delete(__p);
LABEL_18:
  if (v16 < 0) {
    operator delete((void *)v15.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_19E0D8120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a17);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void LXLemmatizerEnumerateLemmasforString(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v11 = a3;
    if (a2)
    {
      sub_19E039E88(a2, &v8);
      std::string::push_back(&v8, 58);
      std::string __p = v8;
      long long v12 = 0u;
      long long v13 = 0u;
      if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      sub_19E042718((uint64_t *)(a1 + 40), (uint64_t)p_p, size, (uint64_t)&v12, &v8);
      CFStringRef v6 = (unint64_t *)(a1 + 24);
      if (SHIBYTE(v13) < 0) {
        operator delete(*((void **)&v12 + 1));
      }
      char v7 = 0;
      *(void *)&long long v12 = &unk_1EF098A20;
      *((void *)&v12 + 1) = &v11;
      *(void *)&long long v13 = &v7;
      *((void *)&v13 + 1) = &v12;
      sub_19E0D0818(v6, (uint64_t)&v8, (uint64_t)&v12, 0xFFFFFFFFLL);
      sub_19E0B43E4(&v12);
      if (v9 < 0) {
        operator delete((void *)v8.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_19E0D82F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_19E0B43E4((void *)(v26 - 64));
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t LXLemmatizerGetPartOfSpeechIDForTag(const __CFString *a1)
{
  uint64_t v1 = (unsigned __int8 *)v11;
  sub_19E039E88(a1, v11);
  int v2 = (char)v12;
  uint64_t v3 = (void *)v11[0];
  if ((v12 & 0x80u) == 0)
  {
    size_t v4 = v12;
  }
  else
  {
    uint64_t v1 = (unsigned __int8 *)v11[0];
    size_t v4 = v11[1];
  }
  uint64_t v5 = 2;
  if (sub_19E0629E0(v1, v4, "VB", 2uLL)) {
    goto LABEL_51;
  }
  if (sub_19E0629E0(v1, v4, "NN", 2uLL))
  {
    uint64_t v5 = 1;
    goto LABEL_51;
  }
  if (sub_19E0629E0(v1, v4, "RB", 2uLL))
  {
    uint64_t v5 = 4;
    goto LABEL_51;
  }
  if (sub_19E0629E0(v1, v4, "JJ", 2uLL))
  {
    uint64_t v5 = 3;
    goto LABEL_51;
  }
  if (sub_19E0629E0(v1, v4, "PRP", 3uLL))
  {
    uint64_t v5 = 5;
    goto LABEL_51;
  }
  if (sub_19E0629E0(v1, v4, "DT", 2uLL))
  {
    uint64_t v5 = 6;
    goto LABEL_51;
  }
  if (sub_19E0629E0(v1, v4, "RP", 2uLL))
  {
    uint64_t v5 = 7;
    goto LABEL_51;
  }
  if (v4 == 3)
  {
    if (*(_WORD *)v1 != 20041 || v1[2] != 84)
    {
      if (*(_WORD *)v1 == 17488 && v1[2] == 84)
      {
        uint64_t v5 = 12;
      }
      else
      {
        unsigned int v8 = bswap32(*(unsigned __int16 *)v1) >> 16;
        if (v8 == 20562)
        {
          int v9 = v1[2] - 69;
        }
        else if (v8 < 0x5052)
        {
          int v9 = -1;
        }
        else
        {
          int v9 = 1;
        }
        if (v9) {
          uint64_t v5 = 0;
        }
        else {
          uint64_t v5 = 12;
        }
      }
      goto LABEL_51;
    }
LABEL_41:
    uint64_t v5 = 11;
    goto LABEL_51;
  }
  if (v4 != 2)
  {
    uint64_t v5 = 0;
    goto LABEL_51;
  }
  switch(*(_WORD *)v1)
  {
    case 0x4E49:
    case 0x4F54:
      uint64_t v5 = 8;
      break;
    case 0x4855:
      goto LABEL_41;
    case 0x4343:
    case 0x5343:
      uint64_t v5 = 10;
      break;
    case 0x4443:
      uint64_t v5 = 9;
      break;
    default:
      uint64_t v5 = 12;
      if (*(_WORD *)v1 != 22597)
      {
        if (*(_WORD *)v1 == 22342) {
          uint64_t v5 = 12;
        }
        else {
          uint64_t v5 = 0;
        }
      }
      break;
  }
LABEL_51:
  if (v2 < 0) {
    operator delete(v3);
  }
  return v5;
}

uint64_t sub_19E0D85E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, float a7)
{
  sub_19E1060D0(a1, a3);
  uint64_t v13 = *(unsigned int *)(a2 + 14352);
  if (v13 == -1) {
    sub_19E07D5D0();
  }
  v16[0] = &v18;
  ((void (*)(void *, uint64_t))off_1EF09E5D8[v13])(v16, a2);
  *(void *)(a1 + 80) = 0;
  *(float *)(a1 + 88) = a7;
  *(unsigned char *)(a1 + 92) = a4;
  *(unsigned char *)(a1 + 93) = a5;
  v16[0] = a1 + 40;
  v16[1] = a6;
  int v17 = 0;
  uint64_t v14 = *(unsigned int *)(a2 + 14352);
  if (v14 == -1) {
    sub_19E07D5D0();
  }
  unint64_t v18 = v16;
  ((void (*)(void **, uint64_t))off_1EF09E640[v14])(&v18, a2);
  return a1;
}

void sub_19E0D86DC(_Unwind_Exception *a1)
{
  sub_19E080690(v3, 0);
  sub_19E07FA6C(v2);
  sub_19E07FA6C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0D870C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_19E1060D0(a1, a2);
  sub_19E1060D0(v4 + 40, a2 + 40);
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 92);
  if (*(void *)(a2 + 80)) {
    operator new();
  }
  return a1;
}

void sub_19E0D87C0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BA710](v4, 0x1032C40198927B0);
  sub_19E080690(v3, 0);
  sub_19E07FA6C(v2);
  sub_19E07FA6C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0D8810(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_19E106148(a1, a2);
    sub_19E106148(a1 + 40, a2 + 40);
    if (*(void *)(a2 + 80)) {
      operator new();
    }
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    *(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 92);
  }
  return a1;
}

void sub_19E0D88BC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BA710](v1, 0x1032C40198927B0);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0D88E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 72);
  if (v2 == -1) {
    goto LABEL_8;
  }
  uint64_t v5 = a1 + 40;
  uint64_t v10 = &v9;
  if ((((uint64_t (*)(uint64_t **, uint64_t))off_1EF09E6A8[v2])(&v10, a1 + 40) & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 80);
    if (v6) {
      return sub_19E0D88E0(v6, a2);
    }
  }
  uint64_t v9 = v5;
  uint64_t v8 = *(unsigned int *)(a2 + 14352);
  if (v8 == -1) {
LABEL_8:
  }
    sub_19E07D5D0();
  uint64_t v10 = &v9;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1EF09E710[v8])(&v10, a2);
}

double sub_19E0D8990(uint64_t a1)
{
  if (*(_DWORD *)(**(void **)a1 + 32) != 12) {
    sub_19E07D5D0();
  }
  return 0.0;
}

double sub_19E0D89C0(uint64_t a1)
{
  if (*(_DWORD *)(**(void **)a1 + 32) != 11) {
    sub_19E07D5D0();
  }
  return 0.0;
}

double sub_19E0D89F0(uint64_t a1)
{
  if (*(_DWORD *)(**(void **)a1 + 32) != 10) {
    sub_19E07D5D0();
  }
  return 0.0;
}

double sub_19E0D8A20(uint64_t a1)
{
  if (*(_DWORD *)(**(void **)a1 + 32) != 9) {
    sub_19E07D5D0();
  }
  return 0.0;
}

double sub_19E0D8A50(uint64_t a1)
{
  if (*(_DWORD *)(**(void **)a1 + 32) != 8) {
    sub_19E07D5D0();
  }
  return 0.0;
}

double sub_19E0D8A80(uint64_t a1)
{
  if (*(_DWORD *)(**(void **)a1 + 32) != 7) {
    sub_19E07D5D0();
  }
  return 0.0;
}

float sub_19E0D8AB0(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 6) {
    sub_19E07D5D0();
  }
  float result = 0.0;
  if (*(_DWORD *)(v3 + 12) != -1 && !*(unsigned char *)(v3 + 9)) {
    return sub_19E0FA3CC((uint64_t *)(a2 + 40), v3);
  }
  return result;
}

float sub_19E0D8B04(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (v2[8] != 5) {
    sub_19E07D5D0();
  }
  float result = 0.0;
  if ((unint64_t)(*(void *)v2 + 1) >= 2) {
    return sub_19E0F851C((void *)(a2 + 40), v2);
  }
  return result;
}

float sub_19E0D8B54(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 4) {
    sub_19E07D5D0();
  }
  float result = 0.0;
  if (*(void *)v2) {
    BOOL v4 = *(void *)v2 == 0xFFFFFFFFLL;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return sub_19E0F6CC4((uint64_t *)(a2 + 40), v2);
  }
  return result;
}

float sub_19E0D8BA8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 3) {
    sub_19E07D5D0();
  }
  float result = 0.0;
  if ((unint64_t)(*(void *)v2 + 1) >= 2) {
    return sub_19E0F9184(a2 + 40, (unint64_t *)v2);
  }
  return result;
}

float sub_19E0D8BF8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 2) {
    sub_19E07D5D0();
  }
  float result = 0.0;
  if ((unint64_t)(*(void *)v2 + 1) >= 2) {
    return sub_19E0F8B44((uint64_t *)(a2 + 40), (uint64_t *)v2);
  }
  return result;
}

float sub_19E0D8C48(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (v2[8] != 1) {
    sub_19E07D5D0();
  }
  float result = 0.0;
  if ((unint64_t)(*(void *)v2 + 1) >= 2) {
    return sub_19E0F851C((void *)(a2 + 40), v2);
  }
  return result;
}

float sub_19E0D8C98(void **a1)
{
  uint64_t v1 = (char *)**a1;
  if (*((_DWORD *)v1 + 8)) {
    sub_19E07D5D0();
  }
  float result = 0.0;
  if ((*v1 & 0x80000000) == 0)
  {
    float result = 1.0;
    if (!*v1)
    {
      if (*((_DWORD *)v1 + 2) || (float result = 0.0, v1[24]))
      {
        float v3 = (double)v1[20] * 0.00392156863;
        return v3 * v3;
      }
    }
  }
  return result;
}

uint64_t sub_19E0D8D04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 72);
  if (v2 == -1) {
    goto LABEL_8;
  }
  uint64_t v5 = a1 + 40;
  uint64_t v10 = &v9;
  if ((((uint64_t (*)(uint64_t **, uint64_t))off_1EF09E6A8[v2])(&v10, a1 + 40) & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 80);
    if (v6) {
      return sub_19E0D8D04(v6, a2);
    }
  }
  uint64_t v9 = v5;
  uint64_t v8 = *(unsigned int *)(a2 + 14352);
  if (v8 == -1) {
LABEL_8:
  }
    sub_19E07D5D0();
  uint64_t v10 = &v9;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1EF09E778[v8])(&v10, a2);
}

float sub_19E0D8DB4(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 12) {
    sub_19E07D5D0();
  }
  int v18 = 0;
  float v4 = 0.0;
  if (*(unsigned char *)a2) {
    BOOL v5 = *(_DWORD *)(v2 + 12) == -1;
  }
  else {
    BOOL v5 = 1;
  }
  BOOL v6 = !v5 && *(unsigned char *)(v2 + 9) == 0;
  if (v6 && sub_19E0FCE84((uint64_t *)(a2 + 40), v2, &v18))
  {
    unsigned int v7 = v18 & 0x3FFFFFFF;
    if ((v18 & 0x3FFFFFFF) != 0)
    {
      if (*(unsigned char *)a2)
      {
        unsigned int v8 = 0;
        uint64_t v9 = *(uint64_t **)(a2 + 24);
        unint64_t v10 = v9[1];
        do
        {
          if (v10 <= v7) {
            break;
          }
          uint64_t v11 = *v9;
          if (!*v9) {
            return v4;
          }
          unint64_t v12 = v7 + 1;
          if (v10 < v12) {
LABEL_34:
          }
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          if (v10 <= v12) {
            return v4;
          }
          int v13 = *(unsigned __int8 *)(v11 + v7);
          char v14 = *(unsigned char *)(v11 + v12);
          if ((v14 & 4) != 0)
          {
            unint64_t v15 = v7 + 2;
            if (v10 < v15) {
              goto LABEL_34;
            }
            if (v10 <= v15) {
              return v4;
            }
            v8 += *(unsigned __int8 *)(v11 + v15) * *(unsigned __int8 *)(v11 + v15);
          }
          else
          {
            unsigned int v8 = 65025;
          }
          if ((v14 & 0x80) == 0) {
            break;
          }
          v7 += v13;
        }
        while (v7 && v13 != 0);
        return (double)v8 * 0.0000153787005;
      }
    }
    else if (sub_19E0FCEF8(a2 + 40, v2))
    {
      return 0.0;
    }
    else
    {
      return 1.0;
    }
  }
  return v4;
}

float sub_19E0D8F1C(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (v2[8] != 11) {
    sub_19E07D5D0();
  }
  int v16 = 0;
  float v4 = 0.0;
  if (*(unsigned char *)a2
    && (unint64_t)(*(void *)v2 + 1) >= 2
    && sub_19E0FB15C((void *)(a2 + 40), v2, &v16))
  {
    unsigned int v6 = v16 & 0x3FFFFFFF;
    if ((v16 & 0x3FFFFFFF) != 0)
    {
      if (*(unsigned char *)a2)
      {
        unsigned int v7 = 0;
        unsigned int v8 = *(uint64_t **)(a2 + 24);
        unint64_t v9 = v8[1];
        do
        {
          if (v9 <= v6) {
            break;
          }
          uint64_t v10 = *v8;
          if (!*v8) {
            return v4;
          }
          unint64_t v11 = v6 + 1;
          if (v9 < v11) {
LABEL_28:
          }
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          if (v9 <= v11) {
            return v4;
          }
          int v12 = *(unsigned __int8 *)(v10 + v6);
          char v13 = *(unsigned char *)(v10 + v11);
          if ((v13 & 4) != 0)
          {
            unint64_t v14 = v6 + 2;
            if (v9 < v14) {
              goto LABEL_28;
            }
            if (v9 <= v14) {
              return v4;
            }
            v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
          }
          else
          {
            unsigned int v7 = 65025;
          }
          if ((v13 & 0x80) == 0) {
            break;
          }
          v6 += v12;
        }
        while (v6 && v12 != 0);
        return (double)v7 * 0.0000153787005;
      }
    }
    else if (sub_19E0FC998(a2 + 40, (uint64_t)v2))
    {
      return 0.0;
    }
    else
    {
      return 1.0;
    }
  }
  return v4;
}

float sub_19E0D9084(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 10) {
    sub_19E07D5D0();
  }
  int v17 = 0;
  float v4 = 0.0;
  if (*(unsigned char *)a2)
  {
    BOOL v5 = !*(void *)v2 || *(void *)v2 == 0xFFFFFFFFLL;
    if (!v5 && sub_19E0FBF94((uint64_t *)(a2 + 40), v2, &v17))
    {
      unsigned int v7 = v17 & 0x3FFFFFFF;
      if ((v17 & 0x3FFFFFFF) != 0)
      {
        if (*(unsigned char *)a2)
        {
          unsigned int v8 = 0;
          unint64_t v9 = *(uint64_t **)(a2 + 24);
          unint64_t v10 = v9[1];
          do
          {
            if (v10 <= v7) {
              break;
            }
            uint64_t v11 = *v9;
            if (!*v9) {
              return v4;
            }
            unint64_t v12 = v7 + 1;
            if (v10 < v12) {
LABEL_32:
            }
              __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
            if (v10 <= v12) {
              return v4;
            }
            int v13 = *(unsigned __int8 *)(v11 + v7);
            char v14 = *(unsigned char *)(v11 + v12);
            if ((v14 & 4) != 0)
            {
              unint64_t v15 = v7 + 2;
              if (v10 < v15) {
                goto LABEL_32;
              }
              if (v10 <= v15) {
                return v4;
              }
              v8 += *(unsigned __int8 *)(v11 + v15) * *(unsigned __int8 *)(v11 + v15);
            }
            else
            {
              unsigned int v8 = 65025;
            }
            if ((v14 & 0x80) == 0) {
              break;
            }
            v7 += v13;
          }
          while (v7 && v13 != 0);
          return (double)v8 * 0.0000153787005;
        }
      }
      else if (sub_19E0FC02C(a2 + 40, v2))
      {
        return 0.0;
      }
      else
      {
        return 1.0;
      }
    }
  }
  return v4;
}

float sub_19E0D91F0(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 9) {
    sub_19E07D5D0();
  }
  int v16 = 0;
  float v4 = 0.0;
  if (*(unsigned char *)a2
    && (unint64_t)(*(void *)v2 + 1) >= 2
    && sub_19E0FB81C(a2 + 40, (unint64_t *)v2, &v16))
  {
    unsigned int v6 = v16 & 0x3FFFFFFF;
    if ((v16 & 0x3FFFFFFF) != 0)
    {
      if (*(unsigned char *)a2)
      {
        unsigned int v7 = 0;
        unsigned int v8 = *(uint64_t **)(a2 + 24);
        unint64_t v9 = v8[1];
        do
        {
          if (v9 <= v6) {
            break;
          }
          uint64_t v10 = *v8;
          if (!*v8) {
            return v4;
          }
          unint64_t v11 = v6 + 1;
          if (v9 < v11) {
LABEL_28:
          }
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          if (v9 <= v11) {
            return v4;
          }
          int v12 = *(unsigned __int8 *)(v10 + v6);
          char v13 = *(unsigned char *)(v10 + v11);
          if ((v13 & 4) != 0)
          {
            unint64_t v14 = v6 + 2;
            if (v9 < v14) {
              goto LABEL_28;
            }
            if (v9 <= v14) {
              return v4;
            }
            v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
          }
          else
          {
            unsigned int v7 = 65025;
          }
          if ((v13 & 0x80) == 0) {
            break;
          }
          v6 += v12;
        }
        while (v6 && v12 != 0);
        return (double)v7 * 0.0000153787005;
      }
    }
    else if (sub_19E0FB8AC(a2 + 40, v2))
    {
      return 0.0;
    }
    else
    {
      return 1.0;
    }
  }
  return v4;
}

float sub_19E0D9358(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (v2[8] != 8) {
    sub_19E07D5D0();
  }
  int v16 = 0;
  float v4 = 0.0;
  if (*(unsigned char *)a2
    && (unint64_t)(*(void *)v2 + 1) >= 2
    && sub_19E0FB15C((void *)(a2 + 40), v2, &v16))
  {
    unsigned int v6 = v16 & 0x3FFFFFFF;
    if ((v16 & 0x3FFFFFFF) != 0)
    {
      if (*(unsigned char *)a2)
      {
        unsigned int v7 = 0;
        unsigned int v8 = *(uint64_t **)(a2 + 24);
        unint64_t v9 = v8[1];
        do
        {
          if (v9 <= v6) {
            break;
          }
          uint64_t v10 = *v8;
          if (!*v8) {
            return v4;
          }
          unint64_t v11 = v6 + 1;
          if (v9 < v11) {
LABEL_28:
          }
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          if (v9 <= v11) {
            return v4;
          }
          int v12 = *(unsigned __int8 *)(v10 + v6);
          char v13 = *(unsigned char *)(v10 + v11);
          if ((v13 & 4) != 0)
          {
            unint64_t v14 = v6 + 2;
            if (v9 < v14) {
              goto LABEL_28;
            }
            if (v9 <= v14) {
              return v4;
            }
            v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
          }
          else
          {
            unsigned int v7 = 65025;
          }
          if ((v13 & 0x80) == 0) {
            break;
          }
          v6 += v12;
        }
        while (v6 && v12 != 0);
        return (double)v7 * 0.0000153787005;
      }
    }
    else if (sub_19E0FB1F4(a2 + 40, (uint64_t)v2))
    {
      return 0.0;
    }
    else
    {
      return 1.0;
    }
  }
  return v4;
}

float sub_19E0D94C0(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 7) {
    sub_19E07D5D0();
  }
  int v16 = 0;
  float v4 = 0.0;
  if (*(unsigned char *)a2
    && (unint64_t)(*(void *)v2 + 1) >= 2
    && sub_19E0FAA94((uint64_t *)(a2 + 40), (uint64_t *)v2, &v16))
  {
    unsigned int v6 = v16 & 0x3FFFFFFF;
    if ((v16 & 0x3FFFFFFF) != 0)
    {
      if (*(unsigned char *)a2)
      {
        unsigned int v7 = 0;
        unsigned int v8 = *(uint64_t **)(a2 + 24);
        unint64_t v9 = v8[1];
        do
        {
          if (v9 <= v6) {
            break;
          }
          uint64_t v10 = *v8;
          if (!*v8) {
            return v4;
          }
          unint64_t v11 = v6 + 1;
          if (v9 < v11) {
LABEL_28:
          }
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          if (v9 <= v11) {
            return v4;
          }
          int v12 = *(unsigned __int8 *)(v10 + v6);
          char v13 = *(unsigned char *)(v10 + v11);
          if ((v13 & 4) != 0)
          {
            unint64_t v14 = v6 + 2;
            if (v9 < v14) {
              goto LABEL_28;
            }
            if (v9 <= v14) {
              return v4;
            }
            v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
          }
          else
          {
            unsigned int v7 = 65025;
          }
          if ((v13 & 0x80) == 0) {
            break;
          }
          v6 += v12;
        }
        while (v6 && v12 != 0);
        return (double)v7 * 0.0000153787005;
      }
    }
    else if (sub_19E0FAB24(a2 + 40, v2))
    {
      return 0.0;
    }
    else
    {
      return 1.0;
    }
  }
  return v4;
}

float sub_19E0D9628(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 6) {
    sub_19E07D5D0();
  }
  float v4 = 0.0;
  if (*(unsigned char *)a2) {
    BOOL v5 = *(_DWORD *)(v2 + 12) == -1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && *(unsigned char *)(v2 + 9) == 0)
  {
    int v19 = 0;
    if (sub_19E06E5B4((uint64_t *)(a2 + 48), v2, &v19))
    {
      if ((~v19 & 0x7FFFFF) != 0)
      {
        if ((v19 & 0x400000) != 0 || (unsigned int v8 = v19 & 0x1FFFFF, (v19 & 0x1FFFFF) == 0))
        {
          if ((v19 & 0x400000) != 0)
          {
            float v18 = (double)v19 * 0.00392156863;
            return v18 * v18;
          }
          else if (sub_19E0FA45C(a2 + 40, v2))
          {
            return 0.0;
          }
          else
          {
            return 1.0;
          }
        }
        else if (*(unsigned char *)a2)
        {
          unsigned int v9 = 0;
          uint64_t v10 = *(uint64_t **)(a2 + 24);
          unint64_t v11 = v10[1];
          do
          {
            if (v11 <= v8) {
              break;
            }
            uint64_t v12 = *v10;
            if (!*v10) {
              return v4;
            }
            unint64_t v13 = v8 + 1;
            if (v11 < v13) {
LABEL_38:
            }
              __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
            if (v11 <= v13) {
              return v4;
            }
            int v14 = *(unsigned __int8 *)(v12 + v8);
            char v15 = *(unsigned char *)(v12 + v13);
            if ((v15 & 4) != 0)
            {
              unint64_t v16 = v8 + 2;
              if (v11 < v16) {
                goto LABEL_38;
              }
              if (v11 <= v16) {
                return v4;
              }
              v9 += *(unsigned __int8 *)(v12 + v16) * *(unsigned __int8 *)(v12 + v16);
            }
            else
            {
              unsigned int v9 = 65025;
            }
            if ((v15 & 0x80) == 0) {
              break;
            }
            v8 += v14;
          }
          while (v8 && v14 != 0);
          return (double)v9 * 0.0000153787005;
        }
      }
    }
  }
  return v4;
}

float sub_19E0D97BC(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (v2[8] != 5) {
    sub_19E07D5D0();
  }
  float v4 = 0.0;
  if (*(unsigned char *)a2)
  {
    if ((unint64_t)(*(void *)v2 + 1) >= 2)
    {
      int v17 = 0;
      if (sub_19E0C3B60((void *)(a2 + 48), v2, &v17))
      {
        if ((~v17 & 0x7FFFFF) != 0)
        {
          if ((v17 & 0x400000) != 0 || (unsigned int v6 = v17 & 0x1FFFFF, (v17 & 0x1FFFFF) == 0))
          {
            if ((v17 & 0x400000) != 0)
            {
              float v16 = (double)v17 * 0.00392156863;
              return v16 * v16;
            }
            else if (sub_19E0F9FA4(a2 + 40, (uint64_t)v2))
            {
              return 0.0;
            }
            else
            {
              return 1.0;
            }
          }
          else if (*(unsigned char *)a2)
          {
            unsigned int v7 = 0;
            unsigned int v8 = *(uint64_t **)(a2 + 24);
            unint64_t v9 = v8[1];
            do
            {
              if (v9 <= v6) {
                break;
              }
              uint64_t v10 = *v8;
              if (!*v8) {
                return v4;
              }
              unint64_t v11 = v6 + 1;
              if (v9 < v11) {
LABEL_32:
              }
                __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
              if (v9 <= v11) {
                return v4;
              }
              int v12 = *(unsigned __int8 *)(v10 + v6);
              char v13 = *(unsigned char *)(v10 + v11);
              if ((v13 & 4) != 0)
              {
                unint64_t v14 = v6 + 2;
                if (v9 < v14) {
                  goto LABEL_32;
                }
                if (v9 <= v14) {
                  return v4;
                }
                v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
              }
              else
              {
                unsigned int v7 = 65025;
              }
              if ((v13 & 0x80) == 0) {
                break;
              }
              v6 += v12;
            }
            while (v6 && v12 != 0);
            return (double)v7 * 0.0000153787005;
          }
        }
      }
    }
  }
  return v4;
}

float sub_19E0D994C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 4) {
    sub_19E07D5D0();
  }
  float v4 = 0.0;
  if (*(unsigned char *)a2)
  {
    if (*(void *)v2 && *(void *)v2 != 0xFFFFFFFFLL)
    {
      int v19 = 0;
      int v7 = sub_19E0B4630((uint64_t *)(a2 + 48), v2, &v19);
      if (v7 && (~v19 & 0xFFFFFF) != 0)
      {
        if ((v19 & 0x400000) != 0 || (unsigned int v8 = v19 & 0x1FFFFF, (v19 & 0x1FFFFF) == 0))
        {
          if ((v19 & 0x400000) != 0)
          {
            float v18 = (double)v19 * 0.00392156863;
            return v18 * v18;
          }
          else if (sub_19E0F9848(a2 + 40, v2))
          {
            return 0.0;
          }
          else
          {
            return 1.0;
          }
        }
        else if (*(unsigned char *)a2)
        {
          unsigned int v9 = 0;
          uint64_t v10 = *(uint64_t **)(a2 + 24);
          unint64_t v11 = v10[1];
          do
          {
            if (v11 <= v8) {
              break;
            }
            uint64_t v12 = *v10;
            if (!*v10) {
              return v4;
            }
            unint64_t v13 = v8 + 1;
            if (v11 < v13) {
LABEL_36:
            }
              __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
            if (v11 <= v13) {
              return v4;
            }
            int v14 = *(unsigned __int8 *)(v12 + v8);
            char v15 = *(unsigned char *)(v12 + v13);
            if ((v15 & 4) != 0)
            {
              unint64_t v16 = v8 + 2;
              if (v11 < v16) {
                goto LABEL_36;
              }
              if (v11 <= v16) {
                return v4;
              }
              v9 += *(unsigned __int8 *)(v12 + v16) * *(unsigned __int8 *)(v12 + v16);
            }
            else
            {
              unsigned int v9 = 65025;
            }
            if ((v15 & 0x80) == 0) {
              break;
            }
            v8 += v14;
          }
          while (v8 && v14 != 0);
          return (double)v9 * 0.0000153787005;
        }
      }
    }
  }
  return v4;
}

float sub_19E0D9AE0(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 3) {
    sub_19E07D5D0();
  }
  float v4 = 0.0;
  if (*(unsigned char *)a2)
  {
    if ((unint64_t)(*(void *)v2 + 1) >= 2)
    {
      int v17 = 0;
      if (sub_19E0B92A8(a2 + 48, (unint64_t *)v2, &v17))
      {
        if ((~v17 & 0x7FFFFF) != 0)
        {
          if ((v17 & 0x400000) != 0 || (unsigned int v6 = v17 & 0x1FFFFF, (v17 & 0x1FFFFF) == 0))
          {
            if ((v17 & 0x400000) != 0)
            {
              float v16 = (double)v17 * 0.00392156863;
              return v16 * v16;
            }
            else if (sub_19E0F9214(a2 + 40, v2))
            {
              return 0.0;
            }
            else
            {
              return 1.0;
            }
          }
          else if (*(unsigned char *)a2)
          {
            unsigned int v7 = 0;
            unsigned int v8 = *(uint64_t **)(a2 + 24);
            unint64_t v9 = v8[1];
            do
            {
              if (v9 <= v6) {
                break;
              }
              uint64_t v10 = *v8;
              if (!*v8) {
                return v4;
              }
              unint64_t v11 = v6 + 1;
              if (v9 < v11) {
LABEL_32:
              }
                __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
              if (v9 <= v11) {
                return v4;
              }
              int v12 = *(unsigned __int8 *)(v10 + v6);
              char v13 = *(unsigned char *)(v10 + v11);
              if ((v13 & 4) != 0)
              {
                unint64_t v14 = v6 + 2;
                if (v9 < v14) {
                  goto LABEL_32;
                }
                if (v9 <= v14) {
                  return v4;
                }
                v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
              }
              else
              {
                unsigned int v7 = 65025;
              }
              if ((v13 & 0x80) == 0) {
                break;
              }
              v6 += v12;
            }
            while (v6 && v12 != 0);
            return (double)v7 * 0.0000153787005;
          }
        }
      }
    }
  }
  return v4;
}

float sub_19E0D9C70(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 2) {
    sub_19E07D5D0();
  }
  float v4 = 0.0;
  if (*(unsigned char *)a2)
  {
    if ((unint64_t)(*(void *)v2 + 1) >= 2)
    {
      int v17 = 0;
      if (sub_19E0CB364((uint64_t *)(a2 + 48), (uint64_t *)v2, &v17))
      {
        if ((~v17 & 0x7FFFFF) != 0)
        {
          if ((v17 & 0x400000) != 0 || (unsigned int v6 = v17 & 0x1FFFFF, (v17 & 0x1FFFFF) == 0))
          {
            if ((v17 & 0x400000) != 0)
            {
              float v16 = (double)v17 * 0.00392156863;
              return v16 * v16;
            }
            else if (sub_19E0F8BD4(a2 + 40, v2))
            {
              return 0.0;
            }
            else
            {
              return 1.0;
            }
          }
          else if (*(unsigned char *)a2)
          {
            unsigned int v7 = 0;
            unsigned int v8 = *(uint64_t **)(a2 + 24);
            unint64_t v9 = v8[1];
            do
            {
              if (v9 <= v6) {
                break;
              }
              uint64_t v10 = *v8;
              if (!*v8) {
                return v4;
              }
              unint64_t v11 = v6 + 1;
              if (v9 < v11) {
LABEL_32:
              }
                __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
              if (v9 <= v11) {
                return v4;
              }
              int v12 = *(unsigned __int8 *)(v10 + v6);
              char v13 = *(unsigned char *)(v10 + v11);
              if ((v13 & 4) != 0)
              {
                unint64_t v14 = v6 + 2;
                if (v9 < v14) {
                  goto LABEL_32;
                }
                if (v9 <= v14) {
                  return v4;
                }
                v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
              }
              else
              {
                unsigned int v7 = 65025;
              }
              if ((v13 & 0x80) == 0) {
                break;
              }
              v6 += v12;
            }
            while (v6 && v12 != 0);
            return (double)v7 * 0.0000153787005;
          }
        }
      }
    }
  }
  return v4;
}

float sub_19E0D9E00(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (v2[8] != 1) {
    sub_19E07D5D0();
  }
  float v4 = 0.0;
  if (*(unsigned char *)a2)
  {
    if ((unint64_t)(*(void *)v2 + 1) >= 2)
    {
      int v17 = 0;
      if (sub_19E0C3B60((void *)(a2 + 48), v2, &v17))
      {
        if ((~v17 & 0x7FFFFF) != 0)
        {
          if ((v17 & 0x400000) != 0 || (unsigned int v6 = v17 & 0x1FFFFF, (v17 & 0x1FFFFF) == 0))
          {
            if ((v17 & 0x400000) != 0)
            {
              float v16 = (double)v17 * 0.00392156863;
              return v16 * v16;
            }
            else if (sub_19E0F85AC(a2 + 40, (uint64_t)v2))
            {
              return 0.0;
            }
            else
            {
              return 1.0;
            }
          }
          else if (*(unsigned char *)a2)
          {
            unsigned int v7 = 0;
            unsigned int v8 = *(uint64_t **)(a2 + 24);
            unint64_t v9 = v8[1];
            do
            {
              if (v9 <= v6) {
                break;
              }
              uint64_t v10 = *v8;
              if (!*v8) {
                return v4;
              }
              unint64_t v11 = v6 + 1;
              if (v9 < v11) {
LABEL_32:
              }
                __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
              if (v9 <= v11) {
                return v4;
              }
              int v12 = *(unsigned __int8 *)(v10 + v6);
              char v13 = *(unsigned char *)(v10 + v11);
              if ((v13 & 4) != 0)
              {
                unint64_t v14 = v6 + 2;
                if (v9 < v14) {
                  goto LABEL_32;
                }
                if (v9 <= v14) {
                  return v4;
                }
                v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
              }
              else
              {
                unsigned int v7 = 65025;
              }
              if ((v13 & 0x80) == 0) {
                break;
              }
              v6 += v12;
            }
            while (v6 && v12 != 0);
            return (double)v7 * 0.0000153787005;
          }
        }
      }
    }
  }
  return v4;
}

float sub_19E0D9F90(unsigned __int8 ***a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*((_DWORD *)v2 + 8)) {
    sub_19E07D5D0();
  }
  float result = 0.0;
  if (*(unsigned char *)(a2 + 20) && ((char)*v2 & 0x80000000) == 0)
  {
    unsigned int v4 = *((_DWORD *)v2 + 2);
    BOOL v5 = !*v2 && v4 == 0;
    BOOL v6 = v5 && v2[24] == 0;
    if (!v6 && (HIBYTE(v4) & 3) <= *v2)
    {
      if ((v4 & 0x20000000) != 0 && (unsigned int v7 = *((_DWORD *)v2 + 4) & 0x7FFFFFFF) != 0)
      {
        unsigned int v8 = 0;
        unint64_t v9 = *(uint64_t **)(a2 + 8);
        unint64_t v10 = v9[1];
        unint64_t v11 = v10 - 1;
        do
        {
          if ((uint64_t)v10 <= v7) {
            break;
          }
          if (v10 < v7) {
            goto LABEL_40;
          }
          if (v11 < v7) {
            return result;
          }
          uint64_t v12 = *v9;
          if (!*v9) {
            return result;
          }
          unint64_t v13 = v7 + 1;
          if (v10 < v13) {
            goto LABEL_40;
          }
          if (v11 < v13) {
            return result;
          }
          int v14 = *(unsigned __int8 *)(v12 + v7);
          char v15 = *(unsigned char *)(v12 + v13);
          if ((v15 & 4) != 0)
          {
            unint64_t v16 = v7 + 2;
            if (v10 < v16) {
LABEL_40:
            }
              __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
            if (v11 < v16) {
              return result;
            }
            v8 += *(unsigned __int8 *)(v12 + v16) * *(unsigned __int8 *)(v12 + v16);
          }
          else
          {
            unsigned int v8 = 65025;
          }
          if ((v15 & 0x80) == 0) {
            break;
          }
          v7 += v14;
        }
        while (v7 && v14 != 0);
        return (double)v8 * 0.0000153787005;
      }
      else if ((v4 & 0x10000000) != 0)
      {
        float v18 = (double)v2[16] * 0.00392156863;
        return v18 * v18;
      }
      else if ((v4 & 0xFFFFFF) == 0)
      {
        float result = 1.0;
        if ((*((void *)v2 + 2) & 0xFF00000000) == 0) {
          return 0.0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19E0DA108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = a1 + 40;
  char v11 = a3;
  uint64_t v3 = *(unsigned int *)(a2 + 14352);
  if (v3 == -1) {
    sub_19E07D5D0();
  }
  uint64_t v12 = &v10;
  ((void (*)(uint64_t **))off_1EF09E7E0[v3])(&v12);
  uint64_t v9 = *(void *)(a1 + 80);
  unsigned int v8 = (uint64_t *)(a1 + 80);
  uint64_t result = v9;
  if (v9)
  {
    sub_19E0DA108(result, a2, a3);
    uint64_t result = sub_19E0DA1A4(*v8);
    if ((result & 1) == 0) {
      return (uint64_t)sub_19E080690(v8, 0);
    }
  }
  return result;
}

uint64_t sub_19E0DA1A4(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 32);
  if (v1 == -1) {
    goto LABEL_9;
  }
  BOOL v6 = &v5;
  if (!((unsigned int (*)(char **, uint64_t))off_1EF09E6A8[v1])(&v6, a1)) {
    goto LABEL_6;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 72);
  if (v3 == -1) {
LABEL_9:
  }
    sub_19E07D5D0();
  BOOL v6 = &v5;
  if (((uint64_t (*)(char **, uint64_t))off_1EF09E6A8[v3])(&v6, a1 + 40)) {
    return 1;
  }
LABEL_6:
  uint64_t result = *(void *)(a1 + 80);
  if (result) {
    return sub_19E0DA1A4();
  }
  return result;
}

void sub_19E0DA23C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v74 = a2 + 40;
  uint64_t v4 = *(unsigned int *)(a3 + 14352);
  if (v4 == -1) {
    sub_19E07D5D0();
  }
  std::string __p = &v74;
  ((void (*)(unsigned __int8 **__return_ptr, void **, uint64_t))off_1EF09E848[v4])(&v72, &__p, a3);
  uint64_t v7 = *(void *)(a2 + 80);
  if (v7)
  {
    sub_19E0DA23C(&__p, v7, a3);
    unsigned int v8 = v72;
    uint64_t v9 = __p;
    if ((unint64_t)(v71 - (unsigned char *)__p - 0x5555555555555555 * ((v73 - v72) >> 4)) >= 0x100) {
      size_t v10 = 256;
    }
    else {
      size_t v10 = v71 - (unsigned char *)__p - 0x5555555555555555 * ((v73 - v72) >> 4);
    }
    sub_19E0DA750(a1, v10);
    char v11 = v73;
    uint64_t v12 = v71;
    if (v8 != v73 || v9 != v71)
    {
      while (v8 != v11)
      {
        unsigned int v13 = *v8;
        if (v9 == v12) {
          goto LABEL_16;
        }
        unsigned int v14 = *v9;
        if (v13 != v14)
        {
          if (v13 < v14)
          {
LABEL_16:
            int v19 = (unsigned char *)a1[1];
            unint64_t v18 = a1[2];
            if ((unint64_t)v19 >= v18)
            {
              unint64_t v30 = *a1;
              unint64_t v31 = &v19[-*a1];
              unint64_t v32 = (unint64_t)(v31 + 1);
              if ((uint64_t)(v31 + 1) < 0) {
                sub_19E041BEC();
              }
              unint64_t v33 = v18 - v30;
              if (2 * v33 > v32) {
                unint64_t v32 = 2 * v33;
              }
              if (v33 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v34 = v32;
              }
              if (v34) {
                CFRange v35 = (char *)operator new(v34);
              }
              else {
                CFRange v35 = 0;
              }
              unint64_t v46 = &v31[(void)v35];
              uint64_t v47 = &v31[(void)v35];
              unsigned char *v47 = v13;
              BOOL v20 = v47 + 1;
              if (v19 != (unsigned char *)v30)
              {
                unint64_t v48 = &v19[~v30];
                do
                {
                  char v49 = *--v19;
                  (v48--)[(void)v35] = v49;
                }
                while (v19 != (unsigned char *)v30);
                int v19 = (unsigned char *)*a1;
                unint64_t v46 = v35;
              }
              *a1 = (unint64_t)v46;
              a1[1] = (unint64_t)v20;
              a1[2] = (unint64_t)&v35[v34];
              if (v19) {
                operator delete(v19);
              }
            }
            else
            {
              unsigned char *v19 = v13;
              BOOL v20 = v19 + 1;
            }
            a1[1] = (unint64_t)v20;
            v8 += 48;
            goto LABEL_69;
          }
          goto LABEL_18;
        }
        unint64_t v16 = (unsigned char *)a1[1];
        unint64_t v15 = a1[2];
        if ((unint64_t)v16 >= v15)
        {
          unint64_t v36 = *a1;
          uint64_t v37 = &v16[-*a1];
          unint64_t v38 = (unint64_t)(v37 + 1);
          if ((uint64_t)(v37 + 1) < 0) {
            sub_19E041BEC();
          }
          unint64_t v39 = v15 - v36;
          if (2 * v39 > v38) {
            unint64_t v38 = 2 * v39;
          }
          if (v39 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v40 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v40 = v38;
          }
          if (v40) {
            int64x2_t v41 = (char *)operator new(v40);
          }
          else {
            int64x2_t v41 = 0;
          }
          uint64_t v50 = &v37[(void)v41];
          std::string v51 = &v37[(void)v41];
          unsigned char *v51 = v13;
          int v17 = v51 + 1;
          if (v16 != (unsigned char *)v36)
          {
            uint64_t v52 = &v16[~v36];
            do
            {
              char v53 = *--v16;
              (v52--)[(void)v41] = v53;
            }
            while (v16 != (unsigned char *)v36);
            unint64_t v16 = (unsigned char *)*a1;
            uint64_t v50 = v41;
          }
          *a1 = (unint64_t)v50;
          a1[1] = (unint64_t)v17;
          a1[2] = (unint64_t)&v41[v40];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *unint64_t v16 = v13;
          int v17 = v16 + 1;
        }
        a1[1] = (unint64_t)v17;
        v8 += 48;
LABEL_68:
        ++v9;
LABEL_69:
        char v11 = v73;
        uint64_t v12 = v71;
        if (v8 == v73 && v9 == v71) {
          goto LABEL_74;
        }
      }
      if (v9 == v12) {
        __assert_rtn("child_bytes", "TIStemSuffixDictionaryCursor.cpp", 107, "suffix_byte < 0x100 || subcursor_byte < 0x100");
      }
      LOBYTE(v14) = *v9;
LABEL_18:
      uint64_t v22 = (unsigned char *)a1[1];
      unint64_t v21 = a1[2];
      if ((unint64_t)v22 >= v21)
      {
        unint64_t v24 = *a1;
        int v25 = &v22[-*a1];
        unint64_t v26 = (unint64_t)(v25 + 1);
        if ((uint64_t)(v25 + 1) < 0) {
          sub_19E041BEC();
        }
        unint64_t v27 = v21 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          uint64_t v29 = (char *)operator new(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v42 = &v25[(void)v29];
        unsigned int v43 = &v25[(void)v29];
        unsigned char *v43 = v14;
        float v23 = v43 + 1;
        if (v22 != (unsigned char *)v24)
        {
          unint64_t v44 = &v22[~v24];
          do
          {
            char v45 = *--v22;
            (v44--)[(void)v29] = v45;
          }
          while (v22 != (unsigned char *)v24);
          uint64_t v22 = (unsigned char *)*a1;
          uint64_t v42 = v29;
        }
        *a1 = (unint64_t)v42;
        a1[1] = (unint64_t)v23;
        a1[2] = (unint64_t)&v29[v28];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *uint64_t v22 = v14;
        float v23 = v22 + 1;
      }
      a1[1] = (unint64_t)v23;
      goto LABEL_68;
    }
LABEL_74:
    if (__p)
    {
      int v71 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v55 = v72;
    int64x2_t v56 = v73;
    if (v72 != v73)
    {
      uint64_t v57 = (unsigned char *)a1[1];
      do
      {
        unint64_t v58 = a1[2];
        if ((unint64_t)v57 >= v58)
        {
          unint64_t v60 = *a1;
          BOOL v61 = &v57[-*a1];
          unint64_t v62 = (unint64_t)(v61 + 1);
          if ((uint64_t)(v61 + 1) < 0) {
            sub_19E041BEC();
          }
          unint64_t v63 = v58 - v60;
          if (2 * v63 > v62) {
            unint64_t v62 = 2 * v63;
          }
          if (v63 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v64 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v64 = v62;
          }
          if (v64) {
            unint64_t v65 = (char *)operator new(v64);
          }
          else {
            unint64_t v65 = 0;
          }
          uint8x8_t v66 = &v61[(void)v65];
          uint64_t v67 = &v61[(void)v65];
          unsigned __int8 *v67 = *v55;
          int v59 = v67 + 1;
          if (v57 != (unsigned char *)v60)
          {
            uint64_t v68 = &v57[~v60];
            do
            {
              char v69 = *--v57;
              (v68--)[(void)v65] = v69;
            }
            while (v57 != (unsigned char *)v60);
            uint64_t v57 = (unsigned char *)*a1;
            uint8x8_t v66 = v65;
          }
          *a1 = (unint64_t)v66;
          a1[1] = (unint64_t)v59;
          a1[2] = (unint64_t)&v65[v64];
          if (v57) {
            operator delete(v57);
          }
        }
        else
        {
          *uint64_t v57 = *v55;
          int v59 = v57 + 1;
        }
        a1[1] = (unint64_t)v59;
        v55 += 48;
        uint64_t v57 = v59;
      }
      while (v55 != v56);
    }
  }
  std::string __p = &v72;
  sub_19E0DA800((void ***)&__p);
}

void sub_19E0DA6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  std::string __p = &a13;
  sub_19E0DA800((void ***)&__p);
  unint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void sub_19E0DA750(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    char v5 = (char *)a1[1];
    BOOL v6 = operator new(__sz);
    uint64_t v7 = &v5[(void)v6 - v2];
    unsigned int v8 = v7;
    if (v5 != (char *)v2)
    {
      uint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      unsigned int v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

void sub_19E0DA800(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = v4 - 48;
        sub_19E07FA6C((uint64_t)(v4 - 40));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t **sub_19E0DA888@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 12) {
    sub_19E07D5D0();
  }
  if (*(_DWORD *)(v4 + 12) == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5[0] = &unk_1EF09FFD0;
    v5[1] = a3;
    v5[3] = v5;
    sub_19E0FD1BC(a2 + 40, v4);
    return (uint64_t **)sub_19E0FA520(v5);
  }
  return result;
}

void sub_19E0DA950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0FA520((void ***)va);
  sub_19E0DA800((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E0DA970@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 11) {
    sub_19E07D5D0();
  }
  if (*(void *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5[0] = &unk_1EF09FED0;
    v5[1] = a3;
    v5[3] = v5;
    sub_19E0FCB48(a2 + 40, (void *)v4, (uint64_t)v5);
    return (uint64_t **)sub_19E0C3820(v5);
  }
  return result;
}

void sub_19E0DAA38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0C3820((void ***)va);
  sub_19E0DA800((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E0DAA58@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 10) {
    sub_19E07D5D0();
  }
  if (*(void *)v4 == 0xFFFFFFFFLL)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5[0] = &unk_1EF09FE50;
    v5[1] = a3;
    v5[3] = v5;
    sub_19E0FC3F0((uint64_t *)(a2 + 40), v4, (uint64_t)v5);
    return (uint64_t **)sub_19E0B4198(v5);
  }
  return result;
}

void sub_19E0DAB24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B4198((void ***)va);
  sub_19E0DA800((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E0DAB44@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 9) {
    sub_19E07D5D0();
  }
  if (*(void *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5[0] = &unk_1EF09FDD0;
    v5[1] = a3;
    v5[3] = v5;
    sub_19E0FBAE4((void *)(a2 + 40), (uint64_t *)v4, (uint64_t)v5);
    return (uint64_t **)sub_19E0F92D8(v5);
  }
  return result;
}

void sub_19E0DAC0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0F92D8((void ***)va);
  sub_19E0DA800((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E0DAC2C@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 8) {
    sub_19E07D5D0();
  }
  if (*(void *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5[0] = &unk_1EF09FD50;
    v5[1] = a3;
    v5[3] = v5;
    sub_19E0FB420(a2 + 40, (void *)v4, (uint64_t)v5);
    return (uint64_t **)sub_19E0C3820(v5);
  }
  return result;
}

void sub_19E0DACF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0C3820((void ***)va);
  sub_19E0DA800((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E0DAD14@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 7) {
    sub_19E07D5D0();
  }
  if (*(void *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5[0] = &unk_1EF09FCD0;
    v5[1] = a3;
    v5[3] = v5;
    sub_19E0FAD5C(a2 + 40, (uint64_t *)v4, (uint64_t)v5);
    return (uint64_t **)sub_19E0CB188(v5);
  }
  return result;
}

void sub_19E0DADDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0CB188((void ***)va);
  sub_19E0DA800((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E0DADFC@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 6) {
    sub_19E07D5D0();
  }
  if (*(_DWORD *)(v4 + 12) == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5[0] = &unk_1EF09FC50;
    v5[1] = a3;
    v5[3] = v5;
    sub_19E06E1F8(a2 + 48, v4);
    return (uint64_t **)sub_19E0FA520(v5);
  }
  return result;
}

void sub_19E0DAEC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0FA520((void ***)va);
  sub_19E0DA800((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E0DAEE4@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 5) {
    sub_19E07D5D0();
  }
  if (*(void *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5[0] = &unk_1EF09FBD0;
    v5[1] = a3;
    v5[3] = v5;
    sub_19E0C7A04(a2 + 48, (void *)v4, (uint64_t)v5);
    return (uint64_t **)sub_19E0C3820(v5);
  }
  return result;
}

void sub_19E0DAFAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0C3820((void ***)va);
  sub_19E0DA800((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E0DAFCC@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 4) {
    sub_19E07D5D0();
  }
  if (*(void *)v4 == 0xFFFFFFFFLL)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5[0] = &unk_1EF09FB50;
    v5[1] = a3;
    v5[3] = v5;
    sub_19E0B40BC((uint64_t *)(a2 + 48), v4, (uint64_t)v5);
    return (uint64_t **)sub_19E0B4198(v5);
  }
  return result;
}

void sub_19E0DB098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B4198((void ***)va);
  sub_19E0DA800((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E0DB0B8@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 3) {
    sub_19E07D5D0();
  }
  if (*(void *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5[0] = &unk_1EF09FAD0;
    v5[1] = a3;
    v5[3] = v5;
    sub_19E0B8D20((void *)(a2 + 48), (uint64_t *)v4, (uint64_t)v5);
    return (uint64_t **)sub_19E0F92D8(v5);
  }
  return result;
}

void sub_19E0DB180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0F92D8((void ***)va);
  sub_19E0DA800((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E0DB1A0@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 2) {
    sub_19E07D5D0();
  }
  if (*(void *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5[0] = &unk_1EF09FA50;
    v5[1] = a3;
    v5[3] = v5;
    sub_19E0CA740(a2 + 48, (uint64_t *)v4, (uint64_t)v5);
    return (uint64_t **)sub_19E0CB188(v5);
  }
  return result;
}

void sub_19E0DB268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0CB188((void ***)va);
  sub_19E0DA800((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E0DB288@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 1) {
    sub_19E07D5D0();
  }
  if (*(void *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5[0] = &unk_1EF09F9D0;
    v5[1] = a3;
    v5[3] = v5;
    sub_19E0C2E94(a2 + 48, (void *)v4, (uint64_t)v5);
    return (uint64_t **)sub_19E0C3820(v5);
  }
  return result;
}

void sub_19E0DB350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0C3820((void ***)va);
  sub_19E0DA800((void ***)va);
  _Unwind_Resume(a1);
}

void sub_19E0DB370(char ***a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = **a1;
  if (*((_DWORD *)v4 + 8)) {
    sub_19E07D5D0();
  }
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  int v5 = *v4;
  if (v5 < 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_42;
  }
  unsigned int v6 = *v4;
  unsigned int v7 = *((_DWORD *)v4 + 2);
  unsigned int v8 = HIBYTE(v7) & 3;
  if (v8 <= v6)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (!*((unsigned char *)a2 + 20)) {
      goto LABEL_42;
    }
    uint64_t v17 = *(void *)&v7 & 0xFFFFFFLL;
    if ((v7 & 0xFFFFFF) != 0)
    {
      unsigned int v18 = *((_DWORD *)a2 + 3228);
      if (v17 < v18) {
        __assert_rtn("children", "TIWordTrie.cpp", 743, "cursor.is_root() || first_child_offset >= m_trie_root_offset");
      }
      uint64_t v19 = **a2;
      uint64_t v20 = v19 + v17;
    }
    else
    {
      int v21 = v4[24];
      if (v6) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v7 == 0;
      }
      if (!v22 || v21 != 0) {
        goto LABEL_42;
      }
      uint64_t v20 = 0;
      unsigned int v18 = *((_DWORD *)a2 + 3228);
      uint64_t v19 = **a2;
    }
    unint64_t v24 = sub_19E0DEB70((unsigned int *)a2 + 6, v20, v19 + v18);
    unint64_t v25 = v24[2];
    uint64_t v26 = *a3;
    if (0xAAAAAAAAAAAAAAABLL * ((a3[2] - *a3) >> 4) < v25)
    {
      uint64_t v27 = a3[1];
      int64x2_t v56 = a3 + 2;
      uint64_t v52 = (void **)sub_19E0DEFC0(v25);
      char v53 = (char *)v52 + v27 - v26;
      char v54 = v53;
      uint64_t v55 = &v52[6 * v28];
      sub_19E0DF008(a3, &v52);
      sub_19E0DF0EC((uint64_t)&v52);
      LODWORD(v25) = v24[2];
    }
    if (v25)
    {
      signed int v29 = 0;
      do
      {
        unint64_t v30 = &v24[6 * *((unsigned __int8 *)v24 + v29 + 12)];
        if ((v30[68] & 0x10FFFFFF) != 0x10000000 || LOBYTE(v24[6 * *((unsigned __int8 *)v24 + v29 + 12) + 71]))
        {
          unint64_t v31 = (int *)(v30 + 68);
          char v32 = v24[6 * *((unsigned __int8 *)v24 + v29 + 12) + 72];
          unint64_t v34 = a3[1];
          unint64_t v33 = a3[2];
          if (v34 >= v33)
          {
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *a3) >> 4);
            unint64_t v37 = v36 + 1;
            if (v36 + 1 > 0x555555555555555) {
              sub_19E041BEC();
            }
            unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *a3) >> 4);
            if (2 * v38 > v37) {
              unint64_t v37 = 2 * v38;
            }
            if (v38 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v39 = 0x555555555555555;
            }
            else {
              unint64_t v39 = v37;
            }
            int64x2_t v56 = a3 + 2;
            if (v39) {
              unint64_t v39 = (unint64_t)sub_19E0DEFC0(v39);
            }
            else {
              uint64_t v40 = 0;
            }
            uint64_t v52 = (void **)v39;
            char v53 = (unsigned char *)(v39 + 48 * v36);
            char v54 = v53;
            uint64_t v55 = (void **)(v39 + 48 * v40);
            sub_19E0DEF4C(v53, v32, v31);
            v54 += 48;
            sub_19E0DF008(a3, &v52);
            uint64_t v35 = a3[1];
            sub_19E0DF0EC((uint64_t)&v52);
          }
          else
          {
            sub_19E0DEF4C((unsigned char *)a3[1], v32, (int *)v30 + 68);
            uint64_t v35 = v34 + 48;
            a3[1] = v34 + 48;
          }
          a3[1] = v35;
          LODWORD(v25) = v24[2];
        }
        ++v29;
      }
      while (v29 < v25);
    }
  }
  else
  {
    char v9 = 0;
    int v42 = *((_DWORD *)v4 + 2);
    char v10 = (unsigned char *)*((void *)v4 + 2);
    unsigned int v43 = v10;
    int v11 = *((_DWORD *)v4 + 6);
    v44[0] = v11;
    uint64_t v12 = v5 + 1;
    char v41 = v5 + 1;
    if ((v12 & 0x80) == 0 && v8 >= v12) {
      char v9 = *((unsigned char *)v44 + v12);
    }
    std::string v51 = &v47;
    uint64_t v13 = sub_19E0DEFC0(1uLL);
    v48[0] = v13;
    v48[1] = v13;
    char v49 = v13;
    uint64_t v50 = &v13[48 * v14];
    unsigned char *v13 = v9;
    LOBYTE(v52) = v12;
    LODWORD(v53) = v7;
    char v54 = v10;
    LODWORD(v55) = v11;
    LODWORD(v56) = 0;
    sub_19E105F34((uint64_t)(v13 + 8), (uint64_t)&v52);
    sub_19E07FA6C((uint64_t)&v52);
    v49 += 48;
    sub_19E0DF008(&v45, v48);
    uint64_t v15 = v46;
    sub_19E0DF0EC((uint64_t)v48);
    uint64_t v16 = v47;
    *a3 = v45;
    a3[1] = v15;
    a3[2] = v16;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v45 = 0;
  }
LABEL_42:
  uint64_t v52 = (void **)&v45;
  sub_19E0DA800(&v52);
}

void sub_19E0DB708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void **);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  sub_19E0DF0EC((uint64_t)va3);
  sub_19E0DA800((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_19E0DA800((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0DB784(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1 + 40;
  uint64_t v2 = *(unsigned int *)(a2 + 14352);
  if (v2 == -1) {
    sub_19E07D5D0();
  }
  uint64_t v7 = &v6;
  if (((uint64_t (*)(uint64_t **))off_1EF09E8B0[v2])(&v7)) {
    return 1;
  }
  uint64_t result = *(void *)(a1 + 80);
  if (result) {
    return sub_19E0DB784(result, a2);
  }
  return result;
}

uint64_t sub_19E0DB800(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 12) {
    sub_19E07D5D0();
  }
  if (*(_DWORD *)(v2 + 12) == -1) {
    return 0;
  }
  if (*(unsigned char *)(v2 + 9)) {
    return 1;
  }

  return sub_19E0FCEF8(a2 + 40, v2);
}

uint64_t sub_19E0DB86C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 11) {
    sub_19E07D5D0();
  }
  if (*(void *)v2 == -1) {
    return 0;
  }
  if (!*(void *)v2) {
    return 1;
  }

  return sub_19E0FC998(a2 + 40, v2);
}

uint64_t sub_19E0DB8D4(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 10) {
    sub_19E07D5D0();
  }
  if (!*(void *)v2) {
    return 1;
  }
  if (*(void *)v2 == 0xFFFFFFFFLL) {
    return 0;
  }

  return sub_19E0FC02C(a2 + 40, v2);
}

uint64_t sub_19E0DB940(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 9) {
    sub_19E07D5D0();
  }
  if (*(void *)v2 == -1) {
    return 0;
  }
  if (!*(void *)v2) {
    return 1;
  }

  return sub_19E0FB8AC(a2 + 40, v2);
}

uint64_t sub_19E0DB9A8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 8) {
    sub_19E07D5D0();
  }
  if (*(void *)v2 == -1) {
    return 0;
  }
  if (!*(void *)v2) {
    return 1;
  }

  return sub_19E0FB1F4(a2 + 40, v2);
}

uint64_t sub_19E0DBA10(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 7) {
    sub_19E07D5D0();
  }
  if (*(void *)v2 == -1) {
    return 0;
  }
  if (!*(void *)v2) {
    return 1;
  }

  return sub_19E0FAB24(a2 + 40, v2);
}

uint64_t sub_19E0DBA78(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 6) {
    sub_19E07D5D0();
  }
  if (*(_DWORD *)(v2 + 12) == -1) {
    return 0;
  }
  if (*(unsigned char *)(v2 + 9)) {
    return 1;
  }

  return sub_19E0FA45C(a2 + 40, v2);
}

uint64_t sub_19E0DBAE4(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 5) {
    sub_19E07D5D0();
  }
  if (*(void *)v2 == -1) {
    return 0;
  }
  if (!*(void *)v2) {
    return 1;
  }

  return sub_19E0F9FA4(a2 + 40, v2);
}

uint64_t sub_19E0DBB4C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 4) {
    sub_19E07D5D0();
  }
  if (!*(void *)v2) {
    return 1;
  }
  if (*(void *)v2 == 0xFFFFFFFFLL) {
    return 0;
  }

  return sub_19E0F9848(a2 + 40, v2);
}

uint64_t sub_19E0DBBB8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 3) {
    sub_19E07D5D0();
  }
  if (*(void *)v2 == -1) {
    return 0;
  }
  if (!*(void *)v2) {
    return 1;
  }

  return sub_19E0F9214(a2 + 40, v2);
}

uint64_t sub_19E0DBC20(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 2) {
    sub_19E07D5D0();
  }
  if (*(void *)v2 == -1) {
    return 0;
  }
  if (!*(void *)v2) {
    return 1;
  }

  return sub_19E0F8BD4(a2 + 40, v2);
}

uint64_t sub_19E0DBC88(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 1) {
    sub_19E07D5D0();
  }
  if (*(void *)v2 == -1) {
    return 0;
  }
  if (!*(void *)v2) {
    return 1;
  }

  return sub_19E0F85AC(a2 + 40, v2);
}

BOOL sub_19E0DBCF0(char ***a1)
{
  uint64_t v1 = **a1;
  if (*((_DWORD *)v1 + 8)) {
    sub_19E07D5D0();
  }
  if (*v1 < 0) {
    return 0;
  }
  unsigned int v2 = *((_DWORD *)v1 + 2);
  if ((HIBYTE(v2) & 3) > *v1) {
    return 1;
  }
  BOOL v4 = !*v1 && v2 == 0;
  return v4 && !v1[24] || (v2 & 0xFFFFFF) != 0;
}

void sub_19E0DBD60(void *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t v4 = (uint64_t)a1;
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v44 = (void **)(a2 + 40);
  uint64_t v52 = a2 + 40;
  uint64_t v5 = *(unsigned int *)(a3 + 14352);
  if (v5 == -1) {
    sub_19E07D5D0();
  }
  uint64_t v8 = a2;
  int64x2_t v56 = (void ****)&v52;
  if (((unsigned int (*)(void *****, uint64_t))off_1EF09E918[v5])(&v56, a3))
  {
    unint64_t v9 = *(unsigned __int8 *)(v8 + 92);
    unsigned int v10 = *a4;
    if (v10 >= v9)
    {
      if (*(unsigned char *)(v8 + 93)) {
        uint64_t v11 = a3 + 14360;
      }
      else {
        uint64_t v11 = a3;
      }
      uint64_t v12 = *(void *)(a3 + 30120);
      if (!v12) {
        __assert_rtn("derive_words", "TIStemSuffixDictionaryCursor.cpp", 141, "converter");
      }
      unsigned int v43 = a4 + 1;
      if (v10 <= 0xE) {
        uint64_t v13 = a4 + 1;
      }
      else {
        uint64_t v13 = (void *)*((void *)a4 + 1);
      }
      uint64_t v45 = (uint64_t *)v4;
      sub_19E03E82C(&v62, v9, v13, v9);
      int64x2_t v56 = (void ****)v8;
      uint64_t v57 = &v62;
      uint64_t v14 = *(unsigned int *)(v11 + 14352);
      if (v14 == -1) {
        sub_19E07D5D0();
      }
      unint64_t v48 = (void ***)&v56;
      ((void (*)(uint64_t *__return_ptr, void ****, uint64_t))off_1EF09E980[v14])(&v52, &v48, v11);
      if ((unsigned __int16)v62 >= 0xFu && v63) {
        MEMORY[0x19F3BA6E0](v63, 0x1000C8077774924);
      }
      uint64_t v16 = v52;
      uint64_t v15 = v53;
      if (v52 != v53)
      {
        uint64_t v42 = v53;
        while (1)
        {
          int v51 = 0;
          if (sub_19E0A3620((unsigned int *)v12, *(_DWORD *)(v16 + 60), &v51, 0)) {
            break;
          }
LABEL_52:
          v16 += 88;
          if (v16 == v15) {
            goto LABEL_53;
          }
        }
        sub_19E0A3760((uint64_t)&v62, v12, v51);
        __n128 v17 = sub_19E0A379C(&__len, v12, v51);
        unsigned int v18 = __len.n128_u16[0];
        if ((_WORD)v62)
        {
          if (!__len.n128_u16[0])
          {
LABEL_49:
            if (v63 && BYTE6(v62) == 1) {
              free(v63);
            }
            goto LABEL_52;
          }
          unint64_t v19 = *a4;
          uint64_t v20 = a4;
          if (v19 <= 0xE) {
            int v21 = v43;
          }
          else {
            int v21 = (unsigned __int16 *)*((void *)a4 + 1);
          }
          uint64_t v22 = v8;
          uint64_t v23 = *(unsigned __int8 *)(v8 + 92);
          if (__len.n128_u16[0] >= 0xFu) {
            unint64_t v24 = (__int8 *)__len.n128_u64[1];
          }
          else {
            unint64_t v24 = &__len.n128_i8[2];
          }
          unint64_t v25 = sub_19E03E82C(&v46, v19 - v23 + __len.n128_u16[0], v24, __len.n128_u16[0]);
          if (v19 != v23) {
            memmove(v25, (char *)v21 + v23, v19 - v23);
          }
          int64x2_t v56 = (void ****)v44;
          uint64_t v57 = &v46;
          uint64_t v26 = *(unsigned int *)(a3 + 14352);
          if (v26 == -1) {
            sub_19E07D5D0();
          }
          char v54 = (void ***)&v56;
          ((void (*)(void ****__return_ptr, void ****, uint64_t))off_1EF09E980[v26])(&v48, &v54, a3);
          if ((unsigned __int16)v46 >= 0xFu && v47) {
            MEMORY[0x19F3BA6E0](v47, 0x1000C8077774924);
          }
          uint64_t v28 = v48;
          uint64_t v27 = (unsigned __int16 *)v49;
          if (v48 != v49)
          {
            do
            {
              if (*(unsigned __int16 *)v28 >= (unsigned __int16)v62)
              {
                unsigned int v29 = *(_DWORD *)(v16 + 60);
                unsigned int v30 = *((_DWORD *)v28 + 15);
                LODWORD(v56) = 0;
                int v46 = 0;
                if (sub_19E0A3620((unsigned int *)v12, v29, &v56, &v46))
                {
                  LODWORD(v54) = 0;
                  int v55 = 0;
                  if (sub_19E0A36C0((unsigned int *)v12, v30, &v54, &v55))
                  {
                    if (v56 == v54)
                    {
                      int v31 = *(_DWORD *)(*(void *)(v12 + 56) + 4 * (v56 - *(_DWORD *)(v12 + 4)))
                          + v46
                          * (*(_DWORD *)(*(void *)(v12 + 32)
                                       + 4 * (v56 - *(_DWORD *)(v12 + 4) + 1))
                           - *(_DWORD *)(*(void *)(v12 + 32) + 4
                                                               * (v56 - *(_DWORD *)(v12 + 4))))
                          + v55;
                      if (v31)
                      {
                        sub_19E039858((uint64_t)&v56, (unsigned __int16 *)v16);
                        long long v32 = *(_OWORD *)(v16 + 32);
                        long long v33 = *(_OWORD *)(v16 + 48);
                        long long v34 = *(_OWORD *)(v16 + 64);
                        __int16 v61 = *(_WORD *)(v16 + 80);
                        long long v59 = v33;
                        long long v60 = v34;
                        long long v58 = v32;
                        sub_19E08E5F8((uint64_t)&v56, (float *)v28, (unsigned __int16)v62, v31);
                        unint64_t v35 = v45[1];
                        if (v35 >= v45[2])
                        {
                          uint64_t v39 = sub_19E086C04(v45, (uint64_t)&v56);
                          uint64_t v40 = v45;
                        }
                        else
                        {
                          sub_19E039858(v45[1], (unsigned __int16 *)&v56);
                          long long v36 = v58;
                          long long v37 = v59;
                          long long v38 = v60;
                          *(_WORD *)(v35 + 80) = v61;
                          *(_OWORD *)(v35 + 48) = v37;
                          *(_OWORD *)(v35 + 64) = v38;
                          *(_OWORD *)(v35 + 32) = v36;
                          uint64_t v39 = v35 + 88;
                          uint64_t v40 = v45;
                          v45[1] = v35 + 88;
                        }
                        v40[1] = v39;
                        if (v57)
                        {
                          if (BYTE6(v56) == 1) {
                            free(v57);
                          }
                        }
                      }
                    }
                  }
                }
              }
              v28 += 11;
            }
            while (v28 != (void ***)v27);
          }
          int64x2_t v56 = &v48;
          sub_19E07F830((void ***)&v56);
          a4 = v20;
          uint64_t v8 = v22;
          uint64_t v15 = v42;
        }
        if (v18 >= 0xF && __len.n128_u64[1]) {
          MEMORY[0x19F3BA6E0](__len.n128_u64[1], 0x1000C8077774924, v17);
        }
        goto LABEL_49;
      }
LABEL_53:
      int64x2_t v56 = (void ****)&v52;
      sub_19E07F830((void ***)&v56);
      uint64_t v4 = (uint64_t)v45;
    }
  }
  uint64_t v41 = *(void *)(v8 + 80);
  if (v41)
  {
    sub_19E0DBD60(&v56, v41, a3, a4);
    sub_19E086AF4(v4, (uint64_t)v56, (uint64_t)v57);
    unint64_t v62 = (void ***)&v56;
    sub_19E07F830((void ***)&v62);
  }
}

void sub_19E0DC250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  *(void *)(v31 - 128) = a16;
  sub_19E07F830((void ***)(v31 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_19E0DC3A8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 12) {
    sub_19E07D5D0();
  }
  int v5 = 0;
  if (*(_DWORD *)(v2 + 12) == -1 || *(unsigned char *)(v2 + 9)) {
    return 0;
  }
  uint64_t v4 = a2 + 40;
  uint64_t result = sub_19E0FCE84((uint64_t *)(a2 + 40), v2, &v5);
  if (result)
  {
    if ((v5 & 0x3FFFFFFF) != 0) {
      return 1;
    }
    else {
      return sub_19E0FCEF8(v4, v2) ^ 1;
    }
  }
  return result;
}

uint64_t sub_19E0DC440(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (v2[8] != 11) {
    sub_19E07D5D0();
  }
  uint64_t result = 0;
  int v5 = 0;
  if ((unint64_t)(*(void *)v2 + 1) >= 2)
  {
    uint64_t v4 = a2 + 40;
    uint64_t result = sub_19E0FB15C((void *)(a2 + 40), v2, &v5);
    if (result)
    {
      if ((v5 & 0x3FFFFFFF) != 0) {
        return 1;
      }
      else {
        return sub_19E0FC998(v4, (uint64_t)v2) ^ 1;
      }
    }
  }
  return result;
}

uint64_t sub_19E0DC4D4(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 10) {
    sub_19E07D5D0();
  }
  uint64_t result = 0;
  int v6 = 0;
  if (*(void *)v2) {
    BOOL v4 = *(void *)v2 == 0xFFFFFFFFLL;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = a2 + 40;
    uint64_t result = sub_19E0FBF94((uint64_t *)(a2 + 40), v2, &v6);
    if (result)
    {
      if ((v6 & 0x3FFFFFFF) != 0) {
        return 1;
      }
      else {
        return sub_19E0FC02C(v5, v2) ^ 1;
      }
    }
  }
  return result;
}

uint64_t sub_19E0DC56C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 9) {
    sub_19E07D5D0();
  }
  uint64_t result = 0;
  int v5 = 0;
  if ((unint64_t)(*(void *)v2 + 1) >= 2)
  {
    uint64_t v4 = a2 + 40;
    uint64_t result = sub_19E0FB81C(a2 + 40, (unint64_t *)v2, &v5);
    if (result)
    {
      if ((v5 & 0x3FFFFFFF) != 0) {
        return 1;
      }
      else {
        return sub_19E0FB8AC(v4, v2) ^ 1;
      }
    }
  }
  return result;
}

uint64_t sub_19E0DC600(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (v2[8] != 8) {
    sub_19E07D5D0();
  }
  uint64_t result = 0;
  int v5 = 0;
  if ((unint64_t)(*(void *)v2 + 1) >= 2)
  {
    uint64_t v4 = a2 + 40;
    uint64_t result = sub_19E0FB15C((void *)(a2 + 40), v2, &v5);
    if (result)
    {
      if ((v5 & 0x3FFFFFFF) != 0) {
        return 1;
      }
      else {
        return sub_19E0FB1F4(v4, (uint64_t)v2) ^ 1;
      }
    }
  }
  return result;
}

uint64_t sub_19E0DC694(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 7) {
    sub_19E07D5D0();
  }
  uint64_t result = 0;
  int v5 = 0;
  if ((unint64_t)(*(void *)v2 + 1) >= 2)
  {
    uint64_t v4 = a2 + 40;
    uint64_t result = sub_19E0FAA94((uint64_t *)(a2 + 40), (uint64_t *)v2, &v5);
    if (result)
    {
      if ((v5 & 0x3FFFFFFF) != 0) {
        return 1;
      }
      else {
        return sub_19E0FAB24(v4, v2) ^ 1;
      }
    }
  }
  return result;
}

uint64_t sub_19E0DC728(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 6) {
    sub_19E07D5D0();
  }
  if (*(_DWORD *)(v2 + 12) == -1) {
    return 0;
  }
  if (*(unsigned char *)(v2 + 9)) {
    return 0;
  }
  int v5 = 0;
  if (!sub_19E06E5B4((uint64_t *)(a2 + 48), v2, &v5) || (~v5 & 0x7FFFFF) == 0) {
    return 0;
  }
  if ((v5 & 0x5FFFFF) != 0) {
    return 1;
  }
  return sub_19E0FA45C(a2 + 40, v2) ^ 1;
}

uint64_t sub_19E0DC7D0(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (v2[8] != 5) {
    sub_19E07D5D0();
  }
  if ((unint64_t)(*(void *)v2 + 1) < 2) {
    return 0;
  }
  int v5 = 0;
  if (!sub_19E0C3B60((void *)(a2 + 48), v2, &v5) || (~v5 & 0x7FFFFF) == 0) {
    return 0;
  }
  if ((v5 & 0x5FFFFF) != 0) {
    return 1;
  }
  return sub_19E0F9FA4(a2 + 40, (uint64_t)v2) ^ 1;
}

uint64_t sub_19E0DC874(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 4) {
    sub_19E07D5D0();
  }
  if (*(void *)v2) {
    BOOL v3 = *(void *)v2 == 0xFFFFFFFFLL;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  int v7 = 0;
  int v6 = sub_19E0B4630((uint64_t *)(a2 + 48), v2, &v7);
  if (!v6 || (~v7 & 0xFFFFFF) == 0) {
    return 0;
  }
  if ((v7 & 0x5FFFFF) != 0) {
    return 1;
  }
  return sub_19E0F9848(a2 + 40, v2) ^ 1;
}

uint64_t sub_19E0DC91C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 3) {
    sub_19E07D5D0();
  }
  if ((unint64_t)(*(void *)v2 + 1) < 2) {
    return 0;
  }
  int v5 = 0;
  if (!sub_19E0B92A8(a2 + 48, (unint64_t *)v2, &v5) || (~v5 & 0x7FFFFF) == 0) {
    return 0;
  }
  if ((v5 & 0x5FFFFF) != 0) {
    return 1;
  }
  return sub_19E0F9214(a2 + 40, v2) ^ 1;
}

uint64_t sub_19E0DC9C0(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 2) {
    sub_19E07D5D0();
  }
  if ((unint64_t)(*(void *)v2 + 1) < 2) {
    return 0;
  }
  int v5 = 0;
  if (!sub_19E0CB364((uint64_t *)(a2 + 48), (uint64_t *)v2, &v5) || (~v5 & 0x7FFFFF) == 0) {
    return 0;
  }
  if ((v5 & 0x5FFFFF) != 0) {
    return 1;
  }
  return sub_19E0F8BD4(a2 + 40, v2) ^ 1;
}

uint64_t sub_19E0DCA64(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (v2[8] != 1) {
    sub_19E07D5D0();
  }
  if ((unint64_t)(*(void *)v2 + 1) < 2) {
    return 0;
  }
  int v5 = 0;
  if (!sub_19E0C3B60((void *)(a2 + 48), v2, &v5) || (~v5 & 0x7FFFFF) == 0) {
    return 0;
  }
  if ((v5 & 0x5FFFFF) != 0) {
    return 1;
  }
  return sub_19E0F85AC(a2 + 40, (uint64_t)v2) ^ 1;
}

BOOL sub_19E0DCB08(char ***a1)
{
  uint64_t v1 = **a1;
  if (*((_DWORD *)v1 + 8)) {
    sub_19E07D5D0();
  }
  if (*v1 < 0) {
    return 0;
  }
  unsigned int v2 = *((_DWORD *)v1 + 2);
  if (!*v1 && v2 == 0)
  {
    unsigned int v2 = 0;
    if (!v1[24]) {
      return 0;
    }
  }
  if ((HIBYTE(v2) & 3) > *v1) {
    return 0;
  }
  if ((v2 & 0x20000000) == 0)
  {
    if ((v2 & 0x10000000) != 0) {
      return 1;
    }
LABEL_15:
    if ((v2 & 0xFFFFFF) == 0) {
      return v1[20] != 0;
    }
    return 0;
  }
  BOOL result = 1;
  if ((v2 & 0x10000000) == 0 && (*((void *)v1 + 2) & 0x7FFFFFFFLL) == 0) {
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_19E0DCBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1 + 40;
  uint64_t v2 = *(unsigned int *)(a2 + 14352);
  if (v2 == -1) {
    sub_19E07D5D0();
  }
  int v7 = &v6;
  if (((uint64_t (*)(uint64_t **))off_1EF09E918[v2])(&v7)) {
    return 1;
  }
  uint64_t result = *(void *)(a1 + 80);
  if (result) {
    return sub_19E0DCBA4(result, a2);
  }
  return result;
}

uint64_t *sub_19E0DCC20(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v5 = *a2;
  *a2 = 0;
  if (v3)
  {
    uint64_t v7 = v5;
    sub_19E0DCC20(v3, &v7);
    return sub_19E080690(&v7, 0);
  }
  else
  {
    return sub_19E080690(v4, v5);
  }
}

void sub_19E0DCC98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E080690((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

const void *LXTransliterationEntryCopyNativeString(uint64_t a1)
{
  sub_19E0A6D28((CFStringRef *)&v3, (const UInt8 *)(a1 + 24));
  uint64_t v1 = v3;
  uint64_t v3 = 0;
  sub_19E040A10(&v3);
  return v1;
}

const void *LXTransliterationEntryCopyPreferredTransliteratedString(uint64_t a1)
{
  sub_19E0A6D28((CFStringRef *)&v3, (const UInt8 *)(a1 + 48));
  uint64_t v1 = v3;
  uint64_t v3 = 0;
  sub_19E040A10(&v3);
  return v1;
}

void sub_19E0DCD38(uint64_t a1)
{
}

BOOL sub_19E0DCD40(uint64_t a1, uint64_t a2)
{
  return sub_19E0AAE0C(*(void *)(a1 + 8), a2);
}

void sub_19E0DCD48(uint64_t a1, const __CFString *a2, int a3)
{
}

void sub_19E0DCD50(uint64_t a1, const __CFString *a2, int a3)
{
}

void sub_19E0DCD58(uint64_t a1, const __CFString *a2, int a3)
{
}

void sub_19E0DCD60(uint64_t a1, const __CFString *a2, int a3)
{
}

uint64_t sub_19E0DCD68(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_19E0AC8C0(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_19E0DCD70(uint64_t a1, const __CFString *a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  double Current = CFAbsoluteTimeGetCurrent();

  return sub_19E0ACC78(v5, a2, a3, Current);
}

uint64_t sub_19E0DCDC0(uint64_t a1, const __CFString *a2, int a3, double a4)
{
  return sub_19E0ACC78(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_19E0DCDC8(uint64_t a1, char *a2, unsigned __int16 a3)
{
  return sub_19E0AD1E0(*(void *)(a1 + 8), a2, a3);
}

void sub_19E0DCDD0(uint64_t a1@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_19E0DCDE4(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  return sub_19E0A3D48(*(void *)(*(void *)(a1 + 8) + 1512), a2, a3);
}

void sub_19E0DCDF0(uint64_t a1, uint64_t a2)
{
}

void *sub_19E0DCDF8(uint64_t a1)
{
  return sub_19E0AD6D0(*(std::mutex **)(a1 + 8));
}

CFStringRef sub_19E0DCE00(uint64_t a1)
{
  return sub_19E0AD98C(*(void *)(a1 + 8));
}

uint64_t sub_19E0DCE08(uint64_t a1, unsigned int a2)
{
  return sub_19E0ADA04(*(void *)(a1 + 8), a2);
}

uint64_t sub_19E0DCE10(uint64_t a1)
{
  return sub_19E0ADE9C(*(std::mutex **)(a1 + 8));
}

uint64_t sub_19E0DCE18(uint64_t a1)
{
  return sub_19E0AE04C(*(void *)(a1 + 8));
}

void sub_19E0DCE20(void *a1)
{
  *a1 = &unk_1EF09C910;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_19E0616BC(v1);
  }

  JUMPOUT(0x19F3BA710);
}

void *sub_19E0DCE8C(void *a1)
{
  *a1 = &unk_1EF09C910;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_19E0616BC(v2);
  }
  return a1;
}

void sub_19E0DCED8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = &unk_1EF09C910;
  if (a5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a5 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_19E0DD218(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1)
  {
    sub_19E0616BC(v1);
    sub_19E0616BC(v1);
  }
  _Unwind_Resume(a1);
}

void sub_19E0DD36C(void *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (v3)
  {
    if (*a3)
    {
      unsigned int v7 = sub_19E0B1978(a2, a3, 0);
      int v8 = sub_19E0B16C4(a2, a3, v7);
      while (v8 != 0xFFFF || v7 != 0xFFFF)
      {
        sub_19E03FB9C(&v9, a2, (unsigned __int16)v7, (unsigned __int16)(v8 - v7));
        sub_19E0A31B4(a1, (unsigned __int16 *)&v9);
        unsigned int v7 = sub_19E0B1978(a2, a3, (unsigned __int16)v8);
        int v8 = sub_19E0B16C4(a2, a3, v7);
        if (v10)
        {
          if (BYTE6(v9) == 1) {
            free(v10);
          }
        }
      }
    }
    else
    {
      sub_19E0A31B4(a1, a2);
    }
  }
}

void sub_19E0DD4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
}

unsigned __int16 *sub_19E0DD4E4(unsigned __int16 *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)uint64_t result = 0x100000;
  result[2] = 0;
  *((unsigned char *)result + 6) = 0;
  *((void *)result + 1) = 0;
  *((unsigned char *)result + 16) = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    for (uint64_t i = a3 - 32; v4 != i; v4 += 32)
    {
      sub_19E0B1EE0(v5, v4);
      sub_19E0B1EE0(v5, a4);
    }
    return sub_19E0B1EE0(v5, i);
  }
  return result;
}

void sub_19E0DD570(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(unsigned char *)(v1 + 6) == 1) {
      free(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0DD598(uint64_t a1, UChar32 a2, const char *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  UChar32 src = a2;
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 6) = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (a2)
  {
    if (!a3) {
      goto LABEL_5;
    }
    UErrorCode pErrorCode = U_ZERO_ERROR;
    int32_t pDestLength = 0;
    u_strFromUTF32(dest, 3, &pDestLength, &src, 1, &pErrorCode);
    int32_t v5 = u_strToUpper(v13, 5, dest, pDestLength, a3, &pErrorCode);
    int32_t v7 = 0;
    u_strToUTF8(__s1, 13, &v7, v13, v5, &pErrorCode);
    if (pErrorCode) {
      __assert_rtn("character_to_titlecase", "TIStringFunctions.cpp", 121, "errorcode == U_ZERO_ERROR");
    }
    sub_19E039CC0((unsigned __int16 *)a1, __s1, 0xFFFFuLL);
    if (!*(_WORD *)a1)
    {
LABEL_5:
      unsigned int v6 = MEMORY[0x19F3BAEE0](src);
      sub_19E0B14D0((unsigned __int16 *)a1, v6);
    }
  }
}

void sub_19E0DD6CC(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(unsigned char *)(v1 + 6) == 1) {
      free(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0DD6FC(uint64_t result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)uint64_t result = 0x100000;
  *(_WORD *)(result + 4) = 0;
  *(unsigned char *)(result + 6) = 0;
  *(void *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = 0;
  if (a3)
  {
    uint64_t v9 = (const void *)result;
    uint64_t v10 = a3;
    do
    {
      char v11 = *a2++;
      uint64_t result = sub_19E0B2180(v9, "%02x", a3, a4, a5, a6, a7, a8, v11);
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_19E0DD774(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(unsigned char *)(v1 + 6) == 1) {
      free(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0DD798(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_19E0DD808()
{
  MEMORY[0x19F3BA620]();

  JUMPOUT(0x19F3BA710);
}

void **sub_19E0DD844(void **__dst, void *__src, unint64_t a3)
{
  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = (unint64_t)__dst[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < a3)
    {
      uint64_t v8 = (uint64_t)__dst[1];
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    int32_t v7 = *__dst;
  }
  else
  {
    int32_t v7 = __dst;
    if (a3 > 0xA)
    {
      uint64_t v8 = *((unsigned __int8 *)__dst + 23);
      unint64_t v9 = 10;
LABEL_6:
      sub_19E0D27E8(__dst, v9, a3 - v9, v8, 0, v8, a3, __src);
      return __dst;
    }
  }
  if (a3)
  {
    memmove(v7, __src, 2 * a3);
    LOBYTE(v6) = *((unsigned char *)__dst + 23);
  }
  if ((v6 & 0x80) != 0) {
    __dst[1] = (void *)a3;
  }
  else {
    *((unsigned char *)__dst + 23) = a3 & 0x7F;
  }
  *((_WORD *)v7 + a3) = 0;
  return __dst;
}

os_log_t sub_19E0DD904()
{
  os_log_t result = os_log_create("com.apple.Lexicon", "TIKeyboardCollator");
  qword_1E94577B8 = (uint64_t)result;
  return result;
}

void sub_19E0DD934(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_19E0DD9AC(void *a1)
{
}

void sub_19E0DD9C0(_Unwind_Exception *a1)
{
}

uint64_t sub_19E0DD9D8(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09B6C8)) {
    return a1 + 32;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0DDA18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_19E0DDA38(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0DDA74(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.Lexicon-framework");
  if (!BundleWithIdentifier)
  {
    if (qword_1E94577C0 != -1) {
      dispatch_once(&qword_1E94577C0, &unk_1EF09E9E8);
    }
    uint64_t v12 = qword_1E94577B8;
    if (!os_log_type_enabled((os_log_t)qword_1E94577B8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(__p[0]) = 0;
    uint64_t v13 = "failed to load the shared collator: could not get the Lexicon.framework bundle";
    goto LABEL_41;
  }
  CFURLRef v3 = CFBundleCopyResourceURL(BundleWithIdentifier, @"collator", @"dat", 0);
  CFURLRef v27 = v3;
  if (!v3)
  {
    if (qword_1E94577C0 != -1) {
      dispatch_once(&qword_1E94577C0, &unk_1EF09E9E8);
    }
    uint64_t v12 = qword_1E94577B8;
    if (!os_log_type_enabled((os_log_t)qword_1E94577B8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(__p[0]) = 0;
    uint64_t v13 = "failed to load the shared collator: could not find collator.dat in the resource bundle";
LABEL_41:
    _os_log_error_impl(&dword_19E038000, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)__p, 2u);
LABEL_12:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  CFURLRef v4 = v3;
  CFStringRef v5 = CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);
  CFStringRef v26 = v5;
  sub_19E039E88(v5, __p);
  unint64_t v6 = (char *)operator new(0x48uLL);
  int32_t v7 = v6;
  *(_OWORD *)(v6 + 8) = 0u;
  *((_DWORD *)v6 + 6) = -1;
  uint64_t v8 = (int *)(v6 + 24);
  *(void *)unint64_t v6 = &unk_1EF09D030;
  *((_OWORD *)v6 + 2) = 0u;
  unint64_t v9 = v6 + 32;
  unint64_t v10 = v6 + 48;
  if (SHIBYTE(v25) < 0)
  {
    sub_19E03FA9C(v6 + 48, __p[0], (unint64_t)__p[1]);
    *(void *)&long long v14 = v8;
    *((void *)&v14 + 1) = v7;
    long long v22 = v14;
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)__p;
    *((void *)v6 + 8) = v25;
    *(void *)&long long v11 = v6 + 24;
    *((void *)&v11 + 1) = v6;
    long long v22 = v11;
  }
  if (v7[71] < 0) {
    unint64_t v10 = *(char **)v10;
  }
  int v15 = open(v10, 0, v22);
  *uint64_t v8 = v15;
  if (v15 == -1)
  {
    int v17 = 1;
    goto LABEL_28;
  }
  off_t v16 = lseek(v15, 0, 2);
  *((void *)v7 + 5) = v16;
  if (v16 == -1) {
    goto LABEL_27;
  }
  if (!v16)
  {
    int v17 = 2;
LABEL_28:
    if (qword_1E94577C0 != -1) {
      dispatch_once(&qword_1E94577C0, &unk_1EF09E9E8);
    }
    uint64_t v20 = qword_1E94577B8;
    if (os_log_type_enabled((os_log_t)qword_1E94577B8, OS_LOG_TYPE_ERROR))
    {
      sub_19E0DDED0(__p, v17);
      int v21 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 138412546;
      CFStringRef v29 = v5;
      __int16 v30 = 2080;
      uint64_t v31 = v21;
      _os_log_error_impl(&dword_19E038000, v20, OS_LOG_TYPE_ERROR, "error loading collator file at %@: %s", buf, 0x16u);
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
    }
    *a1 = 0;
    a1[1] = 0;
    sub_19E0616BC((std::__shared_weak_count *)v7);
    goto LABEL_32;
  }
  lseek(*v8, 0, 0);
  unsigned int v18 = mmap(0, *((void *)v7 + 5), 1, 2, *((_DWORD *)v7 + 6), 0);
  *unint64_t v9 = v18;
  if (v18 == (void *)-1)
  {
LABEL_27:
    int v17 = 3;
    goto LABEL_28;
  }
  sub_19E040A48(__p);
  *(_DWORD *)buf = 0;
  ucol_getVersion();
  BOOL v19 = *(_DWORD *)buf != *(_DWORD *)*v9;
  int v17 = 4 * v19;
  if (__p[1]) {
    sub_19E0616BC((std::__shared_weak_count *)__p[1]);
  }
  if (v19) {
    goto LABEL_28;
  }
  *(_OWORD *)a1 = v23;
LABEL_32:
  if (v5) {
    CFRelease(v5);
  }
  CFRelease(v4);
}

void sub_19E0DDE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, const void *a18, const void *a19)
{
  if (a12) {
    sub_19E0616BC(a12);
  }
  sub_19E0616BC(v19);
  sub_19E03D880(&a18, 0);
  sub_19E07D4F0(&a19, 0);
  _Unwind_Resume(a1);
}

void *sub_19E0DDED0(void *a1, int a2)
{
  switch(a2)
  {
    case 1:
      CFURLRef v3 = "file not found";
      goto LABEL_9;
    case 2:
      CFURLRef v3 = "file has zero length";
      goto LABEL_9;
    case 3:
      CFURLRef v3 = "file failed to load";
      goto LABEL_9;
    case 4:
      CFURLRef v3 = "collator is out of date";
LABEL_9:
      os_log_t result = sub_19E0413C8(a1, v3);
      break;
    default:
      sub_19E0538DC((uint64_t)v6);
      sub_19E0416F8(&v7, (uint64_t)"Unknown collator failure ", 25);
      std::ostream::operator<<();
      sub_19E05EEA4(a1, (uint64_t)v8);
      v6[0] = *MEMORY[0x1E4FBA408];
      uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      uint64_t v7 = v4;
      v8[0] = MEMORY[0x1E4FBA470] + 16;
      if (v9 < 0) {
        operator delete((void *)v8[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      os_log_t result = (void *)MEMORY[0x19F3BA690](&v10);
      break;
  }
  return result;
}

void sub_19E0DE0D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E053BB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E0DE100(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    munmap(v2, *(void *)(a1 + 40));
  }
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 != -1) {
    close(v3);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v4 = *(void **)(a1 + 48);
    operator delete(v4);
  }
}

void sub_19E0DE16C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF09D030;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0DE1C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF09D030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_19E0DE1FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_19E0DE220(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF09AB08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0DE274(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF09AB08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

const void *LXEntryCopyString(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    __assert_rtn("LXEntryCopyString", "LXEntry.cpp", 25, "entry");
  }
  sub_19E08E71C((uint64_t)v4, (unsigned __int16 *)(a1 + 16));
  sub_19E03FD18((CFStringRef *)&v3, v4);
  uint64_t v1 = v3;
  int v3 = 0;
  sub_19E040A10(&v3);
  if (v6 && v5 == 1) {
    free(v6);
  }
  return v1;
}

void sub_19E0DE34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  if (a13)
  {
    if (a12 == 1) {
      free(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

const void *LXEntryCopyStoredString(uint64_t a1, _DWORD *a2)
{
  if (!a1) {
    __assert_rtn("LXEntryCopyStoredString", "LXEntry.cpp", 31, "entry");
  }
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 56);
  }
  sub_19E03FD18((CFStringRef *)&v4, (unsigned __int16 *)(a1 + 16));
  uint64_t v2 = v4;
  uint64_t v4 = 0;
  sub_19E040A10(&v4);
  return v2;
}

uint64_t LXEntryGetMetaFlags(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("LXEntryGetMetaFlags", "LXEntry.cpp", 45, "entry");
  }
  return *(_DWORD *)(a1 + 52) & 0x3FA000EF;
}

uint64_t LXEntryGetCategoryFlags(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("LXEntryGetCategoryFlags", "LXEntry.cpp", 51, "entry");
  }
  return *(_DWORD *)(a1 + 52) & 0x7FF00;
}

double LXEntryGetPartialProbability(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("LXEntryGetPartialProbability", "LXEntry.cpp", 56, "entry");
  }
  return log10f(*(float *)(a1 + 48));
}

uint64_t LXEntryGetUsageCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t LXEntryGetPenaltyCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t LXEntryGetTokenID(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("LXEntryGetTokenID", "LXEntry.cpp", 71, "entry");
  }
  return *(unsigned int *)(a1 + 76);
}

double LXEntryGetProbability(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

BOOL LXEntryGetTimestamp(uint64_t a1, double *a2)
{
  if (!a2) {
    return 0;
  }
  double v2 = *(double *)(a1 + 112);
  *a2 = v2;
  return v2 != 0.0;
}

uint64_t LXEntryGetUserBitfield(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t LXEntryGetAffixData(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("LXEntryGetAffixData", "LXEntry.cpp", 96, "entry");
  }
  return *(unsigned int *)(a1 + 72);
}

uint64_t LXEntryGetHeadAndTailPos(uint64_t result, _WORD *a2, _WORD *a3)
{
  if (!result) {
    __assert_rtn("LXEntryGetHeadAndTailPos", "LXEntry.cpp", 102, "entry");
  }
  if (*(unsigned char *)(result + 88))
  {
    unsigned int v3 = *(_DWORD *)(result + 92);
    if (a2) {
      *a2 = v3;
    }
    if (a3)
    {
      unsigned int v4 = HIWORD(v3);
LABEL_11:
      *a3 = v4;
    }
  }
  else
  {
    if (a2) {
      *a2 = 0;
    }
    if (a3)
    {
      LOWORD(v4) = 0;
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t LXEntryGetEmissionCost(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("LXEntryGetEmissionCost", "LXEntry.cpp", 119, "entry");
  }
  if (*(unsigned char *)(a1 + 88)) {
    return *(unsigned __int16 *)(a1 + 96);
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t LXEntryCreateMutable(CFStringRef theString, int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v8 = 0x100000;
  __int16 v9 = 0;
  char v10 = 0;
  long long v11 = 0;
  char v12 = 0;
  v13[0] = 0;
  *(void *)((char *)v13 + 5) = 0;
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = 0xFFFFFFFFLL;
  char v14 = 0;
  int v15 = 0;
  __int16 v16 = 0;
  sub_19E03F0BC((uint64_t)&Current, theString);
  sub_19E03CD54((uint64_t)&v8, (unsigned __int16 *)&Current);
  if (v7 && BYTE6(Current) == 1) {
    free(v7);
  }
  HIDWORD(v13[0]) = a2;
  int v5 = 0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_19E0D6AAC((uint64_t)&v8, &v5, (uint64_t *)&Current);
  if (v11 && v10 == 1) {
    free(v11);
  }
  return v3;
}

void sub_19E0DE724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, void *a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, void *a20)
{
  if (a14 && a13 == 1) {
    free(a14);
  }
  if (a20)
  {
    if (a19 == 1) {
      free(a20);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t LXEntryCreateMutableCopy(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 104);
  uint64_t v2 = *(void *)(a1 + 112);
  int v4 = *(_DWORD *)(a1 + 120);
  if (qword_1EB4FED88 != -1) {
    dispatch_once(&qword_1EB4FED88, &unk_1EF09EA08);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  sub_19E039858(Instance + 16, (unsigned __int16 *)(a1 + 16));
  long long v6 = *(_OWORD *)(a1 + 48);
  long long v7 = *(_OWORD *)(a1 + 64);
  long long v8 = *(_OWORD *)(a1 + 80);
  *(_WORD *)(Instance + 96) = *(_WORD *)(a1 + 96);
  *(_OWORD *)(Instance + 64) = v7;
  *(_OWORD *)(Instance + 80) = v8;
  *(_OWORD *)(Instance + 48) = v6;
  *(void *)(Instance + 104) = v3;
  *(void *)(Instance + 112) = v2;
  *(_DWORD *)(Instance + 120) = v4;
  return Instance;
}

uint64_t sub_19E0DE838()
{
  qword_1EB4FED90 = 0;
  *(void *)algn_1EB4FED98 = "LXEntry";
  qword_1EB4FEDA0 = 0;
  unk_1EB4FEDA8 = 0;
  qword_1EB4FEDB0 = (uint64_t)sub_19E088418;
  unk_1EB4FEDB8 = 0u;
  unk_1EB4FEDC8 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB4FEDF0 = result;
  return result;
}

uint64_t LXMutableEntryGetUserBitfield(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t LXMutableEntrySetMetaFlags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 52) = a2;
  return result;
}

uint64_t LXMutableEntryUpdateUsageCount(uint64_t result, float a2)
{
  int v2 = llroundf(a2);
  unsigned int v3 = *(_DWORD *)(result + 64);
  BOOL v4 = v3 < -v2 && v2 < 0;
  unsigned int v5 = v3 + v2;
  if (v4) {
    unsigned int v5 = 0;
  }
  *(_DWORD *)(result + 64) = v5;
  return result;
}

uint64_t sub_19E0DE8C0(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 34);
  unsigned int v3 = *(unsigned __int16 *)(a1 + 4);
  if (!*(_WORD *)(a1 + 4))
  {
    sub_19E0398F4((unsigned __int16 *)a1);
    unsigned int v3 = *(unsigned __int16 *)(a1 + 4);
  }
  if (v2 >= v3) {
    return 0;
  }
  ++*(_WORD *)(a1 + 34);
  uint64_t v4 = a1 + 16;
  if (*(void *)(a1 + 8)) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  uint64_t v5 = *(unsigned __int16 *)(a1 + 32);
  unsigned __int16 v6 = v5 + 1;
  *(_WORD *)(a1 + 32) = v5 + 1;
  uint64_t result = *(unsigned __int8 *)(v4 + v5);
  if ((result & 0x80) != 0)
  {
    if (result > 0xDF)
    {
      if (result > 0xEF)
      {
        uint64_t result = ((result & 7) << 18) | ((*(unsigned char *)(v4 + v6) & 0x3F) << 12) | ((*(unsigned char *)(v4 + v6 + 1) & 0x3F) << 6) | *(unsigned char *)(v4 + v6 + 2) & 0x3F;
        __int16 v8 = v5 + 4;
      }
      else
      {
        uint64_t result = ((result & 0xF) << 12) | ((*(unsigned char *)(v4 + v6) & 0x3F) << 6) | *(unsigned char *)(v4 + v6 + 1) & 0x3F;
        __int16 v8 = v5 + 3;
      }
      *(_WORD *)(a1 + 32) = v8;
    }
    else
    {
      *(_WORD *)(a1 + 32) = v5 + 2;
      return *(unsigned char *)(v4 + (unsigned __int16)(v5 + 1)) & 0x3F | ((result & 0x1F) << 6);
    }
  }
  return result;
}

unsigned int *sub_19E0DE9B0(unsigned int *result, uint64_t **a2, int a3)
{
  int v3 = *(char *)result;
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v5 = result;
    long long v7 = result + 2;
    unsigned int v6 = result[2];
    unsigned int v8 = HIBYTE(v6) & 3;
    if (v8 > *(unsigned __int8 *)result)
    {
      unsigned int v9 = v3 + 1;
      if (v9 > v8) {
        __assert_rtn("peek_next_byte", "TIWordTrie.cpp", 189, "has_more_patricia_key_bytes()");
      }
      if (*((unsigned __int8 *)result + v9 + 24) == a3)
      {
        char v10 = *(unsigned char *)result + 1;
LABEL_23:
        *(unsigned char *)uint64_t v5 = v10;
        return result;
      }
      goto LABEL_22;
    }
    if (!*((unsigned char *)a2 + 20)) {
      goto LABEL_22;
    }
    uint64_t v11 = *(void *)&v6 & 0xFFFFFFLL;
    if ((v6 & 0xFFFFFF) != 0)
    {
      uint64_t v12 = **a2;
      uint64_t v13 = v12 + v11;
    }
    else
    {
      if (*(unsigned char *)result || v6 || *((unsigned char *)result + 24)) {
        goto LABEL_22;
      }
      uint64_t v13 = 0;
      uint64_t v12 = **a2;
    }
    uint64_t result = sub_19E0DEB70((unsigned int *)a2 + 6, v13, v12 + *((unsigned int *)a2 + 3228));
    char v14 = &result[6 * a3];
    unsigned int v15 = v14[68];
    if (!v15 && !LOBYTE(result[6 * a3 + 72]))
    {
LABEL_22:
      v5[2] = 0;
      *((void *)v5 + 2) = 0;
      char v10 = -1;
      v5[6] = 0;
      goto LABEL_23;
    }
    if (v7 != v14 + 68)
    {
      uint64_t v16 = 0;
      v5[2] = v15;
      uint64_t v17 = &result[6 * a3];
      *((void *)v5 + 2) = *((void *)v17 + 35);
      unsigned int v18 = v17 + 72;
      do
      {
        *((unsigned char *)v5 + v16 + 24) = *((unsigned char *)v18 + v16);
        ++v16;
      }
      while (v16 != 4);
    }
    *(unsigned char *)uint64_t v5 = 0;
    if (!v5[2] && !*((unsigned char *)v5 + 24)) {
      __assert_rtn("advance", "TIWordTrie.cpp", 210, "!is_root()");
    }
  }
  return result;
}

unsigned int *sub_19E0DEB70(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a1 + 1610;
    if (*((void *)a1 + 805) != a2) {
      sub_19E0DEBD4(a1 + 1610, a2);
    }
  }
  else
  {
    if (*(void *)a1 != a3) {
      sub_19E0DEBD4(a1, a3);
    }
    return a1;
  }
  return v4;
}

unsigned int *sub_19E0DEBD4(unsigned int *result, uint64_t a2)
{
  unsigned int v2 = result;
  uint64_t v3 = result[2];
  if ((int)v3 >= 1)
  {
    unint64_t v4 = v3 + 1;
    do
    {
      uint64_t v5 = &result[6 * *((unsigned __int8 *)result + (v4 - 2) + 12)];
      v5[68] = 0;
      *((void *)v5 + 35) = 0;
      v5[72] = 0;
      --v4;
    }
    while (v4 > 1);
  }
  result[2] = 0;
  *(void *)uint64_t result = a2;
  unint64_t v35 = result + 1606;
  uint64_t v6 = *((void *)result + 803);
  unint64_t v7 = *((void *)result + 804);
  unint64_t v8 = a2 - v6;
  while (1)
  {
    unint64_t v9 = v8 + 1;
    BOOL v10 = v8 + 1 <= v7 || v7 == 0;
    HIDWORD(v36) = 0;
    unsigned int v37 = 0;
    if (!v10 || v6 == 0) {
      break;
    }
    unsigned int v12 = v2[1604];
    unsigned int v13 = *(unsigned __int8 *)(v6 + v8);
    size_t v14 = (v13 & 3) + 1;
    unint64_t v15 = v9 + v14;
    if (v7)
    {
      if (v15 > v7) {
        break;
      }
    }
    int v16 = v13 << 24;
    uint64_t result = (unsigned int *)memcpy(&v37, (const void *)(v6 + v9), v14);
    int v17 = (v13 >> 2) & 3;
    if (v17 == 3)
    {
      unint64_t v18 = v15 + 3;
      if (v7 && v18 > v7) {
        break;
      }
      int v20 = (*(unsigned __int8 *)(v6 + v15 + 1) << 8) | (*(unsigned __int8 *)(v6 + v15) << 16) | *(unsigned __int8 *)(v6 + v15 + 2);
    }
    else
    {
      if (v17 == 2)
      {
        unint64_t v18 = v15 + 2;
        if (v7 && v18 > v7) {
          break;
        }
        int v19 = v8 + ((int)bswap32(*(unsigned __int16 *)(v6 + v15)) >> 16);
      }
      else
      {
        if (v17 != 1) {
          goto LABEL_28;
        }
        unint64_t v18 = v15 + 1;
        if (v7 && v18 > v7) {
          break;
        }
        int v19 = *(unsigned __int8 *)(v6 + v15) + v8;
      }
      int v20 = v19 & 0xFFFFFF;
    }
    unint64_t v15 = v18;
    v16 |= v20;
LABEL_28:
    if ((v16 & 0x40000000) != 0)
    {
      if (v7 && v15 + 1 > v7) {
        break;
      }
      unint64_t v21 = (unint64_t)*(unsigned __int8 *)(v6 + v15++) << 32;
    }
    else
    {
      unint64_t v21 = 0xFF00000000;
    }
    LODWORD(v36) = v21;
    unint64_t v22 = HIDWORD(v21);
    BYTE4(v36) = BYTE4(v21);
    if ((v16 & 0x20000000) != 0)
    {
      if ((v12 & 0x20000) != 0)
      {
        unint64_t v8 = v15 + 4;
        if (v7 && v8 > v7) {
          break;
        }
        unint64_t v29 = (*(_DWORD *)(v6 + v15) << 24) & 0x80000000 | ((unint64_t)HIDWORD(v36) << 32);
        uint64_t v28 = (*(_DWORD *)(v6 + v15) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)(v6 + v15)) | (*(_DWORD *)(v6 + v15) << 8) & 0xFF0000 | ((*(_DWORD *)(v6 + v15) & 0x7Fu) << 24);
      }
      else
      {
        unint64_t v8 = v15 + 3;
        if (v7 && v8 > v7) {
          break;
        }
        uint64_t v28 = __rev16(*(unsigned __int16 *)(v6 + v15 + 1));
        unint64_t v29 = ((*(unsigned __int8 *)(v6 + v15) << 24) | (*(unsigned __int8 *)(v6 + v15) << 16)) & 0x807F0000 | ((unint64_t)HIDWORD(v36) << 32);
      }
      unint64_t v36 = v29 | v28;
    }
    else
    {
      if ((v16 & 0x10000000) == 0)
      {
        unint64_t v8 = v15;
LABEL_36:
        BOOL v24 = (v16 & 0x10000000) == 0 && v17 != 0;
        if ((v12 & 0x10000) != 0 && !v24)
        {
          unint64_t v25 = v8 + 1;
          if (v7 && v25 > v7) {
            break;
          }
          unint64_t v26 = HIDWORD(v21);
          unint64_t v27 = v21 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)*(unsigned __int8 *)(v6 + v8) << 8);
          BYTE4(v36) = v26;
          LODWORD(v36) = v27;
          if (*(char *)(v6 + v8) < 0)
          {
            v8 += 2;
            if (v7 && v8 > v7) {
              break;
            }
            BYTE4(v36) = BYTE4(v27);
            LODWORD(v36) = v27 & 0xFF00FFFF | (*(unsigned __int8 *)(v6 + v25) << 16);
          }
          else
          {
            ++v8;
          }
        }
        goto LABEL_61;
      }
      unint64_t v8 = v15 + 1;
      if (v7 && v8 > v7) {
        break;
      }
      v21 |= *(unsigned __int8 *)(v6 + v15);
      BYTE4(v36) = v22;
      LODWORD(v36) = v21;
      if (v17 || *(unsigned char *)(v6 + v15)) {
        goto LABEL_36;
      }
    }
LABEL_61:
    char v30 = v37;
    uint64_t v31 = &v2[6 * v37];
    v31[68] = v16;
    *((void *)v31 + 35) = v36;
    v31[72] = v37;
    uint64_t v32 = (int)v2[2];
    v2[2] = v32 + 1;
    *((unsigned char *)v2 + v32 + 12) = v30;
    if ((v16 & 0x80000000) == 0) {
      return result;
    }
  }
  *(_OWORD *)(v2 + 63) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  uint64_t v33 = 0x3FFFFFFFFFFFFA00;
  *(_OWORD *)unsigned int v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  do
  {
    long long v34 = &v2[v33];
    v34[1604] = 0;
    *((void *)v34 + 803) = 0;
    v34[1608] = 0;
    v33 += 6;
  }
  while (v33 * 4);
  v2[1604] = 0;
  *unint64_t v35 = 0;
  v35[1] = 0;
  return result;
}

unsigned char *sub_19E0DEF4C(unsigned char *a1, char a2, int *a3)
{
  *a1 = a2;
  v5[0] = 0;
  int v6 = *a3;
  uint64_t v7 = *((void *)a3 + 1);
  int v8 = a3[4];
  int v9 = 0;
  sub_19E105F34((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19E07FA6C((uint64_t)v5);
  return a1;
}

void sub_19E0DEFAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E07FA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E0DEFC0(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    sub_19E0416C4();
  }
  return operator new(48 * a1);
}

uint64_t *sub_19E0DF008(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  for (uint64_t i = 56; ; i -= 48)
  {
    uint64_t v8 = v6 + i;
    uint64_t v9 = v4 + i;
    if (v4 + i - 56 == v5) {
      break;
    }
    *(unsigned char *)(v8 - 104) = *(unsigned char *)(v9 - 104);
    uint64_t result = (uint64_t *)sub_19E1060D0(v8 - 96, v9 - 96);
  }
  uint64_t v10 = v8 - 56;
  a2[1] = v10;
  uint64_t v11 = *v3;
  *uint64_t v3 = v10;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19E0DF0EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_19E07FA6C(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_19E0DF140(uint64_t result, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  if (!*(unsigned char *)(a2 + 20)) {
    goto LABEL_9;
  }
  uint64_t v6 = *(uint64_t **)(a2 + 8);
  uint64_t v7 = v6[1];
  if (v7 <= a3) {
    goto LABEL_9;
  }
  if (v7 < (unint64_t)a3) {
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  uint64_t v8 = *v6;
  if (v7 - 1 < (unint64_t)a3 || v8 == 0)
  {
LABEL_9:
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(void *)(result + 80) = 0;
    *(_WORD *)(result + 2) = 16;
    *(unsigned char *)(result + 6) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 37) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 56) = 0;
    *(void *)(result + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(result + 76) = 0;
  }
  else
  {
    int v11 = *(unsigned __int8 *)(v8 + a3);
    v12[0] = v8;
    v12[1] = v7;
    void v12[2] = a3;
    uint64_t result = sub_19E08DC50(result, v12, a5, a2 + 12920, *(void *)(a2 + 14312), *(void *)(a2 + 14320), *(_DWORD *)(a2 + 12904));
    *a4 = (v11 + a3) & (*(char *)(result + 44) >> 31);
  }
  return result;
}

void sub_19E0DF24C(uint64_t a1)
{
  unsigned int v2 = (void **)(a1 + 32);
  sub_19E08C784(&v2);
  unsigned int v2 = (void **)(a1 + 8);
  sub_19E08C810(&v2);

  JUMPOUT(0x19F3BA710);
}

BOOL sub_19E0DF2B8(_DWORD *a1, uint64_t a2)
{
  return (unint64_t)(a2 - 1) >= 3 && a1 != 0 && *a1 == 0x1000000;
}

unint64_t sub_19E0DF2E4(uint64_t a1, unint64_t a2)
{
  if (a2 <= 3) {
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  unint64_t result = 0;
  if (a2 >= 8 && a1 && a2 >= 0xC) {
    return bswap64(*(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 4) << 32));
  }
  return result;
}

uint64_t sub_19E0DF348(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)uint64_t v10 = 0;
  *(_DWORD *)versionArray = v2;
  ucol_getVersion();
  int v3 = *(_DWORD *)(a1 + 16);
  int v8 = 0;
  *(_DWORD *)uint64_t v9 = v3;
  ucol_getUCAVersion();
  if (v2) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  uint64_t v5 = v4;
  if (!v4)
  {
    u_versionToString(versionArray, versionString);
    u_versionToString(v10, v22);
    u_versionToString(v9, v21);
    u_versionToString((const uint8_t *)&v8, v20);
    if (qword_1E9457280 != -1) {
      dispatch_once(&qword_1E9457280, &unk_1EF09D1F8);
    }
    uint64_t v6 = qword_1E9457288;
    if (os_log_type_enabled((os_log_t)qword_1E9457288, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      uint64_t v13 = versionString;
      __int16 v14 = 2080;
      unint64_t v15 = v22;
      __int16 v16 = 2080;
      int v17 = v21;
      __int16 v18 = 2080;
      int v19 = v20;
      _os_log_error_impl(&dword_19E038000, v6, OS_LOG_TYPE_ERROR, "ICU version mismatch: file_collator=%s, loaded_collator=%s, file_uca=%s, loaded_uca=%s", buf, 0x2Au);
    }
  }
  return v5;
}

uint64_t sub_19E0DF4C0(uint64_t a1, unint64_t a2, unint64_t a3, _DWORD *a4)
{
  if (a2 < a3) {
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (a2) {
    BOOL v4 = a3 + 4 > a2;
  }
  else {
    BOOL v4 = 0;
  }
  BOOL v5 = v4 || a1 == 0;
  int v6 = v5;
  if (!v5) {
    *a4 = bswap32(*(_DWORD *)(a1 + a3));
  }
  return v6 ^ 1u;
}

uint64_t sub_19E0DF524(uint64_t a1, unint64_t a2, unint64_t a3, int *a4)
{
  if (a2 < a3) {
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (a2) {
    BOOL v4 = a3 + 3 > a2;
  }
  else {
    BOOL v4 = 0;
  }
  BOOL v5 = v4 || a1 == 0;
  int v6 = v5;
  if (!v5) {
    *a4 = (*(unsigned __int8 *)(a1 + a3) << 16) | (*(unsigned __int8 *)(a1 + a3 + 1) << 8) | *(unsigned __int8 *)(a1 + a3 + 2);
  }
  return v6 ^ 1u;
}

void sub_19E0DF59C()
{
}

void sub_19E0DFAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (v19) {
    operator delete(v19);
  }
  if (v20) {
    operator delete(v20);
  }
  a15 = v18 + 32;
  sub_19E08C784((void ***)&a15);
  a15 = a14;
  sub_19E08C810((void ***)&a15);
  MEMORY[0x19F3BA710](v18, 0x1020C404D15F4B2);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0DFB90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_19E0DFBB4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF09AB40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0DFC08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF09AB40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_19E0DFC28(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (((*(unsigned char *)(a1 + 9) != 0) & (a2 >> 4)) != 0) {
      int v2 = a2 & 1 | 8;
    }
    else {
      int v2 = a2 & 1;
    }
    unsigned int v3 = v2 | a2 & 0x60;
    unsigned int v4 = a2 & 0x88888888;
    int v5 = v3 | 0x800000;
    int v6 = v3 | 0x2000000;
    if ((a2 & 0x88888888) == 0x80) {
      v3 |= 0x1000000u;
    }
    if (v4 == 136) {
      unsigned int v3 = v6;
    }
    if (v4 == 8) {
      unsigned int v3 = v5;
    }
    int v7 = a2 & 6;
    switch(v7)
    {
      case 6:
        return v3 | 0x80;
      case 4:
        return v3 | 4;
      case 2:
        return v3 | 2;
      default:
        return v3;
    }
  }
  else if ((a2 & 0x80u) == 0)
  {
    return a2 & 0x67;
  }
  else
  {
    return a2 & 0x67 | 0x80;
  }
}

void sub_19E0DFCD0()
{
}

os_log_t sub_19E0DFCE8()
{
  os_log_t result = os_log_create("com.apple.Lexicon", "WordTrie");
  qword_1E9457288 = (uint64_t)result;
  return result;
}

void sub_19E0DFD18(unsigned char *a1, uint64_t a2, std::string *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    if (munlock(*(const void **)a2, *(void *)(a2 + 8)))
    {
      *(void *)&v13.__val_ = *__error();
      v13.__cat_ = std::generic_category();
      if (v13.__val_)
      {
        if (qword_1E9457280 != -1) {
          dispatch_once(&qword_1E9457280, &unk_1EF09D1F8);
        }
        int v5 = qword_1E9457288;
        if (os_log_type_enabled((os_log_t)qword_1E9457288, OS_LOG_TYPE_DEFAULT))
        {
          std::error_code::message(&v12, &v13);
          if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v6 = &v12;
          }
          else {
            int v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
          }
          if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v7 = a3;
          }
          else {
            int v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315650;
          unint64_t v15 = "handle_unlocking";
          __int16 v16 = 2080;
          int v17 = v6;
          __int16 v18 = 2080;
          int v19 = v7;
          _os_log_impl(&dword_19E038000, v5, OS_LOG_TYPE_DEFAULT, "%s: munlock() failed for %s file: %s", buf, 0x20u);
          if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v12.__r_.__value_.__l.__data_);
          }
        }
        return;
      }
    }
    else
    {
      std::system_category();
    }
    *a1 = 0;
    if (qword_1E9457280 != -1) {
      dispatch_once(&qword_1E9457280, &unk_1EF09D1F8);
    }
    int v8 = qword_1E9457288;
    if (os_log_type_enabled((os_log_t)qword_1E9457288, OS_LOG_TYPE_DEFAULT))
    {
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v11 = a3;
      }
      else {
        int v11 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315394;
      unint64_t v15 = "handle_unlocking";
      __int16 v16 = 2080;
      int v17 = v11;
      uint64_t v10 = "%s: %s file unlocked successfully";
LABEL_30:
      _os_log_impl(&dword_19E038000, v8, OS_LOG_TYPE_DEFAULT, v10, buf, 0x16u);
    }
  }
  else
  {
    if (qword_1E9457280 != -1) {
      dispatch_once(&qword_1E9457280, &unk_1EF09D1F8);
    }
    int v8 = qword_1E9457288;
    if (os_log_type_enabled((os_log_t)qword_1E9457288, OS_LOG_TYPE_DEFAULT))
    {
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v9 = a3;
      }
      else {
        uint64_t v9 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315394;
      unint64_t v15 = "handle_unlocking";
      __int16 v16 = 2080;
      int v17 = v9;
      uint64_t v10 = "%s: %s file is already unlocked";
      goto LABEL_30;
    }
  }
}

void sub_19E0DFFA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_19E04137C(a1);
}

uint64_t sub_19E0DFFAC(uint64_t a1)
{
  sub_19E03FD18((CFStringRef *)&v8, (unsigned __int16 *)(a1 + 16));
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 96))(&v6);
  if ((unsigned __int16)v6 <= 0xEu) {
    int v2 = (unsigned __int8 *)&v6 + 2;
  }
  else {
    int v2 = v7;
  }
  unsigned int v3 = sub_19E0B24AC(v2, (unsigned __int16)v6);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8));
  if ((unsigned __int16)v6 >= 0xFu && v7) {
    MEMORY[0x19F3BA6E0](v7, 0x1000C8077774924);
  }
  sub_19E040A10(&v8);
  return v4 ^ v3;
}

void sub_19E0E0098(_Unwind_Exception *a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a3 >= 0xFu)
  {
    if (a4) {
      MEMORY[0x19F3BA6E0](a4, 0x1000C8077774924);
    }
  }
  sub_19E040A10((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0E00DC()
{
  return 0;
}

uint64_t sub_19E0E00E4(uint64_t a1)
{
  return sub_19E0E00EC((unsigned __int16 *)(a1 + 16));
}

uint64_t sub_19E0E00EC(unsigned __int16 *a1)
{
  int v1 = *a1;
  if (!*a1) {
    return 0;
  }
  int v2 = (unsigned __int16 *)*((void *)a1 + 1);
  if (!v2) {
    int v2 = a1 + 8;
  }
  *(void *)&long long v4 = v2;
  DWORD2(v4) = v1;
  HIDWORD(v4) = v1;
  LODWORD(v5) = 0;
  sub_19E03E768((uint64_t *)&v4);
  long long v6 = v4;
  uint64_t v7 = v5;
  sub_19E0B15FC(&v6);
  return v7;
}

const void *sub_19E0E0158(uint64_t a1)
{
  sub_19E03FD18((CFStringRef *)&v3, (unsigned __int16 *)(a1 + 16));
  int v1 = v3;
  unsigned int v3 = 0;
  sub_19E040A10(&v3);
  return v1;
}

uint64_t sub_19E0E019C()
{
  return 0;
}

uint64_t sub_19E0E01A4()
{
  return 0;
}

void sub_19E0E01AC(void *a1)
{
  if (((*(uint64_t (**)(void *))(*a1 + 32))(a1) & 1) == 0)
  {
    int v2 = (uint64_t *)a1[6];
    unsigned int v3 = (uint64_t *)a1[7];
    if (v2 != v3)
    {
      uint64_t v4 = MEMORY[0x1E4F143A8];
      double v5 = -INFINITY;
      do
      {
        uint64_t v6 = a1[1];
        uint64_t v10 = 0;
        int v11 = (double *)&v10;
        uint64_t v12 = 0x2000000000;
        unint64_t v13 = 0xFFF0000000000000;
        uint64_t v7 = *v2;
        v9[0] = v4;
        v9[1] = 0x40000000;
        v9[2] = sub_19E0E34C0;
        v9[3] = &unk_1E599C598;
        uint8_t v9[4] = &v10;
        void v9[5] = v6;
        sub_19E087E54(v7 + 16, (uint64_t)v9);
        double v8 = v11[3] / 2.30258509;
        _Block_object_dispose(&v10, 8);
        if (v5 < v8) {
          double v5 = v8;
        }
        v2 += 7;
      }
      while (v2 != v3);
    }
  }
}

void sub_19E0E0314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_19E0E032C(uint64_t a1)
{
  return *(double *)(a1 + 80);
}

double sub_19E0E0334(uint64_t a1)
{
  return *(double *)(a1 + 72);
}

uint64_t sub_19E0E033C(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (qword_1E94577E0 != -1) {
    dispatch_once(&qword_1E94577E0, &unk_1EF09EA28);
  }
  unsigned int v3 = qword_1E94577D8;
  if (os_log_type_enabled((os_log_t)qword_1E94577D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(void *)(a1 + 24);
    if (!v19) {
      uint64_t v19 = a1 + 32;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v19;
    _os_log_debug_impl(&dword_19E038000, v3, OS_LOG_TYPE_DEBUG, "enumerate_children: \"%s\"", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x5002000000;
  unint64_t v26 = sub_19E0E07C4;
  unint64_t v27 = sub_19E0E0834;
  memset(v28, 0, sizeof(v28));
  int v29 = 1065353216;
  uint64_t v4 = *(void **)(a1 + 48);
  double v5 = *(void **)(a1 + 56);
  if (v4 == v5)
  {
    int v11 = &v23;
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F143A8];
    uint64_t v7 = MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v8 = *(void *)(a1 + 8);
      v22[0] = v6;
      v22[1] = 0x40000000;
      v22[2] = sub_19E0E083C;
      v22[3] = &unk_1E599C438;
      v22[4] = &v23;
      v22[5] = a1;
      uint64_t v9 = *v4;
      uint64_t v40 = v7;
      uint64_t v41 = 0x40000000;
      uint64_t v42 = sub_19E0E3598;
      unsigned int v43 = &unk_1E599C5E8;
      unint64_t v44 = v22;
      uint64_t v45 = v4;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)(v9 + 16) + 64))(v9 + 16);
      }
      uint64_t v10 = *v4;
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 0x40000000;
      uint64_t v32 = sub_19E0E36D0;
      uint64_t v33 = &unk_1E599C610;
      unint64_t v35 = v4;
      *(void *)&long long v36 = v8;
      long long v34 = v22;
      sub_19E087E54(v10 + 16, (uint64_t)&buf);
      v4 += 7;
    }
    while (v4 != v5);
    int v11 = v24;
  }
  uint64_t v12 = v11 + 7;
  unsigned __int8 v21 = 0;
  do
  {
    uint64_t v12 = (void *)*v12;
    if (!v12) {
      break;
    }
    double v13 = *((double *)v12 + 8);
    double v14 = (*(double (**)(uint64_t))(*(void *)a1 + 80))(a1);
    sub_19E0B2328((uint64_t)&v40, (unsigned __int16 *)(a1 + 16), *((_DWORD *)v12 + 8));
    uint64_t v15 = *(void *)(a1 + 8);
    *(void *)&long long buf = &unk_1EF099DE8;
    *((void *)&buf + 1) = v15;
    LODWORD(v32) = 0x100000;
    WORD2(v32) = 0;
    BYTE6(v32) = 0;
    uint64_t v33 = 0;
    sub_19E03CED8((uint64_t)&v32, (unsigned __int16 *)&v40);
    long long v36 = 0uLL;
    uint64_t v37 = 0;
    long long v36 = *(_OWORD *)(v12 + 5);
    uint64_t v37 = v12[7];
    v12[5] = 0;
    v12[6] = 0;
    v12[7] = 0;
    double v38 = v13;
    double v39 = v13 + v14;
    __int16 v16 = (void **)sub_19E0E0D4C((uint64_t)&buf);
    char v30 = v16;
    (*(void (**)(uint64_t, void **, unsigned __int8 *))(a2 + 16))(a2, v16, &v21);
    int v17 = v21;
    if (v16) {
      CFRelease(v16);
    }
    char v30 = (void **)&v36;
    *(void *)&long long buf = &unk_1EF099DE8;
    sub_19E0E0DCC(&v30);
    if (v33 && BYTE6(v32) == 1) {
      free(v33);
    }
    if (v41 && BYTE6(v40) == 1) {
      free((void *)v41);
    }
  }
  while (!v17);
  _Block_object_dispose(&v23, 8);
  return sub_19E0E0EC0((uint64_t)v28);
}

void sub_19E0E0750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2) {
    sub_19E04137C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E07C4(uint64_t result, void *a2)
{
  uint64_t v2 = a2[5];
  a2[5] = 0;
  *(void *)(result + 40) = v2;
  *(void *)(result + 48) = a2[6];
  a2[6] = 0;
  uint64_t v5 = a2[7];
  unsigned int v3 = a2 + 7;
  uint64_t v4 = v5;
  *(void *)(result + 56) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 56;
    *unsigned int v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_19E0E0834(uint64_t a1)
{
  return sub_19E0E0EC0(a1 + 40);
}

uint64_t sub_19E0E083C(uint64_t a1, uint64_t a2, long long *a3, double a4)
{
  int v7 = a2;
  sub_19E0EB6AC((uint64_t)&v45, *(void *)(*(void *)(a1 + 40) + 8), a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned int v10 = (unsigned __int16)v45;
  if ((unsigned __int16)v45 <= 0xEu) {
    int v11 = (unsigned __int8 *)&v45 + 2;
  }
  else {
    int v11 = (unsigned __int8 *)*((void *)&v45 + 1);
  }
  unsigned int v12 = sub_19E0B24AC(v11, (unsigned __int16)v45);
  unint64_t v13 = v12;
  unint64_t v14 = *(void *)(v9 + 48);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    unint64_t v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v4 = v12;
      if (v14 <= v12) {
        unint64_t v4 = v12 % v14;
      }
    }
    else
    {
      unint64_t v4 = (v14 - 1) & v12;
    }
    int v17 = *(uint64_t ***)(*(void *)(v9 + 40) + 8 * v4);
    if (v17)
    {
      for (uint64_t i = *v17; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v19 = i[1];
        if (v19 == v13)
        {
          if (sub_19E0A7134((unsigned __int16 *)i + 8, (unsigned __int16 *)&v45)) {
            goto LABEL_78;
          }
        }
        else
        {
          if (v16 > 1)
          {
            if (v19 >= v14) {
              v19 %= v14;
            }
          }
          else
          {
            v19 &= v14 - 1;
          }
          if (v19 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v20 = operator new(0x48uLL);
  unsigned __int8 v21 = (void *)(v9 + 56);
  v46[0] = v20;
  v46[1] = v9 + 56;
  *uint64_t v20 = 0;
  v20[1] = v13;
  *((_OWORD *)v20 + 1) = v45;
  if (v10 >= 0xF) {
    LOWORD(v45) = 0;
  }
  *((_OWORD *)v20 + 2) = 0u;
  *((_OWORD *)v20 + 3) = 0u;
  v20[8] = 0xFFF0000000000000;
  char v47 = 1;
  float v22 = (float)(unint64_t)(*(void *)(v9 + 64) + 1);
  float v23 = *(float *)(v9 + 72);
  if (!v14 || (float)(v23 * (float)v14) < v22)
  {
    BOOL v24 = (v14 & (v14 - 1)) == 0;
    if (v14 < 3) {
      BOOL v24 = 0;
    }
    unint64_t v25 = (2 * v14) | !v24;
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    else {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v14 = *(void *)(v9 + 48);
    }
    if (*(void *)&prime <= v14)
    {
      if (*(void *)&prime >= v14) {
        goto LABEL_65;
      }
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(v9 + 64) / *(float *)(v9 + 72));
      if (v14 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (*(void *)&prime <= v34) {
        int8x8_t prime = (int8x8_t)v34;
      }
      if (*(void *)&prime >= v14)
      {
        unint64_t v14 = *(void *)(v9 + 48);
        goto LABEL_65;
      }
      if (!*(void *)&prime)
      {
        unint64_t v44 = *(void **)(v9 + 40);
        *(void *)(v9 + 40) = 0;
        if (v44) {
          operator delete(v44);
        }
        unint64_t v14 = 0;
        *(void *)(v9 + 48) = 0;
        goto LABEL_65;
      }
    }
    if (*(void *)&prime >> 61) {
      sub_19E0416C4();
    }
    uint64_t v28 = operator new(8 * *(void *)&prime);
    int v29 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v28;
    if (v29) {
      operator delete(v29);
    }
    uint64_t v30 = 0;
    *(int8x8_t *)(v9 + 48) = prime;
    do
      *(void *)(*(void *)(v9 + 40) + 8 * v30++) = 0;
    while (*(void *)&prime != v30);
    uint64_t v31 = (void *)*v21;
    if (*v21)
    {
      unint64_t v32 = v31[1];
      uint8x8_t v33 = (uint8x8_t)vcnt_s8(prime);
      v33.i16[0] = vaddlv_u8(v33);
      if (v33.u32[0] > 1uLL)
      {
        if (v32 >= *(void *)&prime) {
          v32 %= *(void *)&prime;
        }
      }
      else
      {
        v32 &= *(void *)&prime - 1;
      }
      *(void *)(*(void *)(v9 + 40) + 8 * v32) = v21;
      uint64_t v37 = (void *)*v31;
      if (*v31)
      {
        do
        {
          unint64_t v38 = v37[1];
          if (v33.u32[0] > 1uLL)
          {
            if (v38 >= *(void *)&prime) {
              v38 %= *(void *)&prime;
            }
          }
          else
          {
            v38 &= *(void *)&prime - 1;
          }
          if (v38 != v32)
          {
            uint64_t v39 = *(void *)(v9 + 40);
            if (!*(void *)(v39 + 8 * v38))
            {
              *(void *)(v39 + 8 * v38) = v31;
              goto LABEL_61;
            }
            *uint64_t v31 = *v37;
            *uint64_t v37 = **(void **)(*(void *)(v9 + 40) + 8 * v38);
            **(void **)(*(void *)(v9 + 40) + 8 * v38) = v37;
            uint64_t v37 = v31;
          }
          unint64_t v38 = v32;
LABEL_61:
          uint64_t v31 = v37;
          uint64_t v37 = (void *)*v37;
          unint64_t v32 = v38;
        }
        while (v37);
      }
    }
    unint64_t v14 = (unint64_t)prime;
LABEL_65:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v14 <= v13) {
        v13 %= v14;
      }
    }
    else
    {
      unint64_t v13 = (v14 - 1) & v13;
    }
    goto LABEL_69;
  }
  unint64_t v13 = v4;
LABEL_69:
  uint64_t v40 = *(void **)(*(void *)(v9 + 40) + 8 * v13);
  if (v40)
  {
    *(void *)v46[0] = *v40;
    void *v40 = v46[0];
  }
  else
  {
    *(void *)v46[0] = *(void *)(v9 + 56);
    *(void *)(v9 + 56) = v46[0];
    *(void *)(*(void *)(v9 + 40) + 8 * v13) = v21;
    if (*(void *)v46[0])
    {
      unint64_t v41 = *(void *)(*(void *)v46[0] + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v41 >= v14) {
          v41 %= v14;
        }
      }
      else
      {
        v41 &= v14 - 1;
      }
      *(void *)(*(void *)(v9 + 40) + 8 * v41) = v46[0];
    }
  }
  uint64_t i = (uint64_t *)v46[0];
  v46[0] = 0;
  ++*(void *)(v9 + 64);
  sub_19E0E10D0((uint64_t)v46);
LABEL_78:
  *((_DWORD *)i + 8) = v7;
  double v42 = *((double *)i + 8);
  if (v42 < a4) {
    double v42 = a4;
  }
  *((double *)i + 8) = v42;
  uint64_t result = sub_19E0E1118(i + 5, a3);
  if ((unsigned __int16)v45 >= 0xFu)
  {
    uint64_t result = *((void *)&v45 + 1);
    if (*((void *)&v45 + 1)) {
      return MEMORY[0x19F3BA6E0](*((void *)&v45 + 1), 0x1000C8077774924);
    }
  }
  return result;
}

void sub_19E0E0D08(_Unwind_Exception *a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E0E10D0((uint64_t)va);
  if (a3 >= 0xFu)
  {
    if (a4) {
      MEMORY[0x19F3BA6E0](a4, 0x1000C8077774924);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E0E0D4C(uint64_t a1)
{
  if (qword_1EB4FEE18 != -1) {
    dispatch_once(&qword_1EB4FEE18, &unk_1EF09ABF0);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  sub_19E0E0FF0(Instance + 16, a1);
  return Instance;
}

void sub_19E0E0DCC(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_19E0E0F9C(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_19E0E0E50(uint64_t a1)
{
  *(void *)a1 = &unk_1EF099DE8;
  uint64_t v4 = (void **)(a1 + 48);
  sub_19E0E0DCC(&v4);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 && *(unsigned char *)(a1 + 22) == 1) {
    free(v2);
  }
  return a1;
}

uint64_t sub_19E0E0EC0(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int16 **)(a1 + 16);
  if (v2)
  {
    do
    {
      unsigned int v3 = *(unsigned __int16 **)v2;
      sub_19E0E0F20(v2 + 8);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_19E0E0F20(unsigned __int16 *a1)
{
  uint64_t v2 = (void **)(a1 + 12);
  sub_19E0E0DCC(&v2);
  if (*a1 >= 0xFu && *((void *)a1 + 1))
  {
    JUMPOUT(0x19F3BA6E0);
  }
}

void sub_19E0E0F9C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_19E0616BC(v2);
  }

  sub_19E062044((const void **)a1, 0);
}

uint64_t sub_19E0E0FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1EF099DE8;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = 0x100000;
  *(_WORD *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 22) = 0;
  *(void *)(a1 + 24) = 0;
  sub_19E03CED8(a1 + 16, (unsigned __int16 *)(a2 + 16));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t sub_19E0E107C()
{
  qword_1EB4FEE20 = 0;
  *(void *)algn_1EB4FEE28 = "LXCursor";
  qword_1EB4FEE30 = 0;
  unk_1EB4FEE38 = 0;
  qword_1EB4FEE40 = (uint64_t)sub_19E087C70;
  *(_OWORD *)algn_1EB4FEE48 = 0u;
  *(_OWORD *)&algn_1EB4FEE48[16] = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB4FEE80 = result;
  return result;
}

uint64_t sub_19E0E10D0(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int16 **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_19E0E0F20(v2 + 8);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19E0E1118(uint64_t *a1, long long *a2)
{
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0x492492492492492) {
      sub_19E041BEC();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v12 = 0x492492492492492;
    }
    else {
      unint64_t v12 = v11;
    }
    __int16 v18 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_19E0E12AC(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12;
    uint64_t v15 = v12 + 56 * v9;
    unint64_t v17 = v12 + 56 * v13;
    sub_19E0E1238(v15, a2);
    uint64_t v16 = v15 + 56;
    sub_19E0E12F8(a1, &v14);
    uint64_t v8 = a1[1];
    uint64_t result = sub_19E0E1380((uint64_t)&v14);
  }
  else
  {
    uint64_t result = sub_19E0E1238(v6, a2);
    uint64_t v8 = result + 56;
  }
  a1[1] = v8;
  return result;
}

uint64_t sub_19E0E1238(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *(_OWORD *)a1 = v3;
  uint64_t v4 = *((void *)a2 + 3);
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a1 + 32;
  if (*((char *)a2 + 55) < 0)
  {
    sub_19E03FA9C((unsigned char *)v5, *((void **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v6 = a2[2];
    *(void *)(v5 + 16) = *((void *)a2 + 6);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return a1;
}

void *sub_19E0E12AC(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    sub_19E0416C4();
  }
  return operator new(56 * a1);
}

uint64_t sub_19E0E12F8(uint64_t *a1, void *a2)
{
  uint64_t v5 = (long long *)*a1;
  uint64_t v4 = (long long *)a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    uint64_t v4 = (long long *)((char *)v4 - 56);
    uint64_t result = sub_19E0E1238(result - 56, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19E0E1380(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    sub_19E0E0F9C(i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

os_log_t sub_19E0E13D0()
{
  os_log_t result = os_log_create("com.apple.Lexicon", "MorphemeLevelLexiconCursor");
  qword_1E94577D8 = (uint64_t)result;
  return result;
}

uint64_t sub_19E0E1400(void *a1)
{
  int v1 = (uint64_t *)a1[6];
  uint64_t v2 = (uint64_t *)a1[7];
  if (v1 != v2)
  {
    while (1)
    {
      uint64_t v4 = a1[1];
      if (*v1)
      {
        if ((*(uint64_t (**)(void))(*(void *)(*v1 + 16) + 56))()) {
          return 1;
        }
        uint64_t v5 = *v1;
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v10 = 0;
      uint64_t v11 = &v10;
      uint64_t v12 = 0x2000000000;
      char v13 = 0;
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 0x40000000;
      v9[2] = sub_19E0E3520;
      v9[3] = &unk_1E599C5C0;
      void v9[5] = v1;
      void v9[6] = v4;
      uint8_t v9[4] = &v10;
      sub_19E087E54(v5 + 16, (uint64_t)v9);
      int v6 = *((unsigned __int8 *)v11 + 24);
      BOOL v7 = *((unsigned char *)v11 + 24) != 0;
      _Block_object_dispose(&v10, 8);
      if (!v6)
      {
        v1 += 7;
        if (v1 != v2) {
          continue;
        }
      }
      return v7;
    }
  }
  return 0;
}

void sub_19E0E154C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E0E1564(void *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (qword_1E94577E0 != -1) {
    dispatch_once(&qword_1E94577E0, &unk_1EF09EA28);
  }
  uint64_t v3 = qword_1E94577D8;
  if (os_log_type_enabled((os_log_t)qword_1E94577D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = (void *)a1[3];
    if (!v10) {
      uint64_t v10 = a1 + 4;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v10;
    _os_log_debug_impl(&dword_19E038000, v3, OS_LOG_TYPE_DEBUG, "enumerate_entries: \"%s\"", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v13 = 0;
  unint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  char v16 = 0;
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v19 = 0x5002000000;
  uint64_t v20 = sub_19E0E1814;
  unsigned __int8 v21 = sub_19E0E1884;
  memset(v22, 0, sizeof(v22));
  int v23 = 1065353216;
  uint64_t v5 = (uint64_t *)a1[6];
  uint64_t v4 = (uint64_t *)a1[7];
  if (v5 != v4)
  {
    uint64_t v6 = MEMORY[0x1E4F143A8];
    uint64_t v7 = MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v8 = a1[1];
      v12[0] = v6;
      v12[1] = 0x40000000;
      void v12[2] = sub_19E0E188C;
      uint64_t v12[3] = &unk_1E599C410;
      v12[5] = &buf;
      v12[4] = a2;
      v12[6] = &v13;
      uint64_t v9 = *v5;
      v17[0] = v7;
      v17[1] = 0x40000000;
      v17[2] = sub_19E0E40FC;
      v17[3] = &unk_1E599C638;
      void v17[5] = v5;
      v17[6] = v8;
      v17[4] = v12;
      sub_19E087E54(v9 + 16, (uint64_t)v17);
      if (*((unsigned char *)v14 + 24)) {
        break;
      }
      v5 += 7;
    }
    while (v5 != v4);
  }
  _Block_object_dispose(&buf, 8);
  sub_19E0A11D4((uint64_t)v22);
  _Block_object_dispose(&v13, 8);
}

void sub_19E0E17E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_19E0E1814(uint64_t result, void *a2)
{
  uint64_t v2 = a2[5];
  a2[5] = 0;
  *(void *)(result + 40) = v2;
  *(void *)(result + 48) = a2[6];
  a2[6] = 0;
  uint64_t v5 = a2[7];
  uint64_t v3 = a2 + 7;
  uint64_t v4 = v5;
  *(void *)(result + 56) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 56;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_19E0E1884(uint64_t a1)
{
  return sub_19E0A11D4(a1 + 40);
}

void sub_19E0E188C(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  v38[3] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  sub_19E08E71C((uint64_t)buf, (unsigned __int16 *)(a2 + 16));
  unint64_t v7 = (uint64_t *)(v6 + 40);
  unint64_t v8 = *(void **)&v37[4];
  if (*(void *)&v37[4]) {
    uint64_t v9 = *(unsigned __int8 **)&v37[4];
  }
  else {
    uint64_t v9 = (unsigned __int8 *)v38;
  }
  unsigned int v10 = sub_19E0B24AC(v9, *(unsigned __int16 *)buf);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(v6 + 48);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v12 <= v10) {
        unint64_t v3 = v10 % v12;
      }
    }
    else
    {
      unint64_t v3 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(unsigned __int16 ***)(*v7 + 8 * v3);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int16 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (i + 8 == (unsigned __int16 *)buf || sub_19E0B2428(i + 8, (unsigned __int16 *)buf))
          {
            char v29 = 1;
            if (!v8) {
              goto LABEL_46;
            }
            goto LABEL_44;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v3) {
            break;
          }
        }
      }
    }
  }
  __int16 v18 = operator new(0x30uLL);
  uint64_t v19 = (void *)(v6 + 56);
  v34[0] = (uint64_t)v18;
  v34[1] = v6 + 56;
  *__int16 v18 = 0;
  v18[1] = v11;
  *((_DWORD *)v18 + 4) = 0x100000;
  *((_WORD *)v18 + 10) = 0;
  *((unsigned char *)v18 + 22) = 0;
  v18[3] = 0;
  sub_19E03CED8((uint64_t)(v18 + 2), (unsigned __int16 *)buf);
  char v35 = 1;
  float v20 = (float)(unint64_t)(*(void *)(v6 + 64) + 1);
  float v21 = *(float *)(v6 + 72);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    BOOL v22 = 1;
    if (v12 >= 3) {
      BOOL v22 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v12);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_19E08A5BC(v6 + 40, v25);
    unint64_t v12 = *(void *)(v6 + 48);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v11) {
        unint64_t v3 = v11 % v12;
      }
      else {
        unint64_t v3 = v11;
      }
    }
    else
    {
      unint64_t v3 = (v12 - 1) & v11;
    }
  }
  uint64_t v26 = *v7;
  unint64_t v27 = *(void **)(*v7 + 8 * v3);
  if (v27)
  {
    *__int16 v18 = *v27;
  }
  else
  {
    *__int16 v18 = *v19;
    void *v19 = v18;
    *(void *)(v26 + 8 * v3) = v19;
    if (!*v18) {
      goto LABEL_43;
    }
    unint64_t v28 = *(void *)(*v18 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v28 >= v12) {
        v28 %= v12;
      }
    }
    else
    {
      v28 &= v12 - 1;
    }
    unint64_t v27 = (void *)(*v7 + 8 * v28);
  }
  void *v27 = v18;
LABEL_43:
  v34[0] = 0;
  ++*(void *)(v6 + 64);
  sub_19E0A1244(v34);
  char v29 = 0;
  unint64_t v8 = *(void **)&v37[4];
  if (!*(void *)&v37[4]) {
    goto LABEL_46;
  }
LABEL_44:
  if (v37[2] == 1) {
    free(v8);
  }
LABEL_46:
  if ((v29 & 1) == 0)
  {
    if (qword_1E94577E0 != -1) {
      dispatch_once(&qword_1E94577E0, &unk_1EF09EA28);
    }
    uint64_t v30 = qword_1E94577D8;
    if (os_log_type_enabled((os_log_t)qword_1E94577D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v32 = *(void *)(a2 + 24);
      if (!v32) {
        uint64_t v32 = a2 + 32;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)uint64_t v37 = v32;
      _os_log_debug_impl(&dword_19E038000, v30, OS_LOG_TYPE_DEBUG, " entry: \"%s\"", buf, 0xCu);
    }
    uint64_t v31 = a1 + 48;
    (*(void (**)(void))(*(void *)(v31 - 16) + 16))();
    *a3 = *(unsigned char *)(*(void *)(*(void *)v31 + 8) + 24);
  }
}

void sub_19E0E1C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, void *a18)
{
  if (a18)
  {
    if (a17 == 1) {
      free(a18);
    }
  }
  _Unwind_Resume(a1);
}

BOOL sub_19E0E1C78(void *a1)
{
  if ((*(uint64_t (**)(void *))(*a1 + 32))(a1)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)a1[6];
  unint64_t v3 = (uint64_t *)a1[7];
  if (v2 == v3) {
    return 0;
  }
  uint64_t v4 = MEMORY[0x1E4F143A8];
  do
  {
    uint64_t v5 = a1[1];
    uint64_t v11 = 0;
    unint64_t v12 = &v11;
    uint64_t v13 = 0x2000000000;
    char v14 = 0;
    uint64_t v6 = *v2;
    v10[0] = v4;
    v10[1] = 0x40000000;
    v10[2] = sub_19E0E33F0;
    v10[3] = &unk_1E599C570;
    v10[5] = v2;
    v10[6] = v5;
    uint8_t v10[4] = &v11;
    sub_19E087E54(v6 + 16, (uint64_t)v10);
    int v7 = *((unsigned __int8 *)v12 + 24);
    BOOL v8 = *((unsigned char *)v12 + 24) != 0;
    _Block_object_dispose(&v11, 8);
    if (v7) {
      break;
    }
    v2 += 7;
  }
  while (v2 != v3);
  return v8;
}

void sub_19E0E1DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_19E0E1DCC(uint64_t a1)
{
  return *(_WORD *)(a1 + 16) == 0;
}

BOOL sub_19E0E1DDC(uint64_t a1, uint64_t a2)
{
  return a2 + 16 == a1;
}

uint64_t sub_19E0E1DEC(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = a1;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  int v77 = (double (**)(void **))&unk_1EF099DE8;
  uint64_t v78 = v3;
  sub_19E039858((uint64_t)v79, (unsigned __int16 *)(a1 + 16));
  long long __p = 0uLL;
  float v83 = 0;
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v5 = *(void *)(v2 + 56);
  *(void *)long long buf = &__p;
  buf[8] = 0;
  if (v5 != v4)
  {
    unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 3);
    if (v6 >= 0x492492492492493) {
      sub_19E041BEC();
    }
    int v7 = (char *)sub_19E0E12AC(v6);
    uint64_t v8 = 0;
    *(void *)&long long __p = v7;
    *((void *)&__p + 1) = v7;
    float v83 = &v7[56 * v9];
    do
    {
      unsigned int v10 = &v7[v8];
      uint64_t v11 = v4 + v8;
      *(void *)unsigned int v10 = 0;
      *((void *)v10 + 1) = *(void *)(v4 + v8 + 8);
      uint64_t v12 = *(void *)(v4 + v8 + 16);
      *((void *)v10 + 2) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)v10 + 3) = *(void *)(v11 + 24);
      uint64_t v13 = v10 + 32;
      char v14 = (void **)(v11 + 32);
      if (*(char *)(v11 + 55) < 0)
      {
        sub_19E03FA9C(v13, *v14, *(void *)(v4 + v8 + 40));
      }
      else
      {
        long long v15 = *(_OWORD *)v14;
        *((void *)v10 + 6) = *(void *)(v11 + 48);
        *(_OWORD *)uint64_t v13 = v15;
      }
      sub_19E0A7B48((const void **)&v7[v8], *(CFTypeRef *)(v4 + v8));
      v8 += 56;
    }
    while (v4 + v8 != v5);
    *((void *)&__p + 1) = &v7[v8];
  }
  long long v84 = *(_OWORD *)(v2 + 72);
  char v85 = 1;
  if (*((void *)a2 + 1)) {
    uint64_t v16 = *((void *)a2 + 1);
  }
  else {
    uint64_t v16 = (uint64_t)(a2 + 8);
  }
  uint64_t v47 = v16;
  int v17 = *a2;
  int v48 = 0;
  int v49 = v17;
  unsigned int v50 = 0;
  sub_19E03E768(&v47);
  uint64_t v43 = v16;
  int v44 = v17;
  int v45 = v17;
  int v46 = 0;
  sub_19E03E768(&v43);
  uint64_t v40 = v2;
  while (1)
  {
    if (v47 != v43) {
      __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
    }
    if (v48 == v44) {
      break;
    }
    uint64_t v18 = v50;
    sub_19E0EB6AC((uint64_t)&v41, *(void *)(v2 + 8), v50);
    if (v41)
    {
      uint64_t v60 = 0;
      __int16 v61 = &v60;
      uint64_t v62 = 0x4002000000;
      unint64_t v63 = sub_19E0E28CC;
      uint64_t v64 = sub_19E0E28F0;
      memset(v65, 0, sizeof(v65));
      uint64_t v56 = 0;
      uint64_t v57 = (double *)&v56;
      uint64_t v58 = 0x2000000000;
      unint64_t v59 = 0xFFF0000000000000;
      float v20 = (uint64_t *)*((void *)&__p + 1);
      uint64_t v19 = (uint64_t *)__p;
      if ((void)__p == *((void *)&__p + 1)) {
        goto LABEL_48;
      }
      uint64_t v21 = MEMORY[0x1E4F143A8];
      do
      {
        uint64_t v22 = v78;
        v51[0] = v21;
        v51[1] = 0x40000000;
        uint64_t v52 = sub_19E0E291C;
        uint64_t v53 = &unk_1E599C3E8;
        char v54 = &v60;
        int v55 = &v56;
        unsigned int v69 = v18;
        unint64_t v23 = (void *)LXCursorCreateByAdvancingWithUTF32(*v19, &v69, 1);
        uint64_t v68 = v23;
        if (v23)
        {
          unint64_t v24 = (std::__shared_weak_count *)v19[2];
          uint8x8_t v66 = (void **)v19[1];
          uint64_t v67 = v24;
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_19E0E336C((uint64_t)&v95, v23, (uint64_t)&v66, (uint64_t)(v19 + 3));
          if (v67) {
            sub_19E0616BC(v67);
          }
          (*(void (**)(void))(v23[2] + 72))();
          ((void (*)(void *, long long *))v52)(v51, &v95);
          if (v98 < 0) {
            operator delete(v97);
          }
          if (v96) {
            sub_19E0616BC(v96);
          }
          if ((void)v95) {
            CFRelease((CFTypeRef)v95);
          }
          CFRelease(v23);
        }
        sub_19E0EB6AC((uint64_t)&v95, v22, v18);
        uint64_t v25 = *v19;
        p_p = (void **)MEMORY[0x1E4F143A8];
        uint64_t v87 = 1174405120;
        v88 = sub_19E0E3B40;
        uint64_t v89 = &unk_1EF09EAA8;
        v91 = v19;
        *(void *)unint64_t v92 = v22;
        if ((unsigned __int16)v95 >= 0xFuLL)
        {
          *(_WORD *)&v92[8] = v95;
          operator new[]();
        }
        *(_OWORD *)&v92[8] = v95;
        uint64_t v90 = v51;
        sub_19E087E54(v25 + 16, (uint64_t)&p_p);
        if (*(unsigned __int16 *)&v92[8] >= 0xFu && *(void *)&v92[16]) {
          MEMORY[0x19F3BA6E0](*(void *)&v92[16], 0x1000C8077774924);
        }
        if ((unsigned __int16)v95 >= 0xFu && *((void *)&v95 + 1)) {
          MEMORY[0x19F3BA6E0](*((void *)&v95 + 1), 0x1000C8077774924);
        }
        v19 += 7;
      }
      while (v19 != v20);
      uint64_t v2 = v40;
      if (v61[5] == v61[6])
      {
LABEL_48:
        buf[0] = 0;
        char v76 = 0;
      }
      else
      {
        sub_19E0B2328((uint64_t)&v95, v79, v18);
        double v26 = v77[10]((void **)&v77);
        double v27 = v57[3];
        unint64_t v28 = v61;
        p_p = (void **)&unk_1EF099DE8;
        uint64_t v87 = v78;
        LODWORD(v88) = 0x100000;
        WORD2(v88) = 0;
        BYTE6(v88) = 0;
        uint64_t v89 = 0;
        sub_19E03CED8((uint64_t)&v88, (unsigned __int16 *)&v95);
        *(_OWORD *)unint64_t v92 = *(_OWORD *)(v28 + 5);
        *(void *)&v92[16] = v28[7];
        v28[5] = 0;
        v28[6] = 0;
        v28[7] = 0;
        double v93 = v27;
        double v94 = v26 + v27;
        sub_19E0E0FF0((uint64_t)buf, (uint64_t)&p_p);
        char v76 = 1;
        p_p = (void **)&unk_1EF099DE8;
        uint8x8_t v66 = (void **)v92;
        sub_19E0E0DCC(&v66);
        if (v89 && BYTE6(v88) == 1) {
          free(v89);
        }
        if (*((void *)&v95 + 1) && BYTE6(v95) == 1) {
          free(*((void **)&v95 + 1));
        }
      }
      _Block_object_dispose(&v56, 8);
      _Block_object_dispose(&v60, 8);
      p_p = (void **)v65;
      sub_19E0E0DCC(&p_p);
      if (v85 == v76)
      {
        if (v85)
        {
          uint64_t v78 = *(void *)&buf[8];
          sub_19E03CED8((uint64_t)v79, (unsigned __int16 *)&buf[16]);
          uint64_t v29 = __p;
          if ((void)__p)
          {
            uint64_t v30 = *((void *)&__p + 1);
            uint64_t v31 = (void *)__p;
            if (*((void *)&__p + 1) != (void)__p)
            {
              do
              {
                v30 -= 56;
                sub_19E0E0F9C(v30);
              }
              while (v30 != v29);
              uint64_t v31 = (void *)__p;
            }
            *((void *)&__p + 1) = v29;
            operator delete(v31);
          }
          long long __p = v73;
          float v83 = v74;
          uint64_t v74 = 0;
          long long v73 = 0uLL;
          long long v84 = v75;
        }
      }
      else if (v85)
      {
        int v77 = (double (**)(void **))&unk_1EF099DE8;
        p_p = (void **)&__p;
        sub_19E0E0DCC(&p_p);
        if (v81 && v80 == 1) {
          free(v81);
        }
        char v85 = 0;
      }
      else
      {
        sub_19E0E0FF0((uint64_t)&v77, (uint64_t)buf);
        char v85 = 1;
      }
      sub_19E0E2854((uint64_t)buf);
      if (!v85)
      {
        if (v41 >= 0xFu && v42) {
          MEMORY[0x19F3BA6E0](v42, 0x1000C8077774924);
        }
        break;
      }
      if (v41 >= 0xFu)
      {
        if (v42) {
          MEMORY[0x19F3BA6E0](v42, 0x1000C8077774924);
        }
      }
    }
    sub_19E03E768(&v47);
  }
  if (qword_1E94577E0 != -1) {
    dispatch_once(&qword_1E94577E0, &unk_1EF09EA28);
  }
  uint64_t v32 = qword_1E94577D8;
  if (os_log_type_enabled((os_log_t)qword_1E94577D8, OS_LOG_TYPE_DEBUG))
  {
    if (v85) {
      char v35 = "success";
    }
    else {
      char v35 = "fail";
    }
    uint64_t v36 = *(void *)(v2 + 24);
    uint64_t v37 = (unsigned __int16 *)*((void *)a2 + 1);
    if (!v36) {
      uint64_t v36 = v2 + 32;
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v35;
    unint64_t v38 = a2 + 8;
    if (v37) {
      unint64_t v38 = v37;
    }
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v36;
    __int16 v71 = 2080;
    int64_t v72 = v38;
    _os_log_debug_impl(&dword_19E038000, v32, OS_LOG_TYPE_DEBUG, "create_child (%s): \"%s\" + \"%s\"", buf, 0x20u);
  }
  if (v85) {
    uint64_t v33 = sub_19E0E0D4C((uint64_t)&v77);
  }
  else {
    uint64_t v33 = 0;
  }
  sub_19E0E2854((uint64_t)&v77);
  return v33;
}

void sub_19E0E2710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_19E0E2854((uint64_t)&a68);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0E2854(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    *(void *)a1 = &unk_1EF099DE8;
    uint64_t v4 = (void **)(a1 + 48);
    sub_19E0E0DCC(&v4);
    uint64_t v2 = *(void **)(a1 + 24);
    if (v2)
    {
      if (*(unsigned char *)(a1 + 22) == 1) {
        free(v2);
      }
    }
  }
  return a1;
}

__n128 sub_19E0E28CC(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_19E0E28F0(uint64_t a1)
{
  int v1 = (void **)(a1 + 40);
  sub_19E0E0DCC(&v1);
}

uint64_t sub_19E0E291C(uint64_t a1, long long *a2, double a3)
{
  uint64_t result = sub_19E0E1118((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  double v7 = *(double *)(v6 + 24);
  if (v7 < a3) {
    double v7 = a3;
  }
  *(double *)(v6 + 24) = v7;
  return result;
}

void sub_19E0E2970(uint64_t a1)
{
  *(void *)a1 = &unk_1EF099DE8;
  uint64_t v3 = (void **)(a1 + 48);
  sub_19E0E0DCC(&v3);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 && *(unsigned char *)(a1 + 22) == 1) {
    free(v2);
  }

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0E2A00(uint64_t *a1, void *a2, unint64_t a3)
{
  if (a3 >= 0xF)
  {
    if (*a2 == 0x2065766F6C206557 && *(void *)((char *)a2 + 7) == 0x2E61736972614D20)
    {
      sub_19E0421E0(a1 + 2, (uint64_t)a2, a3);
      return 1;
    }
  }
  else if (a3 < 4)
  {
    return 0;
  }
  double v7 = (char *)a2 + 4;
  uint64_t v8 = *(unsigned int *)a2;
  sub_19E0421E0(a1 + 2, (uint64_t)a2 + 4, v8);
  a1[3] = (uint64_t)&v7[v8];
  a1[4] = (a3 - v8 - 4) >> 2;
  return 1;
}

os_log_t sub_19E0E2ABC()
{
  os_log_t result = os_log_create("com.apple.Lexicon", "POSHistoryTrie");
  qword_1E94577E8 = (uint64_t)result;
  return result;
}

void sub_19E0E2AEC(uint64_t a1, uint64_t a2, void *a3, __int16 a4)
{
  __int16 v10 = a4;
  if (*a3 == 0xFFFFFFFFLL)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    sub_19E042718((uint64_t *)(a2 + 32), (uint64_t)&v10, 2uLL, (uint64_t)a3, &v7);
    if (v7 == 0xFFFFFFFFLL)
    {
      char v5 = 0;
      *(unsigned char *)a1 = 0;
    }
    else
    {
      *(void *)a1 = v7;
      uint64_t v6 = (unsigned char *)(a1 + 8);
      if (SHIBYTE(v9) < 0)
      {
        sub_19E03FA9C(v6, (void *)__p, *((unint64_t *)&__p + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v6 = __p;
        *(void *)(a1 + 24) = v9;
      }
      char v5 = 1;
    }
    *(unsigned char *)(a1 + 32) = v5;
    if (SHIBYTE(v9) < 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_19E0E2BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E2BD4(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 112))(a1)) {
    return 0;
  }
  unint64_t v8 = 0;
  uint64_t v6 = sub_19E04245C(a1 + 2, a2, (uint64_t *)&v8);
  if (v6) {
    *a3 = sub_19E0E2C6C((uint64_t)a1, v8);
  }
  return v6;
}

unint64_t sub_19E0E2C6C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (v2 <= a2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_19E062A78(exception, "Marisa Payload");
      __cxa_throw(exception, (struct type_info *)off_1E599B428, MEMORY[0x1E4FBA1D0]);
    }
    return *(unsigned int *)(*(void *)(a1 + 24) + 4 * a2);
  }
  return a2;
}

void sub_19E0E2CDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E0E2CF0(uint64_t a1, void *a2, uint64_t a3)
{
  uint8_t v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a3;
  sub_19E0E2AEC((uint64_t)v4, a1, a2, 0);
  if (v7)
  {
    v9[0] = &unk_1EF09A9B0;
    v9[1] = &v8;
    v9[3] = v9;
    sub_19E0E2DF8((unint64_t *)(a1 + 16), (uint64_t)v4, (uint64_t)v9, 0xFFFFFFFFLL);
    sub_19E0E2EDC(v9);
    if (v7)
    {
      if (v6 < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_19E0E2DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

void *sub_19E0E2DF8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint8_t v9[4] = *MEMORY[0x1E4F143B8];
  os_log_t result = (void *)(*(uint64_t (**)(unint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    v9[0] = &unk_1EF09A4E0;
    v9[1] = a1;
    v9[2] = a3;
    v9[3] = v9;
    sub_19E0427A4(a1 + 2, a2, (uint64_t)v9, a4);
    return sub_19E0B43E4(v9);
  }
  return result;
}

void sub_19E0E2EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0E2EDC(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E0E2F60()
{
  return &unk_1EF099708;
}

uint64_t sub_19E0E2F6C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF099708)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0E2FAC(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = (unint64_t)a3[1] >> 1;
  int v8 = sub_19E0E2C6C(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);

  return sub_19E0E3014(v9, v8, v6, v7, a4);
}

uint64_t sub_19E0E3014(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[0] = a3;
  v7[1] = a4;
  int v6 = a2;
  if (!a1) {
    sub_19E0483E0();
  }
  return (*(uint64_t (**)(uint64_t, int *, void *, uint64_t))(*(void *)a1 + 48))(a1, &v6, v7, a5);
}

__n128 sub_19E0E3078(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF09A4E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0E30A0(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1EF09A4E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0E30EC()
{
}

void *sub_19E0E3104()
{
  return &unk_1EF0997E8;
}

uint64_t sub_19E0E3110(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0997E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0E3150(uint64_t result, uint64_t a2, int **a3, unsigned char *a4)
{
  int v6 = *a3;
  unint64_t v5 = (unint64_t)a3[1];
  char v11 = 0;
  if (v5 >= 2)
  {
    uint64_t v7 = result;
    int v8 = &v6[v5 >> 1];
    while (1)
    {
      int v9 = *v6;
      if (*v6 < 0)
      {
        __n128 result = (*(uint64_t (**)(void))(**(void **)(v7 + 8) + 16))();
        if (v11) {
          break;
        }
      }
      if ((v9 & 0x40000000) != 0)
      {
        __n128 result = (*(uint64_t (**)(void))(**(void **)(v7 + 8) + 16))();
        ++v6;
        if (v11) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = v6 == v8;
        }
        if (v10) {
          break;
        }
      }
      else if (++v6 == v8)
      {
        break;
      }
    }
  }
  *a4 = 1;
  return result;
}

uint64_t sub_19E0E3230(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A9B0;
  a2[1] = v2;
  return result;
}

void *sub_19E0E3254(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A9B0;
  result[1] = v3;
  return result;
}

void sub_19E0E329C()
{
}

uint64_t sub_19E0E32B4(uint64_t a1, CFTypeRef cf)
{
  *(void *)a1 = CFRetain(cf);
  uint64_t v3 = (char *)operator new(0x80uLL);
  *(_OWORD *)(v3 + 8) = 0u;
  *(void *)uint64_t v3 = &unk_1EF09AAD0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *((void *)v3 + 13) = 0;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_WORD *)v3 + 13) = 16;
  v3[30] = 0;
  v3[40] = 0;
  *(void *)(v3 + 61) = 0;
  *((void *)v3 + 7) = 0;
  *(_OWORD *)(v3 + 72) = 0u;
  *((void *)v3 + 11) = 0xFFFFFFFFLL;
  *((_DWORD *)v3 + 25) = 0;
  *((_OWORD *)v3 + 7) = 0u;
  *(void *)&long long v4 = v3 + 24;
  *((void *)&v4 + 1) = v3;
  *(_OWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

uint64_t sub_19E0E336C(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = CFRetain(cf);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a1 + 24) = *(void *)a4;
  uint64_t v7 = (unsigned char *)(a1 + 32);
  if (*(char *)(a4 + 31) < 0)
  {
    sub_19E03FA9C(v7, *(void **)(a4 + 8), *(void *)(a4 + 16));
  }
  else
  {
    long long v8 = *(_OWORD *)(a4 + 8);
    *(void *)(a1 + 48) = *(void *)(a4 + 24);
    *(_OWORD *)uint64_t v7 = v8;
  }
  return a1;
}

void sub_19E0E33F0(void *a1, uint64_t a2, unsigned char *a3)
{
  sub_19E0E2AEC((uint64_t)v7, a1[6] + 30800, (void *)(a1[5] + 24), *(_WORD *)(a2 + 76));
  if (v9) {
    BOOL v5 = v7[0] == 0xFFFFFFFFLL;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    char v6 = 0;
  }
  else {
    char v6 = sub_19E0E2BD4((uint64_t *)(a1[6] + 30816), (uint64_t)v7, &v10);
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v6;
  *a3 = v6;
  if (v9)
  {
    if (v8 < 0) {
      operator delete((void *)v7[1]);
    }
  }
}

void sub_19E0E349C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a16)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E34C0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_19E060D8C(*(void *)(a1 + 40) + 30264, *(unsigned __int16 *)(a2 + 78), 0);
  double v4 = (double)(int)result / -800.0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(double *)(v5 + 24) >= v4) {
    double v4 = *(double *)(v5 + 24);
  }
  *(double *)(v5 + 24) = v4;
  return result;
}

void sub_19E0E3520(void *a1, uint64_t a2, unsigned char *a3)
{
  sub_19E0E2AEC((uint64_t)v6, a1[6] + 30800, (void *)(a1[5] + 24), *(_WORD *)(a2 + 76));
  char v5 = v9;
  *a3 = v9;
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v5;
  if (v9)
  {
    if (v8 < 0) {
      operator delete(__p);
    }
  }
}

void sub_19E0E3598(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  char v5 = a2 + 2;
  (*(void (**)(void *))(a2[2] + 120))(a2 + 2);
  double v6 = (*(double (**)(void *))(*v5 + 72))(v5);
  uint64_t v7 = *(std::__shared_weak_count **)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 8);
  char v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_19E0E336C((uint64_t)cf, a2, (uint64_t)&v8, v4 + 24);
  if (v9) {
    sub_19E0616BC(v9);
  }
  (*(void (**)(double))(*(void *)(a1 + 32) + 16))(v6);
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v11) {
    sub_19E0616BC(v11);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

void sub_19E0E36BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E0E3AF4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E0E36D0(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[5];
  sub_19E0E2AEC((uint64_t)v16, a1[6] + 30800, v4 + 3, *(_WORD *)(a2 + 76));
  if (v18)
  {
    uint64_t v5 = v4[1];
    double v6 = (std::__shared_weak_count *)v4[2];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_19E0E4980(&v15, a2, v5, (uint64_t)v6);
    if (v6) {
      sub_19E0616BC(v6);
    }
    uint64_t v7 = a1[6];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1174405120;
    v9[2] = sub_19E0E3890;
    v9[3] = &unk_1EF098D48;
    uint64_t v8 = (std::__shared_weak_count *)v15.n128_u64[1];
    void v9[5] = v7;
    __n128 v10 = v15;
    if (v15.n128_u64[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
    }
    sub_19E0E3998((uint64_t)&v11, (uint64_t)v16);
    uint8_t v9[4] = a1[4];
    sub_19E0E2CF0(v7 + 30800, v16, (uint64_t)v9);
    if (v14 && v13 < 0) {
      operator delete(__p);
    }
    if (v10.n128_u64[1]) {
      sub_19E0616BC((std::__shared_weak_count *)v10.n128_u64[1]);
    }
    if (v8) {
      sub_19E0616BC(v8);
    }
    if (v18)
    {
      if (v17 < 0) {
        operator delete((void *)v16[1]);
      }
    }
  }
}

void sub_19E0E382C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a24 && a23 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_19E0616BC(a16);
  }
  if (v24) {
    sub_19E0616BC(v24);
  }
  if (*(unsigned char *)(v25 - 40))
  {
    if (*(char *)(v25 - 41) < 0) {
      operator delete(*(void **)(v25 - 64));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0E3890(void *a1, unsigned int a2, int a3)
{
  uint64_t v4 = sub_19E0EB754(a1[5], a2, a3);
  if (v4)
  {
    uint64_t v5 = (const void *)v4;
    double v6 = (*(double (**)(void))(*(void *)(v4 + 16) + 72))();
    uint64_t v7 = (std::__shared_weak_count *)a1[7];
    uint64_t v8 = a1[6];
    char v9 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_19E0E336C((uint64_t)cf, v5, (uint64_t)&v8, (uint64_t)(a1 + 8));
    if (v9) {
      sub_19E0616BC(v9);
    }
    (*(void (**)(double))(a1[4] + 16))(v6);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v11) {
      sub_19E0616BC(v11);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
}

void sub_19E0E3984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E0E3AF4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0E3998(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    *(void *)a1 = *(void *)a2;
    if (*(char *)(a2 + 31) < 0)
    {
      sub_19E03FA9C((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
    }
    else
    {
      long long v3 = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = v3;
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

void sub_19E0E3A18(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32))
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0E3A3C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96) && *(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    sub_19E0616BC(v2);
  }
}

uint64_t sub_19E0E3A98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return sub_19E0E3998(a1 + 64, a2 + 64);
}

void sub_19E0E3ADC(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 56);
  if (v3) {
    sub_19E0616BC(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E3AF4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_19E0616BC(v2);
  }
  sub_19E062044((const void **)a1, 0);
  return a1;
}

void sub_19E0E3B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 40);
  sub_19E0E2AEC((uint64_t)v18, *(void *)(a1 + 48) + 30800, v4 + 3, *(_WORD *)(a2 + 76));
  if (v20)
  {
    uint64_t v5 = v4[1];
    double v6 = (std::__shared_weak_count *)v4[2];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_19E0E4980(&v17, a2, v5, (uint64_t)v6);
    if (v6) {
      sub_19E0616BC(v6);
    }
    unint64_t v7 = *(unsigned __int16 *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 48);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    v10[2] = sub_19E0E3E50;
    v10[3] = &unk_1EF09EA70;
    v10[5] = v8;
    if (v7 >= 0xF)
    {
      LOWORD(__n) = v7;
      operator new[]();
    }
    long long __n = *(_OWORD *)(a1 + 56);
    char v9 = (std::__shared_weak_count *)v17.n128_u64[1];
    __n128 v12 = v17;
    if (v17.n128_u64[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
    }
    sub_19E0E3998((uint64_t)&v13, (uint64_t)v18);
    uint8_t v10[4] = *(void *)(a1 + 32);
    sub_19E0E2CF0(v8 + 30800, v18, (uint64_t)v10);
    if (v16 && v15 < 0) {
      operator delete(__p);
    }
    if (v12.n128_u64[1]) {
      sub_19E0616BC((std::__shared_weak_count *)v12.n128_u64[1]);
    }
    if ((unsigned __int16)__n >= 0xFu && *((void *)&__n + 1)) {
      MEMORY[0x19F3BA6E0](*((void *)&__n + 1), 0x1000C8077774924);
    }
    if (v9) {
      sub_19E0616BC(v9);
    }
    if (v20)
    {
      if (v19 < 0) {
        operator delete((void *)v18[1]);
      }
    }
  }
}

void sub_19E0E3D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (*(void *)(v26 - 80)) {
    sub_19E0616BC(*(std::__shared_weak_count **)(v26 - 80));
  }
  if (*(unsigned char *)(v26 - 40))
  {
    if (*(char *)(v26 - 41) < 0) {
      operator delete(*(void **)(v26 - 64));
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E3DA4(uint64_t result)
{
  if (*(unsigned __int16 *)(result + 56) >= 0xFu)
  {
    uint64_t result = *(void *)(result + 64);
    if (result) {
      JUMPOUT(0x19F3BA6E0);
    }
  }
  return result;
}

__n128 sub_19E0E3DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (__n128 *)(a2 + 56);
  unint64_t v3 = *(unsigned __int16 *)(a2 + 56);
  if (v3 >= 0xF)
  {
    *(_WORD *)(a1 + 56) = v3;
    operator new[]();
  }
  __n128 result = *v4;
  *(__n128 *)(a1 + 56) = *v4;
  return result;
}

void sub_19E0E3E50(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v4 = a2;
  sub_19E0EB6AC((uint64_t)&cf, *(void *)(a1 + 40), a2);
  BOOL v6 = sub_19E0A7134((unsigned __int16 *)&cf, (unsigned __int16 *)(a1 + 48));
  if ((unsigned __int16)cf >= 0xFu && v13) {
    MEMORY[0x19F3BA6E0](v13, 0x1000C8077774924);
  }
  if (v6)
  {
    unint64_t v7 = (void *)sub_19E0EB754(*(void *)(a1 + 40), v4, a3);
    if (v7)
    {
      uint64_t v8 = v7;
      char v9 = *(std::__shared_weak_count **)(a1 + 72);
      uint64_t v10 = *(void *)(a1 + 64);
      uint64_t v11 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_19E0E336C((uint64_t)&cf, v7, (uint64_t)&v10, a1 + 80);
      if (v11) {
        sub_19E0616BC(v11);
      }
      (*(void (**)(void *))(v8[2] + 72))(v8 + 2);
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      if (v16 < 0) {
        operator delete(__p);
      }
      if (v14) {
        sub_19E0616BC(v14);
      }
      if (cf) {
        CFRelease(cf);
      }
    }
  }
}

void sub_19E0E3F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E0E3AF4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E0E3FA0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    sub_19E0616BC(v2);
  }
  if (*(unsigned __int16 *)(a1 + 48) >= 0xFu && *(void *)(a1 + 56))
  {
    JUMPOUT(0x19F3BA6E0);
  }
}

uint64_t sub_19E0E4024(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned __int16 *)(a2 + 48);
  if (v3 >= 0xF)
  {
    *(_WORD *)(a1 + 48) = v3;
    operator new[]();
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return sub_19E0E3998(a1 + 80, a2 + 80);
}

void sub_19E0E40BC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 72);
  if (v4) {
    sub_19E0616BC(v4);
  }
  if (*v2 >= 0xFu)
  {
    uint64_t v5 = *(void *)(v1 + 56);
    if (v5) {
      MEMORY[0x19F3BA6E0](v5, 0x1000C8077774924);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0E40FC(void *a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)a1[5];
  sub_19E0E2AEC((uint64_t)v29, a1[6] + 30800, v4 + 3, *(_WORD *)(a2 + 76));
  if (v31)
  {
    if (v29[0] != 0xFFFFFFFFLL && (sub_19E0E2BD4((uint64_t *)(a1[6] + 30816), (uint64_t)v29, v32) & 1) != 0)
    {
      uint64_t v5 = v4[1];
      BOOL v6 = (std::__shared_weak_count *)v4[2];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_19E0E4980(&v28, a2, v5, (uint64_t)v6);
      if (v6) {
        sub_19E0616BC(v6);
      }
      uint64_t v7 = v28.n128_u64[0];
      uint64_t v8 = a1[6];
      uint64_t v10 = (uint64_t *)(v28.n128_u64[0] + 88);
      uint64_t v9 = *(void *)(v28.n128_u64[0] + 88);
      if (v9)
      {
        unsigned int v11 = 0;
        double v12 = 0.0;
        unint64_t v13 = v28.n128_u64[0];
        do
        {
          int v14 = sub_19E060D8C(v8 + 30264, *(unsigned __int16 *)(v13 + 76), HIWORD(v11));
          uint64_t v16 = *(void *)(v13 + 88);
          if (!v16) {
            __assert_rtn("word", "MorphemeLevelLexiconUtils.cpp", 36, "!is_empty()");
          }
          LOWORD(v15) = *(_WORD *)(v13 + 80);
          double v12 = v12 + (double)v14 + (double)v15;
          int v17 = *(_DWORD *)(v13 + 76);
          unsigned int v11 = v17 & 0xFFFF0000;
          unint64_t v13 = *(void *)(v13 + 88);
        }
        while (*(void *)(v16 + 88));
        LODWORD(v9) = v17 >> 16;
      }
      else
      {
        double v12 = 0.0;
      }
      int v18 = sub_19E060D8C(v8 + 30264, 0, (unsigned __int16)v9);
      int v38 = 0x100000;
      __int16 v39 = 0;
      char v40 = 0;
      unsigned __int16 v41 = 0;
      char v42 = 0;
      v32[0] = &v38;
      sub_19E0E4B38((unsigned __int16 **)v32, (uint64_t)&v38, v7);
      if (*v10)
      {
        while (1)
        {
          BOOL v19 = sub_19E0E4A50(v7);
          uint64_t v20 = *v10;
          if (!v19) {
            break;
          }
          uint64_t v10 = (uint64_t *)(v20 + 88);
          uint64_t v7 = v20;
          if (!*(void *)(v20 + 88)) {
            goto LABEL_17;
          }
        }
        if (!v20) {
          __assert_rtn("word", "MorphemeLevelLexiconUtils.cpp", 36, "!is_empty()");
        }
        sub_19E039858((uint64_t)v32, (unsigned __int16 *)v7);
        long long v21 = *(_OWORD *)(v7 + 32);
        long long v22 = *(_OWORD *)(v7 + 48);
        long long v23 = *(_OWORD *)(v7 + 64);
        LOWORD(v37) = *(_WORD *)(v7 + 80);
        long long v35 = v22;
        long long v36 = v23;
        long long v34 = v21;
      }
      else
      {
LABEL_17:
        *(_OWORD *)uint64_t v32 = 0u;
        long long v33 = 0u;
        HIDWORD(v34) = 0;
        uint64_t v37 = 0;
        WORD1(v32[0]) = 16;
        BYTE6(v32[0]) = 0;
        *(void *)&long long v34 = 0;
        *(void *)((char *)&v34 + 5) = 0;
        long long v35 = 0uLL;
        long long v36 = 0xFFFFFFFFuLL;
      }
      sub_19E03CD54((uint64_t)v32, (unsigned __int16 *)&v38);
      LODWORD(v34) = 1065353216;
      if (qword_1EB4FED88 != -1) {
        dispatch_once(&qword_1EB4FED88, &unk_1EF09EAD8);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      sub_19E039858(Instance + 16, (unsigned __int16 *)v32);
      __int16 v25 = v37;
      long long v27 = v35;
      long long v26 = v36;
      *(_OWORD *)(Instance + 48) = v34;
      *(_OWORD *)(Instance + 64) = v27;
      *(_OWORD *)(Instance + 80) = v26;
      *(_WORD *)(Instance + 96) = v25;
      *(double *)(Instance + 104) = (v12 + (double)v18) / -800.0 / 2.30258509;
      *(void *)(Instance + 112) = 0;
      *(_DWORD *)(Instance + 120) = 0;
      (*(void (**)(void))(a1[4] + 16))(a1[4]);
      CFRelease((CFTypeRef)Instance);
      if (v32[1] && BYTE6(v32[0]) == 1) {
        free(v32[1]);
      }
      if (v41 && v40 == 1) {
        free(v41);
      }
      if (v28.n128_u64[1]) {
        sub_19E0616BC((std::__shared_weak_count *)v28.n128_u64[1]);
      }
    }
    if (v31)
    {
      if (v30 < 0) {
        operator delete((void *)v29[1]);
      }
    }
  }
}

void sub_19E0E44D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a2) {
    sub_19E04137C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E45A8()
{
  qword_1EB4FED90 = 0;
  *(void *)algn_1EB4FED98 = "LXEntry";
  qword_1EB4FEDA0 = 0;
  unk_1EB4FEDA8 = 0;
  qword_1EB4FEDB0 = (uint64_t)sub_19E088418;
  unk_1EB4FEDB8 = 0u;
  unk_1EB4FEDC8 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB4FEDF0 = result;
  return result;
}

uint64_t sub_19E0E45FC()
{
  return 1;
}

void sub_19E0E4608(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);

  std::mutex::unlock(v4);
}

void sub_19E0E4680(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0E4694(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19E0E4708(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0E471C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19E0E4790(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E0E47A4(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09CA58;
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0E4838(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09CA58;
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_19E0E48B0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2) {
    sub_19E0616BC(v2);
  }
  unint64_t v3 = *(void **)(a1 + 32);
  if (v3 && *(unsigned char *)(a1 + 30) == 1)
  {
    free(v3);
  }
}

void sub_19E0E490C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF09AAD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0E4960(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF09AAD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 sub_19E0E4980(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (char *)operator new(0x80uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1EF09AAD0;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = sub_19E039858((uint64_t)(v8 + 24), (unsigned __int16 *)a2);
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 72) = v10;
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(a2 + 64);
  *((_WORD *)v8 + 52) = *(_WORD *)(a2 + 80);
  *((void *)v8 + 14) = a3;
  *((void *)v8 + 15) = a4;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a1 = result;
  return result;
}

void sub_19E0E4A2C(_Unwind_Exception *a1)
{
  if (v2) {
    sub_19E0616BC(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

BOOL sub_19E0E4A50(uint64_t a1)
{
  v10[2] = *MEMORY[0x1E4F143B8];
  LODWORD(__n) = 0x100000;
  WORD2(__n) = 0;
  BYTE6(__n) = 1;
  uint64_t v9 = 0;
  sub_19E03F6F8(&__n, (uint64_t)"+", 0, 1u);
  if (*(void *)(a1 + 8)) {
    uint64_t v2 = *(const char **)(a1 + 8);
  }
  else {
    uint64_t v2 = (const char *)(a1 + 16);
  }
  unint64_t v3 = v9;
  if (v9) {
    uint64_t v4 = (const char *)v9;
  }
  else {
    uint64_t v4 = (const char *)v10;
  }
  int v5 = strncmp(v2, v4, (unsigned __int16)__n);
  if (v3) {
    BOOL v6 = BYTE6(__n) == 1;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    free(v3);
  }
  return v5 == 0;
}

void sub_19E0E4B38(unsigned __int16 **a1, uint64_t a2, uint64_t a3)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a2;
  if (!*(void *)(a3 + 88)) {
    return;
  }
  sub_19E0E4B38(&v17);
  if (!*(void *)(a3 + 88)) {
    __assert_rtn("word", "MorphemeLevelLexiconUtils.cpp", 36, "!is_empty()");
  }
  uint64_t v5 = sub_19E039858((uint64_t)v28, (unsigned __int16 *)a3);
  BOOL v6 = *a1;
  if (sub_19E0E4A50(v5))
  {
    if (v30) {
      uint64_t v7 = v30;
    }
    else {
      uint64_t v7 = v31;
    }
    *(void *)&long long v22 = v7;
    int v8 = v28[0];
    DWORD2(v22) = 0;
    HIDWORD(v22) = v28[0];
    LODWORD(v23) = 0;
    sub_19E03E768((uint64_t *)&v22);
    long long v24 = v22;
    uint64_t v25 = v23;
    sub_19E03E768((uint64_t *)&v24);
    int v18 = v7;
    int v19 = v8;
    int v20 = v8;
    unsigned int v21 = 0;
    sub_19E03E768((uint64_t *)&v18);
    LODWORD(v26) = 0x100000;
    WORD2(v26) = 0;
    BYTE6(v26) = 1;
    long long v27 = 0;
    if ((void *)v24 == v18)
    {
      if (SDWORD2(v24) <= v19)
      {
        unsigned int v9 = HIDWORD(v24);
        if (SDWORD2(v24) <= SHIDWORD(v24))
        {
          if (v25 >= 0x80)
          {
            if (v25 >= 0x800)
            {
              if (v25 >> 11 >= 0x1B)
              {
                if ((v25 - 1114112) >= 0xFFEFE000)
                {
                  if (v25 >= 0x10000) {
                    int v10 = -4;
                  }
                  else {
                    int v10 = -3;
                  }
                }
                else
                {
                  int v10 = 0;
                }
              }
              else
              {
                int v10 = -3;
              }
            }
            else
            {
              int v10 = -2;
            }
          }
          else
          {
            int v10 = -1;
          }
          unsigned int v9 = v10 + DWORD2(v24);
        }
        __int16 v11 = v20;
        if (v19 <= v20)
        {
          if (v21 >= 0x80)
          {
            if (v21 >= 0x800)
            {
              if (v21 >> 11 >= 0x1B)
              {
                if (v21 - 1114112 >= 0xFFEFE000)
                {
                  if (v21 >= 0x10000) {
                    __int16 v12 = -4;
                  }
                  else {
                    __int16 v12 = -3;
                  }
                }
                else
                {
                  __int16 v12 = 0;
                }
              }
              else
              {
                __int16 v12 = -3;
              }
            }
            else
            {
              __int16 v12 = -2;
            }
          }
          else
          {
            __int16 v12 = -1;
          }
          __int16 v11 = v12 + v19;
        }
        sub_19E03F6F8(&v26, v24 + v9, 0, (unsigned __int16)(v11 - v9));
        goto LABEL_37;
      }
      unint64_t v13 = "begin <= end";
      int v14 = 118;
      unint64_t v15 = "TIString.cpp";
      uint64_t v16 = "String";
    }
    else
    {
      unint64_t v13 = "p==rhs.p";
      int v14 = 196;
      unint64_t v15 = "TIString.h";
      uint64_t v16 = "operator<=";
    }
    __assert_rtn(v16, v15, v14, v13);
  }
  sub_19E039858((uint64_t)&v26, v28);
LABEL_37:
  sub_19E0B1EE0(v6, (uint64_t)&v26);
  if (v27 && BYTE6(v26) == 1) {
    free(v27);
  }
  if (v30)
  {
    if (v29 == 1) {
      free(v30);
    }
  }
}

void sub_19E0E4E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,void *a23)
{
  if (a23 && a22 == 1) {
    free(a23);
  }
  uint64_t v25 = *(void **)(v23 - 64);
  if (v25)
  {
    if (*(unsigned char *)(v23 - 66) == 1) {
      free(v25);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E4E50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  if (v2 && (sub_19E0DA1A4(v2) & 1) != 0) {
    return 1;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  if (v3 == -1) {
    goto LABEL_9;
  }
  uint64_t v7 = &v6;
  if (((uint64_t (*)(char **, uint64_t))off_1EF09EFD8[v3])(&v7, a1)) {
    return 1;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 72);
  if (v5 == -1) {
LABEL_9:
  }
    sub_19E07D5D0();
  uint64_t v7 = &v6;
  return ((uint64_t (*)(char **, uint64_t))off_1EF09EFD8[v5])(&v7, a1 + 40);
}

float sub_19E0E4EE8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  *(float *)(a1 + 80) = sub_19E0E501C(a1, a2);
  unint64_t v10 = a1;
  char v11 = a3;
  uint64_t v6 = *(unsigned int *)(a2 + 14352);
  if (v6 == -1
    || (__int16 v12 = &v10,
        ((void (*)(unint64_t **, uint64_t))off_1EF09EEA0[v6])(&v12, a2),
        unint64_t v10 = a1 + 40,
        char v11 = a3,
        uint64_t v7 = *(unsigned int *)(a2 + 28712),
        v7 == -1))
  {
    sub_19E07D5D0();
  }
  __int16 v12 = &v10;
  ((void (*)(unint64_t **, uint64_t))off_1EF09EEA0[v7])(&v12, a2 + 14360);
  if (*(int *)(a1 + 88) >= 1)
  {
    uint64_t v8 = *(void *)(a1 + 96);
    *(_DWORD *)(a1 + 88) = 1;
    ++*(unsigned char *)(a1 + 85);
    if (v8)
    {
      sub_19E0DA108(v8, a2, a3);
      if ((sub_19E0DA1A4(*(void *)(a1 + 96)) & 1) == 0) {
        sub_19E080690((uint64_t *)(a1 + 96), 0);
      }
    }
    sub_19E0E5104(a1, a2, 0);
    sub_19E0E5104(a1, a2, 1);
  }
  *(unsigned char *)(a1 + 84) = a3;
  return sub_19E0E5450(a1, a2);
}

float sub_19E0E501C(uint64_t a1, uint64_t a2)
{
  float v4 = *(float *)(a1 + 80);
  if ((sub_19E0E5530(a1) & 1) == 0 && sub_19E0E5450(a1, a2) > 0.0)
  {
    uint64_t v8 = a1;
    uint64_t v5 = *(unsigned int *)(a2 + 14352);
    if (v5 == -1) {
      sub_19E07D5D0();
    }
    unsigned int v9 = &v8;
    float v6 = ((float (*)(uint64_t **, uint64_t))off_1EF09EC98[v5])(&v9, a2) * *(float *)(a1 + 80);
    float v4 = v6 / sub_19E0E5450(a1, a2);
    if (v4 > 1.0) {
      float v4 = 1.0;
    }
  }
  if ((LODWORD(v4) & 0x7FFFFFFFu) >= 0x7F800000) {
    __assert_rtn("probability_of_baseline", "TIStaticDictionaryImplCursor.cpp", 147, "isfinite(result)");
  }
  return v4;
}

void sub_19E0E5104(unint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v3 = a2 + 14360;
  }
  else {
    uint64_t v3 = a2;
  }
  if (a3) {
    unint64_t v4 = a1 + 40;
  }
  else {
    unint64_t v4 = a1;
  }
  v18.n128_u64[0] = v4;
  uint64_t v5 = *(unsigned int *)(v3 + 14352);
  if (v5 == -1) {
    goto LABEL_26;
  }
  uint64_t v16 = &v18;
  if (!((unsigned int (*)(__n128 **, uint64_t))off_1EF09ED68[v5])(&v16, v3)) {
    return;
  }
  v18.n128_u64[0] = v4;
  uint64_t v8 = *(unsigned int *)(v3 + 14352);
  if (v8 == -1) {
LABEL_26:
  }
    sub_19E07D5D0();
  uint64_t v16 = &v18;
  if (((uint64_t (*)(__n128 **, uint64_t))off_1EF09EDD0[v8])(&v16, v3))
  {
    unsigned int v9 = *(unsigned int **)(a2 + 30120);
    if (!v9) {
      __assert_rtn("add_suffixes", "TIStaticDictionaryImplCursor.cpp", 170, "converter");
    }
    unsigned __int16 v13 = 1;
    char v14 = 32;
    v18.n128_u64[0] = v4;
    v18.n128_u64[1] = (unint64_t)&v13;
    uint64_t v10 = *(unsigned int *)(v3 + 14352);
    if (v10 == -1) {
      sub_19E07D5D0();
    }
    int v19 = &v18;
    ((void (*)(__n128 **__return_ptr, __n128 **, uint64_t))off_1EF09EE38[v10])(&v16, &v19, v3);
    if (v13 >= 0xFu && v15) {
      MEMORY[0x19F3BA6E0](v15, 0x1000C8077774924);
    }
    char v11 = v16;
    for (i = v17; v11 != i; char v11 = (__n128 *)((char *)v11 + 88))
    {
      LODWORD(v19) = 0;
      if (sub_19E0A3620(v9, v11[3].n128_u32[3], &v19, 0))
      {
        sub_19E0A379C(&v18, (uint64_t)v9, (int)v19);
        if (v18.n128_u16[0]) {
          operator new();
        }
      }
      *(_DWORD *)(a1 + 88) = 2;
    }
    v18.n128_u64[0] = (unint64_t)&v16;
    sub_19E07F830((void ***)&v18);
  }
  else
  {
    *(_DWORD *)(a1 + 88) = 2;
  }
}

void sub_19E0E5394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, unsigned __int16 a12, __int16 a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a12 >= 0xFu)
  {
    if (a14) {
      MEMORY[0x19F3BA6E0](a14, 0x1000C8077774924);
    }
  }
  _Unwind_Resume(exception_object);
}

float sub_19E0E5450(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 80);
  uint64_t v13 = a1;
  uint64_t v3 = *(unsigned int *)(a2 + 14352);
  if (v3 == -1
    || (char v14 = &v13,
        ((void (*)(uint64_t **))off_1EF09EC98[v3])(&v14),
        uint64_t v13 = a1 + 40,
        uint64_t v7 = *(unsigned int *)(a2 + 28712),
        v7 == -1))
  {
    sub_19E07D5D0();
  }
  char v14 = &v13;
  float v8 = (float)((float)(1.0 - v2) * ((float (*)(uint64_t **, uint64_t))off_1EF09EC98[v7])(&v14, a2 + 14360))
     + (float)(v2 * v6);
  uint64_t v9 = *(void *)(a1 + 96);
  if (v9)
  {
    float v10 = *(float *)(v9 + 88);
    sub_19E0D88E0(v9, a2);
    return (float)(v10 * v11) + (float)((float)(1.0 - v10) * v8);
  }
  return v8;
}

uint64_t sub_19E0E5530(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 32);
  if (v1 == -1) {
    goto LABEL_11;
  }
  float v10 = &v9;
  if (((unsigned int (*)(char **, uint64_t))off_1EF09EFD8[v1])(&v10, a1))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 72);
    if (v3 == -1) {
      goto LABEL_11;
    }
    float v10 = &v9;
    if (((unsigned int (*)(char **, uint64_t))off_1EF09EFD8[v3])(&v10, a1 + 40))
    {
      uint64_t v4 = *(unsigned int *)(a1 + 32);
      if (v4 != -1)
      {
        float v10 = &v9;
        int v5 = ((uint64_t (*)(char **, uint64_t))off_1EF09F040[v4])(&v10, a1);
        uint64_t v6 = *(unsigned int *)(a1 + 72);
        if (v6 != -1)
        {
          float v10 = &v9;
          if (v5 != ((unsigned int (*)(char **, uint64_t))off_1EF09F040[v6])(&v10, a1 + 40)) {
            __assert_rtn("is_root", "TIStaticDictionaryImplCursor.cpp", 405, "m_baseline_cursor.is_root() == m_delta_cursor.is_root()");
          }
          goto LABEL_8;
        }
      }
LABEL_11:
      sub_19E07D5D0();
    }
  }
LABEL_8:
  uint64_t v7 = *(unsigned int *)(a1 + 32);
  if (v7 == -1) {
    goto LABEL_11;
  }
  float v10 = &v9;
  return ((uint64_t (*)(char **, uint64_t))off_1EF09F040[v7])(&v10, a1);
}

uint64_t sub_19E0E5664(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 9);
}

BOOL sub_19E0E566C(uint64_t a1, void *a2)
{
  return *a2 == 0;
}

BOOL sub_19E0E567C(uint64_t a1, void *a2)
{
  return *a2 == 0;
}

BOOL sub_19E0E568C(uint64_t a1, void *a2)
{
  return *a2 == 0;
}

BOOL sub_19E0E569C(uint64_t a1, void *a2)
{
  return *a2 == 0;
}

BOOL sub_19E0E56AC(uint64_t a1, void *a2)
{
  return *a2 == 0;
}

uint64_t sub_19E0E56BC(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 9);
}

BOOL sub_19E0E56C4(uint64_t a1, void *a2)
{
  return *a2 == 0;
}

BOOL sub_19E0E56D4(uint64_t a1, void *a2)
{
  return *a2 == 0;
}

BOOL sub_19E0E56E4(uint64_t a1, void *a2)
{
  return *a2 == 0;
}

BOOL sub_19E0E56F4(uint64_t a1, void *a2)
{
  return *a2 == 0;
}

BOOL sub_19E0E5704(uint64_t a1, void *a2)
{
  return *a2 == 0;
}

BOOL sub_19E0E5714(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *(_DWORD *)(a2 + 8) == 0;
  }
  return v2 && *(unsigned char *)(a2 + 24) == 0;
}

uint64_t sub_19E0E5740(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 14352);
  if (v2 == -1) {
    sub_19E07D5D0();
  }
  __n128 v18 = &v17;
  ((void (*)(char **))off_1EF09EAF8[v2])(&v18);
  int v5 = (unsigned int *)(a2 + 28712);
  uint64_t v6 = *(unsigned int *)(a2 + 28712);
  if (v6 == -1) {
    sub_19E07D5D0();
  }
  __n128 v18 = &v17;
  ((void (*)(char **, uint64_t))off_1EF09EAF8[v6])(&v18, a2 + 14360);
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  uint64_t v7 = *v5;
  if (v7 == -1) {
    goto LABEL_14;
  }
  __n128 v18 = &v17;
  if (!((unsigned int (*)(char **, uint64_t))off_1EF09EB60[v7])(&v18, a2 + 14360))
  {
    uint64_t v15 = *(unsigned int *)(a1 + 72);
    if (v15 != -1)
    {
      __n128 v18 = &v17;
      ((void (*)(char **, uint64_t))off_1EF09EC30[v15])(&v18, a1 + 40);
      float v14 = 1.0;
      goto LABEL_13;
    }
LABEL_14:
    sub_19E07D5D0();
  }
  uint64_t v8 = *(unsigned int *)(a2 + 14352);
  if (v8 == -1) {
    goto LABEL_14;
  }
  __n128 v18 = &v17;
  ((void (*)(char **, uint64_t))off_1EF09EBC8[v8])(&v18, a2);
  uint64_t v10 = *(unsigned int *)(a2 + 14352);
  if (v10 == -1) {
    goto LABEL_14;
  }
  float v11 = v9;
  __n128 v18 = &v17;
  ((void (*)(char **, uint64_t))off_1EF09EBC8[v10])(&v18, a2);
  uint64_t v13 = *v5;
  if (v13 == -1) {
    goto LABEL_14;
  }
  __n128 v18 = &v17;
  float v14 = v11 / (float)(v12 + ((float (*)(char **, uint64_t))off_1EF09EBC8[v13])(&v18, a2 + 14360));
  if ((LODWORD(v14) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v14 = 1.0;
  }
LABEL_13:
  *(float *)(a1 + 80) = v14;
  sub_19E080690((uint64_t *)(a1 + 96), 0);
  *(_DWORD *)(a1 + 88) = *(void *)(a2 + 30120) != 0;
  *(_WORD *)(a1 + 84) = 0;
  return a1;
}

void sub_19E0E5944(_Unwind_Exception *a1)
{
  sub_19E07FA6C(v1);
  _Unwind_Resume(a1);
}

double sub_19E0E5974(uint64_t a1, _OWORD *a2)
{
  double result = 0.0;
  *a2 = xmmword_19E1240E0;
  return result;
}

void sub_19E0E5984(uint64_t a1, void *a2)
{
  *a2 = -1;
}

void sub_19E0E5990(uint64_t a1, uint64_t a2)
{
}

void sub_19E0E5998(uint64_t a1)
{
  memset(&__p, 0, sizeof(__p));
  *(void *)a1 = 0xFFFFFFFFLL;
  std::string::operator=((std::string *)(a1 + 8), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19E0E59E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0E5A04(uint64_t a1, void *a2)
{
  *a2 = -1;
}

void sub_19E0E5A10(uint64_t a1, void *a2)
{
  *a2 = -1;
}

void sub_19E0E5A1C(uint64_t a1, void *a2)
{
  *a2 = -1;
}

double sub_19E0E5A28(uint64_t a1, _OWORD *a2)
{
  double result = 0.0;
  *a2 = xmmword_19E1240E0;
  return result;
}

void sub_19E0E5A38(uint64_t a1, void *a2)
{
  *a2 = -1;
}

void sub_19E0E5A44(uint64_t a1, uint64_t a2)
{
}

void sub_19E0E5A4C(uint64_t a1, void *a2)
{
  *a2 = -1;
}

void sub_19E0E5A58(uint64_t a1, void *a2)
{
  *a2 = -1;
}

void sub_19E0E5A64(uint64_t a1, void *a2)
{
  *a2 = -1;
}

void sub_19E0E5A70(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(unsigned char *)a2 = -1;
}

float sub_19E0E5A88(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19E0E5A90(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19E0E5A98(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19E0E5AA0(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19E0E5AA8(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19E0E5AB0(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19E0E5AB8(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19E0E5AC0(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19E0E5AC8(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19E0E5AD0(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19E0E5AD8(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19E0E5AE0(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19E0E5AE8(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 12916);
}

uint64_t sub_19E0E5AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_19E1060D0(a1, a2);
  sub_19E1060D0(v4 + 40, a2 + 40);
  int v5 = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  if (*(void *)(a2 + 96)) {
    operator new();
  }
  return a1;
}

void sub_19E0E5BAC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BA710](v4, 0x1032C40198927B0);
  sub_19E080690(v3, 0);
  sub_19E07FA6C(v2);
  sub_19E07FA6C(v1);
  _Unwind_Resume(a1);
}

float sub_19E0E5BFC(uint64_t a1, uint64_t a2)
{
  float v4 = sub_19E0E501C(a1, a2);
  uint64_t v14 = a1;
  uint64_t v5 = *(unsigned int *)(a2 + 14352);
  if (v5 == -1
    || (float v6 = v4,
        uint64_t v15 = &v14,
        ((void (*)(uint64_t **, uint64_t))off_1EF09ED00[v5])(&v15, a2),
        uint64_t v14 = a1 + 40,
        uint64_t v8 = *(unsigned int *)(a2 + 28712),
        v8 == -1))
  {
    sub_19E07D5D0();
  }
  uint64_t v15 = &v14;
  float v9 = (float)((float)(1.0 - v6) * ((float (*)(uint64_t **, uint64_t))off_1EF09ED00[v8])(&v15, a2 + 14360))
     + (float)(v6 * v7);
  uint64_t v10 = *(void *)(a1 + 96);
  if (v10)
  {
    float v11 = *(float *)(v10 + 88);
    sub_19E0D8D04(v10, a2);
    return (float)(v11 * v12) + (float)((float)(1.0 - v11) * v9);
  }
  return v9;
}

void sub_19E0E5CE4(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = (uint64_t)a1;
  unsigned __int8 v76 = 0;
  if (a1[22] < 1)
  {
    std::string __p = a1;
    uint64_t v49 = *(unsigned int *)(a2 + 14352);
    if (v49 == -1) {
LABEL_138:
    }
      sub_19E07D5D0();
    p_p = &__p;
    ((void (*)(void ****__return_ptr, void ***, uint64_t))off_1EF09EF08[v49])(&p_p_p, &p_p, a2);
    uint64_t v79 = v5 + 40;
    uint64_t v50 = *(unsigned int *)(v4 + 28712);
    if (v50 == -1) {
      sub_19E07D5D0();
    }
    v80[0] = (void **)&v79;
    ((void (*)(void **__return_ptr, void ***, uint64_t))off_1EF09EF08[v50])(&__p, v80, v4 + 14360);
    float v51 = sub_19E0E501C(v5, v4);
    uint64_t v52 = (void **)p_p_p;
    uint64_t v53 = (unsigned __int8 *)__p;
    while (1)
    {
      if (v52 == v78 && v53 == v74)
      {
LABEL_122:
        p_p = &__p;
        sub_19E0DA800(&p_p);
        p_p = (void **)&p_p_p;
        sub_19E0DA800(&p_p);
        return;
      }
      if (v52 == v78)
      {
        if (v53 == v74) {
          __assert_rtn("children", "TIStaticDictionaryImplCursor.cpp", 284, "baseline_byte < 0x100 || delta_byte < 0x100");
        }
        unsigned int v55 = 256;
      }
      else
      {
        unsigned int v55 = *(unsigned __int8 *)v52;
        if (v53 == v74)
        {
          unsigned int v56 = 256;
          goto LABEL_113;
        }
      }
      unsigned int v56 = *v53;
LABEL_113:
      sub_19E0E5740((uint64_t)&p_p, a2);
      if (v55 == v56)
      {
        sub_19E106924((uint64_t)&p_p, (uint64_t)(v52 + 1));
        sub_19E106924((uint64_t)v68, (uint64_t)(v53 + 8));
        char v71 = v55;
        v52 += 6;
      }
      else
      {
        if (v55 < v56)
        {
          sub_19E106924((uint64_t)&p_p, (uint64_t)(v52 + 1));
          if (v69 == -1) {
            goto LABEL_133;
          }
          v80[0] = (void **)&v79;
          ((void (*)(void ***, unsigned char *))off_1EF09EC30[v69])(v80, v68);
          char v71 = v55;
          v52 += 6;
          goto LABEL_121;
        }
        if (v67 == -1) {
LABEL_133:
        }
          sub_19E07D5D0();
        v80[0] = (void **)&v79;
        ((void (*)(void ***, void ***))off_1EF09EC30[v67])(v80, &p_p);
        sub_19E106924((uint64_t)v68, (uint64_t)(v53 + 8));
        char v71 = v56;
      }
      v53 += 48;
LABEL_121:
      float v70 = v51;
      (*(void (**)(uint64_t, void ***, unsigned __int8 *))(a3 + 16))(a3, &p_p, &v76);
      int v57 = v76;
      sub_19E080690(&v72, 0);
      sub_19E07FA6C((uint64_t)v68);
      sub_19E07FA6C((uint64_t)&p_p);
      if (v57) {
        goto LABEL_122;
      }
    }
  }
  v80[0] = (void **)a1;
  uint64_t v6 = *(unsigned int *)(a2 + 14352);
  if (v6 == -1) {
    goto LABEL_138;
  }
  p_p_p = v80;
  ((void (*)(void ***__return_ptr, void ****, uint64_t))off_1EF09EF08[v6])(&p_p, &p_p_p, a2);
  uint64_t v79 = v5 + 40;
  uint64_t v7 = *(unsigned int *)(v4 + 28712);
  if (v7 == -1) {
    sub_19E07D5D0();
  }
  v80[0] = (void **)&v79;
  ((void (*)(void ****__return_ptr, void ***, uint64_t))off_1EF09EF08[v7])(&p_p_p, v80, v4 + 14360);
  uint64_t v74 = 0;
  long long v75 = 0;
  std::string __p = 0;
  uint64_t v8 = p_p;
  float v9 = (void **)p_p_p;
  uint64_t v10 = ((char *)v78 - (char *)p_p_p) >> 4;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)p_p) >> 4) - 0x5555555555555555 * v10 >= 0x100) {
    size_t v11 = 256;
  }
  else {
    size_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)p_p) >> 4) - 0x5555555555555555 * v10;
  }
  sub_19E0DA750((unint64_t *)&__p, v11);
  float v12 = v66;
  uint64_t v13 = v78;
  if (v8 != v66 || v9 != v78)
  {
    uint64_t v63 = v5;
    uint64_t v15 = (char *)v74;
    uint64_t v14 = v75;
    unint64_t v16 = (unint64_t)__p;
    while (v8 != v12)
    {
      unsigned int v17 = *(unsigned __int8 *)v8;
      if (v9 == v13) {
        goto LABEL_18;
      }
      unsigned int v18 = *(unsigned __int8 *)v9;
      if (v17 != v18)
      {
        if (v17 < v18)
        {
LABEL_18:
          if (v15 >= v14)
          {
            uint64_t v24 = (uint64_t)&v15[-v16 + 1];
            if (v24 < 0)
            {
              uint64_t v74 = (unsigned __int8 *)v15;
              long long v75 = v14;
              std::string __p = (void *)v16;
              sub_19E041BEC();
            }
            if (2 * (uint64_t)&v14[-v16] > (unint64_t)v24) {
              uint64_t v24 = 2 * (void)&v14[-v16];
            }
            if ((unint64_t)&v14[-v16] >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v25 = v24;
            }
            if (v25) {
              uint64_t v26 = (char *)operator new(v25);
            }
            else {
              uint64_t v26 = 0;
            }
            long long v34 = &v15[(void)v26 - v16];
            char *v34 = v17;
            int v19 = v34 + 1;
            if (v15 != (char *)v16)
            {
              long long v35 = &v15[~v16];
              do
              {
                char v36 = *--v15;
                (v35--)[(void)v26] = v36;
              }
              while (v15 != (char *)v16);
              long long v34 = v26;
            }
            uint64_t v14 = &v26[v25];
            if (v16) {
              operator delete((void *)v16);
            }
            unint64_t v16 = (unint64_t)v34;
          }
          else
          {
            *uint64_t v15 = v17;
            int v19 = v15 + 1;
          }
          v8 += 6;
          goto LABEL_73;
        }
        goto LABEL_20;
      }
      if (v15 >= v14)
      {
        uint64_t v27 = (uint64_t)&v15[-v16 + 1];
        if (v27 < 0)
        {
          uint64_t v74 = (unsigned __int8 *)v15;
          long long v75 = v14;
          std::string __p = (void *)v16;
          sub_19E041BEC();
        }
        if (2 * (uint64_t)&v14[-v16] > (unint64_t)v27) {
          uint64_t v27 = 2 * (void)&v14[-v16];
        }
        if ((unint64_t)&v14[-v16] >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v27;
        }
        if (v28) {
          char v29 = (char *)operator new(v28);
        }
        else {
          char v29 = 0;
        }
        uint64_t v37 = &v15[(void)v29 - v16];
        *uint64_t v37 = v17;
        int v19 = v37 + 1;
        if (v15 != (char *)v16)
        {
          int v38 = &v15[~v16];
          do
          {
            char v39 = *--v15;
            (v38--)[(void)v29] = v39;
          }
          while (v15 != (char *)v16);
          uint64_t v37 = v29;
        }
        uint64_t v14 = &v29[v28];
        if (v16) {
          operator delete((void *)v16);
        }
        unint64_t v16 = (unint64_t)v37;
      }
      else
      {
        *uint64_t v15 = v17;
        int v19 = v15 + 1;
      }
      v8 += 6;
LABEL_72:
      v9 += 6;
LABEL_73:
      uint64_t v15 = v19;
      float v12 = v66;
      uint64_t v13 = v78;
      BOOL v40 = v8 == v66 && v9 == v78;
      if (v40)
      {
        uint64_t v74 = (unsigned __int8 *)v19;
        long long v75 = v14;
        std::string __p = (void *)v16;
        uint64_t v5 = v63;
        uint64_t v4 = a2;
        goto LABEL_79;
      }
    }
    if (v9 == v13)
    {
      uint64_t v74 = (unsigned __int8 *)v15;
      long long v75 = v14;
      std::string __p = (void *)v16;
      __assert_rtn("stem_child_bytes", "TIStaticDictionaryImplCursor.cpp", 425, "baseline_byte < 0x100 || delta_byte < 0x100");
    }
    LOBYTE(v18) = *(unsigned char *)v9;
LABEL_20:
    if (v15 >= v14)
    {
      int v20 = &v15[-v16];
      uint64_t v21 = (uint64_t)&v15[-v16 + 1];
      if (v21 < 0)
      {
        uint64_t v74 = (unsigned __int8 *)v15;
        long long v75 = v14;
        std::string __p = (void *)v16;
        sub_19E041BEC();
      }
      if (2 * (uint64_t)&v14[-v16] > (unint64_t)v21) {
        uint64_t v21 = 2 * (void)&v14[-v16];
      }
      if ((unint64_t)&v14[-v16] >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v22 = v21;
      }
      if (v22) {
        uint64_t v23 = (char *)operator new(v22);
      }
      else {
        uint64_t v23 = 0;
      }
      char v30 = &v20[(void)v23];
      char v31 = &v20[(void)v23];
      *char v31 = v18;
      int v19 = v31 + 1;
      if (v15 != (char *)v16)
      {
        uint64_t v32 = &v15[~v16];
        do
        {
          char v33 = *--v15;
          (v32--)[(void)v23] = v33;
        }
        while (v15 != (char *)v16);
        char v30 = v23;
      }
      uint64_t v14 = &v23[v22];
      if (v16) {
        operator delete((void *)v16);
      }
      unint64_t v16 = (unint64_t)v30;
    }
    else
    {
      *uint64_t v15 = v18;
      int v19 = v15 + 1;
    }
    goto LABEL_72;
  }
LABEL_79:
  v80[0] = (void **)&p_p_p;
  sub_19E0DA800(v80);
  p_p_p = &p_p;
  sub_19E0DA800((void ***)&p_p_p);
  uint64_t v41 = *(void *)(v5 + 96);
  if (v41)
  {
    sub_19E0DA23C((unint64_t *)&p_p_p, v41, v4);
    char v42 = (unsigned __int8 *)__p;
    uint64_t v43 = (void **)p_p_p;
    while (1)
    {
      if (v42 == v74 && v43 == v78)
      {
LABEL_98:
        if (p_p_p)
        {
          uint64_t v78 = (void **)p_p_p;
          operator delete(p_p_p);
        }
        goto LABEL_128;
      }
      if (v42 == v74)
      {
        if (v43 == v78) {
          __assert_rtn("children", "TIStaticDictionaryImplCursor.cpp", 244, "suffix_byte < 0x100 || subcursor_byte < 0x100");
        }
        unsigned int v45 = 256;
      }
      else
      {
        unsigned int v45 = *v42;
        if (v43 == v78)
        {
          unsigned int v46 = 256;
          goto LABEL_91;
        }
      }
      unsigned int v46 = *(unsigned __int8 *)v43;
LABEL_91:
      sub_19E0E5AF0((uint64_t)&p_p, v5);
      if (v45 == v46)
      {
        v47.n128_f32[0] = sub_19E0E4EE8((unint64_t)&p_p, v4, v45);
        ++v42;
LABEL_96:
        uint64_t v43 = (void **)((char *)v43 + 1);
        goto LABEL_97;
      }
      if (v45 >= v46)
      {
        v47.n128_f32[0] = sub_19E0E4EE8((unint64_t)&p_p, v4, v46);
        goto LABEL_96;
      }
      v47.n128_f32[0] = sub_19E0E4EE8((unint64_t)&p_p, v4, v45);
      ++v42;
LABEL_97:
      (*(void (**)(uint64_t, void ***, unsigned __int8 *, __n128))(a3 + 16))(a3, &p_p, &v76, v47);
      int v48 = v76;
      sub_19E080690(&v72, 0);
      sub_19E07FA6C((uint64_t)v68);
      sub_19E07FA6C((uint64_t)&p_p);
      if (v48) {
        goto LABEL_98;
      }
    }
  }
  uint64_t v58 = (unsigned __int8 *)__p;
  unint64_t v59 = (char *)v74;
  if (__p != v74)
  {
    uint64_t v60 = (char *)__p + 1;
    do
    {
      sub_19E0E5AF0((uint64_t)&p_p, v5);
      float v61 = sub_19E0E4EE8((unint64_t)&p_p, v4, *(v60 - 1));
      (*(void (**)(uint64_t, void ***, unsigned __int8 *, float))(a3 + 16))(a3, &p_p, &v76, v61);
      int v62 = v76;
      sub_19E080690(&v72, 0);
      sub_19E07FA6C((uint64_t)v68);
      sub_19E07FA6C((uint64_t)&p_p);
      if (v62) {
        break;
      }
      BOOL v40 = v60++ == v59;
    }
    while (!v40);
LABEL_128:
    uint64_t v58 = (unsigned __int8 *)__p;
  }
  if (v58)
  {
    uint64_t v74 = v58;
    operator delete(v58);
  }
}

void sub_19E0E64E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **p_p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27)
{
  p_p = &__p;
  sub_19E0DA800(&p_p);
  p_p = (void **)(v27 - 144);
  sub_19E0DA800(&p_p);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0E65F8(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a1 <= 0xB) {
    __assert_rtn("InputStream", "TIDataFile.cpp", 306, "m_offset <= m_size");
  }
  BOOL v3 = a1 <= 0xF || a2 == 0;
  uint64_t result = !v3;
  if (!v3) {
    *a3 = *(_DWORD *)(a2 + 12);
  }
  return result;
}

uint64_t sub_19E0E664C(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a1 <= 0xF) {
    __assert_rtn("InputStream", "TIDataFile.cpp", 306, "m_offset <= m_size");
  }
  BOOL v3 = a1 <= 0x13 || a2 == 0;
  uint64_t result = !v3;
  if (!v3) {
    *a3 = *(_DWORD *)(a2 + 16);
  }
  return result;
}

__n128 sub_19E0E66A0(unint64_t a1, uint64_t a2, __n128 *a3)
{
  if (a1 <= 0x13) {
    __assert_rtn("InputStream", "TIDataFile.cpp", 306, "m_offset <= m_size");
  }
  if (a1 > 0x23 && a2 != 0)
  {
    __n128 result = *(__n128 *)(a2 + 20);
    *a3 = result;
  }
  return result;
}

uint64_t sub_19E0E66F4(const uint8_t *a1, _DWORD *a2, char *a3, uint64_t a4)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a4 + 16;
  if (*(void *)(a4 + 8)) {
    float v9 = *(char **)(a4 + 8);
  }
  else {
    float v9 = (char *)(a4 + 16);
  }
  sub_19E0408EC(v80, v9, 0);
  if (!v81)
  {
    unsigned __int8 v17 = atomic_load(byte_1E9457268);
    if ((v17 & 1) == 0) {
      goto LABEL_99;
    }
    unsigned __int8 v18 = atomic_load(byte_1E94578A0);
    if ((v18 & 1) == 0)
    {
      int v19 = sub_19E08D084();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a4 + 8);
        if (!v20) {
          uint64_t v20 = v8;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)uint64_t v87 = v20;
        uint64_t v14 = "File not found: %s";
        uint64_t v15 = v19;
        uint32_t v16 = 12;
        goto LABEL_33;
      }
      goto LABEL_99;
    }
    printf("File not found: %s");
    goto LABEL_98;
  }
  if (v82 - 1 < 3 || v83 == 0)
  {
    unsigned __int8 v11 = atomic_load(byte_1E9457268);
    if ((v11 & 1) == 0) {
      goto LABEL_99;
    }
    unsigned __int8 v12 = atomic_load(byte_1E94578A0);
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = sub_19E08D084();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v14 = "couldn't read magic number from file";
LABEL_14:
        uint64_t v15 = v13;
        uint32_t v16 = 2;
LABEL_33:
        _os_log_impl(&dword_19E038000, v15, OS_LOG_TYPE_ERROR, v14, buf, v16);
      }
LABEL_99:
      uint64_t v57 = 0;
      goto LABEL_100;
    }
    printf("couldn't read magic number from file");
LABEL_98:
    putchar(10);
    goto LABEL_99;
  }
  if (*v83 != 0x1000000)
  {
    unsigned __int8 v23 = atomic_load(byte_1E9457268);
    if ((v23 & 1) == 0) {
      goto LABEL_99;
    }
    unsigned int v24 = bswap32(*v83);
    unsigned __int8 v25 = atomic_load(byte_1E94578A0);
    if (v25)
    {
      printf("Magic numbers don't match!  Recorded: %u  Actual %u");
      goto LABEL_98;
    }
    uint64_t v26 = sub_19E08D084();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      goto LABEL_99;
    }
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v87 = v24;
    *(_WORD *)&v87[4] = 1024;
    *(_DWORD *)&v87[6] = 1;
    uint64_t v14 = "Magic numbers don't match!  Recorded: %u  Actual %u";
LABEL_32:
    uint64_t v15 = v26;
    uint32_t v16 = 14;
    goto LABEL_33;
  }
  if (v82 <= 3) {
    __assert_rtn("InputStream", "TIDataFile.cpp", 306, "m_offset <= m_size");
  }
  if (v82 <= 7)
  {
    unsigned __int8 v21 = atomic_load(byte_1E9457268);
    if ((v21 & 1) == 0) {
      goto LABEL_99;
    }
    unsigned __int8 v22 = atomic_load(byte_1E94578A0);
    if ((v22 & 1) == 0)
    {
      uint64_t v13 = sub_19E08D084();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v14 = "couldn't read major version from file";
        goto LABEL_14;
      }
      goto LABEL_99;
    }
    printf("couldn't read major version from file");
    goto LABEL_98;
  }
  unsigned int v27 = v83[1];
  if (v27 != 50331648)
  {
    unsigned __int8 v30 = atomic_load(byte_1E9457268);
    if ((v30 & 1) == 0) {
      goto LABEL_99;
    }
    unsigned int v31 = bswap32(v27);
    unsigned __int8 v32 = atomic_load(byte_1E94578A0);
    if (v32)
    {
      printf("Major versions don't match!  Recorded: %u  Actual %u");
      goto LABEL_98;
    }
    uint64_t v26 = sub_19E08D084();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      goto LABEL_99;
    }
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v87 = v31;
    *(_WORD *)&v87[4] = 1024;
    *(_DWORD *)&v87[6] = 3;
    uint64_t v14 = "Major versions don't match!  Recorded: %u  Actual %u";
    goto LABEL_32;
  }
  if (v82 <= 0xB)
  {
    unsigned __int8 v28 = atomic_load(byte_1E9457268);
    if ((v28 & 1) == 0) {
      goto LABEL_99;
    }
    unsigned __int8 v29 = atomic_load(byte_1E94578A0);
    if ((v29 & 1) == 0)
    {
      uint64_t v13 = sub_19E08D084();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        goto LABEL_99;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v14 = "couldn't read minor version from file";
      goto LABEL_14;
    }
    printf("couldn't read minor version from file");
    goto LABEL_98;
  }
  unsigned int v33 = v83[2];
  if (v33 != 352321536)
  {
    unsigned __int8 v37 = atomic_load(byte_1E9457268);
    if ((v37 & 1) == 0) {
      goto LABEL_99;
    }
    unsigned int v38 = bswap32(v33);
    unsigned __int8 v39 = atomic_load(byte_1E94578A0);
    if ((v39 & 1) == 0)
    {
      BOOL v40 = sub_19E08D084();
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        goto LABEL_99;
      }
      *(_DWORD *)long long buf = 67109888;
      *(_DWORD *)uint64_t v87 = v38;
      *(_WORD *)&v87[4] = 1024;
      *(_DWORD *)&v87[6] = v38;
      *(_WORD *)&v87[10] = 1024;
      *(_DWORD *)&v87[12] = 21;
      *(_WORD *)&v87[16] = 1024;
      int v88 = 21;
      uint64_t v14 = "Minor versions don't match!  Recorded: %u(0x%x)  Actual %u(0x%x)";
      uint64_t v15 = v40;
      uint32_t v16 = 26;
      goto LABEL_33;
    }
    printf("Minor versions don't match!  Recorded: %u(0x%x)  Actual %u(0x%x)");
    goto LABEL_98;
  }
  *(_DWORD *)versionArray = 0;
  if ((sub_19E0E65F8(v82, (uint64_t)v83, versionArray) & 1) == 0)
  {
    unsigned __int8 v41 = atomic_load(byte_1E9457268);
    if ((v41 & 1) == 0) {
      goto LABEL_99;
    }
    unsigned __int8 v42 = atomic_load(byte_1E94578A0);
    if ((v42 & 1) == 0)
    {
      uint64_t v13 = sub_19E08D084();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        goto LABEL_99;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v14 = "couldn't read collator version from file";
      goto LABEL_14;
    }
    printf("couldn't read collator version from file");
    goto LABEL_98;
  }
  if (*(_DWORD *)versionArray != *(_DWORD *)a1)
  {
    u_versionToString(a1, versionString);
    u_versionToString(versionArray, v90);
    unsigned __int8 v34 = atomic_load(byte_1E9457268);
    if ((v34 & 1) == 0) {
      goto LABEL_99;
    }
    unsigned __int8 v35 = atomic_load(byte_1E94578A0);
    if (v35)
    {
      printf("Collator versions don't match!  Recorded: %s  Actual %s");
      goto LABEL_98;
    }
    char v36 = sub_19E08D084();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
      goto LABEL_99;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)uint64_t v87 = versionString;
    *(_WORD *)&v87[8] = 2080;
    *(void *)&v87[10] = v90;
    uint64_t v14 = "Collator versions don't match!  Recorded: %s  Actual %s";
LABEL_55:
    uint64_t v15 = v36;
    uint32_t v16 = 22;
    goto LABEL_33;
  }
  *(_DWORD *)versionArray = 0;
  if ((sub_19E0E664C(v82, (uint64_t)v83, versionArray) & 1) == 0)
  {
    unsigned __int8 v45 = atomic_load(byte_1E9457268);
    if ((v45 & 1) == 0) {
      goto LABEL_99;
    }
    unsigned __int8 v46 = atomic_load(byte_1E94578A0);
    if ((v46 & 1) == 0)
    {
      uint64_t v13 = sub_19E08D084();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        goto LABEL_99;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v14 = "couldn't read UCA version from file";
      goto LABEL_14;
    }
    printf("couldn't read UCA version from file");
    goto LABEL_98;
  }
  if (*(_DWORD *)versionArray != *a2)
  {
    u_versionToString(a1, versionString);
    u_versionToString(versionArray, v90);
    unsigned __int8 v43 = atomic_load(byte_1E9457268);
    if ((v43 & 1) == 0) {
      goto LABEL_99;
    }
    unsigned __int8 v44 = atomic_load(byte_1E94578A0);
    if (v44)
    {
      printf("Unicode Collation Algorithm (UCA) versions don't match!  Recorded: %s  Actual %s");
      goto LABEL_98;
    }
    char v36 = sub_19E08D084();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
      goto LABEL_99;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)uint64_t v87 = versionString;
    *(_WORD *)&v87[8] = 2080;
    *(void *)&v87[10] = v90;
    uint64_t v14 = "Unicode Collation Algorithm (UCA) versions don't match!  Recorded: %s  Actual %s";
    goto LABEL_55;
  }
  sub_19E0E66A0(v82, (uint64_t)v83, &v89);
  if (!v52)
  {
    unsigned __int8 v58 = atomic_load(byte_1E9457268);
    if ((v58 & 1) == 0) {
      goto LABEL_99;
    }
    unsigned __int8 v59 = atomic_load(byte_1E94578A0);
    if ((v59 & 1) == 0)
    {
      uint64_t v13 = sub_19E08D084();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        goto LABEL_99;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v14 = "couldn't get recorded checksum from file";
      goto LABEL_14;
    }
    printf("couldn't get recorded checksum from file");
    goto LABEL_98;
  }
  if (v89.n128_u8[0] != *a3)
  {
LABEL_92:
    unsigned __int8 v60 = atomic_load(byte_1E9457268);
    if (v60)
    {
      unsigned __int8 v61 = atomic_load(byte_1E94578A0);
      if (v61)
      {
        printf("Checksums don't match!");
        putchar(10);
      }
      else
      {
        int v62 = sub_19E08D084();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_19E038000, v62, OS_LOG_TYPE_ERROR, "Checksums don't match!", buf, 2u);
        }
      }
    }
    unsigned __int8 v64 = atomic_load(byte_1E9457268);
    if (v64)
    {
      unsigned __int8 v65 = atomic_load(byte_1E94578A0);
      if (v65)
      {
        sub_19E0DD6FC((uint64_t)buf, (char *)&v89, 16, v47, v48, v49, v50, v51);
        uint64_t v68 = *(const char **)&v87[4];
        if (!*(void *)&v87[4]) {
          uint64_t v68 = &v87[12];
        }
        printf("Recorded: %s", v68);
        if (*(void *)&v87[4] && v87[2] == 1) {
          free(*(void **)&v87[4]);
        }
        putchar(10);
      }
      else
      {
        uint8x8_t v66 = sub_19E08D084();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          sub_19E0DD6FC((uint64_t)buf, (char *)&v89, 16, v47, v48, v49, v50, v51);
          int v67 = *(unsigned char **)&v87[4];
          if (!*(void *)&v87[4]) {
            int v67 = &v87[12];
          }
          *(_DWORD *)long long v84 = 136315138;
          char v85 = v67;
          _os_log_impl(&dword_19E038000, v66, OS_LOG_TYPE_ERROR, "Recorded: %s", v84, 0xCu);
          if (*(void *)&v87[4] && v87[2] == 1) {
            free(*(void **)&v87[4]);
          }
        }
      }
    }
    unsigned __int8 v69 = atomic_load(byte_1E9457268);
    if ((v69 & 1) == 0) {
      goto LABEL_99;
    }
    unsigned __int8 v70 = atomic_load(byte_1E94578A0);
    if ((v70 & 1) == 0)
    {
      char v71 = sub_19E08D084();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        sub_19E0DD6FC((uint64_t)buf, a3, 16, v72, v73, v74, v75, v76);
        int v77 = *(unsigned char **)&v87[4];
        if (!*(void *)&v87[4]) {
          int v77 = &v87[12];
        }
        *(_DWORD *)long long v84 = 136315138;
        char v85 = v77;
        _os_log_impl(&dword_19E038000, v71, OS_LOG_TYPE_ERROR, "Actual: %s", v84, 0xCu);
        if (*(void *)&v87[4] && v87[2] == 1) {
          free(*(void **)&v87[4]);
        }
      }
      goto LABEL_99;
    }
    sub_19E0DD6FC((uint64_t)buf, a3, 16, v47, v48, v49, v50, v51);
    uint64_t v78 = *(const char **)&v87[4];
    if (!*(void *)&v87[4]) {
      uint64_t v78 = &v87[12];
    }
    printf("Actual: %s", v78);
    if (*(void *)&v87[4] && v87[2] == 1) {
      free(*(void **)&v87[4]);
    }
    goto LABEL_98;
  }
  uint64_t v53 = 1;
  while (v53 != 16)
  {
    uint64_t v54 = v53;
    int v55 = v89.n128_u8[v53];
    int v56 = a3[v53++];
    if (v55 != v56)
    {
      if ((unint64_t)(v54 - 1) <= 0xE) {
        goto LABEL_92;
      }
      break;
    }
  }
  uint64_t v57 = 1;
LABEL_100:
  sub_19E040984((uint64_t)v80);
  return v57;
}

void sub_19E0E70DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_19E040984((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_19E0E714C(uint64_t a1)
{
  size_t v2 = *(unsigned __int16 *)(a1 + 72);
  if (v2 < 0xF) {
    BOOL v3 = (void *)(a1 + 74);
  }
  else {
    BOOL v3 = *(void **)(a1 + 80);
  }
  sub_19E057A94(&__p, v3, v2);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if ((v19 & 0x80u) == 0) {
      p_p = (uint64_t *)&__p;
    }
    else {
      p_p = (uint64_t *)__p;
    }
    if ((v19 & 0x80u) == 0) {
      unint64_t v9 = v19;
    }
    else {
      unint64_t v9 = v18;
    }
    unint64_t v10 = sub_19E086FCC(p_p, v9);
    if (v7) {
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 112))(v7);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v15 = v11 ^ v10;
    sub_19E0616BC(v6);
    if ((v19 & 0x80) != 0) {
LABEL_21:
    }
      operator delete(__p);
  }
  else
  {
    unsigned __int8 v12 = v19;
    if ((v19 & 0x80u) == 0) {
      uint64_t v13 = (uint64_t *)&__p;
    }
    else {
      uint64_t v13 = (uint64_t *)__p;
    }
    if ((v19 & 0x80u) == 0) {
      unint64_t v14 = v19;
    }
    else {
      unint64_t v14 = v18;
    }
    unint64_t v15 = sub_19E086FCC(v13, v14);
    if ((v12 & 0x80) != 0) {
      goto LABEL_21;
    }
  }
  return v15;
}

void sub_19E0E7258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19E0616BC(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E0E727C()
{
  return 0;
}

uint64_t sub_19E0E7284(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 40);
  uint64_t v1 = (unsigned __int16 *)(a1 + 40);
  if (v2) {
    return sub_19E0E00EC(v1);
  }
  else {
    return 0;
  }
}

const void *sub_19E0E7298(uint64_t a1)
{
  sub_19E03FD18((CFStringRef *)&v3, (unsigned __int16 *)(a1 + 40));
  uint64_t v1 = v3;
  BOOL v3 = 0;
  sub_19E040A10(&v3);
  return v1;
}

uint64_t sub_19E0E72DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1) {
    return *(unsigned int *)(v1 + 4);
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0E72F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 0;
  }
  if ((unint64_t)*(unsigned __int8 *)(a1 + 32) + 1 < *(unsigned __int8 *)(v1 + 15)) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v4 = (uint64_t *)(v1 + 24);
  uint64_t v5 = 8 * v2;
  do
  {
    uint64_t v6 = *v4++;
    uint64_t result = (*(_DWORD *)(v6 + 48) + result);
    v5 -= 8;
  }
  while (v5);
  return result;
}

double sub_19E0E7344(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    if ((unint64_t)*(unsigned __int8 *)(a1 + 32) + 1 >= *(unsigned __int8 *)(v1 + 15)
      && (uint64_t v2 = *(unsigned int *)(v1 + 16), v2))
    {
      int v3 = 0;
      uint64_t v4 = (uint64_t *)(v1 + 24);
      uint64_t v5 = 8 * v2;
      do
      {
        uint64_t v6 = *v4++;
        v3 += *(_DWORD *)(v6 + 48);
        v5 -= 8;
      }
      while (v5);
    }
    else
    {
      int v3 = 0;
    }
    int v7 = *(_DWORD *)(v1 + 4);
  }
  else
  {
    int v3 = 0;
    int v7 = 0;
  }
  long double v8 = sub_19E0A42E4(v3, v7);

  return log10(v8);
}

double sub_19E0E73C8(uint64_t a1)
{
  return *(double *)(a1 + 128);
}

double sub_19E0E73D0(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

void sub_19E0E73D8(void *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  if (a1[3])
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v4);
      if (v6)
      {
        int v7 = v6;
        uint64_t v8 = a1[1];
        if (v8)
        {
          v9[0] = MEMORY[0x1E4F143A8];
          v9[1] = 1174405120;
          v9[2] = sub_19E0E752C;
          v9[3] = &unk_1EF09F0B0;
          void v9[5] = a1;
          void v9[6] = v8;
          unint64_t v10 = v6;
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          uint8_t v9[4] = a2;
          v11[0] = MEMORY[0x1E4F143A8];
          v11[1] = 0x40000000;
          void v11[2] = sub_19E0E76D4;
          v11[3] = &unk_1E599C6A8;
          v11[6] = a1 + 9;
          v11[7] = v2;
          v11[8] = a1 + 5;
          v11[9] = 0;
          v11[4] = v9;
          void v11[5] = v8 + 136;
          sub_19E091648(v2, (uint64_t)v11);
          if (v10) {
            sub_19E0616BC(v10);
          }
        }
        sub_19E0616BC(v7);
      }
    }
  }
}

void sub_19E0E750C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_19E0616BC(a16);
  }
  sub_19E0616BC(v16);
  _Unwind_Resume(a1);
}

void sub_19E0E752C(void *a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, double a5)
{
  double v10 = *(double *)(a1[5] + 128);
  if (qword_1EB4FEE18 != -1) {
    dispatch_once(&qword_1EB4FEE18, &unk_1EF09F0E0);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  unsigned __int8 v12 = (const void *)Instance;
  uint64_t v13 = a1[6];
  unint64_t v14 = (std::__shared_weak_count *)a1[7];
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v15 = *(atomic_uint **)a2;
  uint32_t v16 = v15;
  if (v15 && (int)atomic_fetch_add(v15, 1u) <= 0) {
    __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  char v17 = *(unsigned char *)(a2 + 8);
  sub_19E0E7A08(Instance + 16, v13, (uint64_t)v14, (uint64_t)&v16, a3, a4, a5, v10 + a5);
  if (v16) {
    sub_19E08F174((uint64_t)v16);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  (*(void (**)(void))(a1[4] + 16))();

  CFRelease(v12);
}

void sub_19E0E76A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_19E08F174(a9);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0E76D4(uint64_t a1, unsigned __int8 *a2, BOOL *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  char v27 = 0;
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2 && *(unsigned char *)(v6 + 15)) {
    char v7 = *(unsigned char *)(v6 + a2[8] + 8);
  }
  else {
    char v7 = 0;
  }
  sub_19E0D29A8((uint64_t)&v22, *(void *)(a1 + 40), *(unsigned __int16 **)(a1 + 48), v7);
  if (v26 == -1)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    sub_19E0B2328((uint64_t)&v28, *(unsigned __int16 **)(a1 + 64), 0xFFFDu);
    double v10 = 0.0;
    double v11 = 0.0;
    if (*(void *)a2)
    {
      LODWORD(v11) = *(_DWORD *)(*(void *)a2 + 4);
      double v11 = (double)*(unint64_t *)&v11;
    }
    double v12 = *(double *)(a1 + 72);
    uint64_t v13 = **(void **)(a1 + 56);
    if (v13)
    {
      LODWORD(v10) = *(_DWORD *)(v13 + 4);
      double v10 = (double)*(unint64_t *)&v10;
    }
  }
  else
  {
    if (v26 == -2)
    {
      if (*(void *)a2) {
        int v8 = *(_DWORD *)(*(void *)a2 + 4);
      }
      else {
        int v8 = 0;
      }
      uint64_t v16 = **(void **)(a1 + 56);
      if (v16) {
        int v17 = *(_DWORD *)(v16 + 4);
      }
      else {
        int v17 = 0;
      }
      double v18 = sub_19E0A42E4(v8, v17);
      uint64_t v19 = *(void *)(a1 + 64);
      double v20 = *(double *)(a1 + 72);
      long double v21 = log10(v18);
      uint64_t v28 = MEMORY[0x1E4F143A8];
      unsigned __int8 v29 = (void *)0x40000000;
      unsigned __int8 v30 = sub_19E0E76D4;
      unsigned int v31 = &unk_1E599C6A8;
      unsigned int v33 = &v22;
      unsigned __int8 v34 = a2;
      uint64_t v35 = v19;
      double v36 = v21 + v20;
      long long v32 = *(_OWORD *)(a1 + 32);
      sub_19E091648((uint64_t)a2, (uint64_t)&v28);
      goto LABEL_26;
    }
    uint64_t v9 = *(void *)(a1 + 32);
    sub_19E0B2328((uint64_t)&v28, *(unsigned __int16 **)(a1 + 64), v26);
    double v10 = 0.0;
    double v11 = 0.0;
    if (*(void *)a2)
    {
      LODWORD(v11) = *(_DWORD *)(*(void *)a2 + 4);
      double v11 = (double)*(unint64_t *)&v11;
    }
    double v12 = *(double *)(a1 + 72);
    uint64_t v14 = **(void **)(a1 + 56);
    if (v14)
    {
      LODWORD(v10) = *(_DWORD *)(v14 + 4);
      double v10 = (double)*(unint64_t *)&v10;
    }
  }
  long double v15 = log10(v11 / v10);
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, unsigned __int16 *, char *, long double))(v9 + 16))(v9, a2, &v28, &v22, &v27, v12 + v15);
  if (v29 && BYTE6(v28) == 1) {
    free(v29);
  }
LABEL_26:
  *a3 = v27 != 0;
  if (v24 >= 0xFu && v25) {
    MEMORY[0x19F3BA6E0](v25, 0x1000C8077774924);
  }
  if (v22 >= 0xFu)
  {
    if (v23) {
      MEMORY[0x19F3BA6E0](v23, 0x1000C8077774924);
    }
  }
}

void sub_19E0E7994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  if (a19)
  {
    if (a18 == 1) {
      free(a19);
    }
  }
  sub_19E0879E0((unsigned __int16 *)&a9);
  _Unwind_Resume(a1);
}

void sub_19E0E79DC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    sub_19E0616BC(v1);
  }
}

uint64_t sub_19E0E79EC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_19E0E7A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, unsigned __int16 *a6, double a7, double a8)
{
  *(void *)a1 = &unk_1EF09CAA0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 16), 1uLL, memory_order_relaxed);
  }
  sub_19E0E7BC0(a1 + 24, a4);
  sub_19E039858(a1 + 40, a5);
  uint64_t v13 = (_WORD *)(a1 + 72);
  unint64_t v14 = *a6;
  if (v14 >= 0xF)
  {
    _WORD *v13 = v14;
    operator new[]();
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)a6;
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a6 + 16);
  long double v15 = (_WORD *)(a1 + 96);
  unint64_t v16 = a6[12];
  if (v16 >= 0xF)
  {
    *long double v15 = v16;
    operator new[]();
  }
  *(_OWORD *)long double v15 = *(_OWORD *)(a6 + 12);
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a6 + 10);
  *(double *)(a1 + 120) = a7;
  *(double *)(a1 + 128) = a8;
  *(unsigned char *)(a1 + 136) = *a6 == 0;
  return a1;
}

void sub_19E0E7B48(_Unwind_Exception *a1)
{
  if (*v3 >= 0xFu)
  {
    uint64_t v5 = *(void *)(v1 + 80);
    if (v5) {
      MEMORY[0x19F3BA6E0](v5, 0x1000C8077774924);
    }
  }
  uint64_t v6 = *(void **)(v1 + 48);
  if (v6 && *(unsigned char *)(v1 + 46) == 1) {
    free(v6);
  }
  sub_19E091464(v2);
  char v7 = *(std::__shared_weak_count **)(v1 + 16);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E0E7BC0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(atomic_uint **)a2;
  *(void *)uint64_t result = *(void *)a2;
  if (v2 && (int)atomic_fetch_add(v2, 1u) <= 0) {
    __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t sub_19E0E7C18()
{
  qword_1EB4FEE20 = 0;
  *(void *)algn_1EB4FEE28 = "LXCursor";
  qword_1EB4FEE30 = 0;
  unk_1EB4FEE38 = 0;
  qword_1EB4FEE40 = (uint64_t)sub_19E087C70;
  *(_OWORD *)algn_1EB4FEE48 = 0u;
  *(_OWORD *)&algn_1EB4FEE48[16] = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB4FEE80 = result;
  return result;
}

BOOL sub_19E0E7C6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 0;
  }
  if ((unint64_t)*(unsigned __int8 *)(a1 + 32) + 1 >= *(unsigned __int8 *)(v1 + 15)) {
    return *(_DWORD *)(v1 + 20) != 0;
  }
  return 1;
}

uint64_t sub_19E0E7CA8(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = sub_19E0E7D1C;
  v3[3] = &unk_1E599C680;
  v3[4] = a2;
  v3[5] = a1;
  return sub_19E0915B0(a1 + 24, (uint64_t)v3);
}

void sub_19E0E7D1C(uint64_t a1, int32x2_t **a2, unsigned char *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 40);
  sub_19E039858((uint64_t)v22, (unsigned __int16 *)&(*a2)[1]);
  *(void *)((char *)&v25 + 5) = 0;
  long long v26 = 0uLL;
  *(void *)&long long v25 = 0;
  *(void *)&long long v27 = 0xFFFFFFFFLL;
  BYTE8(v27) = 0;
  HIDWORD(v27) = 0;
  __int16 v28 = 0;
  char v7 = *a2;
  HIDWORD(v26) = (*a2)[5].i32[0];
  int v8 = v7[6].i32[0];
  uint64_t v9 = *(void *)(v6 + 24);
  if (v9) {
    int v10 = *(_DWORD *)(v9 + 4);
  }
  else {
    int v10 = 0;
  }
  double v11 = sub_19E0A42E4(v8, v10);
  float v12 = v11;
  *(float *)&long long v25 = v12;
  uint64_t v13 = *a2;
  *(int32x2_t *)&long long v26 = vmax_s32(v13[6], 0);
  DWORD1(v25) = v13[5].i32[1];
  double v14 = *(double *)(v6 + 128);
  double v15 = log10(v11);
  int32x2_t v16 = v13[7];
  __int32 v17 = v13[8].i32[0];
  if (qword_1EB4FED88 != -1) {
    dispatch_once(&qword_1EB4FED88, &unk_1EF09D218);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  sub_19E039858(Instance + 16, v22);
  __int16 v19 = v28;
  long long v21 = v26;
  long long v20 = v27;
  *(_OWORD *)(Instance + 48) = v25;
  *(_OWORD *)(Instance + 64) = v21;
  *(_OWORD *)(Instance + 80) = v20;
  *(_WORD *)(Instance + 96) = v19;
  *(double *)(Instance + 104) = v15 + v14;
  *(int32x2_t *)(Instance + 112) = v16;
  *(_DWORD *)(Instance + 120) = v17;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  *a3 = 0;
  CFRelease((CFTypeRef)Instance);
  if (v24)
  {
    if (v23 == 1) {
      free(v24);
    }
  }
}

void sub_19E0E7F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, void *a14)
{
  if (a14)
  {
    if (a13 == 1) {
      free(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E7F44()
{
  qword_1EB4FED90 = 0;
  *(void *)algn_1EB4FED98 = "LXEntry";
  qword_1EB4FEDA0 = 0;
  unk_1EB4FEDA8 = 0;
  qword_1EB4FEDB0 = (uint64_t)sub_19E088418;
  unk_1EB4FEDB8 = 0u;
  unk_1EB4FEDC8 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB4FEDF0 = result;
  return result;
}

BOOL sub_19E0E7F98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  return v1
      && (unint64_t)*(unsigned __int8 *)(a1 + 32) + 1 >= *(unsigned __int8 *)(v1 + 15)
      && *(_DWORD *)(v1 + 16) != 0;
}

uint64_t sub_19E0E7FCC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 136);
}

void sub_19E0E7FD4()
{
}

uint64_t sub_19E0E8000(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v33 = *(void *)(a1 + 8);
  if (v33)
  {
    char v7 = *(atomic_uint **)(a1 + 24);
    uint64_t v48 = v7;
    if (v7 && (int)atomic_fetch_add(v7, 1u) <= 0) {
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    }
    char v49 = *(unsigned char *)(a1 + 32);
    if (*(unsigned __int16 *)(a1 + 72) >= 0xFuLL)
    {
      LOWORD(v44) = *(_WORD *)(a1 + 72);
      operator new[]();
    }
    long long v44 = *(_OWORD *)(a1 + 72);
    unint64_t v9 = *(unsigned __int16 *)(a1 + 96);
    char v45 = *(unsigned char *)(a1 + 88);
    long long v32 = v5;
    if (v9 >= 0xF)
    {
      LOWORD(v46) = v9;
      operator new[]();
    }
    long long v46 = *(_OWORD *)(a1 + 96);
    int v47 = *(_DWORD *)(a1 + 112);
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v31 = a1;
    if (v10) {
      int v30 = *(_DWORD *)(v10 + 4);
    }
    else {
      int v30 = 0;
    }
    if (*((void *)a2 + 1)) {
      uint64_t v11 = *((void *)a2 + 1);
    }
    else {
      uint64_t v11 = (uint64_t)(a2 + 8);
    }
    uint64_t v40 = v11;
    uint64_t v29 = (uint64_t)a2;
    int v12 = *a2;
    int v41 = 0;
    int v42 = v12;
    unsigned int v43 = 0;
    sub_19E03E768(&v40);
    uint64_t v36 = v11;
    int v37 = v12;
    int v38 = v12;
    int v39 = 0;
    sub_19E03E768(&v36);
    uint64_t v13 = v36;
    int v14 = v37;
    while (1)
    {
      if (v40 != v13) {
        __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
      }
      if (v41 == v14) {
        break;
      }
      uint64_t v15 = v43;
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v33 + 1512) + 16))(&v34);
      uint64_t v16 = (unsigned __int16)v44;
      sub_19E03EB40((uint64_t)&v50, v33 + 136, (uint64_t)&v44, v15, (unsigned __int16 *)&v34);
      if (v16 >= 0xF && *((void *)&v44 + 1)) {
        MEMORY[0x19F3BA6E0](*((void *)&v44 + 1), 0x1000C8077774924);
      }
      long long v44 = v50;
      if ((unsigned __int16)v50 >= 0xFu) {
        LOWORD(v50) = 0;
      }
      char v45 = v51;
      if ((unsigned __int16)v46 >= 0xFu && *((void *)&v46 + 1)) {
        MEMORY[0x19F3BA6E0](*((void *)&v46 + 1), 0x1000C8077774924);
      }
      long long v46 = v52;
      if ((unsigned __int16)v52 >= 0xFu) {
        LOWORD(v52) = 0;
      }
      int v47 = v53;
      if ((unsigned __int16)v50 >= 0xFu && *((void *)&v50 + 1)) {
        MEMORY[0x19F3BA6E0](*((void *)&v50 + 1), 0x1000C8077774924);
      }
      uint64_t v17 = (uint64_t)v48;
      if (v48)
      {
        unsigned int v18 = (unsigned __int16)v44;
        if (v16 <= (unsigned __int16)v44) {
          uint64_t v19 = (unsigned __int16)v44;
        }
        else {
          uint64_t v19 = v16;
        }
        while (1)
        {
          BOOL v20 = v19 != v16;
          if (v19 == v16) {
            break;
          }
          long long v21 = (char *)*((void *)&v44 + 1);
          if (v18 <= 0xE) {
            long long v21 = (char *)&v44 + 2;
          }
          sub_19E0912F4((uint64_t)&v50, (uint64_t)&v48, v21[v16]);
          uint64_t v22 = v50;
          *(void *)&long long v50 = 0;
          uint64_t v48 = (atomic_uint *)v22;
          sub_19E08F174(v17);
          char v49 = BYTE8(v50);
          if ((void)v50) {
            sub_19E08F174(v50);
          }
          uint64_t v17 = (uint64_t)v48;
          ++v16;
          if (!v48) {
            goto LABEL_44;
          }
        }
      }
      else
      {
LABEL_44:
        BOOL v20 = 1;
      }
      if ((unsigned __int16)v34 >= 0xFu && v35) {
        MEMORY[0x19F3BA6E0](v35, 0x1000C8077774924);
      }
      if (v20)
      {
        uint64_t v8 = 0;
        uint64_t v6 = v32;
        goto LABEL_60;
      }
      sub_19E03E768(&v40);
    }
    char v23 = v48;
    if (!v48) {
      __assert_rtn("create_child", "LXMutableLexiconCursorImpl.cpp", 64, "impl");
    }
    uint64_t v6 = v32;
    double v24 = sub_19E0A42E4(v48[1], v30);
    double v25 = log10(v24);
    sub_19E0B23D4((uint64_t)&v50, (unsigned __int16 *)(v31 + 40), v29);
    double v26 = *(double *)(v31 + 128);
    if (qword_1EB4FEE18 != -1) {
      dispatch_once(&qword_1EB4FEE18, &unk_1EF09F0E0);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v40 = (uint64_t)v23;
    if ((int)atomic_fetch_add(v23, 1u) < 1) {
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    }
    uint64_t v8 = Instance;
    LOBYTE(v41) = v49;
    sub_19E0E7A08(Instance + 16, v33, (uint64_t)v32, (uint64_t)&v40, (unsigned __int16 *)&v50, (unsigned __int16 *)&v44, v25, v26 + v25);
    if (v40) {
      sub_19E08F174(v40);
    }
    std::__shared_weak_count::__release_weak(v32);
    if (*((void *)&v50 + 1) && BYTE6(v50) == 1) {
      free(*((void **)&v50 + 1));
    }
LABEL_60:
    if ((unsigned __int16)v46 >= 0xFu && *((void *)&v46 + 1)) {
      MEMORY[0x19F3BA6E0](*((void *)&v46 + 1), 0x1000C8077774924);
    }
    if ((unsigned __int16)v44 >= 0xFu && *((void *)&v44 + 1)) {
      MEMORY[0x19F3BA6E0](*((void *)&v44 + 1), 0x1000C8077774924);
    }
    if (v48) {
      sub_19E08F174((uint64_t)v48);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  sub_19E0616BC(v6);
  return v8;
}

void sub_19E0E85D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,unsigned __int16 a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a23 >= 0xFu)
  {
    if (a24) {
      MEMORY[0x19F3BA6E0](a24, 0x1000C8077774924);
    }
  }
  sub_19E091464(&a29);
  sub_19E0616BC(a12);
  _Unwind_Resume(a1);
}

void sub_19E0E86EC(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09CAA0;
  if (*(unsigned __int16 *)(a1 + 96) >= 0xFu)
  {
    uint64_t v2 = *(void *)(a1 + 104);
    if (v2) {
      MEMORY[0x19F3BA6E0](v2, 0x1000C8077774924);
    }
  }
  if (*(unsigned __int16 *)(a1 + 72) >= 0xFu)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    if (v3) {
      MEMORY[0x19F3BA6E0](v3, 0x1000C8077774924);
    }
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4 && *(unsigned char *)(a1 + 46) == 1) {
    free(v4);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    sub_19E08F174(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0E87D0(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09CAA0;
  if (*(unsigned __int16 *)(a1 + 96) >= 0xFu)
  {
    uint64_t v2 = *(void *)(a1 + 104);
    if (v2) {
      MEMORY[0x19F3BA6E0](v2, 0x1000C8077774924);
    }
  }
  if (*(unsigned __int16 *)(a1 + 72) >= 0xFu)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    if (v3) {
      MEMORY[0x19F3BA6E0](v3, 0x1000C8077774924);
    }
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4 && *(unsigned char *)(a1 + 46) == 1) {
    free(v4);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    sub_19E08F174(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_19E0E8894()
{
}

void sub_19E0E88C0()
{
}

void sub_19E0E88EC()
{
}

void sub_19E0E8918()
{
}

uint64_t sub_19E0E8944(uint64_t a1, char *a2, unsigned __int16 a3)
{
  sub_19E0E89C4(&v7, *(void *)(a1 + 8));
  if (v7) {
    uint64_t v5 = sub_19E0AD1E0(v7, a2, a3);
  }
  else {
    uint64_t v5 = 0;
  }
  if (v8) {
    sub_19E0616BC(v8);
  }
  return v5;
}

void sub_19E0E89AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_19E0616BC(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0E89C4(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a2 + 32);
  std::mutex::lock((std::mutex *)(a2 + 32));
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    a1[1] = v6;
    if (v6) {
      *a1 = *(void *)(a2 + 8);
    }
  }

  std::mutex::unlock(v4);
}

void sub_19E0E8A30(uint64_t a1@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E0E89C4(&v8, *(void *)(a1 + 8));
  if (v8) {
    uint64_t v6 = (uint64_t *)(v8 + 1512);
  }
  else {
    uint64_t v6 = (uint64_t *)(a1 + 24);
  }
  sub_19E03E388(a3, *v6, a2);
  uint64_t v7 = v9;
  if (v9)
  {
    sub_19E0616BC(v7);
  }
}

void sub_19E0E8AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_19E0616BC(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E8ADC(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  sub_19E0E89C4(&v9, *(void *)(a1 + 8));
  if (v9) {
    uint64_t v6 = (uint64_t *)(v9 + 1512);
  }
  else {
    uint64_t v6 = (uint64_t *)(a1 + 24);
  }
  uint64_t v7 = sub_19E0A3D48(*v6, a2, a3);
  if (v10) {
    sub_19E0616BC(v10);
  }
  return v7;
}

void sub_19E0E8B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_19E0616BC(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0E8B70(uint64_t a1, uint64_t a2)
{
  sub_19E0E89C4(&v4, *(void *)(a1 + 8));
  if (!v4) {
    __assert_rtn("enumerate_common_letter_forms", "LXDynamicLexiconProxy.cpp", 169, "false && \"enumerate_common_letter_forms not supported for a detached lexicon proxy\"");
  }
  sub_19E0AD5D0(v4, a2);
  uint64_t v3 = v5;
  if (v5)
  {
    sub_19E0616BC(v3);
  }
}

void sub_19E0E8C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_19E0616BC(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E8C18(uint64_t a1)
{
  sub_19E0E89C4(&v3, *(void *)(a1 + 8));
  if (v3)
  {
    uint64_t Instance = (uint64_t)sub_19E0AD6D0(v3);
  }
  else
  {
    if (qword_1EB4FEE18 != -1) {
      dispatch_once(&qword_1EB4FEE18, &unk_1EF09F100);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    *(void *)(Instance + 16) = &unk_1EF09C630;
  }
  if (v4) {
    sub_19E0616BC(v4);
  }
  return Instance;
}

void sub_19E0E8CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_19E0616BC(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E8CF4()
{
  return 0;
}

uint64_t sub_19E0E8CFC()
{
  return 0;
}

uint64_t sub_19E0E8D04()
{
  return 0;
}

__CFString *sub_19E0E8D0C()
{
  return &stru_1EF0A2040;
}

uint64_t sub_19E0E8D18()
{
  return 0;
}

uint64_t sub_19E0E8D20()
{
  return 0;
}

double sub_19E0E8D28()
{
  return -INFINITY;
}

double sub_19E0E8D34()
{
  return 0.0;
}

double sub_19E0E8D3C()
{
  return 0.0;
}

uint64_t sub_19E0E8D48()
{
  return 0;
}

uint64_t sub_19E0E8D54()
{
  return 0;
}

uint64_t sub_19E0E8D5C()
{
  return 1;
}

uint64_t sub_19E0E8D64()
{
  return 0;
}

uint64_t sub_19E0E8D6C()
{
  return 0;
}

void sub_19E0E8D74()
{
}

uint64_t sub_19E0E8D8C()
{
  qword_1EB4FEE20 = 0;
  *(void *)algn_1EB4FEE28 = "LXCursor";
  qword_1EB4FEE30 = 0;
  unk_1EB4FEE38 = 0;
  qword_1EB4FEE40 = (uint64_t)sub_19E087C70;
  *(_OWORD *)algn_1EB4FEE48 = 0u;
  *(_OWORD *)&algn_1EB4FEE48[16] = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB4FEE80 = result;
  return result;
}

CFStringRef sub_19E0E8DE0(uint64_t a1)
{
  sub_19E0E89C4(&v5, *(void *)(a1 + 8));
  if (v5) {
    CFStringRef v2 = sub_19E0AD98C(v5);
  }
  else {
    CFStringRef v2 = sub_19E040B4C(a1 + 40);
  }
  CFStringRef v3 = v2;
  if (v6) {
    sub_19E0616BC(v6);
  }
  return v3;
}

void sub_19E0E8E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_19E0616BC(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E8E58(uint64_t a1, unsigned int a2)
{
  sub_19E0E89C4(&v5, *(void *)(a1 + 8));
  if (v5) {
    uint64_t v3 = sub_19E0ADA04(v5, a2);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v6) {
    sub_19E0616BC(v6);
  }
  return v3;
}

void sub_19E0E8EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_19E0616BC(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E8ED0(uint64_t a1)
{
  sub_19E0E89C4(&v3, *(void *)(a1 + 8));
  if (v3) {
    uint64_t v1 = sub_19E0ADE9C(v3);
  }
  else {
    uint64_t v1 = 0;
  }
  if (v4) {
    sub_19E0616BC(v4);
  }
  return v1;
}

void sub_19E0E8F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_19E0616BC(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0E8F40()
{
}

void sub_19E0E8F6C()
{
}

void sub_19E0E8F98(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09C810;
  os_release(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  CFStringRef v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_19E0616BC(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_19E0616BC(v3);
  }

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0E902C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09C810;
  os_release(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  CFStringRef v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_19E0616BC(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_19E0616BC(v3);
  }
  return a1;
}

void sub_19E0E90A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v5;
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *(NSObject **)(a1 + 24);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v9 = 0;
    _os_log_debug_impl(&dword_19E038000, v8, OS_LOG_TYPE_DEBUG, "updated the backing lexicon for a lexicon view", v9, 2u);
  }
  std::mutex::unlock(v4);
}

void sub_19E0E914C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09C7E8;
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  os_release(*(void **)(a1 + 24));
  CFStringRef v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0E91C8(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09C7E8;
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  os_release(*(void **)(a1 + 24));
  CFStringRef v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_19E0E9228(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_19E0E924C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF09D068;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0E92A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF09D068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_19E0E92C0(uint64_t result, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  int v4 = *a2;
  uint64_t v5 = "";
  while (*(unsigned __int16 *)&aK1n1114171g111[v3] != v4)
  {
    v3 += 2;
    if (v3 == 18) {
      goto LABEL_6;
    }
  }
  uint64_t v5 = &aK1n1114171g111[v3];
LABEL_6:
    goto LABEL_13;
  unint64_t v7 = 0;
  if (a3)
  {
    uint64_t v8 = 2 * a3;
    while (a2[v7] == v4)
    {
      ++v7;
      v8 -= 2;
      if (!v8)
      {
        unint64_t v7 = ((a3 - 1) & 0x7FFFFFFFFFFFFFFFLL) + 1;
        break;
      }
    }
  }
  if (v7 < *v6)
  {
LABEL_13:
    char v9 = 0;
    *(unsigned char *)uint64_t result = 0;
  }
  else
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = v7;
    char v9 = 1;
  }
  *(unsigned char *)(result + 16) = v9;
  return result;
}

uint64_t sub_19E0E936C(uint64_t a1)
{
  if (qword_1EB4FEE18 != -1) {
    dispatch_once(&qword_1EB4FEE18, &unk_1EF09F120);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 16) = &unk_1EF099DE8;
  *(void *)(Instance + 24) = a1;
  *(_DWORD *)(Instance + 32) = 0x100000;
  *(_WORD *)(Instance + 36) = 0;
  *(unsigned char *)(Instance + 38) = 0;
  *(void *)(Instance + 40) = 0;
  *(unsigned char *)(Instance + 48) = 0;
  *(_OWORD *)(Instance + 64) = 0u;
  uint64_t v3 = (uint64_t *)(Instance + 64);
  *(_OWORD *)(Instance + 80) = 0u;
  *(void *)(Instance + 96) = 0;
  int v4 = (const void *)sub_19E0A49D0(a1);
  uint64_t v5 = sub_19E0E9F38(a1);
  uint64_t v6 = (const void *)v5;
  if (!v4 || !v5) {
    __assert_rtn("MorphemeLevelLexiconCursor", "MorphemeLevelLexiconCursor.cpp", 35, "open_class_morpheme_cursor && closed_class_morpheme_cursor");
  }
  unint64_t v7 = *(void *)(Instance + 80);
  unint64_t v8 = *(void *)(Instance + 72);
  if (v8 >= v7)
  {
    uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - *v3) >> 3);
    if ((unint64_t)(v10 + 1) > 0x492492492492492) {
      goto LABEL_31;
    }
    unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *v3) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x249249249249249) {
      unint64_t v13 = 0x492492492492492;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v28 = Instance + 80;
    if (v13) {
      unint64_t v13 = (unint64_t)sub_19E0E12AC(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v24 = v13;
    unint64_t v25 = v13 + 56 * v10;
    unint64_t v27 = v13 + 56 * v14;
    sub_19E0E32B4(v25, v4);
    uint64_t v26 = v25 + 56;
    sub_19E0E12F8(v3, &v24);
    unint64_t v9 = *(void *)(Instance + 72);
    sub_19E0E1380((uint64_t)&v24);
  }
  else
  {
    unint64_t v9 = sub_19E0E32B4(v8, v4) + 56;
  }
  *(void *)(Instance + 72) = v9;
  unint64_t v15 = *(void *)(Instance + 80);
  if (v9 < v15)
  {
    sub_19E0E32B4(v9, v6);
    unint64_t v16 = v9 + 56;
    goto LABEL_29;
  }
  uint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - *v3) >> 3);
  if ((unint64_t)(v17 + 1) > 0x492492492492492) {
LABEL_31:
  }
    sub_19E041BEC();
  unint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - *v3) >> 3);
  uint64_t v19 = 2 * v18;
  if (2 * v18 <= v17 + 1) {
    uint64_t v19 = v17 + 1;
  }
  if (v18 >= 0x249249249249249) {
    unint64_t v20 = 0x492492492492492;
  }
  else {
    unint64_t v20 = v19;
  }
  uint64_t v28 = Instance + 80;
  if (v20) {
    unint64_t v20 = (unint64_t)sub_19E0E12AC(v20);
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = v20 + 56 * v17;
  unint64_t v24 = v20;
  unint64_t v25 = v22;
  unint64_t v27 = v20 + 56 * v21;
  sub_19E0E32B4(v22, v6);
  uint64_t v26 = v22 + 56;
  sub_19E0E12F8(v3, &v24);
  unint64_t v16 = *(void *)(Instance + 72);
  sub_19E0E1380((uint64_t)&v24);
LABEL_29:
  *(void *)(Instance + 72) = v16;
  CFRelease(v6);
  CFRelease(v4);
  return Instance;
}

void sub_19E0E9674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v10) {
    CFRelease(v10);
  }
  sub_19E0E0DCC((void ***)&a9);
  uint64_t v12 = *(void **)(v9 + 40);
  if (v12)
  {
    if (*(unsigned char *)(v9 + 38) == 1) {
      free(v12);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E0E96DC()
{
  qword_1EB4FEE20 = 0;
  *(void *)algn_1EB4FEE28 = "LXCursor";
  qword_1EB4FEE30 = 0;
  unk_1EB4FEE38 = 0;
  qword_1EB4FEE40 = (uint64_t)sub_19E087C70;
  *(_OWORD *)algn_1EB4FEE48 = 0u;
  *(_OWORD *)&algn_1EB4FEE48[16] = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB4FEE80 = result;
  return result;
}

const void *sub_19E0E9730(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  LODWORD(v4) = 0x100000;
  WORD2(v4) = 0;
  BYTE6(v4) = 1;
  uint64_t v5 = 0;
  sub_19E03F6F8(&v4, (uint64_t)"Morpheme-", 0, 9u);
  sub_19E0B23D4((uint64_t)v6, (unsigned __int16 *)&v4, a1 + 30136);
  if (v5 && BYTE6(v4) == 1) {
    free(v5);
  }
  sub_19E03FD18((CFStringRef *)&v4, v6);
  CFStringRef v2 = v4;
  int v4 = 0;
  sub_19E040A10(&v4);
  if (v8 && v7 == 1) {
    free(v8);
  }
  return v2;
}

void sub_19E0E9818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  if (a19)
  {
    if (a18 == 1) {
      free(a19);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E9858(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (sub_19E0A5340((unsigned __int16 *)a1, a2))
  {
    uint64_t v3 = *(char **)(a1 + 30176);
    *(_OWORD *)&v15.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
    if (v3) {
      int v4 = v3;
    }
    else {
      int v4 = (char *)(a1 + 30184);
    }
    v15.__pn_.__r_.__value_.__r.__words[0] = 0;
    uint64_t v5 = v4 - 1;
    while (*++v5)
      ;
    sub_19E041DFC(&v15.__pn_, v4, v5);
    sub_19E0D59D0((uint64_t)__dst, &v15);
    sub_19E0E9E20(&__p, (uint64_t)&off_1E599C748);
    sub_19E0E9E78(&v14, (uint64_t)__dst, (std::__fs::filesystem::path *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete(__dst[0]);
    }
    if ((v14.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v7 = &v14;
    }
    else {
      char v7 = (std::__fs::filesystem::path *)v14.__pn_.__r_.__value_.__r.__words[0];
    }
    if ((v14.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v14.__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v14.__pn_.__r_.__value_.__l.__size_;
    }
    if (size >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E04147C();
    }
    if (size >= 0x17)
    {
      uint64_t v10 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((size | 7) != 0x17) {
        uint64_t v10 = size | 7;
      }
      uint64_t v11 = v10 + 1;
      uint64_t v9 = (void **)operator new(v10 + 1);
      __dst[1] = (void *)size;
      unint64_t v17 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v17) = size;
      uint64_t v9 = __dst;
      if (!size)
      {
LABEL_26:
        *((unsigned char *)v9 + size) = 0;
        operator new();
      }
    }
    memmove(v9, v7, size);
    goto LABEL_26;
  }
  return 0;
}

std::string *sub_19E0E9E20(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  sub_19E041DFC(a1, *(char **)a2, (char *)(*(void *)a2 + *(void *)(a2 + 8)));
  return a1;
}

void sub_19E0E9E5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_19E0E9E78(std::__fs::filesystem::path *__dst, uint64_t a2, std::__fs::filesystem::path *this)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E03FA9C(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&__dst->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    __dst->__pn_.__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  if (std::__fs::filesystem::path::__root_directory(this).__size_) {
    return std::string::operator=(&__dst->__pn_, &this->__pn_);
  }
  if (std::__fs::filesystem::path::__filename(__dst).__size_) {
    std::string::push_back(&__dst->__pn_, 47);
  }
  int v6 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    char v7 = this;
  }
  else {
    char v7 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = this->__pn_.__r_.__value_.__l.__size_;
  }
  return std::string::append(&__dst->__pn_, (const std::string::value_type *)v7, size);
}

void sub_19E0E9F1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0E9F38(uint64_t a1)
{
  uint64_t v1 = (const void *)sub_19E0A49D0(a1);
  uint64_t v2 = LXCursorCreateByAdvancing((uint64_t)v1, @"+");
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

void sub_19E0E9F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E062044((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_19E0E9FA4(uint64_t a1)
{
  uint64_t v2 = *(const void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      uint64_t v3 = (const void **)*v2;
      sub_19E062044(v2 + 3, 0);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    operator delete(v4);
  }
  sub_19E062044((const void **)a1, 0);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0EA034(uint64_t a1)
{
  sub_19E0EA06C(a1);

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0EA06C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF099CD0;
  uint64_t v2 = *(void *)(a1 + 30888);
  *(void *)(a1 + 30888) = 0;
  if (v2) {
    sub_19E0E9FA4(v2);
  }
  uint64_t v3 = *(void *)(a1 + 30880);
  *(void *)(a1 + 30880) = 0;
  if (v3) {
    sub_19E0E9FA4(v3);
  }
  sub_19E0EA170((void *)(a1 + 30800));
  sub_19E0676D4(a1 + 30264);
  *(void *)a1 = &unk_1EF09B8A8;
  int v4 = *(void **)(a1 + 30240);
  if (v4 && *(unsigned char *)(a1 + 30238) == 1) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 30208);
  if (v5 && *(unsigned char *)(a1 + 30206) == 1) {
    free(v5);
  }
  int v6 = *(void **)(a1 + 30176);
  if (v6 && *(unsigned char *)(a1 + 30174) == 1) {
    free(v6);
  }
  char v7 = *(void **)(a1 + 30144);
  if (v7 && *(unsigned char *)(a1 + 30142) == 1) {
    free(v7);
  }
  sub_19E07D688(a1 + 8);
  return a1;
}

void *sub_19E0EA170(void *a1)
{
  *a1 = &unk_1EF099C70;
  sub_19E0EA1C4(a1 + 2);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    sub_19E0D054C(v2);
  }
  return a1;
}

void *sub_19E0EA1C4(void *a1)
{
  *a1 = &unk_1EF099B00;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_19E0420B4(a1 + 2);
  return a1;
}

void *sub_19E0EA21C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    v7[0] = &unk_1EF09A538;
    v7[1] = a3;
    void v7[3] = v7;
    sub_19E042830(a1 + 2, a2, (uint64_t)v7);
    return sub_19E0B4198(v7);
  }
  return result;
}

void sub_19E0EA2E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B4198((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0EA2F8()
{
  return &unk_1EF099718;
}

uint64_t sub_19E0EA304(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF099718)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0EA344(uint64_t a1, char *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  __int16 v5 = *a2;
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    sub_19E0483E0();
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v3 + 48))(v3, &v5);
}

uint64_t sub_19E0EA3A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A538;
  a2[1] = v2;
  return result;
}

void *sub_19E0EA3CC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A538;
  result[1] = v3;
  return result;
}

void sub_19E0EA414()
{
}

void sub_19E0EA42C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

BOOL sub_19E0EA448(uint64_t a1, void *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

double sub_19E0EA45C@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void *sub_19E0EA468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  v6[0] = &unk_1EF09A590;
  v6[1] = a1;
  void v6[2] = a4;
  unsigned __int16 v6[3] = v6;
  sub_19E04268C((unint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t)v6, (a5 << (a5 > 0)));
  return sub_19E0B43E4(v6);
}

void sub_19E0EA504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0EA518()
{
  return &unk_1EF099728;
}

uint64_t sub_19E0EA524(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF099728)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0EA564(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = (unint64_t)a3[1] >> 1;
  int v8 = sub_19E0E2C6C(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);

  return sub_19E0E3014(v9, v8, v6, v7, a4);
}

__n128 sub_19E0EA5D4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF09A590;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0EA5FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF09A590;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0EA648()
{
}

void *sub_19E0EA660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09A5E8;
  v5[1] = a1;
  v5[2] = a4;
  v5[3] = v5;
  sub_19E042600((uint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t)v5);
  return sub_19E0B43E4(v5);
}

void sub_19E0EA6EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0EA700()
{
  return &unk_1EF099738;
}

uint64_t sub_19E0EA70C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF099738)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0EA74C(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = (unint64_t)a3[1] >> 1;
  int v8 = sub_19E0E2C6C(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);

  return sub_19E0E3014(v9, v8, v6, v7, a4);
}

__n128 sub_19E0EA7BC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF09A5E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0EA7E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF09A5E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0EA830()
{
}

uint64_t sub_19E0EA848(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = 0;
  uint64_t v6 = sub_19E0424E8((uint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t *)&v8);
  if (v6) {
    *a4 = sub_19E0E2C6C(a1, v8);
  }
  return v6;
}

uint64_t sub_19E0EA8AC(uint64_t a1, uint64_t **a2, int **a3)
{
  std::string __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  __int16 v5 = *a2;
  uint64_t v6 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (v6 - v5) != a3[1] - *a3) {
    __assert_rtn("build", "MarisaTrie.h", 61, "keys.size() == values.size()");
  }
  uint64_t v9 = sub_19E0EAA00(a1, v5, v6, &__p);
  if (v9)
  {
    sub_19E0AA338((char **)(a1 + 40), 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    uint64_t v10 = *(void *)(a1 + 40);
    int64_t v11 = (char *)a2[1] - (char *)*a2;
    if (v11)
    {
      unint64_t v12 = v11 / 24;
      unint64_t v13 = *a3;
      std::__fs::filesystem::path v14 = (uint64_t *)__p;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      do
      {
        int v16 = *v13++;
        int v15 = v16;
        uint64_t v17 = *v14++;
        *(_DWORD *)(v10 + 4 * v17) = v15;
        --v12;
      }
      while (v12);
    }
    uint64_t v18 = (*(void *)(a1 + 48) - v10) >> 2;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v18;
  }
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_19E0EA9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0EAA00(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  std::string __p = 0;
  unint64_t v24 = 0;
  unint64_t v25 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        uint64_t v10 = (uint64_t *)*v6;
        uint64_t v9 = v6[1];
      }
      else
      {
        uint64_t v9 = *((unsigned __int8 *)v6 + 23);
        uint64_t v10 = v6;
      }
      uint64_t v11 = 2 * v9;
      if (v8 >= v25)
      {
        uint64_t v13 = (v8 - v7) >> 4;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60) {
          sub_19E041BEC();
        }
        uint64_t v15 = v25 - v7;
        if ((v25 - v7) >> 3 > v14) {
          unint64_t v14 = v15 >> 3;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        uint64_t v17 = (char *)sub_19E063BBC(v16);
        uint64_t v19 = &v17[16 * v13];
        *(void *)uint64_t v19 = v10;
        *((void *)v19 + 1) = v11;
        unint64_t v20 = (char *)__p;
        uint64_t v7 = v19;
        if (v8 != __p)
        {
          do
          {
            *((_OWORD *)v7 - 1) = *((_OWORD *)v8 - 1);
            v7 -= 16;
            v8 -= 16;
          }
          while (v8 != v20);
          unint64_t v8 = v20;
        }
        unint64_t v12 = v19 + 16;
        std::string __p = v7;
        unint64_t v25 = &v17[16 * v18];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *(void *)unint64_t v8 = v10;
        *((void *)v8 + 1) = v11;
        unint64_t v12 = v8 + 16;
      }
      unint64_t v24 = v12;
      v6 += 3;
      unint64_t v8 = (char *)v12;
    }
    while (v6 != a3);
  }
  sub_19E0420B8((uint64_t *)(a1 + 16), (uint64_t *)&__p, a4, *(_DWORD *)(a1 + 8));
  if (__p)
  {
    unint64_t v24 = __p;
    operator delete(__p);
  }
  return 1;
}

uint64_t sub_19E0EABB4(uint64_t a1, uint64_t **a2)
{
  return sub_19E0EAA00(a1, *a2, a2[1], 0);
}

uint64_t sub_19E0EABC4@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  sub_19E0538DC((uint64_t)v14);
  sub_19E04238C(a1 + 2, (uint64_t)&v15);
  sub_19E05EEA4(__p, (uint64_t)v16);
  uint64_t v4 = a1[4];
  if (v4)
  {
    int v5 = HIBYTE(v13);
    if (v13 < 0) {
      int v5 = (int)__p[1];
    }
    *(_DWORD *)char __s = v5;
    uint64_t v6 = (const std::string::value_type *)a1[3];
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    std::string::append(a2, __s, 4uLL);
    if (v13 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if (v13 >= 0) {
      std::string::size_type v8 = HIBYTE(v13);
    }
    else {
      std::string::size_type v8 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v7, v8);
    std::string::append(a2, v6, 4 * v4);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v13;
  }
  v14[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v15 = v9;
  v16[0] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19F3BA690](&v18);
}

void sub_19E0EADC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void *sub_19E0EAE08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09A748;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, unint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3 >> 1, v5);
  return sub_19E0E2EDC(v5);
}

void sub_19E0EAEB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0E2EDC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0EAEC4()
{
  return &unk_1EF099778;
}

uint64_t sub_19E0EAED0(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF099778)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0EAF10(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, 2 * a3[1], a4);
}

uint64_t sub_19E0EAF38(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A748;
  a2[1] = v2;
  return result;
}

void *sub_19E0EAF5C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A748;
  result[1] = v3;
  return result;
}

void sub_19E0EAFA4()
{
}

void *sub_19E0EAFBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF09A7A0;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, unint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3 >> 1, v5);
  return sub_19E0E2EDC(v5);
}

void sub_19E0EB064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0E2EDC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0EB078()
{
  return &unk_1EF099788;
}

uint64_t sub_19E0EB084(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF099788)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0EB0C4(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19E06F620(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, 2 * a3[1], a4);
}

uint64_t sub_19E0EB0EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09A7A0;
  a2[1] = v2;
  return result;
}

void *sub_19E0EB110(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09A7A0;
  result[1] = v3;
  return result;
}

void sub_19E0EB158()
{
}

uint64_t sub_19E0EB170(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  unsigned int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unsigned int *))(*(void *)a1 + 80))(a1, a2, a3 >> 1, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_19E0EB1D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64x2_t v41 = 0uLL;
  int v42 = 0;
  std::string __p = 0;
  int v39 = 0;
  unint64_t v40 = 0;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      uint64_t v10 = *(void **)(a3 + 8 * i);
      unint64_t v11 = *(void *)(a4 + 8 * i) >> 1;
      if (v41.i64[1] >= (unint64_t)v42)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v41.i64[1] - v41.i64[0]) >> 3) + 1;
        if (v13 > 0xAAAAAAAAAAAAAAALL) {
          sub_19E041BEC();
        }
        if (0x5555555555555556 * (((uint64_t)v42 - v41.i64[0]) >> 3) > v13) {
          unint64_t v13 = 0x5555555555555556 * (((uint64_t)v42 - v41.i64[0]) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v42 - v41.i64[0]) >> 3) >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v13;
        }
        long long v46 = &v42;
        if (v14)
        {
          if (v14 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E0416C4();
          }
          uint64_t v15 = (void **)operator new(24 * v14);
        }
        else
        {
          uint64_t v15 = 0;
        }
        unsigned int v43 = v15;
        v44.i64[0] = (uint64_t)&v15[(v41.i64[1] - v41.i64[0]) >> 3];
        v44.i64[1] = v44.i64[0];
        char v45 = &v15[3 * v14];
        sub_19E0D2320(v44.i64[0], v10, v11);
        uint64_t v16 = v44.i64[0];
        uint64_t v12 = v44.i64[1] + 24;
        v44.i64[1] += 24;
        uint64_t v17 = v41.i64[1];
        uint64_t v18 = v41.i64[0];
        if (v41.i64[1] == v41.i64[0])
        {
          int64x2_t v20 = vdupq_n_s64(v41.u64[1]);
        }
        else
        {
          do
          {
            long long v19 = *(_OWORD *)(v17 - 24);
            *(void *)(v16 - 8) = *(void *)(v17 - 8);
            *(_OWORD *)(v16 - 24) = v19;
            v16 -= 24;
            *(void *)(v17 - 16) = 0;
            *(void *)(v17 - 8) = 0;
            *(void *)(v17 - 24) = 0;
            v17 -= 24;
          }
          while (v17 != v18);
          int64x2_t v20 = v41;
          uint64_t v12 = v44.i64[1];
        }
        v41.i64[0] = v16;
        v41.i64[1] = v12;
        int64x2_t v44 = v20;
        uint64_t v21 = v42;
        int v42 = v45;
        char v45 = v21;
        unsigned int v43 = (void **)v20.i64[0];
        sub_19E0EB5CC((uint64_t)&v43);
      }
      else
      {
        sub_19E0D2320((void *)v41.i64[1], *(void **)(a3 + 8 * i), *(void *)(a4 + 8 * i) >> 1);
        uint64_t v12 = v41.i64[1] + 24;
      }
      v41.i64[1] = v12;
      if (a5)
      {
        uint64_t v22 = *(void *)(a5 + 8 * i);
        char v23 = v39;
        if ((unint64_t)v39 >= v40)
        {
          unint64_t v25 = __p;
          uint64_t v26 = (v39 - __p) >> 2;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
            sub_19E041BEC();
          }
          uint64_t v28 = v40 - (void)__p;
          if ((uint64_t)(v40 - (void)__p) >> 1 > v27) {
            unint64_t v27 = v28 >> 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29) {
            unint64_t v29 = (unint64_t)sub_19E068D84(v29);
          }
          else {
            uint64_t v30 = 0;
          }
          uint64_t v31 = (char *)(v29 + 4 * v26);
          *(_DWORD *)uint64_t v31 = v22;
          unint64_t v24 = v31 + 4;
          while (v23 != __p)
          {
            int v32 = *((_DWORD *)v23 - 1);
            v23 -= 4;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          std::string __p = v31;
          unint64_t v40 = v29 + 4 * v30;
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *(_DWORD *)int v39 = v22;
          unint64_t v24 = v39 + 4;
        }
        int v39 = v24;
      }
    }
  }
  uint64_t v33 = *a1;
  if (a5) {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 64))();
  }
  else {
    uint64_t v34 = (*(uint64_t (**)(void))(v33 + 56))();
  }
  uint64_t v35 = v34;
  if (__p) {
    operator delete(__p);
  }
  unsigned int v43 = (void **)&v41;
  sub_19E0EB540(&v43);
  return v35;
}

void sub_19E0EB4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, char *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  std::string __p = &a15;
  sub_19E0EB540((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E0EB540(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_19E0EB5CC(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_19E0EB630(void *a1)
{
  sub_19E0EA1C4(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0EB66C(void *a1)
{
  sub_19E0EA170(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0EB6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19E03F97C((uint64_t)&v5, a2 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a3);
  uint64_t v4 = v6;
  if (v6)
  {
    sub_19E0616BC(v4);
  }
}

void sub_19E0EB73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_19E0616BC(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0EB754(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = 30888;
  if (!a3) {
    uint64_t v6 = 30880;
  }
  uint64_t v7 = *(void *)(a1 + v6);
  unsigned int v45 = a2;
  std::string::size_type v8 = (uint64_t *)(v7 + 8);
  unint64_t v9 = a2;
  unint64_t v10 = *(void *)(v7 + 16);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = a2;
      if (v10 <= a2) {
        unint64_t v12 = a2 % v10;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & a2;
    }
    unint64_t v13 = *(uint64_t ***)(*v8 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            goto LABEL_58;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (const void *)LXCursorCreateByAdvancingWithUTF32(*(void *)v7, &v45, 1);
  unint64_t v3 = (unint64_t)v16;
  unint64_t v10 = *(void *)(v7 + 16);
  if (!v10) {
    goto LABEL_36;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v4 = v9;
    if (v10 <= v9) {
      unint64_t v4 = v9 % v10;
    }
  }
  else
  {
    unint64_t v4 = (v10 - 1) & v9;
  }
  uint64_t v18 = *(uint64_t ***)(*v8 + 8 * v4);
  if (!v18 || (long long v19 = *v18) == 0)
  {
LABEL_36:
    uint64_t v21 = operator new(0x20uLL);
    void *v21 = 0;
    v21[1] = v9;
    void v21[3] = v3;
    *((_DWORD *)v21 + 4) = a2;
    float v22 = (float)(unint64_t)(*(void *)(v7 + 32) + 1);
    float v23 = *(float *)(v7 + 40);
    if (!v10 || (float)(v23 * (float)v10) < v22)
    {
      BOOL v24 = 1;
      if (v10 >= 3) {
        BOOL v24 = (v10 & (v10 - 1)) != 0;
      }
      unint64_t v25 = v24 | (2 * v10);
      unint64_t v26 = vcvtps_u32_f32(v22 / v23);
      if (v25 <= v26) {
        size_t v27 = v26;
      }
      else {
        size_t v27 = v25;
      }
      sub_19E08A5BC(v7 + 8, v27);
      unint64_t v10 = *(void *)(v7 + 16);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v10 <= v9) {
          unint64_t v4 = v9 % v10;
        }
        else {
          unint64_t v4 = v9;
        }
      }
      else
      {
        unint64_t v4 = (v10 - 1) & v9;
      }
    }
    uint64_t v28 = *v8;
    unint64_t v29 = *(void **)(*v8 + 8 * v4);
    if (v29)
    {
      void *v21 = *v29;
    }
    else
    {
      void *v21 = *(void *)(v7 + 24);
      *(void *)(v7 + 24) = v21;
      *(void *)(v28 + 8 * v4) = v7 + 24;
      if (!*v21)
      {
LABEL_57:
        ++*(void *)(v7 + 32);
        goto LABEL_58;
      }
      unint64_t v30 = *(void *)(*v21 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v30 >= v10) {
          v30 %= v10;
        }
      }
      else
      {
        v30 &= v10 - 1;
      }
      unint64_t v29 = (void *)(*v8 + 8 * v30);
    }
    void *v29 = v21;
    goto LABEL_57;
  }
  while (1)
  {
    unint64_t v20 = v19[1];
    if (v20 == v9) {
      break;
    }
    if (v17.u32[0] > 1uLL)
    {
      if (v20 >= v10) {
        v20 %= v10;
      }
    }
    else
    {
      v20 &= v10 - 1;
    }
    if (v20 != v4) {
      goto LABEL_36;
    }
LABEL_35:
    long long v19 = (uint64_t *)*v19;
    if (!v19) {
      goto LABEL_36;
    }
  }
  if (*((_DWORD *)v19 + 4) != a2) {
    goto LABEL_35;
  }
  if (v16)
  {
    CFRelease(v16);
    unint64_t v10 = *(void *)(v7 + 16);
  }
LABEL_58:
  if (v10)
  {
    uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v10 <= v9) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
    int v32 = *(void ***)(*v8 + 8 * v3);
    if (v32)
    {
      uint64_t v33 = *v32;
      if (*v32)
      {
        do
        {
          unint64_t v34 = v33[1];
          if (v34 == v9)
          {
            if (*((_DWORD *)v33 + 4) == a2) {
              return v33[3];
            }
          }
          else
          {
            if (v31.u32[0] > 1uLL)
            {
              if (v34 >= v10) {
                v34 %= v10;
              }
            }
            else
            {
              v34 &= v10 - 1;
            }
            if (v34 != v3) {
              break;
            }
          }
          uint64_t v33 = (void *)*v33;
        }
        while (v33);
      }
    }
  }
  uint64_t v33 = operator new(0x20uLL);
  *uint64_t v33 = 0;
  v33[1] = v9;
  v33[3] = 0;
  *((_DWORD *)v33 + 4) = a2;
  float v35 = (float)(unint64_t)(*(void *)(v7 + 32) + 1);
  float v36 = *(float *)(v7 + 40);
  if (v10 && (float)(v36 * (float)v10) >= v35)
  {
    unint64_t v9 = v3;
  }
  else
  {
    BOOL v37 = 1;
    if (v10 >= 3) {
      BOOL v37 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v38 = v37 | (2 * v10);
    unint64_t v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39) {
      size_t v40 = v39;
    }
    else {
      size_t v40 = v38;
    }
    sub_19E08A5BC(v7 + 8, v40);
    unint64_t v10 = *(void *)(v7 + 16);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9) {
        v9 %= v10;
      }
    }
    else
    {
      unint64_t v9 = (v10 - 1) & v9;
    }
  }
  uint64_t v41 = *v8;
  int v42 = *(void **)(*v8 + 8 * v9);
  if (v42)
  {
    *uint64_t v33 = *v42;
    goto LABEL_95;
  }
  *uint64_t v33 = *(void *)(v7 + 24);
  *(void *)(v7 + 24) = v33;
  *(void *)(v41 + 8 * v9) = v7 + 24;
  if (*v33)
  {
    unint64_t v43 = *(void *)(*v33 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v43 >= v10) {
        v43 %= v10;
      }
    }
    else
    {
      v43 &= v10 - 1;
    }
    int v42 = (void *)(*v8 + 8 * v43);
LABEL_95:
    void *v42 = v33;
  }
  ++*(void *)(v7 + 32);
  return v33[3];
}

void sub_19E0EBC1C(_Unwind_Exception *a1)
{
  sub_19E062044(v2, 0);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t LXVulgarWordUsageDatabaseCreate(const __CFString *a1, CFErrorRef *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (qword_1EB4FEB88 != -1) {
    dispatch_once(&qword_1EB4FEB88, &unk_1EF09F140);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(_OWORD *)(Instance + 16) = 0u;
  uint64_t v5 = (sqlite3 **)(Instance + 16);
  *(_OWORD *)(Instance + 32) = 0u;
  if (qword_1EB4FEC08 != -1) {
    dispatch_once(&qword_1EB4FEC08, &unk_1EF098DE8);
  }
  sub_19E03F0BC((uint64_t)v31, a1);
  if (v32) {
    uint64_t v6 = (std::__fs::filesystem::path *)v32;
  }
  else {
    uint64_t v6 = (std::__fs::filesystem::path *)&v33;
  }
  uint64_t v7 = (std::mutex *)qword_1EB4FEB80;
  std::mutex::lock((std::mutex *)qword_1EB4FEB80);
  int v8 = *(char *)(Instance + 47);
  if (v8 >= 0) {
    size_t v9 = *(unsigned __int8 *)(Instance + 47);
  }
  else {
    size_t v9 = *(void *)(Instance + 32);
  }
  if (v9 != strlen((const char *)v6)
    || (v8 >= 0 ? (unint64_t v10 = (const void *)(Instance + 24)) : (unint64_t v10 = *(const void **)(Instance + 24)), memcmp(v10, v6, v9)))
  {
    v29.__r_.__value_.__r.__words[0] = 0;
    v29.__r_.__value_.__l.__size_ = (std::string::size_type)&v29;
    v29.__r_.__value_.__r.__words[2] = 0x2000000000;
    uint8x8_t v11 = (unsigned int (*)(void))off_1EB4FEC00;
    unint64_t v30 = off_1EB4FEC00;
    if (!off_1EB4FEC00)
    {
      *(void *)&long long ppStmt = MEMORY[0x1E4F143A8];
      *((void *)&ppStmt + 1) = 0x40000000;
      float v35 = sub_19E0B2528;
      float v36 = &unk_1E599C1F8;
      BOOL v37 = &v29;
      sub_19E0B2528((uint64_t)&ppStmt);
      uint8x8_t v11 = *(unsigned int (**)(void))(v29.__r_.__value_.__l.__size_ + 24);
    }
    _Block_object_dispose(&v29, 8);
    if (!v11)
    {
      dlerror();
      uint64_t result = abort_report_np();
      __break(1u);
      return result;
    }
    if (v11() != 1) {
      goto LABEL_39;
    }
    ppDb = 0;
    unsigned int v12 = sqlite3_open_v2((const char *)v6, &ppDb, 3145734, 0);
    if (v12)
    {
      unint64_t v13 = sqlite3_errmsg(ppDb);
      CFStringRef v14 = CFStringCreateWithFormat(0, 0, @"VulgarWordUsageDatabase: Error creating/opening database at: %s, %s", v6, v13);
      *(void *)&long long ppStmt = v14;
      sub_19E0B2750(v12, v14, a2);
      sqlite3_close(ppDb);
      if (v14) {
        CFRelease(v14);
      }
      goto LABEL_39;
    }
    if (!ppDb)
    {
LABEL_39:
      *uint64_t v5 = 0;
      goto LABEL_40;
    }
    size_t v15 = strlen((const char *)v6);
    CFURLRef v16 = CFURLCreateFromFileSystemRepresentation(v3, (const UInt8 *)v6, v15, 0);
    if (!CFURLSetResourcePropertyForKey(v16, (CFStringRef)*MEMORY[0x1E4F1D680], (CFTypeRef)*MEMORY[0x1E4F1CFD0], a2))
    {
      unsigned __int8 v18 = atomic_load(byte_1E9457268);
      if (v18)
      {
        unsigned __int8 v19 = atomic_load(byte_1E94578A0);
        if (v19)
        {
          printf("RejectionsDatabase: failed to set backup exclusion for database at: %s", (const char *)v6);
          putchar(10);
        }
        else
        {
          unint64_t v20 = sub_19E08D084();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            LODWORD(ppStmt) = 136315138;
            *(void *)((char *)&ppStmt + 4) = v6;
            _os_log_impl(&dword_19E038000, v20, OS_LOG_TYPE_ERROR, "RejectionsDatabase: failed to set backup exclusion for database at: %s", (uint8_t *)&ppStmt, 0xCu);
          }
        }
      }
      CFRelease(v16);
      sqlite3_close(ppDb);
      remove(v6, v23);
      goto LABEL_39;
    }
    CFRelease(v16);
    if (!ppDb) {
      __assert_rtn("attempt_database_migration", "LXVulgarWordUsageDatabaseImpl.cpp", 176, "db");
    }
    *(void *)&long long ppStmt = 0;
    if (sqlite3_prepare_v2(ppDb, "SELECT value FROM properties WHERE key = 'version'", -1, (sqlite3_stmt **)&ppStmt, 0))
    {
LABEL_27:
      BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.Lexicon-framework");
      *(void *)&long long ppStmt = CFBundleCopyResourceURL(BundleWithIdentifier, @"vulgar_word_usage_database_schema", @"sql", 0);
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)CFURLCopyFileSystemPath((CFURLRef)ppStmt, kCFURLPOSIXPathStyle);
      CFStringGetLength((CFStringRef)v29.__r_.__value_.__l.__data_);
      operator new[]();
    }
    if (sqlite3_step((sqlite3_stmt *)ppStmt) != 100)
    {
      sqlite3_finalize((sqlite3_stmt *)ppStmt);
      CFStringRef v22 = CFStringCreateWithFormat(0, 0, @"VulgarWordUsageDatabase: Error reading the library version: %d", 0);
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      sub_19E0B2750(0, v22, a2);
      if (v22) {
        CFRelease(v22);
      }
      goto LABEL_27;
    }
    int v21 = sqlite3_column_int((sqlite3_stmt *)ppStmt, 0);
    sqlite3_finalize((sqlite3_stmt *)ppStmt);
    if (v21 != 2) {
      goto LABEL_27;
    }
    unint64_t v25 = ppDb;
    *uint64_t v5 = ppDb;
    if (!v25)
    {
LABEL_40:
      char v24 = 0;
      if (*(char *)(Instance + 47) < 0)
      {
        **(unsigned char **)(Instance + 24) = 0;
        *(void *)(Instance + 32) = 0;
      }
      else
      {
        *(unsigned char *)(Instance + 24) = 0;
        *(unsigned char *)(Instance + 47) = 0;
      }
      goto LABEL_46;
    }
    sub_19E069118((std::string *)(Instance + 24), (char *)v6);
  }
  char v24 = 1;
LABEL_46:
  std::mutex::unlock(v7);
  if (v32 && v31[6] == 1) {
    free(v32);
  }
  if ((v24 & 1) == 0)
  {
    CFRelease((CFTypeRef)Instance);
    return 0;
  }
  return Instance;
}

void sub_19E0EC5C8()
{
}

uint64_t sub_19E0EC630()
{
  qword_1EB4FEB90 = 0;
  *(void *)algn_1EB4FEB98 = "LXVulgarWordUsageDatabase";
  qword_1EB4FEBA0 = 0;
  unk_1EB4FEBA8 = 0;
  qword_1EB4FEBB0 = (uint64_t)sub_19E0EC684;
  unk_1EB4FEBB8 = 0u;
  unk_1EB4FEBC8 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB4FEBF0 = result;
  return result;
}

void sub_19E0EC684(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v2 = sqlite3_close(*(sqlite3 **)(a1 + 16));
  int v3 = v2;
  if (v2)
  {
    unsigned __int8 v4 = atomic_load(byte_1E9457268);
    if (v4)
    {
      unsigned __int8 v5 = atomic_load(byte_1E94578A0);
      if (v5)
      {
        printf("VulgarWordUsageDatabase: Error closing database: %d", v2);
        putchar(10);
      }
      else
      {
        uint64_t v6 = sub_19E08D084();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109120;
          int v8 = v3;
          _os_log_impl(&dword_19E038000, v6, OS_LOG_TYPE_ERROR, "VulgarWordUsageDatabase: Error closing database: %d", buf, 8u);
        }
      }
    }
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void sub_19E0EC784(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_19E04137C(a1);
}

uint64_t LXVulgarWordUsageDatabaseIncrementUsageCount(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, CFDictionaryRef theDict, CFErrorRef *a6)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (theDict) {
      CFLocaleRef Value = (const __CFLocale *)CFDictionaryGetValue(theDict, @"wordLocale");
    }
    else {
      CFLocaleRef Value = 0;
    }
    sub_19E0ECBD8((uint64_t)v28, a2, Value);
    if (v29) {
      CFStringRef v14 = (const char *)v29;
    }
    else {
      CFStringRef v14 = (const char *)v30;
    }
    sub_19E03F0BC((uint64_t)v25, a3);
    size_t v15 = (const char *)v26;
    sub_19E03F0BC((uint64_t)v22, a4);
    if (!v15) {
      size_t v15 = (const char *)&v27;
    }
    if (v23) {
      CFURLRef v16 = (const char *)v23;
    }
    else {
      CFURLRef v16 = (const char *)&v24;
    }
    uint8x8_t v17 = (std::mutex *)qword_1EB4FEB80;
    std::mutex::lock((std::mutex *)qword_1EB4FEB80);
    sub_19E0413C8(__p, "usage_count + 1");
    *(double *)&uint64_t v18 = CFAbsoluteTimeGetCurrent();
    uint64_t v13 = sub_19E0B2A10((sqlite3 **)(a1 + 16), (int)__p, v14, v15, v16, v18, 1, theDict, a6);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    std::mutex::unlock(v17);
    if (v23 && v22[6] == 1) {
      free(v23);
    }
    if (v26 && v25[6] == 1) {
      free(v26);
    }
    if (v29 && v28[6] == 1) {
      free(v29);
    }
  }
  else
  {
    sub_19E0EC9F4(@"VulgarWordUsageDatabase: Error incrementing the usage count -- provided database reference is NULL", a6);
    return 0;
  }
  return v13;
}

void sub_19E0EC960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, void *a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,void *a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,void *a32)
{
  std::mutex::unlock(v32);
  if (a20 && a19 == 1) {
    free(a20);
  }
  if (a26 && a25 == 1) {
    free(a26);
  }
  if (a32)
  {
    if (a31 == 1) {
      free(a32);
    }
  }
  _Unwind_Resume(a1);
}

void sub_19E0EC9F4(CFStringRef theString, CFErrorRef *a2)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v4 = atomic_load(byte_1E9457268);
  if (v4)
  {
    unsigned __int8 v5 = atomic_load(byte_1E94578A0);
    if (v5)
    {
      sub_19E03F0BC((uint64_t)&v12, theString);
      int v8 = (const char *)v13;
      if (!v13) {
        int v8 = (const char *)v14;
      }
      printf("%s", v8);
      if (v13 && BYTE6(v12) == 1) {
        free(v13);
      }
      putchar(10);
    }
    else
    {
      uint64_t v6 = sub_19E08D084();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        sub_19E03F0BC((uint64_t)&v12, theString);
        uint64_t v7 = v13;
        if (!v13) {
          uint64_t v7 = v14;
        }
        *(_DWORD *)long long buf = 136315138;
        uint8x8_t v11 = v7;
        _os_log_impl(&dword_19E038000, v6, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
        if (v13 && BYTE6(v12) == 1) {
          free(v13);
        }
      }
    }
  }
  if (a2)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    unsigned int v12 = Mutable;
    CFDictionarySetValue(Mutable, @"errorMessageKey", theString);
    *a2 = CFErrorCreate(0, @"com.apple.LXVulgarWordUsageDatabase", 1, Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

void sub_19E0ECBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_19E04137C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0ECBD8(uint64_t a1, CFStringRef theString, const __CFLocale *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theString);
  CFStringTransform(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F1D4F0], 0);
  sub_19E03F0BC((uint64_t)v6, MutableCopy);
  sub_19E0A6D94(a1, v6, a3);
  if (v8 && v7 == 1) {
    free(v8);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_19E0ECCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  if (a2) {
    sub_19E04137C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0ECCF8(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
}

uint64_t LXVulgarWordUsageDatabaseDecrementUsageCount(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, CFDictionaryRef theDict, CFErrorRef *a6)
{
  v29[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (theDict) {
      CFLocaleRef Value = (const __CFLocale *)CFDictionaryGetValue(theDict, @"wordLocale");
    }
    else {
      CFLocaleRef Value = 0;
    }
    sub_19E0ECBD8((uint64_t)v27, a2, Value);
    if (v28) {
      CFStringRef v14 = (const char *)v28;
    }
    else {
      CFStringRef v14 = (const char *)v29;
    }
    sub_19E03F0BC((uint64_t)v24, a3);
    size_t v15 = (const char *)v25;
    sub_19E03F0BC((uint64_t)v21, a4);
    if (!v15) {
      size_t v15 = (const char *)&v26;
    }
    if (v22) {
      CFURLRef v16 = (const char *)v22;
    }
    else {
      CFURLRef v16 = (const char *)&v23;
    }
    uint8x8_t v17 = (std::mutex *)qword_1EB4FEB80;
    std::mutex::lock((std::mutex *)qword_1EB4FEB80);
    sub_19E0413C8(__p, "CASE WHEN usage_count > 0 THEN usage_count - 1 ELSE 0 END");
    uint64_t v13 = sub_19E0B2A10((sqlite3 **)(a1 + 16), (int)__p, v14, v15, v16, 0, 0, theDict, a6);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    std::mutex::unlock(v17);
    if (v22 && v21[6] == 1) {
      free(v22);
    }
    if (v25 && v24[6] == 1) {
      free(v25);
    }
    if (v28 && v27[6] == 1) {
      free(v28);
    }
  }
  else
  {
    sub_19E0EC9F4(@"VulgarWordUsageDatabase: Error decrementing the usage count -- provided database reference is NULL", a6);
    return 0;
  }
  return v13;
}

void sub_19E0ECEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, void *a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,void *a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,void *a32)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v32);
  if (a20 && a19 == 1) {
    free(a20);
  }
  if (a26 && a25 == 1) {
    free(a26);
  }
  if (a32)
  {
    if (a31 == 1) {
      free(a32);
    }
  }
  _Unwind_Resume(a1);
}

BOOL LXVulgarWordUsageDatabaseCanAutocorrect(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, CFDictionaryRef theDict, CFErrorRef *a6)
{
  v45[2] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    sub_19E0EC9F4(@"VulgarWordUsageDatabase: Error checking whether can autocorrect -- provided database reference is NULL", a6);
    return 0;
  }
  if (theDict) {
    CFLocaleRef Value = (const __CFLocale *)CFDictionaryGetValue(theDict, @"wordLocale");
  }
  else {
    CFLocaleRef Value = 0;
  }
  sub_19E0ECBD8((uint64_t)v40, a2, Value);
  if (v41) {
    CFStringRef v14 = (const char *)v41;
  }
  else {
    CFStringRef v14 = (const char *)&v42;
  }
  sub_19E03F0BC((uint64_t)v37, a3);
  size_t v15 = (const char *)v38;
  sub_19E03F0BC((uint64_t)v34, a4);
  if (v15) {
    CFURLRef v16 = v15;
  }
  else {
    CFURLRef v16 = (const char *)&v39;
  }
  if (v35) {
    uint8x8_t v17 = (const char *)v35;
  }
  else {
    uint8x8_t v17 = (const char *)&v36;
  }
  uint64_t v18 = (std::mutex *)qword_1EB4FEB80;
  std::mutex::lock((std::mutex *)qword_1EB4FEB80);
  sub_19E0B26DC((uint64_t)v43, theDict);
  long long ppStmt = 0;
  uint64_t v19 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 16), "SELECT usage_count FROM vword_usage WHERE app = :app AND recipient = :recipient AND vword = :vword AND word_reading = :word_reading", -1, &ppStmt, 0);
  unsigned int v20 = v19;
  if (v19)
  {
    CFStringRef v21 = CFStringCreateWithFormat(0, 0, @"VulgarWordUsageDatabase: Error compiling a SELECT statement: %d", v19);
    sub_19E0B2750(v20, v21, a6);
    if (v21) {
      CFRelease(v21);
    }
    goto LABEL_18;
  }
  CFStringRef v22 = ppStmt;
  int v23 = sqlite3_bind_parameter_index(ppStmt, ":app");
  sqlite3_bind_text(v22, v23, v16, -1, 0);
  uint64_t v24 = ppStmt;
  int v25 = sqlite3_bind_parameter_index(ppStmt, ":recipient");
  sqlite3_bind_text(v24, v25, v17, -1, 0);
  uint64_t v26 = ppStmt;
  int v27 = sqlite3_bind_parameter_index(ppStmt, ":vword");
  sqlite3_bind_text(v26, v27, v14, -1, 0);
  uint64_t v28 = ppStmt;
  int v29 = sqlite3_bind_parameter_index(ppStmt, ":word_reading");
  if (v44) {
    unint64_t v30 = v44;
  }
  else {
    unint64_t v30 = (const char *)v45;
  }
  sqlite3_bind_text(v28, v29, v30, -1, 0);
  if (sqlite3_step(ppStmt) == 100) {
    int v31 = sqlite3_column_int(ppStmt, 0);
  }
  else {
    int v31 = 0;
  }
  sqlite3_finalize(ppStmt);
  if (v31 <= 2)
  {
    if (v31 < 1)
    {
LABEL_18:
      BOOL v13 = 0;
      goto LABEL_29;
    }
    BOOL v13 = sub_19E0B317C(*(sqlite3 **)(a1 + 16), v14, theDict, a6);
  }
  else
  {
    BOOL v13 = 1;
  }
LABEL_29:
  if (v44 && v43[6] == 1) {
    free(v44);
  }
  std::mutex::unlock(v18);
  if (v35 && v34[6] == 1) {
    free(v35);
  }
  if (v38 && v37[6] == 1) {
    free(v38);
  }
  if (v41 && v40[6] == 1) {
    free(v41);
  }
  return v13;
}

void sub_19E0ED2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,void *a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,void *a27)
{
  if (a2) {
    sub_19E04137C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL LXVulgarWordUsageDatabaseCanAutocorrectSomewhere(uint64_t a1, const __CFString *a2, CFDictionaryRef theDict, CFErrorRef *a4)
{
  void v16[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (theDict) {
      CFLocaleRef Value = (const __CFLocale *)CFDictionaryGetValue(theDict, @"wordLocale");
    }
    else {
      CFLocaleRef Value = 0;
    }
    sub_19E0ECBD8((uint64_t)v14, a2, Value);
    unint64_t v10 = (const char *)v15;
    uint8x8_t v11 = (std::mutex *)qword_1EB4FEB80;
    std::mutex::lock((std::mutex *)qword_1EB4FEB80);
    if (v10) {
      unsigned int v12 = v10;
    }
    else {
      unsigned int v12 = (const char *)v16;
    }
    BOOL v9 = sub_19E0B317C(*(sqlite3 **)(a1 + 16), v12, theDict, a4);
    std::mutex::unlock(v11);
    if (v15 && v14[6] == 1) {
      free(v15);
    }
  }
  else
  {
    sub_19E0EC9F4(@"VulgarWordUsageDatabase: Error checking whether can autocorrect somewhere -- provided database reference is NULL", a4);
    return 0;
  }
  return v9;
}

void sub_19E0ED494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  std::mutex::unlock(v13);
  if (a13)
  {
    if (a12 == 1) {
      free(a13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t LXVulgarWordUsageDatabasePerformMaintenance(uint64_t a1, CFErrorRef *a2)
{
  if (a1)
  {
    unsigned __int8 v4 = (std::mutex *)qword_1EB4FEB80;
    std::mutex::lock((std::mutex *)qword_1EB4FEB80);
    long long ppStmt = 0;
    uint64_t v5 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 16), "DELETE FROM vword_usage WHERE last_use_timestamp < :threshold", -1, &ppStmt, 0);
    unsigned int v6 = v5;
    if (v5)
    {
      CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"VulgarWordUsageDatabase: Error compiling a DELETE WHERE statement: %d", v5);
      sub_19E0B2750(v6, v7, a2);
      if (v7) {
        CFRelease(v7);
      }
    }
    else
    {
      double Current = CFAbsoluteTimeGetCurrent();
      unint64_t v10 = ppStmt;
      int v11 = sqlite3_bind_parameter_index(ppStmt, ":threshold");
      sqlite3_bind_double(v10, v11, Current + -15552000.0);
      uint64_t v12 = sqlite3_step(ppStmt);
      sqlite3_finalize(ppStmt);
      if (v12 == 101)
      {
        uint64_t v8 = 1;
LABEL_11:
        std::mutex::unlock(v4);
        return v8;
      }
      CFStringRef v13 = CFStringCreateWithFormat(0, 0, @"VulgarWordUsageDatabase: Error evaluating a DELETE WHERE statement: %d", v12);
      sub_19E0B2750(v12, v13, a2);
      if (v13) {
        CFRelease(v13);
      }
    }
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  sub_19E0EC9F4(@"VulgarWordUsageDatabase: Error performing database maintenance -- provided database reference is NULL", a2);
  return 0;
}

void sub_19E0ED640(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL LXVulgarWordUsageDatabaseReset(uint64_t a1, CFErrorRef *a2)
{
  if (a1)
  {
    unsigned __int8 v4 = (std::mutex *)qword_1EB4FEB80;
    std::mutex::lock((std::mutex *)qword_1EB4FEB80);
    uint64_t v5 = sqlite3_exec(*(sqlite3 **)(a1 + 16), "DELETE FROM vword_usage", 0, 0, 0);
    unsigned int v6 = v5;
    if (v5)
    {
      CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"VulgarWordUsageDatabase: Error resetting the database: %d", v5);
      sub_19E0B2750(v6, v7, a2);
      if (v7) {
        CFRelease(v7);
      }
    }
    BOOL v8 = v6 == 0;
    std::mutex::unlock(v4);
  }
  else
  {
    sub_19E0EC9F4(@"VulgarWordUsageDatabase: Error resetting the database -- provided database reference is NULL", a2);
    return 0;
  }
  return v8;
}

void sub_19E0ED768(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E0ED798(uint64_t a1)
{
  sub_19E0ED7D0(a1);

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0ED7D0(uint64_t a1)
{
  *(void *)a1 = &unk_1EF099818;
  int v2 = (const void **)(a1 + 8);
  sub_19E0ED838((uint64_t **)(a1 + 24), 0);
  sub_19E041524((const void **)(a1 + 16), 0);
  sub_19E03D880(v2, 0);
  return a1;
}

uint64_t **sub_19E0ED838(uint64_t **result, uint64_t *a2)
{
  int v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = v2[185];
    v2[185] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = v2[184];
    v2[184] = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v2[183];
    v2[183] = 0;
    if (v5) {
      sub_19E0DF24C(v5);
    }
    v2[11] = (uint64_t)&unk_1EF09C8E8;
    unsigned int v6 = (void *)v2[180];
    if (v6 && *((unsigned char *)v2 + 1438) == 1) {
      free(v6);
    }
    sub_19E03A444((uint64_t)(v2 + 173));
    uint64_t v7 = v2[8];
    v2[8] = 0;
    if (v7) {
      sub_19E0D054C(v7);
    }
    BOOL v8 = (std::__shared_weak_count *)v2[4];
    if (v8) {
      sub_19E0616BC(v8);
    }
    uint64_t v9 = v2[1];
    v2[1] = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = *v2;
    *int v2 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    JUMPOUT(0x19F3BA710);
  }
  return result;
}

void sub_19E0ED9C0(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_19E0EDA44(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19E0EDA44(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_19E0EDAAC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 88);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_19E03FA9C((unsigned char *)(a1 + 8), *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 8) = v4;
  }
  uint64_t v5 = (unsigned char *)(a1 + 32);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_19E03FA9C(v5, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 48) = *(void *)(a2 + 64);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 72);
  return a1;
}

void sub_19E0EDB48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0EDB64()
{
  qword_1E9457800 = 0;
  *(void *)algn_1E9457808 = "LXTransliterationEntry";
  qword_1E9457810 = 0;
  unk_1E9457818 = 0;
  qword_1E9457820 = (uint64_t)sub_19E0EDBB8;
  unk_1E9457828 = 0u;
  unk_1E9457838 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1E9457860 = result;
  return result;
}

void sub_19E0EDBB8(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0)
  {
    int v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

uint64_t sub_19E0EDC10(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void *sub_19E0EDC6C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_19E0A1A48(result, a4);
    uint64_t result = (void *)sub_19E0EDCF0(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19E0EDCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_19E076F34(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0EDCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_19E039858(a3 + v6, (unsigned __int16 *)(a1 + v6));
      v6 += 32;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_19E0EDD94(uint64_t *a1, unsigned __int16 *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (a4 > (v8 - *a1) >> 5)
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      int v11 = (void *)*a1;
      if (v10 != v9)
      {
        do
        {
          uint64_t v12 = *(void **)(v10 - 24);
          if (v12 && *(unsigned char *)(v10 - 26) == 1) {
            free(v12);
          }
          v10 -= 32;
        }
        while (v10 != v9);
        int v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59) {
      sub_19E041BEC();
    }
    uint64_t v13 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v13 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    sub_19E0A1A48(a1, v14);
    uint64_t v15 = sub_19E0EDCF0((uint64_t)v6, a3, a1[1]);
LABEL_23:
    a1[1] = v15;
    return;
  }
  uint64_t v16 = a1[1];
  unint64_t v17 = (v16 - v9) >> 5;
  if (v17 < a4)
  {
    uint64_t v18 = (uint64_t)&a2[16 * v17];
    if (v16 != v9)
    {
      uint64_t v19 = 32 * v17;
      do
      {
        sub_19E03CD54(v9, v6);
        v6 += 16;
        v9 += 32;
        v19 -= 32;
      }
      while (v19);
      uint64_t v9 = a1[1];
    }
    uint64_t v15 = sub_19E0EDCF0(v18, a3, v9);
    goto LABEL_23;
  }
  if (a2 != (unsigned __int16 *)a3)
  {
    do
    {
      sub_19E03CD54(v9, v6);
      v6 += 16;
      v9 += 32;
    }
    while (v6 != (unsigned __int16 *)a3);
    uint64_t v16 = a1[1];
  }
  while (v16 != v9)
  {
    unsigned int v20 = *(void **)(v16 - 24);
    if (v20 && *(unsigned char *)(v16 - 26) == 1) {
      free(v20);
    }
    v16 -= 32;
  }
  a1[1] = v9;
}

void sub_19E0EDF2C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19E0EDF38(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_WORD *)(a1 + 2) = 16;
  *(unsigned char *)(a1 + 6) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 37) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 76) = 0;
  *(_WORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = 1;
  *(void *)(a1 + 88) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0x100000;
  uint64_t v8 = (unsigned __int16 *)(a1 + 104);
  *(_WORD *)(a1 + 108) = 0;
  *(unsigned char *)(a1 + 110) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 136) = 0;
  uint64_t v9 = (unsigned __int16 *)(a1 + 136);
  *(_WORD *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  v120 = (UChar *)(a1 + 256);
  *(_DWORD *)(a1 + 192) = 0;
  v119 = (UChar *)(a1 + 280);
  *(_DWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(unsigned char *)(a1 + 304) = 0;
  uint64_t v10 = *a4;
  *(void *)(a1 + 312) = *a4;
  uint64_t v11 = a4[1];
  *(void *)(a1 + 320) = v11;
  if (v11)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = *(void *)(a1 + 312);
  }
  *(void *)(a1 + 328) = a5;
  *(_DWORD *)(a1 + 336) = 0;
  if (!v10) {
    __assert_rtn("UnigramWord", "UnigramWord.cpp", 76, "m_collator && \"Missing collator\"");
  }
  *(_DWORD *)long long buf = 0x100000;
  *(_WORD *)&uint8_t buf[4] = 0;
  buf[6] = 1;
  *(void *)&buf[8] = 0;
  sub_19E03F6F8(buf, (uint64_t)":", 0, 1u);
  sub_19E0DD36C(&v123, a2, (unsigned __int16 *)buf);
  if (*(void *)&buf[8] && buf[6] == 1) {
    free(*(void **)&buf[8]);
  }
  uint64_t v12 = v123;
  LODWORD(v148) = 0x100000;
  WORD2(v148) = 0;
  BYTE6(v148) = 1;
  __int16 v149 = 0;
  sub_19E03F6F8(&v148, (uint64_t)" \t\n", 0, 3u);
  sub_19E0B1AD4(buf, v12, (unsigned __int16 *)&v148);
  sub_19E03CD54((uint64_t)v8, (unsigned __int16 *)buf);
  if (*(void *)&buf[8] && buf[6] == 1) {
    free(*(void **)&buf[8]);
  }
  if (v149 && BYTE6(v148) == 1) {
    free(v149);
  }
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 312) + 8))(buf);
  if (*v9 >= 0xFu)
  {
    uint64_t v13 = *(void *)(a1 + 144);
    if (v13) {
      MEMORY[0x19F3BA6E0](v13, 0x1000C8077774924);
    }
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)buf;
  sub_19E039858((uint64_t)v131, v8);
  unint64_t v14 = v123;
  if ((unint64_t)(v124 - (void)v123) >= 0x21)
  {
    int v15 = 0;
    unint64_t v16 = 1;
    while (1)
    {
      sub_19E039858((uint64_t)&v148, &v14[16 * v16]);
      *(_DWORD *)long long buf = 0x100000;
      *(_WORD *)&uint8_t buf[4] = 0;
      buf[6] = 1;
      *(void *)&buf[8] = 0;
      sub_19E03F6F8(buf, (uint64_t)"=", 0, 1u);
      sub_19E0DD36C(dest, (unsigned __int16 *)&v148, (unsigned __int16 *)buf);
      if (*(void *)&buf[8] && buf[6] == 1) {
        free(*(void **)&buf[8]);
      }
      unint64_t v17 = *(unsigned __int16 **)dest;
      *(_DWORD *)long long buf = 0x100000;
      *(_WORD *)&uint8_t buf[4] = 0;
      buf[6] = 1;
      *(void *)&buf[8] = 0;
      sub_19E03F6F8(buf, (uint64_t)" \t\n", 0, 3u);
      sub_19E0B1AD4(&v142, v17, (unsigned __int16 *)buf);
      if (*(void *)&buf[8] && buf[6] == 1) {
        free(*(void **)&buf[8]);
      }
      *(_DWORD *)v137 = 0x100000;
      unsigned __int16 v138 = 0;
      char v139 = 0;
      v140 = 0;
      v141[0] = 0;
      uint64_t v18 = *(unsigned __int16 **)dest;
      if (v122 - *(void *)dest == 64)
      {
        *(_DWORD *)v134 = 0x100000;
        v134[2] = 0;
        LOBYTE(v134[3]) = 1;
        long long v135 = 0;
        sub_19E03F6F8(v134, (uint64_t)" \t\n", 0, 3u);
        sub_19E0B1AD4(buf, v18 + 16, v134);
        sub_19E03CED8((uint64_t)v137, (unsigned __int16 *)buf);
        if (*(void *)&buf[8] && buf[6] == 1) {
          free(*(void **)&buf[8]);
        }
        if (v135 && LOBYTE(v134[3]) == 1) {
          free(v135);
        }
      }
      *(_DWORD *)long long buf = 0x100000;
      *(_WORD *)&uint8_t buf[4] = 0;
      buf[6] = 1;
      *(void *)&buf[8] = 0;
      sub_19E03F6F8(buf, (uint64_t)"f", 0, 1u);
      if (sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf))
      {
        if (*(void *)&buf[8] && buf[6] == 1) {
          free(*(void **)&buf[8]);
        }
LABEL_42:
        if (*(_WORD *)v137)
        {
          if (v140) {
            unsigned int v20 = v140;
          }
          else {
            unsigned int v20 = v141;
          }
          *(double *)(a1 + 88) = (double)atoi(v20);
        }
        goto LABEL_98;
      }
      *(_DWORD *)v134 = 0x100000;
      v134[2] = 0;
      LOBYTE(v134[3]) = 1;
      long long v135 = 0;
      sub_19E03F6F8(v134, (uint64_t)"freq", 0, 4u);
      BOOL v19 = sub_19E0B2428((unsigned __int16 *)&v142, v134);
      if (v135 && LOBYTE(v134[3]) == 1) {
        free(v135);
      }
      if (*(void *)&buf[8] && buf[6] == 1) {
        free(*(void **)&buf[8]);
      }
      if (v19) {
        goto LABEL_42;
      }
      *(_DWORD *)long long buf = 0x100000;
      *(_WORD *)&uint8_t buf[4] = 0;
      buf[6] = 1;
      *(void *)&buf[8] = 0;
      sub_19E03F6F8(buf, (uint64_t)"r", 0, 1u);
      if (sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf)) {
        goto LABEL_48;
      }
      *(_DWORD *)v134 = 0x100000;
      v134[2] = 0;
      LOBYTE(v134[3]) = 1;
      long long v135 = 0;
      sub_19E03F6F8(v134, (uint64_t)"role", 0, 4u);
      if (sub_19E0B2428((unsigned __int16 *)&v142, v134))
      {
        if (v135 && LOBYTE(v134[3]) == 1) {
          free(v135);
        }
LABEL_48:
        if (*(void *)&buf[8] && buf[6] == 1) {
          free(*(void **)&buf[8]);
        }
LABEL_65:
        if (v140) {
          CFStringRef v22 = v140;
        }
        else {
          CFStringRef v22 = v141;
        }
        *(void *)long long buf = v22;
        int v23 = *(unsigned __int16 *)v137;
        *(_DWORD *)&buf[8] = 0;
        *(void *)&buf[12] = *(unsigned __int16 *)v137;
        sub_19E03E768((uint64_t *)buf);
        *(void *)v134 = v22;
        LODWORD(v135) = v23;
        HIDWORD(v135) = v23;
        UChar32 v136 = 0;
        sub_19E03E768((uint64_t *)v134);
        uint64_t v24 = *(void *)buf;
        if (*(void *)buf == *(void *)v134)
        {
          int v25 = v15;
          int v26 = 0;
          int v27 = (int)v135;
          while (1)
          {
            if (*(_DWORD *)&buf[8] == v27) {
              goto LABEL_97;
            }
            unsigned int v28 = buf[16] - 105;
            if (v28 > 7 || ((0xE9u >> v28) & 1) == 0) {
              break;
            }
            v26 |= dword_19E129A40[v28];
            sub_19E03E768((uint64_t *)buf);
            if (*(void *)buf != v24) {
              goto LABEL_330;
            }
          }
          int v105 = 485;
          unint64_t v107 = "parse_role_flags";
          unint64_t v106 = "UnigramWord.cpp";
          long long v108 = "false && \"invalid role flag in unigrams file\"";
        }
        else
        {
LABEL_330:
          int v105 = 194;
          unint64_t v106 = "TIString.h";
          unint64_t v107 = "operator!=";
          long long v108 = "p==rhs.p";
        }
        __assert_rtn(v107, v106, v105, v108);
      }
      LODWORD(v129) = 0x100000;
      WORD2(v129) = 0;
      BYTE6(v129) = 1;
      v130 = 0;
      sub_19E03F6F8(&v129, (uint64_t)"roles", 0, 5u);
      BOOL v21 = sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)&v129);
      if (v130 && BYTE6(v129) == 1) {
        free(v130);
      }
      if (v135 && LOBYTE(v134[3]) == 1) {
        free(v135);
      }
      if (*(void *)&buf[8] && buf[6] == 1) {
        free(*(void **)&buf[8]);
      }
      if (v21) {
        goto LABEL_65;
      }
      *(_DWORD *)long long buf = 0x100000;
      *(_WORD *)&uint8_t buf[4] = 0;
      buf[6] = 1;
      *(void *)&buf[8] = 0;
      sub_19E03F6F8(buf, (uint64_t)"ovs", 0, 3u);
      BOOL v29 = sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf);
      if (*(void *)&buf[8] && buf[6] == 1) {
        free(*(void **)&buf[8]);
      }
      if (v29)
      {
        int v30 = v138;
        if (!v138)
        {
          sub_19E0398F4((unsigned __int16 *)v137);
          int v30 = v138;
        }
        if (v30 != 1) {
          __assert_rtn("UnigramWord", "UnigramWord.cpp", 105, "item_val.length() == 1");
        }
        int v25 = v15;
        if (v140) {
          int v31 = v140;
        }
        else {
          int v31 = v141;
        }
        *(void *)long long buf = v31;
        int v32 = *(unsigned __int16 *)v137;
        *(_DWORD *)&buf[8] = 0;
        *(void *)&buf[12] = *(unsigned __int16 *)v137;
        sub_19E03E768((uint64_t *)buf);
        *(void *)v134 = v31;
        LODWORD(v135) = v32;
        HIDWORD(v135) = v32;
        UChar32 v136 = 0;
        sub_19E03E768((uint64_t *)v134);
        uint64_t v33 = *(void *)buf;
        if (*(void *)buf != *(void *)v134) {
          goto LABEL_330;
        }
        int v26 = 0;
        int v34 = (int)v135;
        while (*(_DWORD *)&buf[8] != v34)
        {
          int v35 = v26 | 0x2000000;
          int v36 = v26 | 0x1000000;
          if (buf[16] != 111) {
            int v36 = v26;
          }
          if (buf[16] != 115) {
            int v35 = v36;
          }
          if (buf[16] == 118) {
            v26 |= 0x800000u;
          }
          else {
            int v26 = v35;
          }
          sub_19E03E768((uint64_t *)buf);
          if (*(void *)buf != v33) {
            goto LABEL_330;
          }
        }
LABEL_97:
        int v15 = v26 | v25;
      }
      else
      {
        *(_DWORD *)long long buf = 0x100000;
        *(_WORD *)&uint8_t buf[4] = 0;
        buf[6] = 1;
        *(void *)&buf[8] = 0;
        sub_19E03F6F8(buf, (uint64_t)"c", 0, 1u);
        if (sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf)) {
          goto LABEL_113;
        }
        *(_DWORD *)v134 = 0x100000;
        v134[2] = 0;
        LOBYTE(v134[3]) = 1;
        long long v135 = 0;
        sub_19E03F6F8(v134, (uint64_t)"cap", 0, 3u);
        if (sub_19E0B2428((unsigned __int16 *)&v142, v134))
        {
          if (v135 && LOBYTE(v134[3]) == 1) {
            free(v135);
          }
LABEL_113:
          if (*(void *)&buf[8] && buf[6] == 1) {
            free(*(void **)&buf[8]);
          }
LABEL_130:
          if (*(_WORD *)v137)
          {
            if (v140) {
              uint64_t v39 = v140;
            }
            else {
              uint64_t v39 = v141;
            }
            *(_DWORD *)(a1 + 40) = atoi(v39);
          }
          goto LABEL_98;
        }
        LODWORD(v129) = 0x100000;
        WORD2(v129) = 0;
        BYTE6(v129) = 1;
        v130 = 0;
        sub_19E03F6F8(&v129, (uint64_t)"cap_bits", 0, 8u);
        BOOL v38 = sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)&v129);
        if (v130 && BYTE6(v129) == 1) {
          free(v130);
        }
        if (v135 && LOBYTE(v134[3]) == 1) {
          free(v135);
        }
        if (*(void *)&buf[8] && buf[6] == 1) {
          free(*(void **)&buf[8]);
        }
        if (v38) {
          goto LABEL_130;
        }
        *(_DWORD *)long long buf = 0x100000;
        *(_WORD *)&uint8_t buf[4] = 0;
        buf[6] = 1;
        *(void *)&buf[8] = 0;
        sub_19E03F6F8(buf, (uint64_t)"s", 0, 1u);
        if (sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf))
        {
          if (*(void *)&buf[8] && buf[6] == 1) {
            free(*(void **)&buf[8]);
          }
LABEL_146:
          sub_19E03CD54((uint64_t)v131, (unsigned __int16 *)v137);
          goto LABEL_98;
        }
        *(_DWORD *)v134 = 0x100000;
        v134[2] = 0;
        LOBYTE(v134[3]) = 1;
        long long v135 = 0;
        sub_19E03F6F8(v134, (uint64_t)"surface_form", 0, 0xCu);
        BOOL v40 = sub_19E0B2428((unsigned __int16 *)&v142, v134);
        if (v135 && LOBYTE(v134[3]) == 1) {
          free(v135);
        }
        if (*(void *)&buf[8] && buf[6] == 1) {
          free(*(void **)&buf[8]);
        }
        if (v40) {
          goto LABEL_146;
        }
        *(_DWORD *)long long buf = 0x100000;
        *(_WORD *)&uint8_t buf[4] = 0;
        buf[6] = 1;
        *(void *)&buf[8] = 0;
        sub_19E03F6F8(buf, (uint64_t)"pre", 0, 3u);
        BOOL v41 = sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf);
        if (*(void *)&buf[8] && buf[6] == 1) {
          free(*(void **)&buf[8]);
        }
        if (v41)
        {
          *(_DWORD *)long long buf = 0x100000;
          *(_WORD *)&uint8_t buf[4] = 0;
          buf[6] = 1;
          *(void *)&buf[8] = 0;
          sub_19E03F6F8(buf, (uint64_t)",", 0, 1u);
          sub_19E0DD36C(v134, (unsigned __int16 *)v137, (unsigned __int16 *)buf);
          uint64_t v42 = (uint64_t *)v120;
          if (v120 != v134) {
LABEL_158:
          }
            sub_19E0EDD94(v42, *(unsigned __int16 **)v134, (uint64_t)v135, ((uint64_t)v135 - *(void *)v134) >> 5);
LABEL_159:
          unsigned __int8 v129 = v134;
          sub_19E076F34((void ***)&v129);
          if (*(void *)&buf[8] && buf[6] == 1) {
            free(*(void **)&buf[8]);
          }
          goto LABEL_98;
        }
        *(_DWORD *)long long buf = 0x100000;
        *(_WORD *)&uint8_t buf[4] = 0;
        buf[6] = 1;
        *(void *)&buf[8] = 0;
        sub_19E03F6F8(buf, (uint64_t)"post", 0, 4u);
        BOOL v43 = sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf);
        if (*(void *)&buf[8] && buf[6] == 1) {
          free(*(void **)&buf[8]);
        }
        if (v43)
        {
          *(_DWORD *)long long buf = 0x100000;
          *(_WORD *)&uint8_t buf[4] = 0;
          buf[6] = 1;
          *(void *)&buf[8] = 0;
          sub_19E03F6F8(buf, (uint64_t)",", 0, 1u);
          sub_19E0DD36C(v134, (unsigned __int16 *)v137, (unsigned __int16 *)buf);
          uint64_t v42 = (uint64_t *)v119;
          if (v119 != v134) {
            goto LABEL_158;
          }
          goto LABEL_159;
        }
        *(_DWORD *)long long buf = 0x100000;
        *(_WORD *)&uint8_t buf[4] = 0;
        buf[6] = 1;
        *(void *)&buf[8] = 0;
        sub_19E03F6F8(buf, (uint64_t)"needs_prefix", 0, 0xCu);
        BOOL v44 = sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf);
        if (*(void *)&buf[8] && buf[6] == 1) {
          free(*(void **)&buf[8]);
        }
        if (v44)
        {
          int v45 = *(_DWORD *)(a1 + 56) | 0x10000000;
LABEL_172:
          *(_DWORD *)(a1 + 56) = v45;
          goto LABEL_98;
        }
        *(_DWORD *)long long buf = 0x100000;
        *(_WORD *)&uint8_t buf[4] = 0;
        buf[6] = 1;
        *(void *)&buf[8] = 0;
        sub_19E03F6F8(buf, (uint64_t)"needs_suffix", 0, 0xCu);
        BOOL v46 = sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf);
        if (*(void *)&buf[8] && buf[6] == 1) {
          free(*(void **)&buf[8]);
        }
        if (v46)
        {
          int v45 = *(_DWORD *)(a1 + 56) | 0x20000000;
          goto LABEL_172;
        }
        *(_DWORD *)long long buf = 0x100000;
        *(_WORD *)&uint8_t buf[4] = 0;
        buf[6] = 1;
        *(void *)&buf[8] = 0;
        sub_19E03F6F8(buf, (uint64_t)"w", 0, 1u);
        BOOL v47 = sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf);
        if (*(void *)&buf[8] && buf[6] == 1) {
          free(*(void **)&buf[8]);
        }
        if (v47)
        {
          if (v140) {
            uint64_t v48 = v140;
          }
          else {
            uint64_t v48 = v141;
          }
          unsigned int v49 = atoi(v48);
          if (HIBYTE(v49)) {
            __assert_rtn("UnigramWord", "UnigramWord.cpp", 123, "word_id < (1 << 24)");
          }
          *(_DWORD *)(a1 + 60) = v49;
        }
        else
        {
          *(_DWORD *)long long buf = 0x100000;
          *(_WORD *)&uint8_t buf[4] = 0;
          buf[6] = 1;
          *(void *)&buf[8] = 0;
          sub_19E03F6F8(buf, (uint64_t)"preferred_form", 0, 0xEu);
          BOOL v50 = sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf);
          if (*(void *)&buf[8] && buf[6] == 1) {
            free(*(void **)&buf[8]);
          }
          if (v50)
          {
            *(unsigned char *)(a1 + 96) = 1;
          }
          else
          {
            int v109 = v15;
            *(_DWORD *)long long buf = 0x100000;
            *(_WORD *)&uint8_t buf[4] = 0;
            buf[6] = 1;
            *(void *)&buf[8] = 0;
            sub_19E03F6F8(buf, (uint64_t)"preferred_form_for_sortkey", 0, 0x1Au);
            BOOL v51 = sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf);
            if (*(void *)&buf[8] && buf[6] == 1) {
              free(*(void **)&buf[8]);
            }
            if (v51)
            {
              v15 |= 8u;
            }
            else
            {
              *(_DWORD *)long long buf = 0x100000;
              *(_WORD *)&uint8_t buf[4] = 0;
              buf[6] = 1;
              *(void *)&buf[8] = 0;
              sub_19E03F6F8(buf, (uint64_t)"categories", 0, 0xAu);
              BOOL v52 = sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf);
              if (*(void *)&buf[8] && buf[6] == 1) {
                free(*(void **)&buf[8]);
              }
              if (v52)
              {
                *(_DWORD *)long long buf = 0x100000;
                *(_WORD *)&uint8_t buf[4] = 0;
                buf[6] = 1;
                *(void *)&buf[8] = 0;
                sub_19E03F6F8(buf, (uint64_t)"|", 0, 1u);
                sub_19E0DD36C(v134, (unsigned __int16 *)v137, (unsigned __int16 *)buf);
                if (*(void *)&buf[8] && buf[6] == 1) {
                  free(*(void **)&buf[8]);
                }
                uint64_t v110 = (unsigned __int16 *)v135;
                if (*(void **)v134 == v135)
                {
                  int v111 = 0;
LABEL_263:
                  *(void *)long long buf = v134;
                  sub_19E076F34((void ***)buf);
                  int v15 = v111 | v109;
                  goto LABEL_98;
                }
                int v53 = *(unsigned __int16 **)v134;
                int v111 = 0;
                while (2)
                {
                  v114 = (char *)(v53 + 8);
                  v116 = v53;
                  if (*((void *)v53 + 1)) {
                    uint64_t v54 = (char *)*((void *)v53 + 1);
                  }
                  else {
                    uint64_t v54 = (char *)(v53 + 8);
                  }
                  sub_19E0413C8(buf, v54);
                  uint64_t v55 = 0;
                  int v56 = (char)v146;
                  size_t v57 = *(void *)&buf[8];
                  if ((v146 & 0x80u) == 0) {
                    size_t v57 = v146;
                  }
                  unsigned __int8 v58 = buf;
                  std::string __p = *(void **)buf;
                  if ((v146 & 0x80u) != 0) {
                    unsigned __int8 v58 = *(unsigned char **)buf;
                  }
                  __s1 = v58;
                  while (1)
                  {
                    size_t v59 = v57;
                    size_t v60 = strlen((&off_1E599C498)[v55]);
                    size_t v57 = v59;
                    if (v59 == v60)
                    {
                      int v61 = memcmp(__s1, (&off_1E599C498)[v55], v59);
                      size_t v57 = v59;
                      if (!v61) {
                        break;
                      }
                    }
                    v55 += 2;
                    if (v55 == 22)
                    {
                      char v62 = 0;
                      goto LABEL_214;
                    }
                  }
                  char v62 = 1;
LABEL_214:
                  if (v56 < 0) {
                    operator delete(__p);
                  }
                  if (v62)
                  {
                    if (*((void *)v116 + 1)) {
                      uint64_t v63 = (char *)*((void *)v116 + 1);
                    }
                    else {
                      uint64_t v63 = v114;
                    }
                    sub_19E0413C8(buf, v63);
                    uint64_t v64 = 0;
                    int v115 = (char)v146;
                    if ((v146 & 0x80u) == 0) {
                      size_t v65 = v146;
                    }
                    else {
                      size_t v65 = *(void *)&buf[8];
                    }
                    uint8x8_t v66 = buf;
                    __pa = *(void **)buf;
                    if ((v146 & 0x80u) != 0) {
                      uint8x8_t v66 = *(unsigned char **)buf;
                    }
                    __s1a = v66;
                    int v67 = (const char **)&off_1E599C498;
                    while (v65 != strlen(*v67) || memcmp(__s1a, *v67, v65))
                    {
                      ++v64;
                      v67 += 2;
                      if (v64 == 11)
                      {
                        LODWORD(v68) = 0;
                        goto LABEL_237;
                      }
                    }
                    uint64_t v68 = (&off_1E599C498)[2 * v64 + 1];
LABEL_237:
                    if (v115 < 0) {
                      operator delete(__pa);
                    }
                    v111 |= v68;
LABEL_240:
                    uint64_t v74 = v116;
                  }
                  else
                  {
                    unsigned __int8 v69 = atomic_load(byte_1E9457268);
                    if ((v69 & 1) == 0) {
                      goto LABEL_240;
                    }
                    unsigned __int8 v70 = atomic_load(byte_1E94578A0);
                    if (v70)
                    {
                      uint64_t v74 = v116;
                      uint64_t v75 = (const char *)*((void *)v116 + 1);
                      if (!v75) {
                        uint64_t v75 = v114;
                      }
                      printf("WARNING: skipping invalid category=%s", v75);
                      putchar(10);
                    }
                    else
                    {
                      char v71 = sub_19E08D084();
                      if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT)) {
                        goto LABEL_240;
                      }
                      uint64_t v72 = (char *)*((void *)v116 + 1);
                      if (!v72) {
                        uint64_t v72 = v114;
                      }
                      *(_DWORD *)long long buf = 136315138;
                      *(void *)&uint8_t buf[4] = v72;
                      uint64_t v73 = v71;
                      uint64_t v74 = v116;
                      _os_log_impl(&dword_19E038000, v73, OS_LOG_TYPE_DEFAULT, "WARNING: skipping invalid category=%s", buf, 0xCu);
                    }
                  }
                  int v53 = v74 + 16;
                  if (v53 == v110) {
                    goto LABEL_263;
                  }
                  continue;
                }
              }
              *(_DWORD *)long long buf = 0x100000;
              *(_WORD *)&uint8_t buf[4] = 0;
              buf[6] = 1;
              *(void *)&buf[8] = 0;
              sub_19E03F6F8(buf, (uint64_t)"head_pos", 0, 8u);
              BOOL v76 = sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf);
              if (*(void *)&buf[8] && buf[6] == 1) {
                free(*(void **)&buf[8]);
              }
              if (v76)
              {
                if (v140) {
                  int v77 = v140;
                }
                else {
                  int v77 = v141;
                }
                __int16 v78 = atoi(v77);
                *(unsigned char *)(a1 + 72) = 1;
                *(_WORD *)(a1 + 76) = v78;
              }
              else
              {
                *(_DWORD *)long long buf = 0x100000;
                *(_WORD *)&uint8_t buf[4] = 0;
                buf[6] = 1;
                *(void *)&buf[8] = 0;
                sub_19E03F6F8(buf, (uint64_t)"tail_pos", 0, 8u);
                BOOL v79 = sub_19E0B2428((unsigned __int16 *)&v142, (unsigned __int16 *)buf);
                if (*(void *)&buf[8] && buf[6] == 1) {
                  free(*(void **)&buf[8]);
                }
                if (v79)
                {
                  if (v140) {
                    char v80 = v140;
                  }
                  else {
                    char v80 = v141;
                  }
                  __int16 v81 = atoi(v80);
                  *(unsigned char *)(a1 + 72) = 1;
                  *(_WORD *)(a1 + 78) = v81;
                }
                else
                {
                  unsigned __int8 v82 = atomic_load(byte_1E9457268);
                  if (v82)
                  {
                    unsigned __int8 v83 = atomic_load(byte_1E94578A0);
                    if (v83)
                    {
                      unint64_t v86 = v143;
                      if (!v143) {
                        unint64_t v86 = v144;
                      }
                      printf("WARNING: skipping invalid item: %s", v86);
                      putchar(10);
                    }
                    else
                    {
                      long long v84 = sub_19E08D084();
                      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                      {
                        char v85 = v143;
                        if (!v143) {
                          char v85 = v144;
                        }
                        *(_DWORD *)long long buf = 136315138;
                        *(void *)&uint8_t buf[4] = v85;
                        _os_log_impl(&dword_19E038000, v84, OS_LOG_TYPE_DEFAULT, "WARNING: skipping invalid item: %s", buf, 0xCu);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_98:
      if (v140) {
        BOOL v37 = v139 == 1;
      }
      else {
        BOOL v37 = 0;
      }
      if (v37) {
        free(v140);
      }
      if (v143 && BYTE6(v142) == 1) {
        free(v143);
      }
      *(void *)long long buf = dest;
      sub_19E076F34((void ***)buf);
      if (v149 && BYTE6(v148) == 1) {
        free(v149);
      }
      ++v16;
      unint64_t v14 = v123;
      if (v16 >= (v124 - (uint64_t)v123) >> 5) {
        goto LABEL_275;
      }
    }
  }
  int v15 = 0;
LABEL_275:
  unsigned int v87 = v15 & 0xFFFFFFFB;
  if ((~v15 & 0x84) != 0) {
    unsigned int v87 = v15;
  }
  *(_DWORD *)(a1 + 36) = v87;
  sub_19E03CD54(a1, v131);
  sub_19E08E71C((uint64_t)&v129, (unsigned __int16 *)a1);
  int v88 = *(const char **)(a3 + 8);
  LODWORD(v148) = 0x100000;
  if (v88) {
    __n128 v89 = v88;
  }
  else {
    __n128 v89 = (const char *)(a3 + 16);
  }
  WORD2(v148) = 0;
  BYTE6(v148) = 0;
  __int16 v149 = 0;
  char v150 = 0;
  sub_19E039858((uint64_t)buf, (unsigned __int16 *)a1);
  unsigned int v90 = 0;
  int v91 = 0;
  unsigned int v92 = 0;
  for (int i = 0; ; v90 = HIWORD(i))
  {
    unsigned int v93 = *(unsigned __int16 *)&buf[4];
    if (!*(_WORD *)&buf[4])
    {
      sub_19E0398F4((unsigned __int16 *)buf);
      unsigned int v93 = *(unsigned __int16 *)&buf[4];
    }
    if (v90 >= v93 || v92 >= 0x20) {
      break;
    }
    unsigned int v94 = sub_19E0DE8C0((uint64_t)buf);
    if (u_isupper(v94))
    {
      UChar32 src = v94;
      LODWORD(v142) = 0x100000;
      WORD2(v142) = 0;
      BYTE6(v142) = 0;
      uint64_t v143 = 0;
      v144[0] = 0;
      if (v94)
      {
        int32_t pDestLength = 0;
        UErrorCode pErrorCode = U_ZERO_ERROR;
        u_strFromUTF32(dest, 3, &pDestLength, &src, 1, &pErrorCode);
        int32_t v95 = u_strToLower(v134, 5, dest, pDestLength, v89, &pErrorCode);
        int32_t v125 = 0;
        u_strToUTF8(v137, 13, &v125, v134, v95, &pErrorCode);
        if (pErrorCode) {
          __assert_rtn("character_to_lowercase", "TIStringFunctions.cpp", 150, "errorcode == U_ZERO_ERROR");
        }
        sub_19E039CC0((unsigned __int16 *)&v142, v137, 0xFFFFuLL);
        int v96 = (unsigned __int16)v142;
        if (!(_WORD)v142)
        {
          unsigned int v97 = MEMORY[0x19F3BAED0](src);
          sub_19E0B14D0((unsigned __int16 *)&v142, v97);
          int v96 = (unsigned __int16)v142;
        }
      }
      else
      {
        int v96 = 0;
      }
      char v98 = v143;
      if (!v143) {
        char v98 = v144;
      }
      *(void *)v134 = v98;
      LODWORD(v135) = 0;
      HIDWORD(v135) = v96;
      UChar32 v136 = 0;
      sub_19E03E768((uint64_t *)v134);
      sub_19E0DD598((uint64_t)v137, v136, v89);
      int v99 = WORD2(v142);
      if (!WORD2(v142))
      {
        sub_19E0398F4((unsigned __int16 *)&v142);
        int v99 = WORD2(v142);
      }
      if (v99 != 1) {
        goto LABEL_302;
      }
      sub_19E040834((uint64_t)v134, v94);
      BOOL v100 = sub_19E0B2428((unsigned __int16 *)v137, v134);
      if (v135 && LOBYTE(v134[3]) == 1) {
        free(v135);
      }
      if (v100) {
        sub_19E0B1EE0((unsigned __int16 *)&v148, (uint64_t)&v142);
      }
      else {
LABEL_302:
      }
        sub_19E0B14D0((unsigned __int16 *)&v148, v94);
      if (v140 && v139 == 1) {
        free(v140);
      }
      if (v143)
      {
        if (BYTE6(v142) == 1) {
          free(v143);
        }
      }
      v91 |= 1 << v92;
    }
    else
    {
      sub_19E0B14D0((unsigned __int16 *)&v148, v94);
    }
    ++v92;
  }
  int v101 = *(_DWORD *)(a1 + 36);
  int v102 = *(_DWORD *)(a1 + 40) | v91;
  *(_DWORD *)(a1 + 40) = v102;
  if (v102 == 1)
  {
    *(_DWORD *)(a1 + 36) = v101 | 1;
    unsigned int v103 = HIWORD(i);
    if (!v93)
    {
      sub_19E0398F4((unsigned __int16 *)buf);
      unsigned int v93 = *(unsigned __int16 *)&buf[4];
    }
    if (v103 >= v93) {
      sub_19E03CD54(a1, (unsigned __int16 *)&v148);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 36) = v101 & 0xFFFFFFFE;
  }
  if (*(void *)&buf[8] && buf[6] == 1) {
    free(*(void **)&buf[8]);
  }
  if (v149 && BYTE6(v148) == 1) {
    free(v149);
  }
  if (v130 && BYTE6(v129) == 1) {
    free(v130);
  }
  if (v133 && v132 == 1) {
    free(v133);
  }
  *(void *)long long buf = &v123;
  sub_19E076F34((void ***)buf);
  return a1;
}

void sub_19E0EF610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,unsigned __int16 *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,void *a42,uint64_t a43,uint64_t a44,char a45,int a46,char a47,char a48,void *a49)
{
  BOOL v52 = *(void **)(v50 - 232);
  if (v52 && *(unsigned char *)(v50 - 234) == 1) {
    free(v52);
  }
  int v53 = *(void **)(v50 - 200);
  if (v53 && *(unsigned char *)(v50 - 202) == 1) {
    free(v53);
  }
  *(void *)(v50 - 208) = &a27;
  sub_19E076F34((void ***)(v50 - 208));
  uint64_t v54 = *(void **)(v50 - 128);
  if (v54 && *(unsigned char *)(v50 - 130) == 1) {
    free(v54);
  }
  if (a42) {
    BOOL v55 = a41 == 1;
  }
  else {
    BOOL v55 = 0;
  }
  if (v55) {
    free(a42);
  }
  *(void *)(v50 - 136) = &a30;
  sub_19E076F34((void ***)(v50 - 136));
  int v56 = *(std::__shared_weak_count **)(v49 + 320);
  if (v56) {
    sub_19E0616BC(v56);
  }
  *(void *)(v50 - 136) = a22;
  sub_19E076F34((void ***)(v50 - 136));
  *(void *)(v50 - 136) = a26;
  sub_19E076F34((void ***)(v50 - 136));
  uint64_t v57 = *(void *)(v49 + 240);
  if (v57) {
    sub_19E076BBC((atomic_uint *)(v57 + 24));
  }
  uint64_t v58 = *(void *)(v49 + 232);
  if (v58) {
    sub_19E076BBC((atomic_uint *)(v58 + 24));
  }
  uint64_t v59 = *(void *)(v49 + 224);
  if (v59) {
    sub_19E076C68(v59);
  }
  size_t v60 = *a21;
  if (*a21)
  {
    *(void *)(v49 + 208) = v60;
    operator delete(v60);
  }
  if (*(unsigned __int16 *)(v49 + 176) >= 0xFu)
  {
    uint64_t v61 = *(void *)(v49 + 184);
    if (v61) {
      MEMORY[0x19F3BA6E0](v61, 0x1000C8077774924);
    }
  }
  if (*(unsigned __int16 *)(v49 + 152) >= 0xFu)
  {
    uint64_t v62 = *(void *)(v49 + 160);
    if (v62) {
      MEMORY[0x19F3BA6E0](v62, 0x1000C8077774924);
    }
  }
  if (*a24 >= 0xFu)
  {
    uint64_t v63 = *(void *)(v49 + 144);
    if (v63) {
      MEMORY[0x19F3BA6E0](v63, 0x1000C8077774924);
    }
  }
  uint64_t v64 = *(void **)(v49 + 112);
  if (v64 && *(unsigned char *)(v49 + 110) == 1) {
    free(v64);
  }
  size_t v65 = *(void **)(v49 + 8);
  if (v65)
  {
    if (*(unsigned char *)(v49 + 6) == 1) {
      free(v65);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_19E0EFA8C(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v2 + v5 - 8);
      *(void *)(v4 + v5 - 8) = v6;
      if (v6 && (int)atomic_fetch_add((atomic_uint *volatile)(v6 + 84), 1u) <= 0) {
        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
      }
      v5 -= 8;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  void *result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19E0EFB88(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 8);
    v2 -= 8;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v2;
    if (v5)
    {
      sub_19E076DB4(v4 + 84);
      uint64_t v2 = *(void *)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned __int16 *sub_19E0EFBE0(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t result = (unsigned __int16 *)*a2;
  if (*a2)
  {
    if (result == 1)
    {
      return (unsigned __int16 *)*(unsigned int *)(a1 + 4 * *((unsigned __int8 *)a2 + 2) + 12);
    }
    else
    {
      uint64_t result = sub_19E0AF554((void *)(a1 + 1296), a2);
      if (result) {
        return (unsigned __int16 *)*((unsigned int *)result + 8);
      }
    }
  }
  return result;
}

uint64_t sub_19E0EFC28(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a3;
  for (uint64_t i = a3[1]; i != v8; i -= 40)
  {
    uint64_t v10 = *(void **)(i - 32);
    if (v10)
    {
      if (*(unsigned char *)(i - 34) == 1) {
        free(v10);
      }
    }
  }
  a3[1] = v8;
  *a4 = 0;
  if (*(void *)(a1 + 200) == *(void *)(a1 + 208) || !*(_DWORD *)(a2 + 1320)) {
    return 0;
  }
  int v51 = 0x100000;
  __int16 v52 = 0;
  char v53 = 0;
  uint64_t v54 = 0;
  char v55 = 0;
  sub_19E039858((uint64_t)v46, (unsigned __int16 *)a1);
  int v11 = 0;
  int v50 = 0;
  while (1)
  {
    unsigned int v12 = HIWORD(v50);
    unsigned int v13 = v47;
    if (!v47)
    {
      sub_19E0398F4(v46);
      unsigned int v13 = v47;
    }
    if (v12 >= v13) {
      break;
    }
    uint64_t v14 = sub_19E0DE8C0((uint64_t)v46);
    sub_19E040834((uint64_t)v43, v14);
    if ((_WORD)v51)
    {
      sub_19E0B1EE0((unsigned __int16 *)&v51, (uint64_t)v43);
      v11 += v43[0];
    }
    sub_19E08D1E0(&v38, a2, v14);
    unsigned int v15 = HIWORD(v50) + ~*a4;
    if (sub_19E0D35FC(a2, (unsigned __int16 *)&v38))
    {
      if (v15 >= 0x20)
      {
        uint64_t v17 = *a3;
        uint64_t v16 = a3[1];
        if (v16 != *a3)
        {
          do
          {
            uint64_t v18 = *(void **)(v16 - 32);
            if (v18 && *(unsigned char *)(v16 - 34) == 1) {
              free(v18);
            }
            v16 -= 40;
          }
          while (v16 != v17);
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      sub_19E039858((uint64_t)v39, v43);
      int v42 = v15 | 0x20;
      unint64_t v22 = a3[1];
      if (v22 >= a3[2])
      {
        uint64_t v24 = sub_19E0F0210(a3, (uint64_t)v39);
      }
      else
      {
        *(_DWORD *)unint64_t v22 = 0x100000;
        *(_WORD *)(v22 + 4) = 0;
        *(unsigned char *)(v22 + 6) = 0;
        *(void *)(v22 + 8) = 0;
        uint64_t v23 = sub_19E03CED8(v22, v39);
        *(_DWORD *)(v23 + 32) = v42;
        uint64_t v24 = v23 + 40;
        a3[1] = v24;
      }
      a3[1] = v24;
      if (v41 && v40 == 1) {
        free(v41);
      }
      --*a4;
      if (v54 && v53 == 1) {
        free(v54);
      }
LABEL_64:
      uint64_t v54 = 0;
      char v19 = 1;
      char v53 = 1;
      char v55 = 0;
      int v51 = 0x100000;
      __int16 v52 = 0;
      goto LABEL_72;
    }
    if (v14 != sub_19E0EFBE0(a2, (unsigned __int16 *)&v38))
    {
      if (!v38.n128_u16[0])
      {
        if (v15 >= 0x20)
        {
          uint64_t v17 = *a3;
          uint64_t v16 = a3[1];
          if (v16 != *a3)
          {
            do
            {
              int v25 = *(void **)(v16 - 32);
              if (v25 && *(unsigned char *)(v16 - 34) == 1) {
                free(v25);
              }
              v16 -= 40;
            }
            while (v16 != v17);
LABEL_22:
            uint64_t v16 = v17;
          }
LABEL_23:
          char v19 = 0;
          a3[1] = v16;
          *a4 = 0;
          goto LABEL_72;
        }
        sub_19E039858((uint64_t)v39, v43);
        int v42 = v15 | 0x40;
        unint64_t v27 = a3[1];
        if (v27 >= a3[2])
        {
          uint64_t v29 = sub_19E0F0210(a3, (uint64_t)v39);
        }
        else
        {
          *(_DWORD *)unint64_t v27 = 0x100000;
          *(_WORD *)(v27 + 4) = 0;
          *(unsigned char *)(v27 + 6) = 0;
          *(void *)(v27 + 8) = 0;
          uint64_t v28 = sub_19E03CED8(v27, v39);
          *(_DWORD *)(v28 + 32) = v42;
          uint64_t v29 = v28 + 40;
          a3[1] = v29;
        }
        a3[1] = v29;
        if (v41 && v40 == 1) {
          free(v41);
        }
        ++*a4;
        if (v54 && v53 == 1) {
          free(v54);
        }
        int v11 = 0;
        goto LABEL_64;
      }
      if ((_WORD)v51 && v11 < 3)
      {
        unsigned int v20 = (int *)(a3[1] - 40);
        BOOL v21 = (unsigned __int16 *)&v51;
      }
      else
      {
        if (v15 >= 0x20)
        {
          uint64_t v17 = *a3;
          uint64_t v16 = a3[1];
          if (v16 != *a3)
          {
            do
            {
              int v26 = *(void **)(v16 - 32);
              if (v26 && *(unsigned char *)(v16 - 34) == 1) {
                free(v26);
              }
              v16 -= 40;
            }
            while (v16 != v17);
            goto LABEL_22;
          }
          goto LABEL_23;
        }
        sub_19E039858((uint64_t)v39, v43);
        int v42 = v15;
        unint64_t v30 = a3[1];
        if (v30 >= a3[2])
        {
          uint64_t v32 = sub_19E0F0210(a3, (uint64_t)v39);
        }
        else
        {
          *(_DWORD *)unint64_t v30 = 0x100000;
          *(_WORD *)(v30 + 4) = 0;
          *(unsigned char *)(v30 + 6) = 0;
          *(void *)(v30 + 8) = 0;
          uint64_t v31 = sub_19E03CED8(v30, v39);
          *(_DWORD *)(v31 + 32) = v42;
          uint64_t v32 = v31 + 40;
          a3[1] = v32;
        }
        a3[1] = v32;
        if (v41 && v40 == 1) {
          free(v41);
        }
        BOOL v21 = v43;
        unsigned int v20 = &v51;
      }
      sub_19E03CD54((uint64_t)v20, v21);
      int v11 = 0;
    }
    char v19 = 1;
LABEL_72:
    if (v38.n128_u16[0] >= 0xFu && v38.n128_u64[1]) {
      MEMORY[0x19F3BA6E0](v38.n128_u64[1], 0x1000C8077774924);
    }
    if (v45 && v44 == 1) {
      free(v45);
    }
    if ((v19 & 1) == 0)
    {
      uint64_t v33 = 0;
      goto LABEL_89;
    }
  }
  if ((*(unsigned char *)(a1 + 328) & 0x80) != 0 || (uint64_t v35 = *a3, v34 = a3[1], v34 == *a3))
  {
    uint64_t v33 = 1;
  }
  else
  {
    do
    {
      int v36 = *(void **)(v34 - 32);
      if (v36 && *(unsigned char *)(v34 - 34) == 1) {
        free(v36);
      }
      v34 -= 40;
    }
    while (v34 != v35);
    uint64_t v33 = 0;
    a3[1] = v35;
    *a4 = 0;
  }
LABEL_89:
  if (v49 && v48 == 1) {
    free(v49);
  }
  if (v54 && v53 == 1) {
    free(v54);
  }
  return v33;
}

void sub_19E0F014C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,void *a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28)
{
  if (a15 && a14 == 1) {
    free(a15);
  }
  if (a10 >= 0xFu && a11) {
    MEMORY[0x19F3BA6E0](a11, 0x1000C8077774924);
  }
  if (a22 && a21 == 1) {
    free(a22);
  }
  if (a28 && a27 == 1) {
    free(a28);
  }
  unint64_t v30 = *(void **)(v28 - 112);
  if (v30)
  {
    if (*(unsigned char *)(v28 - 114) == 1) {
      free(v30);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0F0210(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666) {
    sub_19E041BEC();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v5 = 0x666666666666666;
  }
  else {
    unint64_t v5 = v3;
  }
  BOOL v21 = a1 + 2;
  if (v5 > 0x666666666666666) {
    sub_19E0416C4();
  }
  uint64_t v7 = 5 * v5;
  uint64_t v8 = (char *)operator new(40 * v5);
  uint64_t v9 = (uint64_t)&v8[40 * v2];
  uint64_t v18 = v8;
  v19.i64[0] = v9;
  uint64_t v10 = &v8[8 * v7];
  unsigned int v20 = v10;
  *(_DWORD *)uint64_t v9 = 0x100000;
  *(_WORD *)(v9 + 4) = 0;
  *(unsigned char *)(v9 + 6) = 0;
  *(void *)(v9 + 8) = 0;
  sub_19E03CED8(v9, (unsigned __int16 *)a2);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v11 = v9 + 40;
  v19.i64[1] = v9 + 40;
  uint64_t v13 = *a1;
  unint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    int64x2_t v15 = vdupq_n_s64(v12);
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      sub_19E039858(v9 + v14 - 40, (unsigned __int16 *)(v12 + v14 - 40));
      *(_DWORD *)(v9 + v14 - 8) = *(_DWORD *)(v12 + v14 - 8);
      v14 -= 40;
    }
    while (v12 + v14 != v13);
    v9 += v14;
    int64x2_t v15 = *(int64x2_t *)a1;
    uint64_t v11 = v19.i64[1];
    uint64_t v10 = v20;
  }
  *a1 = v9;
  a1[1] = v11;
  int64x2_t v19 = v15;
  uint64_t v16 = a1[2];
  a1[2] = (uint64_t)v10;
  unsigned int v20 = (char *)v16;
  uint64_t v18 = (char *)v15.i64[0];
  sub_19E0F03C8((uint64_t)&v18);
  return v11;
}

uint64_t sub_19E0F03C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 40;
      *(void *)(a1 + 16) = v2 - 40;
      unint64_t v5 = *(void **)(v2 - 32);
      if (v5 && *(unsigned char *)(v2 - 34) == 1)
      {
        free(v5);
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_19E0F0434(const void *a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned __int16 *)(a2 + 104);
  unint64_t v5 = (const void *)sub_19E039858((uint64_t)a1, (unsigned __int16 *)(a2 + 104));
  sub_19E0B2180(v5, " : f=%.0f", v6, v7, v8, v9, v10, v11, *(void *)(a2 + 88));
  int v18 = *(_DWORD *)(a2 + 36);
  if (v18)
  {
    int v43 = 0x100000;
    __int16 v44 = 0;
    char v45 = 0;
    BOOL v46 = 0;
    v47[0] = 0;
    if (v18) {
      sub_19E0B14D0((unsigned __int16 *)&v43, 0x74u);
    }
    if ((v18 & 2) != 0) {
      sub_19E0B14D0((unsigned __int16 *)&v43, 0x6Fu);
    }
    if ((v18 & 0x20) != 0) {
      sub_19E0B14D0((unsigned __int16 *)&v43, 0x6Cu);
    }
    if ((v18 & 0x40) != 0) {
      sub_19E0B14D0((unsigned __int16 *)&v43, 0x70u);
    }
    if ((_WORD)v43)
    {
      int64x2_t v19 = v47;
      if (v46) {
        LOBYTE(v19) = (_BYTE)v46;
      }
      sub_19E0B2180(a1, " : r=%s", v12, v13, v14, v15, v16, v17, (char)v19);
    }
    int v20 = *(_DWORD *)(a2 + 36);
    LODWORD(v40) = 0x100000;
    WORD2(v40) = 0;
    BYTE6(v40) = 0;
    BOOL v41 = 0;
    char v42 = 0;
    if ((v20 & 0x1000000) != 0) {
      sub_19E0B14D0((unsigned __int16 *)&v40, 0x6Fu);
    }
    if ((v20 & 0x800000) != 0) {
      sub_19E0B14D0((unsigned __int16 *)&v40, 0x76u);
    }
    if ((v20 & 0x2000000) != 0) {
      sub_19E0B14D0((unsigned __int16 *)&v40, 0x73u);
    }
    BOOL v21 = v41;
    if ((_WORD)v40)
    {
      unint64_t v22 = &v42;
      if (v41) {
        LOBYTE(v22) = (_BYTE)v41;
      }
      sub_19E0B2180(a1, " : ovs=%s", v12, v13, v14, v15, v16, v17, (char)v22);
      BOOL v21 = v41;
    }
    if (v21 && BYTE6(v40) == 1) {
      free(v21);
    }
    if (v46 && v45 == 1) {
      free(v46);
    }
  }
  if (*(_DWORD *)(a2 + 40)) {
    sub_19E0B2180(a1, " : c=%#x", v12, v13, v14, v15, v16, v17, *(_DWORD *)(a2 + 40));
  }
  if (*(_WORD *)a2 && !sub_19E0B2428((unsigned __int16 *)a2, v4))
  {
    uint64_t v23 = *(void *)(a2 + 8);
    if (!v23) {
      LOBYTE(v23) = a2 + 16;
    }
    sub_19E0B2180(a1, " : s=%s", v12, v13, v14, v15, v16, v17, v23);
  }
  if (*(void *)(a2 + 256) != *(void *)(a2 + 264))
  {
    LODWORD(v40) = 0x100000;
    WORD2(v40) = 0;
    BYTE6(v40) = 1;
    BOOL v41 = 0;
    sub_19E03F6F8(&v40, (uint64_t)",", 0, 1u);
    sub_19E0DD4E4((unsigned __int16 *)&v43, *(void *)(a2 + 256), *(void *)(a2 + 264), (uint64_t)&v40);
    LOBYTE(v30) = (_BYTE)v46;
    if (!v46) {
      unint64_t v30 = v47;
    }
    sub_19E0B2180(a1, " : pre=%s", v24, v25, v26, v27, v28, v29, (char)v30);
    if (v46 && v45 == 1) {
      free(v46);
    }
    if (v41 && BYTE6(v40) == 1) {
      free(v41);
    }
  }
  if ((*(unsigned char *)(a2 + 59) & 0x10) != 0) {
    sub_19E0B2180(a1, " : needs_prefix", v12, v13, v14, v15, v16, v17, v39);
  }
  if (*(void *)(a2 + 280) != *(void *)(a2 + 288))
  {
    LODWORD(v40) = 0x100000;
    WORD2(v40) = 0;
    BYTE6(v40) = 1;
    BOOL v41 = 0;
    sub_19E03F6F8(&v40, (uint64_t)",", 0, 1u);
    sub_19E0DD4E4((unsigned __int16 *)&v43, *(void *)(a2 + 280), *(void *)(a2 + 288), (uint64_t)&v40);
    LOBYTE(v37) = (_BYTE)v46;
    if (!v46) {
      BOOL v37 = v47;
    }
    sub_19E0B2180(a1, " : post=%s", v31, v32, v33, v34, v35, v36, (char)v37);
    if (v46 && v45 == 1) {
      free(v46);
    }
    if (v41 && BYTE6(v40) == 1) {
      free(v41);
    }
  }
  if ((*(unsigned char *)(a2 + 59) & 0x20) != 0) {
    sub_19E0B2180(a1, " : needs_suffix", v12, v13, v14, v15, v16, v17, v39);
  }
  unsigned int v38 = *(_DWORD *)(a2 + 76);
  if ((_WORD)v38)
  {
    sub_19E0B2180(a1, " : head_pos=%d", v12, v13, v14, v15, v16, v17, *(_DWORD *)(a2 + 76));
    unsigned int v38 = *(_DWORD *)(a2 + 76);
  }
  if (v38 >= 0x10000) {
    sub_19E0B2180(a1, " : tail_pos=%d", v12, v13, v14, v15, v16, v17, SBYTE2(v38));
  }
}

void sub_19E0F0804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  if (a13 && a12 == 1) {
    free(a13);
  }
  if (a19 && a18 == 1) {
    free(a19);
  }
  BOOL v21 = *(void **)(v19 + 8);
  if (v21)
  {
    if (*(unsigned char *)(v19 + 6) == 1) {
      free(v21);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0F08B4(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v37[2] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = 0x100000;
  a1[2] = 0;
  *((unsigned char *)a1 + 6) = 0;
  *((void *)a1 + 1) = 0;
  *((unsigned char *)a1 + 16) = 0;
  uint64_t v11 = (unsigned __int16 *)(a2 + 136);
  uint64_t v10 = *(unsigned __int16 *)(a2 + 136);
  if (v10 <= 0xE) {
    uint64_t v12 = (char *)(a2 + 138);
  }
  else {
    uint64_t v12 = *(char **)(a2 + 144);
  }
  sub_19E0DD6FC((uint64_t)v34, v12, v10, a4, a5, a6, a7, a8);
  LOBYTE(v19) = (_BYTE)v36;
  if (!v36) {
    uint64_t v19 = v37;
  }
  sub_19E0B2180(a1, "<Word: k=0x%s> ", v13, v14, v15, v16, v17, v18, (char)v19);
  if (v36 && v35 == 1) {
    free(v36);
  }
  sub_19E0F0434(v34, a2);
  sub_19E0B1EE0(a1, (uint64_t)v34);
  if (v36 && v35 == 1) {
    free(v36);
  }
  uint64_t v20 = *(unsigned __int16 *)(a2 + 152);
  if (*(_WORD *)(a2 + 152) && !sub_19E0A7134((unsigned __int16 *)(a2 + 152), v11))
  {
    if (v20 <= 0xE) {
      uint64_t v26 = (char *)(a2 + 154);
    }
    else {
      uint64_t v26 = *(char **)(a2 + 160);
    }
    sub_19E0DD6FC((uint64_t)v34, v26, v20, v21, v22, v23, v24, v25);
    LOBYTE(v33) = (_BYTE)v36;
    if (!v36) {
      uint64_t v33 = v37;
    }
    sub_19E0B2180(a1, " (s=0x%s)", v27, v28, v29, v30, v31, v32, (char)v33);
    if (v36)
    {
      if (v35 == 1) {
        free(v36);
      }
    }
  }
}

void sub_19E0F0A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  if (a13 && a12 == 1) {
    free(a13);
  }
  uint64_t v15 = *(void **)(v13 + 8);
  if (v15)
  {
    if (*(unsigned char *)(v13 + 6) == 1) {
      free(v15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0F0A84()
{
  return 0;
}

void sub_19E0F0A8C(void *a1)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  int32x2_t v2 = (int32x2_t)a1[1];
  v29[0] = vrev64_s32(v2);
  uint64_t v3 = (uint64_t **)(a1 + 2);
  if (!a1[4])
  {
LABEL_16:
    uint64_t v15 = (uint64_t **)(a1 + 3);
    uint64_t v16 = (unsigned int *)v29;
    do
    {
      uint64_t v17 = *v15;
      uint64_t v18 = (uint64_t **)(a1 + 3);
      uint64_t v19 = (uint64_t **)(a1 + 3);
      if (*v15)
      {
        unsigned int v20 = *v16;
        while (1)
        {
          while (1)
          {
            uint64_t v19 = (uint64_t **)v17;
            unsigned int v21 = *((_DWORD *)v17 + 7);
            if (v20 >= v21) {
              break;
            }
            uint64_t v17 = *v19;
            uint64_t v18 = v19;
            if (!*v19) {
              goto LABEL_25;
            }
          }
          if (v21 >= v20) {
            break;
          }
          uint64_t v17 = v19[1];
          if (!v17)
          {
            uint64_t v18 = v19 + 1;
            goto LABEL_25;
          }
        }
      }
      else
      {
LABEL_25:
        uint64_t v22 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v22 + 28) = *(void *)v16;
        sub_19E05D5F8(v3, (uint64_t)v19, v18, v22);
      }
      BOOL v23 = v16 == (unsigned int *)v29;
      v16 += 2;
    }
    while (!v23);
    goto LABEL_36;
  }
  unint64_t v5 = (uint64_t **)(a1 + 3);
  uint64_t v4 = a1[3];
  uint64_t v6 = a1[2];
  a1[2] = a1 + 3;
  *(void *)(v4 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  if (*(void *)(v6 + 8)) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = v6;
  }
  if (!v7)
  {
    sub_19E09FFA0(0);
    goto LABEL_16;
  }
  __int32 v28 = v2.i32[0];
  unsigned __int32 v8 = v2.u32[1];
  uint64_t v9 = sub_19E0F0C9C(v7);
  uint64_t v10 = v9;
  uint64_t v11 = *v5;
  uint64_t v12 = (uint64_t **)(a1 + 3);
  if (*v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v12 = (uint64_t **)v11;
        unsigned __int32 v13 = *((_DWORD *)v11 + 7);
        if (v8 >= v13) {
          break;
        }
        uint64_t v11 = *v12;
        unint64_t v5 = v12;
        if (!*v12) {
          goto LABEL_13;
        }
      }
      if (v13 >= v8) {
        break;
      }
      uint64_t v11 = v12[1];
      if (!v11)
      {
        unint64_t v5 = v12 + 1;
        goto LABEL_13;
      }
    }
    uint64_t v14 = v9;
    uint64_t v10 = (void *)v7;
  }
  else
  {
LABEL_13:
    *(_DWORD *)(v7 + 28) = v8;
    *(_DWORD *)(v7 + 32) = v28;
    sub_19E05D5F8(v3, (uint64_t)v12, v5, (uint64_t *)v7);
    if (!v10)
    {
      uint64_t v24 = 0;
LABEL_35:
      sub_19E09FFA0(v24);
      goto LABEL_36;
    }
    uint64_t v14 = sub_19E0F0C9C((uint64_t)v10);
  }
  sub_19E09FFA0(v10);
  if (v14)
  {
    for (uint64_t i = (void *)v14[2]; i; uint64_t i = (void *)i[2])
      uint64_t v14 = i;
    uint64_t v24 = v14;
    goto LABEL_35;
  }
LABEL_36:
  uint64_t v27 = (void *)a1[6];
  uint64_t v26 = a1 + 6;
  sub_19E09FFA0(v27);
  *(v26 - 1) = v26;
  *uint64_t v26 = 0;
  v26[1] = 0;
}

void *sub_19E0F0C9C(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t sub_19E0F0CF0(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 8) >= a2) {
    return sub_19E0F0D0C((uint64_t **)(a1 + 40), a2);
  }
  else {
    return sub_19E0F0E28(a1 + 16, a2);
  }
}

uint64_t sub_19E0F0D0C(uint64_t **a1, unsigned int a2)
{
  uint64_t v3 = a1 + 1;
  int32x2_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint64_t v6 = a1 + 1;
  do
  {
    unsigned int v7 = *((_DWORD *)v2 + 7);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t **)v2;
    }
    else {
      uint64_t v9 = (uint64_t **)(v2 + 1);
    }
    if (v8) {
      uint64_t v6 = (uint64_t **)v2;
    }
    int32x2_t v2 = *v9;
  }
  while (*v9);
  if (v6 == v3) {
    return 0;
  }
  unsigned int v10 = *((_DWORD *)v6 + 8);
  if (v10 >= a2) {
    return 0;
  }
  *((_DWORD *)v6 + 8) = a2;
  if (*((_DWORD *)v6 + 7) <= a2)
  {
    sub_19E0F0FF8(a1, (uint64_t *)v6);
    operator delete(v6);
  }
  unsigned int v11 = a2 - 1;
  if (v10 < a2 - 1)
  {
    uint64_t v12 = *v3;
    uint64_t v13 = (uint64_t)v3;
    if (*v3)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t)v12;
          unsigned int v14 = *((_DWORD *)v12 + 7);
          if (v11 >= v14) {
            break;
          }
          uint64_t v12 = *(uint64_t **)v13;
          uint64_t v3 = (uint64_t **)v13;
          if (!*(void *)v13) {
            goto LABEL_22;
          }
        }
        if (v14 >= v11) {
          break;
        }
        uint64_t v12 = *(uint64_t **)(v13 + 8);
        if (!v12)
        {
          uint64_t v3 = (uint64_t **)(v13 + 8);
          goto LABEL_22;
        }
      }
    }
    else
    {
LABEL_22:
      uint64_t v15 = (uint64_t *)operator new(0x28uLL);
      *((_DWORD *)v15 + 7) = v11;
      *((_DWORD *)v15 + 8) = 0;
      sub_19E05D5F8(a1, v13, v3, v15);
      uint64_t v13 = (uint64_t)v15;
    }
    *(_DWORD *)(v13 + 32) = v10;
  }
  return 1;
}

uint64_t sub_19E0F0E28(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    goto LABEL_14;
  }
  uint64_t v6 = (uint64_t *)(a1 + 8);
  do
  {
    unsigned int v7 = *(_DWORD *)(v5 + 28);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v5;
    }
    else {
      uint64_t v9 = (uint64_t *)(v5 + 8);
    }
    if (v8) {
      uint64_t v6 = (uint64_t *)v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 == v4)
  {
    uint64_t v4 = v6;
LABEL_14:
    LODWORD(v16) = a2;
    HIDWORD(v16) = a2 - 1;
    goto LABEL_15;
  }
  unsigned int v10 = *((_DWORD *)v6 + 8);
  if (v10 < a2) {
    return 0;
  }
  if (v10 == a2)
  {
    *((_DWORD *)v6 + 8) = a2 - 1;
    goto LABEL_16;
  }
  LODWORD(v16) = a2;
  HIDWORD(v16) = a2 - 1;
  uint64_t v4 = v6;
LABEL_15:
  uint64_t v6 = sub_19E0F0F7C((uint64_t **)a1, v4, a2, &v16);
LABEL_16:
  if (v6 != *(uint64_t **)a1)
  {
    uint64_t v12 = *v6;
    if (*v6)
    {
      do
      {
        uint64_t v13 = v12;
        uint64_t v12 = *(void *)(v12 + 8);
      }
      while (v12);
    }
    else
    {
      unsigned int v14 = v6;
      do
      {
        uint64_t v13 = v14[2];
        BOOL v15 = *(void *)v13 == (void)v14;
        unsigned int v14 = (uint64_t *)v13;
      }
      while (v15);
    }
    if ((uint64_t *)v13 == v6) {
      __assert_rtn("insert", "LXRangedTokenIDGenerator.cpp", 52, "left_iter != iter");
    }
    if (*(_DWORD *)(v13 + 28) == a2 - 1)
    {
      *((_DWORD *)v6 + 8) = *(_DWORD *)(v13 + 32);
      sub_19E0F0FF8((uint64_t **)a1, (uint64_t *)v13);
      operator delete((void *)v13);
    }
  }
  return 1;
}

uint64_t *sub_19E0F0F7C(uint64_t **a1, uint64_t *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v6 = sub_19E0F104C(a1, a2, &v11, &v10, a3);
  unsigned int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    unsigned int v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_19E05D5F8(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_19E0F0FF8(uint64_t **a1, uint64_t *a2)
{
  int32x2_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      int32x2_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return sub_19E066E70(v6, a2);
}

uint64_t *sub_19E0F104C(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int a5)
{
  BOOL v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *((_DWORD *)a2 + 7), v6 > a5))
  {
    unsigned int v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      BOOL v8 = (uint64_t *)*a2;
      do
      {
        uint64_t v9 = v8;
        BOOL v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      uint64_t v12 = a2;
      do
      {
        uint64_t v9 = (uint64_t *)v12[2];
        BOOL v13 = *v9 == (void)v12;
        uint64_t v12 = v9;
      }
      while (v13);
    }
    if (*((_DWORD *)v9 + 7) < a5) {
      goto LABEL_17;
    }
    uint64_t v14 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v15 = (uint64_t *)v14;
          unsigned int v16 = *(_DWORD *)(v14 + 28);
          if (v16 <= a5) {
            break;
          }
          uint64_t v14 = *v15;
          BOOL v5 = v15;
          if (!*v15) {
            goto LABEL_43;
          }
        }
        if (v16 >= a5) {
          break;
        }
        BOOL v5 = v15 + 1;
        uint64_t v14 = v15[1];
      }
      while (v14);
      goto LABEL_43;
    }
LABEL_42:
    BOOL v15 = a1 + 1;
LABEL_43:
    *a3 = v15;
    return v5;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v10 = a2[1];
  if (v10)
  {
    unsigned int v11 = (uint64_t *)a2[1];
    do
    {
      a4 = v11;
      unsigned int v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    uint64_t v17 = a2;
    do
    {
      a4 = (uint64_t *)v17[2];
      BOOL v13 = *a4 == (void)v17;
      uint64_t v17 = a4;
    }
    while (!v13);
  }
  if (a4 != v5 && *((_DWORD *)a4 + 7) <= a5)
  {
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v15 = (uint64_t *)v18;
          unsigned int v19 = *(_DWORD *)(v18 + 28);
          if (v19 <= a5) {
            break;
          }
          uint64_t v18 = *v15;
          BOOL v5 = v15;
          if (!*v15) {
            goto LABEL_43;
          }
        }
        if (v19 >= a5) {
          break;
        }
        BOOL v5 = v15 + 1;
        uint64_t v18 = v15[1];
      }
      while (v18);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v10)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_19E0F11D4(uint64_t a1, unsigned int a2)
{
  if (!a2 || *(_DWORD *)(a1 + 12) < a2) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) >= a2) {
    return sub_19E0F0E28(a1 + 40, a2);
  }
  return sub_19E0F0D0C((uint64_t **)(a1 + 16), a2);
}

uint64_t sub_19E0F1208(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    int32x2_t v2 = (uint64_t **)(a1 + 16);
    uint64_t v3 = *(void *)(a1 + 16);
    unsigned int v4 = *(_DWORD *)(v3 + 28);
    uint64_t v5 = (*(_DWORD *)(v3 + 32) + 1);
    *(_DWORD *)(v3 + 32) = v5;
    if (v5 >= v4)
    {
      sub_19E0F0FF8(v2, (uint64_t *)v3);
      operator delete((void *)v3);
    }
  }
  else
  {
    if (qword_1E9457870 != -1) {
      dispatch_once(&qword_1E9457870, &unk_1EF09F180);
    }
    unsigned int v6 = qword_1E9457868;
    if (os_log_type_enabled((os_log_t)qword_1E9457868, OS_LOG_TYPE_INFO))
    {
      int v7 = *(_DWORD *)(a1 + 8);
      int v8 = *(_DWORD *)(a1 + 12);
      v10[0] = 67109376;
      v10[1] = v7;
      __int16 v11 = 1024;
      int v12 = v8;
      _os_log_impl(&dword_19E038000, v6, OS_LOG_TYPE_INFO, "exhausted tokenID range: (%d, %d]", (uint8_t *)v10, 0xEu);
    }
    return 0;
  }
  return v5;
}

os_log_t sub_19E0F1320()
{
  os_log_t result = os_log_create("com.apple.Lexicon", "RangedTokenIDGenerator");
  qword_1E9457868 = (uint64_t)result;
  return result;
}

void sub_19E0F1350(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09CA10;
  sub_19E09FFA0(*(void **)(a1 + 48));
  sub_19E09FFA0(*(void **)(a1 + 24));

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0F13C0(uint64_t a1)
{
  *(void *)a1 = &unk_1EF09CA10;
  sub_19E09FFA0(*(void **)(a1 + 48));
  sub_19E09FFA0(*(void **)(a1 + 24));
  return a1;
}

void *sub_19E0F1410(void *a1, unint64_t a2)
{
  unint64_t v4 = HIDWORD(a2);
  *a1 = &unk_1EF09CA10;
  a1[1] = a2;
  a1[3] = 0;
  a1[2] = a1 + 3;
  uint64_t v5 = (uint64_t **)(a1 + 2);
  a1[4] = 0;
  unsigned int v6 = sub_19E0F104C(a1 + 2, a1 + 3, &v11, &v10, HIDWORD(a2));
  if (!*v6)
  {
    int v7 = (uint64_t **)v6;
    int v8 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v8 + 28) = v4 | (a2 << 32);
    sub_19E05D5F8(v5, (uint64_t)v11, v7, v8);
  }
  a1[7] = 0;
  a1[6] = 0;
  a1[5] = a1 + 6;
  return a1;
}

void sub_19E0F14DC(_Unwind_Exception *a1)
{
  sub_19E09FFA0(*v1);
  _Unwind_Resume(a1);
}

void sub_19E0F14F0(uint64_t a1)
{
  sub_19E039A20(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0F152C(uint64_t a1)
{
  sub_19E040984(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0F1568(uint64_t a1)
{
  sub_19E039A20(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E0F15A4(uint64_t a1)
{
  sub_19E040984(a1);

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0F15E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  int v7 = (void *)(*a1 + v6);
  if (v5) {
    size_t v8 = strnlen((const char *)(*a1 + v6), v5 - v6);
  }
  else {
    size_t v8 = strlen((const char *)(*a1 + v6));
  }
  size_t v9 = v8;
  unint64_t v10 = v8 + v6 + 1;
  if (v10 > v5) {
    return 0;
  }
  a1[2] = v10;
  if (!v4) {
    return 0;
  }
  sub_19E057A94(&__dst, v7, v8);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = __dst;
  unint64_t v11 = v15;
  *(void *)(a2 + 16) = v15;
  unint64_t v12 = HIBYTE(v11);
  if ((v12 & 0x80u) != 0) {
    unint64_t v12 = *(void *)(a2 + 8);
  }
  if (v12 != v9) {
    __assert_rtn("read_null_terminated_string", "TIDataFile.cpp", 336, "result.size() == len");
  }
  return 1;
}

uint64_t sub_19E0F16E0(uint64_t *a1, int *a2)
{
  unint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  unint64_t v4 = v2 + 3;
  if (v3) {
    BOOL v5 = v4 > v3;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    return 0;
  }
  uint64_t v6 = *a1;
  a1[2] = v4;
  if (!v6) {
    return 0;
  }
  *a2 = (*(unsigned __int8 *)(v6 + v2) << 16) | (*(unsigned __int8 *)(v6 + v2 + 1) << 8) | *(unsigned __int8 *)(v6 + v2 + 2);
  return 1;
}

uint64_t sub_19E0F1730(uint64_t *a1, _DWORD *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 + 1;
  if (v2) {
    BOOL v5 = v4 > v2;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    uint64_t v6 = *a1;
    a1[2] = v4;
    if (v6)
    {
      int v7 = *(char *)(v6 + v3);
      int v8 = *(unsigned __int8 *)(v6 + v3);
      *a2 = v8;
      if ((v7 & 0x80000000) == 0) {
        return 1;
      }
      int v10 = (v8 & 0x7F) << 8;
      *a2 = v10;
      unint64_t v11 = v3 + 2;
      if (!v2 || v11 <= v2)
      {
        a1[2] = v11;
        int v12 = v10 | *(unsigned __int8 *)(v6 + v4);
        *a2 = v12;
        if ((v8 & 0x40) == 0) {
          return 1;
        }
        int v13 = (v12 & 0x3FFF) << 16;
        *a2 = v13;
        unint64_t v14 = v3 + 4;
        if (!v2 || v14 <= v2)
        {
          a1[2] = v14;
          *a2 = v13 | (bswap32(*(unsigned __int16 *)(v6 + v11)) >> 16);
          return 1;
        }
      }
    }
  }
  return 0;
}

void *sub_19E0F17CC(void *a1, char *a2)
{
  sub_19E0413C8(__p, a2);
  sub_19E039B58((uint64_t)a1, (long long *)__p, 1573, 384);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  *a1 = &unk_1EF09C6F0;
  return a1;
}

void sub_19E0F1840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ssize_t sub_19E0F185C(ssize_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(result + 24))
  {
    ssize_t v5 = result;
    int v6 = 0;
    while (1)
    {
      os_log_t result = write(*(_DWORD *)(v5 + 32), (const void *)(a2 + v6), a3 - v6);
      if (!result) {
        break;
      }
      v6 += result;
      if (result < 0)
      {
        *(unsigned char *)(v5 + 24) = 0;
        return result;
      }
    }
  }
  return result;
}

ssize_t sub_19E0F18BC(ssize_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  sub_19E0F185C(a1, (uint64_t)__s, v4);
  char v6 = 0;
  return sub_19E0F185C(a1, (uint64_t)&v6, 1);
}

ssize_t sub_19E0F1914(ssize_t a1, unsigned int a2)
{
  ssize_t v3 = a1;
  if (a2 <= 0x7E)
  {
    char v7 = a2;
    size_t v4 = (int *)&v7;
LABEL_5:
    a1 = v3;
    uint64_t v5 = 1;
    return sub_19E0F185C(a1, (uint64_t)v4, v5);
  }
  if (a2 <= 0x3FFE)
  {
    char v8 = BYTE1(a2) | 0x80;
    sub_19E0F185C(a1, (uint64_t)&v8, 1);
    char v9 = a2;
    size_t v4 = (int *)&v9;
    goto LABEL_5;
  }
  if (a2 > 0x3FFFFFFE)
  {
    int v13 = -1;
    size_t v4 = &v13;
    uint64_t v5 = 4;
  }
  else
  {
    char v10 = HIBYTE(a2) | 0xC0;
    sub_19E0F185C(a1, (uint64_t)&v10, 1);
    char v11 = BYTE2(a2);
    sub_19E0F185C(v3, (uint64_t)&v11, 1);
    __int16 v12 = bswap32(a2) >> 16;
    size_t v4 = (int *)&v12;
    a1 = v3;
    uint64_t v5 = 2;
  }
  return sub_19E0F185C(a1, (uint64_t)v4, v5);
}

off_t sub_19E0F1A04(int a1)
{
  off_t result = lseek(a1, 0, 1);
  if (result == -1) {
    __assert_rtn("tell", "TIDataFile.cpp", 548, "result != -1");
  }
  return result;
}

off_t sub_19E0F1A4C(int a1, off_t a2)
{
  off_t result = lseek(a1, a2, 0);
  if (result == -1) {
    __assert_rtn("seek", "TIDataFile.cpp", 556, "false");
  }
  return result;
}

off_t sub_19E0F1A90(int a1)
{
  off_t result = lseek(a1, 0, 2);
  if (result == -1) {
    __assert_rtn("seek_to_end", "TIDataFile.cpp", 565, "false");
  }
  return result;
}

void sub_19E0F1AD8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9457898, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9457898))
  {
    qword_1E9457880 = 0;
    qword_1E9457888 = 0;
    qword_1E9457890 = 0;
    __cxa_guard_release(&qword_1E9457898);
  }
}

uint64_t sub_19E0F1B3C(uint64_t a1, char a2, atomic_uint **a3)
{
  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 34) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = -1;
  uint64_t v5 = *a3;
  if (*a3)
  {
    char v6 = (void *)(a1 + 72);
    if ((int)atomic_fetch_add(v5, 1u) <= 0) {
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    }
    unint64_t v7 = *(void *)(a1 + 88);
    unint64_t v8 = *(void *)(a1 + 80);
    if (v8 >= v7)
    {
      uint64_t v10 = (uint64_t)(v8 - *v6) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
        sub_19E041BEC();
      }
      uint64_t v11 = v7 - *v6;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      uint64_t v24 = a1 + 88;
      if (v13) {
        unint64_t v13 = (unint64_t)sub_19E060B48(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      unint64_t v22 = v13;
      *(void *)BOOL v23 = v13 + 8 * v10;
      *(void *)&v23[8] = *(void *)v23;
      *(void *)&v23[16] = v13 + 8 * v14;
      **(void **)BOOL v23 = v5;
      if ((int)atomic_fetch_add(v5, 1u) < 1) {
        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
      }
      *(void *)&v23[8] += 8;
      uint64_t v15 = sub_19E0F1E94(a1 + 88, *(void *)(a1 + 80), *(void *)(a1 + 80), *(void *)(a1 + 72), *(void *)(a1 + 72), *(uint64_t *)v23, *(uint64_t *)v23);
      uint64_t v16 = *(void *)(a1 + 88);
      long long v17 = *(_OWORD *)&v23[8];
      unint64_t v21 = *(void *)&v23[8];
      long long v18 = *(_OWORD *)(a1 + 72);
      *(void *)(a1 + 72) = v15;
      *(_OWORD *)BOOL v23 = v18;
      *(_OWORD *)(a1 + 80) = v17;
      *(void *)&v23[16] = v16;
      unint64_t v22 = v18;
      sub_19E0F1E40((uint64_t)&v22);
      unint64_t v9 = v21;
    }
    else
    {
      sub_19E0F1DD0(a1 + 72, v5);
      unint64_t v9 = v8 + 8;
    }
    *(void *)(a1 + 80) = v9;
    sub_19E076C68((uint64_t)v5);
  }
  if (*(unsigned __int16 *)(a1 + 48) >= 0xFu)
  {
    uint64_t v19 = *(void *)(a1 + 56);
    if (v19) {
      MEMORY[0x19F3BA6E0](v19, 0x1000C8077774924);
    }
  }
  *(_WORD *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 50) = a2;
  ++dword_1E9457878;
  return a1;
}

void sub_19E0F1D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E076C68(v4);
  sub_19E076D30((void ***)va);
  if (*(unsigned __int16 *)(v3 + 48) >= 0xFu)
  {
    uint64_t v6 = *(void *)(v3 + 56);
    if (v6) {
      MEMORY[0x19F3BA6E0](v6, 0x1000C8077774924);
    }
  }
  uint64_t v7 = *(void *)(v3 + 32);
  if (v7) {
    sub_19E076BBC((atomic_uint *)(v7 + 24));
  }
  sub_19E076D30((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0F1DD0(uint64_t result, atomic_uint *a2)
{
  unint64_t v2 = *(atomic_uint ***)(result + 8);
  *unint64_t v2 = a2;
  if (a2 && (int)atomic_fetch_add(a2, 1u) <= 0) {
    __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  *(void *)(result + 8) = v2 + 1;
  return result;
}

void sub_19E0F1E38(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19E0F1E40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  while (1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3 == v2) {
      break;
    }
    uint64_t v4 = *(void *)(v3 - 8);
    *(void *)(a1 + 16) = v3 - 8;
    if (v4) {
      sub_19E076C68(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_19E0F1E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  for (char i = 0; a3 != a5; *((void *)&v14 + 1) = v7)
  {
    unint64_t v9 = *(atomic_uint **)(a3 - 8);
    a3 -= 8;
    unint64_t v8 = v9;
    *(void *)(v7 - 8) = v9;
    if (v9)
    {
      if ((int)atomic_fetch_add(v8, 1u) < 1) {
        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
      }
      uint64_t v7 = *((void *)&v14 + 1);
    }
    v7 -= 8;
  }
  char i = 1;
  sub_19E0F1F60((uint64_t)v11);
  return v7;
}

void sub_19E0F1F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E0F1F60(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*v3) {
        sub_19E076C68(*v3);
      }
      ++v3;
    }
  }
  return a1;
}

uint64_t sub_19E0F1FBC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v6 = *(void *)(v3 - 8);
      v3 -= 8;
      uint64_t v5 = v6;
      if (v6) {
        sub_19E076C68(v5);
      }
    }
  }
  return a1;
}

uint64_t sub_19E0F2014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  uint64_t v10 = a1;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  *(double *)(a1 + 40) = *(double *)(a2 + 88) + *(double *)(a1 + 40);
  unint64_t v11 = (a3 - 1);
  uint64_t v12 = *(void *)(a2 + 200);
  if (*(void *)(a2 + 208) - v12 <= v11)
  {
    long long v14 = (unsigned int *)(a1 + 96);
    unsigned int v15 = *(_DWORD *)(a1 + 96);
    goto LABEL_5;
  }
  unsigned int v13 = *(unsigned __int8 *)(v12 + v11);
  long long v14 = (unsigned int *)(a1 + 96);
  unsigned int v15 = *(_DWORD *)(a1 + 96);
  if (v15 <= v13) {
LABEL_5:
  }
    unsigned int v13 = v15;
  *long long v14 = v13;
  unsigned int v16 = *(unsigned __int16 *)(a2 + 136);
  if (v16 > a3)
  {
    if (v16 <= 0xE) {
      uint64_t v17 = a2 + 138;
    }
    else {
      uint64_t v17 = *(void *)(a2 + 144);
    }
    unsigned int v18 = *(unsigned __int8 *)(v17 + a3);
    uint64_t v19 = (void *)(a1 + 8);
    uint64_t v20 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
    if ((int)v20 >= 1)
    {
      uint64_t v21 = 0xFFFFFFFFLL;
      do
      {
        uint64_t v22 = (v21 + v20) >> 1;
        uint64_t v23 = *(void *)(*v19 + 8 * v22);
        if (v23 && (int)atomic_fetch_add((atomic_uint *volatile)v23, 1u) <= 0) {
          goto LABEL_71;
        }
        if (*(unsigned __int16 *)(v23 + 48) < 0xFu) {
          uint64_t v24 = (unsigned __int8 *)(v23 + 50);
        }
        else {
          uint64_t v24 = *(unsigned __int8 **)(v23 + 56);
        }
        unsigned int v25 = *v24;
        if (v25 <= v18)
        {
          if (v25 >= v18)
          {
            uint64_t v10 = v23;
            uint64_t v32 = sub_19E0F2014(v23, a2, (v8 + 1));
            if (v10) {
              goto LABEL_69;
            }
            return v32;
          }
        }
        else
        {
          LODWORD(v20) = (v21 + v20) >> 1;
          uint64_t v22 = v21;
        }
        sub_19E076C68(v23);
        uint64_t v21 = v22;
      }
      while ((int)v20 - (int)v22 > 1);
    }
    if ((int)atomic_fetch_add((atomic_uint *volatile)v10, 1u) > 0) {
      operator new();
    }
LABEL_71:
    __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  if (!a3) {
    return a1;
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t v26 = *(void *)(a2 + 232);
    if (!v26) {
      goto LABEL_27;
    }
    if ((int)atomic_fetch_add((atomic_uint *volatile)(v26 + 24), 1u) <= 0) {
      goto LABEL_71;
    }
    uint64_t v27 = *(void *)(a1 + 32);
    sub_19E076BBC((atomic_uint *)(v26 + 24));
    if (v27 != v26)
    {
LABEL_27:
      unsigned __int8 v28 = atomic_load(byte_1E9457268);
      if (v28)
      {
        unsigned __int8 v29 = atomic_load(byte_1E94578A0);
        if (v29)
        {
          sub_19E0F08B4(&v48, a2, a3, a4, a5, a6, a7, a8);
          uint64_t v33 = (const char *)v49[0];
          if (!v49[0]) {
            uint64_t v33 = (const char *)&v49[1];
          }
          printf("WARNING! Changing surface form list for trie node on recursive insertion of: %s", v33);
          if (v49[0] && BYTE6(v48) == 1) {
            free(v49[0]);
          }
          putchar(10);
        }
        else
        {
          uint64_t v30 = sub_19E08D084();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            sub_19E0F08B4(&v48, a2, a3, a4, a5, a6, a7, a8);
            uint64_t v31 = (void **)v49[0];
            if (!v49[0]) {
              uint64_t v31 = &v49[1];
            }
            int buf = 136315138;
            *(void *)buf_4 = v31;
            _os_log_impl(&dword_19E038000, v30, OS_LOG_TYPE_DEFAULT, "WARNING! Changing surface form list for trie node on recursive insertion of: %s", (uint8_t *)&buf, 0xCu);
            if (v49[0] && BYTE6(v48) == 1) {
              free(v49[0]);
            }
          }
        }
      }
      uint64_t v34 = **(void **)(v10 + 32);
      if (*(void *)(*(void *)(v10 + 32) + 8) != v34)
      {
        unint64_t v35 = 0;
        unsigned int v36 = 1;
        do
        {
          uint64_t v37 = *(void *)(v34 + 8 * v35);
          unsigned __int8 v38 = atomic_load(byte_1E9457268);
          if (v38)
          {
            unsigned __int8 v39 = atomic_load(byte_1E94578A0);
            if (v39)
            {
              sub_19E0F08B4(&v48, v37, a3, a4, a5, a6, a7, a8);
              char v42 = (const char *)v49[0];
              if (!v49[0]) {
                char v42 = (const char *)&v49[1];
              }
              printf("\tExisting form: %s", v42);
              if (v49[0] && BYTE6(v48) == 1) {
                free(v49[0]);
              }
              putchar(10);
            }
            else
            {
              uint64_t v40 = sub_19E08D084();
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                sub_19E0F08B4(&v48, v37, a3, a4, a5, a6, a7, a8);
                BOOL v41 = (void **)v49[0];
                if (!v49[0]) {
                  BOOL v41 = &v49[1];
                }
                int buf = 136315138;
                *(void *)buf_4 = v41;
                _os_log_impl(&dword_19E038000, v40, OS_LOG_TYPE_DEFAULT, "\tExisting form: %s", (uint8_t *)&buf, 0xCu);
                if (v49[0] && BYTE6(v48) == 1) {
                  free(v49[0]);
                }
              }
            }
          }
          unint64_t v35 = v36;
          uint64_t v34 = **(void **)(v10 + 32);
          ++v36;
        }
        while (v35 < (*(void *)(*(void *)(v10 + 32) + 8) - v34) >> 3);
      }
    }
  }
  uint64_t v43 = *(void *)(a2 + 232);
  if (v43 && (int)atomic_fetch_add((atomic_uint *volatile)(v43 + 24), 1u) <= 0) {
    __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  uint64_t v44 = *(void *)(v10 + 32);
  *(void *)(v10 + 32) = v43;
  if (v44) {
    sub_19E076BBC((atomic_uint *)(v44 + 24));
  }
  if ((int)atomic_fetch_add((atomic_uint *volatile)v10, 1u) <= 0) {
    __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  sub_19E0F291C(a2, (atomic_uint *)v10);
  uint64_t v32 = v10;
LABEL_69:
  sub_19E076C68(v10);
  return v32;
}

void sub_19E0F288C(_Unwind_Exception *a1)
{
  sub_19E076C68(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0F291C(uint64_t result, atomic_uint *a2)
{
  if (a2 && (int)atomic_fetch_add(a2, 1u) <= 0) {
    __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  uint64_t v2 = *(void *)(result + 224);
  *(void *)(result + 224) = a2;
  if (v2)
  {
    return sub_19E076C68(v2);
  }
  return result;
}

void sub_19E0F298C()
{
}

uint64_t sub_19E0F29A4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 32);
  if (v4) {
    LODWORD(v4) = ((v4[1] - *v4) & 0x7FFFFFFF8) != 0;
  }
  if (v4 + ((*(void *)(result + 16) - *(void *)(result + 8)) >> 3) <= 1)
  {
    if ((int)atomic_fetch_add((atomic_uint *volatile)result, 1u) <= 0) {
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    }
    if (*(unsigned __int16 *)(result + 48) < 0xFu) {
      uint64_t v5 = (char *)(result + 50);
    }
    else {
      uint64_t v5 = *(char **)(result + 56);
    }
    size_t v7 = *(unsigned __int16 *)(a2 + 48);
    if (v7 <= 0xE) {
      int v8 = (void *)(a2 + 50);
    }
    else {
      int v8 = *(void **)(a2 + 56);
    }
    unint64_t v9 = (unsigned __int16 *)(a2 + 48);
    char v6 = *v5;
    *sub_19E03E82C(&v50, v7 + 1, v8, v7) = v6;
    if (*(unsigned __int16 *)(a2 + 48) >= 0xFu)
    {
      uint64_t v10 = *(void *)(a2 + 56);
      if (v10) {
        MEMORY[0x19F3BA6E0](v10, 0x1000C8077774924);
      }
    }
    *(_OWORD *)unint64_t v9 = v50;
    if (a2 == v3) {
      goto LABEL_39;
    }
    uint64_t v12 = (void **)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 8);
    long long v14 = *(atomic_uint ***)(v3 + 8);
    unsigned int v13 = *(atomic_uint ***)(v3 + 16);
    unint64_t v15 = v13 - v14;
    uint64_t v16 = *(void *)(a2 + 24);
    if (v15 <= (v16 - v11) >> 3)
    {
      unint64_t v26 = (*(void *)(a2 + 16) - v11) >> 3;
      if (v26 >= v15)
      {
        unsigned __int8 v28 = sub_19E0F2DC0(*(atomic_uint ***)(v3 + 8), *(atomic_uint ***)(v3 + 16), *(uint64_t **)(a2 + 8));
        for (char i = *(uint64_t **)(a2 + 16); i != v28; --i)
        {
          uint64_t v31 = *(i - 1);
          uint64_t v30 = v31;
          if (v31) {
            sub_19E076C68(v30);
          }
        }
        *(void *)(a2 + 16) = v28;
        goto LABEL_39;
      }
      uint64_t v27 = &v14[v26];
      sub_19E0F2DC0(*(atomic_uint ***)(v3 + 8), v27, *(uint64_t **)(a2 + 8));
      unsigned int v25 = sub_19E0F2E54(a2 + 24, v27, v13, *(atomic_uint ***)(a2 + 16));
    }
    else
    {
      if (v11)
      {
        uint64_t v17 = *(void *)(a2 + 16);
        unsigned int v18 = *(void **)(a2 + 8);
        if (v17 != v11)
        {
          do
          {
            uint64_t v20 = *(void *)(v17 - 8);
            v17 -= 8;
            uint64_t v19 = v20;
            if (v20) {
              sub_19E076C68(v19);
            }
          }
          while (v17 != v11);
          unsigned int v18 = *v12;
        }
        *(void *)(a2 + 16) = v11;
        operator delete(v18);
        uint64_t v16 = 0;
        *uint64_t v12 = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = 0;
        unint64_t v9 = (unsigned __int16 *)(a2 + 48);
      }
      if ((char *)v13 - (char *)v14 < 0) {
        goto LABEL_65;
      }
      uint64_t v21 = v16 >> 2;
      if (v16 >> 2 <= v15) {
        uint64_t v21 = v13 - v14;
      }
      unint64_t v22 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v21;
      if (v22 >> 61) {
LABEL_65:
      }
        sub_19E041BEC();
      uint64_t v23 = (atomic_uint **)sub_19E060B48(v22);
      *(void *)(a2 + 8) = v23;
      *(void *)(a2 + 16) = v23;
      *(void *)(a2 + 24) = &v23[v24];
      unsigned int v25 = sub_19E0F2E54(a2 + 24, v14, v13, v23);
    }
    *(void *)(a2 + 16) = v25;
LABEL_39:
    uint64_t v32 = *(uint64_t **)(v3 + 8);
    if (((*(void *)(v3 + 16) - (void)v32) & 0x7FFFFFFF8) == 8)
    {
      uint64_t v33 = *v32;
      if ((int)atomic_fetch_add((atomic_uint *volatile)a2, 1u) <= 0) {
        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
      }
      uint64_t v34 = *(uint64_t **)(v33 + 72);
      uint64_t v35 = *v34;
      uint64_t *v34 = a2;
      if (v35) {
        sub_19E076C68(v35);
      }
      uint64_t v36 = *(void *)(v3 + 8);
      for (uint64_t j = *(void *)(v3 + 16); j != v36; j -= 8)
      {
        uint64_t v39 = *(void *)(j - 8);
        uint64_t v38 = v39;
        if (v39) {
          sub_19E076C68(v38);
        }
      }
      *(void *)(v3 + 16) = v36;
      if (*v9 <= 3u) {
        sub_19E0F29A4(v33, a2);
      }
    }
    else
    {
      uint64_t v40 = *(uint64_t **)(v3 + 32);
      if (v40)
      {
        uint64_t v41 = *v40;
        if (v40[1] != *v40)
        {
          unint64_t v42 = 0;
          unsigned int v43 = 1;
          do
          {
            uint64_t v44 = *(void *)(v41 + 8 * v42);
            if ((int)atomic_fetch_add((atomic_uint *volatile)a2, 1u) <= 0) {
              __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
            }
            sub_19E0F291C(v44, (atomic_uint *)a2);
            sub_19E076C68(a2);
            unint64_t v42 = v43;
            uint64_t v40 = *(uint64_t **)(v3 + 32);
            uint64_t v41 = *v40;
            ++v43;
          }
          while (v42 < (v40[1] - *v40) >> 3);
        }
        *(void *)(v3 + 32) = 0;
        uint64_t v45 = *(void *)(a2 + 32);
        *(void *)(a2 + 32) = v40;
        if (v45) {
          sub_19E076BBC((atomic_uint *)(v45 + 24));
        }
      }
    }
    uint64_t v46 = *(void *)(v3 + 72);
    for (uint64_t k = *(void *)(v3 + 80); k != v46; k -= 8)
    {
      uint64_t v49 = *(void *)(k - 8);
      uint64_t v48 = v49;
      if (v49) {
        sub_19E076C68(v48);
      }
    }
    *(void *)(v3 + 80) = v46;
    return sub_19E076C68(v3);
  }
  return result;
}

void sub_19E0F2D70(_Unwind_Exception *a1)
{
  *(void *)(v2 + 16) = v3;
  sub_19E076C68(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E0F2DC0(atomic_uint **a1, atomic_uint **a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      char v6 = *v5;
      if (*v5 && (int)atomic_fetch_add(v6, 1u) <= 0) {
        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
      }
      uint64_t v7 = *a3;
      *a3 = (uint64_t)v6;
      if (v7) {
        sub_19E076C68(v7);
      }
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

atomic_uint **sub_19E0F2E54(uint64_t a1, atomic_uint **a2, atomic_uint **a3, atomic_uint **a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  for (i = 0; a2 != a3; uint64_t v10 = v4)
  {
    uint64_t v5 = *a2;
    *uint64_t v4 = *a2;
    if (v5)
    {
      if ((int)atomic_fetch_add(v5, 1u) < 1) {
        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
      }
      uint64_t v4 = v10;
    }
    ++a2;
    ++v4;
  }
  char i = 1;
  sub_19E0F1FBC((uint64_t)v7);
  return v4;
}

void sub_19E0F2F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E0F2F20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  if (((v1 - v2) & 0x7FFFFFFF8) == 0) {
    return 0;
  }
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = *(void *)(v2 + 8 * v4);
    if (*(_WORD *)(v6 + 48))
    {
      int v7 = *(_DWORD *)(v6 + 96);
      BOOL v9 = v7 != -1 && v7 <= *(_DWORD *)(a1 + 96);
      uint64_t v10 = *(uint64_t **)(v6 + 8);
      if (((*(void *)(v6 + 16) - (void)v10) & 0x7FFFFFFF8) == 8)
      {
        uint64_t v11 = *(void **)(v6 + 32);
        if (v11) {
          uint64_t v11 = (void *)((v11[1] - *v11) >> 3);
        }
        if (v11) {
          BOOL v9 = 1;
        }
        if (!v9)
        {
          sub_19E0F29A4(*v10, v6);
          uint64_t v12 = *(unsigned __int16 *)(v6 + 48);
          sub_19E0F1AD8();
          unint64_t v13 = v12 + 1;
          if (v12 + 1 > (unint64_t)((qword_1E9457888 - qword_1E9457880) >> 2))
          {
            sub_19E0F1AD8();
            long long v14 = (_DWORD *)qword_1E9457888;
            unint64_t v15 = (qword_1E9457888 - qword_1E9457880) >> 2;
            if (v13 <= v15)
            {
              if (v13 < v15) {
                qword_1E9457888 = qword_1E9457880 + 4 * v13;
              }
            }
            else if (v13 - v15 <= (qword_1E9457890 - qword_1E9457888) >> 2)
            {
              uint64_t v26 = qword_1E9457888 + 4 * (v13 - v15);
              uint64_t v27 = 4 * v12 - 4 * v15 + 4;
              do
              {
                *v14++ = 0;
                v27 -= 4;
              }
              while (v27);
              qword_1E9457888 = v26;
            }
            else
            {
              unint64_t v16 = (qword_1E9457890 - qword_1E9457880) >> 1;
              if (v16 <= v13) {
                unint64_t v16 = v12 + 1;
              }
              if ((unint64_t)(qword_1E9457890 - qword_1E9457880) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v17 = v16;
              }
              unsigned int v18 = sub_19E068D84(v17);
              uint64_t v20 = (uint64_t)v18 + 4 * v15;
              uint64_t v21 = 4 * v12 - 4 * v15 + 4;
              unint64_t v22 = (_DWORD *)v20;
              do
              {
                *v22++ = 0;
                v21 -= 4;
              }
              while (v21);
              uint64_t v23 = (void *)qword_1E9457880;
              for (uint64_t i = qword_1E9457888; (void *)i != v23; i -= 4)
              {
                int v25 = *(_DWORD *)(i - 4);
                *(_DWORD *)(v20 - 4) = v25;
                v20 -= 4;
              }
              qword_1E9457880 = v20;
              qword_1E9457888 = (uint64_t)v18 + 4 * v13;
              qword_1E9457890 = (uint64_t)v18 + 4 * v19;
              if (v23) {
                operator delete(v23);
              }
            }
          }
          LODWORD(v5) = v5 + v12 - 1;
          sub_19E0F1AD8();
          ++*(_DWORD *)(qword_1E9457880 + 4 * v12);
        }
      }
      uint64_t v5 = sub_19E0F2F20(v6) + v5;
      uint64_t v2 = *(void *)(a1 + 8);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    ++v4;
  }
  while (v4 < ((unint64_t)(v1 - v2) >> 3));
  return v5;
}

uint64_t sub_19E0F3130(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (((v1 - v2) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4);
      if (*(_WORD *)(v5 + 48))
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (((*(void *)(v5 + 16) - v6) & 0x7FFFFFFF8) != 0 && (int v7 = *(_DWORD *)(*(void *)v6 + 64)) != 0)
        {
          unsigned int v8 = v7 - *(_DWORD *)(v5 + 64);
          if (v8 > 0xFF)
          {
            if (v8 == (__int16)v8) {
              *(_DWORD *)(v5 + 68) = 2;
            }
            else {
              *(_DWORD *)(v5 + 68) = 3;
            }
          }
          else
          {
            *(_DWORD *)(v5 + 68) = 1;
          }
        }
        else
        {
          *(_DWORD *)(v5 + 68) = 0;
        }
        off_t result = sub_19E0F3130(v5);
        *(_DWORD *)(v5 + 64) = 0;
        uint64_t v2 = *(void *)(v3 + 8);
        uint64_t v1 = *(void *)(v3 + 16);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v1 - v2) >> 3));
  }
  dword_1E945787C = 0;
  return result;
}

uint64_t sub_19E0F320C(void *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1[1];
  unsigned int v8 = (void *)a1[4];
  if (v8) {
    unsigned int v8 = (void *)((v8[1] - *v8) >> 3);
  }
  unint64_t v9 = a1[2] - v7;
  if ((v9 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v10 = 0;
    BOOL v11 = v8 + (v9 >> 3) > 1;
    if (a3) {
      int v12 = 4;
    }
    else {
      int v12 = 3;
    }
    char v13 = a4 ^ 1;
    unint64_t v14 = 0x1E9457000uLL;
    while (1)
    {
      uint64_t v15 = *(void *)(v7 + 8 * v10);
      int v16 = *(unsigned __int16 *)(v15 + 48);
      if (!*(_WORD *)(v15 + 48)) {
        goto LABEL_57;
      }
      ++*(_DWORD *)(v14 + 2172);
      *(_DWORD *)(v15 + 64) = a2;
      int v17 = a2 + v16 + 1;
      uint64_t v18 = (*(void *)(v15 + 16) - *(void *)(v15 + 8)) & 0x7FFFFFFF8;
      if (v18)
      {
        int v19 = *(_DWORD *)(v15 + 68);
        int v20 = v17 + 2;
        if (v19 == 1) {
          ++v17;
        }
        else {
          v17 += 3;
        }
        if (v19 == 2) {
          int v17 = v20;
        }
      }
      int v21 = v17 + v11;
      unint64_t v22 = *(char ***)(v15 + 32);
      if (!v22)
      {
        BOOL v32 = 0;
        LODWORD(v33) = 0;
        uint64_t v35 = *(void *)(v15 + 8);
        uint64_t v34 = *(void *)(v15 + 16);
        goto LABEL_37;
      }
      uint64_t v23 = v22[1];
      uint64_t v24 = v23 - *v22;
      if (v23 != *v22)
      {
        uint64_t v25 = 0;
        int v26 = 0;
        unint64_t v27 = v24 >> 3;
        do
        {
          if ((v26 - 1) >= *(_DWORD *)(*(void *)&(*v22)[8 * v25] + 248)) {
            int v26 = *(_DWORD *)(*(void *)&(*v22)[8 * v25] + 248);
          }
          ++v25;
        }
        while (v27 > v25);
        if (v26)
        {
          a2 = (v21 + v12);
          goto LABEL_57;
        }
      }
      char v28 = 0;
      if (v18)
      {
        unsigned __int8 v29 = *v22;
        uint64_t v30 = *(char **)(*(void *)(v15 + 32) + 8);
        if (((v30 - v29) & 0x7FFFFFFF8) == 8)
        {
          if (v30 == v29) {
            sub_19E0F298C();
          }
          uint64_t v31 = *(void *)v29;
          if (v31 && (int)atomic_fetch_add((atomic_uint *volatile)(v31 + 84), 1u) <= 0) {
            __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
          }
          if (*(_DWORD *)(v31 + 248) || *(unsigned char *)(v31 + 304))
          {
            char v28 = 0;
LABEL_31:
            sub_19E076DB4(v31 + 84);
            unint64_t v14 = 0x1E9457000;
            goto LABEL_34;
          }
          double v44 = *(double *)(v31 + 88);
          double v45 = 0.0;
          if (v44 != 0.0)
          {
            uint64_t v46 = *(void *)(v31 + 224);
            if (v46)
            {
              double v47 = *(double *)(v46 + 40);
              goto LABEL_64;
            }
            int v48 = *(_DWORD *)(v31 + 336);
            if (v48)
            {
              double v47 = (double)v48;
LABEL_64:
              double v45 = v44 / v47;
            }
            else
            {
              double v45 = 1.0;
            }
          }
          unsigned int v49 = (sqrt(v45) * 255.0);
          if (v49 >= 0xFF) {
            char v50 = -1;
          }
          else {
            char v50 = v49;
          }
          if (v49) {
            BOOL v51 = 1;
          }
          else {
            BOOL v51 = v45 <= 0.0;
          }
          if (v51) {
            char v28 = v50;
          }
          else {
            char v28 = 1;
          }
          goto LABEL_31;
        }
        char v28 = 0;
      }
LABEL_34:
      unint64_t v22 = *(char ***)(v15 + 32);
      BOOL v32 = v28 != 0;
      uint64_t v35 = *(void *)(v15 + 8);
      uint64_t v34 = *(void *)(v15 + 16);
      if (v22) {
        unint64_t v33 = (unint64_t)(v22[1] - *v22) >> 3;
      }
      else {
        LODWORD(v33) = 0;
      }
LABEL_37:
      unint64_t v36 = (unint64_t)(v34 - v35) >> 3;
      if (v33 + v36) {
        int v37 = v32;
      }
      else {
        int v37 = 1;
      }
      a2 = (v21 + v37);
      if (!v32)
      {
        if (v18) {
          BOOL v38 = 1;
        }
        else {
          BOOL v38 = v33 == -(int)v36;
        }
        if (v38) {
          char v39 = 1;
        }
        else {
          char v39 = v13;
        }
        if (v39) {
          goto LABEL_57;
        }
LABEL_50:
        unsigned int v40 = *(_DWORD *)(*(void *)*v22 + 60);
        if (v40 >= 0x3FFF) {
          int v41 = 4;
        }
        else {
          int v41 = 2;
        }
        if (v40 < 0x7F) {
          int v42 = 1;
        }
        else {
          int v42 = v41;
        }
        a2 = (v42 + a2);
        goto LABEL_57;
      }
      if (a4) {
        goto LABEL_50;
      }
LABEL_57:
      ++v10;
      uint64_t v7 = a1[1];
      unint64_t v43 = a1[2] - v7;
      if (v10 >= (v43 >> 3))
      {
        if ((v43 & 0x7FFFFFFF8) != 0)
        {
          unint64_t v52 = 0;
          do
          {
            uint64_t v53 = *(void *)(v7 + 8 * v52);
            if (*(_WORD *)(v53 + 48))
            {
              uint64_t v54 = *(void *)(v53 + 8);
              unint64_t v55 = *(void *)(v53 + 16) - v54;
              unint64_t v56 = v55 >> 3;
              if ((v55 >> 3))
              {
                int v57 = 0;
                int v58 = 0;
                uint64_t v59 = (v55 >> 3);
                do
                {
                  if (*(_WORD *)(*(void *)v54 + 48))
                  {
                    if (*(_DWORD *)(*(void *)v54 + 64)) {
                      ++v57;
                    }
                    else {
                      ++v58;
                    }
                  }
                  v54 += 8;
                  --v59;
                }
                while (v59);
              }
              else
              {
                int v58 = 0;
                int v57 = 0;
              }
              if (v57 != v56 && v58 != v56)
              {
                unsigned __int8 v61 = atomic_load(byte_1E9457268);
                if (v61)
                {
                  unsigned __int8 v62 = atomic_load(byte_1E94578A0);
                  if (v62)
                  {
                    printf("YIKES:  %d grandchildren already have trie offsets but %d don't!", v57, v58);
                    putchar(10);
                  }
                  else
                  {
                    uint64_t v63 = sub_19E08D084();
                    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)int buf = 67109376;
                      int v68 = v57;
                      __int16 v69 = 1024;
                      int v70 = v58;
                      _os_log_impl(&dword_19E038000, v63, OS_LOG_TYPE_DEFAULT, "YIKES:  %d grandchildren already have trie offsets but %d don't!", buf, 0xEu);
                    }
                  }
                }
              }
              if (*(_WORD *)(v53 + 48))
              {
                uint64_t v64 = *(void *)(v53 + 8);
                if (((*(void *)(v53 + 16) - v64) & 0x7FFFFFFF8) == 0 || !*(_DWORD *)(*(void *)v64 + 64)) {
                  a2 = sub_19E0F320C(v53, a2, a3, a4);
                }
              }
            }
            ++v52;
            uint64_t v7 = a1[1];
          }
          while (v52 < ((unint64_t)(a1[2] - v7) >> 3));
        }
        return a2;
      }
    }
  }
  return a2;
}

void LXTransliterationCreate(const void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (qword_1E94578B8 != -1) {
    dispatch_once(&qword_1E94578B8, &unk_1EF09F1A0);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 16) = &unk_1EF099818;
  *(void *)(Instance + 24) = 0;
  *(void *)(Instance + 40) = 0;
  *(void *)(Instance + 32) = 0;
  unint64_t v4 = (const __CFDictionary **)(Instance + 32);
  sub_19E070F94((const void **)(Instance + 32), a1);
  CFLocaleRef v5 = (const __CFLocale *)sub_19E039FA8(*v4);
  CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(v2, 0, *v4);
  CFDictionaryAddValue(MutableCopy, @"type", @"unified_transliteration");
  CFStringRef v7 = (const __CFString *)sub_19E0A405C(MutableCopy, v5);
  sub_19E03F0BC((uint64_t)v8, v7);
  operator new();
}

void sub_19E0F38A8(_Unwind_Exception *exception_object)
{
}

void sub_19E0F38D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, void *a18)
{
  if (a2)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
    MEMORY[0x19F3BA710](v22, 0x10F0C40DD53230DLL);
    if (a18 && a17 == 1) {
      free(a18);
    }
    if (v21) {
      CFRelease(v21);
    }
    if (v20) {
      CFRelease(v20);
    }
    __cxa_begin_catch(a1);
    if (v19) {
      CFErrorRef *v19 = sub_19E0A4344(@"error while loading transliteration Dictionary");
    }
    __cxa_end_catch();
    if (!v18) {
      JUMPOUT(0x19E0F3844);
    }
    JUMPOUT(0x19E0F383CLL);
  }
  JUMPOUT(0x19E0F38C0);
}

void sub_19E0F39A4()
{
  __cxa_end_catch();
  if (v0) {
    CFRelease(v0);
  }
  JUMPOUT(0x19E0F38C0);
}

uint64_t sub_19E0F39CC()
{
  qword_1E94578C0 = 0;
  *(void *)algn_1E94578C8 = "LXTransliteration";
  qword_1E94578D0 = 0;
  unk_1E94578D8 = 0;
  qword_1E94578E0 = (uint64_t)sub_19E0F3A20;
  unk_1E94578E8 = 0u;
  unk_1E94578F8 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1E9457920 = result;
  return result;
}

uint64_t sub_19E0F3A20(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 16))();
}

CFStringRef LXTransliterationCopyNativeForTransliterated(uint64_t a1, const __CFString *a2)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  sub_19E03F0BC((uint64_t)v11, a2);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v12) {
    unint64_t v4 = (char *)v12;
  }
  else {
    unint64_t v4 = (char *)v13;
  }
  sub_19E0413C8(__p, v4);
  sub_19E0F7B4C(&v10, v3);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v10.i64[0] == v10.i64[1])
  {
    CFStringRef v6 = 0;
  }
  else
  {
    CFLocaleRef v5 = (const char *)(v10.i64[0] + 24);
    if (*(char *)(v10.i64[0] + 47) < 0) {
      CFLocaleRef v5 = *(const char **)v5;
    }
    CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, 0x8000100u);
  }
  __p[0] = &v10;
  sub_19E0ED9C0((void ***)__p);
  if (v12 && v11[6] == 1) {
    free(v12);
  }
  return v6;
}

void sub_19E0F3B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,void *a22)
{
  std::string __p = &a16;
  sub_19E0ED9C0((void ***)&__p);
  if (a22)
  {
    if (a21 == 1) {
      free(a22);
    }
  }
  _Unwind_Resume(a1);
}

void LXTransliterationEnumerateForTransliterated(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  sub_19E03F0BC((uint64_t)v16, a2);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v17) {
    CFStringRef v6 = (char *)v17;
  }
  else {
    CFStringRef v6 = (char *)v18;
  }
  sub_19E0413C8(__p, v6);
  sub_19E0F7B4C(&v15, v5);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = v15.i64[1];
  for (uint64_t i = v15.i64[0]; i != v8; i += 96)
  {
    char v9 = (const char *)i;
    if (*(char *)(i + 23) < 0) {
      char v9 = *(const char **)i;
    }
    if (v17) {
      int64x2_t v10 = (const char *)v17;
    }
    else {
      int64x2_t v10 = (const char *)v18;
    }
    if (!strcmp(v10, v9))
    {
      if (qword_1E94577F8 != -1) {
        dispatch_once(&qword_1E94577F8, &unk_1EF09F160);
      }
      uint64_t Instance = (const void *)_CFRuntimeCreateInstance();
      sub_19E0EDAAC((uint64_t)Instance + 16, i);
      LOBYTE(__p[0]) = 0;
      (*(void (**)(uint64_t, const void *, void **))(a3 + 16))(a3, Instance, __p);
      int v12 = LOBYTE(__p[0]);
      if (Instance) {
        CFRelease(Instance);
      }
      if (v12) {
        break;
      }
    }
  }
  __p[0] = &v15;
  sub_19E0ED9C0((void ***)__p);
  if (v17)
  {
    if (v16[6] == 1) {
      free(v17);
    }
  }
}

void sub_19E0F3D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,void *a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 == 1) {
      free(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t LXTransliterationHasNativeWord(uint64_t a1, const __CFString *a2)
{
  void v15[2] = *MEMORY[0x1E4F143B8];
  sub_19E03F0BC((uint64_t)v13, a2);
  uint64_t v3 = *(void **)(a1 + 40);
  if (v14) {
    unint64_t v4 = (char *)v14;
  }
  else {
    unint64_t v4 = (char *)v15;
  }
  sub_19E0413C8(&__p, v4);
  int v12 = 0;
  (**(void (***)(uint64_t *__return_ptr))v3[185])(&v10);
  if ((unsigned __int16)v10 <= 0xEuLL) {
    uint64_t v5 = (char *)&v10 + 2;
  }
  else {
    uint64_t v5 = v11;
  }
  uint64_t v6 = (*(uint64_t (**)(void, char *))(*(void *)*v3 + 80))(*v3, v5);
  if ((unsigned __int16)v10 >= 0xFu && v11) {
    MEMORY[0x19F3BA6E0](v11, 0x1000C8077774924);
  }
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v14 && v13[6] == 1) {
    free(v14);
  }
  return v6;
}

void sub_19E0F3F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned __int16 a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,void *a22)
{
  if (a16 >= 0xFu && a17) {
    MEMORY[0x19F3BA6E0](a17, 0x1000C8077774924);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 == 1) {
      free(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t LXTransliterationCopyEntryForNative(uint64_t a1, const __CFString *a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  sub_19E03F0BC((uint64_t)v45, a2);
  uint64_t v3 = *(void **)(a1 + 40);
  if (v46) {
    unint64_t v4 = (char *)v46;
  }
  else {
    unint64_t v4 = (char *)&v47;
  }
  sub_19E0413C8(v23, v4);
  int v44 = 0;
  (**(void (***)(uint64_t *__return_ptr))v3[185])(&v42);
  if ((unsigned __int16)v42 <= 0xEuLL) {
    uint64_t v5 = (char *)&v42 + 2;
  }
  else {
    uint64_t v5 = v43;
  }
  if (!(*(unsigned int (**)(void, char *))(*(void *)*v3 + 80))(*v3, v5))
  {
LABEL_20:
    LOBYTE(v25) = 0;
    char v33 = 0;
    char v13 = 1;
    goto LABEL_59;
  }
  unsigned int v41 = 0;
  sub_19E0F72BC((uint64_t)v63, (uint64_t)v3, *((_DWORD *)v3 + 4) + v44, (int *)&v41, (unsigned __int16 *)&v42);
  if (v41)
  {
    unsigned int v6 = *((_DWORD *)v3 + 4);
    unsigned int v7 = v41 - v6;
    if (v41 < v6) {
      unsigned int v7 = 0;
    }
    unsigned int v41 = v7;
  }
  int v8 = v68;
  if (v68 == -1)
  {
    if (v65 && v64 == 1) {
      free(v65);
    }
    goto LABEL_20;
  }
  memset(&v40, 0, sizeof(v40));
  uint64_t v9 = v3[1] + 8;
  *(void *)&long long __dst = v68 & 0x7FFFFF;
  sub_19E0F8224(v9, (unint64_t *)&__dst, &v40);
  uint64_t v10 = v3[1];
  if (*(void *)(v10 + 40) <= (*(void *)&v8 & 0x7FFFFFuLL))
  {
    unsigned int v12 = 0;
  }
  else
  {
    unsigned int v11 = sub_19E0B4518(v10 + 8, *(void *)&v8 & 0x7FFFFFLL) & 0xFFFFFF;
    if (v11 == 0xFFFFFF) {
      unsigned int v12 = 0;
    }
    else {
      unsigned int v12 = v11;
    }
  }
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v14 = &v40;
  }
  else {
    char v14 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v40.__r_.__value_.__l.__size_;
  }
  sub_19E03E82C(&v38, size, v14, size);
  int v54 = 0x100000;
  int v16 = HIBYTE(v8);
  __int16 v55 = 0;
  char v56 = 0;
  int v57 = 0;
  char v58 = 0;
  *(void *)&long long v59 = 0;
  *(void *)((char *)&v59 + 5) = 0;
  long long v60 = 0uLL;
  *(void *)&long long v61 = 0xFFFFFFFFLL;
  BYTE8(v61) = 0;
  HIDWORD(v61) = 0;
  __int16 v62 = 0;
  do
  {
    int v17 = v16;
    sub_19E0F72BC((uint64_t)&__dst, (uint64_t)v3, *((_DWORD *)v3 + 5) + v12, (int *)&v41, &v38);
    if (v41)
    {
      unsigned int v18 = *((_DWORD *)v3 + 5);
      if (v41 >= v18) {
        unsigned int v12 = v41 - v18;
      }
      else {
        unsigned int v12 = 0;
      }
      unsigned int v41 = v12;
    }
    else
    {
      unsigned int v12 = 0;
    }
    sub_19E03CED8((uint64_t)&v54, (unsigned __int16 *)&__dst);
    long long v59 = *(_OWORD *)&v50[8];
    long long v60 = v51;
    long long v61 = *(_OWORD *)v52;
    __int16 v62 = *(_WORD *)&v52[16];
    if (*((void *)&__dst + 1) && BYTE6(__dst) == 1) {
      free(*((void **)&__dst + 1));
    }
    if (!v12) {
      break;
    }
    int v16 = v17 - 1;
  }
  while (v17);
  sub_19E0413C8(v36, "");
  if (v57) {
    int v19 = v57;
  }
  else {
    int v19 = &v58;
  }
  sub_19E0413C8(__p, v19);
  sub_19E0F8410((char *)&__dst, (long long *)v36, (long long *)v23, (long long *)__p, v67, v66, 0.0);
  uint64_t v26 = v49;
  long long v25 = __dst;
  long long __dst = 0uLL;
  long long v20 = *(_OWORD *)v50;
  uint64_t v49 = 0;
  memset(v50, 0, sizeof(v50));
  long long v27 = v20;
  uint64_t v28 = *(void *)&v50[16];
  uint64_t v30 = *(void *)v52;
  long long v29 = v51;
  *(void *)unint64_t v52 = 0;
  long long v51 = 0uLL;
  int v32 = v53;
  long long v31 = *(_OWORD *)&v52[8];
  char v33 = 1;
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v57 && v56 == 1) {
    free(v57);
  }
  if (v38 >= 0xFu && v39) {
    MEMORY[0x19F3BA6E0](v39, 0x1000C8077774924);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v65 && v64 == 1) {
    free(v65);
  }
  char v13 = 0;
LABEL_59:
  if ((unsigned __int16)v42 >= 0xFu && v43) {
    MEMORY[0x19F3BA6E0](v43, 0x1000C8077774924);
  }
  if (v24 < 0)
  {
    operator delete(v23[0]);
    if (v13) {
      goto LABEL_64;
    }
  }
  else if (v13)
  {
LABEL_64:
    uint64_t Instance = 0;
    goto LABEL_69;
  }
  if (qword_1E94577F8 != -1) {
    dispatch_once(&qword_1E94577F8, &unk_1EF09F160);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  sub_19E0EDAAC(Instance + 16, (uint64_t)&v25);
LABEL_69:
  sub_19E0EDC10((uint64_t)&v25);
  if (v46 && v45[6] == 1) {
    free(v46);
  }
  return Instance;
}

void sub_19E0F44AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,__int16 a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,unsigned __int16 a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,void *a57)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  long long v59 = *(void **)(v57 - 152);
  if (v59 && *(unsigned char *)(v57 - 154) == 1) {
    free(v59);
  }
  if (a51 >= 0xFu && a52) {
    MEMORY[0x19F3BA6E0](a52, 0x1000C8077774924);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a57)
  {
    if (a56 == 1) {
      free(a57);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0F45E8(const __CFDictionary *a1, const __CFLocale *a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EF098918;
  unsigned __int16 v4[3] = v4;
  uint64_t v2 = sub_19E0F4688(a1, a2);
  sub_19E0F4820(v4);
  return v2;
}

void sub_19E0F4674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0F4820((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0F4688(const __CFDictionary *a1, CFLocaleRef locale)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x3002000000;
  unsigned int v11 = sub_19E0F48A4;
  unsigned int v12 = sub_19E0F48B4;
  CFTypeRef cf = 0;
  if (locale)
  {
    if (CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E4F1D218]))
    {
      if (a1)
      {
        CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a1, @"enumerateCachedOnlyOTAPaths");
        CFBooleanRef v4 = Value;
        if (Value)
        {
          CFTypeID v5 = CFGetTypeID(Value);
          if (v5 == CFBooleanGetTypeID()) {
            CFBooleanGetValue(v4);
          }
        }
      }
    }
  }
  LDEnumerateAssetDataItems();
  uint64_t v6 = v9[5];
  void v9[5] = 0;
  _Block_object_dispose(&v8, 8);
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

void sub_19E0F47FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  sub_19E03D880(v7, 0);
  _Unwind_Resume(a1);
}

void *sub_19E0F4820(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_19E0F48A4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

void sub_19E0F48B4(uint64_t a1)
{
}

void sub_19E0F48C0(uint64_t a1, const __CFURL *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v13 = a5;
  CFURLRef v14 = a2;
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8) {
    sub_19E0483E0();
  }
  if ((*(unsigned int (**)(uint64_t, const __CFURL **, uint64_t *))(*(void *)v8 + 48))(v8, &v14, &v13))
  {
    unsigned int v11 = (const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    CFStringRef v12 = CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);
    sub_19E03D880(v11, v12);
    *a6 = 1;
  }
}

void *sub_19E0F4968()
{
  return &unk_1EF098558;
}

uint64_t sub_19E0F4974(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF098558)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

BOOL sub_19E0F49B4(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  CFURLRef v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F724E0], 0)) {
    return 0;
  }

  return sub_19E03D7A8(v3, @"Unigrams");
}

void sub_19E0F4A24(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF098918;
}

void *sub_19E0F4A44()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF098918;
  return result;
}

void sub_19E0F4A7C()
{
}

void *sub_19E0F4A94()
{
  return &unk_1EF098538;
}

uint64_t sub_19E0F4AA0(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF098538)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

BOOL sub_19E0F4AE0(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  CFURLRef v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F724E0], 0)) {
    return 0;
  }

  return sub_19E03D7A8(v3, @"Phrases");
}

void sub_19E0F4B50(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF098868;
}

void *sub_19E0F4B70()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF098868;
  return result;
}

void sub_19E0F4BA8()
{
}

uint64_t sub_19E0F4BC0(const __CFDictionary *a1, const __CFLocale *a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EF098810;
  unsigned __int16 v4[3] = v4;
  uint64_t v2 = sub_19E0F4688(a1, a2);
  sub_19E0F4820(v4);
  return v2;
}

void sub_19E0F4C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0F4820((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0F4C60()
{
  return &unk_1EF098528;
}

uint64_t sub_19E0F4C6C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF098528)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

BOOL sub_19E0F4CAC(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  CFURLRef v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F724C0], 0)) {
    return 0;
  }

  return sub_19E03D7A8(v3, @"Delta");
}

void sub_19E0F4D1C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF098810;
}

void *sub_19E0F4D3C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF098810;
  return result;
}

void sub_19E0F4D74()
{
}

CFStringRef sub_19E0F4D8C(const __CFDictionary *a1, const __CFLocale *a2)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1EF0988C0;
  unsigned __int16 v8[3] = v8;
  CFStringRef v2 = (const __CFString *)sub_19E0F4688(a1, a2);
  sub_19E0F4820(v8);
  if (!v2) {
    return 0;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v4 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, kCFURLPOSIXPathStyle, 1u);
  v8[0] = v4;
  CFURLRef v5 = CFURLCreateCopyAppendingPathComponent(v3, v4, @"morpheme.dat", 0);
  CFStringRef v6 = CFURLCopyFileSystemPath(v5, kCFURLPOSIXPathStyle);
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  CFRelease(v2);
  return v6;
}

void sub_19E0F4EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_19E04137C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0F4F0C()
{
  return &unk_1EF098548;
}

uint64_t sub_19E0F4F18(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF098548)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

BOOL sub_19E0F4F58(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  CFURLRef v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F724E8], 0)) {
    return 0;
  }
  CFURLRef v5 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, @"morpheme.dat", 0);
  CFErrorRef error = 0;
  int IsReachable = CFURLResourceIsReachable(v5, &error);
  if (error) {
    CFRelease(error);
  }
  if (v5) {
    CFRelease(v5);
  }
  return IsReachable != 0;
}

void sub_19E0F4FFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0F5020(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF0988C0;
}

void *sub_19E0F5040()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF0988C0;
  return result;
}

void sub_19E0F5078()
{
}

void *sub_19E0F5090()
{
  return &unk_1EF098578;
}

uint64_t sub_19E0F509C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF098578)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

BOOL sub_19E0F50DC(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  CFURLRef v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F72520], 0)) {
    return 0;
  }

  return sub_19E03D7A8(v3, @"UnifiedTransliteration");
}

void sub_19E0F514C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF0989C8;
}

void *sub_19E0F516C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF0989C8;
  return result;
}

void sub_19E0F51A4()
{
}

void *sub_19E0F51BC()
{
  return &unk_1EF098518;
}

uint64_t sub_19E0F51C8(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF098518)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

BOOL sub_19E0F5208(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  CFURLRef v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F724D8], 0)) {
    return 0;
  }

  return sub_19E03D7A8(v3, @"Lemmatizer");
}

void sub_19E0F5278(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF0987B8;
}

void *sub_19E0F5298()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF0987B8;
  return result;
}

void sub_19E0F52D0()
{
}

void *sub_19E0F52E8()
{
  return &unk_1EF098568;
}

uint64_t sub_19E0F52F4(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF098568)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

BOOL sub_19E0F5334(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  CFURLRef v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F724E0], 0)) {
    return 0;
  }

  return sub_19E03D7A8(v3, @"WordModeration");
}

void sub_19E0F53A4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF098970;
}

void *sub_19E0F53C4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF098970;
  return result;
}

void sub_19E0F53FC()
{
}

void sub_19E0F5414(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  sub_19E03F0BC((uint64_t)v22, a2);
  sub_19E0A3BB0((uint64_t)v20, a1 + 30264);
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x3002000000;
  void v18[3] = sub_19E0F57C0;
  v18[4] = sub_19E0F57D0;
  CFTypeRef cf = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  CFURLRef v5 = (void *)sub_19E0A49D0(a1);
  int v17 = v5;
  CFStringRef v6 = (void *)(*(uint64_t (**)(void))(v5[2] + 16))();
  int v16 = v6;
  if (v6)
  {
    v15[6] = MEMORY[0x1E4F143A8];
    v15[7] = 0x40000000;
    v15[8] = sub_19E0F57D8;
    v15[9] = &unk_1E599C870;
    v15[11] = v18;
    v15[12] = a1;
    v15[10] = a3;
    (*(void (**)(void))(v6[2] + 48))();
    CFRelease(v6);
  }
  CFRelease(v5);
  uint64_t v7 = *(void *)(a1 + 30280);
  if (v7)
  {
    uint64_t v8 = (void *)(*(uint64_t (**)(void))(*(void *)(v7 + 16) + 72))();
    int v17 = v8;
    uint64_t v9 = (*(uint64_t (**)(void))(v8[2] + 16))();
    CFURLRef v14 = (const void *)v9;
    int v16 = (void *)v9;
    if (v9)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      void v15[2] = sub_19E0F5A24;
      void v15[3] = &unk_1E599C898;
      v15[4] = a3;
      v15[5] = v18;
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 16) + 48))(v9 + 16, v15, v10, v11, v12, v13);
      CFRelease(v14);
    }
    CFRelease(v8);
  }
  _Block_object_dispose(v18, 8);
  if (cf) {
    CFRelease(cf);
  }
  if (v21 && v20[6] == 1) {
    free(v21);
  }
  if (v23)
  {
    if (v22[6] == 1) {
      free(v23);
    }
  }
}

void sub_19E0F5700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2) {
    sub_19E04137C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0F57C0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

void sub_19E0F57D0(uint64_t a1)
{
}

void sub_19E0F57D8(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[6];
  CFStringRef v4 = (const __CFString *)LXEntryCopyString(a2);
  uint64_t v5 = *(void *)(v3 + 30280);
  if (v5) {
    CFStringRef v6 = (const void *)(*(uint64_t (**)(void))(*(void *)(v5 + 16) + 72))();
  }
  else {
    CFStringRef v6 = 0;
  }
  int v17 = v6;
  uint64_t v7 = LXCursorCreateByAdvancing((uint64_t)v6, v4);
  uint64_t v8 = (const void *)v7;
  uint64_t v16 = v7;
  if (v7)
  {
    uint64_t v9 = v7 + 16;
    if ((*(uint64_t (**)(uint64_t))(*(void *)(v7 + 16) + 40))(v7 + 16))
    {
      uint64_t v12 = 0;
      uint64_t v13 = &v12;
      uint64_t v14 = 0x2000000000;
      char v15 = 1;
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 0x40000000;
      void v11[2] = sub_19E0F5AF8;
      void v11[3] = &unk_1E599C8C0;
      v11[4] = &v12;
      void v11[5] = v4;
      (*(void (**)(uint64_t, void *))(*(void *)v9 + 48))((uint64_t)v8 + 16, v11);
      BOOL v10 = *((unsigned char *)v13 + 24) != 0;
      _Block_object_dispose(&v12, 8);
    }
    else
    {
      BOOL v10 = 0;
    }
    CFRelease(v8);
  }
  else
  {
    BOOL v10 = 0;
  }
  if (v6) {
    CFRelease(v6);
  }
  if (!v10)
  {
    CFSetAddValue(*(CFMutableSetRef *)(*(void *)(a1[5] + 8) + 40), v4);
    (*(void (**)(void))(a1[4] + 16))();
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_19E0F59C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  CFStringRef v4 = va_arg(va1, const void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  sub_19E062044((const void **)(v2 - 80), 0);
  sub_19E062044((const void **)(v2 - 72), 0);
  sub_19E03D880((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_19E0F5A24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = LXEntryCopyString(a2);
  if (!CFSetContainsValue(*(CFSetRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v3)) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_19E0F5AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E03D880((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_19E0F5AC4(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
}

void sub_19E0F5AF8(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = (const __CFString *)LXEntryCopyString(a2);
  if (!a2) {
    __assert_rtn("LXEntryGetMetaFlags", "LXEntry.cpp", 45, "entry");
  }
  CFStringRef v5 = v4;
  if ((*(_WORD *)(a2 + 54) & 0x180) == 0 || CFStringCompare(*(CFStringRef *)(a1 + 40), v4, 0))
  {
    if (!v5) {
      return;
    }
    goto LABEL_5;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  if (v5) {
LABEL_5:
  }
    CFRelease(v5);
}

void sub_19E0F5BA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E03D880((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0F5BC0(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  sub_19E03F0BC((uint64_t)v11, a2);
  sub_19E0A3BB0((uint64_t)v14, a1 + 30264);
  if (v13) {
    BOOL v5 = v12 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v13);
  }
  sub_19E03F0BC((uint64_t)&v9, a3);
  sub_19E0A3BB0((uint64_t)v11, a1 + 30264);
  if (v10 && BYTE6(v9) == 1) {
    free(v10);
  }
  sub_19E03F97C((uint64_t)&v9, a1 + 8);
  int v6 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)v9 + 24))(v9, v14, v11);
  if (v10) {
    sub_19E0616BC((std::__shared_weak_count *)v10);
  }
  if (v13 && v12 == 1) {
    free(v13);
  }
  if (v15 && v14[6] == 1) {
    free(v15);
  }
  uint64_t v7 = -1;
  if (v6 >= 0) {
    uint64_t v7 = 1;
  }
  if (v6) {
    return v7;
  }
  else {
    return 0;
  }
}

void sub_19E0F5D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,void *a25)
{
  if (a13) {
    sub_19E0616BC(a13);
  }
  if (a19 && a18 == 1) {
    free(a19);
  }
  if (a25)
  {
    if (a24 == 1) {
      free(a25);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0F5DA8()
{
}

const void *sub_19E0F5DD4(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  LODWORD(v4) = 0x100000;
  WORD2(v4) = 0;
  BYTE6(v4) = 1;
  BOOL v5 = 0;
  sub_19E03F6F8(&v4, (uint64_t)"WordModeration-", 0, 0xFu);
  sub_19E0B23D4((uint64_t)v6, (unsigned __int16 *)&v4, a1 + 30136);
  if (v5 && BYTE6(v4) == 1) {
    free(v5);
  }
  sub_19E03FD18((CFStringRef *)&v4, v6);
  uint64_t v2 = v4;
  CFStringRef v4 = 0;
  sub_19E040A10(&v4);
  if (v8 && v7 == 1) {
    free(v8);
  }
  return v2;
}

void sub_19E0F5EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  if (a19)
  {
    if (a18 == 1) {
      free(a19);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E0F5EFC(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 30142);
  *(void *)a1 = &unk_1EF0986E0;
  sub_19E078268((const void **)(a1 + 30280), 0);
  sub_19E0A3B5C((void *)(a1 + 30264));
  *(void *)a1 = &unk_1EF09B8A8;
  uint64_t v3 = *(void **)(a1 + 30240);
  if (v3 && v2[96] == 1) {
    free(v3);
  }
  CFStringRef v4 = *(void **)(a1 + 30208);
  if (v4 && v2[64] == 1) {
    free(v4);
  }
  BOOL v5 = *(void **)(a1 + 30176);
  if (v5 && v2[32] == 1) {
    free(v5);
  }
  int v6 = *(void **)(a1 + 30144);
  if (v6 && *v2 == 1) {
    free(v6);
  }
  sub_19E07D688(a1 + 8);

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0F6004(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 30142);
  *(void *)a1 = &unk_1EF0986E0;
  sub_19E078268((const void **)(a1 + 30280), 0);
  sub_19E0A3B5C((void *)(a1 + 30264));
  *(void *)a1 = &unk_1EF09B8A8;
  uint64_t v3 = *(void **)(a1 + 30240);
  if (v3 && v2[96] == 1) {
    free(v3);
  }
  CFStringRef v4 = *(void **)(a1 + 30208);
  if (v4 && v2[64] == 1) {
    free(v4);
  }
  BOOL v5 = *(void **)(a1 + 30176);
  if (v5 && v2[32] == 1) {
    free(v5);
  }
  int v6 = *(void **)(a1 + 30144);
  if (v6 && *v2 == 1) {
    free(v6);
  }
  sub_19E07D688(a1 + 8);
  return a1;
}

uint64_t sub_19E0F60EC()
{
  return 0;
}

void sub_19E0F60F4(uint64_t a1@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_19E0F6108(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  return sub_19E0A3D48(*(void *)(*(void *)(a1 + 8) + 1480), a2, a3);
}

void sub_19E0F6114(uint64_t a1, uint64_t a2)
{
  sub_19E0D36C4((unsigned __int16 *)&v8, *(void *)(a1 + 8) + 88);
  uint64_t v3 = v8;
  if (v8 != v9)
  {
    do
    {
      if (*((unsigned __int16 *)v3 + 20) < 0xFu) {
        CFStringRef v4 = (char *)v3 + 42;
      }
      else {
        CFStringRef v4 = (char *)v3[6];
      }
      (*(void (**)(uint64_t, void, char *))(a2 + 16))(a2, *((unsigned int *)v3 + 8), v4);
      BOOL v5 = v3[1];
      if (v5)
      {
        do
        {
          int v6 = (void **)v5;
          BOOL v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (void **)v3[2];
          BOOL v7 = *v6 == v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != v9);
  }
  sub_19E08DAEC(v9[0]);
}

void sub_19E0F61D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t sub_19E0F61E8(uint64_t a1)
{
  if (qword_1EB4FEE18 != -1) {
    dispatch_once(&qword_1EB4FEE18, &unk_1EF098E68);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 16) = &unk_1EF0998E0;
  *(void *)(Instance + 24) = a1;
  (*(void (**)(uint64_t *__return_ptr))(***(void ***)(a1 + 8) + 104))(&v5);
  *(void *)(Instance + 32) = v5;
  uint64_t v3 = (unsigned char *)(Instance + 40);
  if (SHIBYTE(v7) < 0)
  {
    sub_19E03FA9C(v3, (void *)__p, *((unint64_t *)&__p + 1));
    if (SHIBYTE(v7) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v3 = __p;
    *(void *)(Instance + 56) = v7;
  }
  *(_DWORD *)(Instance + 64) = 0x100000;
  *(_WORD *)(Instance + 68) = 0;
  *(unsigned char *)(Instance + 70) = 0;
  *(void *)(Instance + 72) = 0;
  *(unsigned char *)(Instance + 80) = 0;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 128) = 0u;
  *(_OWORD *)(Instance + 144) = 0u;
  return Instance;
}

void sub_19E0F6320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0F633C()
{
  qword_1EB4FEE20 = 0;
  *(void *)algn_1EB4FEE28 = "LXCursor";
  qword_1EB4FEE30 = 0;
  unk_1EB4FEE38 = 0;
  qword_1EB4FEE40 = (uint64_t)sub_19E087C70;
  *(_OWORD *)algn_1EB4FEE48 = 0u;
  *(_OWORD *)&algn_1EB4FEE48[16] = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB4FEE80 = result;
  return result;
}

CFStringRef sub_19E0F6390(uint64_t a1)
{
  sub_19E0413C8(&v8, "UnifiedTransliteration-");
  if (*(void *)(a1 + 24)) {
    uint64_t v2 = *(const char **)(a1 + 24);
  }
  else {
    uint64_t v2 = (const char *)(a1 + 32);
  }
  std::string::size_type v3 = strlen(v2);
  CFStringRef v4 = std::string::append(&v8, v2, v3);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v10 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  CFStringRef v6 = sub_19E040B4C((uint64_t)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_19E0F6438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0F6468()
{
  return 0;
}

void sub_19E0F6478()
{
}

void sub_19E0F64A8(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 152)) {
    uint64_t v1 = *(const char **)(a1 + 152);
  }
  else {
    uint64_t v1 = (const char *)(a1 + 160);
  }
  strcmp(v1, "Latn");
  operator new();
}

void sub_19E0F6820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, int a19, __int16 a20,uint64_t a21,char a22,char a23)
{
}

__n128 sub_19E0F6A8C(std::string *a1, std::string *a2, char *__s)
{
  std::string::size_type v6 = strlen(__s);
  uint64_t v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

os_log_t sub_19E0F6AEC()
{
  os_log_t result = os_log_create("com.apple.Lexicon", "TranslitLexicon");
  qword_1E9457928 = (uint64_t)result;
  return result;
}

void sub_19E0F6B1C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF099980;
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2 && *(unsigned char *)(a1 + 150) == 1) {
    free(v2);
  }
  std::string::size_type v3 = *(void **)(a1 + 120);
  if (v3 && *(unsigned char *)(a1 + 118) == 1) {
    free(v3);
  }
  CFStringRef v4 = *(void **)(a1 + 88);
  if (v4 && *(unsigned char *)(a1 + 86) == 1) {
    free(v4);
  }
  long long v5 = *(void **)(a1 + 56);
  if (v5 && *(unsigned char *)(a1 + 54) == 1) {
    free(v5);
  }
  std::string::size_type v6 = *(void **)(a1 + 24);
  if (v6 && *(unsigned char *)(a1 + 22) == 1) {
    free(v6);
  }
  sub_19E0ED838((uint64_t **)(a1 + 8), 0);

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0F6C00(uint64_t a1)
{
  *(void *)a1 = &unk_1EF099980;
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2 && *(unsigned char *)(a1 + 150) == 1) {
    free(v2);
  }
  std::string::size_type v3 = *(void **)(a1 + 120);
  if (v3 && *(unsigned char *)(a1 + 118) == 1) {
    free(v3);
  }
  CFStringRef v4 = *(void **)(a1 + 88);
  if (v4 && *(unsigned char *)(a1 + 86) == 1) {
    free(v4);
  }
  long long v5 = *(void **)(a1 + 56);
  if (v5 && *(unsigned char *)(a1 + 54) == 1) {
    free(v5);
  }
  std::string::size_type v6 = *(void **)(a1 + 24);
  if (v6 && *(unsigned char *)(a1 + 22) == 1) {
    free(v6);
  }
  sub_19E0ED838((uint64_t **)(a1 + 8), 0);
  return a1;
}

double sub_19E0F6CC4(uint64_t *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  double result = 0.0;
  if (v4)
  {
    int v7 = 0;
    int v6 = sub_19E0B4630(a1 + 1, a2, &v7);
    double result = 1.0;
    if (v6) {
      return (double)HIBYTE(v7) / 255.0 * ((double)HIBYTE(v7) / 255.0);
    }
  }
  return result;
}

void *sub_19E0F6D50()
{
  return &unk_1EF09F250;
}

uint64_t sub_19E0F6D5C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F250)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0F6D9C(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
  **(unsigned char **)(result + 8) = 1;
  return result;
}

uint64_t sub_19E0F6DB8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F1F0;
  a2[1] = v2;
  return result;
}

void *sub_19E0F6DDC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F1F0;
  result[1] = v3;
  return result;
}

void sub_19E0F6E24()
{
}

void *sub_19E0F6E3C()
{
  return &unk_1EF0997F8;
}

uint64_t sub_19E0F6E48(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0997F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void sub_19E0F6E88(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v3 = *(char ***)(a1 + 8);
  char v25 = *a2;
  uint64_t v26 = *a3;
  if (*((char *)a3 + 31) < 0)
  {
    sub_19E03FA9C(&__p, (void *)a3[1], a3[2]);
  }
  else
  {
    long long __p = *(_OWORD *)(a3 + 1);
    uint64_t v28 = a3[3];
  }
  unint64_t v4 = (unint64_t)v3[2];
  unint64_t v5 = (unint64_t)v3[1];
  if (v5 >= v4)
  {
    std::string v8 = *v3;
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)*v3) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x666666666666666) {
      sub_19E041BEC();
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (void)v8) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v10;
    }
    char v33 = v3 + 2;
    if (v12)
    {
      if (v12 > 0x666666666666666) {
        sub_19E0416C4();
      }
      uint64_t v13 = (char *)operator new(40 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    char v15 = &v13[40 * v9];
    long long v29 = v13;
    uint64_t v30 = v15;
    long long v31 = v15;
    int v32 = &v13[40 * v12];
    *char v15 = v25;
    *((void *)v15 + 1) = v26;
    uint64_t v16 = v15 + 16;
    if (SHIBYTE(v28) < 0)
    {
      sub_19E03FA9C(v16, (void *)__p, *((unint64_t *)&__p + 1));
      std::string v8 = *v3;
      unint64_t v5 = (unint64_t)v3[1];
      char v15 = v30;
      int v17 = v31;
    }
    else
    {
      *(_OWORD *)uint64_t v16 = __p;
      *((void *)v15 + 4) = v28;
      int v17 = v15;
    }
    long long v31 = v17 + 40;
    *(void *)&long long v37 = v15;
    *((void *)&v37 + 1) = v15;
    long long v36 = v37;
    v34[0] = v3 + 2;
    v34[1] = &v36;
    uint64_t v34[2] = &v37;
    char v35 = 0;
    if ((char *)v5 != v8)
    {
      unint64_t v18 = v5;
      do
      {
        char v19 = *(unsigned char *)(v18 - 40);
        v18 -= 40;
        *(v15 - 40) = v19;
        *((void *)v15 - 4) = *(void *)(v18 + 8);
        long long v20 = v15 - 24;
        if (*(char *)(v18 + 39) < 0)
        {
          sub_19E03FA9C(v20, *(void **)(v5 - 24), *(void *)(v5 - 16));
          char v15 = (char *)*((void *)&v37 + 1);
        }
        else
        {
          long long v21 = *(_OWORD *)(v18 + 16);
          *((void *)v15 - 1) = *(void *)(v18 + 32);
          *(_OWORD *)long long v20 = v21;
        }
        v15 -= 40;
        *((void *)&v37 + 1) = v15;
        unint64_t v5 = v18;
      }
      while ((char *)v18 != v8);
    }
    char v35 = 1;
    sub_19E0F71D0((uint64_t)v34);
    uint64_t v22 = *v3;
    *uint64_t v3 = v15;
    long long v29 = v22;
    uint64_t v30 = v22;
    uint64_t v23 = v3[1];
    uint64_t v14 = v31;
    v3[1] = v31;
    long long v31 = v23;
    uint64_t v24 = v3[2];
    v3[2] = v32;
    int v32 = v24;
    sub_19E0F716C((uint64_t)&v29);
  }
  else
  {
    *(unsigned char *)unint64_t v5 = v25;
    *(void *)(v5 + 8) = v26;
    int v6 = (unsigned char *)(v5 + 16);
    if (SHIBYTE(v28) < 0)
    {
      sub_19E03FA9C(v6, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      long long v7 = __p;
      *(void *)(v5 + 32) = v28;
      *(_OWORD *)int v6 = v7;
    }
    uint64_t v14 = (char *)(v5 + 40);
    v3[1] = (char *)(v5 + 40);
  }
  v3[1] = v14;
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p);
  }
}

void sub_19E0F7124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E0F716C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 40;
      *(void *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_19E0F71D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 + 39) < 0) {
        operator delete(*(void **)(v3 + 16));
      }
      v3 += 40;
    }
  }
  return a1;
}

uint64_t sub_19E0F7238(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09AA08;
  a2[1] = v2;
  return result;
}

void *sub_19E0F725C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09AA08;
  result[1] = v3;
  return result;
}

void sub_19E0F72A4()
{
}

uint64_t sub_19E0F72BC(uint64_t result, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  unint64_t v5 = *(uint64_t **)(a2 + 64);
  unint64_t v6 = v5[1];
  if (v6 < a3) {
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  uint64_t v8 = *v5;
  if (v6 - 1 < a3 || v8 == 0)
  {
    *(_OWORD *)double result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(void *)(result + 80) = 0;
    *(_WORD *)(result + 2) = 16;
    *(unsigned char *)(result + 6) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 37) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 56) = 0;
    *(void *)(result + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(result + 76) = 0;
  }
  else
  {
    int v11 = *(unsigned __int8 *)(v8 + a3);
    v12[0] = v8;
    v12[1] = v6;
    void v12[2] = a3;
    double result = sub_19E08DC50(result, v12, a5, a2 + 88, *(void *)(a2 + 1464), *(void *)(a2 + 1472), *(_DWORD *)(a2 + 80));
    *a4 = (v11 + a3) & (*(char *)(result + 44) >> 31);
  }
  return result;
}

void sub_19E0F73B4(uint64_t a1)
{
  *(void *)a1 = &unk_1EF099BA8;
  sub_19E0672C4(*(char **)(a1 + 80));
  sub_19E0B3FD0((void *)(a1 + 8));

  JUMPOUT(0x19F3BA710);
}

uint64_t sub_19E0F7424(uint64_t a1)
{
  *(void *)a1 = &unk_1EF099BA8;
  sub_19E0672C4(*(char **)(a1 + 80));
  sub_19E0B3FD0((void *)(a1 + 8));
  return a1;
}

void sub_19E0F7474(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 84) = a3;
  sub_19E03A348(a1 + 88);
  *(void *)(a1 + 1480) = 0;
  *(_OWORD *)(a1 + 1464) = 0u;
  operator new();
}

void sub_19E0F79B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  uint64_t v6 = v1[185];
  v1[185] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = v1[184];
  v1[184] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *v4;
  *uint64_t v4 = 0;
  if (v8) {
    sub_19E0DF24C(v8);
  }
  sub_19E0AFAA4(v2);
  uint64_t v9 = v1[8];
  v1[8] = 0;
  if (v9) {
    sub_19E0D054C(v9);
  }
  unint64_t v10 = (std::__shared_weak_count *)v1[4];
  if (v10) {
    sub_19E0616BC(v10);
  }
  uint64_t v11 = v1[1];
  v1[1] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *v1;
  uint64_t *v1 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  _Unwind_Resume(a1);
}

void sub_19E0F7B4C(int64x2_t *a1, uint64_t a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  unsigned int v47 = 0;
  (***(void (****)(uint64_t *__return_ptr))(a2 + 1480))(&v45);
  if ((unsigned __int16)v45 <= 0xEuLL) {
    uint64_t v4 = (char *)&v45 + 2;
  }
  else {
    uint64_t v4 = v46;
  }
  if ((*(unsigned int (**)(void, char *))(**(void **)(a2 + 8) + 80))(*(void *)(a2 + 8), v4))
  {
    unsigned int v5 = v47;
    do
    {
      unsigned int v44 = 0;
      sub_19E0F72BC((uint64_t)v66, a2, *(_DWORD *)(a2 + 20) + v5, (int *)&v44, (unsigned __int16 *)&v45);
      if (v44)
      {
        unsigned int v6 = *(_DWORD *)(a2 + 20);
        if (v44 >= v6) {
          unsigned int v5 = v44 - v6;
        }
        else {
          unsigned int v5 = 0;
        }
      }
      else
      {
        unsigned int v5 = 0;
      }
      int v7 = v69;
      if (*(void *)(*(void *)a2 + 40) > (v69 & 0x7FFFFFuLL))
      {
        unsigned int v8 = sub_19E0B4518(*(void *)a2 + 8, v69 & 0x7FFFFF) & 0xFFFFFF;
        if (v8 != 0xFFFFFF)
        {
          memset(&v43, 0, sizeof(v43));
          uint64_t v9 = *(void *)a2 + 8;
          uint64_t v59 = *(void *)&v7 & 0x7FFFFFLL;
          if (sub_19E0F8224(v9, (unint64_t *)&v59, &v43))
          {
            unsigned int v42 = 0;
            if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v10 = &v43;
            }
            else {
              unint64_t v10 = (std::string *)v43.__r_.__value_.__r.__words[0];
            }
            if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v43.__r_.__value_.__l.__size_;
            }
            sub_19E03E82C(&v40, size, v10, size);
            unsigned int v12 = 0;
            LODWORD(v59) = 0x100000;
            unsigned int v13 = HIBYTE(v7);
            WORD2(v59) = 0;
            BYTE6(v59) = 0;
            long long v60 = 0;
            char v61 = 0;
            *(void *)&long long v62 = 0;
            *(void *)((char *)&v62 + 5) = 0;
            long long v63 = 0uLL;
            *(void *)&long long v64 = 0xFFFFFFFFLL;
            BYTE8(v64) = 0;
            HIDWORD(v64) = 0;
            __int16 v65 = 0;
            do
            {
              sub_19E0F72BC((uint64_t)&v52, a2, *(_DWORD *)(a2 + 16) + v8, (int *)&v42, &v40);
              if (v42)
              {
                unsigned int v14 = *(_DWORD *)(a2 + 16);
                if (v42 >= v14) {
                  unsigned int v8 = v42 - v14;
                }
                else {
                  unsigned int v8 = 0;
                }
                unsigned int v42 = v8;
              }
              else
              {
                unsigned int v8 = 0;
              }
              sub_19E03CED8((uint64_t)&v59, (unsigned __int16 *)&v52);
              long long v62 = v55;
              long long v63 = v56;
              long long v64 = v57;
              __int16 v65 = v58;
              if (v53[0] && BYTE6(v52) == 1) {
                free(v53[0]);
              }
              if (!v8) {
                break;
              }
            }
            while (v12++ < v13);
            sub_19E039858((uint64_t)&__len, (unsigned __int16 *)&v59);
            if (v50) {
              uint64_t v16 = (uint64_t *)v50;
            }
            else {
              uint64_t v16 = &v51;
            }
            sub_19E057A94(__p, v16, __len);
            if (v67) {
              int v17 = v67;
            }
            else {
              int v17 = (char *)&v68;
            }
            unint64_t v37 = 0xFFF0000000000000;
            int v35 = DWORD1(v62);
            int v36 = 0;
            unint64_t v19 = a1->u64[1];
            unint64_t v18 = a1[1].u64[0];
            if (v19 >= v18)
            {
              unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - a1->i64[0]) >> 5);
              unint64_t v22 = v21 + 1;
              if (v21 + 1 > 0x2AAAAAAAAAAAAAALL) {
                sub_19E041BEC();
              }
              unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - a1->i64[0]) >> 5);
              if (2 * v23 > v22) {
                unint64_t v22 = 2 * v23;
              }
              if (v23 >= 0x155555555555555) {
                unint64_t v24 = 0x2AAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v24 = v22;
              }
              *(void *)&long long v55 = a1 + 1;
              if (v24)
              {
                if (v24 > 0x2AAAAAAAAAAAAAALL) {
                  sub_19E0416C4();
                }
                char v25 = (char *)operator new(96 * v24);
              }
              else
              {
                char v25 = 0;
              }
              unint64_t v52 = v25;
              v53[0] = &v25[96 * v21];
              v53[1] = v53[0];
              int v54 = &v25[96 * v24];
              sub_19E0F82E4((char *)v53[0], v17, (long long *)__p, (double *)&v37, (float *)&v36, &v35);
              uint64_t v26 = (char *)v53[0];
              long long v20 = (char *)v53[1] + 96;
              v53[1] = (char *)v53[1] + 96;
              uint64_t v28 = a1->i64[0];
              unint64_t v27 = a1->u64[1];
              if (v27 == a1->i64[0])
              {
                int64x2_t v33 = vdupq_n_s64(v27);
              }
              else
              {
                do
                {
                  long long v29 = *(_OWORD *)(v27 - 96);
                  *((void *)v26 - 10) = *(void *)(v27 - 80);
                  *((_OWORD *)v26 - 6) = v29;
                  *(void *)(v27 - 88) = 0;
                  *(void *)(v27 - 80) = 0;
                  *(void *)(v27 - 96) = 0;
                  long long v30 = *(_OWORD *)(v27 - 72);
                  *((void *)v26 - 7) = *(void *)(v27 - 56);
                  *(_OWORD *)(v26 - 72) = v30;
                  *(void *)(v27 - 64) = 0;
                  *(void *)(v27 - 56) = 0;
                  *(void *)(v27 - 72) = 0;
                  long long v31 = *(_OWORD *)(v27 - 48);
                  *((void *)v26 - 4) = *(void *)(v27 - 32);
                  *((_OWORD *)v26 - 3) = v31;
                  *(void *)(v27 - 40) = 0;
                  *(void *)(v27 - 32) = 0;
                  *(void *)(v27 - 48) = 0;
                  long long v32 = *(_OWORD *)(v27 - 24);
                  *((_DWORD *)v26 - 2) = *(_DWORD *)(v27 - 8);
                  *(_OWORD *)(v26 - 24) = v32;
                  v26 -= 96;
                  v27 -= 96;
                }
                while (v27 != v28);
                int64x2_t v33 = *a1;
                long long v20 = (char *)v53[1];
              }
              a1->i64[0] = (uint64_t)v26;
              a1->i64[1] = (uint64_t)v20;
              *(int64x2_t *)int v53 = v33;
              uint64_t v34 = (char *)a1[1].i64[0];
              a1[1].i64[0] = (uint64_t)v54;
              int v54 = v34;
              unint64_t v52 = (char *)v33.i64[0];
              sub_19E0F83C0((uint64_t)&v52);
            }
            else
            {
              sub_19E0F82E4((char *)a1->i64[1], v17, (long long *)__p, (double *)&v37, (float *)&v36, &v35);
              long long v20 = (char *)(v19 + 96);
              a1->i64[1] = v19 + 96;
            }
            a1->i64[1] = (uint64_t)v20;
            if (v39 < 0) {
              operator delete(__p[0]);
            }
            if (v50 && __len_6 == 1) {
              free(v50);
            }
            if (v60 && BYTE6(v59) == 1) {
              free(v60);
            }
            if (v40 >= 0xFu && v41) {
              MEMORY[0x19F3BA6E0](v41, 0x1000C8077774924);
            }
          }
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v43.__r_.__value_.__l.__data_);
          }
        }
      }
      unsigned int v47 = v5;
      if (v67 && v66[6] == 1)
      {
        free(v67);
        unsigned int v5 = v47;
      }
    }
    while (v5);
  }
  if ((unsigned __int16)v45 >= 0xFu)
  {
    if (v46) {
      MEMORY[0x19F3BA6E0](v46, 0x1000C8077774924);
    }
  }
}

void sub_19E0F80F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,unsigned __int16 a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,unsigned __int16 a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,void *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,void *a54)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a37 && a36 == 1) {
    free(a37);
  }
  if (a54) {
    BOOL v57 = a53 == 1;
  }
  else {
    BOOL v57 = 0;
  }
  if (v57) {
    free(a54);
  }
  if (a21 >= 0xFu && a22) {
    MEMORY[0x19F3BA6E0](a22, 0x1000C8077774924);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  __int16 v58 = *(void **)(v55 - 192);
  if (v58 && *(unsigned char *)(v55 - 194) == 1) {
    free(v58);
  }
  if (a31 >= 0xFu)
  {
    if (a32) {
      MEMORY[0x19F3BA6E0](a32, 0x1000C8077774924);
    }
  }
  *(void *)(v55 - 200) = v54;
  sub_19E0ED9C0((void ***)(v55 - 200));
  _Unwind_Resume(a1);
}

BOOL sub_19E0F8224(uint64_t a1, unint64_t *a2, std::string *a3)
{
  unint64_t v5 = *a2;
  unsigned int v6 = (uint64_t *)(a1 + 16);
  unint64_t v7 = sub_19E0428BC(a1 + 16);
  if (v5 < v7)
  {
    sub_19E042574(v6, *a2, (unint64_t)__p);
    if ((v12 & 0x80u) == 0) {
      size_t v8 = v12;
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    if ((v12 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    sub_19E069160(a3, (const std::string::value_type *)v9, v8);
    if ((char)v12 < 0) {
      operator delete(__p[0]);
    }
  }
  return v5 < v7;
}

void sub_19E0F82C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19E0F82E4(char *a1, char *a2, long long *a3, double *a4, float *a5, int *a6)
{
  sub_19E0413C8(v14, a2);
  sub_19E0413C8(__p, "");
  sub_19E0F8410(a1, (long long *)v14, a3, (long long *)__p, *a6, *a4, *a5);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  return a1;
}

void sub_19E0F838C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E0F83C0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    sub_19E0EDA44(i - 96);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_19E0F8410(char *__dst, long long *a2, long long *a3, long long *a4, int a5, double a6, double a7)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E03FA9C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v13 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v13;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_19E03FA9C(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v14 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v14;
  }
  char v15 = __dst + 48;
  if (*((char *)a4 + 23) < 0)
  {
    sub_19E03FA9C(v15, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v16 = *a4;
    *((void *)__dst + 8) = *((void *)a4 + 2);
    *(_OWORD *)char v15 = v16;
  }
  *((double *)__dst + 9) = a6;
  *((double *)__dst + 10) = a7;
  *((_DWORD *)__dst + 22) = a5;
  return __dst;
}

void sub_19E0F84E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E0F851C(void *a1, unsigned int *a2)
{
  int v4 = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
  double result = 0.0;
  if (v4)
  {
    unsigned int v8 = 0;
    int v6 = sub_19E0C3B60(a1 + 1, a2, (int *)&v8);
    double result = 1.0;
    if (v6)
    {
      double v7 = (double)(v8 >> 23) / 255.0;
      return v7 * v7;
    }
  }
  return result;
}

uint64_t sub_19E0F85AC(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = 0;
  v4[0] = &unk_1EF09F3B0;
  v4[1] = &v3;
  unsigned __int16 v4[3] = v4;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v4);
  sub_19E0C3820(v4);
  return v3;
}

void sub_19E0F865C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0C3820((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0F8670()
{
  return &unk_1EF09F410;
}

uint64_t sub_19E0F867C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F410)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0F86BC(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
  **(unsigned char **)(result + 8) = 1;
  return result;
}

uint64_t sub_19E0F86D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F3B0;
  a2[1] = v2;
  return result;
}

void *sub_19E0F86FC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F3B0;
  result[1] = v3;
  return result;
}

void sub_19E0F8744()
{
}

void sub_19E0F875C(unsigned int *a1, uint64_t a2, int a3)
{
  if (*(void *)a1 != -1)
  {
    uint64_t v3 = *(void *)(a2 + 72);
    uint64_t v4 = (*(_DWORD *)(v3 + 4 * *(void *)a1) >> 10 << ((*(_DWORD *)(v3
                                                                                   + 4 * *(void *)a1) >> 6) & 8)) ^ *(void *)a1 ^ a3;
    if ((*(_DWORD *)(v3 + 4 * v4) & 0x800000FF) == a3)
    {
      *(void *)a1 = v4;
      if (!v4) {
        __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
      }
      sub_19E0F851C((void *)(a2 + 40), a1);
    }
    else
    {
      *(void *)a1 = -1;
    }
  }
}

void *sub_19E0F87F8()
{
  return &unk_1EF09FA30;
}

uint64_t sub_19E0F8804(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09FA30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0F8844(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3 = *a2;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *a3;
  unint64_t v6 = v4[1];
  unint64_t v7 = v4[2];
  if (v6 >= v7)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555) {
      sub_19E041BEC();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v12;
    }
    unint64_t v19 = v4 + 2;
    if (v13) {
      unint64_t v13 = (unint64_t)sub_19E0DEFC0(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13;
    long long v16 = (unsigned char *)(v13 + 48 * v10);
    unint64_t v18 = v13 + 48 * v14;
    sub_19E0F8984(v16, v3, v5);
    int v17 = v16 + 48;
    sub_19E0DF008(v4, &v15);
    uint64_t v9 = v4[1];
    uint64_t result = sub_19E0DF0EC((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)sub_19E0F8984((unsigned char *)v4[1], *a2, *a3);
    uint64_t v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19E0F8964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

unsigned char *sub_19E0F8984(unsigned char *a1, char a2, uint64_t a3)
{
  *a1 = a2;
  v5[0] = a3;
  int v6 = 1;
  sub_19E105F34((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19E07FA6C((uint64_t)v5);
  return a1;
}

void sub_19E0F89D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E07FA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0F89EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F9D0;
  a2[1] = v2;
  return result;
}

void *sub_19E0F8A10(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F9D0;
  result[1] = v3;
  return result;
}

void sub_19E0F8A58()
{
}

double sub_19E0F8A70(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  if (*(unsigned char *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (uint64_t v7 = *v5) != 0)
  {
    int v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    _DWORD v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19E08DC50(a1, v10, a5, a2 + 112, *(void *)(a2 + 1488), *(void *)(a2 + 1496), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(unsigned char *)(a1 + 6) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 37) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)&double result = 0xFFFFFFFFLL;
    *(void *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

double sub_19E0F8B44(uint64_t *a1, uint64_t *a2)
{
  int v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  double result = 0.0;
  if (v4)
  {
    unsigned int v8 = 0;
    int v6 = sub_19E0CB364(a1 + 1, a2, &v8);
    double result = 1.0;
    if (v6)
    {
      double v7 = (double)(v8 >> 23) / 255.0;
      return v7 * v7;
    }
  }
  return result;
}

uint64_t sub_19E0F8BD4(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = 0;
  v4[0] = &unk_1EF09F430;
  v4[1] = &v3;
  unsigned __int16 v4[3] = v4;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v4);
  sub_19E0CB188(v4);
  return v3;
}

void sub_19E0F8C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0CB188((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0F8C98()
{
  return &unk_1EF09F490;
}

uint64_t sub_19E0F8CA4(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F490)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0F8CE4(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
  **(unsigned char **)(result + 8) = 1;
  return result;
}

uint64_t sub_19E0F8D00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F430;
  a2[1] = v2;
  return result;
}

void *sub_19E0F8D24(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F430;
  result[1] = v3;
  return result;
}

void sub_19E0F8D6C()
{
}

float sub_19E0F8D84(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = *a1;
  float v4 = 0.0;
  if (*a1 != -1)
  {
    char __s = a3;
    unint64_t v11 = 0;
    uint64_t v12 = v3;
    int v7 = sub_19E0CA7F4((uint64_t *)(a2 + 56), &__s, &v12, &v11, 1uLL);
    uint64_t v8 = v12;
    if (v7 == -2) {
      uint64_t v8 = -1;
    }
    *a1 = v8;
    if (v8 != -1)
    {
      if (!v8) {
        __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
      }
      return sub_19E0F8B44((uint64_t *)(a2 + 40), a1);
    }
  }
  return v4;
}

void *sub_19E0F8E38()
{
  return &unk_1EF09FAB0;
}

uint64_t sub_19E0F8E44(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09FAB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0F8E84(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3 = *a2;
  float v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *a3;
  unint64_t v6 = v4[1];
  unint64_t v7 = v4[2];
  if (v6 >= v7)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555) {
      sub_19E041BEC();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v12;
    }
    unint64_t v19 = v4 + 2;
    if (v13) {
      unint64_t v13 = (unint64_t)sub_19E0DEFC0(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13;
    long long v16 = (unsigned char *)(v13 + 48 * v10);
    unint64_t v18 = v13 + 48 * v14;
    sub_19E0F8FC4(v16, v3, v5);
    int v17 = v16 + 48;
    sub_19E0DF008(v4, &v15);
    uint64_t v9 = v4[1];
    uint64_t result = sub_19E0DF0EC((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)sub_19E0F8FC4((unsigned char *)v4[1], *a2, *a3);
    uint64_t v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19E0F8FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

unsigned char *sub_19E0F8FC4(unsigned char *a1, char a2, uint64_t a3)
{
  *a1 = a2;
  v5[0] = a3;
  int v6 = 2;
  sub_19E105F34((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19E07FA6C((uint64_t)v5);
  return a1;
}

void sub_19E0F9010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E07FA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0F902C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09FA50;
  a2[1] = v2;
  return result;
}

void *sub_19E0F9050(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09FA50;
  result[1] = v3;
  return result;
}

void sub_19E0F9098()
{
}

double sub_19E0F90B0(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  if (*(unsigned char *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (uint64_t v7 = *v5) != 0)
  {
    int v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    _DWORD v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19E08DC50(a1, v10, a5, a2 + 176, *(void *)(a2 + 1552), *(void *)(a2 + 1560), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(unsigned char *)(a1 + 6) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 37) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)&double result = 0xFFFFFFFFLL;
    *(void *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

double sub_19E0F9184(uint64_t a1, unint64_t *a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  double result = 0.0;
  if (v4)
  {
    unsigned int v8 = 0;
    int v6 = sub_19E0B92A8(a1 + 8, a2, &v8);
    double result = 1.0;
    if (v6)
    {
      double v7 = (double)(v8 >> 23) / 255.0;
      return v7 * v7;
    }
  }
  return result;
}

uint64_t sub_19E0F9214(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = 0;
  v4[0] = &unk_1EF09F4B0;
  v4[1] = &v3;
  unsigned __int16 v4[3] = v4;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v4);
  sub_19E0F92D8(v4);
  return v3;
}

void sub_19E0F92C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0F92D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0F92D8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E0F935C()
{
  return &unk_1EF09F520;
}

uint64_t sub_19E0F9368(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F520)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0F93A8(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
  **(unsigned char **)(result + 8) = 1;
  return result;
}

uint64_t sub_19E0F93C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F4B0;
  a2[1] = v2;
  return result;
}

void *sub_19E0F93E8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F4B0;
  result[1] = v3;
  return result;
}

void sub_19E0F9430()
{
}

float sub_19E0F9448(unint64_t *a1, uint64_t a2, char a3)
{
  unint64_t v3 = *a1;
  float v4 = 0.0;
  if (*a1 != -1)
  {
    char v10 = a3;
    unint64_t v11 = 0;
    unint64_t v12 = v3;
    int v7 = sub_19E0B9338(a2 + 56, (uint64_t)&v10, &v12, &v11, 1uLL);
    unint64_t v8 = v12;
    if (v7 == -2) {
      unint64_t v8 = -1;
    }
    *a1 = v8;
    if (v8 != -1)
    {
      if (!v8) {
        __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
      }
      return sub_19E0F9184(a2 + 40, a1);
    }
  }
  return v4;
}

void *sub_19E0F94FC()
{
  return &unk_1EF09FB30;
}

uint64_t sub_19E0F9508(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09FB30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0F9548(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3 = *a2;
  float v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *a3;
  unint64_t v6 = v4[1];
  unint64_t v7 = v4[2];
  if (v6 >= v7)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555) {
      sub_19E041BEC();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v12;
    }
    unint64_t v19 = v4 + 2;
    if (v13) {
      unint64_t v13 = (unint64_t)sub_19E0DEFC0(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13;
    long long v16 = (unsigned char *)(v13 + 48 * v10);
    unint64_t v18 = v13 + 48 * v14;
    sub_19E0F9688(v16, v3, v5);
    int v17 = v16 + 48;
    sub_19E0DF008(v4, &v15);
    uint64_t v9 = v4[1];
    uint64_t result = sub_19E0DF0EC((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)sub_19E0F9688((unsigned char *)v4[1], *a2, *a3);
    uint64_t v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19E0F9668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

unsigned char *sub_19E0F9688(unsigned char *a1, char a2, uint64_t a3)
{
  *a1 = a2;
  v5[0] = a3;
  int v6 = 3;
  sub_19E105F34((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19E07FA6C((uint64_t)v5);
  return a1;
}

void sub_19E0F96D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E07FA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0F96F0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09FAD0;
  a2[1] = v2;
  return result;
}

void *sub_19E0F9714(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09FAD0;
  result[1] = v3;
  return result;
}

void sub_19E0F975C()
{
}

double sub_19E0F9774(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  if (*(unsigned char *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (uint64_t v7 = *v5) != 0)
  {
    int v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    _DWORD v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19E08DC50(a1, v10, a5, a2 + 680, *(void *)(a2 + 2056), *(void *)(a2 + 2064), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(unsigned char *)(a1 + 6) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 37) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)&double result = 0xFFFFFFFFLL;
    *(void *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19E0F9848(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = 0;
  v4[0] = &unk_1EF09F540;
  v4[1] = &v3;
  unsigned __int16 v4[3] = v4;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v4);
  sub_19E0B4198(v4);
  return v3;
}

void sub_19E0F98F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B4198((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0F990C()
{
  return &unk_1EF09F5A0;
}

uint64_t sub_19E0F9918(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F5A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0F9958(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
  **(unsigned char **)(result + 8) = 1;
  return result;
}

uint64_t sub_19E0F9974(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F540;
  a2[1] = v2;
  return result;
}

void *sub_19E0F9998(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F540;
  result[1] = v3;
  return result;
}

void sub_19E0F99E0()
{
}

float sub_19E0F99F8(uint64_t a1, uint64_t a2, char a3)
{
  float v3 = 0.0;
  if (*(void *)a1 != 0xFFFFFFFFLL)
  {
    uint64_t v9 = *(void *)a1;
    if (*(char *)(a1 + 31) < 0)
    {
      sub_19E03FA9C(&v10, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      long long v10 = *(_OWORD *)(a1 + 8);
      uint64_t v11 = *(void *)(a1 + 24);
    }
    char v16 = a3;
    sub_19E042718((uint64_t *)(a2 + 64), (uint64_t)&v16, 1uLL, (uint64_t)&v9, &v12);
    uint64_t v7 = v12;
    uint64_t v14 = v12;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_19E03FA9C(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
      uint64_t v7 = v14;
    }
    else
    {
      std::string __p = v13;
    }
    *(void *)a1 = v7;
    std::string::operator=((std::string *)(a1 + 8), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete((void *)v10);
    }
    if (*(void *)a1 != 0xFFFFFFFFLL)
    {
      if (!*(void *)a1) {
        __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
      }
      return sub_19E0F6CC4((uint64_t *)(a2 + 40), a1);
    }
  }
  return v3;
}

void sub_19E0F9B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0F9BBC()
{
  return &unk_1EF09FBB0;
}

uint64_t sub_19E0F9BC8(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09FBB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void sub_19E0F9C08(uint64_t a1, char *a2, uint64_t a3)
{
  char v3 = *a2;
  float v4 = *(uint64_t **)(a1 + 8);
  uint64_t v13 = *(void *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_19E03FA9C(&__p, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long __p = *(_OWORD *)(a3 + 8);
    uint64_t v15 = *(void *)(a3 + 24);
  }
  unint64_t v5 = v4[2];
  unint64_t v6 = v4[1];
  if (v6 >= v5)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v8 + 1 > 0x555555555555555) {
      sub_19E041BEC();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 4);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    long long v20 = v4 + 2;
    if (v11) {
      unint64_t v11 = (unint64_t)sub_19E0DEFC0(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v16 = v11;
    int v17 = (unsigned char *)(v11 + 48 * v8);
    unint64_t v18 = v17;
    unint64_t v19 = v11 + 48 * v12;
    sub_19E0F9DA8(v17, v3, &v13);
    v18 += 48;
    sub_19E0DF008(v4, &v16);
    uint64_t v7 = v4[1];
    sub_19E0DF0EC((uint64_t)&v16);
  }
  else
  {
    sub_19E0F9DA8((unsigned char *)v4[1], v3, &v13);
    uint64_t v7 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v7;
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
}

void sub_19E0F9D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  *(void *)(v17 + 8) = v18;
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_19E0F9DA8(unsigned char *a1, char a2, uint64_t *a3)
{
  *a1 = a2;
  uint64_t v4 = (uint64_t)(a1 + 8);
  uint64_t v6 = *a3;
  if (*((char *)a3 + 31) < 0)
  {
    sub_19E03FA9C(&v7, (void *)a3[1], a3[2]);
  }
  else
  {
    long long v7 = *(_OWORD *)(a3 + 1);
    uint64_t v8 = a3[3];
  }
  int v9 = 4;
  sub_19E105F34(v4, (uint64_t)&v6);
  sub_19E07FA6C((uint64_t)&v6);
  return a1;
}

void sub_19E0F9E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E07FA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0F9E4C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09FB50;
  a2[1] = v2;
  return result;
}

void *sub_19E0F9E70(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09FB50;
  result[1] = v3;
  return result;
}

void sub_19E0F9EB8()
{
}

double sub_19E0F9ED0(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  if (*(unsigned char *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (uint64_t v7 = *v5) != 0)
  {
    int v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    _DWORD v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19E08DC50(a1, v10, a5, a2 + 136, *(void *)(a2 + 1512), *(void *)(a2 + 1520), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(unsigned char *)(a1 + 6) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 37) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)&double result = 0xFFFFFFFFLL;
    *(void *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19E0F9FA4(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = 0;
  v4[0] = &unk_1EF09F5C0;
  v4[1] = &v3;
  unsigned __int16 v4[3] = v4;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v4);
  sub_19E0C3820(v4);
  return v3;
}

void sub_19E0FA054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0C3820((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0FA068()
{
  return &unk_1EF09F620;
}

uint64_t sub_19E0FA074(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F620)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FA0B4(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
  **(unsigned char **)(result + 8) = 1;
  return result;
}

uint64_t sub_19E0FA0D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F5C0;
  a2[1] = v2;
  return result;
}

void *sub_19E0FA0F4(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F5C0;
  result[1] = v3;
  return result;
}

void sub_19E0FA13C()
{
}

void *sub_19E0FA154()
{
  return &unk_1EF09FC30;
}

uint64_t sub_19E0FA160(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09FC30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FA1A0(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3 = *a2;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *a3;
  unint64_t v6 = v4[1];
  unint64_t v7 = v4[2];
  if (v6 >= v7)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555) {
      sub_19E041BEC();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v12;
    }
    unint64_t v19 = v4 + 2;
    if (v13) {
      unint64_t v13 = (unint64_t)sub_19E0DEFC0(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13;
    unint64_t v16 = (unsigned char *)(v13 + 48 * v10);
    unint64_t v18 = v13 + 48 * v14;
    sub_19E0FA2E0(v16, v3, v5);
    uint64_t v17 = v16 + 48;
    sub_19E0DF008(v4, &v15);
    uint64_t v9 = v4[1];
    uint64_t result = sub_19E0DF0EC((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)sub_19E0FA2E0((unsigned char *)v4[1], *a2, *a3);
    uint64_t v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19E0FA2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

unsigned char *sub_19E0FA2E0(unsigned char *a1, char a2, uint64_t a3)
{
  *a1 = a2;
  v5[0] = a3;
  int v6 = 5;
  sub_19E105F34((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19E07FA6C((uint64_t)v5);
  return a1;
}

void sub_19E0FA32C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E07FA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0FA348(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09FBD0;
  a2[1] = v2;
  return result;
}

void *sub_19E0FA36C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09FBD0;
  result[1] = v3;
  return result;
}

void sub_19E0FA3B4()
{
}

double sub_19E0FA3CC(uint64_t *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  double result = 0.0;
  if (v4)
  {
    unsigned int v8 = 0;
    int v6 = sub_19E06E5B4(a1 + 1, a2, &v8);
    double result = 1.0;
    if (v6)
    {
      double v7 = (double)(v8 >> 23) / 255.0;
      return v7 * v7;
    }
  }
  return result;
}

uint64_t sub_19E0FA45C(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = 0;
  v4[0] = &unk_1EF09F640;
  v4[1] = &v3;
  unsigned __int16 v4[3] = v4;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v4);
  sub_19E0FA520(v4);
  return v3;
}

void sub_19E0FA50C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0FA520((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0FA520(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E0FA5A4()
{
  return &unk_1EF09F6B0;
}

uint64_t sub_19E0FA5B0(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F6B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FA5F0(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
  **(unsigned char **)(result + 8) = 1;
  return result;
}

uint64_t sub_19E0FA60C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F640;
  a2[1] = v2;
  return result;
}

void *sub_19E0FA630(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F640;
  result[1] = v3;
  return result;
}

void sub_19E0FA678()
{
}

float sub_19E0FA690(uint64_t a1, uint64_t a2, char a3)
{
  float v3 = 0.0;
  if (*(_DWORD *)(a1 + 12) != -1)
  {
    long long v8 = *(_OWORD *)a1;
    char v9 = a3;
    *(void *)a1 = sub_19E06E628(a2 + 48, &v8, (uint64_t)&v9, 1);
    *(void *)(a1 + 8) = v6;
    if (v6 <= 0xFFFFFFFEFFFFFFFFLL)
    {
      if ((v6 & 0xFF00) != 0) {
        __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
      }
      return sub_19E0FA3CC((uint64_t *)(a2 + 40), a1);
    }
  }
  return v3;
}

void *sub_19E0FA740()
{
  return &unk_1EF09FCB0;
}

uint64_t sub_19E0FA74C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09FCB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FA78C(uint64_t a1, char *a2, long long *a3)
{
  char v3 = *a2;
  int v4 = *(uint64_t **)(a1 + 8);
  long long v14 = *a3;
  unint64_t v5 = v4[1];
  unint64_t v6 = v4[2];
  if (v5 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 4);
    if (v9 + 1 > 0x555555555555555) {
      sub_19E041BEC();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    unint64_t v19 = v4 + 2;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_19E0DEFC0(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v15 = v12;
    unint64_t v16 = (unsigned char *)(v12 + 48 * v9);
    uint64_t v17 = v16;
    unint64_t v18 = v12 + 48 * v13;
    sub_19E0FA8D0(v16, v3, &v14);
    v17 += 48;
    sub_19E0DF008(v4, &v15);
    uint64_t v8 = v4[1];
    uint64_t result = sub_19E0DF0EC((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)sub_19E0FA8D0((unsigned char *)v4[1], v3, &v14);
    uint64_t v8 = v5 + 48;
    v4[1] = v5 + 48;
  }
  v4[1] = v8;
  return result;
}

void sub_19E0FA8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

unsigned char *sub_19E0FA8D0(unsigned char *a1, char a2, _OWORD *a3)
{
  *a1 = a2;
  v5[0] = *a3;
  int v6 = 6;
  sub_19E105F34((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19E07FA6C((uint64_t)v5);
  return a1;
}

void sub_19E0FA920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E0FA93C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09FC50;
  a2[1] = v2;
  return result;
}

void *sub_19E0FA960(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09FC50;
  result[1] = v3;
  return result;
}

void sub_19E0FA9A8()
{
}

double sub_19E0FA9C0(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  if (*(unsigned char *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (uint64_t v7 = *v5) != 0)
  {
    int v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    _DWORD v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19E08DC50(a1, v10, a5, a2 + 120, *(void *)(a2 + 1496), *(void *)(a2 + 1504), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(unsigned char *)(a1 + 6) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 37) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)&double result = 0xFFFFFFFFLL;
    *(void *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19E0FAA94(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    uint64_t v7 = *a2;
    unint64_t v9 = 0;
    uint64_t v10 = v7;
    int v8 = sub_19E0CA7F4(a1 + 1, "", &v10, &v9, 0);
    *a3 = v8;
    return v8 != -1;
  }
  return result;
}

uint64_t sub_19E0FAB24(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = 0;
  v4[0] = &unk_1EF09F6D0;
  v4[1] = &v3;
  unsigned __int16 v4[3] = v4;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v4);
  sub_19E0CB188(v4);
  return v3;
}

void sub_19E0FABD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0CB188((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0FABE8()
{
  return &unk_1EF09F730;
}

uint64_t sub_19E0FABF4(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F730)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FAC34(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
  **(unsigned char **)(result + 8) = 1;
  return result;
}

uint64_t sub_19E0FAC50(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F6D0;
  a2[1] = v2;
  return result;
}

void *sub_19E0FAC74(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F6D0;
  result[1] = v3;
  return result;
}

void sub_19E0FACBC()
{
}

uint64_t *sub_19E0FACD4(uint64_t *result, uint64_t a2, char a3)
{
  uint64_t v3 = *result;
  if (*result != -1)
  {
    int v4 = result;
    char __s = a3;
    unint64_t v7 = 0;
    uint64_t v8 = v3;
    uint64_t result = (uint64_t *)sub_19E0CA7F4((uint64_t *)(a2 + 48), &__s, &v8, &v7, 1uLL);
    uint64_t v5 = v8;
    if (result == -2) {
      uint64_t v5 = -1;
    }
    *int v4 = v5;
    if (!v5) {
      __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
    }
  }
  return result;
}

uint64_t sub_19E0FAD5C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int16 v5 = 0;
  char v12 = 0;
  unint64_t v6 = (uint64_t *)(a1 + 8);
  do
  {
    char __s = v5;
    uint64_t v7 = *a2;
    unint64_t v13 = 0;
    uint64_t v14 = v7;
    uint64_t result = sub_19E0CA7F4(v6, &__s, &v14, &v13, 1uLL);
    uint64_t v9 = v14;
    if (result == -2) {
      uint64_t v9 = -1;
    }
    uint64_t v14 = v9;
    if (v9 != -1)
    {
      uint64_t result = sub_19E0CA8AC(*(void *)(a3 + 24), v5);
      if (v12) {
        break;
      }
    }
    unsigned int v10 = v5++;
  }
  while (v10 < 0xFF);
  return result;
}

void *sub_19E0FAE10()
{
  return &unk_1EF09FD30;
}

uint64_t sub_19E0FAE1C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09FD30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FAE5C(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3 = *a2;
  int v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *a3;
  unint64_t v6 = v4[1];
  unint64_t v7 = v4[2];
  if (v6 >= v7)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555) {
      sub_19E041BEC();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v12;
    }
    unint64_t v19 = v4 + 2;
    if (v13) {
      unint64_t v13 = (unint64_t)sub_19E0DEFC0(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13;
    unint64_t v16 = (unsigned char *)(v13 + 48 * v10);
    unint64_t v18 = v13 + 48 * v14;
    sub_19E0FAF9C(v16, v3, v5);
    uint64_t v17 = v16 + 48;
    sub_19E0DF008(v4, &v15);
    uint64_t v9 = v4[1];
    uint64_t result = sub_19E0DF0EC((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)sub_19E0FAF9C((unsigned char *)v4[1], *a2, *a3);
    uint64_t v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19E0FAF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

unsigned char *sub_19E0FAF9C(unsigned char *a1, char a2, uint64_t a3)
{
  *a1 = a2;
  v5[0] = a3;
  int v6 = 7;
  sub_19E105F34((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19E07FA6C((uint64_t)v5);
  return a1;
}

void sub_19E0FAFE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E07FA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0FB004(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09FCD0;
  a2[1] = v2;
  return result;
}

void *sub_19E0FB028(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09FCD0;
  result[1] = v3;
  return result;
}

void sub_19E0FB070()
{
}

double sub_19E0FB088(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  if (*(unsigned char *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (uint64_t v7 = *v5) != 0)
  {
    int v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    _DWORD v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19E08DC50(a1, v10, a5, a2 + 144, *(void *)(a2 + 1520), *(void *)(a2 + 1528), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(unsigned char *)(a1 + 6) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 37) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)&double result = 0xFFFFFFFFLL;
    *(void *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19E0FB15C(void *a1, unsigned int *a2, int *a3)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
  if (result)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a1[3];
    unsigned int v9 = *(_DWORD *)(v8 + 4 * v7);
    if ((v9 & 0x100) != 0) {
      int v10 = *(_DWORD *)(v8 + 4 * ((v9 >> 10 << ((v9 >> 6) & 8)) ^ v7)) & 0x7FFFFFFF;
    }
    else {
      int v10 = -1;
    }
    *a3 = v10;
    return v10 != -1;
  }
  return result;
}

uint64_t sub_19E0FB1F4(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = 0;
  v4[0] = &unk_1EF09F750;
  v4[1] = &v3;
  unsigned __int16 v4[3] = v4;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v4);
  sub_19E0C3820(v4);
  return v3;
}

void sub_19E0FB2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0C3820((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0FB2B8()
{
  return &unk_1EF09F7B0;
}

uint64_t sub_19E0FB2C4(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F7B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FB304(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
  **(unsigned char **)(result + 8) = 1;
  return result;
}

uint64_t sub_19E0FB320(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F750;
  a2[1] = v2;
  return result;
}

void *sub_19E0FB344(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F750;
  result[1] = v3;
  return result;
}

void sub_19E0FB38C()
{
}

void *sub_19E0FB3A4(void *result, uint64_t a2, int a3)
{
  if (*result != -1)
  {
    uint64_t v3 = (*(_DWORD *)(a2 + 4 * *result) >> 10 << ((*(_DWORD *)(a2 + 4 * *result) >> 6) & 8)) ^ *result ^ a3;
    if ((*(_DWORD *)(a2 + 4 * v3) & 0x800000FF) == a3)
    {
      void *result = v3;
      if (!v3) {
        __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
      }
    }
    else
    {
      void *result = -1;
    }
  }
  return result;
}

uint64_t sub_19E0FB420(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5 = result;
  for (unsigned int i = 1; ; ++i)
  {
    uint64_t v7 = *(void *)(v5 + 24);
    unsigned int v8 = *(_DWORD *)(v7 + 4 * *a2);
    if (i == (*(_DWORD *)(v7 + 4 * ((v8 >> 10 << ((v8 >> 6) & 8)) ^ *a2 ^ i)) & 0x800000FF)) {
      break;
    }
    if (i > 0xFE) {
      return result;
    }
LABEL_7:
    ;
  }
  uint64_t result = sub_19E0C2F44(*(void *)(a3 + 24), i);
  if (i < 0xFF) {
    goto LABEL_7;
  }
  return result;
}

void *sub_19E0FB4D0()
{
  return &unk_1EF09FDB0;
}

uint64_t sub_19E0FB4DC(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09FDB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FB51C(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3 = *a2;
  int v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *a3;
  unint64_t v6 = v4[1];
  unint64_t v7 = v4[2];
  if (v6 >= v7)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555) {
      sub_19E041BEC();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v12;
    }
    unint64_t v19 = v4 + 2;
    if (v13) {
      unint64_t v13 = (unint64_t)sub_19E0DEFC0(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13;
    unint64_t v16 = (unsigned char *)(v13 + 48 * v10);
    unint64_t v18 = v13 + 48 * v14;
    sub_19E0FB65C(v16, v3, v5);
    uint64_t v17 = v16 + 48;
    sub_19E0DF008(v4, &v15);
    uint64_t v9 = v4[1];
    uint64_t result = sub_19E0DF0EC((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)sub_19E0FB65C((unsigned char *)v4[1], *a2, *a3);
    uint64_t v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19E0FB63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

unsigned char *sub_19E0FB65C(unsigned char *a1, char a2, uint64_t a3)
{
  *a1 = a2;
  v5[0] = a3;
  int v6 = 8;
  sub_19E105F34((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19E07FA6C((uint64_t)v5);
  return a1;
}

void sub_19E0FB6A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E07FA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0FB6C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09FD50;
  a2[1] = v2;
  return result;
}

void *sub_19E0FB6E8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09FD50;
  result[1] = v3;
  return result;
}

void sub_19E0FB730()
{
}

double sub_19E0FB748(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  if (*(unsigned char *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (uint64_t v7 = *v5) != 0)
  {
    int v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    _DWORD v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19E08DC50(a1, v10, a5, a2 + 80, *(void *)(a2 + 1456), *(void *)(a2 + 1464), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(unsigned char *)(a1 + 6) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 37) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)&double result = 0xFFFFFFFFLL;
    *(void *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19E0FB81C(uint64_t a1, unint64_t *a2, _DWORD *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if (result)
  {
    unint64_t v7 = *a2;
    unint64_t v9 = 0;
    unint64_t v10 = v7;
    int v8 = sub_19E0B9338(a1 + 8, (uint64_t)"", &v10, &v9, 0);
    *a3 = v8;
    return v8 != -1;
  }
  return result;
}

uint64_t sub_19E0FB8AC(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = 0;
  v4[0] = &unk_1EF09F7D0;
  v4[1] = &v3;
  unsigned __int16 v4[3] = v4;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v4);
  sub_19E0F92D8(v4);
  return v3;
}

void sub_19E0FB95C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0F92D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0FB970()
{
  return &unk_1EF09F830;
}

uint64_t sub_19E0FB97C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F830)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FB9BC(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
  **(unsigned char **)(result + 8) = 1;
  return result;
}

uint64_t sub_19E0FB9D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F7D0;
  a2[1] = v2;
  return result;
}

void *sub_19E0FB9FC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F7D0;
  result[1] = v3;
  return result;
}

void sub_19E0FBA44()
{
}

unint64_t *sub_19E0FBA5C(unint64_t *result, uint64_t a2, char a3)
{
  unint64_t v3 = *result;
  if (*result != -1)
  {
    int v4 = result;
    char v6 = a3;
    unint64_t v7 = 0;
    unint64_t v8 = v3;
    uint64_t result = (unint64_t *)sub_19E0B9338(a2 + 48, (uint64_t)&v6, &v8, &v7, 1uLL);
    unint64_t v5 = v8;
    if (result == -2) {
      unint64_t v5 = -1;
    }
    *int v4 = v5;
    if (!v5) {
      __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
    }
  }
  return result;
}

uint64_t sub_19E0FBAE4(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
  if (result)
  {
    uint64_t v7 = a1[5];
    if (!v7) {
      __assert_rtn("enumerateChildren", "cedarpp.h", 261, "_ninfo");
    }
    uint64_t v8 = *a2;
    unint64_t v9 = HIDWORD(*a2);
    if (v9)
    {
      unsigned int v10 = -(int)v9;
      if ((v10 & 0x80000000) != 0)
      {
LABEL_5:
        if (*(unsigned char *)(a1[3] + -v10)) {
          return sub_19E0B8E84(*(void *)(a3 + 24), *(unsigned char *)(a1[3] + -v10));
        }
        return result;
      }
    }
    else
    {
      unsigned int v10 = *(_DWORD *)(a1[2] + 8 * v8);
      if ((v10 & 0x80000000) != 0) {
        goto LABEL_5;
      }
    }
    unint64_t v11 = v10;
    if (v8 && ((uint64_t v12 = a1[2], *(int *)(v12 + 8 * v11) < 1) || *(_DWORD *)(v12 + 8 * v11 + 4) != v8)) {
      unint64_t v13 = (unsigned __int8 *)(v7 + 2 * v8 + 1);
    }
    else {
      unint64_t v13 = (unsigned __int8 *)(v7 + 2 * v11);
    }
    int v14 = *v13;
    if (v14)
    {
      do
      {
        unint64_t v15 = v14 ^ v11;
        uint64_t result = sub_19E0B8E84(*(void *)(a3 + 24), v14);
        LOBYTE(v14) = *(unsigned char *)(a1[5] + 2 * v15);
      }
      while ((_BYTE)v14);
    }
  }
  return result;
}

void *sub_19E0FBC48()
{
  return &unk_1EF09FE30;
}

uint64_t sub_19E0FBC54(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09FE30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FBC94(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3 = *a2;
  int v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *a3;
  unint64_t v6 = v4[1];
  unint64_t v7 = v4[2];
  if (v6 >= v7)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555) {
      sub_19E041BEC();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v12;
    }
    unint64_t v19 = v4 + 2;
    if (v13) {
      unint64_t v13 = (unint64_t)sub_19E0DEFC0(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13;
    unint64_t v16 = (unsigned char *)(v13 + 48 * v10);
    unint64_t v18 = v13 + 48 * v14;
    sub_19E0FBDD4(v16, v3, v5);
    uint64_t v17 = v16 + 48;
    sub_19E0DF008(v4, &v15);
    uint64_t v9 = v4[1];
    uint64_t result = sub_19E0DF0EC((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)sub_19E0FBDD4((unsigned char *)v4[1], *a2, *a3);
    uint64_t v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19E0FBDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

unsigned char *sub_19E0FBDD4(unsigned char *a1, char a2, uint64_t a3)
{
  *a1 = a2;
  v5[0] = a3;
  int v6 = 9;
  sub_19E105F34((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19E07FA6C((uint64_t)v5);
  return a1;
}

void sub_19E0FBE20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E07FA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0FBE3C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09FDD0;
  a2[1] = v2;
  return result;
}

void *sub_19E0FBE60(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09FDD0;
  result[1] = v3;
  return result;
}

void sub_19E0FBEA8()
{
}

double sub_19E0FBEC0(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  if (*(unsigned char *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (uint64_t v7 = *v5) != 0)
  {
    int v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    _DWORD v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19E08DC50(a1, v10, a5, a2 + 648, *(void *)(a2 + 2024), *(void *)(a2 + 2032), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(unsigned char *)(a1 + 6) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 37) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)&double result = 0xFFFFFFFFLL;
    *(void *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19E0FBF94(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 112))(a1)) {
    return 0;
  }
  unint64_t v8 = 0;
  uint64_t v6 = sub_19E04245C(a1 + 2, a2, (uint64_t *)&v8);
  if (v6) {
    *a3 = sub_19E0FC1DC((uint64_t)a1, v8);
  }
  return v6;
}

uint64_t sub_19E0FC02C(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = 0;
  v4[0] = &unk_1EF09F850;
  v4[1] = &v3;
  unsigned __int16 v4[3] = v4;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v4);
  sub_19E0B4198(v4);
  return v3;
}

void sub_19E0FC0DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B4198((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0FC0F0()
{
  return &unk_1EF09F8B0;
}

uint64_t sub_19E0FC0FC(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F8B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FC13C(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
  **(unsigned char **)(result + 8) = 1;
  return result;
}

uint64_t sub_19E0FC158(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F850;
  a2[1] = v2;
  return result;
}

void *sub_19E0FC17C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F850;
  result[1] = v3;
  return result;
}

void sub_19E0FC1C4()
{
}

unint64_t sub_19E0FC1DC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (v2 <= a2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_19E062A78(exception, "Marisa Payload");
      __cxa_throw(exception, (struct type_info *)off_1E599B428, MEMORY[0x1E4FBA1D0]);
    }
    return *(unsigned int *)(*(void *)(a1 + 24) + 4 * a2);
  }
  return a2;
}

void sub_19E0FC24C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E0FC260(uint64_t *a1, uint64_t a2, char a3)
{
  if (*a1 != 0xFFFFFFFFLL)
  {
    uint64_t v7 = *a1;
    if (*((char *)a1 + 31) < 0)
    {
      sub_19E03FA9C(&v8, (void *)a1[1], a1[2]);
    }
    else
    {
      long long v8 = *(_OWORD *)(a1 + 1);
      uint64_t v9 = a1[3];
    }
    char v14 = a3;
    sub_19E042718((uint64_t *)(a2 + 56), (uint64_t)&v14, 1uLL, (uint64_t)&v7, &v10);
    uint64_t v6 = v10;
    uint64_t v12 = v10;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_19E03FA9C(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
      uint64_t v6 = v12;
    }
    else
    {
      std::string __p = v11;
    }
    *a1 = v6;
    std::string::operator=((std::string *)(a1 + 1), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete((void *)v8);
    }
    if (!*a1) {
      __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
    }
  }
}

void sub_19E0FC3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0FC3F0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  double result = (void *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    v7[0] = &unk_1EF0A1E90;
    v7[1] = a3;
    void v7[3] = v7;
    sub_19E042830(a1 + 2, a2, (uint64_t)v7);
    return sub_19E0B4198(v7);
  }
  return result;
}

void sub_19E0FC4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B4198((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0FC4CC()
{
  return &unk_1EF0A1EF0;
}

uint64_t sub_19E0FC4D8(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1EF0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FC518(uint64_t a1, char *a2)
{
  return sub_19E044B84(*(void *)(a1 + 8), *a2);
}

uint64_t sub_19E0FC52C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0A1E90;
  a2[1] = v2;
  return result;
}

void *sub_19E0FC550(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0A1E90;
  result[1] = v3;
  return result;
}

void sub_19E0FC598()
{
}

void *sub_19E0FC5B0()
{
  return &unk_1EF09FEB0;
}

uint64_t sub_19E0FC5BC(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09FEB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void sub_19E0FC5FC(uint64_t a1, char *a2, uint64_t a3)
{
  char v3 = *a2;
  int v4 = *(uint64_t **)(a1 + 8);
  uint64_t v13 = *(void *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_19E03FA9C(&__p, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long __p = *(_OWORD *)(a3 + 8);
    uint64_t v15 = *(void *)(a3 + 24);
  }
  unint64_t v5 = v4[2];
  unint64_t v6 = v4[1];
  if (v6 >= v5)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v8 + 1 > 0x555555555555555) {
      sub_19E041BEC();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 4);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    long long v20 = v4 + 2;
    if (v11) {
      unint64_t v11 = (unint64_t)sub_19E0DEFC0(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v16 = v11;
    uint64_t v17 = (unsigned char *)(v11 + 48 * v8);
    unint64_t v18 = v17;
    unint64_t v19 = v11 + 48 * v12;
    sub_19E0FC79C(v17, v3, &v13);
    v18 += 48;
    sub_19E0DF008(v4, &v16);
    uint64_t v7 = v4[1];
    sub_19E0DF0EC((uint64_t)&v16);
  }
  else
  {
    sub_19E0FC79C((unsigned char *)v4[1], v3, &v13);
    uint64_t v7 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v7;
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
}

void sub_19E0FC764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  *(void *)(v17 + 8) = v18;
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_19E0FC79C(unsigned char *a1, char a2, uint64_t *a3)
{
  *a1 = a2;
  uint64_t v4 = (uint64_t)(a1 + 8);
  uint64_t v6 = *a3;
  if (*((char *)a3 + 31) < 0)
  {
    sub_19E03FA9C(&v7, (void *)a3[1], a3[2]);
  }
  else
  {
    long long v7 = *(_OWORD *)(a3 + 1);
    uint64_t v8 = a3[3];
  }
  int v9 = 10;
  sub_19E105F34(v4, (uint64_t)&v6);
  sub_19E07FA6C((uint64_t)&v6);
  return a1;
}

void sub_19E0FC824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E07FA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0FC840(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09FE50;
  a2[1] = v2;
  return result;
}

void *sub_19E0FC864(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09FE50;
  result[1] = v3;
  return result;
}

void sub_19E0FC8AC()
{
}

double sub_19E0FC8C4(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  if (*(unsigned char *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (uint64_t v7 = *v5) != 0)
  {
    int v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    _DWORD v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19E08DC50(a1, v10, a5, a2 + 104, *(void *)(a2 + 1480), *(void *)(a2 + 1488), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(unsigned char *)(a1 + 6) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 37) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)&double result = 0xFFFFFFFFLL;
    *(void *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19E0FC998(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = 0;
  v4[0] = &unk_1EF09F8D0;
  v4[1] = &v3;
  unsigned __int16 v4[3] = v4;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v4);
  sub_19E0C3820(v4);
  return v3;
}

void sub_19E0FCA48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0C3820((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0FCA5C()
{
  return &unk_1EF09F930;
}

uint64_t sub_19E0FCA68(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F930)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FCAA8(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
  **(unsigned char **)(result + 8) = 1;
  return result;
}

uint64_t sub_19E0FCAC4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F8D0;
  a2[1] = v2;
  return result;
}

void *sub_19E0FCAE8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F8D0;
  result[1] = v3;
  return result;
}

void sub_19E0FCB30()
{
}

uint64_t sub_19E0FCB48(uint64_t result, void *a2, uint64_t a3)
{
  if (*a2 != -1)
  {
    uint64_t v3 = result;
    for (unsigned __int8 i = *(unsigned char *)(*(void *)(result + 40) + 2 * *a2); i; unsigned __int8 i = *(unsigned char *)(*(void *)(v3 + 40) + 2 * v10 + 1))
    {
      uint64_t v7 = *(void *)(v3 + 24);
      unsigned int v8 = *(_DWORD *)(v7 + 4 * *a2);
      uint64_t v9 = (v8 >> 10 << ((v8 >> 6) & 8)) ^ *a2 ^ i;
      if ((*(_DWORD *)(v7 + 4 * v9) & 0x800000FF) != i) {
        uint64_t v9 = -1;
      }
      uint64_t v10 = v9;
      double result = sub_19E0C2F44(*(void *)(a3 + 24), i);
    }
  }
  return result;
}

void *sub_19E0FCC0C()
{
  return &unk_1EF09FF30;
}

uint64_t sub_19E0FCC18(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09FF30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FCC58(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3 = *a2;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *a3;
  unint64_t v6 = v4[1];
  unint64_t v7 = v4[2];
  if (v6 >= v7)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555) {
      sub_19E041BEC();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v12;
    }
    unint64_t v19 = v4 + 2;
    if (v13) {
      unint64_t v13 = (unint64_t)sub_19E0DEFC0(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13;
    unint64_t v16 = (unsigned char *)(v13 + 48 * v10);
    unint64_t v18 = v13 + 48 * v14;
    sub_19E0FCD98(v16, v3, v5);
    uint64_t v17 = v16 + 48;
    sub_19E0DF008(v4, &v15);
    uint64_t v9 = v4[1];
    uint64_t result = sub_19E0DF0EC((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)sub_19E0FCD98((unsigned char *)v4[1], *a2, *a3);
    uint64_t v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19E0FCD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

unsigned char *sub_19E0FCD98(unsigned char *a1, char a2, uint64_t a3)
{
  *a1 = a2;
  v5[0] = a3;
  int v6 = 11;
  sub_19E105F34((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19E07FA6C((uint64_t)v5);
  return a1;
}

void sub_19E0FCDE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E07FA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0FCE00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09FED0;
  a2[1] = v2;
  return result;
}

void *sub_19E0FCE24(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09FED0;
  result[1] = v3;
  return result;
}

void sub_19E0FCE6C()
{
}

uint64_t sub_19E0FCE84(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    uint64_t v7 = sub_19E04EE08();
    int v8 = sub_19E04F054(v7, a1[1], a2);
    *a3 = v8;
    return v8 != 0;
  }
  return result;
}

uint64_t sub_19E0FCEF8(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = 0;
  v4[0] = &unk_1EF09F950;
  v4[1] = &v3;
  unsigned __int16 v4[3] = v4;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 144))(a1, a2, v4);
  sub_19E0FA520(v4);
  return v3;
}

void sub_19E0FCFA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0FA520((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E0FCFBC()
{
  return &unk_1EF09F9B0;
}

uint64_t sub_19E0FCFC8(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F9B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FD008(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
  **(unsigned char **)(result + 8) = 1;
  return result;
}

uint64_t sub_19E0FD024(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09F950;
  a2[1] = v2;
  return result;
}

void *sub_19E0FD048(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09F950;
  result[1] = v3;
  return result;
}

void sub_19E0FD090()
{
}

uint64_t sub_19E0FD0A8(uint64_t result, uint64_t a2, char a3)
{
  if (*(_DWORD *)(result + 12) != -1)
  {
    uint64_t v3 = (void *)result;
    long long v5 = *(_OWORD *)result;
    char v6 = a3;
    uint64_t result = sub_19E0FD134(a2 + 40, &v5, (uint64_t)&v6, 1);
    *uint64_t v3 = result;
    v3[1] = v4;
    if (v4 <= 0xFFFFFFFEFFFFFFFFLL && (v4 & 0xFF00) != 0) {
      __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
    }
  }
  return result;
}

uint64_t sub_19E0FD134(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  long long v10 = *a2;
  if (!a4) {
    return v10;
  }
  uint64_t v4 = a4;
  while (1)
  {
    uint64_t v7 = sub_19E04EE08();
    *(void *)&long long v10 = sub_19E04EFC4(v7, *(void *)(a1 + 8), (uint64_t)&v10);
    *((void *)&v10 + 1) = v8;
    if (!sub_19E04F090((uint64_t)&v10)) {
      break;
    }
    ++a3;
    if (!--v4) {
      return v10;
    }
  }
  return 0;
}

void sub_19E0FD1BC(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = v5;
  _OWORD v5[2] = 0x2000000000;
  char v6 = 0;
  uint64_t v4 = sub_19E04EE08();
  sub_19E04F024(v4, *(void *)(a1 + 8), a2);
  _Block_object_dispose(v5, 8);
}

void sub_19E0FD274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19E0FD28C(uint64_t a1, char a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = sub_19E06E314(*(void *)(*(void *)(a1 + 40) + 24), a2);
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_19E0FD2D8()
{
  return &unk_1EF0A0030;
}

uint64_t sub_19E0FD2E4(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A0030)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FD324(uint64_t a1, char *a2, long long *a3)
{
  char v3 = *a2;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  long long v14 = *a3;
  unint64_t v5 = v4[1];
  unint64_t v6 = v4[2];
  if (v5 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 4);
    if (v9 + 1 > 0x555555555555555) {
      sub_19E041BEC();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    unint64_t v19 = v4 + 2;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_19E0DEFC0(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v15 = v12;
    unint64_t v16 = (unsigned char *)(v12 + 48 * v9);
    uint64_t v17 = v16;
    unint64_t v18 = v12 + 48 * v13;
    sub_19E0FD468(v16, v3, &v14);
    v17 += 48;
    sub_19E0DF008(v4, &v15);
    uint64_t v8 = v4[1];
    uint64_t result = sub_19E0DF0EC((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)sub_19E0FD468((unsigned char *)v4[1], v3, &v14);
    uint64_t v8 = v5 + 48;
    v4[1] = v5 + 48;
  }
  v4[1] = v8;
  return result;
}

void sub_19E0FD448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

unsigned char *sub_19E0FD468(unsigned char *a1, char a2, _OWORD *a3)
{
  *a1 = a2;
  v5[0] = *a3;
  int v6 = 12;
  sub_19E105F34((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19E07FA6C((uint64_t)v5);
  return a1;
}

void sub_19E0FD4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E0FD4D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF09FFD0;
  a2[1] = v2;
  return result;
}

void *sub_19E0FD4F8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF09FFD0;
  result[1] = v3;
  return result;
}

void sub_19E0FD540()
{
}

double sub_19E0FD558(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  if (*(unsigned char *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (uint64_t v7 = *v5) != 0)
  {
    int v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    _DWORD v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19E08DC50(a1, v10, a5, a2 + 88, *(void *)(a2 + 1464), *(void *)(a2 + 1472), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(unsigned char *)(a1 + 6) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 37) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)&double result = 0xFFFFFFFFLL;
    *(void *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

void sub_19E0FD62C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    sub_19E0D054C(v2);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    sub_19E0D054C(v3);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v4) {
    sub_19E0D054C(v4);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v5) {
    sub_19E0D054C(v5);
  }
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 0;
}

void sub_19E0FD694(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  LODWORD(v6) = 0x100000;
  WORD2(v6) = 0;
  BYTE6(v6) = 1;
  uint64_t v7 = 0;
  sub_19E03F6F8(&v6, (uint64_t)".dat", 0, 4u);
  BOOL v4 = sub_19E03FB3C(a2, (unsigned __int16 *)&v6);
  if (v7) {
    BOOL v5 = BYTE6(v6) == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v7);
  }
  if (v4)
  {
    sub_19E03FB9C((void *)a1, a2, 0, (unsigned __int16)(*a2 - 3));
    sub_19E039CC0((unsigned __int16 *)a1, "idx", 0xFFFFuLL);
  }
  else
  {
    *(_DWORD *)a1 = 0x100000;
    *(_WORD *)(a1 + 4) = 0;
    *(unsigned char *)(a1 + 6) = 0;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
  }
}

void sub_19E0FD7B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(unsigned char *)(v1 + 6) == 1) {
      free(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_19E0FD7DC(int *a1, int a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*a1 == a2 && a1[1] == a3)
  {
    if (a2 == 3)
    {
      if (a3 > 0xA) {
        return 1;
      }
      if (qword_1E9457940 != -1) {
        dispatch_once(&qword_1E9457940, &unk_1EF098E88);
      }
      uint64_t v4 = qword_1E9457938;
      BOOL result = os_log_type_enabled((os_log_t)qword_1E9457938, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v6 = a1[1];
        int v12 = 67109376;
        int v13 = v6;
        __int16 v14 = 1024;
        int v15 = 11;
        uint64_t v7 = "minor version %u is not supported (%u required)";
LABEL_17:
        unint64_t v10 = v4;
        uint32_t v11 = 14;
LABEL_20:
        _os_log_error_impl(&dword_19E038000, v10, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v12, v11);
        return 0;
      }
    }
    else
    {
      if (qword_1E9457940 != -1) {
        dispatch_once(&qword_1E9457940, &unk_1EF098E88);
      }
      uint64_t v4 = qword_1E9457938;
      BOOL result = os_log_type_enabled((os_log_t)qword_1E9457938, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v9 = *a1;
        int v12 = 67109376;
        int v13 = v9;
        __int16 v14 = 1024;
        int v15 = 3;
        uint64_t v7 = "major version %u does not match required version %u";
        goto LABEL_17;
      }
    }
  }
  else
  {
    if (qword_1E9457940 != -1) {
      dispatch_once(&qword_1E9457940, &unk_1EF098E88);
    }
    uint64_t v8 = qword_1E9457938;
    BOOL result = os_log_type_enabled((os_log_t)qword_1E9457938, OS_LOG_TYPE_ERROR);
    if (result)
    {
      LOWORD(v12) = 0;
      uint64_t v7 = "mismatched words and index file versions";
      unint64_t v10 = v8;
      uint32_t v11 = 2;
      goto LABEL_20;
    }
  }
  return result;
}

void *sub_19E0FD9D0(void *result, uint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a4 < 0x13) {
    operator new();
  }
  if (a3 <= 0x4F) {
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (a3 >= 0x54 && a2)
  {
    unint64_t v4 = bswap32(*(_DWORD *)(a2 + 80));
    uint64_t v5 = a2;
    unint64_t v6 = a3;
    unint64_t v7 = v4;
    if (v4 <= a3) {
      operator new();
    }
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  void *result = 0;
  return result;
}

void sub_19E0FDB30(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  MEMORY[0x19F3BA710](v10, 0x91C4089455612);
  if (a2 == 1)
  {
    int v13 = __cxa_begin_catch(a1);
    if (qword_1E9457940 != -1) {
      dispatch_once(&qword_1E9457940, &unk_1EF098E88);
    }
    __int16 v14 = qword_1E9457938;
    if (os_log_type_enabled((os_log_t)qword_1E9457938, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = (*(uint64_t (**)(void *))(*(void *)v13 + 16))(v13);
      LODWORD(a9) = 136315138;
      *(void *)((char *)&a9 + 4) = v15;
      _os_log_error_impl(&dword_19E038000, v14, OS_LOG_TYPE_ERROR, "Failed to create metadata flags decoder: %s", (uint8_t *)&a9, 0xCu);
    }
    *int v9 = 0;
    __cxa_end_catch();
    JUMPOUT(0x19E0FDAB8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E0FDC28(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)uint64_t v10 = 0;
  *(_DWORD *)versionArray = v2;
  ucol_getVersion();
  int v3 = *(_DWORD *)(a1 + 16);
  int v8 = 0;
  *(_DWORD *)int v9 = v3;
  ucol_getUCAVersion();
  if (v2) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  uint64_t v5 = v4;
  if (!v4)
  {
    u_versionToString(versionArray, versionString);
    u_versionToString(v10, v22);
    u_versionToString(v9, v21);
    u_versionToString((const uint8_t *)&v8, v20);
    if (qword_1E9457940 != -1) {
      dispatch_once(&qword_1E9457940, &unk_1EF098E88);
    }
    unint64_t v6 = qword_1E9457938;
    if (os_log_type_enabled((os_log_t)qword_1E9457938, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315906;
      int v13 = versionString;
      __int16 v14 = 2080;
      uint64_t v15 = v22;
      __int16 v16 = 2080;
      uint64_t v17 = v21;
      __int16 v18 = 2080;
      unint64_t v19 = v20;
      _os_log_error_impl(&dword_19E038000, v6, OS_LOG_TYPE_ERROR, "ICU version mismatch: file_collator=%s, loaded_collator=%s, file_uca=%s, loaded_uca=%s", buf, 0x2Au);
    }
  }
  return v5;
}

os_log_t sub_19E0FDDA0()
{
  os_log_t result = os_log_create("com.apple.Lexicon", "WordTrie");
  qword_1E9457938 = (uint64_t)result;
  return result;
}

void sub_19E0FDDD0(const std::error_code *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1->__val_)
  {
    if (qword_1E9457940 != -1) {
      dispatch_once(&qword_1E9457940, &unk_1EF098E88);
    }
    BOOL v4 = qword_1E9457938;
    if (os_log_type_enabled((os_log_t)qword_1E9457938, OS_LOG_TYPE_DEFAULT))
    {
      std::error_code::message(&v6, a1);
      if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v5 = &v6;
      }
      else {
        uint64_t v5 = (std::string *)v6.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315650;
      int v8 = "log_result_on_failure";
      __int16 v9 = 2080;
      uint64_t v10 = a2;
      __int16 v11 = 2080;
      int v12 = v5;
      _os_log_impl(&dword_19E038000, v4, OS_LOG_TYPE_DEFAULT, "%s: %s: %s", buf, 0x20u);
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v6.__r_.__value_.__l.__data_);
      }
    }
  }
}

uint64_t sub_19E0FDEFC(uint64_t result, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if (*a2 != -1)
  {
    uint64_t v7 = result;
    unsigned long long v28 = 0u;
    memset(v27, 0, sizeof(v27));
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v25 = 0;
    uint64_t v26 = v4;
    sub_19E0FE1E4(v27, (__n128 *)__p);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    char v23 = 0;
    if (*((void *)&v28 + 1))
    {
      do
      {
        uint64_t v8 = *((void *)&v27[0] + 1);
        uint64_t v9 = v28;
        unint64_t v10 = (unint64_t)v28 >> 7;
        uint64_t v11 = *(void *)(*((void *)&v27[0] + 1) + 8 * ((unint64_t)v28 >> 7));
        uint64_t v12 = v28 & 0x7F;
        uint64_t v13 = (long long *)(v11 + 32 * v12);
        if (*((char *)v13 + 23) < 0)
        {
          sub_19E03FA9C(__p, *(void **)v13, *((void *)v13 + 1));
          uint64_t v8 = *((void *)&v27[0] + 1);
          uint64_t v9 = v28;
          unint64_t v10 = (unint64_t)v28 >> 7;
        }
        else
        {
          long long v14 = *v13;
          uint64_t v25 = *((void *)v13 + 2);
          *(_OWORD *)long long __p = v14;
        }
        uint64_t v26 = *(void *)(v11 + 32 * v12 + 24);
        uint64_t v15 = *(void *)(v8 + 8 * v10) + 32 * (v28 & 0x7F);
        if (*(char *)(v15 + 23) < 0)
        {
          operator delete(*(void **)v15);
          uint64_t v9 = v28;
        }
        unint64_t v16 = v9 + 1;
        unsigned long long v28 = __PAIR128__(*((unint64_t *)&v28 + 1), v16) + __PAIR128__(-1, 0);
        if (v16 >= 0x100)
        {
          operator delete(**((void ***)&v27[0] + 1));
          *((void *)&v27[0] + 1) += 8;
          *(void *)&unsigned long long v28 = v28 - 128;
        }
        int v22 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t *, int *))(*(void *)v7 + 128))(v7, &v26, &v22)
          && (v25 >= 0 ? (uint64_t v17 = __p) : (uint64_t v17 = (void **)__p[0]),
              v25 >= 0 ? (uint64_t v18 = HIBYTE(v25)) : (uint64_t v18 = (uint64_t)__p[1]),
              sub_19E0B5BE8(*(void *)(a3 + 24), v22, (uint64_t)v17, v18, (uint64_t)&v23),
              v23))
        {
          char v19 = 1;
        }
        else
        {
          if ((a4 & 0x80000000) != 0) {
            goto LABEL_25;
          }
          unint64_t v20 = HIBYTE(v25);
          if (v25 < 0) {
            unint64_t v20 = (unint64_t)__p[1];
          }
          if (v20 < a4)
          {
LABEL_25:
            v29[0] = &unk_1EF0A18A0;
            v29[1] = v27;
            void v29[2] = __p;
            void v29[3] = v29;
            (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v7 + 144))(v7, &v26, v29);
            sub_19E0CB188(v29);
          }
          char v19 = 0;
        }
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
        if (*((void *)&v28 + 1)) {
          char v21 = v19;
        }
        else {
          char v21 = 1;
        }
      }
      while ((v21 & 1) == 0);
    }
    return sub_19E0C38A4((uint64_t)v27);
  }
  return result;
}

void sub_19E0FE1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_19E0C38A4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

__n128 sub_19E0FE1E4(void *a1, __n128 *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 16 * (v4 - v5) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x80)
    {
      a1[4] = v8 - 128;
      uint64_t v12 = *(void *)v5;
      unint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          unsigned int v42 = (char *)sub_19E060B48(v41);
          unsigned int v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          uint64_t v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            int v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)int v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          char v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          unint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            int v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            int v22 = (char *)a1[1];
          }
          uint64_t v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)uint64_t v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    uint64_t v24 = (char *)a1[3];
    uint64_t v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      unint64_t v27 = operator new(0x1000uLL);
      unsigned long long v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          int v53 = (char *)sub_19E060B48(v51);
          uint64_t v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          long long v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            long long v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            uint64_t v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)uint64_t v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          char v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        long long v62 = (char *)a1[1];
        long long v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = (uint64_t)&v63[-*a1] >> 2;
            }
            int v99 = (char *)sub_19E060B48(v98);
            int v101 = &v99[8 * (v98 >> 2)];
            int v102 = (uint64_t *)a1[1];
            long long v63 = v101;
            uint64_t v103 = a1[2] - (void)v102;
            if (v103)
            {
              long long v63 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v104 = 8 * (v103 >> 3);
              int v105 = &v99[8 * (v98 >> 2)];
              do
              {
                uint64_t v106 = *v102++;
                *(void *)int v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            unint64_t v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v63;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              long long v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            uint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              long long v62 = (char *)a1[1];
            }
            long long v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)long long v63 = v64;
      }
      else
      {
        *(void *)uint64_t v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    long long v30 = (char *)sub_19E060B48(v29);
    uint64_t v32 = v31;
    int64x2_t v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v111 = v34;
    int v35 = operator new(0x1000uLL);
    *(void *)&long long v36 = v33;
    *((void *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&long long v38 = v111;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&long long v36 = v33;
        *((void *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      uint64_t v75 = (char *)sub_19E060B48(v74);
      int64x2_t v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v38 = v75;
      *((void *)&v38 + 1) = v33;
      *(void *)&long long v36 = v33;
      *((void *)&v36 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v108 = v36;
      long long v111 = v38;
      operator delete(v30);
      long long v36 = v108;
    }
    long long v38 = v111;
LABEL_56:
    *(void *)int64x2_t v33 = v35;
    *(void *)&long long v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      __int16 v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        char v80 = (unsigned char *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          unint64_t v86 = (char *)sub_19E060B48(v85);
          BOOL v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v88 = v79;
          uint64_t v89 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            int v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            int v91 = v79;
            unsigned int v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)int v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(void *)&long long v38 = v86;
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = v88;
          *((void *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            long long v109 = v36;
            long long v113 = v38;
            operator delete(v78);
            long long v36 = v109;
            long long v38 = v113;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          BOOL v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            char v80 = (unsigned char *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v110 = *((void *)&v36 + 1);
            uint64_t v112 = v38;
            memmove((void *)(v84 - (v36 - *((void *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((void *)&v38 + 1));
            *((void *)&v36 + 1) = v110;
            *(void *)&long long v38 = v112;
          }
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = &v80[8 * v83];
        }
      }
      else
      {
        BOOL v79 = (char *)*((void *)&v38 + 1);
      }
      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - 1) = v94;
      *((void *)&v38 + 1) -= 8;
    }
    int32_t v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }
LABEL_84:
  int v96 = (__n128 *)(*(void *)&v5[(v9 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v9 & 0x7F));
  __n128 result = *a2;
  v96[1].n128_u64[0] = a2[1].n128_u64[0];
  *int v96 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  v96[1].n128_u64[1] = a2[1].n128_u64[1];
  ++a1[5];
  return result;
}

void sub_19E0FE758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void *sub_19E0FE788()
{
  return &unk_1EF0A1900;
}

uint64_t sub_19E0FE794(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1900)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void sub_19E0FE7D4(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v4 = *(void **)(a1 + 8);
  sub_19E0B6B6C((uint64_t)&__p, *(const void ***)(a1 + 16), *a2);
  uint64_t v7 = *a3;
  sub_19E0FE1E4(v4, &__p);
  if (v6 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_19E0FE830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_19E0FE854(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A18A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0FE87C(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_1EF0A18A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E0FE8C8()
{
}

uint64_t sub_19E0FE8E0(uint64_t a1, uint64_t *a2, char *__s, size_t a4)
{
  uint64_t v4 = *a2;
  unint64_t v6 = 0;
  uint64_t v7 = v4;
  if (sub_19E0CA7F4((uint64_t *)(a1 + 8), __s, &v7, &v6, a4) == -2) {
    return -1;
  }
  else {
    return v7;
  }
}

BOOL sub_19E0FE92C(uint64_t a1, void *a2)
{
  return *a2 != -1;
}

uint64_t sub_19E0FE93C()
{
  return 0;
}

void sub_19E0FE944(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t *, const void *, size_t))(*(void *)a1 + 120))(a1, &v16, a2, a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v16))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E04147C();
    }
    if (a3 >= 0x17)
    {
      uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v11 = a3 | 7;
      }
      uint64_t v12 = v11 + 1;
      unint64_t v10 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)a3;
      unint64_t v15 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v15) = a3;
      unint64_t v10 = __dst;
      if (!a3)
      {
LABEL_10:
        *((unsigned char *)v10 + a3) = 0;
        uint64_t v13 = operator new(0x28uLL);
        void *v13 = &unk_1EF0A1820;
        v13[1] = __dst;
        v13[2] = a2;
        void v13[3] = a3;
        v13[4] = a4;
        v17[3] = v13;
        (*(void (**)(uint64_t, uint64_t *, void *, uint64_t))(*(void *)a1 + 136))(a1, &v16, v17, a5);
        sub_19E0B5B00(v17);
        if (SHIBYTE(v15) < 0) {
          operator delete(__dst[0]);
        }
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19E0FEB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_19E0FEB78()
{
  return &unk_1EF0A1880;
}

uint64_t sub_19E0FEB84(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1880)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E0FEBC4(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = a1[3];
  unint64_t v10 = v9 + v8;
  uint64_t v11 = a1[1];
  int v12 = *(char *)(v11 + 23);
  if (v12 < 0) {
    unint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    unint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  uint64_t v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    uint64_t v11 = a1[1];
    uint64_t v9 = a1[3];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
  uint64_t v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    uint64_t v11 = a1[1];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
LABEL_9:
  int v16 = *a2;
  if ((v12 & 0x80) != 0) {
    uint64_t v11 = *(void *)v11;
  }
  uint64_t v17 = *(void *)(a1[4] + 24);

  return sub_19E0B5BE8(v17, v16, v11, v10, a4);
}

__n128 sub_19E0FECB4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A1820;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E0FECE4(uint64_t a1)
{
  int v2 = (char *)operator new(0x28uLL);
  *(void *)int v2 = &unk_1EF0A1820;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_19E0FED38()
{
}

size_t sub_19E0FED50(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4)
{
  uint64_t v7 = off_1EC301530();
  size_t result = sub_19E0CB910(v9, v8, v7, a3);
  char v18 = 0;
  if (result)
  {
    size_t v11 = result - 1;
    int v12 = (void *)(v7 + 8);
    do
    {
      int v13 = *((_DWORD *)v12 - 2);
      size_t v15 = *v12;
      v12 += 2;
      uint64_t v14 = v15;
      if (a3 >= v15) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = a3;
      }
      size_t result = sub_19E0B5BE8(*(void *)(a4 + 24), v13, a2, v16, (uint64_t)&v18);
      if (v18) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v11 == 0;
      }
      --v11;
    }
    while (!v17);
  }
  return result;
}

uint64_t sub_19E0FEDFC(uint64_t a1, char *__s, size_t a3, int *a4)
{
  uint64_t v5 = __s;
  if (a3)
  {
    uint64_t v7 = *(int **)(a1 + 8);
    int v8 = *v7;
    goto LABEL_4;
  }
  a3 = strlen(__s);
  uint64_t v7 = *(int **)(a1 + 8);
  int v8 = *v7;
  if (a3)
  {
LABEL_4:
    while (1)
    {
      int v9 = *v5++;
      uint64_t v10 = (v8 + v9 + 1);
      if (v8 != v7[2 * v10 + 1]) {
        return 0;
      }
      int v8 = v7[2 * v10];
      if (!--a3) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t result = 0;
    int v12 = &v7[2 * v8];
    if (v8 == v12[1])
    {
      int v13 = *v12;
      if (v13 < 0)
      {
        if (v13)
        {
          *a4 = ~v13;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19E0FEEB4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a3 >> 3;
  sub_19E0CA6D4(a1 + 8);
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 24) = v5;
  return 1;
}

BOOL sub_19E0FEF00(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  uint64_t v55 = 0;
  long long v56 = 0;
  unint64_t v57 = 0;
  __n128 __p = 0;
  int v53 = 0;
  uint64_t v54 = 0;
  uint64_t v49 = 0;
  char v50 = 0;
  unint64_t v51 = 0;
  sub_19E0C470C(&v55, v7);
  sub_19E0C47B4(&__p, v7);
  sub_19E0C485C((void **)&v49, v7);
  uint64_t v48 = v7;
  if (v5 == v6)
  {
LABEL_60:
    unsigned int v44 = (void *)v49;
    BOOL v45 = sub_19E0CBECC((void *)(a1 + 8), v48, (uint64_t)v55, (uint64_t)__p, v49) == 0;
    if (!v44) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  uint64_t v8 = 0;
  if (v7 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v7;
  }
  while (1)
  {
    uint64_t v10 = *a2 + 24 * v8;
    if (*(char *)(v10 + 23) < 0) {
      uint64_t v10 = *(void *)v10;
    }
    size_t v11 = (char *)v56;
    if ((unint64_t)v56 >= v57)
    {
      int v13 = (char *)v55;
      uint64_t v14 = ((char *)v56 - (unsigned char *)v55) >> 3;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61) {
        sub_19E041BEC();
      }
      uint64_t v16 = v57 - (void)v55;
      if ((uint64_t)(v57 - (void)v55) >> 2 > v15) {
        unint64_t v15 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17) {
        unint64_t v17 = (unint64_t)sub_19E060B48(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = (uint64_t *)(v17 + 8 * v14);
      uint64_t *v19 = v10;
      int v12 = v19 + 1;
      if (v11 != v13)
      {
        do
        {
          uint64_t v20 = *((void *)v11 - 1);
          v11 -= 8;
          *--uint64_t v19 = v20;
        }
        while (v11 != v13);
        size_t v11 = (char *)v55;
      }
      uint64_t v55 = v19;
      unint64_t v57 = v17 + 8 * v18;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *long long v56 = v10;
      int v12 = (uint64_t *)(v11 + 8);
    }
    long long v56 = v12;
    uint64_t v21 = *a2 + 24 * v8;
    uint64_t v22 = *(char *)(v21 + 23) < 0 ? *(void *)(v21 + 8) : *(unsigned __int8 *)(v21 + 23);
    uint64_t v23 = v53;
    if (v53 >= v54)
    {
      uint64_t v25 = (char *)__p;
      uint64_t v26 = (v53 - (unsigned char *)__p) >> 3;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61) {
        sub_19E041BEC();
      }
      uint64_t v28 = v54 - (unsigned char *)__p;
      if ((v54 - (unsigned char *)__p) >> 2 > v27) {
        unint64_t v27 = v28 >> 2;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        long long v30 = (char *)sub_19E049FB0((uint64_t)&v54, v29);
        uint64_t v25 = (char *)__p;
        uint64_t v23 = v53;
      }
      else
      {
        long long v30 = 0;
      }
      uint64_t v31 = &v30[8 * v26];
      *(void *)uint64_t v31 = v22;
      uint64_t v24 = v31 + 8;
      while (v23 != v25)
      {
        uint64_t v32 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v31 - 1) = v32;
        v31 -= 8;
      }
      __n128 __p = v31;
      int v53 = v24;
      uint64_t v54 = &v30[8 * v29];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *(void *)int v53 = v22;
      uint64_t v24 = v23 + 8;
    }
    int v53 = v24;
    int v33 = *(_DWORD *)(*a3 + 4 * v8);
    if (v33 < 0) {
      break;
    }
    long long v34 = v50;
    if ((unint64_t)v50 >= v51)
    {
      long long v36 = (_DWORD *)v49;
      uint64_t v37 = ((uint64_t)v50 - v49) >> 2;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 62) {
        sub_19E041BEC();
      }
      uint64_t v39 = v51 - v49;
      if ((uint64_t)(v51 - v49) >> 1 > v38) {
        unint64_t v38 = v39 >> 1;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v38;
      }
      if (v40) {
        unint64_t v40 = (unint64_t)sub_19E068D84(v40);
      }
      else {
        uint64_t v41 = 0;
      }
      unsigned int v42 = (_DWORD *)(v40 + 4 * v37);
      _DWORD *v42 = v33;
      int v35 = v42 + 1;
      while (v34 != v36)
      {
        int v43 = *--v34;
        *--unsigned int v42 = v43;
      }
      uint64_t v49 = (uint64_t)v42;
      unint64_t v51 = v40 + 4 * v41;
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      *char v50 = v33;
      int v35 = v34 + 1;
    }
    char v50 = v35;
    if (++v8 == v9) {
      goto LABEL_60;
    }
  }
  BOOL v45 = 0;
  unsigned int v44 = (void *)v49;
  if (v49) {
LABEL_61:
  }
    operator delete(v44);
LABEL_62:
  if (__p)
  {
    int v53 = (char *)__p;
    operator delete(__p);
  }
  if (v55) {
    operator delete(v55);
  }
  return v45;
}

void sub_19E0FF274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_19E0FF2C0(uint64_t a1, uint64_t **a2)
{
  __n128 __p = 0;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  uint64_t v35 = 0;
  long long v36 = 0;
  unint64_t v37 = 0;
  int v33 = 0;
  long long v34 = 0;
  sub_19E0C470C((void **)&v35, v3);
  sub_19E0C47B4(&__p, v3);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      uint64_t v6 = v4;
      if (*((char *)v4 + 23) < 0) {
        uint64_t v6 = (uint64_t *)*v4;
      }
      unint64_t v7 = v36;
      if ((unint64_t)v36 >= v37)
      {
        uint64_t v9 = v35;
        uint64_t v10 = (uint64_t)&v36[-v35] >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          sub_19E041BEC();
        }
        uint64_t v12 = v37 - v35;
        if ((uint64_t)(v37 - v35) >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)sub_19E060B48(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        unint64_t v15 = (void *)(v13 + 8 * v10);
        *unint64_t v15 = v6;
        uint64_t v8 = (char *)(v15 + 1);
        if (v7 != (char *)v9)
        {
          do
          {
            uint64_t v16 = *((void *)v7 - 1);
            v7 -= 8;
            *--unint64_t v15 = v16;
          }
          while (v7 != (char *)v9);
          unint64_t v7 = (char *)v35;
        }
        uint64_t v35 = (uint64_t)v15;
        unint64_t v37 = v13 + 8 * v14;
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(void *)long long v36 = v6;
        uint64_t v8 = v7 + 8;
      }
      long long v36 = v8;
      if (*((char *)v4 + 23) < 0) {
        uint64_t v17 = v4[1];
      }
      else {
        uint64_t v17 = *((unsigned __int8 *)v4 + 23);
      }
      uint64_t v18 = v33;
      if (v33 >= v34)
      {
        uint64_t v20 = (char *)__p;
        uint64_t v21 = (v33 - (unsigned char *)__p) >> 3;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          sub_19E041BEC();
        }
        uint64_t v23 = v34 - (unsigned char *)__p;
        if ((v34 - (unsigned char *)__p) >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          uint64_t v25 = (char *)sub_19E049FB0((uint64_t)&v34, v24);
          uint64_t v20 = (char *)__p;
          uint64_t v18 = v33;
        }
        else
        {
          uint64_t v25 = 0;
        }
        uint64_t v26 = &v25[8 * v21];
        *(void *)uint64_t v26 = v17;
        uint64_t v19 = v26 + 8;
        while (v18 != v20)
        {
          uint64_t v27 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v26 - 1) = v27;
          v26 -= 8;
        }
        __n128 __p = v26;
        int v33 = v19;
        long long v34 = &v25[8 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(void *)int v33 = v17;
        uint64_t v19 = v18 + 8;
      }
      int v33 = v19;
      v4 += 3;
    }
    while (v4 != v5);
  }
  uint64_t v28 = (void *)v35;
  int v29 = sub_19E0CBECC((void *)(a1 + 8), v3, v35, (uint64_t)__p, 0);
  if (__p)
  {
    int v33 = (char *)__p;
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }
  return v29 == 0;
}

void sub_19E0FF524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E0FF55C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_19E057A94(a2, *(void **)(a1 + 8), 8 * *(void *)(a1 + 24));
}

void sub_19E0FF570(void *a1)
{
  *a1 = &unk_1EF0A1760;
  sub_19E0CA6D4((uint64_t)(a1 + 1));

  JUMPOUT(0x19F3BA710);
}

void *sub_19E0FF5D4(void *a1)
{
  *a1 = &unk_1EF0A1760;
  sub_19E0CA6D4((uint64_t)(a1 + 1));
  return a1;
}

void *sub_19E0FF618(void *a1)
{
  *a1 = &unk_1EF0A1920;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = &unk_1EF09B980;
  uint64_t v2 = a1[4];
  if (v2)
  {
    MEMORY[0x19F3BA6E0](v2, 0x1000C8052888210);
    a1[4] = 0;
  }
  return a1;
}

uint64_t sub_19E0FF69C(uint64_t result, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if (*a2 != -1)
  {
    uint64_t v7 = result;
    unsigned long long v28 = 0u;
    memset(v27, 0, sizeof(v27));
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v25 = 0;
    uint64_t v26 = v4;
    sub_19E0FF984(v27, (__n128 *)__p);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    char v23 = 0;
    if (*((void *)&v28 + 1))
    {
      do
      {
        uint64_t v8 = *((void *)&v27[0] + 1);
        uint64_t v9 = v28;
        unint64_t v10 = (unint64_t)v28 >> 7;
        uint64_t v11 = *(void *)(*((void *)&v27[0] + 1) + 8 * ((unint64_t)v28 >> 7));
        uint64_t v12 = v28 & 0x7F;
        unint64_t v13 = (long long *)(v11 + 32 * v12);
        if (*((char *)v13 + 23) < 0)
        {
          sub_19E03FA9C(__p, *(void **)v13, *((void *)v13 + 1));
          uint64_t v8 = *((void *)&v27[0] + 1);
          uint64_t v9 = v28;
          unint64_t v10 = (unint64_t)v28 >> 7;
        }
        else
        {
          long long v14 = *v13;
          uint64_t v25 = *((void *)v13 + 2);
          *(_OWORD *)__n128 __p = v14;
        }
        uint64_t v26 = *(void *)(v11 + 32 * v12 + 24);
        uint64_t v15 = *(void *)(v8 + 8 * v10) + 32 * (v28 & 0x7F);
        if (*(char *)(v15 + 23) < 0)
        {
          operator delete(*(void **)v15);
          uint64_t v9 = v28;
        }
        unint64_t v16 = v9 + 1;
        unsigned long long v28 = __PAIR128__(*((unint64_t *)&v28 + 1), v16) + __PAIR128__(-1, 0);
        if (v16 >= 0x100)
        {
          operator delete(**((void ***)&v27[0] + 1));
          *((void *)&v27[0] + 1) += 8;
          *(void *)&unsigned long long v28 = v28 - 128;
        }
        int v22 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t *, int *))(*(void *)v7 + 128))(v7, &v26, &v22)
          && (v25 >= 0 ? (uint64_t v17 = __p) : (uint64_t v17 = (void **)__p[0]),
              v25 >= 0 ? (uint64_t v18 = HIBYTE(v25)) : (uint64_t v18 = (uint64_t)__p[1]),
              sub_19E0B5BE8(*(void *)(a3 + 24), v22, (uint64_t)v17, v18, (uint64_t)&v23),
              v23))
        {
          char v19 = 1;
        }
        else
        {
          if ((a4 & 0x80000000) != 0) {
            goto LABEL_25;
          }
          unint64_t v20 = HIBYTE(v25);
          if (v25 < 0) {
            unint64_t v20 = (unint64_t)__p[1];
          }
          if (v20 < a4)
          {
LABEL_25:
            v29[0] = &unk_1EF0A1A60;
            v29[1] = v27;
            void v29[2] = __p;
            void v29[3] = v29;
            (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v7 + 144))(v7, &v26, v29);
            sub_19E0C3820(v29);
          }
          char v19 = 0;
        }
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
        if (*((void *)&v28 + 1)) {
          char v21 = v19;
        }
        else {
          char v21 = 1;
        }
      }
      while ((v21 & 1) == 0);
    }
    return sub_19E0C38A4((uint64_t)v27);
  }
  return result;
}

void sub_19E0FF940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_19E0C38A4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

__n128 sub_19E0FF984(void *a1, __n128 *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 16 * (v4 - v5) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x80)
    {
      a1[4] = v8 - 128;
      uint64_t v12 = *(void *)v5;
      unint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          unsigned int v42 = (char *)sub_19E060B48(v41);
          unsigned int v44 = &v42[8 * (v41 >> 2)];
          BOOL v45 = (uint64_t *)a1[1];
          uint64_t v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          char v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          unint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            int v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            int v22 = (char *)a1[1];
          }
          uint64_t v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)uint64_t v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    unint64_t v24 = (char *)a1[3];
    uint64_t v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      uint64_t v27 = operator new(0x1000uLL);
      unsigned long long v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          int v53 = (char *)sub_19E060B48(v51);
          uint64_t v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          long long v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            long long v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            uint64_t v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)uint64_t v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          char v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        long long v62 = (char *)a1[1];
        long long v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = (uint64_t)&v63[-*a1] >> 2;
            }
            int v99 = (char *)sub_19E060B48(v98);
            int v101 = &v99[8 * (v98 >> 2)];
            int v102 = (uint64_t *)a1[1];
            long long v63 = v101;
            uint64_t v103 = a1[2] - (void)v102;
            if (v103)
            {
              long long v63 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v104 = 8 * (v103 >> 3);
              int v105 = &v99[8 * (v98 >> 2)];
              do
              {
                uint64_t v106 = *v102++;
                *(void *)int v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            unint64_t v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v63;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              long long v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            uint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              long long v62 = (char *)a1[1];
            }
            long long v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)long long v63 = v64;
      }
      else
      {
        *(void *)uint64_t v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    long long v30 = (char *)sub_19E060B48(v29);
    uint64_t v32 = v31;
    int v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v111 = v34;
    uint64_t v35 = operator new(0x1000uLL);
    *(void *)&long long v36 = v33;
    *((void *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&long long v38 = v111;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&long long v36 = v33;
        *((void *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      uint64_t v75 = (char *)sub_19E060B48(v74);
      int v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v38 = v75;
      *((void *)&v38 + 1) = v33;
      *(void *)&long long v36 = v33;
      *((void *)&v36 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v108 = v36;
      long long v111 = v38;
      operator delete(v30);
      long long v36 = v108;
    }
    long long v38 = v111;
LABEL_56:
    *(void *)int v33 = v35;
    *(void *)&long long v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      __int16 v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        char v80 = (unsigned char *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          unint64_t v86 = (char *)sub_19E060B48(v85);
          BOOL v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v88 = v79;
          uint64_t v89 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            int v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            int v91 = v79;
            unsigned int v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)int v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(void *)&long long v38 = v86;
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = v88;
          *((void *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            long long v109 = v36;
            long long v113 = v38;
            operator delete(v78);
            long long v36 = v109;
            long long v38 = v113;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          BOOL v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            char v80 = (unsigned char *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v110 = *((void *)&v36 + 1);
            uint64_t v112 = v38;
            memmove((void *)(v84 - (v36 - *((void *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((void *)&v38 + 1));
            *((void *)&v36 + 1) = v110;
            *(void *)&long long v38 = v112;
          }
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = &v80[8 * v83];
        }
      }
      else
      {
        BOOL v79 = (char *)*((void *)&v38 + 1);
      }
      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - 1) = v94;
      *((void *)&v38 + 1) -= 8;
    }
    int32_t v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }
LABEL_84:
  int v96 = (__n128 *)(*(void *)&v5[(v9 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v9 & 0x7F));
  __n128 result = *a2;
  v96[1].n128_u64[0] = a2[1].n128_u64[0];
  *int v96 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  v96[1].n128_u64[1] = a2[1].n128_u64[1];
  ++a1[5];
  return result;
}

void sub_19E0FFEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void *sub_19E0FFF28()
{
  return &unk_1EF0A1AC0;
}

uint64_t sub_19E0FFF34(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1AC0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void sub_19E0FFF74(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v4 = *(void **)(a1 + 8);
  sub_19E0B6B6C((uint64_t)&__p, *(const void ***)(a1 + 16), *a2);
  uint64_t v7 = *a3;
  sub_19E0FF984(v4, &__p);
  if (v6 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_19E0FFFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_19E0FFFF4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A1A60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E10001C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF0A1A60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E100068()
{
}

uint64_t sub_19E100080(uint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t a4)
{
  uint64_t result = *a2;
  uint64_t v6 = *(void *)(a1 + 24);
  unsigned int v7 = *(_DWORD *)(v6 + 4 * *a2);
  if (a4)
  {
    while (1)
    {
      int v8 = *a3++;
      uint64_t result = result ^ (v7 >> 10 << ((v7 >> 6) & 8)) ^ v8;
      unsigned int v7 = *(_DWORD *)(v6 + 4 * result);
      if ((v7 & 0x800000FF) != v8) {
        break;
      }
      if (!--a4) {
        return result;
      }
    }
    return -1;
  }
  int v9 = *a3;
  if (*a3)
  {
    unint64_t v10 = a3 + 1;
    while (1)
    {
      uint64_t result = result ^ v9 ^ (v7 >> 10 << ((v7 >> 6) & 8));
      unsigned int v7 = *(_DWORD *)(v6 + 4 * result);
      if ((v7 & 0x800000FF) != v9) {
        break;
      }
      int v11 = *v10++;
      int v9 = v11;
      if (!v11) {
        return result;
      }
    }
    return -1;
  }
  return result;
}

BOOL sub_19E100114(uint64_t a1, void *a2)
{
  return *a2 != -1;
}

uint64_t sub_19E100124()
{
  return 0;
}

void sub_19E10012C(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t *, const void *, size_t))(*(void *)a1 + 120))(a1, &v16, a2, a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v16))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E04147C();
    }
    if (a3 >= 0x17)
    {
      uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v11 = a3 | 7;
      }
      uint64_t v12 = v11 + 1;
      unint64_t v10 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)a3;
      unint64_t v15 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v15) = a3;
      unint64_t v10 = __dst;
      if (!a3)
      {
LABEL_10:
        *((unsigned char *)v10 + a3) = 0;
        uint64_t v13 = operator new(0x28uLL);
        void *v13 = &unk_1EF0A19E0;
        v13[1] = __dst;
        v13[2] = a2;
        void v13[3] = a3;
        v13[4] = a4;
        v17[3] = v13;
        (*(void (**)(uint64_t, uint64_t *, void *, uint64_t))(*(void *)a1 + 136))(a1, &v16, v17, a5);
        sub_19E0B5B00(v17);
        if (SHIBYTE(v15) < 0) {
          operator delete(__dst[0]);
        }
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19E10032C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_19E100360()
{
  return &unk_1EF0A1A40;
}

uint64_t sub_19E10036C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1A40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E1003AC(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = a1[3];
  unint64_t v10 = v9 + v8;
  uint64_t v11 = a1[1];
  int v12 = *(char *)(v11 + 23);
  if (v12 < 0) {
    unint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    unint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  uint64_t v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    uint64_t v11 = a1[1];
    uint64_t v9 = a1[3];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
  uint64_t v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    uint64_t v11 = a1[1];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
LABEL_9:
  int v16 = *a2;
  if ((v12 & 0x80) != 0) {
    uint64_t v11 = *(void *)v11;
  }
  uint64_t v17 = *(void *)(a1[4] + 24);

  return sub_19E0B5BE8(v17, v16, v11, v10, a4);
}

__n128 sub_19E10049C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A19E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E1004CC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF0A19E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_19E100520()
{
}

uint64_t sub_19E100538(uint64_t a1, unsigned char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result = off_1EC301548();
  uint64_t v9 = *(_DWORD **)(v8 + 24);
  uint64_t v10 = (*v9 >> 10 << ((*v9 >> 6) & 8));
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = a2[v12];
      uint64_t v15 = v10 ^ v14;
      unsigned int v16 = v9[v15];
      if ((v16 & 0x800000FF) != v14) {
        break;
      }
      uint64_t v10 = v15 ^ (v16 >> 10 << ((v16 >> 6) & 8));
      if ((v16 & 0x100) != 0)
      {
        if (v13 <= 0x7F)
        {
          unint64_t v17 = result + 16 * v13;
          *(_DWORD *)unint64_t v17 = v9[v10] & 0x7FFFFFFF;
          *(void *)(v17 + 8) = v12 + 1;
        }
        ++v13;
      }
      ++v12;
    }
    while (a3 != v12);
  }
  else
  {
    unsigned int v18 = *a2;
    if (!*a2) {
      return result;
    }
    unint64_t v13 = 0;
    uint64_t v19 = 1;
    do
    {
      uint64_t v20 = v10 ^ v18;
      unsigned int v21 = v9[v20];
      if ((v21 & 0x800000FF) != v18) {
        break;
      }
      uint64_t v10 = v20 ^ (v21 >> 10 << ((v21 >> 6) & 8));
      if ((v21 & 0x100) != 0)
      {
        if (v13 <= 0x7F)
        {
          unint64_t v22 = result + 16 * v13;
          *(_DWORD *)unint64_t v22 = v9[v10] & 0x7FFFFFFF;
          *(void *)(v22 + 8) = v19;
        }
        ++v13;
      }
      unsigned int v18 = a2[v19++];
    }
    while (v18);
  }
  char v30 = 0;
  if (v13)
  {
    unint64_t v23 = v13 - 1;
    unint64_t v24 = (void *)(result + 8);
    do
    {
      int v25 = *((_DWORD *)v24 - 2);
      unint64_t v27 = *v24;
      v24 += 2;
      uint64_t v26 = v27;
      if (a3 >= v27) {
        uint64_t v28 = v26;
      }
      else {
        uint64_t v28 = a3;
      }
      uint64_t result = sub_19E0B5BE8(*(void *)(a4 + 24), v25, (uint64_t)a2, v28, (uint64_t)&v30);
      if (v30) {
        BOOL v29 = 1;
      }
      else {
        BOOL v29 = v23 == 0;
      }
      --v23;
    }
    while (!v29);
  }
  return result;
}

BOOL sub_19E1006C4(uint64_t a1, unsigned char *a2, uint64_t a3, int *a4)
{
  uint64_t v4 = *(unsigned int **)(a1 + 24);
  unsigned int v5 = *v4;
  if (a3)
  {
    uint64_t v6 = 0;
    while (1)
    {
      int v7 = *a2++;
      v6 ^= (v5 >> 10 << ((v5 >> 6) & 8)) ^ v7;
      unsigned int v5 = v4[v6];
      if ((v5 & 0x800000FF) != v7) {
        break;
      }
      if (!--a3) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = *a2;
    if (*a2)
    {
      uint64_t v6 = 0;
      uint64_t v9 = a2 + 1;
      while (1)
      {
        v6 ^= (v5 >> 10 << ((v5 >> 6) & 8)) ^ v8;
        unsigned int v5 = v4[v6];
        if ((v5 & 0x800000FF) != v8) {
          break;
        }
        int v10 = *v9++;
        int v8 = v10;
        if (!v10)
        {
LABEL_10:
          if ((v5 & 0x100) != 0) {
            goto LABEL_13;
          }
          break;
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
      if ((v5 & 0x100) != 0)
      {
LABEL_13:
        int v11 = v4[v6 ^ (v5 >> 10 << ((v5 >> 6) & 8))] & 0x7FFFFFFF;
        goto LABEL_14;
      }
    }
  }
  int v11 = -1;
LABEL_14:
  *a4 = v11;
  return v11 != -1;
}

uint64_t sub_19E10078C(void *a1, uint64_t a2, uint64_t a3)
{
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v6 = a1[4];
  if (v6)
  {
    MEMORY[0x19F3BA6E0](v6, 0x1000C8052888210);
    a1[4] = 0;
  }
  a1[2] = a3;
  a1[3] = a2;
  return 1;
}

void sub_19E1007E8(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  uint64_t v52 = 0;
  int v53 = 0;
  unint64_t v54 = 0;
  __n128 __p = 0;
  char v50 = 0;
  unint64_t v51 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  unint64_t v48 = 0;
  sub_19E0C470C((void **)&v52, v7);
  sub_19E0C47B4(&__p, v7);
  sub_19E0C485C((void **)&v46, v7);
  unint64_t v45 = v7;
  if (v5 != v6)
  {
    uint64_t v8 = 0;
    if (v7 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v7;
    }
    do
    {
      uint64_t v10 = *a2 + 24 * v8;
      if (*(char *)(v10 + 23) < 0) {
        uint64_t v10 = *(void *)v10;
      }
      int v11 = (char *)v53;
      if ((unint64_t)v53 >= v54)
      {
        uint64_t v13 = v52;
        uint64_t v14 = ((uint64_t)v53 - v52) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_19E041BEC();
        }
        uint64_t v16 = v54 - v52;
        if ((uint64_t)(v54 - v52) >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)sub_19E060B48(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (uint64_t *)(v17 + 8 * v14);
        uint64_t *v19 = v10;
        uint64_t v12 = v19 + 1;
        if (v11 != (char *)v13)
        {
          do
          {
            uint64_t v20 = *((void *)v11 - 1);
            v11 -= 8;
            *--uint64_t v19 = v20;
          }
          while (v11 != (char *)v13);
          int v11 = (char *)v52;
        }
        uint64_t v52 = (uint64_t)v19;
        unint64_t v54 = v17 + 8 * v18;
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        uint64_t *v53 = v10;
        uint64_t v12 = (uint64_t *)(v11 + 8);
      }
      int v53 = v12;
      uint64_t v21 = *a2 + 24 * v8;
      if (*(char *)(v21 + 23) < 0) {
        uint64_t v22 = *(void *)(v21 + 8);
      }
      else {
        uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
      }
      unint64_t v23 = v50;
      if (v50 >= v51)
      {
        int v25 = (char *)__p;
        uint64_t v26 = (v50 - (unsigned char *)__p) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          sub_19E041BEC();
        }
        uint64_t v28 = v51 - (unsigned char *)__p;
        if ((v51 - (unsigned char *)__p) >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          char v30 = (char *)sub_19E049FB0((uint64_t)&v51, v29);
          int v25 = (char *)__p;
          unint64_t v23 = v50;
        }
        else
        {
          char v30 = 0;
        }
        uint64_t v31 = &v30[8 * v26];
        *(void *)uint64_t v31 = v22;
        unint64_t v24 = v31 + 8;
        while (v23 != v25)
        {
          uint64_t v32 = *((void *)v23 - 1);
          v23 -= 8;
          *((void *)v31 - 1) = v32;
          v31 -= 8;
        }
        __n128 __p = v31;
        char v50 = v24;
        unint64_t v51 = &v30[8 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(void *)char v50 = v22;
        unint64_t v24 = v23 + 8;
      }
      char v50 = v24;
      int v33 = *(_DWORD *)(*a3 + 4 * v8);
      long long v34 = v47;
      if ((unint64_t)v47 >= v48)
      {
        long long v36 = (_DWORD *)v46;
        uint64_t v37 = ((uint64_t)v47 - v46) >> 2;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62) {
          sub_19E041BEC();
        }
        uint64_t v39 = v48 - v46;
        if ((uint64_t)(v48 - v46) >> 1 > v38) {
          unint64_t v38 = v39 >> 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40) {
          unint64_t v40 = (unint64_t)sub_19E068D84(v40);
        }
        else {
          uint64_t v41 = 0;
        }
        unsigned int v42 = (_DWORD *)(v40 + 4 * v37);
        _DWORD *v42 = v33;
        uint64_t v35 = v42 + 1;
        while (v34 != v36)
        {
          int v43 = *--v34;
          *--unsigned int v42 = v43;
        }
        uint64_t v46 = (uint64_t)v42;
        unint64_t v48 = v40 + 4 * v41;
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        _DWORD *v47 = v33;
        uint64_t v35 = v34 + 1;
      }
      uint64_t v47 = v35;
      ++v8;
    }
    while (v8 != v9);
  }
  sub_19E0C4904(a1 + 8, v45, v52, (uint64_t)__p, v46);
}

void sub_19E100B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E100B90(uint64_t a1, uint64_t **a2)
{
  __n128 __p = 0;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  uint64_t v32 = 0;
  int v33 = 0;
  unint64_t v34 = 0;
  char v30 = 0;
  uint64_t v31 = 0;
  sub_19E0C470C((void **)&v32, v3);
  sub_19E0C47B4(&__p, v3);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      uint64_t v6 = v4;
      if (*((char *)v4 + 23) < 0) {
        uint64_t v6 = (uint64_t *)*v4;
      }
      unint64_t v7 = v33;
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v9 = v32;
        uint64_t v10 = (uint64_t)&v33[-v32] >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          sub_19E041BEC();
        }
        uint64_t v12 = v34 - v32;
        if ((uint64_t)(v34 - v32) >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)sub_19E060B48(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        unint64_t v15 = (void *)(v13 + 8 * v10);
        *unint64_t v15 = v6;
        uint64_t v8 = (char *)(v15 + 1);
        if (v7 != (char *)v9)
        {
          do
          {
            uint64_t v16 = *((void *)v7 - 1);
            v7 -= 8;
            *--unint64_t v15 = v16;
          }
          while (v7 != (char *)v9);
          unint64_t v7 = (char *)v32;
        }
        uint64_t v32 = (uint64_t)v15;
        unint64_t v34 = v13 + 8 * v14;
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(void *)int v33 = v6;
        uint64_t v8 = v7 + 8;
      }
      int v33 = v8;
      if (*((char *)v4 + 23) < 0) {
        uint64_t v17 = v4[1];
      }
      else {
        uint64_t v17 = *((unsigned __int8 *)v4 + 23);
      }
      uint64_t v18 = v30;
      if (v30 >= v31)
      {
        uint64_t v20 = (char *)__p;
        uint64_t v21 = (v30 - (unsigned char *)__p) >> 3;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          sub_19E041BEC();
        }
        uint64_t v23 = v31 - (unsigned char *)__p;
        if ((v31 - (unsigned char *)__p) >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          int v25 = (char *)sub_19E049FB0((uint64_t)&v31, v24);
          uint64_t v20 = (char *)__p;
          uint64_t v18 = v30;
        }
        else
        {
          int v25 = 0;
        }
        uint64_t v26 = &v25[8 * v21];
        *(void *)uint64_t v26 = v17;
        uint64_t v19 = v26 + 8;
        while (v18 != v20)
        {
          uint64_t v27 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v26 - 1) = v27;
          v26 -= 8;
        }
        __n128 __p = v26;
        char v30 = v19;
        uint64_t v31 = &v25[8 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(void *)char v30 = v17;
        uint64_t v19 = v18 + 8;
      }
      char v30 = v19;
      v4 += 3;
    }
    while (v4 != v5);
  }
  sub_19E0C4904(a1 + 8, v3, v32, (uint64_t)__p, 0);
}

void sub_19E100DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E100E24@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_19E057A94(a2, *(void **)(a1 + 24), 4 * *(void *)(a1 + 16));
}

void sub_19E100E34(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  uint64_t v8 = a1;
  if (a5)
  {
    __n128 __p = 0;
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    sub_19E0C485C(&__p, a2);
    uint64_t v10 = (char *)__p;
    if (a2)
    {
      uint64_t v22 = v8;
      uint64_t v23 = v6;
      uint64_t v24 = v5;
      uint64_t v11 = 0;
      unint64_t v13 = v26;
      unint64_t v12 = v27;
      do
      {
        uint64_t v14 = *(void *)(a5 + 8 * v11);
        if ((unint64_t)v13 >= v12)
        {
          uint64_t v15 = (v13 - v10) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
          {
            uint64_t v26 = v13;
            sub_19E041BEC();
          }
          if ((uint64_t)(v12 - (void)v10) >> 1 > v16) {
            unint64_t v16 = (uint64_t)(v12 - (void)v10) >> 1;
          }
          if (v12 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            unint64_t v17 = (unint64_t)sub_19E068D84(v17);
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (char *)(v17 + 4 * v15);
          *(_DWORD *)uint64_t v19 = v14;
          uint64_t v20 = v19 + 4;
          while (v13 != v10)
          {
            int v21 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v19 - 1) = v21;
            v19 -= 4;
          }
          unint64_t v12 = v17 + 4 * v18;
          if (v10) {
            operator delete(v10);
          }
          uint64_t v10 = v19;
          unint64_t v13 = v20;
        }
        else
        {
          *(_DWORD *)unint64_t v13 = v14;
          v13 += 4;
        }
        ++v11;
      }
      while (v11 != a2);
      uint64_t v26 = v13;
      unint64_t v27 = v12;
      __n128 __p = v10;
      uint64_t v6 = v23;
      uint64_t v5 = v24;
      uint64_t v8 = v22;
    }
    sub_19E0C4904(v8 + 8, a2, v6, v5, (uint64_t)v10);
  }
  sub_19E0C4904(a1 + 8, a2, a3, a4, 0);
}

void sub_19E100FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E100FE4(void *a1)
{
  sub_19E0FF618(a1);

  JUMPOUT(0x19F3BA710);
}

void *sub_19E101020(void *a1)
{
  *a1 = &unk_1EF0A1AE0;
  sub_19E10106C((uint64_t)(a1 + 1), 0);
  return a1;
}

void sub_19E10106C(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 8;
  if (*(_DWORD *)(a1 + 76))
  {
    *(void *)uint64_t v4 = 0;
    *(void *)(a1 + 16) = 0;
  }
  else if (*(void *)v4)
  {
    free(*(void **)v4);
  }
  uint64_t v5 = *(void **)(a1 + 16);
  if (v5) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6) {
    free(v6);
  }
  unint64_t v7 = *(void **)(a1 + 32);
  if (v7) {
    free(v7);
  }
  uint64_t v8 = *(void **)(a1 + 40);
  if (v8) {
    free(v8);
  }
  *(_DWORD *)(v4 + 64) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  if (a2) {
    sub_19E101108(a1);
  }
  *(_DWORD *)(a1 + 76) = 0;
}

void sub_19E101108(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  sub_19E101214((void **)(a1 + 8), 256, 256);
  sub_19E0B7898((void **)(a1 + 16), 4, 0);
  sub_19E0B7970((void **)(a1 + 24), 1, 0);
  sub_19E101320((void **)(a1 + 32), 256, 0);
  sub_19E101428((void **)(a1 + 40), 1, 0);
  uint64_t v3 = 0;
  **(void **)(a1 + 8) = 0xFFFFFFFF00000000;
  unint64_t v4 = 0xFFFFFFFE00000000;
  for (uint64_t i = 8; i != 2048; i += 8)
  {
    uint64_t v6 = v3;
    if (i == 2040) {
      unint64_t v7 = 0xFFFFFFFF00000000;
    }
    else {
      unint64_t v7 = v4;
    }
    if (!v3) {
      uint64_t v6 = 4294967041;
    }
    *(void *)(*v2 + i) = v7 | v6;
    v4 -= 0x100000000;
    --v3;
  }
  *(void *)(a1 + 60) = 0x10000000100;
  *(_DWORD *)(*(void *)(a1 + 40) + 16) = 1;
  **(_DWORD **)(a1 + 16) = 4;
  *(void *)(a1 + 68) = 0x100000004;
  *(void *)a1 = 0;
  for (uint64_t j = 40; j != 297; ++j)
    *(_WORD *)(a1 + 2 * j) = j - 39;
}

void sub_19E101214(void **a1, int a2, int a3)
{
  uint64_t v6 = malloc_type_realloc(*a1, 8 * a2, 0x100004000313F17uLL);
  if (!v6)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v6;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9457990, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9457990))
  {
    qword_1E9457988 = 0;
    __cxa_guard_release(&qword_1E9457990);
  }
  if (a3 != a2)
  {
    unint64_t v7 = (uint64_t *)((char *)*a1 + 8 * a3);
    uint64_t v8 = qword_1E9457988;
    uint64_t v9 = 8 * a2 - 8 * a3;
    do
    {
      *v7++ = v8;
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_19E101320(void **a1, int a2, int a3)
{
  uint64_t v6 = malloc_type_realloc(*a1, 2 * a2, 0x1000040BDFB0063uLL);
  if (!v6)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v6;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E94579A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E94579A0))
  {
    word_1E9457998 = 0;
    __cxa_guard_release(&qword_1E94579A0);
  }
  if (a3 != a2)
  {
    unint64_t v7 = (__int16 *)((char *)*a1 + 2 * a3);
    __int16 v8 = word_1E9457998;
    uint64_t v9 = 2 * a2 - 2 * a3;
    do
    {
      *v7++ = v8;
      v9 -= 2;
    }
    while (v9);
  }
}

__n128 sub_19E101428(void **a1, int a2, int a3)
{
  uint64_t v6 = malloc_type_realloc(*a1, 20 * a2, 0x1000040A86A77D5uLL);
  if (!v6)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v6;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E94579C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E94579C0))
  {
    *(void *)&xmmword_1E94579A8 = 0;
    DWORD2(xmmword_1E94579A8) = 16843008;
    *(void *)((char *)&xmmword_1E94579A8 + 12) = 0;
    __cxa_guard_release(&qword_1E94579C0);
  }
  if (a3 != a2)
  {
    __int16 v8 = (__n128 *)((char *)*a1 + 20 * a3);
    uint64_t v9 = 20 * a2 - 20 * a3;
    do
    {
      __n128 result = (__n128)xmmword_1E94579A8;
      v8[1].n128_u32[0] = dword_1E94579B8;
      *__int16 v8 = result;
      __int16 v8 = (__n128 *)((char *)v8 + 20);
      v9 -= 20;
    }
    while (v9);
  }
  return result;
}

void sub_19E101560(uint64_t a1)
{
}

uint64_t sub_19E10156C()
{
  return 0;
}

BOOL sub_19E101574(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  if (a3)
  {
    uint64_t v8 = a1 + 8;
    uint64_t v51 = 0;
    if (!*(void *)(a1 + 40) || !*(void *)(a1 + 48)) {
      sub_19E101968(a1 + 8);
    }
    int v9 = **(_DWORD **)(a1 + 16);
    if ((v9 & 0x80000000) == 0)
    {
      unint64_t v10 = 0;
      while (a3 != v10)
      {
        int v11 = sub_19E101BD4(v8, &v51, (unsigned __int8 *)(a2 + v10));
        unint64_t v12 = v11;
        uint64_t v51 = v11;
        ++v10;
        int v9 = *(_DWORD *)(*(void *)(a1 + 16) + 8 * v11);
        if (v9 < 0) {
          goto LABEL_11;
        }
      }
      char v57 = 0;
      unint64_t v17 = (unsigned __int8 *)&v57;
      goto LABEL_34;
    }
    unint64_t v12 = 0;
    unint64_t v10 = 0;
LABEL_11:
    unint64_t v13 = -v9;
    if (v13 >= 4)
    {
      uint64_t v14 = (unsigned __int8 *)(*(void *)(a1 + 24) + v13);
      char v50 = &v14[-v10];
      unint64_t v15 = v10;
      if (v10 < a3)
      {
        unint64_t v15 = v10;
        while (1)
        {
          int v16 = *v14++;
          if (*(unsigned __int8 *)(a2 + v15) != v16) {
            break;
          }
          if (a3 == ++v15) {
            goto LABEL_19;
          }
        }
      }
      if (v15 == a3)
      {
LABEL_19:
        unint64_t v15 = a3;
        if (!v50[a3])
        {
          char v30 = v50;
          goto LABEL_53;
        }
      }
      uint64_t v49 = a4;
      if (HIDWORD(v12))
      {
        uint64_t v51 = v12;
        unint64_t v18 = -(uint64_t)*(int *)(*(void *)(a1 + 16) + 8 * v12);
        if (v13 > v18)
        {
          do
          {
            unsigned __int8 v56 = *(unsigned char *)(*(void *)(a1 + 24) + v18);
            uint64_t v51 = (int)sub_19E101BD4(v8, &v51, &v56);
            ++v18;
          }
          while (v13 != v18);
        }
      }
      unint64_t v19 = v15 - v10;
      if (v15 > v10)
      {
        uint64_t v20 = (unsigned __int8 *)(a2 + v10);
        unint64_t v21 = v19;
        do
        {
          unsigned __int8 v22 = *v20++;
          unsigned __int8 v55 = v22;
          uint64_t v51 = (int)sub_19E101BD4(v8, &v51, &v55);
          --v21;
        }
        while (v21);
      }
      if (v50[v15])
      {
        unsigned __int8 v54 = v50[v15];
        *(_DWORD *)(*(void *)(a1 + 16) + 8 * (int)sub_19E101BD4(v8, &v51, &v54)) = v9 + ~v19;
        v19 -= 4;
      }
      BOOL v23 = __CFADD__(v19, v13);
      unint64_t v24 = v19 + v13;
      a4 = v49;
      if (!v23)
      {
        do
        {
          int v25 = *(_DWORD *)(a1 + 80);
          uint64_t v26 = *(int **)(a1 + 32);
          int v27 = *v26 + 1;
          *uint64_t v26 = v27;
          if (v25 == v27)
          {
            int v28 = 2 * *(_DWORD *)(a1 + 80);
            *(_DWORD *)(a1 + 80) = v28;
            sub_19E0B7970((void **)(a1 + 32), v28, **(_DWORD **)(a1 + 32));
          }
          *(_DWORD *)(*(void *)(a1 + 32) + 4 * **(int **)(a1 + 32)) = v13;
          v13 += 5;
        }
        while (v13 <= v24);
      }
      if (v15 == a3)
      {
        unsigned __int8 v53 = 0;
        unint64_t v17 = &v53;
LABEL_34:
        unint64_t v29 = (char *)(*(void *)(a1 + 16) + 8 * (int)sub_19E101BD4(v8, &v51, v17));
LABEL_54:
        *(_DWORD *)unint64_t v29 = *a4;
        return a3 != 0;
      }
      if (v50[v15])
      {
        unint64_t v10 = v15 + 1;
      }
      else
      {
        unsigned __int8 v53 = 0;
        int v31 = sub_19E101BD4(v8, &v51, &v53);
        unint64_t v10 = v15 + 1;
        *(_DWORD *)(*(void *)(a1 + 16) + 8 * v31) += *(_DWORD *)&v50[v15 + 1];
      }
      unsigned __int8 v52 = *(unsigned char *)(a2 + v15);
      unint64_t v12 = (int)sub_19E101BD4(v8, &v51, &v52);
    }
    if (a3 == v10)
    {
      uint64_t v32 = *(int **)(a1 + 32);
      uint64_t v33 = *v32;
      if (v33)
      {
        uint64_t v34 = v32[v33];
        *(unsigned char *)(*(void *)(a1 + 24) + v34) = 0;
        *(_DWORD *)(*(void *)(a1 + 16) + 8 * v12) = -(int)v34;
        --**(_DWORD **)(a1 + 32);
        uint64_t v35 = v34 + *(void *)(a1 + 24);
        *(_DWORD *)(v35 + 1) = 0;
        unint64_t v29 = (char *)(v35 + 1);
        goto LABEL_54;
      }
    }
    int v36 = a3 - v10 + 5;
    unint64_t v38 = (_DWORD **)(a1 + 24);
    uint64_t v37 = *(int **)(a1 + 24);
    int v39 = *(_DWORD *)(a1 + 76);
    int v40 = *v37;
    if (v39 < *v37 + v36)
    {
      if (v39 <= v36) {
        int v41 = a3 - v10 + 5;
      }
      else {
        int v41 = *(_DWORD *)(a1 + 76);
      }
      *(_DWORD *)(a1 + 76) = v41 + v39;
      sub_19E0B7898((void **)(a1 + 24), v41 + v39, *v37);
      int v40 = **(_DWORD **)(a1 + 24);
    }
    *(_DWORD *)(*(void *)(a1 + 16) + 8 * v12) = -v40;
    unsigned int v42 = *(int **)(a1 + 24);
    uint64_t v43 = *v42;
    unsigned int v44 = (char *)v42 + v43;
    char v30 = (unsigned __int8 *)v42 + v43 - v10;
    unint64_t v45 = a3 - v10;
    if (a3 > v10)
    {
      uint64_t v46 = (char *)(a2 + v10);
      do
      {
        char v47 = *v46++;
        *v44++ = v47;
        --v45;
      }
      while (v45);
      unsigned int v42 = *v38;
      LODWORD(v43) = **v38;
    }
    int *v42 = v43 + v36;
LABEL_53:
    unint64_t v29 = (char *)&v30[a3 + 1];
    goto LABEL_54;
  }
  return a3 != 0;
}

void sub_19E101968(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = (void **)(a1 + 40);
  if (!v3)
  {
    sub_19E101428(v2, *(int *)(a1 + 64) >> 8, 0);
    *(_DWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 52) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    unint64_t v19 = (int *)(a1 + 48);
    if (*(int *)(a1 + 64) >= 1)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = *(void *)(a1 + 40);
      int v23 = 256;
      while (1)
      {
        uint64_t v24 = v22 + 20 * v20;
        *(_WORD *)(v24 + 8) = 0;
        int v25 = (__int16 *)(v24 + 8);
        if ((int)v21 >= (v20 << 8) + 256) {
          break;
        }
        __int16 v26 = 0;
        uint64_t v27 = (int)v21;
        int v28 = (int *)(*(void *)(a1 + 8) + 8 * (int)v21 + 4);
        do
        {
          int v29 = *v28;
          v28 += 2;
          if (v29 < 0)
          {
            BOOL v16 = v26++ == 0;
            __int16 *v25 = v26;
            if (v16)
            {
              *(_DWORD *)(v22 + 20 * v20 + 16) = v21;
              __int16 v26 = 1;
            }
          }
          ++v27;
          LODWORD(v21) = v21 + 1;
        }
        while (v23 != v27);
        if (v26) {
          char v30 = (int *)(a1 + 56);
        }
        else {
          char v30 = (int *)(a1 + 48);
        }
        if (v26 == 1) {
          char v30 = (int *)(a1 + 52);
        }
        int v31 = *v30;
        if (*v30) {
          goto LABEL_42;
        }
        uint64_t v32 = (_DWORD *)(v22 + 20 * v20);
        if (!v26)
        {
          int v31 = 0;
          goto LABEL_43;
        }
        uint64_t v33 = v20;
LABEL_46:
        *(_DWORD *)(v22 + 20 * v33 + 4) = v20;
        _DWORD *v32 = v20;
        *char v30 = v20++;
        v23 += 256;
        uint64_t v21 = v27;
        if ((int)v27 >= *(_DWORD *)(a1 + 64)) {
          goto LABEL_2;
        }
      }
      int v31 = *v19;
      if (*v19)
      {
        char v30 = (int *)(a1 + 48);
        uint64_t v27 = v21;
LABEL_42:
        uint64_t v32 = (_DWORD *)(v22 + 20 * v20);
LABEL_43:
        uint64_t v21 = v27;
      }
      else
      {
        uint64_t v32 = (_DWORD *)(v22 + 20 * v20);
        char v30 = (int *)(a1 + 48);
      }
      uint64_t v34 = (int *)(v22 + 20 * v31);
      _DWORD *v32 = *v34;
      *(_DWORD *)(v22 + 20 * v20 + 4) = *v30;
      uint64_t v33 = *v34;
      uint64_t v27 = v21;
      uint64_t v32 = v34;
      goto LABEL_46;
    }
  }
LABEL_2:
  unint64_t v4 = (uint64_t *)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 64);
  if (!*(void *)(a1 + 32))
  {
    sub_19E101320((void **)(a1 + 32), v5, 0);
    int v5 = *(_DWORD *)(a1 + 64);
    if (v5 >= 1)
    {
      for (uint64_t i = 0; i < v5; ++i)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        uint64_t v8 = *(unsigned int *)(v7 + 8 * i + 4);
        if ((v8 & 0x80000000) == 0)
        {
          uint64_t v9 = *(int *)(v7 + 8 * v8);
          unsigned int v10 = (v9 ^ i);
          if (v9 != i)
          {
            uint64_t v11 = *v4;
            uint64_t v12 = *v4 + 2 * v8;
            unsigned int v15 = *(unsigned __int8 *)(v12 + 1);
            uint64_t v14 = (unsigned char *)(v12 + 1);
            unsigned int v13 = v15;
            if (v8) {
              BOOL v16 = v13 == 0;
            }
            else {
              BOOL v16 = 0;
            }
            if (!v16 || (unsigned int v13 = 0, *(_DWORD *)(v7 + 8 * v9 + 4) == v8))
            {
              if (v13 < v10)
              {
                do
                {
                  int v17 = v9 ^ v13;
                  unsigned int v13 = *(unsigned __int8 *)(v11 + 2 * (int)(v9 ^ v13));
                  if (*(unsigned char *)(v11 + 2 * v17)) {
                    BOOL v18 = v13 >= v10;
                  }
                  else {
                    BOOL v18 = 1;
                  }
                }
                while (!v18);
                uint64_t v14 = (unsigned char *)(v11 + 2 * v17);
              }
            }
            *(unsigned char *)(v11 + 2 * (int)((v9 ^ i) ^ v9)) = v13;
            *uint64_t v14 = v10;
            int v5 = *(_DWORD *)(a1 + 64);
          }
        }
      }
    }
  }
  *(_DWORD *)(a1 + 60) = v5;
  *(_DWORD *)(a1 + 68) = **(_DWORD **)(a1 + 16);
  *(_DWORD *)(a1 + 72) = 1;
}

uint64_t sub_19E101BD4(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  unint64_t v4 = a2;
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *a2;
  int v8 = *(_DWORD *)(v6 + 8 * *a2);
  unsigned int v9 = *a3;
  if (v8 < 0 || (unint64_t v10 = v8 ^ v9, v11 = *(int *)(v6 + 8 * v10 + 4), (v11 & 0x80000000) != 0))
  {
    uint64_t result = sub_19E1021EC(a1, *(_DWORD *)(v6 + 8 * *a2), *a3, v7);
    unsigned int v22 = *a3;
    uint64_t v23 = *(void *)(a1 + 32);
    uint64_t v24 = v23 + 2 * *v4;
    unsigned int v27 = *(unsigned __int8 *)(v24 + 1);
    __int16 v26 = (unsigned char *)(v24 + 1);
    unsigned int v25 = v27;
    if ((v8 & 0x80000000) == 0 && v25 < v22)
    {
      do
      {
        int v28 = result ^ v25 ^ v22;
        unsigned int v25 = *(unsigned __int8 *)(v23 + 2 * v28);
        if (*(unsigned char *)(v23 + 2 * v28)) {
          BOOL v29 = v25 >= v22;
        }
        else {
          BOOL v29 = 1;
        }
      }
      while (!v29);
      __int16 v26 = (unsigned char *)(v23 + 2 * v28);
    }
    *(unsigned char *)(v23 + 2 * (int)result) = v25;
    *__int16 v26 = v22;
  }
  else
  {
    uint64_t result = v8 ^ v9;
    if (v11 != v7)
    {
      int v13 = *(_DWORD *)(v6 + 8 * v11);
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = *(unsigned __int8 *)(v14 + 2 * v7 + 1);
      LOBYTE(v16) = v15;
      LOBYTE(v17) = *(unsigned char *)(v14 + 2 * v11 + 1);
      while (1)
      {
        uint64_t v18 = 2 * (v13 ^ v17);
        int v17 = *(unsigned __int8 *)(v14 + v18);
        if (!*(unsigned char *)(v14 + v18)) {
          break;
        }
        int v16 = *(unsigned __int8 *)(v14 + 2 * (v8 ^ v16));
        if (!v16)
        {
          uint64_t v19 = a1;
          int v20 = *(_DWORD *)(v6 + 8 * *a2);
          int v21 = v9;
          goto LABEL_18;
        }
      }
      uint64_t v19 = a1;
      int v20 = *(_DWORD *)(v6 + 8 * v11);
      int v15 = *(unsigned __int8 *)(v14 + 2 * v11 + 1);
      int v21 = -1;
LABEL_18:
      char v30 = sub_19E0B8A5C(v19, v101, v20, v15, v21);
      int v31 = v30;
      if (v101 == v30)
      {
        signed int v43 = sub_19E102334(a1);
      }
      else
      {
        int v99 = v4;
        int v32 = *(_DWORD *)(a1 + 56);
        if (v32)
        {
          int v33 = *(_DWORD *)(*(void *)(a1 + 40) + 20 * v32);
          int v34 = (__int16)((_WORD)v30 - (unsigned __int16)v101 + 1);
          int v97 = v33;
          int v95 = v34;
          do
          {
            uint64_t v35 = *(void *)(a1 + 40);
            int v36 = v32;
            int v37 = *(__int16 *)(v35 + 20 * v32 + 8);
            if (v37 >= v34 && v34 < *(__int16 *)(v35 + 20 * v32 + 10))
            {
              uint64_t v38 = v35 + 20 * v32;
              signed int v41 = *(_DWORD *)(v38 + 16);
              int v39 = (signed int *)(v38 + 16);
              signed int v40 = v41;
              uint64_t v42 = *(void *)(a1 + 8);
              signed int v43 = v41;
              do
              {
                unsigned int v44 = v101;
                unint64_t v4 = v99;
                while (1)
                {
                  int v45 = *++v44;
                  if ((*(_DWORD *)(v42 + 8 * (v43 ^ v101[0] ^ v45) + 4) & 0x80000000) == 0) {
                    break;
                  }
                  if (v44 == v31)
                  {
                    *int v39 = v43;
                    goto LABEL_36;
                  }
                }
                int v46 = *(_DWORD *)(v42 + 8 * v43 + 4);
                signed int v43 = -v46;
              }
              while (v40 + v46);
            }
            *(_WORD *)(v35 + 20 * v36 + 10) = v34;
            uint64_t v47 = a1 + 2 * v37;
            int v49 = *(__int16 *)(v47 + 80);
            unint64_t v48 = (_WORD *)(v47 + 80);
            if (v34 < v49) {
              *unint64_t v48 = v34;
            }
            uint64_t v50 = v35 + 20 * v36;
            int v32 = *(_DWORD *)(v50 + 4);
            int v51 = *(_DWORD *)(v50 + 12);
            *(_DWORD *)(v50 + 12) = v51 + 1;
            if (!v51)
            {
              sub_19E0B8B18(v35, v36, (_DWORD *)(a1 + 56), (int *)(a1 + 52));
              int v34 = v95;
              int v33 = v97;
            }
          }
          while (v36 != v33);
        }
        signed int v43 = sub_19E102374(a1) << 8;
        unint64_t v4 = v99;
LABEL_36:
        unint64_t v10 = v8 ^ v9;
      }
      int v94 = v43 ^ v101[0];
      LODWORD(v52) = *(_DWORD *)v4;
      if (v17) {
        int v53 = v8;
      }
      else {
        int v53 = v13;
      }
      if (!v17) {
        LODWORD(v52) = v11;
      }
      int v100 = v52;
      if (v17 && v101[0] == v9)
      {
        uint64_t v52 = (int)v52;
        *(unsigned char *)(*(void *)(a1 + 32) + 2 * (int)v52 + 1) = v9;
      }
      else
      {
        uint64_t v52 = (int)v52;
      }
      int v54 = v94;
      *(_DWORD *)(*(void *)(a1 + 8) + 8 * v52) = v94;
      if (v101 <= v31)
      {
        if (v9) {
          int v55 = -1;
        }
        else {
          int v55 = 0;
        }
        int v93 = v55;
        int v96 = v53;
        uint64_t v98 = (uint64_t)v53 >> 8;
        int v91 = (int *)(a1 + 52);
        unsigned __int8 v56 = v101;
        uint64_t v92 = 2 * v10;
        while (1)
        {
          int v57 = sub_19E1021EC(a1, v54, *v56, v100);
          if (v56 == v31) {
            unsigned __int8 v58 = 0;
          }
          else {
            unsigned __int8 v58 = v56[1];
          }
          int v59 = v53 ^ *v56;
          *(unsigned char *)(*(void *)(a1 + 32) + 2 * v57) = v58;
          if (v17 && v59 == v10) {
            goto LABEL_88;
          }
          uint64_t v60 = *(void *)(a1 + 8);
          char v61 = (int *)(v60 + 8 * v57);
          uint64_t v62 = v59;
          long long v63 = (int *)(v60 + 8 * v59);
          int v64 = *v63;
          int *v61 = *v63;
          if (v64 >= 1 && *v56)
          {
            uint64_t v65 = *(void *)(a1 + 32);
            int v66 = *(unsigned __int8 *)(v65 + 2 * v59 + 1);
            *(unsigned char *)(v65 + 2 * v57 + 1) = v66;
            uint64_t v67 = *(void *)(a1 + 8);
            int v68 = *v61;
            do
            {
              *(_DWORD *)(v67 + 8 * (v68 ^ v66) + 4) = v57;
              int v68 = *v61;
              int v66 = *(unsigned __int8 *)(v65 + 2 * (*v61 ^ v66));
            }
            while (v66);
          }
          uint64_t v69 = *v4;
          if (!v17 && v59 == v69)
          {
            *unint64_t v4 = v57;
            uint64_t v69 = v57;
          }
          BOOL v70 = v17 == 0;
          if (v59 != v10) {
            BOOL v70 = 0;
          }
          if (!v70) {
            break;
          }
          uint64_t v71 = *(void *)(a1 + 32);
          uint64_t v72 = v71 + 2 * v69;
          unsigned int v75 = *(unsigned __int8 *)(v72 + 1);
          unint64_t v74 = (unsigned char *)(v72 + 1);
          LOBYTE(v73) = v75;
          if (v75 < v9)
          {
            do
            {
              uint64_t v76 = v8 ^ v73;
              unsigned int v73 = *(unsigned __int8 *)(v71 + 2 * v76);
              if (*(unsigned char *)(v71 + 2 * v76)) {
                BOOL v77 = v73 >= v9;
              }
              else {
                BOOL v77 = 1;
              }
            }
            while (!v77);
            unint64_t v74 = (unsigned char *)(v71 + 2 * v76);
          }
          *(unsigned char *)(v71 + v92) = v73;
          unsigned char *v74 = v9;
          *(unsigned char *)(*(void *)(a1 + 32) + 2 * v62 + 1) = 0;
          *long long v63 = v93;
          *(_DWORD *)(v60 + 8 * v62 + 4) = *v4;
LABEL_87:
          int v53 = v96;
LABEL_88:
          if (++v56 > v31) {
            goto LABEL_89;
          }
        }
        unint64_t v10 = (unint64_t)v4;
        uint64_t v78 = *(void *)(a1 + 40);
        int v79 = v98;
        uint64_t v80 = v78 + 20 * (int)v98;
        int v82 = *(unsigned __int16 *)(v80 + 8);
        uint64_t v81 = (__int16 *)(v80 + 8);
        __int16 *v81 = v82 + 1;
        uint64_t v83 = (int *)(v81 + 4);
        if (!v82)
        {
          int *v83 = v59;
          *(void *)(*(void *)(a1 + 8) + 8 * v59) = -v59 | ((unint64_t)-v59 << 32);
          if (v59 >= 0x100)
          {
            sub_19E0B8B18(*(void *)(a1 + 40), v98, (_DWORD *)(a1 + 48), v91);
            int v79 = v98;
          }
          goto LABEL_84;
        }
        uint64_t v84 = *v83;
        uint64_t v85 = *(void *)(a1 + 8);
        uint64_t v86 = *(unsigned int *)(v85 + 8 * v84 + 4);
        *(void *)(v85 + 8 * v59) = -(int)v84 | (unint64_t)(v86 << 32);
        *(_DWORD *)(*(void *)(a1 + 8) + 8 * -(int)v86) = -v59;
        *(_DWORD *)(*(void *)(a1 + 8) + 8 * v84 + 4) = -v59;
        if (*v81 == 2)
        {
          int v79 = v98;
          if (v59 < 0x100) {
            goto LABEL_83;
          }
        }
        else
        {
          int v79 = v98;
          if (v59 < 0x100 || *(_DWORD *)(v78 + 20 * (int)v98 + 12) != 1) {
            goto LABEL_83;
          }
        }
        sub_19E0B8B18(*(void *)(a1 + 40), v79, v91, (int *)(a1 + 56));
        int v79 = v98;
LABEL_83:
        *(_DWORD *)(v78 + 20 * v79 + 12) = 0;
LABEL_84:
        uint64_t v87 = v78 + 20 * v79;
        int v89 = *(__int16 *)(v87 + 10);
        int v88 = (_WORD *)(v87 + 10);
        int v90 = *(__int16 *)(a1 + 2 * *v81 + 80);
        if (v89 < v90) {
          _WORD *v88 = v90;
        }
        *(_WORD *)(*(void *)(a1 + 32) + 2 * v62) = 0;
        unint64_t v4 = (void *)v10;
        LODWORD(v10) = v8 ^ v9;
        int v54 = v94;
        goto LABEL_87;
      }
LABEL_89:
      if (v17) {
        return v54 ^ v9;
      }
      else {
        return v10;
      }
    }
  }
  return result;
}

uint64_t sub_19E1021EC(uint64_t a1, int a2, int a3, int a4)
{
  if (a2 < 0) {
    int v8 = sub_19E102334(a1);
  }
  else {
    int v8 = a3 ^ a2;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = v8;
  uint64_t v11 = (int *)(v9 + 8 * v8);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = (uint64_t)v8 >> 8;
  uint64_t v14 = v12 + 20 * (v8 >> 8);
  __int16 v16 = *(_WORD *)(v14 + 8);
  int v15 = (_WORD *)(v14 + 8);
  *int v15 = v16 - 1;
  if (v16 == 1)
  {
    if (v10 < 0x100) {
      goto LABEL_14;
    }
    uint64_t v23 = (_DWORD *)(a1 + 52);
    uint64_t v24 = (int *)(a1 + 48);
    goto LABEL_13;
  }
  uint64_t v17 = v9 + 8 * v10;
  int v18 = *v11;
  *(_DWORD *)(v9 + 8 * -*v11 + 4) = *(_DWORD *)(v17 + 4);
  uint64_t v19 = *(int *)(v17 + 4);
  *(_DWORD *)(v9 - 8 * v19) = v18;
  uint64_t v20 = v12 + 20 * (int)v13;
  int v22 = *(_DWORD *)(v20 + 16);
  int v21 = (_DWORD *)(v20 + 16);
  if (v10 == v22) {
    _DWORD *v21 = -(int)v19;
  }
  if (v10 >= 0x100 && *v15 == 1 && *(_DWORD *)(v12 + 20 * (int)v13 + 12) != 1)
  {
    uint64_t v23 = (_DWORD *)(a1 + 56);
    uint64_t v24 = (int *)(a1 + 52);
    uint64_t v12 = *(void *)(a1 + 40);
LABEL_13:
    sub_19E0B8B18(v12, v13, v23, v24);
  }
LABEL_14:
  if (a3) {
    int v25 = -1;
  }
  else {
    int v25 = 0;
  }
  int *v11 = v25;
  *(_DWORD *)(v9 + 8 * v10 + 4) = a4;
  if (a2 < 0) {
    *(_DWORD *)(*(void *)(a1 + 8) + 8 * a4) = v10 ^ a3;
  }
  return v10;
}

uint64_t sub_19E102334(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 52);
  if (v1) {
    return *(unsigned int *)(*(void *)(a1 + 40) + 20 * v1 + 16);
  }
  int v1 = *(_DWORD *)(a1 + 56);
  if (v1) {
    return *(unsigned int *)(*(void *)(a1 + 40) + 20 * v1 + 16);
  }
  else {
    return sub_19E102374(a1) << 8;
  }
}

uint64_t sub_19E102374(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == *(_DWORD *)(a1 + 60))
  {
    *(_DWORD *)(a1 + 60) = 2 * v2;
    sub_19E101214((void **)(a1 + 8), 2 * v2, 2 * v2);
    sub_19E101320((void **)(a1 + 32), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 64));
    sub_19E101428((void **)(a1 + 40), *(int *)(a1 + 60) >> 8, *(int *)(a1 + 64) >> 8);
    int v2 = *(_DWORD *)(a1 + 64);
  }
  *(_DWORD *)(*(void *)(a1 + 40) + 20 * (v2 >> 8) + 16) = v2;
  *(void *)(*(void *)(a1 + 8) + 8 * v2) = (-255 - v2) | ((unint64_t)~v2 << 32);
  uint64_t v3 = *(int *)(a1 + 64);
  uint64_t v4 = v3 + 1;
  unint64_t v5 = 0xFFFFFFFE00000000 - (v3 << 32);
  unsigned int v6 = -(int)v3;
  do
  {
    *(void *)(*(void *)(a1 + 8) + 8 * v4) = v5 + v6;
    uint64_t v7 = *(int *)(a1 + 64);
    uint64_t v8 = v4++ - 1;
    v5 -= 0x100000000;
    --v6;
  }
  while (v8 < v7 + 253);
  *(void *)(*(void *)(a1 + 8) + 8 * ((int)v7 + 255)) = (-254 - v7) | ((unint64_t)-(int)v7 << 32);
  int v9 = *(_DWORD *)(a1 + 64);
  int v10 = v9 >> 8;
  int v11 = *(_DWORD *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = (uint64_t)v9 >> 8;
  uint64_t v14 = (int *)(v12 + 20 * v10);
  if (v11)
  {
    int v15 = (int *)(v12 + 20 * v11);
    *uint64_t v14 = *v15;
    *(_DWORD *)(v12 + 20 * (int)v13 + 4) = *(_DWORD *)(a1 + 56);
    LODWORD(v13) = *v15;
    uint64_t v14 = v15;
  }
  *(_DWORD *)(v12 + 20 * (int)v13 + 4) = v10;
  *uint64_t v14 = v10;
  *(_DWORD *)(a1 + 56) = v10;
  int v16 = *(_DWORD *)(a1 + 64) + 256;
  *(_DWORD *)(a1 + 64) = v16;
  return ((v16 >> 8) - 1);
}

void sub_19E1024D0(void *a1, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  if ((*(unsigned int (**)(void *))(*a1 + 112))(a1))
  {
    memset(&__p, 0, sizeof(__p));
    std::string::size_type v35 = 0;
    char v33 = 0;
    uint64_t v8 = a1 + 1;
    unint64_t v9 = *a2;
    unint64_t v36 = *a2;
    int v10 = sub_19E0B9170(a1 + 1, &v36, &v35);
    if (v10 != -2)
    {
      unint64_t v11 = HIDWORD(v9);
      uint64_t v31 = a3;
      std::string::size_type v32 = a4;
      while (1)
      {
        unint64_t v12 = v35;
        uint64_t v13 = v36;
        unint64_t v14 = HIDWORD(v36);
        if ((a4 & 0x80000000) != 0 || v35 <= v32)
        {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          char v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          if (size < v35)
          {
            std::string::resize(&__p, v35, 0);
            char v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          if (v16 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          p_p->__r_.__value_.__s.__data_[v12] = 0;
          uint64_t v18 = v13;
          unint64_t v19 = v12;
          if (v14)
          {
            uint64_t v18 = v13;
            unsigned int v30 = a4;
            uint64_t v20 = a1[3];
            size_t v21 = strlen((const char *)(v20 - *(int *)(a1[2] + 8 * v13)));
            if (v21 >= v12) {
              size_t v22 = v12;
            }
            else {
              size_t v22 = v21;
            }
            if (v12 >= v21) {
              unint64_t v19 = v12 - v21;
            }
            else {
              unint64_t v19 = 0;
            }
            size_t v23 = v20 - v22;
            a4 = v30;
            memcpy((char *)p_p + v19, (const void *)(v23 + (v13 >> 32)), v22);
          }
          for (; v19; --v19)
          {
            uint64_t v24 = a1[2];
            uint64_t v25 = *(int *)(v24 + 8 * v18 + 4);
            *((unsigned char *)&p_p[-1].__r_.__value_.__r.__words[2] + v19 + 7) = *(unsigned char *)(v24 + 8 * v25) ^ v18;
            uint64_t v18 = v25;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v26 = &__p;
          }
          else {
            __int16 v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          sub_19E0B5BE8(*(void *)(v31 + 24), v10, (uint64_t)v26, v12, (uint64_t)&v33);
          unint64_t v11 = HIDWORD(v9);
          uint64_t v8 = a1 + 1;
        }
        if (v14)
        {
          if (!v11)
          {
            uint64_t v13 = v13;
            uint64_t v27 = a1[2];
            v12 -= *(int *)(v27 + 8 * v13) + (uint64_t)(int)v14;
            break;
          }
          goto LABEL_3;
        }
        uint64_t v27 = a1[2];
        uint64_t v29 = *(int *)(v27 + 8 * v13);
        unsigned int v28 = *(unsigned __int8 *)(a1[5] + 2 * v29);
        if (!*(unsigned char *)(a1[5] + 2 * v29)) {
          break;
        }
LABEL_37:
        unint64_t v36 = v29 ^ v28;
        std::string::size_type v35 = v12 + 1;
        int v10 = sub_19E0B9170(v8, &v36, &v35);
        if (v10 == -2) {
          goto LABEL_3;
        }
      }
      while (v13 != v9)
      {
        unsigned int v28 = *(unsigned __int8 *)(a1[5] + 2 * v13);
        uint64_t v13 = *(int *)(v27 + 8 * v13 + 4);
        --v12;
        if (v28)
        {
          uint64_t v29 = *(int *)(v27 + 8 * v13);
          goto LABEL_37;
        }
      }
    }
LABEL_3:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19E10274C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E10276C(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = *a2;
  unint64_t v6 = 0;
  unint64_t v7 = v4;
  if (sub_19E0B9338(a1 + 8, a3, &v7, &v6, a4) == -2) {
    return -1;
  }
  else {
    return v7;
  }
}

BOOL sub_19E1027B8(uint64_t a1, void *a2)
{
  return *a2 != -1;
}

uint64_t sub_19E1027C8()
{
  return 0;
}

void sub_19E1027D0(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  v17[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, void *, const void *, size_t))(*(void *)a1 + 120))(a1, v17, a2, a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v16))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E04147C();
    }
    if (a3 >= 0x17)
    {
      uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v11 = a3 | 7;
      }
      uint64_t v12 = v11 + 1;
      int v10 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)a3;
      unint64_t v15 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v15) = a3;
      int v10 = __dst;
      if (!a3)
      {
LABEL_10:
        *((unsigned char *)v10 + a3) = 0;
        uint64_t v13 = operator new(0x28uLL);
        void *v13 = &unk_1EF0A1BD0;
        v13[1] = __dst;
        v13[2] = a2;
        void v13[3] = a3;
        v13[4] = a4;
        v17[3] = v13;
        (*(void (**)(uint64_t, uint64_t *, void *, uint64_t))(*(void *)a1 + 136))(a1, &v16, v17, a5);
        sub_19E0B5B00(v17);
        if (SHIBYTE(v15) < 0) {
          operator delete(__dst[0]);
        }
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19E1029D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_19E102A04()
{
  return &unk_1EF0A1C30;
}

uint64_t sub_19E102A10(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1C30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E102A50(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = a1[3];
  unint64_t v10 = v9 + v8;
  uint64_t v11 = a1[1];
  int v12 = *(char *)(v11 + 23);
  if (v12 < 0) {
    unint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    unint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  unint64_t v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    uint64_t v11 = a1[1];
    uint64_t v9 = a1[3];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
  uint64_t v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    uint64_t v11 = a1[1];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
LABEL_9:
  int v16 = *a2;
  if ((v12 & 0x80) != 0) {
    uint64_t v11 = *(void *)v11;
  }
  uint64_t v17 = *(void *)(a1[4] + 24);

  return sub_19E0B5BE8(v17, v16, v11, v10, a4);
}

__n128 sub_19E102B40(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A1BD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E102B70(uint64_t a1)
{
  int v2 = (char *)operator new(0x28uLL);
  *(void *)int v2 = &unk_1EF0A1BD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_19E102BC4()
{
}

uint64_t sub_19E102BDC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char v13 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v12 = result;
  if (a3)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, &v12, a2 + v9, 1);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v12);
      if (!result) {
        break;
      }
      int v11 = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)a1 + 128))(a1, &v12, &v11);
      if (result)
      {
        if (a3 >= v9 + 1) {
          uint64_t v10 = v9 + 1;
        }
        else {
          uint64_t v10 = a3;
        }
        uint64_t result = sub_19E0B5BE8(*(void *)(a4 + 24), v11, a2, v10, (uint64_t)&v13);
        ++v9;
        if (v13) {
          return result;
        }
      }
      else
      {
        ++v9;
      }
    }
    while (v9 != a3);
  }
  return result;
}

BOOL sub_19E102D30(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  int v5 = sub_19E0B9338(a1 + 8, a2, &v9, &v8, a3);
  if (v5 == -2) {
    int v6 = -1;
  }
  else {
    int v6 = v5;
  }
  *a4 = v6;
  return v6 != -1;
}

uint64_t sub_19E102D84(uint64_t a1, int *a2, unint64_t a3)
{
  uint64_t v3 = a1 + 8;
  sub_19E102DBC(a1 + 8, a2, a3 >> 3);
  sub_19E101968(v3);
  return 1;
}

void sub_19E102DBC(uint64_t a1, int *a2, uint64_t a3)
{
  sub_19E10106C(a1, 0);
  if (a3) {
    unint64_t v6 = 8 * a3 - *a2;
  }
  else {
    unint64_t v6 = 0;
  }
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 8) = (char *)a2 + *a2;
  if ((v6 & 7) != 0) {
    int v7 = (v6 >> 3) + 1;
  }
  else {
    int v7 = v6 >> 3;
  }
  *(_DWORD *)(a1 + 64) = v7;
  *(_DWORD *)(a1 + 76) = 1;
}

uint64_t sub_19E102E34(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2) {
    __assert_rtn("build", "CedarMinimalPrefixTrie.h", 78, "keys.size() == values.size()");
  }
  if (v4 == v3)
  {
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    LODWORD(v11) = 1;
    do
    {
      uint64_t v12 = (uint64_t **)(v3 + v8);
      if (*((char *)v12 + 23) < 0)
      {
        unint64_t v14 = *v12;
        char v13 = v12[1];
      }
      else
      {
        char v13 = (uint64_t *)*((unsigned __int8 *)v12 + 23);
        unint64_t v14 = (uint64_t *)v12;
      }
      uint64_t v11 = v11 & (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 152))(a1, v14, v13, *a3 + v9);
      ++v10;
      uint64_t v3 = *a2;
      v9 += 4;
      v8 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  sub_19E101968(a1 + 8);
  return v11;
}

uint64_t sub_19E102F64(uint64_t a1, void *a2)
{
  std::string __p = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    int v5 = 0;
    LODWORD(v6) = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        uint64_t v8 = (v5 - v3) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v4 - (void)v3) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v4 - (void)v3) >> 1;
        }
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_19E068D84(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = (_DWORD *)(v10 + 4 * v8);
        *uint64_t v12 = v6;
        int v7 = v12 + 1;
        while (v5 != v3)
        {
          int v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--uint64_t v12 = v13;
        }
        unint64_t v4 = v10 + 4 * v11;
        std::string __p = v12;
        unint64_t v19 = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)int v5 = v6;
        int v7 = v5 + 4;
      }
      uint64_t v18 = v7;
      unint64_t v6 = (v6 + 1);
      int v5 = (char *)v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) >= v6);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *, void **))(*(void *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19E1030E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E103104@<X0>(void *a1@<X8>)
{
  sub_19E0538DC((uint64_t)v4);
  std::ostream::write();
  std::ostream::write();
  sub_19E05EEA4(a1, (uint64_t)v5);
  v4[0] = *MEMORY[0x1E4FBA408];
  uint64_t v2 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v4[2] = v2;
  v5[0] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19F3BA690](&v7);
}

void sub_19E103290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  *(void *)(v29 + *(void *)(*MEMORY[0x1E4FBA408] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  if (a26 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BA690](&a29);
  _Unwind_Resume(a1);
}

void sub_19E1033A8(void *a1)
{
  sub_19E101020(a1);

  JUMPOUT(0x19F3BA710);
}

void *sub_19E1033E4(void *a1)
{
  *a1 = &unk_1EF0A1C50;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_19E0420B4(a1 + 2);
  return a1;
}

void *sub_19E10343C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint8_t v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t result = (void *)(*(uint64_t (**)(unint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    v9[0] = &unk_1EF0A1E10;
    v9[1] = a1;
    v9[2] = a3;
    v9[3] = v9;
    sub_19E0427A4(a1 + 2, a2, (uint64_t)v9, a4);
    return sub_19E0B43E4(v9);
  }
  return result;
}

void sub_19E10350C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E103520()
{
  return &unk_1EF0A1E70;
}

uint64_t sub_19E10352C(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1E70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E10356C(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  int v8 = sub_19E0FC1DC(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);

  return sub_19E0B5BE8(v9, v8, v6, v7, a4);
}

__n128 sub_19E1035D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A1E10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E103600(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF0A1E10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E10364C()
{
}

void sub_19E103664(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
}

BOOL sub_19E10367C(uint64_t a1, void *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

double sub_19E103690@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void *sub_19E10369C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  v6[0] = &unk_1EF0A1D90;
  v6[1] = a1;
  void v6[2] = a4;
  unsigned __int16 v6[3] = v6;
  sub_19E04268C((unint64_t *)(a1 + 16), a2, a3, (uint64_t)v6, a5);
  return sub_19E0B43E4(v6);
}

void sub_19E103724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E103738()
{
  return &unk_1EF0A1DF0;
}

uint64_t sub_19E103744(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1DF0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E103784(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  int v8 = sub_19E0FC1DC(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);

  return sub_19E0B5BE8(v9, v8, v6, v7, a4);
}

__n128 sub_19E1037F0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A1D90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E103818(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF0A1D90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E103864()
{
}

void *sub_19E10387C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0A1D10;
  v5[1] = a1;
  _OWORD v5[2] = a4;
  void v5[3] = v5;
  sub_19E042600((uint64_t *)(a1 + 16), a2, a3, (uint64_t)v5);
  return sub_19E0B43E4(v5);
}

void sub_19E103904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E0B43E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E103918()
{
  return &unk_1EF0A1D70;
}

uint64_t sub_19E103924(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A1D70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E103964(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  int v8 = sub_19E0FC1DC(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);

  return sub_19E0B5BE8(v9, v8, v6, v7, a4);
}

__n128 sub_19E1039D0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A1D10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E1039F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF0A1D10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E103A44()
{
}

uint64_t sub_19E103A5C(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  unint64_t v8 = 0;
  uint64_t v6 = sub_19E0424E8((uint64_t *)(a1 + 16), a2, a3, (uint64_t *)&v8);
  if (v6) {
    *a4 = sub_19E0FC1DC(a1, v8);
  }
  return v6;
}

uint64_t sub_19E103ABC(uint64_t *a1, void *a2, unint64_t a3)
{
  if (a3 >= 0xF)
  {
    if (*a2 == 0x2065766F6C206557 && *(void *)((char *)a2 + 7) == 0x2E61736972614D20)
    {
      sub_19E0421E0(a1 + 2, (uint64_t)a2, a3);
      return 1;
    }
  }
  else if (a3 < 4)
  {
    return 0;
  }
  uint64_t v7 = (char *)a2 + 4;
  uint64_t v8 = *(unsigned int *)a2;
  sub_19E0421E0(a1 + 2, (uint64_t)a2 + 4, v8);
  a1[3] = (uint64_t)&v7[v8];
  a1[4] = (a3 - v8 - 4) >> 2;
  return 1;
}

uint64_t sub_19E103B78(uint64_t a1, uint64_t **a2, int **a3)
{
  std::string __p = 0;
  size_t v21 = 0;
  uint64_t v22 = 0;
  int v5 = *a2;
  uint64_t v6 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (v6 - v5) != a3[1] - *a3) {
    __assert_rtn("build", "MarisaTrie.h", 61, "keys.size() == values.size()");
  }
  uint64_t v9 = sub_19E103CCC(a1, v5, v6, &__p);
  if (v9)
  {
    sub_19E0AA338((char **)(a1 + 40), 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    uint64_t v10 = *(void *)(a1 + 40);
    int64_t v11 = (char *)a2[1] - (char *)*a2;
    if (v11)
    {
      unint64_t v12 = v11 / 24;
      int v13 = *a3;
      uint64_t v14 = (uint64_t *)__p;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      do
      {
        int v16 = *v13++;
        int v15 = v16;
        uint64_t v17 = *v14++;
        *(_DWORD *)(v10 + 4 * v17) = v15;
        --v12;
      }
      while (v12);
    }
    uint64_t v18 = (*(void *)(a1 + 48) - v10) >> 2;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v18;
  }
  if (__p)
  {
    size_t v21 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_19E103CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E103CCC(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  std::string __p = 0;
  size_t v23 = 0;
  uint64_t v24 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        uint64_t v10 = (uint64_t *)*v6;
        uint64_t v9 = v6[1];
      }
      else
      {
        uint64_t v9 = *((unsigned __int8 *)v6 + 23);
        uint64_t v10 = v6;
      }
      if (v8 >= v24)
      {
        uint64_t v12 = (v8 - v7) >> 4;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60) {
          sub_19E041BEC();
        }
        uint64_t v14 = v24 - v7;
        if ((v24 - v7) >> 3 > v13) {
          unint64_t v13 = v14 >> 3;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        int v16 = (char *)sub_19E063BBC(v15);
        uint64_t v18 = &v16[16 * v12];
        *(void *)uint64_t v18 = v10;
        *((void *)v18 + 1) = v9;
        unint64_t v19 = (char *)__p;
        uint64_t v7 = v18;
        if (v8 != __p)
        {
          do
          {
            *((_OWORD *)v7 - 1) = *((_OWORD *)v8 - 1);
            v7 -= 16;
            v8 -= 16;
          }
          while (v8 != v19);
          uint64_t v8 = v19;
        }
        int64_t v11 = v18 + 16;
        std::string __p = v7;
        uint64_t v24 = &v16[16 * v17];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *(void *)uint64_t v8 = v10;
        *((void *)v8 + 1) = v9;
        int64_t v11 = v8 + 16;
      }
      size_t v23 = v11;
      v6 += 3;
      uint64_t v8 = (char *)v11;
    }
    while (v6 != a3);
  }
  sub_19E0420B8((uint64_t *)(a1 + 16), (uint64_t *)&__p, a4, *(_DWORD *)(a1 + 8));
  if (__p)
  {
    size_t v23 = __p;
    operator delete(__p);
  }
  return 1;
}

uint64_t sub_19E103E7C(uint64_t a1, uint64_t **a2)
{
  return sub_19E103CCC(a1, *a2, a2[1], 0);
}

uint64_t sub_19E103E8C@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  sub_19E0538DC((uint64_t)v14);
  sub_19E04238C(a1 + 2, (uint64_t)&v15);
  sub_19E05EEA4(__p, (uint64_t)v16);
  uint64_t v4 = a1[4];
  if (v4)
  {
    int v5 = HIBYTE(v13);
    if (v13 < 0) {
      int v5 = (int)__p[1];
    }
    *(_DWORD *)char __s = v5;
    uint64_t v6 = (const std::string::value_type *)a1[3];
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    std::string::append(a2, __s, 4uLL);
    if (v13 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if (v13 >= 0) {
      std::string::size_type v8 = HIBYTE(v13);
    }
    else {
      std::string::size_type v8 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v7, v8);
    std::string::append(a2, v6, 4 * v4);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v13;
  }
  v14[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v15 = v9;
  v16[0] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19F3BA690](&v18);
}

void sub_19E104090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void sub_19E1040D0(void *a1)
{
  sub_19E1033E4(a1);

  JUMPOUT(0x19F3BA710);
}

void *sub_19E10410C(void *a1)
{
  *a1 = &unk_1EF0A1F10;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  return sub_19E0FF618(a1);
}

uint64_t sub_19E10416C(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  BOOL v3 = a3 <= 3 || (a3 & 0xFFFFFFFFFFFFFFFCLL) == 4;
  uint64_t v4 = !v3;
  if (!v3)
  {
    uint64_t v7 = *a2;
    unint64_t v6 = a2[1];
    std::string::size_type v8 = a2 + 2;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9)
    {
      MEMORY[0x19F3BA6E0](v9, 0x1000C8052888210);
      *(void *)(a1 + 32) = 0;
    }
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    uint64_t v10 = (char *)v8 + v7;
    sub_19E0C7C38((char **)(a1 + 40), v6);
    unint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(char **)(a1 + 40);
    if (v6 <= (uint64_t)(v11 - (void)v12) >> 1)
    {
      uint64_t v20 = *(char **)(a1 + 48);
      int v16 = (char **)(a1 + 48);
      unint64_t v19 = v20;
      size_t v21 = v20 - v12;
      unint64_t v22 = (v20 - v12) >> 1;
      if (v22 < v6)
      {
        if (v19 != v12)
        {
          memmove(v12, v10, v21);
          uint64_t v12 = *v16;
        }
        size_t v18 = 2 * v6 - 2 * v22;
        if (v22 == v6) {
          goto LABEL_30;
        }
        uint64_t v15 = v12;
        size_t v23 = &v10[2 * v22];
        goto LABEL_29;
      }
      size_t v18 = 2 * v6;
      if (!v6)
      {
LABEL_30:
        *int v16 = &v12[v18];
        return v4;
      }
      uint64_t v15 = v12;
    }
    else
    {
      if (v12)
      {
        *(void *)(a1 + 48) = v12;
        operator delete(v12);
        unint64_t v11 = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
      }
      if (v11 <= v6) {
        unint64_t v13 = v6;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v14 = v13;
      }
      if (v14 < 0) {
        sub_19E041BEC();
      }
      uint64_t v15 = (char *)sub_19E063B88(v14);
      uint64_t v12 = v15;
      *(void *)(a1 + 48) = v15;
      int v16 = (char **)(a1 + 48);
      *(v16 - 1) = v15;
      v16[1] = &v15[2 * v17];
      size_t v18 = 2 * v6;
    }
    size_t v23 = v10;
LABEL_29:
    memmove(v15, v23, v18);
    goto LABEL_30;
  }
  return v4;
}

void sub_19E1042DC(uint64_t a1, uint64_t *a2, void *a3)
{
}

void sub_19E10430C(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 40);
  sub_19E0C7C38((char **)(a1 + 40), *(void *)(a1 + 16));
  uint64_t v16 = 0;
  sub_19E104440(a1, &v16);
  uint64_t v4 = *(char **)(a1 + 40);
  BOOL v3 = *(char **)(a1 + 48);
  int v5 = v3;
  while (v5 != v4)
  {
    unint64_t v6 = v5;
    int v7 = *(v5 - 2);
    v5 -= 2;
    if (v7 | *(v6 - 1)) {
      goto LABEL_6;
    }
  }
  unint64_t v6 = *(char **)(a1 + 40);
LABEL_6:
  if (v6 != v3)
  {
    BOOL v3 = v6;
    *(void *)(a1 + 48) = v6;
  }
  unint64_t v8 = (v3 - v4) >> 1;
  if (v8 < (uint64_t)(*(void *)(a1 + 56) - (void)v4) >> 1)
  {
    if (v3 == v4)
    {
      unint64_t v13 = 0;
      uint64_t v11 = 2 * v8;
    }
    else
    {
      uint64_t v9 = (char *)sub_19E063B88((v3 - v4) >> 1);
      uint64_t v10 = *(char **)(a1 + 40);
      BOOL v3 = *(char **)(a1 + 48);
      uint64_t v11 = (uint64_t)&v9[2 * v8];
      unint64_t v13 = &v9[2 * v12];
      if (v3 != v10)
      {
        uint64_t v14 = v11;
        do
        {
          __int16 v15 = *((_WORD *)v3 - 1);
          v3 -= 2;
          *(_WORD *)(v14 - 2) = v15;
          v14 -= 2;
        }
        while (v3 != v10);
        BOOL v3 = (char *)*v2;
        goto LABEL_16;
      }
    }
    uint64_t v14 = v11;
LABEL_16:
    *(void *)(a1 + 40) = v14;
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v13;
    if (v3) {
      operator delete(v3);
    }
  }
}

void sub_19E104430(void *a1)
{
}

void *sub_19E104440(uint64_t a1, void *a2)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  char v7 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = &unk_1EF0A1FD0;
  v4[1] = &v7;
  v4[2] = a1;
  void v4[3] = a2;
  v4[4] = &v6;
  unsigned __int16 v8[3] = v4;
  sub_19E0FB420(a1, a2, (uint64_t)v8);
  return sub_19E0C3820(v8);
}

void sub_19E1044F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E0C3820((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E104504()
{
  return &unk_1EF0A2030;
}

uint64_t sub_19E104510(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF0A2030)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_19E104550(uint64_t a1, char *a2, void *a3)
{
  char v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char **)(a1 + 8);
  uint64_t v8 = *(void *)(v6 + 40);
  if (*v7)
  {
    *(unsigned char *)(v8 + 2 * **(void **)(a1 + 32) + 1) = v5;
  }
  else
  {
    *(unsigned char *)(v8 + 2 * **(void **)(a1 + 24)) = v5;
    *char v7 = 1;
  }
  __n128 result = sub_19E104440(v6, a3);
  **(void **)(a1 + 32) = *a3;
  return result;
}

__n128 sub_19E1045D4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0A1FD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E104604(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF0A1FD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_19E104658()
{
}

void sub_19E104670(uint64_t a1, uint64_t **a2)
{
}

std::string *sub_19E1046A0@<X0>(void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v5 = a1[2];
  uint64_t v4 = (const std::string::value_type *)a1[3];
  uint64_t v6 = (const std::string::value_type *)a1[5];
  uint64_t v7 = a1[6];
  memset(&v18, 0, sizeof(v18));
  std::string::resize(&v18, 4uLL, 0);
  std::string::size_type v8 = 4 * v5;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v18;
  }
  else {
    uint64_t v9 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  LODWORD(v9->__r_.__value_.__l.__data_) = v8;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v18;
  }
  else {
    uint64_t v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v10, size);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = a1[5];
  uint64_t v12 = a1[6];
  memset(&v18, 0, sizeof(v18));
  std::string::resize(&v18, 4uLL, 0);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &v18;
  }
  else {
    uint64_t v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  LODWORD(v14->__r_.__value_.__l.__data_) = (unint64_t)(v12 - v13) >> 1;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v15 = &v18;
  }
  else {
    __int16 v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = v18.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v4, v8);
  return std::string::append(a2, v6, v7 - (void)v6);
}

void sub_19E1047E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E104824(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_19E104854(void *a1)
{
  sub_19E10410C(a1);

  JUMPOUT(0x19F3BA710);
}

void sub_19E104890(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 112))(a1))
  {
    if (a4)
    {
      v10[0] = 0;
      v10[1] = v10;
      _DWORD v10[2] = 0x2000000000;
      char v11 = 0;
      sub_19E04EE08();
      off_1EC3014D0();
      sub_19E04EFF4(v9, v8, a2);
      _Block_object_dispose(v10, 8);
    }
    else
    {
      LODWORD(v10[0]) = 0;
      char v12 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 128))(a1, a2, v10)) {
        sub_19E0B5BE8(*(void *)(a3 + 24), v10[0], 0, 0, (uint64_t)&v12);
      }
    }
  }
}

void sub_19E104A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19E104A20(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = off_1EC3014D0();
  uint64_t result = sub_19E0B5BE8(*(void *)(v7 + 24), v8, v6, v9, *(void *)(*(void *)(a1 + 32) + 8) + 24);
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL sub_19E104A84(uint64_t a1, uint64_t a2)
{
  return sub_19E04F090(a2);
}

uint64_t sub_19E104A8C(uint64_t a1)
{
  return sub_19E04ED9C(*(unsigned int **)(a1 + 8));
}

void sub_19E104A94(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v20[4] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v19 = v10;
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t *, const void *, size_t))(*(void *)a1 + 120))(a1, &v18, a2, a3);
  uint64_t v19 = v11;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v18))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E04147C();
    }
    if (a3 >= 0x17)
    {
      uint64_t v13 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v13 = a3 | 7;
      }
      uint64_t v14 = v13 + 1;
      char v12 = operator new(v13 + 1);
      __p[1] = (void *)a3;
      unint64_t v17 = v14 | 0x8000000000000000;
      __p[0] = v12;
    }
    else
    {
      HIBYTE(v17) = a3;
      char v12 = __p;
      if (!a3)
      {
LABEL_10:
        *((unsigned char *)v12 + a3) = 0;
        uint64_t v15 = operator new(0x28uLL);
        *uint64_t v15 = &unk_1EF09F330;
        v15[1] = __p;
        void v15[2] = a2;
        void v15[3] = a3;
        v15[4] = a4;
        v20[3] = v15;
        (*(void (**)(uint64_t, uint64_t *, void *, uint64_t))(*(void *)a1 + 136))(a1, &v18, v20, a5);
        sub_19E0B5B00(v20);
        if (SHIBYTE(v17) < 0) {
          operator delete(__p[0]);
        }
        return;
      }
    }
    memmove(v12, a2, a3);
    goto LABEL_10;
  }
}

void sub_19E104CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_19E104CD4()
{
  return &unk_1EF09F390;
}

uint64_t sub_19E104CE0(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09F390)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E104D20(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = a1[3];
  unint64_t v10 = v9 + v8;
  uint64_t v11 = a1[1];
  int v12 = *(char *)(v11 + 23);
  if (v12 < 0) {
    unint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    unint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  uint64_t v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    uint64_t v11 = a1[1];
    uint64_t v9 = a1[3];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
  uint64_t v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    uint64_t v11 = a1[1];
    LOBYTE(v12) = *(unsigned char *)(v11 + 23);
  }
LABEL_9:
  int v16 = *a2;
  if ((v12 & 0x80) != 0) {
    uint64_t v11 = *(void *)v11;
  }
  uint64_t v17 = *(void *)(a1[4] + 24);

  return sub_19E0B5BE8(v17, v16, v11, v10, a4);
}

__n128 sub_19E104E10(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF09F330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E104E40(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF09F330;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_19E104E94()
{
}

uint64_t sub_19E104EAC(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v7 = result;
    char v16 = 0;
    uint64_t v8 = 0;
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)result + 104))(result);
    uint64_t v15 = v9;
    int v13 = 0;
    while (1)
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v7 + 120))(v7, &v14, a2 + v8, 1);
      uint64_t v15 = v10;
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 112))(v7, &v14);
      if (!result) {
        break;
      }
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)v7 + 128))(v7, &v14, &v13);
      if (result)
      {
        unint64_t v11 = v8 + 1;
        if (a3 >= v8 + 1) {
          uint64_t v12 = v8 + 1;
        }
        else {
          uint64_t v12 = a3;
        }
        __n128 result = sub_19E0B5BE8(*(void *)(a4 + 24), v13, a2, v12, (uint64_t)&v16);
        if (v16) {
          return result;
        }
        ++v8;
        if (v11 >= a3) {
          return result;
        }
      }
      else if (++v8 >= a3)
      {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_19E10500C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  v11[1] = v8;
  v12[0] = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, v11, a2, a3);
  v12[1] = v9;
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v12, a4);
}

uint64_t sub_19E1050D8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  sub_19E050130(0, 0, a2, a3);
  v6[0] = &unk_1EF09FF50;
  unsigned __int16 v6[3] = v6;
  uint64_t v7 = v4;
  sub_19E06DEB4((uint64_t)v8, (uint64_t)v6);
  sub_19E06DF34(v6);
  sub_19E06DFB8((uint64_t *)(a1 + 8), &v7);
  sub_19E06E0C4(&v7, 0);
  sub_19E06DF34(v8);
  return 1;
}

void *sub_19E1051A4()
{
  return &unk_1EF09FFB0;
}

uint64_t sub_19E1051B0(uint64_t a1, uint64_t a2)
{
  if (sub_19E055AE4(a2, (uint64_t)&unk_1EF09FFB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void sub_19E1051F0(uint64_t a1, void ***a2)
{
}

void sub_19E105200(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF09FF50;
}

void *sub_19E105220()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF09FF50;
  return result;
}

void sub_19E105258()
{
}

BOOL sub_19E105270(void *a1, uint64_t **a2, uint64_t a3)
{
  (*(void (**)(void *, void, void))(*a1 + 72))(a1, 0, 0);
  if (!a1[1]) {
    __assert_rtn("build", "StaticBurstTrie.h", 96, "m_trie");
  }
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v9 = *(_DWORD **)a3;
  uint64_t v8 = *(_DWORD **)(a3 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v7 - *a2) != ((uint64_t)v8 - *(void *)a3) >> 2) {
    __assert_rtn("build", "StaticBurstTrie.h", 97, "keys.size() == values.size()");
  }
  int v45 = a1;
  if (v9 == v8)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      if ((unint64_t)v11 >= v12)
      {
        uint64_t v14 = (v11 - v10) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v12 - (void)v10) >> 1 > v15) {
          unint64_t v15 = (uint64_t)(v12 - (void)v10) >> 1;
        }
        if (v12 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)sub_19E068D84(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = (char *)(v16 + 4 * v14);
        *(_DWORD *)uint64_t v18 = *v9;
        int v13 = v18 + 4;
        while (v11 != v10)
        {
          int v19 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        unint64_t v12 = v16 + 4 * v17;
        if (v10) {
          operator delete(v10);
        }
        uint64_t v10 = v18;
      }
      else
      {
        *(_DWORD *)unint64_t v11 = *v9;
        int v13 = v11 + 4;
      }
      ++v9;
      unint64_t v11 = v13;
    }
    while (v9 != v8);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
  }
  std::string __p = 0;
  uint64_t v47 = 0;
  unint64_t v48 = 0;
  if (v6 == v7)
  {
    uint64_t v20 = 0;
    uint64_t v42 = 0;
    size_t v21 = 0;
  }
  else
  {
    uint64_t v20 = 0;
    size_t v21 = 0;
    unint64_t v22 = 0;
    do
    {
      size_t v23 = v6;
      if (*((char *)v6 + 23) < 0) {
        size_t v23 = (uint64_t *)*v6;
      }
      if ((unint64_t)v21 >= v22)
      {
        uint64_t v24 = (v21 - v20) >> 3;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v22 - (void)v20) >> 2 > v25) {
          unint64_t v25 = (uint64_t)(v22 - (void)v20) >> 2;
        }
        if (v22 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          unint64_t v26 = (unint64_t)sub_19E060B48(v26);
        }
        else {
          uint64_t v27 = 0;
        }
        unsigned int v28 = (char *)(v26 + 8 * v24);
        *(void *)unsigned int v28 = v23;
        uint64_t v29 = v28 + 8;
        while (v21 != v20)
        {
          uint64_t v30 = *((void *)v21 - 1);
          v21 -= 8;
          *((void *)v28 - 1) = v30;
          v28 -= 8;
        }
        unint64_t v22 = v26 + 8 * v27;
        if (v20) {
          operator delete(v20);
        }
        uint64_t v20 = v28;
        size_t v21 = v29;
      }
      else
      {
        *(void *)size_t v21 = v23;
        v21 += 8;
      }
      if (*((char *)v6 + 23) < 0) {
        uint64_t v31 = v6[1];
      }
      else {
        uint64_t v31 = *((unsigned __int8 *)v6 + 23);
      }
      std::string::size_type v32 = v47;
      if (v47 >= v48)
      {
        int v34 = __p;
        uint64_t v35 = (v47 - __p) >> 3;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61) {
          sub_19E041BEC();
        }
        uint64_t v37 = v48 - __p;
        if ((v48 - __p) >> 2 > v36) {
          unint64_t v36 = v37 >> 2;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          int v39 = (char *)sub_19E049FB0((uint64_t)&v48, v38);
          int v34 = __p;
          std::string::size_type v32 = v47;
        }
        else
        {
          int v39 = 0;
        }
        signed int v40 = &v39[8 * v35];
        *(void *)signed int v40 = v31;
        char v33 = v40 + 8;
        while (v32 != v34)
        {
          uint64_t v41 = *((void *)v32 - 1);
          v32 -= 8;
          *((void *)v40 - 1) = v41;
          v40 -= 8;
        }
        std::string __p = v40;
        unint64_t v48 = &v39[8 * v38];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *(void *)uint64_t v47 = v31;
        char v33 = v47 + 8;
      }
      uint64_t v47 = v33;
      v6 += 3;
    }
    while (v6 != v7);
    uint64_t v42 = (uint64_t *)__p;
  }
  int v43 = sub_19E058D94(v45[1], (v21 - v20) >> 3, (unsigned __int8 **)v20, v42, v10);
  if (__p) {
    operator delete(__p);
  }
  if (v20) {
    operator delete(v20);
  }
  if (v10) {
    operator delete(v10);
  }
  return v43 == 0;
}

void sub_19E105628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    if (!v14)
    {
LABEL_3:
      if (!v13) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  operator delete(v14);
  if (!v13) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v13);
  goto LABEL_5;
}

BOOL sub_19E105688(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = a1;
  (*(void (**)(uint64_t, void, void))(*(void *)a1 + 72))(a1, 0, 0);
  if (!*(void *)(v3 + 8)) {
    __assert_rtn("build", "StaticBurstTrie.h", 78, "m_trie");
  }
  if (a2[1] == *a2)
  {
    uint64_t v4 = 0;
    uint64_t v17 = 0;
    int v39 = 0;
    uint64_t v18 = 0;
    std::string __p = 0;
    int v45 = 0;
  }
  else
  {
    uint64_t v42 = v3;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    LODWORD(v7) = 1;
    do
    {
      if ((unint64_t)v5 >= v6)
      {
        uint64_t v9 = (v5 - v4) >> 2;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v6 - (void)v4) >> 1 > v10) {
          unint64_t v10 = (uint64_t)(v6 - (void)v4) >> 1;
        }
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          unint64_t v11 = (unint64_t)sub_19E068D84(v11);
        }
        else {
          uint64_t v12 = 0;
        }
        int v13 = (char *)(v11 + 4 * v9);
        *(_DWORD *)int v13 = v7;
        uint64_t v8 = v13 + 4;
        while (v5 != v4)
        {
          int v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        unint64_t v6 = v11 + 4 * v12;
        if (v4) {
          operator delete(v4);
        }
        uint64_t v4 = v13;
      }
      else
      {
        *(_DWORD *)uint64_t v5 = v7;
        uint64_t v8 = v5 + 4;
      }
      unint64_t v7 = (v7 + 1);
      unint64_t v16 = *a2;
      unint64_t v15 = a2[1];
      uint64_t v5 = v8;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v15 - *a2) >= v7);
    std::string __p = 0;
    unsigned int v44 = 0;
    int v45 = 0;
    if (v16 == v15)
    {
      uint64_t v17 = 0;
      int v39 = 0;
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      do
      {
        uint64_t v20 = v16;
        if (*((char *)v16 + 23) < 0) {
          uint64_t v20 = (uint64_t *)*v16;
        }
        if ((unint64_t)v18 >= v19)
        {
          uint64_t v21 = (v18 - v17) >> 3;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61) {
            sub_19E041BEC();
          }
          if ((uint64_t)(v19 - (void)v17) >> 2 > v22) {
            unint64_t v22 = (uint64_t)(v19 - (void)v17) >> 2;
          }
          if (v19 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23) {
            unint64_t v23 = (unint64_t)sub_19E060B48(v23);
          }
          else {
            uint64_t v24 = 0;
          }
          unint64_t v25 = (char *)(v23 + 8 * v21);
          *(void *)unint64_t v25 = v20;
          unint64_t v26 = v25 + 8;
          while (v18 != v17)
          {
            uint64_t v27 = *((void *)v18 - 1);
            v18 -= 8;
            *((void *)v25 - 1) = v27;
            v25 -= 8;
          }
          unint64_t v19 = v23 + 8 * v24;
          if (v17) {
            operator delete(v17);
          }
          uint64_t v17 = v25;
          uint64_t v18 = v26;
        }
        else
        {
          *(void *)uint64_t v18 = v20;
          v18 += 8;
        }
        if (*((char *)v16 + 23) < 0) {
          uint64_t v28 = v16[1];
        }
        else {
          uint64_t v28 = *((unsigned __int8 *)v16 + 23);
        }
        uint64_t v29 = v44;
        if (v44 >= v45)
        {
          uint64_t v31 = __p;
          uint64_t v32 = (v44 - __p) >> 3;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61) {
            sub_19E041BEC();
          }
          uint64_t v34 = v45 - __p;
          if ((v45 - __p) >> 2 > v33) {
            unint64_t v33 = v34 >> 2;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            unint64_t v36 = (char *)sub_19E049FB0((uint64_t)&v45, v35);
            uint64_t v31 = __p;
            uint64_t v29 = v44;
          }
          else
          {
            unint64_t v36 = 0;
          }
          uint64_t v37 = &v36[8 * v32];
          *(void *)uint64_t v37 = v28;
          uint64_t v30 = v37 + 8;
          while (v29 != v31)
          {
            uint64_t v38 = *((void *)v29 - 1);
            v29 -= 8;
            *((void *)v37 - 1) = v38;
            v37 -= 8;
          }
          std::string __p = v37;
          int v45 = &v36[8 * v35];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *(void *)unsigned int v44 = v28;
          uint64_t v30 = v44 + 8;
        }
        unsigned int v44 = v30;
        v16 += 3;
      }
      while (v16 != v15);
      int v39 = (uint64_t *)__p;
    }
    uint64_t v3 = v42;
  }
  int v40 = sub_19E058D94(*(void *)(v3 + 8), (v18 - v17) >> 3, (unsigned __int8 **)v17, v39, v4);
  if (__p) {
    operator delete(__p);
  }
  if (v17) {
    operator delete(v17);
  }
  if (v4) {
    operator delete(v4);
  }
  return v40 == 0;
}

void sub_19E105A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    if (!v14)
    {
LABEL_3:
      if (!v13) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  operator delete(v14);
  if (!v13) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v13);
  goto LABEL_5;
}

void sub_19E105A6C()
{
  if (!v0) {
    JUMPOUT(0x19E105A48);
  }
  JUMPOUT(0x19E105A40);
}

void *sub_19E105A7C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t __len = 0;
  uint64_t v3 = (void *)sub_19E050210(*(void **)(a1 + 8), &__len);
  return sub_19E057A94(a2, v3, __len);
}

BOOL sub_19E105AC4(uint64_t *a1, unint64_t a2, unsigned __int8 **a3, uint64_t *a4, void *a5)
{
  (*(void (**)(uint64_t *, void, void))(*a1 + 72))(a1, 0, 0);
  if (!a1[1]) {
    __assert_rtn("build", "StaticBurstTrie.h", 64, "m_trie");
  }
  uint64_t v24 = a3;
  unint64_t v25 = a4;
  std::string __p = 0;
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  if (a5)
  {
    p_p = &__p;
    if (a2)
    {
      uint64_t v10 = 8 * a2;
      do
      {
        int v29 = *a5;
        sub_19E06F008((uint64_t *)&p_p, &v29);
        ++a5;
        v10 -= 8;
      }
      while (v10);
    }
  }
  else if (a2)
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    int v13 = 0;
    LODWORD(v14) = 1;
    do
    {
      if ((unint64_t)v13 >= v12)
      {
        uint64_t v16 = (v13 - v11) >> 2;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          sub_19E041BEC();
        }
        if ((uint64_t)(v12 - (void)v11) >> 1 > v17) {
          unint64_t v17 = (uint64_t)(v12 - (void)v11) >> 1;
        }
        if (v12 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)sub_19E068D84(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = (_DWORD *)(v18 + 4 * v16);
        *uint64_t v20 = v14;
        unint64_t v15 = v20 + 1;
        while (v13 != v11)
        {
          int v21 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *--uint64_t v20 = v21;
        }
        unint64_t v12 = v18 + 4 * v19;
        std::string __p = v20;
        unint64_t v28 = v12;
        if (v11) {
          operator delete(v11);
        }
        unint64_t v11 = (char *)v20;
      }
      else
      {
        *(_DWORD *)int v13 = v14;
        unint64_t v15 = v13 + 4;
      }
      uint64_t v27 = v15;
      unint64_t v14 = (v14 + 1);
      int v13 = (char *)v15;
    }
    while (v14 <= a2);
  }
  int v22 = sub_19E058D94(a1[1], a2, v24, v25, __p);
  if (__p)
  {
    uint64_t v27 = __p;
    operator delete(__p);
  }
  return v22 == 0;
}

void sub_19E105CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E105CD0(void *a1)
{
  *a1 = &unk_1EF09F270;
  int v1 = a1 + 2;
  sub_19E06E0C4(a1 + 1, 0);
  sub_19E06DF34(v1);

  JUMPOUT(0x19F3BA710);
}

void *sub_19E105D48(void *a1)
{
  *a1 = &unk_1EF09F270;
  uint64_t v2 = a1 + 2;
  sub_19E06E0C4(a1 + 1, 0);
  sub_19E06DF34(v2);
  return a1;
}

uint64_t sub_19E105DA0(_DWORD *a1)
{
  uint64_t v2 = a1[3588];
  if (v2 != -1) {
    ((void (*)(char *, _DWORD *))off_1EF0A0248[v2])(&v4, a1);
  }
  a1[3588] = -1;
  bzero(a1, 0x3810uLL);
  uint64_t result = sub_19E03A18C((uint64_t)a1);
  a1[3588] = 0;
  return result;
}

__n128 sub_19E105E10(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void sub_19E105E1C(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *sub_19E105E28(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = *(void *)a3;
  uint64_t v3 = a2 + 1;
  if (*(char *)(a3 + 31) < 0) {
    return sub_19E03FA9C(v3, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  long long v4 = *(_OWORD *)(a3 + 8);
  v3[2] = *(void *)(a3 + 24);
  *(_OWORD *)uint64_t v3 = v4;
  return result;
}

void sub_19E105E60(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_19E105E6C(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_19E105E78(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

__n128 sub_19E105E84(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void sub_19E105E90(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *sub_19E105E9C(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = *(void *)a3;
  uint64_t v3 = a2 + 1;
  if (*(char *)(a3 + 31) < 0) {
    return sub_19E03FA9C(v3, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  long long v4 = *(_OWORD *)(a3 + 8);
  v3[2] = *(void *)(a3 + 24);
  *(_OWORD *)uint64_t v3 = v4;
  return result;
}

void sub_19E105ED4(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_19E105EE0(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_19E105EEC(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_19E105EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  *(unsigned char *)a2 = *(unsigned char *)a3;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  do
  {
    *(unsigned char *)(a2 + 24 + v3) = *(unsigned char *)(a3 + 24 + v3);
    ++v3;
  }
  while (v3 != 4);
}

uint64_t sub_19E105F34(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 32) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EF0A00A8[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 32) = v3;
  }
  return a1;
}

void sub_19E105F98(_Unwind_Exception *a1)
{
  sub_19E07FA6C(v1);
  _Unwind_Resume(a1);
}

__n128 sub_19E105FAC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void sub_19E105FB8(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *sub_19E105FC4(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = *(void *)a3;
  uint64_t v3 = a2 + 1;
  if (*(char *)(a3 + 31) < 0) {
    return sub_19E03FA9C(v3, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  long long v4 = *(_OWORD *)(a3 + 8);
  v3[2] = *(void *)(a3 + 24);
  *(_OWORD *)uint64_t v3 = v4;
  return result;
}

void sub_19E105FFC(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_19E106008(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_19E106014(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

__n128 sub_19E106020(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void sub_19E10602C(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *sub_19E106038(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = *(void *)a3;
  uint64_t v3 = a2 + 1;
  if (*(char *)(a3 + 31) < 0) {
    return sub_19E03FA9C(v3, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  long long v4 = *(_OWORD *)(a3 + 8);
  v3[2] = *(void *)(a3 + 24);
  *(_OWORD *)uint64_t v3 = v4;
  return result;
}

void sub_19E106070(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_19E10607C(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_19E106088(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_19E106094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  *(unsigned char *)a2 = *(unsigned char *)a3;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  do
  {
    *(unsigned char *)(a2 + 24 + v3) = *(unsigned char *)(a3 + 24 + v3);
    ++v3;
  }
  while (v3 != 4);
}

uint64_t sub_19E1060D0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 32) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EF0A0110[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 32) = v3;
  }
  return a1;
}

void sub_19E106134(_Unwind_Exception *a1)
{
  sub_19E07FA6C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E106148(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    uint64_t v4 = *(unsigned int *)(a2 + 32);
    if (v3 == -1)
    {
      if (v4 == -1) {
        return a1;
      }
    }
    else if (v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1EF0A0040[v3])(&v7, a1, a2);
      *(_DWORD *)(a1 + 32) = -1;
      return a1;
    }
    uint64_t v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1EF0A0178[v4])(&v6, a1, a2);
  }
  return a1;
}

__n128 sub_19E1061E4(__n128 **a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[2].n128_u32[0];
  if (v5 != -1)
  {
    if (v5 == 12)
    {
      __n128 result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1EF0A0040[v5])(&v7, v4);
  }
  v4[2].n128_u32[0] = -1;
  __n128 result = *a3;
  *uint64_t v4 = *a3;
  v4[2].n128_u32[0] = 12;
  return result;
}

uint64_t sub_19E106264(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 11)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 11;
  return result;
}

std::string *sub_19E1062DC(uint64_t *a1, uint64_t a2, std::string *__str)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 32);
  if (v5 != -1)
  {
    if (v5 == 10)
    {
      *(void *)a2 = __str->__r_.__value_.__r.__words[0];
      return std::string::operator=((std::string *)(a2 + 8), (const std::string *)&__str->__r_.__value_.__r.__words[1]);
    }
    ((void (*)(char *, uint64_t))off_1EF0A0040[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(void *)uint64_t v4 = __str->__r_.__value_.__r.__words[0];
  __n128 result = (std::string *)(v4 + 8);
  if (__str[1].__r_.__value_.__s.__data_[7] < 0)
  {
    __n128 result = (std::string *)sub_19E03FA9C(result, (void *)__str->__r_.__value_.__l.__size_, __str->__r_.__value_.__r.__words[2]);
  }
  else
  {
    long long v7 = *(_OWORD *)&__str->__r_.__value_.__r.__words[1];
    *(void *)(v4 + 24) = __str[1].__r_.__value_.__l.__data_;
    *(_OWORD *)&result->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(v4 + 32) = 10;
  return result;
}

uint64_t sub_19E1063AC(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 9)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 9;
  return result;
}

uint64_t sub_19E106424(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 8)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 8;
  return result;
}

uint64_t sub_19E10649C(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 7)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 7;
  return result;
}

__n128 sub_19E106514(__n128 **a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[2].n128_u32[0];
  if (v5 != -1)
  {
    if (v5 == 6)
    {
      __n128 result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1EF0A0040[v5])(&v7, v4);
  }
  v4[2].n128_u32[0] = -1;
  __n128 result = *a3;
  *uint64_t v4 = *a3;
  v4[2].n128_u32[0] = 6;
  return result;
}

uint64_t sub_19E106594(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 5;
  return result;
}

std::string *sub_19E10660C(uint64_t *a1, uint64_t a2, std::string *__str)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 32);
  if (v5 != -1)
  {
    if (v5 == 4)
    {
      *(void *)a2 = __str->__r_.__value_.__r.__words[0];
      return std::string::operator=((std::string *)(a2 + 8), (const std::string *)&__str->__r_.__value_.__r.__words[1]);
    }
    ((void (*)(char *, uint64_t))off_1EF0A0040[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(void *)uint64_t v4 = __str->__r_.__value_.__r.__words[0];
  __n128 result = (std::string *)(v4 + 8);
  if (__str[1].__r_.__value_.__s.__data_[7] < 0)
  {
    __n128 result = (std::string *)sub_19E03FA9C(result, (void *)__str->__r_.__value_.__l.__size_, __str->__r_.__value_.__r.__words[2]);
  }
  else
  {
    long long v7 = *(_OWORD *)&__str->__r_.__value_.__r.__words[1];
    *(void *)(v4 + 24) = __str[1].__r_.__value_.__l.__data_;
    *(_OWORD *)&result->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(v4 + 32) = 4;
  return result;
}

uint64_t sub_19E1066DC(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 3;
  return result;
}

uint64_t sub_19E106754(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 2;
  return result;
}

uint64_t sub_19E1067CC(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

uint64_t sub_19E106844(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v8, v4);
LABEL_8:
    uint64_t v7 = 0;
    *(_DWORD *)(v4 + 32) = -1;
    *(unsigned char *)uint64_t v4 = *(unsigned char *)a3;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a3 + 8);
    *(void *)(v4 + 16) = *(void *)(a3 + 16);
    do
    {
      *(unsigned char *)(v4 + 24 + v7) = *(unsigned char *)(a3 + 24 + v7);
      ++v7;
    }
    while (v7 != 4);
    *(_DWORD *)(v4 + 32) = 0;
    return result;
  }
  *(unsigned char *)a2 = *(unsigned char *)a3;
  if (a2 != a3)
  {
    uint64_t v6 = 0;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    do
    {
      *(unsigned char *)(a2 + 24 + v6) = *(unsigned char *)(a3 + 24 + v6);
      ++v6;
    }
    while (v6 != 4);
  }
  return result;
}

uint64_t sub_19E106924(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    uint64_t v4 = *(unsigned int *)(a2 + 32);
    if (v3 == -1)
    {
      if (v4 == -1) {
        return a1;
      }
    }
    else if (v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1EF0A0040[v3])(&v7, a1, a2);
      *(_DWORD *)(a1 + 32) = -1;
      return a1;
    }
    uint64_t v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1EF0A01E0[v4])(&v6, a1, a2);
  }
  return a1;
}

__n128 sub_19E1069C0(__n128 **a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[2].n128_u32[0];
  if (v5 != -1)
  {
    if (v5 == 12)
    {
      __n128 result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1EF0A0040[v5])(&v7, v4);
  }
  v4[2].n128_u32[0] = -1;
  __n128 result = *a3;
  *uint64_t v4 = *a3;
  v4[2].n128_u32[0] = 12;
  return result;
}

uint64_t sub_19E106A40(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 11)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 11;
  return result;
}

std::string *sub_19E106AB8(uint64_t *a1, uint64_t a2, std::string *__str)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 32);
  if (v5 != -1)
  {
    if (v5 == 10)
    {
      *(void *)a2 = __str->__r_.__value_.__r.__words[0];
      return std::string::operator=((std::string *)(a2 + 8), (const std::string *)&__str->__r_.__value_.__r.__words[1]);
    }
    ((void (*)(char *, uint64_t))off_1EF0A0040[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(void *)uint64_t v4 = __str->__r_.__value_.__r.__words[0];
  __n128 result = (std::string *)(v4 + 8);
  if (__str[1].__r_.__value_.__s.__data_[7] < 0)
  {
    __n128 result = (std::string *)sub_19E03FA9C(result, (void *)__str->__r_.__value_.__l.__size_, __str->__r_.__value_.__r.__words[2]);
  }
  else
  {
    long long v7 = *(_OWORD *)&__str->__r_.__value_.__r.__words[1];
    *(void *)(v4 + 24) = __str[1].__r_.__value_.__l.__data_;
    *(_OWORD *)&result->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(v4 + 32) = 10;
  return result;
}

uint64_t sub_19E106B88(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 9)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 9;
  return result;
}

uint64_t sub_19E106C00(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 8)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 8;
  return result;
}

uint64_t sub_19E106C78(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 7)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 7;
  return result;
}

__n128 sub_19E106CF0(__n128 **a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[2].n128_u32[0];
  if (v5 != -1)
  {
    if (v5 == 6)
    {
      __n128 result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1EF0A0040[v5])(&v7, v4);
  }
  v4[2].n128_u32[0] = -1;
  __n128 result = *a3;
  *uint64_t v4 = *a3;
  v4[2].n128_u32[0] = 6;
  return result;
}

uint64_t sub_19E106D70(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 5;
  return result;
}

std::string *sub_19E106DE8(uint64_t *a1, uint64_t a2, std::string *__str)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 32);
  if (v5 != -1)
  {
    if (v5 == 4)
    {
      *(void *)a2 = __str->__r_.__value_.__r.__words[0];
      return std::string::operator=((std::string *)(a2 + 8), (const std::string *)&__str->__r_.__value_.__r.__words[1]);
    }
    ((void (*)(char *, uint64_t))off_1EF0A0040[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(void *)uint64_t v4 = __str->__r_.__value_.__r.__words[0];
  __n128 result = (std::string *)(v4 + 8);
  if (__str[1].__r_.__value_.__s.__data_[7] < 0)
  {
    __n128 result = (std::string *)sub_19E03FA9C(result, (void *)__str->__r_.__value_.__l.__size_, __str->__r_.__value_.__r.__words[2]);
  }
  else
  {
    long long v7 = *(_OWORD *)&__str->__r_.__value_.__r.__words[1];
    *(void *)(v4 + 24) = __str[1].__r_.__value_.__l.__data_;
    *(_OWORD *)&result->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(v4 + 32) = 4;
  return result;
}

uint64_t sub_19E106EB8(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 3;
  return result;
}

uint64_t sub_19E106F30(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 2;
  return result;
}

uint64_t sub_19E106FA8(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

uint64_t sub_19E107020(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0A0040[v5])(&v8, v4);
LABEL_8:
    uint64_t v7 = 0;
    *(_DWORD *)(v4 + 32) = -1;
    *(unsigned char *)uint64_t v4 = *(unsigned char *)a3;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a3 + 8);
    *(void *)(v4 + 16) = *(void *)(a3 + 16);
    do
    {
      *(unsigned char *)(v4 + 24 + v7) = *(unsigned char *)(a3 + 24 + v7);
      ++v7;
    }
    while (v7 != 4);
    *(_DWORD *)(v4 + 32) = 0;
    return result;
  }
  *(unsigned char *)a2 = *(unsigned char *)a3;
  if (a2 != a3)
  {
    uint64_t v6 = 0;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    do
    {
      *(unsigned char *)(a2 + 24 + v6) = *(unsigned char *)(a3 + 24 + v6);
      ++v6;
    }
    while (v6 != 4);
  }
  return result;
}

void sub_19E107140(uint64_t **a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  sub_19E0FD62C(a2);
  sub_19E0FD694((uint64_t)v5, (unsigned __int16 *)v2);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(char **)(v2 + 8);
  }
  else {
    uint64_t v3 = (char *)(v2 + 16);
  }
  sub_19E0413C8(&__p, v3);
  operator new();
}

void sub_19E1077CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1) {
      free(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E107954(uint64_t **a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  sub_19E0FD62C(a2);
  sub_19E0FD694((uint64_t)v5, (unsigned __int16 *)v2);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(char **)(v2 + 8);
  }
  else {
    uint64_t v3 = (char *)(v2 + 16);
  }
  sub_19E0413C8(&__p, v3);
  operator new();
}

void sub_19E107FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1) {
      free(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E10816C(uint64_t **a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  sub_19E0FD62C(a2);
  sub_19E0FD694((uint64_t)v5, (unsigned __int16 *)v2);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(char **)(v2 + 8);
  }
  else {
    uint64_t v3 = (char *)(v2 + 16);
  }
  sub_19E0413C8(&__p, v3);
  operator new();
}

void sub_19E1087FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1) {
      free(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E108984(uint64_t **a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  sub_19E0FD62C(a2);
  sub_19E0FD694((uint64_t)v5, (unsigned __int16 *)v2);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(char **)(v2 + 8);
  }
  else {
    uint64_t v3 = (char *)(v2 + 16);
  }
  sub_19E0413C8(&__p, v3);
  operator new();
}

void sub_19E109020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1) {
      free(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1091A8(uint64_t **a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  sub_19E0FD62C(a2);
  sub_19E0FD694((uint64_t)v5, (unsigned __int16 *)v2);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(char **)(v2 + 8);
  }
  else {
    uint64_t v3 = (char *)(v2 + 16);
  }
  sub_19E0413C8(&__p, v3);
  operator new();
}

void sub_19E109850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1) {
      free(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1099D8(uint64_t **a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  sub_19E0FD62C(a2);
  sub_19E0FD694((uint64_t)v5, (unsigned __int16 *)v2);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(char **)(v2 + 8);
  }
  else {
    uint64_t v3 = (char *)(v2 + 16);
  }
  sub_19E0413C8(&__p, v3);
  operator new();
}

void sub_19E10A070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1) {
      free(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E10A1F8(uint64_t **a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  sub_19E0FD62C(a2);
  sub_19E0FD694((uint64_t)v5, (unsigned __int16 *)v2);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(char **)(v2 + 8);
  }
  else {
    uint64_t v3 = (char *)(v2 + 16);
  }
  sub_19E0413C8(&__p, v3);
  operator new();
}

void sub_19E10A884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1) {
      free(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E10AA0C(uint64_t **a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  sub_19E0FD62C(a2);
  sub_19E0FD694((uint64_t)v5, (unsigned __int16 *)v2);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(char **)(v2 + 8);
  }
  else {
    uint64_t v3 = (char *)(v2 + 16);
  }
  sub_19E0413C8(&__p, v3);
  operator new();
}

void sub_19E10B09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1) {
      free(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E10B224(uint64_t **a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  sub_19E0FD62C(a2);
  sub_19E0FD694((uint64_t)v5, (unsigned __int16 *)v2);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(char **)(v2 + 8);
  }
  else {
    uint64_t v3 = (char *)(v2 + 16);
  }
  sub_19E0413C8(&__p, v3);
  operator new();
}

void sub_19E10B8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1) {
      free(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E10BA3C(uint64_t **a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  sub_19E0FD62C(a2);
  sub_19E0FD694((uint64_t)v5, (unsigned __int16 *)v2);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(char **)(v2 + 8);
  }
  else {
    uint64_t v3 = (char *)(v2 + 16);
  }
  sub_19E0413C8(&__p, v3);
  operator new();
}

void sub_19E10C0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1) {
      free(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E10C260(uint64_t **a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  sub_19E0FD62C(a2);
  sub_19E0FD694((uint64_t)v5, (unsigned __int16 *)v2);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(char **)(v2 + 8);
  }
  else {
    uint64_t v3 = (char *)(v2 + 16);
  }
  sub_19E0413C8(&__p, v3);
  operator new();
}

void sub_19E10C8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1) {
      free(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E10CA80(uint64_t **a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  sub_19E0FD62C(a2);
  sub_19E0FD694((uint64_t)v5, (unsigned __int16 *)v2);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(char **)(v2 + 8);
  }
  else {
    uint64_t v3 = (char *)(v2 + 16);
  }
  sub_19E0413C8(&__p, v3);
  operator new();
}

void sub_19E10D128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1) {
      free(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E10D2B0(uint64_t **a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  sub_19E03A4E4(a2);
  LODWORD(__p) = 0x100000;
  WORD2(__p) = 0;
  BYTE6(__p) = 1;
  uint64_t v9 = 0;
  sub_19E03F6F8(&__p, (uint64_t)".dat", 0, 4u);
  BOOL v3 = sub_19E03FB3C((unsigned __int16 *)v2, (unsigned __int16 *)&__p);
  if (v9) {
    BOOL v4 = BYTE6(__p) == 1;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    free(v9);
  }
  if (v3)
  {
    sub_19E03FB9C(v6, (unsigned __int16 *)v2, 0, (unsigned __int16)(*(_WORD *)v2 - 3));
    sub_19E039CC0((unsigned __int16 *)v6, "idx", 0xFFFFuLL);
  }
  else
  {
    LODWORD(v6[0]) = 0x100000;
    WORD2(v6[0]) = 0;
    BYTE6(v6[0]) = 0;
    v6[1] = 0;
    char v7 = 0;
  }
  if (*(void *)(v2 + 8)) {
    uint64_t v5 = *(char **)(v2 + 8);
  }
  else {
    uint64_t v5 = (char *)(v2 + 16);
  }
  sub_19E0413C8(&__p, v5);
  operator new();
}

void sub_19E10DC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t buf, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16)
  {
    if (a15 == 1) {
      free(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E10DEE0()
{
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9710](data, *(void *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74D0](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1F40D7538](bundleID);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1F40D78B0](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return (CFStringRef)MEMORY[0x1F40D78E0](allocator, formatter, date);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1F40D7A80](err);
}

CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7A90](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x1F40D7A98](allocator, domain, code, userInfo);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(CFAllocatorRef allocator, CFLocaleIdentifier localeID)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7C00](allocator, localeID);
}

CFLocaleRef CFLocaleCreateCopy(CFAllocatorRef allocator, CFLocaleRef locale)
{
  return (CFLocaleRef)MEMORY[0x1F40D7C08](allocator, locale);
}

CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(CFAllocatorRef allocator, CFDictionaryRef dictionary)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7C10](allocator, dictionary);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7C20](locale);
}

CFTypeID CFLocaleGetTypeID(void)
{
  return MEMORY[0x1F40D7C40]();
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x1F40D7C48](locale, key);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F58](allocator, stream, streamLength, options, format, error);
}

CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return MEMORY[0x1F40D7F70](propertyList, stream, format, options, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1F40D7FC0](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF8](stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1F40D8460](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1F40D85E0]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)
{
  return MEMORY[0x1F40D86C0](string, range, transform, reverse);
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1F40D8740](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1F40D8770](url);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8790](anURL);
}

CFStringRef CFURLCopyPathExtension(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1F40D8798](url);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D87F8](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x1F40D8808](allocator, url);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D8848](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8908](url, resolveAgainstBase, buffer, maxBufLen);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1F40D8928]();
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x1F40D8948](url, error);
}

Boolean CFURLSetResourcePropertyForKey(CFURLRef url, CFStringRef key, CFTypeRef propertyValue, CFErrorRef *error)
{
  return MEMORY[0x1F40D8958](url, key, propertyValue, error);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
}

CFWriteStreamRef CFWriteStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFWriteStreamRef)MEMORY[0x1F40D8AB0](alloc, fileURL);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1F40D8AD0](stream);
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x1F412A878]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _CFURLReplaceObject()
{
  return MEMORY[0x1F40D93A0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x1F417E360](retstr, this);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

const std::__fs::filesystem::directory_entry *__cdecl std::__fs::filesystem::directory_iterator::__dereference(const std::__fs::filesystem::directory_iterator *this)
{
  return (const std::__fs::filesystem::directory_entry *)MEMORY[0x1F417E3B0](this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3C0](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3D0](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3D8](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1F417E4D0](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1F417E628](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

std::strstreambuf *__cdecl std::strstreambuf::strstreambuf(std::strstreambuf *this, std::streamsize __alsize)
{
  return (std::strstreambuf *)MEMORY[0x1F417E6E8](this, __alsize);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1F417E788]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1F417E7C8]();
}

{
  return MEMORY[0x1F417E7D0]();
}

{
  return MEMORY[0x1F417E7E0]();
}

{
  return MEMORY[0x1F417E7E8]();
}

{
  return MEMORY[0x1F417E7F0]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1F417E840]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8C0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1F417E9E0]();
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x1F417E9F0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::__increment(std::__fs::filesystem::directory_iterator *this, std::error_code *__ec)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x1F417EB70](this, __ec);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::directory_iterator(std::__fs::filesystem::directory_iterator *this, const std::__fs::filesystem::path *a2, std::error_code *a3, std::__fs::filesystem::directory_options a4)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x1F417EB78](this, a2, a3, a4);
}

BOOL std::__fs::filesystem::__remove(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x1F417EBB8](a1, __ec);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

void std::locale::~locale(std::locale *this)
{
}

void std::codecvt<char16_t,char,__mbstate_t>::~codecvt(std::codecvt<char16_t, char, mbstate_t> *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

std::ios_base::Init *__cdecl std::ios_base::Init::Init(std::ios_base::Init *this)
{
  return (std::ios_base::Init *)MEMORY[0x1F417ED88](this);
}

void std::ios_base::Init::~Init(std::ios_base::Init *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

std::ios_base::failure *__cdecl std::ios_base::failure::failure(std::ios_base::failure *this, const std::string *__msg, const std::error_code *__ec)
{
  return (std::ios_base::failure *)MEMORY[0x1F417EDD8](this, __msg, __ec);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

void std::strstream::~strstream(std::strstream *this)
{
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

void exit(int a1)
{
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

int feof(FILE *a1)
{
  return MEMORY[0x1F40CC098](a1);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1F40CC0A0](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1F40CC100](a1, *(void *)&a2, a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return (FILE *)MEMORY[0x1F40CC320](a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

int getpagesize(void)
{
  return MEMORY[0x1F40CC480]();
}

kern_return_t host_statistics(host_t host_priv, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x1F40CC620](*(void *)&host_priv, *(void *)&flavor, host_info_out, host_info_outCnt);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

float log10f(float a1)
{
  MEMORY[0x1F40CC888](a1);
  return result;
}

void longjmp(jmp_buf a1, int a2)
{
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1F40CC950]();
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCB08](a1, a2, *(void *)&a3);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

int mkpath_np(const char *path, mode_t omode)
{
  return MEMORY[0x1F40CCE00](path, omode);
}

char *__cdecl mktemp(char *a1)
{
  return (char *)MEMORY[0x1F40CCE28](a1);
}

int mlock(const void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE38](a1, a2);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int msync(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCE78](a1, a2, *(void *)&a3);
}

int munlock(const void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE80](a1, a2);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1F40CD0F0](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_release(void *object)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

int putchar(int a1)
{
  return MEMORY[0x1F40CDBA8](*(void *)&a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1F40CDD10](__p, __ec);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

int rmdir(const char *a1)
{
  return MEMORY[0x1F40CDD90](a1);
}

int setjmp(jmp_buf a1)
{
  return MEMORY[0x1F40CDF80](a1);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1F4181FA8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1F4181FB0](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_parameter_index(sqlite3_stmt *a1, const char *zName)
{
  return MEMORY[0x1F4181FD0](a1, zName);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1F4182060](a1);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A0](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1F41821A8](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1F40CE168](__dst, __src);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

const char *__cdecl u_errorName(UErrorCode code)
{
  return (const char *)MEMORY[0x1F417F728](*(void *)&code);
}

UBool u_istitle(UChar32 c)
{
  return MEMORY[0x1F417F7F0](*(void *)&c);
}

UBool u_isupper(UChar32 c)
{
  return MEMORY[0x1F417F7F8](*(void *)&c);
}

UChar *__cdecl u_strFindFirst(const UChar *s, int32_t length, const UChar *substring, int32_t subLength)
{
  return (UChar *)MEMORY[0x1F417F820](s, *(void *)&length, substring, *(void *)&subLength);
}

UChar *__cdecl u_strFromUTF32(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const UChar32 *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (UChar *)MEMORY[0x1F417F830](dest, *(void *)&destCapacity, pDestLength, src, *(void *)&srcLength, pErrorCode);
}

UChar *__cdecl u_strFromUTF8(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (UChar *)MEMORY[0x1F417F838](dest, *(void *)&destCapacity, pDestLength, src, *(void *)&srcLength, pErrorCode);
}

int32_t u_strToLower(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F417F848](dest, *(void *)&destCapacity, src, *(void *)&srcLength, locale, pErrorCode);
}

char *__cdecl u_strToUTF8(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (char *)MEMORY[0x1F417F858](dest, *(void *)&destCapacity, pDestLength, src, *(void *)&srcLength, pErrorCode);
}

int32_t u_strToUpper(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F417F860](dest, *(void *)&destCapacity, src, *(void *)&srcLength, locale, pErrorCode);
}

UChar32 u_tolower(UChar32 c)
{
  return MEMORY[0x1F417F8A8](*(void *)&c);
}

UChar32 u_totitle(UChar32 c)
{
  return MEMORY[0x1F417F8B0](*(void *)&c);
}

void u_versionToString(const UVersionInfo versionArray, char *versionString)
{
}

uint64_t ucol_close()
{
  return MEMORY[0x1F417FD08]();
}

uint64_t ucol_getSortKey()
{
  return MEMORY[0x1F417FD68]();
}

uint64_t ucol_getUCAVersion()
{
  return MEMORY[0x1F417FD78]();
}

uint64_t ucol_getVersion()
{
  return MEMORY[0x1F417FD80]();
}

uint64_t ucol_open()
{
  return MEMORY[0x1F417FDA0]();
}

uint64_t ucol_openBinary()
{
  return MEMORY[0x1F417FDA8]();
}

uint64_t ucol_openRules()
{
  return MEMORY[0x1F417FDB8]();
}

uint64_t ucol_setAttribute()
{
  return MEMORY[0x1F417FDC8]();
}

uint64_t ucol_setStrength()
{
  return MEMORY[0x1F417FDD0]();
}

uint64_t ucol_strcollUTF8()
{
  return MEMORY[0x1F417FDE8]();
}

uint64_t ulocdata_close()
{
  return MEMORY[0x1F41801E8]();
}

uint64_t ulocdata_getExemplarSet()
{
  return MEMORY[0x1F4180200]();
}

uint64_t ulocdata_open()
{
  return MEMORY[0x1F4180210]();
}

uint64_t uset_addAll()
{
  return MEMORY[0x1F4180688]();
}

uint64_t uset_charAt()
{
  return MEMORY[0x1F41806B0]();
}

uint64_t uset_close()
{
  return MEMORY[0x1F41806D0]();
}

uint64_t uset_freeze()
{
  return MEMORY[0x1F41806F0]();
}

uint64_t uset_open()
{
  return MEMORY[0x1F4180710]();
}

uint64_t uset_openEmpty()
{
  return MEMORY[0x1F4180718]();
}

uint64_t uset_size()
{
  return MEMORY[0x1F4180740]();
}

uint64_t uspoof_close()
{
  return MEMORY[0x1F4180760]();
}

uint64_t uspoof_getSkeletonUTF8()
{
  return MEMORY[0x1F4180768]();
}

uint64_t uspoof_open()
{
  return MEMORY[0x1F4180770]();
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE690](a1, a2, a3);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1F40CE8B0](__s, *(void *)&__c, __n);
}