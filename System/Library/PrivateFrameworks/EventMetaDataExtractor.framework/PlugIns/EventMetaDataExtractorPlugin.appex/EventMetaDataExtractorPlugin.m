void sub_10000144C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100001570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)DDScannerHelper;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000015C4(void *a1)
{
}

void DataDetectorsScan(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v8 = a2;
  id v7 = a4;
  DataDetectorsScanRange(a1, v8, 0, (uint64_t)[v8 length], a3, v7);
}

void sub_10000165C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void DataDetectorsScanRange(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v18 = a2;
  id v7 = a6;
  if (DDScannerScanStringWithRange())
  {
    CFArrayRef v8 = (const __CFArray *)DDScannerCopyResultsWithOptions();
    CFArrayRef v9 = v8;
    if (v8)
    {
      CFIndex Count = CFArrayGetCount(v8);
      CFIndex v11 = Count - 1;
      if (Count >= 1)
      {
        CFIndex v12 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v9, v12);
          char v15 = v7[2](v7, ValueAtIndex);
          if (v11 == v12++) {
            char v17 = 0;
          }
          else {
            char v17 = v15;
          }
        }
        while ((v17 & 1) != 0);
      }
      CFRelease(v9);
    }
  }
  DDScannerReset();
}

void sub_100001780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id DataDetectorsGetDateAndTimeZoneWithLocale(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (DDResultCopyExtractedDateFromReferenceDateWithLocale()) {
    *a4 = 0;
  }
  return 0;
}

uint64_t DataDetectorsGetIntervalDatesAndTimeZoneWithLocale(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, unsigned char *a8)
{
  uint64_t result = DDResultCopyExtractedStartDateEndDateWithLocale();
  if (result)
  {
    *a3 = 0;
    *a5 = 0;
    *a4 = 0;
    *a6 = 0;
    *a8 = 0;
    return 1;
  }
  return result;
}

uint64_t _DataDetectorsCheckSubResultsWithTypesToDepth(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  if (a3)
  {
    CFArrayRef SubResults = (const __CFArray *)DDResultGetSubResults();
    CFArrayRef v6 = SubResults;
    if (SubResults && (CFIndex Count = CFArrayGetCount(SubResults), Count >= 1))
    {
      CFIndex v8 = 0;
      uint64_t v9 = (a3 - 1);
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v6, v8);
        if (_DataDetectorsCheckSubResultsWithTypesToDepth(ValueAtIndex, v4, v9)) {
          break;
        }
        if (Count == ++v8) {
          goto LABEL_7;
        }
      }
      uint64_t v12 = 1;
    }
    else
    {
LABEL_7:
      id v11 = [(id)DDResultGetType() copy];
      uint64_t v12 = (uint64_t)[v4 containsObject:v11];
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1000019B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t DataDetectorsCheckSubResultsWithTypes(uint64_t a1, void *a2)
{
  return _DataDetectorsCheckSubResultsWithTypesToDepth(a1, a2, 6);
}

uint64_t DataDetectorsResultContainsContextualWords(__DDResult *a1)
{
  v2 = DDResultGetMatchedString();
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v3 = [&off_1000B0100 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v9;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(&off_1000B0100);
        }
        if ([v2 rangeOfString:*(void *)(*((void *)&v8 + 1) + 8 * (void)v5) options:1] != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v6 = 1;
          goto LABEL_11;
        }
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [&off_1000B0100 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = _DataDetectorsCheckSubResultsWithTypesToDepth((uint64_t)a1, &off_1000B0118, 6);
LABEL_11:

  return v6;
}

void sub_100001B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t DataDetectorsGetType(__DDResult *a1)
{
  int Category = DDResultGetCategory();
  if (Category == 5)
  {
    if (DDResultHasType()) {
      return 4096;
    }
    else {
      return 0;
    }
  }
  else if (Category == 4)
  {
    return 8;
  }
  else
  {
    return 0;
  }
}

CFStringRef NSTextCheckingTypeToString(uint64_t a1)
{
  CFStringRef v1 = @"NSTextCheckingTypeTransitInformation";
  if (a1 != 4096) {
    CFStringRef v1 = 0;
  }
  if (a1 == 8) {
    return @"NSTextCheckingTypeDate";
  }
  else {
    return v1;
  }
}

void sub_100001CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100001F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100001FE0()
{
}

uint64_t sub_100001FE8(uint64_t a1, __DDResult *a2)
{
  uint64_t RangeForURLification = DDResultGetRangeForURLification();
  uint64_t v6 = v5;
  uint64_t Type = DataDetectorsGetType(a2);
  v42 = (uint64_t *)(a1 + 32);
  v47 = objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", RangeForURLification, v6);
  if (Type)
  {
    if (Type == 4096)
    {
      v45 = objc_opt_new();
      v61[0] = @"NSTextCheckingTypeTransitInformation";
      v60[0] = @"type";
      v60[1] = @"ddType";
      uint64_t v12 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 56) getExtractionResultType:a2]);
      v61[1] = v12;
      v61[2] = v47;
      v60[2] = @"text";
      v60[3] = @"range";
      v58[0] = @"start";
      v13 = +[NSNumber numberWithUnsignedInteger:RangeForURLification];
      v58[1] = @"end";
      v59[0] = v13;
      v14 = +[NSNumber numberWithUnsignedInteger:RangeForURLification + v6];
      v59[1] = v14;
      char v15 = +[NSDictionary dictionaryWithObjects:v59 forKeys:v58 count:2];
      v61[3] = v15;
      v16 = +[NSDictionary dictionaryWithObjects:v61 forKeys:v60 count:4];
      [v45 setDictionary:v16];

      [*(id *)(a1 + 64) addObject:v45];
    }
    else if (Type == 8)
    {
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      char v53 = 0;
      if ((DDResultHasType() & 1) != 0 || DDResultHasType())
      {
        id v51 = 0;
        id v52 = 0;
        id v49 = 0;
        id v50 = 0;
        DataDetectorsGetIntervalDatesAndTimeZoneWithLocale((uint64_t)a2, v9, &v52, &v51, &v50, &v49, v8, &v53);
        id v44 = v52;
        id v41 = v51;
        id v40 = v50;
        id v39 = v49;
      }
      else
      {
        id v48 = 0;
        DataDetectorsGetDateAndTimeZoneWithLocale((uint64_t)a2, v9, v8, &v48);
        id v44 = (id)objc_claimAutoreleasedReturnValue();
        id v40 = 0;
        id v41 = v48;
        id v39 = 0;
      }
      char v17 = &__kCFBooleanFalse;
      if (!v53) {
        char v17 = &__kCFBooleanTrue;
      }
      v46 = v17;
      id v37 = [*(id *)(a1 + 56) getExtractionResultType:a2];
      if (v37 == (id)5
        && (CFArrayRef v18 = (const __CFArray *)DDResultGetSubResults(), (v19 = v18) != 0)
        && (CFIndex Count = CFArrayGetCount(v18), Count >= 1))
      {
        CFIndex v21 = 0;
        v22 = v46;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v19, v21);
          if ([*(id *)(a1 + 56) getExtractionResultType:ValueAtIndex] == (id)6)
          {
            v24 = v22;
            CFArrayRef SubResults = (const __CFArray *)DDResultGetSubResults();
            v22 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 56), "getExtractionResultType:", CFArrayGetValueAtIndex(SubResults, 0)) == (id)4);
          }
          if ([*(id *)(a1 + 56) getExtractionResultType:ValueAtIndex] == (id)7)
          {
            CFArrayRef v26 = (const __CFArray *)DDResultGetSubResults();
            uint64_t v27 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 56), "getExtractionResultType:", CFArrayGetValueAtIndex(v26, 0)) == (id)4);

            v46 = (void *)v27;
          }
          ++v21;
        }
        while (Count != v21);
      }
      else
      {
        v22 = v46;
      }
      if (v44)
      {
        v28 = objc_opt_new();
        CFStringRef v65 = @"NSTextCheckingTypeDate";
        v64[0] = @"type";
        v64[1] = @"ddType";
        uint64_t v66 = +[NSNumber numberWithInteger:v37];
        v67 = v47;
        v64[2] = @"text";
        v64[3] = @"startTimeIsSignificant";
        v68 = v22;
        id v69 = v44;
        v64[4] = @"startDate";
        v64[5] = @"range";
        v62[0] = @"start";
        v38 = (void *)v66;
        v29 = +[NSNumber numberWithUnsignedInteger:RangeForURLification];
        v62[1] = @"end";
        v63[0] = v29;
        v30 = +[NSNumber numberWithUnsignedInteger:RangeForURLification + v6];
        v63[1] = v30;
        v31 = +[NSDictionary dictionaryWithObjects:v63 forKeys:v62 count:2];
        v70 = v31;
        v64[6] = @"containsContextualWords";
        v32 = +[NSNumber numberWithUnsignedChar:DataDetectorsResultContainsContextualWords(a2)];
        v71 = v32;
        v33 = +[NSDictionary dictionaryWithObjects:&v65 forKeys:v64 count:7];
        [v28 setDictionary:v33];

        if (v40)
        {
          [v28 setValue:v40 forKey:@"endDate"];
          [v28 setValue:v46 forKey:@"endTimeIsSignificant"];
        }
        else
        {
          v35 = extractionLogHandle();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
            sub_10008DCD8(v42, v35);
          }
        }
        if (v41) {
          [v28 setValue:v41 forKey:@"timeZone"];
        }
        [*(id *)(a1 + 64) addObject:v28];
      }
      else
      {
        v28 = extractionLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          uint64_t v34 = *v42;
          *(_DWORD *)buf = 138477827;
          *(void *)v55 = v34;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "DDScannerHelper - No start date found in input text: %{private}@", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    long long v10 = extractionLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109635;
      *(_DWORD *)v55 = DDResultGetCategory();
      *(_WORD *)&v55[4] = 2113;
      *(void *)&v55[6] = DDResultGetType();
      __int16 v56 = 2113;
      v57 = v47;
      id v11 = *(id *)&v55[6];
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "DDScannerHelper - No extraction for %d:%{private}@ = %{private}@", buf, 0x1Cu);
    }
  }

  return 1;
}

void sub_100002704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_100002ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100002E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  operator delete(v14);
  _Unwind_Resume(a1);
}

void *sub_100003590(int64x2_t *a1, char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a1[2].u64[0];
  uint64_t v7 = a1->i64[1];
  uint64_t v8 = a1[1].i64[0];
  uint64_t v9 = (char *)(v7 + 8 * (v6 >> 9));
  if (v8 == v7) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)v9 + 8 * (a1[2].i64[0] & 0x1FF);
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((a3 - *(void *)a2) >> 3) + ((a2 - v9) << 6) - ((v10 - *(void *)v9) >> 3);
  }
  uint64_t v12 = a1[2].i64[1];
  unint64_t v13 = v12 - v11;
  if (v11 >= v12 - v11)
  {
    if (v8 == v7) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = ((v8 - v7) << 6) - 1;
    }
    if (v20 == v12 + v6)
    {
      sub_1000052CC(a1);
      uint64_t v12 = a1[2].i64[1];
      unint64_t v13 = v12 - v11;
    }
    if (v12 == v11)
    {
      *(void *)(*(void *)(a1->i64[1] + (((a1[2].i64[0] + v11) >> 6) & 0x3FFFFFFFFFFFFF8))
                + 8 * ((a1[2].i64[0] + v11) & 0x1FF)) = *(void *)a4;
      ++a1[2].i64[1];
    }
    else
    {
      unint64_t v21 = a1[2].i64[0] + v12;
      uint64_t v22 = a1->i64[1];
      v23 = (char **)(v22 + 8 * (v21 >> 9));
      v24 = *v23;
      v25 = &(*v23)[8 * (v21 & 0x1FF)];
      if (a1[1].i64[0] == v22) {
        v25 = 0;
      }
      v49.n128_u64[0] = (unint64_t)v23;
      v49.n128_u64[1] = (unint64_t)v25;
      uint64_t v26 = (v25 - v24) >> 3;
      if (v25 - v24 < 9)
      {
        unint64_t v39 = 512 - v26;
        v28 = (uint64_t *)&v23[-(v39 >> 9)];
        v29 = (void *)(*v28 + 8 * (~(_WORD)v39 & 0x1FF));
      }
      else
      {
        unint64_t v27 = v26 - 1;
        v28 = (uint64_t *)&v23[v27 >> 9];
        v29 = (void *)(*v28 + 8 * (v27 & 0x1FF));
      }
      *(void *)v25 = *v29;
      ++a1[2].i64[1];
      if (v13 >= 2)
      {
        id v40 = sub_1000055E4((uint64_t)&v49, v13);
        sub_100005768(v40, v41, v28, (uint64_t)v29, (uint64_t *)v49.n128_u64[0], v49.n128_i64[1], &v50);
        v25 = (char *)v51.n128_u64[1];
        v23 = (char **)v51.n128_u64[0];
        __n128 v49 = v51;
      }
      if (v25 == *v23)
      {
        v49.n128_u64[0] = (unint64_t)(v23 - 1);
        v25 = *(v23 - 1) + 4096;
      }
      *((_DWORD *)v25 - 2) = *(_DWORD *)a4;
      *((_DWORD *)v25 - 1) = *(_DWORD *)(a4 + 4);
    }
  }
  else
  {
    if (v6)
    {
      if (v11)
      {
LABEL_10:
        uint64_t v14 = a1->i64[1];
        char v15 = (uint64_t *)(v14 + 8 * ((unint64_t)a1[2].i64[0] >> 9));
        uint64_t v16 = *v15;
        uint64_t v17 = *v15 + 8 * (a1[2].i64[0] & 0x1FF);
        if (a1[1].i64[0] == v14) {
          uint64_t v17 = 0;
        }
        v49.n128_u64[0] = v14 + 8 * ((unint64_t)a1[2].i64[0] >> 9);
        v49.n128_u64[1] = v17;
        uint64_t v18 = (v17 - v16) >> 3;
        if (v17 - v16 < 9) {
          CFArrayRef v19 = (void *)(v15[-((unint64_t)(512 - v18) >> 9)] + 8 * (~(512 - (_WORD)v18) & 0x1FF));
        }
        else {
          CFArrayRef v19 = (void *)(*(uint64_t *)((char *)v15 + (((unint64_t)(v18 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
        }
                         + 8 * ((v18 - 1) & 0x1FF));
        *CFArrayRef v19 = *(void *)v17;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_100091200);
        if (v11 != 1)
        {
          uint64_t v33 = v17 - *v15;
          uint64_t v34 = v33 >> 3;
          if (v33 < -7)
          {
            unint64_t v42 = 510 - v34;
            v36 = (char **)&v15[-(v42 >> 9)];
            id v37 = *v36;
            uint64_t v38 = ~v42 & 0x1FFLL;
          }
          else
          {
            unint64_t v35 = v34 + 1;
            v36 = (char **)&v15[v35 >> 9];
            id v37 = *v36;
            uint64_t v38 = v35 & 0x1FF;
          }
          v43 = &v37[8 * v38];
          id v44 = (char **)sub_100003964((uint64_t)&v49, v11);
          __n128 v50 = v49;
          sub_10000564C(v36, v43, v44, v45, (char **)&v50);
          uint64_t v17 = v50.n128_i64[1];
        }
        *(_DWORD *)uint64_t v17 = *(_DWORD *)a4;
        *(_DWORD *)(v17 + 4) = *(_DWORD *)(a4 + 4);
        goto LABEL_44;
      }
    }
    else
    {
      sub_100004FB8((void **)a1);
      if (v11) {
        goto LABEL_10;
      }
    }
    uint64_t v30 = a1->i64[1];
    v31 = (void *)(v30 + 8 * ((unint64_t)a1[2].i64[0] >> 9));
    uint64_t v32 = *v31 + 8 * (a1[2].i64[0] & 0x1FF);
    if (a1[1].i64[0] == v30) {
      uint64_t v32 = 0;
    }
    if (v32 == *v31) {
      uint64_t v32 = *(v31 - 1) + 4096;
    }
    *(void *)(v32 - 8) = *(void *)a4;
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_100091200);
  }
LABEL_44:
  uint64_t v46 = a1->i64[1];
  if (a1[1].i64[0] == v46) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = *(void *)(v46 + 8 * ((unint64_t)a1[2].i64[0] >> 9)) + 8 * (a1[2].i64[0] & 0x1FF);
  }
  v50.n128_u64[0] = v46 + 8 * ((unint64_t)a1[2].i64[0] >> 9);
  v50.n128_u64[1] = v47;
  return sub_100003964((uint64_t)&v50, v11);
}

void *sub_100003964(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

void sub_100003DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v16);
  operator delete(v15);

  _Unwind_Resume(a1);
}

void sub_100004068()
{
}

void sub_100004080(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000040DC(exception, a1);
}

void sub_1000040C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1000040DC(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_100004110()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  CFStringRef v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *sub_100004144(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_1000041C0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000041A4(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1000041C0(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100004204();
  }
  uint64_t result = (char *)sub_10000421C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_100004204()
{
}

void *sub_10000421C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100004110();
  }
  return operator new(8 * a2);
}

char *sub_100004254(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_100004204();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_1000041C0(v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      CFArrayRef v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    CFArrayRef v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t sub_100004360(uint64_t a1, unint64_t a2, void *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2) {
    sub_1000043B0((void *)a1, a2, a3);
  }
  return a1;
}

void sub_10000439C(_Unwind_Exception *a1)
{
  sub_100004EC0(v1);
  _Unwind_Resume(a1);
}

void *sub_1000043B0(void *a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 - v6) << 6) - 1;
  }
  unint64_t v9 = a1[5] + a1[4];
  unint64_t v10 = v8 - v9;
  BOOL v11 = a2 > v10;
  unint64_t v12 = a2 - v10;
  if (v11)
  {
    sub_1000044C8(a1, v12);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v9 = a1[4] + a1[5];
  }
  unint64_t v13 = (void *)(v6 + 8 * (v9 >> 9));
  if (v7 == v6) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 8 * (v9 & 0x1FF);
  }
  v20[0] = v6 + 8 * (v9 >> 9);
  v20[1] = v14;
  uint64_t result = sub_100003964((uint64_t)v20, a2);
  while (v14 != v16)
  {
    size_t v17 = (void *)(v13 == result ? v16 : *v13 + 4096);
    if ((void *)v14 == v17)
    {
      size_t v17 = (void *)v14;
    }
    else
    {
      uint64_t v18 = (void *)v14;
      do
        *v18++ = *a3;
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 3;
    if (v13 == result) {
      break;
    }
    uint64_t v19 = v13[1];
    ++v13;
    uint64_t v14 = v19;
  }
  return result;
}

void sub_1000044C8(void *a1, unint64_t a2)
{
  id v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      size_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          v29 = (char *)sub_10000421C((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          id v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            id v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          id v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            id v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            id v3 = (char *)a1[1];
          }
          unint64_t v27 = &v3[-8 * (v24 >> 1)];
          id v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)id v3 = v18;
      id v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100004A54(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100004B6C((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              v79 = (char *)sub_10000421C((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13) {
        unint64_t v15 = (char *)sub_10000421C((uint64_t)(a1 + 3), v13);
      }
      else {
        unint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_100004C8C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        unint64_t v39 = (void *)a1[1];
        id v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              __n128 v49 = (char *)sub_10000421C((uint64_t)v91, v48);
              __n128 v51 = (uint64_t *)__p[1];
              id v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                id v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              __int16 v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                id v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                id v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              id v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)id v40 = *v39;
          id v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          unint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_100004DA4((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1000049E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100004A54(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  unint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_10000421C(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      BOOL v22 = (uint64_t *)a1[1];
      unint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        unint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      unint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        unint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      unint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        unint64_t v6 = (char *)a1[1];
      }
      size_t v17 = &v6[8 * v13];
      unint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)unint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_100004B6C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_10000421C(v6, v12);
      unint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      size_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        size_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      BOOL v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      unint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_100004C8C(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      size_t v17 = (char *)sub_10000421C(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_100004DA4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_10000421C(*(void *)(a1 + 32), v11);
      unint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t sub_100004EC0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_100004F10(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return sub_100004EC0((uint64_t)a1);
}

void sub_100004FB8(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = ((v3 - v2) << 6) - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x200)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      int64_t v46 = a1 + 3;
      __p = sub_10000421C(v7, v11);
      uint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      int64_t v41 = operator new(0x1000uLL);
      sub_100004C8C(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_10000421C((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              uint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      id v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      uint64_t v43 = v33;
      uint64_t v38 = (char *)a1[3];
      unint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 256;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 512;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        sub_100004A54(a1, &__p);
        uint64_t v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      sub_100004B6C((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 256;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 512;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 512;
    __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100004B6C((uint64_t)a1, &__p);
  }
}

void sub_100005280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000052CC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10000421C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      id v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100004A54(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100004B6C((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10000421C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      id v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __n128 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__n128 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_10000421C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_100004C8C(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100004DA4((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100005598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_1000055E4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3) - a2;
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

double sub_10000564C(char **a1, char *a2, char **a3, char *a4, char **a5)
{
  uint64_t v7 = *a5;
  uint64_t v8 = a5[1];
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 4096; ; uint64_t i = v12 + 4096)
    {
      sub_1000056E0(a2, i, v7, v8, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      uint64_t v7 = (char *)v15;
      *a5 = (char *)v15;
      a5[1] = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1000056E0(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_1000056E0(char *a1@<X1>, char *a2@<X2>, char *a3@<X3>, char *a4@<X4>, char **a5@<X8>)
{
  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    uint64_t v5 = *(_DWORD **)a3;
    while (1)
    {
      uint64_t v6 = (char *)(v5 + 1024);
      if ((a2 - a1) >> 3 >= (v6 - a4) >> 3) {
        uint64_t v7 = (v6 - a4) >> 3;
      }
      else {
        uint64_t v7 = (a2 - a1) >> 3;
      }
      if (v7)
      {
        uint64_t v8 = &a1[8 * v7];
        do
        {
          *(_DWORD *)a4 = *(_DWORD *)a1;
          *((_DWORD *)a4 + 1) = *((_DWORD *)a1 + 1);
          a4 += 8;
          a1 += 8;
        }
        while (a1 != v8);
        a1 = v8;
      }
      if (a1 == a2) {
        break;
      }
      uint64_t v9 = (_DWORD *)*((void *)a3 + 1);
      a3 += 8;
      uint64_t v5 = v9;
      a4 = (char *)v9;
    }
    if (v6 == a4)
    {
      uint64_t v10 = (char *)*((void *)a3 + 1);
      a3 += 8;
      a4 = v10;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

__n128 sub_100005768@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    long long v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v14 = a4;
    long long v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100005838(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      long long v15 = (uint64_t *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }
  sub_100005838(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

void sub_100005838(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    uint64_t v5 = *a3;
    uint64_t v6 = a2;
    while (1)
    {
      if ((v6 - a1) >> 3 >= (a4 - v5) >> 3) {
        uint64_t v7 = (a4 - v5) >> 3;
      }
      else {
        uint64_t v7 = (v6 - a1) >> 3;
      }
      if (v7)
      {
        uint64_t v8 = (int *)(v6 - 4);
        uint64_t v9 = -8 * v7;
        do
        {
          *(_DWORD *)(a4 - 8) = *(v8 - 1);
          a4 -= 8;
          int v10 = *v8;
          v8 -= 2;
          *(_DWORD *)(a4 + 4) = v10;
          v9 += 8;
        }
        while (v9);
      }
      v6 -= 8 * v7;
      if (v6 == a1) {
        break;
      }
      uint64_t v11 = *--a3;
      uint64_t v5 = v11;
      a4 = v11 + 4096;
    }
    if (v5 + 4096 == a4)
    {
      uint64_t v12 = a3[1];
      ++a3;
      a4 = v12;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

void sub_100005B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100005C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100005C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100005D20(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100005E70(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_100006120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000062BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100006FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000075EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100007944(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1000083F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100008B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100009070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100009740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100009900(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_10000991C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

id modelLogHandle(void)
{
  if (qword_1000B6550 != -1) {
    dispatch_once(&qword_1000B6550, &stru_1000AC978);
  }
  v0 = (void *)qword_1000B6548;
  return v0;
}

void sub_10000999C(id a1)
{
  qword_1000B6548 = (uint64_t)os_log_create("com.apple.eventMetaDataExtractor.eventMetaDataExtractorPlugin", "extractionModel");
  _objc_release_x1();
}

id extractionLogHandle(void)
{
  if (qword_1000B6560 != -1) {
    dispatch_once(&qword_1000B6560, &stru_1000AC998);
  }
  v0 = (void *)qword_1000B6558;
  return v0;
}

void sub_100009A34(id a1)
{
  qword_1000B6558 = (uint64_t)os_log_create("com.apple.eventMetaDataExtractor.eventMetaDataExtractorPlugin", "eventExtraction");
  _objc_release_x1();
}

uint64_t SentencePiece::encode@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void **p_p@<X8>)
{
  sub_10001EEFC((uint64_t)v35);
  long long v32 = 0;
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  __p = 0;
  long long v30 = 0;
  long long v31 = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v7 = a2;
    a2 = *(void *)a2;
    uint64_t v6 = *(void *)(v7 + 8);
  }
  else
  {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  sub_10001F4F4((uint64_t)v35, a2, v6);
  if (!v28)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v9 = a1;
      a1 = *(void *)a1;
      uint64_t v8 = *(void *)(v9 + 8);
    }
    else
    {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
    }
    sub_100022C08((uint64_t)v35, a1, v8, (char **)&v32, &v27);
    sub_10004CF1C(&v27);
    if (v33 != v32)
    {
      int v26 = 1;
      sub_100009CF0((uint64_t)&v32, (char *)v32, &v26);
      int v10 = (int *)v32;
      if (v33 == v32)
      {
        uint64_t v24 = 0;
        uint64_t v11 = 0;
        uint64_t v23 = 0;
      }
      else
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        do
        {
          float v13 = (float)v10[v12];
          if (v11 >= v31)
          {
            uint64_t v14 = (float *)__p;
            uint64_t v15 = ((char *)v11 - (unsigned char *)__p) >> 2;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 62) {
              sub_100004204();
            }
            uint64_t v17 = (char *)v31 - (unsigned char *)__p;
            if (((char *)v31 - (unsigned char *)__p) >> 1 > v16) {
              unint64_t v16 = v17 >> 1;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v16;
            }
            if (v18)
            {
              uint64_t v19 = (char *)sub_10000A17C((uint64_t)&v31, v18);
              uint64_t v14 = (float *)__p;
              uint64_t v11 = v30;
            }
            else
            {
              uint64_t v19 = 0;
            }
            int64_t v20 = (float *)&v19[4 * v15];
            *int64_t v20 = v13;
            uint64_t v21 = v20 + 1;
            while (v11 != v14)
            {
              int v22 = *((_DWORD *)v11-- - 1);
              *((_DWORD *)v20-- - 1) = v22;
            }
            __p = v20;
            long long v30 = v21;
            long long v31 = (float *)&v19[4 * v18];
            if (v14) {
              operator delete(v14);
            }
            uint64_t v11 = v21;
          }
          else
          {
            *v11++ = v13;
          }
          long long v30 = v11;
          ++v12;
          int v10 = (int *)v32;
        }
        while (v12 < (v33 - (unsigned char *)v32) >> 2);
        uint64_t v23 = __p;
        uint64_t v24 = v31;
      }
      *p_p = v23;
      p_p[1] = v11;
      p_p[2] = v24;
      p_p = &__p;
    }
  }
  *p_p = 0;
  p_p[1] = 0;
  p_p[2] = 0;
  sub_10004CF1C(&v28);
  if (__p)
  {
    long long v30 = (float *)__p;
    operator delete(__p);
  }
  if (v32)
  {
    unint64_t v33 = v32;
    operator delete(v32);
  }
  return sub_10001F09C(v35);
}

void sub_100009CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a15)
  {
    a16 = (uint64_t)a15;
    operator delete(a15);
  }
  sub_10001F09C(&a18);
  _Unwind_Resume(a1);
}

char *sub_100009CF0(uint64_t a1, char *__src, _DWORD *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    uint64_t v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v15 >> 62) {
      sub_100004204();
    }
    uint64_t v16 = (__src - v14) >> 2;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 1 > v15) {
      unint64_t v15 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      uint64_t v19 = (char *)sub_10000A17C(v7, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    __p = v19;
    int v22 = &v19[4 * v16];
    uint64_t v23 = v22;
    uint64_t v24 = &v19[4 * v18];
    sub_100009FA4(&__p, a3);
    uint64_t v4 = sub_10000A0B4((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_DWORD *)__src = *a3;
    *(void *)(a1 + 8) = __src + 4;
  }
  else
  {
    int v10 = __src + 4;
    uint64_t v11 = v6 - 4;
    unint64_t v12 = v6;
    while (v11 < v6)
    {
      int v13 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)unint64_t v12 = v13;
      v12 += 4;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-4 * ((v6 - v10) >> 2)], __src, v6 - v10);
    }
    *(_DWORD *)uint64_t v4 = *a3;
  }
  return v4;
}

void sub_100009E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SentencePiece::decode@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  sub_10001EEFC((uint64_t)v13);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v12 = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v7 = a2;
    a2 = *(void *)a2;
    uint64_t v6 = *(void *)(v7 + 8);
  }
  else
  {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  sub_10001F4F4((uint64_t)v13, a2, v6);
  if (v10)
  {
    sub_10000A1B4(a3, "");
  }
  else
  {
    sub_100023310((uint64_t)v13, a1, (uint64_t)__p, &v9);
    sub_10004CF1C(&v9);
    *(_OWORD *)a3 = *(_OWORD *)__p;
    a3[2] = v12;
    __p[1] = 0;
    uint64_t v12 = 0;
    __p[0] = 0;
  }
  sub_10004CF1C(&v10);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  return sub_10001F09C(v13);
}

void sub_100009F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_10001F09C(&a17);
  _Unwind_Resume(a1);
}

void sub_100009FA4(void *a1, _DWORD *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 1;
      }
      uint64_t v17 = (char *)sub_10000A17C(a1[4], v16);
      uint64_t v19 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
      int64_t v20 = (int *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v22 = 4 * (v21 >> 2);
        uint64_t v23 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          int v24 = *v20++;
          *(_DWORD *)uint64_t v23 = v24;
          v23 += 4;
          v22 -= 4;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[4 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 2;
      BOOL v8 = v6 >> 2 < -1;
      uint64_t v9 = (v6 >> 2) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      int v13 = &v5[-4 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      unint64_t v15 = &v4[4 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(_DWORD *)uint64_t v4 = *a2;
  a1[2] = v4 + 4;
}

char *sub_10000A0B4(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    BOOL v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  int v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  int64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *sub_10000A17C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_100004110();
  }
  return operator new(4 * a2);
}

void *sub_10000A1B4(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100004068();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void **sub_10000A268(void **a1)
{
  BOOL v3 = a1;
  sub_10000D388(&v3);
  return a1;
}

void sub_10000A42C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000A7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000A9F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000AD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Unwind_Resume(a1);
}

void sub_10000B0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_10000DB7C(v22, 0);
  sub_10000B2D4(&a14);
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10000B228(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

const void **sub_10000B26C(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_10000B2A0(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_10000B2D4(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_10000B864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  long long v32 = *(void **)a12;
  if (*(void *)a12)
  {
    *(void *)(a12 + 8) = v32;
    operator delete(v32);
  }
  if (v29 < 0) {
    operator delete(v30);
  }

  _Unwind_Resume(a1);
}

void sub_10000BB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10000BE0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000C0C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000C318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000C374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend(*(id *)(a1 + 32), "substringWithRange:");
  uint64_t v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (CFStringGetCStringPtr(v11, 4u)
    || [(__CFString *)v11 lengthOfBytesUsingEncoding:4])
  {
    if (LXLexiconGetFirstTokenIDForString())
    {
      uint64_t v7 = (const void *)LXLexiconCopyEntryForTokenID();
      int MetaFlags = LXEntryGetMetaFlags();
      CFRelease(v7);
      if ((MetaFlags & 0x3800000) != 0)
      {
        int v9 = *(void **)(a1 + 40);
        uint64_t v10 = +[NSValue valueWithRange:](NSValue, "valueWithRange:", a3, a4);
        [v9 addObject:v10];
      }
    }
  }
}

void sub_10000C45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000CA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39)
{
  *(void *)(v39 - 176) = &a35;
  sub_10000D388((void ***)(v39 - 176));
  *(void *)(v39 - 176) = &a38;
  sub_10000D388((void ***)(v39 - 176));
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10000CBF8(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  __n128 result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (unsigned char *)a1);
  if (!result) {
    __n128 result = a2;
  }
  uint64_t v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t sub_10000CC60@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = sub_10000DC74(a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    int v8 = (char *)result;
  }
  else {
    int v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      int v9 = a1;
    }
    else {
      int v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

CFDictionaryRef sub_10000CD2C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  keys = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_10000D018((void **)&keys, v2);
  values = 0;
  long long v32 = 0;
  unint64_t v33 = 0;
  sub_10000D018((void **)&values, v2);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    size_t v4 = *(void ***)a1;
    uint64_t v5 = *(void *)a1 + 16 * v3;
    do
    {
      size_t v6 = *v4;
      uint64_t v7 = v35;
      if (v35 >= v36)
      {
        uint64_t v9 = v35 - keys;
        if ((unint64_t)(v9 + 1) >> 61) {
          sub_100004204();
        }
        unint64_t v10 = ((char *)v36 - (char *)keys) >> 2;
        if (v10 <= v9 + 1) {
          unint64_t v10 = v9 + 1;
        }
        if ((unint64_t)((char *)v36 - (char *)keys) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          int64_t v12 = (char *)sub_10000421C((uint64_t)&v36, v11);
        }
        else {
          int64_t v12 = 0;
        }
        int v13 = (void **)&v12[8 * v9];
        char *v13 = v6;
        int v8 = v13 + 1;
        unint64_t v15 = keys;
        int64_t v14 = v35;
        if (v35 != keys)
        {
          do
          {
            unint64_t v16 = *--v14;
            *--int v13 = v16;
          }
          while (v14 != v15);
          int64_t v14 = keys;
        }
        keys = v13;
        uint64_t v35 = v8;
        uint64_t v36 = (void **)&v12[8 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        char *v35 = v6;
        int v8 = v7 + 1;
      }
      uint64_t v35 = v8;
      uint64_t v17 = v4[1];
      uint64_t v18 = v32;
      if (v32 >= v33)
      {
        uint64_t v20 = v32 - values;
        if ((unint64_t)(v20 + 1) >> 61) {
          sub_100004204();
        }
        unint64_t v21 = ((char *)v33 - (char *)values) >> 2;
        if (v21 <= v20 + 1) {
          unint64_t v21 = v20 + 1;
        }
        if ((unint64_t)((char *)v33 - (char *)values) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v23 = (char *)sub_10000421C((uint64_t)&v33, v22);
        }
        else {
          uint64_t v23 = 0;
        }
        int v24 = (void **)&v23[8 * v20];
        char *v24 = v17;
        uint64_t v19 = v24 + 1;
        int v26 = values;
        uint64_t v25 = v32;
        if (v32 != values)
        {
          do
          {
            uint64_t v27 = *--v25;
            *--int v24 = v27;
          }
          while (v25 != v26);
          uint64_t v25 = values;
        }
        values = v24;
        long long v32 = v19;
        unint64_t v33 = (void **)&v23[8 * v22];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        void *v32 = v17;
        uint64_t v19 = v18 + 1;
      }
      long long v32 = v19;
      v4 += 2;
    }
    while (v4 != (void **)v5);
  }
  CFDictionaryRef v28 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v28)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (values)
  {
    long long v32 = values;
    operator delete(values);
  }
  if (keys)
  {
    uint64_t v35 = keys;
    operator delete(keys);
  }
  return v28;
}

void sub_10000CFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  __cxa_free_exception(v13);
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_10000D018(void **a1, unint64_t a2)
{
  size_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_100004204();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    size_t v6 = (char *)sub_10000421C(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    int64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_10000D0C0(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return a1;
}

void sub_10000D148(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

const void **sub_10000D178(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

char *sub_10000D1AC(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100004204();
  }
  uint64_t result = (char *)sub_10000D200((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_10000D200(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100004110();
  }
  return operator new(24 * a2);
}

char *sub_10000D248(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  unint64_t v11 = __dst;
  int64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    size_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1000302DC(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      size_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      int64_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10000D308((uint64_t)v9);
  return v4;
}

void sub_10000D2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10000D308(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10000D340(a1);
  }
  return a1;
}

void sub_10000D340(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void sub_10000D388(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10000D3DC((uint64_t *)v2);
    CFTypeID v3 = **a1;
    operator delete(v3);
  }
}

void sub_10000D3DC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_10000D42C(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_10000D5A4((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_100004204();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_10000D1AC((void *)a1, v11);
    int64_t v12 = sub_10000D5E0(v8, (long long *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_10000D6A0(__str, v13, v9);
    int64_t v12 = sub_10000D5E0(v8, (long long *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_10000D6A0(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_10000D594(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10000D59C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10000D5A4(uint64_t *a1)
{
  if (*a1)
  {
    sub_10000D3DC(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_10000D5E0(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  unint64_t v11 = __dst;
  int64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    size_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1000302DC(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      size_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      int64_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10000D308((uint64_t)v9);
  return v4;
}

void sub_10000D68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *sub_10000D6A0(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

char *sub_10000D700(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    sub_10000D1AC(result, a4);
    uint64_t result = sub_10000D5E0((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_10000D768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10000D388(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10000D788(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10000D800((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10000D800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_10000D8A0((uint64_t)v12);
  return a6;
}

uint64_t sub_10000D8A0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10000D8D8(a1);
  }
  return a1;
}

void sub_10000D8D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_10000D920(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10000D958(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *sub_10000D9B0(void *a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v5;
  uint64_t v6 = *a3;
  if (v6) {
    CFRetain(v6);
  }
  a1[1] = v6;
  return a1;
}

uint64_t sub_10000DA10(uint64_t a1, CFTypeRef *a2, char *a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v5;
  sub_10000DA78((CFStringRef *)(a1 + 8), a3);
  return a1;
}

void sub_10000DA64(_Unwind_Exception *a1)
{
  sub_10000D178(v1);
  _Unwind_Resume(a1);
}

CFStringRef *sub_10000DA78(CFStringRef *a1, char *a2)
{
  sub_10000A1B4(__p, a2);
  if ((v9 & 0x80u) == 0) {
    CFTypeID v3 = __p;
  }
  else {
    CFTypeID v3 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    CFIndex v4 = v9;
  }
  else {
    CFIndex v4 = (CFIndex)__p[1];
  }
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *a1 = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_10000DB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*v15) {
    CFRelease(*v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000DB7C(const void **a1, const void *a2)
{
  CFIndex v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void *sub_10000DBB4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10000DC30(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10000DC14(_Unwind_Exception *exception_object)
{
  CFTypeID v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10000DC30(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_100004204();
  }
  uint64_t result = (char *)sub_10000A17C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t sub_10000DC74(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100004068();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_10000DCFC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10000DD18()
{
  *(void *)&long long v2 = @"EMDE_ALLOWED_KEYWORDS_SINGLE_EVENT";
  *((void *)&v2 + 1) = @"EMDE_NEW_LINE_SEPARATOR";
  CFStringRef v3 = @"EMDE_EVENT_SEPARATOR";
  CFStringRef v4 = @"EMDE_HOTEL_BOOKING_START_DATE_TOKEN";
  CFStringRef v5 = @"EMDE_HOTEL_BOOKING_END_DATE_TOKEN";
  CFStringRef v6 = @"EMDE_BEAM_WIDTH";
  CFStringRef v7 = @"EMDE_MAX_INPUT_LEN";
  CFStringRef v8 = @"EMDE_SEPARATOR_TOKEN";
  CFStringRef v9 = @"EMDE_VOCAB_SIZE";
  CFStringRef v10 = @"EMDE_DATE_DECODER_LEN";
  CFStringRef v11 = @"EMDE_TITLE_DECODER_LEN";
  CFStringRef v12 = @"EMDE_DATE_LENGTH_PENALTY";
  CFStringRef v13 = @"EMDE_TITLE_LENGTH_PENALTY";
  CFStringRef v14 = @"EMDE_DEFAULT_TOKEN_THRESHOLD";
  CFStringRef v15 = @"EMDE_BEAM_VALIDATION_REQUIRED";
  v16[0] = @"EMDE_ASSET_FOLDER_PATH";
  v16[1] = @"EMDE_UNILM_MODEL_FILE";
  v16[2] = @"EMDE_SPIECE_MODEL_FILE";
  CFStringRef v17 = @"EMDE_VOCAB_FILE";
  qword_1000B6568 = +[NSArray arrayWithObjects:&v2 count:19];
  *(void *)&long long v2 = @"EMDE_TITLE_THRESHOLD";
  *((void *)&v2 + 1) = @"EMDE_DATE_THRESHOLD";
  CFStringRef v3 = @"EMDE_TOKENISER_VERSION";
  CFStringRef v4 = @"EMDE_TOKENISER_UPPERCASE_TOKEN_ID";
  CFStringRef v5 = @"EMDE_COLON_TOKEN_ID";
  CFStringRef v6 = @"EMDE_EOS_TOKEN_ID";
  CFStringRef v7 = @"EMDE_DATE_TRIGGER_TOKEN_ID";
  CFStringRef v8 = @"EMDE_TITLE_TRIGGER_TOKEN_ID";
  CFStringRef v9 = @"EMDE_EARLY_STOPPING_PATIENCE";
  CFStringRef v10 = @"EMDE_ALLOWED_KEYWORDS_CONDITIONAL";
  CFStringRef v11 = @"EMDE_ALLOWED_KEYWORDS_DUAL_EVENT";
  CFStringRef v12 = @"EMDE_VALIDATE_ONLY_ALLOWED_PREFIX";
  CFStringRef v13 = @"EMDE_DISABLE_OVS_VALIDATION";
  CFStringRef v14 = @"EMDE_DISCARD_TITLE_BEAMS_WITH_DATES";
  qword_1000B6570 = +[NSArray arrayWithObjects:&v2 count:14];
  sub_10000A1B4(&v2, " ");
  sub_10000A1B4(&v4, ".");
  sub_10000A1B4(&v7, ",");
  sub_10000A1B4(&v10, "@");
  sub_10000A1B4(&v13, "!");
  sub_10000A1B4(v16, "-");
  sub_10000A1B4(&v17, ":");
  sub_10000A1B4(v18, "\"");
  sub_10000A1B4(v19, "'");
  sub_10000A1B4(v20, "(");
  sub_10000A1B4(v21, "_");
  qword_1000B6578 = 0;
  qword_1000B6580 = 0;
  qword_1000B6588 = 0;
  qword_1000B6578 = (uint64_t)operator new(0x108uLL);
  qword_1000B6580 = qword_1000B6578;
  qword_1000B6588 = qword_1000B6578 + 264;
  qword_1000B6580 = (uint64_t)sub_10000D248((uint64_t)&qword_1000B6588, &v2, &v22, (char *)qword_1000B6578);
  uint64_t v1 = 264;
  do
  {
    if (*((char *)&v2 + v1 - 1) < 0) {
      operator delete(*(void **)((char *)&v2 + v1 - 24));
    }
    v1 -= 24;
  }
  while (v1);
  __cxa_atexit((void (*)(void *))sub_10000A268, &qword_1000B6578, (void *)&_mh_execute_header);
  qword_1000B6598 = 0;
  qword_1000B65A0 = 0;
  qword_1000B6590 = 0;
  __cxa_atexit((void (*)(void *))sub_10000A268, &qword_1000B6590, (void *)&_mh_execute_header);
}

void sub_10000E0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  qword_1000B6580 = v11;
  sub_10000D388(&a9);
  uint64_t v13 = 264;
  while (1)
  {
    if (*(&a11 + v13 - 1) < 0) {
      operator delete(*(void **)(&a11 + v13 - 24));
    }
    v13 -= 24;
    if (!v13) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_10000E398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000F634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_10000FA68(void (__cdecl ***a1)(std::istringstream *__hidden this), const std::string *a2, int a3))(std::istringstream *__hidden this)
{
  uint64_t v6 = (uint64_t)(a1 + 2);
  *a1 = v8;
  *(void *)((char *)*(v8 - 3) + (void)a1) = v7;
  a1[1] = 0;
  CFStringRef v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  sub_100011B84(v6, a2, a3 | 8);
  return a1;
}

void sub_10000FBC4(_Unwind_Exception *a1)
{
}

uint64_t *sub_10000FBEC(uint64_t *a1, uint64_t a2)
{
  std::istream::sentry::sentry();
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  CFStringRef v7 = std::locale::use_facet(&v19, &std::ctype<char>::id);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  CFStringRef v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    uint64_t v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    CFStringRef v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    CFStringRef v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_10000FE0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x10000FDC8);
  }
  __cxa_rethrow();
}

void sub_10000FEA8(_Unwind_Exception *a1)
{
}

uint64_t sub_10000FEBC(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

void sub_100010538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100010D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100011328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, const void *a17)
{
  operator delete(v18);
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  sub_10000DB7C(&a17, 0);

  _Unwind_Resume(a1);
}

void sub_100011724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,const void *a23)
{
  sub_10000DB7C(&a23, 0);
  _Unwind_Resume(a1);
}

void sub_10001183C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EMDEModelWrapper;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void *sub_1000119FC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10000DC30(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100011A5C(_Unwind_Exception *exception_object)
{
  CFStringRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100011A78(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  CFStringRef v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_100004204();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_10000DC30(v7, v11);
    int v13 = (char *)v7[1];
    CFStringRef v12 = (void **)(v7 + 1);
    CFStringRef v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      std::locale v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  CFStringRef v12 = (void **)(result + 8);
  CFStringRef v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    CFStringRef v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    std::locale v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *CFStringRef v12 = &v9[v17];
  return result;
}

uint64_t sub_100011B84(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_100011C24(a1);
  return a1;
}

void sub_100011C00(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_100011C24(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

char *sub_100011D38(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  std::string::size_type v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    int v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      sub_100004204();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)sub_10000A17C(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    CFDictionaryRef v28 = &v18[4 * v15];
    __p = v18;
    uint64_t v34 = v28;
    uint64_t v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    long long v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)CFDictionaryRef v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    uint64_t v35 = v30;
    unint64_t v5 = sub_100011F48((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    unint64_t v21 = &__src[4 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    int v24 = &v5[4 * a5];
    uint64_t v25 = &v23[-4 * a5];
    int v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      int v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)int v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  unint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_100011F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100011F48(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(char **)(a2 + 8);
  int v6 = (char *)*a1;
  std::string::size_type v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    std::string::size_type v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    std::string::size_type v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  int v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *sub_100012010(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10000DC30(a1, a2);
    int v6 = (_DWORD *)a1[1];
    std::string::size_type v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_100012078(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000121E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100012614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _Unwind_Resume(a1);
}

void sub_100012B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10001309C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000134AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100013954(_Unwind_Exception *a1)
{
  uint64_t v8 = v5;

  _Unwind_Resume(a1);
}

void sub_100013E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26)
{
  _Block_object_dispose((const void *)(v32 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100013F60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100013F70(uint64_t a1)
{
}

uint64_t sub_100013F78(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(a1 + 32) extractEventFromMessage:*(void *)(a1 + 40) error:*(void *)(a1 + 56)];
  return _objc_release_x1();
}

uint64_t sub_100013FCC(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(a1 + 32) extractTitleFromMessage:*(void *)(a1 + 40) error:*(void *)(a1 + 56)];
  return _objc_release_x1();
}

uint64_t sub_100014024(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000ACB20;
  *(void *)(a1 + 8) = a2 + 16;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = off_1000ACC30;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = off_1000ACC30;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_10004CF14((void *)(a1 + 96));
  return a1;
}

void sub_1000140CC(_Unwind_Exception *a1)
{
  sub_1000140FC(v3);
  sub_1000140FC(v2);
  unint64_t v5 = *v1;
  void *v1 = 0;
  if (v5) {
    sub_10001860C((uint64_t)v1, v5);
  }
  _Unwind_Resume(a1);
}

void *sub_1000140FC(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = off_1000ACC30;
  if (result[3]) {
    operator delete[]();
  }
  return result;
}

uint64_t sub_100014160(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  *(void *)a1 = off_1000ACB20;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = off_1000ACC30;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::string::size_type v7 = (uint64_t *)(a1 + 96);
  *(void *)(a1 + 56) = off_1000ACC30;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_10004CF14((void *)(a1 + 96));
  sub_1000142A0(a1, a3, a4, &v9);
  sub_10004D13C(v7, &v9);
  sub_10004CF1C(&v9);
  return a1;
}

void sub_100014250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10004CF1C((uint64_t *)va);
  sub_10004CF1C(v5);
  sub_1000140FC(v4);
  sub_1000140FC(v3);
  std::string::size_type v7 = *v2;
  void *v2 = 0;
  if (v7) {
    sub_10001860C((uint64_t)v2, v7);
  }
  _Unwind_Resume(a1);
}

void *sub_1000142A0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = a2;
  unint64_t v9 = a3;
  uint64_t result = sub_100014948(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*a4)
  {
    sub_10004CF1C(a4);
    uint64_t result = sub_10004B1B8(&v8, 4uLL, a4);
    if (!*a4)
    {
      sub_10004CF1C(a4);
      uint64_t result = sub_100014948(v8, v9, (_DWORD *)(a1 + 92), a4);
      if (!*a4)
      {
        sub_10004CF1C(a4);
        uint64_t result = sub_10004B1B8(&v8, 4uLL, a4);
        if (!*a4)
        {
          sub_10004CF1C(a4);
          int v7 = 0;
          uint64_t result = sub_100014B44(v8, v9, &v7, a4);
          if (!*a4)
          {
            sub_10004CF1C(a4);
            uint64_t result = sub_10004B1B8(&v8, 4uLL, a4);
            if (!*a4)
            {
              sub_10004CF1C(a4);
              sub_100014D40();
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_100014908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100014E48((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100014948@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    int v6 = (void *)sub_10001752C((uint64_t)v8);
    sub_100018688(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_100018688(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v8, (uint64_t)") [", 3);
    sub_100018688(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_100018688(v8, (uint64_t)"] ", 2);
    sub_100014DB8(&v7, (uint64_t)a4);
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)std::ios::~ios();
  }
  else
  {
    *a3 = *a1;
    return sub_10004CF14(a4);
  }
}

void sub_100014B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100014B44@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    int v6 = (void *)sub_10001752C((uint64_t)v8);
    sub_100018688(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_100018688(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v8, (uint64_t)") [", 3);
    sub_100018688(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_100018688(v8, (uint64_t)"] ", 2);
    sub_100014DB8(&v7, (uint64_t)a4);
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)std::ios::~ios();
  }
  else
  {
    *a3 = *a1;
    return sub_10004CF14(a4);
  }
}

void sub_100014D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100014D40()
{
}

void sub_100014D94()
{
}

void sub_100014DB8(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    unint64_t v5 = v7;
  }
  else {
    unint64_t v5 = (unint64_t)__p[1];
  }
  sub_10004D080(a2, v3, v4, v5);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100014E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100014E48(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void *sub_100014F50(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 8);
  if (!v1
  {
    char v7 = 1;
    uint64_t v3 = sub_100018688(&std::cerr, (uint64_t)"model_interface.cc", 18);
    sub_100018688(v3, (uint64_t)"(", 1);
    uint64_t v4 = (void *)std::ostream::operator<<();
    unint64_t v5 = sub_100018688(v4, (uint64_t)") [", 3);
    int v6 = sub_100018688(v5, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    sub_100018688(v6, (uint64_t)"] ", 2);
    sub_1000176C4(&v7);
    return 0;
  }
  return result;
}

void sub_100015034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *sub_100015048(void *a1)
{
  *a1 = off_1000ACB20;
  sub_10004CF1C(a1 + 12);
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = off_1000ACC30;
  if (a1[10]) {
    operator delete[]();
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = off_1000ACC30;
  if (a1[6]) {
    operator delete[]();
  }
  uint64_t v2 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v2) {
    sub_10001860C((uint64_t)(a1 + 2), v2);
  }
  return a1;
}

const char *sub_100015130(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  }
  else {
    return "<unk>";
  }
}

const char *sub_1000151B4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  }
  else {
    return "<s>";
  }
}

const char *sub_100015238(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  }
  else {
    return "</s>";
  }
}

const char *sub_1000152BC(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  }
  else {
    return "<pad>";
  }
}

uint64_t sub_100015340(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  unsigned int v7 = 0;
  sub_1000153C4(a1 + 56, a2, (int *)&v7, a3, 0);
  uint64_t result = v7;
  if (v7 == -1)
  {
    sub_1000153C4(a1 + 24, a2, (int *)&v7, a3, 0);
    uint64_t result = v7;
    if (v7 == -1) {
      return *(unsigned int *)(a1 + 88);
    }
  }
  return result;
}

uint64_t sub_1000153C4(uint64_t result, unsigned char *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 16);
  unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      int v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7) {
        break;
      }
      if (!--a4) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v8 = *a2;
    if (*a2)
    {
      char v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8) {
          break;
        }
        int v10 = *v9++;
        int v8 = v10;
        if (!v10) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        int v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  int v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sub_100015474@<X0>(uint64_t a1@<X8>)
{
  if ((int)sub_10004A6A8() <= 2)
  {
    char v9 = 0;
    uint64_t v2 = sub_100018688(&std::cerr, (uint64_t)"model_interface.cc", 18);
    sub_100018688(v2, (uint64_t)"(", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    uint64_t v4 = sub_100018688(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_100018688(v4, (uint64_t)"LOG(", 4);
    unsigned int v6 = sub_100018688(v5, (uint64_t)"ERROR", 5);
    int v7 = sub_100018688(v6, (uint64_t)") ", 2);
    sub_100018688(v7, (uint64_t)"Not implemented.", 16);
    sub_1000176C4(&v9);
  }
  return sub_10004D080(a1, 12, "Not implemented.", 16);
}

void sub_10001554C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100015560@<X0>(uint64_t a1@<X8>)
{
  if ((int)sub_10004A6A8() <= 2)
  {
    char v9 = 0;
    uint64_t v2 = sub_100018688(&std::cerr, (uint64_t)"model_interface.cc", 18);
    sub_100018688(v2, (uint64_t)"(", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    uint64_t v4 = sub_100018688(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_100018688(v4, (uint64_t)"LOG(", 4);
    unsigned int v6 = sub_100018688(v5, (uint64_t)"ERROR", 5);
    int v7 = sub_100018688(v6, (uint64_t)") ", 2);
    sub_100018688(v7, (uint64_t)"Not implemented.", 16);
    sub_1000176C4(&v9);
  }
  return sub_10004D080(a1, 12, "Not implemented.", 16);
}

void sub_100015638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10001564C(uint64_t a1)
{
  __n128 v51 = 0;
  uint64_t v52 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = &v51;
  uint64_t v47 = &v48;
  unint64_t v48 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v45 = (uint64_t *)v46;
  LOBYTE(v53) = 0;
  sub_100018AB4(&__p, 0x100uLL, (unsigned __int8 *)&v53);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*(_DWORD *)(a1 + 88) == -1)
    {
      sub_10004D080(&v53, 13, "unk is not defined.", 19);
      sub_10004D13C((uint64_t *)(a1 + 96), &v53);
    }
    else
    {
      uint64_t v25 = *(unsigned char **)(v3 + 80);
      if (!v25) {
        uint64_t v25 = &unk_1000B6858;
      }
      if (!v25[248]
        || (*(void *)&long long v53 = __p,
            DWORD2(v53) = 0,
            sub_100019120((uint64_t)&v53, v44, (uint64_t)&v41),
            v41.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v44 >> 6))
        && LODWORD(v41.__r_.__value_.__r.__words[1]) == (v44 & 0x3F))
      {
        if (!v52
          || (sub_100015F1C(a1 + 24, &v50, (uint64_t)&v53),
              sub_10004D13C((uint64_t *)(a1 + 96), &v53),
              sub_10004CF1C((uint64_t *)&v53),
              (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v53, a1),
              uint64_t v26 = v53,
              sub_10004CF1C((uint64_t *)&v53),
              !v26))
        {
          if (!v49
            || (sub_100015F1C(a1 + 56, &v47, (uint64_t)&v53),
                sub_10004D13C((uint64_t *)(a1 + 96), &v53),
                sub_10004CF1C((uint64_t *)&v53),
                (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v53, a1),
                uint64_t v27 = v53,
                sub_10004CF1C((uint64_t *)&v53),
                !v27))
          {
            sub_100016400();
          }
        }
        goto LABEL_69;
      }
      sub_10004D13C((uint64_t *)(a1 + 96), &v53);
    }
LABEL_68:
    sub_10004CF1C((uint64_t *)&v53);
    goto LABEL_69;
  }
  int v4 = 0;
  while (1)
  {
    uint64_t v5 = sub_1000177A0(v3 + 56, v4);
    uint64_t v6 = v5;
    unint64_t v7 = *(void *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(void *)(v7 + 8))
      {
LABEL_50:
        sub_10004D080(&v53, 13, "piece must not be empty.", 24);
        sub_10004D13C((uint64_t *)(a1 + 96), &v53);
        goto LABEL_68;
      }
    }
    else if (!*(unsigned char *)(v7 + 23))
    {
      goto LABEL_50;
    }
    unsigned int v9 = *(_DWORD *)(v5 + 60);
    BOOL v10 = v9 > 5;
    int v11 = (1 << v9) & 0x32;
    BOOL v12 = v10 || v11 == 0;
    int v13 = (uint64_t **)(v12 ? &v47 : &v50);
    if ((v8 & 0x80) != 0)
    {
      unint64_t v14 = *(void *)v7;
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else
    {
      unint64_t v14 = v7;
    }
    *(void *)&long long v53 = v14;
    *((void *)&v53 + 1) = v8;
    LODWORD(v54) = v4;
    sub_100018D34(v13, (uint64_t)&v53, (uint64_t)&v53);
    if ((v15 & 1) == 0) {
      break;
    }
    int v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      unint64_t v17 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        unint64_t v19 = *(void *)v17;
        uint64_t v18 = *(void *)(v17 + 8);
      }
      else
      {
        uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
        unint64_t v19 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(void *)&long long v53 = v19;
      *((void *)&v53 + 1) = v18;
      sub_10001909C(&v45, (uint64_t)&v53, &v53);
      int v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      uint64_t v20 = *(unsigned char **)(v3 + 80);
      if (!v20) {
        uint64_t v20 = &unk_1000B6858;
      }
      if (!v20[248])
      {
        std::operator+<char>();
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        int64_t v54 = v35->__r_.__value_.__r.__words[2];
        long long v53 = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0) {
          uint64_t v37 = (const char *)&v53;
        }
        else {
          uint64_t v37 = (const char *)v53;
        }
LABEL_78:
        size_t v40 = strlen(v37);
        sub_10004D080(&v42, 13, v37, v40);
        sub_10004D13C((uint64_t *)(a1 + 96), &v42);
        sub_10004CF1C(&v42);
        if (SHIBYTE(v54) < 0) {
          operator delete((void *)v53);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v34 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      unint64_t v21 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        uint64_t v23 = *(void **)v21;
        size_t v22 = *(void *)(v21 + 8);
      }
      else
      {
        size_t v22 = *(unsigned __int8 *)(v21 + 23);
        uint64_t v23 = (void *)(*(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      unsigned int v24 = sub_100015DCC(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        uint64_t v38 = std::string::append(&v41, " is invalid.");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        int64_t v54 = v38->__r_.__value_.__r.__words[2];
        long long v53 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0) {
          uint64_t v37 = (const char *)&v53;
        }
        else {
          uint64_t v37 = (const char *)v53;
        }
        goto LABEL_78;
      }
      *(void *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*(_DWORD *)(a1 + 88) & 0x80000000) == 0)
      {
        sub_10004D080(&v53, 13, "unk is already defined.", 23);
        sub_10004D13C((uint64_t *)(a1 + 96), &v53);
        goto LABEL_68;
      }
      *(_DWORD *)(a1 + 88) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64)) {
      goto LABEL_38;
    }
  }
  unint64_t v28 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v28 + 23) >= 0) {
    size_t v29 = *(unsigned __int8 *)(v28 + 23);
  }
  else {
    size_t v29 = *(void *)(v28 + 8);
  }
  long long v30 = &v53;
  sub_10000DC74((uint64_t)&v53, v29 + 20);
  if (v54 < 0) {
    long long v30 = (long long *)v53;
  }
  if (v29)
  {
    if (*(char *)(v28 + 23) >= 0) {
      int v31 = (const void *)v28;
    }
    else {
      int v31 = *(const void **)v28;
    }
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, " is already defined.");
  if (v54 >= 0) {
    uint64_t v32 = (const char *)&v53;
  }
  else {
    uint64_t v32 = (const char *)v53;
  }
  size_t v33 = strlen(v32);
  sub_10004D080(&v41, 13, v32, v33);
  sub_10004D13C((uint64_t *)(a1 + 96), &v41);
  sub_10004CF1C((uint64_t *)&v41);
  if (SHIBYTE(v54) < 0)
  {
    uint64_t v34 = (void *)v53;
LABEL_82:
    operator delete(v34);
  }
LABEL_69:
  if (__p) {
    operator delete(__p);
  }
  sub_100018A60((uint64_t)&v45, v46[0]);
  sub_100018A60((uint64_t)&v47, v48);
  sub_100018A60((uint64_t)&v50, v51);
}

void sub_100015CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,char a22,void *a23,uint64_t a24,char a25,void *a26)
{
  sub_10004CF1C(&a15);
  if (*(char *)(v26 - 89) < 0) {
    operator delete(*(void **)(v26 - 112));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  sub_100018A60((uint64_t)&a19, a20);
  sub_100018A60((uint64_t)&a22, a23);
  sub_100018A60((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sub_100015DCC(void *__src, size_t __len)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000B65C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000B65C8))
  {
    sub_100016D14();
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_100004068();
  }
  int v4 = (void *)qword_1000B65C0;
  if (__len >= 0x17)
  {
    size_t v6 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v6 = __len | 7;
    }
    size_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = (void *)__len;
    unint64_t v12 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_9;
  }
  HIBYTE(v12) = __len;
  uint64_t v5 = __dst;
  if (__len) {
LABEL_9:
  }
    memmove(v5, __src, __len);
  *((unsigned char *)v5 + __len) = 0;
  uint64_t v8 = sub_100019250(v4, (unsigned __int8 *)__dst);
  unsigned int v9 = v8;
  if (SHIBYTE(v12) < 0)
  {
    operator delete(__dst[0]);
    if (v9) {
      return v9[40];
    }
  }
  else if (v8)
  {
    return v9[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_100015EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_100015F1C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[2])
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    long long v36 = 0;
    __p = 0;
    uint64_t v32 = 0;
    size_t v33 = 0;
    int v4 = a2 + 1;
    uint64_t v3 = (void *)*a2;
    while (1)
    {
      uint64_t v5 = v3[4];
      size_t v6 = v35;
      if (v35 >= v36)
      {
        uint64_t v8 = (v35 - (unsigned char *)v34) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          sub_100004204();
        }
        unint64_t v9 = (v36 - (unsigned char *)v34) >> 2;
        if (v9 <= v8 + 1) {
          unint64_t v9 = v8 + 1;
        }
        if ((unint64_t)(v36 - (unsigned char *)v34) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          int v11 = (char *)sub_10000421C((uint64_t)&v36, v10);
        }
        else {
          int v11 = 0;
        }
        unint64_t v12 = &v11[8 * v8];
        *(void *)unint64_t v12 = v5;
        size_t v7 = v12 + 8;
        unint64_t v14 = (char *)v34;
        int v13 = v35;
        if (v35 != v34)
        {
          do
          {
            uint64_t v15 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          int v13 = (char *)v34;
        }
        uint64_t v34 = v12;
        uint64_t v35 = v7;
        long long v36 = &v11[8 * v10];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)uint64_t v35 = v5;
        size_t v7 = v6 + 8;
      }
      uint64_t v35 = v7;
      int v16 = v32;
      if (v32 >= v33)
      {
        uint64_t v18 = __p;
        uint64_t v19 = (v32 - __p) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          sub_100004204();
        }
        uint64_t v21 = v33 - __p;
        if ((v33 - __p) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          uint64_t v23 = (char *)sub_10000A17C((uint64_t)&v33, v22);
          uint64_t v18 = __p;
          int v16 = v32;
        }
        else
        {
          uint64_t v23 = 0;
        }
        unsigned int v24 = &v23[4 * v19];
        *(_DWORD *)unsigned int v24 = *((_DWORD *)v3 + 12);
        unint64_t v17 = v24 + 4;
        while (v16 != v18)
        {
          int v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        __p = v24;
        size_t v33 = &v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v32 = *((_DWORD *)v3 + 12);
        unint64_t v17 = v32 + 4;
      }
      uint64_t v32 = v17;
      uint64_t v26 = (void *)v3[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v3[2];
          BOOL v28 = *v27 == (void)v3;
          uint64_t v3 = v27;
        }
        while (!v28);
      }
      uint64_t v3 = v27;
      if (v27 == v4) {
        sub_100016DFC(a1, (v35 - (unsigned char *)v34) >> 3, (unint64_t)v34, 0, (unint64_t)__p, 0);
      }
    }
  }
  return sub_10004D080(a3, 13, "no pieces are loaded.", 21);
}

void sub_1000163A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_100016400()
{
}

void sub_100016454()
{
}

void sub_100016478(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v4 = &v32;
  }
  else {
    int v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  LODWORD(v4->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 88);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v32;
  }
  else {
    uint64_t v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v7 = &v32;
  }
  else {
    size_t v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 92);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v32;
  }
  else {
    uint64_t v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  sub_10001DEB0(*(void *)(a1 + 16), &v32);
  int v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  int v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0) {
    int v12 = v10;
  }
  else {
    int v12 = v11;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = &__p;
  }
  else {
    unint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v16 = &v32;
  }
  else {
    int v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sub_10004B154(a2);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v18 = *(const std::string::value_type **)(a1 + 40);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  std::string::size_type v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &__p;
  }
  else {
    uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v22 = &__p;
  }
  else {
    unint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v18, v20);
  sub_10004B154(a2);
  uint64_t v26 = a1 + 64;
  uint64_t v24 = *(void *)(a1 + 64);
  int v25 = *(const std::string::value_type **)(v26 + 8);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  std::string::size_type v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v28 = &__p;
  }
  else {
    BOOL v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v29 = &__p;
  }
  else {
    size_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_100016740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000167B8(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  size_t v6 = __s1;
  uint64_t v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1) {
      return;
    }
    size_t v40 = 0;
    int v41 = 0;
    uint64_t v42 = a5 + 2;
    uint64_t v43 = __s1;
    while (1)
    {
      int v44 = asc_1000A0F64[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44) {
        int v44 = v8 - v43;
      }
      uint64_t v45 = v44;
      if (v44 == 3)
      {
        int v46 = memcmp(v43, "▁", 3uLL);
        int v47 = v46 == 0;
        if (v43 == v6) {
          goto LABEL_62;
        }
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          int v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            uint64_t v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60) {
              sub_100004204();
            }
            uint64_t v49 = *v42 - (void)*a5;
            uint64_t v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1)) {
              uint64_t v50 = v48 + 1;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v50;
            }
            uint64_t v52 = (char *)sub_100019218((uint64_t)(a5 + 2), v51);
            int64_t v54 = (unsigned __int8 **)&v52[16 * v48];
            char *v54 = v43;
            v54[1] = 0;
            __int16 v56 = (char *)*a5;
            long long v55 = (char *)a5[1];
            v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              long long v55 = (char *)*a5;
            }
            size_t v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *size_t v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if (v41)
        {
          int v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        int v47 = 0;
        goto LABEL_62;
      }
      int v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      int v41 = v47;
      if (v43 >= v8) {
        return;
      }
    }
  }
  if (a2 >= 1)
  {
    std::string::size_type v9 = a5 + 2;
    int v10 = sub_100019218((uint64_t)(a5 + 2), 1uLL);
    int v12 = (unsigned __int8 **)&v10[2 * v11];
    void *v10 = v6;
    v10[1] = 0;
    int v13 = (unsigned __int8 **)(v10 + 2);
    std::string::size_type v15 = (char *)*a5;
    unint64_t v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      unint64_t v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14) {
      operator delete(v14);
    }
    BOOL v16 = 0;
    a5[1] = v13;
    do
    {
      int v17 = asc_1000A0F64[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17) {
        int v17 = v8 - v6;
      }
      uint64_t v18 = v17;
      if (v17 == 3)
      {
        BOOL v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19) {
          goto LABEL_18;
        }
      }
      else
      {
        BOOL v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          uint64_t v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60) {
            sub_100004204();
          }
          uint64_t v21 = *v9 - (void)*a5;
          uint64_t v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1)) {
            uint64_t v22 = v20 + 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          uint64_t v24 = (char *)sub_100019218((uint64_t)(a5 + 2), v23);
          uint64_t v26 = (unsigned __int8 **)&v24[16 * v20];
          *uint64_t v26 = v6;
          v26[1] = 0;
          BOOL v28 = (char *)*a5;
          std::string::size_type v27 = (char *)a5[1];
          size_t v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            std::string::size_type v27 = (char *)*a5;
          }
          int v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          char *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        BOOL v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      BOOL v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          uint64_t v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60) {
            sub_100004204();
          }
          uint64_t v31 = *v9 - (void)*a5;
          uint64_t v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1)) {
            uint64_t v32 = v30 + 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          uint64_t v34 = (char *)sub_100019218((uint64_t)(a5 + 2), v33);
          long long v36 = (unsigned __int8 **)&v34[16 * v30];
          *long long v36 = v6;
          v36[1] = 0;
          uint64_t v38 = (char *)*a5;
          uint64_t v37 = (char *)a5[1];
          long long v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            uint64_t v37 = (char *)*a5;
          }
          int v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          char *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_100016C00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100016C34@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = a1;
  return sub_100016C64("<0x%02X>", &v3, a2);
}

uint64_t sub_100016C64@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = snprintf(0, 0, __format, *a2);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (char *)a3;
  }
  else {
    uint64_t v8 = *(char **)a3;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_100016CF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100016D14()
{
}

void sub_100016DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100016DFC(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  void v12[3] = a5;
  int v6 = a6;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  int v11 = 0;
  sub_100019354(&v6, v12);
}

void sub_100016F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100016F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004D138(a2, a1 + 96);
}

uint64_t sub_100016F34(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_100016F3C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_10004A6A8();
  if ((int)result <= 2)
  {
    char v9 = 0;
    unsigned __int8 v3 = sub_100018688(&std::cerr, (uint64_t)"model_interface.h", 17);
    sub_100018688(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = sub_100018688(v4, (uint64_t)") ", 2);
    int v6 = sub_100018688(v5, (uint64_t)"LOG(", 4);
    long long v7 = sub_100018688(v6, (uint64_t)"ERROR", 5);
    long long v8 = sub_100018688(v7, (uint64_t)") ", 2);
    sub_100018688(v8, (uint64_t)"Not implemented.", 16);
    uint64_t result = (uint64_t)sub_1000176C4(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_100017004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100017018@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_10004A6A8();
  if ((int)result <= 2)
  {
    char v9 = 0;
    unsigned __int8 v3 = sub_100018688(&std::cerr, (uint64_t)"model_interface.h", 17);
    sub_100018688(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = sub_100018688(v4, (uint64_t)") ", 2);
    int v6 = sub_100018688(v5, (uint64_t)"LOG(", 4);
    long long v7 = sub_100018688(v6, (uint64_t)"ERROR", 5);
    long long v8 = sub_100018688(v7, (uint64_t)") ", 2);
    sub_100018688(v8, (uint64_t)"Not implemented.", 16);
    uint64_t result = (uint64_t)sub_1000176C4(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_1000170E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1000170F4(void *a1@<X8>)
{
  if ((int)sub_10004A6A8() <= 2)
  {
    LOBYTE(__p) = 0;
    uint64_t v2 = sub_100018688(&std::cerr, (uint64_t)"model_interface.h", 17);
    sub_100018688(v2, (uint64_t)"(", 1);
    unsigned __int8 v3 = (void *)std::ostream::operator<<();
    int v4 = sub_100018688(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_100018688(v4, (uint64_t)"LOG(", 4);
    int v6 = sub_100018688(v5, (uint64_t)"ERROR", 5);
    long long v7 = sub_100018688(v6, (uint64_t)") ", 2);
    sub_100018688(v7, (uint64_t)"Not implemented.", 16);
    sub_1000176C4(&__p);
  }
  std::string __p = 0;
  long long v10 = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v8 = (char *)operator new(0x20uLL);
  *a1 = v8;
  a1[1] = v8;
  a1[2] = v8 + 32;
  a1[1] = sub_10001830C((uint64_t)(a1 + 2), (uint64_t)&__p, (uint64_t)&v13, (uint64_t)v8);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_100017240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v15 = v14;
  *(void *)(v13 + 8) = v15;
  sub_1000184DC(&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_100017284()
{
  if ((int)sub_10004A6A8() <= 2)
  {
    char v7 = 0;
    v0 = sub_100018688(&std::cerr, (uint64_t)"model_interface.h", 17);
    sub_100018688(v0, (uint64_t)"(", 1);
    uint64_t v1 = (void *)std::ostream::operator<<();
    uint64_t v2 = sub_100018688(v1, (uint64_t)") ", 2);
    unsigned __int8 v3 = sub_100018688(v2, (uint64_t)"LOG(", 4);
    int v4 = sub_100018688(v3, (uint64_t)"ERROR", 5);
    uint64_t v5 = sub_100018688(v4, (uint64_t)") ", 2);
    sub_100018688(v5, (uint64_t)"Not implemented.", 16);
    sub_1000176C4(&v7);
  }
  return 0.0;
}

void sub_100017344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100017358()
{
  return 0;
}

uint64_t sub_100017360()
{
  return 0;
}

uint64_t sub_100017368()
{
  return 0;
}

uint64_t sub_100017370()
{
  return 0;
}

uint64_t sub_100017378(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))();
}

uint64_t sub_1000173A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_1000173D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))();
}

uint64_t sub_1000173F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 112))();
}

uint64_t sub_100017420(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))();
}

uint64_t sub_100017448(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 128))();
}

uint64_t sub_100017470(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 136))();
}

uint64_t sub_100017498(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 144))();
}

uint64_t sub_1000174C0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

BOOL sub_1000174F0(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

uint64_t sub_10001752C(uint64_t a1)
{
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v2;
  int v4 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v4, (void *)(a1 + 8));
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_10001769C(_Unwind_Exception *a1)
{
}

unsigned char *sub_1000176C4(unsigned char *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                              + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
  uint64_t v2 = std::locale::use_facet(&v4, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*a1) {
    sub_10004CD64();
  }
  return a1;
}

void sub_100017784(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_1000177A0(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    std::locale v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_100017860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100017880(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_100017B0C(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_100017FB8(a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  int v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((unsigned char *)i + 40) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_100018060(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  std::string::size_type v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *std::string::size_type v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  *int v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    std::string::size_type v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_100017AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_1000182AC(v11, v10);
  _Unwind_Resume(a1);
}

unint64_t sub_100017B0C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_100017B4C((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_100017B4C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      BOOL v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_100017EF8(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_100017E4C(a2, a3);
  }
  else
  {
    return sub_100017D54(a2, a3);
  }
}

unint64_t sub_100017D54(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_100017E4C(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_100017EF8(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_100017FB8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void sub_100018060(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_100018150(a1, prime);
    }
  }
}

void sub_100018150(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_100004110();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1000182AC(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_10001830C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_1000183D4((char *)v4, *(long long **)v6, *(long long **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_100018454((uint64_t)v8);
  return v4;
}

void sub_1000183C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_1000183D4(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10000D1AC(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_100018438(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100018454(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10001848C(a1);
  }
  return a1;
}

void sub_10001848C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unint64_t v5 = *(void **)(v3 - 32);
      v3 -= 32;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 24) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_1000184DC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100018530((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100018530(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 32);
      v4 -= 32;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 24) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_100018588(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000ACC30;
  if (a1[3]) {
    operator delete[]();
  }
  operator delete();
}

void sub_10001860C(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    operator delete();
  }
}

void *sub_100018688(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  if (v13)
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_10001882C(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_1000187C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::ostream::sentry::~sentry();
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1000187A4);
}

void sub_100018818(_Unwind_Exception *a1)
{
}

uint64_t sub_10001882C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_1000189B4(__p, v12, __c);
      char v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_100018998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000189B4(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_100004068();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_100018A60(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100018A60(a1, *a2);
    sub_100018A60(a1, a2[1]);
    operator delete(a2);
  }
}

void *sub_100018AB4(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100018B88(a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          sub_100018BD0(&v13, a2);
        }
        else {
          sub_100018C84((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_100018B88(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_100004204();
  }
  uint64_t result = sub_10000421C((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *sub_100018BD0(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *uint64_t result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *uint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_100018C84(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_OWORD *sub_100018D34(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void **)sub_100018DC0((uint64_t)a1, &v9, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    sub_100018E60(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_100018DC0(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!sub_100018EB8(v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        int v4 = (void *)*v8;
        unint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_100018EB8(v7, v9, a3)) {
        break;
      }
      unint64_t v5 = v8 + 1;
      int v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_100018E60(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_100018F04(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_100018EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(const void **)a2;
  size_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(const void **)a3;
  size_t v6 = *(void *)(a3 + 8);
  if (v6 >= v4) {
    size_t v7 = v4;
  }
  else {
    size_t v7 = *(void *)(a3 + 8);
  }
  int v8 = memcmp(v3, v5, v7);
  if (v4 < v6) {
    unsigned int v9 = -1;
  }
  else {
    unsigned int v9 = 1;
  }
  if (v4 == v6) {
    unsigned int v9 = 0;
  }
  if (v8) {
    unsigned int v9 = v8;
  }
  return v9 >> 31;
}

uint64_t *sub_100018F04(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      size_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unsigned int v9 = (uint64_t **)a2[2];
          }
          else
          {
            unsigned int v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            void *v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            unint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *sub_10001909C(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v5 = (void **)sub_100018DC0((uint64_t)a1, &v9, a2);
  int v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    int v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_100018E60(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t sub_100019120@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  size_t v4 = *(void **)result;
  if (!v3) {
    goto LABEL_9;
  }
  unint64_t v5 = (64 - v3);
  if (v5 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = (64 - v3);
  }
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    unint64_t v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(void *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(void *)uint64_t result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (unint64_t v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(void *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(void *)uint64_t result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F) {
          goto LABEL_12;
        }
      }
      unint64_t v8 = ~*v4;
    }
    unint64_t v7 = __rbit64(v8);
    goto LABEL_22;
  }
  uint64_t v9 = v3 + a2 - 63;
  if (v9 < 0) {
    uint64_t v9 = v3 + a2;
  }
  uint64_t v10 = v9 >> 6;
  unint64_t v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0) {
    unint64_t v11 = v10;
  }
  *(void *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void *sub_100019218(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100004110();
  }
  return operator new(16 * a2);
}

unsigned __int8 *sub_100019250(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_100017B0C((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_100017FB8(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void sub_100019354(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  if (a2[3])
  {
    uint64_t v3 = 0;
    memset(v2, 0, sizeof(v2));
    sub_100019914(a1, a2, (uint64_t *)v2);
  }
  sub_100019D5C((uint64_t)a1, a2);
}

void sub_100019434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_100019448(uint64_t *a1)
{
  if (*a1) {
    operator delete[]();
  }
  return a1;
}

uint64_t sub_100019494(uint64_t *a1)
{
  sub_1000194E0((uint64_t)a1, 0);
  uint64_t result = *a1;
  if (*a1) {
    operator delete[]();
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_1000194E0(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 > a2)
  {
    *(void *)(result + 8) = a2;
    unint64_t v2 = a2;
  }
  if (*(void *)(result + 16) < a2) {
    sub_100019540(result, a2);
  }
  if (v2 < a2) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

void sub_100019540(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void sub_100019680(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

const char *sub_1000196B8(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    return *(const char **)(a1 + 8);
  }
  else {
    return "";
  }
}

uint64_t *sub_1000196D0(uint64_t *a1)
{
  if (*a1) {
    operator delete[]();
  }
  return a1;
}

uint64_t sub_10001971C(uint64_t *a1)
{
  sub_100019768(a1, 0);
  uint64_t result = *a1;
  if (*a1) {
    operator delete[]();
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_100019768(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    unint64_t v4 = a2;
  }
  if (a1[2] < a2) {
    sub_1000197D8((uint64_t)a1, a2);
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

void sub_1000197D8(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void sub_100019914(void (**a1)(unint64_t, uint64_t), unint64_t *a2, uint64_t *a3)
{
  sub_10001A7C4(a3);
  if (*a2)
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = a2[2];
      uint64_t v8 = *(void *)(a2[1] + 8 * v6);
      if (v7)
      {
        unint64_t v9 = *(void *)(v7 + 8 * v6);
      }
      else
      {
        while (*(unsigned __int8 *)(v8 + v7++))
          ;
        unint64_t v9 = v7 - 1;
      }
      unint64_t v11 = a2[3];
      if (v11) {
        int v12 = *(_DWORD *)(v11 + 4 * v6);
      }
      else {
        int v12 = v6;
      }
      sub_10001A898(a3, v8, v9, v12);
      ++v6;
      if (*a1) {
        (*a1)(v6, *a2 + 1);
      }
    }
    while (v6 < *a2);
  }
  sub_10001ACD8((uint64_t)a3, 0);
  uint64_t v13 = *a3;
  char v14 = *(unsigned char *)(*a3 + 8);
  int v15 = *(_DWORD *)*a3;
  if (v14) {
    int v16 = (2 * *(unsigned __int8 *)(v13 + 9)) | (4 * v15);
  }
  else {
    int v16 = 2 * v15;
  }
  *(_DWORD *)a3[3] = v16 | *(unsigned __int8 *)(v13 + 10);
  *(unsigned char *)a3[6] = v14;
  sub_10001A5A4(a3);
  sub_10001A040(a3 + 15);
  sub_10001A040(a3 + 18);
  sub_10001A040(a3 + 21);
  sub_10001B130();
}

void sub_100019A3C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    v3 *= 2;
  }
  while (v4 < v2);
  if (*(void *)(a1 + 24) < v4) {
    sub_1000197D8(a1 + 8, v4);
  }
  operator new[]();
}

void sub_100019D5C(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    v3 *= 2;
  }
  while (v4 < v2);
  if (*(void *)(a1 + 24) < v4) {
    sub_1000197D8(a1 + 8, v4);
  }
  operator new[]();
}

uint64_t *sub_10001A004(uint64_t *a1)
{
  sub_10001A040(a1);
  return sub_10001A228(a1);
}

uint64_t sub_10001A040(uint64_t *a1)
{
  sub_10001A08C((uint64_t)a1, 0);
  uint64_t result = *a1;
  if (*a1) {
    operator delete[]();
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_10001A08C(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 > a2)
  {
    *(void *)(result + 8) = a2;
    unint64_t v2 = a2;
  }
  if (*(void *)(result + 16) < a2) {
    sub_10001A0EC(result, a2);
  }
  if (v2 < a2) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

void sub_10001A0EC(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

uint64_t *sub_10001A228(uint64_t *a1)
{
  if (*a1) {
    operator delete[]();
  }
  return a1;
}

uint64_t *sub_10001A274(uint64_t *a1)
{
  sub_10001A2D0(a1);
  if (a1[3]) {
    operator delete[]();
  }
  return sub_10001A228(a1);
}

uint64_t sub_10001A2D0(uint64_t *a1)
{
  sub_10001A040(a1);
  uint64_t result = a1[3];
  if (result) {
    operator delete[]();
  }
  return result;
}

uint64_t *sub_10001A314(uint64_t *a1)
{
  if (*a1) {
    operator delete[]();
  }
  return a1;
}

uint64_t sub_10001A360(uint64_t *a1)
{
  sub_10001A3AC(a1, 0);
  uint64_t result = *a1;
  if (*a1) {
    operator delete[]();
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_10001A3AC(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    unint64_t v4 = a2;
  }
  if (a1[2] < a2) {
    sub_10001A41C((uint64_t)a1, a2);
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

void sub_10001A41C(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

uint64_t *sub_10001A558(uint64_t *a1)
{
  if (*a1) {
    operator delete[]();
  }
  return a1;
}

uint64_t sub_10001A5A4(uint64_t *a1)
{
  sub_10001A5F0(a1, 0);
  uint64_t result = *a1;
  if (*a1) {
    operator delete[]();
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void *sub_10001A5F0(void *result, unint64_t a2)
{
  unint64_t v2 = result[1];
  if (v2 > a2)
  {
    result[1] = a2;
    unint64_t v2 = a2;
  }
  if (result[2] < a2) {
    sub_10001A674((uint64_t)result, a2);
  }
  for (; v2 < a2; unint64_t v2 = result[1])
  {
    result[1] = v2 + 1;
    uint64_t v3 = *result + 12 * v2;
    *(_DWORD *)(v3 + 7) = 0;
    *(void *)uint64_t v3 = 0;
  }
  return result;
}

void sub_10001A674(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void *sub_10001A7C4(uint64_t *a1)
{
  int v7 = 0;
  sub_10001AB08(a1 + 15, 0x400uLL, &v7);
  uint64_t v2 = a1[22];
  if (v2)
  {
    uint64_t v3 = *a1 + 12 * *(unsigned int *)(a1[21] + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(void *)uint64_t v3 = 0;
    --a1[22];
  }
  else
  {
    sub_10001AB90(a1);
  }
  sub_10001ABE8(a1 + 9);
  sub_10001AC38(a1 + 3);
  uint64_t v4 = a1[7];
  if (v4 == a1[8]) {
    sub_100019540((uint64_t)(a1 + 6), v4 + 1);
  }
  a1[7] = v4 + 1;
  a1[24] = 1;
  *(unsigned char *)(*a1 + 8) = -1;
  int v6 = 0;
  return sub_10001AC84(a1 + 18, &v6);
}

void *sub_10001A898(void *result, uint64_t a2, unint64_t a3, int a4)
{
  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    void *exception = &off_1000ACC78;
    exception[1] = v23;
  }
  int v5 = a4;
  int v7 = result;
  unint64_t v8 = 0;
  unsigned int v9 = 0;
  uint64_t v10 = *result;
  while (1)
  {
    unsigned int v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11) {
      goto LABEL_12;
    }
    unsigned int v12 = *(unsigned __int8 *)(a2 + v8);
    if (v8 < a3 && !*(unsigned char *)(a2 + v8))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    unsigned int v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13) {
      break;
    }
    ++v8;
    unsigned int v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3) {
      return result;
    }
  }
  *(unsigned char *)(v10 + 12 * v11 + 10) = 1;
  uint64_t result = (void *)sub_10001ACD8((uint64_t)result, v11);
LABEL_12:
  if (v8 <= a3)
  {
    int v24 = v5;
    do
    {
      if (v8 >= a3) {
        char v14 = 0;
      }
      else {
        char v14 = *(unsigned char *)(a2 + v8);
      }
      unsigned int v25 = 0;
      uint64_t v15 = v7[22];
      if (v15)
      {
        unsigned int v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        uint64_t v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(void *)uint64_t v17 = 0;
        --v7[22];
      }
      else
      {
        unsigned int v16 = *((_DWORD *)v7 + 2);
        sub_10001AB90(v7);
      }
      unsigned int v25 = v16;
      uint64_t v18 = *v7;
      uint64_t v19 = (int *)(*v7 + 12 * v9);
      int v20 = *v19;
      if (!*v19) {
        *(unsigned char *)(v18 + 12 * v16 + 9) = 1;
      }
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      unsigned int v21 = v25;
      *(unsigned char *)(v18 + 12 * v25 + 8) = v14;
      *uint64_t v19 = v21;
      uint64_t result = sub_10001AC84(v7 + 18, &v25);
      unsigned int v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    int v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return result;
}

uint64_t *sub_10001AB08(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = result[1];
  if (v3 > a2)
  {
    result[1] = a2;
    unint64_t v3 = a2;
  }
  if (result[2] < a2) {
    sub_10001A0EC((uint64_t)result, a2);
  }
  if (v3 < a2)
  {
    uint64_t v4 = *result;
    do
      *(_DWORD *)(v4 + 4 * v3++) = *a3;
    while (a2 != v3);
    result[1] = a2;
  }
  return result;
}

void *sub_10001AB90(void *result)
{
  uint64_t v1 = result[1];
  if (v1 == result[2]) {
    sub_10001A674((uint64_t)result, v1 + 1);
  }
  result[1] = v1 + 1;
  uint64_t v2 = *result + 12 * v1;
  *(_DWORD *)(v2 + 7) = 0;
  *(void *)uint64_t v2 = 0;
  return result;
}

void *sub_10001ABE8(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[5];
  if ((v2 & 0x1F) == 0)
  {
    int v3 = 0;
    uint64_t result = sub_10001AC84(result, &v3);
    uint64_t v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return result;
}

void *sub_10001AC38(void *result)
{
  uint64_t v1 = result[1];
  if (v1 == result[2]) {
    sub_10001A41C((uint64_t)result, v1 + 1);
  }
  result[1] = v1 + 1;
  *(_DWORD *)(*result + 4 * v1) = 0;
  return result;
}

void *sub_10001AC84(void *result, _DWORD *a2)
{
  uint64_t v2 = result[1];
  if (v2 == result[2]) {
    sub_10001A0EC((uint64_t)result, v2 + 1);
  }
  result[1] = v2 + 1;
  *(_DWORD *)(*result + 4 * v2) = *a2;
  return result;
}

uint64_t sub_10001ACD8(uint64_t result, int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 152) - 1;
  unsigned int v4 = *(_DWORD *)(*(void *)(result + 144) + 4 * v3);
  if (v4 != a2)
  {
    uint64_t v35 = (uint64_t *)(result + 120);
    int v5 = (void *)(result + 24);
    int v6 = (void *)(result + 72);
    while (1)
    {
      *(void *)(v2 + 152) = v3;
      unint64_t v7 = *(void *)(v2 + 128);
      if (*(void *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        unint64_t v8 = 2 * v7;
        sub_10001A040(v35);
        int v38 = 0;
        sub_10001AB08(v35, v8, &v38);
        unint64_t v9 = *(void *)(v2 + 32);
        if (v9 >= 2)
        {
          uint64_t v10 = *(void *)(v2 + 48);
          for (uint64_t i = 1; i != v9; ++i)
          {
            if (!*(unsigned char *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              unsigned int v12 = 0;
              if (i)
              {
                unsigned int v13 = i;
                do
                {
                  int v14 = *(_DWORD *)(*v5 + 4 * v13);
                  unsigned int v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  unsigned int v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  BOOL v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              uint64_t v18 = *(void *)(v2 + 120);
              do
              {
                unint64_t v19 = (unint64_t)v12 % *(void *)(v2 + 128);
                unsigned int v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      int v20 = 0;
      if (v4)
      {
        unsigned int v21 = v4;
        do
        {
          ++v20;
          unsigned int v21 = *(_DWORD *)(*(void *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      unsigned int v37 = 0;
      uint64_t result = sub_10001AFC4((uint64_t *)v2, v4, &v37);
      if (result)
      {
        unsigned int v22 = result;
        *(_DWORD *)(*v6 + 4 * (result >> 5)) |= 1 << result;
        if (v4) {
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      if (!v20) {
        break;
      }
      do
      {
        sub_10001ABE8((void *)(v2 + 72));
        uint64_t result = (uint64_t)sub_10001AC38((void *)(v2 + 24));
        uint64_t v25 = *(void *)(v2 + 56);
        if (v25 == *(void *)(v2 + 64)) {
          sub_100019540(v2 + 48, v25 + 1);
        }
        *(void *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      unsigned int v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4) {
        goto LABEL_32;
      }
LABEL_37:
      unsigned int v22 = v26 + 1;
      *(_DWORD *)(*(void *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(void *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          unsigned int v23 = *(_DWORD *)(*(void *)v2 + 12 * v4 + 4);
          unsigned int v39 = v4;
          uint64_t result = (uint64_t)sub_10001AC84((void *)(v2 + 168), &v39);
          unsigned int v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      uint64_t v24 = *(void *)(v2 + 144);
      uint64_t v3 = *(void *)(v2 + 152) - 1;
      *(_DWORD *)(*(void *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      unsigned int v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2) {
        goto LABEL_2;
      }
    }
    unsigned int v26 = 0;
    if (!v4) {
      goto LABEL_37;
    }
LABEL_32:
    uint64_t v27 = *(void *)v2;
    unsigned int v28 = v4;
    do
    {
      uint64_t v29 = v28;
      uint64_t v30 = v27 + 12 * v28;
      int v31 = *(unsigned __int8 *)(v30 + 8);
      int v32 = *(_DWORD *)v30;
      if (v31) {
        int v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      }
      else {
        int v33 = 2 * v32;
      }
      uint64_t v34 = 3 * v29;
      *(_DWORD *)(*(void *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(unsigned char *)(*(void *)(v2 + 48) + v26--) = v31;
      uint64_t v27 = *(void *)v2;
      unsigned int v28 = *(_DWORD *)(*(void *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(void *)(v2 + 152) = v3;
  return result;
}

uint64_t sub_10001AFC4(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    uint64_t v5 = *a1;
    uint64_t v6 = a2;
    do
    {
      unint64_t v7 = (int *)(v5 + 12 * v6);
      int v8 = *((unsigned __int8 *)v7 + 8);
      int v9 = *v7;
      if (v8) {
        int v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      }
      else {
        int v10 = 2 * v9;
      }
      uint64_t v11 = v5 + 12 * v6;
      unsigned int v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      unsigned int v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      unint64_t v4 = v4 ^ HIWORD(v13) ^ v13;
      uint64_t v6 = *(unsigned int *)(v11 + 4);
    }
    while (v6);
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v15 = a1[15];
  unint64_t v14 = a1[16];
  unint64_t v16 = v4 % v14;
  *a3 = v4 % v14;
  uint64_t v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if (v17)
  {
    uint64_t v18 = *a1;
    unint64_t v19 = (unsigned int *)(*a1 + 12 * a2 + 4);
    uint64_t v20 = a1[3];
    do
    {
      uint64_t v21 = *v19;
      unsigned int v22 = v17;
      if (v21)
      {
        unsigned int v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!v21) {
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3) {
            return v17;
          }
          uint64_t v23 = v3;
          while (1)
          {
            uint64_t v24 = (int *)(v18 + 12 * v23);
            int v25 = *((unsigned __int8 *)v24 + 8);
            int v26 = *v24;
            int v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(a1[6] + v22))
            {
              break;
            }
            uint64_t v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!v23) {
              return v17;
            }
          }
        }
      }
      unint64_t v16 = (v16 + 1) % v14;
      *a3 = v16;
      uint64_t v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while (v17);
  }
  return v17;
}

void sub_10001B130()
{
}

unsigned int *sub_10001B274(unsigned int *result, unsigned int a2)
{
  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = &off_1000ACC78;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
  }
  int v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000) {
    int v2 = a2 << 10;
  }
  *uint64_t result = *result & 0x800001FF | v2;
  return result;
}

unsigned int *sub_10001B2FC(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  int v8 = a2 + 9;
  unint64_t v9 = *(unsigned int *)(a2[3] + 4 * a3);
  unint64_t v10 = v9 >> 2;
  unint64_t v11 = v9 >> 7;
  int v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(a2[9] + 4 * (v9 >> 7))) != 0
    && (int v13 = *(_DWORD *)(*(void *)(a1 + 64) + 4 * (sub_10001B938(a2 + 9, v10) - 1))) != 0
    && ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (BOOL v15 = (v13 ^ a4) == 0) : (BOOL v15 = 1), v15))
  {
    if (*(unsigned char *)(a2[6] + v10))
    {
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v17 = a4;
    }
    else
    {
      uint64_t v17 = a4;
      uint64_t v16 = *(void *)(a1 + 8);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return sub_10001B274((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    uint64_t result = (unsigned int *)sub_10001B688(a1, (uint64_t)a2, a3, a4);
    int v19 = (int)result;
    if ((*(_DWORD *)(a2[9] + 4 * v11) & v12) != 0)
    {
      uint64_t result = (unsigned int *)sub_10001B938(v8, v10);
      *(_DWORD *)(*(void *)(a1 + 64) + 4 * (result - 1)) = v19;
    }
    do
    {
      if (*(unsigned char *)(a2[6] + v10)) {
        uint64_t result = (unsigned int *)sub_10001B2FC(a1, a2, v10, v19 ^ *(unsigned __int8 *)(a2[6] + v10));
      }
      if (v10 == -1) {
        break;
      }
      int v20 = *(_DWORD *)(a2[3] + 4 * v10);
      LODWORD(v10) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void sub_10001B474(uint64_t a1)
{
  int v2 = (void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (v3 + 256);
  unsigned int v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    sub_100019768((void *)(a1 + 8), (v3 + 256));
  }
  else
  {
    int v6 = 0;
    unint64_t v7 = v5 << 8;
    uint64_t v8 = *(void *)(a1 + 32);
    while (1)
    {
      char v9 = v7 + v6;
      if (!*(unsigned char *)(v8 + 12 * ((v7 + v6) & 0xFFF) + 9)) {
        break;
      }
      if (++v6 == 256)
      {
        char v9 = 0;
        break;
      }
    }
    uint64_t v10 = 0;
    uint64_t v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(unsigned char *)(v8 + v11 + v10 + 8))
      {
        if (*(void *)(a1 + 16) <= v7)
        {
          sub_10001B474(a1);
          uint64_t v8 = *(void *)(a1 + 32);
        }
        int v12 = (int *)(v8 + v11 + v10);
        uint64_t v13 = v12[1];
        if (v7 == *(_DWORD *)(a1 + 72))
        {
          *(_DWORD *)(a1 + 72) = v13;
          if (v7 == v13) {
            *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          }
        }
        int v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((unsigned char *)v12 + 8) = 1;
        *(unsigned char *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while (v10 != 3072);
    sub_100019768(v2, (v3 + 256));
    uint64_t v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if ((int)v3 + 1 < v4)
  {
    for (int i = 0; i != 255; ++i)
    {
      int v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  uint64_t v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  int v21 = *(_DWORD *)(a1 + 72);
  uint64_t v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * ((v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t sub_10001B688(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = (void *)(a1 + 40);
  sub_1000194E0(a1 + 40, 0);
  unsigned int v9 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * a3);
  if (v9 >= 4)
  {
    unsigned int v10 = v9 >> 2;
    do
    {
      char v35 = *(unsigned char *)(*(void *)(a2 + 48) + v10);
      sub_10001B99C(v8, &v35);
      int v11 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v10);
      BOOL v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  unint64_t v14 = *(unsigned int *)(a1 + 72);
  unint64_t v15 = *(void *)(a1 + 16);
  if (v15 <= v14)
  {
LABEL_20:
    uint64_t v19 = a4 | v15;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v16 = *(unsigned __int8 **)(a1 + 40);
    int v18 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      uint64_t v19 = v18 ^ *v16;
      int v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(unsigned char *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        unint64_t v21 = *(void *)(a1 + 48);
        if (v21 < 2) {
          goto LABEL_21;
        }
        if (!*(unsigned char *)(v17 + 12 * (v20 ^ v16[1]) + 8)) {
          break;
        }
      }
LABEL_19:
      int v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == v14) {
        goto LABEL_20;
      }
    }
    uint64_t v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21) {
          break;
        }
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  sub_10001B274((unsigned int *)(*(void *)(a1 + 8) + 4 * a4), v19 ^ a4);
  if (*(void *)(a1 + 48))
  {
    unint64_t v24 = 0;
    unsigned int v25 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * a3) >> 2;
    do
    {
      unint64_t v26 = v19 ^ *(unsigned __int8 *)(*(void *)(a1 + 40) + v24);
      if (*(void *)(a1 + 16) <= v26) {
        sub_10001B474(a1);
      }
      if (*(_DWORD *)(a1 + 72) == v26)
      {
        unsigned int v27 = v26 & 0xFFF;
        uint64_t v28 = *(void *)(a1 + 32);
        int v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v29;
        if (v29 == v26)
        {
          *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          int v29 = v26;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(a1 + 32);
        unsigned int v27 = v26 & 0xFFF;
        int v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      uint64_t v30 = (int *)(v28 + 12 * v27);
      int v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((unsigned char *)v30 + 8) = 1;
      uint64_t v32 = *(void *)(a1 + 8);
      if (*(unsigned char *)(*(void *)(a2 + 48) + v25))
      {
        *(unsigned char *)(v32 + 4 * v26) = *(unsigned char *)(*v8 + v24);
        unsigned int v33 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        unsigned int v33 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      unsigned int v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *(void *)(a1 + 48));
  }
  else
  {
    uint64_t v28 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t sub_10001B938(void *a1, unint64_t a2)
{
  uint64_t v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  int v3 = *(_DWORD *)(a1[3] + v2);
  LODWORD(v2) = *(_DWORD *)(*a1 + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

void *sub_10001B99C(void *result, unsigned char *a2)
{
  uint64_t v2 = result[1];
  if (v2 == result[2]) {
    sub_100019540((uint64_t)result, v2 + 1);
  }
  result[1] = v2 + 1;
  *(unsigned char *)(*result + v2) = *a2;
  return result;
}

uint64_t *sub_10001B9F0(uint64_t *a1)
{
  sub_10001A5A4(a1);
  sub_10001A360(a1 + 3);
  sub_100019494(a1 + 6);
  sub_10001A2D0(a1 + 9);
  sub_10001A040(a1 + 15);
  sub_10001A040(a1 + 18);
  sub_10001A040(a1 + 21);
  a1[24] = 0;
  sub_10001A004(a1 + 21);
  sub_10001A004(a1 + 18);
  sub_10001A228(a1 + 15);
  sub_10001A274(a1 + 9);
  sub_100019448(a1 + 6);
  sub_10001A314(a1 + 3);
  return sub_10001A558(a1);
}

uint64_t sub_10001BAC0(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  while (1)
  {
    uint64_t result = sub_10001BC28(a1, a2, a3, a4, a5, a6);
    int v12 = result;
    if (a3 < a4)
    {
      uint64_t v13 = a2[2];
      while (v13 && *(void *)(v13 + 8 * a3) <= a5 || !*(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3) {
          return result;
        }
      }
    }
    if (a3 == a4) {
      break;
    }
    uint64_t v14 = a2[2];
    if (v14 && *(void *)(v14 + 8 * a3) <= a5) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * a3) + a5);
    }
    unint64_t v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(void *)(v14 + 8 * v16) <= a5) {
          int v17 = 0;
        }
        else {
          int v17 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v16) + a5);
        }
        if (v17 != v15)
        {
          sub_10001BAC0(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          uint64_t v14 = a2[2];
          if (v14 && *(void *)(v14 + 8 * v16) <= a5) {
            unsigned int v15 = 0;
          }
          else {
            unsigned int v15 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v16) + a5);
          }
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t sub_10001BC28(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  int v12 = (uint64_t *)(a1 + 40);
  sub_1000194E0(a1 + 40, 0);
  int v13 = -1;
  if (a3 < a4)
  {
    do
    {
      unsigned __int8 v41 = 0;
      uint64_t v14 = a2[2];
      if (v14)
      {
        if (*(void *)(v14 + 8 * a3) > a5)
        {
          unsigned __int8 v41 = *(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            unint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        unsigned __int8 v41 = *(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5);
        if (v41) {
          goto LABEL_17;
        }
      }
      uint64_t v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0) {
          goto LABEL_51;
        }
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        unint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        void *exception = &off_1000ACC78;
        exception[1] = v40;
      }
      if (v13 == -1)
      {
        if (v15) {
          int v13 = *(_DWORD *)(v15 + 4 * a3);
        }
        else {
          int v13 = a3;
        }
      }
      if (*(void *)a1) {
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
      }
LABEL_17:
      uint64_t v16 = *(void *)(a1 + 48);
      if (!v16) {
        goto LABEL_21;
      }
      unsigned int v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          unint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        sub_10001B99C(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  unint64_t v18 = *(unsigned int *)(a1 + 72);
  unint64_t v19 = *(void *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    uint64_t v23 = a6 | v19;
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 32);
    int v20 = *(unsigned __int8 **)(a1 + 40);
    int v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      uint64_t v23 = v22 ^ *v20;
      int v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(unsigned char *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        unint64_t v25 = *(void *)(a1 + 48);
        if (v25 < 2) {
          goto LABEL_36;
        }
        if (!*(unsigned char *)(v21 + 12 * (v24 ^ v20[1]) + 8)) {
          break;
        }
      }
LABEL_34:
      int v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == v18) {
        goto LABEL_35;
      }
    }
    uint64_t v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25) {
          break;
        }
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  sub_10001B274((unsigned int *)(*(void *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(void *)(a1 + 48))
  {
    unint64_t v28 = 0;
    unsigned int v29 = v13 | 0x80000000;
    uint64_t v30 = *v12;
    do
    {
      unint64_t v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(void *)(a1 + 16) <= v31) {
        sub_10001B474(a1);
      }
      if (*(_DWORD *)(a1 + 72) == v31)
      {
        unsigned int v32 = v31 & 0xFFF;
        uint64_t v33 = *(void *)(a1 + 32);
        int v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == v31)
        {
          *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          int v34 = v31;
        }
      }
      else
      {
        uint64_t v33 = *(void *)(a1 + 32);
        unsigned int v32 = v31 & 0xFFF;
        int v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      char v35 = (int *)(v33 + 12 * v32);
      int v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((unsigned char *)v35 + 8) = 1;
      uint64_t v30 = *(void *)(a1 + 40);
      uint64_t v37 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v30 + v28))
      {
        *(unsigned char *)(v37 + 4 * v31) = *(unsigned char *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(void *)(a1 + 48));
  }
  else
  {
    uint64_t v33 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

uint64_t sub_10001BFD0(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  sub_10001971C((uint64_t *)(a1 + 8));
  if (*(void *)(a1 + 32)) {
    operator delete[]();
  }
  sub_100019494((uint64_t *)(a1 + 40));
  if (*(void *)(a1 + 64)) {
    operator delete[]();
  }
  *(_DWORD *)(a1 + 72) = 0;
  sub_100019448((uint64_t *)(a1 + 40));
  if (*(void *)(a1 + 32)) {
    operator delete[]();
  }
  sub_1000196D0(v2);
  return a1;
}

void *sub_10001C08C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10001C104(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_10001C0E8(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10001C104(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100004204();
  }
  uint64_t result = (char *)sub_100019218((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_10001C148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_1000ACCA0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2 + 16;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a3 + 245);
  sub_10004CF14((void *)(a1 + 56));
  unint64_t v5 = *(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    unint64_t v5 = *(void *)v5;
    unint64_t v6 = *(void *)((*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    unint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sub_10001C22C((uint64_t *)a1, (unsigned int *)v5, v6);
  return a1;
}

void sub_10001C1E0(_Unwind_Exception *a1)
{
  sub_10004CF1C(v1);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10001C22C(uint64_t *result, unsigned int *a2, unint64_t a3)
{
  if (a3)
  {
    int v3 = result;
    v6[0] = 0;
    v6[1] = 0;
    long long v5 = 0uLL;
    sub_10001C6AC(a2, a3, v6, &v5, &v4);
    sub_10004D13C(v3 + 7, &v4);
    uint64_t result = sub_10004CF1C(&v4);
    if (!v3[7]) {
      operator new();
    }
  }
  return result;
}

void sub_10001C38C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10004CF1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C3A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000ACCA0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2 + 16;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  sub_10004CF14((void *)(a1 + 56));
  unint64_t v4 = *(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    unint64_t v4 = *(void *)v4;
    unint64_t v5 = *(void *)((*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    unint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_10001C22C((uint64_t *)a1, (unsigned int *)v4, v5);
  return a1;
}

void sub_10001C43C(_Unwind_Exception *a1)
{
  sub_10004CF1C(v1);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10001C48C(uint64_t *a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  *a1 = (uint64_t)off_1000ACCA0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a2;
  a1[5] = 0;
  *((unsigned char *)a1 + 48) = 0;
  unint64_t v7 = a1 + 7;
  sub_10004CF14(a1 + 7);
  int v11 = 0;
  sub_100014B44(a3, a4, &v11, &v10);
  sub_10004D13C(v7, &v10);
  sub_10004CF1C(&v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t *))(*a1 + 24))(&v10, a1);
  uint64_t v8 = v10;
  sub_10004CF1C(&v10);
  if (!v8)
  {
    *((unsigned char *)a1 + 48) = v11 != 0;
    sub_10001C22C(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_10001C594(_Unwind_Exception *a1)
{
  sub_10004CF1C(v1);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_10001C5FC(void *a1)
{
  *a1 = off_1000ACCA0;
  sub_10004CF1C(a1 + 7);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10001C674(void *a1)
{
  sub_10001C5FC(a1);
  operator delete();
}

void *sub_10001C6AC@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  if (a2 < 5 || (unint64_t v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    uint64_t v10 = "Blob for normalization rule is broken.";
    uint64_t v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      uint64_t v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (void)v8;
      a4[1] = a2 - (void)v7 - 4;
      return sub_10004CF14(a5);
    }
    uint64_t v10 = "Trie data size exceeds the input blob size.";
    uint64_t v11 = 43;
  }
  return (void *)sub_10004D080(a5, 13, v10, v11);
}

void *sub_10001C714@<X0>(size_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v6 = a3;
  uint64_t v83 = (void **)a5;
  uint64_t v84 = (std::string *)a4;
  *(void *)(a5 + 8) = *(void *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(unsigned char **)a4 = 0;
    *(void *)(a4 + 8) = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_10:
    return sub_10004CF14(a6);
  }
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 23) = 0;
  if (!a3) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t result = (void *)(*(uint64_t (**)(size_t))(*(void *)a1 + 24))(a1);
  if (*a6) {
    return result;
  }
  sub_10004CF1C(a6);
  int v82 = 0;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)))
  {
    do
    {
      sub_10001D02C(a1, a2, v6, (uint64_t)&v74);
      if (v75 != 1 || *v74 != 32) {
        goto LABEL_13;
      }
      a2 += (int)v76;
      v82 += (int)v76;
      v6 -= (int)v76;
    }
    while (v6);
    uint64_t v11 = a6;
    return sub_10004CF14(v11);
  }
LABEL_13:
  uint64_t v71 = (uint64_t)a6;
  std::string::reserve(v84, 3 * v6);
  sub_10001D214(v83, 3 * v6);
  uint64_t v80 = "▁";
  std::string::size_type v81 = 3;
  v79[0] = a1;
  v79[1] = &v82;
  v79[2] = &v84;
  v79[3] = &v83;
  v79[4] = &v80;
  if (!*(unsigned char *)(a1 + 48)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)))
  {
    sub_10001D2BC((uint64_t)v79);
  }
  int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  do
  {
    sub_10001D02C(a1, a2, v6, (uint64_t)&v74);
    int v13 = v74;
    uint64_t v14 = v75;
    if (v12)
    {
      if (!v75) {
        goto LABEL_66;
      }
      while (*v13 == 32)
      {
        ++v13;
        if (!--v14) {
          goto LABEL_66;
        }
      }
    }
    else if (!v75)
    {
      int v12 = 0;
      goto LABEL_66;
    }
    uint64_t v72 = a2;
    unint64_t v73 = v6;
    uint64_t v15 = 0;
    do
    {
      int v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
      int v17 = v13[v15];
      if (v16 && v17 == 32)
      {
        std::string::append(v84, v80, v81);
        if (v81)
        {
          for (std::string::size_type i = 0; i < v81; ++i)
          {
            unint64_t v19 = v83;
            uint64_t v20 = v82;
            uint64_t v21 = (char *)v83[1];
            int v22 = (char *)v83[2];
            if (v21 >= v22)
            {
              int v24 = (char *)*v83;
              uint64_t v25 = (v21 - (unsigned char *)*v83) >> 3;
              unint64_t v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 61) {
                goto LABEL_116;
              }
              uint64_t v27 = v22 - v24;
              if (v27 >> 2 > v26) {
                unint64_t v26 = v27 >> 2;
              }
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v26;
              }
              if (v28)
              {
                unsigned int v29 = (char *)sub_10000421C((uint64_t)(v83 + 2), v28);
                int v24 = (char *)*v19;
                uint64_t v21 = (char *)v19[1];
              }
              else
              {
                unsigned int v29 = 0;
              }
              uint64_t v30 = &v29[8 * v25];
              *(void *)uint64_t v30 = v20;
              uint64_t v23 = v30 + 8;
              while (v21 != v24)
              {
                uint64_t v31 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v30 - 1) = v31;
                v30 -= 8;
              }
              *unint64_t v19 = v30;
              v19[1] = v23;
              v19[2] = &v29[8 * v28];
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *(void *)uint64_t v21 = v82;
              uint64_t v23 = v21 + 8;
            }
            v19[1] = v23;
          }
        }
      }
      else
      {
        std::string::push_back(v84, v17);
        unsigned int v32 = v83;
        uint64_t v33 = v82;
        int v34 = (char *)v83[1];
        char v35 = (char *)v83[2];
        if (v34 >= v35)
        {
          uint64_t v37 = (char *)*v83;
          uint64_t v38 = (v34 - (unsigned char *)*v83) >> 3;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61) {
LABEL_116:
          }
            sub_100004204();
          uint64_t v40 = v35 - v37;
          if (v40 >> 2 > v39) {
            unint64_t v39 = v40 >> 2;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            uint64_t v42 = (char *)sub_10000421C((uint64_t)(v83 + 2), v41);
            uint64_t v37 = (char *)*v32;
            int v34 = (char *)v32[1];
          }
          else
          {
            uint64_t v42 = 0;
          }
          uint64_t v43 = &v42[8 * v38];
          *(void *)uint64_t v43 = v33;
          int v36 = v43 + 8;
          while (v34 != v37)
          {
            uint64_t v44 = *((void *)v34 - 1);
            v34 -= 8;
            *((void *)v43 - 1) = v44;
            v43 -= 8;
          }
          char *v32 = v43;
          v32[1] = v36;
          v32[2] = &v42[8 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *(void *)int v34 = v82;
          int v36 = v34 + 8;
        }
        v32[1] = v36;
      }
      ++v15;
    }
    while (v15 != v14);
    int v12 = v13[v14 - 1] == 32;
    a2 = v72;
    unint64_t v6 = v73;
LABEL_66:
    v82 += (int)v76;
    a2 += (int)v76;
    v6 -= (int)v76;
    v12 &= (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)))
  {
    int v45 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
    if (v45) {
      size_t v46 = v81;
    }
    else {
      size_t v46 = 1;
    }
    if (v45) {
      int v47 = v80;
    }
    else {
      int v47 = " ";
    }
    while (1)
    {
      uint64_t v48 = v84;
      LODWORD(v49) = HIBYTE(v84->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v84->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v50 = (std::string *)v84->__r_.__value_.__r.__words[0];
        std::string::size_type size = v84->__r_.__value_.__l.__size_;
        if (!v46) {
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v50 = v84;
        std::string::size_type size = HIBYTE(v84->__r_.__value_.__r.__words[2]);
        if (!v46) {
          goto LABEL_81;
        }
      }
      BOOL v52 = size >= v46;
      std::string::size_type v53 = size - v46;
      if (!v52 || memcmp((char *)v50 + v53, v47, v46)) {
        break;
      }
LABEL_81:
      if ((v49 & 0x80) != 0) {
        std::string::size_type v49 = v48->__r_.__value_.__l.__size_;
      }
      if (v49 - v46 < 0)
      {
        LODWORD(v74) = 13;
        uint64_t v65 = (void *)sub_10001752C((uint64_t)&v75);
        sub_100018688(v65, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        sub_100018688(&v75, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_100018688(&v75, (uint64_t)") [", 3);
        sub_100018688(&v75, (uint64_t)"(length) >= (0)", 15);
        sub_100018688(&v75, (uint64_t)"] ", 2);
        sub_100014DB8((unsigned int *)&v74, v71);
        goto LABEL_112;
      }
      int v82 = *((void *)*v83 + (v49 - v46));
      std::string::resize(v48, (v49 - v46), 0);
      sub_10001D4F0((uint64_t)v83, (v49 - v46));
    }
  }
  if (*(unsigned char *)(a1 + 48)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)))
  {
    sub_10001D2BC((uint64_t)v79);
  }
  int64_t v54 = v83;
  uint64_t v55 = v82;
  __int16 v56 = (char *)v83[1];
  v57 = (char *)v83[2];
  if (v56 >= v57)
  {
    v59 = (char *)*v83;
    uint64_t v60 = (v56 - (unsigned char *)*v83) >> 3;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61) {
      sub_100004204();
    }
    uint64_t v62 = v57 - v59;
    if (v62 >> 2 > v61) {
      unint64_t v61 = v62 >> 2;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      uint64_t v64 = (char *)sub_10000421C((uint64_t)(v83 + 2), v63);
      v59 = (char *)*v54;
      __int16 v56 = (char *)v54[1];
    }
    else
    {
      uint64_t v64 = 0;
    }
    uint64_t v66 = &v64[8 * v60];
    v67 = &v64[8 * v63];
    *(void *)uint64_t v66 = v55;
    uint64_t v58 = v66 + 8;
    while (v56 != v59)
    {
      uint64_t v68 = *((void *)v56 - 1);
      v56 -= 8;
      *((void *)v66 - 1) = v68;
      v66 -= 8;
    }
    char *v54 = v66;
    v54[1] = v58;
    v54[2] = v67;
    if (v59) {
      operator delete(v59);
    }
  }
  else
  {
    *(void *)__int16 v56 = v82;
    uint64_t v58 = v56 + 8;
  }
  v54[1] = v58;
  if (SHIBYTE(v84->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type v69 = v84->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v69 = HIBYTE(v84->__r_.__value_.__r.__words[2]);
  }
  if (((unsigned char *)v83[1] - (unsigned char *)*v83) >> 3 == v69 + 1)
  {
    uint64_t v11 = (void *)v71;
    return sub_10004CF14(v11);
  }
  LODWORD(v74) = 13;
  uint64_t v70 = (void *)sub_10001752C((uint64_t)&v75);
  sub_100018688(v70, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  sub_100018688(&v75, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_100018688(&v75, (uint64_t)") [", 3);
  sub_100018688(&v75, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  sub_100018688(&v75, (uint64_t)"] ", 2);
  sub_100014DB8((unsigned int *)&v74, v71);
LABEL_112:
  if (v78 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)std::ios::~ios();
}

void sub_10001D00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100014E48((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_10001D02C@<X0>(size_t result@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3)
  {
    unint64_t v6 = a2;
    size_t v7 = result;
    uint64_t v8 = *(void *)(result + 40);
    if (v8 && (LOBYTE(v26) = 0, uint64_t result = sub_10001D5E4(v8, a2, a3, (BOOL *)&v26), (_BYTE)v26))
    {
      unint64_t v9 = (int)result;
      if (a3 < (int)result) {
        unint64_t v9 = a3;
      }
      *(void *)a4 = v6;
      *(void *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = result;
    }
    else
    {
      uint64_t v10 = *(void *)(v7 + 8);
      if (!v10) {
        goto LABEL_24;
      }
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      int v13 = *(_DWORD **)(v10 + 16);
      uint64_t v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
      do
      {
        uint64_t v15 = v6[v11];
        uint64_t v16 = v14 ^ v15;
        unsigned int v17 = v13[v16];
        if ((v17 & 0x800000FF) != v15) {
          break;
        }
        uint64_t v14 = v16 ^ (v17 >> 10 << ((v17 >> 6) & 8));
        if ((v17 & 0x100) != 0)
        {
          if (v12 <= 0x1F)
          {
            unint64_t v18 = &v27[16 * v12 - 8];
            *(_DWORD *)unint64_t v18 = v13[v14] & 0x7FFFFFFF;
            *((void *)v18 + 1) = v11 + 1;
          }
          ++v12;
        }
        ++v11;
      }
      while (a3 != v11);
      if (!v12) {
        goto LABEL_24;
      }
      unint64_t v19 = 0;
      int v20 = 0;
      uint64_t v21 = (unint64_t *)v27;
      int v22 = (unint64_t *)v27;
      do
      {
        unint64_t v24 = *v22;
        v22 += 2;
        unint64_t v23 = v24;
        if (!v19 || v23 > v19)
        {
          int v20 = *((_DWORD *)v21 - 2);
          unint64_t v19 = v23;
        }
        uint64_t v21 = v22;
        --v12;
      }
      while (v12);
      if (v19)
      {
        unint64_t v6 = (char *)(*(void *)(v7 + 16) + v20);
        uint64_t result = strlen(v6);
      }
      else
      {
LABEL_24:
        uint64_t v26 = 0;
        BOOL v25 = sub_10004A6C8((unsigned __int8 *)v6, (uint64_t)&v6[a3], &v26) != 65533 || v26 == 3;
        if (v25) {
          LODWORD(v19) = v26;
        }
        else {
          LODWORD(v19) = 1;
        }
        if (v25) {
          uint64_t result = (int)v26;
        }
        else {
          uint64_t result = 3;
        }
        if (!v25) {
          unint64_t v6 = (char *)&unk_100091260;
        }
      }
      *(void *)a4 = v6;
      *(void *)(a4 + 8) = result;
      *(_DWORD *)(a4 + 16) = v19;
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void sub_10001D214(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_100004204();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_10000421C(v3, a2);
    size_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_10001D2BC(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 32) + 32))(*(void *)(*(void *)a1 + 32));
  uint64_t v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8));
    if (*(void *)(*(void *)(a1 + 32) + 8))
    {
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = **(void **)(a1 + 24);
        uint64_t v6 = **(int **)(a1 + 8);
        size_t v7 = *(void **)(v5 + 8);
        unint64_t v8 = *(void *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          uint64_t v10 = *(void **)v5;
          uint64_t v11 = ((uint64_t)v7 - *(void *)v5) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            goto LABEL_40;
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)sub_10000421C(v5 + 16, v14);
            uint64_t v10 = *(void **)v5;
            size_t v7 = *(void **)(v5 + 8);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = &v15[8 * v11];
          *(void *)uint64_t v16 = v6;
          unint64_t v9 = v16 + 8;
          while (v7 != v10)
          {
            uint64_t v17 = *--v7;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(void *)uint64_t v5 = v16;
          *(void *)(v5 + 8) = v9;
          *(void *)(v5 + 16) = &v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *size_t v7 = v6;
          unint64_t v9 = v7 + 1;
        }
        *(void *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(void *)(*(void *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    uint64_t v18 = **(void **)(a1 + 24);
    uint64_t v19 = **(int **)(a1 + 8);
    int v20 = *(void **)(v18 + 8);
    unint64_t v21 = *(void *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      unint64_t v23 = *(void **)v18;
      uint64_t v24 = ((uint64_t)v20 - *(void *)v18) >> 3;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61) {
LABEL_40:
      }
        sub_100004204();
      uint64_t v26 = v21 - (void)v23;
      if (v26 >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        unint64_t v28 = (char *)sub_10000421C(v18 + 16, v27);
        unint64_t v23 = *(void **)v18;
        int v20 = *(void **)(v18 + 8);
      }
      else
      {
        unint64_t v28 = 0;
      }
      unsigned int v29 = &v28[8 * v24];
      uint64_t v30 = &v28[8 * v27];
      *(void *)unsigned int v29 = v19;
      int v22 = v29 + 8;
      while (v20 != v23)
      {
        uint64_t v31 = *--v20;
        *((void *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(void *)uint64_t v18 = v29;
      *(void *)(v18 + 8) = v22;
      *(void *)(v18 + 16) = v30;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *int v20 = v19;
      int v22 = v20 + 1;
    }
    *(void *)(v18 + 8) = v22;
  }
}

void sub_10001D4F0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_10001DF98((char **)a1, a2 - v2);
  }
}

void sub_10001D520(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::string __p = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v2);
  nullsub_1(&v2);
  sub_10004CF1C(&v2);
  if (__p)
  {
    unint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_10001D5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_10004CF1C(&a9);
  if (*(char *)(v11 + 23) < 0) {
    operator delete(*(void **)v11);
  }
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10001D5E4(uint64_t a1, unsigned char *a2, uint64_t a3, BOOL *a4)
{
  if (!*(void *)a1)
  {
    if (a4) {
      *a4 = 0;
    }
    goto LABEL_33;
  }
  unint64_t v4 = *(_DWORD **)(*(void *)a1 + 16);
  uint64_t v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2[v6];
      uint64_t v9 = v5 ^ v8;
      unsigned int v10 = v4[v9];
      if ((v10 & 0x800000FF) != v8) {
        break;
      }
      uint64_t v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          uint64_t v11 = &v22[16 * v7];
          *(_DWORD *)uint64_t v11 = v4[v5] & 0x7FFFFFFF;
          *((void *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    unsigned int v12 = *a2;
    if (*a2)
    {
      unint64_t v7 = 0;
      uint64_t v13 = 1;
      do
      {
        uint64_t v14 = v5 ^ v12;
        unsigned int v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12) {
          break;
        }
        uint64_t v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            uint64_t v16 = &v22[16 * v7];
            *(_DWORD *)uint64_t v16 = v4[v5] & 0x7FFFFFFF;
            *((void *)v16 + 1) = v13;
          }
          ++v7;
        }
        unsigned int v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4) {
    *a4 = (int)v7 > 0;
  }
  if (!v7)
  {
LABEL_33:
    int v21 = asc_1000A0F64[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3) {
      return a3;
    }
    else {
      return v21;
    }
  }
  if ((int)v7 < 1) {
    return 0;
  }
  LODWORD(result) = 0;
  unint64_t v7 = v7;
  uint64_t v18 = (int *)&v23;
  do
  {
    int v20 = *v18;
    v18 += 4;
    unsigned int v19 = v20;
    if ((int)result <= v20) {
      uint64_t result = v19;
    }
    else {
      uint64_t result = result;
    }
    --v7;
  }
  while (v7);
  return result;
}

void sub_10001D7B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = (_DWORD *)a2;
  }
  else {
    uint64_t v5 = *(_DWORD **)a2;
  }
  _DWORD *v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    unint64_t v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    std::string::size_type v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v10 = &v13;
    }
    else {
      unsigned int v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v13;
    }
    else {
      uint64_t v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
}

void sub_10001D8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10001D8E8@<X0>(const std::string::value_type *a1@<X0>, std::string::size_type a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>)
{
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  memset(&v14, 0, sizeof(v14));
  std::string::resize(&v14, 4uLL, 0);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v10 = &v14;
  }
  else {
    unsigned int v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  LODWORD(v10->__r_.__value_.__l.__data_) = a2;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v14;
  }
  else {
    uint64_t v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::string::append(a5, (const std::string::value_type *)v11, size);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::string::append(a5, a1, a2);
  return std::string::append(a5, a3, a4);
}

void sub_10001D9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10001D9F0(void *result, void *a2)
{
  *uint64_t result = 0;
  unint64_t v3 = a2[2];
  if (v3)
  {
    std::string __p = 0;
    int v21 = 0;
    int v22 = 0;
    sub_10000D018(&__p, v3);
    uint64_t v6 = (void *)*a2;
    int v4 = a2 + 1;
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      unint64_t v7 = v21;
      do
      {
        uint64_t v8 = v5[4];
        if (v7 >= v22)
        {
          uint64_t v9 = (v7 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v9 + 1) >> 61) {
            sub_100004204();
          }
          unint64_t v10 = (v22 - (unsigned char *)__p) >> 2;
          if (v10 <= v9 + 1) {
            unint64_t v10 = v9 + 1;
          }
          if ((unint64_t)(v22 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            unsigned int v12 = (char *)sub_10000421C((uint64_t)&v22, v11);
          }
          else {
            unsigned int v12 = 0;
          }
          std::string v13 = &v12[8 * v9];
          *(void *)std::string v13 = v8;
          unint64_t v7 = v13 + 8;
          uint64_t v15 = (char *)__p;
          std::string v14 = v21;
          if (v21 != __p)
          {
            do
            {
              uint64_t v16 = *((void *)v14 - 1);
              v14 -= 8;
              *((void *)v13 - 1) = v16;
              v13 -= 8;
            }
            while (v14 != v15);
            std::string v14 = (char *)__p;
          }
          std::string __p = v13;
          int v21 = v7;
          int v22 = &v12[8 * v11];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)unint64_t v7 = v8;
          v7 += 8;
        }
        int v21 = v7;
        uint64_t v17 = (void *)v5[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (void *)v5[2];
            BOOL v19 = *v18 == (void)v5;
            uint64_t v5 = v18;
          }
          while (!v19);
        }
        uint64_t v5 = v18;
      }
      while (v18 != v4);
    }
    operator new();
  }
  return result;
}

void sub_10001DC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v16 = *v14;
  uint64_t *v14 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10001DCD8(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = 0;
  if (a3) {
    operator new();
  }
  return result;
}

void sub_10001DDB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sub_10001E0B4(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10001DDD8@<X0>(std::string *result@<X0>, std::string::value_type *a2@<X1>, uint64_t a3@<X2>, const std::string::value_type *a4@<X3>, std::string::size_type a5@<X4>, std::string *a6@<X8>)
{
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  if (a3)
  {
    uint64_t v8 = a3;
    uint64_t v10 = (uint64_t)result;
    do
    {
      BOOL v14 = 0;
      int v12 = sub_10001D5E4(v10, a2, v8, &v14);
      LODWORD(v13) = v12;
      if (v14)
      {
        uint64_t result = std::string::append(a6, a4, a5);
        uint64_t v13 = (int)v13;
      }
      else
      {
        uint64_t v13 = v12;
        uint64_t result = std::string::append(a6, a2, v12);
      }
      a2 += v13;
      v8 -= v13;
    }
    while (v8);
  }
  return result;
}

void sub_10001DE94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10001DEB0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)a1) {
    return sub_10001DEEC(a2, *(void **)(*(void *)a1 + 16), 4 * *(void *)(*(void *)a1 + 8));
  }
  else {
    return sub_10000A1B4(a2, "");
  }
}

uint64_t sub_10001DED8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = a2;
  return result;
}

uint64_t sub_10001DEE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004D138(a2, a1 + 56);
}

void *sub_10001DEEC(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_100004068();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void sub_10001DF98(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  size_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    size_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_100004204();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      BOOL v14 = (char *)sub_10000421C(v4, v13);
      size_t v8 = *a1;
      size_t v7 = a1[1];
    }
    else
    {
      BOOL v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_10001E0B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t sub_10001E0D8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 80)) {
    uint64_t v3 = *(_DWORD **)(a1 + 80);
  }
  else {
    uint64_t v3 = &unk_1000B6858;
  }
  switch(v3[68])
  {
    case 1:
      sub_10001E244();
    case 2:
      sub_10001E2BC();
    case 3:
      sub_10001E334();
    case 4:
      sub_10001E3AC();
    default:
      uint64_t result = sub_10004A6A8();
      if ((int)result <= 2)
      {
        LOBYTE(v11) = 0;
        uint64_t v5 = sub_100018688(&std::cerr, (uint64_t)"model_factory.cc", 16);
        sub_100018688(v5, (uint64_t)"(", 1);
        uint64_t v6 = (void *)std::ostream::operator<<();
        size_t v7 = sub_100018688(v6, (uint64_t)") ", 2);
        size_t v8 = sub_100018688(v7, (uint64_t)"LOG(", 4);
        uint64_t v9 = sub_100018688(v8, (uint64_t)"ERROR", 5);
        unint64_t v10 = sub_100018688(v9, (uint64_t)") ", 2);
        sub_100018688(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        uint64_t result = (uint64_t)sub_1000176C4(&v11);
      }
      *a2 = 0;
      return result;
  }
}

void sub_10001E220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000176C4(va);
  _Unwind_Resume(a1);
}

void sub_10001E244()
{
}

void sub_10001E298()
{
}

void sub_10001E2BC()
{
}

void sub_10001E310()
{
}

void sub_10001E334()
{
}

void sub_10001E388()
{
}

void sub_10001E3AC()
{
}

void sub_10001E400()
{
}

uint64_t sub_10001E424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v14[1] = a2;
  v14[2] = a3;
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if (v6 == 1) {
    sub_10001E628();
  }
  if (!v6) {
    sub_10001E5A8();
  }
  uint64_t result = sub_10004A6A8();
  if ((int)result <= 2)
  {
    LOBYTE(v14[0]) = 0;
    size_t v8 = sub_100018688(&std::cerr, (uint64_t)"model_factory.cc", 16);
    sub_100018688(v8, (uint64_t)"(", 1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    unint64_t v10 = sub_100018688(v9, (uint64_t)") ", 2);
    uint64_t v11 = sub_100018688(v10, (uint64_t)"LOG(", 4);
    uint64_t v12 = sub_100018688(v11, (uint64_t)"ERROR", 5);
    unint64_t v13 = sub_100018688(v12, (uint64_t)") ", 2);
    sub_100018688(v13, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
    std::ostream::operator<<();
    uint64_t result = (uint64_t)sub_1000176C4(v14);
  }
  *a4 = 0;
  return result;
}

void sub_10001E590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000176C4(va);
  _Unwind_Resume(a1);
}

void sub_10001E5A8()
{
}

void sub_10001E604()
{
}

void sub_10001E628()
{
}

void sub_10001E684()
{
}

void *sub_10001E6A8(void *a1)
{
  *a1 = off_1000ACCF8;
  uint64_t v2 = sub_10003B864();
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = v2;
  return a1;
}

void *sub_10001E6F4(void *result, uint64_t a2)
{
  *uint64_t result = off_1000ACCF8;
  result[1] = a2;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *sub_10001E718(void *a1)
{
  *a1 = off_1000ACCF8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10002F060(v2);
  }
  return a1;
}

void *sub_10001E764(void *a1)
{
  *a1 = off_1000ACCF8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10002F060(v2);
  }
  return a1;
}

void sub_10001E7B0(void *a1)
{
  *a1 = off_1000ACCF8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_10002F060(v1);
  }
  operator delete();
}

void **sub_10001E81C(void **a1)
{
  *a1 = sub_10003A6D0();
  return a1;
}

void *sub_10001E848(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

unint64_t sub_10001E850(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
}

unint64_t sub_10001E860(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
}

uint64_t sub_10001E870(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 64);
}

uint64_t sub_10001E87C(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 68);
}

uint64_t sub_10001E888(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 72);
}

uint64_t sub_10001E894@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (uint64_t)sub_10002F1B4(a2, *(int *)(*(void *)(a1 + 8) + 56));
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(int *)(v5 + 56) >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t result = sub_10002E3D8(v5 + 48, v6);
      *(void *)(*a2 + 8 * v6++) = result;
      uint64_t v5 = *(void *)(a1 + 8);
    }
    while (v6 < *(int *)(v5 + 56));
  }
  return result;
}

void sub_10001E90C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001E928(uint64_t a1)
{
  return *(int *)(*(void *)(a1 + 8) + 56);
}

uint64_t sub_10001E934(uint64_t a1, int a2)
{
  return sub_10002E3D8(*(void *)(a1 + 8) + 48, a2);
}

unint64_t sub_10001E940(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 72) & 0xFFFFFFFFFFFFFFFELL;
}

double sub_10001E950(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0.0;
  }
  LODWORD(result) = *(_DWORD *)(v1 + 80);
  return result;
}

uint64_t sub_10001E968(void *a1)
{
  uint64_t result = a1[2];
  if (!result)
  {
    sub_10002F240(&v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)a1[3];
    *((_OWORD *)a1 + 1) = v3;
    if (v4)
    {
      sub_10002F060(v4);
      if (*((void *)&v5 + 1)) {
        sub_10002F060(*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    uint64_t result = a1[2];
    a1[1] = result;
  }
  return result;
}

void sub_10001E9D0(void *a1)
{
  uint64_t v1 = sub_10001E968(a1);
  sub_10001E9F8(v1);
}

void sub_10001E9F8(uint64_t a1)
{
  if (a1)
  {
    unint64_t v2 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    int v3 = *(char *)(v2 + 23);
    if (v3 < 0)
    {
      if (!*(void *)(v2 + 8)) {
        return;
      }
      uint64_t v4 = *(void *)(v2 + 8);
    }
    else
    {
      uint64_t v4 = *(unsigned __int8 *)(v2 + 23);
      if (!(_BYTE)v3) {
        return;
      }
    }
    int v24 = 0;
    sub_10002E4B8(&__p, v4 + 1, &v24);
    unint64_t v5 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      size_t v7 = *(unsigned __int8 **)v5;
      uint64_t v6 = *(void *)(v5 + 8);
    }
    else
    {
      uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
      size_t v7 = (unsigned __int8 *)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL);
    }
    size_t v8 = (char *)__p;
    if (v6)
    {
      int v9 = 0;
      unint64_t v10 = 0;
      do
      {
        int v11 = asc_1000A0F64[(unint64_t)*v7 >> 4];
        if (v11 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v11;
        }
        unint64_t v13 = v10 + v12;
        if (v10 + v12 > (int)v10)
        {
          unint64_t v10 = (int)v10;
          do
            *(_DWORD *)&v8[4 * v10++] = v9;
          while (v13 > v10);
        }
        ++v9;
        v7 += v12;
        unint64_t v10 = v13;
        v6 -= v12;
      }
      while (v6);
      size_t v8 = (char *)__p;
    }
    else
    {
      unint64_t v13 = 0;
      int v9 = 0;
    }
    *(_DWORD *)&v8[4 * v13] = v9;
    uint64_t v14 = *(void *)(a1 + 64);
    if (v14) {
      uint64_t v15 = (uint64_t *)(v14 + 8);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(int *)(a1 + 56);
    if (v16)
    {
      int32x2_t v17 = vdup_n_s32(((unint64_t)(v26 - v8) >> 2) - 1);
      uint64_t v18 = 8 * v16;
      do
      {
        uint64_t v19 = *v15++;
        int v20 = *(_DWORD *)(v19 + 40);
        int32x2_t v21 = vmin_s32(v17, vmax_s32(*(int32x2_t *)(v19 + 68), 0));
        int v22 = *(_DWORD *)&v8[4 * v21.i32[0]];
        *(_DWORD *)(v19 + 40) = v20 | 8;
        *(_DWORD *)(v19 + 68) = v22;
        int v23 = *(_DWORD *)&v8[4 * v21.i32[1]];
        *(_DWORD *)(v19 + 40) = v20 | 0x18;
        *(_DWORD *)(v19 + 72) = v23;
        v18 -= 8;
      }
      while (v18);
    }
    uint64_t v26 = v8;
    operator delete(v8);
  }
}

BOOL sub_10001EB78@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10006F9B0(*(void *)(a1 + 8), a2);
}

void *sub_10001EB80(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = off_1000ACD18;
  return result;
}

void *sub_10001EBA4(void *a1)
{
  *a1 = off_1000ACD18;
  unint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10002F060(v2);
  }
  return a1;
}

void *sub_10001EBF0(void *a1)
{
  *a1 = off_1000ACD18;
  unint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10002F060(v2);
  }
  return a1;
}

void sub_10001EC3C(void *a1)
{
  *a1 = off_1000ACD18;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10002F060(v1);
  }
  operator delete();
}

uint64_t sub_10001ECA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return *(int *)(v1 + 24);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001ECC0@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t result = sub_10002E53C(*(void *)(a1 + 8) + 16, a2);
  *a3 = off_1000ACCF8;
  a3[1] = result;
  a3[2] = 0;
  a3[3] = 0;
  return result;
}

void sub_10001ED0C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    sub_10002F36C(a2, *(int *)(v3 + 24));
    uint64_t v5 = *(void *)(a1 + 8);
    if (*(int *)(v5 + 24) >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      do
      {
        uint64_t v10 = sub_10002E53C(v5 + 16, v7);
        size_t v8 = (void *)(*a2 + v6);
        int v9 = (std::__shared_weak_count *)v8[3];
        v8[1] = v10;
        std::string v8[2] = 0;
        void v8[3] = 0;
        if (v9) {
          sub_10002F060(v9);
        }
        ++v7;
        uint64_t v5 = *(void *)(a1 + 8);
        v6 += 32;
      }
      while (v7 < *(int *)(v5 + 24));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_10001EE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_10001EE20(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!result)
  {
    sub_10002F5A0(&v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    *(_OWORD *)(a1 + 8) = v3;
    if (v4)
    {
      sub_10002F060(v4);
      if (*((void *)&v5 + 1)) {
        sub_10002F060(*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    return *(void *)(a1 + 8);
  }
  return result;
}

void sub_10001EE84(uint64_t a1)
{
  if (sub_10001EE20(a1))
  {
    uint64_t v2 = sub_10001EE20(a1);
    uint64_t v3 = *(void *)(v2 + 32);
    if (v3) {
      uint64_t v4 = (uint64_t *)(v3 + 8);
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(int *)(v2 + 24);
    if (v5)
    {
      uint64_t v6 = 8 * v5;
      do
      {
        uint64_t v7 = *v4++;
        sub_10001E9F8(v7);
        v6 -= 8;
      }
      while (v6);
    }
  }
}

void *sub_10001EEE0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (void *)sub_10006F9B0(v2, (uint64_t)a2);
  }
  else {
    return sub_10000A1B4(a2, "");
  }
}

double sub_10001EEFC(uint64_t a1)
{
  *(void *)a1 = &off_1000ACD38;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

uint64_t sub_10001EF3C(uint64_t a1)
{
  *(void *)a1 = &off_1000ACD38;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v2 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(void *)(a1 + 48) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

void sub_10001F0A0(uint64_t a1)
{
  sub_10001EF3C(a1);
  operator delete();
}

uint64_t sub_10001F0D8()
{
  sub_10001F264(v1);
  if ((*((unsigned char *)&v1[4] + (unint64_t)*(v1[0] - 3)) & 5) == 0) {
    std::istream::read();
  }
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return 0;
}

void sub_10001F248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001F428((uint64_t *)va);
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_10001F264(void (__cdecl ***a1)(std::ifstream *__hidden this)))(std::ifstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  a1[1] = 0;
  uint64_t v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 2);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_10001F3F0(_Unwind_Exception *a1)
{
}

void *sub_10001F428(void *a1)
{
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_10001F4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_10001F0D8()) {
    sub_10001F66C();
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64);
  return v6(a1, a2, a3);
}

void sub_10001F640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_10001F66C()
{
}

void sub_10001F6B4()
{
}

uint64_t sub_10001F6D8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (a1) {
    sub_10004939C();
  }
  return sub_10004D080(a2, 5, "model file path should not be empty.", 36);
}

void sub_10001FA5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  uint64_t v3 = *(void *)(v1 - 56);
  *(void *)(v1 - 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10001FAD4(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 16))(&v11);
  if (v11)
  {
    char v10 = 1;
    uint64_t v1 = sub_100018688(&std::cerr, (uint64_t)"sentencepiece_processor.cc", 26);
    sub_100018688(v1, (uint64_t)"(", 1);
    uint64_t v2 = (void *)std::ostream::operator<<();
    uint64_t v3 = sub_100018688(v2, (uint64_t)") [", 3);
    uint64_t v4 = sub_100018688(v3, (uint64_t)"_status.ok()", 12);
    uint64_t v5 = sub_100018688(v4, (uint64_t)"] ", 2);
    sub_10004D30C((uint64_t)&v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sub_100018688(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1000176C4(&v10);
  }
  return sub_10004CF1C(&v11);
}

void sub_10001FBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000176C4((unsigned char *)(v15 - 25));
  sub_10004CF1C((uint64_t *)(v15 - 24));
  _Unwind_Resume(a1);
}

void sub_10001FC1C()
{
}

void sub_10001FCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_10001FD14()
{
}

void sub_10001FF70(_Unwind_Exception *a1)
{
  sub_10002F6CC((uint64_t *)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sub_10001FFB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(unsigned char **)(*a2 + 88);
  if (!v5) {
    uint64_t v5 = &unk_1000B69A0;
  }
  if (v5[80])
  {
    if ((int)sub_10004A6A8() <= 0)
    {
      LOBYTE(v23) = 0;
      uint64_t v6 = sub_100018688(&std::cerr, (uint64_t)"sentencepiece_processor.cc", 26);
      sub_100018688(v6, (uint64_t)"(", 1);
      uint64_t v7 = (void *)std::ostream::operator<<();
      uint64_t v8 = sub_100018688(v7, (uint64_t)") ", 2);
      int v9 = sub_100018688(v8, (uint64_t)"LOG(", 4);
      char v10 = sub_100018688(v9, (uint64_t)"INFO", 4);
      uint64_t v11 = sub_100018688(v10, (uint64_t)") ", 2);
      sub_100018688(v11, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sub_1000176C4(&v23);
    }
    uint64_t v4 = *a2;
    *(_DWORD *)(v4 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    uint64_t v12 = *(void *)(v4 + 80);
    if (!v12)
    {
      uint64_t v13 = *(void *)(v4 + 8);
      uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFELL);
      if (v13) {
        uint64_t v14 = (void *)*v14;
      }
      uint64_t v12 = sub_100047A78((uint64_t)v14);
      *(void *)(v4 + 8sub_10002F6CC(&a9, 0) = v12;
      uint64_t v4 = *a2;
    }
    *(_DWORD *)(v12 + 40) |= 0x4000u;
    *(unsigned char *)(v12 + 245) = 1;
    *(_DWORD *)(v4 + 48) |= 2u;
    uint64_t v15 = *(void *)(v4 + 88);
    if (!v15)
    {
      uint64_t v16 = *(void *)(v4 + 8);
      int32x2_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
      if (v16) {
        int32x2_t v17 = (void *)*v17;
      }
      uint64_t v15 = sub_100047B48((uint64_t)v17);
      *(void *)(v4 + 88) = v15;
      uint64_t v4 = *a2;
    }
    *(_DWORD *)(v15 + 48) |= 0x10u;
    *(unsigned char *)(v15 + 81) = 1;
  }
  *a2 = 0;
  if (v4) {
    uint64_t v18 = v4 + 16;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    uint64_t v18 = *(void *)(a1 + 32);
  }
  sub_10001E0D8(v18 - 16, &v23);
  uint64_t v20 = v23;
  uint64_t v23 = 0;
  uint64_t v21 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    uint64_t v22 = v23;
    uint64_t v23 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
  sub_100020A00();
}

void sub_100020944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_100020A00()
{
}

void sub_100020A5C()
{
}

void sub_100020A80()
{
}

void sub_100020AD4()
{
}

void sub_100020AF8(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  sub_10001DEEC(&__dst, __src, __len);
  size_t v12 = strlen(a3);
  sub_10002F71C(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_100020BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100020C04(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
}

void sub_100020C0C(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  a4[1] = *a4;
  if (a3)
  {
    (*(void (**)(uint64_t *))(*a1 + 88))(a1);
    if (!*a5)
    {
      sub_10004CF1C(a5);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000B65E8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1000B65E8))
      {
        long long v42 = unk_1000ACFE8;
        *(_OWORD *)std::string __p = unk_1000ACFF8;
        long long v44 = off_1000AD008;
        uint64_t v45 = 3;
        long long v38 = off_1000ACFA8;
        long long v39 = unk_1000ACFB8;
        long long v40 = xmmword_1000ACFC8;
        long long v41 = *(_OWORD *)&off_1000ACFD8;
        sub_1000319CC((uint64_t)&unk_1000B65D0, (uint64_t)&v38, 5);
        __cxa_atexit((void (*)(void *))sub_10002AD00, &unk_1000B65D0, (void *)&_mh_execute_header);
        __cxa_guard_release(&qword_1000B65E8);
      }
      sub_10002E800((char **)&v36, a2, a3, ":", 1, 0);
      char v10 = (uint64_t *)v36;
      uint64_t v11 = v37;
      if (v36 == v37)
      {
LABEL_29:
        if (v10)
        {
          uint64_t v37 = v10;
          operator delete(v10);
        }
        sub_10004CF14(a5);
      }
      else
      {
        while (1)
        {
          size_t v12 = sub_10002FCB8((uint64_t)&unk_1000B65D0, (uint64_t)v10);
          uint64_t v13 = v12;
          if (v12 == (void *)&unk_1000B65D8) {
            break;
          }
          uint64_t v15 = a4[1];
          unint64_t v14 = (unint64_t)a4[2];
          if ((unint64_t)v15 >= v14)
          {
            int32x2_t v17 = *a4;
            uint64_t v18 = (v15 - *a4) >> 2;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              sub_100004204();
            }
            uint64_t v20 = v14 - (void)v17;
            if (v20 >> 1 > v19) {
              unint64_t v19 = v20 >> 1;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              uint64_t v22 = (char *)sub_10000A17C((uint64_t)(a4 + 2), v21);
              int32x2_t v17 = *a4;
              uint64_t v15 = a4[1];
            }
            else
            {
              uint64_t v22 = 0;
            }
            uint64_t v23 = &v22[4 * v18];
            *(_DWORD *)uint64_t v23 = *((_DWORD *)v13 + 12);
            uint64_t v16 = v23 + 4;
            while (v15 != v17)
            {
              int v24 = *((_DWORD *)v15 - 1);
              v15 -= 4;
              *((_DWORD *)v23 - 1) = v24;
              v23 -= 4;
            }
            *a4 = v23;
            a4[1] = v16;
            a4[2] = &v22[4 * v21];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v15 = *((_DWORD *)v12 + 12);
            uint64_t v16 = v15 + 4;
          }
          a4[1] = v16;
          int v25 = *((_DWORD *)v13 + 12);
          if (v25 == 1)
          {
            uint64_t v26 = sub_1000151B4(a1[1]);
            size_t v27 = strlen(v26);
            uint64_t v28 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v26, v27);
            if ((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v28))
            {
              LODWORD(v38) = 13;
              sub_10001752C((uint64_t)&v38 + 8);
              sub_100018688((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_100018688((void *)&v38 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_100018688((void *)&v38 + 1, (uint64_t)") [", 3);
              sub_100018688((void *)&v38 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              sub_100018688((void *)&v38 + 1, (uint64_t)"] ", 2);
              unsigned int v32 = sub_1000151B4(a1[1]);
              sub_100018688((void *)&v38 + 1, (uint64_t)v32, v33);
              sub_100014DB8((unsigned int *)&v38, (uint64_t)a5);
              goto LABEL_40;
            }
            int v25 = *((_DWORD *)v13 + 12);
          }
          if (v25 == 2)
          {
            unsigned int v29 = sub_100015238(a1[1]);
            size_t v30 = strlen(v29);
            uint64_t v31 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v29, v30);
            if ((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v31))
            {
              LODWORD(v38) = 13;
              sub_10001752C((uint64_t)&v38 + 8);
              sub_100018688((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_100018688((void *)&v38 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_100018688((void *)&v38 + 1, (uint64_t)") [", 3);
              sub_100018688((void *)&v38 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              sub_100018688((void *)&v38 + 1, (uint64_t)"] ", 2);
              int v34 = sub_100015238(a1[1]);
              sub_100018688((void *)&v38 + 1, (uint64_t)v34, v35);
              sub_100014DB8((unsigned int *)&v38, (uint64_t)a5);
LABEL_40:
              if (SBYTE7(v44) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_42;
            }
          }
          v10 += 2;
          if (v10 == v11)
          {
            char v10 = (uint64_t *)v36;
            goto LABEL_29;
          }
        }
        LODWORD(v38) = 13;
        sub_10001752C((uint64_t)&v38 + 8);
        sub_100018688((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_100018688((void *)&v38 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_100018688((void *)&v38 + 1, (uint64_t)") [", 3);
        sub_100018688((void *)&v38 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        sub_100018688((void *)&v38 + 1, (uint64_t)"] ", 2);
        sub_100018688((void *)&v38 + 1, (uint64_t)"option \"", 8);
        sub_100018688((void *)&v38 + 1, *v10, v10[1]);
        sub_100018688((void *)&v38 + 1, (uint64_t)"\" is not available.", 19);
        sub_100014DB8((unsigned int *)&v38, (uint64_t)a5);
        if (SBYTE7(v44) < 0) {
          operator delete(__p[0]);
        }
LABEL_42:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        if (v36)
        {
          uint64_t v37 = (uint64_t *)v36;
          operator delete(v36);
        }
      }
    }
  }
  else
  {
    sub_10004CF14(a5);
  }
}

void sub_10002145C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1000214D8(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
}

void *sub_1000214E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    if (*(void *)(a1 + 16))
    {
      double result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      if (!*a2)
      {
        sub_10004CF1C(a2);
        double result = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
        if (!*a2)
        {
          uint64_t v6 = sub_10004CF1C(a2);
          return sub_10004CF14(v6);
        }
      }
      return result;
    }
    unsigned int v9 = 13;
    uint64_t v8 = (void *)sub_10001752C((uint64_t)v10);
    sub_100018688(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v10, (uint64_t)") [", 3);
    sub_100018688(v10, (uint64_t)"normalizer_", 11);
    sub_100018688(v10, (uint64_t)"] ", 2);
    sub_100018688(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sub_100014DB8(&v9, (uint64_t)a2);
  }
  else
  {
    unsigned int v9 = 13;
    uint64_t v7 = (void *)sub_10001752C((uint64_t)v10);
    sub_100018688(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v10, (uint64_t)") [", 3);
    sub_100018688(v10, (uint64_t)"model_", 6);
    sub_100018688(v10, (uint64_t)"] ", 2);
    sub_100018688(v10, (uint64_t)"Model is not initialized.", 25);
    sub_100014DB8(&v9, (uint64_t)a2);
  }
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)std::ios::~ios();
}

void sub_1000217F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100021818(void *a1@<X0>, _OWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  if (*a3) {
    return;
  }
  sub_10004CF1C(a3);
  uint64_t v6 = (const void *)a1[4];
  if (!v6
  {
    unsigned int v23 = 13;
    uint64_t v20 = (void *)sub_10001752C((uint64_t)v24);
    sub_100018688(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688(v24, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v24, (uint64_t)") [", 3);
    sub_100018688(v24, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    sub_100018688(v24, (uint64_t)"] ", 2);
    sub_100018688(v24, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sub_100014DB8(&v23, (uint64_t)a3);
LABEL_27:
    if (v25 < 0) {
      operator delete(v24[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return;
  }
  uint64_t v8 = v7;
  unsigned int v9 = &unk_1000B6858;
  if (v7[10]) {
    unsigned int v9 = (_DWORD *)v7[10];
  }
  if ((v9[68] - 1) >= 2)
  {
    unsigned int v23 = 13;
    unint64_t v21 = (void *)sub_10001752C((uint64_t)v24);
    sub_100018688(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688(v24, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v24, (uint64_t)") [", 3);
    sub_100018688(v24, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    sub_100018688(v24, (uint64_t)"] ", 2);
    sub_100018688(v24, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sub_100014DB8(&v23, (uint64_t)a3);
    goto LABEL_27;
  }
  sub_10002FA00((uint64_t)&v23, *a2, a2[1]);
  if (*((int *)v8 + 16) >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = sub_10002E720((uint64_t)(v8 + 7), v10);
      uint64_t v12 = v11;
      if ((*(_DWORD *)(v11 + 60) - 2) >= 3)
      {
        unint64_t v13 = *(void *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v13 + 23) < 0)
        {
          unint64_t v15 = *(void *)v13;
          uint64_t v14 = *(void *)(v13 + 8);
        }
        else
        {
          uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
          unint64_t v15 = *(void *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v22[0] = v15;
        v22[1] = v14;
        if (v24 == sub_10002FCB8((uint64_t)&v23, (uint64_t)v22)
          && ((unint64_t v16 = *(void *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v16 + 23) < 0)
            ? (unsigned __int8 *)(v18 = *(unsigned __int8 **)v16, uint64_t v17 = *(void *)(v16 + 8))
            : (uint64_t v17 = *(unsigned __int8 *)(v16 + 23),
               uint64_t v18 = (unsigned __int8 *)(*(void *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v17 != asc_1000A0F64[(unint64_t)*v18 >> 4]))
        {
          if (!sub_10003E078(5)) {
LABEL_32:
          }
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          int v19 = 5;
        }
        else
        {
          if (!sub_10003E078(1)) {
            goto LABEL_32;
          }
          int v19 = 1;
        }
        *(_DWORD *)(v12 + 40) |= 4u;
        *(_DWORD *)(v12 + 6sub_10002F6CC(&a9, 0) = v19;
      }
      ++v10;
    }
    while (v10 < *((_DWORD *)v8 + 16));
  }
  sub_10004CF14(a3);
  sub_100018A60((uint64_t)&v23, v24[0]);
}

void sub_100021C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void *sub_100021CBC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  double result = (void *)(*(uint64_t (**)(void *))(*a1 + 88))(a1);
  if (!*a2)
  {
    sub_10004CF1C(a2);
    uint64_t v5 = (const void *)a1[4];
    if (v5
    {
      uint64_t v7 = *((void *)v6 + 9);
      if (v7) {
        uint64_t v8 = (uint64_t *)(v7 + 8);
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v6[16];
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        do
        {
          uint64_t v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sub_10003E078(1)) {
              sub_1000320B8();
            }
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 6sub_10002F6CC(&a9, 0) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sub_10004CF14(a2);
    }
    else
    {
      unsigned int v13 = 13;
      uint64_t v12 = (void *)sub_10001752C((uint64_t)v14);
      sub_100018688(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(v14, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(v14, (uint64_t)") [", 3);
      sub_100018688(v14, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      sub_100018688(v14, (uint64_t)"] ", 2);
      sub_100018688(v14, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sub_100014DB8(&v13, (uint64_t)a2);
      if (v15 < 0) {
        operator delete((void *)v14[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (void *)std::ios::~ios();
    }
  }
  return result;
}

void sub_100021F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100021F9C()
{
}

void sub_100022580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  std::string __p = (void *)(v10 - 176);
  sub_10000D388((void ***)&__p);
  std::string __p = (void *)(v10 - 152);
  sub_10000D388((void ***)&__p);
  if (*(char *)(v10 - 105) < 0) {
    operator delete(*(void **)(v10 - 128));
  }
  uint64_t v12 = *(void *)(v10 - 104);
  *(void *)(v10 - 104) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100022674(const char *a1)
{
  sub_10002FD48((uint64_t)v8);
  size_t v2 = strlen(a1);
  uint64_t v3 = sub_100018688(v9, (uint64_t)a1, v2);
  if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0)
  {
    BOOL v4 = 0;
  }
  else
  {
    uint64_t v5 = (void *)std::istream::operator>>();
    BOOL v4 = (*((unsigned char *)v5 + *(void *)(*v5 - 24) + 32) & 5) == 0;
  }
  *(void *)((char *)v8
  v9[0] = v6;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return v4;
}

void sub_10002284C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100030020((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100022860@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  double result = sub_10002EB70(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (void *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        uint64_t v9 = (void *)*v8;
        uint64_t v4 = v8[1];
      }
      else
      {
        uint64_t v4 = v4;
        uint64_t v9 = v8;
      }
      char v10 = (void *)(*result + v6);
      void *v10 = v9;
      v10[1] = v4;
      ++v7;
      uint64_t v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

uint64_t sub_100022904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a5)
  {
    sub_10004CF1C(a5);
    if (a4)
    {
      sub_10000D3DC(a4);
      sub_10003B5AC(&v16, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 232))(a1, a2, a3, &v16);
      if (!*a5)
      {
        sub_10004CF1C(a5);
        if (v19) {
          uint64_t v11 = v19 + 8;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v18)
        {
          unint64_t v12 = a4[1];
          uint64_t v13 = 8 * v18;
          do
          {
            uint64_t v14 = (long long *)(*(void *)(*(void *)v11 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v12 >= a4[2])
            {
              unint64_t v12 = sub_1000301B8(a4, v14);
            }
            else
            {
              sub_100030158(a4, v14);
              v12 += 24;
            }
            a4[1] = v12;
            v11 += 8;
            v13 -= 8;
          }
          while (v13);
        }
        sub_10004CF14(a5);
      }
      return sub_10003B828(&v16);
    }
    else
    {
      unsigned int v16 = 13;
      char v15 = (void *)sub_10001752C((uint64_t)v17);
      sub_100018688(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(v17, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(v17, (uint64_t)") [", 3);
      sub_100018688(v17, (uint64_t)"pieces", 6);
      sub_100018688(v17, (uint64_t)"] ", 2);
      sub_100018688(v17, (uint64_t)"output container is null", 24);
      sub_100014DB8(&v16, (uint64_t)a5);
      if (v21 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_100022BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100022C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a5)
  {
    sub_10004CF1C(a5);
    if (a4)
    {
      a4[1] = *a4;
      sub_10003B5AC(&v26, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 232))(a1, a2, a3, &v26);
      if (!*a5)
      {
        sub_10004CF1C(a5);
        if (v29) {
          uint64_t v11 = v29 + 8;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v28)
        {
          unint64_t v12 = a4 + 2;
          uint64_t v13 = a4[1];
          uint64_t v14 = v11 + 8 * v28;
          do
          {
            int v15 = *(_DWORD *)(*(void *)v11 + 64);
            if ((unint64_t)v13 >= *v12)
            {
              uint64_t v17 = *a4;
              uint64_t v18 = (v13 - *a4) >> 2;
              unint64_t v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62) {
                sub_100004204();
              }
              uint64_t v20 = *v12 - (void)v17;
              if (v20 >> 1 > v19) {
                unint64_t v19 = v20 >> 1;
              }
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v21 = v19;
              }
              if (v21)
              {
                uint64_t v22 = (char *)sub_10000A17C((uint64_t)(a4 + 2), v21);
                uint64_t v17 = *a4;
                uint64_t v13 = a4[1];
              }
              else
              {
                uint64_t v22 = 0;
              }
              unsigned int v23 = &v22[4 * v18];
              *(_DWORD *)unsigned int v23 = v15;
              unsigned int v16 = v23 + 4;
              while (v13 != v17)
              {
                int v24 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v23 - 1) = v24;
                v23 -= 4;
              }
              *a4 = v23;
              a4[1] = v16;
              a4[2] = &v22[4 * v21];
              if (v17) {
                operator delete(v17);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v13 = v15;
              unsigned int v16 = v13 + 4;
            }
            a4[1] = v16;
            v11 += 8;
            uint64_t v13 = v16;
          }
          while (v11 != v14);
        }
        sub_10004CF14(a5);
      }
      return sub_10003B828(&v26);
    }
    else
    {
      unsigned int v26 = 13;
      char v25 = (void *)sub_10001752C((uint64_t)v27);
      sub_100018688(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(v27, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(v27, (uint64_t)") [", 3);
      sub_100018688(v27, (uint64_t)"ids", 3);
      sub_100018688(v27, (uint64_t)"] ", 2);
      sub_100018688(v27, (uint64_t)"output container is null", 24);
      sub_100014DB8(&v26, (uint64_t)a5);
      if (v31 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_100022F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100022FA8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_100022860(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_100023030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002304C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a4)
  {
    sub_10004CF1C(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(unsigned char **)a3 = 0;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 23) = 0;
      }
      sub_10003B5AC(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 272))(a1, a2, &v10);
      if (!*a4)
      {
        sub_10004CF1C(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_10004CF14(a4);
      }
      return sub_10003B828(&v10);
    }
    else
    {
      unsigned int v10 = 13;
      uint64_t v9 = (void *)sub_10001752C((uint64_t)v11);
      sub_100018688(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(v11, (uint64_t)") [", 3);
      sub_100018688(v11, (uint64_t)"detokenized", 11);
      sub_100018688(v11, (uint64_t)"] ", 2);
      sub_100018688(v11, (uint64_t)"output container is null", 24);
      sub_100014DB8(&v10, (uint64_t)a4);
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_1000232E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100023310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a4)
  {
    sub_10004CF1C(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(unsigned char **)a3 = 0;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 23) = 0;
      }
      sub_10003B5AC(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 280))(a1, a2, &v10);
      if (!*a4)
      {
        sub_10004CF1C(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_10004CF14(a4);
      }
      return sub_10003B828(&v10);
    }
    else
    {
      unsigned int v10 = 13;
      uint64_t v9 = (void *)sub_10001752C((uint64_t)v11);
      sub_100018688(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(v11, (uint64_t)") [", 3);
      sub_100018688(v11, (uint64_t)"detokenized", 11);
      sub_100018688(v11, (uint64_t)"] ", 2);
      sub_100018688(v11, (uint64_t)"output container is null", 24);
      sub_100014DB8(&v10, (uint64_t)a4);
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_1000235AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000235D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_10004CF1C(a6);
    if (a5)
    {
      uint64_t v13 = *a5;
      uint64_t v14 = (void **)a5[1];
      while (v14 != (void **)v13)
      {
        v14 -= 3;
        char v31 = v14;
        sub_10000D388(&v31);
      }
      a5[1] = v13;
      sub_10003C460(&v31, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(void *)a1 + 240))(a1, a2, a3, a4, &v31);
      if (!*a6)
      {
        sub_10004CF1C(a6);
        if (v34) {
          int v15 = (uint64_t *)(v34 + 8);
        }
        else {
          int v15 = 0;
        }
        if (v33)
        {
          unsigned int v16 = &v15[v33];
          do
          {
            uint64_t v17 = *v15;
            int v28 = 0;
            unint64_t v29 = 0;
            unint64_t v30 = 0;
            uint64_t v18 = *(void *)(v17 + 64);
            if (v18) {
              uint64_t v19 = v18 + 8;
            }
            else {
              uint64_t v19 = 0;
            }
            uint64_t v20 = *(int *)(v17 + 56);
            if (v20)
            {
              unint64_t v21 = 0;
              uint64_t v22 = 8 * v20;
              do
              {
                unint64_t v23 = *(void *)(*(void *)v19 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v21 >= v30)
                {
                  unint64_t v21 = sub_1000301B8((uint64_t *)&v28, (long long *)v23);
                }
                else
                {
                  if (*(char *)(v23 + 23) < 0)
                  {
                    sub_1000302DC((unsigned char *)v21, *(void **)v23, *(void *)(v23 + 8));
                  }
                  else
                  {
                    long long v24 = *(_OWORD *)v23;
                    *(void *)(v21 + 16) = *(void *)(v23 + 16);
                    *(_OWORD *)unint64_t v21 = v24;
                  }
                  v21 += 24;
                }
                unint64_t v29 = v21;
                v19 += 8;
                v22 -= 8;
              }
              while (v22);
            }
            unint64_t v25 = a5[1];
            if (v25 >= a5[2])
            {
              uint64_t v26 = sub_1000303DC(a5, &v28);
            }
            else
            {
              sub_10003037C((uint64_t)a5, &v28);
              uint64_t v26 = v25 + 24;
            }
            a5[1] = v26;
            uint64_t v37 = &v28;
            sub_10000D388((void ***)&v37);
            ++v15;
          }
          while (v15 != v16);
        }
        sub_10004CF14(a6);
      }
      return sub_10003C5FC(&v31);
    }
    else
    {
      LODWORD(v31) = 13;
      size_t v27 = (void *)sub_10001752C((uint64_t)v32);
      sub_100018688(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(v32, (uint64_t)") [", 3);
      sub_100018688(v32, (uint64_t)"pieces", 6);
      sub_100018688(v32, (uint64_t)"] ", 2);
      sub_100018688(v32, (uint64_t)"output container is null", 24);
      sub_100014DB8((unsigned int *)&v31, (uint64_t)a6);
      if (v36 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_100023978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100014E48((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000239C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_10004CF1C(a6);
    if (a5)
    {
      sub_10002EF94(a5);
      sub_10003C460(&v37, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 240))(a1, a2, a3, a4, &v37);
      if (!*a6)
      {
        sub_10004CF1C(a6);
        if (v40) {
          uint64_t v13 = (uint64_t *)(v40 + 8);
        }
        else {
          uint64_t v13 = 0;
        }
        if (v39)
        {
          int v33 = &v13[v39];
          do
          {
            uint64_t v14 = *v13;
            std::string __p = 0;
            uint64_t v35 = 0;
            char v36 = 0;
            uint64_t v15 = *(void *)(v14 + 64);
            if (v15) {
              uint64_t v16 = v15 + 8;
            }
            else {
              uint64_t v16 = 0;
            }
            uint64_t v17 = *(int *)(v14 + 56);
            if (v17)
            {
              uint64_t v18 = 0;
              uint64_t v19 = v16 + 8 * v17;
              do
              {
                int v20 = *(_DWORD *)(*(void *)v16 + 64);
                if (v18 >= v36)
                {
                  uint64_t v22 = (char *)__p;
                  uint64_t v23 = (v18 - (unsigned char *)__p) >> 2;
                  unint64_t v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 62) {
                    sub_100004204();
                  }
                  uint64_t v25 = v36 - (unsigned char *)__p;
                  if ((v36 - (unsigned char *)__p) >> 1 > v24) {
                    unint64_t v24 = v25 >> 1;
                  }
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v26 = v24;
                  }
                  if (v26)
                  {
                    size_t v27 = (char *)sub_10000A17C((uint64_t)&v36, v26);
                    uint64_t v22 = (char *)__p;
                    uint64_t v18 = v35;
                  }
                  else
                  {
                    size_t v27 = 0;
                  }
                  int v28 = &v27[4 * v23];
                  *(_DWORD *)int v28 = v20;
                  unint64_t v21 = v28 + 4;
                  while (v18 != v22)
                  {
                    int v29 = *((_DWORD *)v18 - 1);
                    v18 -= 4;
                    *((_DWORD *)v28 - 1) = v29;
                    v28 -= 4;
                  }
                  std::string __p = v28;
                  uint64_t v35 = v21;
                  char v36 = &v27[4 * v26];
                  if (v22) {
                    operator delete(v22);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v18 = v20;
                  unint64_t v21 = v18 + 4;
                }
                uint64_t v35 = v21;
                v16 += 8;
                uint64_t v18 = v21;
              }
              while (v16 != v19);
            }
            unint64_t v30 = a5[1];
            if (v30 >= a5[2])
            {
              uint64_t v31 = sub_10003077C(a5, (uint64_t)&__p);
            }
            else
            {
              sub_100030728((uint64_t)a5, (uint64_t)&__p);
              uint64_t v31 = v30 + 24;
            }
            a5[1] = v31;
            if (__p)
            {
              uint64_t v35 = (char *)__p;
              operator delete(__p);
            }
            ++v13;
          }
          while (v13 != v33);
        }
        sub_10004CF14(a6);
      }
      return sub_10003C5FC(&v37);
    }
    else
    {
      unsigned int v37 = 13;
      unsigned int v32 = (void *)sub_10001752C((uint64_t)v38);
      sub_100018688(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(v38, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(v38, (uint64_t)") [", 3);
      sub_100018688(v38, (uint64_t)"ids", 3);
      sub_100018688(v38, (uint64_t)"] ", 2);
      sub_100018688(v38, (uint64_t)"output container is null", 24);
      sub_100014DB8(&v37, (uint64_t)a6);
      if (v42 < 0) {
        operator delete(v41);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_100023DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_100023E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_10004CF1C(a6);
    if (a5)
    {
      sub_10000D3DC(a5);
      sub_10003B5AC(&v20, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 248))(a1, a2, a3, a4, &v20, a7);
      if (!*a6)
      {
        sub_10004CF1C(a6);
        if (v23) {
          uint64_t v15 = v23 + 8;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v22)
        {
          unint64_t v16 = a5[1];
          uint64_t v17 = 8 * v22;
          do
          {
            uint64_t v18 = (long long *)(*(void *)(*(void *)v15 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v16 >= a5[2])
            {
              unint64_t v16 = sub_1000301B8(a5, v18);
            }
            else
            {
              sub_100030158(a5, v18);
              v16 += 24;
            }
            a5[1] = v16;
            v15 += 8;
            v17 -= 8;
          }
          while (v17);
        }
        sub_10004CF14(a6);
      }
      return sub_10003B828(&v20);
    }
    else
    {
      unsigned int v20 = 13;
      uint64_t v19 = (void *)sub_10001752C((uint64_t)v21);
      sub_100018688(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(v21, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(v21, (uint64_t)") [", 3);
      sub_100018688(v21, (uint64_t)"pieces", 6);
      sub_100018688(v21, (uint64_t)"] ", 2);
      sub_100018688(v21, (uint64_t)"output container is null", 24);
      sub_100014DB8(&v20, (uint64_t)a6);
      if (v25 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_100024100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10002412C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_10004CF1C(a6);
    if (a5)
    {
      a5[1] = *a5;
      sub_10003B5AC(&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 248))(a1, a2, a3, a4, &v30, a7);
      if (!*a6)
      {
        sub_10004CF1C(a6);
        if (v33) {
          uint64_t v15 = v33 + 8;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v32)
        {
          unint64_t v16 = a5 + 2;
          uint64_t v17 = a5[1];
          uint64_t v18 = v15 + 8 * v32;
          do
          {
            int v19 = *(_DWORD *)(*(void *)v15 + 64);
            if ((unint64_t)v17 >= *v16)
            {
              unint64_t v21 = *a5;
              uint64_t v22 = (v17 - *a5) >> 2;
              unint64_t v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62) {
                sub_100004204();
              }
              uint64_t v24 = *v16 - (void)v21;
              if (v24 >> 1 > v23) {
                unint64_t v23 = v24 >> 1;
              }
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v23;
              }
              if (v25)
              {
                unint64_t v26 = (char *)sub_10000A17C((uint64_t)(a5 + 2), v25);
                unint64_t v21 = *a5;
                uint64_t v17 = a5[1];
              }
              else
              {
                unint64_t v26 = 0;
              }
              size_t v27 = &v26[4 * v22];
              *(_DWORD *)size_t v27 = v19;
              unsigned int v20 = v27 + 4;
              while (v17 != v21)
              {
                int v28 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *((_DWORD *)v27 - 1) = v28;
                v27 -= 4;
              }
              *a5 = v27;
              a5[1] = v20;
              a5[2] = &v26[4 * v25];
              if (v21) {
                operator delete(v21);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v17 = v19;
              unsigned int v20 = v17 + 4;
            }
            a5[1] = v20;
            v15 += 8;
            uint64_t v17 = v20;
          }
          while (v15 != v18);
        }
        sub_10004CF14(a6);
      }
      return sub_10003B828(&v30);
    }
    else
    {
      unsigned int v30 = 13;
      int v29 = (void *)sub_10001752C((uint64_t)v31);
      sub_100018688(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(v31, (uint64_t)") [", 3);
      sub_100018688(v31, (uint64_t)"ids", 3);
      sub_100018688(v31, (uint64_t)"] ", 2);
      sub_100018688(v31, (uint64_t)"output container is null", 24);
      sub_100014DB8(&v30, (uint64_t)a6);
      if (v35 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_1000244B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000244E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a8)
  {
    sub_10004CF1C(a8);
    if (a7)
    {
      uint64_t v19 = *a7;
      unsigned int v20 = (void **)a7[1];
      while (v20 != (void **)v19)
      {
        v20 -= 4;
        int v39 = v20;
        sub_10000D388(&v39);
      }
      a7[1] = v19;
      sub_10003C460(&v39, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(void *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v39, a9);
      if (!*a8)
      {
        sub_10004CF1C(a8);
        unint64_t v21 = (long long *)*a7;
        uint64_t v22 = (long long *)a7[1];
        while (v22 != v21)
        {
          v22 -= 2;
          char v36 = v22;
          sub_10000D388((void ***)&v36);
        }
        a7[1] = (uint64_t)v21;
        sub_10002495C(a7, v41);
        if (v42) {
          uint64_t v24 = (uint64_t *)(v42 + 8);
        }
        else {
          uint64_t v24 = 0;
        }
        if (v41)
        {
          unint64_t v25 = &v24[v41];
          do
          {
            uint64_t v26 = *v24;
            char v36 = 0;
            std::string __dst = 0;
            unint64_t v38 = 0;
            sub_1000249F0((uint64_t *)&v36, *(int *)(v26 + 56));
            uint64_t v27 = *(void *)(v26 + 64);
            if (v27) {
              uint64_t v28 = v27 + 8;
            }
            else {
              uint64_t v28 = 0;
            }
            uint64_t v29 = *(int *)(v26 + 56);
            if (v29)
            {
              unint64_t v30 = (unint64_t)__dst;
              uint64_t v31 = 8 * v29;
              do
              {
                unint64_t v32 = *(void *)(*(void *)v28 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v30 >= v38)
                {
                  unint64_t v30 = sub_1000301B8((uint64_t *)&v36, (long long *)v32);
                }
                else
                {
                  if (*(char *)(v32 + 23) < 0)
                  {
                    sub_1000302DC((unsigned char *)v30, *(void **)v32, *(void *)(v32 + 8));
                  }
                  else
                  {
                    long long v33 = *(_OWORD *)v32;
                    *(void *)(v30 + 16) = *(void *)(v32 + 16);
                    *(_OWORD *)unint64_t v30 = v33;
                  }
                  v30 += 24;
                }
                std::string __dst = (void *)v30;
                v28 += 8;
                v31 -= 8;
              }
              while (v31);
            }
            LODWORD(v45[0]) = *(_DWORD *)(v26 + 80);
            unint64_t v34 = a7[1];
            if (v34 >= a7[2])
            {
              uint64_t v35 = sub_100030D68(a7, &v36, v45);
            }
            else
            {
              sub_100030CF4((uint64_t)a7, &v36, (float *)v45);
              uint64_t v35 = v34 + 32;
            }
            a7[1] = v35;
            v45[0] = (void **)&v36;
            sub_10000D388(v45);
            ++v24;
          }
          while (v24 != v25);
        }
        sub_10004CF14(a8);
      }
      return sub_10003C5FC(&v39);
    }
    else
    {
      LODWORD(v39) = 13;
      unint64_t v23 = (void *)sub_10001752C((uint64_t)v40);
      sub_100018688(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(v40, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(v40, (uint64_t)") [", 3);
      sub_100018688(v40, (uint64_t)"pieces", 6);
      sub_100018688(v40, (uint64_t)"] ", 2);
      sub_100018688(v40, (uint64_t)"output container is null", 24);
      sub_100014DB8((unsigned int *)&v39, (uint64_t)a8);
      if (v44 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_100024908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100014E48((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_10002495C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_100004204();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10002F4A8((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_100030AC4(a1, v7);
    return sub_100030C6C(v7);
  }
  return result;
}

void sub_1000249DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100030C6C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000249F0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_100004204();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10000D200(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_10000D788(a1, v7);
    return sub_10000D920((uint64_t)v7);
  }
  return result;
}

void sub_100024A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000D920((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100024AA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a8)
  {
    sub_10004CF1C(a8);
    if (a7)
    {
      sub_100018530(a7);
      sub_10003C460(&v45, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v45, a9);
      if (!*a8)
      {
        int v39 = a8;
        sub_10004CF1C(a8);
        sub_100018530(a7);
        sub_100024F54(a7, v47);
        if (v48) {
          uint64_t v19 = (uint64_t *)(v48 + 8);
        }
        else {
          uint64_t v19 = 0;
        }
        if (v47)
        {
          uint64_t v40 = &v19[v47];
          do
          {
            uint64_t v20 = *v19;
            std::string __p = 0;
            uint64_t v43 = 0;
            char v44 = 0;
            sub_100024FE8(&__p, *(int *)(v20 + 56));
            uint64_t v21 = *(void *)(v20 + 64);
            if (v21) {
              uint64_t v22 = v21 + 8;
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v23 = *(int *)(v20 + 56);
            if (v23)
            {
              uint64_t v24 = v22 + 8 * v23;
              unint64_t v25 = v43;
              do
              {
                int v26 = *(_DWORD *)(*(void *)v22 + 64);
                if (v25 >= v44)
                {
                  uint64_t v28 = (char *)__p;
                  uint64_t v29 = (v25 - (unsigned char *)__p) >> 2;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62) {
                    sub_100004204();
                  }
                  uint64_t v31 = v44 - (unsigned char *)__p;
                  if ((v44 - (unsigned char *)__p) >> 1 > v30) {
                    unint64_t v30 = v31 >> 1;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    long long v33 = (char *)sub_10000A17C((uint64_t)&v44, v32);
                    uint64_t v28 = (char *)__p;
                    unint64_t v25 = v43;
                  }
                  else
                  {
                    long long v33 = 0;
                  }
                  unint64_t v34 = &v33[4 * v29];
                  *(_DWORD *)unint64_t v34 = v26;
                  uint64_t v27 = v34 + 4;
                  while (v25 != v28)
                  {
                    int v35 = *((_DWORD *)v25 - 1);
                    v25 -= 4;
                    *((_DWORD *)v34 - 1) = v35;
                    v34 -= 4;
                  }
                  std::string __p = v34;
                  uint64_t v43 = v27;
                  char v44 = &v33[4 * v32];
                  if (v28) {
                    operator delete(v28);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v25 = v26;
                  uint64_t v27 = v25 + 4;
                }
                uint64_t v43 = v27;
                v22 += 8;
                unint64_t v25 = v27;
              }
              while (v22 != v24);
            }
            int v41 = *(_DWORD *)(v20 + 80);
            unint64_t v36 = a7[1];
            if (v36 >= a7[2])
            {
              uint64_t v37 = sub_100031118(a7, (uint64_t)&__p, &v41);
            }
            else
            {
              sub_1000310B0((uint64_t)a7, (uint64_t)&__p, (float *)&v41);
              uint64_t v37 = v36 + 32;
            }
            a7[1] = v37;
            if (__p)
            {
              uint64_t v43 = (char *)__p;
              operator delete(__p);
            }
            ++v19;
          }
          while (v19 != v40);
        }
        sub_10004CF14(v39);
      }
      return sub_10003C5FC(&v45);
    }
    else
    {
      unsigned int v45 = 13;
      unint64_t v38 = (void *)sub_10001752C((uint64_t)v46);
      sub_100018688(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(v46, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(v46, (uint64_t)") [", 3);
      sub_100018688(v46, (uint64_t)"ids", 3);
      sub_100018688(v46, (uint64_t)"] ", 2);
      sub_100018688(v46, (uint64_t)"output container is null", 24);
      sub_100014DB8(&v45, (uint64_t)a8);
      if (v50 < 0) {
        operator delete(v49);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_100024F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t sub_100024F54(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_100004204();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10002F4A8(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_100030E78(a1, v7);
    return sub_10003101C((uint64_t)v7);
  }
  return result;
}

void sub_100024FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003101C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100024FE8(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_100004204();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_10000A17C(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    unsigned int v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    char v12 = v7;
    if (v11 != *a1)
    {
      char v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_100025090@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v10 = *a6;
  uint64_t v110 = a6[1];
  if (*a6 != v110)
  {
    uint64_t v11 = a5;
    unint64_t v12 = 0;
    char v13 = 0;
    uint64_t v112 = a7 + 48;
    while (1)
    {
      size_t v14 = *(void *)(v10 + 8);
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        v97 = (void *)sub_10001752C((uint64_t)&__p[1]);
        sub_100018688(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_100018688(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_100018688(&__p[1], (uint64_t)") [", 3);
        sub_100018688(&__p[1], (uint64_t)"!w.empty()", 10);
        sub_100018688(&__p[1], (uint64_t)"] ", 2);
        sub_100018688(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sub_100014DB8((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      uint64_t v15 = *(unsigned __int8 **)v10;
      uint64_t v16 = *(unsigned int *)(v10 + 16);
      int v111 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v16);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v16))
      {
        uint64_t v17 = *(int **)(a7 + 64);
        if (v17)
        {
          uint64_t v18 = *(int *)(a7 + 56);
          int v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            uint64_t v20 = *(void *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            sub_10001DEEC(__p, v15, v14);
            uint64_t v53 = *(void *)(v20 + 8);
            int64_t v54 = (void *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if (v53) {
              int64_t v54 = (void *)*v54;
            }
            sub_10004E9EC((uint64_t *)(v20 + 48), (long long *)__p, (uint64_t)v54);
            if (SHIBYTE(v117) < 0) {
              operator delete(__p[0]);
            }
            int v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            uint64_t v56 = *(void *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 4sub_10002F6CC(&a9, 0) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            *uint64_t v17 = v19 + 1;
            uint64_t v20 = sub_10003CE94(*(void *)(a7 + 48));
            uint64_t v51 = *(void *)(a7 + 64);
            uint64_t v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(void *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          int v19 = *(_DWORD *)(a7 + 60);
        }
        sub_10007E8E4(v112, v19 + 1);
        uint64_t v17 = *(int **)(a7 + 64);
        int v19 = *v17;
        goto LABEL_57;
      }
      uint64_t v21 = *v11;
      uint64_t v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v98 = (void *)sub_10001752C((uint64_t)&__p[1]);
        sub_100018688(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_100018688(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_100018688(&__p[1], (uint64_t)") [", 3);
        sub_100018688(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        sub_100018688(&__p[1], (uint64_t)"] ", 2);
        sub_100014DB8((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v99 = (void *)sub_10001752C((uint64_t)&__p[1]);
        sub_100018688(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_100018688(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_100018688(&__p[1], (uint64_t)") [", 3);
        sub_100018688(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        sub_100018688(&__p[1], (uint64_t)"] ", 2);
        sub_100014DB8((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v24 = *(void *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        v100 = (void *)sub_10001752C((uint64_t)&__p[1]);
        sub_100018688(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_100018688(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_100018688(&__p[1], (uint64_t)") [", 3);
        sub_100018688(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        sub_100018688(&__p[1], (uint64_t)"] ", 2);
        sub_100014DB8((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v25 = *(void *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        v101 = (void *)sub_10001752C((uint64_t)&__p[1]);
        sub_100018688(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_100018688(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_100018688(&__p[1], (uint64_t)") [", 3);
        sub_100018688(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        sub_100018688(&__p[1], (uint64_t)"] ", 2);
        sub_100014DB8((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        v102 = (void *)sub_10001752C((uint64_t)&__p[1]);
        sub_100018688(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_100018688(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_100018688(&__p[1], (uint64_t)") [", 3);
        sub_100018688(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        sub_100018688(&__p[1], (uint64_t)"] ", 2);
        sub_100014DB8((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24) {
        size_t v27 = v24;
      }
      else {
        size_t v27 = a3;
      }
      uint64_t v28 = &a2[v27];
      size_t v29 = a3 - v27;
      if (v29 < v26) {
        size_t v26 = v29;
      }
      __src = v28;
      size_t __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            unsigned __int8 v31 = *v15++;
            unsigned __int8 v30 = v31;
            unint64_t v32 = *(int **)(a7 + 64);
            if (!v32) {
              break;
            }
            uint64_t v33 = *(int *)(a7 + 56);
            int v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                sub_10007E8E4(v112, v34 + 1);
                unint64_t v32 = *(int **)(a7 + 64);
                int v34 = *v32;
              }
              int *v32 = v34 + 1;
              uint64_t v35 = sub_10003CE94(*(void *)(a7 + 48));
              uint64_t v36 = *(void *)(a7 + 64);
              uint64_t v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(void *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            uint64_t v35 = *(void *)&v32[2 * v33 + 2];
LABEL_27:
            sub_100016C34(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_dst = &__dst;
            }
            else {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __dst.__r_.__value_.__l.__size_;
            }
            int v40 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(void *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v41 = &__dst;
            }
            else {
              int v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v42 = __dst.__r_.__value_.__l.__size_;
            }
            *(_DWORD *)(v35 + 40) |= 1u;
            sub_10001DEEC(__p, v41, v42);
            uint64_t v43 = *(void *)(v35 + 8);
            char v44 = (void *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if (v43) {
              char v44 = (void *)*v44;
            }
            sub_10004E9EC((uint64_t *)(v35 + 48), (long long *)__p, (uint64_t)v44);
            if (SHIBYTE(v117) < 0) {
              operator delete(__p[0]);
            }
            int v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 4sub_10002F6CC(&a9, 0) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 4sub_10002F6CC(&a9, 0) = v45 | 6;
              sub_10001DEEC(__p, __src, __len);
              uint64_t v46 = *(void *)(v35 + 8);
              int v47 = (void *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if (v46) {
                int v47 = (void *)*v47;
              }
              sub_10004E9EC((uint64_t *)(v35 + 56), (long long *)__p, (uint64_t)v47);
              if (SHIBYTE(v117) < 0) {
                operator delete(__p[0]);
              }
              int v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              int v49 = v48 | 0x18;
              int v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              int v49 = v45 | 0x1C;
              int v50 = v24;
            }
            *(_DWORD *)(v35 + 4sub_10002F6CC(&a9, 0) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (!--v14)
            {
              unint64_t v12 = v23;
              uint64_t v11 = a5;
              goto LABEL_84;
            }
          }
          int v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if (v13)
        {
          uint64_t v57 = sub_10002F0D4(v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_141;
          }
          uint64_t v20 = v57;
          uint64_t v58 = *(void *)(v57 + 48);
          v104 = (uint64_t *)(v57 + 48);
          if (v14 >= 0x17)
          {
            uint64_t v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17) {
              uint64_t v71 = v14 | 7;
            }
            uint64_t v103 = v71 + 1;
            v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
            v59 = &__dst;
          }
          unint64_t v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          int v73 = *(char *)(v72 + 23);
          if (v73 >= 0) {
            uint64_t v74 = (const std::string::value_type *)v72;
          }
          else {
            uint64_t v74 = *(const std::string::value_type **)v72;
          }
          if (v73 >= 0) {
            std::string::size_type v75 = *(unsigned __int8 *)(v72 + 23);
          }
          else {
            std::string::size_type v75 = *(void *)(v72 + 8);
          }
          int64_t v76 = std::string::insert(&__dst, 0, v74, v75);
          long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v117 = (void (__cdecl **)(std::stringbuf *__hidden))v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          uint64_t v78 = *(void *)(v20 + 8);
          v79 = (void *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          size_t v80 = __len;
          if (v78) {
            v79 = (void *)*v79;
          }
          sub_10004E9EC(v104, (long long *)__p, (uint64_t)v79);
          if (SHIBYTE(v117) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (__len > 0x7FFFFFFFFFFFFFF7) {
LABEL_141:
          }
            sub_100004068();
          uint64_t v81 = *(void *)(v20 + 56);
          if (__len >= 0x17)
          {
            uint64_t v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17) {
              uint64_t v83 = __len | 7;
            }
            uint64_t v84 = v83 + 1;
            int v82 = (std::string *)operator new(v83 + 1);
            unint64_t v85 = v84 | 0x8000000000000000;
            size_t v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
            int v82 = &__dst;
            if (!__len) {
              goto LABEL_109;
            }
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          int v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0) {
            v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          }
          else {
            v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          }
          if (v86 >= 0) {
            std::string::size_type v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          }
          else {
            std::string::size_type v88 = *(void *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          v89 = std::string::insert(&__dst, 0, v87, v88);
          long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v117 = (void (__cdecl **)(std::stringbuf *__hidden))v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          uint64_t v91 = *(void *)(v20 + 8);
          v92 = (void *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          uint64_t v11 = a5;
          if (v91) {
            v92 = (void *)*v92;
          }
          sub_10004E9EC((uint64_t *)(v20 + 56), (long long *)__p, (uint64_t)v92);
          if (SHIBYTE(v117) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          unint64_t v12 = v23;
          goto LABEL_83;
        }
      }
      uint64_t v60 = *(int **)(a7 + 64);
      if (!v60) {
        break;
      }
      uint64_t v61 = *(int *)(a7 + 56);
      int v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          sub_10007E8E4(v112, v62 + 1);
          uint64_t v60 = *(int **)(a7 + 64);
          int v62 = *v60;
        }
        *uint64_t v60 = v62 + 1;
        uint64_t v20 = sub_10003CE94(*(void *)(a7 + 48));
        uint64_t v63 = *(void *)(a7 + 64);
        uint64_t v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(void *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      uint64_t v20 = *(void *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      sub_10001DEEC(__p, v15, v14);
      uint64_t v65 = *(void *)(v20 + 8);
      uint64_t v66 = (void *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if (v65) {
        uint64_t v66 = (void *)*v66;
      }
      sub_10004E9EC((uint64_t *)(v20 + 48), (long long *)__p, (uint64_t)v66);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      int v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 4sub_10002F6CC(&a9, 0) = v67 | 6;
      sub_10001DEEC(__p, __src, __len);
      uint64_t v68 = *(void *)(v20 + 8);
      std::string::size_type v69 = (void *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if (v68) {
        std::string::size_type v69 = (void *)*v69;
      }
      sub_10004E9EC((uint64_t *)(v20 + 56), (long long *)__p, (uint64_t)v69);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      int v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 4sub_10002F6CC(&a9, 0) = v70 | 0x18;
      LODWORD(v56) = v25;
      unint64_t v12 = v23;
      uint64_t v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      size_t v23 = v12;
LABEL_84:
      v10 += 24;
      char v13 = v111;
      if (v10 == v110) {
        goto LABEL_123;
      }
    }
    int v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  size_t v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    uint64_t result = sub_100025F04(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*a8)
    {
      sub_10004CF1C(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      sub_10001DEEC(__p, a2, a3);
      uint64_t v94 = *(void *)(a7 + 8);
      v95 = (void *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if (v94) {
        v95 = (void *)*v95;
      }
      sub_10004E9EC((uint64_t *)(a7 + 72), (long long *)__p, (uint64_t)v95);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      return sub_10004CF14(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  v96 = (void *)sub_10001752C((uint64_t)&__p[1]);
  sub_100018688(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  sub_100018688(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_100018688(&__p[1], (uint64_t)") [", 3);
  sub_100018688(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  sub_100018688(&__p[1], (uint64_t)"] ", 2);
  sub_100018688(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sub_100014DB8((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  if (v119 < 0) {
    operator delete(v118);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)std::ios::~ios();
}

void sub_100025E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100025F04@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(_DWORD **)a2;
  int64_t v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    uint64_t v9 = a3 + 48;
    while (1)
    {
      switch(*v6)
      {
        case 0:
          uint64_t v10 = *(void *)(a3 + 64);
          if (v10) {
            unint64_t v11 = v10 + 8;
          }
          else {
            unint64_t v11 = 0;
          }
          uint64_t v12 = *(int *)(a3 + 56);
          char v13 = (uint64_t *)(v11 + 8 * v12 - 8);
          if (v12) {
            BOOL v14 = (unint64_t)v13 > v11;
          }
          else {
            BOOL v14 = 0;
          }
          if (v14)
          {
            unint64_t v15 = v11 + 8;
            do
            {
              uint64_t v16 = *v13--;
              sub_100031988(*(void *)(v15 - 8), v16);
              BOOL v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          uint64_t v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            int v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            sub_10007E8E4(v9, v20 + 1);
            uint64_t v18 = *(int **)(a3 + 64);
            int v20 = *v18;
            goto LABEL_35;
          }
          int v19 = *(_DWORD *)(a3 + 56);
          int v20 = *v18;
          if (v19 < *v18)
          {
            int v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60)) {
            goto LABEL_34;
          }
LABEL_35:
          *uint64_t v18 = v20 + 1;
          uint64_t v32 = sub_10003CE94(*(void *)(a3 + 48));
          uint64_t v33 = *(void *)(a3 + 64);
          uint64_t v34 = *(int *)(a3 + 56);
          int v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(void *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            unint64_t v35 = v21;
            do
            {
              uint64_t v36 = *(void *)(a3 + 64) + 8;
              uint64_t v37 = *(void *)(v36 + 8 * (v35 - 2));
              *(void *)(v36 + 8 * (v35 - 2)) = *(void *)(v36 + 8 * (v35 - 1));
              *(void *)(v36 + 8 * (v35 - 1)) = v37;
              BOOL v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            sub_100051E5C((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            unint64_t v38 = sub_100051E74(__p, "CHECK failed: (index) < (current_size_): ");
            sub_100051FB0((uint64_t)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            sub_100051FB8((uint64_t)__p);
          }
          uint64_t v39 = *(void *)(*(void *)(a3 + 64) + 8);
          int v40 = sub_1000151B4(a1[1]);
          size_t v41 = strlen(v40);
          int v42 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          uint64_t v43 = (char *)sub_1000151B4(a1[1]);
          sub_1000151B4(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          sub_10001DEEC(__p, v43, v44);
          uint64_t v45 = *(void *)(v39 + 8);
          uint64_t v46 = (void *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if (v45) {
            uint64_t v46 = (void *)*v46;
          }
          sub_10004E9EC((uint64_t *)(v39 + 48), (long long *)__p, (uint64_t)v46);
          goto LABEL_50;
        case 2:
          uint64_t v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            int v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            sub_10007E8E4(v9, v24 + 1);
            uint64_t v22 = *(int **)(a3 + 64);
            int v24 = *v22;
            goto LABEL_46;
          }
          uint64_t v23 = *(int *)(a3 + 56);
          int v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            uint64_t v25 = *(void *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60)) {
            goto LABEL_45;
          }
LABEL_46:
          int *v22 = v24 + 1;
          uint64_t v25 = sub_10003CE94(*(void *)(a3 + 48));
          uint64_t v47 = *(void *)(a3 + 64);
          uint64_t v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(void *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          int v49 = sub_100015238(a1[1]);
          size_t v50 = strlen(v49);
          int v51 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          uint64_t v52 = (char *)sub_100015238(a1[1]);
          sub_100015238(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          sub_10001DEEC(__p, v52, v53);
          uint64_t v54 = *(void *)(v25 + 8);
          int v55 = (void *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if (v54) {
            int v55 = (void *)*v55;
          }
          sub_10004E9EC((uint64_t *)(v25 + 48), (long long *)__p, (uint64_t)v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
LABEL_52:
          if (++v6 == v5) {
            return sub_10004CF14(a4);
          }
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            int v26 = 0;
            do
            {
              uint64_t v27 = sub_10002F0D4(v9, v26);
              if ((*(unsigned int (**)(uint64_t *, void))(*a1 + 528))(a1, *(unsigned int *)(v27 + 64)))
              {
                uint64_t v28 = (char *)sub_100015130(a1[1]);
                sub_100015130(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                sub_10001DEEC(__p, v28, v29);
                uint64_t v30 = *(void *)(v27 + 8);
                unsigned __int8 v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if (v30) {
                  unsigned __int8 v31 = (void *)*v31;
                }
                sub_10004E9EC((uint64_t *)(v27 + 48), (long long *)__p, (uint64_t)v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                }
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (void *)sub_10004D080(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sub_10004CF14(a4);
}

void sub_1000263D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_10002641C(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (!*a5)
  {
    sub_10004CF1C(a5);
    if (a4)
    {
      sub_10003B8A0(a4);
      BOOL v17 = 0;
      uint64_t v18 = 0;
      int v19 = 0;
      BOOL v14 = 0;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*a5)
      {
        sub_10004CF1C(a5);
        (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 40))(__p);
        if (SHIBYTE(v19) >= 0) {
          uint64_t v10 = HIBYTE(v19);
        }
        else {
          uint64_t v10 = v18;
        }
        sub_100025090(a1, a2, a3, v10, (uint64_t *)&v14, (uint64_t *)__p, a4, a5);
        if (!*a5)
        {
          unint64_t v11 = sub_10004CF1C(a5);
          sub_10004CF14(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        unint64_t v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0) {
        operator delete(v17);
      }
    }
    else
    {
      LODWORD(v17) = 13;
      uint64_t v12 = (void *)sub_10001752C((uint64_t)&v18);
      sub_100018688(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(&v18, (uint64_t)") [", 3);
      sub_100018688(&v18, (uint64_t)"spt", 3);
      sub_100018688(&v18, (uint64_t)"] ", 2);
      sub_100018688(&v18, (uint64_t)"output proto is null", 20);
      sub_100014DB8((unsigned int *)&v17, (uint64_t)a5);
      if (v21 < 0) {
        operator delete(v20);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
}

void sub_100026758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000267B4(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a5) {
    return;
  }
  sub_10004CF1C(a5);
  if (a4)
  {
    sub_10003C67C(a4);
    int v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v23 = 0;
    int v24 = 0;
    uint64_t v25 = 0;
    (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*a5)
    {
      sub_10004CF1C(a5);
      if ((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 88))(a1[1]))
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 48))(&v21);
        uint64_t v10 = v21;
        uint64_t v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            uint64_t v12 = *(int **)(a4 + 32);
            if (!v12) {
              break;
            }
            uint64_t v13 = *(int *)(a4 + 24);
            int v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                sub_10007E8E4(a4 + 16, v14 + 1);
                uint64_t v12 = *(int **)(a4 + 32);
                int v14 = *v12;
              }
              *uint64_t v12 = v14 + 1;
              uint64_t v15 = sub_10003CF64(*(void *)(a4 + 16));
              uint64_t v16 = *(void *)(a4 + 32);
              uint64_t v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(void *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            uint64_t v15 = *(void *)&v12[2 * v13 + 2];
LABEL_14:
            int v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 8sub_10002F6CC(&a9, 0) = v18;
            if (v28 >= 0) {
              uint64_t v19 = HIBYTE(v28);
            }
            else {
              uint64_t v19 = v27;
            }
            sub_100025090(a1, a2, a3, v19, (uint64_t *)&v23, (uint64_t *)v10, v15, a5);
            if (*a5) {
              goto LABEL_29;
            }
            sub_10004CF1C(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sub_10004CF14(a5);
              goto LABEL_29;
            }
          }
          int v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        sub_10001752C((uint64_t)&v30);
        sub_100018688(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_100018688(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_100018688(&v30, (uint64_t)") [", 3);
        sub_100018688(&v30, (uint64_t)"!nbests.empty()", 15);
        sub_100018688(&v30, (uint64_t)"] ", 2);
        sub_100018688(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sub_100014DB8((unsigned int *)&v29, (uint64_t)a5);
        if (v33 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
LABEL_29:
        size_t v29 = (void **)&v21;
        sub_1000184DC(&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        sub_10001752C((uint64_t)&v30);
        sub_100018688(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_100018688(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_100018688(&v30, (uint64_t)") [", 3);
        sub_100018688(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        sub_100018688(&v30, (uint64_t)"] ", 2);
        sub_100018688(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sub_100014DB8((unsigned int *)&v29, (uint64_t)a5);
        if (v33 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
    }
    if (v23)
    {
      int v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete(v26);
    }
  }
  else
  {
    LODWORD(v29) = 13;
    int v20 = (void *)sub_10001752C((uint64_t)&v30);
    sub_100018688(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(&v30, (uint64_t)") [", 3);
    sub_100018688(&v30, (uint64_t)"nbest_spt", 9);
    sub_100018688(&v30, (uint64_t)"] ", 2);
    sub_100018688(&v30, (uint64_t)"output proto is null", 20);
    sub_100014DB8((unsigned int *)&v29, (uint64_t)a5);
    if (v33 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_100026EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_1000184DC((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_100026F88(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a6) {
    return;
  }
  sub_10004CF1C(a6);
  if (a5)
  {
    sub_10003B8A0(a5);
    if (a4 < 513)
    {
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      std::string __p = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v36, &__p);
      if (*a6)
      {
LABEL_5:
        if (__p)
        {
          uint64_t v34 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v38) < 0) {
          operator delete(v36);
        }
        return;
      }
      sub_10004CF1C(a6);
      char v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 88))(a1[1]);
      if (a4 >= 0) {
        char v17 = v16;
      }
      else {
        char v17 = 0;
      }
      if (v17)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 48))(&v31);
          if (v31 == v32)
          {
            LODWORD(v39) = 13;
            sub_10001752C((uint64_t)v40);
            sub_100018688(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_100018688(v40, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_100018688(v40, (uint64_t)") [", 3);
            sub_100018688(v40, (uint64_t)"!nbests.empty()", 15);
            sub_100018688(v40, (uint64_t)"] ", 2);
            sub_100018688(v40, (uint64_t)"NBestEncode returns empty result.", 33);
            sub_100014DB8((unsigned int *)&v39, (uint64_t)a6);
            sub_100014E48((uint64_t)&v39);
            uint64_t v39 = &v31;
            sub_1000184DC((void ***)&v39);
            goto LABEL_5;
          }
          LODWORD(v30[0]) = 0;
          sub_100012010(&v39, (v32 - v31) >> 5, v30);
          if (v32 != v31)
          {
            uint64_t v19 = (float *)v39;
            if ((unint64_t)((v32 - v31) >> 5) <= 1) {
              uint64_t v20 = 1;
            }
            else {
              uint64_t v20 = (v32 - v31) >> 5;
            }
            uint64_t v21 = (float *)(v31 + 24);
            do
            {
              float v22 = *v21;
              v21 += 8;
              *v19++ = expf(v22 * a7);
              --v20;
            }
            while (v20);
          }
          sub_10004ABE0();
          uint64_t v24 = v23;
          sub_10003121C((uint64_t)v30, (float *)v39, v40[0]);
          uint64_t v25 = HIBYTE(v38);
          uint64_t v26 = v37;
          int v27 = sub_10003153C((uint64_t)v30, v24, (double **)v30);
          if ((v25 & 0x80u) == 0) {
            uint64_t v28 = v25;
          }
          else {
            uint64_t v28 = v26;
          }
          sub_100025090(a1, a2, a3, v28, (uint64_t *)&__p, (uint64_t *)(v31 + 32 * v27), a5, a6);
          uint64_t v29 = *a6;
          if (!*a6) {
            sub_10004CF1C(a6);
          }
          if (v30[0])
          {
            v30[1] = v30[0];
            operator delete(v30[0]);
          }
          if (v39)
          {
            v40[0] = (float *)v39;
            operator delete(v39);
          }
          uint64_t v39 = &v31;
          sub_1000184DC((void ***)&v39);
          if (v29) {
            goto LABEL_5;
          }
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 40))(&v39);
        if (v38 >= 0) {
          uint64_t v18 = HIBYTE(v38);
        }
        else {
          uint64_t v18 = v37;
        }
      }
      else
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v39) = 13;
          sub_10001752C((uint64_t)v40);
          sub_100018688(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_100018688(v40, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_100018688(v40, (uint64_t)") [", 3);
          sub_100018688(v40, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          sub_100018688(v40, (uint64_t)"] ", 2);
          sub_100018688(v40, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sub_100014DB8((unsigned int *)&v39, (uint64_t)a6);
          sub_100014E48((uint64_t)&v39);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(void *)a1[1] + 56))(&v39, a7);
        if (v38 >= 0) {
          uint64_t v18 = HIBYTE(v38);
        }
        else {
          uint64_t v18 = v37;
        }
      }
      sub_100025090(a1, a2, a3, v18, (uint64_t *)&__p, (uint64_t *)&v39, a5, a6);
      if (*a6)
      {
        if (v39)
        {
          v40[0] = (float *)v39;
          operator delete(v39);
        }
        goto LABEL_5;
      }
      sub_10004CF1C(a6);
      if (v39)
      {
        v40[0] = (float *)v39;
        operator delete(v39);
      }
LABEL_51:
      sub_10004CF14(a6);
      goto LABEL_5;
    }
    LODWORD(v39) = 13;
    uint64_t v15 = (void *)sub_10001752C((uint64_t)v40);
    sub_100018688(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688(v40, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v40, (uint64_t)") [", 3);
    sub_100018688(v40, (uint64_t)"(nbest_size) <= (512)", 21);
    sub_100018688(v40, (uint64_t)"] ", 2);
    sub_100018688(v40, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sub_100014DB8((unsigned int *)&v39, (uint64_t)a6);
  }
  else
  {
    LODWORD(v39) = 13;
    int v14 = (void *)sub_10001752C((uint64_t)v40);
    sub_100018688(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688(v40, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v40, (uint64_t)") [", 3);
    sub_100018688(v40, (uint64_t)"spt", 3);
    sub_100018688(v40, (uint64_t)"] ", 2);
    sub_100018688(v40, (uint64_t)"output proto is null", 20);
    sub_100014DB8((unsigned int *)&v39, (uint64_t)a6);
  }
  if (v41 < 0) {
    operator delete(v40[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
}

void sub_100027768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  sub_1000184DC((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void sub_100027854(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, uint64_t *a5@<X8>, float a6@<S0>)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8)))
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    (*(void (**)(void, char *, size_t, void **, void **))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*a5)
    {
      sub_10004CF1C(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(void **)(a1 + 8) + 64))(&v23, a6);
      uint64_t v12 = v23;
      uint64_t v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          int v14 = *(int **)(a4 + 32);
          if (!v14) {
            break;
          }
          uint64_t v15 = *(int *)(a4 + 24);
          int v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              sub_10007E8E4(a4 + 16, v16 + 1);
              int v14 = *(int **)(a4 + 32);
              int v16 = *v14;
            }
            int *v14 = v16 + 1;
            uint64_t v17 = sub_10003CF64(*(void *)(a4 + 16));
            uint64_t v18 = *(void *)(a4 + 32);
            uint64_t v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(void *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          uint64_t v17 = *(void *)&v14[2 * v15 + 2];
LABEL_11:
          int v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 8sub_10002F6CC(&a9, 0) = v20;
          if (v30 >= 0) {
            uint64_t v21 = HIBYTE(v30);
          }
          else {
            uint64_t v21 = v29;
          }
          sub_100025090((uint64_t *)a1, a2, a3, v21, (uint64_t *)&v25, (uint64_t *)v12, v17, a5);
          if (*a5) {
            goto LABEL_23;
          }
          sub_10004CF1C(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sub_10004CF14(a5);
            goto LABEL_23;
          }
        }
        int v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      sub_10001752C((uint64_t)&v32);
      sub_100018688(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(&v32, (uint64_t)") [", 3);
      sub_100018688(&v32, (uint64_t)"!results.empty()", 16);
      sub_100018688(&v32, (uint64_t)"] ", 2);
      sub_100018688(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sub_100014DB8((unsigned int *)&v31, (uint64_t)a5);
      if (v35 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
LABEL_23:
      uint64_t v31 = (void **)&v23;
      sub_1000184DC(&v31);
    }
    if (v25)
    {
      uint64_t v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v28);
    }
  }
  else
  {
    LODWORD(v31) = 13;
    float v22 = (void *)sub_10001752C((uint64_t)&v32);
    sub_100018688(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(&v32, (uint64_t)") [", 3);
    sub_100018688(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    sub_100018688(&v32, (uint64_t)"] ", 2);
    sub_100018688(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sub_100014DB8((unsigned int *)&v31, (uint64_t)a5);
    if (v35 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_100027DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_1000184DC((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_100027E60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8)))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = 0;
    std::string __p = 0;
    int v16 = 0;
    uint64_t v17 = 0;
    (*(void (**)(void, uint64_t, uint64_t, void **, void **))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*a5)
    {
      sub_10004CF1C(a5);
      if (SHIBYTE(v20) >= 0) {
        uint64_t v12 = &v18;
      }
      else {
        uint64_t v12 = v18;
      }
      if (SHIBYTE(v20) >= 0) {
        uint64_t v13 = HIBYTE(v20);
      }
      else {
        uint64_t v13 = v19;
      }
      *a4 = (*(float (**)(void, void *, uint64_t, float))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), v12, v13, a6);
      sub_10004CF14(a5);
    }
    if (__p)
    {
      int v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v18);
    }
  }
  else
  {
    LODWORD(v18) = 13;
    int v14 = (void *)sub_10001752C((uint64_t)&v19);
    sub_100018688(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(&v19, (uint64_t)") [", 3);
    sub_100018688(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    sub_100018688(&v19, (uint64_t)"] ", 2);
    sub_100018688(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sub_100014DB8((unsigned int *)&v18, (uint64_t)a5);
    if (v22 < 0) {
      operator delete(v21);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_100028138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100028178(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_100022860(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_100028208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100028224(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v67 = a3;
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a4) {
    return;
  }
  sub_10004CF1C(a4);
  if (v4)
  {
    sub_10003B8A0(v4);
    uint64_t v8 = a1[4];
    if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8)) {
      uint64_t v9 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1[4] + 24))(a1[4]);
    }
    else {
      uint64_t v9 = (char *)&unk_1000912C9;
    }
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        uint64_t v12 = *(const std::string::value_type **)v10;
        std::string::size_type v13 = *(void *)(v10 + 8);
        uint64_t v14 = v67;
        uint64_t v15 = *(int **)(v67 + 64);
        if (!v15) {
          break;
        }
        uint64_t v16 = *(int *)(v67 + 56);
        int v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v67 + 60))
          {
LABEL_14:
            sub_10007E8E4(v67 + 48, v17 + 1);
            uint64_t v15 = *(int **)(v67 + 64);
            int v17 = *v15;
          }
          *uint64_t v15 = v17 + 1;
          uint64_t v18 = sub_10003CE94(*(void *)(v14 + 48));
          uint64_t v19 = *(void *)(v14 + 64);
          uint64_t v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(void *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v67 + 56) = v16 + 1;
        uint64_t v18 = *(void *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        uint64_t v21 = *(void *)(v18 + 8);
        char v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if (v21) {
          char v22 = (void *)*v22;
        }
        uint64_t v23 = (std::string *)sub_10004EA20((uint64_t *)(v18 + 48), (uint64_t)v22);
        std::string::assign(v23, v12, v13);
        int v24 = (*(uint64_t (**)(uint64_t *, const std::string::value_type *, std::string::size_type))(*a1 + 504))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 16;
        if (v10 == v11)
        {
          uint64_t v4 = v67;
          goto LABEL_20;
        }
      }
      int v17 = *(_DWORD *)(v67 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sub_100025F04(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*a4) {
      return;
    }
    sub_10004CF1C(a4);
    uint64_t v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    uint64_t v25 = *(void *)(v4 + 8);
    uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if (v25) {
      uint64_t v26 = (void *)*v26;
    }
    v60[1] = &v61;
    uint64_t v61 = sub_10004EA20((uint64_t *)(v4 + 72), (uint64_t)v26);
    unint64_t v58 = 0;
    v59[0] = &v67;
    v59[1] = v60;
    v60[0] = &v67;
    __p[0] = 0;
    __p[1] = 0;
    int v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      BOOL v28 = 0;
      int v29 = 0;
      int v30 = 0;
      char v31 = 1;
      while (1)
      {
        uint64_t v32 = sub_10002E3D8(v4 + 48, v30);
        if (!(*(unsigned int (**)(uint64_t *, void))(*a1 + 552))(a1, *(unsigned int *)(v32 + 64))) {
          break;
        }
        ++v30;
LABEL_68:
        uint64_t v4 = v67;
        int v27 = *(_DWORD *)(v67 + 56);
        if (v30 >= v27) {
          goto LABEL_89;
        }
      }
      sub_100028BC4((uint64_t)v59, v29, v30, a4);
      if (*a4) {
        goto LABEL_95;
      }
      sub_10004CF1C(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            unint64_t v33 = *(void *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              char v35 = *(unsigned __int8 **)v33;
              size_t v34 = *(void *)(v33 + 8);
            }
            else
            {
              size_t v34 = *(unsigned __int8 *)(v33 + 23);
              char v35 = (unsigned __int8 *)(*(void *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            uint64_t v36 = *(unsigned int *)(v32 + 64);
            if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v36))
            {
              sub_10000A1B4(&v62, "");
LABEL_58:
              BOOL v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0) {
                operator delete(__p[0]);
              }
              unint64_t v58 = v63;
              *(_OWORD *)std::string __p = v62;
              BOOL v28 = v64;
              if ((v63 & 0x8000000000000000) == 0) {
                uint64_t v46 = __p;
              }
              else {
                uint64_t v46 = (void **)v62;
              }
              if ((v63 & 0x8000000000000000) == 0) {
                size_t v47 = HIBYTE(v63);
              }
              else {
                size_t v47 = *((void *)&v62 + 1);
              }
              sub_10002915C(v60, v30++, v46, v47);
              int v29 = v30;
              goto LABEL_68;
            }
            if (!(*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((uint64_t v40 = a1[4]) == 0
                 || (uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(void *)v41 + 16))(v41) & 1) != 0)
                 || (uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(void *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  BOOL v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  BOOL v43 = !v49;
                }
                else
                {
                  BOOL v43 = 0;
                }
                uint64_t v50 = a1[4];
                if (v50)
                {
                  uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 24))(v51)) {
                    BOOL v43 = 0;
                  }
                }
              }
              else
              {
                BOOL v43 = 0;
              }
              uint64_t v52 = operator new(0x20uLL);
              std::string::size_type v69 = v52 + 4;
              int v70 = v52 + 4;
              *uint64_t v52 = &unk_10009135E;
              v52[1] = 3;
              v52[2] = " ";
              v52[3] = 1;
              uint64_t v68 = v52;
              sub_10002EBE8(v35, v34, (uint64_t *)&v68, (uint64_t)&__dst);
              long long v62 = __dst;
              unint64_t v63 = v72;
              unint64_t v72 = 0;
              long long __dst = 0uLL;
              BOOL v64 = v43;
              if (v68)
              {
                std::string::size_type v69 = v68;
                operator delete(v68);
              }
              goto LABEL_59;
            }
            uint64_t v37 = (const void *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 512))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              sub_10000A1B4(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8) {
              sub_100004068();
            }
            if (v34 >= 0x17)
            {
              uint64_t v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17) {
                uint64_t v44 = v34 | 7;
              }
              uint64_t v45 = v44 + 1;
              p_dst = (long long *)operator new(v44 + 1);
              *((void *)&__dst + 1) = v34;
              unint64_t v72 = v45 | 0x8000000000000000;
              *(void *)&long long __dst = p_dst;
            }
            else
            {
              HIBYTE(v72) = v34;
              p_dst = &__dst;
              if (!v34) {
                goto LABEL_57;
              }
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((unsigned char *)p_dst + v34) = 0;
            long long v62 = __dst;
            unint64_t v63 = v72;
            goto LABEL_58;
          }
        }
        else if (!*((unsigned char *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      char v31 = 0;
      goto LABEL_32;
    }
    int v29 = 0;
LABEL_89:
    sub_100028BC4((uint64_t)v59, v29, v27, a4);
    if (!*a4)
    {
      sub_10004CF1C(a4);
      uint64_t v54 = a1[3];
      if (v54)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)v54 + 40))(&v62);
        int v55 = v61;
        if (*((char *)v61 + 23) < 0) {
          operator delete((void *)*v61);
        }
        long long v56 = v62;
        v55[2] = v63;
        *(_OWORD *)int v55 = v56;
      }
      sub_10004CF14(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    LODWORD(v62) = 13;
    size_t v53 = (void *)sub_10001752C((uint64_t)&v62 + 8);
    sub_100018688(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688((void *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688((void *)&v62 + 1, (uint64_t)") [", 3);
    sub_100018688((void *)&v62 + 1, (uint64_t)"spt", 3);
    sub_100018688((void *)&v62 + 1, (uint64_t)"] ", 2);
    sub_100018688((void *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sub_100014DB8((unsigned int *)&v62, (uint64_t)a4);
    if (v66 < 0) {
      operator delete(v65);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_100028B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100028BC4(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  if (a2 >= a3)
  {
    sub_10004CF14(a4);
  }
  else
  {
    memset(&v36, 0, sizeof(v36));
    int v8 = a2;
    do
    {
      uint64_t v9 = sub_10002E3D8(**(void **)a1 + 48, v8);
      unint64_t v10 = *(void *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        uint64_t v12 = *(void **)v10;
        size_t v11 = *(void *)(v10 + 8);
      }
      else
      {
        size_t v11 = *(unsigned __int8 *)(v10 + 23);
        uint64_t v12 = (void *)(*(void *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      int v13 = sub_100015DCC(v12, v11);
      if (v13 < 0)
      {
        unsigned int v33 = 13;
        sub_10001752C((uint64_t)v34);
        sub_100018688(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_100018688(v34, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_100018688(v34, (uint64_t)") [", 3);
        sub_100018688(v34, (uint64_t)"(0) <= (byte)", 13);
        sub_100018688(v34, (uint64_t)"] ", 2);
        sub_100014DB8(&v33, (uint64_t)a4);
        goto LABEL_52;
      }
      std::string::append(&v36, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    char v31 = a4;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v14 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      int v14 = v36.__r_.__value_.__r.__words[1];
    }
    if (v14 >= 1)
    {
      int v15 = 0;
      while (1)
      {
        unint64_t v32 = 0;
        std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v36.__r_.__value_.__l.__size_;
        }
        if (size < v15) {
          sub_10002EE3C("string_view::substr");
        }
        unint64_t v17 = v15;
        uint64_t v18 = (std::string *)v36.__r_.__value_.__r.__words[0];
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &v36;
        }
        if (sub_10004A6C8((unsigned __int8 *)v18 + v17, (uint64_t)v18 + size, (uint64_t *)&v32) != 65533) {
          break;
        }
        int v19 = v17 + a2;
        if (v32 != 1)
        {
          if (v32 != 3)
          {
            unsigned int v33 = 13;
            sub_10001752C((uint64_t)v34);
            sub_100018688(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_100018688(v34, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_100018688(v34, (uint64_t)") [", 3);
            sub_100018688(v34, (uint64_t)"(consumed) == (1)", 17);
            sub_100018688(v34, (uint64_t)"] ", 2);
            sub_100014DB8(&v33, (uint64_t)v31);
            goto LABEL_52;
          }
          goto LABEL_23;
        }
        sub_10002915C(*(void ***)(a1 + 8), v19, &unk_10009135A, 3uLL);
        LODWORD(v22) = v32;
LABEL_42:
        int v15 = v17 + v22;
        if (v15 >= v14) {
          goto LABEL_49;
        }
      }
      int v19 = v17 + a2;
LABEL_23:
      std::string::size_type v20 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v20 = v36.__r_.__value_.__l.__size_;
      }
      unint64_t v21 = v20 - v17;
      if (v20 < v17) {
        sub_10002EE3C("string_view::substr");
      }
      unint64_t v22 = v32;
      uint64_t v23 = &v36;
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v23 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      if (v21 >= v32) {
        unint64_t v24 = v32;
      }
      else {
        unint64_t v24 = v21;
      }
      if (v32)
      {
        unint64_t v25 = 0;
        uint64_t v26 = (char *)v23 + v17;
        int v27 = v19;
        do
        {
          unint64_t v28 = v22 - 1;
          if (v25 == v28) {
            int v29 = v26;
          }
          else {
            int v29 = "";
          }
          if (v25 == v28) {
            size_t v30 = v24;
          }
          else {
            size_t v30 = 0;
          }
          sub_10002915C(*(void ***)(a1 + 8), v27 + v25++, v29, v30);
          unint64_t v22 = v32;
        }
        while (v32 > v25);
      }
      goto LABEL_42;
    }
    int v15 = 0;
LABEL_49:
    if (v15 + a2 == a3)
    {
      sub_10004CF14(v31);
      goto LABEL_55;
    }
    unsigned int v33 = 13;
    sub_10001752C((uint64_t)v34);
    sub_100018688(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688(v34, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v34, (uint64_t)") [", 3);
    sub_100018688(v34, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    sub_100018688(v34, (uint64_t)"] ", 2);
    sub_100014DB8(&v33, (uint64_t)v31);
LABEL_52:
    if (v35 < 0) {
      operator delete((void *)v34[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
LABEL_55:
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1000290F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (*(char *)(v11 - 89) < 0) {
    operator delete(*(void **)(v11 - 112));
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10002915C(void **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7 = sub_10002F0D4(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100004068();
  }
  uint64_t v8 = v7;
  if (a4 >= 0x17)
  {
    uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v10 = a4 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = a4;
    unint64_t v20 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v2sub_10002F6CC(&a9, 0) = a4;
  p_dst = &__dst;
  if (a4) {
LABEL_8:
  }
    memmove(p_dst, a3, a4);
  *((unsigned char *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  uint64_t v12 = *(void *)(v8 + 8);
  int v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if (v12) {
    int v13 = (void *)*v13;
  }
  sub_10004E9EC((uint64_t *)(v8 + 56), &__dst, (uint64_t)v13);
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  else {
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  }
  int v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 4sub_10002F6CC(&a9, 0) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v17 = *(void *)(v14 + 8);
  }
  else {
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  }
  *(_DWORD *)(v8 + 4sub_10002F6CC(&a9, 0) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_1000292B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000292D4(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 496))(a1);
  sub_1000249F0(&v19, a2[1] - *a2);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      int v11 = *v9;
      int v18 = v11;
      if (v11 < 0 || v11 >= v8) {
        break;
      }
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      int v13 = v20;
      if ((unint64_t)v20 >= v21)
      {
        uint64_t v14 = (unsigned char *)sub_1000317DC(&v19, (uint64_t)&__p);
      }
      else
      {
        sub_1000318EC((int)&v21, v20, (uint64_t)&__p);
        uint64_t v14 = v13 + 24;
      }
      unint64_t v20 = v14;
      if (++v9 == v10) {
        goto LABEL_8;
      }
    }
    sub_1000294F0("Invalid id: ", 0xCuLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sub_10004D080(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  sub_10000D388((void ***)&__p);
}

void sub_1000294A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a17;
  sub_10000D388((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1000294F0(void *__src@<X0>, size_t __len@<X1>, std::string *a3@<X8>)
{
  sub_10001DEEC(&__dst, __src, __len);
  sub_100031694();
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v5 = v8;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&__dst, (const std::string::value_type *)v4, v5);
  *a3 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_100029594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000295C8(void **a1)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v14);
  uint64_t v2 = v14;
  sub_10004CF1C(&v14);
  if (!v2) {
    return (*(uint64_t (**)(void *))(*a1[1] + 128))(a1[1]);
  }
  if ((int)sub_10004A6A8() <= 2)
  {
    char v13 = 0;
    uint64_t v3 = sub_100018688(&std::cerr, (uint64_t)"sentencepiece_processor.cc", 26);
    sub_100018688(v3, (uint64_t)"(", 1);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::string::size_type v5 = sub_100018688(v4, (uint64_t)") ", 2);
    uint64_t v6 = sub_100018688(v5, (uint64_t)"LOG(", 4);
    uint64_t v7 = sub_100018688(v6, (uint64_t)"ERROR", 5);
    unsigned __int8 v8 = sub_100018688(v7, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v14, a1);
    uint64_t v9 = sub_10004D24C(&v14);
    size_t v10 = strlen(v9);
    int v11 = sub_100018688(v8, (uint64_t)v9, v10);
    sub_100018688(v11, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_10004CF1C(&v14);
    sub_1000176C4(&v13);
  }
  return 0;
}

void sub_100029750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_100029778(void **a1, uint64_t a2, uint64_t a3)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v18);
  uint64_t v6 = v18;
  sub_10004CF1C(&v18);
  if (!v6) {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  }
  if ((int)sub_10004A6A8() <= 2)
  {
    char v17 = 0;
    uint64_t v7 = sub_100018688(&std::cerr, (uint64_t)"sentencepiece_processor.cc", 26);
    sub_100018688(v7, (uint64_t)"(", 1);
    unsigned __int8 v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = sub_100018688(v8, (uint64_t)") ", 2);
    size_t v10 = sub_100018688(v9, (uint64_t)"LOG(", 4);
    int v11 = sub_100018688(v10, (uint64_t)"ERROR", 5);
    std::string::size_type v12 = sub_100018688(v11, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v18, a1);
    char v13 = sub_10004D24C(&v18);
    size_t v14 = strlen(v13);
    uint64_t v15 = sub_100018688(v12, (uint64_t)v13, v14);
    sub_100018688(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_10004CF1C(&v18);
    sub_1000176C4(&v17);
  }
  return 0;
}

void sub_100029918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

const char *sub_100029940(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  uint64_t v4 = v17;
  sub_10004CF1C(&v17);
  if (!v4) {
    return (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1[1] + 120))(a1[1], a2);
  }
  if ((int)sub_10004A6A8() <= 2)
  {
    char v16 = 0;
    std::string::size_type v5 = sub_100018688(&std::cerr, (uint64_t)"sentencepiece_processor.cc", 26);
    sub_100018688(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_100018688(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_100018688(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_100018688(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_100018688(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v17, a1);
    int v11 = sub_10004D24C(&v17);
    size_t v12 = strlen(v11);
    char v13 = sub_100018688(v10, (uint64_t)v11, v12);
    size_t v14 = sub_100018688(v13, (uint64_t)"\nReturns default value ", 23);
    sub_100018688(v14, (uint64_t)"", 0);
    sub_10004CF1C(&v17);
    sub_1000176C4(&v16);
  }
  return "";
}

void sub_100029AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

float sub_100029B10(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  uint64_t v4 = v17;
  sub_10004CF1C(&v17);
  if (!v4) {
    return (*(float (**)(void *, uint64_t))(*a1[1] + 136))(a1[1], a2);
  }
  float v5 = 0.0;
  if ((int)sub_10004A6A8() <= 2)
  {
    char v16 = 0;
    uint64_t v6 = sub_100018688(&std::cerr, (uint64_t)"sentencepiece_processor.cc", 26);
    sub_100018688(v6, (uint64_t)"(", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    unsigned __int8 v8 = sub_100018688(v7, (uint64_t)") ", 2);
    uint64_t v9 = sub_100018688(v8, (uint64_t)"LOG(", 4);
    size_t v10 = sub_100018688(v9, (uint64_t)"ERROR", 5);
    int v11 = sub_100018688(v10, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v17, a1);
    size_t v12 = sub_10004D24C(&v17);
    size_t v13 = strlen(v12);
    size_t v14 = sub_100018688(v11, (uint64_t)v12, v13);
    sub_100018688(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_10004CF1C(&v17);
    sub_1000176C4(&v16);
  }
  return v5;
}

void sub_100029CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_100029CE0(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_10004CF1C(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 152))(a1[1], a2);
  }
  if ((int)sub_10004A6A8() <= 2)
  {
    char v15 = 0;
    float v5 = sub_100018688(&std::cerr, (uint64_t)"sentencepiece_processor.cc", 26);
    sub_100018688(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_100018688(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_100018688(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_100018688(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_100018688(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_10004D24C(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_100018688(v10, (uint64_t)v11, v12);
    sub_100018688(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_10004CF1C(&v16);
    sub_1000176C4(&v15);
  }
  return 0;
}

void sub_100029E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_100029EA0(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_10004CF1C(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 144))(a1[1], a2);
  }
  if ((int)sub_10004A6A8() <= 2)
  {
    char v15 = 0;
    float v5 = sub_100018688(&std::cerr, (uint64_t)"sentencepiece_processor.cc", 26);
    sub_100018688(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_100018688(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_100018688(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_100018688(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_100018688(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_10004D24C(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_100018688(v10, (uint64_t)v11, v12);
    sub_100018688(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_10004CF1C(&v16);
    sub_1000176C4(&v15);
  }
  return 0;
}

void sub_10002A038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_10002A060(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_10004CF1C(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 160))(a1[1], a2);
  }
  if ((int)sub_10004A6A8() <= 2)
  {
    char v15 = 0;
    float v5 = sub_100018688(&std::cerr, (uint64_t)"sentencepiece_processor.cc", 26);
    sub_100018688(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_100018688(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_100018688(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_100018688(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_100018688(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_10004D24C(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_100018688(v10, (uint64_t)v11, v12);
    sub_100018688(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_10004CF1C(&v16);
    sub_1000176C4(&v15);
  }
  return 0;
}

void sub_10002A1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_10002A220(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_10004CF1C(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 176))(a1[1], a2);
  }
  if ((int)sub_10004A6A8() <= 2)
  {
    char v15 = 0;
    float v5 = sub_100018688(&std::cerr, (uint64_t)"sentencepiece_processor.cc", 26);
    sub_100018688(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_100018688(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_100018688(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_100018688(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_100018688(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_10004D24C(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_100018688(v10, (uint64_t)v11, v12);
    sub_100018688(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_10004CF1C(&v16);
    sub_1000176C4(&v15);
  }
  return 0;
}

void sub_10002A3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_10002A3E0(uint64_t *a1)
{
  uint64_t v2 = sub_100015130(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_10002A4A0(uint64_t *a1)
{
  uint64_t v2 = sub_1000151B4(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_10002A560(uint64_t *a1)
{
  uint64_t v2 = sub_100015238(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_10002A620(uint64_t *a1)
{
  uint64_t v2 = sub_1000152BC(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_10002A6E0@<X0>(void **a1@<X0>, uint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[11])(a1);
  if (!*a3)
  {
    sub_10004CF1C(a3);
    if (a2)
    {
      sub_10000D3DC(a2);
      uint64_t v7 = *(uint64_t (**)(void))(*a1[1] + 200);
      return v7();
    }
    else
    {
      unsigned int v9 = 13;
      unsigned __int8 v8 = (void *)sub_10001752C((uint64_t)v10);
      sub_100018688(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(v10, (uint64_t)") [", 3);
      sub_100018688(v10, (uint64_t)"pieces", 6);
      sub_100018688(v10, (uint64_t)"] ", 2);
      sub_100018688(v10, (uint64_t)"output container is null", 24);
      sub_100014DB8(&v9, (uint64_t)a3);
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_10002A960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10002A978@<X0>(void **a1@<X0>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[11])(a1);
  if (!*a3)
  {
    sub_10004CF1C(a3);
    if (a2)
    {
      a2[1] = *a2;
      uint64_t v7 = *(uint64_t (**)(void))(*a1[1] + 208);
      return v7();
    }
    else
    {
      unsigned int v9 = 13;
      unsigned __int8 v8 = (void *)sub_10001752C((uint64_t)v10);
      sub_100018688(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_100018688(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(v10, (uint64_t)") [", 3);
      sub_100018688(v10, (uint64_t)"ids", 3);
      sub_100018688(v10, (uint64_t)"] ", 2);
      sub_100018688(v10, (uint64_t)"output container is null", 24);
      sub_100014DB8(&v9, (uint64_t)a3);
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_10002ABF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10002AC10(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result) + 16);
    return v2();
  }
  return result;
}

uint64_t sub_10002AC88(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result) + 24);
    return v2();
  }
  return result;
}

uint64_t sub_10002AD00(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002AD2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10002AD6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *sub_10002ADAC(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (!v1
  {
    char v7 = 1;
    uint64_t v3 = sub_100018688(&std::cerr, (uint64_t)"sentencepiece_processor.cc", 26);
    sub_100018688(v3, (uint64_t)"(", 1);
    uint64_t v4 = (void *)std::ostream::operator<<();
    float v5 = sub_100018688(v4, (uint64_t)") [", 3);
    uint64_t v6 = sub_100018688(v5, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_.get()))", 68);
    sub_100018688(v6, (uint64_t)"] ", 2);
    sub_1000176C4(&v7);
    return 0;
  }
  return result;
}

void sub_10002AE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *sub_10002AEA4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3
  {
    return (void *)sub_10006F9B0((uint64_t)v4, (uint64_t)a2);
  }
  else
  {
    return sub_10000A1B4(a2, "");
  }
}

void sub_10002AF4C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 88))(&v37);
  if (v37.__r_.__value_.__r.__words[0])
  {
    v36.__r_.__value_.__s.__data_[0] = 1;
    uint64_t v4 = sub_100018688(&std::cerr, (uint64_t)"sentencepiece_processor.cc", 26);
    sub_100018688(v4, (uint64_t)"(", 1);
    float v5 = (void *)std::ostream::operator<<();
    uint64_t v6 = sub_100018688(v5, (uint64_t)") [", 3);
    char v7 = sub_100018688(v6, (uint64_t)"status().ok()", 13);
    unsigned __int8 v8 = sub_100018688(v7, (uint64_t)"] ", 2);
    sub_100018688(v8, (uint64_t)"To serialize, SentencePieceProcessor has to be initialized.", 59);
    sub_1000176C4(&v36);
  }
  sub_10004CF1C((uint64_t *)&v37);
  sub_10008C148(*(void *)(a1 + 32), &v37);
  sub_10004B154(&v37);
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 8) + 216))(&v36);
  sub_10004B154(&v36);
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 48))(&v35);
  sub_10004B154(&v35);
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9) {
    (*(void (**)(std::string *__return_ptr))(*(void *)v9 + 48))(&__p);
  }
  else {
    sub_10000A1B4(&__p, "");
  }
  sub_10004B154(&__p);
  int v10 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  int v11 = v37.__r_.__value_.__r.__words[1];
  int v12 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  int v13 = v36.__r_.__value_.__r.__words[1];
  int v14 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  int v15 = v35.__r_.__value_.__r.__words[1];
  int v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v17 = __p.__r_.__value_.__r.__words[1];
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  memset(&v33, 0, sizeof(v33));
  std::string::resize(&v33, 0x14uLL, 0);
  if ((v16 & 0x80u) == 0) {
    int v18 = v16;
  }
  else {
    int v18 = v17;
  }
  if ((v14 & 0x80u) == 0) {
    int v19 = v14;
  }
  else {
    int v19 = v15;
  }
  if ((v12 & 0x80u) == 0) {
    int v20 = v12;
  }
  else {
    int v20 = v13;
  }
  if ((v10 & 0x80u) == 0) {
    int v21 = v10;
  }
  else {
    int v21 = v11;
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v22 = &v33;
  }
  else {
    unint64_t v22 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  LODWORD(v22->__r_.__value_.__l.__data_) = 0;
  HIDWORD(v22->__r_.__value_.__r.__words[0]) = v21;
  LODWORD(v22->__r_.__value_.__r.__words[1]) = v20;
  HIDWORD(v22->__r_.__value_.__r.__words[1]) = v19;
  LODWORD(v22->__r_.__value_.__r.__words[2]) = v18;
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v23 = &v33;
  }
  else {
    uint64_t v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v33.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v23, size);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v25 = &v37;
  }
  else {
    unint64_t v25 = (std::string *)v37.__r_.__value_.__r.__words[0];
  }
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v26 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v26 = v37.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v25, v26);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v27 = &v36;
  }
  else {
    int v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = v36.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v27, v28);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v29 = &v35;
  }
  else {
    int v29 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = v35.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v32 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)p_p, v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
}

void sub_10002B2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v39 + 23) < 0) {
    operator delete(*(void **)v39);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002B374(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    {
      sub_10002AEA4(a1, a2);
    }
    else
    {
      sub_10002AF4C(a1, a2);
    }
  }
  else
  {
    sub_10000A1B4(a2, "");
  }
}

void *sub_10002B444@<X0>(_DWORD *a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  int v12 = a1;
  unint64_t v13 = a2;
  if (a2 <= 0x13)
  {
    LODWORD(v9) = 13;
    uint64_t v6 = (void *)sub_10001752C((uint64_t)v10);
    sub_100018688(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v10, (uint64_t)") [", 3);
    sub_100018688(v10, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    sub_100018688(v10, (uint64_t)"] ", 2);
    sub_100014DB8((unsigned int *)&v9, (uint64_t)a3);
  }
  else if (*a1)
  {
    LODWORD(v9) = 13;
    float v5 = (void *)sub_10001752C((uint64_t)v10);
    sub_100018688(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v10, (uint64_t)") [", 3);
    sub_100018688(v10, (uint64_t)"header->sentinel == 0", 21);
    sub_100018688(v10, (uint64_t)"] ", 2);
    sub_100018688(v10, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sub_100014DB8((unsigned int *)&v9, (uint64_t)a3);
  }
  else
  {
    uint64_t result = sub_10004B1B8(&v12, 0x14uLL, a3);
    if (*a3) {
      return result;
    }
    sub_10004CF1C(a3);
    if (v13 >= a1[1]) {
      operator new();
    }
    LODWORD(v9) = 13;
    unsigned __int8 v8 = (void *)sub_10001752C((uint64_t)v10);
    sub_100018688(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_100018688(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v10, (uint64_t)") [", 3);
    sub_100018688(v10, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    sub_100018688(v10, (uint64_t)"] ", 2);
    sub_100014DB8((unsigned int *)&v9, (uint64_t)a3);
  }
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)std::ios::~ios();
}

void sub_10002BFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100014E48((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10002C018()
{
}

void sub_10002C074()
{
}

uint64_t sub_10002C098(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  uint64_t v4 = a1 + 96;
  std::string::assign((std::string *)(a1 + 96), a2, a3);
  if (*(char *)(a1 + 119) < 0)
  {
    uint64_t v4 = *(void *)(a1 + 96);
    uint64_t v5 = *(void *)(a1 + 104);
  }
  else
  {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 119);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);
  return v6(a1, v4, v5);
}

void sub_10002C120()
{
}

void sub_10002C248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002C264(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  sub_100031B64(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0) {
      sub_1000302DC(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else {
      __p[0] = *(std::__fs::filesystem::path *)a2;
    }
    if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v8 = __p;
    }
    else {
      unsigned __int8 v8 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
    }
    int v9 = open((const char *)v8, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
    int v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_52;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    char v11 = (void *)sub_10001752C((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_100018688(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0) {
      unint64_t v13 = (unsigned char *)a2;
    }
    else {
      unint64_t v13 = *(unsigned char **)a2;
    }
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a2 + 8);
    }
LABEL_66:
    sub_100031D34(&__p[0].__pn_.__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sub_100014DB8((unsigned int *)__p, (uint64_t)a4);
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
    if (v28 < 0) {
      operator delete(v27);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return;
  }
  sub_100031BAC((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  sub_100031C70((const std::__fs::filesystem::path *)a2, (uint64_t)&v29);
  std::__fs::filesystem::__status(&v30, 0);
  if (__p[0].__pn_.__r_.__value_.__s.__data_[0] != 2) {
    goto LABEL_30;
  }
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000302DC(__p, v30.__pn_.__r_.__value_.__l.__data_, v30.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v30;
  }
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v14 = __p;
  }
  else {
    int v14 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  }
  int v15 = open((const char *)v14, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
  int v16 = v15;
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    sub_10001752C((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    std::string::size_type size = HIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]);
    if ((v30.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v18 = &v30;
    }
    else {
      int v18 = (std::__fs::filesystem::path *)v30.__pn_.__r_.__value_.__r.__words[0];
    }
    if ((v30.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v30.__pn_.__r_.__value_.__l.__size_;
    }
    sub_100031D34(&__p[0].__pn_.__r_.__value_.__l.__size_, v18, (unsigned char *)v18 + size, 0x22u, 0x5Cu);
    sub_100014DB8((unsigned int *)__p, (uint64_t)a4);
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
    if (v28 < 0) {
      operator delete(v27);
    }
    goto LABEL_37;
  }
  if (v15 < 0) {
    goto LABEL_30;
  }
LABEL_27:
  if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000302DC(__p, v29.__pn_.__r_.__value_.__l.__data_, v29.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v29;
  }
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v19 = __p;
  }
  else {
    int v19 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  }
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__pn_.__r_.__value_.__l.__data_);
    }
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v31) < 0)
    {
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      unint64_t v22 = (void *)sub_10001752C((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_100018688(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0) {
        unint64_t v13 = (unsigned char *)a2;
      }
      else {
        unint64_t v13 = *(unsigned char **)a2;
      }
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
    }
    else
    {
      st_std::string::size_type size = v31.st_size;
      *(void *)(a1 + 16) = v31.st_size;
      int v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(void *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sub_10004CF14(a4);
        return;
      }
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      uint64_t v23 = (void *)sub_10001752C((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_100018688(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0) {
        unint64_t v13 = (unsigned char *)a2;
      }
      else {
        unint64_t v13 = *(unsigned char **)a2;
      }
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
  sub_10001752C((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
  sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  sub_100018688(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0) {
    unint64_t v25 = (unsigned char *)a2;
  }
  else {
    unint64_t v25 = *(unsigned char **)a2;
  }
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(a2 + 8);
  }
  sub_100031D34(&__p[0].__pn_.__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sub_100014DB8((unsigned int *)__p, (uint64_t)a4);
  *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
  if (v28 < 0) {
    operator delete(v27);
  }
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_10002CB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 217) < 0) {
    operator delete(*(void **)(v14 - 240));
  }
  if (*(char *)(v14 - 193) < 0) {
    operator delete(*(void **)(v14 - 216));
  }
  _Unwind_Resume(exception_object);
}

void sub_10002CC2C()
{
}

void sub_10002CD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002CD70@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (a1) {
    sub_100049464();
  }
  return sub_10004D080(a2, 5, "model file path should not be empty.", 36);
}

void sub_10002D054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = *(void *)(v15 - 56);
  *(void *)(v15 - 56) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10002D0C4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 136))(&v3);
  return sub_10004CF1C(&v3);
}

void sub_10002D128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000D388((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002D140@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 144))(&v3);
  return sub_10004CF1C(&v3);
}

void sub_10002D1A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10002D1C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 176))(&v3);
  return sub_10004CF1C(&v3);
}

void sub_10002D224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002EECC((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002D23C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 184))(&v3);
  return sub_10004CF1C(&v3);
}

void sub_10002D2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002EF40((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002D2B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 192))(&v3);
  return sub_10004CF1C(&v3);
}

void sub_10002D31C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000D388((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002D334@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 200))(&v3);
  return sub_10004CF1C(&v3);
}

void sub_10002D398(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10002D3B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 208))(&v3);
  return sub_10004CF1C(&v3);
}

void sub_10002D418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002EFEC((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002D430@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 216))(&v3);
  return sub_10004CF1C(&v3);
}

void sub_10002D494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000184DC((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002D4AC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 152))(&v3);
  return sub_10004CF1C(&v3);
}

void sub_10002D510(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10002D52C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  return sub_10004CF1C(&v3);
}

void sub_10002D590(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10002D5AC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 168))(&v3);
  return sub_10004CF1C(&v3);
}

void sub_10002D610(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

float sub_10002D62C(uint64_t a1)
{
  float v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 224))(&v3);
  float v1 = v4;
  sub_10004CF1C(&v3);
  return v1;
}

void sub_10002D690(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v10 = off_1000ACCF8;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  char v11 = sub_10003B864();
  uint64_t v8 = sub_10001E968(&v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(&v9, a1, a2, a3, v8);
  sub_10006F9B0((uint64_t)v11, a4);
  sub_10004CF1C(&v9);
  int v10 = off_1000ACCF8;
  if (v13) {
    sub_10002F060(v13);
  }
}

void sub_10002D768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10002F060(a14);
  }
  _Unwind_Resume(a1);
}

void sub_10002D794(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v14 = off_1000ACCF8;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = sub_10003B864();
  uint64_t v12 = sub_10001E968(&v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 248))(&v13, a1, a2, a3, a4, v12, a6);
  sub_10006F9B0((uint64_t)v15, a5);
  sub_10004CF1C(&v13);
  uint64_t v14 = off_1000ACCF8;
  if (v17) {
    sub_10002F060(v17);
  }
}

void sub_10002D884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10002F060(a14);
  }
  _Unwind_Resume(a1);
}

void sub_10002D8B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v12[1] = 0;
  uint64_t v13 = 0;
  v12[0] = off_1000ACD18;
  uint64_t v10 = sub_10001EE20((uint64_t)v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(&v11, a1, a2, a3, a4, v10);
  sub_10001EEE0((uint64_t)v12, a5);
  sub_10004CF1C(&v11);
  v12[0] = off_1000ACD18;
  if (v13) {
    sub_10002F060(v13);
  }
}

void sub_10002D988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10002F060(a12);
  }
  _Unwind_Resume(a1);
}

void sub_10002D9B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, float a8@<S0>)
{
  v18[1] = 0;
  int v19 = 0;
  v18[0] = off_1000ACD18;
  uint64_t v16 = sub_10001EE20((uint64_t)v18);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v16, a8);
  sub_10001EEE0((uint64_t)v18, a7);
  sub_10004CF1C(&v17);
  v18[0] = off_1000ACD18;
  if (v19) {
    sub_10002F060(v19);
  }
}

void sub_10002DABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10002F060(a12);
  }
  _Unwind_Resume(a1);
}

void sub_10002DAE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = off_1000ACCF8;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_10003B864();
  uint64_t v6 = sub_10001E968(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 264))(&v7, a1, a2, v6);
  sub_10006F9B0((uint64_t)v9, a3);
  sub_10004CF1C(&v7);
  uint64_t v8 = off_1000ACCF8;
  if (v11) {
    sub_10002F060(v11);
  }
}

void sub_10002DBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10002F060(a14);
  }
  _Unwind_Resume(a1);
}

void sub_10002DBE4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = off_1000ACCF8;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_10003B864();
  uint64_t v6 = sub_10001E968(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272))(&v7, a1, a2, v6);
  sub_10006F9B0((uint64_t)v9, a3);
  sub_10004CF1C(&v7);
  uint64_t v8 = off_1000ACCF8;
  if (v11) {
    sub_10002F060(v11);
  }
}

void sub_10002DCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10002F060(a14);
  }
  _Unwind_Resume(a1);
}

void sub_10002DCE0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = off_1000ACCF8;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_10003B864();
  uint64_t v6 = sub_10001E968(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 280))(&v7, a1, a2, v6);
  sub_10006F9B0((uint64_t)v9, a3);
  sub_10004CF1C(&v7);
  uint64_t v8 = off_1000ACCF8;
  if (v11) {
    sub_10002F060(v11);
  }
}

void sub_10002DDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10002F060(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10002DDDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = off_1000ACCF8;
  uint64_t v8 = sub_10003B864();
  a4[2] = 0;
  a4[3] = 0;
  a4[1] = v8;
  uint64_t v9 = sub_10001E968(a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(&v11, a1, a2, a3, v9);
  return sub_10004CF1C(&v11);
}

void sub_10002DE94(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_10002F060(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10002DEB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, float a6@<S0>)
{
  *a5 = off_1000ACCF8;
  uint64_t v12 = sub_10003B864();
  a5[2] = 0;
  a5[3] = 0;
  a5[1] = v12;
  uint64_t v13 = sub_10001E968(a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 248))(&v15, a1, a2, a3, a4, v13, a6);
  return sub_10004CF1C(&v15);
}

void sub_10002DF80(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_10002F060(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10002DF9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  a5[1] = 0;
  a5[2] = 0;
  *a5 = off_1000ACD18;
  uint64_t v9 = sub_10001EE20((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(&v11, a1, a2, a3, a4, v9);
  return sub_10004CF1C(&v11);
}

void sub_10002E054(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    sub_10002F060(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10002E070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, float a8@<S0>)
{
  a7[1] = 0;
  a7[2] = 0;
  *a7 = off_1000ACD18;
  uint64_t v15 = sub_10001EE20((uint64_t)a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v15, a8);
  return sub_10004CF1C(&v17);
}

void sub_10002E158(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    sub_10002F060(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10002E174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = off_1000ACCF8;
  uint64_t v6 = sub_10003B864();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_10001E968(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 264))(&v9, a1, a2, v7);
  return sub_10004CF1C(&v9);
}

void sub_10002E224(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_10002F060(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10002E240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = off_1000ACCF8;
  uint64_t v6 = sub_10003B864();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_10001E968(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272))(&v9, a1, a2, v7);
  return sub_10004CF1C(&v9);
}

void sub_10002E2F0(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_10002F060(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10002E30C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = off_1000ACCF8;
  uint64_t v6 = sub_10003B864();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_10001E968(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 280))(&v9, a1, a2, v7);
  return sub_10004CF1C(&v9);
}

void sub_10002E3BC(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_10002F060(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002E3D8(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    float v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_10002E498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10002E4B8(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10000DC30(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    char v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_10002E520(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002E53C(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    float v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_10002E5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10002E61C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_10002E720(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    float v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_10002E7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_10002E800(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  uint64_t v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v10 = 0;
  if (a5)
  {
    int v11 = a6;
    if (a3)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v14 = (unsigned __int8 *)(a2 + a3);
      uint64_t v15 = a1 + 2;
      while (2)
      {
        uint64_t v16 = &v10[a2];
        uint64_t v17 = &v10[a2];
LABEL_5:
        uint64_t v18 = a5;
        int v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14) {
              goto LABEL_5;
            }
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          int v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            int v21 = (unsigned __int8 *)(v20 - v10);
            BOOL v22 = v20 >= v10;
            if (!v11) {
              BOOL v22 = v20 > v10;
            }
            if (v22)
            {
              uint64_t v23 = (unsigned __int8 *)(a3 - (void)v10);
              if (v23 >= v21) {
                uint64_t v24 = v21;
              }
              else {
                uint64_t v24 = v23;
              }
              if ((unint64_t)v9 >= *v15)
              {
                uint64_t v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60) {
                  sub_100004204();
                }
                uint64_t v26 = *v15 - (void)*a1;
                uint64_t v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1)) {
                  uint64_t v27 = v25 + 1;
                }
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v28 = v27;
                }
                if (v28) {
                  std::__fs::filesystem::path v29 = (char *)sub_100019218((uint64_t)v15, v28);
                }
                else {
                  std::__fs::filesystem::path v29 = 0;
                }
                std::__fs::filesystem::path v30 = &v29[16 * v25];
                *(void *)std::__fs::filesystem::path v30 = v16;
                *((void *)v30 + 1) = v24;
                std::string::size_type v32 = *a1;
                stat v31 = a1[1];
                std::string v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  stat v31 = *a1;
                }
                uint64_t v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31) {
                  operator delete(v31);
                }
                int v11 = a6;
                uint64_t v15 = a1 + 2;
              }
              else
              {
                void *v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            uint64_t v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1)) {
              continue;
            }
          }
        }
        break;
      }
    }
  }
LABEL_37:
  BOOL v34 = a3 > (unint64_t)v10;
  unint64_t v35 = a3 - (void)v10;
  if (v34)
  {
    std::string v36 = &v10[a2];
    unint64_t v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      uint64_t v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60) {
        sub_100004204();
      }
      uint64_t v40 = v37 - (void)*a1;
      uint64_t v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1)) {
        uint64_t v41 = v39 + 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v41;
      }
      if (v42) {
        BOOL v43 = (char *)sub_100019218((uint64_t)(a1 + 2), v42);
      }
      else {
        BOOL v43 = 0;
      }
      uint64_t v44 = &v43[16 * v39];
      uint64_t v45 = &v43[16 * v42];
      *(void *)uint64_t v44 = v36;
      *((void *)v44 + 1) = v35;
      uint64_t v38 = v44 + 16;
      size_t v47 = *a1;
      uint64_t v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        uint64_t v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46) {
        operator delete(v46);
      }
    }
    else
    {
      void *v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      uint64_t v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_10002EAA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10002EACC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10000D1AC(a1, a2);
    float v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_10002EB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_10002EB70(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10001C104(a1, a2);
    float v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_10002EBCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002EBE8(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  sub_10001DEEC(&__dst, __src, __len);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    uint64_t v10 = *(char **)v6;
    int64_t v11 = *(void *)(v6 + 8);
    uint64_t v12 = *(const std::string::value_type **)(v6 + 16);
    std::string::size_type v13 = *(void *)(v6 + 24);
    uint64_t v18 = p_dst;
    std::string::size_type v19 = size;
    if (v11)
    {
      uint64_t v14 = sub_10002ED80((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v15 = v14;
        uint64_t v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          uint64_t v16 = v15 + v11;
          uint64_t v15 = sub_10002ED80((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      std::string::size_type size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_10002ED50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002ED80(uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4 = a1[1];
  if (v4 < a4) {
    return -1;
  }
  if (a3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (void *)(*a1 + a4);
    uint64_t v8 = (char *)(v6 + v4);
    uint64_t v9 = v6 + v4 - (void)v7;
    if (v9 >= a3)
    {
      int v13 = *a2;
      do
      {
        uint64_t v14 = v9 - a3;
        if (v14 == -1) {
          break;
        }
        uint64_t v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15) {
          break;
        }
        uint64_t v10 = v15;
        if (!memcmp(v15, a2, a3)) {
          goto LABEL_6;
        }
        uint64_t v7 = v10 + 1;
        uint64_t v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    uint64_t v10 = v8;
LABEL_6:
    if (v10 == v8) {
      return -1;
    }
    else {
      return (uint64_t)&v10[-v6];
    }
  }
  return a4;
}

void sub_10002EE3C(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10002EE98(exception, a1);
}

void sub_10002EE84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10002EE98(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_10002EECC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_10000D388(&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10002EF40(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10002EF94((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10002EF94(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_10002EFEC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        uint64_t v6 = v4;
        sub_10000D388(&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10002F060(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t sub_10002F0D4(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    uint64_t v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    size_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_10002F194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10002F1B4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1000041C0(a1, a2);
    uint64_t v4 = (void **)a1[1];
    size_t v5 = &v4[a2];
    uint64_t v6 = 8 * a2;
    do
    {
      *v4++ = sub_10003A6D0();
      v6 -= 8;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_10002F218(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10002F240@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t result = sub_10002F28C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10002F278(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10002F28C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000AD060;
  sub_10003B5AC(a1 + 3, 0);
  return a1;
}

void sub_10002F2D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10002F2EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000AD060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002F30C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000AD060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10002F360(uint64_t a1)
{
  return sub_10003B828(a1 + 24);
}

void *sub_10002F36C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10002F3D8(a1, a2);
    sub_10002F41C(a1, a2);
  }
  return a1;
}

void sub_10002F3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_10002F3D8(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_100004204();
  }
  uint64_t result = (char *)sub_10002F4A8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *sub_10002F41C(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (void *)result[1];
  if (a2)
  {
    uint64_t v4 = 32 * a2;
    uint64_t v5 = result[1];
    uint64_t v6 = &v3[4 * a2];
    do
    {
      *uint64_t v3 = off_1000ACCF8;
      uint64_t result = sub_10003B864();
      v3[2] = 0;
      v3[3] = 0;
      v3[1] = result;
      v3 += 4;
      v5 += 32;
      v4 -= 32;
    }
    while (v4);
    uint64_t v3 = v6;
  }
  v2[1] = v3;
  return result;
}

void sub_10002F4A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_10002F4A8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_100004110();
  }
  return operator new(32 * a2);
}

void sub_10002F4E0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      char v7 = v4 - 32;
      uint64_t v8 = v4 - 32;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 32;
        (*v9)(v7);
        v6 -= 32;
        BOOL v10 = v7 == v2;
        char v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_10002F5A0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x48uLL);
  uint64_t result = sub_10002F5EC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10002F5D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10002F5EC(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1000AD0B0;
  sub_10003C460(a1 + 3, 0);
  return a1;
}

void sub_10002F638(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10002F64C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1000AD0B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002F66C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1000AD0B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10002F6C0(uint64_t a1)
{
  return sub_10003C5FC(a1 + 24);
}

uint64_t sub_10002F6CC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100046540(result, a2);
    operator delete();
  }
  return result;
}

void sub_10002F71C(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  sub_10001DEEC(&__dst, __src, __len);
  int v10 = *((char *)a3 + 23);
  if (v10 >= 0) {
    int64_t v11 = a3;
  }
  else {
    int64_t v11 = *a3;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v12 = (size_t)a3[1];
  }
  sub_10002F820(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_10002F7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002F820(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  sub_10001DEEC(&__dst, __src, __len);
  size_t v8 = strlen(a3);
  sub_10002F914(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int64_t v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_10002F8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002F914(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  sub_10001DEEC(&__dst, __src, __len);
  int v6 = *((char *)a3 + 23);
  if (v6 >= 0) {
    char v7 = a3;
  }
  else {
    char v7 = *a3;
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v8 = (size_t)a3[1];
  }
  sub_10001DEEC(__p, v7, v8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v10 = v13;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  int64_t v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_10002F9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002FA00(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      sub_10002FA84((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_10002FA6C(_Unwind_Exception *a1)
{
  sub_100018A60(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10002FA84(uint64_t **a1, void *a2, uint64_t a3, _OWORD *a4)
{
  int v6 = sub_10002FB0C(a1, a2, &v11, &v10, a3);
  char v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    char v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_100018E60(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10002FB0C(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_100018EB8((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if (!sub_100018EB8((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (void *)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        uint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_100018EB8((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    size_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      size_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      size_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (sub_100018EB8((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return sub_100018DC0((uint64_t)a1, a3, a5);
}

void *sub_10002FCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  int v6 = (void *)(a1 + 8);
  do
  {
    int v7 = sub_100018EB8(v5, (uint64_t)(v3 + 4), a2);
    size_t v8 = v3 + 1;
    if (!v7)
    {
      size_t v8 = v3;
      int v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_100018EB8(v5, a2, (uint64_t)(v6 + 4))) {
    return v2;
  }
  return v6;
}

uint64_t sub_10002FD48(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 24));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v6;
  *(void *)a1 = v8;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12sub_10002F6CC(&a9, 0) = 24;
  return a1;
}

void sub_10002FFF8(_Unwind_Exception *a1)
{
}

uint64_t sub_100030020(uint64_t a1)
{
  *(void *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void *sub_100030158(void *result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_1000302DC((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_1000301B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000301B8(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100004204();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10000D200(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  BOOL v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000302DC(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  uint64_t v16 = v11 + 24;
  sub_10000D788(a1, v15);
  uint64_t v13 = a1[1];
  sub_10000D920((uint64_t)v15);
  return v13;
}

void sub_1000302C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000D920((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000302DC(unsigned char *__dst, void *__src, unint64_t a3)
{
  unint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_100004068();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    unint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

char *sub_10003037C(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = sub_10000D700((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_1000303D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000303DC(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100004204();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10000D200(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_10000D700(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v15 += 24;
  sub_100030500(a1, v14);
  uint64_t v12 = a1[1];
  sub_1000306A0(v14);
  return v12;
}

void sub_1000304EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000306A0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100030500(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100030578((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100030578(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_10003061C((uint64_t)v11);
  return v9;
}

uint64_t sub_10003061C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100030654(a1);
  }
  return a1;
}

void sub_100030654(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_10000D388(&v3);
    v1 += 3;
  }
}

void **sub_1000306A0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1000306D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_10000D388(&v5);
  }
}

void *sub_100030728(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = sub_10000DBB4(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_100030774(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10003077C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100004204();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10000D200(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_10000DBB4(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  sub_100030894(a1, v14);
  uint64_t v12 = a1[1];
  sub_100030A30((uint64_t)v14);
  return v12;
}

void sub_100030880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100030A30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100030894(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10003090C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10003090C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1000309B0((uint64_t)v11);
  return v9;
}

uint64_t sub_1000309B0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000309E8(a1);
  }
  return a1;
}

void sub_1000309E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_100030A30(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100030A68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t sub_100030AC4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100030B3C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100030B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_100030BE8((uint64_t)v11);
  return v9;
}

uint64_t sub_100030BE8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100030C20(a1);
  }
  return a1;
}

void sub_100030C20(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_10000D388(&v3);
    v1 += 4;
  }
}

void **sub_100030C6C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100030CA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 32);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_10000D388(&v5);
  }
}

float sub_100030CF4(uint64_t a1, long long **a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_10000D700((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_100030D60(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100030D68(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_100004204();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  std::string::size_type v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_10002F4A8(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  BOOL v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_10000D700(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_100030AC4(a1, v16);
  uint64_t v14 = a1[1];
  sub_100030C6C(v16);
  return v14;
}

void sub_100030E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100030C6C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100030E78(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100030EF0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100030EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_100030F9C((uint64_t)v11);
  return v9;
}

uint64_t sub_100030F9C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100030FD4(a1);
  }
  return a1;
}

void sub_100030FD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_10003101C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100031054(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 32);
    *(void *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(void *)(v2 - 24) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float sub_1000310B0(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_10000DBB4((void *)v5, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_100031110(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100031118(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_100004204();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  std::string::size_type v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_10002F4A8(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  BOOL v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_10000DBB4(v13, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_100030E78(a1, v16);
  uint64_t v14 = a1[1];
  sub_10003101C((uint64_t)v16);
  return v14;
}

void sub_100031208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003101C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003121C(uint64_t a1, float *a2, float *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_100031384((char *)a1, a2, a3, a3 - a2);
  sub_100031278((double **)a1);
  return a1;
}

void sub_10003125C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100031278(double **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      sub_1000313FC((uint64_t)a1);
    }
    else
    {
      uint64_t v4 = v2 - v1;
      double v5 = 0.0;
      unint64_t v6 = *a1;
      do
      {
        double v7 = *v6++;
        double v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        double *v1 = *v1 / v5;
        ++v1;
      }
      sub_1000314C4(&v16, v4 - 1);
      long long v8 = *a1;
      uint64_t v9 = (uint64_t)(a1[1] - 1);
      uint64_t v10 = v16;
      if (*a1 != (double *)v9)
      {
        unint64_t v11 = v8 + 1;
        double v12 = *v8;
        double *v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          long long v13 = v10 + 1;
          do
          {
            double v14 = *v11++;
            double v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      uint64_t v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      uint64_t v16 = v8;
      *((void *)&v17 + 1) = v15;
      if (v8)
      {
        *(void *)&long long v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *sub_100031384(char *result, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float result = sub_1000041C0(result, a4);
    double v7 = (double *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      float v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1000313E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000313FC(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(char **)a1;
  double v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    unint64_t v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  double v7 = (char *)sub_10000421C(v2, v6);
  uint64_t v4 = *(char **)a1;
  float v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  unint64_t v11 = &v7[8 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *(void *)(v12 - 8) = v13;
    v12 -= 8;
  }
  while (v8 != v4);
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void *sub_1000314C4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1000041C0(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_100031520(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10003153C(uint64_t a1, uint64_t a2, double **a3)
{
  double v5 = *a3;
  unint64_t v6 = a3[1];
  unsigned int v7 = sub_1000315F4(a2);
  unsigned int v8 = sub_1000315F4(a2);
  if (v6 != v5)
  {
    unint64_t v9 = v6 - v5;
    do
    {
      unint64_t v10 = v9 >> 1;
      unint64_t v11 = &v5[v9 >> 1];
      double v13 = *v11;
      uint64_t v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13) {
        unint64_t v9 = v10;
      }
      else {
        double v5 = v12;
      }
    }
    while (v9);
    unint64_t v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

uint64_t sub_1000315F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2496);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  unsigned int v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(void *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (v1 << 15) & 0xEFC60000 ^ v1 ^ (((v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_100031694()
{
  sub_10001752C((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1000317C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002E61C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000317DC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100004204();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  double v14 = a1 + 2;
  if (v6) {
    unsigned int v7 = (char *)sub_10000D200((uint64_t)(a1 + 2), v6);
  }
  else {
    unsigned int v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[24 * v3];
  double v13 = &v7[24 * v6];
  sub_1000318EC(a1 + 16, v11, a2);
  uint64_t v12 = v11 + 24;
  sub_10000D788(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10000D920((uint64_t)&v10);
  return v8;
}

void sub_1000318D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000D920((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000318EC(int a1, unsigned char *__dst, uint64_t a3)
{
  unint64_t v3 = __dst;
  size_t v4 = *(void *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100004068();
  }
  double v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    *unint64_t v3 = v8;
    unint64_t v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((unsigned char *)v3 + v4) = 0;
}

uint64_t sub_100031988(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    unint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v2) {
      unint64_t v3 = (void *)*v3;
    }
    uint64_t v4 = *(void *)(a2 + 8);
    double v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v4) {
      double v5 = (void *)*v5;
    }
    if (v3 == v5) {
      return (uint64_t)sub_10003B2F0(a1, a2);
    }
    else {
      return sub_10006B4E4(a1, a2);
    }
  }
  return a1;
}

uint64_t sub_1000319CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      sub_100031A50((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_100031A38(_Unwind_Exception *a1)
{
  sub_100018A60(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_100031A50(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10002FB0C(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    sub_100018E60(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_100031AE4(void *a1)
{
  sub_100031B1C(a1);
  operator delete();
}

void *sub_100031B1C(void *a1)
{
  *a1 = off_1000AD100;
  sub_100031B64((uint64_t)a1);
  return a1;
}

void *sub_100031B64(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  float result = *(void **)(a1 + 8);
  if (result) {
    float result = (void *)munmap(result, *(void *)(a1 + 16));
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

double sub_100031BAC@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_100004068();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

double sub_100031C70@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_100004068();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void *sub_100031D34(void *a1, unsigned char *a2, unsigned char *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    int v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v1sub_10002F6CC(&a9, 0) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v15;
  }
  else {
    uint64_t v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  double v13 = sub_100018688(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_100031E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100031E38(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  std::__fs::filesystem::path::__string_view v3 = *a2;
  uint64_t v4 = v3 - 1;
  while (*++v4)
    ;
  sub_100031E98(this, v3, v4);
  return this;
}

void sub_100031E7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100031E98(std::string *this, char *a2, char *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    int v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    int v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    double v14 = this;
    if ((v6 & 0x80) != 0) {
      double v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *uint64_t i = v16;
    }
    *uint64_t i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    sub_100032010(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_100031FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100032010(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100004068();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    double result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

void sub_1000320B8()
{
}

double sub_1000320E4(uint64_t a1)
{
  *(void *)a1 = off_1000AD130;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = off_1000AD268;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_10002F6CC(&a9, 0) = 0u;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 1024;
  return result;
}

uint64_t sub_10003214C(uint64_t a1)
{
  *(void *)a1 = off_1000AD130;
  sub_100038D20((void *)(a1 + 96));
  uint64_t v4 = (void **)(a1 + 72);
  sub_10002EF40(&v4);
  uint64_t v4 = (void **)(a1 + 48);
  sub_10002EF40(&v4);
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1000321D0(uint64_t a1)
{
  sub_10003214C(a1);
  operator delete();
}

uint64_t sub_100032208(uint64_t a1, int a2)
{
  return *(void *)(a1 + 48) + 24 * a2;
}

uint64_t sub_100032218(uint64_t a1, int a2)
{
  return *(void *)(a1 + 72) + 24 * a2;
}

uint64_t sub_100032228(uint64_t a1)
{
  int v1 = ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3) - 1;
  return v1 & ~(v1 >> 31);
}

uint64_t sub_100032240(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_100032248(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_100032250(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(a1 + 24) + 8 * a2);
}

uint64_t sub_10003225C(uint64_t a1)
{
  return ***(void ***)(a1 + 72);
}

uint64_t sub_10003226C(void *a1)
{
  int v1 = ((a1[4] - a1[3]) >> 3) - 1;
  return **(void **)(a1[6] + 24 * (v1 & ~(v1 >> 31)));
}

uint64_t sub_100032298(uint64_t a1)
{
  uint64_t result = sub_1000322D8((void *)(a1 + 96));
  *(_DWORD *)(result + 24) = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  return result;
}

uint64_t sub_1000322D8(void *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[4];
  if (v4 >= v3)
  {
    unint64_t v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  uint64_t v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x30uLL);
    operator new[]();
  }
  uint64_t result = *(void *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sub_10003245C(void *a1)
{
  sub_10002EF94(a1 + 6);
  sub_10002EF94(a1 + 9);
  a1[1] = "";
  a1[2] = 0;
  a1[4] = a1[3];
  sub_1000324B4((uint64_t)(a1 + 12));
}

void sub_1000324B4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  }
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(void *)(a1 + 8) + v4), 48 * *(void *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = 0;
}

void sub_100032530(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  sub_10003245C((void *)a1);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  unint64_t v6 = (char **)(a1 + 24);
  sub_10000D018((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    unint64_t v7 = (void *)(a1 + 40);
    uint64_t v8 = *(void **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_1000A0F64[(unint64_t)*a2 >> 4]) {
        int v9 = asc_1000A0F64[(unint64_t)*a2 >> 4];
      }
      else {
        int v9 = a3;
      }
      if ((unint64_t)v8 >= *v7)
      {
        uint64_t v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          goto LABEL_76;
        }
        uint64_t v11 = *v7 - (void)*v6;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          double v14 = (char *)sub_10000421C(a1 + 40, v13);
        }
        else {
          double v14 = 0;
        }
        std::string v15 = &v14[8 * v10];
        *(void *)std::string v15 = a2;
        uint64_t v8 = v15 + 8;
        std::string::size_type v17 = *(char **)(a1 + 24);
        char v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          char v16 = *v6;
        }
        *(void *)(a1 + 24) = v15;
        *(void *)(a1 + 32) = v8;
        *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = &v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *v8++ = a2;
      }
      *(void *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
  }
  unint64_t v19 = *(void *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    uint64_t v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61) {
LABEL_76:
    }
      sub_100004204();
    uint64_t v22 = v19 - (void)*v6;
    uint64_t v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
      uint64_t v23 = v21 + 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      uint64_t v25 = (char *)sub_10000421C(a1 + 40, v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = &v25[8 * v21];
    uint64_t v27 = &v25[8 * v24];
    *(void *)uint64_t v26 = a2;
    unsigned __int8 v20 = v26 + 8;
    std::__fs::filesystem::path v29 = *(char **)(a1 + 24);
    unint64_t v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        uint64_t v30 = *((void *)v28 - 1);
        v28 -= 8;
        *((void *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      unint64_t v28 = *v6;
    }
    *(void *)(a1 + 24) = v26;
    *(void *)(a1 + 32) = v20;
    *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *uint64_t v8 = a2;
    unsigned __int8 v20 = v8 + 1;
  }
  *(void *)(a1 + 32) = v20;
  int v31 = (((unint64_t)v20 - *(void *)(a1 + 24)) >> 3) - 1;
  unsigned int v32 = v31 & ~(v31 >> 31);
  sub_100032970((uint64_t *)(a1 + 48), v32 + 1);
  sub_100032970((uint64_t *)(a1 + 72), v32 + 1);
  uint64_t v33 = 0;
  do
  {
    sub_10000D018((void **)(*(void *)(a1 + 48) + v33), 0x10uLL);
    sub_10000D018((void **)(*(void *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  BOOL v34 = (_DWORD *)sub_1000322D8((void *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  v34[4] = 0;
  unint64_t v35 = *(void ***)(a1 + 72);
  std::string v36 = v35[1];
  unint64_t v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    uint64_t v39 = ((char *)v36 - (unsigned char *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61) {
      sub_100004204();
    }
    uint64_t v40 = v37 - (void)*v35;
    uint64_t v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
      uint64_t v41 = v39 + 1;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42) {
      BOOL v43 = (char *)sub_10000421C((uint64_t)(v35 + 2), v42);
    }
    else {
      BOOL v43 = 0;
    }
    uint64_t v44 = &v43[8 * v39];
    uint64_t v45 = &v43[8 * v42];
    *(void *)uint64_t v44 = v34;
    uint64_t v38 = v44 + 8;
    size_t v47 = (char *)*v35;
    uint64_t v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        uint64_t v48 = *((void *)v46 - 1);
        v46 -= 8;
        *((void *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      uint64_t v46 = (char *)*v35;
    }
    unsigned __int8 *v35 = v44;
    v35[1] = v38;
    v35[2] = v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    *std::string v36 = v34;
    uint64_t v38 = v36 + 1;
  }
  v35[1] = v38;
  BOOL v49 = (_DWORD *)sub_1000322D8((void *)(a1 + 96));
  uint64_t v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  uint64_t v51 = (void **)(*(void *)(a1 + 48) + 24 * v32);
  uint64_t v52 = v51 + 1;
  size_t v53 = v51[1];
  unint64_t v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    uint64_t v56 = ((char *)v53 - (unsigned char *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61) {
      sub_100004204();
    }
    uint64_t v57 = v54 - (void)*v51;
    uint64_t v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1)) {
      uint64_t v58 = v56 + 1;
    }
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v59 = v58;
    }
    if (v59) {
      uint64_t v60 = (char *)sub_10000421C((uint64_t)(v51 + 2), v59);
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v61 = &v60[8 * v56];
    long long v62 = &v60[8 * v59];
    *(void *)uint64_t v61 = v50;
    int v55 = v61 + 8;
    unint64_t v63 = (char *)*v52;
    BOOL v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        uint64_t v65 = *((void *)v63 - 1);
        v63 -= 8;
        *((void *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      unint64_t v63 = (char *)*v51;
    }
    *uint64_t v51 = v61;
    *uint64_t v52 = v55;
    v51[2] = v62;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    *size_t v53 = v49;
    int v55 = v53 + 1;
  }
  *uint64_t v52 = v55;
}

void sub_100032970(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_100038DB0(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        int v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sub_100032A18(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_1000322D8((void *)(a1 + 96));
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  *(_DWORD *)(v6 + 2sub_10002F6CC(&a9, 0) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * (a3 + a2));
  uint64_t v11 = *(void *)(v9 + 8 * a2);
  *(void *)uint64_t v6 = v11;
  *(void *)(v6 + 8) = (int)v10 - (int)v11;
  uint64_t v12 = (uint64_t **)(*(void *)(a1 + 48) + 24 * a2);
  unint64_t v13 = (void **)(v12 + 1);
  double v14 = v12[1];
  char v16 = (char **)(v12 + 2);
  unint64_t v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    uint64_t v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61) {
      sub_100004204();
    }
    uint64_t v19 = v15 - (void)*v12;
    uint64_t v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
      uint64_t v20 = v18 + 1;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      uint64_t v22 = (char *)sub_10000421C((uint64_t)v16, v21);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = (uint64_t *)&v22[8 * v18];
    unint64_t v24 = &v22[8 * v21];
    *uint64_t v23 = v7;
    std::string::size_type v17 = v23 + 1;
    uint64_t v25 = (char *)*v13;
    uint64_t v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        uint64_t v27 = *((void *)v25 - 1);
        v25 -= 8;
        *--uint64_t v23 = v27;
      }
      while (v25 != v26);
      uint64_t v25 = (char *)*v12;
    }
    *uint64_t v12 = v23;
    void *v13 = v17;
    char *v16 = v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    uint64_t *v14 = v6;
    std::string::size_type v17 = v14 + 1;
  }
  void *v13 = v17;
  unint64_t v28 = (void **)(*(void *)(a1 + 72) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  std::__fs::filesystem::path v29 = v28 + 1;
  uint64_t v30 = (uint64_t *)v28[1];
  unint64_t v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    uint64_t v33 = ((char *)v30 - (unsigned char *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61) {
      sub_100004204();
    }
    uint64_t v34 = v31 - (void)*v28;
    uint64_t v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
      uint64_t v35 = v33 + 1;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36) {
      unint64_t v37 = (char *)sub_10000421C((uint64_t)(v28 + 2), v36);
    }
    else {
      unint64_t v37 = 0;
    }
    uint64_t v38 = (uint64_t *)&v37[8 * v33];
    uint64_t v39 = &v37[8 * v36];
    uint64_t *v38 = v7;
    unsigned int v32 = v38 + 1;
    uint64_t v40 = (char *)*v29;
    uint64_t v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        uint64_t v42 = *((void *)v40 - 1);
        v40 -= 8;
        *--uint64_t v38 = v42;
      }
      while (v40 != v41);
      uint64_t v40 = (char *)*v28;
    }
    char *v28 = v38;
    char *v29 = v32;
    v28[2] = v39;
    if (v40) {
      operator delete(v40);
    }
  }
  else
  {
    uint64_t *v30 = v7;
    unsigned int v32 = v30 + 1;
  }
  char *v29 = v32;
  return v7;
}

void sub_100032C40(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = 0;
  int v4 = ((a1[4] - a1[3]) >> 3) - 1;
  unsigned int v5 = v4 & ~(v4 >> 31);
  uint64_t v6 = a1[6];
  while (1)
  {
    uint64_t v7 = (uint64_t **)(v6 + 24 * v3);
    int v8 = *v7;
    uint64_t v9 = v7[1];
    if (v8 != v9) {
      break;
    }
LABEL_14:
    if (++v3 == v5 + 1)
    {
      std::string __p = 0;
      uint64_t v46 = 0;
      size_t v47 = 0;
      uint64_t v21 = **(void **)(v6 + 24 * v5);
      int v22 = *(_DWORD *)(v21 + 36);
      uint64_t v23 = *(void *)(v21 + 40);
      if (*(void *)(v23 + 40))
      {
        unint64_t v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            uint64_t v25 = (v24 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61) {
              sub_100004204();
            }
            unint64_t v26 = (v47 - (unsigned char *)__p) >> 2;
            if (v26 <= v25 + 1) {
              unint64_t v26 = v25 + 1;
            }
            if ((unint64_t)(v47 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v26;
            }
            if (v27) {
              unint64_t v28 = (char *)sub_10000421C((uint64_t)&v47, v27);
            }
            else {
              unint64_t v28 = 0;
            }
            std::__fs::filesystem::path v29 = &v28[8 * v25];
            *(void *)std::__fs::filesystem::path v29 = v23;
            unint64_t v24 = v29 + 8;
            unint64_t v31 = (char *)__p;
            uint64_t v30 = v46;
            if (v46 != __p)
            {
              do
              {
                uint64_t v32 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              uint64_t v30 = (char *)__p;
            }
            std::string __p = v29;
            uint64_t v46 = v24;
            size_t v47 = &v28[8 * v27];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)unint64_t v24 = v23;
            v24 += 8;
          }
          uint64_t v46 = v24;
          uint64_t v23 = *(void *)(v23 + 40);
        }
        while (*(void *)(v23 + 40));
        uint64_t v33 = __p;
        uint64_t v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          unint64_t v36 = (char *)__p + 8;
          do
          {
            uint64_t v37 = *((void *)v36 - 1);
            *((void *)v36 - 1) = *(void *)v34;
            *(void *)uint64_t v34 = v37;
            v34 -= 8;
            BOOL v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          uint64_t v33 = __p;
          unint64_t v24 = v46;
        }
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v33 = 0;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_100038328((void *)a2, v33, (uint64_t)v24, (v24 - (unsigned char *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        uint64_t v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  uint64_t v10 = (uint64_t **)(a1[9] + 24 * v3);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  while (1)
  {
    uint64_t v13 = *v8;
    *(void *)(*v8 + 4sub_10002F6CC(&a9, 0) = 0;
    if (v11 == v12) {
      break;
    }
    uint64_t v14 = 0;
    float v15 = 0.0;
    char v16 = v11;
    do
    {
      uint64_t v18 = *v16++;
      uint64_t v17 = v18;
      float v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        float v15 = v19;
        uint64_t v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14) {
      break;
    }
    *(void *)(v13 + 4sub_10002F6CC(&a9, 0) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9) {
      goto LABEL_14;
    }
  }
  if ((int)sub_10004A6A8() <= 2)
  {
    LOBYTE(__p) = 0;
    uint64_t v39 = sub_100018688(&std::cerr, (uint64_t)"unigram_model.cc", 16);
    sub_100018688(v39, (uint64_t)"(", 1);
    uint64_t v40 = (void *)std::ostream::operator<<();
    uint64_t v41 = sub_100018688(v40, (uint64_t)") ", 2);
    uint64_t v42 = sub_100018688(v41, (uint64_t)"LOG(", 4);
    BOOL v43 = sub_100018688(v42, (uint64_t)"ERROR", 5);
    uint64_t v44 = sub_100018688(v43, (uint64_t)") ", 2);
    sub_100018688(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sub_1000176C4(&__p);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
}

void sub_100032F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100032F70(void *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  int v6 = ((a1[4] - a1[3]) >> 3) - 1;
  int v7 = v6 & ~(v6 >> 31);
  unint64_t v8 = a1[16] + a1[17] * a1[18];
  int v29 = 0;
  uint64_t v25 = a2;
  sub_100012010(a2, v8, &v29);
  uint64_t v9 = 0;
  uint64_t v28 = a1[6];
  unint64_t v26 = a1;
  uint64_t v27 = (v7 + 1);
  do
  {
    uint64_t v10 = (uint64_t *)(v28 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 != v12)
    {
      uint64_t v13 = v26[9] + 24 * v9;
      float v15 = *(void **)v13;
      uint64_t v14 = *(void **)(v13 + 8);
      uint64_t v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          uint64_t v17 = *(unsigned int *)(*(void *)v11 + 24);
          uint64_t v18 = *v15;
          float v19 = *(float *)(v16 + 4 * v17);
          uint64_t v20 = v15;
          do
          {
            float v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19) {
                float v22 = v19;
              }
              else {
                float v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
              }
              if (v19 >= v21) {
                float v21 = v19;
              }
              if (v21 <= (float)(v22 + 50.0))
              {
                double v23 = v21;
                long double v24 = exp((float)(v22 - v21));
                float v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            float v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

void sub_1000330F8(void *a1@<X0>, uint64_t *a2@<X8>)
{
  int v4 = ((a1[4] - a1[3]) >> 3) - 1;
  uint64_t v5 = v4 & ~(v4 >> 31);
  unint64_t v6 = a1[16] + a1[17] * a1[18];
  int v26 = 0;
  double v23 = a2;
  sub_100012010(a2, v6, &v26);
  long double v24 = a1;
  uint64_t v25 = a1[9];
  do
  {
    int v7 = (uint64_t *)(v25 + 24 * v5);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (*v7 != v9)
    {
      uint64_t v10 = v24[6] + 24 * v5;
      uint64_t v11 = *(void **)v10;
      uint64_t v12 = *(void **)(v10 + 8);
      uint64_t v13 = *v23;
      do
      {
        if (v11 != v12)
        {
          uint64_t v14 = *(unsigned int *)(*(void *)v8 + 24);
          uint64_t v15 = *v11;
          float v16 = *(float *)(v13 + 4 * v14);
          uint64_t v17 = v11;
          do
          {
            float v18 = *(float *)(*v17 + 32) + *(float *)(v13 + 4 * *(unsigned int *)(*v17 + 24));
            if (*v17 != v15)
            {
              if (v18 >= v16) {
                float v19 = v16;
              }
              else {
                float v19 = *(float *)(*v17 + 32) + *(float *)(v13 + 4 * *(unsigned int *)(*v17 + 24));
              }
              if (v16 >= v18) {
                float v18 = v16;
              }
              if (v18 <= (float)(v19 + 50.0))
              {
                double v20 = v18;
                long double v21 = exp((float)(v19 - v18));
                float v18 = log(v21 + 1.0) + v20;
              }
            }
            *(float *)(v13 + 4 * v14) = v18;
            ++v17;
            float v16 = v18;
          }
          while (v17 != v12);
        }
        v8 += 8;
      }
      while (v8 != v9);
    }
  }
  while (v5-- > 0);
}

void sub_100033268(void *a1, void *a2, float a3)
{
  if (a2)
  {
    uint64_t v7 = a1[3];
    uint64_t v6 = a1[4];
    sub_100032F70(a1, (uint64_t *)v21, 1.0);
    sub_1000330F8(a1, (uint64_t *)__p);
    int v8 = ((unint64_t)(v6 - v7) >> 3) - 1;
    uint64_t v9 = v8 & ~(v8 >> 31);
    uint64_t v10 = a1[6];
    uint64_t v11 = (float *)v21[0];
    float v12 = *((float *)v21[0] + *(unsigned int *)(**(void **)(v10 + 24 * v9) + 24));
    if (v8 >= 1)
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = (uint64_t *)(v10 + 24 * v13);
        uint64_t v15 = *v14;
        uint64_t v16 = v14[1];
        if (*v14 != v16)
        {
          uint64_t v17 = (float *)__p[0];
          do
          {
            uint64_t v18 = *(unsigned int *)(*(void *)v15 + 28);
            if ((v18 & 0x80000000) == 0)
            {
              float v19 = *(float *)(*a2 + 4 * v18)
                  + a3
                  * exp((float)((float)((float)(v11[*(unsigned int *)(*(void *)v15 + 24)]
                                              + *(float *)(*(void *)v15 + 32))
                                      + v17[*(unsigned int *)(*(void *)v15 + 24)])
                              - v12));
              *(float *)(*a2 + 4 * v18) = v19;
            }
            v15 += 8;
          }
          while (v15 != v16);
        }
        ++v13;
      }
      while (v13 != v9);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
      uint64_t v11 = (float *)v21[0];
    }
    if (v11)
    {
      v21[1] = v11;
      operator delete(v11);
    }
  }
}

void sub_1000333D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_1000333EC(void *a1, float a2)
{
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v6 = a1[16] + a1[17] * a1[18];
  LODWORD(__p[0]) = 0;
  sub_100012010(v29, v6, __p);
  sub_100032F70(a1, (uint64_t *)__p, a2);
  uint64_t v7 = 0;
  uint64_t v27 = a1[6];
  unsigned int v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  int v26 = a1;
  do
  {
    int v8 = (uint64_t *)(v27 + 24 * v7);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 != v10)
    {
      uint64_t v11 = (uint64_t **)(v26[9] + 24 * v7);
      float v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = (float *)__p[0];
      uint64_t v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          uint64_t v16 = *(unsigned int *)(*(void *)v9 + 24);
          float v17 = v15[v16];
          uint64_t v18 = v12;
          do
          {
            uint64_t v19 = *v18++;
            uint64_t v20 = *(unsigned int *)(v19 + 24);
            float v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            float v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  float v22 = v29[0];
  float v23 = *((float *)v29[0] + *(unsigned int *)(**(void **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (float v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_100033590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000335AC(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  if (a2 == 1)
  {
    if ((a3 & 1) == 0)
    {
      sub_100032C40(a1, (uint64_t)&v171);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      *(void *)v157 = a4;
      v157[8] = 0;
      v145 = operator new(0x20uLL);
      *a4 = (uint64_t)v145;
      a4[1] = (uint64_t)v145;
      a4[2] = (uint64_t)v145 + 32;
      a4[1] = sub_10003906C((uint64_t)(a4 + 2), (uint64_t)&v171, (uint64_t)&v173[1], (uint64_t)v145);
      if (v171)
      {
        *(void *)&long long v172 = v171;
        operator delete(v171);
      }
      return;
    }
  }
  else if (!a2)
  {
    if ((int)sub_10004A6A8() <= 1)
    {
      LOBYTE(v171) = 0;
      uint64_t v9 = sub_100018688(&std::cerr, (uint64_t)"unigram_model.cc", 16);
      sub_100018688(v9, (uint64_t)"(", 1);
      uint64_t v10 = (void *)std::ostream::operator<<();
      uint64_t v11 = sub_100018688(v10, (uint64_t)") ", 2);
      float v12 = sub_100018688(v11, (uint64_t)"LOG(", 4);
      uint64_t v13 = sub_100018688(v12, (uint64_t)"WARNING", 7);
      uint64_t v14 = sub_100018688(v13, (uint64_t)") ", 2);
      sub_100018688(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sub_1000176C4(&v171);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  long long v172 = 0u;
  memset(v173, 0, sizeof(v173));
  v171 = off_1000AD298;
  uint64_t v174 = 512;
  long long v168 = 0uLL;
  uint64_t v169 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v15 = sub_100034798(&v171);
  uint64_t v167 = v15;
  int v16 = ((a1[4] - a1[3]) >> 3) - 1;
  *(void *)uint64_t v15 = **(void **)(a1[6] + 24 * (v16 & ~(v16 >> 31)));
  *(void *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 2sub_10002F6CC(&a9, 0) = 0;
  unint64_t v17 = a1[16] + a1[17] * a1[18];
  *(_DWORD *)v157 = 0;
  sub_100012010(__p, v17, v157);
  if (a3)
  {
    sub_100032F70(a1, (uint64_t *)v157, a5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v157;
    std::string __p[2] = *(void **)&v157[16];
    sub_10004ABE0();
    unsigned int v19 = sub_1000315F4(v18);
    float v20 = logf((float)((float)((float)v19 * 2.3283e-10) + 0.0) + 0.0000001);
    float v21 = -logf(-v20);
  }
  else
  {
    sub_100032C40(a1, (uint64_t)v165);
    if (v165[0])
    {
      v165[1] = v165[0];
      operator delete(v165[0]);
    }
    float v21 = *(float *)(*(void *)v15 + 36);
  }
  *(float *)(v15 + 16) = v21;
  sub_100034908((uint64_t *)&v168, &v167);
  int v146 = 0;
  char v147 = 0;
  if (10 * (int)a2 >= 512) {
    int v22 = 512;
  }
  else {
    int v22 = 10 * a2;
  }
  if (v22 <= 1) {
    int v23 = 1;
  }
  else {
    int v23 = v22;
  }
  int v148 = v23;
  while (1)
  {
    long long v24 = v168;
    if ((void)v168 == *((void *)&v168 + 1)) {
      break;
    }
    unsigned int v25 = *(uint64_t **)v168;
    if ((uint64_t)(*((void *)&v168 + 1) - v168) >= 9)
    {
      uint64_t v26 = 0;
      uint64_t v27 = (uint64_t)(*((void *)&v168 + 1) - v168) >> 3;
      uint64_t v28 = (void *)v168;
      do
      {
        int v29 = v28;
        v28 += v26 + 1;
        uint64_t v30 = 2 * v26;
        uint64_t v26 = (2 * v26) | 1;
        uint64_t v31 = v30 + 2;
        if (v31 < v27 && *(float *)(*v28 + 16) < *(float *)(v28[1] + 16))
        {
          ++v28;
          uint64_t v26 = v31;
        }
        void *v29 = *v28;
      }
      while (v26 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      if (v28 == (void *)(*((void *)&v24 + 1) - 8))
      {
        void *v28 = v25;
      }
      else
      {
        void *v28 = **((void **)&v24 + 1);
        **((void **)&v24 + 1) = v25;
        sub_100039198(v24, (uint64_t)(v28 + 1), (uint64_t)((uint64_t)v28 - v24 + 8) >> 3);
      }
    }
    *((void *)&v168 + 1) -= 8;
    uint64_t v32 = *v25;
    uint64_t v33 = (void **)a1[9];
    if (*v25 == **v33)
    {
      sub_100034A1C(a4, ((a4[1] - *a4) >> 5) + 1);
      for (uint64_t i = (void *)v25[1]; i[1]; uint64_t i = (void *)i[1])
      {
        uint64_t v35 = a4[1];
        unint64_t v36 = *(void **)(v35 - 24);
        unint64_t v37 = *(void *)(v35 - 16);
        if ((unint64_t)v36 >= v37)
        {
          uint64_t v39 = *(void *)(v35 - 32);
          uint64_t v40 = ((uint64_t)v36 - v39) >> 3;
          if ((unint64_t)(v40 + 1) >> 61) {
            sub_100004204();
          }
          uint64_t v41 = v37 - v39;
          uint64_t v42 = v41 >> 2;
          if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
            uint64_t v42 = v40 + 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v42;
          }
          if (v43) {
            uint64_t v44 = (char *)sub_10000421C(v35 - 16, v43);
          }
          else {
            uint64_t v44 = 0;
          }
          uint64_t v45 = &v44[8 * v40];
          *(void *)uint64_t v45 = *i;
          BOOL v38 = v45 + 8;
          size_t v47 = *(char **)(v35 - 32);
          uint64_t v46 = *(char **)(v35 - 24);
          if (v46 != v47)
          {
            do
            {
              uint64_t v48 = *((void *)v46 - 1);
              v46 -= 8;
              *((void *)v45 - 1) = v48;
              v45 -= 8;
            }
            while (v46 != v47);
            uint64_t v46 = *(char **)(v35 - 32);
          }
          *(void *)(v35 - 32) = v45;
          *(void *)(v35 - 24) = v38;
          *(void *)(v35 - 16) = &v44[8 * v43];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *unint64_t v36 = *i;
          BOOL v38 = v36 + 1;
        }
        *(void *)(v35 - 24) = v38;
      }
      uint64_t v49 = a4[1];
      *(_DWORD *)(v49 - 8) = *((_DWORD *)v25 + 4);
      if (a2 == (v49 - *a4) >> 5) {
        break;
      }
    }
    else
    {
      unint64_t v50 = (int)(v33[3 * *(int *)(v32 + 16) + 1] - v33[3 * *(int *)(v32 + 16)]);
      *(_DWORD *)v157 = 0;
      sub_100012010(v164, v50, v157);
      *(_DWORD *)v157 = 0;
      sub_100012010(v163, v50, v157);
      *(void *)v157 = 0;
      sub_100039478(&v161, v50, v157);
      int v51 = *(_DWORD *)(v32 + 16);
      uint64_t v52 = a1[9];
      if (a3)
      {
        uint64_t v53 = *(void *)(v52 + 24 * v51);
        float v54 = -100000000.0;
        if (*(void *)(v52 + 24 * v51 + 8) != v53)
        {
          unint64_t v55 = 0;
          float v56 = *((float *)__p[0] + *(unsigned int *)(v32 + 24));
          float v54 = -100000000.0;
          do
          {
            float v57 = (float)((float)(*((float *)v25 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(void *)(v53 + 8 * v55) + 24)))
                        + (float)(a5 * *(float *)(*(void *)(v53 + 8 * v55) + 32)))
                - v56;
            *((float *)v164[0] + v55) = v57;
            sub_10004ABE0();
            unsigned int v59 = sub_1000315F4(v58);
            float v60 = logf((float)((float)((float)v59 * 2.3283e-10) + 0.0) + 0.0000001);
            float v61 = v57 - logf(-v60);
            *((float *)v163[0] + v55) = v61;
            if (v61 > v54) {
              float v54 = v61;
            }
            ++v55;
            int v62 = *(_DWORD *)(v32 + 16);
            uint64_t v52 = a1[9];
            uint64_t v53 = *(void *)(v52 + 24 * v62);
          }
          while (v55 < (*(void *)(v52 + 24 * v62 + 8) - v53) >> 3);
          int v51 = *(_DWORD *)(v32 + 16);
        }
        unint64_t v63 = (double *)v161;
        if (v162 != v161)
        {
          float v64 = *((float *)v25 + 4);
          uint64_t v65 = (float *)v163[0];
          if ((unint64_t)((v162 - (unsigned char *)v161) >> 3) <= 1) {
            uint64_t v5 = 1;
          }
          else {
            uint64_t v5 = (v162 - (unsigned char *)v161) >> 3;
          }
          do
          {
            float v66 = *v65++;
            float v67 = expf(v66 - v54);
            float v68 = (float)(v64 - v66) + log1pf(-v67);
            float v69 = v64 - fmaxf(v68, 0.0);
            float v70 = expf(-fabsf(v68));
            *v63++ = (float)(v69 - log1pf(v70));
            --v5;
          }
          while (v5);
        }
      }
      uint64_t v71 = *(void *)(v52 + 24 * v51);
      if (*(void *)(v52 + 24 * v51 + 8) != v71)
      {
        unint64_t v72 = 0;
        do
        {
          uint64_t v73 = *(void *)(v71 + 8 * v72);
          uint64_t v74 = sub_100034798(&v171);
          *(void *)v157 = v74;
          *(void *)uint64_t v74 = v73;
          if (a3)
          {
            *(_DWORD *)(v74 + 2sub_10002F6CC(&a9, 0) = *((_DWORD *)v164[0] + v72);
            float v75 = *((double *)v161 + v72);
          }
          else
          {
            *(float *)(v74 + 2sub_10002F6CC(&a9, 0) = *(float *)(v73 + 32) + *((float *)v25 + 5);
            float v75 = *(float *)(v73 + 36) + *((float *)v25 + 5);
          }
          *(float *)(v74 + 16) = v75;
          *(void *)(v74 + 8) = v25;
          sub_100034908((uint64_t *)&v168, v157);
          ++v72;
          uint64_t v71 = *(void *)(a1[9] + 24 * *(int *)(v32 + 16));
        }
        while (v72 < (*(void *)(a1[9] + 24 * *(int *)(v32 + 16) + 8) - v71) >> 3);
      }
      if (!(((unint64_t)(v173[1] + v173[2] * v174) < 0x3B9ACA00) | v147 & 1))
      {
        if ((int)sub_10004A6A8() <= 1)
        {
          v157[0] = 0;
          int64_t v76 = sub_100018688(&std::cerr, (uint64_t)"unigram_model.cc", 16);
          sub_100018688(v76, (uint64_t)"(", 1);
          long long v77 = (void *)std::ostream::operator<<();
          uint64_t v78 = sub_100018688(v77, (uint64_t)") ", 2);
          v79 = sub_100018688(v78, (uint64_t)"LOG(", 4);
          size_t v80 = sub_100018688(v79, (uint64_t)"WARNING", 7);
          uint64_t v81 = sub_100018688(v80, (uint64_t)") ", 2);
          sub_100018688(v81, (uint64_t)"Allocator size exceeds ", 23);
          int v82 = (void *)std::ostream::operator<<();
          sub_100018688(v82, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sub_1000176C4(v157);
        }
        char v147 = 1;
      }
      uint64_t v83 = *((void *)&v168 + 1);
      uint64_t v84 = (void *)v168;
      if (*((void *)&v168 + 1) - (void)v168 >= 0x13879uLL)
      {
        long long v159 = 0uLL;
        uint64_t v160 = 0;
        memset(&v157[8], 0, 40);
        *(void *)v157 = off_1000AD298;
        uint64_t v158 = 512;
        *(_OWORD *)v154 = 0u;
        long long v155 = 0u;
        float v156 = 1.0;
        ++v146;
        if ((int)sub_10004A6A8() <= 1)
        {
          LOBYTE(v17sub_10002F6CC(&a9, 0) = 0;
          unint64_t v85 = sub_100018688(&std::cerr, (uint64_t)"unigram_model.cc", 16);
          sub_100018688(v85, (uint64_t)"(", 1);
          int v86 = (void *)std::ostream::operator<<();
          v87 = sub_100018688(v86, (uint64_t)") ", 2);
          std::string::size_type v88 = sub_100018688(v87, (uint64_t)"LOG(", 4);
          v89 = sub_100018688(v88, (uint64_t)"WARNING", 7);
          long long v90 = sub_100018688(v89, (uint64_t)") ", 2);
          sub_100018688(v90, (uint64_t)"Too big agenda size ", 20);
          uint64_t v91 = (void *)std::ostream::operator<<();
          sub_100018688(v91, (uint64_t)". Shrinking (round ", 19);
          v92 = (void *)std::ostream::operator<<();
          sub_100018688(v92, (uint64_t)") down to ", 10);
          v93 = (void *)std::ostream::operator<<();
          sub_100018688(v93, (uint64_t)".", 1);
          sub_1000176C4(&v170);
        }
        if (10 * (int)a2 >= 1)
        {
          int v94 = 0;
          while (1)
          {
            v149 = (void *)v168;
            uint64_t v150 = v83;
            unint64_t v95 = *(void *)v168;
            uint64_t v153 = 0;
            uint64_t v170 = 0;
            if (!v95) {
              goto LABEL_181;
            }
            v96 = &v170;
            unint64_t v97 = (unint64_t)v154[1];
            do
            {
              unint64_t v98 = 0x9DDFEA08EB382D69 * (((8 * v95) + 8) ^ HIDWORD(v95));
              unint64_t v99 = 0x9DDFEA08EB382D69 * (HIDWORD(v95) ^ (v98 >> 47) ^ v98);
              unint64_t v100 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
              if (v97)
              {
                uint8x8_t v101 = (uint8x8_t)vcnt_s8((int8x8_t)v97);
                v101.i16[0] = vaddlv_u8(v101);
                if (v101.u32[0] > 1uLL)
                {
                  unint64_t v102 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
                  if (v100 >= v97) {
                    unint64_t v102 = v100 % v97;
                  }
                }
                else
                {
                  unint64_t v102 = v100 & (v97 - 1);
                }
                uint64_t v103 = (void *)*((void *)v154[0] + v102);
                if (v103)
                {
                  for (j = (void *)*v103; j; j = (void *)*j)
                  {
                    unint64_t v105 = j[1];
                    if (v105 == v100)
                    {
                      if (j[2] == v95)
                      {
                        uint64_t *v96 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v101.u32[0] > 1uLL)
                      {
                        if (v105 >= v97) {
                          v105 %= v97;
                        }
                      }
                      else
                      {
                        v105 &= v97 - 1;
                      }
                      if (v105 != v102) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v106 = sub_100034798(v157);
              long long v107 = *(_OWORD *)v95;
              *(void *)(v106 + 16) = *(void *)(v95 + 16);
              *(_OWORD *)uint64_t v106 = v107;
              uint64_t *v96 = v106;
              unint64_t v97 = (unint64_t)v154[1];
              if (v154[1])
              {
                uint8x8_t v108 = (uint8x8_t)vcnt_s8((int8x8_t)v154[1]);
                v108.i16[0] = vaddlv_u8(v108);
                if (v108.u32[0] > 1uLL)
                {
                  uint64_t v5 = v100;
                  if ((void *)v100 >= v154[1]) {
                    uint64_t v5 = v100 % (unint64_t)v154[1];
                  }
                }
                else
                {
                  uint64_t v5 = ((unint64_t)v154[1] - 1) & v100;
                }
                v109 = (void *)*((void *)v154[0] + v5);
                if (v109)
                {
                  for (k = (void *)*v109; k; k = (void *)*k)
                  {
                    unint64_t v111 = k[1];
                    if (v111 == v100)
                    {
                      if (k[2] == v95) {
                        goto LABEL_170;
                      }
                    }
                    else
                    {
                      if (v108.u32[0] > 1uLL)
                      {
                        if ((void *)v111 >= v154[1]) {
                          v111 %= (unint64_t)v154[1];
                        }
                      }
                      else
                      {
                        v111 &= (unint64_t)v154[1] - 1;
                      }
                      if (v111 != v5) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v112 = operator new(0x20uLL);
              *uint64_t v112 = 0;
              v112[1] = v100;
              v112[2] = v95;
              v112[3] = v106;
              float v113 = (float)(unint64_t)(*((void *)&v155 + 1) + 1);
              if (!v97 || (float)(v156 * (float)v97) < v113)
              {
                BOOL v114 = (v97 & (v97 - 1)) == 0;
                if (v97 < 3) {
                  BOOL v114 = 0;
                }
                unint64_t v115 = (2 * v97) | !v114;
                unint64_t v116 = vcvtps_u32_f32(v113 / v156);
                if (v115 <= v116) {
                  int8x8_t prime = (int8x8_t)v116;
                }
                else {
                  int8x8_t prime = (int8x8_t)v115;
                }
                if (*(void *)&prime == 1)
                {
                  int8x8_t prime = (int8x8_t)2;
                }
                else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                {
                  int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                  unint64_t v97 = (unint64_t)v154[1];
                }
                if (*(void *)&prime <= v97)
                {
                  if (*(void *)&prime < v97)
                  {
                    unint64_t v124 = vcvtps_u32_f32((float)*((unint64_t *)&v155 + 1) / v156);
                    if (v97 < 3
                      || (uint8x8_t v125 = (uint8x8_t)vcnt_s8((int8x8_t)v97), v125.i16[0] = vaddlv_u8(v125), v125.u32[0] > 1uLL))
                    {
                      unint64_t v124 = std::__next_prime(v124);
                    }
                    else
                    {
                      uint64_t v126 = 1 << -(char)__clz(v124 - 1);
                      if (v124 >= 2) {
                        unint64_t v124 = v126;
                      }
                    }
                    if (*(void *)&prime <= v124) {
                      int8x8_t prime = (int8x8_t)v124;
                    }
                    if (*(void *)&prime >= v97)
                    {
                      unint64_t v97 = (unint64_t)v154[1];
                    }
                    else
                    {
                      if (prime) {
                        goto LABEL_126;
                      }
                      v132 = v154[0];
                      v154[0] = 0;
                      if (v132) {
                        operator delete(v132);
                      }
                      unint64_t v97 = 0;
                      v154[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(void *)&prime >> 61) {
                    sub_100004110();
                  }
                  v118 = operator new(8 * *(void *)&prime);
                  char v119 = v154[0];
                  v154[0] = v118;
                  if (v119) {
                    operator delete(v119);
                  }
                  uint64_t v120 = 0;
                  v154[1] = (void *)prime;
                  do
                    *((void *)v154[0] + v120++) = 0;
                  while (*(void *)&prime != v120);
                  v121 = (void **)v155;
                  if ((void)v155)
                  {
                    unint64_t v122 = *(void *)(v155 + 8);
                    uint8x8_t v123 = (uint8x8_t)vcnt_s8(prime);
                    v123.i16[0] = vaddlv_u8(v123);
                    if (v123.u32[0] > 1uLL)
                    {
                      if (v122 >= *(void *)&prime) {
                        v122 %= *(void *)&prime;
                      }
                    }
                    else
                    {
                      v122 &= *(void *)&prime - 1;
                    }
                    *((void *)v154[0] + v122) = &v155;
                    for (m = *v121; m; unint64_t v122 = v128)
                    {
                      unint64_t v128 = m[1];
                      if (v123.u32[0] > 1uLL)
                      {
                        if (v128 >= *(void *)&prime) {
                          v128 %= *(void *)&prime;
                        }
                      }
                      else
                      {
                        v128 &= *(void *)&prime - 1;
                      }
                      if (v128 != v122)
                      {
                        if (!*((void *)v154[0] + v128))
                        {
                          *((void *)v154[0] + v128) = v121;
                          goto LABEL_151;
                        }
                        *v121 = (void *)*m;
                        void *m = **((void **)v154[0] + v128);
                        **((void **)v154[0] + v128) = m;
                        m = v121;
                      }
                      unint64_t v128 = v122;
LABEL_151:
                      v121 = (void **)m;
                      m = (void *)*m;
                    }
                  }
                  unint64_t v97 = (unint64_t)prime;
                }
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v100 >= v97) {
                    uint64_t v5 = v100 % v97;
                  }
                  else {
                    uint64_t v5 = v100;
                  }
                }
                else
                {
                  uint64_t v5 = (v97 - 1) & v100;
                }
              }
              v129 = v154[0];
              v130 = (void *)*((void *)v154[0] + v5);
              if (v130)
              {
                *uint64_t v112 = *v130;
LABEL_168:
                void *v130 = v112;
                goto LABEL_169;
              }
              *uint64_t v112 = v155;
              *(void *)&long long v155 = v112;
              v129[v5] = &v155;
              if (*v112)
              {
                unint64_t v131 = *(void *)(*v112 + 8);
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v131 >= v97) {
                    v131 %= v97;
                  }
                }
                else
                {
                  v131 &= v97 - 1;
                }
                v130 = (char *)v154[0] + 8 * v131;
                goto LABEL_168;
              }
LABEL_169:
              ++*((void *)&v155 + 1);
LABEL_170:
              unint64_t v95 = *(void *)(v95 + 8);
              v96 = (uint64_t *)(v106 + 8);
            }
            while (v95);
LABEL_181:
            uint64_t v153 = v170;
            sub_100034908((uint64_t *)&v159, &v153);
            if (v150 - (uint64_t)v149 >= 9)
            {
              uint64_t v133 = 0;
              uint64_t v134 = (v150 - (uint64_t)v149) >> 3;
              uint64_t v135 = *v149;
              v136 = v149;
              do
              {
                v137 = v136;
                v136 += v133 + 1;
                uint64_t v138 = 2 * v133;
                uint64_t v133 = (2 * v133) | 1;
                uint64_t v139 = v138 + 2;
                if (v139 < v134 && *(float *)(*v136 + 16) < *(float *)(v136[1] + 16))
                {
                  ++v136;
                  uint64_t v133 = v139;
                }
                void *v137 = *v136;
              }
              while (v133 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
              v140 = (void *)(v150 - 8);
              if (v136 == (void *)(v150 - 8))
              {
                void *v136 = v135;
              }
              else
              {
                void *v136 = *v140;
                void *v140 = v135;
                sub_100039198((uint64_t)v149, (uint64_t)(v136 + 1), v136 + 1 - v149);
              }
            }
            uint64_t v83 = *((void *)&v168 + 1) - 8;
            *((void *)&v168 + 1) -= 8;
            if (++v94 == v148)
            {
              uint64_t v84 = (void *)v168;
              break;
            }
          }
        }
        if (v84)
        {
          *((void *)&v168 + 1) = v84;
          operator delete(v84);
        }
        long long v168 = v159;
        uint64_t v169 = v160;
        long long v141 = v172;
        long long v172 = *(_OWORD *)&v157[8];
        *(_OWORD *)&v157[8] = v141;
        uint64_t v142 = *(void *)&v157[24];
        uint64_t v143 = v174;
        *(void *)&v157[24] = v173[0];
        long long v144 = *(_OWORD *)&v173[1];
        *(_OWORD *)&v173[1] = *(_OWORD *)&v157[32];
        *(_OWORD *)&v157[32] = v144;
        v173[0] = v142;
        uint64_t v174 = v158;
        uint64_t v158 = v143;
        sub_100034AB8((uint64_t)v154);
        sub_100034B04(v157);
      }
      if (v161)
      {
        v162 = v161;
        operator delete(v161);
      }
      if (v163[0])
      {
        v163[1] = v163[0];
        operator delete(v163[0]);
      }
      if (v164[0])
      {
        v164[1] = v164[0];
        operator delete(v164[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v168) {
    operator delete((void *)v168);
  }
  sub_100034B04(&v171);
}

void sub_100034628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  sub_100034AB8((uint64_t)&a21);
  sub_100034B04(&a27);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  unsigned int v59 = a57;
  sub_1000184DC((void ***)&a27);
  if (v59) {
    operator delete(v59);
  }
  sub_100034B04((void *)(v57 - 224));
  _Unwind_Resume(a1);
}

uint64_t sub_100034798(void *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[4];
  if (v4 >= v3)
  {
    unint64_t v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  uint64_t v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    operator new[]();
  }
  uint64_t result = *(void *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t sub_100034908(uint64_t *a1, void *a2)
{
  uint64_t v5 = (void *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (void *)*a1;
    uint64_t v8 = ((uint64_t)v5 - *a1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_100004204();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_100004110();
      }
      float v12 = (char *)operator new(8 * v11);
    }
    else
    {
      float v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = *a2;
    uint64_t v6 = (uint64_t)(v13 + 8);
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = (void *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    void *v5 = *a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
  uint64_t v15 = *a1;
  uint64_t v16 = (v6 - *a1) >> 3;
  return sub_100039198(v15, v6, v16);
}

void sub_100034A1C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = a1[1];
        do
        {
          unint64_t v9 = *(void **)(v7 - 32);
          v7 -= 32;
          uint64_t v8 = v9;
          if (v9)
          {
            *(void *)(v3 - 24) = v8;
            operator delete(v8);
          }
          uint64_t v3 = v7;
        }
        while (v7 != v6);
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_1000391F4(a1, v5);
  }
}

uint64_t sub_100034AB8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_100034B04(void *a1)
{
  *a1 = off_1000AD298;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        operator delete[]();
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100034B94(void *a1@<X0>, void **a2@<X8>, float a3@<S0>)
{
  if ((int)(((a1[4] - a1[3]) >> 3) - 1) <= 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    unint64_t v6 = a1[16] + a1[17] * a1[18];
    LODWORD(v49[0]) = 0;
    sub_100012010(__p, v6, v49);
    sub_100032F70(a1, (uint64_t *)v49, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v49;
    uint64_t v52 = v50;
    sub_10004ABE0();
    uint64_t v47 = v7;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v49[0] = 0;
    v49[1] = 0;
    unint64_t v50 = 0;
    int v8 = ((a1[4] - a1[3]) >> 3) - 1;
    uint64_t v9 = **(void **)(a1[6] + 24 * (v8 & ~(v8 >> 31)));
    float v10 = *((float *)__p[0] + *(unsigned int *)(v9 + 24));
    do
    {
      unint64_t v11 = (float *)v49[0];
      v49[1] = v49[0];
      float v12 = (uint64_t *)(a1[9] + 24 * *(unsigned int *)(v9 + 16));
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      uint64_t v15 = (float *)v49[0];
      if (*v12 != v13)
      {
        do
        {
          float v16 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(void *)v14 + 24))
                                  + (float)(a3 * *(float *)(*(void *)v14 + 32)))
                          - v10));
          if (v11 >= v50)
          {
            unint64_t v17 = (float *)v49[0];
            uint64_t v18 = ((char *)v11 - (char *)v49[0]) >> 2;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              sub_100004204();
            }
            uint64_t v20 = (char *)v50 - (char *)v49[0];
            if (((char *)v50 - (char *)v49[0]) >> 1 > v19) {
              unint64_t v19 = v20 >> 1;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              int v22 = (char *)sub_10000A17C((uint64_t)&v50, v21);
              unint64_t v17 = (float *)v49[0];
              unint64_t v11 = (float *)v49[1];
            }
            else
            {
              int v22 = 0;
            }
            int v23 = (float *)&v22[4 * v18];
            *int v23 = v16;
            long long v24 = v23 + 1;
            while (v11 != v17)
            {
              int v25 = *((_DWORD *)v11-- - 1);
              *((_DWORD *)v23-- - 1) = v25;
            }
            v49[0] = v23;
            v49[1] = v24;
            unint64_t v50 = (float *)&v22[4 * v21];
            if (v17) {
              operator delete(v17);
            }
            unint64_t v11 = (float *)v24;
          }
          else
          {
            *v11++ = v16;
          }
          v49[1] = v11;
          v14 += 8;
        }
        while (v14 != v13);
        uint64_t v15 = (float *)v49[0];
      }
      sub_10003121C((uint64_t)v48, v15, v11);
      unsigned int v26 = *(_DWORD *)(v9 + 16);
      uint64_t v27 = a1[9];
      uint64_t v9 = *(void *)(*(void *)(v27 + 24 * v26) + 8 * (int)sub_10003153C((uint64_t)v48, v47, (double **)v48));
      uint64_t v28 = **(void **)a1[9];
      if (v9 != v28)
      {
        float v10 = *((float *)__p[0] + *(unsigned int *)(v9 + 24));
        uint64_t v30 = a2[1];
        unint64_t v29 = (unint64_t)a2[2];
        if ((unint64_t)v30 >= v29)
        {
          uint64_t v32 = ((char *)v30 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v32 + 1) >> 61) {
            sub_100004204();
          }
          uint64_t v33 = v29 - (void)*a2;
          uint64_t v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
            uint64_t v34 = v32 + 1;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v34;
          }
          if (v35) {
            unint64_t v36 = (char *)sub_10000421C((uint64_t)(a2 + 2), v35);
          }
          else {
            unint64_t v36 = 0;
          }
          unint64_t v37 = &v36[8 * v32];
          *(void *)unint64_t v37 = v9;
          uint64_t v31 = v37 + 8;
          uint64_t v39 = (char *)*a2;
          BOOL v38 = (char *)a2[1];
          if (v38 != *a2)
          {
            do
            {
              uint64_t v40 = *((void *)v38 - 1);
              v38 -= 8;
              *((void *)v37 - 1) = v40;
              v37 -= 8;
            }
            while (v38 != v39);
            BOOL v38 = (char *)*a2;
          }
          *a2 = v37;
          a2[1] = v31;
          a2[2] = &v36[8 * v35];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          void *v30 = v9;
          uint64_t v31 = v30 + 1;
        }
        a2[1] = v31;
      }
      if (v48[0])
      {
        v48[1] = v48[0];
        operator delete(v48[0]);
      }
    }
    while (v9 != v28);
    unint64_t v42 = (unint64_t)*a2;
    uint64_t v41 = (char *)a2[1];
    if (*a2 != v41)
    {
      unint64_t v43 = v41 - 8;
      if ((unint64_t)v43 > v42)
      {
        unint64_t v44 = v42 + 8;
        do
        {
          uint64_t v45 = *(void *)(v44 - 8);
          *(void *)(v44 - 8) = *(void *)v43;
          *(void *)unint64_t v43 = v45;
          v43 -= 8;
          BOOL v46 = v44 >= (unint64_t)v43;
          v44 += 8;
        }
        while (!v46);
      }
    }
    if (v49[0])
    {
      v49[1] = v49[0];
      operator delete(v49[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_100034F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100034FB8(uint64_t a1, void *a2)
{
  float v4 = *(float *)(a1 + 104);
  uint64_t v5 = ((a2[4] - a2[3]) >> 3) - 1;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  sub_10001C08C(&__p, *(int *)(a1 + 92) + 1);
  uint64_t v42 = v5;
  if ((int)v5 < 1) {
    goto LABEL_40;
  }
  uint64_t v43 = 0;
  uint64_t v8 = 0;
  float v9 = v4 + -10.0;
  uint64_t v41 = v6 + (int)v7;
  do
  {
    float v10 = *(unsigned char **)(a2[3] + 8 * v8);
    unint64_t v11 = (char *)__p;
    unint64_t v12 = (v46 - (unsigned char *)__p) >> 4;
    uint64_t v13 = *(_DWORD **)(a1 + 40);
    uint64_t v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (void)v10) << 32)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = v10[v15];
        uint64_t v18 = v14 ^ v17;
        unsigned int v19 = v13[v18];
        if ((v19 & 0x800000FF) != v17) {
          break;
        }
        uint64_t v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            uint64_t v20 = &v11[16 * v16];
            *(_DWORD *)uint64_t v20 = v13[v14] & 0x7FFFFFFF;
            *((void *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while (v41 - v10 != v15);
    }
    else
    {
      unsigned int v21 = *v10;
      if (*v10)
      {
        unint64_t v16 = 0;
        uint64_t v22 = 1;
        do
        {
          uint64_t v23 = v14 ^ v21;
          unsigned int v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21) {
            break;
          }
          uint64_t v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              int v25 = &v11[16 * v16];
              *(_DWORD *)int v25 = v13[v14] & 0x7FFFFFFF;
              *((void *)v25 + 1) = v22;
            }
            ++v16;
          }
          unsigned int v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        unint64_t v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      char v44 = 1;
      unsigned int v26 = sub_100018688(&std::cerr, (uint64_t)"unigram_model.cc", 16);
      sub_100018688(v26, (uint64_t)"(", 1);
      uint64_t v27 = (void *)std::ostream::operator<<();
      uint64_t v28 = sub_100018688(v27, (uint64_t)") [", 3);
      unint64_t v29 = sub_100018688(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      sub_100018688(v29, (uint64_t)"] ", 2);
      sub_1000176C4(&v44);
    }
    if (!v16)
    {
LABEL_38:
      uint64_t v40 = sub_100032A18((uint64_t)a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *(_DWORD *)(a1 + 88);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    uint64_t v30 = 0;
    BOOL v31 = 0;
    do
    {
      while (1)
      {
        uint64_t v32 = (unint64_t *)(a2[3] + v43);
        int v33 = -1;
        do
        {
          unint64_t v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((void *)__p + 2 * v30 + 1)]);
        uint64_t v35 = *((unsigned int *)__p + 4 * v30);
        if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), v35)) {
          break;
        }
        uint64_t v36 = v8;
        uint64_t v37 = sub_100032A18((uint64_t)a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v35)) {
          double v38 = (float)(*(float *)(a1 + 108) * (float)v33) + -0.1;
        }
        else {
          double v38 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v35);
        }
        float v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          BOOL v31 = *(_DWORD *)(v37 + 20) == 1;
          uint64_t v8 = v36;
          break;
        }
        ++v30;
        BOOL v31 = 1;
        uint64_t v8 = v36;
        if (v30 == v16) {
          goto LABEL_39;
        }
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31) {
      goto LABEL_38;
    }
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    BOOL v46 = __p;
    operator delete(__p);
  }
}

void sub_10003538C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000353C0(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&__p);
  unint64_t v12 = __p;
  sub_10004CF1C((uint64_t *)&__p);
  if (v12)
  {
    sub_10004D138(a6, a1 + 96);
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    sub_1000355D8(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    uint64_t v14 = (unsigned int *)__p;
    uint64_t v15 = v22;
    if (__p != v22)
    {
      do
      {
        uint64_t v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, v16);
          v20[1] = v17;
          unint64_t v18 = a5[1];
          if (v18 >= a5[2])
          {
            uint64_t v19 = sub_1000317DC(a5, (uint64_t)v20);
          }
          else
          {
            sub_1000318EC(a5 + 16, (unsigned char *)a5[1], (uint64_t)v20);
            uint64_t v19 = v18 + 24;
            a5[1] = v18 + 24;
          }
          a5[1] = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_10004D138(a6, a1 + 96);
    if (__p)
    {
      uint64_t v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_1000355A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000355D8(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  if (a4 != -1) {
    a5 = a4;
  }
  sub_10001C08C(a6, a5);
  unint64_t v12 = sub_1000383A4(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  sub_1000386AC((uint64_t)a6, v12);
}

void sub_100035658(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100035674(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&__p);
  unint64_t v12 = __p;
  sub_10004CF1C((uint64_t *)&__p);
  if (v12)
  {
    sub_10004D138(a6, a1 + 96);
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    sub_1000355D8(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    uint64_t v14 = (unsigned int *)__p;
    uint64_t v15 = v29;
    if (__p != v29)
    {
      do
      {
        uint64_t v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v16) & 1) == 0)
        {
          unint64_t v18 = *(_DWORD **)(a5 + 8);
          unint64_t v17 = *(void *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            uint64_t v20 = *(_DWORD **)a5;
            uint64_t v21 = ((uint64_t)v18 - *(void *)a5) >> 2;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62) {
              sub_100004204();
            }
            uint64_t v23 = v17 - (void)v20;
            if (v23 >> 1 > v22) {
              unint64_t v22 = v23 >> 1;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              int v25 = (char *)sub_10000A17C(a5 + 16, v24);
              uint64_t v20 = *(_DWORD **)a5;
              unint64_t v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              int v25 = 0;
            }
            unsigned int v26 = &v25[4 * v21];
            *(_DWORD *)unsigned int v26 = v16;
            uint64_t v19 = v26 + 4;
            while (v18 != v20)
            {
              int v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(void *)a5 = v26;
            *(void *)(a5 + 8) = v19;
            *(void *)(a5 + 16) = &v25[4 * v24];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            *unint64_t v18 = v16;
            uint64_t v19 = v18 + 1;
          }
          *(void *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_10004D138(a6, a1 + 96);
    if (__p)
    {
      unint64_t v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_1000358AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000358D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100035A38(a1);
  *(void *)(v4 + 104) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = off_1000AD150;
  *(void *)(v4 + 8) = a2 + 16;
  sub_10001564C(v4);
  unint64_t v5 = 0;
  *(void *)(a1 + 104) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)))
  {
    if ((*(unsigned int (**)(void, unint64_t))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), v5))
    {
      float v6 = (*(float (**)(void, unint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v5);
      if (v6 >= *(float *)(a1 + 104)) {
        float v6 = *(float *)(a1 + 104);
      }
      *(float *)(a1 + 104) = v6;
      float v7 = (*(float (**)(void, unint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v5);
      if (*(float *)(a1 + 108) >= v7) {
        float v7 = *(float *)(a1 + 108);
      }
      *(float *)(a1 + 108) = v7;
    }
    ++v5;
  }
  return a1;
}

void sub_100035A18(_Unwind_Exception *a1)
{
  sub_100015048(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100035A38(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1000ACB20;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = off_1000ACC30;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = off_1000ACC30;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_10002F6CC(&a9, 0) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_10004CF14((void *)(a1 + 96));
  return a1;
}

void sub_100035ADC(_Unwind_Exception *a1)
{
  sub_1000140FC(v3);
  sub_1000140FC(v2);
  unint64_t v5 = *v1;
  void *v1 = 0;
  if (v5) {
    sub_10001860C((uint64_t)v1, v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100035B10(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7 = a4 > 7;
  if (a4 <= 7) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = a4 - 8;
  }
  if (v7) {
    float v9 = (char *)(a3 + 2);
  }
  else {
    float v9 = "";
  }
  uint64_t v10 = sub_100014160(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  unint64_t v11 = (_DWORD *)(v10 + 104);
  *(void *)uint64_t v10 = off_1000AD150;
  *(_DWORD *)(v10 + 108) = 0;
  unint64_t v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  int v13 = (uint64_t *)(v10 + 96);
  sub_10004D138(&v17, v10 + 96);
  uint64_t v14 = v17;
  sub_10004CF1C(&v17);
  if (!v14)
  {
    sub_100035C8C(a3, a4, v11, &v17);
    sub_10004D13C(v13, &v17);
    sub_10004CF1C(&v17);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v17, a1);
    uint64_t v15 = v17;
    sub_10004CF1C(&v17);
    if (!v15)
    {
      sub_100035C8C(a3 + 1, a4 - 4, v12, &v17);
      sub_10004D13C(v13, &v17);
      sub_10004CF1C(&v17);
    }
  }
  return a1;
}

void sub_100035C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10004CF1C((uint64_t *)va);
  sub_100015048(v2);
  _Unwind_Resume(a1);
}

void *sub_100035C8C@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    float v6 = (void *)sub_10001752C((uint64_t)v8);
    sub_100018688(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_100018688(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v8, (uint64_t)") [", 3);
    sub_100018688(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_100018688(v8, (uint64_t)"] ", 2);
    sub_100014DB8(&v7, (uint64_t)a4);
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)std::ios::~ios();
  }
  else
  {
    *a3 = *a1;
    return sub_10004CF14(a4);
  }
}

void sub_100035E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100035E94(void *a1)
{
  sub_100015048(a1);
  operator delete();
}

void sub_100035ECC(_DWORD *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (a1[28])
  {
    (*(void (**)(uint64_t (***__return_ptr)(), _DWORD *))(*(void *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sub_10004CF1C((uint64_t *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sub_10004CF1C((uint64_t *)&v25);
    if (!a3) {
      goto LABEL_4;
    }
    int v25 = off_1000AD130;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v31 = 0;
    uint64_t v32 = off_1000AD268;
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v35 = 0;
    uint64_t v36 = 1024;
    sub_100032530((uint64_t)&v25, a2, a3);
    sub_100034FB8((uint64_t)a1, &v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_100032C40(&v25, (uint64_t)&v23);
    unint64_t v8 = v23;
    char v9 = v24;
    if (v23 != v24)
    {
      uint64_t v10 = a4 + 2;
      unint64_t v11 = (char *)a4[1];
      do
      {
        uint64_t v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_100004204();
          }
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14) {
            unint64_t v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555) {
            unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v15 = v14;
          }
          uint64_t v16 = (char *)sub_10000D200((uint64_t)(a4 + 2), v15);
          unint64_t v18 = &v16[24 * v13];
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          uint64_t v20 = (char *)*a4;
          uint64_t v19 = (char *)a4[1];
          uint64_t v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              long long v22 = *(_OWORD *)(v19 - 24);
              *((void *)v21 - 1) = *((void *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            uint64_t v19 = (char *)*a4;
          }
          unint64_t v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      unint64_t v8 = v23;
    }
    if (v8)
    {
      unint64_t v24 = v8;
      operator delete(v8);
    }
    sub_10003214C((uint64_t)&v25);
  }
  else
  {
    sub_1000361DC((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_100036194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  unint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sub_10003214C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1000361DC(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 16))(&v67);
  if ((void)v67)
  {
    sub_10004CF1C((uint64_t *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_10004CF1C((uint64_t *)&v67);
  if (!a3) {
    goto LABEL_3;
  }
  float v8 = *(float *)(a1 + 104);
  uint64_t v9 = (uint64_t)&_mh_execute_header + (a3 << 32);
  uint64_t v66 = a2;
  if (v9)
  {
    if (v9 < 0) {
      sub_100004204();
    }
    uint64_t v10 = v9 >> 32;
    uint64_t v11 = 3 * v10;
    uint64_t v12 = (float *)operator new(12 * v10);
    uint64_t v13 = v12;
    do
    {
      *(void *)uint64_t v13 = 0xFFFFFFFFLL;
      v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  else
  {
    uint64_t v12 = 0;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    uint64_t v65 = a4;
    int v14 = 0;
    float v15 = v8 + -10.0;
    unint64_t v16 = (int)a3;
    int v62 = (char *)(v12 + 5);
    unint64_t v63 = a3;
    float v64 = v12;
    unint64_t v61 = (int)a3;
    do
    {
      float v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_1000A0F64[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4]) {
        int v18 = asc_1000A0F64[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      }
      else {
        int v18 = a3 - v14;
      }
      if (v16 <= v14) {
        goto LABEL_31;
      }
      uint64_t v19 = 0;
      char v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = a2 + v14;
      unint64_t v23 = v16 - v14;
      unint64_t v24 = (int *)&v62[12 * v14];
      do
      {
        uint64_t v25 = *(void *)(a1 + 40);
        int v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        unsigned int v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26) {
          break;
        }
        if ((v27 & 0x100) != 0)
        {
          uint64_t v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v28))
            {
              double v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              double v29 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v28);
            }
            double v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              float v31 = v30;
              *((float *)v24 - 1) = v31;
              int *v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      uint64_t v12 = v64;
      a2 = v66;
      unint64_t v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        uint64_t v32 = &v12[3 * v18 + 3 * v14];
        int v34 = *((_DWORD *)v32 + 2);
        long long v33 = (int *)(v32 + 2);
        float v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          int *v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    uint64_t v37 = 0;
    v65[2] = 0;
    double v38 = v65 + 2;
    *uint64_t v65 = 0;
    v65[1] = 0;
    unsigned int v39 = a3;
    do
    {
      uint64_t v40 = &v12[3 * v39];
      uint64_t v42 = (unsigned int *)(v40 + 2);
      unint64_t v41 = *((int *)v40 + 2);
      if (v63 < v41) {
        sub_10002EE3C("string_view::substr");
      }
      int v43 = v39 - v41;
      uint64_t v44 = v66 + v41;
      if (v63 - v41 >= v43) {
        unint64_t v45 = v43;
      }
      else {
        unint64_t v45 = v63 - v41;
      }
      if ((unint64_t)v37 >= *v38)
      {
        unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        unint64_t v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100004204();
        }
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48) {
          unint64_t v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555) {
          unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v49 = v48;
        }
        unint64_t v50 = (char *)sub_10000D200((uint64_t)v38, v49);
        uint64_t v52 = &v50[24 * v47];
        *(void *)uint64_t v52 = v44;
        *((void *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        BOOL v46 = (char **)v65;
        float v54 = (char *)*v65;
        uint64_t v53 = (char *)v65[1];
        unint64_t v55 = v52;
        if (v53 == (char *)*v65)
        {
          uint64_t v12 = v64;
        }
        else
        {
          uint64_t v12 = v64;
          do
          {
            long long v56 = *(_OWORD *)(v53 - 24);
            *((void *)v55 - 1) = *((void *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          uint64_t v53 = (char *)*v65;
        }
        uint64_t v37 = v52 + 24;
        *uint64_t v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)uint64_t v37 = v44;
        *((void *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        uint64_t v12 = v64;
        BOOL v46 = (char **)v65;
      }
      v46[1] = v37;
      unsigned int v39 = *v42;
    }
    while ((int)*v42 > 0);
    uint64_t v57 = (long long *)*v46;
    if (*v46 != v37)
    {
      for (uint64_t i = v37 - 24; v57 < (long long *)i; i -= 24)
      {
        long long v67 = *v57;
        long long v59 = v67;
        long long *v57 = *(_OWORD *)i;
        *(_OWORD *)uint64_t i = v59;
        int v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        uint64_t v57 = (long long *)((char *)v57 + 24);
      }
    }
  }
  if (v12) {
    operator delete(v12);
  }
}

void sub_100036718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  float v15 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003675C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(__p);
  if (__p[0])
  {
    sub_10004CF1C((uint64_t *)__p);
LABEL_3:
    memset(__p, 0, 24);
    sub_1000183D4((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(void *)&long long v38 = a5;
    BYTE8(v38) = 0;
    uint64_t v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = sub_10001830C((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    uint64_t v11 = __p[0];
    if (!__p[0]) {
      return;
    }
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sub_10004CF1C((uint64_t *)__p);
  if (!a3) {
    goto LABEL_3;
  }
  if (a4 >= 1024) {
    int v12 = 1024;
  }
  else {
    int v12 = a4;
  }
  if (v12 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 > 1)
  {
    __p[0] = off_1000AD130;
    memset(&__p[1], 0, 88);
    __p[12] = off_1000AD268;
    long long v41 = 0u;
    long long v42 = 0u;
    uint64_t v43 = 0;
    uint64_t v44 = 1024;
    sub_100032530((uint64_t)__p, a2, a3);
    sub_100034FB8(a1, __p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    int v34 = a5;
    sub_1000335AC(__p, v13, 0, (uint64_t *)&v38, 0.0);
    uint64_t v33 = *((void *)&v38 + 1);
    for (uint64_t i = v38; i != v33; i += 32)
    {
      float v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      unint64_t v16 = *(uint64_t **)i;
      float v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        int v18 = 0;
        do
        {
          uint64_t v19 = *v16;
          if (v18 >= v37)
          {
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (unsigned char *)v35) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_100004204();
            }
            if (0x5555555555555556 * ((v37 - (unsigned char *)v35) >> 3) > v21) {
              unint64_t v21 = 0x5555555555555556 * ((v37 - (unsigned char *)v35) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (unsigned char *)v35) >> 3) >= 0x555555555555555) {
              unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v22 = v21;
            }
            unint64_t v23 = (char *)sub_10000D200((uint64_t)&v37, v22);
            uint64_t v25 = &v23[24 * v20];
            *(_OWORD *)uint64_t v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            unsigned int v27 = (char *)v35;
            int v26 = v36;
            uint64_t v28 = v25;
            if (v36 != v35)
            {
              do
              {
                long long v29 = *(_OWORD *)(v26 - 24);
                *((void *)v28 - 1) = *((void *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              int v26 = (char *)v35;
            }
            int v18 = v25 + 24;
            float v35 = v28;
            uint64_t v36 = v25 + 24;
            uint64_t v37 = &v23[24 * v24];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(_OWORD *)int v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          uint64_t v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      double v30 = (float *)(i + 24);
      unint64_t v31 = v34[1];
      if (v31 >= v34[2])
      {
        uint64_t v32 = sub_100039570(v34, (long long **)&v35, v30);
      }
      else
      {
        sub_1000394FC((uint64_t)v34, (long long **)&v35, v30);
        uint64_t v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        uint64_t v36 = (char *)v35;
        operator delete(v35);
      }
    }
    float v35 = &v38;
    sub_1000184DC((void ***)&v35);
    sub_10003214C((uint64_t)__p);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)std::string __p = v38;
    std::string __p[2] = v39;
    unsigned int v39 = 0;
    long long v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    float v35 = a5;
    LOBYTE(v36) = 0;
    int v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = sub_10001830C((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v11 = (void *)v38;
    if ((void)v38)
    {
      *((void *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_100036BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  sub_1000184DC((void ***)&a12);
  sub_10003214C((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_100036C94@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  (*(void (**)(uint64_t (***__return_ptr)()))(*(void *)a1 + 16))(&v28);
  if (v28)
  {
    uint64_t result = sub_10004CF1C((uint64_t *)&v28);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  uint64_t result = sub_10004CF1C((uint64_t *)&v28);
  if (!a3) {
    goto LABEL_3;
  }
  uint64_t v28 = off_1000AD130;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v34 = 0;
  float v35 = off_1000AD268;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v38 = 0;
  uint64_t v39 = 1024;
  sub_100032530((uint64_t)&v28, a2, a3);
  sub_100034FB8(a1, &v28);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_100034B94(&v28, (void **)&v26, a5);
  uint64_t v11 = v26;
  int v12 = v27;
  if (v26 != v27)
  {
    uint64_t v13 = 0;
    int v14 = a4 + 2;
    do
    {
      uint64_t v15 = *v11;
      if ((unint64_t)v13 >= *v14)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*a4] >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100004204();
        }
        if (0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3) > v17) {
          unint64_t v17 = 0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v14 - *a4) >> 3) >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v17;
        }
        uint64_t v19 = (char *)sub_10000D200((uint64_t)(a4 + 2), v18);
        unint64_t v21 = &v19[24 * v16];
        *(_OWORD *)unint64_t v21 = *(_OWORD *)v15;
        *((_DWORD *)v21 + 4) = *(_DWORD *)(v15 + 28);
        unint64_t v23 = (char *)*a4;
        unint64_t v22 = (char *)a4[1];
        uint64_t v24 = v21;
        if (v22 != (char *)*a4)
        {
          do
          {
            long long v25 = *(_OWORD *)(v22 - 24);
            *((void *)v24 - 1) = *((void *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          unint64_t v22 = (char *)*a4;
        }
        uint64_t v13 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v15 + 28);
        v13 += 24;
      }
      a4[1] = v13;
      ++v11;
    }
    while (v11 != v12);
    uint64_t v11 = v26;
  }
  if (v11)
  {
    unsigned int v27 = v11;
    operator delete(v11);
  }
  return (uint64_t *)sub_10003214C((uint64_t)&v28);
}

void sub_100036F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_100036F64(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 16))(&v122);
  if (v122)
  {
    sub_10004CF1C((uint64_t *)&v122);
LABEL_3:
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    return;
  }
  sub_10004CF1C((uint64_t *)&v122);
  if (!a3) {
    goto LABEL_3;
  }
  uint64_t v103 = a7;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  unint64_t v136 = 0;
  unint64_t v122 = (void **)off_1000AD130;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  uint64_t v128 = 0;
  v129 = off_1000AD268;
  long long v130 = 0u;
  long long v131 = 0u;
  uint64_t v132 = 0;
  uint64_t v133 = 1024;
  sub_100032530((uint64_t)&v122, a2, a3);
  sub_100034FB8(a1, &v122);
  sub_100032F70(&v122, (uint64_t *)v121, a8);
  float v16 = *((float *)v121[0]
        + *(unsigned int *)(**(void **)(*((void *)&v125 + 1)
                                        + 24
                                        * ((((*((void *)&v124 + 1) - (void)v124) >> 3) - 1) & ~((int)(((*((void *)&v124 + 1) - (void)v124) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sub_10004A6A8() <= 2)
      {
        LOBYTE(__p[0]) = 0;
        uint64_t v34 = sub_100018688(&std::cerr, (uint64_t)"unigram_model.cc", 16);
        sub_100018688(v34, (uint64_t)"(", 1);
        float v35 = (void *)std::ostream::operator<<();
        long long v36 = sub_100018688(v35, (uint64_t)") ", 2);
        long long v37 = sub_100018688(v36, (uint64_t)"LOG(", 4);
        uint64_t v38 = sub_100018688(v37, (uint64_t)"ERROR", 5);
        uint64_t v39 = sub_100018688(v38, (uint64_t)") ", 2);
        sub_100018688(v39, (uint64_t)"include_best not supported for wor false", 40);
        sub_1000176C4(__p);
      }
      uint64_t v40 = a7;
      goto LABEL_114;
    }
    int v104 = a6;
    uint64_t v107 = a3;
    unint64_t v105 = a2;
    v118 = 0;
    char v119 = 0;
    uint64_t v120 = 0;
    sub_100032C40(&v122, (uint64_t)__p);
    unint64_t v17 = (uint64_t *)__p[0];
    unint64_t v18 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      uint64_t v19 = v119;
      do
      {
        uint64_t v20 = *v17;
        if (v19 >= (long long *)v120)
        {
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v118) >> 3);
          unint64_t v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_100004204();
          }
          if (0x5555555555555556 * ((v120 - (char *)v118) >> 3) > v22) {
            unint64_t v22 = 0x5555555555555556 * ((v120 - (char *)v118) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v120 - (char *)v118) >> 3) >= 0x555555555555555) {
            unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v23 = v22;
          }
          uint64_t v24 = (char *)sub_10000D200((uint64_t)&v120, v23);
          int v26 = &v24[24 * v21];
          *(_OWORD *)int v26 = *(_OWORD *)v20;
          *((_DWORD *)v26 + 4) = *(_DWORD *)(v20 + 28);
          uint64_t v28 = v118;
          unsigned int v27 = v119;
          long long v29 = (long long *)v26;
          if (v119 != v118)
          {
            do
            {
              long long v30 = *(long long *)((char *)v27 - 24);
              *((void *)v29 - 1) = *((void *)v27 - 1);
              *(long long *)((char *)v29 - 24) = v30;
              long long v29 = (long long *)((char *)v29 - 24);
              unsigned int v27 = (long long *)((char *)v27 - 24);
            }
            while (v27 != v28);
            unsigned int v27 = v118;
          }
          uint64_t v19 = (long long *)(v26 + 24);
          v118 = v29;
          char v119 = (long long *)(v26 + 24);
          uint64_t v120 = &v24[24 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *uint64_t v19 = *(_OWORD *)v20;
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v20 + 28);
          uint64_t v19 = (long long *)((char *)v19 + 24);
        }
        char v119 = v19;
        ++v17;
      }
      while (v17 != v18);
    }
    double v116 = 0.0;
    long long v31 = v135;
    if ((unint64_t)v135 >= v136)
    {
      uint64_t v33 = sub_1000397DC(&v134, &v118, &v116);
    }
    else
    {
      *(void *)uint64_t v135 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = 0;
      sub_1000183D4(v31, v118, v119, 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (char *)v118) >> 3));
      float v32 = v116;
      *((float *)v31 + 6) = v32;
      uint64_t v33 = (uint64_t)(v31 + 32);
    }
    a2 = v105;
    a3 = v107;
    a6 = v104;
    uint64_t v135 = (char *)v33;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v118)
    {
      char v119 = v118;
      operator delete(v118);
    }
  }
  if (a5)
  {
    sub_1000335AC(&v122, a4 + 1, 1, (uint64_t *)&v118, a8);
    if (a6)
    {
      sub_1000398F0(&v116, ((char *)v119 - (char *)v118) >> 5);
      long long v42 = v118;
      long long v41 = v119;
      if (v119 != v118)
      {
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        do
        {
          if (&v42[v43] != (long long *)(*(void *)&v116 + v44))
          {
            sub_100004254((char *)(*(void *)&v116 + v44), *(char **)&v42[v43], *((void *)&v42[v43] + 1), (uint64_t)(*((void *)&v42[v43] + 1) - *(void *)&v42[v43]) >> 3);
            long long v42 = v118;
            long long v41 = v119;
          }
          ++v45;
          v44 += 24;
          v43 += 2;
        }
        while (v45 < ((char *)v41 - (char *)v42) >> 5);
      }
      sub_100032C40(&v122, (uint64_t)__p);
      uint64_t v46 = sub_100039994(*(uint64_t *)&v116, *(uint64_t *)&v117, (uint64_t)__p);
      uint64_t v47 = (int)(-1431655765 * ((unint64_t)(v46 - *(void *)&v116) >> 3));
      if (v47 == ((char *)v119 - (char *)v118) >> 5)
      {
        unint64_t v49 = v119 - 2;
        unint64_t v48 = (void *)*((void *)v119 - 4);
        if (v48)
        {
          *((void *)v119 - 3) = v48;
          operator delete(v48);
        }
      }
      else
      {
        sub_100039A04((__n128 *)&v118[2 * v47 + 2], (__n128 *)v119, (uint64_t)&v118[2 * v47]);
        unint64_t v49 = v69;
        float v70 = v119;
        if (v119 != v69)
        {
          uint64_t v71 = v119;
          do
          {
            uint64_t v73 = (void *)*((void *)v71 - 4);
            v71 -= 2;
            unint64_t v72 = v73;
            if (v73)
            {
              *((void *)v70 - 3) = v72;
              operator delete(v72);
            }
            float v70 = v71;
          }
          while (v71 != v49);
        }
      }
      char v119 = v49;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v116;
      sub_10002EF40((void ***)__p);
    }
    uint64_t v74 = (void *)*((void *)v119 - 4);
    v109 = v119 - 2;
    float v75 = *((float *)v119 - 2);
    if (v74)
    {
      *((void *)v119 - 3) = v74;
      operator delete(v74);
    }
    char v119 = v109;
    for (uint64_t i = v118; i != v109; i += 2)
    {
      memset(__p, 0, 24);
      long long v77 = *(uint64_t **)i;
      uint64_t v78 = (uint64_t *)*((void *)i + 1);
      if (*(uint64_t **)i == v78)
      {
        float v80 = 0.0;
      }
      else
      {
        v79 = 0;
        float v80 = 0.0;
        do
        {
          uint64_t v81 = *v77;
          float v82 = *(float *)(*v77 + 32);
          if (v79 >= __p[2])
          {
            unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v79 - (char *)__p[0]) >> 3);
            unint64_t v84 = v83 + 1;
            if (v83 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_100004204();
            }
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v84) {
              unint64_t v84 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555) {
              unint64_t v85 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v85 = v84;
            }
            int v86 = (char *)sub_10000D200((uint64_t)&__p[2], v85);
            std::string::size_type v88 = &v86[24 * v83];
            *(_OWORD *)std::string::size_type v88 = *(_OWORD *)v81;
            *((_DWORD *)v88 + 4) = *(_DWORD *)(v81 + 28);
            long long v90 = (char *)__p[0];
            v89 = (char *)__p[1];
            uint64_t v91 = v88;
            if (__p[1] != __p[0])
            {
              do
              {
                long long v92 = *(_OWORD *)(v89 - 24);
                *((void *)v91 - 1) = *((void *)v89 - 1);
                *(_OWORD *)(v91 - 24) = v92;
                v91 -= 24;
                v89 -= 24;
              }
              while (v89 != v90);
              v89 = (char *)__p[0];
            }
            v79 = v88 + 24;
            __p[0] = v91;
            __p[1] = v88 + 24;
            std::string __p[2] = &v86[24 * v87];
            if (v89) {
              operator delete(v89);
            }
          }
          else
          {
            *(_OWORD *)v79 = *(_OWORD *)v81;
            *((_DWORD *)v79 + 4) = *(_DWORD *)(v81 + 28);
            v79 += 24;
          }
          __p[1] = v79;
          float v80 = v80 + (float)(a8 * v82);
          ++v77;
        }
        while (v77 != v78);
      }
      *(float *)&double v116 = v80 - v16;
      v93 = v135;
      if ((unint64_t)v135 >= v136)
      {
        uint64_t v94 = sub_100039AC4(&v134, (long long **)__p, &v116);
      }
      else
      {
        *(void *)uint64_t v135 = 0;
        *((void *)v93 + 1) = 0;
        *((void *)v93 + 2) = 0;
        sub_1000183D4(v93, (long long *)__p[0], (long long *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v93 + 6) = LODWORD(v116);
        uint64_t v94 = (uint64_t)(v93 + 32);
      }
      uint64_t v135 = (char *)v94;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    uint64_t v95 = v134;
    for (j = v135; (char *)v95 != j; v95 += 32)
    {
      float v97 = *(float *)(v95 + 24);
      if (v97 != 0.0)
      {
        double v98 = v97 - v75;
        long double v99 = exp(v98);
        if (v98 <= -10.0)
        {
          double v101 = v98 + v99 * -0.5 + v99 * v99 / 24.0 + pow(v99, 4.0) / -2880.0;
        }
        else
        {
          long double v100 = expm1(-v99);
          double v101 = log(-v100);
        }
        float v102 = v101;
        *(float *)(v95 + 24) = v102;
      }
    }
    __p[0] = &v118;
    sub_1000184DC((void ***)__p);
    uint64_t v51 = v134;
    unint64_t v50 = v135;
  }
  else
  {
    uint64_t v51 = v134;
    unint64_t v50 = v135;
    if (a4 > (unint64_t)((uint64_t)&v135[-v134] >> 5))
    {
      uint64_t v108 = a3;
      uint64_t v106 = a2;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = off_1000AD130;
        __p[12] = off_1000AD268;
        long long v112 = 0u;
        long long v113 = 0u;
        uint64_t v114 = 0;
        uint64_t v115 = 1024;
        sub_100032530((uint64_t)__p, a2, a3);
        sub_100034FB8(a1, __p);
        v118 = 0;
        char v119 = 0;
        uint64_t v120 = 0;
        sub_100034B94(__p, (void **)&v116, a8);
        double v53 = v116;
        double v52 = v117;
        float v54 = 0.0;
        if (*(void *)&v116 != *(void *)&v117)
        {
          unint64_t v55 = v119;
          do
          {
            uint64_t v56 = **(void **)&v53;
            if (v55 >= (long long *)v120)
            {
              unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v118) >> 3);
              unint64_t v58 = v57 + 1;
              if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_100004204();
              }
              if (0x5555555555555556 * ((v120 - (char *)v118) >> 3) > v58) {
                unint64_t v58 = 0x5555555555555556 * ((v120 - (char *)v118) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v120 - (char *)v118) >> 3) >= 0x555555555555555) {
                unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v59 = v58;
              }
              int v60 = (char *)sub_10000D200((uint64_t)&v120, v59);
              int v62 = &v60[24 * v57];
              *(_OWORD *)int v62 = *(_OWORD *)v56;
              *((_DWORD *)v62 + 4) = *(_DWORD *)(v56 + 28);
              float v64 = v118;
              unint64_t v63 = v119;
              uint64_t v65 = (long long *)v62;
              if (v119 != v118)
              {
                do
                {
                  long long v66 = *(long long *)((char *)v63 - 24);
                  *((void *)v65 - 1) = *((void *)v63 - 1);
                  *(long long *)((char *)v65 - 24) = v66;
                  uint64_t v65 = (long long *)((char *)v65 - 24);
                  unint64_t v63 = (long long *)((char *)v63 - 24);
                }
                while (v63 != v64);
                unint64_t v63 = v118;
              }
              unint64_t v55 = (long long *)(v62 + 24);
              v118 = v65;
              char v119 = (long long *)(v62 + 24);
              uint64_t v120 = &v60[24 * v61];
              if (v63) {
                operator delete(v63);
              }
            }
            else
            {
              *unint64_t v55 = *(_OWORD *)v56;
              *((_DWORD *)v55 + 4) = *(_DWORD *)(v56 + 28);
              unint64_t v55 = (long long *)((char *)v55 + 24);
            }
            char v119 = v55;
            float v54 = v54 + (float)(a8 * *(float *)(v56 + 32));
            *(void *)&v53 += 8;
          }
          while (*(void *)&v53 != *(void *)&v52);
        }
        float v110 = v54 - v16;
        long long v67 = v135;
        if ((unint64_t)v135 >= v136)
        {
          uint64_t v68 = sub_100039AC4(&v134, &v118, &v110);
        }
        else
        {
          *(void *)uint64_t v135 = 0;
          *((void *)v67 + 1) = 0;
          *((void *)v67 + 2) = 0;
          sub_1000183D4(v67, v118, v119, 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (char *)v118) >> 3));
          *((float *)v67 + 6) = v110;
          uint64_t v68 = (uint64_t)(v67 + 32);
        }
        a2 = v106;
        a3 = v108;
        uint64_t v135 = (char *)v68;
        if (v116 != 0.0)
        {
          double v117 = v116;
          operator delete(*(void **)&v116);
        }
        if (v118)
        {
          char v119 = v118;
          operator delete(v118);
        }
        sub_10003214C((uint64_t)__p);
        uint64_t v51 = v134;
        unint64_t v50 = v135;
      }
      while (a4 > (unint64_t)((uint64_t)&v135[-v134] >> 5));
    }
  }
  *uint64_t v103 = v51;
  v103[1] = (uint64_t)v50;
  v103[2] = v136;
  uint64_t v40 = &v134;
LABEL_114:
  *uint64_t v40 = 0;
  v40[1] = 0;
  void v40[2] = 0;
  if (v121[0])
  {
    v121[1] = v121[0];
    operator delete(v121[0]);
  }
  sub_10003214C((uint64_t)&v122);
  unint64_t v122 = (void **)&v134;
  sub_1000184DC(&v122);
}

void sub_100037A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void **a46)
{
  if (__p)
  {
    a19 = __p;
    operator delete(__p);
  }
  std::string __p = &a37;
  sub_10002EF40((void ***)&__p);
  std::string __p = &a40;
  sub_1000184DC((void ***)&__p);
  unint64_t v49 = *(void **)(v46 + 200);
  if (v49)
  {
    *(void *)(v46 + 208) = v49;
    operator delete(v49);
  }
  sub_10003214C((uint64_t)&a46);
  a46 = (void **)(v47 - 160);
  sub_1000184DC(&a46);
  _Unwind_Resume(a1);
}

float sub_100037BD8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  float v8 = off_1000AD130;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = 0;
  uint64_t v15 = off_1000AD268;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  uint64_t v19 = 1024;
  sub_100032530((uint64_t)&v8, a2, a3);
  sub_100034FB8(a1, &v8);
  float v6 = sub_1000333EC(&v8, a4);
  sub_10003214C((uint64_t)&v8);
  return v6;
}

void sub_100037C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003214C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100037CAC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  strcpy(__s, " ");
  size_t v10 = strlen(__s);
  sub_10002E800((char **)&v43, a2, a3, (unsigned __int8 *)__s, v10, 0);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  std::string __p = 0;
  sub_100038C6C(&__p, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 4);
  long long v11 = __p;
  long long v12 = v46;
  if (__p == v46)
  {
    float v14 = 0.0;
    if (__p)
    {
LABEL_11:
      uint64_t v46 = v11;
      operator delete(v11);
    }
  }
  else
  {
    float v13 = *(float *)(a1 + 104) + -10.0;
    float v14 = 0.0;
    do
    {
      uint64_t v15 = v11[1];
      uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 112))(a1, *v11, v15);
      if (v16 == *(_DWORD *)(a1 + 88))
      {
        float v14 = v13 + v14;
      }
      else
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v16)) {
          double v17 = (float)(*(float *)(a1 + 108) * (float)(int)v15) + -0.1;
        }
        else {
          double v17 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v16);
        }
        float v14 = v17 + v14;
      }
      v11 += 2;
    }
    while (v11 != v12);
    long long v11 = __p;
    if (__p) {
      goto LABEL_11;
    }
  }
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  strcpy(__s, " ");
  size_t v18 = strlen(__s);
  sub_10002E800((char **)&v43, a4, a5, (unsigned __int8 *)__s, v18, 0);
  long long v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  sub_100038C6C(&v40, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 4);
  uint64_t v19 = v40;
  uint64_t v20 = v41;
  if (v40 != v41)
  {
    float v21 = *(float *)(a1 + 104) + -10.0;
    float v22 = 0.0;
    do
    {
      uint64_t v23 = v19[1];
      uint64_t v24 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 112))(a1, *v19, v23);
      if (v24 == *(_DWORD *)(a1 + 88))
      {
        float v22 = v21 + v22;
      }
      else
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v24)) {
          double v25 = (float)(*(float *)(a1 + 108) * (float)(int)v23) + -0.1;
        }
        else {
          double v25 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v24);
        }
        float v22 = v25 + v22;
      }
      v19 += 2;
    }
    while (v19 != v20);
    uint64_t v19 = v40;
    if (!v40) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  float v22 = 0.0;
  if (v40)
  {
LABEL_24:
    long long v41 = v19;
    operator delete(v19);
  }
LABEL_25:
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  float v26 = vabds_f32(v14, v22);
  if (v26 > 0.0000001 && (int)sub_10004A6A8() <= 1)
  {
    LOBYTE(v43) = 0;
    unsigned int v27 = sub_100018688(&std::cerr, (uint64_t)"unigram_model.cc", 16);
    sub_100018688(v27, (uint64_t)"(", 1);
    uint64_t v28 = (void *)std::ostream::operator<<();
    long long v29 = sub_100018688(v28, (uint64_t)") ", 2);
    long long v30 = sub_100018688(v29, (uint64_t)"LOG(", 4);
    long long v31 = sub_100018688(v30, (uint64_t)"WARNING", 7);
    float v32 = sub_100018688(v31, (uint64_t)") ", 2);
    uint64_t v33 = sub_100018688(v32, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    uint64_t v34 = sub_100018688(v33, a2, a3);
    sub_100018688(v34, (uint64_t)", Score: ", 9);
    float v35 = (void *)std::ostream::operator<<();
    long long v36 = sub_100018688(v35, (uint64_t)". Right: ", 9);
    long long v37 = sub_100018688(v36, a4, a5);
    sub_100018688(v37, (uint64_t)", Score: ", 9);
    uint64_t v38 = (void *)std::ostream::operator<<();
    sub_100018688(v38, (uint64_t)".", 1);
    sub_1000176C4(&v43);
  }
  return v26 <= 0.0000001;
}

void sub_100038114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100038170(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_100016478(a1, &v13);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(p_p->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 104);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v5 = &__p;
  }
  else {
    unint64_t v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v7 = &__p;
  }
  else {
    unsigned int v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 108);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v8 = &__p;
  }
  else {
    float v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v10 = &v13;
  }
  else {
    size_t v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1000382B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100038308()
{
  return 1;
}

uint64_t sub_100038310()
{
  return 1;
}

uint64_t sub_100038318()
{
  return 1;
}

uint64_t sub_100038320()
{
  return 1;
}

void *sub_100038328(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    uint64_t result = sub_1000041C0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100038388(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000383A4(uint64_t a1, unsigned char *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  std::string::size_type v9 = *(unsigned int **)(a1 + 16);
  unsigned int v10 = *v9;
  if (a5)
  {
    int v11 = *a2;
    unint64_t v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v11;
    unsigned int v10 = v9[v12];
    if ((v10 & 0x800000FF) == v11)
    {
      uint64_t v13 = a5 - 1;
      float v14 = a2 + 1;
      while (1)
      {
        unint64_t v15 = v12;
        if (!v13) {
          goto LABEL_16;
        }
        int v16 = *v14++;
        unint64_t v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v16;
        unsigned int v10 = v9[v12];
        --v13;
        if ((v10 & 0x800000FF) != v16) {
          goto LABEL_14;
        }
      }
    }
  }
  else
  {
    int v17 = *a2;
    if (!*a2)
    {
      unint64_t v15 = 0;
      LODWORD(v12) = 0;
LABEL_16:
      if ((v10 & 0x100) != 0) {
        int v22 = v9[(v10 >> 10 << ((v10 >> 6) & 8)) ^ v12] & 0x7FFFFFFF;
      }
      else {
        int v22 = -1;
      }
      goto LABEL_19;
    }
    unint64_t v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v17;
    unsigned int v10 = v9[v18];
    if ((v10 & 0x800000FF) == v17)
    {
      uint64_t v19 = a2 + 1;
      LODWORD(v12) = v18;
      while (1)
      {
        unint64_t v15 = v18;
        int v21 = *v19++;
        int v20 = v21;
        if (!v21) {
          goto LABEL_16;
        }
        unint64_t v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v20;
        unsigned int v10 = v9[v18];
        LODWORD(v12) = v18;
        if ((v10 & 0x800000FF) != v20) {
          goto LABEL_14;
        }
      }
    }
  }
  unint64_t v15 = 0;
LABEL_14:
  int v22 = -2;
LABEL_19:
  long long v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v41.n128_u32[0] = 0;
  v41.n128_u64[1] = v15;
  int v42 = v22;
  sub_1000386DC(v43, &v41);
  uint64_t v23 = *((void *)&v44 + 1);
  if (*((void *)&v44 + 1))
  {
    unint64_t v24 = 0;
    do
    {
      double v25 = (int *)(*(void *)(*((void *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))
                  + 24 * ((unint64_t)v44 % 0xAA));
      int v26 = *v25;
      uint64_t v27 = v25[2];
      int v28 = v25[4];
      *(void *)&long long v44 = v44 + 1;
      *((void *)&v44 + 1) = v23 - 1;
      if ((unint64_t)v44 >= 0x154)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((void *)&v43[0] + 1) += 8;
        *(void *)&long long v44 = v44 - 170;
      }
      if ((v28 & 0x80000000) == 0)
      {
        uint64_t v29 = a3 + 16 * v24;
        *(_DWORD *)uint64_t v29 = v28;
        *(void *)(v29 + 8) = a5;
        ++v24;
      }
      BOOL v31 = a6 >= 0 && v26 > a6;
      if (v24 >= a4 || v31) {
        break;
      }
      if (v28 != -2)
      {
        unsigned __int32 v32 = v26 + 1;
        for (int i = 1; i != 256; ++i)
        {
          uint64_t v34 = *(void *)(a1 + 16);
          unint64_t v35 = (*(_DWORD *)(v34 + 4 * v27) >> 10 << ((*(_DWORD *)(v34 + 4 * v27) >> 6) & 8)) ^ v27 ^ i;
          unsigned int v36 = *(_DWORD *)(v34 + 4 * v35);
          if (i == (v36 & 0x800000FF))
          {
            if ((v36 & 0x100) != 0) {
              int v37 = *(_DWORD *)(v34 + 4 * ((v36 >> 10 << ((v36 >> 6) & 8)) ^ v35)) & 0x7FFFFFFF;
            }
            else {
              int v37 = -1;
            }
            v41.n128_u32[0] = v32;
            v41.n128_u64[1] = v35;
            int v42 = v37;
            sub_1000386DC(v43, &v41);
          }
        }
      }
      uint64_t v23 = *((void *)&v44 + 1);
    }
    while (*((void *)&v44 + 1));
  }
  else
  {
    unint64_t v24 = 0;
  }
  sub_100038AA4(v43);
  return v24;
}

void sub_100038694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100038AA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000386AC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_100038B4C((void **)a1, a2 - v2);
  }
}

__n128 sub_1000386DC(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10003878C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  size_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *size_t v8 = result;
  ++a1[5];
  return result;
}

void sub_10003878C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::string::size_type v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)size_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10000421C(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        size_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __n128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__n128 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::string::size_type v9 = (char *)a1[1];
    }
    size_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_100004A54(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_100004B6C((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::string::size_type v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10000421C((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        size_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        size_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_10000421C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_100004C8C(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100004DA4((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100038A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100038AA4(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }
  return sub_100004EC0((uint64_t)a1);
}

void sub_100038B4C(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_100004204();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_100019218(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *sub_100038C6C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_10001C104(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100038CCC(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100038CE8(void *a1)
{
  sub_100038D20(a1);
  operator delete();
}

void *sub_100038D20(void *a1)
{
  *a1 = off_1000AD268;
  unint64_t v2 = (void *)a1[1];
  BOOL v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        operator delete[]();
      }
      ++v2;
    }
    while (v2 != v3);
    unint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100038DB0(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_100004204();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)sub_10000D200(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    sub_100038F18(a1, &v15);
    sub_100030A30((uint64_t)&v15);
  }
}

void sub_100038F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100030A30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100038F18(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100038F90((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100038F90(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_100039034((uint64_t)v11);
  return v9;
}

uint64_t sub_100039034(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000309E8(a1);
  }
  return a1;
}

uint64_t sub_10003906C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_100038328((void *)v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_100039128((uint64_t)v8);
  return v4;
}

void sub_100039114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100039128(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10001848C(a1);
  }
  return a1;
}

void sub_100039160(void *a1)
{
  sub_100034B04(a1);
  operator delete();
}

uint64_t sub_100039198(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    unint64_t v3 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v4 = (void *)(result + 8 * v3);
    uint64_t v5 = *v4;
    uint64_t v8 = *(void *)(a2 - 8);
    uint64_t v6 = (void *)(a2 - 8);
    uint64_t v7 = v8;
    float v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        uint64_t v10 = v4;
        *uint64_t v6 = v5;
        if (!v3) {
          break;
        }
        unint64_t v3 = (v3 - 1) >> 1;
        uint64_t v4 = (void *)(result + 8 * v3);
        uint64_t v5 = *v4;
        uint64_t v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      void *v10 = v7;
    }
  }
  return result;
}

uint64_t sub_1000391F4(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = 32 * a2;
      uint64_t v15 = v7 + 32 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(void *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      uint64_t v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      sub_100004204();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    v19[4] = result;
    if (v12) {
      long long v13 = (char *)sub_10002F4A8(result, v12);
    }
    else {
      long long v13 = 0;
    }
    uint64_t v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    void v19[3] = &v13[32 * v12];
    uint64_t v17 = 32 * a2;
    uint64_t v18 = &v16[32 * a2];
    do
    {
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((void *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    v19[2] = v18;
    sub_10003931C(a1, v19);
    return sub_10003101C((uint64_t)v19);
  }
  return result;
}

void sub_100039308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003101C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003931C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100039394((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100039394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_100039440((uint64_t)v11);
  return v9;
}

uint64_t sub_100039440(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100030FD4(a1);
  }
  return a1;
}

void *sub_100039478(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1000041C0(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1000394E0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_1000394FC(uint64_t a1, long long **a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_1000183D4((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_100039568(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100039570(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_100004204();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_10002F4A8(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  uint64_t v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_1000183D4(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_100039680(a1, v16);
  uint64_t v14 = a1[1];
  sub_10003101C((uint64_t)v16);
  return v14;
}

void sub_10003966C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003101C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100039680(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000396F8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000396F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1000397A4((uint64_t)v11);
  return v9;
}

uint64_t sub_1000397A4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100030FD4(a1);
  }
  return a1;
}

uint64_t sub_1000397DC(uint64_t *a1, long long **a2, double *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_100004204();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  int64_t v20 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_10002F4A8(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v17[0] = v12;
  v17[1] = v13;
  uint64_t v18 = v13;
  uint64_t v19 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_1000183D4(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float v14 = *a3;
  *((float *)v13 + 6) = v14;
  v18 += 32;
  sub_100039680(a1, v17);
  uint64_t v15 = a1[1];
  sub_10003101C((uint64_t)v17);
  return v15;
}

void sub_1000398DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003101C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000398F0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10000D1AC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_100039980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_100039994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8) - *(void *)a3;
    while (*(void *)(v3 + 8) - *(void *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

__n128 *sub_100039A04(__n128 *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  size_t v5 = a2;
  do
  {
    sub_100039A70(a3, v4);
    *(_DWORD *)(a3 + 24) = v4[1].n128_u32[2];
    a3 += 32;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

__n128 sub_100039A70(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_100039AC4(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_100004204();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_10002F4A8(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  uint64_t v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_1000183D4(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_100039680(a1, v16);
  uint64_t v14 = a1[1];
  sub_10003101C((uint64_t)v16);
  return v14;
}

void sub_100039BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003101C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100039BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_100035A38(a1);
  *uint64_t v4 = &off_1000AD2C8;
  v4[1] = a2 + 16;
  sub_10001564C((uint64_t)v4);
  return a1;
}

void sub_100039C24(_Unwind_Exception *a1)
{
  sub_100015048(v1);
  _Unwind_Resume(a1);
}

void sub_100039C40(void *a1)
{
  sub_100015048(a1);
  operator delete();
}

void sub_100039C78(uint64_t *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v25);
  if (v25)
  {
    sub_10004CF1C(&v25);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_10004CF1C(&v25);
  if (!a3) {
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    uint64_t v8 = (int)sub_10001D5E4(a1[2], a2, a3, 0);
    int v9 = (*(uint64_t (**)(uint64_t *, unsigned char *, uint64_t))(*a1 + 112))(a1, a2, v8);
    int v10 = v9;
    char v12 = (char *)a4[1];
    unint64_t v11 = (char *)a4[2];
    if (v12 >= v11)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a4) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100004204();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*a4) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      uint64_t v18 = (char *)sub_10000D200((uint64_t)(a4 + 2), v17);
      int64_t v20 = &v18[24 * v14];
      *(void *)int64_t v20 = a2;
      *((void *)v20 + 1) = v8;
      *((_DWORD *)v20 + 4) = v10;
      unint64_t v22 = (char *)*a4;
      uint64_t v21 = (char *)a4[1];
      uint64_t v23 = v20;
      if (v21 != *a4)
      {
        do
        {
          long long v24 = *(_OWORD *)(v21 - 24);
          *((void *)v23 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        uint64_t v21 = (char *)*a4;
      }
      long long v13 = v20 + 24;
      *a4 = v23;
      a4[1] = v20 + 24;
      a4[2] = &v18[24 * v19];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)char v12 = a2;
      *((void *)v12 + 1) = v8;
      long long v13 = v12 + 24;
      *((_DWORD *)v12 + 4) = v9;
    }
    a4[1] = v13;
    a2 += v8;
    a3 -= v8;
  }
  while (a3);
}

void sub_100039E6C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100039E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_100035A38(a1);
  *uint64_t v4 = &off_1000AD3D0;
  v4[1] = a2 + 16;
  sub_10001564C((uint64_t)v4);
  return a1;
}

void sub_100039EE0(_Unwind_Exception *a1)
{
  sub_100015048(v1);
  _Unwind_Resume(a1);
}

void sub_100039EFC(void *a1)
{
  sub_100015048(a1);
  operator delete();
}

void sub_100039F34(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  (*(void (**)(unsigned __int8 ***__return_ptr))(*(void *)a1 + 16))(&v26);
  if (v26)
  {
    sub_10004CF1C((uint64_t *)&v26);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_10004CF1C((uint64_t *)&v26);
  if (!a3) {
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_1000167B8(a2, a3, 0, 0, &v26);
  uint64_t v8 = v26;
  int v9 = v27;
  if (v26 != v27)
  {
    do
    {
      int v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(void *)a1 + 112))(a1, *v8, v8[1]);
      int v11 = v10;
      long long v13 = (char *)a4[1];
      char v12 = (char *)a4[2];
      if (v13 >= v12)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)*a4) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100004204();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a4) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        uint64_t v19 = (char *)sub_10000D200((uint64_t)(a4 + 2), v18);
        uint64_t v21 = &v19[24 * v15];
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v8;
        *((_DWORD *)v21 + 4) = v11;
        uint64_t v23 = (char *)*a4;
        unint64_t v22 = (char *)a4[1];
        long long v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            long long v25 = *(_OWORD *)(v22 - 24);
            *((void *)v24 - 1) = *((void *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          unint64_t v22 = (char *)*a4;
        }
        unint64_t v14 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)long long v13 = *(_OWORD *)v8;
        *((_DWORD *)v13 + 4) = v10;
        unint64_t v14 = v13 + 24;
      }
      a4[1] = v14;
      v8 += 2;
    }
    while (v8 != v9);
    uint64_t v8 = v26;
  }
  if (v8)
  {
    uint64_t v27 = v8;
    operator delete(v8);
  }
}

void sub_10003A14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  long long v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003A17C()
{
  sub_100051AF0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_10003C3DC((uint64_t)&unk_1000B6828, 0);
  sub_10006FB0C((uint64_t)sub_100065D5C, (uint64_t)&unk_1000B6828);
}

void sub_10003A1EC()
{
  sub_100051AF0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_10003B4F8((uint64_t)&unk_1000B67D0, 0);
  sub_10006FB0C((uint64_t)sub_100065D5C, (uint64_t)&unk_1000B67D0);
}

void sub_10003A25C()
{
  sub_100051AF0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_10003A2CC((uint64_t)&unk_1000B6780, 0);
  sub_10006FB0C((uint64_t)sub_100065D5C, (uint64_t)&unk_1000B6780);
}

uint64_t sub_10003A2CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000AD4D8;
  *(void *)(a1 + 8) = a2;
  sub_100053488(a1 + 16, a2);
  *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = 0;
  if (atomic_load_explicit(dword_1000B5930, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B5930);
  }
  *(void *)(a1 + 48) = &qword_1000B6B88;
  *(void *)(a1 + 56) = &qword_1000B6B88;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_10003A350(_Unwind_Exception *a1)
{
  sub_100053584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003A368(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)a1 = off_1000AD4D8;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = a1 + 16;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = *(unsigned int *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
    int v8 = *(char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    if (v8 >= 0) {
      int v9 = (const std::string::value_type *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      int v9 = *(const std::string::value_type **)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    }
    else {
      std::string::size_type v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16);
    }
    std::string::append(v7, v9, v10);
  }
  sub_10005BC28(v5, a2 + 16);
  *(void *)(a1 + 48) = &qword_1000B6B88;
  int v11 = *(_DWORD *)(a2 + 40);
  if (v11)
  {
    char v12 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      char v12 = (void *)*v12;
    }
    sub_10004E9D8((uint64_t *)(a1 + 48), (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v12);
    int v11 = *(_DWORD *)(a2 + 40);
  }
  *(void *)(a1 + 56) = &qword_1000B6B88;
  if ((v11 & 2) != 0)
  {
    long long v13 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      long long v13 = (void *)*v13;
    }
    sub_10004E9D8((uint64_t *)(a1 + 56), (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v13);
  }
  uint64_t v14 = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 64) = v14;
  return a1;
}

void sub_10003A494(_Unwind_Exception *a1)
{
  sub_100053584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003A4AC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10003A4E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 140);
    uint64_t v4 = sub_100051E74(v11, "CHECK failed: GetArena() == nullptr: ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
LABEL_4:
  __n128 result = (uint64_t *)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_1000B6B88)
  {
    uint64_t v6 = sub_10003D154(result);
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    operator delete();
  }
  int v8 = *(uint64_t **)(a1 + 56);
  uint64_t v7 = (uint64_t *)(a1 + 56);
  if (v8 != &qword_1000B6B88)
  {
    uint64_t v9 = sub_10003D154(v7);
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    operator delete();
  }
  return result;
}

void sub_10003A5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003A610(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(void *)(v1 & 0xFFFFFFFFFFFFFFFELL) && v2 != 0)
    {
      if (*(char *)(v2 + 31) < 0) {
        operator delete(*(void **)(v2 + 8));
      }
      operator delete();
    }
  }
  return result;
}

void sub_10003A68C(uint64_t a1)
{
  sub_10003A4AC(a1);
  operator delete();
}

uint64_t sub_10003A6C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 44) = a2;
  return result;
}

void *sub_10003A6D0()
{
  if (atomic_load_explicit(dword_1000B5930, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B5930);
  }
  return &unk_1000B6780;
}

unsigned __int8 *sub_10003A70C(uint64_t a1)
{
  __n128 result = sub_10005BB88((unsigned __int8 *)(a1 + 16));
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 3) != 0)
  {
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(unsigned char **)unint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        if ((v3 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    unint64_t v5 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
LABEL_11:
  if ((v3 & 0x1C) != 0)
  {
    *(_DWORD *)(a1 + 72) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(unsigned char **)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v7 + 8) = 0;
      *(unsigned char *)(v7 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_10003A7DC(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v36 = a2;
  int v5 = 0;
  if ((sub_10003D228((uint64_t)a3, (char **)v36, a3[11].i32[1]) & 1) == 0)
  {
    unint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      int v8 = (char *)(*(void *)v36 + 1);
      unsigned int v9 = **(unsigned char **)v36;
      if ((char)**(unsigned char **)v36 < 0)
      {
        unsigned int v10 = v9 + (*v8 << 7);
        unsigned int v9 = v10 - 128;
        if (*v8 < 0)
        {
          uint64_t v27 = sub_100070F68(*(uint64_t *)v36, v10 - 128);
          *(void *)uint64_t v36 = v27;
          if (!v27) {
            goto LABEL_56;
          }
          int v8 = (char *)v27;
          unsigned int v9 = v28;
          goto LABEL_8;
        }
        int v8 = (char *)(*(void *)v36 + 2);
      }
      *(void *)uint64_t v36 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10) {
            goto LABEL_37;
          }
          *(_DWORD *)(a1 + 40) |= 1u;
          uint64_t v11 = *(void *)(a1 + 8);
          char v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if (v11) {
            char v12 = (void *)*v12;
          }
          long long v13 = (uint64_t *)(a1 + 48);
          goto LABEL_22;
        case 2u:
          if (v9 != 16) {
            goto LABEL_37;
          }
          v5 |= 4u;
          uint64_t v14 = v8 + 1;
          int v15 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          int v16 = *v14;
          int v15 = v15 + (v16 << 7) - 128;
          if (v16 < 0)
          {
            uint64_t v30 = sub_100070EB8((uint64_t)v8, v15);
            *(void *)uint64_t v36 = v30;
            *(_DWORD *)(a1 + 64) = v31;
            if (!v30) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v14 = v8 + 2;
LABEL_17:
            *(void *)uint64_t v36 = v14;
            *(_DWORD *)(a1 + 64) = v15;
          }
          goto LABEL_35;
        case 3u:
          if (v9 != 26) {
            goto LABEL_37;
          }
          *(_DWORD *)(a1 + 40) |= 2u;
          uint64_t v17 = *(void *)(a1 + 8);
          char v12 = (void *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if (v17) {
            char v12 = (void *)*v12;
          }
          long long v13 = (uint64_t *)(a1 + 56);
LABEL_22:
          unint64_t v18 = (std::string *)sub_10004EA20(v13, (uint64_t)v12);
          uint64_t v19 = (void *)sub_100071098(v18, *(char **)v36, (uint64_t)a3);
          goto LABEL_23;
        case 4u:
          if (v9 != 32) {
            goto LABEL_37;
          }
          v5 |= 8u;
          uint64_t v20 = v8 + 1;
          int v21 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_29;
          }
          int v22 = *v20;
          int v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            uint64_t v32 = sub_100070EB8((uint64_t)v8, v21);
            *(void *)uint64_t v36 = v32;
            *(_DWORD *)(a1 + 68) = v33;
            if (!v32) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v20 = v8 + 2;
LABEL_29:
            *(void *)uint64_t v36 = v20;
            *(_DWORD *)(a1 + 68) = v21;
          }
          goto LABEL_35;
        case 5u:
          if (v9 != 40) {
            goto LABEL_37;
          }
          v5 |= 0x10u;
          uint64_t v23 = v8 + 1;
          int v24 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          int v25 = *v23;
          int v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            uint64_t v34 = sub_100070EB8((uint64_t)v8, v24);
            *(void *)uint64_t v36 = v34;
            *(_DWORD *)(a1 + 72) = v35;
            if (!v34) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v23 = v8 + 2;
LABEL_34:
            *(void *)uint64_t v36 = v23;
            *(_DWORD *)(a1 + 72) = v24;
          }
          goto LABEL_35;
        default:
LABEL_37:
          if (v9) {
            BOOL v26 = (v9 & 7) == 4;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26)
          {
            a3[10].i32[0] = v9 - 1;
            goto LABEL_2;
          }
          if (v9 < 0x640)
          {
            if (*v7)
            {
              uint64_t v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              uint64_t v29 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
              int v8 = *(char **)v36;
            }
            uint64_t v19 = sub_10007157C(v9, v29, v8, a3);
          }
          else
          {
            uint64_t v19 = sub_10005E7C4((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1000B6780, (unint64_t *)(a1 + 8), a3);
          }
LABEL_23:
          *(void *)uint64_t v36 = v19;
          if (!v19)
          {
LABEL_56:
            *(void *)uint64_t v36 = 0;
            goto LABEL_2;
          }
LABEL_35:
          if (sub_10003D228((uint64_t)a3, (char **)v36, a3[11].i32[1])) {
            goto LABEL_2;
          }
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v36;
}

char *sub_10003AB20(uint64_t a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0) {
      goto LABEL_3;
    }
LABEL_11:
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = sub_100051170((uint64_t)a3, v4);
    }
    unsigned int v8 = *(_DWORD *)(a1 + 64);
    *unint64_t v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v10 | 0x80;
          unsigned int v13 = v10 >> 7;
          ++v4;
          unsigned int v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        *(v4 - 1) = v13;
        if ((v6 & 2) != 0) {
          goto LABEL_27;
        }
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0) {
        goto LABEL_27;
      }
    }
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
  unint64_t v4 = sub_10003ADD8(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v6 & 4) != 0) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v6 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_27:
  unint64_t v4 = sub_10003ADD8(a3, 3, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_39;
    }
    goto LABEL_6;
  }
LABEL_28:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_100051170((uint64_t)a3, v4);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 68);
  *unint64_t v4 = 32;
  if (v15 > 0x7F)
  {
    v4[1] = v15 | 0x80;
    unsigned int v16 = v15 >> 7;
    if (v15 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v16 | 0x80;
        unsigned int v17 = v16 >> 7;
        ++v4;
        unsigned int v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v4 - 1) = v17;
      if ((v6 & 0x10) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      v4[2] = v16;
      v4 += 3;
      if ((v6 & 0x10) == 0) {
        goto LABEL_39;
      }
    }
  }
  else
  {
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 0x10) == 0) {
      goto LABEL_39;
    }
  }
LABEL_6:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_100051170((uint64_t)a3, v4);
  }
  unsigned int v7 = *(_DWORD *)(a1 + 72);
  *unint64_t v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    unsigned int v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        ++v4;
        unsigned int v12 = v9 >> 14;
        v9 >>= 7;
      }
      while (v12);
      *(v4 - 1) = v11;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  uint64_t v19 = sub_10005FF78(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(a1 + 8);
  if ((v21 & 1) == 0) {
    return v20;
  }
  unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 31) < 0)
  {
    int v24 = *(void **)(v23 + 8);
    uint64_t v25 = *(void *)(v23 + 16);
  }
  else
  {
    int v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if ((uint64_t)(*a3 - (void)v19) >= (int)v25)
  {
    uint64_t v26 = (int)v25;
    memcpy(v19, v24, (int)v25);
    v20 += v26;
    return v20;
  }
  return sub_100051284((uint64_t *)a3, (char *)v24, v25, (unint64_t)v19);
}

char *sub_10003ADD8(unint64_t *a1, int a2, const void **a3, char *a4)
{
  if (*((char *)a3 + 23) < 0)
  {
    int64_t v4 = (int64_t)a3[1];
    if (v4 > 127) {
      goto LABEL_24;
    }
  }
  else
  {
    int64_t v4 = *((unsigned __int8 *)a3 + 23);
  }
  unsigned int v5 = 8 * a2;
  uint64_t v6 = 1;
  uint64_t v7 = 2;
  uint64_t v8 = 3;
  uint64_t v9 = 4;
  if ((8 * a2) >> 28) {
    uint64_t v9 = 5;
  }
  if (v5 >= 0x200000) {
    uint64_t v8 = v9;
  }
  if (v5 >= 0x4000) {
    uint64_t v7 = v8;
  }
  if (v5 >= 0x80) {
    uint64_t v6 = v7;
  }
  if ((uint64_t)(*a1 + ~(unint64_t)&a4[v6] + 16) >= v4)
  {
    unsigned int v10 = v5 | 2;
    if ((v5 | 2) > 0x7F)
    {
      *a4 = v5 | 0x82;
      unsigned int v12 = v5 >> 7;
      if (v10 >> 14)
      {
        unsigned int v11 = a4 + 2;
        do
        {
          *(v11 - 1) = v12 | 0x80;
          unsigned int v13 = v12 >> 7;
          ++v11;
          unsigned int v14 = v12 >> 14;
          v12 >>= 7;
        }
        while (v14);
        *(v11 - 1) = v13;
      }
      else
      {
        a4[1] = v12;
        unsigned int v11 = a4 + 2;
      }
    }
    else
    {
      *a4 = v10;
      unsigned int v11 = a4 + 1;
    }
    *unsigned int v11 = v4;
    unsigned int v15 = v11 + 1;
    if (*((char *)a3 + 23) >= 0) {
      unsigned int v16 = a3;
    }
    else {
      unsigned int v16 = *a3;
    }
    memcpy(v15, v16, v4);
    return &v15[v4];
  }
LABEL_24:
  return sub_1000514CC(a1, a2, (void **)a3, a4);
}

uint64_t sub_10003AF04(uint64_t a1)
{
  uint64_t result = sub_100062D70(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x1F) == 0) {
    goto LABEL_8;
  }
  if (v3)
  {
    unint64_t v5 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
    uint64_t v7 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = v6;
    }
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0) {
        goto LABEL_5;
      }
LABEL_16:
      result += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  uint64_t v10 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_5:
  if ((v3 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_17:
  result += ((9 * (__clz(*(_DWORD *)(a1 + 68) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0) {
LABEL_7:
  }
    result += ((9 * (__clz(*(_DWORD *)(a1 + 72) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    result += v12;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_10003B078(uint64_t a1, void *lpsrc)
{
  sub_10003B100(a1, (uint64_t)lpsrc);
}

void sub_10003B100(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_100051E5C((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 375);
    uint64_t v4 = sub_100051E74(v21, "CHECK failed: (&from) != (this): ");
    sub_100051FB0((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v21);
  }
  sub_10005BC28(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 0x1F) != 0)
  {
    if (v13)
    {
      unsigned int v14 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unsigned int v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unsigned int v16 = (void *)*v16;
      }
      sub_10004E9D8((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0) {
          goto LABEL_17;
        }
        goto LABEL_28;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    unsigned int v17 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 2u;
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    sub_10004E9D8((uint64_t *)(a1 + 56), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0) {
        goto LABEL_18;
      }
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
      {
LABEL_20:
        *(_DWORD *)(a1 + 40) |= v13;
        return;
      }
LABEL_19:
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      goto LABEL_20;
    }
LABEL_29:
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    if ((v13 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
}

void sub_10003B284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003B29C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_10003A70C(a1);
    sub_10003B100(a1, a2);
  }
}

uint64_t sub_10003B2E8(uint64_t a1)
{
  return sub_10005D28C(a1 + 16);
}

uint64_t *sub_10003B2F0(uint64_t a1, uint64_t a2)
{
  sub_10005CEA0(a1 + 16, a2 + 16);
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      unint64_t v10 = sub_10003D368((unint64_t *)(a2 + 8));
      uint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_21:
      unint64_t v11 = sub_10003D368((unint64_t *)(a1 + 8));
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 4sub_10002F6CC(&a9, 0) = v8;
    uint64_t v9 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  unint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_6:
  unint64_t v11 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  uint64_t v12 = *(void *)(v11 + 16);
  long long v13 = *(_OWORD *)v11;
  uint64_t v14 = *(void *)(v10 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = v14;
  *(_OWORD *)unint64_t v10 = v13;
  *(void *)(v10 + 16) = v12;
  uint64_t v15 = *(void *)(a1 + 8);
  LODWORD(v14) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 4sub_10002F6CC(&a9, 0) = v14;
  uint64_t v9 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if (v15)
  {
    uint64_t v16 = *v9;
    uint64_t v7 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = 0;
LABEL_9:
  uint64_t v16 = (uint64_t)v9;
LABEL_10:
  if (*(uint64_t **)(a1 + 48) != &qword_1000B6B88 || *(uint64_t **)(a2 + 48) != &qword_1000B6B88)
  {
    unsigned int v17 = sub_10004EA20((uint64_t *)(a1 + 48), v16);
    uint64_t v18 = sub_10004EA20((uint64_t *)(a2 + 48), v16);
    uint64_t v19 = v17[2];
    long long v20 = *(_OWORD *)v17;
    uint64_t v21 = v18[2];
    *(_OWORD *)unsigned int v17 = *(_OWORD *)v18;
    void v17[2] = v21;
    *(_OWORD *)uint64_t v18 = v20;
    void v18[2] = v19;
    uint64_t v7 = *v5 & 1;
    uint64_t v9 = (uint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t result = (uint64_t *)(a1 + 56);
  if (v7) {
    uint64_t v9 = (uint64_t *)*v9;
  }
  if ((uint64_t *)*result != &qword_1000B6B88 || *(uint64_t **)(a2 + 56) != &qword_1000B6B88)
  {
    unint64_t v23 = sub_10004EA20(result, (uint64_t)v9);
    uint64_t result = sub_10004EA20((uint64_t *)(a2 + 56), (uint64_t)v9);
    uint64_t v24 = v23[2];
    long long v25 = *(_OWORD *)v23;
    uint64_t v26 = result[2];
    *(_OWORD *)unint64_t v23 = *(_OWORD *)result;
    v23[2] = v26;
    *(_OWORD *)uint64_t result = v25;
    result[2] = v24;
  }
  uint64_t v27 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = v27;
  return result;
}

void *sub_10003B4E8@<X0>(void *a1@<X8>)
{
  return sub_10000A1B4(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

uint64_t sub_10003B4F8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000AD558;
  *(void *)(a1 + 8) = a2;
  sub_100053488(a1 + 16, a2);
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  if (atomic_load_explicit(dword_1000B5910, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B5910);
  }
  *(void *)(a1 + 72) = &qword_1000B6B88;
  *(_DWORD *)(a1 + 8sub_10002F6CC(&a9, 0) = 0;
  return a1;
}

void sub_10003B590(_Unwind_Exception *a1)
{
  sub_10003D5A4(v2);
  sub_100053584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003B5B0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (unint64_t *)(a1 + 8);
  *(void *)a1 = off_1000AD558;
  uint64_t v5 = a1 + 16;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 68) = 0;
  *(_OWORD *)(a1 + 52) = 0u;
  *(void *)(a1 + 44) = 0;
  sub_10003D750(a1 + 48, a2 + 48);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    if (*v4) {
      uint64_t v7 = (std::string *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v7 = (std::string *)sub_10003D368(v4);
    }
    int v8 = *(char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    if (v8 >= 0) {
      uint64_t v9 = (const std::string::value_type *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = *(const std::string::value_type **)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    }
    else {
      std::string::size_type v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16);
    }
    std::string::append(v7, v9, v10);
  }
  sub_10005BC28(v5, a2 + 16);
  *(void *)(a1 + 72) = &qword_1000B6B88;
  if (*(unsigned char *)(a2 + 40))
  {
    unint64_t v11 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      unint64_t v11 = (void *)*v11;
    }
    sub_10004E9D8((uint64_t *)(a1 + 72), (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v11);
  }
  *(_DWORD *)(a1 + 8sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_10003B6D4(_Unwind_Exception *a1)
{
  sub_10003D660(v2);
  sub_100053584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003B704(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003B748(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 486);
    uint64_t v4 = sub_100051E74(v9, "CHECK failed: GetArena() == nullptr: ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_100051FB8((uint64_t)v9);
  }
LABEL_4:
  uint64_t v6 = *(uint64_t **)(v1 + 72);
  uint64_t v5 = (uint64_t *)(v1 + 72);
  if (v6 != &qword_1000B6B88)
  {
    uint64_t v7 = sub_10003D154(v5);
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    operator delete();
  }
  return result;
}

void sub_10003B810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003B82C(uint64_t a1)
{
  sub_10003B704(a1);
  operator delete();
}

void *sub_10003B864()
{
  if (atomic_load_explicit(dword_1000B5910, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B5910);
  }
  return &unk_1000B67D0;
}

unsigned __int8 *sub_10003B8A0(uint64_t a1)
{
  sub_10005BB88((unsigned __int8 *)(a1 + 16));
  uint64_t result = sub_10003D444((unsigned __int8 *)(a1 + 48));
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v3 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(a1 + 8sub_10002F6CC(&a9, 0) = 0;
  *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(unsigned char **)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 8) = 0;
      *(unsigned char *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_10003B934(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v29 = a2;
  int v5 = 0;
  if ((sub_10003D228((uint64_t)a3, (char **)v29, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      char v8 = (char *)(*(void *)v29 + 1);
      unsigned int v9 = **(unsigned char **)v29;
      if (((char)**(unsigned char **)v29 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0) {
        break;
      }
      uint64_t v26 = sub_100070F68(*(uint64_t *)v29, v10 - 128);
      *(void *)uint64_t v29 = v26;
      if (!v26) {
        goto LABEL_48;
      }
      char v8 = (char *)v26;
      unsigned int v9 = v27;
LABEL_8:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 29)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 8sub_10002F6CC(&a9, 0) = *(_DWORD *)v8;
          *(void *)uint64_t v29 = v8 + 4;
          goto LABEL_44;
        }
        goto LABEL_14;
      }
      if (v11 == 2)
      {
        if (v9 == 18)
        {
          uint64_t v15 = v8 - 1;
          while (1)
          {
            uint64_t v16 = (unsigned __int8 *)(v15 + 1);
            *(void *)uint64_t v29 = v15 + 1;
            unsigned int v17 = *(int **)(a1 + 64);
            if (!v17) {
              break;
            }
            uint64_t v18 = *(int *)(a1 + 56);
            int v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *(_DWORD *)(a1 + 60))
              {
LABEL_29:
                sub_10007E8E4(a1 + 48, v19 + 1);
                unsigned int v17 = *(int **)(a1 + 64);
                int v19 = *v17;
              }
              *unsigned int v17 = v19 + 1;
              uint64_t v20 = sub_10003CE94(*(void *)(a1 + 48));
              uint64_t v21 = *(void *)(a1 + 64);
              uint64_t v22 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v22 + 1;
              *(void *)(v21 + 8 * v22 + 8) = v20;
              uint64_t v16 = *(unsigned __int8 **)v29;
              goto LABEL_31;
            }
            *(_DWORD *)(a1 + 56) = v18 + 1;
            uint64_t v20 = *(void *)&v17[2 * v18 + 2];
LABEL_31:
            uint64_t v15 = (char *)sub_10003BBEC(a3, v20, v16);
            *(void *)uint64_t v29 = v15;
            if (!v15) {
              goto LABEL_48;
            }
            if (*(void *)a3 <= (unint64_t)v15 || *v15 != 18) {
              goto LABEL_44;
            }
          }
          int v19 = *(_DWORD *)(a1 + 60);
          goto LABEL_29;
        }
LABEL_14:
        if (v9) {
          BOOL v13 = (v9 & 7) == 4;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          a3[10].i32[0] = v9 - 1;
          goto LABEL_2;
        }
        if (v9 < 0x640)
        {
          if (*v7)
          {
            unsigned int v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            unsigned int v28 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
            char v8 = *(char **)v29;
          }
          uint64_t v14 = sub_10007157C(v9, v28, v8, a3);
        }
        else
        {
          uint64_t v14 = sub_10005E7C4((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1000B67D0, (unint64_t *)(a1 + 8), a3);
        }
        goto LABEL_43;
      }
      if (v11 != 1 || v9 != 10) {
        goto LABEL_14;
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v23 = *(void *)(a1 + 8);
      uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if (v23) {
        uint64_t v24 = (void *)*v24;
      }
      long long v25 = (std::string *)sub_10004EA20((uint64_t *)(a1 + 72), (uint64_t)v24);
      uint64_t v14 = (void *)sub_100071098(v25, *(char **)v29, (uint64_t)a3);
LABEL_43:
      *(void *)uint64_t v29 = v14;
      if (!v14)
      {
LABEL_48:
        *(void *)uint64_t v29 = 0;
        goto LABEL_2;
      }
LABEL_44:
      if (sub_10003D228((uint64_t)a3, (char **)v29, a3[11].i32[1])) {
        goto LABEL_2;
      }
    }
    char v8 = (char *)(*(void *)v29 + 2);
LABEL_7:
    *(void *)uint64_t v29 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v29;
}

uint64_t sub_10003BBEC(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_100070FAC((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_10003D694((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_10003A7DC(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_10003BCB4(uint64_t a1, char *a2, unint64_t *a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6) {
    uint64_t v4 = sub_10003ADD8(a3, 1, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), a2);
  }
  int v7 = *(_DWORD *)(a1 + 56);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_100051170((uint64_t)a3, v4);
      }
      uint64_t v9 = sub_10002E3D8(a1 + 48, i);
      *uint64_t v4 = 18;
      unsigned int v10 = *(_DWORD *)(v9 + 44);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        unsigned int v12 = v10 >> 7;
        if (v10 >> 14)
        {
          int v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            unsigned int v13 = v12 >> 7;
            ++v11;
            unsigned int v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          int v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        int v11 = v4 + 2;
      }
      uint64_t v4 = sub_10003AB20(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_100051170((uint64_t)a3, v4);
    }
    int v15 = *(_DWORD *)(a1 + 80);
    *uint64_t v4 = 29;
    *(_DWORD *)(v4 + 1) = v15;
    v4 += 5;
  }
  uint64_t v16 = sub_10005FF78(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  unsigned int v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if ((v18 & 1) == 0) {
    return v17;
  }
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 31) < 0)
  {
    uint64_t v21 = *(void **)(v20 + 8);
    uint64_t v22 = *(void *)(v20 + 16);
  }
  else
  {
    uint64_t v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if ((uint64_t)(*a3 - (void)v16) >= (int)v22)
  {
    uint64_t v23 = (int)v22;
    memcpy(v16, v21, (int)v22);
    v17 += v23;
    return v17;
  }
  return sub_100051284((uint64_t *)a3, (char *)v21, v22, (unint64_t)v16);
}

uint64_t sub_10003BEA8(uint64_t a1)
{
  uint64_t v2 = sub_100062D70(a1 + 16);
  uint64_t v3 = *(int *)(a1 + 56);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_10003AF04(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  int v10 = *(_DWORD *)(a1 + 40);
  if ((v10 & 3) != 0)
  {
    if (v10)
    {
      unint64_t v11 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      uint64_t v13 = *(void *)(v11 + 8);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = v12;
      }
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0) {
      v4 += 5;
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0) {
      uint64_t v17 = *(void *)(v16 + 16);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(v16 + 31);
    }
    v4 += v17;
  }
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_10003BFB4(uint64_t a1, void *lpsrc)
{
  sub_10003C03C(a1, (uint64_t)lpsrc);
}

void sub_10003C03C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 674);
    uint64_t v4 = sub_100051E74(v18, "CHECK failed: (&from) != (this): ");
    sub_100051FB0((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v18);
  }
  sub_10005BC28(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_10003D750(a1 + 48, a2 + 48);
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 3) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unint64_t v16 = (void *)*v16;
      }
      sub_10004E9D8((uint64_t *)(a1 + 72), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0) {
      *(_DWORD *)(a1 + 8sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 80);
    }
    *(_DWORD *)(a1 + 40) |= v13;
  }
}

void sub_10003C16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003C184(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_10003B8A0(a1);
    sub_10003C03C(a1, a2);
  }
}

uint64_t sub_10003C1D0(uint64_t a1)
{
  uint64_t result = sub_10005D28C(a1 + 16);
  if (result)
  {
    return sub_10003C21C(a1 + 48);
  }
  return result;
}

BOOL sub_10003C21C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_10002E3D8(a1, v2);
  }
  while ((sub_10005D28C(v5 + 16) & 1) != 0);
  return v3 < 1;
}

float sub_10003C274(uint64_t a1, uint64_t a2)
{
  sub_10005CEA0(a1 + 16, a2 + 16);
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      unint64_t v7 = sub_10003D368((unint64_t *)(a2 + 8));
      uint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
LABEL_5:
    unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_15:
    unint64_t v8 = sub_10003D368((unint64_t *)(a1 + 8));
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 4sub_10002F6CC(&a9, 0) = v12;
  sub_10003D900((void *)(a1 + 48), a2 + 48);
  int v13 = (uint64_t *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
  if (v14) {
    uint64_t v15 = (void *)*v15;
  }
  if ((uint64_t *)*v13 != &qword_1000B6B88 || *(uint64_t **)(a2 + 72) != &qword_1000B6B88)
  {
    unint64_t v16 = sub_10004EA20(v13, (uint64_t)v15);
    char v17 = sub_10004EA20((uint64_t *)(a2 + 72), (uint64_t)v15);
    uint64_t v18 = v16[2];
    long long v19 = *(_OWORD *)v16;
    uint64_t v20 = v17[2];
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    void v16[2] = v20;
    *(_OWORD *)char v17 = v19;
    void v17[2] = v18;
  }
  float result = *(float *)(a1 + 80);
  *(_DWORD *)(a1 + 8sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 80);
  *(float *)(a2 + 8sub_10002F6CC(&a9, 0) = result;
  return result;
}

void *sub_10003C3CC@<X0>(void *a1@<X8>)
{
  return sub_10000A1B4(a1, "sentencepiece.SentencePieceText");
}

uint64_t sub_10003C3DC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000AD5D8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = 0;
  if (atomic_load_explicit(dword_1000B58F0, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B58F0);
  }
  return a1;
}

void sub_10003C44C(_Unwind_Exception *a1)
{
  sub_10003D9EC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003C464(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (unint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1000AD5D8;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_10003DAA8(a1 + 16, a2 + 16);
  *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    if (*v4) {
      uint64_t v6 = (std::string *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v6 = (std::string *)sub_10003D368(v4);
    }
    int v7 = *(char *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 31);
    if (v7 >= 0) {
      unint64_t v8 = (const std::string::value_type *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unint64_t v8 = *(const std::string::value_type **)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 31);
    }
    else {
      std::string::size_type v9 = *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16);
    }
    std::string::append(v6, v8, v9);
  }
  return a1;
}

void sub_10003C51C(_Unwind_Exception *a1)
{
  sub_10003D9EC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003C544(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    if (!*v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 755);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
LABEL_4:
  sub_10003A610(v3);
  sub_10003D9EC((uint64_t *)(a1 + 16));
  return a1;
}

void sub_10003C5DC(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  sub_1000015C4(a1);
}

void sub_10003C600(uint64_t a1)
{
  sub_10003C544(a1);
  operator delete();
}

uint64_t sub_10003C638(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4sub_10002F6CC(&a9, 0) = a2;
  return result;
}

void *sub_10003C640()
{
  if (atomic_load_explicit(dword_1000B58F0, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B58F0);
  }
  return &unk_1000B6828;
}

unsigned __int8 *sub_10003C67C(uint64_t a1)
{
  float result = sub_10003D4F4((unsigned __int8 *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(unsigned char **)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_10003C6D0(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v22 = a2;
  if ((sub_10003D228((uint64_t)a3, &v22, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v6 = v22 + 1;
      unsigned int v7 = *v22;
      if ((*v22 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0) {
        break;
      }
      long long v19 = (char *)sub_100070F68((uint64_t)v22, v8 - 128);
      uint64_t v22 = v19;
      if (!v19) {
        return 0;
      }
      uint64_t v6 = v19;
      unsigned int v7 = v20;
LABEL_7:
      if (v7 == 10)
      {
        uint64_t v11 = v6 - 1;
        while (1)
        {
          int v12 = (unsigned __int8 *)(v11 + 1);
          uint64_t v22 = v11 + 1;
          int v13 = *(int **)(a1 + 32);
          if (!v13) {
            break;
          }
          uint64_t v14 = *(int *)(a1 + 24);
          int v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 28))
            {
LABEL_22:
              sub_10007E8E4(a1 + 16, v15 + 1);
              int v13 = *(int **)(a1 + 32);
              int v15 = *v13;
            }
            int *v13 = v15 + 1;
            uint64_t v16 = sub_10003CF64(*(void *)(a1 + 16));
            uint64_t v17 = *(void *)(a1 + 32);
            uint64_t v18 = *(int *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v18 + 1;
            *(void *)(v17 + 8 * v18 + 8) = v16;
            int v12 = (unsigned __int8 *)v22;
            goto LABEL_24;
          }
          *(_DWORD *)(a1 + 24) = v14 + 1;
          uint64_t v16 = *(void *)&v13[2 * v14 + 2];
LABEL_24:
          uint64_t v11 = (char *)sub_10003C8B0(a3, v16, v12);
          uint64_t v22 = v11;
          if (!v11) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
            goto LABEL_27;
          }
        }
        int v15 = *(_DWORD *)(a1 + 28);
        goto LABEL_22;
      }
      if (v7) {
        BOOL v9 = (v7 & 7) == 4;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v22;
      }
      if (*v5)
      {
        long long v10 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        long long v10 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
        uint64_t v6 = v22;
      }
      uint64_t v22 = (char *)sub_10007157C(v7, v10, v6, a3);
      if (!v22) {
        return 0;
      }
LABEL_27:
      if (sub_10003D228((uint64_t)a3, &v22, a3[11].i32[1])) {
        return v22;
      }
    }
    uint64_t v6 = v22 + 2;
LABEL_6:
    uint64_t v22 = v6;
    goto LABEL_7;
  }
  return v22;
}

uint64_t sub_10003C8B0(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_100070FAC((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_10003D694((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_10003B934(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_10003C978(uint64_t a1, char *__dst, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst) {
        long long __dst = sub_100051170((uint64_t)a3, __dst);
      }
      uint64_t v8 = sub_10002E53C(a1 + 16, i);
      *long long __dst = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        __dst[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          unsigned int v10 = __dst + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          __dst[2] = v11;
          unsigned int v10 = __dst + 3;
        }
      }
      else
      {
        __dst[1] = v9;
        unsigned int v10 = __dst + 2;
      }
      long long __dst = sub_10003BCB4(v8, v10, a3);
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return __dst;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    uint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (void)__dst) >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(__dst, v17, (int)v18);
    __dst += v19;
    return __dst;
  }
  return sub_100051284((uint64_t *)a3, (char *)v17, v18, (unint64_t)__dst);
}

uint64_t sub_10003CAF4(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    unint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_10003BEA8(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v2 += v11;
  }
  *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = v2;
  return v2;
}

void sub_10003CBA0(uint64_t a1, void *lpsrc)
{
  sub_10003CC28(a1, (uint64_t)lpsrc);
}

void sub_10003CC28(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_100051E5C((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 877);
    unint64_t v4 = sub_100051E74(v14, "CHECK failed: (&from) != (this): ");
    sub_100051FB0((uint64_t)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v14);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      unsigned int v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unsigned int v9 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_10003DAA8(a1 + 16, a2 + 16);
}

void sub_10003CCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003CD0C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_10003C67C(a1);
    sub_10003CC28(a1, a2);
  }
}

BOOL sub_10003CD58(uint64_t a1)
{
  return sub_10003CD60(a1 + 16);
}

BOOL sub_10003CD60(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_10002E53C(a1, v2);
    if (!sub_10005D28C(v5 + 16)) {
      break;
    }
  }
  while (sub_10003C21C(v5 + 48));
  return v3 < 1;
}

double sub_10003CDC8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (unint64_t *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      unint64_t v7 = sub_10003D368((unint64_t *)(a2 + 8));
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_5:
    unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_12:
    unint64_t v8 = sub_10003D368(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  *(void *)&double result = sub_10003D900((void *)(a1 + 16), a2 + 16).n128_u64[0];
  return result;
}

void *sub_10003CE84@<X0>(void *a1@<X8>)
{
  return sub_10000A1B4(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t sub_10003CE94(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  uint64_t v2 = sub_10004E520(a1, 80);
  }
  sub_10003A2CC(v2, a1);
  return v2;
}

void sub_10003CF40()
{
}

uint64_t sub_10003CF64(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  uint64_t v2 = sub_10004E520(a1, 88);
  }
  sub_10003B4F8(v2, a1);
  return v2;
}

void sub_10003D010()
{
}

uint64_t sub_10003D034(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  uint64_t v2 = sub_10004E520(a1, 48);
  }
  sub_10003C3DC(v2, a1);
  return v2;
}

void sub_10003D0E0()
{
}

uint64_t sub_10003D104()
{
  return sub_10003CE94(0);
}

uint64_t sub_10003D10C(uint64_t a1, uint64_t a2)
{
  return sub_10003CE94(a2);
}

uint64_t sub_10003D114(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_10003D11C()
{
  return 0;
}

uint64_t sub_10003D124()
{
  return sub_10003CF64(0);
}

uint64_t sub_10003D12C(uint64_t a1, uint64_t a2)
{
  return sub_10003CF64(a2);
}

uint64_t sub_10003D134(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_10003D13C()
{
  return sub_10003D034(0);
}

uint64_t sub_10003D144(uint64_t a1, uint64_t a2)
{
  return sub_10003D034(a2);
}

uint64_t sub_10003D14C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_10003D154(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 363);
    int v3 = sub_100051E74(v6, "CHECK failed: !tagged_ptr_.IsTagged(): ");
    sub_100051FB0((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v6);
    uint64_t result = *a1;
  }
  if (!result)
  {
    sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 364);
    unint64_t v4 = sub_100051E74(v6, "CHECK failed: tagged_ptr_.UnsafeGet() != nullptr: ");
    sub_100051FB0((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v6);
    return *a1;
  }
  return result;
}

void sub_10003D208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D228(uint64_t a1, char **a2, int a3)
{
  uint64_t v6 = *a2;
  if (!*a2)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 209);
    unint64_t v7 = sub_100051E74(v13, "CHECK failed: *ptr: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
    uint64_t v6 = *a2;
  }
  if ((unint64_t)v6 < *(void *)a1) {
    return 0;
  }
  signed int v9 = v6 - *(_DWORD *)(a1 + 8);
  if (v9 >= 17)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 212);
    long long v10 = sub_100051E74(v13, "CHECK failed: (overrun) <= (kSlopBytes): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 28) == v9)
  {
    if (v9 >= 1 && !*(void *)(a1 + 16)) {
      *a2 = 0;
    }
    return 1;
  }
  else
  {
    *a2 = sub_10007045C(a1, v9, a3);
    return v11 & 1;
  }
}

void sub_10003D348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10003D368(unint64_t *a1)
{
  unint64_t v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) == 0)
  {
    if (v2) {
      goto LABEL_3;
    }
LABEL_7:
    operator new();
  }
  unint64_t v2 = *(void *)v2;
  if (!v2) {
    goto LABEL_7;
  }
LABEL_3:
  if (*(unsigned char *)(v2 + 24)) {
  unint64_t v3 = sub_10004DFA4((void *)v2, 0x20uLL, (uint64_t)sub_10003D430);
  }
  *(_OWORD *)unint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3 | 1;
  *(void *)unint64_t v3 = v2;
  return v3 + 8;
}

void sub_10003D430(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

unsigned __int8 *sub_10003D444(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_100051E74(v7, "CHECK failed: (n) >= (0): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_100051FB8((uint64_t)v7);
  }
  else if (v1)
  {
    unint64_t v2 = result;
    unint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_10003A70C(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_10003D4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10003D4F4(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_100051E74(v7, "CHECK failed: (n) >= (0): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_100051FB8((uint64_t)v7);
  }
  else if (v1)
  {
    unint64_t v2 = result;
    unint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_10003B8A0(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_10003D58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003D5A4(uint64_t *a1)
{
  sub_10003D5E0(a1);
  return sub_10003D660(a1);
}

void sub_10003D5E0(void *a1)
{
  unint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sub_10003A4AC(*v3);
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      unint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t *sub_10003D660(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    sub_10004DA88(v2);
  }
  return a1;
}

uint64_t sub_10003D694(uint64_t a1, int a2, unsigned int a3)
{
  if (a3 >= 0x7FFFFFF0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 128);
    char v6 = sub_100051E74(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = a2 - v7 + a3;
  *(void *)a1 = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v8;
  return (v7 - v8);
}

void sub_10003D738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003D750(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_100051E74(v11, "CHECK failed: (&other) != (this): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    uint64_t v7 = (uint64_t *)sub_10007F4D8((uint64_t *)a1, v5);
    sub_10003D840((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    signed int v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
}

void sub_10003D828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003D840(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    char v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_10003D8F0(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    uint64_t v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = sub_10003CE94(v18);
      sub_10003D8F0(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_10003D8F0(uint64_t a1, uint64_t a2)
{
}

__n128 sub_10003D900(void *a1, uint64_t a2)
{
  if (a1 == (void *)a2)
  {
    sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 2590);
    uint64_t v4 = sub_100051E74(v10, "CHECK failed: this != other: ");
    sub_100051FB0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v10);
  }
  if (*a1 != *(void *)a2)
  {
    sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 2591);
    unsigned int v5 = sub_100051E74(v10, "CHECK failed: GetArena() == other->GetArena(): ");
    sub_100051FB0((uint64_t)&v9, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v10);
  }
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 1) = result;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7;
  return result;
}

void sub_10003D9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003D9EC(uint64_t *a1)
{
  sub_10003DA28(a1);
  return sub_10003D660(a1);
}

void sub_10003DA28(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sub_10003B704(*v3);
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_10003DAA8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_100051E74(v11, "CHECK failed: (&other) != (this): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    uint64_t v7 = (uint64_t *)sub_10007F4D8((uint64_t *)a1, v5);
    sub_10003DB98((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    char v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
}

void sub_10003DB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003DB98(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    char v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_10003DC48(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    uint64_t v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = sub_10003CF64(v18);
      sub_10003DC48(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_10003DC48(uint64_t a1, uint64_t a2)
{
}

void sub_10003DC58()
{
  __assert_rtn("down_cast", "casts.h", 94, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void sub_10003DC84()
{
  sub_100051AF0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_100045F5C((uint64_t)&unk_1000B6AA8, 0);
  sub_10006FB0C((uint64_t)sub_100065D5C, (uint64_t)&unk_1000B6AA8);
}

void sub_10003DCF4()
{
  sub_100051AF0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_1000452A4(qword_1000B6A68, 0);
  sub_10006FB0C((uint64_t)sub_100065D5C, (uint64_t)qword_1000B6A68);
}

void sub_10003DD64()
{
  sub_100051AF0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_10004296C((uint64_t)&unk_1000B69A0, 0);
  sub_10006FB0C((uint64_t)sub_100065D5C, (uint64_t)&unk_1000B69A0);
}

void sub_10003DDD4()
{
  sub_100051AF0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_10004478C((uint64_t)&unk_1000B6A20, 0);
  sub_10006FB0C((uint64_t)sub_100065D5C, (uint64_t)&unk_1000B6A20);
}

void sub_10003DE44()
{
  sub_100051AF0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_100043C30(qword_1000B69F8, 0);
  sub_10006FB0C((uint64_t)sub_100065D5C, (uint64_t)qword_1000B69F8);
}

void sub_10003DEB4()
{
  sub_100051AF0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_10003E1CC((uint64_t)&unk_1000B6858, 0);
  sub_10006FB0C((uint64_t)sub_100065D5C, (uint64_t)&unk_1000B6858);
}

BOOL sub_10003DF24(int a1)
{
  return (a1 - 1) < 4;
}

uint64_t *sub_10003DF34(int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000B65F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000B65F8))
  {
    byte_1000B65F0 = sub_100065CDC((uint64_t)&off_1000ADC48, dword_1000916C0, 4, qword_1000B6600);
    __cxa_guard_release(&qword_1000B65F8);
  }
  int v2 = sub_100065C5C((uint64_t)&off_1000ADC48, dword_1000916C0, 4uLL, a1);
  if (v2 != -1) {
    return &qword_1000B6600[3 * v2];
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)byte_1000B6BA0, memory_order_acquire) & 1) == 0) {
    sub_100065D94();
  }
  return &qword_1000B6B88;
}

void sub_10003E004(_Unwind_Exception *a1)
{
}

uint64_t sub_10003E01C(uint64_t *a1, _DWORD *a2)
{
  int v5 = 0;
  sub_100048934(v4, a1);
  uint64_t result = sub_100065B64((uint64_t)&off_1000ADC48, 4uLL, v4[0], (int64_t)v4[1], &v5);
  if (result) {
    *a2 = v5;
  }
  return result;
}

BOOL sub_10003E078(int a1)
{
  return (a1 - 1) < 6;
}

uint64_t *sub_10003E088(int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000B6668, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000B6668))
  {
    byte_1000B6660 = sub_100065CDC((uint64_t)&off_1000ADCA8, dword_1000916D0, 6, qword_1000B6670);
    __cxa_guard_release(&qword_1000B6668);
  }
  int v2 = sub_100065C5C((uint64_t)&off_1000ADCA8, dword_1000916D0, 6uLL, a1);
  if (v2 != -1) {
    return &qword_1000B6670[3 * v2];
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)byte_1000B6BA0, memory_order_acquire) & 1) == 0) {
    sub_100065D94();
  }
  return &qword_1000B6B88;
}

void sub_10003E158(_Unwind_Exception *a1)
{
}

uint64_t sub_10003E170(uint64_t *a1, _DWORD *a2)
{
  int v5 = 0;
  sub_100048934(v4, a1);
  uint64_t result = sub_100065B64((uint64_t)&off_1000ADCA8, 6uLL, v4[0], (int64_t)v4[1], &v5);
  if (result) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_10003E1CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000AD6C8;
  *(void *)(a1 + 8) = a2;
  sub_100053488(a1 + 16, a2);
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = 0;
  *(void *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_10002F6CC(&a9, 0) = a2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_10002F6CC(&a9, 0) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  if (atomic_load_explicit(dword_1000B59E8, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B59E8);
  }
  *(void *)(a1 + 152) = &qword_1000B6B88;
  *(void *)(a1 + 16sub_10002F6CC(&a9, 0) = &qword_1000B6B88;
  *(void *)(a1 + 168) = &qword_1000B6B88;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = &qword_1000B6B88;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24sub_10002F6CC(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0x1F4000000001;
  *(void *)(a1 + 28sub_10002F6CC(&a9, 0) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 288) = 1061158912;
  *(_OWORD *)(a1 + 292) = xmmword_1000916B0;
  *(_DWORD *)(a1 + 308) = 16843009;
  *(_WORD *)(a1 + 312) = 257;
  *(_DWORD *)(a1 + 316) = 1;
  *(void *)(a1 + 32sub_10002F6CC(&a9, 0) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_10003E308(_Unwind_Exception *a1)
{
  sub_10007DF18(v3);
  sub_10007DF18(v5);
  sub_10007DF18(v4);
  sub_10007DF18(v2);
  sub_100053584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E340(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (unint64_t *)(a1 + 8);
  *(void *)a1 = off_1000AD6C8;
  uint64_t v5 = a1 + 16;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  sub_100048C9C(a1 + 56, a2 + 56);
  *(void *)(a1 + 8sub_10002F6CC(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_100048C9C(a1 + 80, a2 + 80);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_10002F6CC(&a9, 0) = 0;
  sub_100048C9C(a1 + 104, a2 + 104);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_100048C9C(a1 + 128, a2 + 128);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    if (*v4) {
      uint64_t v7 = (std::string *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v7 = (std::string *)sub_10003D368(v4);
    }
    int v8 = *(char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    if (v8 >= 0) {
      char v9 = (const std::string::value_type *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      char v9 = *(const std::string::value_type **)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    }
    else {
      std::string::size_type v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16);
    }
    std::string::append(v7, v9, v10);
  }
  sub_10005BC28(v5, a2 + 16);
  *(void *)(a1 + 152) = &qword_1000B6B88;
  int v11 = *(_DWORD *)(a2 + 40);
  if (v11)
  {
    char v12 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      char v12 = (void *)*v12;
    }
    sub_10004E9D8((uint64_t *)(a1 + 152), (long long *)(*(void *)(a2 + 152) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v12);
    int v11 = *(_DWORD *)(a2 + 40);
  }
  *(void *)(a1 + 16sub_10002F6CC(&a9, 0) = &qword_1000B6B88;
  if ((v11 & 2) != 0)
  {
    uint64_t v13 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      uint64_t v13 = (void *)*v13;
    }
    sub_10004E9D8((uint64_t *)(a1 + 160), (long long *)(*(void *)(a2 + 160) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v13);
    int v11 = *(_DWORD *)(a2 + 40);
  }
  *(void *)(a1 + 168) = &qword_1000B6B88;
  if ((v11 & 4) != 0)
  {
    uint64_t v14 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      uint64_t v14 = (void *)*v14;
    }
    sub_10004E9D8((uint64_t *)(a1 + 168), (long long *)(*(void *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v14);
    int v11 = *(_DWORD *)(a2 + 40);
  }
  *(void *)(a1 + 176) = 0;
  if ((v11 & 8) != 0)
  {
    uint64_t v15 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      uint64_t v15 = (void *)*v15;
    }
    sub_10004EA00((uint64_t *)(a1 + 176), (long long *)(*(void *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v15);
    int v11 = *(_DWORD *)(a2 + 40);
  }
  *(void *)(a1 + 184) = 0;
  if ((v11 & 0x10) != 0)
  {
    BOOL v16 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      BOOL v16 = (void *)*v16;
    }
    sub_10004EA00((uint64_t *)(a1 + 184), (long long *)(*(void *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v16);
    int v11 = *(_DWORD *)(a2 + 40);
  }
  *(void *)(a1 + 192) = 0;
  if ((v11 & 0x20) != 0)
  {
    int v17 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      int v17 = (void *)*v17;
    }
    sub_10004EA00((uint64_t *)(a1 + 192), (long long *)(*(void *)(a2 + 192) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v17);
    int v11 = *(_DWORD *)(a2 + 40);
  }
  *(void *)(a1 + 20sub_10002F6CC(&a9, 0) = 0;
  if ((v11 & 0x40) != 0)
  {
    uint64_t v18 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      uint64_t v18 = (void *)*v18;
    }
    sub_10004EA00((uint64_t *)(a1 + 200), (long long *)(*(void *)(a2 + 200) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v18);
    int v11 = *(_DWORD *)(a2 + 40);
  }
  *(void *)(a1 + 208) = 0;
  if ((v11 & 0x80) != 0)
  {
    uint64_t v19 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      uint64_t v19 = (void *)*v19;
    }
    sub_10004EA00((uint64_t *)(a1 + 208), (long long *)(*(void *)(a2 + 208) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v19);
    int v11 = *(_DWORD *)(a2 + 40);
  }
  *(void *)(a1 + 216) = &qword_1000B6B88;
  if ((v11 & 0x100) != 0)
  {
    unsigned int v20 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      unsigned int v20 = (void *)*v20;
    }
    sub_10004E9D8((uint64_t *)(a1 + 216), (long long *)(*(void *)(a2 + 216) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v20);
  }
  long long v21 = *(_OWORD *)(a2 + 224);
  long long v22 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 24sub_10002F6CC(&a9, 0) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 224) = v21;
  long long v23 = *(_OWORD *)(a2 + 272);
  long long v24 = *(_OWORD *)(a2 + 288);
  long long v25 = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 32sub_10002F6CC(&a9, 0) = *(void *)(a2 + 320);
  *(_OWORD *)(a1 + 288) = v24;
  *(_OWORD *)(a1 + 304) = v25;
  *(_OWORD *)(a1 + 272) = v23;
  return a1;
}

void sub_10003E65C(_Unwind_Exception *a1)
{
  sub_10003D660(v5);
  sub_10007DF18(v4);
  sub_10007DF18(v3);
  sub_10007DF18(v2);
  sub_100053584(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003E6D4(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_10003E730(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 519);
    uint64_t v4 = sub_100051E74(v18, "CHECK failed: GetArena() == nullptr: ");
    sub_100051FB0((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v18);
  }
LABEL_4:
  if ((uint64_t *)a1[19] != &qword_1000B6B88)
  {
    uint64_t v5 = sub_10003D154(a1 + 19);
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    operator delete();
  }
  if ((uint64_t *)a1[20] != &qword_1000B6B88)
  {
    uint64_t v6 = sub_10003D154(a1 + 20);
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    operator delete();
  }
  if ((uint64_t *)a1[21] != &qword_1000B6B88)
  {
    uint64_t v7 = sub_10003D154(a1 + 21);
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    operator delete();
  }
  if (a1[22])
  {
    uint64_t v8 = sub_10003D154(a1 + 22);
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    operator delete();
  }
  if (a1[23])
  {
    uint64_t v9 = sub_10003D154(a1 + 23);
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    operator delete();
  }
  if (a1[24])
  {
    uint64_t v10 = sub_10003D154(a1 + 24);
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    operator delete();
  }
  if (a1[25])
  {
    uint64_t v11 = sub_10003D154(a1 + 25);
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    operator delete();
  }
  uint64_t result = a1 + 26;
  if (a1[26])
  {
    uint64_t v13 = sub_10003D154(result);
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    operator delete();
  }
  uint64_t v15 = (uint64_t *)a1[27];
  uint64_t v14 = a1 + 27;
  if (v15 != &qword_1000B6B88)
  {
    uint64_t v16 = sub_10003D154(v14);
    if (*(char *)(v16 + 23) < 0) {
      operator delete(*(void **)v16);
    }
    operator delete();
  }
  return result;
}

void sub_10003E9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003EA08(uint64_t *a1)
{
  sub_10003E6D4(a1);
  operator delete();
}

uint64_t sub_10003EA40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

void *sub_10003EA48()
{
  if (atomic_load_explicit(dword_1000B59E8, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B59E8);
  }
  return &unk_1000B6858;
}

uint64_t sub_10003EA84(uint64_t a1)
{
  sub_10005BB88((unsigned __int8 *)(a1 + 16));
  sub_100048998(a1 + 56);
  sub_100048998(a1 + 80);
  sub_100048998(a1 + 104);
  uint64_t result = sub_100048998(a1 + 128);
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v3) {
    goto LABEL_10;
  }
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_16;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_16;
      }
    }
LABEL_4:
    if ((v3 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_20:
    unint64_t v6 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      if ((v3 & 8) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
      if ((v3 & 8) != 0) {
        goto LABEL_24;
      }
    }
LABEL_6:
    if ((v3 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
  if ((v3 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_16:
  unint64_t v5 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v3 & 4) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    if ((v3 & 4) != 0) {
      goto LABEL_20;
    }
  }
LABEL_5:
  if ((v3 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_24:
  uint64_t result = (uint64_t)sub_10004F17C((std::string *)(a1 + 176), &off_1000B5A80);
  if ((v3 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = (uint64_t)sub_10004F17C((std::string *)(a1 + 184), &off_1000B5A00);
  if ((v3 & 0x20) == 0)
  {
LABEL_8:
    if ((v3 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = (uint64_t)sub_10004F17C((std::string *)(a1 + 192), &off_1000B5A20);
  if ((v3 & 0x40) != 0)
  {
LABEL_27:
    uint64_t result = (uint64_t)sub_10004F17C((std::string *)(a1 + 200), &off_1000B5A40);
    if ((v3 & 0x80) != 0) {
      goto LABEL_28;
    }
LABEL_10:
    if ((v3 & 0x100) == 0) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
LABEL_9:
  if ((v3 & 0x80) == 0) {
    goto LABEL_10;
  }
LABEL_28:
  uint64_t result = (uint64_t)sub_10004F17C((std::string *)(a1 + 208), &off_1000B5A60);
  if ((v3 & 0x100) == 0) {
    goto LABEL_32;
  }
LABEL_29:
  unint64_t v7 = *(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v7 + 23) < 0)
  {
    **(unsigned char **)unint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
  }
  else
  {
    *(unsigned char *)unint64_t v7 = 0;
    *(unsigned char *)(v7 + 23) = 0;
  }
LABEL_32:
  if ((v3 & 0xFE00) != 0)
  {
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 239) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    *(void *)(a1 + 247) = 0;
    *(unsigned char *)(a1 + 271) = 0;
    *(void *)(a1 + 255) = 0;
    *(void *)(a1 + 263) = 0;
    *(_DWORD *)(a1 + 272) = 1;
  }
  if (HIBYTE(v3))
  {
    *(void *)(a1 + 276) = 0x3F7FDF3B00001F40;
    *(void *)(a1 + 284) = 0x3F400000000F4240;
    *(_OWORD *)(a1 + 292) = xmmword_1000916B0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    *(_WORD *)(a1 + 312) = 257;
    *(_DWORD *)(a1 + 308) = 16843009;
    *(void *)(a1 + 316) = 0x200000001;
  }
  *(_DWORD *)(a1 + 324) = -1;
  *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 31) < 0)
    {
      **(unsigned char **)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v9 + 8) = 0;
      *(unsigned char *)(v9 + 31) = 0;
    }
  }
  return result;
}

char *sub_10003ED4C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)v188 = a2;
  char v5 = sub_10003D228((uint64_t)a3, (char **)v188, a3[11].i32[1]);
  uint64_t result = *(char **)v188;
  if (v5) {
    return result;
  }
  v187 = (unint64_t *)(a1 + 8);
  unint64_t v7 = (uint64_t *)(a1 + 128);
  uint64_t v8 = (uint64_t *)(a1 + 104);
  unint64_t v9 = (uint64_t *)(a1 + 80);
  uint64_t v10 = (uint64_t *)(a1 + 56);
  while (2)
  {
    uint64_t v11 = result + 1;
    unsigned int v12 = *result;
    if ((*result & 0x80000000) == 0) {
      goto LABEL_7;
    }
    unsigned int v13 = v12 + (*v11 << 7);
    unsigned int v12 = v13 - 128;
    if ((*v11 & 0x80000000) == 0)
    {
      uint64_t v11 = result + 2;
LABEL_7:
      *(void *)v188 = v11;
      goto LABEL_8;
    }
    uint64_t result = (char *)sub_100070F68((uint64_t)result, v13 - 128);
    *(void *)v188 = result;
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    unsigned int v12 = v22;
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 1;
        while (2)
        {
          uint64_t v14 = result + 1;
          *(void *)v188 = result + 1;
          uint64_t v15 = *(int **)(a1 + 72);
          if (!v15)
          {
            int v17 = *(_DWORD *)(a1 + 68);
LABEL_16:
            sub_10007E8E4(a1 + 56, v17 + 1);
            uint64_t v15 = *(int **)(a1 + 72);
            int v17 = *v15;
            goto LABEL_17;
          }
          uint64_t v16 = *(int *)(a1 + 64);
          int v17 = *v15;
          if ((int)v16 < *v15)
          {
            *(_DWORD *)(a1 + 64) = v16 + 1;
            uint64_t v18 = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_22;
          }
          if (v17 == *(_DWORD *)(a1 + 68)) {
            goto LABEL_16;
          }
LABEL_17:
          *uint64_t v15 = v17 + 1;
          uint64_t v19 = *v10;
          if (!*v10) {
            operator new();
          }
          if (*(unsigned char *)(v19 + 24)) {
          uint64_t v18 = (std::string *)sub_10004DFA4((void *)v19, 0x18uLL, (uint64_t)sub_100048840);
          }
          v18->__r_.__value_.__r.__words[0] = 0;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          uint64_t v20 = *(void *)(a1 + 72);
          uint64_t v21 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v21 + 1;
          *(void *)(v20 + 8 * v21 + 8) = v18;
          uint64_t v14 = *(char **)v188;
LABEL_22:
          uint64_t result = (char *)sub_100071098(v18, v14, (uint64_t)a3);
          *(void *)v188 = result;
          if (result)
          {
            if (*(void *)a3 <= (unint64_t)result || *result != 10) {
              goto LABEL_273;
            }
            continue;
          }
          return result;
        }
      case 2u:
        if (v12 != 18) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v23 = *(void *)(a1 + 8);
        long long v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if (v23) {
          long long v24 = (void *)*v24;
        }
        long long v25 = (uint64_t *)(a1 + 152);
        goto LABEL_265;
      case 3u:
        if (v12 != 24) {
          goto LABEL_275;
        }
        uint64_t v26 = v11 + 1;
        unint64_t v27 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_36;
        }
        int v28 = *v26;
        int v29 = v27 + (v28 << 7);
        unint64_t v27 = (v29 - 128);
        if (v28 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, (v29 - 128));
          *(void *)v188 = result;
          if (!result) {
            return result;
          }
          unint64_t v27 = v157;
        }
        else
        {
          uint64_t v26 = v11 + 2;
LABEL_36:
          *(void *)v188 = v26;
        }
        if ((v27 - 1) > 3)
        {
          if (*v187) {
            v186 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            v186 = (std::string *)sub_10003D368(v187);
          }
          sub_100070D48(3, v27, v186);
        }
        else
        {
          *(_DWORD *)(a1 + 40) |= 0x800000u;
          *(_DWORD *)(a1 + 272) = v27;
        }
        goto LABEL_273;
      case 4u:
        if (v12 != 32) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x1000000u;
        int v31 = v11 + 1;
        LODWORD(v3sub_10002F6CC(&a9, 0) = *v11;
        if ((v30 & 0x80) == 0) {
          goto LABEL_43;
        }
        int v32 = *v31;
        uint64_t v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v30);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 276) = v158;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v31 = v11 + 2;
LABEL_43:
          *(void *)v188 = v31;
          *(_DWORD *)(a1 + 276) = v30;
        }
        goto LABEL_273;
      case 5u:
        if (v12 != 42) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 1;
        while (1)
        {
          int v33 = result + 1;
          *(void *)v188 = result + 1;
          uint64_t v34 = *(int **)(a1 + 96);
          if (!v34) {
            break;
          }
          uint64_t v35 = *(int *)(a1 + 88);
          int v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *(_DWORD *)(a1 + 92))
            {
LABEL_51:
              sub_10007E8E4(a1 + 80, v36 + 1);
              uint64_t v34 = *(int **)(a1 + 96);
              int v36 = *v34;
            }
            *uint64_t v34 = v36 + 1;
            uint64_t v38 = *v9;
            if (!*v9) {
              operator new();
            }
            if (*(unsigned char *)(v38 + 24)) {
            int v37 = (std::string *)sub_10004DFA4((void *)v38, 0x18uLL, (uint64_t)sub_100048840);
            }
            v37->__r_.__value_.__r.__words[0] = 0;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            uint64_t v39 = *(void *)(a1 + 96);
            uint64_t v40 = *(int *)(a1 + 88);
            *(_DWORD *)(a1 + 88) = v40 + 1;
            *(void *)(v39 + 8 * v40 + 8) = v37;
            int v33 = *(char **)v188;
            goto LABEL_57;
          }
          *(_DWORD *)(a1 + 88) = v35 + 1;
          int v37 = *(std::string **)&v34[2 * v35 + 2];
LABEL_57:
          uint64_t result = (char *)sub_100071098(v37, v33, (uint64_t)a3);
          *(void *)v188 = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *result != 42) {
            goto LABEL_273;
          }
        }
        int v36 = *(_DWORD *)(a1 + 92);
        goto LABEL_51;
      case 6u:
        if (v12 != 48) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x200u;
        uint64_t v42 = v11 + 1;
        LODWORD(v41) = *v11;
        if ((v41 & 0x80) == 0) {
          goto LABEL_65;
        }
        int v43 = *v42;
        uint64_t v41 = v41 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v41);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 224) = v159;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v42 = v11 + 2;
LABEL_65:
          *(void *)v188 = v42;
          *(_DWORD *)(a1 + 224) = v41;
        }
        goto LABEL_273;
      case 7u:
        if (v12 != 58) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        uint64_t v44 = *(void *)(a1 + 8);
        long long v24 = (void *)(v44 & 0xFFFFFFFFFFFFFFFELL);
        if (v44) {
          long long v24 = (void *)*v24;
        }
        long long v25 = (uint64_t *)(a1 + 160);
        goto LABEL_265;
      case 0xAu:
        if (v12 != 85) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x2000000u;
        int v46 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 28sub_10002F6CC(&a9, 0) = v46;
        goto LABEL_255;
      case 0xBu:
        if (v12 != 88) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x800u;
        uint64_t v47 = v11 + 1;
        uint64_t v48 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_76;
        }
        int v49 = *v47;
        uint64_t v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v48);
          *(void *)v188 = result;
          *(void *)(a1 + 232) = v160;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v47 = v11 + 2;
LABEL_76:
          *(void *)v188 = v47;
          *(void *)(a1 + 232) = v48;
        }
        goto LABEL_273;
      case 0xCu:
        if (v12 != 96) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x400u;
        uint64_t v51 = v11 + 1;
        LODWORD(v5sub_10002F6CC(&a9, 0) = *v11;
        if ((v50 & 0x80) == 0) {
          goto LABEL_81;
        }
        int v52 = *v51;
        uint64_t v50 = v50 + (v52 << 7) - 128;
        if (v52 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v50);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 228) = v161;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v51 = v11 + 2;
LABEL_81:
          *(void *)v188 = v51;
          *(_DWORD *)(a1 + 228) = v50;
        }
        goto LABEL_273;
      case 0xDu:
        if (v12 != 104) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x1000u;
        long long v54 = v11 + 1;
        LODWORD(v53) = *v11;
        if ((v53 & 0x80) == 0) {
          goto LABEL_86;
        }
        int v55 = *v54;
        uint64_t v53 = v53 + (v55 << 7) - 128;
        if (v55 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v53);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 24sub_10002F6CC(&a9, 0) = v162;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v54 = v11 + 2;
LABEL_86:
          *(void *)v188 = v54;
          *(_DWORD *)(a1 + 24sub_10002F6CC(&a9, 0) = v53;
        }
        goto LABEL_273;
      case 0xEu:
        if (v12 != 112) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x4000000u;
        unint64_t v57 = v11 + 1;
        LODWORD(v56) = *v11;
        if ((v56 & 0x80) == 0) {
          goto LABEL_91;
        }
        int v58 = *v57;
        uint64_t v56 = v56 + (v58 << 7) - 128;
        if (v58 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v56);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 284) = v163;
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t v57 = v11 + 2;
LABEL_91:
          *(void *)v188 = v57;
          *(_DWORD *)(a1 + 284) = v56;
        }
        goto LABEL_273;
      case 0xFu:
        if (v12 != 125) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x8000000u;
        int v59 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 288) = v59;
        goto LABEL_255;
      case 0x10u:
        if (v12 != 128) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10000000u;
        uint64_t v61 = v11 + 1;
        LODWORD(v6sub_10002F6CC(&a9, 0) = *v11;
        if ((v60 & 0x80) == 0) {
          goto LABEL_98;
        }
        int v62 = *v61;
        uint64_t v60 = v60 + (v62 << 7) - 128;
        if (v62 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v60);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 292) = v164;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v61 = v11 + 2;
LABEL_98:
          *(void *)v188 = v61;
          *(_DWORD *)(a1 + 292) = v60;
        }
        goto LABEL_273;
      case 0x11u:
        if (v12 != 136) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20000000u;
        float v64 = v11 + 1;
        LODWORD(v63) = *v11;
        if ((v63 & 0x80) == 0) {
          goto LABEL_103;
        }
        int v65 = *v64;
        uint64_t v63 = v63 + (v65 << 7) - 128;
        if (v65 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v63);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 296) = v165;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v64 = v11 + 2;
LABEL_103:
          *(void *)v188 = v64;
          *(_DWORD *)(a1 + 296) = v63;
        }
        goto LABEL_273;
      case 0x12u:
        if (v12 != 144) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40000000u;
        long long v67 = v11 + 1;
        LODWORD(v66) = *v11;
        if ((v66 & 0x80) == 0) {
          goto LABEL_108;
        }
        int v68 = *v67;
        uint64_t v66 = v66 + (v68 << 7) - 128;
        if (v68 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v66);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 30sub_10002F6CC(&a9, 0) = v166;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v67 = v11 + 2;
LABEL_108:
          *(void *)v188 = v67;
          *(_DWORD *)(a1 + 30sub_10002F6CC(&a9, 0) = v66;
        }
        goto LABEL_273;
      case 0x13u:
        if (v12 != 152) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        float v69 = v11 + 1;
        uint64_t v70 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_113;
        }
        int v71 = *v69;
        uint64_t v70 = v70 + (v71 << 7) - 128;
        if (v71 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v70);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 308) = v167 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v69 = v11 + 2;
LABEL_113:
          *(void *)v188 = v69;
          *(unsigned char *)(a1 + 308) = v70 != 0;
        }
        goto LABEL_273;
      case 0x14u:
        if (v12 != 160) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80000000;
        uint64_t v73 = v11 + 1;
        LODWORD(v72) = *v11;
        if ((v72 & 0x80) == 0) {
          goto LABEL_118;
        }
        int v74 = *v73;
        uint64_t v72 = v72 + (v74 << 7) - 128;
        if (v74 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v72);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 304) = v168;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v73 = v11 + 2;
LABEL_118:
          *(void *)v188 = v73;
          *(_DWORD *)(a1 + 304) = v72;
        }
        goto LABEL_273;
      case 0x15u:
        if (v12 != 168) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 2u;
        float v75 = v11 + 1;
        uint64_t v76 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_123;
        }
        int v77 = *v75;
        uint64_t v76 = v76 + (v77 << 7) - 128;
        if (v77 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v76);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 309) = v169 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v75 = v11 + 2;
LABEL_123:
          *(void *)v188 = v75;
          *(unsigned char *)(a1 + 309) = v76 != 0;
        }
        goto LABEL_273;
      case 0x16u:
        if (v12 != 176) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 8u;
        uint64_t v78 = v11 + 1;
        uint64_t v79 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_128;
        }
        int v80 = *v78;
        uint64_t v79 = v79 + (v80 << 7) - 128;
        if (v80 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v79);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 311) = v170 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v78 = v11 + 2;
LABEL_128:
          *(void *)v188 = v78;
          *(unsigned char *)(a1 + 311) = v79 != 0;
        }
        goto LABEL_273;
      case 0x17u:
        if (v12 != 184) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 4u;
        uint64_t v81 = v11 + 1;
        uint64_t v82 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_133;
        }
        int v83 = *v81;
        uint64_t v82 = v82 + (v83 << 7) - 128;
        if (v83 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v82);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 31sub_10002F6CC(&a9, 0) = v171 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v81 = v11 + 2;
LABEL_133:
          *(void *)v188 = v81;
          *(unsigned char *)(a1 + 31sub_10002F6CC(&a9, 0) = v82 != 0;
        }
        goto LABEL_273;
      case 0x18u:
        if (v12 != 192) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x4000u;
        unint64_t v84 = v11 + 1;
        uint64_t v85 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_138;
        }
        int v86 = *v84;
        uint64_t v85 = v85 + (v86 << 7) - 128;
        if (v86 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v85);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 245) = v172 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t v84 = v11 + 2;
LABEL_138:
          *(void *)v188 = v84;
          *(unsigned char *)(a1 + 245) = v85 != 0;
        }
        goto LABEL_273;
      case 0x19u:
        if (v12 != 200) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10000u;
        uint64_t v87 = v11 + 1;
        uint64_t v88 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_143;
        }
        int v89 = *v87;
        uint64_t v88 = v88 + (v89 << 7) - 128;
        if (v89 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v88);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 247) = v173 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v87 = v11 + 2;
LABEL_143:
          *(void *)v188 = v87;
          *(unsigned char *)(a1 + 247) = v88 != 0;
        }
        goto LABEL_273;
      case 0x1Au:
        if (v12 != 208) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x8000u;
        long long v90 = v11 + 1;
        uint64_t v91 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_148;
        }
        int v92 = *v90;
        uint64_t v91 = v91 + (v92 << 7) - 128;
        if (v92 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v91);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 246) = v174 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v90 = v11 + 2;
LABEL_148:
          *(void *)v188 = v90;
          *(unsigned char *)(a1 + 246) = v91 != 0;
        }
        goto LABEL_273;
      case 0x1Eu:
        if (v12 != 242) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 2;
        while (1)
        {
          v93 = result + 2;
          *(void *)v188 = result + 2;
          uint64_t v94 = *(int **)(a1 + 120);
          if (!v94) {
            break;
          }
          uint64_t v95 = *(int *)(a1 + 112);
          int v96 = *v94;
          if ((int)v95 >= *v94)
          {
            if (v96 == *(_DWORD *)(a1 + 116))
            {
LABEL_156:
              sub_10007E8E4(a1 + 104, v96 + 1);
              uint64_t v94 = *(int **)(a1 + 120);
              int v96 = *v94;
            }
            *uint64_t v94 = v96 + 1;
            uint64_t v98 = *v8;
            if (!*v8) {
              operator new();
            }
            if (*(unsigned char *)(v98 + 24)) {
            float v97 = (std::string *)sub_10004DFA4((void *)v98, 0x18uLL, (uint64_t)sub_100048840);
            }
            v97->__r_.__value_.__r.__words[0] = 0;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            uint64_t v99 = *(void *)(a1 + 120);
            uint64_t v100 = *(int *)(a1 + 112);
            *(_DWORD *)(a1 + 112) = v100 + 1;
            *(void *)(v99 + 8 * v100 + 8) = v97;
            v93 = *(char **)v188;
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 112) = v95 + 1;
          float v97 = *(std::string **)&v94[2 * v95 + 2];
LABEL_162:
          uint64_t result = (char *)sub_100071098(v97, v93, (uint64_t)a3);
          *(void *)v188 = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 498) {
            goto LABEL_273;
          }
        }
        int v96 = *(_DWORD *)(a1 + 116);
        goto LABEL_156;
      case 0x1Fu:
        if (v12 != 250) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 2;
        break;
      case 0x20u:
        if ((_BYTE)v12) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x10u;
        v109 = v11 + 1;
        uint64_t v110 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_187;
        }
        int v111 = *v109;
        uint64_t v110 = v110 + (v111 << 7) - 128;
        if (v111 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v110);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 312) = v175 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          v109 = v11 + 2;
LABEL_187:
          *(void *)v188 = v109;
          *(unsigned char *)(a1 + 312) = v110 != 0;
        }
        goto LABEL_273;
      case 0x21u:
        if (v12 != 8) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x20u;
        long long v112 = v11 + 1;
        uint64_t v113 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_192;
        }
        int v114 = *v112;
        uint64_t v113 = v113 + (v114 << 7) - 128;
        if (v114 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v113);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 313) = v176 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v112 = v11 + 2;
LABEL_192:
          *(void *)v188 = v112;
          *(unsigned char *)(a1 + 313) = v113 != 0;
        }
        goto LABEL_273;
      case 0x22u:
        if (v12 != 16) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40000u;
        uint64_t v115 = v11 + 1;
        uint64_t v116 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_197;
        }
        int v117 = *v115;
        uint64_t v116 = v116 + (v117 << 7) - 128;
        if (v117 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v116);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 249) = v177 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v115 = v11 + 2;
LABEL_197:
          *(void *)v188 = v115;
          *(unsigned char *)(a1 + 249) = v116 != 0;
        }
        goto LABEL_273;
      case 0x23u:
        if (v12 != 24) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20000u;
        v118 = v11 + 1;
        uint64_t v119 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_202;
        }
        int v120 = *v118;
        uint64_t v119 = v119 + (v120 << 7) - 128;
        if (v120 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v119);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 248) = v178 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          v118 = v11 + 2;
LABEL_202:
          *(void *)v188 = v118;
          *(unsigned char *)(a1 + 248) = v119 != 0;
        }
        goto LABEL_273;
      case 0x24u:
        if (v12 != 34) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 4u;
        uint64_t v121 = *(void *)(a1 + 8);
        long long v24 = (void *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if (v121) {
          long long v24 = (void *)*v24;
        }
        long long v25 = (uint64_t *)(a1 + 168);
        goto LABEL_265;
      case 0x28u:
        if (v12 != 64) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x100000u;
        long long v123 = v11 + 1;
        LODWORD(v122) = *v11;
        if ((v122 & 0x80) == 0) {
          goto LABEL_211;
        }
        int v124 = *v123;
        uint64_t v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v122);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 252) = v179;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v123 = v11 + 2;
LABEL_211:
          *(void *)v188 = v123;
          *(_DWORD *)(a1 + 252) = v122;
        }
        goto LABEL_273;
      case 0x29u:
        if (v12 != 72) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x40u;
        long long v126 = v11 + 1;
        LODWORD(v125) = *v11;
        if ((v125 & 0x80) == 0) {
          goto LABEL_216;
        }
        int v127 = *v126;
        uint64_t v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v125);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 316) = v180;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v126 = v11 + 2;
LABEL_216:
          *(void *)v188 = v126;
          *(_DWORD *)(a1 + 316) = v125;
        }
        goto LABEL_273;
      case 0x2Au:
        if (v12 != 80) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x80u;
        v129 = v11 + 1;
        LODWORD(v128) = *v11;
        if ((v128 & 0x80) == 0) {
          goto LABEL_221;
        }
        int v130 = *v129;
        uint64_t v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v128);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 32sub_10002F6CC(&a9, 0) = v181;
          if (!result) {
            return result;
          }
        }
        else
        {
          v129 = v11 + 2;
LABEL_221:
          *(void *)v188 = v129;
          *(_DWORD *)(a1 + 32sub_10002F6CC(&a9, 0) = v128;
        }
        goto LABEL_273;
      case 0x2Bu:
        if (v12 != 88) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x100u;
        uint64_t v132 = v11 + 1;
        LODWORD(v131) = *v11;
        if ((v131 & 0x80) == 0) {
          goto LABEL_226;
        }
        int v133 = *v132;
        uint64_t v131 = v131 + (v133 << 7) - 128;
        if (v133 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v131);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 324) = v182;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v132 = v11 + 2;
LABEL_226:
          *(void *)v188 = v132;
          *(_DWORD *)(a1 + 324) = v131;
        }
        goto LABEL_273;
      case 0x2Cu:
        if (v12 != 98) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 8u;
        uint64_t v153 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v153 & 0xFFFFFFFFFFFFFFFELL);
        if (v153) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1000B5A80;
        v137 = (uint64_t *)(a1 + 176);
        goto LABEL_270;
      case 0x2Du:
        if (v12 != 106) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10u;
        uint64_t v134 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v134 & 0xFFFFFFFFFFFFFFFELL);
        if (v134) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1000B5A00;
        v137 = (uint64_t *)(a1 + 184);
        goto LABEL_270;
      case 0x2Eu:
        if (v12 != 114) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20u;
        uint64_t v138 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if (v138) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1000B5A20;
        v137 = (uint64_t *)(a1 + 192);
        goto LABEL_270;
      case 0x2Fu:
        if (v12 != 122) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40u;
        uint64_t v139 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if (v139) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1000B5A40;
        v137 = (uint64_t *)(a1 + 200);
        goto LABEL_270;
      case 0x30u:
        if (v12 != 130) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80u;
        uint64_t v140 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v140 & 0xFFFFFFFFFFFFFFFELL);
        if (v140) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1000B5A60;
        v137 = (uint64_t *)(a1 + 208);
LABEL_270:
        v152 = (std::string *)sub_10004EB5C(v137, v136, (uint64_t)v135);
        goto LABEL_271;
      case 0x31u:
        if (v12 != 136) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80000u;
        long long v141 = v11 + 1;
        uint64_t v142 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_247;
        }
        int v143 = *v141;
        uint64_t v142 = v142 + (v143 << 7) - 128;
        if (v143 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v142);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 25sub_10002F6CC(&a9, 0) = v183 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v141 = v11 + 2;
LABEL_247:
          *(void *)v188 = v141;
          *(unsigned char *)(a1 + 25sub_10002F6CC(&a9, 0) = v142 != 0;
        }
        goto LABEL_273;
      case 0x32u:
        if (v12 != 144) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x2000u;
        long long v144 = v11 + 1;
        uint64_t v145 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_252;
        }
        int v146 = *v144;
        uint64_t v145 = v145 + (v146 << 7) - 128;
        if (v146 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v145);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 244) = v184 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v144 = v11 + 2;
LABEL_252:
          *(void *)v188 = v144;
          *(unsigned char *)(a1 + 244) = v145 != 0;
        }
        goto LABEL_273;
      case 0x33u:
        if (v12 != 157) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x200000u;
        int v147 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 256) = v147;
LABEL_255:
        *(void *)v188 = v45;
        goto LABEL_273;
      case 0x34u:
        if (v12 != 160) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x400000u;
        int v148 = v11 + 1;
        uint64_t v149 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_260;
        }
        int v150 = *v148;
        uint64_t v149 = v149 + (v150 << 7) - 128;
        if (v150 < 0)
        {
          uint64_t result = (char *)sub_100070F20((uint64_t)v11, v149);
          *(void *)v188 = result;
          *(void *)(a1 + 264) = v185;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v148 = v11 + 2;
LABEL_260:
          *(void *)v188 = v148;
          *(void *)(a1 + 264) = v149;
        }
        goto LABEL_273;
      case 0x35u:
        if (v12 != 170) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x100u;
        uint64_t v151 = *(void *)(a1 + 8);
        long long v24 = (void *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if (v151) {
          long long v24 = (void *)*v24;
        }
        long long v25 = (uint64_t *)(a1 + 216);
LABEL_265:
        v152 = (std::string *)sub_10004EA20(v25, (uint64_t)v24);
LABEL_271:
        uint64_t result = (char *)sub_100071098(v152, *(char **)v188, (uint64_t)a3);
        goto LABEL_272;
      default:
LABEL_275:
        if (v12) {
          BOOL v155 = (v12 & 7) == 4;
        }
        else {
          BOOL v155 = 1;
        }
        if (v155)
        {
          a3[10].i32[0] = v12 - 1;
          return v11;
        }
        if (v12 < 0x640)
        {
          if (*v187)
          {
            float v156 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            float v156 = (std::string *)sub_10003D368(v187);
            uint64_t v11 = *(char **)v188;
          }
          uint64_t result = (char *)sub_10007157C(v12, v156, v11, a3);
        }
        else
        {
          uint64_t result = (char *)sub_10005E7C4((uint64_t *)(a1 + 16), v12, (unsigned __int8 *)v11, (uint64_t)&unk_1000B6858, v187, a3);
        }
LABEL_272:
        *(void *)v188 = result;
        if (!result) {
          return result;
        }
LABEL_273:
        int v154 = sub_10003D228((uint64_t)a3, (char **)v188, a3[11].i32[1]);
        uint64_t result = *(char **)v188;
        if (v154) {
          return result;
        }
        continue;
    }
    break;
  }
  while (1)
  {
    double v101 = result + 2;
    *(void *)v188 = result + 2;
    float v102 = *(int **)(a1 + 144);
    if (!v102) {
      break;
    }
    uint64_t v103 = *(int *)(a1 + 136);
    int v104 = *v102;
    if ((int)v103 >= *v102)
    {
      if (v104 == *(_DWORD *)(a1 + 140))
      {
LABEL_173:
        sub_10007E8E4(a1 + 128, v104 + 1);
        float v102 = *(int **)(a1 + 144);
        int v104 = *v102;
      }
      int *v102 = v104 + 1;
      uint64_t v106 = *v7;
      if (!*v7) {
        operator new();
      }
      if (*(unsigned char *)(v106 + 24)) {
      unint64_t v105 = (std::string *)sub_10004DFA4((void *)v106, 0x18uLL, (uint64_t)sub_100048840);
      }
      v105->__r_.__value_.__r.__words[0] = 0;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      uint64_t v107 = *(void *)(a1 + 144);
      uint64_t v108 = *(int *)(a1 + 136);
      *(_DWORD *)(a1 + 136) = v108 + 1;
      *(void *)(v107 + 8 * v108 + 8) = v105;
      double v101 = *(char **)v188;
      goto LABEL_179;
    }
    *(_DWORD *)(a1 + 136) = v103 + 1;
    unint64_t v105 = *(std::string **)&v102[2 * v103 + 2];
LABEL_179:
    uint64_t result = (char *)sub_100071098(v105, v101, (uint64_t)a3);
    *(void *)v188 = result;
    if (!result) {
      return result;
    }
    if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 506) {
      goto LABEL_273;
    }
  }
  int v104 = *(_DWORD *)(a1 + 140);
  goto LABEL_173;
}

char *sub_1000403C4(uint64_t a1, char *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 64);
  if (v6 >= 1)
  {
    for (int i = 0; v6 != i; ++i)
    {
      uint64_t v8 = sub_100048A5C(a1 + 56, i);
      if (*(char *)(v8 + 23) < 0)
      {
        int64_t v9 = *(void *)(v8 + 8);
        if (v9 > 127) {
          goto LABEL_13;
        }
      }
      else
      {
        int64_t v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0) {
          uint64_t v10 = (const void *)v8;
        }
        else {
          uint64_t v10 = *(const void **)v8;
        }
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = sub_1000516E0(a3, 1, v8, a2);
    }
  }
  int v11 = *(_DWORD *)(a1 + 40);
  if (v11)
  {
    a2 = sub_10003ADD8((unint64_t *)a3, 2, (const void **)(*(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v11 & 0x800000) == 0)
    {
LABEL_16:
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_17;
    }
  }
  else if ((v11 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  unint64_t v13 = *(int *)(a1 + 272);
  *a2 = 24;
  if (v13 > 0x7F)
  {
    a2[1] = v13 | 0x80;
    unint64_t v15 = v13 >> 7;
    if (v13 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v15 | 0x80;
        unint64_t v18 = v15 >> 7;
        ++a2;
        unint64_t v19 = v15 >> 14;
        v15 >>= 7;
      }
      while (v19);
      *(a2 - 1) = v18;
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
    }
  }
  else
  {
    a2[1] = v13;
    a2 += 2;
    if ((v11 & 0x1000000) == 0) {
      goto LABEL_38;
    }
  }
LABEL_17:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  unint64_t v12 = *(int *)(a1 + 276);
  *a2 = 32;
  if (v12 > 0x7F)
  {
    a2[1] = v12 | 0x80;
    unint64_t v14 = v12 >> 7;
    if (v12 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v14 | 0x80;
        unint64_t v16 = v14 >> 7;
        ++a2;
        unint64_t v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      *(a2 - 1) = v16;
    }
    else
    {
      a2[2] = v14;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v12;
    a2 += 2;
  }
LABEL_38:
  int v20 = *(_DWORD *)(a1 + 88);
  if (v20 >= 1)
  {
    for (int j = 0; v20 != j; ++j)
    {
      uint64_t v22 = sub_100048A5C(a1 + 80, j);
      if (*(char *)(v22 + 23) < 0)
      {
        int64_t v23 = *(void *)(v22 + 8);
        if (v23 > 127) {
          goto LABEL_50;
        }
      }
      else
      {
        int64_t v23 = *(unsigned __int8 *)(v22 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v23)
      {
        *a2 = 42;
        a2[1] = v23;
        if (*(char *)(v22 + 23) >= 0) {
          long long v24 = (const void *)v22;
        }
        else {
          long long v24 = *(const void **)v22;
        }
        memcpy(a2 + 2, v24, v23);
        a2 += v23 + 2;
        continue;
      }
LABEL_50:
      a2 = sub_1000516E0(a3, 5, v22, a2);
    }
  }
  if ((v11 & 0x200) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    unint64_t v26 = *(int *)(a1 + 224);
    *a2 = 48;
    if (v26 > 0x7F)
    {
      a2[1] = v26 | 0x80;
      unint64_t v28 = v26 >> 7;
      if (v26 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v28 | 0x80;
          unint64_t v31 = v28 >> 7;
          ++a2;
          unint64_t v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        *(a2 - 1) = v31;
        if ((v11 & 2) != 0) {
          goto LABEL_82;
        }
      }
      else
      {
        a2[2] = v28;
        a2 += 3;
        if ((v11 & 2) != 0) {
          goto LABEL_82;
        }
      }
    }
    else
    {
      a2[1] = v26;
      a2 += 2;
      if ((v11 & 2) != 0) {
        goto LABEL_82;
      }
    }
LABEL_53:
    if ((v11 & 0x2000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_83;
  }
  if ((v11 & 2) == 0) {
    goto LABEL_53;
  }
LABEL_82:
  a2 = sub_10003ADD8((unint64_t *)a3, 7, (const void **)(*(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x800) == 0) {
      goto LABEL_55;
    }
    goto LABEL_86;
  }
LABEL_83:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  int v33 = *(_DWORD *)(a1 + 280);
  *a2 = 85;
  *(_DWORD *)(a2 + 1) = v33;
  a2 += 5;
  if ((v11 & 0x800) == 0)
  {
LABEL_55:
    if ((v11 & 0x400) == 0) {
      goto LABEL_56;
    }
LABEL_97:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    unint64_t v38 = *(int *)(a1 + 228);
    *a2 = 96;
    if (v38 > 0x7F)
    {
      a2[1] = v38 | 0x80;
      unint64_t v39 = v38 >> 7;
      if (v38 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v39 | 0x80;
          unint64_t v40 = v39 >> 7;
          ++a2;
          unint64_t v41 = v39 >> 14;
          v39 >>= 7;
        }
        while (v41);
        *(a2 - 1) = v40;
        if ((v11 & 0x1000) != 0) {
          goto LABEL_108;
        }
      }
      else
      {
        a2[2] = v39;
        a2 += 3;
        if ((v11 & 0x1000) != 0) {
          goto LABEL_108;
        }
      }
    }
    else
    {
      a2[1] = v38;
      a2 += 2;
      if ((v11 & 0x1000) != 0) {
        goto LABEL_108;
      }
    }
LABEL_57:
    if ((v11 & 0x4000000) == 0) {
      goto LABEL_58;
    }
LABEL_119:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    unint64_t v46 = *(int *)(a1 + 284);
    *a2 = 112;
    if (v46 > 0x7F)
    {
      a2[1] = v46 | 0x80;
      unint64_t v47 = v46 >> 7;
      if (v46 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v47 | 0x80;
          unint64_t v48 = v47 >> 7;
          ++a2;
          unint64_t v49 = v47 >> 14;
          v47 >>= 7;
        }
        while (v49);
        *(a2 - 1) = v48;
        if ((v11 & 0x8000000) != 0) {
          goto LABEL_130;
        }
      }
      else
      {
        a2[2] = v47;
        a2 += 3;
        if ((v11 & 0x8000000) != 0) {
          goto LABEL_130;
        }
      }
    }
    else
    {
      a2[1] = v46;
      a2 += 2;
      if ((v11 & 0x8000000) != 0) {
        goto LABEL_130;
      }
    }
LABEL_59:
    if ((v11 & 0x10000000) == 0) {
      goto LABEL_60;
    }
LABEL_133:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    unint64_t v51 = *(int *)(a1 + 292);
    *(_WORD *)a2 = 384;
    if (v51 > 0x7F)
    {
      a2[2] = v51 | 0x80;
      unint64_t v52 = v51 >> 7;
      if (v51 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v52 | 0x80;
          unint64_t v53 = v52 >> 7;
          ++a2;
          unint64_t v54 = v52 >> 14;
          v52 >>= 7;
        }
        while (v54);
        *(a2 - 1) = v53;
        if ((v11 & 0x20000000) != 0) {
          goto LABEL_144;
        }
      }
      else
      {
        a2[3] = v52;
        a2 += 4;
        if ((v11 & 0x20000000) != 0) {
          goto LABEL_144;
        }
      }
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
      if ((v11 & 0x20000000) != 0) {
        goto LABEL_144;
      }
    }
LABEL_61:
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_155;
    }
    goto LABEL_62;
  }
LABEL_86:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  unint64_t v34 = *(void *)(a1 + 232);
  *a2 = 88;
  if (v34 > 0x7F)
  {
    a2[1] = v34 | 0x80;
    unint64_t v35 = v34 >> 7;
    if (v34 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v35 | 0x80;
        unint64_t v36 = v35 >> 7;
        ++a2;
        unint64_t v37 = v35 >> 14;
        v35 >>= 7;
      }
      while (v37);
      *(a2 - 1) = v36;
      if ((v11 & 0x400) != 0) {
        goto LABEL_97;
      }
    }
    else
    {
      a2[2] = v35;
      a2 += 3;
      if ((v11 & 0x400) != 0) {
        goto LABEL_97;
      }
    }
  }
  else
  {
    a2[1] = v34;
    a2 += 2;
    if ((v11 & 0x400) != 0) {
      goto LABEL_97;
    }
  }
LABEL_56:
  if ((v11 & 0x1000) == 0) {
    goto LABEL_57;
  }
LABEL_108:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  unint64_t v42 = *(int *)(a1 + 240);
  *a2 = 104;
  if (v42 > 0x7F)
  {
    a2[1] = v42 | 0x80;
    unint64_t v43 = v42 >> 7;
    if (v42 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v43 | 0x80;
        unint64_t v44 = v43 >> 7;
        ++a2;
        unint64_t v45 = v43 >> 14;
        v43 >>= 7;
      }
      while (v45);
      *(a2 - 1) = v44;
      if ((v11 & 0x4000000) != 0) {
        goto LABEL_119;
      }
    }
    else
    {
      a2[2] = v43;
      a2 += 3;
      if ((v11 & 0x4000000) != 0) {
        goto LABEL_119;
      }
    }
  }
  else
  {
    a2[1] = v42;
    a2 += 2;
    if ((v11 & 0x4000000) != 0) {
      goto LABEL_119;
    }
  }
LABEL_58:
  if ((v11 & 0x8000000) == 0) {
    goto LABEL_59;
  }
LABEL_130:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  int v50 = *(_DWORD *)(a1 + 288);
  *a2 = 125;
  *(_DWORD *)(a2 + 1) = v50;
  a2 += 5;
  if ((v11 & 0x10000000) != 0) {
    goto LABEL_133;
  }
LABEL_60:
  if ((v11 & 0x20000000) == 0) {
    goto LABEL_61;
  }
LABEL_144:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  unint64_t v55 = *(int *)(a1 + 296);
  *(_WORD *)a2 = 392;
  if (v55 > 0x7F)
  {
    a2[2] = v55 | 0x80;
    unint64_t v56 = v55 >> 7;
    if (v55 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v56 | 0x80;
        unint64_t v57 = v56 >> 7;
        ++a2;
        unint64_t v58 = v56 >> 14;
        v56 >>= 7;
      }
      while (v58);
      *(a2 - 1) = v57;
      if ((v11 & 0x40000000) == 0) {
        goto LABEL_155;
      }
    }
    else
    {
      a2[3] = v56;
      a2 += 4;
      if ((v11 & 0x40000000) == 0) {
        goto LABEL_155;
      }
    }
  }
  else
  {
    a2[2] = v55;
    a2 += 3;
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_155;
    }
  }
LABEL_62:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  unint64_t v25 = *(int *)(a1 + 300);
  *(_WORD *)a2 = 400;
  if (v25 > 0x7F)
  {
    a2[2] = v25 | 0x80;
    unint64_t v27 = v25 >> 7;
    if (v25 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v27 | 0x80;
        unint64_t v29 = v27 >> 7;
        ++a2;
        unint64_t v30 = v27 >> 14;
        v27 >>= 7;
      }
      while (v30);
      *(a2 - 1) = v29;
    }
    else
    {
      a2[3] = v27;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v25;
    a2 += 3;
  }
LABEL_155:
  if (*(unsigned char *)(a1 + 44))
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    char v59 = *(unsigned char *)(a1 + 308);
    *(_WORD *)a2 = 408;
    a2[2] = v59;
    a2 += 3;
  }
  if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    unint64_t v60 = *(int *)(a1 + 304);
    *(_WORD *)a2 = 416;
    if (v60 > 0x7F)
    {
      a2[2] = v60 | 0x80;
      unint64_t v61 = v60 >> 7;
      if (v60 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v61 | 0x80;
          unint64_t v62 = v61 >> 7;
          ++a2;
          unint64_t v63 = v61 >> 14;
          v61 >>= 7;
        }
        while (v63);
        *(a2 - 1) = v62;
      }
      else
      {
        a2[3] = v61;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v60;
      a2 += 3;
    }
  }
  int v64 = *(_DWORD *)(a1 + 44);
  if ((v64 & 2) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    char v65 = *(unsigned char *)(a1 + 309);
    *(_WORD *)a2 = 424;
    a2[2] = v65;
    a2 += 3;
    if ((v64 & 8) == 0)
    {
LABEL_171:
      if ((v64 & 4) == 0) {
        goto LABEL_182;
      }
      goto LABEL_179;
    }
  }
  else if ((v64 & 8) == 0)
  {
    goto LABEL_171;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  char v66 = *(unsigned char *)(a1 + 311);
  *(_WORD *)a2 = 432;
  a2[2] = v66;
  a2 += 3;
  if ((v64 & 4) != 0)
  {
LABEL_179:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    char v67 = *(unsigned char *)(a1 + 310);
    *(_WORD *)a2 = 440;
    a2[2] = v67;
    a2 += 3;
  }
LABEL_182:
  int v68 = *(_DWORD *)(a1 + 40);
  if ((v68 & 0x4000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    char v69 = *(unsigned char *)(a1 + 245);
    *(_WORD *)a2 = 448;
    a2[2] = v69;
    a2 += 3;
    if ((v68 & 0x10000) == 0)
    {
LABEL_184:
      if ((v68 & 0x8000) == 0) {
        goto LABEL_195;
      }
      goto LABEL_192;
    }
  }
  else if ((v68 & 0x10000) == 0)
  {
    goto LABEL_184;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  char v70 = *(unsigned char *)(a1 + 247);
  *(_WORD *)a2 = 456;
  a2[2] = v70;
  a2 += 3;
  if ((v68 & 0x8000) != 0)
  {
LABEL_192:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    char v71 = *(unsigned char *)(a1 + 246);
    *(_WORD *)a2 = 464;
    a2[2] = v71;
    a2 += 3;
  }
LABEL_195:
  int v72 = *(_DWORD *)(a1 + 112);
  if (v72 >= 1)
  {
    for (int k = 0; v72 != k; ++k)
    {
      uint64_t v74 = sub_100048A5C(a1 + 104, k);
      if (*(char *)(v74 + 23) < 0)
      {
        int64_t v75 = *(void *)(v74 + 8);
        if (v75 > 127) {
          goto LABEL_207;
        }
      }
      else
      {
        int64_t v75 = *(unsigned __int8 *)(v74 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v75)
      {
        *(_WORD *)a2 = 498;
        a2[2] = v75;
        if (*(char *)(v74 + 23) >= 0) {
          uint64_t v76 = (const void *)v74;
        }
        else {
          uint64_t v76 = *(const void **)v74;
        }
        memcpy(a2 + 3, v76, v75);
        a2 += v75 + 3;
        continue;
      }
LABEL_207:
      a2 = sub_1000516E0(a3, 30, v74, a2);
    }
  }
  int v77 = *(_DWORD *)(a1 + 136);
  if (v77 >= 1)
  {
    for (int m = 0; v77 != m; ++m)
    {
      uint64_t v79 = sub_100048A5C(a1 + 128, m);
      if (*(char *)(v79 + 23) < 0)
      {
        int64_t v80 = *(void *)(v79 + 8);
        if (v80 > 127) {
          goto LABEL_220;
        }
      }
      else
      {
        int64_t v80 = *(unsigned __int8 *)(v79 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v80)
      {
        *(_WORD *)a2 = 506;
        a2[2] = v80;
        if (*(char *)(v79 + 23) >= 0) {
          uint64_t v81 = (const void *)v79;
        }
        else {
          uint64_t v81 = *(const void **)v79;
        }
        memcpy(a2 + 3, v81, v80);
        a2 += v80 + 3;
        continue;
      }
LABEL_220:
      a2 = sub_1000516E0(a3, 31, v79, a2);
    }
  }
  int v82 = *(_DWORD *)(a1 + 44);
  if ((v82 & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    char v83 = *(unsigned char *)(a1 + 312);
    *(_WORD *)a2 = 640;
    a2[2] = v83;
    a2 += 3;
  }
  if ((v82 & 0x20) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    char v84 = *(unsigned char *)(a1 + 313);
    *(_WORD *)a2 = 648;
    a2[2] = v84;
    a2 += 3;
  }
  int v85 = *(_DWORD *)(a1 + 40);
  if ((v85 & 0x40000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    char v86 = *(unsigned char *)(a1 + 249);
    *(_WORD *)a2 = 656;
    a2[2] = v86;
    a2 += 3;
    if ((v85 & 0x20000) == 0)
    {
LABEL_231:
      if ((v85 & 4) == 0) {
        goto LABEL_232;
      }
      goto LABEL_240;
    }
  }
  else if ((v85 & 0x20000) == 0)
  {
    goto LABEL_231;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  char v87 = *(unsigned char *)(a1 + 248);
  *(_WORD *)a2 = 664;
  a2[2] = v87;
  a2 += 3;
  if ((v85 & 4) == 0)
  {
LABEL_232:
    if ((v85 & 0x100000) == 0) {
      goto LABEL_250;
    }
    goto LABEL_241;
  }
LABEL_240:
  a2 = sub_10003ADD8((unint64_t *)a3, 36, (const void **)(*(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v85 & 0x100000) == 0) {
    goto LABEL_250;
  }
LABEL_241:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  unint64_t v88 = *(int *)(a1 + 252);
  *(_WORD *)a2 = 704;
  if (v88 > 0x7F)
  {
    a2[2] = v88 | 0x80;
    unint64_t v89 = v88 >> 7;
    if (v88 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v89 | 0x80;
        unint64_t v90 = v89 >> 7;
        ++a2;
        unint64_t v91 = v89 >> 14;
        v89 >>= 7;
      }
      while (v91);
      *(a2 - 1) = v90;
    }
    else
    {
      a2[3] = v89;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v88;
    a2 += 3;
  }
LABEL_250:
  int v92 = *(_DWORD *)(a1 + 44);
  if ((v92 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    unint64_t v94 = *(int *)(a1 + 316);
    *(_WORD *)a2 = 712;
    if (v94 > 0x7F)
    {
      a2[2] = v94 | 0x80;
      unint64_t v96 = v94 >> 7;
      if (v94 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v96 | 0x80;
          unint64_t v99 = v96 >> 7;
          ++a2;
          unint64_t v100 = v96 >> 14;
          v96 >>= 7;
        }
        while (v100);
        *(a2 - 1) = v99;
        if ((v92 & 0x80) != 0) {
          goto LABEL_273;
        }
      }
      else
      {
        a2[3] = v96;
        a2 += 4;
        if ((v92 & 0x80) != 0) {
          goto LABEL_273;
        }
      }
    }
    else
    {
      a2[2] = v94;
      a2 += 3;
      if ((v92 & 0x80) != 0) {
        goto LABEL_273;
      }
    }
LABEL_252:
    if ((v92 & 0x100) == 0) {
      goto LABEL_284;
    }
    goto LABEL_253;
  }
  if ((v92 & 0x80) == 0) {
    goto LABEL_252;
  }
LABEL_273:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  unint64_t v101 = *(int *)(a1 + 320);
  *(_WORD *)a2 = 720;
  if (v101 > 0x7F)
  {
    a2[2] = v101 | 0x80;
    unint64_t v102 = v101 >> 7;
    if (v101 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v102 | 0x80;
        unint64_t v103 = v102 >> 7;
        ++a2;
        unint64_t v104 = v102 >> 14;
        v102 >>= 7;
      }
      while (v104);
      *(a2 - 1) = v103;
      if ((v92 & 0x100) == 0) {
        goto LABEL_284;
      }
    }
    else
    {
      a2[3] = v102;
      a2 += 4;
      if ((v92 & 0x100) == 0) {
        goto LABEL_284;
      }
    }
  }
  else
  {
    a2[2] = v101;
    a2 += 3;
    if ((v92 & 0x100) == 0) {
      goto LABEL_284;
    }
  }
LABEL_253:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  unint64_t v93 = *(int *)(a1 + 324);
  *(_WORD *)a2 = 728;
  if (v93 > 0x7F)
  {
    a2[2] = v93 | 0x80;
    unint64_t v95 = v93 >> 7;
    if (v93 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v95 | 0x80;
        unint64_t v97 = v95 >> 7;
        ++a2;
        unint64_t v98 = v95 >> 14;
        v95 >>= 7;
      }
      while (v98);
      *(a2 - 1) = v97;
    }
    else
    {
      a2[3] = v95;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v93;
    a2 += 3;
  }
LABEL_284:
  int v105 = *(_DWORD *)(a1 + 40);
  if ((v105 & 8) != 0)
  {
    a2 = sub_10003ADD8((unint64_t *)a3, 44, (const void **)(*(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v105 & 0x10) == 0)
    {
LABEL_286:
      if ((v105 & 0x20) == 0) {
        goto LABEL_287;
      }
      goto LABEL_299;
    }
  }
  else if ((v105 & 0x10) == 0)
  {
    goto LABEL_286;
  }
  a2 = sub_10003ADD8((unint64_t *)a3, 45, (const void **)(*(void *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x20) == 0)
  {
LABEL_287:
    if ((v105 & 0x40) == 0) {
      goto LABEL_288;
    }
    goto LABEL_300;
  }
LABEL_299:
  a2 = sub_10003ADD8((unint64_t *)a3, 46, (const void **)(*(void *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x40) == 0)
  {
LABEL_288:
    if ((v105 & 0x80) == 0) {
      goto LABEL_289;
    }
    goto LABEL_301;
  }
LABEL_300:
  a2 = sub_10003ADD8((unint64_t *)a3, 47, (const void **)(*(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x80) == 0)
  {
LABEL_289:
    if ((v105 & 0x80000) == 0) {
      goto LABEL_290;
    }
    goto LABEL_302;
  }
LABEL_301:
  a2 = sub_10003ADD8((unint64_t *)a3, 48, (const void **)(*(void *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x80000) == 0)
  {
LABEL_290:
    if ((v105 & 0x2000) == 0) {
      goto LABEL_291;
    }
    goto LABEL_305;
  }
LABEL_302:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  char v110 = *(unsigned char *)(a1 + 250);
  *(_WORD *)a2 = 904;
  a2[2] = v110;
  a2 += 3;
  if ((v105 & 0x2000) == 0)
  {
LABEL_291:
    if ((v105 & 0x200000) == 0) {
      goto LABEL_292;
    }
    goto LABEL_308;
  }
LABEL_305:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  char v111 = *(unsigned char *)(a1 + 244);
  *(_WORD *)a2 = 912;
  a2[2] = v111;
  a2 += 3;
  if ((v105 & 0x200000) == 0)
  {
LABEL_292:
    if ((v105 & 0x400000) == 0) {
      goto LABEL_293;
    }
    goto LABEL_311;
  }
LABEL_308:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  int v112 = *(_DWORD *)(a1 + 256);
  *(_WORD *)a2 = 925;
  *(_DWORD *)(a2 + 2) = v112;
  a2 += 6;
  if ((v105 & 0x400000) == 0)
  {
LABEL_293:
    if ((v105 & 0x100) == 0) {
      goto LABEL_295;
    }
    goto LABEL_294;
  }
LABEL_311:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  unint64_t v113 = *(void *)(a1 + 264);
  *(_WORD *)a2 = 928;
  if (v113 <= 0x7F)
  {
    a2[2] = v113;
    a2 += 3;
    if ((v105 & 0x100) == 0) {
      goto LABEL_295;
    }
LABEL_294:
    a2 = sub_10003ADD8((unint64_t *)a3, 53, (const void **)(*(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL), a2);
    goto LABEL_295;
  }
  a2[2] = v113 | 0x80;
  unint64_t v114 = v113 >> 7;
  if (v113 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v114 | 0x80;
      unint64_t v115 = v114 >> 7;
      ++a2;
      unint64_t v116 = v114 >> 14;
      v114 >>= 7;
    }
    while (v116);
    *(a2 - 1) = v115;
    if ((v105 & 0x100) != 0) {
      goto LABEL_294;
    }
  }
  else
  {
    a2[3] = v114;
    a2 += 4;
    if ((v105 & 0x100) != 0) {
      goto LABEL_294;
    }
  }
LABEL_295:
  uint64_t v106 = sub_10005FF78(a1 + 16, 200, 0x20000000, a2, a3);
  uint64_t v107 = v106;
  uint64_t v108 = *(void *)(a1 + 8);
  if ((v108 & 1) == 0) {
    return v107;
  }
  unint64_t v117 = v108 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v117 + 31) < 0)
  {
    v118 = *(void **)(v117 + 8);
    uint64_t v119 = *(void *)(v117 + 16);
  }
  else
  {
    v118 = (void *)(v117 + 8);
    LODWORD(v119) = *(unsigned __int8 *)(v117 + 31);
  }
  if (*a3 - (uint64_t)v106 >= (int)v119)
  {
    uint64_t v120 = (int)v119;
    memcpy(v106, v118, (int)v119);
    v107 += v120;
    return v107;
  }
  return sub_100051284(a3, (char *)v118, v119, (unint64_t)v106);
}

uint64_t sub_10004158C(uint64_t a1)
{
  uint64_t v2 = sub_100062D70(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  uint64_t v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = sub_100048A5C(a1 + 56, v5);
      uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(v6 + 8);
      }
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v5;
    }
    while (v3 != v5);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 88);
  uint64_t v9 = v4 + v8;
  if ((int)v8 >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = sub_100048A5C(a1 + 80, v10);
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(v11 + 8);
      }
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while (v8 != v10);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 112);
  uint64_t v14 = v9 + 2 * v13;
  if ((int)v13 >= 1)
  {
    int v15 = 0;
    do
    {
      uint64_t v16 = sub_100048A5C(a1 + 104, v15);
      uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *(void *)(v16 + 8);
      }
      v14 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while (v13 != v15);
  }
  uint64_t v18 = *(unsigned int *)(a1 + 136);
  uint64_t v19 = v14 + 2 * v18;
  if ((int)v18 >= 1)
  {
    int v20 = 0;
    do
    {
      uint64_t v21 = sub_100048A5C(a1 + 128, v20);
      uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *(void *)(v21 + 8);
      }
      v19 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while (v18 != v20);
  }
  unsigned int v23 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v23) {
    goto LABEL_33;
  }
  if (v23)
  {
    unint64_t v58 = *(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v59 = *(unsigned __int8 *)(v58 + 23);
    uint64_t v60 = *(void *)(v58 + 8);
    if ((v59 & 0x80u) == 0) {
      uint64_t v60 = v59;
    }
    v19 += v60 + ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0) {
        goto LABEL_25;
      }
      goto LABEL_131;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_24;
  }
  unint64_t v61 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v62 = *(unsigned __int8 *)(v61 + 23);
  uint64_t v63 = *(void *)(v61 + 8);
  if ((v62 & 0x80u) == 0) {
    uint64_t v63 = v62;
  }
  v19 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_134;
  }
LABEL_131:
  unint64_t v64 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v65 = *(unsigned __int8 *)(v64 + 23);
  uint64_t v66 = *(void *)(v64 + 8);
  if ((v65 & 0x80u) == 0) {
    uint64_t v66 = v65;
  }
  v19 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 8) == 0)
  {
LABEL_26:
    if ((v23 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_137;
  }
LABEL_134:
  unint64_t v67 = *(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v68 = *(unsigned __int8 *)(v67 + 23);
  uint64_t v69 = *(void *)(v67 + 8);
  if ((v68 & 0x80u) == 0) {
    uint64_t v69 = v68;
  }
  v19 += v69 + ((9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x10) == 0)
  {
LABEL_27:
    if ((v23 & 0x20) == 0) {
      goto LABEL_28;
    }
LABEL_140:
    unint64_t v73 = *(void *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v74 = *(unsigned __int8 *)(v73 + 23);
    uint64_t v75 = *(void *)(v73 + 8);
    if ((v74 & 0x80u) == 0) {
      uint64_t v75 = v74;
    }
    v19 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x40) == 0)
    {
LABEL_29:
      if ((v23 & 0x80) == 0) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
    goto LABEL_143;
  }
LABEL_137:
  unint64_t v70 = *(void *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v71 = *(unsigned __int8 *)(v70 + 23);
  uint64_t v72 = *(void *)(v70 + 8);
  if ((v71 & 0x80u) == 0) {
    uint64_t v72 = v71;
  }
  v19 += v72 + ((9 * (__clz(v72 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x20) != 0) {
    goto LABEL_140;
  }
LABEL_28:
  if ((v23 & 0x40) == 0) {
    goto LABEL_29;
  }
LABEL_143:
  unint64_t v76 = *(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v77 = *(unsigned __int8 *)(v76 + 23);
  uint64_t v78 = *(void *)(v76 + 8);
  if ((v77 & 0x80u) == 0) {
    uint64_t v78 = v77;
  }
  v19 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x80) != 0)
  {
LABEL_30:
    unint64_t v24 = *(void *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v25 = *(unsigned __int8 *)(v24 + 23);
    uint64_t v26 = *(void *)(v24 + 8);
    if ((v25 & 0x80u) == 0) {
      uint64_t v26 = v25;
    }
    v19 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_33:
  if ((v23 & 0xFF00) == 0) {
    goto LABEL_50;
  }
  if ((v23 & 0x100) != 0)
  {
    unint64_t v79 = *(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v80 = *(unsigned __int8 *)(v79 + 23);
    uint64_t v81 = *(void *)(v79 + 8);
    if ((v80 & 0x80u) == 0) {
      uint64_t v81 = v80;
    }
    v19 += v81 + ((9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x200) == 0)
    {
LABEL_36:
      if ((v23 & 0x400) == 0) {
        goto LABEL_37;
      }
      goto LABEL_154;
    }
  }
  else if ((v23 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  int v82 = *(_DWORD *)(a1 + 224);
  uint64_t v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
  if (v82 >= 0) {
    uint64_t v84 = v83;
  }
  else {
    uint64_t v84 = 10;
  }
  v19 += v84 + 1;
  if ((v23 & 0x400) == 0)
  {
LABEL_37:
    if ((v23 & 0x800) == 0) {
      goto LABEL_38;
    }
LABEL_158:
    v19 += ((9 * (__clz(*(void *)(a1 + 232) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v23 & 0x1000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }
LABEL_154:
  int v85 = *(_DWORD *)(a1 + 228);
  uint64_t v86 = (9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6;
  if (v85 >= 0) {
    uint64_t v87 = v86;
  }
  else {
    uint64_t v87 = 10;
  }
  v19 += v87 + 1;
  if ((v23 & 0x800) != 0) {
    goto LABEL_158;
  }
LABEL_38:
  if ((v23 & 0x1000) != 0)
  {
LABEL_39:
    int v27 = *(_DWORD *)(a1 + 240);
    uint64_t v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
    if (v27 >= 0) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 10;
    }
    v19 += v29 + 1;
  }
LABEL_43:
  uint64_t v30 = v19 + 3;
  if ((v23 & 0x2000) == 0) {
    uint64_t v30 = v19;
  }
  if ((v23 & 0x4000) != 0) {
    v30 += 3;
  }
  if ((v23 & 0x8000) != 0) {
    uint64_t v19 = v30 + 3;
  }
  else {
    uint64_t v19 = v30;
  }
LABEL_50:
  if ((v23 & 0xFF0000) != 0)
  {
    uint64_t v31 = v19 + 3;
    if ((v23 & 0x10000) == 0) {
      uint64_t v31 = v19;
    }
    if ((v23 & 0x20000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x40000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x80000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x100000) != 0)
    {
      int v32 = *(_DWORD *)(a1 + 252);
      uint64_t v33 = (9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6;
      if (v32 >= 0) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = 10;
      }
      v31 += v34 + 2;
    }
    if ((v23 & 0x200000) != 0) {
      uint64_t v19 = v31 + 6;
    }
    else {
      uint64_t v19 = v31;
    }
    if ((v23 & 0x400000) != 0) {
      v19 += ((9 * (__clz(*(void *)(a1 + 264) | 1) ^ 0x3F) + 73) >> 6) + 2;
    }
    if ((v23 & 0x800000) != 0)
    {
      int v35 = *(_DWORD *)(a1 + 272);
      uint64_t v36 = (9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6;
      if (v35 >= 0) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 10;
      }
      v19 += v37 + 1;
    }
  }
  if (!HIBYTE(v23)) {
    goto LABEL_94;
  }
  if ((v23 & 0x1000000) != 0)
  {
    int v38 = *(_DWORD *)(a1 + 276);
    uint64_t v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
    if (v38 >= 0) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 10;
    }
    v19 += v40 + 1;
  }
  uint64_t v41 = v19 + 5;
  if ((v23 & 0x2000000) == 0) {
    uint64_t v41 = v19;
  }
  if ((v23 & 0x4000000) != 0)
  {
    int v42 = *(_DWORD *)(a1 + 284);
    uint64_t v43 = (9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6;
    if (v42 >= 0) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 10;
    }
    v41 += v44 + 1;
  }
  if ((v23 & 0x8000000) != 0) {
    uint64_t v19 = v41 + 5;
  }
  else {
    uint64_t v19 = v41;
  }
  if ((v23 & 0x10000000) == 0)
  {
    if ((v23 & 0x20000000) == 0) {
      goto LABEL_92;
    }
LABEL_164:
    int v91 = *(_DWORD *)(a1 + 296);
    uint64_t v92 = ((9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v91 >= 0) {
      uint64_t v93 = v92;
    }
    else {
      uint64_t v93 = 12;
    }
    v19 += v93;
    if ((v23 & 0x40000000) == 0)
    {
LABEL_93:
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_94;
      }
      goto LABEL_172;
    }
    goto LABEL_168;
  }
  int v88 = *(_DWORD *)(a1 + 292);
  uint64_t v89 = (9 * (__clz(v88 | 1) ^ 0x1F) + 73) >> 6;
  if (v88 >= 0) {
    uint64_t v90 = v89;
  }
  else {
    uint64_t v90 = 10;
  }
  v19 += v90 + 2;
  if ((v23 & 0x20000000) != 0) {
    goto LABEL_164;
  }
LABEL_92:
  if ((v23 & 0x40000000) == 0) {
    goto LABEL_93;
  }
LABEL_168:
  int v94 = *(_DWORD *)(a1 + 300);
  uint64_t v95 = ((9 * (__clz(v94 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v94 >= 0) {
    uint64_t v96 = v95;
  }
  else {
    uint64_t v96 = 12;
  }
  v19 += v96;
  if ((v23 & 0x80000000) != 0)
  {
LABEL_172:
    int v97 = *(_DWORD *)(a1 + 304);
    uint64_t v98 = ((9 * (__clz(v97 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v97 >= 0) {
      uint64_t v99 = v98;
    }
    else {
      uint64_t v99 = 12;
    }
    v19 += v99;
  }
LABEL_94:
  int v45 = *(_DWORD *)(a1 + 44);
  if ((_BYTE)v45)
  {
    uint64_t v46 = v19 + 3;
    if ((v45 & 1) == 0) {
      uint64_t v46 = v19;
    }
    if ((v45 & 2) != 0) {
      v46 += 3;
    }
    if ((v45 & 4) != 0) {
      v46 += 3;
    }
    if ((v45 & 8) != 0) {
      v46 += 3;
    }
    if ((v45 & 0x10) != 0) {
      v46 += 3;
    }
    if ((v45 & 0x20) != 0) {
      uint64_t v19 = v46 + 3;
    }
    else {
      uint64_t v19 = v46;
    }
    if ((v45 & 0x40) != 0)
    {
      int v47 = *(_DWORD *)(a1 + 316);
      uint64_t v48 = ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v47 >= 0) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = 12;
      }
      v19 += v49;
    }
    if ((v45 & 0x80) != 0)
    {
      int v50 = *(_DWORD *)(a1 + 320);
      uint64_t v51 = ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v50 >= 0) {
        uint64_t v52 = v51;
      }
      else {
        uint64_t v52 = 12;
      }
      v19 += v52;
    }
  }
  if ((v45 & 0x100) != 0)
  {
    int v53 = *(_DWORD *)(a1 + 324);
    uint64_t v54 = ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v53 >= 0) {
      uint64_t v55 = v54;
    }
    else {
      uint64_t v55 = 12;
    }
    v19 += v55;
  }
  uint64_t v56 = *(void *)(a1 + 8);
  if (v56)
  {
    unint64_t v100 = v56 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v100 + 31) < 0) {
      uint64_t v101 = *(void *)(v100 + 16);
    }
    else {
      uint64_t v101 = *(unsigned __int8 *)(v100 + 31);
    }
    v19 += v101;
  }
  *(_DWORD *)(a1 + 48) = v19;
  return v19;
}

uint64_t sub_100041E3C(uint64_t a1, void *lpsrc)
{
  return sub_100041EC4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100041EC4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_100051E5C((uint64_t)v45, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1671);
    uint64_t v4 = sub_100051E74(v45, "CHECK failed: (&from) != (this): ");
    sub_100051FB0((uint64_t)&v44, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v45);
  }
  sub_10005BC28(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_100048C9C(a1 + 56, a2 + 56);
  sub_100048C9C(a1 + 80, a2 + 80);
  sub_100048C9C(a1 + 104, a2 + 104);
  uint64_t result = sub_100048C9C(a1 + 128, a2 + 128);
  unsigned int v14 = *(_DWORD *)(a2 + 40);
  if (!(_BYTE)v14) {
    goto LABEL_47;
  }
  if (v14)
  {
    int v15 = (long long *)(*(void *)(a2 + 152) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 1u;
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    if (v16) {
      uint64_t v17 = (void *)*v17;
    }
    uint64_t result = (uint64_t)sub_10004E9D8((uint64_t *)(a1 + 152), v15, (uint64_t)v17);
    if ((v14 & 2) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0) {
        goto LABEL_17;
      }
      goto LABEL_29;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v18 = (long long *)(*(void *)(a2 + 160) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 2u;
  uint64_t v19 = *(void *)(a1 + 8);
  int v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  if (v19) {
    int v20 = (void *)*v20;
  }
  uint64_t result = (uint64_t)sub_10004E9D8((uint64_t *)(a1 + 160), v18, (uint64_t)v20);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v21 = (long long *)(*(void *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 4u;
  uint64_t v22 = *(void *)(a1 + 8);
  unsigned int v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFELL);
  if (v22) {
    unsigned int v23 = (void *)*v23;
  }
  uint64_t result = (uint64_t)sub_10004E9D8((uint64_t *)(a1 + 168), v21, (uint64_t)v23);
  if ((v14 & 8) == 0)
  {
LABEL_18:
    if ((v14 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_32:
  unint64_t v24 = (long long *)(*(void *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 8u;
  uint64_t v25 = *(void *)(a1 + 8);
  uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFELL);
  if (v25) {
    uint64_t v26 = (void *)*v26;
  }
  uint64_t result = (uint64_t)sub_10004EA00((uint64_t *)(a1 + 176), v24, (uint64_t)v26);
  if ((v14 & 0x10) == 0)
  {
LABEL_19:
    if ((v14 & 0x20) == 0) {
      goto LABEL_20;
    }
LABEL_38:
    uint64_t v30 = (long long *)(*(void *)(a2 + 192) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x20u;
    uint64_t v31 = *(void *)(a1 + 8);
    int v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFELL);
    if (v31) {
      int v32 = (void *)*v32;
    }
    uint64_t result = (uint64_t)sub_10004EA00((uint64_t *)(a1 + 192), v30, (uint64_t)v32);
    if ((v14 & 0x40) == 0)
    {
LABEL_21:
      if ((v14 & 0x80) == 0) {
        goto LABEL_47;
      }
      goto LABEL_44;
    }
    goto LABEL_41;
  }
LABEL_35:
  int v27 = (long long *)(*(void *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x10u;
  uint64_t v28 = *(void *)(a1 + 8);
  uint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFELL);
  if (v28) {
    uint64_t v29 = (void *)*v29;
  }
  uint64_t result = (uint64_t)sub_10004EA00((uint64_t *)(a1 + 184), v27, (uint64_t)v29);
  if ((v14 & 0x20) != 0) {
    goto LABEL_38;
  }
LABEL_20:
  if ((v14 & 0x40) == 0) {
    goto LABEL_21;
  }
LABEL_41:
  uint64_t v33 = (long long *)(*(void *)(a2 + 200) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x40u;
  uint64_t v34 = *(void *)(a1 + 8);
  int v35 = (void *)(v34 & 0xFFFFFFFFFFFFFFFELL);
  if (v34) {
    int v35 = (void *)*v35;
  }
  uint64_t result = (uint64_t)sub_10004EA00((uint64_t *)(a1 + 200), v33, (uint64_t)v35);
  if ((v14 & 0x80) != 0)
  {
LABEL_44:
    uint64_t v36 = (long long *)(*(void *)(a2 + 208) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x80u;
    uint64_t v37 = *(void *)(a1 + 8);
    int v38 = (void *)(v37 & 0xFFFFFFFFFFFFFFFELL);
    if (v37) {
      int v38 = (void *)*v38;
    }
    uint64_t result = (uint64_t)sub_10004EA00((uint64_t *)(a1 + 208), v36, (uint64_t)v38);
  }
LABEL_47:
  if ((v14 & 0xFF00) == 0) {
    goto LABEL_58;
  }
  if ((v14 & 0x100) != 0)
  {
    uint64_t v41 = (long long *)(*(void *)(a2 + 216) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x100u;
    uint64_t v42 = *(void *)(a1 + 8);
    uint64_t v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFFELL);
    if (v42) {
      uint64_t v43 = (void *)*v43;
    }
    uint64_t result = (uint64_t)sub_10004E9D8((uint64_t *)(a1 + 216), v41, (uint64_t)v43);
    if ((v14 & 0x200) == 0)
    {
LABEL_50:
      if ((v14 & 0x400) == 0) {
        goto LABEL_51;
      }
      goto LABEL_97;
    }
  }
  else if ((v14 & 0x200) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  if ((v14 & 0x400) == 0)
  {
LABEL_51:
    if ((v14 & 0x800) == 0) {
      goto LABEL_52;
    }
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  if ((v14 & 0x800) == 0)
  {
LABEL_52:
    if ((v14 & 0x1000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_99;
  }
LABEL_98:
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  if ((v14 & 0x1000) == 0)
  {
LABEL_53:
    if ((v14 & 0x2000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a1 + 24sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 240);
  if ((v14 & 0x2000) == 0)
  {
LABEL_54:
    if ((v14 & 0x4000) == 0) {
      goto LABEL_55;
    }
LABEL_101:
    *(unsigned char *)(a1 + 245) = *(unsigned char *)(a2 + 245);
    if ((v14 & 0x8000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
LABEL_100:
  *(unsigned char *)(a1 + 244) = *(unsigned char *)(a2 + 244);
  if ((v14 & 0x4000) != 0) {
    goto LABEL_101;
  }
LABEL_55:
  if ((v14 & 0x8000) != 0) {
LABEL_56:
  }
    *(unsigned char *)(a1 + 246) = *(unsigned char *)(a2 + 246);
LABEL_57:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_58:
  if ((v14 & 0xFF0000) == 0) {
    goto LABEL_69;
  }
  if ((v14 & 0x10000) != 0)
  {
    *(unsigned char *)(a1 + 247) = *(unsigned char *)(a2 + 247);
    if ((v14 & 0x20000) == 0)
    {
LABEL_61:
      if ((v14 & 0x40000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_105;
    }
  }
  else if ((v14 & 0x20000) == 0)
  {
    goto LABEL_61;
  }
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  if ((v14 & 0x40000) == 0)
  {
LABEL_62:
    if ((v14 & 0x80000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_106;
  }
LABEL_105:
  *(unsigned char *)(a1 + 249) = *(unsigned char *)(a2 + 249);
  if ((v14 & 0x80000) == 0)
  {
LABEL_63:
    if ((v14 & 0x100000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_107;
  }
LABEL_106:
  *(unsigned char *)(a1 + 25sub_10002F6CC(&a9, 0) = *(unsigned char *)(a2 + 250);
  if ((v14 & 0x100000) == 0)
  {
LABEL_64:
    if ((v14 & 0x200000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  if ((v14 & 0x200000) == 0)
  {
LABEL_65:
    if ((v14 & 0x400000) == 0) {
      goto LABEL_66;
    }
LABEL_109:
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    if ((v14 & 0x800000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
LABEL_108:
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  if ((v14 & 0x400000) != 0) {
    goto LABEL_109;
  }
LABEL_66:
  if ((v14 & 0x800000) != 0) {
LABEL_67:
  }
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
LABEL_68:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_69:
  if (!HIBYTE(v14)) {
    goto LABEL_79;
  }
  if ((v14 & 0x1000000) != 0)
  {
    *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
    if ((v14 & 0x2000000) == 0)
    {
LABEL_72:
      if ((v14 & 0x4000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_121;
    }
  }
  else if ((v14 & 0x2000000) == 0)
  {
    goto LABEL_72;
  }
  *(_DWORD *)(a1 + 28sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 280);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x8000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x10000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  if ((v14 & 0x10000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x20000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  if ((v14 & 0x20000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x40000000) == 0) {
      goto LABEL_77;
    }
LABEL_125:
    *(_DWORD *)(a1 + 30sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 300);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_78;
    }
LABEL_126:
    *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
    goto LABEL_78;
  }
LABEL_124:
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  if ((v14 & 0x40000000) != 0) {
    goto LABEL_125;
  }
LABEL_77:
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_126;
  }
LABEL_78:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_79:
  int v39 = *(_DWORD *)(a2 + 44);
  if (!(_BYTE)v39) {
    goto LABEL_90;
  }
  if (v39)
  {
    *(unsigned char *)(a1 + 308) = *(unsigned char *)(a2 + 308);
    if ((v39 & 2) == 0)
    {
LABEL_82:
      if ((v39 & 4) == 0) {
        goto LABEL_83;
      }
      goto LABEL_113;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(unsigned char *)(a1 + 309) = *(unsigned char *)(a2 + 309);
  if ((v39 & 4) == 0)
  {
LABEL_83:
    if ((v39 & 8) == 0) {
      goto LABEL_84;
    }
    goto LABEL_114;
  }
LABEL_113:
  *(unsigned char *)(a1 + 31sub_10002F6CC(&a9, 0) = *(unsigned char *)(a2 + 310);
  if ((v39 & 8) == 0)
  {
LABEL_84:
    if ((v39 & 0x10) == 0) {
      goto LABEL_85;
    }
    goto LABEL_115;
  }
LABEL_114:
  *(unsigned char *)(a1 + 311) = *(unsigned char *)(a2 + 311);
  if ((v39 & 0x10) == 0)
  {
LABEL_85:
    if ((v39 & 0x20) == 0) {
      goto LABEL_86;
    }
    goto LABEL_116;
  }
LABEL_115:
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  if ((v39 & 0x20) == 0)
  {
LABEL_86:
    if ((v39 & 0x40) == 0) {
      goto LABEL_87;
    }
LABEL_117:
    *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
    if ((v39 & 0x80) == 0) {
      goto LABEL_89;
    }
    goto LABEL_88;
  }
LABEL_116:
  *(unsigned char *)(a1 + 313) = *(unsigned char *)(a2 + 313);
  if ((v39 & 0x40) != 0) {
    goto LABEL_117;
  }
LABEL_87:
  if ((v39 & 0x80) != 0) {
LABEL_88:
  }
    *(_DWORD *)(a1 + 32sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 320);
LABEL_89:
  *(_DWORD *)(a1 + 44) |= v39;
LABEL_90:
  if ((v39 & 0x100) != 0)
  {
    int v40 = *(_DWORD *)(a2 + 324);
    *(_DWORD *)(a1 + 44) |= 0x100u;
    *(_DWORD *)(a1 + 324) = v40;
  }
  return result;
}

void sub_100042420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100042438(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v4 = result;
    sub_10003EA84(result);
    return sub_100041EC4(v4, a2);
  }
  return result;
}

uint64_t sub_100042484(uint64_t a1)
{
  return sub_10005D28C(a1 + 16);
}

float sub_10004248C(uint64_t a1, uint64_t a2)
{
  sub_10005CEA0(a1 + 16, a2 + 16);
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      unint64_t v7 = sub_10003D368((unint64_t *)(a2 + 8));
      uint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_51;
    }
LABEL_5:
    unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_51:
    unint64_t v8 = sub_10003D368((unint64_t *)(a1 + 8));
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 4sub_10002F6CC(&a9, 0) = v12;
  int v13 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = v13;
  sub_10003D900((void *)(a1 + 56), a2 + 56);
  sub_10003D900((void *)(a1 + 80), a2 + 80);
  sub_10003D900((void *)(a1 + 104), a2 + 104);
  sub_10003D900((void *)(a1 + 128), a2 + 128);
  unsigned int v14 = (uint64_t *)(a1 + 152);
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = (unint64_t *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (v15) {
    unint64_t v17 = *v16;
  }
  if ((uint64_t *)*v14 == &qword_1000B6B88 && *(uint64_t **)(a2 + 152) == &qword_1000B6B88)
  {
    uint64_t v23 = *(void *)(a1 + 8) & 1;
  }
  else
  {
    uint64_t v18 = sub_10004EA20(v14, v17);
    uint64_t v19 = sub_10004EA20((uint64_t *)(a2 + 152), v17);
    uint64_t v20 = v18[2];
    long long v21 = *(_OWORD *)v18;
    uint64_t v22 = v19[2];
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    std::string v18[2] = v22;
    *(_OWORD *)uint64_t v19 = v21;
    v19[2] = v20;
    uint64_t v23 = *v5 & 1;
    uint64_t v16 = (unint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  unint64_t v24 = (uint64_t *)(a1 + 160);
  uint64_t v25 = (uint64_t)v16;
  if (v23) {
    uint64_t v25 = *v16;
  }
  if ((uint64_t *)*v24 != &qword_1000B6B88 || *(uint64_t **)(a2 + 160) != &qword_1000B6B88)
  {
    uint64_t v26 = sub_10004EA20(v24, v25);
    int v27 = sub_10004EA20((uint64_t *)(a2 + 160), v25);
    uint64_t v28 = v26[2];
    long long v29 = *(_OWORD *)v26;
    uint64_t v30 = v27[2];
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    v26[2] = v30;
    *(_OWORD *)int v27 = v29;
    v27[2] = v28;
    uint64_t v23 = *v5 & 1;
    uint64_t v16 = (unint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v31 = (uint64_t *)(a1 + 168);
  if (v23) {
    uint64_t v16 = (unint64_t *)*v16;
  }
  if ((uint64_t *)*v31 != &qword_1000B6B88 || *(uint64_t **)(a2 + 168) != &qword_1000B6B88)
  {
    int v32 = sub_10004EA20(v31, (uint64_t)v16);
    uint64_t v33 = sub_10004EA20((uint64_t *)(a2 + 168), (uint64_t)v16);
    uint64_t v34 = v32[2];
    long long v35 = *(_OWORD *)v32;
    uint64_t v36 = v33[2];
    *(_OWORD *)int v32 = *(_OWORD *)v33;
    void v32[2] = v36;
    *(_OWORD *)uint64_t v33 = v35;
    v33[2] = v34;
  }
  uint64_t v37 = *(void *)(a1 + 176);
  if (v37)
  {
    uint64_t v38 = *(void *)(a2 + 176);
  }
  else
  {
    uint64_t v38 = *(void *)(a2 + 176);
    if (!v38) {
      goto LABEL_27;
    }
  }
  *(void *)(a1 + 176) = v38;
  *(void *)(a2 + 176) = v37;
LABEL_27:
  uint64_t v39 = *(void *)(a1 + 184);
  if (v39)
  {
    uint64_t v40 = *(void *)(a2 + 184);
  }
  else
  {
    uint64_t v40 = *(void *)(a2 + 184);
    if (!v40) {
      goto LABEL_31;
    }
  }
  *(void *)(a1 + 184) = v40;
  *(void *)(a2 + 184) = v39;
LABEL_31:
  uint64_t v41 = *(void *)(a1 + 192);
  if (v41)
  {
    uint64_t v42 = *(void *)(a2 + 192);
  }
  else
  {
    uint64_t v42 = *(void *)(a2 + 192);
    if (!v42) {
      goto LABEL_35;
    }
  }
  *(void *)(a1 + 192) = v42;
  *(void *)(a2 + 192) = v41;
LABEL_35:
  uint64_t v43 = *(void *)(a1 + 200);
  if (v43)
  {
    uint64_t v44 = *(void *)(a2 + 200);
  }
  else
  {
    uint64_t v44 = *(void *)(a2 + 200);
    if (!v44) {
      goto LABEL_39;
    }
  }
  *(void *)(a1 + 20sub_10002F6CC(&a9, 0) = v44;
  *(void *)(a2 + 20sub_10002F6CC(&a9, 0) = v43;
LABEL_39:
  uint64_t v45 = *(void *)(a1 + 208);
  if (v45)
  {
    uint64_t v46 = *(void *)(a2 + 208);
  }
  else
  {
    uint64_t v46 = *(void *)(a2 + 208);
    if (!v46) {
      goto LABEL_43;
    }
  }
  *(void *)(a1 + 208) = v46;
  *(void *)(a2 + 208) = v45;
LABEL_43:
  int v47 = (uint64_t *)(a1 + 216);
  uint64_t v48 = *(void *)(a1 + 8);
  uint64_t v49 = (void *)(v48 & 0xFFFFFFFFFFFFFFFELL);
  if (v48) {
    uint64_t v49 = (void *)*v49;
  }
  if ((uint64_t *)*v47 != &qword_1000B6B88 || *(uint64_t **)(a2 + 216) != &qword_1000B6B88)
  {
    int v50 = sub_10004EA20(v47, (uint64_t)v49);
    uint64_t v51 = sub_10004EA20((uint64_t *)(a2 + 216), (uint64_t)v49);
    uint64_t v52 = v50[2];
    long long v53 = *(_OWORD *)v50;
    uint64_t v54 = v51[2];
    *(_OWORD *)int v50 = *(_OWORD *)v51;
    v50[2] = v54;
    *(_OWORD *)uint64_t v51 = v53;
    v51[2] = v52;
  }
  uint64_t v55 = *(void *)(a1 + 224);
  uint64_t v56 = *(void *)(a1 + 232);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a2 + 224) = v55;
  *(void *)(a2 + 232) = v56;
  uint64_t v57 = *(void *)(a1 + 240);
  uint64_t v58 = *(void *)(a1 + 248);
  *(_OWORD *)(a1 + 24sub_10002F6CC(&a9, 0) = *(_OWORD *)(a2 + 240);
  *(void *)(a2 + 24sub_10002F6CC(&a9, 0) = v57;
  *(void *)(a2 + 248) = v58;
  uint64_t v59 = *(void *)(a1 + 256);
  uint64_t v60 = *(void *)(a1 + 264);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(void *)(a2 + 256) = v59;
  *(void *)(a2 + 264) = v60;
  LODWORD(v59) = *(_DWORD *)(a1 + 272);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a2 + 272) = v59;
  LODWORD(v59) = *(_DWORD *)(a1 + 276);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a2 + 276) = v59;
  int v61 = *(_DWORD *)(a1 + 280);
  *(_DWORD *)(a1 + 28sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a2 + 28sub_10002F6CC(&a9, 0) = v61;
  LODWORD(v59) = *(_DWORD *)(a1 + 284);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a2 + 284) = v59;
  float result = *(float *)(a1 + 288);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(float *)(a2 + 288) = result;
  LODWORD(v59) = *(_DWORD *)(a1 + 292);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a2 + 292) = v59;
  LODWORD(v59) = *(_DWORD *)(a1 + 296);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a2 + 296) = v59;
  LODWORD(v59) = *(_DWORD *)(a1 + 300);
  *(_DWORD *)(a1 + 30sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a2 + 30sub_10002F6CC(&a9, 0) = v59;
  LODWORD(v59) = *(_DWORD *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a2 + 304) = v59;
  LOBYTE(v59) = *(unsigned char *)(a1 + 308);
  *(unsigned char *)(a1 + 308) = *(unsigned char *)(a2 + 308);
  *(unsigned char *)(a2 + 308) = v59;
  LOBYTE(v59) = *(unsigned char *)(a1 + 309);
  *(unsigned char *)(a1 + 309) = *(unsigned char *)(a2 + 309);
  *(unsigned char *)(a2 + 309) = v59;
  LOBYTE(v59) = *(unsigned char *)(a1 + 310);
  *(unsigned char *)(a1 + 31sub_10002F6CC(&a9, 0) = *(unsigned char *)(a2 + 310);
  *(unsigned char *)(a2 + 31sub_10002F6CC(&a9, 0) = v59;
  LOBYTE(v59) = *(unsigned char *)(a1 + 311);
  *(unsigned char *)(a1 + 311) = *(unsigned char *)(a2 + 311);
  *(unsigned char *)(a2 + 311) = v59;
  LOBYTE(v59) = *(unsigned char *)(a1 + 312);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(unsigned char *)(a2 + 312) = v59;
  LOBYTE(v59) = *(unsigned char *)(a1 + 313);
  *(unsigned char *)(a1 + 313) = *(unsigned char *)(a2 + 313);
  *(unsigned char *)(a2 + 313) = v59;
  LODWORD(v59) = *(_DWORD *)(a1 + 316);
  *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
  *(_DWORD *)(a2 + 316) = v59;
  LODWORD(v59) = *(_DWORD *)(a1 + 320);
  *(_DWORD *)(a1 + 32sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 320);
  *(_DWORD *)(a2 + 32sub_10002F6CC(&a9, 0) = v59;
  LODWORD(v59) = *(_DWORD *)(a1 + 324);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
  *(_DWORD *)(a2 + 324) = v59;
  return result;
}

void *sub_10004295C@<X0>(void *a1@<X8>)
{
  return sub_10000A1B4(a1, "sentencepiece.TrainerSpec");
}

uint64_t sub_10004296C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000AD748;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = off_1000AD7E8;
  sub_100053488(a1 + 24, a2);
  *(void *)(a1 + 48) = 0;
  if (atomic_load_explicit(dword_1000B5998, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B5998);
  }
  *(void *)(a1 + 56) = &qword_1000B6B88;
  *(void *)(a1 + 64) = &qword_1000B6B88;
  *(void *)(a1 + 72) = &qword_1000B6B88;
  *(_DWORD *)(a1 + 8sub_10002F6CC(&a9, 0) = 16843008;
  return a1;
}

void sub_100042A18(_Unwind_Exception *a1)
{
  sub_100053584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100042A30(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)a1 = off_1000AD748;
  *(void *)(a1 + 16) = off_1000AD7E8;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = a1 + 24;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = 0;
  *(void *)(a1 + 48) = *(unsigned int *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    unint64_t v7 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
    int v8 = *(char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    if (v8 >= 0) {
      uint64_t v9 = (const std::string::value_type *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = *(const std::string::value_type **)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    }
    else {
      std::string::size_type v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16);
    }
    std::string::append(v7, v9, v10);
  }
  sub_10005BC28(v5, a2 + 24);
  *(void *)(a1 + 56) = &qword_1000B6B88;
  int v11 = *(_DWORD *)(a2 + 48);
  if (v11)
  {
    int v12 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      int v12 = (void *)*v12;
    }
    sub_10004E9D8((uint64_t *)(a1 + 56), (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v12);
    int v11 = *(_DWORD *)(a2 + 48);
  }
  *(void *)(a1 + 64) = &qword_1000B6B88;
  if ((v11 & 2) != 0)
  {
    int v13 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      int v13 = (void *)*v13;
    }
    sub_10004E9D8((uint64_t *)(a1 + 64), (long long *)(*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v13);
    int v11 = *(_DWORD *)(a2 + 48);
  }
  *(void *)(a1 + 72) = &qword_1000B6B88;
  if ((v11 & 4) != 0)
  {
    unsigned int v14 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      unsigned int v14 = (void *)*v14;
    }
    sub_10004E9D8((uint64_t *)(a1 + 72), (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v14);
  }
  *(_DWORD *)(a1 + 8sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_100042BA4(_Unwind_Exception *a1)
{
  sub_100053584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100042BBC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_100042BF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1972);
    uint64_t v4 = sub_100051E74(v12, "CHECK failed: GetArena() == nullptr: ");
    sub_100051FB0((uint64_t)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v12);
  }
LABEL_4:
  if (*(uint64_t **)(a1 + 56) != &qword_1000B6B88)
  {
    uint64_t v5 = sub_10003D154((uint64_t *)(a1 + 56));
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    operator delete();
  }
  float result = (uint64_t *)(a1 + 64);
  if (*(uint64_t **)(a1 + 64) != &qword_1000B6B88)
  {
    uint64_t v7 = sub_10003D154(result);
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    operator delete();
  }
  uint64_t v9 = *(uint64_t **)(a1 + 72);
  int v8 = (uint64_t *)(a1 + 72);
  if (v9 != &qword_1000B6B88)
  {
    uint64_t v10 = sub_10003D154(v8);
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    operator delete();
  }
  return result;
}

void sub_100042D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100042D64(uint64_t a1)
{
  return sub_100042BBC(a1 - 16);
}

void sub_100042D6C(uint64_t a1)
{
  sub_100042BBC(a1);
  operator delete();
}

void sub_100042DA4(uint64_t a1)
{
  sub_100042BBC(a1 - 16);
  operator delete();
}

uint64_t sub_100042DE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 52) = a2;
  return result;
}

void *sub_100042DE8()
{
  if (atomic_load_explicit(dword_1000B5998, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B5998);
  }
  return &unk_1000B69A0;
}

unsigned __int8 *sub_100042E24(uint64_t a1)
{
  float result = sub_10005BB88((unsigned __int8 *)(a1 + 24));
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) == 0)
    {
      if ((v3 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      unint64_t v5 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v5 + 23) < 0)
      {
        **(unsigned char **)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        if ((v3 & 4) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v5 = 0;
        *(unsigned char *)(v5 + 23) = 0;
        if ((v3 & 4) == 0) {
          goto LABEL_17;
        }
      }
      goto LABEL_14;
    }
    unint64_t v4 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_10;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_10;
      }
    }
LABEL_4:
    if ((v3 & 4) == 0) {
      goto LABEL_17;
    }
LABEL_14:
    unint64_t v6 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
LABEL_17:
  if ((v3 & 0x78) != 0) {
    *(_DWORD *)(a1 + 8sub_10002F6CC(&a9, 0) = 16843008;
  }
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(unsigned char **)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v8 + 8) = 0;
      *(unsigned char *)(v8 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_100042F34(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v42 = a2;
  int v5 = 0;
  if ((sub_10003D228((uint64_t)a3, (char **)v42, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      unint64_t v8 = (char *)(*(void *)v42 + 1);
      unsigned int v9 = **(unsigned char **)v42;
      if ((char)**(unsigned char **)v42 < 0)
      {
        unsigned int v10 = v9 + (*v8 << 7);
        unsigned int v9 = v10 - 128;
        if (*v8 < 0)
        {
          uint64_t v17 = sub_100070F68(*(uint64_t *)v42, v10 - 128);
          *(void *)uint64_t v42 = v17;
          if (!v17) {
            goto LABEL_67;
          }
          unint64_t v8 = (char *)v17;
          unsigned int v9 = v18;
          goto LABEL_8;
        }
        unint64_t v8 = (char *)(*(void *)v42 + 2);
      }
      *(void *)uint64_t v42 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 48) |= 1u;
          uint64_t v11 = *(void *)(a1 + 8);
          int v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if (v11) {
            int v12 = (void *)*v12;
          }
          int v13 = (uint64_t *)(a1 + 56);
          goto LABEL_44;
        case 2u:
          if (v9 != 18) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 48) |= 2u;
          uint64_t v19 = *(void *)(a1 + 8);
          int v12 = (void *)(v19 & 0xFFFFFFFFFFFFFFFELL);
          if (v19) {
            int v12 = (void *)*v12;
          }
          int v13 = (uint64_t *)(a1 + 64);
          goto LABEL_44;
        case 3u:
          if (v9 != 24) {
            goto LABEL_48;
          }
          v5 |= 0x10u;
          uint64_t v20 = v8 + 1;
          uint64_t v21 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_29;
          }
          int v22 = *v20;
          uint64_t v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            uint64_t v36 = sub_100070F20((uint64_t)v8, v21);
            *(void *)uint64_t v42 = v36;
            *(unsigned char *)(a1 + 81) = v37 != 0;
            if (!v36) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v20 = v8 + 2;
LABEL_29:
            *(void *)uint64_t v42 = v20;
            *(unsigned char *)(a1 + 81) = v21 != 0;
          }
          goto LABEL_46;
        case 4u:
          if (v9 != 32) {
            goto LABEL_48;
          }
          v5 |= 0x20u;
          uint64_t v23 = v8 + 1;
          uint64_t v24 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          int v25 = *v23;
          uint64_t v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            uint64_t v38 = sub_100070F20((uint64_t)v8, v24);
            *(void *)uint64_t v42 = v38;
            *(unsigned char *)(a1 + 82) = v39 != 0;
            if (!v38) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v23 = v8 + 2;
LABEL_34:
            *(void *)uint64_t v42 = v23;
            *(unsigned char *)(a1 + 82) = v24 != 0;
          }
          goto LABEL_46;
        case 5u:
          if (v9 != 40) {
            goto LABEL_48;
          }
          v5 |= 0x40u;
          uint64_t v26 = v8 + 1;
          uint64_t v27 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_39;
          }
          int v28 = *v26;
          uint64_t v27 = v27 + (v28 << 7) - 128;
          if (v28 < 0)
          {
            uint64_t v40 = sub_100070F20((uint64_t)v8, v27);
            *(void *)uint64_t v42 = v40;
            *(unsigned char *)(a1 + 83) = v41 != 0;
            if (!v40) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v26 = v8 + 2;
LABEL_39:
            *(void *)uint64_t v42 = v26;
            *(unsigned char *)(a1 + 83) = v27 != 0;
          }
          goto LABEL_46;
        case 6u:
          if (v9 != 50) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 48) |= 4u;
          uint64_t v29 = *(void *)(a1 + 8);
          int v12 = (void *)(v29 & 0xFFFFFFFFFFFFFFFELL);
          if (v29) {
            int v12 = (void *)*v12;
          }
          int v13 = (uint64_t *)(a1 + 72);
LABEL_44:
          uint64_t v30 = (std::string *)sub_10004EA20(v13, (uint64_t)v12);
          uint64_t v31 = (void *)sub_100071098(v30, *(char **)v42, (uint64_t)a3);
          goto LABEL_45;
        default:
          if (v9 >> 3 == 200 && v9 == 64)
          {
            v5 |= 8u;
            unsigned int v14 = v8 + 1;
            uint64_t v15 = *v8;
            if ((*v8 & 0x80000000) == 0) {
              goto LABEL_18;
            }
            int v16 = *v14;
            uint64_t v15 = v15 + (v16 << 7) - 128;
            if ((v16 & 0x80000000) == 0)
            {
              unsigned int v14 = v8 + 2;
LABEL_18:
              *(void *)uint64_t v42 = v14;
              *(unsigned char *)(a1 + 8sub_10002F6CC(&a9, 0) = v15 != 0;
              goto LABEL_46;
            }
            uint64_t v34 = sub_100070F20((uint64_t)v8, v15);
            *(void *)uint64_t v42 = v34;
            *(unsigned char *)(a1 + 8sub_10002F6CC(&a9, 0) = v35 != 0;
            if (!v34) {
              goto LABEL_67;
            }
          }
          else
          {
LABEL_48:
            if (v9) {
              BOOL v32 = (v9 & 7) == 4;
            }
            else {
              BOOL v32 = 1;
            }
            if (v32)
            {
              a3[10].i32[0] = v9 - 1;
              goto LABEL_2;
            }
            if (v9 < 0x648)
            {
              if (*v7)
              {
                uint64_t v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
              }
              else
              {
                uint64_t v33 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
                unint64_t v8 = *(char **)v42;
              }
              uint64_t v31 = sub_10007157C(v9, v33, v8, a3);
            }
            else
            {
              uint64_t v31 = sub_10005E7C4((uint64_t *)(a1 + 24), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1000B69A0, (unint64_t *)(a1 + 8), a3);
            }
LABEL_45:
            *(void *)uint64_t v42 = v31;
            if (!v31)
            {
LABEL_67:
              *(void *)uint64_t v42 = 0;
              goto LABEL_2;
            }
          }
LABEL_46:
          if (sub_10003D228((uint64_t)a3, (char **)v42, a3[11].i32[1])) {
            goto LABEL_2;
          }
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 48) |= v5;
  return *(void *)v42;
}

char *sub_100043358(uint64_t a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 48);
  if (v6)
  {
    unint64_t v4 = sub_10003ADD8(a3, 1, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = sub_10003ADD8(a3, 2, (const void **)(*(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_11:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_100051170((uint64_t)a3, v4);
  }
  char v7 = *(unsigned char *)(a1 + 81);
  *unint64_t v4 = 24;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_14:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_100051170((uint64_t)a3, v4);
  }
  char v8 = *(unsigned char *)(a1 + 82);
  *unint64_t v4 = 32;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_17:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_100051170((uint64_t)a3, v4);
  }
  char v9 = *(unsigned char *)(a1 + 83);
  *unint64_t v4 = 40;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
LABEL_20:
  unint64_t v4 = sub_10003ADD8(a3, 6, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0) {
    goto LABEL_24;
  }
LABEL_21:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_100051170((uint64_t)a3, v4);
  }
  char v10 = *(unsigned char *)(a1 + 80);
  *(_WORD *)unint64_t v4 = 3264;
  v4[2] = v10;
  v4 += 3;
LABEL_24:
  uint64_t v11 = sub_10005FF78(a1 + 24, 201, 0x20000000, v4, (uint64_t *)a3);
  int v12 = v11;
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v12;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 31) < 0)
  {
    int v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    int v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v11) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v11, v16, (int)v17);
    v12 += v18;
    return v12;
  }
  return sub_100051284((uint64_t *)a3, (char *)v16, v17, (unint64_t)v11);
}

uint64_t sub_10004356C(uint64_t a1)
{
  uint64_t result = sub_100062D70(a1 + 24);
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0x7F) == 0) {
    goto LABEL_17;
  }
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_22:
    unint64_t v12 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v14 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      uint64_t v14 = v13;
    }
    result += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  unint64_t v9 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  uint64_t v11 = *(void *)(v9 + 8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v10;
  }
  result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 2) != 0) {
    goto LABEL_22;
  }
LABEL_4:
  if ((v3 & 4) != 0)
  {
LABEL_5:
    unint64_t v4 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v6 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = v5;
    }
    result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v7 = result + 3;
  if ((v3 & 8) == 0) {
    uint64_t v7 = result;
  }
  if ((v3 & 0x10) != 0) {
    v7 += 2;
  }
  if ((v3 & 0x20) != 0) {
    v7 += 2;
  }
  if ((v3 & 0x40) != 0) {
    uint64_t result = v7 + 2;
  }
  else {
    uint64_t result = v7;
  }
LABEL_17:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v15 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v15 + 31) < 0) {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 31);
    }
    result += v16;
  }
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

void sub_1000436D4(uint64_t a1, void *lpsrc)
{
  sub_10004375C(a1, (uint64_t)lpsrc);
}

void sub_10004375C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_100051E5C((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2246);
    unint64_t v4 = sub_100051E74(v24, "CHECK failed: (&from) != (this): ");
    sub_100051FB0((uint64_t)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v24);
  }
  sub_10005BC28(a1 + 24, a2 + 24);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      unint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unint64_t v9 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0x7F) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 48) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      sub_10004E9D8((uint64_t *)(a1 + 56), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0) {
          goto LABEL_17;
        }
        goto LABEL_30;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    uint64_t v17 = (long long *)(*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 2u;
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    sub_10004E9D8((uint64_t *)(a1 + 64), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0) {
        goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_30:
    uint64_t v20 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 4u;
    uint64_t v21 = *(void *)(a1 + 8);
    int v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFELL);
    if (v21) {
      int v22 = (void *)*v22;
    }
    sub_10004E9D8((uint64_t *)(a1 + 72), v20, (uint64_t)v22);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_34;
    }
LABEL_33:
    *(unsigned char *)(a1 + 8sub_10002F6CC(&a9, 0) = *(unsigned char *)(a2 + 80);
    if ((v13 & 0x10) == 0)
    {
LABEL_19:
      if ((v13 & 0x20) == 0) {
        goto LABEL_20;
      }
      goto LABEL_35;
    }
LABEL_34:
    *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
    if ((v13 & 0x20) == 0)
    {
LABEL_20:
      if ((v13 & 0x40) == 0)
      {
LABEL_22:
        *(_DWORD *)(a1 + 48) |= v13;
        return;
      }
LABEL_21:
      *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
      goto LABEL_22;
    }
LABEL_35:
    *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
    if ((v13 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
}

void sub_100043928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100043940(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_100042E24(a1);
    sub_10004375C(a1, a2);
  }
}

uint64_t sub_10004398C(uint64_t a1)
{
  return sub_10005D28C(a1 + 24);
}

uint64_t *sub_100043994(uint64_t a1, uint64_t a2)
{
  sub_10005CEA0(a1 + 24, a2 + 24);
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      unint64_t v10 = sub_10003D368((unint64_t *)(a2 + 8));
      uint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_26:
      unint64_t v11 = sub_10003D368((unint64_t *)(a1 + 8));
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = v8;
    unint64_t v9 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  unint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_6:
  unint64_t v11 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  uint64_t v12 = *(void *)(v11 + 16);
  long long v13 = *(_OWORD *)v11;
  uint64_t v14 = *(void *)(v10 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = v14;
  *(_OWORD *)unint64_t v10 = v13;
  *(void *)(v10 + 16) = v12;
  uint64_t v15 = *(void *)(a1 + 8);
  LODWORD(v14) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = v14;
  unint64_t v9 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if (v15)
  {
    uint64_t v16 = *v9;
    uint64_t v7 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = 0;
LABEL_9:
  uint64_t v16 = (uint64_t)v9;
LABEL_10:
  if (*(uint64_t **)(a1 + 56) != &qword_1000B6B88 || *(uint64_t **)(a2 + 56) != &qword_1000B6B88)
  {
    uint64_t v17 = sub_10004EA20((uint64_t *)(a1 + 56), v16);
    uint64_t v18 = sub_10004EA20((uint64_t *)(a2 + 56), v16);
    uint64_t v19 = v17[2];
    long long v20 = *(_OWORD *)v17;
    uint64_t v21 = v18[2];
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    void v17[2] = v21;
    *(_OWORD *)uint64_t v18 = v20;
    std::string v18[2] = v19;
    uint64_t v7 = *v5 & 1;
    unint64_t v9 = (uint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v22 = (uint64_t *)(a1 + 64);
  uint64_t v23 = (uint64_t)v9;
  if (v7) {
    uint64_t v23 = *v9;
  }
  if ((uint64_t *)*v22 != &qword_1000B6B88 || *(uint64_t **)(a2 + 64) != &qword_1000B6B88)
  {
    uint64_t v24 = sub_10004EA20(v22, v23);
    int v25 = sub_10004EA20((uint64_t *)(a2 + 64), v23);
    uint64_t v26 = v24[2];
    long long v27 = *(_OWORD *)v24;
    uint64_t v28 = v25[2];
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    std::string v24[2] = v28;
    *(_OWORD *)int v25 = v27;
    v25[2] = v26;
    uint64_t v7 = *v5 & 1;
    unint64_t v9 = (uint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t result = (uint64_t *)(a1 + 72);
  if (v7) {
    unint64_t v9 = (uint64_t *)*v9;
  }
  if ((uint64_t *)*result != &qword_1000B6B88 || *(uint64_t **)(a2 + 72) != &qword_1000B6B88)
  {
    uint64_t v30 = sub_10004EA20(result, (uint64_t)v9);
    uint64_t result = sub_10004EA20((uint64_t *)(a2 + 72), (uint64_t)v9);
    uint64_t v31 = v30[2];
    long long v32 = *(_OWORD *)v30;
    uint64_t v33 = result[2];
    *(_OWORD *)uint64_t v30 = *(_OWORD *)result;
    v30[2] = v33;
    *(_OWORD *)uint64_t result = v32;
    result[2] = v31;
  }
  char v34 = *(unsigned char *)(a1 + 80);
  *(unsigned char *)(a1 + 8sub_10002F6CC(&a9, 0) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a2 + 8sub_10002F6CC(&a9, 0) = v34;
  char v35 = *(unsigned char *)(a1 + 81);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a2 + 81) = v35;
  char v36 = *(unsigned char *)(a1 + 82);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(unsigned char *)(a2 + 82) = v36;
  char v37 = *(unsigned char *)(a1 + 83);
  *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
  *(unsigned char *)(a2 + 83) = v37;
  return result;
}

void *sub_100043C20@<X0>(void *a1@<X8>)
{
  return sub_10000A1B4(a1, "sentencepiece.NormalizerSpec");
}

void *sub_100043C30(void *a1, uint64_t a2)
{
  *a1 = off_1000AD828;
  a1[1] = a2;
  a1[2] = 0;
  if (atomic_load_explicit(dword_1000B59D0, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B59D0);
  }
  a1[3] = &qword_1000B6B88;
  a1[4] = &qword_1000B6B88;
  return a1;
}

uint64_t sub_100043CA4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)a1 = off_1000AD828;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 2sub_10002F6CC(&a9, 0) = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
    unint64_t v10 = *(const std::string::value_type **)(v6 + 8);
    unint64_t v9 = v6 + 8;
    int v8 = v10;
    int v11 = *(char *)(v9 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (const std::string::value_type *)v9;
    }
    else {
      uint64_t v12 = v8;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(v9 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(v9 + 8);
    }
    std::string::append(v7, v12, v13);
  }
  *(void *)(a1 + 24) = &qword_1000B6B88;
  int v14 = *(_DWORD *)(a2 + 16);
  if (v14)
  {
    uint64_t v15 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      uint64_t v15 = (void *)*v15;
    }
    sub_10004E9D8((uint64_t *)(a1 + 24), (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v15);
    int v14 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 32) = &qword_1000B6B88;
  if ((v14 & 2) != 0)
  {
    uint64_t v16 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      uint64_t v16 = (void *)*v16;
    }
    sub_10004E9D8((uint64_t *)(a1 + 32), (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v16);
  }
  return a1;
}

uint64_t sub_100043DA0(uint64_t a1)
{
  return a1;
}

uint64_t *sub_100043DD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2362);
    uint64_t v4 = sub_100051E74(v11, "CHECK failed: GetArena() == nullptr: ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
LABEL_4:
  uint64_t result = (uint64_t *)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_1000B6B88)
  {
    uint64_t v6 = sub_10003D154(result);
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    operator delete();
  }
  int v8 = *(uint64_t **)(a1 + 32);
  uint64_t v7 = (uint64_t *)(a1 + 32);
  if (v8 != &qword_1000B6B88)
  {
    uint64_t v9 = sub_10003D154(v7);
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    operator delete();
  }
  return result;
}

void sub_100043EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100043F00(uint64_t a1)
{
  sub_100043DA0(a1);
  operator delete();
}

uint64_t sub_100043F38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2sub_10002F6CC(&a9, 0) = a2;
  return result;
}

void *sub_100043F40()
{
  if (atomic_load_explicit(dword_1000B59D0, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B59D0);
  }
  return qword_1000B69F8;
}

uint64_t sub_100043F7C(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16);
  if ((v1 & 3) != 0)
  {
    if (v1)
    {
      unint64_t v2 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v2 + 23) < 0)
      {
        **(unsigned char **)unint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
        if ((v1 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)unint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    unint64_t v3 = *(void *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  *(_DWORD *)(result + 16) = 0;
  uint64_t v4 = *(void *)(result + 8);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(unsigned char **)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 8) = 0;
      *(unsigned char *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_100044018(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v21 = a2;
  if ((sub_10003D228((uint64_t)a3, (char **)v21, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v6 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v7 = (char *)(*(void *)v21 + 1);
      unsigned int v8 = **(unsigned char **)v21;
      if (((char)**(unsigned char **)v21 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((*v7 & 0x80000000) == 0) {
        break;
      }
      uint64_t v19 = sub_100070F68(*(uint64_t *)v21, v9 - 128);
      *(void *)uint64_t v21 = v19;
      if (!v19)
      {
LABEL_35:
        *(void *)uint64_t v21 = 0;
        return *(void *)v21;
      }
      uint64_t v7 = (char *)v19;
      unsigned int v8 = v20;
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v14 = *(void *)(a1 + 8);
          uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
          if (v14) {
            uint64_t v15 = (void *)*v15;
          }
          uint64_t v16 = (uint64_t *)(a1 + 32);
          goto LABEL_27;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v15 = (void *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if (v17) {
          uint64_t v15 = (void *)*v15;
        }
        uint64_t v16 = (uint64_t *)(a1 + 24);
LABEL_27:
        uint64_t v18 = (std::string *)sub_10004EA20(v16, (uint64_t)v15);
        std::string::size_type v13 = (void *)sub_100071098(v18, *(char **)v21, (uint64_t)a3);
        goto LABEL_28;
      }
      if (v8) {
        BOOL v11 = (v8 & 7) == 4;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {
        a3[10].i32[0] = v8 - 1;
        return *(void *)v21;
      }
      if (*v6)
      {
        uint64_t v12 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        uint64_t v12 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
        uint64_t v7 = *(char **)v21;
      }
      std::string::size_type v13 = sub_10007157C(v8, v12, v7, a3);
LABEL_28:
      *(void *)uint64_t v21 = v13;
      if (!v13) {
        goto LABEL_35;
      }
      if (sub_10003D228((uint64_t)a3, (char **)v21, a3[11].i32[1])) {
        return *(void *)v21;
      }
    }
    uint64_t v7 = (char *)(*(void *)v21 + 2);
LABEL_7:
    *(void *)uint64_t v21 = v7;
    goto LABEL_8;
  }
  return *(void *)v21;
}

char *sub_1000441C4(uint64_t a1, char *__dst, unint64_t *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_10003ADD8(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    uint64_t v4 = sub_10003ADD8(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 31) < 0)
  {
    char v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    char v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }
  return sub_100051284((uint64_t *)a3, (char *)v10, v11, (unint64_t)v4);
}

uint64_t sub_1000442B0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 2sub_10002F6CC(&a9, 0) = v2;
  return v2;
}

std::string *sub_100044388(std::string *a1, void *lpsrc)
{
  return sub_100044410(a1, (uint64_t)lpsrc);
}

std::string *sub_100044410(std::string *result, uint64_t a2)
{
  unint64_t v3 = result;
  if ((std::string *)a2 == result)
  {
    sub_100051E5C((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2516);
    uint64_t v4 = sub_100051E74(v21, "CHECK failed: (&from) != (this): ");
    sub_100051FB0((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (std::string *)sub_100051FB8((uint64_t)v21);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    std::string::size_type size = v3->__r_.__value_.__l.__size_;
    if (size) {
      uint64_t v9 = (std::string *)((size & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_10003D368(&v3->__r_.__value_.__l.__size_);
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    uint64_t result = std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 16);
  if ((v13 & 3) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::size_type v15 = v3->__r_.__value_.__l.__size_;
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t result = sub_10004E9D8((uint64_t *)&v3[1], v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      uint64_t v17 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
      std::string::size_type v18 = v3->__r_.__value_.__l.__size_;
      uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if (v18) {
        uint64_t v19 = (void *)*v19;
      }
      return sub_10004E9D8((uint64_t *)&v3[1].__r_.__value_.__l.__size_, v17, (uint64_t)v19);
    }
  }
  return result;
}

void sub_100044544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_10004455C(std::string *result, uint64_t a2)
{
  if ((std::string *)a2 != result)
  {
    uint64_t v4 = result;
    sub_100043F7C((uint64_t)result);
    return sub_100044410(v4, a2);
  }
  return result;
}

uint64_t sub_1000445A8()
{
  return 1;
}

__n128 sub_1000445B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (unint64_t *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      unint64_t v10 = sub_10003D368((unint64_t *)(a2 + 8));
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_21:
      unint64_t v11 = (__n128 *)sub_10003D368(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v8;
    uint64_t v9 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  unint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_6:
  unint64_t v11 = (__n128 *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
LABEL_7:
  unint64_t v12 = v11[1].n128_u64[0];
  __n128 result = *v11;
  unint64_t v14 = *(void *)(v10 + 16);
  *unint64_t v11 = *(__n128 *)v10;
  v11[1].n128_u64[0] = v14;
  *(__n128 *)unint64_t v10 = result;
  *(void *)(v10 + 16) = v12;
  uint64_t v15 = *(void *)(a1 + 8);
  LODWORD(v14) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v14;
  uint64_t v9 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if (v15)
  {
    uint64_t v16 = *v9;
    uint64_t v7 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = 0;
LABEL_9:
  uint64_t v16 = (uint64_t)v9;
LABEL_10:
  if (*(uint64_t **)(a1 + 24) != &qword_1000B6B88 || *(uint64_t **)(a2 + 24) != &qword_1000B6B88)
  {
    uint64_t v17 = (__n128 *)sub_10004EA20((uint64_t *)(a1 + 24), v16);
    std::string::size_type v18 = sub_10004EA20((uint64_t *)(a2 + 24), v16);
    uint64_t v19 = v17[1].n128_i64[0];
    __n128 result = *v17;
    uint64_t v20 = v18[2];
    *uint64_t v17 = *(__n128 *)v18;
    v17[1].n128_u64[0] = v20;
    *(__n128 *)std::string::size_type v18 = result;
    std::string v18[2] = v19;
    uint64_t v7 = *v5 & 1;
    uint64_t v9 = (uint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v21 = (uint64_t *)(a1 + 32);
  if (v7) {
    uint64_t v9 = (uint64_t *)*v9;
  }
  int v22 = (uint64_t *)(a2 + 32);
  if ((uint64_t *)*v21 != &qword_1000B6B88 || (uint64_t *)*v22 != &qword_1000B6B88)
  {
    uint64_t v23 = (__n128 *)sub_10004EA20(v21, (uint64_t)v9);
    uint64_t v24 = sub_10004EA20(v22, (uint64_t)v9);
    uint64_t v25 = v23[1].n128_i64[0];
    __n128 result = *v23;
    uint64_t v26 = v24[2];
    *uint64_t v23 = *(__n128 *)v24;
    v23[1].n128_u64[0] = v26;
    *(__n128 *)uint64_t v24 = result;
    std::string v24[2] = v25;
  }
  return result;
}

void *sub_10004477C@<X0>(void *a1@<X8>)
{
  return sub_10000A1B4(a1, "sentencepiece.SelfTestData.Sample");
}

uint64_t sub_10004478C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000AD8A8;
  *(void *)(a1 + 8) = a2;
  sub_100053488(a1 + 16, a2);
  *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (atomic_load_explicit(dword_1000B59B0, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B59B0);
  }
  return a1;
}

void sub_100044814(_Unwind_Exception *a1)
{
  sub_100048EC4(v2);
  sub_100053584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100044834(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (unint64_t *)(a1 + 8);
  *(void *)a1 = off_1000AD8A8;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = a1 + 16;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  sub_100048F80(a1 + 40, a2 + 40);
  *(_DWORD *)(a1 + 64) = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    if (*v4) {
      uint64_t v7 = (std::string *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v7 = (std::string *)sub_10003D368(v4);
    }
    int v8 = *(char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    if (v8 >= 0) {
      uint64_t v9 = (const std::string::value_type *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = *(const std::string::value_type **)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    }
    else {
      std::string::size_type v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16);
    }
    std::string::append(v7, v9, v10);
  }
  sub_10005BC28(v5, a2 + 16);
  return a1;
}

void sub_10004490C(_Unwind_Exception *a1)
{
  sub_10003D660(v2);
  sub_100053584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004493C(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    if (!*v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2589);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
LABEL_4:
  sub_10003A610(v3);
  sub_100048EC4((uint64_t *)(a1 + 40));
  sub_100053584(a1 + 16);
  return a1;
}

void sub_1000449DC(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  sub_1000015C4(a1);
}

void sub_100044A00(uint64_t a1)
{
  sub_10004493C(a1);
  operator delete();
}

uint64_t sub_100044A38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 64) = a2;
  return result;
}

void *sub_100044A40()
{
  if (atomic_load_explicit(dword_1000B59B0, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B59B0);
  }
  return &unk_1000B6A20;
}

uint64_t sub_100044A7C(uint64_t a1)
{
  sub_10005BB88((unsigned __int8 *)(a1 + 16));
  uint64_t result = sub_100048B3C(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(unsigned char **)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_100044AD8(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v23 = a2;
  if ((sub_10003D228((uint64_t)a3, &v23, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v6 = v23 + 1;
      unsigned int v7 = *v23;
      if ((*v23 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0) {
        break;
      }
      uint64_t v20 = (char *)sub_100070F68((uint64_t)v23, v8 - 128);
      uint64_t v23 = v20;
      if (!v20) {
        return 0;
      }
      uint64_t v6 = v20;
      unsigned int v7 = v21;
LABEL_7:
      if (v7 == 10)
      {
        unint64_t v11 = v6 - 1;
        while (1)
        {
          unint64_t v12 = (unsigned __int8 *)(v11 + 1);
          uint64_t v23 = v11 + 1;
          int v13 = *(int **)(a1 + 56);
          if (!v13) {
            break;
          }
          uint64_t v14 = *(int *)(a1 + 48);
          int v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 52))
            {
LABEL_20:
              sub_10007E8E4(a1 + 40, v15 + 1);
              int v13 = *(int **)(a1 + 56);
              int v15 = *v13;
            }
            int *v13 = v15 + 1;
            uint64_t v16 = sub_100047C18(*(void *)(a1 + 40));
            uint64_t v17 = *(void *)(a1 + 56);
            uint64_t v18 = *(int *)(a1 + 48);
            *(_DWORD *)(a1 + 48) = v18 + 1;
            *(void *)(v17 + 8 * v18 + 8) = v16;
            unint64_t v12 = (unsigned __int8 *)v23;
            goto LABEL_22;
          }
          *(_DWORD *)(a1 + 48) = v14 + 1;
          uint64_t v16 = *(void **)&v13[2 * v14 + 2];
LABEL_22:
          unint64_t v11 = (char *)sub_100044CF0(a3, (uint64_t)v16, v12);
          uint64_t v23 = v11;
          if (!v11) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
            goto LABEL_30;
          }
        }
        int v15 = *(_DWORD *)(a1 + 52);
        goto LABEL_20;
      }
      if (v7) {
        BOOL v9 = (v7 & 7) == 4;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v23;
      }
      if (v7 < 0x640)
      {
        if (*v5)
        {
          uint64_t v19 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          uint64_t v19 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
          uint64_t v6 = v23;
        }
        std::string::size_type v10 = sub_10007157C(v7, v19, v6, a3);
      }
      else
      {
        std::string::size_type v10 = sub_10005E7C4((uint64_t *)(a1 + 16), v7, (unsigned __int8 *)v6, (uint64_t)&unk_1000B6A20, (unint64_t *)(a1 + 8), a3);
      }
      uint64_t v23 = (char *)v10;
      if (!v10) {
        return 0;
      }
LABEL_30:
      if (sub_10003D228((uint64_t)a3, &v23, a3[11].i32[1])) {
        return v23;
      }
    }
    uint64_t v6 = v23 + 2;
LABEL_6:
    uint64_t v23 = v6;
    goto LABEL_7;
  }
  return v23;
}

uint64_t sub_100044CF0(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_100070FAC((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_10003D694((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_100044018(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_100044DB8(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 48);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2) {
        a2 = sub_100051170((uint64_t)a3, a2);
      }
      uint64_t v8 = sub_100048854(a1 + 40, i);
      *a2 = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 20);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          unsigned int v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          unsigned int v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        unsigned int v10 = a2 + 2;
      }
      a2 = sub_1000441C4(v8, v10, a3);
    }
  }
  int v14 = sub_10005FF78(a1 + 16, 200, 0x20000000, a2, (uint64_t *)a3);
  int v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v15;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 31) < 0)
  {
    uint64_t v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    uint64_t v19 = (void *)(v18 + 8);
    LODWORD(v2sub_10002F6CC(&a9, 0) = *(unsigned __int8 *)(v18 + 31);
  }
  if ((uint64_t)(*a3 - (void)v14) >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v14, v19, (int)v20);
    v15 += v21;
    return v15;
  }
  return sub_100051284((uint64_t *)a3, (char *)v19, v20, (unint64_t)v14);
}

uint64_t sub_100044F50(uint64_t a1)
{
  uint64_t v2 = sub_100062D70(a1 + 16);
  uint64_t v3 = *(int *)(a1 + 48);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_1000442B0(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = *(void *)(v12 + 16);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
    }
    v4 += v13;
  }
  *(_DWORD *)(a1 + 64) = v4;
  return v4;
}

uint64_t sub_100045000(uint64_t a1, void *lpsrc)
{
  return sub_100045088(a1, (uint64_t)lpsrc);
}

uint64_t sub_100045088(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2724);
    uint64_t v4 = sub_100051E74(v15, "CHECK failed: (&from) != (this): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  sub_10005BC28(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unsigned int v11 = (const std::string::value_type *)v7;
    }
    else {
      unsigned int v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  return sub_100048F80(a1 + 40, a2 + 40);
}

void sub_100045160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100045178(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v4 = result;
    sub_100044A7C(result);
    return sub_100045088(v4, a2);
  }
  return result;
}

uint64_t sub_1000451C4(uint64_t a1)
{
  return sub_10005D28C(a1 + 16);
}

double sub_1000451CC(uint64_t a1, uint64_t a2)
{
  sub_10005CEA0(a1 + 16, a2 + 16);
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      unint64_t v7 = sub_10003D368((unint64_t *)(a2 + 8));
      uint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_5:
    unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_12:
    unint64_t v8 = sub_10003D368((unint64_t *)(a1 + 8));
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  *(void *)&double result = sub_10003D900((void *)(a1 + 40), a2 + 40).n128_u64[0];
  return result;
}

void *sub_100045294@<X0>(void *a1@<X8>)
{
  return sub_10000A1B4(a1, "sentencepiece.SelfTestData");
}

void *sub_1000452A4(void *a1, uint64_t a2)
{
  *a1 = off_1000AD928;
  a1[1] = a2;
  sub_100053488((uint64_t)(a1 + 2), a2);
  a1[5] = 0;
  if (atomic_load_explicit(dword_1000B5980, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B5980);
  }
  a1[6] = &qword_1000B6B88;
  a1[7] = &_mh_execute_header;
  return a1;
}

void sub_100045324(_Unwind_Exception *a1)
{
  sub_100053584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004533C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)a1 = off_1000AD928;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = a1 + 16;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = *(unsigned int *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    unint64_t v7 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
    int v8 = *(char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    if (v8 >= 0) {
      uint64_t v9 = (const std::string::value_type *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = *(const std::string::value_type **)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    }
    else {
      std::string::size_type v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16);
    }
    std::string::append(v7, v9, v10);
  }
  sub_10005BC28(v5, a2 + 16);
  *(void *)(a1 + 48) = &qword_1000B6B88;
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v11 = (void *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      uint64_t v11 = (void *)*v11;
    }
    sub_10004E9D8((uint64_t *)(a1 + 48), (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v11);
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

void sub_100045430(_Unwind_Exception *a1)
{
  sub_100053584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100045448(uint64_t a1)
{
  return a1;
}

uint64_t sub_100045484(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2813);
    uint64_t v4 = sub_100051E74(v9, "CHECK failed: GetArena() == nullptr: ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    double result = sub_100051FB8((uint64_t)v9);
  }
LABEL_4:
  uint64_t v6 = *(uint64_t **)(v1 + 48);
  uint64_t v5 = (uint64_t *)(v1 + 48);
  if (v6 != &qword_1000B6B88)
  {
    uint64_t v7 = sub_10003D154(v5);
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    operator delete();
  }
  return result;
}

void sub_10004554C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100045568(uint64_t a1)
{
  sub_100045448(a1);
  operator delete();
}

void *sub_1000455A0()
{
  if (atomic_load_explicit(dword_1000B5980, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B5980);
  }
  return qword_1000B6A68;
}

unsigned __int8 *sub_1000455DC(uint64_t a1)
{
  double result = sub_10005BB88((unsigned __int8 *)(a1 + 16));
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
  if ((v3 & 6) != 0) {
    *(void *)(a1 + 56) = &_mh_execute_header;
  }
  *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 31) < 0)
    {
      **(unsigned char **)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v6 + 8) = 0;
      *(unsigned char *)(v6 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_100045674(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)long long v27 = a2;
  int v5 = 0;
  if ((sub_10003D228((uint64_t)a3, (char **)v27, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      char v8 = (char *)(*(void *)v27 + 1);
      unsigned int v9 = **(unsigned char **)v27;
      if (((char)**(unsigned char **)v27 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0) {
        break;
      }
      uint64_t v22 = sub_100070F68(*(uint64_t *)v27, v10 - 128);
      *(void *)long long v27 = v22;
      if (!v22) {
        goto LABEL_48;
      }
      char v8 = (char *)v22;
      unsigned int v9 = v23;
LABEL_8:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 24)
        {
          int v15 = v8 + 1;
          unint64_t v16 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_24;
          }
          int v17 = *v15;
          int v18 = v16 + (v17 << 7);
          unint64_t v16 = (v18 - 128);
          if (v17 < 0)
          {
            *(void *)long long v27 = sub_100070F20((uint64_t)v8, (v18 - 128));
            if (!*(void *)v27)
            {
LABEL_48:
              *(void *)long long v27 = 0;
              goto LABEL_2;
            }
            unint64_t v16 = v25;
          }
          else
          {
            int v15 = v8 + 2;
LABEL_24:
            *(void *)long long v27 = v15;
          }
          if ((v16 - 1) > 5)
          {
            if (*v7) {
              uint64_t v26 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else {
              uint64_t v26 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
            }
            sub_100070D48(3, v16, v26);
          }
          else
          {
            *(_DWORD *)(a1 + 40) |= 4u;
            *(_DWORD *)(a1 + 6sub_10002F6CC(&a9, 0) = v16;
          }
          goto LABEL_38;
        }
      }
      else if (v11 == 2)
      {
        if (v9 == 21)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)v8;
          *(void *)long long v27 = v8 + 4;
          goto LABEL_38;
        }
      }
      else if (v11 == 1 && v9 == 10)
      {
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v19 = *(void *)(a1 + 8);
        uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFELL);
        if (v19) {
          uint64_t v20 = (void *)*v20;
        }
        uint64_t v21 = (std::string *)sub_10004EA20((uint64_t *)(a1 + 48), (uint64_t)v20);
        char v14 = (void *)sub_100071098(v21, *(char **)v27, (uint64_t)a3);
        goto LABEL_37;
      }
      if (v9) {
        BOOL v13 = (v9 & 7) == 4;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        a3[10].i32[0] = v9 - 1;
        goto LABEL_2;
      }
      if (v9 < 0x640)
      {
        if (*v7)
        {
          uint64_t v24 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          uint64_t v24 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
          char v8 = *(char **)v27;
        }
        char v14 = sub_10007157C(v9, v24, v8, a3);
      }
      else
      {
        char v14 = sub_10005E7C4((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)qword_1000B6A68, (unint64_t *)(a1 + 8), a3);
      }
LABEL_37:
      *(void *)long long v27 = v14;
      if (!v14) {
        goto LABEL_48;
      }
LABEL_38:
      if (sub_10003D228((uint64_t)a3, (char **)v27, a3[11].i32[1])) {
        goto LABEL_2;
      }
    }
    char v8 = (char *)(*(void *)v27 + 2);
LABEL_7:
    *(void *)long long v27 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v27;
}

char *sub_1000458FC(uint64_t a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6)
  {
    unint64_t v4 = sub_10003ADD8(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_18;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_100051170((uint64_t)a3, v4);
  }
  int v7 = *(_DWORD *)(a1 + 56);
  *unint64_t v4 = 21;
  *(_DWORD *)(v4 + 1) = v7;
  v4 += 5;
  if ((v6 & 4) != 0)
  {
LABEL_9:
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = sub_100051170((uint64_t)a3, v4);
    }
    unint64_t v8 = *(int *)(a1 + 60);
    *unint64_t v4 = 24;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unint64_t v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v9 | 0x80;
          unint64_t v10 = v9 >> 7;
          ++v4;
          unint64_t v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v4 - 1) = v10;
      }
      else
      {
        v4[2] = v9;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
    }
  }
LABEL_18:
  std::string::size_type v12 = sub_10005FF78(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  BOOL v13 = v12;
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return v13;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    int v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    int v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (void)v12) >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(v12, v17, (int)v18);
    v13 += v19;
    return v13;
  }
  return sub_100051284((uint64_t *)a3, (char *)v17, v18, (unint64_t)v12);
}

uint64_t sub_100045AA8(uint64_t a1)
{
  uint64_t result = sub_100062D70(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 7) != 0)
  {
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0) {
      result += 5;
    }
    if ((v3 & 4) != 0)
    {
      int v7 = *(_DWORD *)(a1 + 60);
      if (v7 < 0) {
        uint64_t v8 = 11;
      }
      else {
        uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      result += v8;
    }
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    result += v11;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_100045B8C(uint64_t a1, void *lpsrc)
{
  sub_100045C14(a1, (uint64_t)lpsrc);
}

void sub_100045C14(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3001);
    unint64_t v4 = sub_100051E74(v18, "CHECK failed: (&from) != (this): ");
    sub_100051FB0((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v18);
  }
  sub_10005BC28(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 7) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unint64_t v16 = (void *)*v16;
      }
      sub_10004E9D8((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
        {
LABEL_18:
          *(_DWORD *)(a1 + 40) |= v13;
          return;
        }
LABEL_17:
        *(_DWORD *)(a1 + 6sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 60);
        goto LABEL_18;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    if ((v13 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
}

void sub_100045D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100045D68(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_1000455DC(a1);
    sub_100045C14(a1, a2);
  }
}

uint64_t sub_100045DB4(uint64_t a1)
{
  return sub_10005D28C(a1 + 16);
}

float sub_100045DBC(uint64_t a1, uint64_t a2)
{
  sub_10005CEA0(a1 + 16, a2 + 16);
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      unint64_t v9 = sub_10003D368((unint64_t *)(a2 + 8));
      uint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((v6 & 1) == 0)
  {
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 4sub_10002F6CC(&a9, 0) = v7;
    uint64_t v8 = (void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  unint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if (v4)
  {
LABEL_6:
    unint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
    goto LABEL_7;
  }
LABEL_14:
  unint64_t v10 = sub_10003D368((unint64_t *)(a1 + 8));
LABEL_7:
  uint64_t v11 = *(void *)(v10 + 16);
  long long v12 = *(_OWORD *)v10;
  uint64_t v13 = *(void *)(v9 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = v13;
  *(_OWORD *)unint64_t v9 = v12;
  *(void *)(v9 + 16) = v11;
  uint64_t v14 = *(void *)(a1 + 8);
  LODWORD(v13) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 4sub_10002F6CC(&a9, 0) = v13;
  uint64_t v8 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
  if (v14) {
    uint64_t v8 = (void *)*v8;
  }
LABEL_9:
  if (*(uint64_t **)(a1 + 48) != &qword_1000B6B88 || *(uint64_t **)(a2 + 48) != &qword_1000B6B88)
  {
    uint64_t v15 = sub_10004EA20((uint64_t *)(a1 + 48), (uint64_t)v8);
    unint64_t v16 = sub_10004EA20((uint64_t *)(a2 + 48), (uint64_t)v8);
    uint64_t v17 = v15[2];
    long long v18 = *(_OWORD *)v15;
    uint64_t v19 = v16[2];
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    std::string v15[2] = v19;
    *(_OWORD *)unint64_t v16 = v18;
    void v16[2] = v17;
  }
  float result = *(float *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(float *)(a2 + 56) = result;
  int v21 = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a1 + 6sub_10002F6CC(&a9, 0) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 6sub_10002F6CC(&a9, 0) = v21;
  return result;
}

void *sub_100045F2C@<X0>(void *a1@<X8>)
{
  return sub_10000A1B4(a1, "sentencepiece.ModelProto.SentencePiece");
}

uint64_t sub_100045F3C(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_100045F44(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t sub_100045F4C(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t sub_100045F54(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

uint64_t sub_100045F5C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1000AD9A8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = off_1000ADAC0;
  sub_100053488(a1 + 24, a2);
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (atomic_load_explicit(dword_1000B5948, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B5948);
  }
  *(_OWORD *)(a1 + 8sub_10002F6CC(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void sub_10004600C(_Unwind_Exception *a1)
{
  sub_100049130(v2);
  sub_100053584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004602C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (unint64_t *)(a1 + 8);
  *(void *)a1 = off_1000AD9A8;
  *(void *)(a1 + 16) = off_1000ADAC0;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = a1 + 24;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_10002F6CC(&a9, 0) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = 0;
  *(void *)(a1 + 6sub_10002F6CC(&a9, 0) = 0;
  *(void *)(a1 + 68) = 0;
  *(void *)(a1 + 52) = 0;
  sub_1000491EC(a1 + 56, a2 + 56);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    if (*v4) {
      int v7 = (std::string *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      int v7 = (std::string *)sub_10003D368(v4);
    }
    int v8 = *(char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    if (v8 >= 0) {
      unint64_t v9 = (const std::string::value_type *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unint64_t v9 = *(const std::string::value_type **)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 31);
    }
    else {
      std::string::size_type v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16);
    }
    std::string::append(v7, v9, v10);
  }
  sub_10005BC28(v5, a2 + 24);
  int v11 = *(_DWORD *)(a2 + 48);
  if (v11)
  {
    if (!*(void *)(a2 + 80))
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4741);
      long long v12 = sub_100051E74(v18, "CHECK failed: !value || trainer_spec_ != nullptr: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v18);
    }
    operator new();
  }
  *(void *)(a1 + 8sub_10002F6CC(&a9, 0) = 0;
  if ((v11 & 2) != 0)
  {
    if (!*(void *)(a2 + 88))
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4824);
      uint64_t v13 = sub_100051E74(v18, "CHECK failed: !value || normalizer_spec_ != nullptr: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v18);
    }
    operator new();
  }
  *(void *)(a1 + 88) = 0;
  if ((v11 & 4) != 0)
  {
    if (!*(void *)(a2 + 96))
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4907);
      uint64_t v14 = sub_100051E74(v18, "CHECK failed: !value || self_test_data_ != nullptr: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v18);
    }
    operator new();
  }
  *(void *)(a1 + 96) = 0;
  if ((v11 & 8) != 0)
  {
    if (!*(void *)(a2 + 104))
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      uint64_t v15 = sub_100051E74(v18, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v18);
    }
    operator new();
  }
  *(void *)(a1 + 104) = 0;
  return a1;
}

void sub_10004632C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  sub_100049130(v4);
  sub_100053584(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1000463D4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100046418(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3145);
    uint64_t v4 = sub_100051E74(v9, "CHECK failed: GetArena() == nullptr: ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    float result = sub_100051FB8((uint64_t)v9);
  }
LABEL_4:
  if ((_UNKNOWN *)v1 != &unk_1000B6AA8)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 80);
    if (v5)
    {
      sub_10003E6D4(v5);
      operator delete();
    }
    uint64_t v6 = *(void *)(v1 + 88);
    if (v6)
    {
      sub_100042BBC(v6);
      operator delete();
    }
    uint64_t v7 = *(void *)(v1 + 96);
    if (v7)
    {
      sub_10004493C(v7);
      operator delete();
    }
    float result = *(void *)(v1 + 104);
    if (result)
    {
      sub_100042BBC(result);
      operator delete();
    }
  }
  return result;
}

void sub_100046528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100046544(uint64_t a1)
{
  return sub_1000463D4(a1 - 16);
}

void sub_10004654C(uint64_t a1)
{
  sub_1000463D4(a1);
  operator delete();
}

void sub_100046584(uint64_t a1)
{
  sub_1000463D4(a1 - 16);
  operator delete();
}

void *sub_1000465C0()
{
  if (atomic_load_explicit(dword_1000B5948, memory_order_acquire)) {
    sub_10006B7E4(dword_1000B5948);
  }
  return &unk_1000B6AA8;
}

uint64_t sub_1000465FC(uint64_t a1)
{
  sub_10005BB88((unsigned __int8 *)(a1 + 24));
  uint64_t result = (uint64_t)sub_100048BEC((unsigned __int8 *)(a1 + 56));
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0xF) != 0)
  {
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 80);
      if (!v4)
      {
        sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3178);
        uint64_t v5 = sub_100051E74(v15, "CHECK failed: trainer_spec_ != nullptr: ");
        sub_100051FB0((uint64_t)&v14, (const char **)&v5->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v15);
        uint64_t v4 = *(void *)(a1 + 80);
      }
      uint64_t result = sub_10003EA84(v4);
    }
    if ((v3 & 2) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 88);
      if (!v6)
      {
        sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3182);
        uint64_t v7 = sub_100051E74(v15, "CHECK failed: normalizer_spec_ != nullptr: ");
        sub_100051FB0((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v15);
        uint64_t v6 = *(void *)(a1 + 88);
      }
      uint64_t result = (uint64_t)sub_100042E24(v6);
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v8 = *(void *)(a1 + 96);
      if (!v8)
      {
        sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3186);
        unint64_t v9 = sub_100051E74(v15, "CHECK failed: self_test_data_ != nullptr: ");
        sub_100051FB0((uint64_t)&v14, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v15);
        uint64_t v8 = *(void *)(a1 + 96);
      }
      uint64_t result = sub_100044A7C(v8);
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v10 = *(void *)(a1 + 104);
      if (!v10)
      {
        sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3190);
        int v11 = sub_100051E74(v15, "CHECK failed: denormalizer_spec_ != nullptr: ");
        sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v15);
        uint64_t v10 = *(void *)(a1 + 104);
      }
      uint64_t result = (uint64_t)sub_100042E24(v10);
    }
  }
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 31) < 0)
    {
      **(unsigned char **)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v13 + 8) = 0;
      *(unsigned char *)(v13 + 31) = 0;
    }
  }
  return result;
}

void sub_1000467B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1000467E0(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v30 = a2;
  if ((sub_10003D228((uint64_t)a3, &v30, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v6 = (void *)(a1 + 8);
    while (2)
    {
      uint64_t v7 = v30 + 1;
      unsigned int v8 = *v30;
      if (*v30 < 0)
      {
        unsigned int v9 = v8 + (*v7 << 7);
        unsigned int v8 = v9 - 128;
        if (*v7 < 0)
        {
          long long v27 = (char *)sub_100070F68((uint64_t)v30, v9 - 128);
          uint64_t v30 = v27;
          if (!v27) {
            return 0;
          }
          uint64_t v7 = v27;
          unsigned int v8 = v28;
LABEL_8:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10) {
                goto LABEL_49;
              }
              uint64_t v10 = v7 - 1;
              break;
            case 2u:
              if (v8 != 18) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 1u;
              uint64_t v18 = *(void *)(a1 + 80);
              if (!v18)
              {
                uint64_t v19 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if (*v6) {
                  uint64_t v19 = (void *)*v19;
                }
                uint64_t v18 = sub_100047A78((uint64_t)v19);
                *(void *)(a1 + 8sub_10002F6CC(&a9, 0) = v18;
                uint64_t v7 = v30;
              }
              uint64_t v20 = (char *)sub_100046C40(a3, v18, (unsigned __int8 *)v7);
              goto LABEL_46;
            case 3u:
              if (v8 != 26) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 2u;
              uint64_t v21 = *(void *)(a1 + 88);
              if (v21) {
                goto LABEL_45;
              }
              uint64_t v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if (*v6) {
                uint64_t v22 = (void *)*v22;
              }
              uint64_t v21 = sub_100047B48((uint64_t)v22);
              *(void *)(a1 + 88) = v21;
              goto LABEL_44;
            case 4u:
              if (v8 != 34) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 4u;
              uint64_t v23 = *(void *)(a1 + 96);
              if (!v23)
              {
                uint64_t v24 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if (*v6) {
                  uint64_t v24 = (void *)*v24;
                }
                uint64_t v23 = sub_100047CE8((uint64_t)v24);
                *(void *)(a1 + 96) = v23;
                uint64_t v7 = v30;
              }
              uint64_t v20 = (char *)sub_100046DD0(a3, v23, v7);
              goto LABEL_46;
            case 5u:
              if (v8 != 42) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 8u;
              uint64_t v21 = *(void *)(a1 + 104);
              if (v21) {
                goto LABEL_45;
              }
              unint64_t v25 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if (*v6) {
                unint64_t v25 = (void *)*v25;
              }
              uint64_t v21 = sub_100047B48((uint64_t)v25);
              *(void *)(a1 + 104) = v21;
LABEL_44:
              uint64_t v7 = v30;
LABEL_45:
              uint64_t v20 = (char *)sub_100046D08(a3, v21, (unsigned __int8 *)v7);
              goto LABEL_46;
            default:
LABEL_49:
              if (v8) {
                BOOL v26 = (v8 & 7) == 4;
              }
              else {
                BOOL v26 = 1;
              }
              if (v26)
              {
                a3[10].i32[0] = v8 - 1;
                return v30;
              }
              if (v8 < 0x640)
              {
                if (*v6)
                {
                  uint64_t v29 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
                }
                else
                {
                  uint64_t v29 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
                  uint64_t v7 = v30;
                }
                uint64_t v20 = (char *)sub_10007157C(v8, v29, v7, a3);
              }
              else
              {
                uint64_t v20 = (char *)sub_10005E7C4((uint64_t *)(a1 + 24), v8, (unsigned __int8 *)v7, (uint64_t)&unk_1000B6AA8, (unint64_t *)(a1 + 8), a3);
              }
LABEL_46:
              uint64_t v30 = v20;
              if (!v20) {
                return 0;
              }
LABEL_47:
              if (sub_10003D228((uint64_t)a3, &v30, a3[11].i32[1])) {
                return v30;
              }
              continue;
          }
          while (1)
          {
            int v11 = (unsigned __int8 *)(v10 + 1);
            uint64_t v30 = v10 + 1;
            uint64_t v12 = *(int **)(a1 + 72);
            if (!v12) {
              break;
            }
            uint64_t v13 = *(int *)(a1 + 64);
            int v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a1 + 68))
              {
LABEL_16:
                sub_10007E8E4(a1 + 56, v14 + 1);
                uint64_t v12 = *(int **)(a1 + 72);
                int v14 = *v12;
              }
              *uint64_t v12 = v14 + 1;
              uint64_t v15 = sub_100047DB8(*(void *)(a1 + 56));
              uint64_t v16 = *(void *)(a1 + 72);
              uint64_t v17 = *(int *)(a1 + 64);
              *(_DWORD *)(a1 + 64) = v17 + 1;
              *(void *)(v16 + 8 * v17 + 8) = v15;
              int v11 = (unsigned __int8 *)v30;
              goto LABEL_18;
            }
            *(_DWORD *)(a1 + 64) = v13 + 1;
            uint64_t v15 = *(void **)&v12[2 * v13 + 2];
LABEL_18:
            uint64_t v10 = (char *)sub_100046B78(a3, (uint64_t)v15, v11);
            uint64_t v30 = v10;
            if (!v10) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v10 || *v10 != 10) {
              goto LABEL_47;
            }
          }
          int v14 = *(_DWORD *)(a1 + 68);
          goto LABEL_16;
        }
        uint64_t v7 = v30 + 2;
      }
      break;
    }
    uint64_t v30 = v7;
    goto LABEL_8;
  }
  return v30;
}

uint64_t sub_100046B78(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_100070FAC((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_10003D694((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_100045674(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_100046C40(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_100070FAC((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_10003D694((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (uint64_t)sub_10003ED4C(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_100046D08(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_100070FAC((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_10003D694((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_100042F34(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_100046DD0(int32x2_t *a1, uint64_t a2, char *a3)
{
  int v6 = *a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_100070FAC((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = (char *)result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = a3 + 1;
  }
  int v11 = sub_10003D694((uint64_t)a1, (int)v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (uint64_t)sub_100044AD8(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_100046E98(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 64);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2) {
        a2 = sub_100051170((uint64_t)a3, a2);
      }
      uint64_t v8 = sub_1000177A0(a1 + 56, i);
      *a2 = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          unsigned int v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          unsigned int v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        unsigned int v10 = a2 + 2;
      }
      a2 = sub_1000458FC(v8, v10, a3);
    }
  }
  int v14 = *(_DWORD *)(a1 + 48);
  if (v14)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    uint64_t v15 = *(void *)(a1 + 80);
    *a2 = 18;
    unsigned int v16 = *(_DWORD *)(v15 + 48);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        uint64_t v17 = a2 + 3;
        do
        {
          *(v17 - 1) = v18 | 0x80;
          unsigned int v19 = v18 >> 7;
          ++v17;
          unsigned int v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - 1) = v19;
      }
      else
      {
        a2[2] = v18;
        uint64_t v17 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v16;
      uint64_t v17 = a2 + 2;
    }
    a2 = sub_1000403C4(v15, v17, (uint64_t *)a3);
    if ((v14 & 2) == 0)
    {
LABEL_15:
      if ((v14 & 4) == 0) {
        goto LABEL_16;
      }
      goto LABEL_38;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_15;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  uint64_t v21 = *(void *)(a1 + 88);
  *a2 = 26;
  unsigned int v22 = *(_DWORD *)(v21 + 52);
  if (v22 > 0x7F)
  {
    a2[1] = v22 | 0x80;
    unsigned int v24 = v22 >> 7;
    if (v22 >> 14)
    {
      uint64_t v23 = a2 + 3;
      do
      {
        *(v23 - 1) = v24 | 0x80;
        unsigned int v25 = v24 >> 7;
        ++v23;
        unsigned int v26 = v24 >> 14;
        v24 >>= 7;
      }
      while (v26);
      *(v23 - 1) = v25;
    }
    else
    {
      a2[2] = v24;
      uint64_t v23 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v22;
    uint64_t v23 = a2 + 2;
  }
  a2 = sub_100043358(v21, v23, a3);
  if ((v14 & 4) == 0)
  {
LABEL_16:
    if ((v14 & 8) == 0) {
      goto LABEL_58;
    }
    goto LABEL_48;
  }
LABEL_38:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_100051170((uint64_t)a3, a2);
  }
  uint64_t v27 = *(void *)(a1 + 96);
  *a2 = 34;
  unsigned int v28 = *(_DWORD *)(v27 + 64);
  if (v28 > 0x7F)
  {
    a2[1] = v28 | 0x80;
    unsigned int v30 = v28 >> 7;
    if (v28 >> 14)
    {
      uint64_t v29 = a2 + 3;
      do
      {
        *(v29 - 1) = v30 | 0x80;
        unsigned int v31 = v30 >> 7;
        ++v29;
        unsigned int v32 = v30 >> 14;
        v30 >>= 7;
      }
      while (v32);
      *(v29 - 1) = v31;
    }
    else
    {
      a2[2] = v30;
      uint64_t v29 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v28;
    uint64_t v29 = a2 + 2;
  }
  a2 = sub_100044DB8(v27, v29, a3);
  if ((v14 & 8) != 0)
  {
LABEL_48:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_100051170((uint64_t)a3, a2);
    }
    uint64_t v33 = *(void *)(a1 + 104);
    *a2 = 42;
    unsigned int v34 = *(_DWORD *)(v33 + 52);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      unsigned int v36 = v34 >> 7;
      if (v34 >> 14)
      {
        char v35 = a2 + 3;
        do
        {
          *(v35 - 1) = v36 | 0x80;
          unsigned int v37 = v36 >> 7;
          ++v35;
          unsigned int v38 = v36 >> 14;
          v36 >>= 7;
        }
        while (v38);
        *(v35 - 1) = v37;
      }
      else
      {
        a2[2] = v36;
        char v35 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v34;
      char v35 = a2 + 2;
    }
    a2 = sub_100043358(v33, v35, a3);
  }
LABEL_58:
  uint64_t v39 = sub_10005FF78(a1 + 24, 200, 0x20000000, a2, (uint64_t *)a3);
  uint64_t v40 = v39;
  uint64_t v41 = *(void *)(a1 + 8);
  if ((v41 & 1) == 0) {
    return v40;
  }
  unint64_t v43 = v41 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v43 + 31) < 0)
  {
    uint64_t v44 = *(void **)(v43 + 8);
    uint64_t v45 = *(void *)(v43 + 16);
  }
  else
  {
    uint64_t v44 = (void *)(v43 + 8);
    LODWORD(v45) = *(unsigned __int8 *)(v43 + 31);
  }
  if ((uint64_t)(*a3 - (void)v39) >= (int)v45)
  {
    uint64_t v46 = (int)v45;
    memcpy(v39, v44, (int)v45);
    v40 += v46;
    return v40;
  }
  return sub_100051284((uint64_t *)a3, (char *)v44, v45, (unint64_t)v39);
}

uint64_t sub_1000472A4(uint64_t a1)
{
  uint64_t v2 = sub_100062D70(a1 + 24);
  uint64_t v3 = *(int *)(a1 + 64);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_100045AA8(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  int v10 = *(_DWORD *)(a1 + 48);
  if ((v10 & 0xF) == 0) {
    goto LABEL_13;
  }
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0) {
      goto LABEL_10;
    }
LABEL_16:
    uint64_t v15 = sub_10004356C(*(void *)(a1 + 88));
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v10 & 4) == 0)
    {
LABEL_11:
      if ((v10 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  uint64_t v14 = sub_10004158C(*(void *)(a1 + 80));
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_10:
  if ((v10 & 4) == 0) {
    goto LABEL_11;
  }
LABEL_17:
  uint64_t v16 = sub_100044F50(*(void *)(a1 + 96));
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 8) != 0)
  {
LABEL_12:
    uint64_t v11 = sub_10004356C(*(void *)(a1 + 104));
    v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_13:
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 31) < 0) {
      uint64_t v18 = *(void *)(v17 + 16);
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 31);
    }
    v4 += v18;
  }
  *(_DWORD *)(a1 + 52) = v4;
  return v4;
}

void sub_100047430(uint64_t a1, void *lpsrc)
{
  sub_1000474B8(a1, (uint64_t)lpsrc);
}

void sub_1000474B8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_100051E5C((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3397);
    uint64_t v4 = sub_100051E74(v27, "CHECK failed: (&from) != (this): ");
    sub_100051FB0((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v27);
  }
  sub_10005BC28(a1 + 24, a2 + 24);
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if (*v5) {
      uint64_t v9 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_10003D368((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v7 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v8;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v7 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v7 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v7 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_1000491EC(a1 + 56, a2 + 56);
  int v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0xF) != 0)
  {
    if (v13)
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      uint64_t v14 = *(void *)(a1 + 80);
      if (!v14)
      {
        uint64_t v15 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          uint64_t v15 = (void *)*v15;
        }
        uint64_t v14 = sub_100047A78((uint64_t)v15);
        *(void *)(a1 + 8sub_10002F6CC(&a9, 0) = v14;
      }
      if (*(void *)(a2 + 80)) {
        uint64_t v16 = *(void **)(a2 + 80);
      }
      else {
        uint64_t v16 = &unk_1000B6858;
      }
      sub_100041EC4(v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 2u;
      uint64_t v17 = *(void *)(a1 + 88);
      if (!v17)
      {
        uint64_t v18 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          uint64_t v18 = (void *)*v18;
        }
        uint64_t v17 = sub_100047B48((uint64_t)v18);
        *(void *)(a1 + 88) = v17;
      }
      if (*(void *)(a2 + 88)) {
        unsigned int v19 = *(void **)(a2 + 88);
      }
      else {
        unsigned int v19 = &unk_1000B69A0;
      }
      sub_10004375C(v17, (uint64_t)v19);
      if ((v13 & 4) == 0)
      {
LABEL_25:
        if ((v13 & 8) == 0) {
          return;
        }
        goto LABEL_43;
      }
    }
    else if ((v13 & 4) == 0)
    {
      goto LABEL_25;
    }
    *(_DWORD *)(a1 + 48) |= 4u;
    uint64_t v20 = *(void *)(a1 + 96);
    if (!v20)
    {
      uint64_t v21 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
      if (*v5) {
        uint64_t v21 = (void *)*v21;
      }
      uint64_t v20 = sub_100047CE8((uint64_t)v21);
      *(void *)(a1 + 96) = v20;
    }
    if (*(void *)(a2 + 96)) {
      unsigned int v22 = *(void **)(a2 + 96);
    }
    else {
      unsigned int v22 = &unk_1000B6A20;
    }
    sub_100045088(v20, (uint64_t)v22);
    if ((v13 & 8) != 0)
    {
LABEL_43:
      *(_DWORD *)(a1 + 48) |= 8u;
      uint64_t v23 = *(void *)(a1 + 104);
      if (!v23)
      {
        unsigned int v24 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          unsigned int v24 = (void *)*v24;
        }
        uint64_t v23 = sub_100047B48((uint64_t)v24);
        *(void *)(a1 + 104) = v23;
      }
      if (*(void *)(a2 + 104)) {
        unsigned int v25 = *(void **)(a2 + 104);
      }
      else {
        unsigned int v25 = &unk_1000B69A0;
      }
      sub_10004375C(v23, (uint64_t)v25);
    }
  }
}

void sub_1000476DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000476F4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_1000465FC(a1);
    sub_1000474B8(a1, a2);
  }
}

uint64_t sub_100047740(uint64_t a1)
{
  uint64_t result = sub_10005D28C(a1 + 24);
  if (!result) {
    return result;
  }
  uint64_t result = sub_100047924(a1 + 56);
  if (!result) {
    return result;
  }
  int v3 = *(_DWORD *)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 80);
    if (!v4)
    {
      sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4741);
      uint64_t v5 = sub_100051E74(v13, "CHECK failed: !value || trainer_spec_ != nullptr: ");
      sub_100051FB0((uint64_t)&v12, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v13);
      uint64_t v4 = *(void *)(a1 + 80);
    }
    uint64_t result = sub_10005D28C(v4 + 16);
    if (!result) {
      return result;
    }
    int v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 88);
    if (!v6)
    {
      sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4824);
      unint64_t v7 = sub_100051E74(v13, "CHECK failed: !value || normalizer_spec_ != nullptr: ");
      sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v13);
      uint64_t v6 = *(void *)(a1 + 88);
    }
    uint64_t result = sub_10005D28C(v6 + 24);
    if (!result) {
      return result;
    }
    int v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 4) == 0)
  {
LABEL_18:
    if ((v3 & 8) == 0) {
      return 1;
    }
    uint64_t v10 = *(void *)(a1 + 104);
    if (!v10)
    {
      sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      uint64_t v11 = sub_100051E74(v13, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      sub_100051FB0((uint64_t)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v13);
      uint64_t v10 = *(void *)(a1 + 104);
    }
    uint64_t result = sub_10005D28C(v10 + 24);
    if (result) {
      return 1;
    }
    return result;
  }
  uint64_t v8 = *(void *)(a1 + 96);
  if (!v8)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4907);
    uint64_t v9 = sub_100051E74(v13, "CHECK failed: !value || self_test_data_ != nullptr: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
    uint64_t v8 = *(void *)(a1 + 96);
  }
  uint64_t result = sub_10005D28C(v8 + 16);
  if (result)
  {
    int v3 = *(_DWORD *)(a1 + 48);
    goto LABEL_18;
  }
  return result;
}

void sub_1000478F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100047924(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_1000177A0(a1, v2);
  }
  while ((sub_10005D28C(v5 + 16) & 1) != 0);
  return v3 < 1;
}

__n128 sub_10004797C(uint64_t a1, uint64_t a2)
{
  sub_10005CEA0(a1 + 24, a2 + 24);
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      unint64_t v7 = sub_10003D368((unint64_t *)(a2 + 8));
      uint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_10:
      unint64_t v8 = sub_10003D368((unint64_t *)(a1 + 8));
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  unint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  uint64_t v9 = *(void *)(v8 + 16);
  long long v10 = *(_OWORD *)v8;
  uint64_t v11 = *(void *)(v7 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
  *(void *)(v8 + 16) = v11;
  *(_OWORD *)unint64_t v7 = v10;
  *(void *)(v7 + 16) = v9;
LABEL_8:
  int v12 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = v12;
  sub_10003D900((void *)(a1 + 56), a2 + 56);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 8sub_10002F6CC(&a9, 0) = *(_OWORD *)(a2 + 80);
  *(void *)(a2 + 8sub_10002F6CC(&a9, 0) = v13;
  *(void *)(a2 + 88) = v14;
  uint64_t v15 = *(void *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 104);
  __n128 result = *(__n128 *)(a2 + 96);
  *(__n128 *)(a1 + 96) = result;
  *(void *)(a2 + 96) = v15;
  *(void *)(a2 + 104) = v16;
  return result;
}

void *sub_100047A68@<X0>(void *a1@<X8>)
{
  return sub_10000A1B4(a1, "sentencepiece.ModelProto");
}

uint64_t sub_100047A78(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  uint64_t v2 = sub_10004E520(a1, 328);
  }
  sub_10003E1CC(v2, a1);
  return v2;
}

void sub_100047B24()
{
}

uint64_t sub_100047B48(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  uint64_t v2 = sub_10004E520(a1, 88);
  }
  sub_10004296C(v2, a1);
  return v2;
}

void sub_100047BF4()
{
}

void *sub_100047C18(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  uint64_t v2 = (void *)sub_10004E520(a1, 40);
  }
  sub_100043C30(v2, a1);
  return v2;
}

void sub_100047CC4()
{
}

uint64_t sub_100047CE8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  uint64_t v2 = sub_10004E520(a1, 72);
  }
  sub_10004478C(v2, a1);
  return v2;
}

void sub_100047D94()
{
}

void *sub_100047DB8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  uint64_t v2 = (void *)sub_10004E520(a1, 64);
  }
  sub_1000452A4(v2, a1);
  return v2;
}

void sub_100047E64()
{
}

uint64_t sub_100047E88(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  uint64_t v2 = sub_10004E520(a1, 112);
  }
  sub_100045F5C(v2, a1);
  return v2;
}

void sub_100047F34()
{
}

uint64_t sub_100047F58()
{
  return sub_100047A78(0);
}

uint64_t sub_100047F60(uint64_t a1, uint64_t a2)
{
  return sub_100047A78(a2);
}

uint64_t sub_100047F68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_100047F70()
{
  return sub_100047B48(0);
}

uint64_t sub_100047F78(uint64_t a1, uint64_t a2)
{
  return sub_100047B48(a2);
}

uint64_t sub_100047F80(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_100047F88(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t sub_100047F90(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 81);
}

uint64_t sub_100047F98(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 82);
}

uint64_t sub_100047FA0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 83);
}

uint64_t sub_100047FA8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 65);
}

uint64_t sub_100047FB0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 66);
}

uint64_t sub_100047FB8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 67);
}

uint64_t sub_100047FC0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

void *sub_100047FC8()
{
  return sub_100047C18(0);
}

void *sub_100047FD0(uint64_t a1, uint64_t a2)
{
  return sub_100047C18(a2);
}

uint64_t sub_100047FD8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_100047FE0()
{
  return sub_100047CE8(0);
}

uint64_t sub_100047FE8(uint64_t a1, uint64_t a2)
{
  return sub_100047CE8(a2);
}

uint64_t sub_100047FF0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

void *sub_100047FF8()
{
  return sub_100047DB8(0);
}

void *sub_100048000(uint64_t a1, uint64_t a2)
{
  return sub_100047DB8(a2);
}

uint64_t sub_100048008(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_100048010()
{
  return sub_100047E88(0);
}

uint64_t sub_100048018(uint64_t a1, uint64_t a2)
{
  return sub_100047E88(a2);
}

uint64_t sub_100048020(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_100048028(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

char *sub_100048030(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1000B6858;
  }
  uint64_t v2 = v1[22];
  if (v2)
  {
    __n128 result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    __n128 result = (char *)atomic_load_explicit(&qword_1000B5A98, memory_order_acquire);
    if (!result) {
      __n128 result = (char *)sub_10004E674(&off_1000B5A80);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_10004809C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1000B6858;
  }
  uint64_t v2 = v1[23];
  if (v2)
  {
    __n128 result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    __n128 result = (char *)atomic_load_explicit(&qword_1000B5A18, memory_order_acquire);
    if (!result) {
      __n128 result = (char *)sub_10004E674(&off_1000B5A00);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_100048108(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1000B6858;
  }
  uint64_t v2 = v1[24];
  if (v2)
  {
    __n128 result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    __n128 result = (char *)atomic_load_explicit(&qword_1000B5A38, memory_order_acquire);
    if (!result) {
      __n128 result = (char *)sub_10004E674(&off_1000B5A20);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_100048174(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1000B6858;
  }
  uint64_t v2 = v1[25];
  if (v2)
  {
    __n128 result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    __n128 result = (char *)atomic_load_explicit(&qword_1000B5A58, memory_order_acquire);
    if (!result) {
      __n128 result = (char *)sub_10004E674(&off_1000B5A40);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_1000481E0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1000B6858;
  }
  uint64_t v2 = v1[26];
  if (v2)
  {
    __n128 result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    __n128 result = (char *)atomic_load_explicit(&qword_1000B5A78, memory_order_acquire);
    if (!result) {
      __n128 result = (char *)sub_10004E674(&off_1000B5A60);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t sub_10004824C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = (unsigned __int8 *)&unk_1000B6858;
  }
  return v1[248];
}

uint64_t sub_100048268(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)&unk_1000B6858;
  if (*(void *)(a1 + 80)) {
    uint64_t v1 = *(unsigned __int8 **)(a1 + 80);
  }
  return (v1[40] >> 3) & 1;
}

char *sub_100048288(uint64_t a1, int a2)
{
  __n128 result = (char *)(*(void *)(sub_1000177A0(a1 + 56, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

float sub_1000482C0(uint64_t a1, int a2)
{
  return *(float *)(sub_1000177A0(a1 + 56, a2) + 56);
}

BOOL sub_1000482E0(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1000177A0(a1 + 56, a2) + 60) == 1;
}

BOOL sub_100048308(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1000177A0(a1 + 56, a2) + 60) == 2;
}

BOOL sub_100048330(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1000177A0(a1 + 56, a2) + 60) == 3;
}

BOOL sub_100048358(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1000177A0(a1 + 56, a2) + 60) == 5;
}

BOOL sub_100048380(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1000177A0(a1 + 56, a2) + 60) == 4;
}

BOOL sub_1000483A8(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1000177A0(a1 + 56, a2) + 60) == 6;
}

char *sub_1000483D0(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 88);
  if (!v1) {
    uint64_t v1 = (char *)&unk_1000B69A0;
  }
  return v1 + 16;
}

char *sub_1000483EC(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 104);
  if (!v1) {
    uint64_t v1 = (char *)&unk_1000B69A0;
  }
  return v1 + 16;
}

uint64_t sub_100048408(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1000B6858;
  }
  int v2 = v1[68];
  unsigned int v3 = v2 - 2;
  unsigned int v4 = v2 - 1;
  if (v3 >= 3) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t sub_100048434(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

char *sub_10004843C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1000B6858;
  }
  uint64_t v2 = v1[22];
  if (v2)
  {
    __n128 result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    __n128 result = (char *)atomic_load_explicit(&qword_1000B5A98, memory_order_acquire);
    if (!result) {
      __n128 result = (char *)sub_10004E674(&off_1000B5A80);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_1000484A8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1000B6858;
  }
  uint64_t v2 = v1[23];
  if (v2)
  {
    __n128 result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    __n128 result = (char *)atomic_load_explicit(&qword_1000B5A18, memory_order_acquire);
    if (!result) {
      __n128 result = (char *)sub_10004E674(&off_1000B5A00);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_100048514(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1000B6858;
  }
  uint64_t v2 = v1[24];
  if (v2)
  {
    __n128 result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    __n128 result = (char *)atomic_load_explicit(&qword_1000B5A38, memory_order_acquire);
    if (!result) {
      __n128 result = (char *)sub_10004E674(&off_1000B5A20);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_100048580(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1000B6858;
  }
  uint64_t v2 = v1[25];
  if (v2)
  {
    __n128 result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    __n128 result = (char *)atomic_load_explicit(&qword_1000B5A58, memory_order_acquire);
    if (!result) {
      __n128 result = (char *)sub_10004E674(&off_1000B5A40);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_1000485EC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1000B6858;
  }
  uint64_t v2 = v1[26];
  if (v2)
  {
    __n128 result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    __n128 result = (char *)atomic_load_explicit(&qword_1000B5A78, memory_order_acquire);
    if (!result) {
      __n128 result = (char *)sub_10004E674(&off_1000B5A60);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t sub_100048658(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = (unsigned __int8 *)&unk_1000B6858;
  }
  return v1[248];
}

uint64_t sub_100048674(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)&unk_1000B6858;
  if (*(void *)(a1 + 64)) {
    uint64_t v1 = *(unsigned __int8 **)(a1 + 64);
  }
  return (v1[40] >> 3) & 1;
}

uint64_t sub_100048694(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1000B6858;
  }
  int v2 = v1[68];
  unsigned int v3 = v2 - 2;
  unsigned int v4 = v2 - 1;
  if (v3 >= 3) {
    return 0;
  }
  else {
    return v4;
  }
}

char *sub_1000486C0(uint64_t a1, int a2)
{
  __n128 result = (char *)(*(void *)(sub_1000177A0(a1 + 40, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

float sub_1000486F8(uint64_t a1, int a2)
{
  return *(float *)(sub_1000177A0(a1 + 40, a2) + 56);
}

BOOL sub_100048718(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1000177A0(a1 + 40, a2) + 60) == 1;
}

BOOL sub_100048740(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1000177A0(a1 + 40, a2) + 60) == 2;
}

BOOL sub_100048768(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1000177A0(a1 + 40, a2) + 60) == 3;
}

BOOL sub_100048790(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1000177A0(a1 + 40, a2) + 60) == 5;
}

BOOL sub_1000487B8(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1000177A0(a1 + 40, a2) + 60) == 4;
}

BOOL sub_1000487E0(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1000177A0(a1 + 40, a2) + 60) == 6;
}

char *sub_100048808(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 72);
  if (!v1) {
    uint64_t v1 = (char *)&unk_1000B69A0;
  }
  return v1 + 16;
}

char *sub_100048824(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 88);
  if (!v1) {
    uint64_t v1 = (char *)&unk_1000B69A0;
  }
  return v1 + 16;
}

void sub_100048840(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t sub_100048854(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    unsigned int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_100048914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100048934(void *a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    unsigned int v3 = a2;
  }
  else {
    unsigned int v3 = (uint64_t *)*a2;
  }
  *a1 = v3;
  a1[1] = 0;
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v4 = a2[1];
    if (v4 < 0) {
      sub_1000803D4(v4, "size_t to int conversion");
    }
  }
  else
  {
    uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  a1[1] = v4;
  return a1;
}

uint64_t sub_100048998(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    uint64_t v4 = sub_100051E74(v6, "CHECK failed: (n) >= (0): ");
    sub_100051FB0((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    return sub_100051FB8((uint64_t)v6);
  }
  else if (v1)
  {
    uint64_t v2 = *(void *)(result + 16) + 8;
    do
    {
      uint64_t v3 = *(void *)v2;
      if (*(char *)(*(void *)v2 + 23) < 0)
      {
        **(unsigned char **)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v3 = 0;
        *(unsigned char *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

void sub_100048A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100048A5C(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    uint64_t v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    char v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_100048B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100048B3C(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_100051E74(v7, "CHECK failed: (n) >= (0): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_100051FB8((uint64_t)v7);
  }
  else if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(*(void *)(result + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      __n128 result = sub_100043F7C(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_100048BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100048BEC(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_100051E74(v7, "CHECK failed: (n) >= (0): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_100051FB8((uint64_t)v7);
  }
  else if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      __n128 result = sub_1000455DC(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_100048C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100048C9C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (a2 == result)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_100051E74(v11, "CHECK failed: (&other) != (this): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    __n128 result = sub_100051FB8((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (const std::string **)(*(void *)(a2 + 16) + 8);
    char v7 = (std::string **)sub_10007F4D8((uint64_t *)v3, v5);
    __n128 result = (uint64_t)sub_100048D8C((std::string *)v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    signed int v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    uint64_t v9 = *(signed int **)(v3 + 16);
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
  return result;
}

void sub_100048D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_100048D8C(std::string *result, std::string **a2, const std::string **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (std::string::__raw *)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    int v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      __n128 result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    std::string::size_type v18 = v9->__words[0];
    unsigned int v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      if (*(unsigned char *)(v18 + 24)) {
      unsigned int v22 = (std::string *)sub_10004DFA4((void *)v18, 0x18uLL, (uint64_t)sub_100048840);
      }
      v22->__r_.__value_.__r.__words[0] = 0;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      __n128 result = std::string::operator=(v22, v21);
      *v20++ = v22;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

uint64_t *sub_100048EC4(uint64_t *a1)
{
  sub_100048F00(a1);
  return sub_10003D660(a1);
}

void sub_100048F00(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sub_100043DA0(*v3);
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t sub_100048F80(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (a2 == result)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_100051E74(v11, "CHECK failed: (&other) != (this): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    __n128 result = sub_100051FB8((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    char v7 = (std::string **)sub_10007F4D8((uint64_t *)v3, v5);
    __n128 result = (uint64_t)sub_100049070((std::string *)v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    signed int v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    uint64_t v9 = *(signed int **)(v3 + 16);
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
  return result;
}

void sub_100049058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_100049070(std::string *result, std::string **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    int v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      __n128 result = sub_100049120(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *v9;
    unsigned int v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      unsigned int v22 = (std::string *)sub_100047C18(v18);
      __n128 result = sub_100049120(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

std::string *sub_100049120(uint64_t a1, std::string *a2)
{
  return sub_100044410(a2, a1);
}

uint64_t *sub_100049130(uint64_t *a1)
{
  sub_10004916C(a1);
  return sub_10003D660(a1);
}

void sub_10004916C(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sub_100045448(*v3);
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_1000491EC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_100051E74(v11, "CHECK failed: (&other) != (this): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    char v7 = (uint64_t *)sub_10007F4D8((uint64_t *)a1, v5);
    sub_1000492DC((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    uint64_t v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
}

void sub_1000492C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000492DC(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    int v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_10004938C(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    unsigned int v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      unsigned int v22 = sub_100047DB8(v18);
      sub_10004938C(v21, (uint64_t)v22);
      *v20++ = (uint64_t)v22;
      --v17;
    }
    while (v17);
  }
}

void sub_10004938C(uint64_t a1, uint64_t a2)
{
}

void sub_10004939C()
{
}

void sub_1000493E4()
{
}

void sub_100049440()
{
}

void sub_100049464()
{
}

void sub_1000494AC()
{
}

void sub_100049508()
{
}

void *sub_10004952C(void *a1, const char *a2, uint64_t a3)
{
  *a1 = off_1000ADD58;
  char v6 = a1 + 1;
  sub_10004CF14(a1 + 1);
  if (a3) {
    operator new();
  }
  a1[2] = &std::cin;
  if ((*((unsigned char *)&std::cin + (unint64_t)std::cin.__vftable[-2].~basic_istream_0 + 32) & 5) != 0)
  {
    unsigned int v14 = 5;
    sub_10001752C((uint64_t)v15);
    sub_100018688(v15, (uint64_t)"\"", 1);
    size_t v7 = strlen(a2);
    sub_100018688(v15, (uint64_t)a2, v7);
    sub_100018688(v15, (uint64_t)"\": ", 3);
    signed int v8 = __error();
    sub_10004AC98(*v8);
    if ((v13 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v10 = v13;
    }
    else {
      uint64_t v10 = (uint64_t)__p[1];
    }
    sub_100018688(v15, (uint64_t)v9, v10);
    sub_100014DB8(&v14, (uint64_t)&v17);
    sub_10004D13C(v6, &v17);
    sub_10004CF1C(&v17);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return a1;
}

void sub_1000497A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_10004CF1C((uint64_t *)(v16 - 56));
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_100014E48((uint64_t)&a15);
  sub_10004CF1C(v15);
  _Unwind_Resume(a1);
}

void sub_10004981C(void *a1)
{
  sub_100049A60(a1);
  operator delete();
}

uint64_t sub_100049854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004D138(a2, a1 + 8);
}

BOOL sub_100049860(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  uint64_t v4 = std::locale::use_facet(&v8, &std::ctype<char>::id);
  unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  char v6 = sub_100049AE4(v3, a2, v5);
  return (*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) == 0;
}

void sub_100049930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

BOOL sub_100049944(uint64_t a1, std::string *a2)
{
  uint64_t v2 = *(std::istream **)(a1 + 16);
  if (v2 == &std::cin)
  {
    if ((int)sub_10004A6A8() <= 2)
    {
      char v10 = 0;
      uint64_t v3 = sub_100018688(&std::cerr, (uint64_t)"filesystem.cc", 13);
      sub_100018688(v3, (uint64_t)"(", 1);
      uint64_t v4 = (void *)std::ostream::operator<<();
      unsigned __int8 v5 = sub_100018688(v4, (uint64_t)") ", 2);
      char v6 = sub_100018688(v5, (uint64_t)"LOG(", 4);
      size_t v7 = sub_100018688(v6, (uint64_t)"ERROR", 5);
      std::locale v8 = sub_100018688(v7, (uint64_t)") ", 2);
      sub_100018688(v8, (uint64_t)"ReadAll is not supported for stdin.", 35);
      sub_1000176C4(&v10);
    }
  }
  else
  {
    sub_100049CD4(a2, *(void **)((char *)&v2[2].__gc_ + (unint64_t)v2->__vftable[-2].~basic_istream_0), 0);
  }
  return v2 != &std::cin;
}

void sub_100049A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *sub_100049A60(void *a1)
{
  *a1 = off_1000ADD58;
  uint64_t v2 = (std::istream *)a1[2];
  if (v2 != &std::cin && v2 != 0) {
    ((void (*)(std::istream *))v2->~basic_istream_0)(v2);
  }
  sub_10004CF1C(a1 + 1);
  return a1;
}

void *sub_100049AE4(void *a1, uint64_t a2, unsigned __int8 a3)
{
  std::istream::sentry::sentry();
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    size_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    std::locale v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_100049C44(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x100049C04);
  }
  __cxa_rethrow();
}

void sub_100049CC0(_Unwind_Exception *a1)
{
}

void sub_100049CD4(std::string *a1, void *a2, void *a3)
{
  sub_100049D54(&__p, a2, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::assign(a1, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100049D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100049D54(std::string *a1, void *a2, void *a3)
{
  char v11 = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    if (a2)
    {
      if (a2[3] == a2[4])
      {
        int v6 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
        int v5 = v6 == -1;
        if (v6 == -1) {
          a2 = 0;
        }
      }
      else
      {
        int v5 = 0;
      }
    }
    else
    {
      int v5 = 1;
    }
    BOOL result = sub_100049EB4(&v11);
    if (v5 == result) {
      break;
    }
    std::locale v8 = (std::string::value_type *)a2[3];
    if (v8 == (std::string::value_type *)a2[4]) {
      std::string::value_type v9 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      std::string::value_type v9 = *v8;
    }
    std::string::push_back(a1, v9);
    uint64_t v10 = a2[3];
    if (v10 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v10 + 1;
    }
  }
  return result;
}

void sub_100049E84(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_100049EA0(_Unwind_Exception *a1)
{
}

BOOL sub_100049EB4(void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v2[3] != v2[4]) {
      return 0;
    }
    if ((*(unsigned int (**)(void *))(*v2 + 72))(v2) != -1) {
      return *a1 == 0;
    }
    *a1 = 0;
  }
  return 1;
}

void *sub_100049F34(void *a1, const char *a2, uint64_t a3)
{
  *a1 = off_1000ADDB8;
  int v6 = a1 + 1;
  sub_10004CF14(a1 + 1);
  if (a3) {
    operator new();
  }
  a1[2] = &std::cout;
  if ((*((unsigned char *)&std::cout + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0 + 32) & 5) != 0)
  {
    unsigned int v14 = 7;
    sub_10001752C((uint64_t)v15);
    sub_100018688(v15, (uint64_t)"\"", 1);
    size_t v7 = strlen(a2);
    sub_100018688(v15, (uint64_t)a2, v7);
    sub_100018688(v15, (uint64_t)"\": ", 3);
    std::locale v8 = __error();
    sub_10004AC98(*v8);
    if ((v13 & 0x80u) == 0) {
      std::string::value_type v9 = __p;
    }
    else {
      std::string::value_type v9 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v10 = v13;
    }
    else {
      uint64_t v10 = (uint64_t)__p[1];
    }
    sub_100018688(v15, (uint64_t)v9, v10);
    sub_100014DB8(&v14, (uint64_t)&v17);
    sub_10004D13C(v6, &v17);
    sub_10004CF1C(&v17);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return a1;
}

void sub_10004A1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_10004CF1C((uint64_t *)(v16 - 56));
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_100014E48((uint64_t)&a15);
  sub_10004CF1C(v15);
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_10004A224(void (__cdecl ***a1)(std::ofstream *__hidden this)))(std::ofstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  uint64_t v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 1);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_10004A3AC(_Unwind_Exception *a1)
{
}

void sub_10004A3E8(void *a1)
{
  sub_10004A510(a1);
  operator delete();
}

uint64_t sub_10004A420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004D138(a2, a1 + 8);
}

BOOL sub_10004A42C(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) == 0;
}

uint64_t sub_10004A47C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 24);
    return v3(a1, "\n", 1);
  }
  return result;
}

void *sub_10004A510(void *a1)
{
  *a1 = off_1000ADDB8;
  uint64_t v2 = (std::ostream *)a1[2];
  if (v2 != &std::cout && v2 != 0) {
    ((void (*)(std::ostream *))v2->~basic_ostream_0)(v2);
  }
  sub_10004CF1C(a1 + 1);
  return a1;
}

uint64_t sub_10004A594(uint64_t result)
{
  if (result != -1) {
    atomic_store(result, (unsigned int *)&unk_1000B5AA0);
  }
  return result;
}

uint64_t sub_10004A5AC()
{
  unsigned int v0 = atomic_load((unsigned int *)&unk_1000B5AA0);
  if (v0 != -1) {
    return atomic_load((unsigned int *)&unk_1000B5AA0);
  }
  sub_10004A634(&v3);
  uint64_t v1 = std::random_device::operator()(&v3);
  std::random_device::~random_device(&v3);
  return v1;
}

void sub_10004A60C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  std::random_device::~random_device(&a11);
  __cxa_begin_catch(a1);
  atomic_load(v12);
  __cxa_end_catch();
  JUMPOUT(0x10004A5F8);
}

std::random_device *sub_10004A634(std::random_device *a1)
{
  sub_10000A1B4(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_10004A68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004A6A8()
{
  return atomic_load((unsigned int *)&unk_1000B6700);
}

uint64_t sub_10004A6B8(uint64_t result)
{
  return result;
}

uint64_t sub_10004A6C8(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  int v3 = (char)*a1;
  if ((v3 & 0x80000000) == 0)
  {
    *a3 = 1;
    return *a1;
  }
  unint64_t v5 = a2 - (void)a1;
  if ((unint64_t)(a2 - (void)a1) >= 2)
  {
    if ((v3 & 0xE0) == 0xC0)
    {
      char v6 = a1[1];
      if (v6 <= -65)
      {
        uint64_t result = v6 & 0x3F | ((v3 & 0x1F) << 6);
        if (result >= 0x80)
        {
          uint64_t v7 = 2;
LABEL_8:
          *a3 = v7;
          return result;
        }
      }
    }
    else if (v5 >= 3)
    {
      if ((v3 & 0xF0) == 0xE0)
      {
        int v8 = (char)a1[1];
        if (v8 <= -65)
        {
          char v9 = a1[2];
          if (v9 <= -65)
          {
            uint64_t result = v9 & 0x3F | ((v8 & 0x3F) << 6) & 0xFFF | ((v3 & 0xF) << 12);
            if (result >= 0x800
              && (((v3 & 0xF) << 12) - 57344 < 0x102000u || result >> 11 <= 0x1A))
            {
              uint64_t v7 = 3;
              goto LABEL_8;
            }
          }
        }
      }
      else if (v5 >= 4 && (v3 & 0xF8) == 0xF0)
      {
        int v10 = (char)a1[1];
        if (v10 <= -65)
        {
          int v11 = (char)a1[2];
          if (v11 <= -65)
          {
            char v12 = a1[3];
            if (v12 <= -65)
            {
              int v13 = ((v3 & 7) << 18) | ((v10 & 0x3F) << 12);
              uint64_t result = v12 & 0x3F | ((v11 & 0x3F) << 6) | v13;
              if (result >= 0x10000 && (v13 - 57344) < 0x102000)
              {
                uint64_t v7 = 4;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  *a3 = 1;
  return 65533;
}

uint64_t sub_10004A810(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v7 = 0;
  if (a2 < 1) {
    return 1;
  }
  uint64_t v2 = a1;
  unint64_t v3 = (unint64_t)&a1[a2];
  while (1)
  {
    unsigned int v4 = sub_10004A6C8(v2, v3, &v7);
    BOOL v5 = v4 != 65533 || v7 == 3;
    if (!v5 || v4 >> 11 >= 0x1B && (v4 - 57344) >> 13 > 0x80) {
      break;
    }
    v2 += v7;
    if ((unint64_t)v2 >= v3) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_10004A8A8(unsigned int a1, unsigned char *a2)
{
  if (a1 > 0x7F)
  {
    if (a1 > 0x7FF)
    {
      if (HIWORD(a1) <= 0x10u) {
        unsigned int v3 = a1;
      }
      else {
        unsigned int v3 = 65533;
      }
      char v4 = v3 & 0x3F | 0x80;
      unsigned int v5 = (v3 >> 6) & 0x3F | 0xFFFFFF80;
      if (HIWORD(v3))
      {
        a2[3] = v4;
        a2[2] = v5;
        a2[1] = (v3 >> 12) & 0x3F | 0x80;
        a1 = (v3 >> 18) | 0xFFFFFFF0;
        uint64_t v2 = 4;
      }
      else
      {
        a2[2] = v4;
        a2[1] = v5;
        a1 = (v3 >> 12) | 0xFFFFFFE0;
        uint64_t v2 = 3;
      }
    }
    else
    {
      a2[1] = a1 & 0x3F | 0x80;
      a1 = (a1 >> 6) | 0xFFFFFFC0;
      uint64_t v2 = 2;
    }
  }
  else
  {
    uint64_t v2 = 1;
  }
  *a2 = a1;
  return v2;
}

void sub_10004A948(int a1@<W0>, std::string *a2@<X8>)
{
  char v4 = operator new(4uLL);
  *char v4 = a1;
  v5.__r_.__value_.__l.__size_ = (std::string::size_type)(v4 + 1);
  v5.__r_.__value_.__r.__words[2] = (std::string::size_type)(v4 + 1);
  v5.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  sub_10004A9CC(&v5, a2);
  operator delete(v4);
}

void sub_10004A9B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *sub_10004A9CC@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  unsigned int v3 = (unsigned int *)result->__r_.__value_.__r.__words[0];
  std::string::size_type size = (unsigned int *)result->__r_.__value_.__l.__size_;
  while (v3 != size)
  {
    std::string::size_type v5 = sub_10004A8A8(*v3, v6);
    uint64_t result = std::string::append(a2, v6, v5);
    ++v3;
  }
  return result;
}

void sub_10004AA60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004AA7C(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2 >= 1)
  {
    unsigned int v3 = a1;
    std::string::size_type v5 = 0;
    unint64_t v6 = (unint64_t)&a1[a2];
    uint64_t v7 = a3 + 2;
    do
    {
      uint64_t v19 = 0;
      int v8 = sub_10004A6C8(v3, v6, &v19);
      int v9 = v8;
      if ((unint64_t)v5 >= *v7)
      {
        int v11 = *a3;
        uint64_t v12 = (v5 - *a3) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          sub_100004204();
        }
        uint64_t v14 = *v7 - (void)v11;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)sub_10000A17C((uint64_t)v7, v15);
          int v11 = *a3;
          std::string::size_type v5 = a3[1];
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = &v16[4 * v12];
        *(_DWORD *)uint64_t v17 = v9;
        int v10 = v17 + 4;
        while (v5 != v11)
        {
          int v18 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        *a3 = v17;
        a3[1] = v10;
        a3[2] = &v16[4 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(_DWORD *)std::string::size_type v5 = v8;
        int v10 = v5 + 4;
      }
      a3[1] = v10;
      v3 += v19;
      std::string::size_type v5 = v10;
    }
    while ((unint64_t)v3 < v6);
  }
}

void sub_10004ABC0(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004ABE0()
{
  unsigned int v0 = off_1000B5B60;
  off_1000B5B60();
  if ((*v1 & 1) == 0)
  {
    sub_10004A5AC();
    off_1000B5B48();
    *unsigned int v3 = v4;
    do
    {
      uint64_t v5 = v2(&off_1000B5B48);
      *(_DWORD *)(v5 + 4 * v7) = v6;
    }
    while (v7 != 623);
    *(void *)(v2(&off_1000B5B48) + 2496) = 0;
    *(unsigned char *)((uint64_t (*)(void (**)(void)))v0)(&off_1000B5B6sub_10002F6CC(&a9, 0) = 1;
  }
  off_1000B5B48();
}

uint64_t sub_10004AC98(int a1)
{
  strerror_r(a1, __strerrbuf, 0x3FFuLL);
  sub_10001752C((uint64_t)v4);
  size_t v1 = strlen(__strerrbuf);
  uint64_t v2 = sub_100018688(v4, (uint64_t)__strerrbuf, v1);
  sub_100018688(v2, (uint64_t)" Error #", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10004AE28(_Unwind_Exception *exception_object)
{
}

void sub_10004AE44(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X8>)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_100004068();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    int v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)__len;
    int64_t v34 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v34) = __len;
  int v6 = __dst;
  if (__len) {
LABEL_8:
  }
    memmove(v6, __src, __len);
  *((unsigned char *)v6 + __len) = 0;
  char v9 = HIBYTE(v34);
  if (v34 >= 0) {
    int v10 = __dst;
  }
  else {
    int v10 = (void **)__dst[0];
  }
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (__len)
  {
    unint64_t v11 = (unint64_t)v10 + __len;
    do
    {
      if (*(unsigned char *)v10 == 34)
      {
        int v10 = (void **)((char *)v10 + 1);
        uint64_t v12 = v10;
        unint64_t v13 = v10;
        if ((unint64_t)v10 < v11)
        {
          uint64_t v12 = v10;
          unint64_t v13 = v10;
          do
          {
            int v14 = *(unsigned __int8 *)v13;
            if (v14 == 34)
            {
              int v15 = *((unsigned __int8 *)v13 + 1);
              unint64_t v13 = (void **)((char *)v13 + 1);
              if (v15 != 34) {
                break;
              }
            }
            *v12++ = v14;
            unint64_t v13 = (void **)((char *)v13 + 1);
          }
          while ((unint64_t)v13 < v11);
        }
        uint64_t v16 = (char *)memchr(v13, 44, v11 - (void)v13);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = (char *)v11;
        }
      }
      else
      {
        int v18 = (char *)memchr(v10, 44, v11 - (void)v10);
        if (v18) {
          uint64_t v17 = v18;
        }
        else {
          uint64_t v17 = (char *)v11;
        }
        uint64_t v12 = v17;
      }
      *uint64_t v12 = 0;
      sub_10000A1B4(__p, (char *)v10);
      unint64_t v20 = a3[1];
      unint64_t v19 = a3[2];
      if (v20 >= v19)
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a3) >> 3);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100004204();
        }
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a3) >> 3);
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x555555555555555) {
          unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v25 = v23;
        }
        v35[4] = a3 + 2;
        if (v25) {
          char v26 = (char *)sub_10000D200((uint64_t)(a3 + 2), v25);
        }
        else {
          char v26 = 0;
        }
        uint64_t v27 = &v26[24 * v22];
        v35[0] = v26;
        v35[1] = v27;
        v35[3] = &v26[24 * v25];
        long long v28 = *(_OWORD *)__p;
        *((void *)v27 + 2) = v32;
        *(_OWORD *)uint64_t v27 = v28;
        __p[1] = 0;
        uint64_t v32 = 0;
        __p[0] = 0;
        v35[2] = v27 + 24;
        sub_10000D788(a3, v35);
        uint64_t v29 = a3[1];
        sub_10000D920((uint64_t)v35);
        int v30 = SHIBYTE(v32);
        a3[1] = v29;
        if (v30 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)__p;
        *(void *)(v20 + 16) = v32;
        *(_OWORD *)unint64_t v20 = v21;
        a3[1] = v20 + 24;
      }
      int v10 = (void **)(v17 + 1);
    }
    while ((unint64_t)(v17 + 1) < v11);
    char v9 = HIBYTE(v34);
  }
  if (v9 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_10004B0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10000D388((void ***)&__p);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_10004B12C(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    sub_10004B3BC();
  }
  return (a1 + a2 - 1) / a2 * a2;
}

void sub_10004B154(std::string *this)
{
  LOBYTE(size) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if ((size & 3) != 0)
  {
    do
    {
      std::string::push_back(this, 0);
      LOBYTE(v3) = *((unsigned char *)&this->__r_.__value_.__s + 23);
      if ((v3 & 0x80u) != 0) {
        std::string::size_type v3 = this->__r_.__value_.__l.__size_;
      }
    }
    while ((v3 & 3) != 0);
  }
}

void *sub_10004B1B8@<X0>(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = a1[1];
  BOOL v5 = v4 >= a2;
  unint64_t v6 = v4 - a2;
  if (v5)
  {
    *a1 += a2;
    a1[1] = v6;
    return sub_10004CF14(a3);
  }
  else
  {
    unsigned int v9 = 13;
    size_t v7 = (void *)sub_10001752C((uint64_t)v10);
    sub_100018688(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.cc", 63);
    sub_100018688(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_100018688(v10, (uint64_t)") [", 3);
    sub_100018688(v10, (uint64_t)"string.size() >= size", 21);
    sub_100018688(v10, (uint64_t)"] ", 2);
    sub_100014DB8(&v9, (uint64_t)a3);
    if (v11 < 0) {
      operator delete((void *)v10[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)std::ios::~ios();
  }
}

void sub_10004B3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10004B3BC()
{
}

uint64_t sub_10004B3E8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)sub_100035A38(a1);
  *unint64_t v4 = off_1000ADE18;
  v4[1] = a2 + 16;
  sub_10001564C((uint64_t)v4);
  return a1;
}

void sub_10004B438(_Unwind_Exception *a1)
{
  sub_100015048(v1);
  _Unwind_Resume(a1);
}

void *sub_10004B450(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t result = (void *)sub_100014160(a1, a2, a3, a4);
  *uint64_t result = off_1000ADE18;
  return result;
}

void sub_10004B488(void *a1)
{
  sub_100015048(a1);
  operator delete();
}

void sub_10004B4C0(uint64_t *a1@<X0>, unsigned char *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  (*(void (**)(uint64_t (***__return_ptr)()))(*a1 + 16))(&v66);
  if (v66)
  {
    sub_10004CF1C((uint64_t *)&v66);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_10004CF1C((uint64_t *)&v66);
  if (!a3) {
    goto LABEL_3;
  }
  unint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  std::string __p = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  if (a3 >> 59) {
    sub_100004204();
  }
  int v8 = 0;
  std::string __p = operator new(32 * a3);
  uint64_t v74 = (char *)__p;
  uint64_t v75 = (char *)__p + 32 * a3;
  memset(v71, 0, sizeof(v71));
  int v72 = 1065353216;
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v69 = 0;
  uint64_t v70 = 256;
  v65[0] = (uint64_t)a1;
  v65[1] = (uint64_t)&v66;
  v65[2] = (uint64_t)&__p;
  v65[3] = (uint64_t)&v76;
  v65[4] = (uint64_t)v71;
  uint64_t v66 = off_1000ADF20;
  do
  {
    long long v81 = 0uLL;
    int v9 = sub_10001D5E4(a1[2], a2, a3, (BOOL *)&v80 + 8);
    *(void *)&long long v81 = a2;
    *((void *)&v81 + 1) = v9;
    a3 -= v9;
    if (a3) {
      int v10 = v8 + 1;
    }
    else {
      int v10 = -1;
    }
    LODWORD(v8sub_10002F6CC(&a9, 0) = v8 - 1;
    DWORD1(v8sub_10002F6CC(&a9, 0) = v10;
    char v11 = v74;
    if (v74 >= v75)
    {
      int v14 = (char *)__p;
      uint64_t v15 = (v74 - (unsigned char *)__p) >> 5;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59) {
        sub_100004204();
      }
      uint64_t v17 = v75 - (unsigned char *)__p;
      if ((v75 - (unsigned char *)__p) >> 4 > v16) {
        unint64_t v16 = v17 >> 4;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 59) {
          sub_100004110();
        }
        unint64_t v19 = (char *)operator new(32 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      long long v20 = v81;
      long long v21 = &v19[32 * v15];
      *(_OWORD *)long long v21 = v80;
      *((_OWORD *)v21 + 1) = v20;
      unint64_t v22 = v21;
      if (v11 != v14)
      {
        do
        {
          long long v23 = *((_OWORD *)v11 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 32;
          v11 -= 32;
        }
        while (v11 != v14);
        char v11 = v14;
      }
      unint64_t v24 = &v19[32 * v18];
      unint64_t v13 = v21 + 32;
      std::string __p = v22;
      uint64_t v74 = v21 + 32;
      uint64_t v75 = v24;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      long long v12 = v81;
      *(_OWORD *)uint64_t v74 = v80;
      *((_OWORD *)v11 + 1) = v12;
      unint64_t v13 = v11 + 32;
    }
    a2 += v9;
    ++v8;
    uint64_t v74 = v13;
  }
  while (a3);
  if (__p == v13)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if ((unint64_t)(v13 - (unsigned char *)__p) >= 0x21)
    {
      unint64_t v25 = 1;
      do
      {
        sub_10004BC24(v65, v25 - 1, v25);
        ++v25;
      }
      while (v25 < (v74 - (unsigned char *)__p) >> 5);
    }
    char v26 = (int **)v76;
    uint64_t v27 = v77;
    if (v76 != v77)
    {
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = *v26;
        if (v27 - (char *)v26 >= 9)
        {
          uint64_t v30 = 0;
          uint64_t v31 = (v27 - (char *)v26) >> 3;
          uint64_t v32 = v26;
          do
          {
            uint64_t v33 = v32;
            v32 += v30 + 1;
            uint64_t v34 = 2 * v30;
            uint64_t v30 = (2 * v30) | 1;
            uint64_t v35 = v34 + 2;
            if (v35 < v31)
            {
              unsigned int v36 = v32[1];
              float v37 = *((float *)*v32 + 2);
              float v38 = *((float *)v36 + 2);
              if (v37 < v38 || v37 == v38 && **v32 > *v36)
              {
                ++v32;
                uint64_t v30 = v35;
              }
            }
            std::string *v33 = *v32;
          }
          while (v30 <= (uint64_t)((unint64_t)(v31 - 2) >> 1));
          uint64_t v39 = (int **)(v27 - 8);
          if (v32 == v39)
          {
            uint64_t *v32 = v29;
          }
          else
          {
            uint64_t *v32 = *v39;
            *uint64_t v39 = v29;
            sub_10004C198((uint64_t)v26, (uint64_t)(v32 + 1), v32 + 1 - v26);
          }
        }
        v77 -= 8;
        int v40 = *v29;
        uint64_t v41 = *v29;
        uint64_t v42 = __p;
        uint64_t v43 = *((void *)__p + 4 * v41 + 3);
        if (!v43) {
          goto LABEL_58;
        }
        uint64_t v44 = v29[1];
        uint64_t v45 = *((void *)__p + 4 * v44 + 3);
        if (!v45) {
          goto LABEL_58;
        }
        uint64_t v46 = v45 + v43;
        if (v46 != *((void *)v29 + 2)) {
          goto LABEL_58;
        }
        if (a5 > 0.0)
        {
          if (a5 >= 1.0) {
            goto LABEL_58;
          }
          if (!v28)
          {
            sub_10004ABE0();
            uint64_t v28 = v47;
          }
          unsigned int v48 = sub_1000315F4(v28);
          if (((double)v48 + (double)sub_1000315F4(v28) * 4294967300.0) * 5.42101086e-20 + 0.0 < a5) {
            goto LABEL_58;
          }
          uint64_t v42 = __p;
          int v40 = *v29;
          uint64_t v44 = v29[1];
          uint64_t v41 = *v29;
          uint64_t v46 = *((void *)__p + 4 * v44 + 3) + *((void *)__p + 4 * v41 + 3);
        }
        uint64_t v49 = (char *)&v42[8 * v41];
        int v50 = (char *)&v42[8 * v44];
        *((void *)v49 + 3) = v46;
        *((_DWORD *)v49 + 1) = *((_DWORD *)v50 + 1);
        uint64_t v51 = *((unsigned int *)v50 + 1);
        if ((v51 & 0x80000000) == 0) {
          v42[8 * v51] = v40;
        }
        *((void *)v50 + 2) = "";
        *((void *)v50 + 3) = 0;
        sub_10004BC24(v65, *((_DWORD *)__p + 8 * v41), v40);
        sub_10004BC24(v65, *v29, *((_DWORD *)__p + 8 * *v29 + 1));
LABEL_58:
        char v26 = (int **)v76;
        uint64_t v27 = v77;
      }
      while (v76 != v77);
    }
    v79[3] = 0;
    uint64_t v52 = operator new(0x20uLL);
    *uint64_t v52 = off_1000ADF90;
    v52[1] = a1;
    v52[2] = v79;
    v52[3] = v71;
    *((void *)&v81 + 1) = v52;
    sub_10004CAF8(&v80, v79);
    sub_10004C508(&v80);
    int v53 = 0;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    do
    {
      if (v53 < 0)
      {
        LOBYTE(v8sub_10002F6CC(&a9, 0) = 1;
        uint64_t v54 = sub_100018688(&std::cerr, (uint64_t)"bpe_model.cc", 12);
        sub_100018688(v54, (uint64_t)"(", 1);
        uint64_t v55 = (void *)std::ostream::operator<<();
        uint64_t v56 = sub_100018688(v55, (uint64_t)") [", 3);
        uint64_t v57 = sub_100018688(v56, (uint64_t)"(index) >= (0)", 14);
        sub_100018688(v57, (uint64_t)"] ", 2);
        sub_1000176C4(&v80);
      }
      uint64_t v58 = __p;
      if (v53 >= (int)((unint64_t)(v74 - (unsigned char *)__p) >> 5))
      {
        LOBYTE(v8sub_10002F6CC(&a9, 0) = 1;
        uint64_t v59 = sub_100018688(&std::cerr, (uint64_t)"bpe_model.cc", 12);
        sub_100018688(v59, (uint64_t)"(", 1);
        uint64_t v60 = (void *)std::ostream::operator<<();
        int v61 = sub_100018688(v60, (uint64_t)") [", 3);
        uint64_t v62 = sub_100018688(v61, (uint64_t)"(index) < (static_cast<int>(symbols.size()))", 44);
        sub_100018688(v62, (uint64_t)"] ", 2);
        sub_1000176C4(&v80);
        uint64_t v58 = __p;
      }
      sub_10004C074((uint64_t)v79, v58[4 * v53 + 2], v58[4 * v53 + 3], (uint64_t)a4);
      int v53 = *((_DWORD *)__p + 8 * v53 + 1);
    }
    while (v53 != -1);
    sub_10004C508(v79);
  }
  sub_10004C0D0(&v66);
  sub_100034AB8((uint64_t)v71);
  if (__p)
  {
    uint64_t v74 = (char *)__p;
    operator delete(__p);
  }
  if (v76)
  {
    uint64_t v77 = (char *)v76;
    operator delete(v76);
  }
}

void sub_10004BB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  sub_10004C508((void *)(v33 - 200));
  sub_10004C0D0(&a16);
  sub_100034AB8((uint64_t)&a23);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

__n128 sub_10004BC24(uint64_t *a1, int a2, int a3)
{
  if (a2 != -1 && a3 != -1)
  {
    uint64_t v4 = a2;
    uint64_t v5 = *(void *)a1[2];
    if (!*(unsigned char *)(v5 + 32 * a2 + 8))
    {
      uint64_t v6 = a3;
      uint64_t v7 = v5 + 32 * a3;
      if (!*(unsigned char *)(v7 + 8))
      {
        uint64_t v8 = *a1;
        uint64_t v9 = v5 + 32 * a2;
        int v10 = *(unsigned char **)(v9 + 16);
        uint64_t v11 = *(void *)(v7 + 24) + *(void *)(v9 + 24);
        v47[0] = v10;
        v47[1] = v11;
        long long v12 = *(unsigned int **)(v8 + 40);
        unsigned int v13 = *v12;
        if (v11)
        {
          uint64_t v14 = 0;
          uint64_t v15 = v11;
          while (1)
          {
            int v16 = *v10++;
            v14 ^= (v13 >> 10 << ((v13 >> 6) & 8)) ^ v16;
            unsigned int v13 = v12[v14];
            if ((v13 & 0x800000FF) != v16) {
              break;
            }
            if (!--v15) {
              goto LABEL_17;
            }
          }
        }
        else
        {
          int v17 = *v10;
          if (*v10)
          {
            uint64_t v14 = 0;
            unint64_t v18 = v10 + 1;
            while (1)
            {
              v14 ^= (v13 >> 10 << ((v13 >> 6) & 8)) ^ v17;
              unsigned int v13 = v12[v14];
              if ((v13 & 0x800000FF) != v17) {
                break;
              }
              int v19 = *v18++;
              int v17 = v19;
              if (!v19) {
                goto LABEL_17;
              }
            }
          }
          else
          {
            uint64_t v14 = 0;
LABEL_17:
            if ((v13 & 0x100) != 0)
            {
              unsigned int v20 = v12[v14 ^ (v13 >> 10 << ((v13 >> 6) & 8))];
              long long v21 = (void *)a1[1];
              uint64_t v22 = v21[5];
              unint64_t v23 = v21[6];
              unint64_t v24 = v21[4];
              if (v24 >= v23)
              {
                unint64_t v24 = 0;
                ++v22;
                v21[4] = 0;
                v21[5] = v22;
              }
              uint64_t v25 = v21[1];
              if (v22 == (v21[2] - v25) >> 3)
              {
                is_mul_ok(v23, 0x18uLL);
                operator new[]();
              }
              uint64_t v26 = *(void *)(v25 + 8 * v22) + 24 * v24;
              v21[4] = v24 + 1;
              *(_DWORD *)uint64_t v26 = a2;
              *(_DWORD *)(v26 + 4) = a3;
              unsigned int v44 = v20 & 0x7FFFFFFF;
              *(float *)(v26 + 8) = (*(float (**)(uint64_t))(*(void *)v8 + 136))(v8);
              *(void *)(v26 + 16) = v11;
              uint64_t v27 = (uint64_t *)a1[3];
              uint64_t v29 = (void *)v27[1];
              unint64_t v28 = v27[2];
              if ((unint64_t)v29 >= v28)
              {
                uint64_t v32 = *v27;
                uint64_t v33 = ((uint64_t)v29 - *v27) >> 3;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 61) {
                  sub_100004204();
                }
                uint64_t v35 = v28 - v32;
                if (v35 >> 2 > v34) {
                  unint64_t v34 = v35 >> 2;
                }
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36)
                {
                  if (v36 >> 61) {
                    sub_100004110();
                  }
                  float v37 = (char *)operator new(8 * v36);
                }
                else
                {
                  float v37 = 0;
                }
                float v38 = (uint64_t *)&v37[8 * v33];
                uint64_t *v38 = v26;
                uint64_t v30 = (uint64_t)(v38 + 1);
                if (v29 == (void *)v32)
                {
                  uint64_t v31 = v44;
                }
                else
                {
                  uint64_t v31 = v44;
                  do
                  {
                    uint64_t v39 = *--v29;
                    *--float v38 = v39;
                  }
                  while (v29 != (void *)v32);
                  uint64_t v29 = (void *)*v27;
                }
                *uint64_t v27 = (uint64_t)v38;
                v27[1] = v30;
                std::string v27[2] = (uint64_t)&v37[8 * v36];
                if (v29) {
                  operator delete(v29);
                }
              }
              else
              {
                void *v29 = v26;
                uint64_t v30 = (uint64_t)(v29 + 1);
                uint64_t v31 = v44;
              }
              v27[1] = v30;
              sub_10004C198(*v27, v30, (v30 - *v27) >> 3);
              if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v8 + 8) + 128))(*(void *)(v8 + 8), v31))
              {
                uint64_t v41 = *(void *)a1[2];
                __n128 v45 = *(__n128 *)(v41 + 32 * v4 + 16);
                __n128 v46 = *(__n128 *)(v41 + 32 * v6 + 16);
                uint64_t v42 = a1[4];
                unsigned int v48 = v47;
                uint64_t v43 = (__n128 *)sub_10004C230(v42, (uint64_t)v47, (uint64_t)&unk_10009125A, &v48);
                __n128 result = v45;
                _OWORD v43[2] = v45;
                v43[3] = v46;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_10004C074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_10004C58C();
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(void *)v4 + 48))(v4, v7, &v6);
}

void *sub_10004C0D0(void *a1)
{
  *a1 = off_1000ADF20;
  uint64_t v2 = (void *)a1[1];
  std::string::size_type v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        operator delete[]();
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10004C160(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(void *)a1 + 56))(0.0);
}

uint64_t sub_10004C188()
{
  return 1;
}

uint64_t sub_10004C190()
{
  return 0;
}

uint64_t sub_10004C198(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v4 = v3 >> 1;
    uint64_t v5 = result + 8 * (v3 >> 1);
    uint64_t v6 = *(_DWORD **)v5;
    uint64_t v7 = *(void *)(a2 - 8);
    float v8 = *(float *)(*(void *)v5 + 8);
    float v9 = *(float *)(v7 + 8);
    if (v8 < v9 || v8 == v9 && *v6 > *(_DWORD *)v7)
    {
      *(void *)(a2 - 8) = v6;
      if (v3 >= 2)
      {
        while (1)
        {
          unint64_t v11 = v4 - 1;
          unint64_t v4 = (v4 - 1) >> 1;
          uint64_t v10 = result + 8 * v4;
          long long v12 = *(_DWORD **)v10;
          float v13 = *(float *)(*(void *)v10 + 8);
          if (v13 >= v9 && (v13 != v9 || *v12 <= *(_DWORD *)v7)) {
            break;
          }
          *(void *)uint64_t v5 = v12;
          uint64_t v5 = result + 8 * v4;
          if (v11 <= 1) {
            goto LABEL_11;
          }
        }
      }
      uint64_t v10 = v5;
LABEL_11:
      *(void *)uint64_t v10 = v7;
    }
  }
  return result;
}

void *sub_10004C230(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  float v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_10004C4A8(a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        uint64_t v18 = a2;
        int v16 = *(uint64_t **)a2;
        size_t v17 = *(void *)(v18 + 8);
        do
        {
          unint64_t v19 = *((void *)v15 + 1);
          if (v19 == v10)
          {
            if (*((void *)v15 + 3) == v17 && !memcmp(*((const void **)v15 + 2), v16, v17)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11) {
                v19 %= v11;
              }
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
  uint64_t v15 = operator new(0x40uLL);
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = **a4;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_100018060(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t v15 = *v27;
LABEL_40:
    *uint64_t v27 = v15;
    goto LABEL_41;
  }
  *(void *)uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v26 + 8 * v4) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v28 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v8;
  return v15;
}

void sub_10004C494(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_10004C4A8(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return sub_100017B4C((uint64_t)&v4, a2, a3);
}

void sub_10004C4D0(void *a1)
{
  sub_10004C0D0(a1);
  operator delete();
}

void *sub_10004C508(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10004C58C()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_1000ADF68;
}

void sub_10004C5DC(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

void sub_10004C618()
{
}

__n128 sub_10004C62C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1000ADF90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10004C680(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1000ADF90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10004C6B8(uint64_t a1, void *a2, void ***a3)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = *a3;
  *(void *)&long long v33 = *a2;
  *((void *)&v33 + 1) = v4;
  uint64_t v6 = *(void ***)(a1 + 8);
  uint64_t v7 = ((uint64_t (*)(void **, void, uint64_t))(*v6)[14])(v6, v33, v4);
  if (v7 == -1 || ((*(uint64_t (**)(void *, uint64_t))(*v6[1] + 128))(v6[1], v7) & 1) == 0)
  {
    unint64_t v10 = (char *)v5[2];
    unint64_t v11 = (char *)v5[1];
    if (v11 >= v10)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*v5) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (unsigned char *)*v5) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        size_t v17 = (char *)sub_10000D200((uint64_t)(v5 + 2), v16);
        uint64_t v18 = &v17[24 * v13];
        float v20 = &v17[24 * v19];
        *(_OWORD *)uint64_t v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        uint8x8_t v12 = v18 + 24;
        BOOL v22 = (char *)*v5;
        float v21 = (char *)v5[1];
        if (v21 == *v5) {
          goto LABEL_16;
        }
        do
        {
          long long v23 = *(_OWORD *)(v21 - 24);
          *((void *)v18 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v23;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        goto LABEL_15;
      }
LABEL_30:
      sub_100004204();
    }
  }
  else
  {
    float v8 = sub_10004C990(*(void **)(a1 + 24), (uint64_t)&v33);
    if (v8)
    {
      unint64_t v9 = (uint64_t *)v8;
      sub_10004C074(*(void *)(a1 + 16), v9[4], v9[5], (uint64_t)v5);
      sub_10004C074(*(void *)(a1 + 16), v9[6], v9[7], (uint64_t)v5);
      return;
    }
    unint64_t v24 = (char *)v5[2];
    unint64_t v11 = (char *)v5[1];
    if (v11 >= v24)
    {
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*v5) >> 3);
      unint64_t v26 = v25 + 1;
      if (v25 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (unsigned char *)*v5) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v29 = (char *)sub_10000D200((uint64_t)(v5 + 2), v28);
        uint64_t v18 = &v29[24 * v25];
        float v20 = &v29[24 * v30];
        *(_OWORD *)uint64_t v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        uint8x8_t v12 = v18 + 24;
        uint64_t v31 = (char *)*v5;
        float v21 = (char *)v5[1];
        if (v21 == *v5) {
          goto LABEL_16;
        }
        do
        {
          long long v32 = *(_OWORD *)(v21 - 24);
          *((void *)v18 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v32;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v31);
LABEL_15:
        float v21 = (char *)*v5;
LABEL_16:
        char *v5 = v18;
        v5[1] = v12;
        v5[2] = v20;
        if (v21) {
          operator delete(v21);
        }
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }
  *(_OWORD *)unint64_t v11 = v33;
  *((_DWORD *)v11 + 4) = v7;
  uint8x8_t v12 = v11 + 24;
LABEL_18:
  v5[1] = v12;
}

uint64_t sub_10004C944(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10004C984()
{
}

uint64_t **sub_10004C990(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_10004C4A8((uint64_t)(a1 + 3), *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v14 = a2;
    uint8x8_t v12 = *(uint64_t **)a2;
    size_t v13 = *(void *)(v14 + 8);
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(void *)&v5) {
            v15 %= *(void *)&v5;
          }
        }
        else
        {
          v15 &= *(void *)&v5 - 1;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

BOOL sub_10004CAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *sub_10004CAF8(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    int8x8_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10004CD58(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000015C4(a1);
}

void sub_10004CD64()
{
  if (!dword_1000B6B18)
  {
    unsigned int v0 = sub_10004CDD0(&std::cerr, "Program terminated with an unrecoverable error.");
    size_t v1 = sub_10004CE18(v0);
    sub_10004CED0(v1);
    exit(-1);
  }
  dword_1000B6B18 = 2;
}

BOOL sub_10004CDB0()
{
  return dword_1000B6B18 != 0;
}

uint64_t sub_10004CDC4(uint64_t result)
{
  dword_1000B6B18 = result;
  return result;
}

void *sub_10004CDD0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return sub_100018688(a1, (uint64_t)__s, v4);
}

void *sub_10004CE18(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_10004CEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_10004CED4(uint64_t result)
{
  if (!dword_1000B6B18)
  {
    int v1 = result;
    sub_10004CED0(result);
    exit(v1);
  }
  dword_1000B6B18 = 2;
  return result;
}

void *sub_10004CF14(void *result)
{
  *__n128 result = 0;
  return result;
}

uint64_t *sub_10004CF1C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    sub_10004D3E0((uint64_t)a1, v2);
  }
  return a1;
}

void sub_10004CF54()
{
}

void sub_10004D060(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sub_10004D3E0((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10004D084(void *result, void *a2)
{
  if (*a2) {
    operator new();
  }
  *__n128 result = 0;
  return result;
}

void sub_10004D114()
{
}

void sub_10004D13C(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 != *a2)
  {
    if (*a2) {
      operator new();
    }
    *a1 = 0;
    if (v3)
    {
      sub_10004D3E0((uint64_t)a1, v3);
    }
  }
}

void sub_10004D200()
{
}

BOOL sub_10004D224(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL sub_10004D238(void *a1, void *a2)
{
  return *a1 != *a2;
}

const char *sub_10004D24C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return "";
  }
  __n128 result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0) {
    return *(const char **)result;
  }
  return result;
}

std::string *sub_10004D278(uint64_t *a1, std::string::value_type *__s)
{
  uint64_t v2 = *a1;
  if (!v2) {
    operator new();
  }
  uint64_t v3 = (std::string *)(v2 + 8);
  return std::string::assign(v3, __s);
}

uint64_t sub_10004D2F4(unsigned int **a1)
{
  if (*a1) {
    return **a1;
  }
  else {
    return 0;
  }
}

std::string *sub_10004D30C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(_DWORD **)a1;
  if (*(void *)a1)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    unsigned int v5 = *v3 - 1;
    if (v5 < 0x10) {
      std::string::assign(a2, off_1000AE010[v5]);
    }
    std::string::append(a2, ": ");
    int v6 = *(char *)(*(void *)a1 + 31);
    if (v6 >= 0) {
      uint8x8_t v7 = (const std::string::value_type *)(*(void *)a1 + 8);
    }
    else {
      uint8x8_t v7 = *(const std::string::value_type **)(*(void *)a1 + 8);
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(*(void *)a1 + 31);
    }
    else {
      std::string::size_type v8 = *(void *)(*(void *)a1 + 16);
    }
    return std::string::append(a2, v7, v8);
  }
  else
  {
    return (std::string *)sub_10000A1B4(a2, "OK");
  }
}

void sub_10004D3C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004D3E0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    operator delete();
  }
}

void *sub_10004D440()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000B6710, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000B6710))
  {
    operator new();
  }
  unsigned int v0 = (pthread_key_t *)qword_1000B6708;
  return sub_10004D510(v0);
}

void sub_10004D4D8()
{
}

void *sub_10004D510(pthread_key_t *a1)
{
  uint64_t v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    uint64_t v2 = operator new(0x40uLL, (std::align_val_t)0x40uLL);
    *(_OWORD *)uint64_t v2 = xmmword_100091B60;
    v2[2] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

void *sub_10004D574(void *a1, uint64_t a2)
{
  a1[4] = 0;
  std::locale v4 = *(uint64_t (**)(void))(a2 + 48);
  if (v4)
  {
    uint64_t v5 = v4();
    uint64_t v6 = v5;
    if (v5) {
      unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
    }
    else {
      unsigned int v7 = 0;
    }
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  if ((v8 & 7) != 0)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 97);
    unint64_t v10 = sub_100051E74(v15, "CHECK failed: (reinterpret_cast<uintptr_t>(mem) & 7) == (0): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (!v8 || v9 <= 0x87)
  {
    if (*(void *)a2 <= 0x88uLL) {
      unint64_t v9 = 136;
    }
    else {
      unint64_t v9 = *(void *)a2;
    }
    uint64_t v8 = (*(uint64_t (**)(unint64_t))(a2 + 32))(v9);
  }
  uint64_t v11 = 3;
  if (v8 != *(void *)(a2 + 16)) {
    uint64_t v11 = 1;
  }
  *(void *)uint64_t v8 = v11;
  *(void *)(v8 + 8) = 24;
  *(void *)(v8 + 16) = v9;
  uint64_t v12 = sub_10004D6FC(v8, 0x18uLL);
  a1[4] = v12;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(a2 + 32);
  *(void *)(v12 + 32) = v6;
  *(void *)(v8 + 8) += 40;
  sub_10004D78C(a1, v7);
  sub_10004D7F4(a1, v8);
  return a1;
}

void sub_10004D6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10004D6FC(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) < a2)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 111);
    std::locale v4 = sub_100051E74(v7, "CHECK failed: n <= size_: ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v7);
  }
  return a1 + a2;
}

void sub_10004D774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_10004D78C(void *a1, unsigned int a2)
{
  __n128 result = sub_10004D440();
  unint64_t add_explicit = *result;
  if ((*result & 0x1FF) == 0) {
    unint64_t add_explicit = atomic_fetch_add_explicit(qword_1000B6B40, 0x200uLL, memory_order_relaxed);
  }
  *__n128 result = add_explicit + 2;
  a1[3] = add_explicit | a2;
  a1[1] = 0;
  *a1 = 0;
  a1[2] = 0;
  return result;
}

void *sub_10004D7F4(void *a1, uint64_t a2)
{
  std::locale v4 = sub_10004D440();
  uint64_t v5 = sub_10004D868(a2, (uint64_t)v4, (uint64_t)a1);
  v5[4] = 0;
  *a1 = v5;
  a1[2] = *(void *)(a2 + 16);
  sub_10004D440()[2] = v5;
  uint64_t v6 = a1[3];
  __n128 result = sub_10004D440();
  result[1] = v6;
  atomic_store((unint64_t)v5, a1 + 1);
  return result;
}

void *sub_10004D868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = v6 + 72;
  if (v6 + 72 > *(void *)(a1 + 16))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 398);
    uint64_t v8 = sub_100051E74(v13, "CHECK failed: (pos + ArenaImpl::kSerialArenaSize) <= (b->size()): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  unint64_t v9 = (void *)sub_10004D6FC(a1, v6);
  *(void *)(a1 + 8) = v7;
  void *v9 = a3;
  v9[1] = a2;
  std::string v9[2] = a1;
  v9[5] = sub_10004D6FC(a1, v7);
  uint64_t v10 = sub_10004D6FC(a1, *(void *)(a1 + 16));
  void v9[3] = 0;
  v9[7] = 0;
  v9[8] = 0;
  v9[6] = v10;
  return v9;
}

void sub_10004D93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10004D954(uint64_t *a1)
{
  for (uint64_t i = *a1; i; uint64_t i = *(void *)(i + 32))
  {
    if (*(void *)(i + 24)) {
      sub_10004E4A8(i);
    }
  }
  uint64_t v3 = a1[4];
  if (v3)
  {
    uint64_t v5 = *(void (__cdecl **)(void *))(v3 + 24);
    uint64_t v4 = *(void *)(v3 + 32);
  }
  else
  {
    uint64_t v5 = operator delete;
    uint64_t v4 = 0;
  }
  uint64_t v6 = *a1;
  while (v6)
  {
    unint64_t v7 = *(uint64_t **)(v6 + 16);
    uint64_t v6 = *(void *)(v6 + 32);
    if (v7)
    {
      do
      {
        uint64_t v8 = *v7;
        if ((*v7 & 2) == 0) {
          ((void (*)(uint64_t *, uint64_t))v5)(v7, v7[2]);
        }
        unint64_t v7 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      }
      while ((v8 & 0xFFFFFFFFFFFFFFFCLL) != 0);
    }
  }
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a1[2]);
  }
  return a1;
}

uint64_t *sub_10004DA38(uint64_t *result)
{
  for (uint64_t i = *result; i; uint64_t i = *(void *)(i + 32))
  {
    if (*(void *)(i + 24)) {
      __n128 result = (uint64_t *)sub_10004E4A8(i);
    }
  }
  return result;
}

uint64_t sub_10004DA88(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_10004DA94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    if (v3) {
      (*(void (**)(uint64_t, void))(*(void *)v3 + 24))(v3, *(void *)(a1 + 16));
    }
  }
  for (uint64_t i = *(void *)a1; i; uint64_t i = *(void *)(i + 32))
  {
    if (*(void *)(i + 24)) {
      sub_10004E4A8(i);
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    uint64_t v6 = *(void (__cdecl **)(void *))(v5 + 24);
  }
  else {
    uint64_t v6 = operator delete;
  }
  uint64_t v7 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(uint64_t **)(v7 + 16);
      uint64_t v7 = *(void *)(v7 + 32);
      if (v10)
      {
        do
        {
          uint64_t v11 = *v10;
          uint64_t v12 = v10[2];
          if (*v10)
          {
            if (v9)
            {
              sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 217);
              size_t v13 = sub_100051E74(v19, "CHECK failed: special_block == nullptr: ");
              sub_100051FB0((uint64_t)&v18, (const char **)&v13->__r_.__value_.__l.__data_);
              sub_100051FB8((uint64_t)v19);
            }
            unint64_t v9 = v10;
          }
          else
          {
            ((void (*)(uint64_t *, uint64_t))v6)(v10, v10[2]);
          }
          v8 += v12;
          uint64_t v10 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        }
        while ((v11 & 0xFFFFFFFFFFFFFFFCLL) != 0);
      }
    }
    while (v7);
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
  }
  sub_10004D78C((void *)a1, *(_DWORD *)(a1 + 24) & 1);
  if (v9)
  {
    uint64_t v14 = *v9;
    if ((unint64_t)*v9 >= 4)
    {
      sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 226);
      unint64_t v15 = sub_100051E74(v19, "CHECK failed: (special_block->next()) == (nullptr): ");
      sub_100051FB0((uint64_t)&v18, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v19);
      uint64_t v14 = *v9;
    }
    uint64_t *v9 = v14 & 3;
    uint64_t v16 = 64;
    if (!*(void *)(a1 + 32)) {
      uint64_t v16 = 24;
    }
    v9[1] = v16;
    sub_10004D7F4((void *)a1, (uint64_t)v9);
  }
  return v8;
}

void sub_10004DC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10004DCA4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a2 == -1)
  {
    if (v5) {
      unint64_t v7 = *(void *)v5;
    }
    else {
      unint64_t v7 = 256;
    }
  }
  else
  {
    if (v5) {
      unint64_t v6 = *(void *)(v5 + 8);
    }
    else {
      unint64_t v6 = 0x2000;
    }
    if (v6 >= 2 * a2) {
      unint64_t v7 = 2 * a2;
    }
    else {
      unint64_t v7 = v6;
    }
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 245);
    uint64_t v8 = sub_100051E74(v12, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    sub_100051FB0((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v12);
    uint64_t v5 = *(void *)(a1 + 32);
  }
  if (v7 <= a3 + 24) {
    size_t v9 = a3 + 24;
  }
  else {
    size_t v9 = v7;
  }
  if (v5) {
    __n128 result = (void *)(*(uint64_t (**)(size_t))(v5 + 16))(v9);
  }
  else {
    __n128 result = operator new(v9);
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 16), v9, memory_order_relaxed);
  return result;
}

void sub_10004DD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10004DDA8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = (uint64_t *)sub_10004DCA4(a3, v6, a2);
  return sub_10004E5B8(v7, v8, a1, 0, 0);
}

void *sub_10004DE04(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  __n128 result = (void *)a1[3];
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40) {
        uint64_t v7 = 64;
      }
      else {
        uint64_t v7 = 2 * *result;
      }
    }
    else
    {
      uint64_t v7 = 8;
    }
    __n128 result = (void *)sub_10004DE9C(a1, (16 * (_WORD)v7 + 23) & 0xFF0);
    uint64_t v8 = a1[3];
    *__n128 result = v7;
    result[1] = v8;
    a1[3] = (uint64_t)result;
    a1[7] = (uint64_t)(result + 2);
    a1[8] = (uint64_t)&result[2 * v7 + 2];
  }
  while (!(16 * v7));
  result[2] = a2;
  result[3] = a3;
  a1[7] = (uint64_t)(result + 4);
  return result;
}

unint64_t sub_10004DE9C(uint64_t *a1, unint64_t a2)
{
  if (((a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 159);
    uint64_t v4 = sub_100051E74(v9, "CHECK failed: (internal::AlignUpTo8(n)) == (n): ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v9);
  }
  unint64_t result = a1[5];
  unint64_t v6 = a1[6];
  if (v6 < result)
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 160);
    uint64_t v7 = sub_100051E74(v9, "CHECK failed: (limit_) >= (ptr_): ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v9);
    unint64_t result = a1[5];
    unint64_t v6 = a1[6];
  }
  if (v6 - result < a2) {
    return sub_10004E364(a1, a2);
  }
  a1[5] = result + a2;
  return result;
}

void sub_10004DF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10004DFA4(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10004D440();
  if (v6[1] == a1[3])
  {
    explicit = (uint64_t *)v6[2];
    goto LABEL_3;
  }
  size_t v9 = sub_10004D440();
  explicit = (uint64_t *)atomic_load_explicit(a1 + 1, memory_order_acquire);
  if (explicit && (void *)explicit[1] == v9)
  {
LABEL_3:
    return sub_10004E050(explicit, a2, a3);
  }
  return sub_10004E0B0(a1, a2, a3);
}

unint64_t sub_10004E050(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_10004DE9C(a1, a2);
  unint64_t v6 = v5;
  uint64_t v7 = (unint64_t *)a1[7];
  if (v7 == (unint64_t *)a1[8])
  {
    sub_10004DE04(a1, v5, a3);
  }
  else
  {
    *uint64_t v7 = v5;
    v7[1] = a3;
    a1[7] = (uint64_t)(v7 + 2);
  }
  return v6;
}

unint64_t sub_10004E0B0(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10004D440();
  uint64_t v7 = (uint64_t *)sub_10004E29C(a1, (uint64_t)v6);
  return sub_10004E050(v7, a2, a3);
}

uint64_t *sub_10004E108(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10004D440();
  if (v6[1] == a1[3])
  {
    unint64_t result = (uint64_t *)v6[2];
    goto LABEL_3;
  }
  size_t v9 = sub_10004D440();
  unint64_t result = (uint64_t *)atomic_load_explicit(a1 + 1, memory_order_acquire);
  if (result && (void *)result[1] == v9)
  {
LABEL_3:
    char v8 = (uint64_t *)result[7];
    if (v8 == (uint64_t *)result[8])
    {
      return sub_10004DE04(result, a2, a3);
    }
    else
    {
      *char v8 = a2;
      v8[1] = a3;
      result[7] = (uint64_t)(v8 + 2);
    }
    return result;
  }
  return sub_10004E1D8(a1, a2, a3);
}

uint64_t *sub_10004E1D8(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10004D440();
  unint64_t result = (uint64_t *)sub_10004E29C(a1, (uint64_t)v6);
  char v8 = (uint64_t *)result[7];
  if (v8 == (uint64_t *)result[8])
  {
    return sub_10004DE04(result, a2, a3);
  }
  else
  {
    *char v8 = a2;
    v8[1] = a3;
    result[7] = (uint64_t)(v8 + 2);
  }
  return result;
}

unint64_t sub_10004E254(void *a1, unint64_t a2)
{
  uint64_t v4 = sub_10004D440();
  unint64_t v5 = (uint64_t *)sub_10004E29C(a1, (uint64_t)v4);
  return sub_10004DE9C(v5, a2);
}

unint64_t sub_10004E29C(void *a1, uint64_t a2)
{
  unint64_t explicit = atomic_load_explicit(a1, memory_order_acquire);
  if (explicit)
  {
    while (*(void *)(explicit + 8) != a2)
    {
      unint64_t explicit = *(void *)(explicit + 32);
      if (!explicit) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    unint64_t v5 = sub_10004DCA4((uint64_t)a1, -1, 0x48uLL);
    *(_OWORD *)unint64_t v5 = xmmword_100091B70;
    v5[2] = v6;
    uint64_t v7 = sub_10004D868((uint64_t)v5, a2, (uint64_t)a1);
    unint64_t explicit = (unint64_t)v7;
    atomic_ullong v8 = *a1;
    v7[4] = *a1;
    atomic_ullong v9 = v8;
    atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v9, (unint64_t)v7, memory_order_release, memory_order_relaxed);
    if (v9 != v8)
    {
      atomic_ullong v10 = v9;
      do
      {
        v7[4] = v9;
        atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v10, (unint64_t)v7, memory_order_release, memory_order_relaxed);
        BOOL v11 = v10 == v9;
        atomic_ullong v9 = v10;
      }
      while (!v11);
    }
  }
  sub_10004D440()[2] = explicit;
  uint64_t v12 = a1[3];
  sub_10004D440()[1] = v12;
  atomic_store(explicit, a1 + 1);
  return explicit;
}

uint64_t sub_10004E364(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  *(void *)(v4 + 8) = *(void *)(v4 + 16) - a1[6] + a1[5];
  unint64_t v5 = sub_10004DDA8(v4, a2, *a1);
  a1[2] = (uint64_t)v5;
  a1[5] = sub_10004D6FC((uint64_t)v5, v5[1]);
  a1[6] = sub_10004D6FC(a1[2], *(void *)(a1[2] + 16));
  return sub_10004DE9C(a1, a2);
}

uint64_t sub_10004E3E0(atomic_ullong *a1)
{
  uint64_t explicit = atomic_load_explicit(a1, memory_order_acquire);
  if (explicit)
  {
    uint64_t v3 = 0;
    do
    {
      v3 += sub_10004E440(explicit);
      uint64_t explicit = *(void *)(explicit + 32);
    }
    while (explicit);
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (a1[4]) {
    return v3 - 40;
  }
  else {
    return v3;
  }
}

uint64_t sub_10004E440(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = v2 - sub_10004D6FC(*(void *)(a1 + 16), 0x18uLL);
  uint64_t v4 = **(void **)(a1 + 16);
  while (1)
  {
    unint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (!v5) {
      break;
    }
    uint64_t v6 = v5;
    uint64_t v4 = *v5;
    uint64_t v3 = v3 + v6[1] - 24;
  }
  return v3 - 72;
}

uint64_t sub_10004E498(uint64_t result)
{
  if (*(void *)(result + 24)) {
    return sub_10004E4A8(result);
  }
  return result;
}

uint64_t sub_10004E4A8(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 24);
  uint64_t v2 = (*(void *)(result + 56) - (void)v1 - 16) >> 4;
  if (v2)
  {
LABEL_2:
    uint64_t v3 = &v1[2 * v2 + 1];
    do
    {
      --v2;
      unint64_t result = ((uint64_t (*)(void))*v3)(*(v3 - 1));
      v3 -= 2;
    }
    while (v2);
  }
  while (1)
  {
    uint64_t v1 = (uint64_t *)v1[1];
    if (!v1) {
      return result;
    }
    uint64_t v2 = *v1;
    if (*v1) {
      goto LABEL_2;
    }
  }
}

unint64_t sub_10004E524(void *a1, unint64_t a2)
{
  uint64_t v4 = sub_10004D440();
  if (v4[1] == a1[3])
  {
    uint64_t explicit = (uint64_t *)v4[2];
    goto LABEL_3;
  }
  uint64_t v7 = sub_10004D440();
  uint64_t explicit = (uint64_t *)atomic_load_explicit(a1 + 1, memory_order_acquire);
  if (explicit && (void *)explicit[1] == v7)
  {
LABEL_3:
    return sub_10004DE9C(explicit, a2);
  }
  return sub_10004E254(a1, a2);
}

uint64_t *sub_10004E5B8(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v6 = 2;
  if (!a5) {
    uint64_t v6 = 0;
  }
  *a1 = v6 | a4 | a3;
  a1[1] = 24;
  a1[2] = a2;
  if ((a3 & 3) != 0)
  {
    sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 107);
    uint64_t v7 = sub_100051E74(v10, "CHECK failed: (reinterpret_cast<uintptr_t>(next) & 3) == (0u): ");
    sub_100051FB0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v10);
  }
  return a1;
}

void sub_10004E64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10004E664(void *a1)
{
  if (a1) {
    operator delete(a1, (std::align_val_t)0x40uLL);
  }
}

unint64_t sub_10004E674(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000B6718, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000B6718))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_1000B5AA8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000B6718);
  }
  std::mutex::lock(&stru_1000B5AA8);
  unint64_t explicit = atomic_load_explicit(a1 + 3, memory_order_acquire);
  if (!explicit)
  {
    sub_10001DEEC(a1, (void *)*a1, a1[1]);
    atomic_store((unint64_t)a1, a1 + 3);
    unint64_t explicit = (unint64_t)a1;
  }
  std::mutex::unlock(&stru_1000B5AA8);
  return explicit;
}

std::string *sub_10004E730(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (*a1 == a2)
  {
    if (!a4) {
      operator new();
    }
    if (*(unsigned char *)(a4 + 24)) {
    unint64_t result = (std::string *)sub_10004DFA4((void *)a4, 0x18uLL, (uint64_t)sub_100048840);
    }
    uint64_t v12 = result;
    if (*((char *)a3 + 23) < 0)
    {
      unint64_t result = (std::string *)sub_1000302DC(result, *(void **)a3, *((void *)a3 + 1));
    }
    else
    {
      long long v13 = *a3;
      result->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
      *(_OWORD *)&result->__r_.__value_.__l.__data_ = v13;
    }
    *a1 = (uint64_t)v12;
  }
  else
  {
    uint64_t v6 = (std::string *)sub_10003D154(a1);
    int v7 = *((char *)a3 + 23);
    if (v7 >= 0) {
      atomic_ullong v8 = (const std::string::value_type *)a3;
    }
    else {
      atomic_ullong v8 = *(const std::string::value_type **)a3;
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      std::string::size_type v9 = *((void *)a3 + 1);
    }
    return std::string::assign(v6, v8, v9);
  }
  return result;
}

void sub_10004E888()
{
}

void sub_10004E8AC(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (*a1 == a2)
  {
    if (!a4) {
      operator new();
    }
    if (*(unsigned char *)(a4 + 24))
    {
      uint64_t v11 = a4;
      a4 = v11;
    }
    unint64_t v9 = sub_10004DFA4((void *)a4, 0x18uLL, (uint64_t)sub_100048840);
    uint64_t v10 = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v9 = *a3;
    *(void *)(v9 + 16) = v10;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
    *a1 = v9;
  }
  else
  {
    uint64_t v6 = sub_10003D154(a1);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    long long v8 = *a3;
    *(void *)(v7 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    *((unsigned char *)a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
}

std::string *sub_10004E9D8(uint64_t *a1, long long *a2, uint64_t a3)
{
  return sub_10004E730(a1, (uint64_t)&qword_1000B6B88, a2, a3);
}

void sub_10004E9EC(uint64_t *a1, long long *a2, uint64_t a3)
{
}

std::string *sub_10004EA00(uint64_t *a1, long long *a2, uint64_t a3)
{
  return sub_10004E730(a1, 0, a2, a3);
}

void sub_10004EA10(uint64_t *a1, long long *a2, uint64_t a3)
{
}

uint64_t *sub_10004EA20(uint64_t *a1, uint64_t a2)
{
  if ((uint64_t *)*a1 == &qword_1000B6B88) {
    return sub_10004EA3C((uint64_t **)a1, a2);
  }
  else {
    return (uint64_t *)sub_10003D154(a1);
  }
}

uint64_t *sub_10004EA3C(uint64_t **a1, uint64_t a2)
{
  if (*a1 != &qword_1000B6B88)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    uint64_t v4 = sub_100051E74(v7, "CHECK failed: IsDefault(default_value): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v7);
  }
  if (!a2) {
    operator new();
  }
  if (*(unsigned char *)(a2 + 24)) {
  unint64_t result = (uint64_t *)sub_10004DFA4((void *)a2, 0x18uLL, (uint64_t)sub_100048840);
  }
  *unint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  *a1 = result;
  return result;
}

void sub_10004EB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10004EB5C(uint64_t *a1, void *a2, uint64_t a3)
{
  if (*a1) {
    return sub_10003D154(a1);
  }
  else {
    return sub_10004EB78((unint64_t *)a1, a3, a2);
  }
}

unint64_t sub_10004EB78(unint64_t *a1, uint64_t a2, void *a3)
{
  if (*a1)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    char v6 = sub_100051E74(v13, "CHECK failed: IsDefault(default_value): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  unint64_t explicit = atomic_load_explicit(a3 + 3, memory_order_acquire);
  if (explicit)
  {
    if (a2) {
      goto LABEL_5;
    }
LABEL_10:
    operator new();
  }
  unint64_t explicit = sub_10004E674(a3);
  if (!a2) {
    goto LABEL_10;
  }
LABEL_5:
  if (*(unsigned char *)(a2 + 24)) {
  unint64_t v8 = sub_10004DFA4((void *)a2, 0x18uLL, (uint64_t)sub_100048840);
  }
  unint64_t v9 = v8;
  if (*(char *)(explicit + 23) < 0)
  {
    sub_1000302DC((unsigned char *)v8, *(void **)explicit, *(void *)(explicit + 8));
  }
  else
  {
    long long v10 = *(_OWORD *)explicit;
    *(void *)(v8 + 16) = *(void *)(explicit + 16);
    *(_OWORD *)unint64_t v8 = v10;
  }
  *a1 = v9;
  return v9;
}

void sub_10004ECDC()
{
}

void *sub_10004ED14(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a2)
  {
    if (!a3) {
      operator new();
    }
    if (*(unsigned char *)(a3 + 24))
    {
      uint64_t v5 = a3;
      a3 = v5;
    }
    unint64_t result = (void *)sub_10004DFA4((void *)a3, 0x18uLL, (uint64_t)sub_100048840);
    *unint64_t result = 0;
    result[1] = 0;
    result[2] = 0;
    *a1 = (uint64_t)result;
  }
  else
  {
    return (void *)sub_10003D154(a1);
  }
  return result;
}

uint64_t sub_10004EE00(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a2) {
    return 0;
  }
  else {
    return sub_10004EE18(a1, a2, a3);
  }
}

uint64_t sub_10004EE18(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a2)
  {
    sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 165);
    char v6 = sub_100051E74(v10, "CHECK failed: !IsDefault(default_value): ");
    sub_100051FB0((uint64_t)&v9, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v10);
    if (a3) {
LABEL_3:
    }
      operator new();
  }
  else if (a3)
  {
    goto LABEL_3;
  }
  uint64_t v7 = sub_10003D154(a1);
  *a1 = a2;
  return v7;
}

void sub_10004EEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10004EF0C(uint64_t *result, uint64_t a2, long long *a3, uint64_t a4)
{
  if (a4)
  {
    if (a3)
    {
      if (*(unsigned char *)(a4 + 24)) {
      unint64_t v6 = sub_10004DFA4((void *)a4, 0x18uLL, (uint64_t)sub_100048840);
      }
      if (*((char *)a3 + 23) < 0)
      {
        sub_1000302DC((unsigned char *)v6, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v7 = *a3;
        *(void *)(v6 + 16) = *((void *)a3 + 2);
        *(_OWORD *)unint64_t v6 = v7;
      }
      if (*((char *)a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      operator delete();
    }
  }
  else
  {
    if (*result != a2)
    {
      uint64_t v8 = sub_10003D154(result);
      if (*(char *)(v8 + 23) < 0) {
        operator delete(*(void **)v8);
      }
      operator delete();
    }
    if (a3) {
      operator new();
    }
  }
  *unint64_t result = a2;
  return result;
}

void sub_10004F08C()
{
}

uint64_t *sub_10004F0B0(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if (!a3 && *result != a2)
  {
    uint64_t v3 = sub_10003D154(result);
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_10004F124(uint64_t *a1, uint64_t a2)
{
  return sub_10004F0B0(a1, (uint64_t)&qword_1000B6B88, a2);
}

uint64_t *sub_10004F134(uint64_t *a1, uint64_t a2)
{
  return sub_10004F0B0(a1, 0, a2);
}

void *sub_10004F140(void *result)
{
  if ((uint64_t *)*result != &qword_1000B6B88)
  {
    unint64_t v1 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)unint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  return result;
}

std::string *sub_10004F17C(std::string *result, void *a2)
{
  if (result->__r_.__value_.__r.__words[0])
  {
    uint64_t v3 = (std::string *)sub_10003D154((uint64_t *)result);
    unint64_t explicit = (const std::string *)atomic_load_explicit(a2 + 3, memory_order_acquire);
    if (!explicit) {
      unint64_t explicit = (const std::string *)sub_10004E674(a2);
    }
    return std::string::operator=(v3, explicit);
  }
  return result;
}

uint64_t sub_10004F1E8(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    sub_10004F220(a1);
  }
  return a1;
}

uint64_t sub_10004F220(uint64_t result)
{
  if (*(_DWORD *)(result + 28) + *(_DWORD *)(result + 44) + *(_DWORD *)(result + 8) - *(_DWORD *)result >= 1)
  {
    uint64_t v1 = result;
    unint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 16) + 24))(*(void *)(result + 16));
    unsigned int v2 = *(_DWORD *)(v1 + 24) - *(_DWORD *)(v1 + 44) + *(void *)v1 - *(_DWORD *)(v1 + 8);
    *(void *)(v1 + 8) = *(void *)v1;
    *(_DWORD *)(v1 + 44) = 0;
    *(void *)(v1 + 24) = v2;
  }
  return result;
}

uint64_t sub_10004F2B8(uint64_t a1, int a2)
{
  uint64_t result = *(unsigned int *)(a1 + 40);
  if ((a2 & 0x80000000) == 0)
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(int *)(a1 + 44);
    int v7 = v4 - v6 + *(_DWORD *)a1 - v5;
    if ((v7 ^ 0x7FFFFFFF) >= a2 && (int)result - v7 > a2)
    {
      int v9 = v7 + a2;
      *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = v9;
      uint64_t v10 = v5 + v6;
      *(void *)(a1 + 8) = v10;
      int v11 = *(_DWORD *)(a1 + 48);
      if (v11 >= v9) {
        int v11 = v9;
      }
      BOOL v12 = __OFSUB__(v4, v11);
      int v13 = v4 - v11;
      if ((v13 < 0) ^ v12 | (v13 == 0)) {
        int v13 = 0;
      }
      else {
        *(void *)(a1 + 8) = v10 - v13;
      }
      *(_DWORD *)(a1 + 44) = v13;
    }
  }
  return result;
}

uint64_t sub_10004F330(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4sub_10002F6CC(&a9, 0) = a2;
  int v2 = *(_DWORD *)(result + 48);
  uint64_t v3 = *(void *)(result + 8) + *(int *)(result + 44);
  *(void *)(result + 8) = v3;
  if (v2 >= a2) {
    int v4 = a2;
  }
  else {
    int v4 = v2;
  }
  int v5 = *(_DWORD *)(result + 24);
  BOOL v6 = __OFSUB__(v5, v4);
  int v7 = v5 - v4;
  if ((v7 < 0) ^ v6 | (v7 == 0)) {
    int v7 = 0;
  }
  else {
    *(void *)(result + 8) = v3 - v7;
  }
  *(_DWORD *)(result + 44) = v7;
  *(unsigned char *)(result + 36) = 0;
  return result;
}

unint64_t sub_10004F378(uint64_t a1, int a2)
{
  unsigned int v3 = sub_10004F2B8(a1, a2);
  uint64_t v4 = (*(_DWORD *)(a1 + 52) - 1);
  *(_DWORD *)(a1 + 52) = v4;
  return v3 | (unint64_t)(v4 << 32);
}

uint64_t sub_10004F3B0(uint64_t *a1)
{
  int v2 = (char *)*a1;
  if (*a1 >= (unint64_t)a1[1])
  {
    int v3 = 0;
  }
  else
  {
    int v3 = *v2;
    if ((*v2 & 0x80000000) == 0)
    {
      *a1 = (uint64_t)(v2 + 1);
      goto LABEL_7;
    }
  }
  uint64_t v4 = sub_100050114(a1, v3);
  int v3 = v4;
  if (v4 < 0) {
    int v3 = 0;
  }
LABEL_7:
  return sub_10004F2B8((uint64_t)a1, v3);
}

BOOL sub_10004F420(uint64_t a1, int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 36);
  *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = a2;
  int v4 = *(_DWORD *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 8) + *(int *)(a1 + 44);
  *(void *)(a1 + 8) = v5;
  if (v4 >= a2) {
    int v6 = a2;
  }
  else {
    int v6 = v4;
  }
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v8 = __OFSUB__(v7, v6);
  int v9 = v7 - v6;
  if ((v9 < 0) ^ v8 | (v9 == 0)) {
    int v9 = 0;
  }
  else {
    *(void *)(a1 + 8) = v5 - v9;
  }
  *(_DWORD *)(a1 + 44) = v9;
  *(unsigned char *)(a1 + 36) = 0;
  int v10 = *(_DWORD *)(a1 + 52);
  if (v10 >= *(_DWORD *)(a1 + 56))
  {
    sub_100051E5C((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 161);
    int v11 = sub_100051E74(v14, "CHECK failed: (recursion_budget_) < (recursion_limit_): ");
    sub_100051FB0((uint64_t)&v13, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v14);
    int v10 = *(_DWORD *)(a1 + 52);
  }
  BOOL result = v3 != 0;
  *(_DWORD *)(a1 + 52) = v10 + 1;
  return result;
}

void sub_10004F4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10004F504(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 36);
  *(_DWORD *)(a1 + 4sub_10002F6CC(&a9, 0) = a2;
  int v3 = *(_DWORD *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 8) + *(int *)(a1 + 44);
  *(void *)(a1 + 8) = v4;
  if (v3 >= a2) {
    int v5 = a2;
  }
  else {
    int v5 = v3;
  }
  int v6 = *(_DWORD *)(a1 + 24);
  BOOL v7 = __OFSUB__(v6, v5);
  int v8 = v6 - v5;
  if ((v8 < 0) ^ v7 | (v8 == 0)) {
    int v8 = 0;
  }
  else {
    *(void *)(a1 + 8) = v4 - v8;
  }
  *(_DWORD *)(a1 + 44) = v8;
  *(unsigned char *)(a1 + 36) = 0;
  return v2 != 0;
}

uint64_t sub_10004F55C(_DWORD *a1)
{
  int v1 = a1[10];
  if (v1 == 0x7FFFFFFF) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (v1 - a1[6] + a1[11] + a1[2] - *a1);
  }
}

uint64_t sub_10004F598(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 24);
  uint64_t v3 = *(void *)(result + 8);
  int v4 = *(_DWORD *)(result + 40);
  uint64_t v5 = *(int *)(result + 44);
  int v6 = v2 - v5 + *(_DWORD *)result - v3;
  if (v6 <= a2) {
    int v6 = a2;
  }
  *(_DWORD *)(result + 48) = v6;
  uint64_t v7 = v3 + v5;
  *(void *)(result + 8) = v7;
  if (v6 >= v4) {
    int v6 = v4;
  }
  BOOL v8 = __OFSUB__(v2, v6);
  int v9 = v2 - v6;
  if ((v9 < 0) ^ v8 | (v9 == 0)) {
    int v9 = 0;
  }
  else {
    *(void *)(result + 8) = v7 - v9;
  }
  *(_DWORD *)(result + 44) = v9;
  return result;
}

uint64_t sub_10004F5F4(_DWORD *a1)
{
  int v1 = a1[12];
  if (v1 == 0x7FFFFFFF) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (v1 - a1[6] + a1[11] + a1[2] - *a1);
  }
}

uint64_t sub_10004F630(uint64_t a1)
{
  sub_100051E5C((uint64_t)v7, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 193);
  int v2 = sub_100051E74(v7, "A protocol message was rejected because it was too big (more than ");
  uint64_t v3 = sub_1000523B8(v2, *(_DWORD *)(a1 + 48));
  int v4 = sub_100051E74(v3, " bytes).  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in third_party/protobuf/src/google/protobuf/io/coded_stream.h.");
  sub_100051FB0((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
  return sub_100051FB8((uint64_t)v7);
}

void sub_10004F6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10004F6C0(uint64_t a1, int a2, int a3)
{
  if (*(int *)(a1 + 44) < 1)
  {
    uint64_t v5 = (a2 - a3);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    int v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 40)) {
      int v6 = *(_DWORD *)(a1 + 40);
    }
    int v7 = v6 - *(_DWORD *)(a1 + 24);
    if (v7 >= (int)v5)
    {
      if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5))
      {
        *(_DWORD *)(a1 + 24) += v5;
        return 1;
      }
      else
      {
        int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
        uint64_t result = 0;
        *(_DWORD *)(a1 + 24) = v8;
      }
    }
    else
    {
      if (v7 >= 1)
      {
        *(_DWORD *)(a1 + 24) = v6;
        (*(void (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
      }
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    *(void *)a1 += a3;
  }
  return result;
}

uint64_t sub_10004F7DC(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = *(void *)a1;
  if (*(_DWORD *)(a1 + 8) == *(void *)a1)
  {
    uint64_t result = sub_10004F844(a1);
    if (!result) {
      return result;
    }
    uint64_t v6 = *(void *)a1;
  }
  *a2 = v6;
  *a3 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  return 1;
}

uint64_t sub_10004F844(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)a1)
  {
    sub_100051E5C((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 617);
    int v2 = sub_100051E74(v24, "CHECK failed: (0) == (BufferSize()): ");
    sub_100051FB0((uint64_t)&v23, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v24);
  }
  int v3 = *(_DWORD *)(a1 + 44);
  if (v3 > 0 || *(int *)(a1 + 28) > 0 || *(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 40))
  {
    int v4 = *(_DWORD *)(a1 + 24) - v3;
    int v5 = *(_DWORD *)(a1 + 48);
    if (v4 >= v5 && v5 != *(_DWORD *)(a1 + 40)) {
      sub_10004F630(a1);
    }
    return 0;
  }
  else
  {
    uint64_t v23 = 0;
    int v22 = 0;
    uint64_t v8 = *(void *)(a1 + 16);
    do
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)v8 + 16))(v8, &v23, &v22);
      if (!v6)
      {
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        return v6;
      }
      int v9 = v22;
    }
    while (!v22);
    uint64_t v10 = v23 + v22;
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v10;
    if (v9 < 0)
    {
      sub_100051E5C((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 638);
      int v11 = sub_100051E74(v24, "CHECK failed: (buffer_size) >= (0): ");
      sub_100051FB0((uint64_t)&v21, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v24);
      int v9 = v22;
    }
    int v12 = *(_DWORD *)(a1 + 24);
    int v13 = v12 - (v9 ^ 0x7FFFFFFF);
    if (v12 <= (v9 ^ 0x7FFFFFFF))
    {
      int v15 = v9 + v12;
      uint64_t v14 = *(void *)(a1 + 8);
    }
    else
    {
      *(_DWORD *)(a1 + 28) = v13;
      uint64_t v14 = *(void *)(a1 + 8) - v13;
      *(void *)(a1 + 8) = v14;
      int v15 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 24) = v15;
    int v16 = *(_DWORD *)(a1 + 40);
    uint64_t v17 = v14 + *(int *)(a1 + 44);
    *(void *)(a1 + 8) = v17;
    int v18 = *(_DWORD *)(a1 + 48);
    if (v18 >= v16) {
      int v18 = v16;
    }
    BOOL v19 = __OFSUB__(v15, v18);
    int v20 = v15 - v18;
    if ((v20 < 0) ^ v19 | (v20 == 0)) {
      int v20 = 0;
    }
    else {
      *(void *)(a1 + 8) = v17 - v20;
    }
    *(_DWORD *)(a1 + 44) = v20;
  }
  return v6;
}

void sub_10004FA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10004FA50(const void **a1, char *__dst, int a3)
{
  while (1)
  {
    int v6 = a3;
    int v7 = *a1;
    int64_t v8 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    BOOL v9 = __OFSUB__(a3, v8);
    a3 -= v8;
    if ((a3 < 0) ^ v9 | (a3 == 0)) {
      break;
    }
    memcpy(__dst, v7, (int)v8);
    __dst += (int)v8;
    *a1 = (char *)*a1 + (int)v8;
    if ((sub_10004F844((uint64_t)a1) & 1) == 0) {
      return v6 <= (int)v8;
    }
  }
  memcpy(__dst, v7, v6);
  *a1 = (char *)*a1 + v6;
  return v6 <= (int)v8;
}

BOOL sub_10004FAE8(uint64_t a1, std::string *this, std::string::size_type __n)
{
  if ((__n & 0x80000000) != 0) {
    return 0;
  }
  int v3 = this;
  if (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1 >= (int)__n)
  {
    size_t v6 = __n;
    std::string::resize(this, __n, 0);
    if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
    {
      int v3 = (std::string *)v3->__r_.__value_.__r.__words[0];
      if (!v3)
      {
        sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 267);
        int v7 = sub_100051E74(v9, "CHECK failed: z.first != NULL: ");
        sub_100051FB0((uint64_t)&v8, (const char **)&v7->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v9);
        int v3 = 0;
      }
    }
    memcpy(v3, *(const void **)a1, v6);
    *(void *)a1 += v6;
    return 1;
  }
  else
  {
    return sub_10004FC04((_DWORD *)a1, this, __n);
  }
}

void sub_10004FBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10004FC04(_DWORD *a1, std::string *this, std::string::size_type __requested_capacity)
{
  int v3 = __requested_capacity;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (this->__r_.__value_.__l.__size_)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
  }
  else if (*((unsigned char *)&this->__r_.__value_.__s + 23))
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  int v6 = a1[12];
  if (v6 >= a1[10]) {
    int v6 = a1[10];
  }
  if (v6 != 0x7FFFFFFF)
  {
    int v7 = v6 - a1[6] + a1[11] + a1[2] - *a1;
    BOOL v8 = v7 < (int)__requested_capacity || (int)__requested_capacity < 1;
    if (!v8 && v7 >= 1) {
      std::string::reserve(this, __requested_capacity);
    }
  }
  while (1)
  {
    int v10 = v3;
    int v11 = *(const std::string::value_type **)a1;
    uint64_t v12 = *((void *)a1 + 1) - *(void *)a1;
    BOOL v13 = __OFSUB__(v3, v12);
    v3 -= v12;
    if ((v3 < 0) ^ v13 | (v3 == 0)) {
      break;
    }
    if (v12)
    {
      std::string::append(this, v11, (int)v12);
      int v11 = *(const std::string::value_type **)a1;
    }
    *(void *)a1 = &v11[(int)v12];
    if ((sub_10004F844((uint64_t)a1) & 1) == 0) {
      return v10 <= (int)v12;
    }
  }
  std::string::append(this, v11, v10);
  *(void *)a1 += v10;
  return v10 <= (int)v12;
}

BOOL sub_10004FD24(uint64_t a1, _DWORD *a2)
{
  int v3 = *(char **)a1;
  if (((*(_DWORD *)(a1 + 8) - *(void *)a1) & 0xFFFFFFFC) != 0)
  {
    *(void *)a1 = v3 + 4;
  }
  else
  {
    int v3 = __dst;
    BOOL result = sub_10004FA50((const void **)a1, __dst, 4);
    if (!result) {
      return result;
    }
  }
  *a2 = *(_DWORD *)v3;
  return 1;
}

BOOL sub_10004FD8C(uint64_t a1, void *a2)
{
  int v3 = *(char **)a1;
  if (((*(_DWORD *)(a1 + 8) - *(void *)a1) & 0xFFFFFFF8) != 0)
  {
    *(void *)a1 = v3 + 8;
  }
  else
  {
    int v3 = v5;
    BOOL result = sub_10004FA50((const void **)a1, v5, 8);
    if (!result) {
      return result;
    }
  }
  *a2 = *(void *)v3;
  return 1;
}

uint64_t sub_10004FE20(uint64_t a1, _DWORD *a2)
{
  *a2 = sub_10004FE4C(a1);
  return v2 & 1;
}

unint64_t sub_10004FE4C(uint64_t a1)
{
  int v3 = *(char **)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  if ((int)(v2 - *(void *)a1) <= 9 && (v2 <= (unint64_t)v3 || *(char *)(v2 - 1) < 0))
  {
    v32[0].__r_.__value_.__r.__words[0] = 0;
    sub_10005092C((char **)a1, v32);
    return v32[0].__r_.__value_.__r.__words[0];
  }
  if ((*v3 & 0x80000000) == 0)
  {
    sub_100051E5C((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 417);
    int v4 = sub_100051E74(v32, "CHECK failed: (buffer[0]) >= (128): ");
    sub_100051FB0((uint64_t)&v31, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v32);
  }
  uint64_t v5 = v3[1];
  if ((v3[1] & 0x80000000) == 0)
  {
    unint64_t result = *v3 + (v5 << 7) - 128;
    uint64_t v7 = 2;
LABEL_38:
    *(void *)a1 = &v3[v7];
    return result;
  }
  if ((v3[2] & 0x80000000) == 0)
  {
    unint64_t result = (v5 << 7) + ((unint64_t)v3[2] << 14) + *v3 - 16512;
    uint64_t v7 = 3;
    goto LABEL_38;
  }
  if ((v3[3] & 0x80000000) == 0)
  {
    uint64_t v8 = 0;
    unint64_t result = (unint64_t)v3[3] << 21;
    uint64_t v7 = 4;
    BOOL v9 = v3;
    do
    {
      unsigned int v10 = *v9++;
      result += (v10 - 128) << v8;
      v8 += 7;
    }
    while (v8 != 21);
    goto LABEL_38;
  }
  if ((v3[4] & 0x80000000) == 0)
  {
    uint64_t v11 = 0;
    unint64_t result = (unint64_t)v3[4] << 28;
    uint64_t v7 = 5;
    uint64_t v12 = v3;
    do
    {
      unsigned int v13 = *v12++;
      result += (v13 - 128) << v11;
      v11 += 7;
    }
    while (v11 != 28);
    goto LABEL_38;
  }
  if ((v3[5] & 0x80000000) == 0)
  {
    uint64_t v14 = 0;
    unint64_t result = (unint64_t)v3[5] << 35;
    uint64_t v7 = 6;
    int v15 = v3;
    do
    {
      unsigned int v16 = *v15++;
      result += (v16 - 128) << v14;
      v14 += 7;
    }
    while (v14 != 35);
    goto LABEL_38;
  }
  if ((v3[6] & 0x80000000) == 0)
  {
    uint64_t v17 = 0;
    unint64_t result = (unint64_t)v3[6] << 42;
    uint64_t v7 = 7;
    int v18 = v3;
    do
    {
      unsigned int v19 = *v18++;
      result += (v19 - 128) << v17;
      v17 += 7;
    }
    while (v17 != 42);
    goto LABEL_38;
  }
  if ((v3[7] & 0x80000000) == 0)
  {
    uint64_t v20 = 0;
    unint64_t result = (unint64_t)v3[7] << 49;
    uint64_t v7 = 8;
    char v21 = v3;
    do
    {
      unsigned int v22 = *v21++;
      result += (v22 - 128) << v20;
      v20 += 7;
    }
    while (v20 != 49);
    goto LABEL_38;
  }
  int v23 = v3[8];
  if ((v23 & 0x80000000) == 0)
  {
    uint64_t v24 = 0;
    unint64_t result = (unint64_t)v23 << 56;
    uint64_t v7 = 9;
    unint64_t v25 = v3;
    do
    {
      unsigned int v26 = *v25++;
      result += (v26 - 128) << v24;
      v24 += 7;
    }
    while (v24 != 56);
    goto LABEL_38;
  }
  int v27 = v3[9];
  if ((v27 & 0x80000000) == 0)
  {
    uint64_t v28 = 0;
    unint64_t result = (unint64_t)v27 << 63;
    uint64_t v7 = 10;
    uint64_t v29 = v3;
    do
    {
      unsigned int v30 = *v29++;
      result += (v30 - 128) << v28;
      v28 += 7;
    }
    while (v28 != 63);
    goto LABEL_38;
  }
  return 0;
}

void sub_1000500FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100050114(uint64_t *a1, int a2)
{
  uint64_t v5 = (unsigned __int8 *)*a1;
  unint64_t v4 = a1[1];
  if ((int)(v4 - *a1) <= 9 && (v4 <= (unint64_t)v5 || *(char *)(v4 - 1) < 0))
  {
    LODWORD(result) = sub_10004FE4C((uint64_t)a1);
    if (v14) {
      return result;
    }
    else {
      return -1;
    }
  }
  else
  {
    if (!a2)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 462);
      int v6 = sub_100051E74(v18, "CHECK failed: (first_byte_or_zero) != (0): ");
      uint64_t v7 = sub_100051E74(v6, "Caller should provide us with *buffer_ when buffer is non-empty");
      sub_100051FB0((uint64_t)&v17, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v18);
      uint64_t v5 = (unsigned __int8 *)*a1;
    }
    if (*v5 != a2)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 373);
      uint64_t v8 = sub_100051E74(v18, "CHECK failed: (*buffer) == (first_byte): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v8->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v18);
    }
    if ((a2 & 0x80) == 0)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 374);
      BOOL v9 = sub_100051E74(v18, "CHECK failed: (first_byte & 0x80) == (0x80): ");
      unsigned int v10 = sub_100052438(v9, a2);
      sub_100051FB0((uint64_t)&v17, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v18);
    }
    unsigned int v11 = a2 + (v5[1] << 7) - 128;
    if ((char)v5[1] < 0)
    {
      unsigned int v11 = v11 + (v5[2] << 14) - 0x4000;
      if ((char)v5[2] < 0)
      {
        unsigned int v11 = v11 + (v5[3] << 21) - 0x200000;
        if ((char)v5[3] < 0)
        {
          int v15 = (char)v5[4];
          unsigned int v11 = v11 + (v15 << 28) - 0x10000000;
          if (v15 < 0)
          {
            uint64_t v16 = 0;
            uint64_t result = -1;
            while ((char)v5[v16 + 5] < 0)
            {
              if (++v16 == 5) {
                return result;
              }
            }
            uint64_t v12 = (uint64_t)&v5[v16 + 6];
          }
          else
          {
            uint64_t v12 = (uint64_t)(v5 + 5);
          }
        }
        else
        {
          uint64_t v12 = (uint64_t)(v5 + 4);
        }
      }
      else
      {
        uint64_t v12 = (uint64_t)(v5 + 3);
      }
    }
    else
    {
      uint64_t v12 = (uint64_t)(v5 + 2);
    }
    *a1 = v12;
    return v11;
  }
}

void sub_100050300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_100050328(uint64_t a1)
{
  unint64_t result = sub_10004FE4C(a1);
  if ((result & 0xFFFFFFFF80000000) != 0 || (v2 & 1) == 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return result;
  }
}

unint64_t sub_100050350(unsigned __int8 **a1)
{
  int v3 = *a1;
  unint64_t v2 = (unint64_t)a1[1];
  if ((int)(v2 - *a1) <= 9 && (v2 <= (unint64_t)v3 || *(char *)(v2 - 1) < 0))
  {
    unint64_t result = sub_10004FE4C((uint64_t)a1);
    if ((result & 0xFFFFFFFF80000000) != 0 || (v8 & 1) == 0) {
      return 0xFFFFFFFFLL;
    }
    else {
      return result;
    }
  }
  else
  {
    if (((char)*v3 & 0x80000000) == 0)
    {
      sub_100051E5C((uint64_t)v34, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 417);
      unint64_t v4 = sub_100051E74(v34, "CHECK failed: (buffer[0]) >= (128): ");
      sub_100051FB0((uint64_t)&v33, (const char **)&v4->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v34);
    }
    uint64_t v5 = v3[1];
    if ((char)v3[1] < 0)
    {
      if ((char)v3[2] < 0)
      {
        if ((char)v3[3] < 0)
        {
          if ((char)v3[4] < 0)
          {
            if ((char)v3[5] < 0)
            {
              if ((char)v3[6] < 0)
              {
                if ((char)v3[7] < 0)
                {
                  int v25 = (char)v3[8];
                  if (v25 < 0)
                  {
                    int v29 = (char)v3[9];
                    if (v29 < 0) {
                      return 0xFFFFFFFFLL;
                    }
                    uint64_t v30 = 0;
                    unint64_t result = (unint64_t)v29 << 63;
                    uint64_t v7 = 10;
                    char v31 = v3;
                    do
                    {
                      unsigned int v32 = *v31++;
                      result += (v32 - 128) << v30;
                      v30 += 7;
                    }
                    while (v30 != 63);
                  }
                  else
                  {
                    uint64_t v26 = 0;
                    unint64_t result = (unint64_t)v25 << 56;
                    uint64_t v7 = 9;
                    int v27 = v3;
                    do
                    {
                      unsigned int v28 = *v27++;
                      result += (v28 - 128) << v26;
                      v26 += 7;
                    }
                    while (v26 != 56);
                  }
                }
                else
                {
                  uint64_t v22 = 0;
                  unint64_t result = (unint64_t)v3[7] << 49;
                  uint64_t v7 = 8;
                  int v23 = v3;
                  do
                  {
                    unsigned int v24 = *v23++;
                    result += (v24 - 128) << v22;
                    v22 += 7;
                  }
                  while (v22 != 49);
                }
              }
              else
              {
                uint64_t v19 = 0;
                unint64_t result = (unint64_t)v3[6] << 42;
                uint64_t v7 = 7;
                uint64_t v20 = v3;
                do
                {
                  unsigned int v21 = *v20++;
                  result += (v21 - 128) << v19;
                  v19 += 7;
                }
                while (v19 != 42);
              }
            }
            else
            {
              uint64_t v16 = 0;
              unint64_t result = (unint64_t)v3[5] << 35;
              uint64_t v7 = 6;
              char v17 = v3;
              do
              {
                unsigned int v18 = *v17++;
                result += (v18 - 128) << v16;
                v16 += 7;
              }
              while (v16 != 35);
            }
          }
          else
          {
            uint64_t v13 = 0;
            unint64_t result = (unint64_t)v3[4] << 28;
            uint64_t v7 = 5;
            char v14 = v3;
            do
            {
              unsigned int v15 = *v14++;
              result += (v15 - 128) << v13;
              v13 += 7;
            }
            while (v13 != 28);
          }
        }
        else
        {
          uint64_t v10 = 0;
          unint64_t result = (unint64_t)v3[3] << 21;
          uint64_t v7 = 4;
          unsigned int v11 = v3;
          do
          {
            unsigned int v12 = *v11++;
            result += (v12 - 128) << v10;
            v10 += 7;
          }
          while (v10 != 21);
        }
      }
      else
      {
        unint64_t result = (v5 << 7) + ((unint64_t)v3[2] << 14) + *v3 - 16512;
        uint64_t v7 = 3;
      }
    }
    else
    {
      unint64_t result = *v3 + (v5 << 7) - 128;
      uint64_t v7 = 2;
    }
    if (result >> 31) {
      return 0xFFFFFFFFLL;
    }
    *a1 = &v3[v7];
  }
  return result;
}

void sub_1000505FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_100050614(uint64_t a1)
{
  unint64_t v2 = *(char **)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)a1 != v3)
  {
LABEL_4:
    if ((unint64_t)v2 >= v3 || *v2 < 0)
    {
      unint64_t result = sub_10004FE4C(a1);
      if ((v5 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      unint64_t result = *v2;
      *(void *)a1 = v2 + 1;
    }
    return result;
  }
  if (sub_10004F844(a1))
  {
    unint64_t v2 = *(char **)a1;
    unint64_t v3 = *(void *)(a1 + 8);
    goto LABEL_4;
  }
  int v6 = *(_DWORD *)(a1 + 48);
  unint64_t result = 0;
  BOOL v7 = *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 44) < v6 || *(_DWORD *)(a1 + 40) == v6;
  *(unsigned char *)(a1 + 36) = v7;
  return result;
}

unint64_t sub_1000506B8(uint64_t *a1, int a2)
{
  unint64_t v4 = (unsigned __int8 *)a1[1];
  int v5 = v4 - *a1;
  if (v5 <= 9)
  {
    if (v5 < 1)
    {
      if (!v5)
      {
        int v14 = *((_DWORD *)a1 + 11);
        int v15 = *((_DWORD *)a1 + 6);
        if ((v14 > 0 || v15 == *((_DWORD *)a1 + 10)) && v15 - v14 < *((_DWORD *)a1 + 12))
        {
          unint64_t result = 0;
          *((unsigned char *)a1 + 36) = 1;
          return result;
        }
      }
    }
    else if (((char)*(v4 - 1) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    return sub_100050614((uint64_t)a1);
  }
LABEL_4:
  if (*(unsigned __int8 *)*a1 != a2)
  {
    sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 537);
    int v6 = sub_100051E74(v19, "CHECK failed: (first_byte_or_zero) == (buffer_[0]): ");
    sub_100051FB0((uint64_t)&v18, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v19);
  }
  BOOL v7 = (unsigned __int8 *)*a1;
  if (a2)
  {
    if (*v7 != a2)
    {
      sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 373);
      char v8 = sub_100051E74(v19, "CHECK failed: (*buffer) == (first_byte): ");
      sub_100051FB0((uint64_t)&v18, (const char **)&v8->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v19);
    }
    if ((a2 & 0x80) == 0)
    {
      sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 374);
      BOOL v9 = sub_100051E74(v19, "CHECK failed: (first_byte & 0x80) == (0x80): ");
      uint64_t v10 = sub_100052438(v9, a2);
      sub_100051FB0((uint64_t)&v18, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v19);
    }
    uint64_t v11 = a2 + (v7[1] << 7) - 128;
    if ((char)v7[1] < 0)
    {
      uint64_t v11 = v11 + (v7[2] << 14) - 0x4000;
      if ((char)v7[2] < 0)
      {
        uint64_t v11 = v11 + (v7[3] << 21) - 0x200000;
        if ((char)v7[3] < 0)
        {
          int v16 = (char)v7[4];
          uint64_t v11 = (v11 + (v16 << 28) - 0x10000000);
          if (v16 < 0)
          {
            uint64_t v17 = 0;
            while ((char)v7[v17 + 5] < 0)
            {
              unint64_t result = 0;
              if (++v17 == 5) {
                return result;
              }
            }
            uint64_t v12 = (uint64_t)&v7[v17 + 6];
          }
          else
          {
            uint64_t v12 = (uint64_t)(v7 + 5);
          }
        }
        else
        {
          uint64_t v12 = (uint64_t)(v7 + 4);
        }
      }
      else
      {
        uint64_t v12 = (uint64_t)(v7 + 3);
      }
    }
    else
    {
      uint64_t v12 = (uint64_t)(v7 + 2);
    }
    *a1 = v12;
    return v11;
  }
  else
  {
    unint64_t result = 0;
    *a1 = (uint64_t)(v7 + 1);
  }
  return result;
}

void sub_100050904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10005092C(char **a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  while (1)
  {
    BOOL v6 = v4 != 10;
    if (v4 == 10) {
      break;
    }
    while (1)
    {
      BOOL v7 = *a1;
      if (*a1 != a1[1]) {
        break;
      }
      if ((sub_10004F844((uint64_t)a1) & 1) == 0)
      {
        uint64_t v5 = 0;
        BOOL v6 = 0;
        goto LABEL_7;
      }
    }
    char v8 = *v7;
    v5 |= (unint64_t)(*v7 & 0x7F) << (7 * v4);
    *a1 = v7 + 1;
    ++v4;
    if ((v8 & 0x80) == 0) {
      goto LABEL_7;
    }
  }
  uint64_t v5 = 0;
LABEL_7:
  *a2 = v5;
  return v6;
}

uint64_t sub_1000509D0(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 48))(*(void *)(a1 + 48));
  }
  else {
    uint64_t result = 0;
  }
  *(unsigned char *)(a1 + 57) = result;
  return result;
}

uint64_t sub_100050A28(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)a1 - a2 + 16 * (*(void *)(a1 + 8) == 0);
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48)) - v2;
}

int64_t sub_100050A88(uint64_t a1, char *a2)
{
  while (1)
  {
    uint64_t v5 = *(char **)a1;
    uint64_t v4 = *(void **)(a1 + 8);
    if (!v4)
    {
      int64_t v10 = v5 - a2;
      int64_t v9 = v10 + 16;
      *(void *)(a1 + 8) = a2;
      if (((v10 + 16) & 0x80000000) == 0) {
        return v9;
      }
      goto LABEL_12;
    }
    int v6 = a2 - v5;
    if (a2 <= v5) {
      break;
    }
    if (*(unsigned char *)(a1 + 56))
    {
      sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 685);
      BOOL v7 = sub_100051E74(v15, "CHECK failed: !had_error_: ");
      sub_100051FB0((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v15);
    }
    if (v6 >= 17)
    {
      sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 686);
      char v8 = sub_100051E74(v15, "CHECK failed: overrun <= kSlopBytes: ");
      sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v15);
    }
    a2 = &sub_100050C20((char **)a1)[v6];
    if (*(unsigned char *)(a1 + 56)) {
      return 0;
    }
  }
  memcpy(v4, (const void *)(a1 + 16), (size_t)&a2[-a1 - 16]);
  uint64_t v11 = *(char **)a1;
  *(void *)(a1 + 8) += &a2[-a1 - 16];
  int64_t v9 = v11 - a2;
  if (((v11 - a2) & 0x80000000) == 0) {
    return v9;
  }
LABEL_12:
  sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 700);
  uint64_t v12 = sub_100051E74(v15, "CHECK failed: s >= 0: ");
  sub_100051FB0((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
  sub_100051FB8((uint64_t)v15);
  return v9;
}

void sub_100050BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_100050C20(char **a1)
{
  if (*((unsigned char *)a1 + 56))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 788);
    int v2 = sub_100051E74(v13, "CHECK failed: !had_error_: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (a1[6])
  {
    unint64_t v3 = (char *)(a1 + 2);
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    if (v4)
    {
      memcpy(v4, a1 + 2, v5 - v3);
      int v12 = 0;
      do
      {
        v13[0].__r_.__value_.__r.__words[0] = 0;
        if (((*(uint64_t (**)(char *, std::string *, int *))(*(void *)a1[6] + 16))(a1[6], v13, &v12) & 1) == 0)
        {
          *((unsigned char *)a1 + 56) = 1;
          goto LABEL_14;
        }
        uint64_t v6 = v12;
      }
      while (!v12);
      uint64_t v5 = (char *)v13[0].__r_.__value_.__r.__words[0];
      if (v12 >= 17)
      {
        *(_OWORD *)v13[0].__r_.__value_.__l.__data_ = *(_OWORD *)*a1;
        *a1 = &v5[v6 - 16];
        a1[1] = 0;
        return v5;
      }
      if (v12 <= 0)
      {
        std::string::size_type v10 = v13[0].__r_.__value_.__r.__words[0];
        sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 810);
        int64_t v9 = sub_100051E74(v13, "CHECK failed: size > 0: ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v13);
        LODWORD(v6) = v12;
        uint64_t v5 = (char *)v10;
      }
      *(_OWORD *)unint64_t v3 = *(_OWORD *)*a1;
      BOOL v7 = &v3[(int)v6];
    }
    else
    {
      *(_OWORD *)unint64_t v3 = *(_OWORD *)v5;
      BOOL v7 = (char *)(a1 + 4);
    }
    *a1 = v7;
    a1[1] = v5;
  }
  else
  {
    *((unsigned char *)a1 + 56) = 1;
    unint64_t v3 = (char *)(a1 + 2);
LABEL_14:
    *a1 = (char *)(a1 + 4);
  }
  return v3;
}

void sub_100050DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_100050DD8(uint64_t a1, char *a2)
{
  if (!*(unsigned char *)(a1 + 56))
  {
    int64_t v3 = sub_100050A88(a1, a2);
    if (v3) {
      (*(void (**)(void, int64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v3);
    }
    a2 = (char *)(a1 + 16);
    *(void *)a1 = a1 + 16;
    *(void *)(a1 + 8) = a1 + 16;
  }
  return a2;
}

uint64_t sub_100050E40(uint64_t a1, char *a2)
{
  if (*(unsigned char *)(a1 + 56)) {
    return a1 + 16;
  }
  int v3 = sub_100050A88(a1, a2);
  if (*(unsigned char *)(a1 + 56)) {
    return a1 + 16;
  }
  uint64_t v5 = *(void *)(a1 + 8) + v3 - 16;
  if (v3 > 16)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = a1 + 16 + v3;
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (v3 <= 16) {
    uint64_t result = a1 + 16;
  }
  else {
    uint64_t result = *(void *)(a1 + 8);
  }
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  return result;
}

BOOL sub_100050EA8(uint64_t a1, int a2, char **a3)
{
  if (a2 < 0) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 56) || (int v5 = a2, v13 = sub_100050A88(a1, *a3), *(unsigned char *)(a1 + 56)))
  {
    BOOL v6 = 0;
    BOOL v7 = (char *)(a1 + 16);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 8);
    while (1)
    {
      BOOL v6 = v5 <= v13;
      if (v5 <= v13) {
        break;
      }
      v5 -= v13;
      if (((*(uint64_t (**)(void, uint64_t *, int *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), &v12, &v13) & 1) == 0)
      {
        *(unsigned char *)(a1 + 56) = 1;
        BOOL v7 = (char *)(a1 + 16);
        *(void *)a1 = a1 + 32;
        goto LABEL_5;
      }
    }
    uint64_t v9 = v13 - (uint64_t)v5;
    uint64_t v10 = v12 + v5 + v9 - 16;
    if ((int)v9 > 16)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v10 = a1 + 16 + v9;
      uint64_t v11 = v12 + v5;
    }
    if ((int)v9 <= 16) {
      BOOL v7 = (char *)(a1 + 16);
    }
    else {
      BOOL v7 = (char *)(v12 + v5);
    }
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v11;
  }
LABEL_5:
  *a3 = v7;
  return v6;
}

uint64_t sub_100050FB8(uint64_t a1, char **a2, _DWORD *a3, char **a4)
{
  if (*(unsigned char *)(a1 + 56) || (*a3 = sub_100050A88(a1, *a4), *(unsigned char *)(a1 + 56)))
  {
    uint64_t result = 0;
    uint64_t v9 = (char *)(a1 + 16);
  }
  else
  {
    *a2 = *(char **)(a1 + 8);
    while (1)
    {
      uint64_t v10 = *a3;
      if (v10) {
        break;
      }
      if (((*(uint64_t (**)(void, char **, _DWORD *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a2, a3) & 1) == 0)
      {
        uint64_t result = 0;
        *(unsigned char *)(a1 + 56) = 1;
        uint64_t v9 = (char *)(a1 + 16);
        *(void *)a1 = a1 + 32;
        goto LABEL_4;
      }
    }
    uint64_t v11 = (uint64_t)&(*a2)[v10 - 16];
    if ((int)v10 > 16)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v11 = a1 + 16 + (int)v10;
      uint64_t v12 = *a2;
    }
    if ((int)v10 <= 16) {
      uint64_t v9 = (char *)(a1 + 16);
    }
    else {
      uint64_t v9 = *a2;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    uint64_t result = 1;
  }
LABEL_4:
  *a4 = v9;
  return result;
}

uint64_t sub_1000510A8(uint64_t a1, int a2, char **a3)
{
  if (*(unsigned char *)(a1 + 56) || (int v6 = sub_100050A88(a1, *a3), *(unsigned char *)(a1 + 56)))
  {
    uint64_t result = 0;
    char v8 = (char *)(a1 + 16);
  }
  else
  {
    int v9 = v6;
    uint64_t result = *(void *)(a1 + 8);
    if (v9 >= a2)
    {
      uint64_t v12 = v9 - (uint64_t)a2;
      uint64_t v13 = result + a2 + v12 - 16;
      if ((int)v12 > 16)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v13 = a1 + 16 + v12;
        uint64_t v14 = result + a2;
      }
      if ((int)v12 <= 16) {
        char v8 = (char *)(a1 + 16);
      }
      else {
        char v8 = (char *)(result + a2);
      }
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v14;
    }
    else
    {
      uint64_t v10 = result + v9 - 16;
      if (v9 > 16)
      {
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v10 = a1 + 16 + v9;
        uint64_t v11 = *(void *)(a1 + 8);
      }
      if (v9 <= 16) {
        char v8 = (char *)(a1 + 16);
      }
      else {
        char v8 = *(char **)(a1 + 8);
      }
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v11;
      uint64_t result = 0;
    }
  }
  *a3 = v8;
  return result;
}

char *sub_100051170(uint64_t a1, char *a2)
{
  while (!*(unsigned char *)(a1 + 56))
  {
    int v3 = &a2[-*(void *)a1];
    if ((v3 & 0x80000000) != 0)
    {
      sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 829);
      int v5 = sub_100051E74(v8, "CHECK failed: overrun >= 0: ");
      sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      goto LABEL_6;
    }
    if (v3 > 0x10)
    {
      sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 830);
      uint64_t v4 = sub_100051E74(v8, "CHECK failed: overrun <= kSlopBytes: ");
      sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
LABEL_6:
      sub_100051FB8((uint64_t)v8);
    }
    a2 = &sub_100050C20((char **)a1)[(int)v3];
    if ((unint64_t)a2 < *(void *)a1) {
      return a2;
    }
  }
  return (char *)(a1 + 16);
}

void sub_100051264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_100051284(uint64_t *a1, char *a2, int a3, unint64_t a4)
{
  uint64_t v4 = (char *)a4;
  for (int i = sub_100051328(a1, a4); a3 > i; int i = sub_100051328(a1, (unint64_t)v4))
  {
    memcpy(v4, a2, i);
    a3 -= i;
    a2 += i;
    uint64_t v4 = sub_100051170((uint64_t)a1, &v4[i]);
  }
  memcpy(v4, a2, a3);
  return &v4[a3];
}

uint64_t sub_100051328(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 + 16 < a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 838);
    int v5 = sub_100051E74(v8, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
    uint64_t v3 = *a1;
  }
  return v3 - a2 + 16;
}

void sub_1000513AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1000513C4(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  if (sub_100051328((uint64_t *)a1, (unint64_t)a4) <= (int)a3)
  {
    char v8 = sub_100050DD8(a1, a4);
    if (((*(uint64_t (**)(void, void *, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), a2, a3) & 1) == 0)
    {
      *(unsigned char *)(a1 + 56) = 1;
      char v8 = (char *)(a1 + 16);
      *(void *)a1 = a1 + 32;
    }
    return v8;
  }
  if (*(void *)a1 - (void)a4 >= (int)a3)
  {
    memcpy(a4, a2, (int)a3);
    return &a4[(int)a3];
  }
  return sub_100051284((uint64_t *)a1, (char *)a2, a3, (unint64_t)a4);
}

char *sub_1000514CC(unint64_t *a1, int a2, void **a3, char *a4)
{
  uint64_t v4 = a4;
  unint64_t v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    uint64_t v4 = sub_100051170((uint64_t)a1, a4);
    unint64_t v8 = *a1;
  }
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v9 = *((unsigned int *)a3 + 2);
  }
  if (v8 <= (unint64_t)v4)
  {
    sub_100051E5C((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    uint64_t v10 = sub_100051E74(v23, "CHECK failed: ptr < end_: ");
    sub_100051FB0((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v23);
  }
  unsigned int v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *uint64_t v4 = (8 * a2) | 0x82;
    unsigned int v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      uint64_t v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        unsigned int v14 = v13 >> 7;
        ++v12;
        unsigned int v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      uint64_t v12 = v4 + 2;
    }
  }
  else
  {
    *uint64_t v4 = v11;
    uint64_t v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    unsigned int v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      unsigned int v16 = v20 >> 7;
      unsigned int v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *uint64_t v12 = v16;
  uint64_t v17 = v12 + 1;
  if (*((char *)a3 + 23) >= 0) {
    char v18 = a3;
  }
  else {
    char v18 = *a3;
  }
  return sub_100051654((uint64_t)a1, v18, v9, v17);
}

void sub_10005163C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_100051654(uint64_t a1, void *a2, uint64_t a3, char *__dst)
{
  if (*(unsigned char *)(a1 + 57))
  {
    return sub_1000513C4(a1, a2, a3, __dst);
  }
  else if (*(void *)a1 - (void)__dst < (int)a3)
  {
    return sub_100051284((uint64_t *)a1, (char *)a2, a3, (unint64_t)__dst);
  }
  else
  {
    uint64_t v6 = (int)a3;
    memcpy(__dst, a2, (int)a3);
    return &__dst[v6];
  }
}

char *sub_1000516E0(uint64_t *a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  unint64_t v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    uint64_t v4 = sub_100051170((uint64_t)a1, a4);
    unint64_t v8 = *a1;
  }
  if (*(char *)(a3 + 23) >= 0) {
    LODWORD(v9) = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  if (v8 <= (unint64_t)v4)
  {
    sub_100051E5C((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    uint64_t v10 = sub_100051E74(v23, "CHECK failed: ptr < end_: ");
    sub_100051FB0((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v23);
  }
  unsigned int v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *uint64_t v4 = (8 * a2) | 0x82;
    unsigned int v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      uint64_t v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        unsigned int v14 = v13 >> 7;
        ++v12;
        unsigned int v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      uint64_t v12 = v4 + 2;
    }
  }
  else
  {
    *uint64_t v4 = v11;
    uint64_t v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    unsigned int v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      unsigned int v16 = v20 >> 7;
      unsigned int v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *uint64_t v12 = v16;
  uint64_t v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0) {
    char v18 = (char *)a3;
  }
  else {
    char v18 = *(char **)a3;
  }
  if (*a1 - (uint64_t)v17 < (int)v9) {
    return sub_100051284(a1, v18, v9, (unint64_t)v17);
  }
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_100051878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100051890(uint64_t a1, uint64_t a2, int a3)
{
  char v6 = byte_1000B6B80 & 1;
  uint64_t v7 = a1 + 16;
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 48) = a2;
  *(_WORD *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 58) = v6;
  *(void *)(a1 + 64) = a1 + 16;
  *(void *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  if (a3)
  {
    uint64_t v14 = 0;
    int v13 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t *, int *))(*(void *)a2 + 16))(a2, &v14, &v13) && v13 != 0)
    {
      uint64_t v9 = v14;
      if (v13 <= 16) {
        uint64_t v10 = v7 + v13;
      }
      else {
        uint64_t v10 = v14 + v13 - 16;
      }
      if (v13 <= 16) {
        uint64_t v11 = v14;
      }
      else {
        uint64_t v11 = 0;
      }
      if (v13 <= 16) {
        uint64_t v9 = v7;
      }
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v11;
      *(void *)(a1 + 64) = v9;
    }
  }
  return a1;
}

uint64_t sub_100051994(uint64_t a1)
{
  *(void *)(a1 + 64) = sub_100050DD8(a1, *(char **)(a1 + 64));
  return a1;
}

char *sub_1000519CC(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = (const void **)a1;
  int v4 = *(char *)(a1 + 23);
  if (v4 < 0 && *(_DWORD *)(a1 + 12))
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 949);
    int v5 = sub_100051E74(v15, "CHECK failed: (str.size()) <= (kuint32max): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
    LOBYTE(v4) = *((unsigned char *)v3 + 23);
  }
  if ((v4 & 0x80u) == 0) {
    unsigned int v6 = v4;
  }
  else {
    unsigned int v6 = *((_DWORD *)v3 + 2);
  }
  if (v6 > 0x7F)
  {
    *a2 = v6 | 0x80;
    unsigned int v8 = v6 >> 7;
    if (v6 >> 14)
    {
      uint64_t v7 = a2 + 2;
      do
      {
        *(v7 - 1) = v8 | 0x80;
        unsigned int v9 = v8 >> 7;
        ++v7;
        unsigned int v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
      *(v7 - 1) = v9;
    }
    else
    {
      a2[1] = v8;
      uint64_t v7 = a2 + 2;
    }
  }
  else
  {
    *a2 = v6;
    uint64_t v7 = a2 + 1;
  }
  int v11 = *((char *)v3 + 23);
  if (v11 >= 0) {
    uint64_t v12 = v3;
  }
  else {
    uint64_t v12 = *v3;
  }
  if (v11 >= 0) {
    LODWORD(v3) = *((unsigned __int8 *)v3 + 23);
  }
  else {
    uint64_t v3 = (const void **)v3[1];
  }
  memcpy(v7, v12, (int)v3);
  return &v7[(int)v3];
}

void sub_100051AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100051AF0(int a1, int a2, const std::string::value_type *a3)
{
  if (a2 > 3014000)
  {
    LODWORD(v2sub_10002F6CC(&a9, 0) = 3;
    unsigned int v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    int v22 = 76;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program requires version ");
    sub_100051EE4(a2, &v17);
    if ((v19 & 0x80u) == 0) {
      unsigned int v6 = (const std::string::value_type *)&v17;
    }
    else {
      unsigned int v6 = (const std::string::value_type *)v17;
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v7 = v19;
    }
    else {
      std::string::size_type v7 = v18;
    }
    std::string::append(&v23, v6, v7);
    std::string::append(&v23, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    char v25 = 0;
    sub_10000A1B4(&__p, __str);
    if ((v16 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v9 = v16;
    }
    else {
      std::string::size_type v9 = v15;
    }
    std::string::append(&v23, p_p, v9);
    std::string::append(&v23, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_1000527B8(&v20);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
    if ((char)v19 < 0) {
      operator delete(v17);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  if (a1 < 3014000)
  {
    LODWORD(v2sub_10002F6CC(&a9, 0) = 3;
    unsigned int v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    int v22 = 87;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program was compiled against version ");
    sub_100051EE4(a1, &v17);
    if ((v19 & 0x80u) == 0) {
      unsigned int v10 = (const std::string::value_type *)&v17;
    }
    else {
      unsigned int v10 = (const std::string::value_type *)v17;
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v11 = v19;
    }
    else {
      std::string::size_type v11 = v18;
    }
    std::string::append(&v23, v10, v11);
    std::string::append(&v23, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    char v25 = 0;
    sub_10000A1B4(&__p, __str);
    if ((v16 & 0x80u) == 0) {
      uint64_t v12 = (const std::string::value_type *)&__p;
    }
    else {
      uint64_t v12 = (const std::string::value_type *)__p;
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v13 = v16;
    }
    else {
      std::string::size_type v13 = v15;
    }
    std::string::append(&v23, v12, v13);
    std::string::append(&v23, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_1000527B8(&v20);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
    if ((char)v19 < 0) {
      operator delete(v17);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
}

void sub_100051DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100051E5C(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 4sub_10002F6CC(&a9, 0) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

std::string *sub_100051E74(std::string *a1, const std::string::value_type *a2)
{
  return a1;
}

std::string *sub_100051EA0(std::string *a1, const std::string::value_type *a2)
{
  uint64_t v3 = a1 + 1;
  std::string::size_type v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    std::string::size_type v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    std::string::size_type v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

void *sub_100051EE4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  snprintf(__str, 0x80uLL, "%d.%d.%d", a1 / 1000000, a1 / 1000 % 1000, a1 % 1000);
  char __str[127] = 0;
  return sub_10000A1B4(a2, __str);
}

const char **sub_100051FB0(uint64_t a1, const char **a2)
{
  return sub_1000527B8(a2);
}

uint64_t sub_100051FB8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t sub_100051FEC(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  if ((result & 0x80000000) == 0)
  {
    if (*(char *)(a4 + 23) >= 0) {
      std::string::size_type v4 = (const char *)a4;
    }
    else {
      std::string::size_type v4 = *(const char **)a4;
    }
    fprintf(__stderrp, "[libprotobuf %s %s:%d] %s\n", off_1000AE0E8[result], a2, a3, v4);
    std::string::size_type v5 = __stderrp;
    return fflush(v5);
  }
  return result;
}

std::string *sub_100052070(std::string *a1, uint64_t a2)
{
  sub_1000520F8(a2, __p);
  if ((v7 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    std::string::size_type v4 = v7;
  }
  else {
    std::string::size_type v4 = (std::string::size_type)__p[1];
  }
  std::string::append(a1 + 1, (const std::string::value_type *)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000520DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000520F8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)a1) {
    return sub_10001DEEC(a2, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    return sub_10000A1B4(a2, "");
  }
}

std::string *sub_10005211C(std::string *a1, uint64_t a2)
{
  sub_10007FD90(a2, __p);
  if ((v7 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    std::string::size_type v4 = v7;
  }
  else {
    std::string::size_type v4 = (std::string::size_type)__p[1];
  }
  std::string::append(a1 + 1, (const std::string::value_type *)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_100052188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1000521A4(std::string *a1, long long *a2)
{
  sub_10001752C((uint64_t)v9);
  sub_10006CC40(v9, a2);
  std::stringbuf::str();
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v4 = __p;
  }
  else {
    std::string::size_type v4 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v5 = v8;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1 + 1, (const std::string::value_type *)v4, v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void sub_100052318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10002E61C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

std::string *sub_100052348(std::string *a1, std::string::value_type a2)
{
  __s[0] = a2;
  __s[1] = 0;
  __s[127] = 0;
  std::string::append(a1 + 1, __s);
  return a1;
}

std::string *sub_1000523B8(std::string *a1, int a2)
{
  snprintf(__str, 0x80uLL, "%d", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_100052438(std::string *a1, int a2)
{
  snprintf(__str, 0x80uLL, "%u", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_1000524B8(std::string *a1, uint64_t a2)
{
  snprintf(__str, 0x80uLL, "%ld", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_100052538(std::string *a1, uint64_t a2)
{
  snprintf(__str, 0x80uLL, "%lu", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_1000525B8(std::string *a1, double a2)
{
  snprintf(__str, 0x80uLL, "%g", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_100052638(std::string *a1, const void *a2)
{
  snprintf(__str, 0x80uLL, "%p", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_1000526B8(std::string *a1, uint64_t a2)
{
  snprintf(__str, 0x80uLL, "%lld", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_100052738(std::string *a1, uint64_t a2)
{
  snprintf(__str, 0x80uLL, "%llu", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

const char **sub_1000527B8(const char **result)
{
  int v1 = result;
  if (*(_DWORD *)result == 3)
  {
    uint64_t v2 = 3;
  }
  else
  {
    int v3 = atomic_load((unsigned int *)dword_1000B6720);
    if (v3 > 0) {
      goto LABEL_6;
    }
    uint64_t v2 = *(unsigned int *)result;
  }
  uint64_t result = (const char **)off_1000B5AF0(v2, v1[1], *((_DWORD *)v1 + 4), (uint64_t)(v1 + 3));
LABEL_6:
  if (*(_DWORD *)v1 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    sub_100052878(exception, v1[1], *((unsigned int *)v1 + 4), v1 + 3);
  }
  return result;
}

void sub_100052864(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t (*sub_100052880(uint64_t (*a1)()))()
{
  int v1 = off_1000B5AF0;
  if (a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = nullsub_4;
  }
  off_1000B5AF0 = v2;
  if (v1 == nullsub_4) {
    return 0;
  }
  else {
    return v1;
  }
}

void sub_1000528AC()
{
}

void sub_1000528C0()
{
}

void sub_1000528E0()
{
}

uint64_t sub_1000528F4(unsigned int a1)
{
  return bswap32(a1);
}

void sub_1000528FC(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1000AE130;
  if (SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  std::exception::~exception(this);
}

void sub_10005295C(std::exception *a1)
{
  sub_1000528FC(a1);
  operator delete();
}

uint64_t sub_100052994(uint64_t a1)
{
  uint64_t result = a1 + 24;
  if (*(char *)(a1 + 47) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t sub_1000529B0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(void))(a1 + 8))();
  if (a1 && v2)
  {
    std::string::size_type v4 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);
    return v4(a1);
  }
  return result;
}

uint64_t sub_100052A24(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  *(void *)a1 = &off_1000AE130;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v5 = a1 + 24;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1000302DC((unsigned char *)v5, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v6 = *a4;
    *(void *)(v5 + 16) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return a1;
}

void sub_100052A90(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100052AAC(uint64_t a1, int a2, _OWORD *a3)
{
  if (qword_1000B6748)
  {
    int8x8_t v3 = *(int8x8_t *)(qword_1000B6748 + 8);
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 8);
      unint64_t v5 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
      unint64_t v6 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v5 >> 47) ^ v5);
      unint64_t v7 = (0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47))) ^ a2;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v3);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        unint64_t v9 = v7;
        if (v7 >= *(void *)&v3) {
          unint64_t v9 = v7 % *(void *)&v3;
        }
      }
      else
      {
        unint64_t v9 = (*(void *)&v3 - 1) & v7;
      }
      char v10 = *(uint64_t ***)(*(void *)qword_1000B6748 + 8 * v9);
      if (v10)
      {
        for (int i = *v10; i; int i = (uint64_t *)*i)
        {
          unint64_t v12 = i[1];
          if (v7 == v12)
          {
            if (i[2] == v4 && *((_DWORD *)i + 6) == a2)
            {
              long long v14 = *((_OWORD *)i + 3);
              *a3 = *((_OWORD *)i + 2);
              a3[1] = v14;
              return 1;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= *(void *)&v3) {
                v12 %= *(void *)&v3;
              }
            }
            else
            {
              v12 &= *(void *)&v3 - 1;
            }
            if (v12 != v9) {
              return 0;
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_100052BC0(unint64_t a1, int a2, int a3, char a4, char a5)
{
  char v7 = a3;
  switch(a3)
  {
    case 14:
      sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 140);
      char v10 = sub_100051E74(v16, "CHECK failed: (type) != (WireFormatLite::TYPE_ENUM): ");
      sub_100051FB0((uint64_t)&v15, (const char **)&v10->__r_.__value_.__l.__data_);
LABEL_7:
      sub_100051FB8((uint64_t)v16);
      break;
    case 11:
      sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 141);
      std::string::size_type v11 = sub_100051E74(v16, "CHECK failed: (type) != (WireFormatLite::TYPE_MESSAGE): ");
      sub_100051FB0((uint64_t)&v15, (const char **)&v11->__r_.__value_.__l.__data_);
      goto LABEL_7;
    case 10:
      sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 142);
      unint64_t v12 = sub_100051E74(v16, "CHECK failed: (type) != (WireFormatLite::TYPE_GROUP): ");
      sub_100051FB0((uint64_t)&v15, (const char **)&v12->__r_.__value_.__l.__data_);
      goto LABEL_7;
  }
  LOBYTE(v13) = v7;
  BYTE1(v13) = a4;
  BYTE2(v13) = a5;
  uint64_t v14 = 0;
  sub_100052D14(a1, a2, &v13);
}

void sub_100052CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100052D14(unint64_t a1, int a2, _OWORD *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000B6758, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000B6758))
  {
    operator new();
  }
  uint64_t v7 = qword_1000B6750;
  qword_1000B6748 = qword_1000B6750;
  unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = (0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47))) ^ a2;
  unint64_t v11 = *(void *)(qword_1000B6750 + 8);
  if (!v11) {
    goto LABEL_23;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v3 = (0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47))) ^ a2;
    if (v10 >= v11) {
      unint64_t v3 = v10 % v11;
    }
  }
  else
  {
    unint64_t v3 = (v11 - 1) & v10;
  }
  long long v13 = *(uint64_t ***)(*(void *)qword_1000B6750 + 8 * v3);
  if (!v13 || (uint64_t v14 = *v13) == 0)
  {
LABEL_23:
    uint64_t v17 = operator new(0x40uLL);
    *uint64_t v17 = 0;
    v17[1] = v10;
    void v17[2] = a1;
    *((_DWORD *)v17 + 6) = a2;
    *((_DWORD *)v17 + 7) = 0;
    long long v18 = a3[1];
    *((_OWORD *)v17 + 2) = *a3;
    *((_OWORD *)v17 + 3) = v18;
    float v19 = (float)(unint64_t)(*(void *)(v7 + 24) + 1);
    float v20 = *(float *)(v7 + 32);
    if (v11 && (float)(v20 * (float)v11) >= v19)
    {
LABEL_69:
      unint64_t v36 = *(void **)v7;
      float v37 = *(void **)(*(void *)v7 + 8 * v3);
      if (v37)
      {
        *uint64_t v17 = *v37;
      }
      else
      {
        *uint64_t v17 = *(void *)(v7 + 16);
        *(void *)(v7 + 16) = v17;
        v36[v3] = v7 + 16;
        if (!*v17)
        {
LABEL_78:
          ++*(void *)(v7 + 24);
          return;
        }
        unint64_t v38 = *(void *)(*v17 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v38 >= v11) {
            v38 %= v11;
          }
        }
        else
        {
          v38 &= v11 - 1;
        }
        float v37 = (void *)(*(void *)v7 + 8 * v38);
      }
      *float v37 = v17;
      goto LABEL_78;
    }
    BOOL v21 = (v11 & (v11 - 1)) == 0;
    if (v11 < 3) {
      BOOL v21 = 0;
    }
    unint64_t v22 = (2 * v11) | !v21;
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v11 = *(void *)(v7 + 8);
    }
    if (*(void *)&prime > v11) {
      goto LABEL_35;
    }
    if (*(void *)&prime < v11)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 24) / *(float *)(v7 + 32));
      if (v11 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v11)
      {
        unint64_t v11 = *(void *)(v7 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_35:
          if (*(void *)&prime >> 61) {
            sub_100004110();
          }
          char v25 = operator new(8 * *(void *)&prime);
          uint64_t v26 = *(void **)v7;
          *(void *)uint64_t v7 = v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          *(int8x8_t *)(v7 + 8) = prime;
          do
            *(void *)(*(void *)v7 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          unsigned int v28 = *(void **)(v7 + 16);
          if (v28)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)v7 + 8 * v29) = v7 + 16;
            unint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*(void *)v7 + 8 * v35))
                  {
                    *(void *)(*(void *)v7 + 8 * v35) = v28;
                    goto LABEL_60;
                  }
                  void *v28 = *v34;
                  *unint64_t v34 = **(void **)(*(void *)v7 + 8 * v35);
                  **(void **)(*(void *)v7 + 8 * v35) = v34;
                  unint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_60:
                unsigned int v28 = v34;
                unint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v11 = (unint64_t)prime;
          goto LABEL_64;
        }
        unsigned int v44 = *(void **)v7;
        *(void *)uint64_t v7 = 0;
        if (v44) {
          operator delete(v44);
        }
        unint64_t v11 = 0;
        *(void *)(v7 + 8) = 0;
      }
    }
LABEL_64:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
    goto LABEL_69;
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v15 == v10) {
      break;
    }
    if (v12.u32[0] > 1uLL)
    {
      if (v15 >= v11) {
        v15 %= v11;
      }
    }
    else
    {
      v15 &= v11 - 1;
    }
    if (v15 != v3) {
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v14 = (uint64_t *)*v14;
    if (!v14) {
      goto LABEL_23;
    }
  }
  if (v14[2] != a1 || *((_DWORD *)v14 + 6) != a2) {
    goto LABEL_22;
  }
  sub_100051E5C((uint64_t)v48, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 108);
  uint64_t v39 = sub_100051E74(v48, "Multiple extension registrations for type \"");
  (*(void (**)(void **__return_ptr, unint64_t))(*(void *)a1 + 16))(__p, a1);
  int v40 = sub_100051EA0(v39, (const std::string::value_type *)__p);
  uint64_t v41 = sub_100051E74(v40, "\", field number ");
  uint64_t v42 = sub_1000523B8(v41, a2);
  uint64_t v43 = sub_100051E74(v42, ".");
  sub_100051FB0((uint64_t)&v45, (const char **)&v43->__r_.__value_.__l.__data_);
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  sub_100051FB8((uint64_t)v48);
}

void sub_10005327C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_1000532D4(unint64_t a1, int a2, int a3, char a4, char a5, uint64_t a6)
{
  char v9 = a3;
  if (a3 != 14)
  {
    sub_100051E5C((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 164);
    uint8x8_t v12 = sub_100051E74(v17, "CHECK failed: (type) == (WireFormatLite::TYPE_ENUM): ");
    sub_100051FB0((uint64_t)&v16, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v17);
  }
  LOBYTE(v13) = v9;
  BYTE1(v13) = a4;
  BYTE2(v13) = a5;
  *((void *)&v13 + 1) = sub_1000533AC;
  uint64_t v14 = a6;
  uint64_t v15 = 0;
  sub_100052D14(a1, a2, &v13);
}

void sub_100053394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000533AC(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

void sub_1000533B8(unint64_t a1, int a2, char a3, char a4, char a5, uint64_t a6)
{
  if ((a3 & 0xFE) != 0xA)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 177);
    uint8x8_t v12 = sub_100051E74(v16, "CHECK failed: type == WireFormatLite::TYPE_MESSAGE || type == WireFormatLite::TYPE_GROUP: ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v16);
  }
  LOBYTE(v13) = a3;
  BYTE1(v13) = a4;
  BYTE2(v13) = a5;
  *((void *)&v13 + 1) = a6;
  uint64_t v14 = 0;
  sub_100052D14(a1, a2, &v13);
}

void sub_100053470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100053488(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_100053498(uint64_t a1)
{
  if (!*(void *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      sub_100064594(*(unsigned __int8 **)v2, (unsigned __int8 *)(v2 + 8));
    }
    else if (*(_WORD *)(a1 + 10))
    {
      uint64_t v3 = 32 * *(unsigned __int16 *)(a1 + 10);
      unint64_t v4 = (unsigned __int8 *)(v2 + 8);
      do
      {
        sub_100063B48(v4);
        v4 += 32;
        v3 -= 32;
      }
      while (v3);
    }
    uint64_t v5 = *(void *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      if (v5)
      {
        sub_100018A60(v5, *(void **)(v5 + 8));
        operator delete();
      }
    }
    else if (v5)
    {
      operator delete[]();
    }
  }
  return a1;
}

uint64_t sub_100053568(uint64_t result)
{
  if (result) {
    operator delete[]();
  }
  return result;
}

uint64_t sub_100053588(uint64_t a1, int a2)
{
  uint64_t result = sub_100053620(a1, a2);
  if (result)
  {
    uint64_t v3 = result;
    if (*(unsigned char *)(result + 9))
    {
      sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 231);
      unint64_t v4 = sub_100051E74(v6, "CHECK failed: !ext->is_repeated: ");
      sub_100051FB0((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v6);
    }
    return (*(unsigned char *)(v3 + 10) & 1) == 0;
  }
  return result;
}

void sub_100053608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100053620(uint64_t a1, int a2)
{
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u) {
    return sub_100063DF4(a1, a2);
  }
  unint64_t v2 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10)) {
    return 0;
  }
  uint64_t v3 = *(int **)(a1 + 16);
  unint64_t v4 = &v3[8 * v2];
  do
  {
    unint64_t v5 = v2 >> 1;
    unint64_t v6 = &v3[8 * (v2 >> 1)];
    int v8 = *v6;
    uint64_t v7 = v6 + 8;
    v2 += ~(v2 >> 1);
    if (v8 < a2) {
      uint64_t v3 = v7;
    }
    else {
      unint64_t v2 = v5;
    }
  }
  while (v2);
  if (v3 == v4) {
    return 0;
  }
  int v10 = *v3;
  char v9 = v3 + 2;
  if (v10 == a2) {
    return (uint64_t)v9;
  }
  else {
    return 0;
  }
}

uint64_t sub_100053688(uint64_t a1)
{
  int v1 = *(void **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) < 0x101u)
  {
    uint64_t v2 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      LODWORD(result) = 0;
      uint64_t v4 = 32 * v2;
      unint64_t v5 = (char *)v1 + 18;
      do
      {
        char v6 = *v5;
        v5 += 32;
        if (v6) {
          uint64_t result = result;
        }
        else {
          uint64_t result = (result + 1);
        }
        v4 -= 32;
      }
      while (v4);
      return result;
    }
    return 0;
  }
  char v9 = (void *)*v1;
  uint64_t v7 = v1 + 1;
  int v8 = v9;
  if (v9 == v7) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    if (*((unsigned char *)v8 + 50)) {
      uint64_t result = result;
    }
    else {
      uint64_t result = (result + 1);
    }
    int v10 = (void *)v8[1];
    if (v10)
    {
      do
      {
        unint64_t v11 = v10;
        int v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        unint64_t v11 = (void *)v8[2];
        BOOL v12 = *v11 == (void)v8;
        int v8 = v11;
      }
      while (!v12);
    }
    int v8 = v11;
  }
  while (v11 != v7);
  return result;
}

unsigned __int8 *sub_100053724(uint64_t a1, int a2)
{
  uint64_t result = (unsigned __int8 *)sub_100053620(a1, a2);
  if (result)
  {
    return (unsigned __int8 *)sub_100053758(result);
  }
  return result;
}

uint64_t sub_100053758(unsigned __int8 *a1)
{
  if (!a1[9])
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1700);
    uint64_t v2 = sub_100051E74(v8, "CHECK failed: is_repeated: ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  uint64_t v3 = a1[8];
  if ((v3 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v4 = sub_100051E74(v8, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  switch(v3)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      uint64_t result = **(unsigned int **)a1;
      break;
    case 9:
    case 10:
    case 11:
    case 12:
      uint64_t result = *(unsigned int *)(*(void *)a1 + 8);
      break;
    default:
      sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1719);
      char v6 = sub_100051E74(v8, "Can't get here.");
      sub_100051FB0((uint64_t)&v7, (const char **)&v6->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v8);
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_1000538A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000538F0(uint64_t a1, int a2)
{
  uint64_t v2 = sub_100053620(a1, a2);
  if (v2)
  {
    uint64_t v3 = v2;
    if (*(unsigned char *)(v2 + 10))
    {
      sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 257);
      uint64_t v4 = sub_100051E74(v8, "Don't lookup extension types if they aren't present (2). ");
      sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v8);
    }
    return *(unsigned __int8 *)(v3 + 8);
  }
  else
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 253);
    char v6 = sub_100051E74(v8, "Don't lookup extension types if they aren't present (1). ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
    return 0;
  }
}

void sub_1000539AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1000539CC(uint64_t a1, int a2)
{
  uint64_t result = (unsigned __int8 *)sub_100053A00(a1, a2);
  if (result)
  {
    return sub_100053A68(result);
  }
  return result;
}

uint64_t sub_100053A00(uint64_t a1, int a2)
{
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u) {
    return sub_100063E64(a1, a2);
  }
  unint64_t v2 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10)) {
    return 0;
  }
  uint64_t v3 = *(int **)(a1 + 16);
  uint64_t v4 = &v3[8 * v2];
  do
  {
    unint64_t v5 = v2 >> 1;
    char v6 = &v3[8 * (v2 >> 1)];
    int v8 = *v6;
    char v7 = v6 + 8;
    v2 += ~(v2 >> 1);
    if (v8 < a2) {
      uint64_t v3 = v7;
    }
    else {
      unint64_t v2 = v5;
    }
  }
  while (v2);
  if (v3 == v4) {
    return 0;
  }
  int v10 = *v3;
  char v9 = v3 + 2;
  if (v10 == a2) {
    return (uint64_t)v9;
  }
  else {
    return 0;
  }
}

unsigned __int8 *sub_100053A68(unsigned __int8 *result)
{
  int v1 = result;
  if (result[9])
  {
    uint64_t v2 = result[8];
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v3 = sub_100051E74(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v9, (const char **)&v3->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v10);
    }
    switch(v2)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
        **(_DWORD **)int v1 = 0;
        break;
      case 9:
      case 12:
        uint64_t result = (unsigned __int8 *)sub_100048998(*(void *)v1);
        break;
      case 10:
      case 11:
        uint64_t result = (unsigned __int8 *)sub_100065130(*(void *)v1);
        break;
      default:
        return result;
    }
  }
  else if ((result[10] & 1) == 0)
  {
    uint64_t v4 = result[8];
    if ((v4 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unint64_t v5 = sub_100051E74(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v9, (const char **)&v5->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v10);
    }
    int v6 = dword_100093130[v4];
    if (v6 == 10)
    {
      uint64_t v8 = **(void **)v1;
      if ((v1[10] & 0x10) != 0) {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(v8 + 112))();
      }
      else {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(v8 + 40))();
      }
    }
    else if (v6 == 9)
    {
      uint64_t v7 = *(void *)v1;
      if (*(char *)(*(void *)v1 + 23) < 0)
      {
        **(unsigned char **)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v7 = 0;
        *(unsigned char *)(v7 + 23) = 0;
      }
    }
    v1[10] = v1[10] & 0xF0 | 1;
  }
  return result;
}

void sub_100053C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100053C84(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (v4)
  {
    unint64_t v5 = (unsigned __int8 *)v4;
    if ((*(unsigned char *)(v4 + 10) & 1) == 0)
    {
      if (*(unsigned char *)(v4 + 9))
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
        int v6 = sub_100051E74(v12, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      uint64_t v7 = v5[8];
      if ((v7 - 19) <= 0xFFFFFFED)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v8 = sub_100051E74(v12, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      if (dword_100093130[v7] != 1)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
        char v9 = sub_100051E74(v12, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      return *(unsigned int *)v5;
    }
  }
  return a3;
}

void sub_100053DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100053DD0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_10005D140(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v11 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[a3] != 1)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      BOOL v12 = sub_100051E74(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      long long v13 = sub_100051E74(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v15 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[v14] != 1)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      char v16 = sub_100051E74(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)uint64_t v9 = a4;
  return result;
}

void sub_100053FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100053FE8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t ***a4)
{
  int v6 = sub_10005D140(a1, a2);
  *a4 = v6;
  std::string v6[2] = a3;
  return v7 != 0;
}

uint64_t sub_100054020(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (!v4)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
    unint64_t v5 = sub_100051E74(v13, "CHECK failed: extension != NULL: ");
    int v6 = sub_100051E74(v5, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (!*(unsigned char *)(v4 + 9))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
    char v7 = sub_100051E74(v13, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 8);
  if ((v8 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v9 = sub_100051E74(v13, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (dword_100093130[v8] != 1)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
    char v10 = sub_100051E74(v13, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  return *(unsigned int *)sub_1000753A0(*(_DWORD **)v4, a3);
}

void sub_100054194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000541C4(uint64_t a1, int a2, int a3, int a4)
{
  int v13 = a4;
  uint64_t v5 = sub_100053A00(a1, a2);
  if (!v5)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
    int v6 = sub_100051E74(v15, "CHECK failed: extension != NULL: ");
    char v7 = sub_100051E74(v6, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (!*(unsigned char *)(v5 + 9))
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
    uint64_t v8 = sub_100051E74(v15, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 8);
  if ((v9 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    char v10 = sub_100051E74(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (dword_100093130[v9] != 1)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
    char v11 = sub_100051E74(v15, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  return sub_100075A84(*(_DWORD **)v5, a3, &v13);
}

void sub_10005433C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005436C(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  char v11 = sub_10005D140((uint64_t)a1, a2);
  char v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v14 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[a3] != 1)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      char v15 = sub_100051E74(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
    char v17 = (uint64_t *)sub_10004DFA4((void *)v16, 0x10uLL, (uint64_t)sub_100064604);
    }
    *char v17 = 0;
    v17[1] = v16;
    *char v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      long long v18 = sub_100051E74(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      float v20 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[v19] != 1)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      BOOL v21 = sub_100051E74(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      unint64_t v22 = sub_100051E74(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
  }
  unint64_t v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_100075018(v23, v24 + 1);
    uint64_t result = sub_100075830((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_100075830((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    int v25 = v24 + 1;
  }
  *unint64_t v23 = v25;
  return result;
}

void sub_100054670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000546B0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (v4)
  {
    uint64_t v5 = (unsigned __int8 *)v4;
    if ((*(unsigned char *)(v4 + 10) & 1) == 0)
    {
      if (*(unsigned char *)(v4 + 9))
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
        int v6 = sub_100051E74(v12, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      uint64_t v7 = v5[8];
      if ((v7 - 19) <= 0xFFFFFFED)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v8 = sub_100051E74(v12, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      if (dword_100093130[v7] != 2)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
        uint64_t v9 = sub_100051E74(v12, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      return *(void *)v5;
    }
  }
  return a3;
}

void sub_1000547D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000547FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_10005D140(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v11 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[a3] != 2)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      char v12 = sub_100051E74(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      char v13 = sub_100051E74(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v15 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[v14] != 2)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      uint64_t v16 = sub_100051E74(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(void *)uint64_t v9 = a4;
  return result;
}

void sub_1000549DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100054A14(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (!v4)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
    uint64_t v5 = sub_100051E74(v13, "CHECK failed: extension != NULL: ");
    int v6 = sub_100051E74(v5, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (!*(unsigned char *)(v4 + 9))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
    uint64_t v7 = sub_100051E74(v13, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 8);
  if ((v8 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v9 = sub_100051E74(v13, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (dword_100093130[v8] != 2)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
    char v10 = sub_100051E74(v13, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  return *(void *)sub_100078340(*(_DWORD **)v4, a3);
}

void sub_100054B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100054BB8(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v13 = a4;
  uint64_t v5 = sub_100053A00(a1, a2);
  if (!v5)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
    int v6 = sub_100051E74(v15, "CHECK failed: extension != NULL: ");
    uint64_t v7 = sub_100051E74(v6, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (!*(unsigned char *)(v5 + 9))
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
    uint64_t v8 = sub_100051E74(v15, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 8);
  if ((v9 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    char v10 = sub_100051E74(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (dword_100093130[v9] != 2)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
    char v11 = sub_100051E74(v15, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  return sub_100078A24(*(_DWORD **)v5, a3, &v13);
}

void sub_100054D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100054D60(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  char v11 = sub_10005D140((uint64_t)a1, a2);
  char v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v14 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[a3] != 2)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      char v15 = sub_100051E74(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
    char v17 = (uint64_t *)sub_10004DFA4((void *)v16, 0x10uLL, (uint64_t)sub_100064608);
    }
    *char v17 = 0;
    v17[1] = v16;
    *char v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      long long v18 = sub_100051E74(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      float v20 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[v19] != 2)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      BOOL v21 = sub_100051E74(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      unint64_t v22 = sub_100051E74(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
  }
  unint64_t v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_100077FB8(v23, v24 + 1);
    uint64_t result = sub_1000787D0((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_1000787D0((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
    int v25 = v24 + 1;
  }
  *unint64_t v23 = v25;
  return result;
}

void sub_100055064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000550A4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (v4)
  {
    uint64_t v5 = (unsigned __int8 *)v4;
    if ((*(unsigned char *)(v4 + 10) & 1) == 0)
    {
      if (*(unsigned char *)(v4 + 9))
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
        int v6 = sub_100051E74(v12, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      uint64_t v7 = v5[8];
      if ((v7 - 19) <= 0xFFFFFFED)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v8 = sub_100051E74(v12, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      if (dword_100093130[v7] != 3)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
        uint64_t v9 = sub_100051E74(v12, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      return *(unsigned int *)v5;
    }
  }
  return a3;
}

void sub_1000551C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000551F0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_10005D140(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v11 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[a3] != 3)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      char v12 = sub_100051E74(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      char v13 = sub_100051E74(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v15 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[v14] != 3)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      uint64_t v16 = sub_100051E74(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)uint64_t v9 = a4;
  return result;
}

void sub_1000553D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100055408(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (!v4)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
    uint64_t v5 = sub_100051E74(v13, "CHECK failed: extension != NULL: ");
    int v6 = sub_100051E74(v5, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (!*(unsigned char *)(v4 + 9))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
    uint64_t v7 = sub_100051E74(v13, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 8);
  if ((v8 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v9 = sub_100051E74(v13, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (dword_100093130[v8] != 3)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
    char v10 = sub_100051E74(v13, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  return *(unsigned int *)sub_100076B84(*(_DWORD **)v4, a3);
}

void sub_10005557C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000555AC(uint64_t a1, int a2, int a3, int a4)
{
  int v13 = a4;
  uint64_t v5 = sub_100053A00(a1, a2);
  if (!v5)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
    int v6 = sub_100051E74(v15, "CHECK failed: extension != NULL: ");
    uint64_t v7 = sub_100051E74(v6, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (!*(unsigned char *)(v5 + 9))
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
    uint64_t v8 = sub_100051E74(v15, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 8);
  if ((v9 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    char v10 = sub_100051E74(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (dword_100093130[v9] != 3)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
    char v11 = sub_100051E74(v15, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  return sub_100077268(*(_DWORD **)v5, a3, &v13);
}

void sub_100055724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100055754(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  char v11 = sub_10005D140((uint64_t)a1, a2);
  char v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v14 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[a3] != 3)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      char v15 = sub_100051E74(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
    char v17 = (uint64_t *)sub_10004DFA4((void *)v16, 0x10uLL, (uint64_t)sub_10006460C);
    }
    *char v17 = 0;
    v17[1] = v16;
    *char v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      long long v18 = sub_100051E74(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      float v20 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[v19] != 3)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      BOOL v21 = sub_100051E74(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      unint64_t v22 = sub_100051E74(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
  }
  unint64_t v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_100076810(v23, v24 + 1);
    uint64_t result = sub_100077014((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_100077014((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    int v25 = v24 + 1;
  }
  *unint64_t v23 = v25;
  return result;
}

void sub_100055A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100055A98(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (v4)
  {
    uint64_t v5 = (unsigned __int8 *)v4;
    if ((*(unsigned char *)(v4 + 10) & 1) == 0)
    {
      if (*(unsigned char *)(v4 + 9))
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
        int v6 = sub_100051E74(v12, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      uint64_t v7 = v5[8];
      if ((v7 - 19) <= 0xFFFFFFED)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v8 = sub_100051E74(v12, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      if (dword_100093130[v7] != 4)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
        uint64_t v9 = sub_100051E74(v12, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      return *(void *)v5;
    }
  }
  return a3;
}

void sub_100055BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100055BE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_10005D140(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v11 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[a3] != 4)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      char v12 = sub_100051E74(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      char v13 = sub_100051E74(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v15 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[v14] != 4)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      uint64_t v16 = sub_100051E74(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(void *)uint64_t v9 = a4;
  return result;
}

void sub_100055DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100055DFC(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (!v4)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
    uint64_t v5 = sub_100051E74(v13, "CHECK failed: extension != NULL: ");
    int v6 = sub_100051E74(v5, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (!*(unsigned char *)(v4 + 9))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
    uint64_t v7 = sub_100051E74(v13, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 8);
  if ((v8 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v9 = sub_100051E74(v13, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (dword_100093130[v8] != 4)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
    char v10 = sub_100051E74(v13, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  return *(void *)sub_100079B24(*(_DWORD **)v4, a3);
}

void sub_100055F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100055FA0(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v13 = a4;
  uint64_t v5 = sub_100053A00(a1, a2);
  if (!v5)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
    int v6 = sub_100051E74(v15, "CHECK failed: extension != NULL: ");
    uint64_t v7 = sub_100051E74(v6, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (!*(unsigned char *)(v5 + 9))
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
    uint64_t v8 = sub_100051E74(v15, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 8);
  if ((v9 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    char v10 = sub_100051E74(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (dword_100093130[v9] != 4)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
    char v11 = sub_100051E74(v15, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  return sub_10007A208(*(_DWORD **)v5, a3, &v13);
}

void sub_100056118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100056148(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  char v11 = sub_10005D140((uint64_t)a1, a2);
  char v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v14 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[a3] != 4)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      char v15 = sub_100051E74(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
    char v17 = (uint64_t *)sub_10004DFA4((void *)v16, 0x10uLL, (uint64_t)sub_100064610);
    }
    *char v17 = 0;
    v17[1] = v16;
    *char v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      long long v18 = sub_100051E74(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      float v20 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[v19] != 4)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      BOOL v21 = sub_100051E74(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      unint64_t v22 = sub_100051E74(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
  }
  unint64_t v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_1000797B0(v23, v24 + 1);
    uint64_t result = sub_100079FB4((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_100079FB4((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
    int v25 = v24 + 1;
  }
  *unint64_t v23 = v25;
  return result;
}

void sub_10005644C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_10005648C(uint64_t a1, int a2, float a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (v4)
  {
    uint64_t v5 = (unsigned __int8 *)v4;
    if ((*(unsigned char *)(v4 + 10) & 1) == 0)
    {
      if (*(unsigned char *)(v4 + 9))
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
        int v6 = sub_100051E74(v12, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      uint64_t v7 = v5[8];
      if ((v7 - 19) <= 0xFFFFFFED)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v8 = sub_100051E74(v12, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      if (dword_100093130[v7] != 6)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
        uint64_t v9 = sub_100051E74(v12, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      return *(float *)v5;
    }
  }
  return a3;
}

void sub_1000565B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000565E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, float a5)
{
  uint64_t result = (uint64_t)sub_10005D140(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a4;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v11 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[a3] != 6)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      char v12 = sub_100051E74(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      char v13 = sub_100051E74(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v15 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[v14] != 6)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      uint64_t v16 = sub_100051E74(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(float *)uint64_t v9 = a5;
  return result;
}

void sub_1000567C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_100056800(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (!v4)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
    uint64_t v5 = sub_100051E74(v13, "CHECK failed: extension != NULL: ");
    int v6 = sub_100051E74(v5, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (!*(unsigned char *)(v4 + 9))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
    uint64_t v7 = sub_100051E74(v13, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 8);
  if ((v8 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v9 = sub_100051E74(v13, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (dword_100093130[v8] != 6)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
    char v10 = sub_100051E74(v13, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  return *(float *)sub_10007B2CC(*(_DWORD **)v4, a3);
}

void sub_100056974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000569A4(uint64_t a1, int a2, int a3, float a4)
{
  float v13 = a4;
  uint64_t v5 = sub_100053A00(a1, a2);
  if (!v5)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
    int v6 = sub_100051E74(v15, "CHECK failed: extension != NULL: ");
    uint64_t v7 = sub_100051E74(v6, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (!*(unsigned char *)(v5 + 9))
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
    uint64_t v8 = sub_100051E74(v15, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 8);
  if ((v9 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    char v10 = sub_100051E74(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (dword_100093130[v9] != 6)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
    char v11 = sub_100051E74(v15, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  return sub_10007B9B0(*(_DWORD **)v5, a3, (int *)&v13);
}

void sub_100056B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100056B4C(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, float a6)
{
  char v11 = sub_10005D140((uint64_t)a1, a2);
  char v12 = v11;
  std::string v11[2] = a5;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v14 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[a3] != 6)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      char v15 = sub_100051E74(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
    char v17 = (uint64_t *)sub_10004DFA4((void *)v16, 0x10uLL, (uint64_t)sub_100064614);
    }
    *char v17 = 0;
    v17[1] = v16;
    *char v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      long long v18 = sub_100051E74(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      float v20 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[v19] != 6)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      BOOL v21 = sub_100051E74(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      unint64_t v22 = sub_100051E74(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
  }
  unint64_t v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_10007AF58(v23, v24 + 1);
    uint64_t result = sub_10007B75C((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
  }
  else
  {
    uint64_t result = sub_10007B75C((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
    int v25 = v24 + 1;
  }
  *unint64_t v23 = v25;
  return result;
}

void sub_100056E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_100056E98(uint64_t a1, int a2, double a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (v4)
  {
    uint64_t v5 = (unsigned __int8 *)v4;
    if ((*(unsigned char *)(v4 + 10) & 1) == 0)
    {
      if (*(unsigned char *)(v4 + 9))
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
        int v6 = sub_100051E74(v12, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      uint64_t v7 = v5[8];
      if ((v7 - 19) <= 0xFFFFFFED)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v8 = sub_100051E74(v12, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      if (dword_100093130[v7] != 5)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
        uint64_t v9 = sub_100051E74(v12, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      return *(double *)v5;
    }
  }
  return a3;
}

void sub_100056FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100056FEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  uint64_t result = (uint64_t)sub_10005D140(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a4;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v11 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[a3] != 5)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      char v12 = sub_100051E74(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      char v13 = sub_100051E74(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v15 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[v14] != 5)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      uint64_t v16 = sub_100051E74(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(double *)uint64_t v9 = a5;
  return result;
}

void sub_1000571D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_10005720C(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (!v4)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
    uint64_t v5 = sub_100051E74(v13, "CHECK failed: extension != NULL: ");
    int v6 = sub_100051E74(v5, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (!*(unsigned char *)(v4 + 9))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
    uint64_t v7 = sub_100051E74(v13, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 8);
  if ((v8 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v9 = sub_100051E74(v13, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (dword_100093130[v8] != 5)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
    char v10 = sub_100051E74(v13, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  return *(double *)sub_10007CA8C(*(_DWORD **)v4, a3);
}

void sub_100057380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000573B0(uint64_t a1, int a2, int a3, double a4)
{
  double v13 = a4;
  uint64_t v5 = sub_100053A00(a1, a2);
  if (!v5)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
    int v6 = sub_100051E74(v15, "CHECK failed: extension != NULL: ");
    uint64_t v7 = sub_100051E74(v6, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (!*(unsigned char *)(v5 + 9))
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
    uint64_t v8 = sub_100051E74(v15, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 8);
  if ((v9 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    char v10 = sub_100051E74(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (dword_100093130[v9] != 5)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
    char v11 = sub_100051E74(v15, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  return sub_10007D170(*(_DWORD **)v5, a3, (uint64_t *)&v13);
}

void sub_100057528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100057558(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, double a6)
{
  char v11 = sub_10005D140((uint64_t)a1, a2);
  char v12 = v11;
  std::string v11[2] = a5;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v14 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[a3] != 5)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      char v15 = sub_100051E74(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
    char v17 = (uint64_t *)sub_10004DFA4((void *)v16, 0x10uLL, (uint64_t)sub_100064618);
    }
    *char v17 = 0;
    v17[1] = v16;
    *char v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      long long v18 = sub_100051E74(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      float v20 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[v19] != 5)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      BOOL v21 = sub_100051E74(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      unint64_t v22 = sub_100051E74(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
  }
  unint64_t v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_10007C718(v23, v24 + 1);
    uint64_t result = sub_10007CF1C((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
  }
  else
  {
    uint64_t result = sub_10007CF1C((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
    int v25 = v24 + 1;
  }
  *unint64_t v23 = v25;
  return result;
}

void sub_100057864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000578A4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (v4)
  {
    uint64_t v5 = (unsigned char *)v4;
    if ((*(unsigned char *)(v4 + 10) & 1) == 0)
    {
      if (*(unsigned char *)(v4 + 9))
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
        int v6 = sub_100051E74(v12, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      uint64_t v7 = v5[8];
      if ((v7 - 19) <= 0xFFFFFFED)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v8 = sub_100051E74(v12, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      if (dword_100093130[v7] != 7)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
        uint64_t v9 = sub_100051E74(v12, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      return *v5 != 0;
    }
  }
  return a3;
}

void sub_1000579D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000579F8(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_10005D140(a1, a2);
  uint64_t v9 = (unsigned char *)result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v11 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[a3] != 7)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      char v12 = sub_100051E74(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    v9[9] = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      char v13 = sub_100051E74(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    uint64_t v14 = v9[8];
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v15 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[v14] != 7)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      uint64_t v16 = sub_100051E74(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
  }
  v9[10] &= 0xF0u;
  unsigned char *v9 = a4;
  return result;
}

void sub_100057BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100057C10(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (!v4)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
    uint64_t v5 = sub_100051E74(v13, "CHECK failed: extension != NULL: ");
    int v6 = sub_100051E74(v5, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (!*(unsigned char *)(v4 + 9))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
    uint64_t v7 = sub_100051E74(v13, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 8);
  if ((v8 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v9 = sub_100051E74(v13, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (dword_100093130[v8] != 7)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
    char v10 = sub_100051E74(v13, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  return *(unsigned __int8 *)sub_100073B78(*(_DWORD **)v4, a3);
}

void sub_100057D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100057DB4(uint64_t a1, int a2, int a3, char a4)
{
  char v13 = a4;
  uint64_t v5 = sub_100053A00(a1, a2);
  if (!v5)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
    int v6 = sub_100051E74(v15, "CHECK failed: extension != NULL: ");
    uint64_t v7 = sub_100051E74(v6, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (!*(unsigned char *)(v5 + 9))
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
    uint64_t v8 = sub_100051E74(v15, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 8);
  if ((v9 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    char v10 = sub_100051E74(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (dword_100093130[v9] != 7)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
    char v11 = sub_100051E74(v15, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  return sub_100074284(*(_DWORD **)v5, a3, &v13);
}

void sub_100057F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100057F5C(uint64_t *a1, uint64_t a2, int a3, int a4, char a5, uint64_t *a6)
{
  char v11 = sub_10005D140((uint64_t)a1, a2);
  char v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v14 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[a3] != 7)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      char v15 = sub_100051E74(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
    char v17 = (uint64_t *)sub_10004DFA4((void *)v16, 0x10uLL, (uint64_t)sub_10006461C);
    }
    *char v17 = 0;
    v17[1] = v16;
    *char v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      long long v18 = sub_100051E74(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      float v20 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[v19] != 7)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      BOOL v21 = sub_100051E74(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      unint64_t v22 = sub_100051E74(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
  }
  unint64_t v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_1000737EC(v23, v24 + 1);
    uint64_t result = sub_100074030((uint64_t)v23);
    *(unsigned char *)(result + v24) = a5;
  }
  else
  {
    uint64_t result = sub_100074030((uint64_t)v23);
    *(unsigned char *)(result + v24) = a5;
    int v25 = v24 + 1;
  }
  *unint64_t v23 = v25;
  return result;
}

void sub_100058260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000582A0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (v4) {
    return *(void *)v4;
  }
  return a3;
}

uint64_t *sub_1000582D0(uint64_t *a1, uint64_t a2, int a3, char a4, uint64_t *a5)
{
  uint64_t v9 = sub_10005D140((uint64_t)a1, a2);
  char v10 = v9;
  std::string v9[2] = a5;
  if (v11)
  {
    *((unsigned char *)v9 + 9) = 1;
    *((unsigned char *)v9 + 8) = a3;
    *((unsigned char *)v9 + 11) = a4;
    switch(a3)
    {
      case 1:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
        char v13 = sub_100064618;
        }
        goto LABEL_31;
      case 2:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
        char v13 = sub_100064614;
        }
        goto LABEL_31;
      case 3:
      case 16:
      case 18:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
        char v13 = sub_100064608;
        }
        goto LABEL_31;
      case 4:
      case 6:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
        char v13 = sub_100064610;
        }
        goto LABEL_31;
      case 5:
      case 14:
      case 15:
      case 17:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
        char v13 = sub_100064604;
        }
        goto LABEL_31;
      case 7:
      case 13:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
        char v13 = sub_10006460C;
        }
        goto LABEL_31;
      case 8:
        uint64_t v12 = *a1;
        if (!v12) {
LABEL_32:
        }
          operator new();
        if (*(unsigned char *)(v12 + 24)) {
        char v13 = sub_10006461C;
        }
LABEL_31:
        char v14 = (uint64_t *)sub_10004DFA4((void *)v12, 0x10uLL, (uint64_t)v13);
        uint64_t *v14 = 0;
        v14[1] = v12;
        goto LABEL_43;
      case 9:
      case 12:
        uint64_t v15 = *a1;
        if (!v15) {
          goto LABEL_42;
        }
        if (*(unsigned char *)(v15 + 24)) {
        uint64_t v16 = (uint64_t *(*)(uint64_t *))sub_100064620;
        }
        goto LABEL_41;
      case 10:
      case 11:
        uint64_t v15 = *a1;
        if (!v15) {
LABEL_42:
        }
          operator new();
        if (*(unsigned char *)(v15 + 24)) {
        uint64_t v16 = sub_100064624;
        }
LABEL_41:
        char v14 = (uint64_t *)sub_10004DFA4((void *)v15, 0x18uLL, (uint64_t)v16);
        std::string v14[2] = 0;
        uint64_t *v14 = v15;
        v14[1] = 0;
LABEL_43:
        std::string *v10 = v14;
        break;
      default:
        return *v10;
    }
  }
  return *v10;
}

uint64_t sub_100058744(uint64_t a1, int a2)
{
  uint64_t v2 = sub_100053A00(a1, a2);
  if (!v2)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 435);
    uint64_t v3 = sub_100051E74(v7, "CHECK failed: extension != NULL: ");
    uint64_t v4 = sub_100051E74(v3, "Extension not found.");
    sub_100051FB0((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v7);
  }
  return *(void *)v2;
}

void sub_1000587C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000587D8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (v4)
  {
    uint64_t v5 = (unsigned __int8 *)v4;
    if ((*(unsigned char *)(v4 + 10) & 1) == 0)
    {
      if (*(unsigned char *)(v4 + 9))
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 450);
        char v6 = sub_100051E74(v12, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      uint64_t v7 = v5[8];
      if ((v7 - 19) <= 0xFFFFFFED)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v8 = sub_100051E74(v12, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      if (dword_100093130[v7] != 8)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 450);
        uint64_t v9 = sub_100051E74(v12, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      return *(unsigned int *)v5;
    }
  }
  return a3;
}

void sub_1000588FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100058924(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_10005D140(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v11 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[a3] != 8)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 460);
      uint64_t v12 = sub_100051E74(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      char v13 = sub_100051E74(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v15 = sub_100051E74(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
    if (dword_100093130[v14] != 8)
    {
      sub_100051E5C((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      uint64_t v16 = sub_100051E74(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_100051FB0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_100051FB8((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)uint64_t v9 = a4;
  return result;
}

void sub_100058B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100058B3C(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (!v4)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 471);
    uint64_t v5 = sub_100051E74(v13, "CHECK failed: extension != NULL: ");
    char v6 = sub_100051E74(v5, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (!*(unsigned char *)(v4 + 9))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 472);
    uint64_t v7 = sub_100051E74(v13, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 8);
  if ((v8 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v9 = sub_100051E74(v13, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (dword_100093130[v8] != 8)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 472);
    char v10 = sub_100051E74(v13, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  return *(unsigned int *)sub_1000753A0(*(_DWORD **)v4, a3);
}

void sub_100058CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100058CE0(uint64_t a1, int a2, int a3, int a4)
{
  int v13 = a4;
  uint64_t v5 = sub_100053A00(a1, a2);
  if (!v5)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 478);
    char v6 = sub_100051E74(v15, "CHECK failed: extension != NULL: ");
    uint64_t v7 = sub_100051E74(v6, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (!*(unsigned char *)(v5 + 9))
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 479);
    uint64_t v8 = sub_100051E74(v15, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 8);
  if ((v9 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    char v10 = sub_100051E74(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (dword_100093130[v9] != 8)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 479);
    char v11 = sub_100051E74(v15, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  return sub_100075A84(*(_DWORD **)v5, a3, &v13);
}

void sub_100058E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100058E88(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  char v11 = sub_10005D140((uint64_t)a1, a2);
  char v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v14 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[a3] != 8)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 488);
      uint64_t v15 = sub_100051E74(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
    char v17 = (uint64_t *)sub_10004DFA4((void *)v16, 0x10uLL, (uint64_t)sub_100064604);
    }
    *char v17 = 0;
    v17[1] = v16;
    *char v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      long long v18 = sub_100051E74(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      float v20 = sub_100051E74(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (dword_100093130[v19] != 8)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      BOOL v21 = sub_100051E74(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_100051E5C((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 495);
      unint64_t v22 = sub_100051E74(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_100051FB0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v28);
    }
  }
  unint64_t v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_100075018(v23, v24 + 1);
    uint64_t result = sub_100075830((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_100075830((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    int v25 = v24 + 1;
  }
  *unint64_t v23 = v25;
  return result;
}

void sub_10005918C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000591CC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (v4)
  {
    uint64_t v5 = (unsigned __int8 *)v4;
    if ((*(unsigned char *)(v4 + 10) & 1) == 0)
    {
      if (*(unsigned char *)(v4 + 9))
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 510);
        char v6 = sub_100051E74(v12, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      uint64_t v7 = v5[8];
      if ((v7 - 19) <= 0xFFFFFFED)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v8 = sub_100051E74(v12, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      if (dword_100093130[v7] != 9)
      {
        sub_100051E5C((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 510);
        uint64_t v9 = sub_100051E74(v12, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
        sub_100051FB0((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v12);
      }
      return *(void *)v5;
    }
  }
  return a3;
}

void sub_1000592F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100059318(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7 = sub_10005D140((uint64_t)a1, a2);
  uint64_t v8 = (unsigned __int8 *)v7;
  std::string v7[2] = a4;
  if (v9)
  {
    *((unsigned char *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v10 = sub_100051E74(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v19, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v20);
    }
    if (dword_100093130[a3] != 9)
    {
      sub_100051E5C((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 520);
      char v11 = sub_100051E74(v20, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_100051FB0((uint64_t)&v19, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v20);
    }
    v8[9] = 0;
    uint64_t v12 = *a1;
    if (!v12) {
      operator new();
    }
    if (*(unsigned char *)(v12 + 24)) {
    char v13 = (void *)sub_10004DFA4((void *)v12, 0x18uLL, (uint64_t)sub_100048840);
    }
    void *v13 = 0;
    v13[1] = 0;
    std::string v13[2] = 0;
    *(void *)uint64_t v8 = v13;
  }
  else
  {
    if (*((unsigned char *)v7 + 9))
    {
      sub_100051E5C((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      char v14 = sub_100051E74(v20, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_100051FB0((uint64_t)&v19, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v20);
    }
    uint64_t v15 = v8[8];
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v16 = sub_100051E74(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v19, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v20);
    }
    if (dword_100093130[v15] != 9)
    {
      sub_100051E5C((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      char v17 = sub_100051E74(v20, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_100051FB0((uint64_t)&v19, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v20);
    }
  }
  v8[10] &= 0xF0u;
  return *(void *)v8;
}

void sub_100059588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000595C0(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (!v4)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 533);
    uint64_t v5 = sub_100051E74(v13, "CHECK failed: extension != NULL: ");
    char v6 = sub_100051E74(v5, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (!*(unsigned char *)(v4 + 9))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 534);
    uint64_t v7 = sub_100051E74(v13, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 8);
  if ((v8 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    char v9 = sub_100051E74(v13, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (dword_100093130[v8] != 9)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 534);
    char v10 = sub_100051E74(v13, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  return sub_100048A5C(*(void *)v4, a3);
}

void sub_100059730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100059760(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100053A00(a1, a2);
  if (!v4)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 540);
    uint64_t v5 = sub_100051E74(v13, "CHECK failed: extension != NULL: ");
    char v6 = sub_100051E74(v5, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (!*(unsigned char *)(v4 + 9))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 541);
    uint64_t v7 = sub_100051E74(v13, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 8);
  if ((v8 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    char v9 = sub_100051E74(v13, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (dword_100093130[v8] != 9)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 541);
    char v10 = sub_100051E74(v13, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  return sub_10006465C(*(void *)v4, a3);
}

void sub_1000598D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100059900(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7 = sub_10005D140((uint64_t)a1, a2);
  uint64_t v8 = v7;
  std::string v7[2] = a4;
  if (v9)
  {
    *((unsigned char *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v10 = sub_100051E74(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v26, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v27);
    }
    if (dword_100093130[a3] != 9)
    {
      sub_100051E5C((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 550);
      char v11 = sub_100051E74(v27, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_100051FB0((uint64_t)&v26, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v27);
    }
    *((unsigned char *)v8 + 9) = 1;
    *((unsigned char *)v8 + 11) = 0;
    uint64_t v12 = *a1;
    if (!v12) {
      operator new();
    }
    if (*(unsigned char *)(v12 + 24)) {
    char v13 = (uint64_t *)sub_10004DFA4((void *)v12, 0x18uLL, (uint64_t)sub_100064620);
    }
    std::string v13[2] = 0;
    uint64_t *v13 = v12;
    v13[1] = 0;
    *uint64_t v8 = v13;
  }
  else
  {
    if (!*((unsigned char *)v7 + 9))
    {
      sub_100051E5C((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      char v14 = sub_100051E74(v27, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_100051FB0((uint64_t)&v26, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v27);
    }
    uint64_t v15 = *((unsigned __int8 *)v8 + 8);
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v16 = sub_100051E74(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v26, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v27);
    }
    if (dword_100093130[v15] != 9)
    {
      sub_100051E5C((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      char v17 = sub_100051E74(v27, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_100051FB0((uint64_t)&v26, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v27);
    }
  }
  uint64_t v18 = (uint64_t)*v8;
  char v19 = *(int **)(v18 + 16);
  if (!v19)
  {
    int v21 = *(_DWORD *)(v18 + 12);
LABEL_22:
    sub_10007E8E4(v18, v21 + 1);
    char v19 = *(int **)(v18 + 16);
    int v21 = *v19;
    goto LABEL_23;
  }
  uint64_t v20 = *(int *)(v18 + 8);
  int v21 = *v19;
  if ((int)v20 < *v19)
  {
    *(_DWORD *)(v18 + 8) = v20 + 1;
    return *(void **)&v19[2 * v20 + 2];
  }
  if (v21 == *(_DWORD *)(v18 + 12)) {
    goto LABEL_22;
  }
LABEL_23:
  *char v19 = v21 + 1;
  uint64_t v23 = *(void *)v18;
  if (!*(void *)v18) {
    operator new();
  }
  if (*(unsigned char *)(v23 + 24)) {
  uint64_t result = (void *)sub_10004DFA4((void *)v23, 0x18uLL, (uint64_t)sub_100048840);
  }
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  uint64_t v24 = *(void *)(v18 + 16);
  uint64_t v25 = *(int *)(v18 + 8);
  *(_DWORD *)(v18 + 8) = v25 + 1;
  *(void *)(v24 + 8 * v25 + 8) = result;
  return result;
}

void sub_100059C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100059CB0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    if (*(unsigned char *)(v4 + 9))
    {
      sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 571);
      char v6 = sub_100051E74(v13, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v13);
    }
    uint64_t v7 = *(unsigned __int8 *)(v5 + 8);
    if ((v7 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v8 = sub_100051E74(v13, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v13);
    }
    if (dword_100093130[v7] != 10)
    {
      sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 571);
      char v9 = sub_100051E74(v13, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v13);
    }
    uint64_t v10 = *(void *)v5;
    if ((*(unsigned char *)(v5 + 10) & 0x10) != 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 24))(v10, a3);
    }
    return v10;
  }
  return a3;
}

void sub_100059E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100059E30(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  char v9 = sub_10005D140((uint64_t)a1, a2);
  uint64_t v10 = v9;
  std::string v9[2] = a5;
  if (v11)
  {
    *((unsigned char *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v12 = sub_100051E74(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v20, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v21);
    }
    if (dword_100093130[a3] != 10)
    {
      sub_100051E5C((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 591);
      char v13 = sub_100051E74(v21, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_100051FB0((uint64_t)&v20, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v21);
    }
    *((unsigned char *)v10 + 9) = 0;
    *((unsigned char *)v10 + 10) &= 0xFu;
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 32))(a4, *a1);
    std::string *v10 = (uint64_t *)result;
    *((unsigned char *)v10 + 10) &= 0xF0u;
  }
  else
  {
    if (*((unsigned char *)v9 + 9))
    {
      sub_100051E5C((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      uint64_t v15 = sub_100051E74(v21, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_100051FB0((uint64_t)&v20, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v21);
    }
    uint64_t v16 = *((unsigned __int8 *)v10 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v17 = sub_100051E74(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v20, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v21);
    }
    if (dword_100093130[v16] != 10)
    {
      sub_100051E5C((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      uint64_t v18 = sub_100051E74(v21, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_100051FB0((uint64_t)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v21);
    }
    char v19 = *((unsigned char *)v10 + 10);
    *((unsigned char *)v10 + 1sub_10002F6CC(&a9, 0) = v19 & 0xF0;
    uint64_t result = (uint64_t)*v10;
    if ((v19 & 0x10) != 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a4);
    }
  }
  return result;
}

void sub_10005A090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10005A0C8(uint64_t **a1, uint64_t a2, int a3, uint64_t a4, void *a5)
{
  if (a5)
  {
    uint64_t v9 = a5[1];
    uint64_t v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFFELL);
    if (v9) {
      uint64_t v10 = (uint64_t *)*v10;
    }
    uint64_t result = (unsigned __int8 *)sub_10005D140((uint64_t)a1, a2);
    char v12 = result;
    *((void *)result + 2) = a4;
    if (v13)
    {
      result[8] = a3;
      if ((a3 - 19) <= 0xFFFFFFED)
      {
        sub_100051E5C((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        char v14 = sub_100051E74(v23, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v22, (const char **)&v14->__r_.__value_.__l.__data_);
        uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v23);
      }
      if (dword_100093130[a3] != 10)
      {
        sub_100051E5C((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 624);
        uint64_t v15 = sub_100051E74(v23, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
        sub_100051FB0((uint64_t)&v22, (const char **)&v15->__r_.__value_.__l.__data_);
        uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v23);
      }
      v12[9] = 0;
      v12[10] &= 0xFu;
      if (v10 != *a1)
      {
        if (v10)
        {
LABEL_11:
          uint64_t v16 = (*(uint64_t (**)(void *))(*a5 + 32))(a5);
          *(void *)char v12 = v16;
          uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 64))(v16, a5);
LABEL_32:
          v12[10] &= 0xF0u;
          return result;
        }
LABEL_30:
        *(void *)char v12 = a5;
        uint64_t result = (unsigned __int8 *)sub_10005A444(*a1, (uint64_t)a5);
        goto LABEL_32;
      }
    }
    else
    {
      if (result[9])
      {
        sub_100051E5C((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 637);
        char v17 = sub_100051E74(v23, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
        sub_100051FB0((uint64_t)&v22, (const char **)&v17->__r_.__value_.__l.__data_);
        uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v23);
      }
      uint64_t v18 = v12[8];
      if ((v18 - 19) <= 0xFFFFFFED)
      {
        sub_100051E5C((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        char v19 = sub_100051E74(v23, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v22, (const char **)&v19->__r_.__value_.__l.__data_);
        uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v23);
      }
      if (dword_100093130[v18] != 10)
      {
        sub_100051E5C((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 637);
        char v20 = sub_100051E74(v23, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
        sub_100051FB0((uint64_t)&v22, (const char **)&v20->__r_.__value_.__l.__data_);
        uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v23);
      }
      if ((v12[10] & 0x10) != 0)
      {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void, void *))(**(void **)v12 + 40))(*(void *)v12, a5);
        goto LABEL_32;
      }
      int v21 = *a1;
      if (!*a1)
      {
        uint64_t result = *(unsigned __int8 **)v12;
        if (*(void *)v12)
        {
          uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
          int v21 = *a1;
        }
        else
        {
          int v21 = 0;
        }
      }
      if (v10 != v21)
      {
        if (v10) {
          goto LABEL_11;
        }
        goto LABEL_30;
      }
    }
    *(void *)char v12 = a5;
    goto LABEL_32;
  }
  uint64_t result = (unsigned __int8 *)sub_100053A00((uint64_t)a1, a2);
  if (result)
  {
    return sub_100053A68(result);
  }
  return result;
}

void sub_10005A40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10005A444(uint64_t *result, uint64_t a2)
{
  if (a2) {
    return sub_10004E108(result, a2, (uint64_t)sub_10006473C);
  }
  return result;
}

unsigned __int8 *sub_10005A460(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t result = (unsigned __int8 *)sub_10005D140((uint64_t)a1, a2);
    uint64_t v10 = result;
    *((void *)result + 2) = a4;
    if (v11)
    {
      result[8] = a3;
      if ((a3 - 19) <= 0xFFFFFFED)
      {
        sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        char v12 = sub_100051E74(v19, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v18, (const char **)&v12->__r_.__value_.__l.__data_);
        uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v19);
      }
      if (dword_100093130[a3] != 10)
      {
        sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 668);
        char v13 = sub_100051E74(v19, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
        sub_100051FB0((uint64_t)&v18, (const char **)&v13->__r_.__value_.__l.__data_);
        uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v19);
      }
      v10[9] = 0;
      v10[10] &= 0xFu;
    }
    else
    {
      if (result[9])
      {
        sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 673);
        char v14 = sub_100051E74(v19, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
        sub_100051FB0((uint64_t)&v18, (const char **)&v14->__r_.__value_.__l.__data_);
        uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v19);
      }
      uint64_t v15 = v10[8];
      if ((v15 - 19) <= 0xFFFFFFED)
      {
        sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v16 = sub_100051E74(v19, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v18, (const char **)&v16->__r_.__value_.__l.__data_);
        uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v19);
      }
      if (dword_100093130[v15] != 10)
      {
        sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 673);
        char v17 = sub_100051E74(v19, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
        sub_100051FB0((uint64_t)&v18, (const char **)&v17->__r_.__value_.__l.__data_);
        uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v19);
      }
      if ((v10[10] & 0x10) != 0)
      {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**(void **)v10 + 48))(*(void *)v10, a5);
        goto LABEL_9;
      }
      if (!*a1)
      {
        uint64_t result = *(unsigned __int8 **)v10;
        if (*(void *)v10) {
          uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
        }
      }
    }
    *(void *)uint64_t v10 = a5;
LABEL_9:
    v10[10] &= 0xF0u;
    return result;
  }
  uint64_t result = (unsigned __int8 *)sub_100053A00((uint64_t)a1, a2);
  if (result)
  {
    return sub_100053A68(result);
  }
  return result;
}

void sub_10005A700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005A738(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_100053A00((uint64_t)a1, a2);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (unsigned __int8 *)v6;
  if (*(unsigned char *)(v6 + 9))
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 693);
    uint64_t v8 = sub_100051E74(v15, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  uint64_t v9 = v7[8];
  if ((v9 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v10 = sub_100051E74(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (dword_100093130[v9] != 10)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 693);
    char v11 = sub_100051E74(v15, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if ((v7[10] & 0x10) != 0)
  {
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)v7 + 56))(*(void *)v7, a3);
    if (!*a1 && *(void *)v7) {
      (*(void (**)(void))(**(void **)v7 + 8))(*(void *)v7);
    }
  }
  else
  {
    uint64_t v12 = *(void *)v7;
    if (*a1)
    {
      uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v12 + 24))(*(void *)v7);
      (*(void (**)(uint64_t, void))(*(void *)v12 + 64))(v12, *(void *)v7);
    }
  }
  sub_10005A974((uint64_t)a1, a2);
  return v12;
}

void sub_10005A94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_10005A974(uint64_t a1, int a2)
{
  int v12 = a2;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
  uint64_t result = *(char **)(a1 + 16);
  if (v3 >= 0x101) {
    return (char *)sub_100065580((uint64_t)result, &v12);
  }
  uint64_t v5 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    uint64_t v6 = &result[32 * v5];
    unint64_t v7 = *(unsigned __int16 *)(a1 + 10);
    do
    {
      unint64_t v8 = v7 >> 1;
      uint64_t v9 = (int *)&result[32 * (v7 >> 1)];
      int v11 = *v9;
      uint64_t v10 = (char *)(v9 + 8);
      v7 += ~(v7 >> 1);
      if (v11 < a2) {
        uint64_t result = v10;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
    if (result != v6 && *(_DWORD *)result == a2)
    {
      if (v6 != result + 32)
      {
        uint64_t result = (char *)memmove(result, result + 32, v6 - (result + 32));
        LOWORD(v5) = *(_WORD *)(a1 + 10);
      }
      *(_WORD *)(a1 + 1sub_10002F6CC(&a9, 0) = v5 - 1;
    }
  }
  return result;
}

uint64_t sub_10005AA24(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_100053A00((uint64_t)a1, a2);
  if (!v6) {
    return 0;
  }
  unint64_t v7 = (unsigned char *)v6;
  if (*(unsigned char *)(v6 + 9))
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 722);
    unint64_t v8 = sub_100051E74(v15, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  uint64_t v9 = v7[8];
  if ((v9 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v10 = sub_100051E74(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (dword_100093130[v9] != 10)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 722);
    int v11 = sub_100051E74(v15, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  uint64_t v12 = *(void *)v7;
  if ((v7[10] & 0x10) != 0)
  {
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(*(void *)v12 + 64))(*(void *)v7, a3);
    if (!*a1)
    {
      if (*(void *)v7) {
        (*(void (**)(void))(**(void **)v7 + 8))(*(void *)v7);
      }
    }
  }
  sub_10005A974((uint64_t)a1, a2);
  return v12;
}

void sub_10005ABD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005AC00(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100053620(a1, a2);
  if (!v4)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 744);
    uint64_t v5 = sub_100051E74(v13, "CHECK failed: extension != NULL: ");
    uint64_t v6 = sub_100051E74(v5, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (!*(unsigned char *)(v4 + 9))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 745);
    unint64_t v7 = sub_100051E74(v13, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 8);
  if ((v8 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v9 = sub_100051E74(v13, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (dword_100093130[v8] != 10)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 745);
    uint64_t v10 = sub_100051E74(v13, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  return sub_100064768(*(void *)v4, a3);
}

void sub_10005AD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005ADA0(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100053A00(a1, a2);
  if (!v4)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 751);
    uint64_t v5 = sub_100051E74(v13, "CHECK failed: extension != NULL: ");
    uint64_t v6 = sub_100051E74(v5, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (!*(unsigned char *)(v4 + 9))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 752);
    unint64_t v7 = sub_100051E74(v13, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 8);
  if ((v8 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v9 = sub_100051E74(v13, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (dword_100093130[v8] != 10)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 752);
    uint64_t v10 = sub_100051E74(v13, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  return sub_100064848(*(void *)v4, a3);
}

void sub_10005AF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005AF40(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = sub_10005D140((uint64_t)a1, a2);
  uint64_t v10 = (unsigned __int8 *)v9;
  std::string v9[2] = a5;
  if (v11)
  {
    *((unsigned char *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v12 = sub_100051E74(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v25, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v26);
    }
    if (dword_100093130[a3] != 10)
    {
      sub_100051E5C((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 762);
      char v13 = sub_100051E74(v26, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_100051FB0((uint64_t)&v25, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v26);
    }
    v10[9] = 1;
    uint64_t v14 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v14 + 24)) {
    uint64_t v15 = (void *)sub_10004DFA4((void *)v14, 0x18uLL, (uint64_t)sub_100064624);
    }
    std::string v15[2] = 0;
    *uint64_t v15 = v14;
    v15[1] = 0;
    *(void *)uint64_t v10 = v15;
  }
  else
  {
    if (!*((unsigned char *)v9 + 9))
    {
      sub_100051E5C((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      uint64_t v16 = sub_100051E74(v26, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_100051FB0((uint64_t)&v25, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v26);
    }
    uint64_t v17 = v10[8];
    if ((v17 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v18 = sub_100051E74(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v25, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v26);
    }
    if (dword_100093130[v17] != 10)
    {
      sub_100051E5C((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      char v19 = sub_100051E74(v26, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_100051FB0((uint64_t)&v25, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v26);
    }
  }
  uint64_t v20 = *(void *)v10;
  int v21 = *(_DWORD **)(*(void *)v10 + 16);
  if (!v21
    || (uint64_t v22 = *(int *)(v20 + 8), (int)v22 >= *v21)
    || (*(_DWORD *)(v20 + 8) = v22 + 1, (uint64_t v23 = *(void *)&v21[2 * v22 + 2]) == 0))
  {
    uint64_t v23 = (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 32))(a4, *a1);
    sub_100064928(*(void *)v10, v23);
  }
  return v23;
}

void sub_10005B22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005B264(uint64_t a1, int a2)
{
  uint64_t result = sub_100053A00(a1, a2);
  uint64_t v3 = result;
  if (!result)
  {
    sub_100051E5C((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 791);
    uint64_t v4 = sub_100051E74(v24, "CHECK failed: extension != NULL: ");
    uint64_t v5 = sub_100051E74(v4, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v23, (const char **)&v5->__r_.__value_.__l.__data_);
    uint64_t result = sub_100051FB8((uint64_t)v24);
  }
  if (!*(unsigned char *)(v3 + 9))
  {
    sub_100051E5C((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 792);
    uint64_t v6 = sub_100051E74(v24, "CHECK failed: extension->is_repeated: ");
    sub_100051FB0((uint64_t)&v23, (const char **)&v6->__r_.__value_.__l.__data_);
    uint64_t result = sub_100051FB8((uint64_t)v24);
  }
  uint64_t v7 = *(unsigned __int8 *)(v3 + 8);
  if ((v7 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v8 = sub_100051E74(v24, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v23, (const char **)&v8->__r_.__value_.__l.__data_);
    uint64_t result = sub_100051FB8((uint64_t)v24);
  }
  switch(v7)
  {
    case 1:
      uint64_t v9 = *(int **)v3;
      int v10 = *v9;
      if (*v9 > 0) {
        goto LABEL_24;
      }
      goto LABEL_23;
    case 2:
      uint64_t v9 = *(int **)v3;
      int v10 = *v9;
      if (*v9 <= 0) {
        goto LABEL_23;
      }
      goto LABEL_24;
    case 3:
    case 16:
    case 18:
      uint64_t v9 = *(int **)v3;
      int v10 = *v9;
      if (*v9 <= 0) {
        goto LABEL_23;
      }
      goto LABEL_24;
    case 4:
    case 6:
      uint64_t v9 = *(int **)v3;
      int v10 = *v9;
      if (*v9 <= 0) {
        goto LABEL_23;
      }
      goto LABEL_24;
    case 5:
    case 15:
    case 17:
      uint64_t v9 = *(int **)v3;
      int v10 = *v9;
      if (*v9 <= 0) {
        goto LABEL_23;
      }
      goto LABEL_24;
    case 7:
    case 13:
      uint64_t v9 = *(int **)v3;
      int v10 = *v9;
      if (*v9 <= 0) {
        goto LABEL_23;
      }
      goto LABEL_24;
    case 8:
      uint64_t v9 = *(int **)v3;
      int v10 = *v9;
      if (*v9 <= 0) {
        goto LABEL_23;
      }
      goto LABEL_24;
    case 9:
    case 12:
      char v12 = *(int **)v3;
      int v13 = v12[2];
      if (v13 <= 0)
      {
        sub_100051E5C((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1773);
        uint64_t v14 = sub_100051E74(v24, "CHECK failed: (current_size_) > (0): ");
        sub_100051FB0((uint64_t)&v23, (const char **)&v14->__r_.__value_.__l.__data_);
        uint64_t result = sub_100051FB8((uint64_t)v24);
        int v13 = v12[2];
      }
      uint64_t v15 = *((void *)v12 + 2);
      uint64_t v16 = v13 - 1;
      std::string v12[2] = v16;
      uint64_t v17 = *(void *)(v15 + 8 * v16 + 8);
      if (*(char *)(v17 + 23) < 0)
      {
        **(unsigned char **)uint64_t v17 = 0;
        *(void *)(v17 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v17 = 0;
        *(unsigned char *)(v17 + 23) = 0;
      }
      return result;
    case 10:
    case 11:
      char v18 = *(int **)v3;
      int v19 = v18[2];
      if (v19 <= 0)
      {
        sub_100051E5C((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1773);
        uint64_t v20 = sub_100051E74(v24, "CHECK failed: (current_size_) > (0): ");
        sub_100051FB0((uint64_t)&v23, (const char **)&v20->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v24);
        int v19 = v18[2];
      }
      uint64_t v21 = *((void *)v18 + 2);
      uint64_t v22 = v19 - 1;
      std::string v18[2] = v22;
      return (*(uint64_t (**)(void))(**(void **)(v21 + 8 * v22 + 8) + 40))(*(void *)(v21 + 8 * v22 + 8));
    case 14:
      uint64_t v9 = *(int **)v3;
      int v10 = *v9;
      if (*v9 <= 0)
      {
LABEL_23:
        sub_100051E5C((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1384);
        char v11 = sub_100051E74(v24, "CHECK failed: (current_size_) > (0): ");
        sub_100051FB0((uint64_t)&v23, (const char **)&v11->__r_.__value_.__l.__data_);
        uint64_t result = sub_100051FB8((uint64_t)v24);
        int v10 = *v9;
      }
LABEL_24:
      int *v9 = v10 - 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_10005B710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005B7B0(uint64_t a1, int a2)
{
  uint64_t v2 = sub_100053A00(a1, a2);
  if (!v2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 830);
    uint64_t v3 = sub_100051E74(v11, "CHECK failed: extension != NULL: ");
    uint64_t v4 = sub_100051E74(v3, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  if (!*(unsigned char *)(v2 + 9))
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 831);
    uint64_t v5 = sub_100051E74(v11, "CHECK failed: extension->is_repeated: ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  uint64_t v6 = *(unsigned __int8 *)(v2 + 8);
  if ((v6 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v7 = sub_100051E74(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  if (dword_100093130[v6] != 10)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 832);
    uint64_t v8 = sub_100051E74(v11, "CHECK failed: cpp_type(extension->type) == WireFormatLite::CPPTYPE_MESSAGE: ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  return sub_100064A5C(*(void *)v2);
}

void sub_10005B910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10005B940(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v6 = sub_100053A00(a1, a2);
  if (!v6)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 838);
    uint64_t v7 = sub_100051E74(v15, "CHECK failed: extension != NULL: ");
    uint64_t v8 = sub_100051E74(v7, "Index out-of-bounds (field is empty).");
    sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  if (!*(unsigned char *)(v6 + 9))
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 839);
    uint64_t v9 = sub_100051E74(v15, "CHECK failed: extension->is_repeated: ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  uint64_t v10 = *(unsigned __int8 *)(v6 + 8);
  if ((v10 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    char v11 = sub_100051E74(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
  }
  switch(v10)
  {
    case 1:
      sub_10007DAD4(*(void *)v6, a3, a4);
      break;
    case 2:
      sub_10007C314(*(void *)v6, a3, a4);
      break;
    case 3:
    case 16:
    case 18:
      sub_100079370(*(void *)v6, a3, a4);
      break;
    case 4:
    case 6:
      sub_10007AB54(*(void *)v6, a3, a4);
      break;
    case 5:
    case 14:
    case 15:
    case 17:
      sub_1000763D0(*(void *)v6, a3, a4);
      break;
    case 7:
    case 13:
      sub_100077BB4(*(void *)v6, a3, a4);
      break;
    case 8:
      sub_100074BE4(*(void *)v6, a3, a4);
      break;
    case 9:
    case 10:
    case 11:
    case 12:
      uint64_t v12 = *(void *)(*(void *)v6 + 16) + 8;
      uint64_t v13 = *(void *)(v12 + 8 * a3);
      *(void *)(v12 + 8 * a3) = *(void *)(v12 + 8 * a4);
      *(void *)(v12 + 8 * a4) = v13;
      break;
    default:
      return;
  }
}

void sub_10005BB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10005BB88(unsigned __int8 *result)
{
  int v1 = (void *)*((void *)result + 2);
  if (*((unsigned __int16 *)result + 4) >= 0x101u)
  {
    uint64_t v6 = (unsigned __int8 *)*v1;
    uint64_t v4 = (unsigned __int8 *)(v1 + 1);
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      do
      {
        uint64_t result = sub_100053A68(v5 + 40);
        uint64_t v7 = (unsigned __int8 *)*((void *)v5 + 1);
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = *(unsigned __int8 **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (unsigned __int8 *)*((void *)v5 + 2);
            BOOL v9 = *(void *)v8 == (void)v5;
            uint64_t v5 = v8;
          }
          while (!v9);
        }
        uint64_t v5 = v8;
      }
      while (v8 != v4);
    }
  }
  else if (*((_WORD *)result + 5))
  {
    uint64_t v2 = 32 * *((unsigned __int16 *)result + 5);
    uint64_t v3 = (unsigned __int8 *)(v1 + 1);
    do
    {
      uint64_t result = sub_100053A68(v3);
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void sub_10005BC28(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + 8) <= 0x100u)
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v6 = *(unsigned __int16 *)(a1 + 10);
    uint64_t v7 = &v5[32 * v6];
    uint64_t v8 = *(void *)(a2 + 16);
    if (v4 > 0x100)
    {
      unint64_t v14 = sub_10005BF80(v5, v7, *(void **)v8, (void *)(v8 + 8));
    }
    else
    {
      uint64_t v9 = *(unsigned __int16 *)(a2 + 10);
      uint64_t v10 = v8 + 32 * v9;
      BOOL v12 = v6 == 0;
      uint64_t v11 = 0;
      BOOL v12 = v12 || v9 == 0;
      if (!v12)
      {
        do
        {
          if (*(_DWORD *)v5 == *(_DWORD *)v8) {
            uint64_t v13 = v5 + 32;
          }
          else {
            uint64_t v13 = v5;
          }
          if (*(_DWORD *)v5 < *(_DWORD *)v8)
          {
            v5 += 32;
          }
          else
          {
            v8 += 32;
            uint64_t v5 = v13;
          }
          ++v11;
        }
        while (v5 != v7 && v8 != v10);
      }
      unint64_t v14 = v11 + ((v10 - v8) >> 5) + ((v7 - v5) >> 5);
    }
    sub_10005BD58((void *)a1, v14);
  }
  uint64_t v15 = *(int **)(a2 + 16);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x101u)
  {
    int v19 = *(void **)v15;
    sub_100064B90(v19, (void *)v15 + 1, (uint64_t *)a1);
  }
  else if (*(_WORD *)(a2 + 10))
  {
    uint64_t v16 = &v15[8 * *(unsigned __int16 *)(a2 + 10)];
    do
    {
      uint64_t v17 = v15 + 2;
      unsigned int v18 = *v15;
      v15 += 8;
      sub_10005C088((uint64_t *)a1, v18, v17);
    }
    while (v15 != v16);
  }
}

void *sub_10005BD58(void *result, unint64_t a2)
{
  unint64_t v2 = *((unsigned __int16 *)result + 4);
  if (v2 <= 0x100 && v2 < a2)
  {
    unsigned int v4 = result;
    do
    {
      if ((_WORD)v2) {
        LOWORD(v2) = 4 * v2;
      }
      else {
        LOWORD(v2) = 1;
      }
    }
    while ((unsigned __int16)v2 < a2);
    uint64_t v5 = (char *)result[2];
    uint64_t v6 = *((unsigned __int16 *)result + 5);
    uint64_t v7 = (uint64_t *)*result;
    if ((unsigned __int16)v2 < 0x101u)
    {
      size_t v8 = 32 * (unsigned __int16)v2;
      if (v7)
      {
        if (v7[3])
        {
          size_t v8 = 32 * (unsigned __int16)v2;
        }
        uint64_t result = (void *)sub_10004E520(v7, v8);
      }
      else
      {
        uint64_t result = operator new[](v8);
      }
      uint64_t v9 = (uint64_t **)result;
      if (v6) {
        uint64_t result = memmove(result, v5, 32 * v6);
      }
    }
    else
    {
      if (!v7) {
        operator new();
      }
      if (v7[3]) {
      uint64_t result = (void *)sub_10004DFA4(v7, 0x18uLL, (uint64_t)sub_100065348);
      }
      uint64_t v9 = (uint64_t **)result;
      result[1] = 0;
      uint64_t v10 = result + 1;
      result[2] = 0;
      *uint64_t result = result + 1;
      if (v6)
      {
        uint64_t v11 = &v5[32 * v6];
        BOOL v12 = v5;
        do
        {
          int v15 = *(_DWORD *)v12;
          long long v13 = *(_OWORD *)(v12 + 8);
          uint64_t v17 = *((void *)v12 + 3);
          long long v16 = v13;
          uint64_t result = sub_100065350(v9, v10, &v15, &v15);
          uint64_t v10 = result;
          v12 += 32;
        }
        while (v12 != v11);
      }
    }
    if (*v4) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = v5 == 0;
    }
    if (!v14) {
      operator delete[]();
    }
    *((_WORD *)v4 + 4) = v2;
    v4[2] = v9;
    if ((unsigned __int16)v2 >= 0x101u) {
      *((_WORD *)v4 + 5) = 0;
    }
  }
  return result;
}

uint64_t sub_10005BF80(char *a1, char *a2, void *a3, void *a4)
{
  uint64_t v4 = 0;
  if (a1 != a2 && a3 != a4)
  {
    uint64_t v4 = 0;
    do
    {
      int v5 = *((_DWORD *)a3 + 8);
      if (*(_DWORD *)a1 >= v5)
      {
        if (*(_DWORD *)a1 == v5)
        {
          a1 += 32;
          uint64_t v6 = (void *)a3[1];
          if (v6)
          {
            do
            {
              a3 = v6;
              uint64_t v6 = (void *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              uint64_t v7 = a3;
              a3 = (void *)a3[2];
            }
            while ((void *)*a3 != v7);
          }
        }
        else
        {
          size_t v8 = (void *)a3[1];
          if (v8)
          {
            do
            {
              a3 = v8;
              size_t v8 = (void *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              uint64_t v9 = a3;
              a3 = (void *)a3[2];
            }
            while ((void *)*a3 != v9);
          }
        }
      }
      else
      {
        a1 += 32;
      }
      ++v4;
    }
    while (a1 != a2 && a3 != a4);
  }
  if (a3 == a4)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = (void *)a3[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)a3[2];
          BOOL v13 = *v12 == (void)a3;
          a3 = v12;
        }
        while (!v13);
      }
      ++v10;
      a3 = v12;
    }
    while (v12 != a4);
  }
  return v4 + ((a2 - a1) >> 5) + v10;
}

void sub_10005C088(uint64_t *a1, uint64_t a2, void *a3)
{
  if (!*((unsigned char *)a3 + 9))
  {
    if (*((unsigned char *)a3 + 10)) {
      return;
    }
    uint64_t v11 = *((unsigned __int8 *)a3 + 8);
    if ((v11 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      BOOL v12 = sub_100051E74(v63, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v62, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v63);
    }
    switch(v11)
    {
      case 1:
        sub_100056FEC((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(double *)a3);
        return;
      case 2:
        sub_1000565E0((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(float *)a3);
        return;
      case 3:
      case 16:
      case 18:
        sub_1000547FC((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
        return;
      case 4:
      case 6:
        sub_100055BE4((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
        return;
      case 5:
      case 15:
      case 17:
        sub_100053DD0((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
        return;
      case 7:
      case 13:
        sub_1000551F0((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
        return;
      case 8:
        sub_1000579F8((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(unsigned char *)a3, a3[2]);
        return;
      case 9:
      case 12:
        int v36 = *((unsigned __int8 *)a3 + 8);
        double v37 = *(double *)a3;
        if (*(char *)(*a3 + 23) < 0)
        {
          sub_1000302DC(__p, **(void ***)&v37, *(void *)(*(void *)&v37 + 8));
        }
        else
        {
          long long v38 = **(_OWORD **)&v37;
          uint64_t v61 = *(void *)(*(void *)&v37 + 16);
          *(_OWORD *)std::string __p = v38;
        }
        sub_10005CE4C(a1, a2, v36, (__n128 *)__p, (uint64_t *)a3[2]);
        if (SHIBYTE(v61) < 0) {
          operator delete(__p[0]);
        }
        return;
      case 10:
      case 11:
        uint64_t v39 = (uint64_t *)a3[2];
        int v40 = sub_10005D140((uint64_t)a1, a2);
        uint64_t v41 = v40;
        void v40[2] = v39;
        if (v42)
        {
          *((unsigned char *)v40 + 8) = *((unsigned char *)a3 + 8);
          *((unsigned char *)v40 + 11) = *((unsigned char *)a3 + 11);
          *((unsigned char *)v40 + 9) = 0;
          char v43 = *((unsigned char *)v40 + 10) & 0xF;
          if ((*((unsigned char *)a3 + 10) & 0x10) == 0)
          {
            *((unsigned char *)v40 + 1sub_10002F6CC(&a9, 0) = v43;
            uint64_t v44 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 32))(*a3, *a1);
            *uint64_t v41 = v44;
LABEL_120:
            (*(void (**)(uint64_t, void))(*(void *)v44 + 64))(v44, *a3);
            goto LABEL_126;
          }
          *((unsigned char *)v40 + 1sub_10002F6CC(&a9, 0) = v43 | 0x10;
          uint64_t v59 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 16))(*a3, *a1);
          *uint64_t v41 = v59;
          (*(void (**)(uint64_t, void))(*(void *)v59 + 104))(v59, *a3);
        }
        else
        {
          if (*((unsigned __int8 *)v40 + 8) != *((unsigned __int8 *)a3 + 8))
          {
            sub_100051E5C((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1026);
            int v53 = sub_100051E74(v63, "CHECK failed: (extension->type) == (other_extension.type): ");
            sub_100051FB0((uint64_t)&v62, (const char **)&v53->__r_.__value_.__l.__data_);
            sub_100051FB8((uint64_t)v63);
          }
          if (*((unsigned __int8 *)v41 + 11) != *((unsigned __int8 *)a3 + 11))
          {
            sub_100051E5C((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1027);
            uint64_t v54 = sub_100051E74(v63, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
            sub_100051FB0((uint64_t)&v62, (const char **)&v54->__r_.__value_.__l.__data_);
            sub_100051FB8((uint64_t)v63);
          }
          if (*((unsigned char *)v41 + 9))
          {
            sub_100051E5C((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1028);
            uint64_t v55 = sub_100051E74(v63, "CHECK failed: !extension->is_repeated: ");
            sub_100051FB0((uint64_t)&v62, (const char **)&v55->__r_.__value_.__l.__data_);
            sub_100051FB8((uint64_t)v63);
          }
          uint64_t v56 = (uint64_t *)*v41;
          double v57 = *(double *)a3;
          if ((*((unsigned char *)a3 + 10) & 0x10) != 0)
          {
            if ((*((unsigned char *)v41 + 10) & 0x10) != 0)
            {
              (*(void (**)(void, double))(*v56 + 104))(*v41, COERCE_DOUBLE(*(void *)&v57));
              goto LABEL_126;
            }
            double v57 = COERCE_DOUBLE((*(uint64_t (**)(void, void))(**(void **)&v57 + 24))(*a3, *v41));
            uint64_t v58 = *v56;
          }
          else
          {
            uint64_t v58 = *v56;
            if ((*((unsigned char *)v41 + 10) & 0x10) != 0)
            {
              uint64_t v44 = (*(uint64_t (**)(void, double))(v58 + 32))(*v41, COERCE_DOUBLE(*(void *)&v57));
              goto LABEL_120;
            }
          }
          (*(void (**)(uint64_t *, double))(v58 + 64))(v56, COERCE_DOUBLE(*(void *)&v57));
        }
LABEL_126:
        *((unsigned char *)v41 + 10) &= 0xF0u;
        return;
      case 14:
        sub_100058924((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
        return;
      default:
        return;
    }
  }
  uint64_t v6 = (uint64_t *)a3[2];
  uint64_t v7 = sub_10005D140((uint64_t)a1, a2);
  size_t v8 = (uint64_t *)v7;
  std::string v7[2] = v6;
  uint64_t v10 = v9;
  if (v9)
  {
    *((unsigned char *)v7 + 8) = *((unsigned char *)a3 + 8);
    *((unsigned char *)v7 + 11) = *((unsigned char *)a3 + 11);
    *((unsigned char *)v7 + 9) = 1;
  }
  else
  {
    if (*((unsigned __int8 *)v7 + 8) != *((unsigned __int8 *)a3 + 8))
    {
      sub_100051E5C((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 931);
      BOOL v13 = sub_100051E74(v63, "CHECK failed: (extension->type) == (other_extension.type): ");
      sub_100051FB0((uint64_t)&v62, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v63);
    }
    if (*((unsigned __int8 *)v8 + 11) != *((unsigned __int8 *)a3 + 11))
    {
      sub_100051E5C((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 932);
      BOOL v14 = sub_100051E74(v63, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
      sub_100051FB0((uint64_t)&v62, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v63);
    }
    if (!*((unsigned char *)v8 + 9))
    {
      sub_100051E5C((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 933);
      int v15 = sub_100051E74(v63, "CHECK failed: extension->is_repeated: ");
      sub_100051FB0((uint64_t)&v62, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v63);
    }
  }
  uint64_t v16 = *((unsigned __int8 *)a3 + 8);
  if ((v16 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v17 = sub_100051E74(v63, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v62, (const char **)&v17->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v63);
  }
  switch(v16)
  {
    case 1:
      if (v10)
      {
        uint64_t v26 = *a1;
        if (!v26) {
          operator new();
        }
        if (*(unsigned char *)(v26 + 24)) {
        unint64_t v27 = sub_10004DFA4((void *)v26, 0x10uLL, (uint64_t)sub_100064618);
        }
        *(void *)unint64_t v27 = 0;
        *(void *)(v27 + 8) = v26;
        *size_t v8 = v27;
      }
      else
      {
        unint64_t v27 = *v8;
      }
      sub_10007D630((int *)v27, (int *)*a3);
      break;
    case 2:
      if (v10)
      {
        uint64_t v28 = *a1;
        if (!v28) {
          operator new();
        }
        if (*(unsigned char *)(v28 + 24)) {
        unint64_t v29 = sub_10004DFA4((void *)v28, 0x10uLL, (uint64_t)sub_100064614);
        }
        *(void *)unint64_t v29 = 0;
        *(void *)(v29 + 8) = v28;
        *size_t v8 = v29;
      }
      else
      {
        unint64_t v29 = *v8;
      }
      sub_10007BE70((int *)v29, (int *)*a3);
      break;
    case 3:
    case 16:
    case 18:
      if (v10)
      {
        uint64_t v20 = *a1;
        if (!v20) {
          operator new();
        }
        if (*(unsigned char *)(v20 + 24)) {
        unint64_t v21 = sub_10004DFA4((void *)v20, 0x10uLL, (uint64_t)sub_100064608);
        }
        *(void *)unint64_t v21 = 0;
        *(void *)(v21 + 8) = v20;
        *size_t v8 = v21;
      }
      else
      {
        unint64_t v21 = *v8;
      }
      sub_100078ED4((int *)v21, (int *)*a3);
      break;
    case 4:
    case 6:
      if (v10)
      {
        uint64_t v24 = *a1;
        if (!v24) {
          operator new();
        }
        if (*(unsigned char *)(v24 + 24)) {
        unint64_t v25 = sub_10004DFA4((void *)v24, 0x10uLL, (uint64_t)sub_100064610);
        }
        *(void *)unint64_t v25 = 0;
        *(void *)(v25 + 8) = v24;
        *size_t v8 = v25;
      }
      else
      {
        unint64_t v25 = *v8;
      }
      sub_10007A6B8((int *)v25, (int *)*a3);
      break;
    case 5:
    case 14:
    case 15:
    case 17:
      if (v10)
      {
        uint64_t v18 = *a1;
        if (!v18) {
          operator new();
        }
        if (*(unsigned char *)(v18 + 24)) {
        unint64_t v19 = sub_10004DFA4((void *)v18, 0x10uLL, (uint64_t)sub_100064604);
        }
        *(void *)unint64_t v19 = 0;
        *(void *)(v19 + 8) = v18;
        *size_t v8 = v19;
      }
      else
      {
        unint64_t v19 = *v8;
      }
      sub_100075F34((int *)v19, (int *)*a3);
      break;
    case 7:
    case 13:
      if (v10)
      {
        uint64_t v22 = *a1;
        if (!v22) {
          operator new();
        }
        if (*(unsigned char *)(v22 + 24)) {
        unint64_t v23 = sub_10004DFA4((void *)v22, 0x10uLL, (uint64_t)sub_10006460C);
        }
        *(void *)unint64_t v23 = 0;
        *(void *)(v23 + 8) = v22;
        *size_t v8 = v23;
      }
      else
      {
        unint64_t v23 = *v8;
      }
      sub_100077718((int *)v23, (int *)*a3);
      break;
    case 8:
      if (v10)
      {
        uint64_t v30 = *a1;
        if (!v30) {
          operator new();
        }
        if (*(unsigned char *)(v30 + 24)) {
        unint64_t v31 = sub_10004DFA4((void *)v30, 0x10uLL, (uint64_t)sub_10006461C);
        }
        *(void *)unint64_t v31 = 0;
        *(void *)(v31 + 8) = v30;
        *size_t v8 = v31;
      }
      else
      {
        unint64_t v31 = *v8;
      }
      sub_10007473C((int *)v31, (int *)*a3);
      break;
    case 9:
    case 12:
      if (v10)
      {
        uint64_t v32 = *a1;
        if (!v32) {
          operator new();
        }
        if (*(unsigned char *)(v32 + 24)) {
        uint64_t v33 = (void *)sub_10004DFA4((void *)v32, 0x18uLL, (uint64_t)sub_100064620);
        }
        v33[2] = 0;
        void *v33 = v32;
        v33[1] = 0;
        *size_t v8 = (uint64_t)v33;
      }
      else
      {
        uint64_t v33 = (void *)*v8;
      }
      sub_100048C9C((uint64_t)v33, *a3);
      break;
    case 10:
    case 11:
      if (v10)
      {
        uint64_t v34 = *a1;
        if (!*a1) {
          operator new();
        }
        if (*(unsigned char *)(v34 + 24)) {
        unint64_t v35 = (void *)sub_10004DFA4((void *)v34, 0x18uLL, (uint64_t)sub_100064624);
        }
        v35[2] = 0;
        void *v35 = v34;
        v35[1] = 0;
        *size_t v8 = (uint64_t)v35;
      }
      double v45 = *(double *)a3;
      if (*(int *)(*(void *)&v45 + 8) >= 1)
      {
        int v46 = 0;
        do
        {
          uint64_t v47 = sub_100064768(*(uint64_t *)&v45, v46);
          uint64_t v48 = v47;
          uint64_t v49 = *v8;
          int v50 = *(_DWORD **)(*v8 + 16);
          if (!v50
            || (uint64_t v51 = *(int *)(v49 + 8), (int)v51 >= *v50)
            || (*(_DWORD *)(v49 + 8) = v51 + 1, (uint64_t v52 = *(void *)&v50[2 * v51 + 2]) == 0))
          {
            uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v47 + 32))(v47, *a1);
            sub_100064928(*v8, v52);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v52 + 64))(v52, v48);
          ++v46;
        }
        while (v46 < *(_DWORD *)(*(void *)&v45 + 8));
      }
      break;
    default:
      return;
  }
}

void sub_10005CD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

__n128 sub_10005CE4C(uint64_t *a1, uint64_t a2, int a3, __n128 *a4, uint64_t *a5)
{
  uint64_t v6 = sub_100059318(a1, a2, a3, a5);
  uint64_t v7 = (__n128 *)v6;
  if (*(char *)(v6 + 23) < 0) {
    operator delete(*(void **)v6);
  }
  __n128 result = *a4;
  v7[1].n128_u64[0] = a4[1].n128_u64[0];
  *uint64_t v7 = result;
  a4[1].n128_u8[7] = 0;
  a4->n128_u8[0] = 0;
  return result;
}

uint64_t sub_10005CEA0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (unsigned __int8 *)result;
  if (*(void *)result == *(void *)a2)
  {
    __int16 v4 = *(_WORD *)(result + 8);
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    *(_WORD *)(a2 + 8) = v4;
    __int16 v5 = *(_WORD *)(result + 10);
    *(_WORD *)(result + 1sub_10002F6CC(&a9, 0) = *(_WORD *)(a2 + 10);
    *(_WORD *)(a2 + 1sub_10002F6CC(&a9, 0) = v5;
    uint64_t v6 = *(void *)(result + 16);
    *(void *)(result + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = v6;
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    sub_10005BC28((uint64_t)&v7, a2);
    sub_10005BB88((unsigned __int8 *)a2);
    sub_10005BC28(a2, (uint64_t)v3);
    sub_10005BB88(v3);
    sub_10005BC28((uint64_t)v3, (uint64_t)&v7);
    return sub_100053498((uint64_t)&v7);
  }
  return result;
}

void sub_10005CF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100053498((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005CF6C(uint64_t result, uint64_t *a2, uint64_t a3)
{
  if ((uint64_t *)result != a2)
  {
    __int16 v5 = (uint64_t *)result;
    uint64_t v6 = sub_100053A00(result, a3);
    __n128 result = sub_100053A00((uint64_t)a2, a3);
    if (v6 | result)
    {
      uint64_t v7 = result;
      if (v6 && result)
      {
        if (*v5 == *a2)
        {
          uint64_t v9 = *(void *)(v6 + 16);
          long long v10 = *(_OWORD *)v6;
          uint64_t v11 = *(void *)(result + 16);
          *(_OWORD *)uint64_t v6 = *(_OWORD *)result;
          *(void *)(v6 + 16) = v11;
          *(_OWORD *)__n128 result = v10;
          *(void *)(result + 16) = v9;
        }
        else
        {
          uint64_t v17 = 0;
          int v18 = 0;
          uint64_t v19 = 0;
          sub_10005C088(&v17, a3, (void *)result);
          int v8 = (void *)sub_100053A00((uint64_t)&v17, a3);
          sub_100053A68((unsigned __int8 *)v7);
          sub_10005C088(a2, a3, (void *)v6);
          sub_100053A68((unsigned __int8 *)v6);
          sub_10005C088(v5, a3, v8);
          return sub_100053498((uint64_t)&v17);
        }
      }
      else
      {
        if (v6)
        {
          if (result) {
            return result;
          }
          if (*v5 == *a2)
          {
            int v15 = sub_10005D140((uint64_t)a2, a3);
            uint64_t v16 = *(uint64_t **)(v6 + 16);
            *(_OWORD *)int v15 = *(_OWORD *)v6;
            std::string v15[2] = v16;
          }
          else
          {
            sub_10005C088(a2, a3, (void *)v6);
          }
          uint64_t v14 = (uint64_t)v5;
        }
        else
        {
          if (*v5 == *a2)
          {
            BOOL v12 = sub_10005D140((uint64_t)v5, a3);
            BOOL v13 = *(uint64_t **)(v7 + 16);
            *(_OWORD *)BOOL v12 = *(_OWORD *)v7;
            std::string v12[2] = v13;
          }
          else
          {
            sub_10005C088(v5, a3, (void *)result);
          }
          uint64_t v14 = (uint64_t)a2;
        }
        return (uint64_t)sub_10005A974(v14, a3);
      }
    }
  }
  return result;
}

void sub_10005D128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100053498((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_10005D140(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
  __int16 v4 = *(uint64_t ***)(a1 + 16);
  if (v3 >= 0x101)
  {
    *((void *)&v14 + 1) = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    LODWORD(v14) = a2;
    return sub_10006528C(v4, (int *)&v14, &v14) + 5;
  }
  uint64_t v6 = *(unsigned __int16 *)(a1 + 10);
  uint64_t v7 = &v4[4 * v6];
  if (!*(_WORD *)(a1 + 10))
  {
    if (!*(_WORD *)(a1 + 8)) {
      goto LABEL_18;
    }
    LOWORD(v6) = 0;
LABEL_17:
    *(_WORD *)(a1 + 1sub_10002F6CC(&a9, 0) = v6 + 1;
    *(_DWORD *)uint64_t v7 = a2;
    v7[1] = 0;
    __n128 result = v7 + 1;
    std::string v7[2] = 0;
    v7[3] = 0;
    return result;
  }
  unint64_t v8 = *(unsigned __int16 *)(a1 + 10);
  do
  {
    unint64_t v9 = v8 >> 1;
    long long v10 = (int *)&v4[4 * (v8 >> 1)];
    int v12 = *v10;
    uint64_t v11 = (uint64_t **)(v10 + 8);
    v8 += ~(v8 >> 1);
    if (v12 < (int)a2) {
      __int16 v4 = v11;
    }
    else {
      unint64_t v8 = v9;
    }
  }
  while (v8);
  if (v4 != v7)
  {
    if (*(_DWORD *)v4 == a2) {
      return v4 + 1;
    }
    if (v6 < v3)
    {
      memmove(v4 + 4, v4, (char *)v7 - (char *)v4);
      LOWORD(v6) = *(_WORD *)(a1 + 10);
      uint64_t v7 = v4;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (v6 < v3) {
    goto LABEL_17;
  }
LABEL_18:
  sub_10005BD58((void *)a1, v6 + 1);
  return (uint64_t **)sub_10005D140(a1, a2);
}

uint64_t sub_10005D28C(uint64_t a1)
{
  int v1 = *(void **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    unint64_t v8 = (unsigned __int8 *)*v1;
    uint64_t v7 = (unsigned __int8 *)(v1 + 1);
    uint64_t v6 = v8;
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      do
      {
        uint64_t v4 = sub_10005D360(v6 + 40);
        if (!v4) {
          break;
        }
        unint64_t v9 = (unsigned __int8 *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
            long long v10 = v9;
            unint64_t v9 = *(unsigned __int8 **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            long long v10 = (unsigned __int8 *)*((void *)v6 + 2);
            BOOL v11 = *(void *)v10 == (void)v6;
            uint64_t v6 = v10;
          }
          while (!v11);
        }
        uint64_t v6 = v10;
      }
      while (v10 != v7);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v3 = *(void *)(a1 + 16) + 32 * *(unsigned __int16 *)(a1 + 10);
      uint64_t v4 = v1 == (void *)v3;
      if (v1 == (void *)v3) {
        break;
      }
      __int16 v5 = (unsigned __int8 *)(v1 + 1);
      if (!sub_10005D360(v5)) {
        break;
      }
      int v1 = v5 + 24;
      if (*(unsigned __int16 *)(a1 + 8) > 0x100u) {
        sub_100065AB4();
      }
    }
  }
  return v4;
}

uint64_t sub_10005D360(unsigned __int8 *a1)
{
  uint64_t v2 = a1[8];
  if ((v2 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v3 = sub_100051E74(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v9, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v10);
  }
  if (dword_100093130[v2] != 10) {
    return 1;
  }
  if (a1[9])
  {
    uint64_t v4 = *(void *)a1;
    if (*(int *)(*(void *)a1 + 8) >= 1)
    {
      int v5 = 0;
      while (1)
      {
        uint64_t v6 = sub_100064768(v4, v5);
        if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6) & 1) == 0) {
          break;
        }
        ++v5;
        uint64_t v4 = *(void *)a1;
        if (v5 >= *(_DWORD *)(*(void *)a1 + 8)) {
          return 1;
        }
      }
      return 0;
    }
    return 1;
  }
  if (a1[10]) {
    return 1;
  }
  uint64_t v7 = **(void **)a1;
  if ((a1[10] & 0x10) != 0) {
    return ((*(uint64_t (**)(void))(v7 + 72))() & 1) != 0;
  }
  uint64_t result = (*(uint64_t (**)(void))(v7 + 48))();
  if (result) {
    return 1;
  }
  return result;
}

void sub_10005D4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005D4D0(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4, unsigned __int8 *a5, unsigned char *a6)
{
  uint64_t v7 = a2 >> 3;
  *a4 = v7;
  return sub_10005D4E8(a1, a2 & 7, v7, a3, a5, a6);
}

uint64_t sub_10005D4E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned char *a6)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)a4 + 16))(a4, a3, a5);
  if (result)
  {
    uint64_t v10 = *a5;
    if ((v10 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      BOOL v11 = sub_100051E74(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v15);
    }
    unsigned int v12 = dword_10009317C[v10];
    *a6 = 0;
    if (a2 == 2 && a5[1])
    {
      if (v12 > 5)
      {
        sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 82);
        BOOL v13 = sub_100051E74(v15, "can't reach here.");
        sub_100051FB0((uint64_t)&v14, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v15);
      }
      else
      {
        uint64_t result = 1;
        if (((1 << v12) & 0x1C) == 0)
        {
          *a6 = 1;
          return result;
        }
      }
    }
    return v12 == a2;
  }
  return result;
}

void sub_10005D624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005D644(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v12 = 0;
  uint64_t v9 = a2 >> 3;
  if (sub_10005D4E8((uint64_t)a1, a2 & 7, v9, a4, v11, &v12)) {
    return sub_10005D6F8(a1, v9, v12, (uint64_t)v11, a3, a5);
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a5 + 16))(a5, a3, a2);
  }
}

uint64_t sub_10005D6F8(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3)
  {
    BOOL v11 = *(char **)a5;
    if (*(void *)a5 >= *(void *)(a5 + 8))
    {
      int v12 = 0;
    }
    else
    {
      int v12 = *v11;
      if ((*v11 & 0x80000000) == 0)
      {
        *(void *)a5 = v11 + 1;
        goto LABEL_109;
      }
    }
    uint64_t v99 = sub_100050114((uint64_t *)a5, v12);
    int v12 = v99;
    if ((v99 & 0x8000000000000000) == 0)
    {
LABEL_109:
      int v100 = sub_10004F2B8(a5, v12);
      switch(*(unsigned char *)a4)
      {
        case 1:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          while (2)
          {
            v142[0].__r_.__value_.__r.__words[0] = 0;
            unint64_t v113 = *(uint64_t **)a5;
            if ((int)(*(_DWORD *)(a5 + 8) - *(void *)a5) >= 8)
            {
              double v114 = *(double *)v113;
              *(void *)a5 = v113 + 1;
              goto LABEL_148;
            }
            uint64_t result = sub_10004FD8C(a5, v142);
            if (result)
            {
              double v114 = *(double *)&v142[0].__r_.__value_.__l.__data_;
LABEL_148:
              sub_100057558(a1, a2, 1, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v114);
              if ((int)sub_10004F55C((_DWORD *)a5) <= 0) {
                goto LABEL_111;
              }
              continue;
            }
            return result;
          }
        case 2:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          while (2)
          {
            LODWORD(v142[0].__r_.__value_.__l.__data_) = 0;
            unint64_t v115 = *(float **)a5;
            if ((int)(*(_DWORD *)(a5 + 8) - *(void *)a5) >= 4)
            {
              float v116 = *v115;
              *(void *)a5 = v115 + 1;
              goto LABEL_155;
            }
            uint64_t result = sub_10004FD24(a5, v142);
            if (result)
            {
              float v116 = *(float *)&v142[0].__r_.__value_.__l.__data_;
LABEL_155:
              sub_100056B4C(a1, a2, 2, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v116);
              if ((int)sub_10004F55C((_DWORD *)a5) <= 0) {
                goto LABEL_111;
              }
              continue;
            }
            return result;
          }
        case 3:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          do
          {
            unint64_t v117 = *(char **)a5;
            if (*(void *)a5 >= *(void *)(a5 + 8) || *v117 < 0)
            {
              unint64_t v119 = sub_10004FE4C(a5);
              if ((v120 & 1) == 0) {
                return 0;
              }
              uint64_t v118 = v119;
            }
            else
            {
              uint64_t v118 = *v117;
              *(void *)a5 = v117 + 1;
            }
            sub_100054D60(a1, a2, 3, *(unsigned __int8 *)(a4 + 2), v118, *(uint64_t **)(a4 + 24));
          }
          while ((int)sub_10004F55C((_DWORD *)a5) > 0);
          goto LABEL_111;
        case 4:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          do
          {
            uint64_t v121 = *(char **)a5;
            if (*(void *)a5 >= *(void *)(a5 + 8) || *v121 < 0)
            {
              unint64_t v123 = sub_10004FE4C(a5);
              if ((v124 & 1) == 0) {
                return 0;
              }
              uint64_t v122 = v123;
            }
            else
            {
              uint64_t v122 = *v121;
              *(void *)a5 = v121 + 1;
            }
            sub_100056148(a1, a2, 4, *(unsigned __int8 *)(a4 + 2), v122, *(uint64_t **)(a4 + 24));
          }
          while ((int)sub_10004F55C((_DWORD *)a5) > 0);
          goto LABEL_111;
        case 5:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          while (1)
          {
            unint64_t v102 = *(char **)a5;
            if (*(void *)a5 >= *(void *)(a5 + 8)) {
              break;
            }
            int v103 = *v102;
            if (*v102 < 0) {
              goto LABEL_119;
            }
            *(void *)a5 = v102 + 1;
LABEL_120:
            sub_10005436C(a1, a2, 5, *(unsigned __int8 *)(a4 + 2), v103, *(uint64_t **)(a4 + 24));
            if ((int)sub_10004F55C((_DWORD *)a5) <= 0) {
              goto LABEL_111;
            }
          }
          int v103 = 0;
LABEL_119:
          uint64_t v104 = sub_100050114((uint64_t *)a5, v103);
          int v103 = v104;
          if (v104 < 0) {
            return 0;
          }
          goto LABEL_120;
        case 6:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          while (2)
          {
            v142[0].__r_.__value_.__r.__words[0] = 0;
            uint64_t v125 = *(uint64_t **)a5;
            if ((int)(*(_DWORD *)(a5 + 8) - *(void *)a5) >= 8)
            {
              uint64_t v126 = *v125;
              v142[0].__r_.__value_.__r.__words[0] = *v125;
              *(void *)a5 = v125 + 1;
              goto LABEL_178;
            }
            uint64_t result = sub_10004FD8C(a5, v142);
            if (result)
            {
              uint64_t v126 = v142[0].__r_.__value_.__r.__words[0];
LABEL_178:
              sub_100056148(a1, a2, 6, *(unsigned __int8 *)(a4 + 2), v126, *(uint64_t **)(a4 + 24));
              if ((int)sub_10004F55C((_DWORD *)a5) <= 0) {
                goto LABEL_111;
              }
              continue;
            }
            return result;
          }
        case 7:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          while (2)
          {
            LODWORD(v142[0].__r_.__value_.__l.__data_) = 0;
            int v127 = *(int **)a5;
            if ((int)(*(_DWORD *)(a5 + 8) - *(void *)a5) >= 4)
            {
              int data = *v127;
              LODWORD(v142[0].__r_.__value_.__l.__data_) = *v127;
              *(void *)a5 = v127 + 1;
              goto LABEL_185;
            }
            uint64_t result = sub_10004FD24(a5, v142);
            if (result)
            {
              int data = (int)v142[0].__r_.__value_.__l.__data_;
LABEL_185:
              sub_100055754(a1, a2, 7, *(unsigned __int8 *)(a4 + 2), data, *(uint64_t **)(a4 + 24));
              if ((int)sub_10004F55C((_DWORD *)a5) <= 0) {
                goto LABEL_111;
              }
              continue;
            }
            return result;
          }
        case 8:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          do
          {
            v129 = *(char **)a5;
            if (*(void *)a5 >= *(void *)(a5 + 8) || *v129 < 0)
            {
              unint64_t v130 = sub_10004FE4C(a5);
              if ((v131 & 1) == 0) {
                return 0;
              }
            }
            else
            {
              unint64_t v130 = *v129;
              *(void *)a5 = v129 + 1;
            }
            sub_100057F5C(a1, a2, 8, *(unsigned __int8 *)(a4 + 2), v130 != 0, *(uint64_t **)(a4 + 24));
          }
          while ((int)sub_10004F55C((_DWORD *)a5) > 0);
          goto LABEL_111;
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          sub_100051E5C((uint64_t)v142, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1277);
          uint64_t v101 = sub_100051E74(v142, "Non-primitive types can't be packed.");
          sub_100051FB0((uint64_t)&v141, (const char **)&v101->__r_.__value_.__l.__data_);
          sub_100051FB8((uint64_t)v142);
          goto LABEL_111;
        case 0xD:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          while (1)
          {
            int v105 = *(char **)a5;
            if (*(void *)a5 >= *(void *)(a5 + 8)) {
              break;
            }
            int v106 = *v105;
            if (*v105 < 0) {
              goto LABEL_127;
            }
            *(void *)a5 = v105 + 1;
LABEL_128:
            sub_100055754(a1, a2, 13, *(unsigned __int8 *)(a4 + 2), v106, *(uint64_t **)(a4 + 24));
            if ((int)sub_10004F55C((_DWORD *)a5) <= 0) {
              goto LABEL_111;
            }
          }
          int v106 = 0;
LABEL_127:
          uint64_t v107 = sub_100050114((uint64_t *)a5, v106);
          int v106 = v107;
          if (v107 < 0) {
            return 0;
          }
          goto LABEL_128;
        case 0xE:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          while (1)
          {
            uint64_t v132 = *(char **)a5;
            if (*(void *)a5 >= *(void *)(a5 + 8)) {
              break;
            }
            uint64_t v133 = *v132;
            if (*v132 < 0) {
              goto LABEL_201;
            }
            *(void *)a5 = v132 + 1;
LABEL_202:
            if ((*(unsigned int (**)(void, uint64_t))(a4 + 8))(*(void *)(a4 + 16), v133)) {
              sub_100058E88(a1, a2, 14, *(unsigned __int8 *)(a4 + 2), v133, *(uint64_t **)(a4 + 24));
            }
            else {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 32))(a6, a2, v133);
            }
            if ((int)sub_10004F55C((_DWORD *)a5) <= 0) {
              goto LABEL_111;
            }
          }
          LODWORD(v133) = 0;
LABEL_201:
          uint64_t v133 = sub_100050114((uint64_t *)a5, v133);
          if (v133 < 0) {
            return 0;
          }
          goto LABEL_202;
        case 0xF:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          while (2)
          {
            LODWORD(v142[0].__r_.__value_.__l.__data_) = 0;
            uint64_t v108 = *(int **)a5;
            if ((int)(*(_DWORD *)(a5 + 8) - *(void *)a5) >= 4)
            {
              int v109 = *v108;
              *(void *)a5 = v108 + 1;
              goto LABEL_133;
            }
            uint64_t result = sub_10004FD24(a5, v142);
            if (result)
            {
              int v109 = (int)v142[0].__r_.__value_.__l.__data_;
LABEL_133:
              sub_10005436C(a1, a2, 15, *(unsigned __int8 *)(a4 + 2), v109, *(uint64_t **)(a4 + 24));
              if ((int)sub_10004F55C((_DWORD *)a5) <= 0) {
                goto LABEL_111;
              }
              continue;
            }
            return result;
          }
        case 0x10:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          while (2)
          {
            v142[0].__r_.__value_.__r.__words[0] = 0;
            uint64_t v134 = *(uint64_t **)a5;
            if ((int)(*(_DWORD *)(a5 + 8) - *(void *)a5) >= 8)
            {
              uint64_t v135 = *v134;
              *(void *)a5 = v134 + 1;
              goto LABEL_210;
            }
            uint64_t result = sub_10004FD8C(a5, v142);
            if (result)
            {
              uint64_t v135 = v142[0].__r_.__value_.__r.__words[0];
LABEL_210:
              sub_100054D60(a1, a2, 16, *(unsigned __int8 *)(a4 + 2), v135, *(uint64_t **)(a4 + 24));
              if ((int)sub_10004F55C((_DWORD *)a5) <= 0) {
                goto LABEL_111;
              }
              continue;
            }
            return result;
          }
        case 0x11:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          break;
        case 0x12:
          if ((int)sub_10004F55C((_DWORD *)a5) < 1) {
            goto LABEL_111;
          }
          do
          {
            unint64_t v136 = *(char **)a5;
            if (*(void *)a5 >= *(void *)(a5 + 8) || *v136 < 0)
            {
              unint64_t v137 = sub_10004FE4C(a5);
              if ((v138 & 1) == 0) {
                return 0;
              }
            }
            else
            {
              unint64_t v137 = *v136;
              *(void *)a5 = v136 + 1;
            }
            sub_100054D60(a1, a2, 18, *(unsigned __int8 *)(a4 + 2), -(uint64_t)(v137 & 1) ^ (v137 >> 1), *(uint64_t **)(a4 + 24));
          }
          while ((int)sub_10004F55C((_DWORD *)a5) > 0);
LABEL_111:
          sub_10004F330(a5, v100);
          return 1;
        default:
          goto LABEL_111;
      }
      while (1)
      {
        char v110 = *(char **)a5;
        if (*(void *)a5 >= *(void *)(a5 + 8)) {
          break;
        }
        unsigned int v111 = *v110;
        if (*v110 < 0) {
          goto LABEL_142;
        }
        *(void *)a5 = v110 + 1;
LABEL_143:
        sub_10005436C(a1, a2, 17, *(unsigned __int8 *)(a4 + 2), -(v111 & 1) ^ (v111 >> 1), *(uint64_t **)(a4 + 24));
        if ((int)sub_10004F55C((_DWORD *)a5) <= 0) {
          goto LABEL_111;
        }
      }
      unsigned int v111 = 0;
LABEL_142:
      uint64_t v112 = sub_100050114((uint64_t *)a5, v111);
      unsigned int v111 = v112;
      if (v112 < 0) {
        return 0;
      }
      goto LABEL_143;
    }
    return 0;
  }
  else
  {
    switch(*(unsigned char *)a4)
    {
      case 1:
        v142[0].__r_.__value_.__r.__words[0] = 0;
        BOOL v13 = *(uint64_t **)a5;
        if ((int)(*(_DWORD *)(a5 + 8) - *(void *)a5) < 8)
        {
          uint64_t result = sub_10004FD8C(a5, v142);
          if (!result) {
            return result;
          }
          double v14 = *(double *)&v142[0].__r_.__value_.__l.__data_;
        }
        else
        {
          double v14 = *(double *)v13;
          *(void *)a5 = v13 + 1;
        }
        if (*(unsigned char *)(a4 + 1)) {
          sub_100057558(a1, a2, 1, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v14);
        }
        else {
          sub_100056FEC((uint64_t)a1, a2, 1, *(void *)(a4 + 24), v14);
        }
        return 1;
      case 2:
        LODWORD(v142[0].__r_.__value_.__l.__data_) = 0;
        uint64_t v15 = *(uint64_t **)a5;
        if ((int)(*(_DWORD *)(a5 + 8) - *(void *)a5) < 4)
        {
          uint64_t result = sub_10004FD24(a5, v142);
          if (!result) {
            return result;
          }
          float v16 = *(float *)&v142[0].__r_.__value_.__l.__data_;
        }
        else
        {
          float v16 = *(float *)v15;
          *(void *)a5 = (char *)v15 + 4;
        }
        if (*(unsigned char *)(a4 + 1)) {
          sub_100056B4C(a1, a2, 2, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v16);
        }
        else {
          sub_1000565E0((uint64_t)a1, a2, 2, *(void *)(a4 + 24), v16);
        }
        return 1;
      case 3:
        uint64_t v17 = *(char **)a5;
        if (*(void *)a5 >= *(void *)(a5 + 8) || *v17 < 0)
        {
          unint64_t v66 = sub_10004FE4C(a5);
          if ((v67 & 1) == 0) {
            return 0;
          }
          uint64_t v18 = v66;
        }
        else
        {
          uint64_t v18 = *v17;
          *(void *)a5 = v17 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v57 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v58 = *(uint64_t **)(a4 + 24);
          uint64_t v59 = a1;
          uint64_t v60 = a2;
          int v61 = 3;
          goto LABEL_79;
        }
        uint64_t v95 = *(void *)(a4 + 24);
        uint64_t v96 = (uint64_t)a1;
        uint64_t v97 = a2;
        int v98 = 3;
        goto LABEL_106;
      case 4:
        uint64_t v19 = *(char **)a5;
        if (*(void *)a5 >= *(void *)(a5 + 8) || *v19 < 0)
        {
          unint64_t v68 = sub_10004FE4C(a5);
          if ((v69 & 1) == 0) {
            return 0;
          }
          uint64_t v20 = v68;
        }
        else
        {
          uint64_t v20 = *v19;
          *(void *)a5 = v19 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v24 = *(unsigned __int8 *)(a4 + 2);
          unint64_t v25 = *(uint64_t **)(a4 + 24);
          uint64_t v26 = a1;
          uint64_t v27 = a2;
          int v28 = 4;
          goto LABEL_72;
        }
        uint64_t v83 = (uint64_t)a1;
        uint64_t v84 = a2;
        int v85 = 4;
        uint64_t v81 = v20;
        uint64_t v82 = *(void *)(a4 + 24);
        goto LABEL_103;
      case 5:
        unint64_t v21 = *(char **)a5;
        if (*(void *)a5 >= *(void *)(a5 + 8))
        {
          LODWORD(v22) = 0;
        }
        else
        {
          LODWORD(v22) = *v21;
          if ((*v21 & 0x80000000) == 0)
          {
            *(void *)a5 = v21 + 1;
            goto LABEL_227;
          }
        }
        uint64_t v22 = sub_100050114((uint64_t *)a5, v22);
        if (v22 < 0) {
          return 0;
        }
LABEL_227:
        if (*(unsigned char *)(a4 + 1))
        {
          int v51 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v52 = *(uint64_t **)(a4 + 24);
          int v53 = a1;
          uint64_t v54 = a2;
          int v55 = 5;
          goto LABEL_256;
        }
        uint64_t v91 = *(void *)(a4 + 24);
        uint64_t v92 = (uint64_t)a1;
        uint64_t v93 = a2;
        int v94 = 5;
        int v139 = v22;
        goto LABEL_260;
      case 6:
        v142[0].__r_.__value_.__r.__words[0] = 0;
        unint64_t v23 = *(std::string::size_type **)a5;
        if ((int)(*(_DWORD *)(a5 + 8) - *(void *)a5) < 8)
        {
          uint64_t result = sub_10004FD8C(a5, v142);
          if (!result) {
            return result;
          }
        }
        else
        {
          v142[0].__r_.__value_.__r.__words[0] = *v23;
          *(void *)a5 = v23 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v24 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v20 = v142[0].__r_.__value_.__r.__words[0];
          unint64_t v25 = *(uint64_t **)(a4 + 24);
          uint64_t v26 = a1;
          uint64_t v27 = a2;
          int v28 = 6;
LABEL_72:
          sub_100056148(v26, v27, v28, v24, v20, v25);
        }
        else
        {
          uint64_t v81 = v142[0].__r_.__value_.__r.__words[0];
          uint64_t v82 = *(void *)(a4 + 24);
          uint64_t v83 = (uint64_t)a1;
          uint64_t v84 = a2;
          int v85 = 6;
LABEL_103:
          sub_100055BE4(v83, v84, v85, v81, v82);
        }
        return 1;
      case 7:
        LODWORD(v142[0].__r_.__value_.__l.__data_) = 0;
        unint64_t v29 = *(uint64_t **)a5;
        if ((int)(*(_DWORD *)(a5 + 8) - *(void *)a5) < 4)
        {
          uint64_t result = sub_10004FD24(a5, v142);
          if (!result) {
            return result;
          }
        }
        else
        {
          LODWORD(v142[0].__r_.__value_.__l.__data_) = *(_DWORD *)v29;
          *(void *)a5 = (char *)v29 + 4;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v30 = *(unsigned __int8 *)(a4 + 2);
          LODWORD(v31) = v142[0].__r_.__value_.__l.__data_;
          uint64_t v32 = *(uint64_t **)(a4 + 24);
          uint64_t v33 = a1;
          uint64_t v34 = a2;
          int v35 = 7;
          goto LABEL_238;
        }
        int v86 = (int)v142[0].__r_.__value_.__l.__data_;
        uint64_t v87 = *(void *)(a4 + 24);
        uint64_t v88 = (uint64_t)a1;
        uint64_t v89 = a2;
        int v90 = 7;
        goto LABEL_240;
      case 8:
        int v36 = *(char **)a5;
        if (*(void *)a5 >= *(void *)(a5 + 8) || *v36 < 0)
        {
          unint64_t v37 = sub_10004FE4C(a5);
          if ((v70 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v37 = *v36;
          *(void *)a5 = v36 + 1;
        }
        if (*(unsigned char *)(a4 + 1)) {
          sub_100057F5C(a1, a2, 8, *(unsigned __int8 *)(a4 + 2), v37 != 0, *(uint64_t **)(a4 + 24));
        }
        else {
          sub_1000579F8((uint64_t)a1, a2, 8, v37 != 0, *(void *)(a4 + 24));
        }
        return 1;
      case 9:
        long long v38 = *(uint64_t **)(a4 + 24);
        int v39 = 9;
        if (!*(unsigned char *)(a4 + 1)) {
          goto LABEL_35;
        }
        goto LABEL_41;
      case 0xA:
        uint64_t v41 = *(void *)(a4 + 8);
        char v42 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v43 = sub_10005AF40(a1, a2, 10, v41, v42);
        }
        else {
          uint64_t v43 = sub_100059E30(a1, a2, 10, v41, v42);
        }
        int v72 = *(_DWORD *)(a5 + 52);
        BOOL v73 = __OFSUB__(v72--, 1);
        *(_DWORD *)(a5 + 52) = v72;
        if (v72 < 0 != v73) {
          return 0;
        }
        uint64_t result = sub_10006DF0C(v43, a5);
        if (!result) {
          return result;
        }
        int v75 = *(_DWORD *)(a5 + 52);
        if (v75 >= *(_DWORD *)(a5 + 56)) {
          sub_100065AE0();
        }
        *(_DWORD *)(a5 + 52) = v75 + 1;
        return *(_DWORD *)(a5 + 32) == ((8 * a2) | 4);
      case 0xB:
        uint64_t v44 = *(void *)(a4 + 8);
        double v45 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v46 = sub_10005AF40(a1, a2, 11, v44, v45);
        }
        else {
          uint64_t v46 = sub_100059E30(a1, a2, 11, v44, v45);
        }
        uint64_t v76 = v46;
        uint64_t v77 = *(char **)a5;
        if (*(void *)a5 >= *(void *)(a5 + 8) || *v77 < 0)
        {
          int v78 = sub_100050350((unsigned __int8 **)a5);
          if (v78 < 0) {
            return 0;
          }
        }
        else
        {
          int v78 = *v77;
          *(void *)a5 = v77 + 1;
        }
        unint64_t v79 = sub_10004F378(a5, v78);
        if ((v79 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v80 = v79;
        uint64_t result = sub_10006DF0C(v76, a5);
        if (!result) {
          return result;
        }
        uint64_t result = sub_10004F420(a5, v80);
        if (!result) {
          return result;
        }
        return 1;
      case 0xC:
        long long v38 = *(uint64_t **)(a4 + 24);
        int v39 = 12;
        if (*(unsigned char *)(a4 + 1)) {
LABEL_41:
        }
          int v40 = (std::string *)sub_100059900(a1, a2, v39, v38);
        else {
LABEL_35:
        }
          int v40 = (std::string *)sub_100059318(a1, a2, v39, v38);
        return sub_100089C28((uint64_t *)a5, v40);
      case 0xD:
        uint64_t v47 = *(char **)a5;
        if (*(void *)a5 >= *(void *)(a5 + 8))
        {
          LODWORD(v31) = 0;
        }
        else
        {
          LODWORD(v31) = *v47;
          if ((*v47 & 0x80000000) == 0)
          {
            *(void *)a5 = v47 + 1;
            goto LABEL_236;
          }
        }
        uint64_t v31 = sub_100050114((uint64_t *)a5, v31);
        if (v31 < 0) {
          return 0;
        }
LABEL_236:
        if (*(unsigned char *)(a4 + 1))
        {
          int v30 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v32 = *(uint64_t **)(a4 + 24);
          uint64_t v33 = a1;
          uint64_t v34 = a2;
          int v35 = 13;
LABEL_238:
          sub_100055754(v33, v34, v35, v30, v31, v32);
        }
        else
        {
          uint64_t v88 = (uint64_t)a1;
          uint64_t v89 = a2;
          int v90 = 13;
          int v86 = v31;
          uint64_t v87 = *(void *)(a4 + 24);
LABEL_240:
          sub_1000551F0(v88, v89, v90, v86, v87);
        }
        return 1;
      case 0xE:
        uint64_t v48 = *(char **)a5;
        if (*(void *)a5 >= *(void *)(a5 + 8))
        {
          LODWORD(v49) = 0;
        }
        else
        {
          uint64_t v49 = *v48;
          if ((*v48 & 0x80000000) == 0)
          {
            *(void *)a5 = v48 + 1;
            goto LABEL_243;
          }
        }
        uint64_t v49 = sub_100050114((uint64_t *)a5, v49);
        if (v49 < 0) {
          return 0;
        }
LABEL_243:
        if ((*(uint64_t (**)(void, uint64_t))(a4 + 8))(*(void *)(a4 + 16), v49))
        {
          if (*(unsigned char *)(a4 + 1)) {
            sub_100058E88(a1, a2, 14, *(unsigned __int8 *)(a4 + 2), v49, *(uint64_t **)(a4 + 24));
          }
          else {
            sub_100058924((uint64_t)a1, a2, 14, v49, *(void *)(a4 + 24));
          }
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 32))(a6, a2, v49);
        }
        return 1;
      case 0xF:
        LODWORD(v142[0].__r_.__value_.__l.__data_) = 0;
        int v50 = *(uint64_t **)a5;
        if ((int)(*(_DWORD *)(a5 + 8) - *(void *)a5) < 4)
        {
          uint64_t result = sub_10004FD24(a5, v142);
          if (!result) {
            return result;
          }
          LODWORD(v22) = v142[0].__r_.__value_.__l.__data_;
        }
        else
        {
          LODWORD(v22) = *(_DWORD *)v50;
          *(void *)a5 = (char *)v50 + 4;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v51 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v52 = *(uint64_t **)(a4 + 24);
          int v53 = a1;
          uint64_t v54 = a2;
          int v55 = 15;
          goto LABEL_256;
        }
        uint64_t v91 = *(void *)(a4 + 24);
        uint64_t v92 = (uint64_t)a1;
        uint64_t v93 = a2;
        int v94 = 15;
        goto LABEL_259;
      case 0x10:
        v142[0].__r_.__value_.__r.__words[0] = 0;
        uint64_t v56 = *(uint64_t **)a5;
        if ((int)(*(_DWORD *)(a5 + 8) - *(void *)a5) < 8)
        {
          uint64_t result = sub_10004FD8C(a5, v142);
          if (!result) {
            return result;
          }
          uint64_t v18 = v142[0].__r_.__value_.__r.__words[0];
        }
        else
        {
          uint64_t v18 = *v56;
          *(void *)a5 = v56 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v57 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v58 = *(uint64_t **)(a4 + 24);
          uint64_t v59 = a1;
          uint64_t v60 = a2;
          int v61 = 16;
          goto LABEL_79;
        }
        uint64_t v95 = *(void *)(a4 + 24);
        uint64_t v96 = (uint64_t)a1;
        uint64_t v97 = a2;
        int v98 = 16;
        goto LABEL_106;
      case 0x11:
        char v62 = *(char **)a5;
        if (*(void *)a5 >= *(void *)(a5 + 8))
        {
          unsigned int v63 = 0;
        }
        else
        {
          unsigned int v63 = *v62;
          if ((*v62 & 0x80000000) == 0)
          {
            *(void *)a5 = v62 + 1;
            goto LABEL_254;
          }
        }
        uint64_t v140 = sub_100050114((uint64_t *)a5, v63);
        unsigned int v63 = v140;
        if (v140 < 0) {
          return 0;
        }
LABEL_254:
        LODWORD(v22) = -(v63 & 1) ^ (v63 >> 1);
        if (*(unsigned char *)(a4 + 1))
        {
          int v51 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v52 = *(uint64_t **)(a4 + 24);
          int v53 = a1;
          uint64_t v54 = a2;
          int v55 = 17;
LABEL_256:
          sub_10005436C(v53, v54, v55, v51, v22, v52);
        }
        else
        {
          uint64_t v91 = *(void *)(a4 + 24);
          uint64_t v92 = (uint64_t)a1;
          uint64_t v93 = a2;
          int v94 = 17;
LABEL_259:
          int v139 = v22;
LABEL_260:
          sub_100053DD0(v92, v93, v94, v139, v91);
        }
        return 1;
      case 0x12:
        unint64_t v64 = *(char **)a5;
        if (*(void *)a5 >= *(void *)(a5 + 8) || *v64 < 0)
        {
          unint64_t v65 = sub_10004FE4C(a5);
          if ((v71 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v65 = *v64;
          *(void *)a5 = v64 + 1;
        }
        uint64_t v18 = -(uint64_t)(v65 & 1) ^ (v65 >> 1);
        if (*(unsigned char *)(a4 + 1))
        {
          int v57 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v58 = *(uint64_t **)(a4 + 24);
          uint64_t v59 = a1;
          uint64_t v60 = a2;
          int v61 = 18;
LABEL_79:
          sub_100054D60(v59, v60, v61, v57, v18, v58);
        }
        else
        {
          uint64_t v95 = *(void *)(a4 + 24);
          uint64_t v96 = (uint64_t)a1;
          uint64_t v97 = a2;
          int v98 = 18;
LABEL_106:
          sub_1000547FC(v96, v97, v98, v18, v95);
        }
        break;
      default:
        return 1;
    }
    return 1;
  }
}

void sub_10005E71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10005E7C4(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unint64_t *a5, int32x2_t *a6)
{
  unsigned int v9 = a2;
  v16[0] = off_1000AE208;
  v16[1] = a4;
  uint64_t v11 = a2 >> 3;
  unsigned __int8 v15 = 0;
  if (sub_10005D4E8((uint64_t)a1, a2 & 7, a2 >> 3, (uint64_t)v16, v14, &v15)) {
    return sub_10005E8A4(a1, v11, v15, (uint64_t)v14, a5, a3, a6);
  }
  if (*a5) {
    BOOL v13 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else {
    BOOL v13 = (std::string *)sub_10003D368(a5);
  }
  return sub_10007157C(v9, v13, (char *)a3, a6);
}

unsigned __int8 *sub_10005E8A4(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, unint64_t *a5, unsigned __int8 *a6, int32x2_t *a7)
{
  unint64_t v8 = a6;
  uint64_t v11 = a2;
  int v12 = a1;
  if (a3)
  {
    switch(*(unsigned char *)a4)
    {
      case 1:
        int v30 = sub_1000582D0(a1, a2, 1, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_1000713EC(v30, v8, a7);
        break;
      case 2:
        uint64_t v31 = sub_1000582D0(a1, a2, 2, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_100071370(v31, v8, a7);
        break;
      case 3:
        uint64_t v32 = sub_1000582D0(a1, a2, 3, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_100071130((int *)v32, v8, (uint64_t)a7);
        break;
      case 4:
        uint64_t v33 = sub_1000582D0(a1, a2, 4, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_100071140((int *)v33, v8, (uint64_t)a7);
        break;
      case 5:
        float v16 = sub_1000582D0(a1, a2, 5, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_100071110((int *)v16, v8, (uint64_t)a7);
        break;
      case 6:
        uint64_t v34 = sub_1000582D0(a1, a2, 6, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_100071278(v34, v8, a7);
        break;
      case 7:
        int v35 = sub_1000582D0(a1, a2, 7, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_100071180(v35, v8, a7);
        break;
      case 8:
        int v36 = sub_1000582D0(a1, a2, 8, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_100071170((int *)v36, v8, (uint64_t)a7);
        break;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        sub_100051E5C((uint64_t)&v89, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/extension_set_inl.h", 79);
        BOOL v13 = sub_100051E74(&v89, "Non-primitive types can't be packed.");
        sub_100051FB0((uint64_t)&v88, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v89);
        goto LABEL_169;
      case 0xD:
        uint64_t v18 = sub_1000582D0(a1, a2, 13, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_100071120((int *)v18, v8, (uint64_t)a7);
        break;
      case 0xE:
        v89.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1000582D0(a1, a2, 14, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        *(_OWORD *)&v89.__r_.__value_.__r.__words[1] = *(_OWORD *)(a4 + 8);
        int v90 = a5;
        int v91 = v11;
        unint64_t v8 = (unsigned __int8 *)sub_100064C80((uint64_t)a7, (char *)v8, (uint64_t)&v89);
        goto LABEL_169;
      case 0xF:
        uint64_t v19 = sub_1000582D0(a1, a2, 15, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_1000711FC(v19, v8, a7);
        break;
      case 0x10:
        unint64_t v37 = sub_1000582D0(a1, a2, 16, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_1000712F4(v37, v8, a7);
        break;
      case 0x11:
        uint64_t v20 = sub_1000582D0(a1, a2, 17, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_100071150((int *)v20, v8, (uint64_t)a7);
        break;
      case 0x12:
        long long v38 = sub_1000582D0(a1, a2, 18, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_100071160((int *)v38, v8, (uint64_t)a7);
        break;
      default:
        goto LABEL_169;
    }
  }
  else
  {
    switch(*(unsigned char *)a4)
    {
      case 1:
        unint64_t v8 = a6 + 8;
        double v39 = *(double *)a6;
        if (*(unsigned char *)(a4 + 1)) {
          sub_100057558(a1, a2, 1, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v39);
        }
        else {
          sub_100056FEC((uint64_t)a1, a2, 1, *(void *)(a4 + 24), v39);
        }
        goto LABEL_169;
      case 2:
        unint64_t v8 = a6 + 4;
        float v40 = *(float *)a6;
        if (*(unsigned char *)(a4 + 1)) {
          sub_100056B4C(a1, a2, 2, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v40);
        }
        else {
          sub_1000565E0((uint64_t)a1, a2, 2, *(void *)(a4 + 24), v40);
        }
        goto LABEL_169;
      case 3:
        uint64_t v41 = *a6;
        if ((char)*a6 < 0)
        {
          int v67 = v41 + (a6[1] << 7);
          uint64_t v41 = (v67 - 128);
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_100070F20((uint64_t)a6, (v67 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            uint64_t v41 = v84;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v54 = *(unsigned __int8 *)(a4 + 2);
          int v55 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v56 = 3;
          goto LABEL_166;
        }
        uint64_t v79 = *(void *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        int v80 = 3;
        goto LABEL_168;
      case 4:
        uint64_t v42 = *a6;
        if ((char)*a6 < 0)
        {
          int v68 = v42 + (a6[1] << 7);
          uint64_t v42 = (v68 - 128);
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_100070F20((uint64_t)a6, (v68 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            uint64_t v42 = v85;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v43 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v44 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v45 = 4;
          goto LABEL_147;
        }
        uint64_t v69 = *(void *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        int v70 = 4;
        goto LABEL_149;
      case 5:
        int v21 = *a6;
        if ((char)*a6 < 0)
        {
          int v63 = v21 + (a6[1] << 7);
          int v21 = v63 - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_100070F20((uint64_t)a6, (v63 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            int v21 = v81;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v26 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v27 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v28 = 5;
          goto LABEL_134;
        }
        uint64_t v65 = *(void *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        int v66 = 5;
        int v82 = v21;
        goto LABEL_137;
      case 6:
        unint64_t v8 = a6 + 8;
        uint64_t v42 = *(void *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v43 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v44 = *(uint64_t **)(a4 + 24);
          int v45 = 6;
LABEL_147:
          sub_100056148(a1, a2, v45, v43, v42, v44);
        }
        else
        {
          uint64_t v69 = *(void *)(a4 + 24);
          int v70 = 6;
LABEL_149:
          sub_100055BE4((uint64_t)a1, a2, v70, v42, v69);
        }
        goto LABEL_169;
      case 7:
        unint64_t v8 = a6 + 4;
        int v25 = *(_DWORD *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v46 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v47 = *(uint64_t **)(a4 + 24);
          int v48 = 7;
          goto LABEL_128;
        }
        uint64_t v71 = *(void *)(a4 + 24);
        int v72 = 7;
        int v73 = *(_DWORD *)a6;
        goto LABEL_130;
      case 8:
        uint64_t v49 = *a6;
        if ((char)*a6 < 0)
        {
          uint64_t v49 = v49 + (a6[1] << 7) - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_100070F20((uint64_t)a6, v49);
            if (!v8) {
              goto LABEL_169;
            }
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1)) {
          sub_100057F5C(v12, v11, 8, *(unsigned __int8 *)(a4 + 2), v49 != 0, *(uint64_t **)(a4 + 24));
        }
        else {
          sub_1000579F8((uint64_t)v12, v11, 8, v49 != 0, *(void *)(a4 + 24));
        }
        goto LABEL_169;
      case 9:
      case 0xC:
        double v14 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v15 = (uint64_t)sub_100059900(a1, a2, 9, v14);
        }
        else {
          uint64_t v15 = sub_100059318(a1, a2, 9, v14);
        }
        uint64_t v58 = (std::string *)v15;
        int v59 = *v8;
        if ((char)*v8 < 0)
        {
          uint64_t v61 = sub_100070FAC((uint64_t)v8, *v8);
          if (!v61)
          {
LABEL_113:
            unint64_t v8 = 0;
            goto LABEL_169;
          }
          uint64_t v60 = (std::string::value_type *)v61;
          int v59 = v62;
        }
        else
        {
          uint64_t v60 = (std::string::value_type *)(v8 + 1);
        }
        return (unsigned __int8 *)sub_100064C14((uint64_t)a7, v60, v59, v58);
      case 0xA:
        uint64_t v50 = *(void *)(a4 + 8);
        int v51 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v52 = sub_10005AF40(a1, a2, 10, v50, v51);
        }
        else {
          uint64_t v52 = sub_100059E30(a1, a2, 10, v50, v51);
        }
        int v74 = a7[11].i32[0];
        BOOL v75 = __OFSUB__(v74--, 1);
        a7[11].i32[0] = v74;
        if (v74 < 0 != v75) {
          goto LABEL_113;
        }
        ++a7[11].i32[1];
        uint64_t v76 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, int32x2_t *))(*(void *)v52 + 88))(v52, v8, a7);
        a7[11] = vadd_s32(a7[11], (int32x2_t)0xFFFFFFFF00000001);
        __int32 v77 = a7[10].i32[0];
        a7[10].i32[0] = 0;
        if (v77 == ((8 * v11) | 3)) {
          unint64_t v8 = (unsigned __int8 *)v76;
        }
        else {
          unint64_t v8 = 0;
        }
        goto LABEL_169;
      case 0xB:
        uint64_t v22 = *(void *)(a4 + 8);
        unint64_t v23 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v24 = sub_10005AF40(a1, a2, 11, v22, v23);
        }
        else {
          uint64_t v24 = sub_100059E30(a1, a2, 11, v22, v23);
        }
        return (unsigned __int8 *)sub_100070C5C(a7, v24, v8);
      case 0xD:
        int v25 = *a6;
        if ((char)*a6 < 0)
        {
          int v64 = v25 + (a6[1] << 7);
          int v25 = v64 - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_100070F20((uint64_t)a6, (v64 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            int v25 = v83;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v46 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v47 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v48 = 13;
LABEL_128:
          sub_100055754(a1, a2, v48, v46, v25, v47);
        }
        else
        {
          uint64_t v71 = *(void *)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v72 = 13;
          int v73 = v25;
LABEL_130:
          sub_1000551F0((uint64_t)a1, a2, v72, v73, v71);
        }
        goto LABEL_169;
      case 0xE:
        unint64_t v53 = *a6;
        if ((char)*a6 < 0)
        {
          int v78 = v53 + (a6[1] << 7);
          unint64_t v53 = (v78 - 128);
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_100070F20((uint64_t)a6, (v78 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            unint64_t v53 = v86;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if ((*(uint64_t (**)(void, unint64_t))(a4 + 8))(*(void *)(a4 + 16), v53))
        {
          if (*(unsigned char *)(a4 + 1)) {
            sub_100058E88(v12, v11, 14, *(unsigned __int8 *)(a4 + 2), v53, *(uint64_t **)(a4 + 24));
          }
          else {
            sub_100058924((uint64_t)v12, v11, 14, v53, *(void *)(a4 + 24));
          }
        }
        else
        {
          if (*a5) {
            uint64_t v87 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            uint64_t v87 = (std::string *)sub_10003D368(a5);
          }
          sub_100070D48(v11, v53, v87);
        }
        goto LABEL_169;
      case 0xF:
        unint64_t v8 = a6 + 4;
        int v21 = *(_DWORD *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v26 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v27 = *(uint64_t **)(a4 + 24);
          int v28 = 15;
          goto LABEL_134;
        }
        uint64_t v65 = *(void *)(a4 + 24);
        int v66 = 15;
        goto LABEL_136;
      case 0x10:
        unint64_t v8 = a6 + 8;
        uint64_t v41 = *(void *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v54 = *(unsigned __int8 *)(a4 + 2);
          int v55 = *(uint64_t **)(a4 + 24);
          int v56 = 16;
          goto LABEL_166;
        }
        uint64_t v79 = *(void *)(a4 + 24);
        int v80 = 16;
        goto LABEL_168;
      case 0x11:
        LODWORD(v29) = *a6;
        if ((char)*a6 < 0)
        {
          uint64_t v29 = v29 + (a6[1] << 7) - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_100070F20((uint64_t)a6, v29);
            if (!v8) {
              goto LABEL_169;
            }
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        int v21 = -(v29 & 1) ^ (v29 >> 1);
        if (*(unsigned char *)(a4 + 1))
        {
          int v26 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v27 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v28 = 17;
LABEL_134:
          sub_10005436C(a1, a2, v28, v26, v21, v27);
        }
        else
        {
          uint64_t v65 = *(void *)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v66 = 17;
LABEL_136:
          int v82 = v21;
LABEL_137:
          sub_100053DD0((uint64_t)a1, a2, v66, v82, v65);
        }
        goto LABEL_169;
      case 0x12:
        unint64_t v57 = *a6;
        if ((char)*a6 < 0)
        {
          unint64_t v57 = v57 + (a6[1] << 7) - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_100070F20((uint64_t)a6, v57);
            if (!v8) {
              goto LABEL_169;
            }
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        uint64_t v41 = -(uint64_t)(v57 & 1) ^ (v57 >> 1);
        if (*(unsigned char *)(a4 + 1))
        {
          int v54 = *(unsigned __int8 *)(a4 + 2);
          int v55 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v56 = 18;
LABEL_166:
          sub_100054D60(a1, a2, v56, v54, v41, v55);
        }
        else
        {
          uint64_t v79 = *(void *)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v80 = 18;
LABEL_168:
          sub_1000547FC((uint64_t)a1, a2, v80, v41, v79);
        }
LABEL_169:
        uint64_t result = v8;
        break;
      default:
        goto LABEL_169;
    }
  }
  return result;
}

void sub_10005F510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_10005F5C0(uint64_t *a1, char *a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  LODWORD(v9) = 0;
  char v10 = 0;
  uint64_t v41 = a2;
  memset(&__p, 0, sizeof(__p));
LABEL_2:
  while (2)
  {
    char v11 = v10;
    while (1)
    {
      char v12 = sub_10003D228(a5, &v41, *(_DWORD *)(a5 + 92));
      BOOL v13 = v41;
      if (v12)
      {
        double v14 = v41;
        goto LABEL_53;
      }
      double v14 = ++v41;
      unsigned int v15 = *v13;
      if (v15 != 26) {
        break;
      }
      if (!v9)
      {
        int v27 = *v14;
        if (*v14 < 0)
        {
          int v28 = (char *)sub_100070FAC((uint64_t)(v13 + 1), *v14);
          uint64_t v41 = v28;
          if (!v28) {
            goto LABEL_51;
          }
          int v27 = v29;
        }
        else
        {
          int v28 = v13 + 2;
          uint64_t v41 = v13 + 2;
        }
        LODWORD(v9) = 0;
        uint64_t v41 = (char *)sub_100064C14(a5, v28, v27, &__p);
        char v10 = 1;
        if (!v41) {
          goto LABEL_51;
        }
        goto LABEL_2;
      }
      uint64_t v17 = sub_10005E7C4(a1, (8 * v9) | 2, (unsigned __int8 *)v14, a3, a4, (int32x2_t *)a5);
      LODWORD(v9) = 0;
LABEL_15:
      uint64_t v41 = (char *)v17;
      if (!v17) {
        goto LABEL_51;
      }
    }
    if (v15 == 16)
    {
      int v18 = *(unsigned __int16 *)v14;
      unsigned int v19 = v18 + (char)v18;
      unsigned int v20 = v19 & (2 * (char)v18);
      uint64_t v9 = v20 >> 1;
      if ((v20 & 0x8000) != 0)
      {
        double v14 = v13 + 3;
        uint64_t v30 = 13;
        while (1)
        {
          int v31 = *(unsigned __int16 *)v14;
          unsigned int v32 = v31 + (char)v31;
          v9 += ((v32 & (2 * (char)v31)) - 2) << v30;
          if (((unsigned __int16)v32 & (unsigned __int16)(2 * (char)v31) & 0x8000) == 0) {
            break;
          }
          v30 += 14;
          v14 += 2;
          if (v30 == 69)
          {
            double v14 = 0;
            uint64_t v41 = 0;
            goto LABEL_53;
          }
        }
        BOOL v21 = v32 >= (char)v31;
      }
      else
      {
        BOOL v21 = v19 >= (char)v18;
      }
      int v22 = !v21;
      char v10 = 0;
      if (v22) {
        uint64_t v23 = 2;
      }
      else {
        uint64_t v23 = 1;
      }
      uint64_t v41 = &v14[v23];
      if (v11)
      {
        v42[0] = off_1000AE208;
        v42[1] = a3;
        if (sub_10005D4E8((uint64_t)v13, 2, v9, (uint64_t)v42, v37, &v36))
        {
          if (v37[1]) {
            uint64_t v24 = sub_10005AF40(a1, v9, 11, v38, v39);
          }
          else {
            uint64_t v24 = sub_100059E30(a1, v9, 11, v38, v39);
          }
          uint64_t v26 = v24;
          uint64_t v34 = 0;
          sub_100065008((uint64_t)v42, *(_DWORD *)(a5 + 88), 0, &v34, (uint64_t *)&__p);
          long long v44 = *(_OWORD *)(a5 + 96);
          if (!(*(uint64_t (**)(uint64_t, char *, void *))(*(void *)v26 + 88))(v26, v34, v42) || v43)
          {
LABEL_51:
            double v14 = 0;
            goto LABEL_53;
          }
        }
        else
        {
          sub_100048934(v35, (uint64_t *)&__p);
          if (*a4) {
            int v25 = (std::string *)((*a4 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            int v25 = (std::string *)sub_10003D368(a4);
          }
          sub_100070DF4(v9, v35[0], (std::string::size_type)v35[1], v25);
        }
        LODWORD(v9) = 0;
        char v10 = 1;
        continue;
      }
      continue;
    }
    break;
  }
  if ((v15 & 0x80) != 0)
  {
    unsigned int v15 = v15 + (*v14 << 7) - 128;
    if (*v14 < 0) {
      double v14 = (char *)sub_100070F68((uint64_t)v13, v15);
    }
    else {
      double v14 = v13 + 2;
    }
  }
  uint64_t v41 = v14;
  if (v15) {
    BOOL v16 = (v15 & 7) == 4;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v17 = sub_10005E7C4(a1, v15, (unsigned __int8 *)v14, a3, a4, (int32x2_t *)a5);
    goto LABEL_15;
  }
  *(_DWORD *)(a5 + 8sub_10002F6CC(&a9, 0) = v15 - 1;
LABEL_53:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v14;
}

void sub_10005F954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005F988(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = off_1000AE650;
  v5[0] = off_1000AE208;
  v5[1] = a4;
  return sub_10005D644(a1, a2, a3, (uint64_t)v5, (uint64_t)&v6);
}

uint64_t sub_10005F9F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[0] = off_1000AE698;
  v7[1] = a5;
  v6[0] = off_1000AE208;
  v6[1] = a4;
  return sub_10005D644(a1, a2, a3, (uint64_t)v6, (uint64_t)v7);
}

uint64_t sub_10005FA58(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  while (1)
  {
    while (1)
    {
      unint64_t v8 = *(char **)a2;
      if (*(void *)a2 >= *(void *)(a2 + 8))
      {
        LODWORD(v9) = 0;
      }
      else
      {
        unint64_t v9 = *v8;
        if ((*v8 & 0x80000000) == 0)
        {
          *(void *)a2 = v8 + 1;
          goto LABEL_6;
        }
      }
      unint64_t v9 = sub_1000506B8((uint64_t *)a2, v9);
LABEL_6:
      *(_DWORD *)(a2 + 32) = v9;
      if (v9 != 11) {
        break;
      }
      if ((sub_10005FB10(a1, a2, a3, a4) & 1) == 0) {
        return 0;
      }
    }
    if (!v9) {
      return 1;
    }
    if ((sub_10005D644(a1, v9, a2, a3, a4) & 1) == 0) {
      return 0;
    }
  }
}

uint64_t sub_10005FB10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = 0;
  memset(&v40, 0, sizeof(v40));
  while (1)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = *(char **)a2;
          if (*(void *)a2 >= *(void *)(a2 + 8))
          {
            int v10 = 0;
          }
          else
          {
            int v10 = *v9;
            if ((*v9 & 0x80000000) == 0)
            {
              *(void *)a2 = v9 + 1;
              goto LABEL_7;
            }
          }
          int v10 = sub_1000506B8((uint64_t *)a2, v10);
LABEL_7:
          if (v10 <= 25) {
            break;
          }
          if (v10 != 26) {
            goto LABEL_14;
          }
          if (v8)
          {
            char v11 = sub_10005D644(a1, (8 * v8) | 2u, a2, a3, a4);
LABEL_15:
            if ((v11 & 1) == 0) {
              goto LABEL_56;
            }
          }
          else
          {
            BOOL v13 = *(char **)a2;
            if (*(void *)a2 >= *(void *)(a2 + 8))
            {
              unsigned int v14 = 0;
LABEL_36:
              uint64_t v18 = sub_100050114((uint64_t *)a2, v14);
              unsigned int v14 = v18;
              if ((v18 & 0x8000000080000000) != 0) {
                goto LABEL_56;
              }
              goto LABEL_37;
            }
            unsigned int v14 = *v13;
            if (*v13 < 0) {
              goto LABEL_36;
            }
            *(void *)a2 = v13 + 1;
LABEL_37:
            std::string::resize(&v40, v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6), 0);
            int v19 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
            unsigned int v20 = (std::string *)v40.__r_.__value_.__r.__words[0];
            if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v21 = &v40;
            }
            else {
              BOOL v21 = (std::string *)v40.__r_.__value_.__r.__words[0];
            }
            if (v14 > 0x7F)
            {
              v21->__r_.__value_.__s.__data_[0] = v14 | 0x80;
              unsigned int v24 = v14 >> 7;
              if (v19 >= 0) {
                unsigned int v20 = &v40;
              }
              if (v14 >> 14)
              {
                uint64_t v23 = &v20->__r_.__value_.__s.__data_[2];
                do
                {
                  *(v23 - 1) = v24 | 0x80;
                  unsigned int v25 = v24 >> 7;
                  ++v23;
                  unsigned int v26 = v24 >> 14;
                  v24 >>= 7;
                }
                while (v26);
                *(v23 - 1) = v25;
              }
              else
              {
                v20->__r_.__value_.__s.__data_[1] = v24;
                uint64_t v23 = &v20->__r_.__value_.__s.__data_[2];
              }
            }
            else
            {
              v21->__r_.__value_.__s.__data_[0] = v14;
              if (v19 >= 0) {
                int v22 = &v40;
              }
              else {
                int v22 = v20;
              }
              uint64_t v23 = &v22->__r_.__value_.__s.__data_[1];
            }
            BOOL v27 = sub_10004FA50((const void **)a2, v23, v14);
            int v8 = 0;
            if (!v27) {
              goto LABEL_56;
            }
          }
        }
        if (!v10) {
          goto LABEL_56;
        }
        if (v10 == 12)
        {
          uint64_t v28 = 1;
          goto LABEL_57;
        }
        if (v10 != 16)
        {
LABEL_14:
          char v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a4 + 16))(a4, a2);
          goto LABEL_15;
        }
        char v12 = *(char **)a2;
        if (*(void *)a2 >= *(void *)(a2 + 8))
        {
          int v8 = 0;
        }
        else
        {
          int v8 = *v12;
          if ((*v12 & 0x80000000) == 0)
          {
            *(void *)a2 = v12 + 1;
            goto LABEL_25;
          }
        }
        uint64_t v15 = sub_100050114((uint64_t *)a2, v8);
        int v8 = v15;
        if (v15 < 0) {
          goto LABEL_56;
        }
LABEL_25:
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        int v16 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
        if (*((unsigned char *)&v40.__r_.__value_.__s + 23))
        {
          uint64_t v17 = &v40;
          goto LABEL_30;
        }
      }
      int v16 = v40.__r_.__value_.__r.__words[1];
    }
    while (!v40.__r_.__value_.__l.__size_);
    uint64_t v17 = (std::string *)v40.__r_.__value_.__r.__words[0];
LABEL_30:
    v30[0] = v17;
    v30[1] = (char *)v17 + v16;
    v30[2] = 0;
    uint64_t v32 = 0;
    __int16 v33 = 0;
    int v31 = v16;
    int v34 = v16;
    uint64_t v35 = 0x7FFFFFFF00000000;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v36 = *(_DWORD *)(a2 + 52);
    int v37 = v36;
    if ((sub_10005D644(a1, (8 * v8) | 2u, (uint64_t)v30, a3, a4) & 1) == 0) {
      break;
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    {
      *v40.__r_.__value_.__l.__data_ = 0;
      v40.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v40.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
    }
    sub_10004F2B4((uint64_t)v30);
  }
  sub_10004F2B4((uint64_t)v30);
LABEL_56:
  uint64_t v28 = 0;
LABEL_57:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  return v28;
}

void sub_10005FE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005FE74(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10008A6D4(v11, a4);
  sub_100051990((uint64_t)v12, (uint64_t)v11, 1);
  v10[0] = off_1000AE698;
  v10[1] = v12;
  v9[0] = off_1000AE208;
  v9[1] = a3;
  uint64_t v7 = sub_10005FA58(a1, a2, (uint64_t)v9, (uint64_t)v10);
  sub_1000519C8((uint64_t)v12);
  return v7;
}

void sub_10005FF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1000519C8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_10005FF78(uint64_t a1, signed int a2, int a3, char *a4, uint64_t *a5)
{
  uint64_t v7 = *(unsigned int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    uint64_t v18 = *((void *)v7 + 1);
    uint64_t v17 = v7 + 2;
    uint64_t v16 = v18;
    if (v18)
    {
      int v19 = v17;
      do
      {
        int v20 = *(_DWORD *)(v16 + 32);
        BOOL v21 = v20 < a2;
        if (v20 >= a2) {
          int v22 = (uint64_t *)v16;
        }
        else {
          int v22 = (uint64_t *)(v16 + 8);
        }
        if (!v21) {
          int v19 = (void *)v16;
        }
        uint64_t v16 = *v22;
      }
      while (*v22);
      if (v19 != (void *)v17)
      {
        do
        {
          uint64_t v23 = *((unsigned int *)v19 + 8);
          if ((int)v23 >= a3) {
            break;
          }
          a4 = sub_1000600A8((unsigned char *)v19 + 40, v23, a4, a5);
          unsigned int v24 = (unsigned int *)v19[1];
          if (v24)
          {
            do
            {
              unsigned int v25 = v24;
              unsigned int v24 = *(unsigned int **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              unsigned int v25 = (unsigned int *)v19[2];
              BOOL v26 = *(void *)v25 == (void)v19;
              int v19 = v25;
            }
            while (!v26);
          }
          int v19 = v25;
        }
        while (v25 != v17);
      }
    }
  }
  else
  {
    unint64_t v8 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      unint64_t v9 = &v7[8 * v8];
      do
      {
        unint64_t v10 = v8 >> 1;
        char v11 = &v7[8 * (v8 >> 1)];
        signed int v13 = *v11;
        char v12 = v11 + 8;
        v8 += ~(v8 >> 1);
        if (v13 < a2) {
          uint64_t v7 = v12;
        }
        else {
          unint64_t v8 = v10;
        }
      }
      while (v8);
      while (v7 != v9)
      {
        uint64_t v14 = *v7;
        if ((int)v14 >= a3) {
          break;
        }
        a4 = sub_1000600A8((unsigned char *)v7 + 8, v14, a4, a5);
        v7 += 8;
      }
    }
  }
  return a4;
}

char *sub_1000600A8(unsigned char *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  int v5 = a3;
  if (a1[9])
  {
    if (a1[11])
    {
      if (*((_DWORD *)a1 + 3))
      {
        if (*a4 <= (unint64_t)a3) {
          int v5 = sub_100051170((uint64_t)a4, a3);
        }
        unsigned int v8 = (8 * a2) | 2;
        if (v8 > 0x7F)
        {
          char *v5 = (8 * a2) | 0x82;
          unsigned int v32 = (8 * a2) >> 7;
          if (v8 >> 14)
          {
            unint64_t v9 = v5 + 2;
            do
            {
              *(v9 - 1) = v32 | 0x80;
              unsigned int v33 = v32 >> 7;
              ++v9;
              unsigned int v34 = v32 >> 14;
              v32 >>= 7;
            }
            while (v34);
            *(v9 - 1) = v33;
          }
          else
          {
            v5[1] = v32;
            unint64_t v9 = v5 + 2;
          }
        }
        else
        {
          char *v5 = v8;
          unint64_t v9 = v5 + 1;
        }
        unint64_t v35 = *((int *)a1 + 3);
        if (v35 > 0x7F)
        {
          unsigned char *v9 = v35 | 0x80;
          unint64_t v36 = v35 >> 7;
          if (v35 >> 14)
          {
            int v5 = v9 + 2;
            do
            {
              *(v5 - 1) = v36 | 0x80;
              unint64_t v37 = v36 >> 7;
              ++v5;
              unint64_t v38 = v36 >> 14;
              v36 >>= 7;
            }
            while (v38);
            *(v5 - 1) = v37;
          }
          else
          {
            v9[1] = v36;
            int v5 = v9 + 2;
          }
        }
        else
        {
          unsigned char *v9 = v35;
          int v5 = v9 + 1;
        }
        int v39 = a1[8];
        if ((v39 - 19) <= 0xFFFFFFED)
        {
          sub_100051E5C((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
          std::string v40 = sub_100051E74(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
          sub_100051FB0((uint64_t)&v431, (const char **)&v40->__r_.__value_.__l.__data_);
          sub_100051FB8((uint64_t)v432);
        }
        switch(v39)
        {
          case 1:
            int v63 = *(int **)a1;
            if (**(int **)a1 >= 1)
            {
              int v64 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  int v63 = *(int **)a1;
                }
                *(void *)int v5 = *(void *)sub_10007CA8C(v63, v64);
                v5 += 8;
                ++v64;
                int v63 = *(int **)a1;
              }
              while (v64 < **(_DWORD **)a1);
            }
            break;
          case 2:
            uint64_t v65 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v66 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  uint64_t v65 = *(_DWORD **)a1;
                }
                *(_DWORD *)int v5 = *(_DWORD *)sub_10007B2CC(v65, v66);
                v5 += 4;
                ++v66;
                uint64_t v65 = *(_DWORD **)a1;
              }
              while (v66 < **(_DWORD **)a1);
            }
            break;
          case 3:
            int v67 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v68 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  int v67 = *(_DWORD **)a1;
                }
                unint64_t v69 = *(void *)sub_100078340(v67, v68);
                if (v69 > 0x7F)
                {
                  char *v5 = v69 | 0x80;
                  unint64_t v70 = v69 >> 7;
                  if (v69 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v70 | 0x80;
                      unint64_t v71 = v70 >> 7;
                      ++v5;
                      unint64_t v72 = v70 >> 14;
                      v70 >>= 7;
                    }
                    while (v72);
                    *(v5 - 1) = v71;
                  }
                  else
                  {
                    v5[1] = v70;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v69;
                }
                ++v68;
                int v67 = *(_DWORD **)a1;
              }
              while (v68 < **(_DWORD **)a1);
            }
            break;
          case 4:
            int v73 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v74 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  int v73 = *(_DWORD **)a1;
                }
                unint64_t v75 = *(void *)sub_100079B24(v73, v74);
                if (v75 > 0x7F)
                {
                  char *v5 = v75 | 0x80;
                  unint64_t v76 = v75 >> 7;
                  if (v75 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v76 | 0x80;
                      unint64_t v77 = v76 >> 7;
                      ++v5;
                      unint64_t v78 = v76 >> 14;
                      v76 >>= 7;
                    }
                    while (v78);
                    *(v5 - 1) = v77;
                  }
                  else
                  {
                    v5[1] = v76;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v75;
                }
                ++v74;
                int v73 = *(_DWORD **)a1;
              }
              while (v74 < **(_DWORD **)a1);
            }
            break;
          case 5:
            uint64_t v42 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v43 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  uint64_t v42 = *(_DWORD **)a1;
                }
                unint64_t v44 = *(int *)sub_1000753A0(v42, v43);
                if (v44 > 0x7F)
                {
                  char *v5 = v44 | 0x80;
                  unint64_t v45 = v44 >> 7;
                  if (v44 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v45 | 0x80;
                      unint64_t v46 = v45 >> 7;
                      ++v5;
                      unint64_t v47 = v45 >> 14;
                      v45 >>= 7;
                    }
                    while (v47);
                    *(v5 - 1) = v46;
                  }
                  else
                  {
                    v5[1] = v45;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v44;
                }
                ++v43;
                uint64_t v42 = *(_DWORD **)a1;
              }
              while (v43 < **(_DWORD **)a1);
            }
            break;
          case 6:
            uint64_t v79 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v80 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  uint64_t v79 = *(_DWORD **)a1;
                }
                *(void *)int v5 = *(void *)sub_100079B24(v79, v80);
                v5 += 8;
                ++v80;
                uint64_t v79 = *(_DWORD **)a1;
              }
              while (v80 < **(_DWORD **)a1);
            }
            break;
          case 7:
            int v81 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v82 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  int v81 = *(_DWORD **)a1;
                }
                *(_DWORD *)int v5 = *(_DWORD *)sub_100076B84(v81, v82);
                v5 += 4;
                ++v82;
                int v81 = *(_DWORD **)a1;
              }
              while (v82 < **(_DWORD **)a1);
            }
            break;
          case 8:
            int v83 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v84 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  int v83 = *(_DWORD **)a1;
                }
                *v5++ = *(unsigned char *)sub_100073B78(v83, v84++);
                int v83 = *(_DWORD **)a1;
              }
              while (v84 < **(_DWORD **)a1);
            }
            break;
          case 9:
          case 10:
          case 11:
          case 12:
            sub_100051E5C((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1966);
            uint64_t v41 = sub_100051E74(v432, "Non-primitive types can't be packed.");
            sub_100051FB0((uint64_t)&v431, (const char **)&v41->__r_.__value_.__l.__data_);
            sub_100051FB8((uint64_t)v432);
            break;
          case 13:
            int v48 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v49 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  int v48 = *(_DWORD **)a1;
                }
                unsigned int v50 = *(_DWORD *)sub_100076B84(v48, v49);
                if (v50 > 0x7F)
                {
                  char *v5 = v50 | 0x80;
                  unsigned int v51 = v50 >> 7;
                  if (v50 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v51 | 0x80;
                      unsigned int v52 = v51 >> 7;
                      ++v5;
                      unsigned int v53 = v51 >> 14;
                      v51 >>= 7;
                    }
                    while (v53);
                    *(v5 - 1) = v52;
                  }
                  else
                  {
                    v5[1] = v51;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v50;
                }
                ++v49;
                int v48 = *(_DWORD **)a1;
              }
              while (v49 < **(_DWORD **)a1);
            }
            break;
          case 14:
            uint64_t v85 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v86 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  uint64_t v85 = *(_DWORD **)a1;
                }
                unint64_t v87 = *(int *)sub_1000753A0(v85, v86);
                if (v87 > 0x7F)
                {
                  char *v5 = v87 | 0x80;
                  unint64_t v88 = v87 >> 7;
                  if (v87 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v88 | 0x80;
                      unint64_t v89 = v88 >> 7;
                      ++v5;
                      unint64_t v90 = v88 >> 14;
                      v88 >>= 7;
                    }
                    while (v90);
                    *(v5 - 1) = v89;
                  }
                  else
                  {
                    v5[1] = v88;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v87;
                }
                ++v86;
                uint64_t v85 = *(_DWORD **)a1;
              }
              while (v86 < **(_DWORD **)a1);
            }
            break;
          case 15:
            int v54 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v55 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  int v54 = *(_DWORD **)a1;
                }
                *(_DWORD *)int v5 = *(_DWORD *)sub_1000753A0(v54, v55);
                v5 += 4;
                ++v55;
                int v54 = *(_DWORD **)a1;
              }
              while (v55 < **(_DWORD **)a1);
            }
            break;
          case 16:
            int v91 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v92 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  int v91 = *(_DWORD **)a1;
                }
                *(void *)int v5 = *(void *)sub_100078340(v91, v92);
                v5 += 8;
                ++v92;
                int v91 = *(_DWORD **)a1;
              }
              while (v92 < **(_DWORD **)a1);
            }
            break;
          case 17:
            int v56 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v57 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  int v56 = *(_DWORD **)a1;
                }
                uint64_t v58 = (int *)sub_1000753A0(v56, v57);
                unsigned int v59 = (2 * *v58) ^ (*v58 >> 31);
                if (v59 > 0x7F)
                {
                  char *v5 = v59 | 0x80;
                  unsigned int v60 = v59 >> 7;
                  if (v59 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v60 | 0x80;
                      unsigned int v61 = v60 >> 7;
                      ++v5;
                      unsigned int v62 = v60 >> 14;
                      v60 >>= 7;
                    }
                    while (v62);
                    *(v5 - 1) = v61;
                  }
                  else
                  {
                    v5[1] = v60;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v59;
                }
                ++v57;
                int v56 = *(_DWORD **)a1;
              }
              while (v57 < **(_DWORD **)a1);
            }
            break;
          case 18:
            uint64_t v93 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v94 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_100051170((uint64_t)a4, v5);
                  uint64_t v93 = *(_DWORD **)a1;
                }
                uint64_t v95 = (uint64_t *)sub_100078340(v93, v94);
                unint64_t v96 = (2 * *v95) ^ (*v95 >> 63);
                if (v96 > 0x7F)
                {
                  char *v5 = v96 | 0x80;
                  unint64_t v97 = v96 >> 7;
                  if (v96 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v97 | 0x80;
                      unint64_t v98 = v97 >> 7;
                      ++v5;
                      unint64_t v99 = v97 >> 14;
                      v97 >>= 7;
                    }
                    while (v99);
                    *(v5 - 1) = v98;
                  }
                  else
                  {
                    v5[1] = v97;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v96;
                }
                ++v94;
                uint64_t v93 = *(_DWORD **)a1;
              }
              while (v94 < **(_DWORD **)a1);
            }
            break;
          default:
            return v5;
        }
      }
      return v5;
    }
    int v18 = a1[8];
    if ((v18 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      int v19 = sub_100051E74(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v431, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v432);
    }
    switch(v18)
    {
      case 1:
        int v20 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v21 = 0;
          unsigned int v22 = 8 * a2;
          unsigned int v23 = (8 * a2) | 1;
          char v24 = (8 * a2) | 0x81;
          unsigned int v25 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v26 = v22 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              int v20 = *(_DWORD **)a1;
            }
            uint64_t v27 = *(void *)sub_10007CA8C(v20, v21);
            if (v23 > 0x7F)
            {
              char *v5 = v24;
              if (v23 >= 0x4000)
              {
                uint64_t v28 = v5 + 2;
                unsigned int v29 = v25;
                do
                {
                  *((unsigned char *)v28 - 1) = v29 | 0x80;
                  unsigned int v30 = v29 >> 7;
                  uint64_t v28 = (void *)((char *)v28 + 1);
                  unsigned int v31 = v29 >> 14;
                  v29 >>= 7;
                }
                while (v31);
                *((unsigned char *)v28 - 1) = v30;
              }
              else
              {
                v5[1] = v26;
                uint64_t v28 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v23;
              uint64_t v28 = v5 + 1;
            }
            void *v28 = v27;
            int v5 = (char *)(v28 + 1);
            ++v21;
            int v20 = *(_DWORD **)a1;
          }
          while (v21 < **(_DWORD **)a1);
        }
        return v5;
      case 2:
        int v100 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v101 = 0;
          unsigned int v102 = (8 * a2) | 5;
          unsigned int v103 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v104 = (8 * a2) >> 7;
          char v105 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              int v100 = *(_DWORD **)a1;
            }
            int v106 = *(_DWORD *)sub_10007B2CC(v100, v101);
            if (v102 > 0x7F)
            {
              char *v5 = v105;
              if (v102 >= 0x4000)
              {
                uint64_t v107 = v5 + 2;
                unsigned int v108 = v103;
                do
                {
                  *((unsigned char *)v107 - 1) = v108 | 0x80;
                  unsigned int v109 = v108 >> 7;
                  uint64_t v107 = (_DWORD *)((char *)v107 + 1);
                  unsigned int v110 = v108 >> 14;
                  v108 >>= 7;
                }
                while (v110);
                *((unsigned char *)v107 - 1) = v109;
              }
              else
              {
                v5[1] = v104;
                uint64_t v107 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v102;
              uint64_t v107 = v5 + 1;
            }
            *uint64_t v107 = v106;
            int v5 = (char *)(v107 + 1);
            ++v101;
            int v100 = *(_DWORD **)a1;
          }
          while (v101 < **(_DWORD **)a1);
        }
        return v5;
      case 3:
        unsigned int v111 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v112 = 0;
          unsigned int v113 = 8 * a2;
          char v114 = (8 * a2) | 0x80;
          unsigned int v115 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              unsigned int v111 = *(_DWORD **)a1;
            }
            unint64_t v116 = *(void *)sub_100078340(v111, v112);
            if (v113 > 0x7F)
            {
              char *v5 = v114;
              if (v113 >= 0x4000)
              {
                unint64_t v117 = v5 + 2;
                unsigned int v118 = v115;
                do
                {
                  *(v117 - 1) = v118 | 0x80;
                  unsigned int v119 = v118 >> 7;
                  ++v117;
                  unsigned int v120 = v118 >> 14;
                  v118 >>= 7;
                }
                while (v120);
                *(v117 - 1) = v119;
              }
              else
              {
                v5[1] = v113 >> 7;
                unint64_t v117 = v5 + 2;
              }
            }
            else
            {
              unint64_t v117 = v5 + 1;
              char *v5 = v113;
            }
            if (v116 > 0x7F)
            {
              *unint64_t v117 = v116 | 0x80;
              unint64_t v121 = v116 >> 7;
              if (v116 >> 14)
              {
                int v5 = v117 + 2;
                do
                {
                  *(v5 - 1) = v121 | 0x80;
                  unint64_t v122 = v121 >> 7;
                  ++v5;
                  unint64_t v123 = v121 >> 14;
                  v121 >>= 7;
                }
                while (v123);
                *(v5 - 1) = v122;
              }
              else
              {
                v117[1] = v121;
                int v5 = v117 + 2;
              }
            }
            else
            {
              *unint64_t v117 = v116;
              int v5 = v117 + 1;
            }
            ++v112;
            unsigned int v111 = *(_DWORD **)a1;
          }
          while (v112 < **(_DWORD **)a1);
        }
        return v5;
      case 4:
        char v124 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v125 = 0;
          unsigned int v126 = 8 * a2;
          char v127 = (8 * a2) | 0x80;
          unsigned int v128 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              char v124 = *(_DWORD **)a1;
            }
            unint64_t v129 = *(void *)sub_100079B24(v124, v125);
            if (v126 > 0x7F)
            {
              char *v5 = v127;
              if (v126 >= 0x4000)
              {
                unint64_t v130 = v5 + 2;
                unsigned int v131 = v128;
                do
                {
                  *(v130 - 1) = v131 | 0x80;
                  unsigned int v132 = v131 >> 7;
                  ++v130;
                  unsigned int v133 = v131 >> 14;
                  v131 >>= 7;
                }
                while (v133);
                *(v130 - 1) = v132;
              }
              else
              {
                v5[1] = v126 >> 7;
                unint64_t v130 = v5 + 2;
              }
            }
            else
            {
              unint64_t v130 = v5 + 1;
              char *v5 = v126;
            }
            if (v129 > 0x7F)
            {
              unsigned char *v130 = v129 | 0x80;
              unint64_t v134 = v129 >> 7;
              if (v129 >> 14)
              {
                int v5 = v130 + 2;
                do
                {
                  *(v5 - 1) = v134 | 0x80;
                  unint64_t v135 = v134 >> 7;
                  ++v5;
                  unint64_t v136 = v134 >> 14;
                  v134 >>= 7;
                }
                while (v136);
                *(v5 - 1) = v135;
              }
              else
              {
                v130[1] = v134;
                int v5 = v130 + 2;
              }
            }
            else
            {
              unsigned char *v130 = v129;
              int v5 = v130 + 1;
            }
            ++v125;
            char v124 = *(_DWORD **)a1;
          }
          while (v125 < **(_DWORD **)a1);
        }
        return v5;
      case 5:
        unint64_t v137 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v138 = 0;
          unsigned int v139 = 8 * a2;
          char v140 = (8 * a2) | 0x80;
          unsigned int v141 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              unint64_t v137 = *(_DWORD **)a1;
            }
            unint64_t v142 = *(int *)sub_1000753A0(v137, v138);
            if (v139 > 0x7F)
            {
              char *v5 = v140;
              if (v139 >= 0x4000)
              {
                int v143 = v5 + 2;
                unsigned int v144 = v141;
                do
                {
                  *(v143 - 1) = v144 | 0x80;
                  unsigned int v145 = v144 >> 7;
                  ++v143;
                  unsigned int v146 = v144 >> 14;
                  v144 >>= 7;
                }
                while (v146);
                *(v143 - 1) = v145;
              }
              else
              {
                v5[1] = v139 >> 7;
                int v143 = v5 + 2;
              }
            }
            else
            {
              int v143 = v5 + 1;
              char *v5 = v139;
            }
            if (v142 > 0x7F)
            {
              *int v143 = v142 | 0x80;
              unint64_t v147 = v142 >> 7;
              if (v142 >> 14)
              {
                int v5 = v143 + 2;
                do
                {
                  *(v5 - 1) = v147 | 0x80;
                  unint64_t v148 = v147 >> 7;
                  ++v5;
                  unint64_t v149 = v147 >> 14;
                  v147 >>= 7;
                }
                while (v149);
                *(v5 - 1) = v148;
              }
              else
              {
                v143[1] = v147;
                int v5 = v143 + 2;
              }
            }
            else
            {
              *int v143 = v142;
              int v5 = v143 + 1;
            }
            ++v138;
            unint64_t v137 = *(_DWORD **)a1;
          }
          while (v138 < **(_DWORD **)a1);
        }
        return v5;
      case 6:
        int v150 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v151 = 0;
          unsigned int v152 = 8 * a2;
          unsigned int v153 = (8 * a2) | 1;
          char v154 = (8 * a2) | 0x81;
          unsigned int v155 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v156 = v152 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              int v150 = *(_DWORD **)a1;
            }
            uint64_t v157 = *(void *)sub_100079B24(v150, v151);
            if (v153 > 0x7F)
            {
              char *v5 = v154;
              if (v153 >= 0x4000)
              {
                int v158 = v5 + 2;
                unsigned int v159 = v155;
                do
                {
                  *((unsigned char *)v158 - 1) = v159 | 0x80;
                  unsigned int v160 = v159 >> 7;
                  int v158 = (void *)((char *)v158 + 1);
                  unsigned int v161 = v159 >> 14;
                  v159 >>= 7;
                }
                while (v161);
                *((unsigned char *)v158 - 1) = v160;
              }
              else
              {
                v5[1] = v156;
                int v158 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v153;
              int v158 = v5 + 1;
            }
            *int v158 = v157;
            int v5 = (char *)(v158 + 1);
            ++v151;
            int v150 = *(_DWORD **)a1;
          }
          while (v151 < **(_DWORD **)a1);
        }
        return v5;
      case 7:
        int v162 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v163 = 0;
          unsigned int v164 = (8 * a2) | 5;
          unsigned int v165 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v166 = (8 * a2) >> 7;
          char v167 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              int v162 = *(_DWORD **)a1;
            }
            int v168 = *(_DWORD *)sub_100076B84(v162, v163);
            if (v164 > 0x7F)
            {
              char *v5 = v167;
              if (v164 >= 0x4000)
              {
                uint64_t v169 = v5 + 2;
                unsigned int v170 = v165;
                do
                {
                  *((unsigned char *)v169 - 1) = v170 | 0x80;
                  unsigned int v171 = v170 >> 7;
                  uint64_t v169 = (_DWORD *)((char *)v169 + 1);
                  unsigned int v172 = v170 >> 14;
                  v170 >>= 7;
                }
                while (v172);
                *((unsigned char *)v169 - 1) = v171;
              }
              else
              {
                v5[1] = v166;
                uint64_t v169 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v164;
              uint64_t v169 = v5 + 1;
            }
            *uint64_t v169 = v168;
            int v5 = (char *)(v169 + 1);
            ++v163;
            int v162 = *(_DWORD **)a1;
          }
          while (v163 < **(_DWORD **)a1);
        }
        return v5;
      case 8:
        uint64_t v173 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v174 = 0;
          unsigned int v175 = 8 * a2;
          char v176 = (8 * a2) | 0x80;
          unsigned int v177 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              uint64_t v173 = *(_DWORD **)a1;
            }
            char v178 = *(unsigned char *)sub_100073B78(v173, v174);
            if (v175 > 0x7F)
            {
              char *v5 = v176;
              if (v175 >= 0x4000)
              {
                int v179 = v5 + 2;
                unsigned int v180 = v177;
                do
                {
                  *(v179 - 1) = v180 | 0x80;
                  unsigned int v181 = v180 >> 7;
                  ++v179;
                  unsigned int v182 = v180 >> 14;
                  v180 >>= 7;
                }
                while (v182);
                *(v179 - 1) = v181;
              }
              else
              {
                v5[1] = v175 >> 7;
                int v179 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v175;
              int v179 = v5 + 1;
            }
            *int v179 = v178;
            int v5 = v179 + 1;
            ++v174;
            uint64_t v173 = *(_DWORD **)a1;
          }
          while (v174 < **(_DWORD **)a1);
        }
        return v5;
      case 9:
        uint64_t v183 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) < 1) {
          return v5;
        }
        int v184 = 0;
        unsigned int v185 = 8 * a2;
        uint64_t v186 = 4;
        if (((a2 >> 25) & 0xF) != 0) {
          uint64_t v186 = 5;
        }
        unsigned int v187 = (8 * a2) | 2;
        uint64_t v188 = 1;
        if (v185 >= 0x80) {
          uint64_t v188 = 2;
        }
        if (v185 < 0x200000) {
          uint64_t v186 = 3;
        }
        if (v185 >= 0x4000) {
          uint64_t v189 = v186;
        }
        else {
          uint64_t v189 = v188;
        }
        unsigned int v429 = v185 >> 7;
        while (1)
        {
          if (*a4 <= (unint64_t)v5)
          {
            int v5 = sub_100051170((uint64_t)a4, v5);
            uint64_t v183 = *(void *)a1;
          }
          uint64_t v190 = sub_100048A5C(v183, v184);
          if (*(char *)(v190 + 23) < 0)
          {
            int64_t v191 = *(void *)(v190 + 8);
            if (v191 > 127) {
              goto LABEL_326;
            }
          }
          else
          {
            int64_t v191 = *(unsigned __int8 *)(v190 + 23);
          }
          if ((uint64_t)(*a4 + ~(unint64_t)&v5[v189] + 16) >= v191)
          {
            if (v187 > 0x7F)
            {
              char *v5 = (8 * a2) | 0x82;
              if (v187 >= 0x4000)
              {
                v192 = v5 + 2;
                unsigned int v193 = (a2 >> 4) & 0x1FFFFFF;
                do
                {
                  *(v192 - 1) = v193 | 0x80;
                  unsigned int v194 = v193 >> 7;
                  ++v192;
                  unsigned int v195 = v193 >> 14;
                  v193 >>= 7;
                }
                while (v195);
                *(v192 - 1) = v194;
              }
              else
              {
                v5[1] = v429;
                v192 = v5 + 2;
              }
            }
            else
            {
              v192 = v5 + 1;
              char *v5 = v187;
            }
            unsigned char *v192 = v191;
            v196 = v192 + 1;
            if (*(char *)(v190 + 23) >= 0) {
              v197 = (const void *)v190;
            }
            else {
              v197 = *(const void **)v190;
            }
            memcpy(v196, v197, v191);
            int v5 = &v196[v191];
            goto LABEL_324;
          }
LABEL_326:
          int v5 = sub_1000516E0(a4, a2, v190, v5);
LABEL_324:
          ++v184;
          uint64_t v183 = *(void *)a1;
          if (v184 >= *(_DWORD *)(*(void *)a1 + 8)) {
            return v5;
          }
        }
      case 10:
        uint64_t v198 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) >= 1)
        {
          int v199 = 0;
          unsigned int v200 = (8 * a2) | 3;
          char v201 = (8 * a2) | 0x83;
          unsigned int v202 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v203 = (8 * a2) | 4;
          unsigned int v204 = (8 * a2) >> 7;
          char v205 = (8 * a2) | 0x84;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              uint64_t v198 = *(void *)a1;
            }
            uint64_t v206 = sub_100064768(v198, v199);
            if (v200 > 0x7F)
            {
              char *v5 = v201;
              if (v200 >= 0x4000)
              {
                v207 = v5 + 2;
                unsigned int v208 = v202;
                do
                {
                  *(v207 - 1) = v208 | 0x80;
                  unsigned int v209 = v208 >> 7;
                  ++v207;
                  unsigned int v210 = v208 >> 14;
                  v208 >>= 7;
                }
                while (v210);
                *(v207 - 1) = v209;
              }
              else
              {
                v5[1] = v204;
                v207 = v5 + 2;
              }
            }
            else
            {
              v207 = v5 + 1;
              char *v5 = v200;
            }
            v211 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(void *)v206 + 96))(v206, v207, a4);
            if (*a4 <= (unint64_t)v211) {
              v211 = sub_100051170((uint64_t)a4, v211);
            }
            if (v203 > 0x7F)
            {
              char *v211 = v205;
              if (v203 >= 0x4000)
              {
                int v5 = v211 + 2;
                unsigned int v212 = v202;
                do
                {
                  *(v5 - 1) = v212 | 0x80;
                  unsigned int v213 = v212 >> 7;
                  ++v5;
                  unsigned int v214 = v212 >> 14;
                  v212 >>= 7;
                }
                while (v214);
                *(v5 - 1) = v213;
              }
              else
              {
                v211[1] = v204;
                int v5 = v211 + 2;
              }
            }
            else
            {
              int v5 = v211 + 1;
              char *v211 = v203;
            }
            ++v199;
            uint64_t v198 = *(void *)a1;
          }
          while (v199 < *(_DWORD *)(*(void *)a1 + 8));
        }
        return v5;
      case 11:
        uint64_t v215 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) >= 1)
        {
          int v216 = 0;
          unsigned int v217 = (8 * a2) | 2;
          unsigned int v218 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v219 = (8 * a2) >> 7;
          char v220 = (8 * a2) | 0x82;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              uint64_t v215 = *(void *)a1;
            }
            uint64_t v221 = sub_100064768(v215, v216);
            uint64_t v222 = v221;
            if (v217 > 0x7F)
            {
              char *v5 = v220;
              if (v217 >= 0x4000)
              {
                v223 = v5 + 2;
                unsigned int v224 = v218;
                do
                {
                  *(v223 - 1) = v224 | 0x80;
                  unsigned int v225 = v224 >> 7;
                  ++v223;
                  unsigned int v226 = v224 >> 14;
                  v224 >>= 7;
                }
                while (v226);
                *(v223 - 1) = v225;
              }
              else
              {
                v5[1] = v219;
                v223 = v5 + 2;
              }
            }
            else
            {
              v223 = v5 + 1;
              char *v5 = v217;
            }
            unsigned int v227 = (*(uint64_t (**)(uint64_t))(*(void *)v221 + 80))(v221);
            if (v227 > 0x7F)
            {
              unsigned char *v223 = v227 | 0x80;
              unsigned int v229 = v227 >> 7;
              if (v227 >> 14)
              {
                v228 = v223 + 2;
                do
                {
                  *(v228 - 1) = v229 | 0x80;
                  unsigned int v230 = v229 >> 7;
                  ++v228;
                  unsigned int v231 = v229 >> 14;
                  v229 >>= 7;
                }
                while (v231);
                *(v228 - 1) = v230;
              }
              else
              {
                v223[1] = v229;
                v228 = v223 + 2;
              }
            }
            else
            {
              unsigned char *v223 = v227;
              v228 = v223 + 1;
            }
            int v5 = (char *)(*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v222 + 96))(v222, v228, a4);
            ++v216;
            uint64_t v215 = *(void *)a1;
          }
          while (v216 < *(_DWORD *)(*(void *)a1 + 8));
        }
        return v5;
      case 12:
        uint64_t v232 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) < 1) {
          return v5;
        }
        int v233 = 0;
        unsigned int v234 = 8 * a2;
        uint64_t v235 = 4;
        if (((a2 >> 25) & 0xF) != 0) {
          uint64_t v235 = 5;
        }
        unsigned int v236 = (8 * a2) | 2;
        uint64_t v237 = 1;
        if (v234 >= 0x80) {
          uint64_t v237 = 2;
        }
        if (v234 < 0x200000) {
          uint64_t v235 = 3;
        }
        if (v234 >= 0x4000) {
          uint64_t v238 = v235;
        }
        else {
          uint64_t v238 = v237;
        }
        unsigned int v430 = v234 >> 7;
        break;
      case 13:
        v247 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v248 = 0;
          unsigned int v249 = 8 * a2;
          char v250 = (8 * a2) | 0x80;
          unsigned int v251 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              v247 = *(_DWORD **)a1;
            }
            unsigned int v252 = *(_DWORD *)sub_100076B84(v247, v248);
            if (v249 > 0x7F)
            {
              char *v5 = v250;
              if (v249 >= 0x4000)
              {
                v253 = v5 + 2;
                unsigned int v254 = v251;
                do
                {
                  *(v253 - 1) = v254 | 0x80;
                  unsigned int v255 = v254 >> 7;
                  ++v253;
                  unsigned int v256 = v254 >> 14;
                  v254 >>= 7;
                }
                while (v256);
                *(v253 - 1) = v255;
              }
              else
              {
                v5[1] = v249 >> 7;
                v253 = v5 + 2;
              }
            }
            else
            {
              v253 = v5 + 1;
              char *v5 = v249;
            }
            if (v252 > 0x7F)
            {
              unsigned char *v253 = v252 | 0x80;
              unsigned int v257 = v252 >> 7;
              if (v252 >> 14)
              {
                int v5 = v253 + 2;
                do
                {
                  *(v5 - 1) = v257 | 0x80;
                  unsigned int v258 = v257 >> 7;
                  ++v5;
                  unsigned int v259 = v257 >> 14;
                  v257 >>= 7;
                }
                while (v259);
                *(v5 - 1) = v258;
              }
              else
              {
                v253[1] = v257;
                int v5 = v253 + 2;
              }
            }
            else
            {
              unsigned char *v253 = v252;
              int v5 = v253 + 1;
            }
            ++v248;
            v247 = *(_DWORD **)a1;
          }
          while (v248 < **(_DWORD **)a1);
        }
        return v5;
      case 14:
        v260 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v261 = 0;
          unsigned int v262 = 8 * a2;
          char v263 = (8 * a2) | 0x80;
          unsigned int v264 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              v260 = *(_DWORD **)a1;
            }
            unint64_t v265 = *(int *)sub_1000753A0(v260, v261);
            if (v262 > 0x7F)
            {
              char *v5 = v263;
              if (v262 >= 0x4000)
              {
                v266 = v5 + 2;
                unsigned int v267 = v264;
                do
                {
                  *(v266 - 1) = v267 | 0x80;
                  unsigned int v268 = v267 >> 7;
                  ++v266;
                  unsigned int v269 = v267 >> 14;
                  v267 >>= 7;
                }
                while (v269);
                *(v266 - 1) = v268;
              }
              else
              {
                v5[1] = v262 >> 7;
                v266 = v5 + 2;
              }
            }
            else
            {
              v266 = v5 + 1;
              char *v5 = v262;
            }
            if (v265 > 0x7F)
            {
              unsigned char *v266 = v265 | 0x80;
              unint64_t v270 = v265 >> 7;
              if (v265 >> 14)
              {
                int v5 = v266 + 2;
                do
                {
                  *(v5 - 1) = v270 | 0x80;
                  unint64_t v271 = v270 >> 7;
                  ++v5;
                  unint64_t v272 = v270 >> 14;
                  v270 >>= 7;
                }
                while (v272);
                *(v5 - 1) = v271;
              }
              else
              {
                v266[1] = v270;
                int v5 = v266 + 2;
              }
            }
            else
            {
              unsigned char *v266 = v265;
              int v5 = v266 + 1;
            }
            ++v261;
            v260 = *(_DWORD **)a1;
          }
          while (v261 < **(_DWORD **)a1);
        }
        return v5;
      case 15:
        v273 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v274 = 0;
          unsigned int v275 = (8 * a2) | 5;
          unsigned int v276 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v277 = (8 * a2) >> 7;
          char v278 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              v273 = *(_DWORD **)a1;
            }
            int v279 = *(_DWORD *)sub_1000753A0(v273, v274);
            if (v275 > 0x7F)
            {
              char *v5 = v278;
              if (v275 >= 0x4000)
              {
                v280 = v5 + 2;
                unsigned int v281 = v276;
                do
                {
                  *((unsigned char *)v280 - 1) = v281 | 0x80;
                  unsigned int v282 = v281 >> 7;
                  v280 = (_DWORD *)((char *)v280 + 1);
                  unsigned int v283 = v281 >> 14;
                  v281 >>= 7;
                }
                while (v283);
                *((unsigned char *)v280 - 1) = v282;
              }
              else
              {
                v5[1] = v277;
                v280 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v275;
              v280 = v5 + 1;
            }
            _DWORD *v280 = v279;
            int v5 = (char *)(v280 + 1);
            ++v274;
            v273 = *(_DWORD **)a1;
          }
          while (v274 < **(_DWORD **)a1);
        }
        return v5;
      case 16:
        v284 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v285 = 0;
          unsigned int v286 = 8 * a2;
          unsigned int v287 = (8 * a2) | 1;
          char v288 = (8 * a2) | 0x81;
          unsigned int v289 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v290 = v286 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              v284 = *(_DWORD **)a1;
            }
            uint64_t v291 = *(void *)sub_100078340(v284, v285);
            if (v287 > 0x7F)
            {
              char *v5 = v288;
              if (v287 >= 0x4000)
              {
                v292 = v5 + 2;
                unsigned int v293 = v289;
                do
                {
                  *((unsigned char *)v292 - 1) = v293 | 0x80;
                  unsigned int v294 = v293 >> 7;
                  v292 = (void *)((char *)v292 + 1);
                  unsigned int v295 = v293 >> 14;
                  v293 >>= 7;
                }
                while (v295);
                *((unsigned char *)v292 - 1) = v294;
              }
              else
              {
                v5[1] = v290;
                v292 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v287;
              v292 = v5 + 1;
            }
            void *v292 = v291;
            int v5 = (char *)(v292 + 1);
            ++v285;
            v284 = *(_DWORD **)a1;
          }
          while (v285 < **(_DWORD **)a1);
        }
        return v5;
      case 17:
        v296 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v297 = 0;
          unsigned int v298 = 8 * a2;
          char v299 = (8 * a2) | 0x80;
          unsigned int v300 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              v296 = *(_DWORD **)a1;
            }
            int v301 = *(_DWORD *)sub_1000753A0(v296, v297);
            if (v298 > 0x7F)
            {
              char *v5 = v299;
              if (v298 >= 0x4000)
              {
                v302 = v5 + 2;
                unsigned int v303 = v300;
                do
                {
                  *(v302 - 1) = v303 | 0x80;
                  unsigned int v304 = v303 >> 7;
                  ++v302;
                  unsigned int v305 = v303 >> 14;
                  v303 >>= 7;
                }
                while (v305);
                *(v302 - 1) = v304;
              }
              else
              {
                v5[1] = v298 >> 7;
                v302 = v5 + 2;
              }
            }
            else
            {
              v302 = v5 + 1;
              char *v5 = v298;
            }
            unsigned int v306 = (2 * v301) ^ (v301 >> 31);
            if (v306 > 0x7F)
            {
              unsigned char *v302 = v306 | 0x80;
              unsigned int v307 = v306 >> 7;
              if (v306 >> 14)
              {
                int v5 = v302 + 2;
                do
                {
                  *(v5 - 1) = v307 | 0x80;
                  unsigned int v308 = v307 >> 7;
                  ++v5;
                  unsigned int v309 = v307 >> 14;
                  v307 >>= 7;
                }
                while (v309);
                *(v5 - 1) = v308;
              }
              else
              {
                v302[1] = v307;
                int v5 = v302 + 2;
              }
            }
            else
            {
              unsigned char *v302 = v306;
              int v5 = v302 + 1;
            }
            ++v297;
            v296 = *(_DWORD **)a1;
          }
          while (v297 < **(_DWORD **)a1);
        }
        return v5;
      case 18:
        v310 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v311 = 0;
          unsigned int v312 = 8 * a2;
          char v313 = (8 * a2) | 0x80;
          unsigned int v314 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_100051170((uint64_t)a4, v5);
              v310 = *(_DWORD **)a1;
            }
            uint64_t v315 = *(void *)sub_100078340(v310, v311);
            if (v312 > 0x7F)
            {
              char *v5 = v313;
              if (v312 >= 0x4000)
              {
                v316 = v5 + 2;
                unsigned int v317 = v314;
                do
                {
                  *(v316 - 1) = v317 | 0x80;
                  unsigned int v318 = v317 >> 7;
                  ++v316;
                  unsigned int v319 = v317 >> 14;
                  v317 >>= 7;
                }
                while (v319);
                *(v316 - 1) = v318;
              }
              else
              {
                v5[1] = v312 >> 7;
                v316 = v5 + 2;
              }
            }
            else
            {
              v316 = v5 + 1;
              char *v5 = v312;
            }
            unint64_t v320 = (2 * v315) ^ (v315 >> 63);
            if (v320 > 0x7F)
            {
              unsigned char *v316 = v320 | 0x80;
              unint64_t v321 = v320 >> 7;
              if (v320 >> 14)
              {
                int v5 = v316 + 2;
                do
                {
                  *(v5 - 1) = v321 | 0x80;
                  unint64_t v322 = v321 >> 7;
                  ++v5;
                  unint64_t v323 = v321 >> 14;
                  v321 >>= 7;
                }
                while (v323);
                *(v5 - 1) = v322;
              }
              else
              {
                v316[1] = v321;
                int v5 = v316 + 2;
              }
            }
            else
            {
              unsigned char *v316 = v320;
              int v5 = v316 + 1;
            }
            ++v311;
            v310 = *(_DWORD **)a1;
          }
          while (v311 < **(_DWORD **)a1);
        }
        return v5;
      default:
        return v5;
    }
    while (1)
    {
      if (*a4 <= (unint64_t)v5)
      {
        int v5 = sub_100051170((uint64_t)a4, v5);
        uint64_t v232 = *(void *)a1;
      }
      uint64_t v239 = sub_100048A5C(v232, v233);
      if (*(char *)(v239 + 23) < 0)
      {
        int64_t v240 = *(void *)(v239 + 8);
        if (v240 > 127) {
          goto LABEL_399;
        }
      }
      else
      {
        int64_t v240 = *(unsigned __int8 *)(v239 + 23);
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v238] + 16) >= v240)
      {
        if (v236 > 0x7F)
        {
          char *v5 = (8 * a2) | 0x82;
          if (v236 >= 0x4000)
          {
            v241 = v5 + 2;
            unsigned int v242 = (a2 >> 4) & 0x1FFFFFF;
            do
            {
              *(v241 - 1) = v242 | 0x80;
              unsigned int v243 = v242 >> 7;
              ++v241;
              unsigned int v244 = v242 >> 14;
              v242 >>= 7;
            }
            while (v244);
            *(v241 - 1) = v243;
          }
          else
          {
            v5[1] = v430;
            v241 = v5 + 2;
          }
        }
        else
        {
          v241 = v5 + 1;
          char *v5 = v236;
        }
        unsigned char *v241 = v240;
        v245 = v241 + 1;
        if (*(char *)(v239 + 23) >= 0) {
          v246 = (const void *)v239;
        }
        else {
          v246 = *(const void **)v239;
        }
        memcpy(v245, v246, v240);
        int v5 = &v245[v240];
        goto LABEL_397;
      }
LABEL_399:
      int v5 = sub_1000516E0(a4, a2, v239, v5);
LABEL_397:
      ++v233;
      uint64_t v232 = *(void *)a1;
      if (v233 >= *(_DWORD *)(*(void *)a1 + 8)) {
        return v5;
      }
    }
  }
  if (a1[10]) {
    return v5;
  }
  int v10 = a1[8];
  if ((v10 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    char v11 = sub_100051E74(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v431, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v432);
  }
  switch(v10)
  {
    case 1:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      uint64_t v12 = *(void *)a1;
      unsigned int v13 = (8 * a2) | 1;
      if (v13 <= 0x7F) {
        goto LABEL_575;
      }
      char *v5 = (8 * a2) | 0x81;
      unsigned int v14 = (8 * a2) >> 7;
      if (!(v13 >> 14)) {
        goto LABEL_602;
      }
      uint64_t v15 = v5 + 2;
      do
      {
        *((unsigned char *)v15 - 1) = v14 | 0x80;
        unsigned int v16 = v14 >> 7;
        uint64_t v15 = (void *)((char *)v15 + 1);
        unsigned int v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      goto LABEL_693;
    case 2:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      int v324 = *(_DWORD *)a1;
      unsigned int v325 = (8 * a2) | 5;
      if (v325 <= 0x7F) {
        goto LABEL_571;
      }
      char *v5 = (8 * a2) | 0x85;
      unsigned int v326 = (8 * a2) >> 7;
      if (!(v325 >> 14)) {
        goto LABEL_600;
      }
      v327 = v5 + 2;
      do
      {
        *((unsigned char *)v327 - 1) = v326 | 0x80;
        unsigned int v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        unsigned int v329 = v326 >> 14;
        v326 >>= 7;
      }
      while (v329);
      goto LABEL_689;
    case 3:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      unint64_t v330 = *(void *)a1;
      unsigned int v331 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v331 | 0x80;
        unsigned int v355 = v331 >> 7;
        if (v331 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v355 | 0x80;
            unsigned int v380 = v355 >> 7;
            ++v332;
            unsigned int v381 = v355 >> 14;
            v355 >>= 7;
          }
          while (v381);
          *(v332 - 1) = v380;
        }
        else
        {
          v5[1] = v355;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v331;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F) {
        goto LABEL_684;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14)) {
        goto LABEL_686;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v384 = v382 >> 14;
        v382 >>= 7;
      }
      while (v384);
      goto LABEL_718;
    case 4:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      unint64_t v330 = *(void *)a1;
      unsigned int v333 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v333 | 0x80;
        unsigned int v356 = v333 >> 7;
        if (v333 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v356 | 0x80;
            unsigned int v385 = v356 >> 7;
            ++v332;
            unsigned int v386 = v356 >> 14;
            v356 >>= 7;
          }
          while (v386);
          *(v332 - 1) = v385;
        }
        else
        {
          v5[1] = v356;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v333;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F) {
        goto LABEL_684;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14)) {
        goto LABEL_686;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v387 = v382 >> 14;
        v382 >>= 7;
      }
      while (v387);
      goto LABEL_718;
    case 5:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      unint64_t v330 = *(int *)a1;
      unsigned int v334 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v334 | 0x80;
        unsigned int v357 = v334 >> 7;
        if (v334 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v357 | 0x80;
            unsigned int v388 = v357 >> 7;
            ++v332;
            unsigned int v389 = v357 >> 14;
            v357 >>= 7;
          }
          while (v389);
          *(v332 - 1) = v388;
        }
        else
        {
          v5[1] = v357;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v334;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F) {
        goto LABEL_684;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14)) {
        goto LABEL_686;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v390 = v382 >> 14;
        v382 >>= 7;
      }
      while (v390);
      goto LABEL_718;
    case 6:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      uint64_t v12 = *(void *)a1;
      unsigned int v13 = (8 * a2) | 1;
      if (v13 <= 0x7F) {
        goto LABEL_575;
      }
      char *v5 = (8 * a2) | 0x81;
      unsigned int v14 = (8 * a2) >> 7;
      if (!(v13 >> 14)) {
        goto LABEL_602;
      }
      uint64_t v15 = v5 + 2;
      do
      {
        *((unsigned char *)v15 - 1) = v14 | 0x80;
        unsigned int v16 = v14 >> 7;
        uint64_t v15 = (void *)((char *)v15 + 1);
        unsigned int v335 = v14 >> 14;
        v14 >>= 7;
      }
      while (v335);
      goto LABEL_693;
    case 7:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      int v324 = *(_DWORD *)a1;
      unsigned int v325 = (8 * a2) | 5;
      if (v325 <= 0x7F) {
        goto LABEL_571;
      }
      char *v5 = (8 * a2) | 0x85;
      unsigned int v326 = (8 * a2) >> 7;
      if (!(v325 >> 14)) {
        goto LABEL_600;
      }
      v327 = v5 + 2;
      do
      {
        *((unsigned char *)v327 - 1) = v326 | 0x80;
        unsigned int v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        unsigned int v336 = v326 >> 14;
        v326 >>= 7;
      }
      while (v336);
      goto LABEL_689;
    case 8:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      LOBYTE(v337) = *a1;
      unsigned int v338 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v338 | 0x80;
        unsigned int v358 = v338 >> 7;
        if (v338 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v358 | 0x80;
            unsigned int v391 = v358 >> 7;
            ++v332;
            unsigned int v392 = v358 >> 14;
            v358 >>= 7;
          }
          while (v392);
          *(v332 - 1) = v391;
        }
        else
        {
          v5[1] = v358;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v338;
        v332 = v5 + 1;
      }
      goto LABEL_677;
    case 9:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      v339 = *(void **)a1;
      if (*(char *)(*(void *)a1 + 23) < 0)
      {
        int64_t v340 = v339[1];
        if (v340 > 127) {
          return sub_1000516E0(a4, a2, (uint64_t)v339, v5);
        }
      }
      else
      {
        int64_t v340 = *(unsigned __int8 *)(*(void *)a1 + 23);
      }
      unsigned int v364 = 8 * a2;
      uint64_t v365 = 1;
      uint64_t v366 = 2;
      uint64_t v367 = 3;
      uint64_t v368 = 4;
      if ((8 * a2) >> 28) {
        uint64_t v368 = 5;
      }
      if (v364 >= 0x200000) {
        uint64_t v367 = v368;
      }
      if (v364 >= 0x4000) {
        uint64_t v366 = v367;
      }
      if (v364 >= 0x80) {
        uint64_t v365 = v366;
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v365] + 16) < v340) {
        return sub_1000516E0(a4, a2, (uint64_t)v339, v5);
      }
      unsigned int v369 = v364 | 2;
      if ((v364 | 2) <= 0x7F) {
        goto LABEL_633;
      }
      char *v5 = v364 | 0x82;
      unsigned int v370 = v364 >> 7;
      if (!(v369 >> 14)) {
        goto LABEL_635;
      }
      v371 = v5 + 2;
      do
      {
        *(v371 - 1) = v370 | 0x80;
        unsigned int v372 = v370 >> 7;
        ++v371;
        unsigned int v373 = v370 >> 14;
        v370 >>= 7;
      }
      while (v373);
      goto LABEL_727;
    case 10:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      uint64_t v341 = *(void *)a1;
      unsigned int v342 = 8 * a2;
      unsigned int v343 = (8 * a2) | 3;
      unsigned int v344 = (8 * a2) >> 7;
      if (v343 > 0x7F)
      {
        char *v5 = (8 * a2) | 0x83;
        if (v343 >> 14)
        {
          v345 = v5 + 2;
          unsigned int v393 = v342 >> 7;
          do
          {
            *(v345 - 1) = v393 | 0x80;
            unsigned int v394 = v393 >> 7;
            ++v345;
            unsigned int v395 = v393 >> 14;
            v393 >>= 7;
          }
          while (v395);
          *(v345 - 1) = v394;
        }
        else
        {
          v5[1] = v344;
          v345 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v343;
        v345 = v5 + 1;
      }
      v332 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(void *)v341 + 96))(v341, v345, a4);
      if (*a4 <= (unint64_t)v332) {
        v332 = sub_100051170((uint64_t)a4, v332);
      }
      unsigned int v337 = v342 | 4;
      if ((v342 | 4) <= 0x7F) {
        goto LABEL_677;
      }
      char *v332 = v342 | 0x84;
      if (!(v337 >> 14))
      {
        v332[1] = v344;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v344 | 0x80;
        unsigned int v411 = v344 >> 7;
        ++v5;
        unsigned int v412 = v344 >> 14;
        v344 >>= 7;
      }
      while (v412);
      goto LABEL_715;
    case 11:
      if ((a1[10] & 0x10) != 0) {
        return (char *)(*(uint64_t (**)(void, uint64_t, char *, uint64_t *))(**(void **)a1 + 136))(*(void *)a1, a2, v5, a4);
      }
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      uint64_t v346 = *(void *)a1;
      unsigned int v347 = (8 * a2) | 2;
      if (v347 > 0x7F)
      {
        char *v5 = (8 * a2) | 0x82;
        unsigned int v379 = (8 * a2) >> 7;
        if (v347 >> 14)
        {
          v348 = v5 + 2;
          do
          {
            *(v348 - 1) = v379 | 0x80;
            unsigned int v421 = v379 >> 7;
            ++v348;
            unsigned int v422 = v379 >> 14;
            v379 >>= 7;
          }
          while (v422);
          *(v348 - 1) = v421;
        }
        else
        {
          v5[1] = v379;
          v348 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v347;
        v348 = v5 + 1;
      }
      unsigned int v423 = (*(uint64_t (**)(uint64_t))(*(void *)v346 + 80))(v346);
      if (v423 > 0x7F)
      {
        unsigned char *v348 = v423 | 0x80;
        unsigned int v425 = v423 >> 7;
        if (v423 >> 14)
        {
          v424 = v348 + 2;
          do
          {
            *(v424 - 1) = v425 | 0x80;
            unsigned int v426 = v425 >> 7;
            ++v424;
            unsigned int v427 = v425 >> 14;
            v425 >>= 7;
          }
          while (v427);
          *(v424 - 1) = v426;
        }
        else
        {
          v348[1] = v425;
          v424 = v348 + 2;
        }
      }
      else
      {
        unsigned char *v348 = v423;
        v424 = v348 + 1;
      }
      return (char *)(*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v346 + 96))(v346, v424, a4);
    case 12:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      v339 = *(void **)a1;
      if (*(char *)(*(void *)a1 + 23) < 0)
      {
        int64_t v340 = v339[1];
        if (v340 > 127) {
          return sub_1000516E0(a4, a2, (uint64_t)v339, v5);
        }
      }
      else
      {
        int64_t v340 = *(unsigned __int8 *)(*(void *)a1 + 23);
      }
      unsigned int v374 = 8 * a2;
      uint64_t v375 = 1;
      uint64_t v376 = 2;
      uint64_t v377 = 3;
      uint64_t v378 = 4;
      if ((8 * a2) >> 28) {
        uint64_t v378 = 5;
      }
      if (v374 >= 0x200000) {
        uint64_t v377 = v378;
      }
      if (v374 >= 0x4000) {
        uint64_t v376 = v377;
      }
      if (v374 >= 0x80) {
        uint64_t v375 = v376;
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v375] + 16) < v340) {
        return sub_1000516E0(a4, a2, (uint64_t)v339, v5);
      }
      unsigned int v369 = v374 | 2;
      if ((v374 | 2) > 0x7F)
      {
        char *v5 = v374 | 0x82;
        unsigned int v370 = v374 >> 7;
        if (v369 >> 14)
        {
          v371 = v5 + 2;
          do
          {
            *(v371 - 1) = v370 | 0x80;
            unsigned int v372 = v370 >> 7;
            ++v371;
            unsigned int v419 = v370 >> 14;
            v370 >>= 7;
          }
          while (v419);
LABEL_727:
          *(v371 - 1) = v372;
        }
        else
        {
LABEL_635:
          v5[1] = v370;
          v371 = v5 + 2;
        }
      }
      else
      {
LABEL_633:
        char *v5 = v369;
        v371 = v5 + 1;
      }
      unsigned char *v371 = v340;
      v420 = v371 + 1;
      if (*((char *)v339 + 23) < 0) {
        v339 = (void *)*v339;
      }
      memcpy(v420, v339, v340);
      return &v420[v340];
    case 13:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      unsigned int v337 = *(_DWORD *)a1;
      unsigned int v349 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v349 | 0x80;
        unsigned int v360 = v349 >> 7;
        if (v349 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v360 | 0x80;
            unsigned int v396 = v360 >> 7;
            ++v332;
            unsigned int v397 = v360 >> 14;
            v360 >>= 7;
          }
          while (v397);
          *(v332 - 1) = v396;
        }
        else
        {
          v5[1] = v360;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v349;
        v332 = v5 + 1;
      }
      if (v337 <= 0x7F)
      {
LABEL_677:
        char *v332 = v337;
        return v332 + 1;
      }
      char *v332 = v337 | 0x80;
      unsigned int v398 = v337 >> 7;
      if (!(v337 >> 14))
      {
        v332[1] = v398;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v398 | 0x80;
        unsigned int v411 = v398 >> 7;
        ++v5;
        unsigned int v413 = v398 >> 14;
        v398 >>= 7;
      }
      while (v413);
LABEL_715:
      *(v5 - 1) = v411;
      return v5;
    case 14:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      unint64_t v330 = *(int *)a1;
      unsigned int v350 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v350 | 0x80;
        unsigned int v361 = v350 >> 7;
        if (v350 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v361 | 0x80;
            unsigned int v399 = v361 >> 7;
            ++v332;
            unsigned int v400 = v361 >> 14;
            v361 >>= 7;
          }
          while (v400);
          *(v332 - 1) = v399;
        }
        else
        {
          v5[1] = v361;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v350;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
      {
LABEL_684:
        char *v332 = v330;
        return v332 + 1;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14))
      {
LABEL_686:
        v332[1] = v382;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v414 = v382 >> 14;
        v382 >>= 7;
      }
      while (v414);
LABEL_718:
      *(v5 - 1) = v383;
      return v5;
    case 15:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      int v324 = *(_DWORD *)a1;
      unsigned int v325 = (8 * a2) | 5;
      if (v325 > 0x7F)
      {
        char *v5 = (8 * a2) | 0x85;
        unsigned int v326 = (8 * a2) >> 7;
        if (v325 >> 14)
        {
          v327 = v5 + 2;
          do
          {
            *((unsigned char *)v327 - 1) = v326 | 0x80;
            unsigned int v328 = v326 >> 7;
            v327 = (_DWORD *)((char *)v327 + 1);
            unsigned int v401 = v326 >> 14;
            v326 >>= 7;
          }
          while (v401);
LABEL_689:
          *((unsigned char *)v327 - 1) = v328;
        }
        else
        {
LABEL_600:
          v5[1] = v326;
          v327 = v5 + 2;
        }
      }
      else
      {
LABEL_571:
        char *v5 = v325;
        v327 = v5 + 1;
      }
      _DWORD *v327 = v324;
      return (char *)(v327 + 1);
    case 16:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      uint64_t v12 = *(void *)a1;
      unsigned int v13 = (8 * a2) | 1;
      if (v13 > 0x7F)
      {
        char *v5 = (8 * a2) | 0x81;
        unsigned int v14 = (8 * a2) >> 7;
        if (v13 >> 14)
        {
          uint64_t v15 = v5 + 2;
          do
          {
            *((unsigned char *)v15 - 1) = v14 | 0x80;
            unsigned int v16 = v14 >> 7;
            uint64_t v15 = (void *)((char *)v15 + 1);
            unsigned int v402 = v14 >> 14;
            v14 >>= 7;
          }
          while (v402);
LABEL_693:
          *((unsigned char *)v15 - 1) = v16;
        }
        else
        {
LABEL_602:
          v5[1] = v14;
          uint64_t v15 = v5 + 2;
        }
      }
      else
      {
LABEL_575:
        char *v5 = v13;
        uint64_t v15 = v5 + 1;
      }
      *uint64_t v15 = v12;
      return (char *)(v15 + 1);
    case 17:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      int v351 = *(_DWORD *)a1;
      unsigned int v352 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v352 | 0x80;
        unsigned int v362 = v352 >> 7;
        if (v352 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v362 | 0x80;
            unsigned int v403 = v362 >> 7;
            ++v332;
            unsigned int v404 = v362 >> 14;
            v362 >>= 7;
          }
          while (v404);
          *(v332 - 1) = v403;
        }
        else
        {
          v5[1] = v362;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v352;
        v332 = v5 + 1;
      }
      unsigned int v405 = (2 * v351) ^ (v351 >> 31);
      if (v405 <= 0x7F)
      {
        char *v332 = v405;
        return v332 + 1;
      }
      char *v332 = v405 | 0x80;
      unsigned int v406 = v405 >> 7;
      if (!(v405 >> 14))
      {
        v332[1] = v406;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v406 | 0x80;
        unsigned int v415 = v406 >> 7;
        ++v5;
        unsigned int v416 = v406 >> 14;
        v406 >>= 7;
      }
      while (v416);
      *(v5 - 1) = v415;
      return v5;
    case 18:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_100051170((uint64_t)a4, v5);
      }
      uint64_t v353 = *(void *)a1;
      unsigned int v354 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v354 | 0x80;
        unsigned int v363 = v354 >> 7;
        if (v354 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v363 | 0x80;
            unsigned int v407 = v363 >> 7;
            ++v332;
            unsigned int v408 = v363 >> 14;
            v363 >>= 7;
          }
          while (v408);
          *(v332 - 1) = v407;
        }
        else
        {
          v5[1] = v363;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v354;
        v332 = v5 + 1;
      }
      unint64_t v409 = (2 * v353) ^ (v353 >> 63);
      if (v409 > 0x7F)
      {
        char *v332 = v409 | 0x80;
        unint64_t v410 = v409 >> 7;
        if (v409 >> 14)
        {
          int v5 = v332 + 2;
          do
          {
            *(v5 - 1) = v410 | 0x80;
            unint64_t v417 = v410 >> 7;
            ++v5;
            unint64_t v418 = v410 >> 14;
            v410 >>= 7;
          }
          while (v418);
          *(v5 - 1) = v417;
        }
        else
        {
          v332[1] = v410;
          return v332 + 2;
        }
      }
      else
      {
        char *v332 = v409;
        return v332 + 1;
      }
      return v5;
    default:
      return v5;
  }
}

void sub_100062BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_100062CAC(uint64_t a1, char *a2, uint64_t *a3)
{
  int v5 = *(void **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    uint64_t v12 = (void *)*v5;
    int v10 = v5 + 1;
    char v11 = v12;
    if (v12 != v10)
    {
      do
      {
        a2 = sub_100064038((unsigned char *)v11 + 40, *((unsigned int *)v11 + 8), a2, a3);
        unsigned int v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            unsigned int v14 = v13;
            unsigned int v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            unsigned int v14 = (void *)v11[2];
            BOOL v15 = *v14 == (void)v11;
            char v11 = v14;
          }
          while (!v15);
        }
        char v11 = v14;
      }
      while (v14 != v10);
    }
  }
  else if (*(_WORD *)(a1 + 10))
  {
    uint64_t v6 = &v5[4 * *(unsigned __int16 *)(a1 + 10)];
    do
    {
      uint64_t v7 = v5 + 1;
      unsigned int v8 = *(_DWORD *)v5;
      v5 += 4;
      a2 = sub_100064038(v7, v8, a2, a3);
    }
    while (v5 != v6);
  }
  return a2;
}

uint64_t sub_100062D70(uint64_t a1)
{
  int v1 = *(int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) < 0x101u)
  {
    if (*(_WORD *)(a1 + 10))
    {
      uint64_t v2 = 0;
      uint64_t v3 = &v1[8 * *(unsigned __int16 *)(a1 + 10)];
      do
      {
        uint64_t v4 = (_DWORD **)(v1 + 2);
        int v5 = *v1;
        v1 += 8;
        v2 += sub_100062E34(v4, v5);
      }
      while (v1 != v3);
      return v2;
    }
    return 0;
  }
  unsigned int v8 = *(int **)v1;
  uint64_t v6 = v1 + 2;
  uint64_t v7 = v8;
  if (v8 == v6) {
    return 0;
  }
  uint64_t v2 = 0;
  do
  {
    unint64_t v9 = sub_100062E34((_DWORD **)v7 + 5, v7[8]);
    int v10 = (int *)*((void *)v7 + 1);
    if (v10)
    {
      do
      {
        char v11 = v10;
        int v10 = *(int **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        char v11 = (int *)*((void *)v7 + 2);
        BOOL v12 = *(void *)v11 == (void)v7;
        uint64_t v7 = v11;
      }
      while (!v12);
    }
    v2 += v9;
    uint64_t v7 = v11;
  }
  while (v11 != v6);
  return v2;
}

unint64_t sub_100062E34(_DWORD **a1, int a2)
{
  if (*((unsigned char *)a1 + 9))
  {
    int v4 = *((unsigned __int8 *)a1 + 8);
    unsigned __int8 v5 = v4 - 19;
    if (*((unsigned char *)a1 + 11))
    {
      if ((v4 - 19) <= 0xEDu)
      {
        sub_100051E5C((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v6 = sub_100051E74(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v101, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v102);
      }
      switch(v4)
      {
        case 1:
        case 6:
        case 16:
          uint64_t v21 = 8 * **a1;
          goto LABEL_63;
        case 2:
        case 7:
        case 15:
          uint64_t v21 = 4 * **a1;
          goto LABEL_63;
        case 3:
          uint64_t v27 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v28 = 0;
          do
          {
            v21 += (9 * (__clz(*(void *)sub_100078340(v27, v28++) | 1) ^ 0x3F) + 73) >> 6;
            uint64_t v27 = *a1;
          }
          while (v28 < **a1);
          goto LABEL_63;
        case 4:
          unsigned int v29 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v30 = 0;
          do
          {
            v21 += (9 * (__clz(*(void *)sub_100079B24(v29, v30++) | 1) ^ 0x3F) + 73) >> 6;
            unsigned int v29 = *a1;
          }
          while (v30 < **a1);
          goto LABEL_63;
        case 5:
          unsigned int v31 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v32 = 0;
          do
          {
            unsigned int v33 = (int *)sub_1000753A0(v31, v32);
            uint64_t v34 = (9 * (__clz(*v33 | 1) ^ 0x1F) + 73) >> 6;
            if (*v33 >= 0) {
              uint64_t v35 = v34;
            }
            else {
              uint64_t v35 = 10;
            }
            v21 += v35;
            ++v32;
            unsigned int v31 = *a1;
          }
          while (v32 < **a1);
          goto LABEL_63;
        case 8:
          uint64_t v21 = **a1;
          goto LABEL_63;
        case 9:
        case 10:
        case 11:
        case 12:
          sub_100051E5C((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1599);
          uint64_t v7 = sub_100051E74(v102, "Non-primitive types can't be packed.");
          sub_100051FB0((uint64_t)&v101, (const char **)&v7->__r_.__value_.__l.__data_);
          sub_100051FB8((uint64_t)v102);
          goto LABEL_7;
        case 13:
          unsigned int v22 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v23 = 0;
          do
          {
            v21 += (9 * (__clz(*(_DWORD *)sub_100076B84(v22, v23++) | 1) ^ 0x1F) + 73) >> 6;
            unsigned int v22 = *a1;
          }
          while (v23 < **a1);
          goto LABEL_63;
        case 14:
          unint64_t v36 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v37 = 0;
          do
          {
            unint64_t v38 = (int *)sub_1000753A0(v36, v37);
            uint64_t v39 = (9 * (__clz(*v38 | 1) ^ 0x1F) + 73) >> 6;
            if (*v38 >= 0) {
              uint64_t v40 = v39;
            }
            else {
              uint64_t v40 = 10;
            }
            v21 += v40;
            ++v37;
            unint64_t v36 = *a1;
          }
          while (v37 < **a1);
          goto LABEL_63;
        case 17:
          char v24 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v25 = 0;
          do
          {
            unsigned int v26 = (int *)sub_1000753A0(v24, v25);
            v21 += (9 * (__clz((2 * *v26) ^ (*v26 >> 31) | 1) ^ 0x1F) + 73) >> 6;
            ++v25;
            char v24 = *a1;
          }
          while (v25 < **a1);
          goto LABEL_63;
        case 18:
          uint64_t v41 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v42 = 0;
          do
          {
            int v43 = (uint64_t *)sub_100078340(v41, v42);
            v21 += (9 * (__clz((2 * *v43) ^ (*v43 >> 63) | 1) ^ 0x3F) + 73) >> 6;
            ++v42;
            uint64_t v41 = *a1;
          }
          while (v42 < **a1);
LABEL_63:
          *((_DWORD *)a1 + 3) = v21;
          unint64_t v44 = v21 + ((9 * (__clz((8 * a2) | 3) ^ 0x1F) + 73) >> 6) + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
          if (v21) {
            unint64_t v8 = v44;
          }
          else {
            unint64_t v8 = 0;
          }
          break;
        default:
LABEL_7:
          unint64_t v8 = 0;
          *((_DWORD *)a1 + 3) = 0;
          break;
      }
    }
    else
    {
      if ((v4 - 19) > 0xEDu)
      {
        int v14 = *((unsigned __int8 *)a1 + 8);
      }
      else
      {
        sub_100051E5C((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        unsigned int v13 = sub_100051E74(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v101, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v102);
        int v14 = *((unsigned __int8 *)a1 + 8);
        unsigned __int8 v5 = v14 - 19;
      }
      char v15 = v4 == 10;
      if (v5 <= 0xEDu)
      {
        sub_100051E5C((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        unsigned int v16 = sub_100051E74(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_100051FB0((uint64_t)&v101, (const char **)&v16->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v102);
      }
      unint64_t v17 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v15;
      switch(v14)
      {
        case 1:
        case 6:
        case 16:
          unsigned int v18 = v17 + 8;
          goto LABEL_27;
        case 2:
        case 7:
        case 15:
          unsigned int v18 = v17 + 4;
LABEL_27:
          unint64_t v8 = v18 * (unint64_t)**a1;
          break;
        case 3:
          unsigned int v50 = *a1;
          int v51 = **a1;
          unint64_t v8 = v17 * (unint64_t)v51;
          if (v51 >= 1)
          {
            int v52 = 0;
            do
            {
              v8 += (9 * (__clz(*(void *)sub_100078340(v50, v52++) | 1) ^ 0x3F) + 73) >> 6;
              unsigned int v50 = *a1;
            }
            while (v52 < **a1);
          }
          break;
        case 4:
          unsigned int v53 = *a1;
          int v54 = **a1;
          unint64_t v8 = v17 * (unint64_t)v54;
          if (v54 >= 1)
          {
            int v55 = 0;
            do
            {
              v8 += (9 * (__clz(*(void *)sub_100079B24(v53, v55++) | 1) ^ 0x3F) + 73) >> 6;
              unsigned int v53 = *a1;
            }
            while (v55 < **a1);
          }
          break;
        case 5:
          int v56 = *a1;
          int v57 = **a1;
          unint64_t v8 = v17 * (unint64_t)v57;
          if (v57 >= 1)
          {
            int v58 = 0;
            do
            {
              unsigned int v59 = (int *)sub_1000753A0(v56, v58);
              uint64_t v60 = (9 * (__clz(*v59 | 1) ^ 0x1F) + 73) >> 6;
              if (*v59 >= 0) {
                uint64_t v61 = v60;
              }
              else {
                uint64_t v61 = 10;
              }
              v8 += v61;
              ++v58;
              int v56 = *a1;
            }
            while (v58 < **a1);
          }
          break;
        case 8:
          unint64_t v8 = **a1 + **a1 * (unint64_t)v17;
          break;
        case 9:
          unsigned int v62 = *a1;
          int v63 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v63;
          if (v63 >= 1)
          {
            int v64 = 0;
            do
            {
              uint64_t v65 = sub_100048A5C((uint64_t)v62, v64);
              uint64_t v66 = *(unsigned __int8 *)(v65 + 23);
              if ((v66 & 0x80u) != 0) {
                uint64_t v66 = *(void *)(v65 + 8);
              }
              v8 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6);
              ++v64;
              unsigned int v62 = *a1;
            }
            while (v64 < (*a1)[2]);
          }
          break;
        case 10:
          int v67 = *a1;
          int v68 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v68;
          if (v68 >= 1)
          {
            int v69 = 0;
            do
            {
              uint64_t v70 = sub_100064768((uint64_t)v67, v69);
              v8 += (*(uint64_t (**)(uint64_t))(*(void *)v70 + 72))(v70);
              ++v69;
              int v67 = *a1;
            }
            while (v69 < (*a1)[2]);
          }
          break;
        case 11:
          unint64_t v71 = *a1;
          int v72 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v72;
          if (v72 >= 1)
          {
            int v73 = 0;
            do
            {
              uint64_t v74 = sub_100064768((uint64_t)v71, v73);
              uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)v74 + 72))(v74);
              v8 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6);
              ++v73;
              unint64_t v71 = *a1;
            }
            while (v73 < (*a1)[2]);
          }
          break;
        case 12:
          unint64_t v76 = *a1;
          int v77 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v77;
          if (v77 >= 1)
          {
            int v78 = 0;
            do
            {
              uint64_t v79 = sub_100048A5C((uint64_t)v76, v78);
              uint64_t v80 = *(unsigned __int8 *)(v79 + 23);
              if ((v80 & 0x80u) != 0) {
                uint64_t v80 = *(void *)(v79 + 8);
              }
              v8 += v80 + ((9 * (__clz(v80 | 1) ^ 0x1F) + 73) >> 6);
              ++v78;
              unint64_t v76 = *a1;
            }
            while (v78 < (*a1)[2]);
          }
          break;
        case 13:
          int v81 = *a1;
          int v82 = **a1;
          unint64_t v8 = v17 * (unint64_t)v82;
          if (v82 >= 1)
          {
            int v83 = 0;
            do
            {
              v8 += (9 * (__clz(*(_DWORD *)sub_100076B84(v81, v83++) | 1) ^ 0x1F) + 73) >> 6;
              int v81 = *a1;
            }
            while (v83 < **a1);
          }
          break;
        case 14:
          int v84 = *a1;
          int v85 = **a1;
          unint64_t v8 = v17 * (unint64_t)v85;
          if (v85 >= 1)
          {
            int v86 = 0;
            do
            {
              unint64_t v87 = (int *)sub_1000753A0(v84, v86);
              uint64_t v88 = (9 * (__clz(*v87 | 1) ^ 0x1F) + 73) >> 6;
              if (*v87 >= 0) {
                uint64_t v89 = v88;
              }
              else {
                uint64_t v89 = 10;
              }
              v8 += v89;
              ++v86;
              int v84 = *a1;
            }
            while (v86 < **a1);
          }
          break;
        case 17:
          unint64_t v90 = *a1;
          int v91 = **a1;
          unint64_t v8 = v17 * (unint64_t)v91;
          if (v91 >= 1)
          {
            int v92 = 0;
            do
            {
              uint64_t v93 = (int *)sub_1000753A0(v90, v92);
              v8 += (9 * (__clz((2 * *v93) ^ (*v93 >> 31) | 1) ^ 0x1F) + 73) >> 6;
              ++v92;
              unint64_t v90 = *a1;
            }
            while (v92 < **a1);
          }
          break;
        case 18:
          int v94 = *a1;
          int v95 = **a1;
          unint64_t v8 = v17 * (unint64_t)v95;
          if (v95 >= 1)
          {
            int v96 = 0;
            do
            {
              unint64_t v97 = (uint64_t *)sub_100078340(v94, v96);
              v8 += (9 * (__clz((2 * *v97) ^ (*v97 >> 63) | 1) ^ 0x3F) + 73) >> 6;
              ++v96;
              int v94 = *a1;
            }
            while (v96 < **a1);
          }
          break;
        default:
          return 0;
      }
    }
  }
  else if (*((unsigned char *)a1 + 10))
  {
    return 0;
  }
  else
  {
    int v9 = *((unsigned __int8 *)a1 + 8);
    unsigned __int8 v10 = v9 - 19;
    if ((v9 - 19) > 0xEDu)
    {
      int v12 = *((unsigned __int8 *)a1 + 8);
    }
    else
    {
      sub_100051E5C((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v11 = sub_100051E74(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v101, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v102);
      int v12 = *((unsigned __int8 *)a1 + 8);
      unsigned __int8 v10 = v12 - 19;
    }
    char v19 = v9 == 10;
    if (v10 <= 0xEDu)
    {
      sub_100051E5C((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      int v20 = sub_100051E74(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v101, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v102);
    }
    unint64_t v8 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v19;
    switch(v12)
    {
      case 1:
      case 6:
      case 16:
        v8 += 8;
        return v8;
      case 2:
      case 7:
      case 15:
        v8 += 4;
        return v8;
      case 3:
      case 4:
        unint64_t v46 = (unint64_t)*a1;
        goto LABEL_138;
      case 5:
      case 14:
        uint64_t v47 = (9 * (__clz(*(_DWORD *)a1 | 1) ^ 0x1F) + 73) >> 6;
        if (*(int *)a1 >= 0) {
          uint64_t v48 = v47;
        }
        else {
          uint64_t v48 = 10;
        }
        v8 += v48;
        return v8;
      case 8:
        return ++v8;
      case 9:
      case 12:
        uint64_t v49 = *((void *)*a1 + 1);
        if (*((char *)*a1 + 23) >= 0) {
          uint64_t v49 = *((unsigned __int8 *)*a1 + 23);
        }
        v8 += v49 + ((9 * (__clz(v49 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 10:
        v8 += (*(uint64_t (**)(void))(*(void *)*a1 + 72))();
        return v8;
      case 11:
        uint64_t v98 = *(void *)*a1;
        if ((*((unsigned char *)a1 + 10) & 0x10) != 0) {
          uint64_t v99 = (*(uint64_t (**)(void))(v98 + 88))();
        }
        else {
          uint64_t v99 = (*(uint64_t (**)(void))(v98 + 72))();
        }
        v8 += v99 + ((9 * (__clz(v99 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 13:
        int v100 = *(_DWORD *)a1;
        goto LABEL_136;
      case 17:
        int v100 = (2 * *(_DWORD *)a1) ^ (*(int *)a1 >> 31);
LABEL_136:
        v8 += (9 * (__clz(v100 | 1) ^ 0x1F) + 73) >> 6;
        break;
      case 18:
        unint64_t v46 = (2 * (void)*a1) ^ ((uint64_t)*a1 >> 63);
LABEL_138:
        v8 += (9 * (__clz(v46 | 1) ^ 0x3F) + 73) >> 6;
        break;
      default:
        return v8;
    }
  }
  return v8;
}

void sub_100063A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100063B48(unsigned __int8 *result)
{
  int v1 = result;
  uint64_t v2 = result[8];
  if (result[9])
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v3 = sub_100051E74(v9, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_100051FB0((uint64_t)&v8, (const char **)&v3->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v9);
    }
    switch(v2)
    {
      case 1:
        uint64_t result = *(unsigned __int8 **)v1;
        if (!*(void *)v1) {
          return result;
        }
        sub_10007CBD4();
        break;
      case 2:
        uint64_t result = *(unsigned __int8 **)v1;
        if (!*(void *)v1) {
          return result;
        }
        sub_10007B414();
        break;
      case 3:
      case 16:
      case 18:
        uint64_t result = *(unsigned __int8 **)v1;
        if (!*(void *)v1) {
          return result;
        }
        sub_100078488();
        break;
      case 4:
      case 6:
        uint64_t result = *(unsigned __int8 **)v1;
        if (!*(void *)v1) {
          return result;
        }
        sub_100079C6C();
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        uint64_t result = *(unsigned __int8 **)v1;
        if (!*(void *)v1) {
          return result;
        }
        sub_1000754E8();
        break;
      case 7:
      case 13:
        uint64_t result = *(unsigned __int8 **)v1;
        if (!*(void *)v1) {
          return result;
        }
        sub_100076CCC();
        break;
      case 8:
        uint64_t result = *(unsigned __int8 **)v1;
        if (!*(void *)v1) {
          return result;
        }
        sub_100073CD8();
        break;
      case 9:
      case 12:
        uint64_t result = *(unsigned __int8 **)v1;
        if (!*(void *)v1) {
          return result;
        }
        sub_10007DF18();
        break;
      case 10:
      case 11:
        uint64_t v7 = *(unsigned __int8 **)v1;
        if (!v7) {
          return result;
        }
        sub_100065200(v7);
        sub_10003D660((uint64_t *)v7);
        break;
      default:
        return result;
    }
    goto LABEL_36;
  }
  if ((v2 - 19) <= 0xFFFFFFED)
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    int v4 = sub_100051E74(v9, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (unsigned __int8 *)sub_100051FB8((uint64_t)v9);
  }
  int v5 = dword_100093130[v2];
  if (v5 == 10)
  {
    uint64_t result = *(unsigned __int8 **)v1;
    if ((v1[10] & 0x10) != 0)
    {
      if (!result) {
        return result;
      }
    }
    else if (!result)
    {
      return result;
    }
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
  }
  if (v5 == 9)
  {
    uint64_t v6 = *(unsigned __int8 **)v1;
    if (v6)
    {
      if ((char)v6[23] < 0) {
        operator delete(*(void **)v6);
      }
LABEL_36:
      operator delete();
    }
  }
  return result;
}

void sub_100063DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100063DF4(uint64_t a1, int a2)
{
  if (*(unsigned __int16 *)(a1 + 8) <= 0x100u) {
    sub_100065B0C();
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v4;
    }
    else {
      int v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3) {
    return 0;
  }
  int v10 = *(_DWORD *)(v6 + 32);
  uint64_t v11 = v6 + 40;
  if (v10 <= a2) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t sub_100063E64(uint64_t a1, int a2)
{
  if (*(unsigned __int16 *)(a1 + 8) <= 0x100u) {
    sub_100065B38();
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v4;
    }
    else {
      int v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3) {
    return 0;
  }
  int v10 = *(_DWORD *)(v6 + 32);
  uint64_t v11 = v6 + 40;
  if (v10 <= a2) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t sub_100063ED4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000B6730, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000B6730))
  {
    operator new();
  }
  return qword_1000B6728;
}

void sub_100063F74(_Unwind_Exception *a1)
{
}

uint64_t sub_100063F8C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000B6740, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000B6740))
  {
    operator new();
  }
  return qword_1000B6738;
}

void sub_100064020(_Unwind_Exception *a1)
{
}

char *sub_100064038(unsigned char *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v5 = a3;
  if (a1[8] == 11 && !a1[9])
  {
    if ((a1[10] & 1) == 0)
    {
      if (*a4 <= (unint64_t)a3) {
        uint64_t v5 = sub_100051170((uint64_t)a4, a3);
      }
      *(_WORD *)uint64_t v5 = 4107;
      if (a2 > 0x7F)
      {
        void v5[2] = a2 | 0x80;
        unsigned int v11 = a2 >> 7;
        if (a2 >> 14)
        {
          int v10 = v5 + 4;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          v5[3] = v11;
          int v10 = v5 + 4;
        }
      }
      else
      {
        void v5[2] = a2;
        int v10 = v5 + 3;
      }
      uint64_t v14 = *(void *)a1;
      if ((a1[10] & 0x10) != 0)
      {
        unint64_t v17 = (char *)(*(uint64_t (**)(void, uint64_t, unsigned char *, uint64_t *))(*(void *)v14 + 136))(*(void *)a1, 3, v10, a4);
      }
      else
      {
        unsigned char *v10 = 26;
        unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 80))(v14);
        if (v15 > 0x7F)
        {
          v10[1] = v15 | 0x80;
          unsigned int v18 = v15 >> 7;
          if (v15 >> 14)
          {
            unsigned int v16 = v10 + 3;
            do
            {
              *(v16 - 1) = v18 | 0x80;
              unsigned int v19 = v18 >> 7;
              ++v16;
              unsigned int v20 = v18 >> 14;
              v18 >>= 7;
            }
            while (v20);
            *(v16 - 1) = v19;
          }
          else
          {
            void v10[2] = v18;
            unsigned int v16 = v10 + 3;
          }
        }
        else
        {
          v10[1] = v15;
          unsigned int v16 = v10 + 2;
        }
        unint64_t v17 = (char *)(*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v14 + 96))(v14, v16, a4);
      }
      uint64_t v21 = v17;
      if (*a4 <= (unint64_t)v17) {
        uint64_t v21 = sub_100051170((uint64_t)a4, v17);
      }
      *uint64_t v21 = 12;
      return v21 + 1;
    }
  }
  else
  {
    sub_100051E5C((uint64_t)v23, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 2076);
    BOOL v8 = sub_100051E74(v23, "Invalid message set extension.");
    sub_100051FB0((uint64_t)&v22, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v23);
    return sub_1000600A8(a1, a2, v5, a4);
  }
  return v5;
}

void sub_100064290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000642A8(uint64_t **a1, int a2)
{
  if (*((unsigned char *)a1 + 8) == 11 && !*((unsigned char *)a1 + 9))
  {
    if (*((unsigned char *)a1 + 10))
    {
      return 0;
    }
    else
    {
      uint64_t v3 = ((9 * (__clz(a2 | 1) ^ 0x1F) + 73) >> 6) + 4;
      uint64_t v4 = **a1;
      if ((*((unsigned char *)a1 + 10) & 0x10) != 0) {
        uint64_t v5 = (*(uint64_t (**)(void))(v4 + 88))();
      }
      else {
        uint64_t v5 = (*(uint64_t (**)(void))(v4 + 72))();
      }
      return v3 + v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
    }
  }
  else
  {
    return sub_100062E34((_DWORD **)a1, a2);
  }
}

uint64_t sub_10006439C(uint64_t a1)
{
  int v1 = *(int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) < 0x101u)
  {
    if (*(_WORD *)(a1 + 10))
    {
      uint64_t v2 = 0;
      uint64_t v3 = &v1[8 * *(unsigned __int16 *)(a1 + 10)];
      do
      {
        uint64_t v4 = (uint64_t **)(v1 + 2);
        int v5 = *v1;
        v1 += 8;
        v2 += sub_1000642A8(v4, v5);
      }
      while (v1 != v3);
      return v2;
    }
    return 0;
  }
  BOOL v8 = *(int **)v1;
  uint64_t v6 = v1 + 2;
  int v7 = v8;
  if (v8 == v6) {
    return 0;
  }
  uint64_t v2 = 0;
  do
  {
    unint64_t v9 = sub_1000642A8((uint64_t **)v7 + 5, v7[8]);
    int v10 = (int *)*((void *)v7 + 1);
    if (v10)
    {
      do
      {
        unsigned int v11 = v10;
        int v10 = *(int **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        unsigned int v11 = (int *)*((void *)v7 + 2);
        BOOL v12 = *(void *)v11 == (void)v7;
        int v7 = v11;
      }
      while (!v12);
    }
    v2 += v9;
    int v7 = v11;
  }
  while (v11 != v6);
  return v2;
}

void sub_100064460()
{
}

unint64_t sub_100064474(uint64_t a1)
{
  unint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (v1 >> 31)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/message_lite.h", 113);
    uint64_t v2 = sub_100051E74(v5, "CHECK failed: (size) <= (static_cast<size_t>(2147483647)): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v5);
  }
  return v1;
}

void sub_100064508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100064520(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = (void **)result;
    uint64_t v2 = *(void **)(result + 16);
    if (v2)
    {
      do
      {
        uint64_t v3 = (void *)*v2;
        operator delete(v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    char v4 = *v1;
    int *v1 = 0;
    if (v4) {
      operator delete(v4);
    }
    operator delete();
  }
  return result;
}

unsigned __int8 *sub_100064594(unsigned __int8 *result, unsigned __int8 *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t result = sub_100063B48(v3 + 40);
      char v4 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v4)
      {
        do
        {
          int v5 = v4;
          char v4 = *(unsigned __int8 **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          int v5 = (unsigned __int8 *)*((void *)v3 + 2);
          BOOL v6 = *(void *)v5 == (void)v3;
          uint64_t v3 = v5;
        }
        while (!v6);
      }
      uint64_t v3 = v5;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t *sub_100064624(uint64_t *a1)
{
  sub_100065200(a1);
  return sub_10003D660(a1);
}

uint64_t sub_10006465C(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    int v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_10006471C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006473C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100064768(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    int v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_100064828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100064848(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    int v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_100064908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100064928(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(int **)(result + 16);
  if (!v2) {
    return sub_10006497C(result, a2);
  }
  uint64_t v3 = *v2;
  if ((int)v3 >= *(_DWORD *)(result + 12)) {
    return sub_10006497C(result, a2);
  }
  char v4 = v2 + 2;
  uint64_t v5 = *(int *)(result + 8);
  if ((int)v5 < (int)v3) {
    *(void *)&v4[2 * v3] = *(void *)&v4[2 * v5];
  }
  *(void *)&v4[2 * v5] = a2;
  *(_DWORD *)(result + 8) = v5 + 1;
  ++**(_DWORD **)(result + 16);
  return result;
}

uint64_t sub_10006497C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  char v4 = *(int **)(result + 16);
  if (!v4)
  {
    int v5 = *(_DWORD *)(result + 12);
    goto LABEL_11;
  }
  int v5 = *(_DWORD *)(result + 8);
  int v6 = *(_DWORD *)(result + 12);
  if (v5 == v6)
  {
LABEL_11:
    uint64_t result = sub_10007E8E4(result, v5 + 1);
    goto LABEL_12;
  }
  uint64_t v7 = *v4;
  if (v7 != v6)
  {
    if (v5 >= (int)v7)
    {
      int v9 = v7 + 1;
      goto LABEL_13;
    }
    *(void *)&v4[2 * v7 + 2] = *(void *)&v4[2 * v5 + 2];
LABEL_12:
    char v4 = *(int **)(v3 + 16);
    int v9 = *v4 + 1;
LABEL_13:
    *char v4 = v9;
    goto LABEL_14;
  }
  uint64_t result = *(void *)&v4[2 * v5 + 2];
  if (result) {
    BOOL v8 = *(void *)v3 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    char v4 = *(int **)(v3 + 16);
  }
LABEL_14:
  uint64_t v10 = *(int *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = v10 + 1;
  *(void *)&v4[2 * v10 + 2] = a2;
  return result;
}

uint64_t sub_100064A5C(uint64_t a1)
{
  if (*(void *)a1)
  {
    sub_100051E5C((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 2030);
    uint64_t v2 = sub_100051E74(v17, "CHECK failed: GetArena() == NULL: ");
    uint64_t v3 = sub_100051E74(v2, "ReleaseLast() called on a RepeatedPtrField that is on an arena, ");
    char v4 = sub_100051E74(v3, "with a type that does not implement MergeFrom. This is unsafe; ");
    int v5 = sub_100051E74(v4, "please implement MergeFrom for your type.");
    sub_100051FB0((uint64_t)&v16, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v17);
  }
  int v6 = *(_DWORD *)(a1 + 8);
  if (v6 <= 0)
  {
    sub_100051E5C((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 2040);
    uint64_t v7 = sub_100051E74(v17, "CHECK failed: (current_size_) > (0): ");
    sub_100051FB0((uint64_t)&v16, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v17);
    int v6 = *(_DWORD *)(a1 + 8);
  }
  BOOL v8 = *(int **)(a1 + 16);
  uint64_t v9 = v6 - 1;
  *(_DWORD *)(a1 + 8) = v9;
  uint64_t v10 = &v8[2 * v9];
  uint64_t v13 = *((void *)v10 + 1);
  BOOL v12 = v10 + 2;
  uint64_t result = v13;
  int v14 = *v8;
  int v15 = *v8 - 1;
  *BOOL v8 = v15;
  if (v6 < v14) {
    *BOOL v12 = *(void *)&v8[2 * v15 + 2];
  }
  return result;
}

void sub_100064B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100064B90(void *a1, void *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      sub_10005C088(a3, *((unsigned int *)v5 + 8), v5 + 5);
      int v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }
        while (!v8);
      }
      int v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

const std::string::value_type *sub_100064C14(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  if (*(void *)(a1 + 8) - (void)__s + 16 >= a3)
  {
    uint64_t v6 = a3;
    std::string::assign(this, __s, a3);
    return &__s[v6];
  }
  else
  {
    return sub_10007083C(a1, __s, a3, this);
  }
}

char *sub_100064C80(uint64_t a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v15 = (unint64_t)&result[v5];
    long long v16 = *(_OWORD *)(a3 + 16);
    v19[0] = *(_OWORD *)a3;
    v19[1] = v16;
    uint64_t v20 = *(void *)(a3 + 32);
    uint64_t result = sub_100064EDC(result, v15, (unsigned int **)v19);
    if ((char *)v15 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      long long v10 = *(_OWORD *)(a3 + 16);
      v24[0] = *(_OWORD *)a3;
      v24[1] = v10;
      uint64_t v25 = *(void *)(a3 + 32);
      uint64_t result = sub_100064EDC(result, v8, (unsigned int **)v24);
      if (!result) {
        break;
      }
      signed int v11 = result - *(void *)(a1 + 8);
      if (v11 >= 0x11)
      {
        sub_100051E5C((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        BOOL v12 = sub_100051E74(&v26, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_100051FB0((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v26);
      }
      int v13 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v27 = 0;
        v26.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        uint64_t v22 = *(void *)(a3 + 32);
        long long v17 = *(_OWORD *)(a3 + 16);
        v21[0] = *(_OWORD *)a3;
        v21[1] = v17;
        unsigned int v18 = (std::string *)sub_100064EDC((char *)&v26 + v11, (unint64_t)&v26 + v13, (unsigned int **)v21);
        uint64_t result = 0;
        if (v18 && v18 == (std::string *)((char *)&v26 + v13)) {
          return (char *)(*(void *)(a1 + 8) + v13);
        }
        return result;
      }
      int v5 = v5 - v9 - v11;
      if (v5 <= 0)
      {
        sub_100051E5C((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        int v14 = sub_100051E74(&v26, "CHECK failed: (size) > (0): ");
        sub_100051FB0((uint64_t)&v23, (const char **)&v14->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v26);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      result += v11;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_100064EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

char *sub_100064EDC(char *a1, unint64_t a2, unsigned int **a3)
{
  uint64_t v3 = a1;
  while ((unint64_t)v3 < a2)
  {
    unint64_t v6 = *v3;
    if (*v3 < 0)
    {
      int v7 = v6 + (v3[1] << 7);
      unint64_t v6 = (v7 - 128);
      if (v3[1] < 0)
      {
        uint64_t v3 = (char *)sub_100070F20((uint64_t)v3, (v7 - 128));
        if (!v3) {
          return v3;
        }
        unint64_t v6 = v8;
      }
      else
      {
        v3 += 2;
      }
    }
    else
    {
      ++v3;
    }
    if (((unsigned int (*)(unsigned int *, unint64_t))a3[1])(a3[2], v6))
    {
      int v9 = (int *)*a3;
      uint64_t v10 = **a3;
      if (v10 == (*a3)[1])
      {
        int v11 = v10 + 1;
        sub_100075018((int *)*a3, v10 + 1);
        *(_DWORD *)(sub_100075830((uint64_t)v9) + 4 * v1sub_10002F6CC(&a9, 0) = v6;
      }
      else
      {
        *(_DWORD *)(sub_100075830((uint64_t)*a3) + 4 * v1sub_10002F6CC(&a9, 0) = v6;
        int v11 = v10 + 1;
      }
      int *v9 = v11;
    }
    else
    {
      int v12 = *((_DWORD *)a3 + 8);
      int v13 = (unint64_t *)a3[3];
      if (*v13) {
        int v14 = (std::string *)((*v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        int v14 = (std::string *)sub_10003D368(v13);
      }
      sub_100070D48(v12, v6, v14);
    }
  }
  return v3;
}

uint64_t sub_100065008(uint64_t a1, int a2, unsigned int a3, char **a4, uint64_t *a5)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a3;
  *(void *)(a1 + 8sub_10002F6CC(&a9, 0) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 88) = a2;
  *(_DWORD *)(a1 + 92) = 0x80000000;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_100048934(v8, a5);
  *a4 = sub_10006507C(a1, v8[0], (int64_t)v8[1]);
  return a1;
}

char *sub_10006507C(uint64_t a1, char *__src, int64_t __n)
{
  *(_DWORD *)(a1 + 84) = 0;
  if (__n >= 17)
  {
    *(_DWORD *)(a1 + 28) = 16;
    unint64_t v6 = &__src[__n - 16];
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = a1 + 40;
    if (*(void *)(a1 + 72) != 1) {
      return __src;
    }
    uint64_t v7 = 2;
    unint64_t v8 = __src;
    goto LABEL_6;
  }
  unint64_t v8 = (char *)(a1 + 40);
  memcpy((void *)(a1 + 40), __src, __n);
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)a1 = &v8[__n];
  *(void *)(a1 + 8) = &v8[__n];
  *(void *)(a1 + 16) = 0;
  if (*(void *)(a1 + 72) == 1)
  {
    uint64_t v7 = __src - v8;
LABEL_6:
    *(void *)(a1 + 72) = v7;
  }
  return v8;
}

uint64_t sub_100065130(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    int v5 = sub_100051E74(v7, "CHECK failed: (n) >= (0): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_100051FB8((uint64_t)v7);
  }
  else if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(*(void *)(result + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_1000651E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100065200(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = v2 + 2;
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3) {
          (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t **sub_10006528C(uint64_t **a1, int *a2, _OWORD *a3)
{
  char v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        char v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        char v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x40uLL);
    long long v11 = a3[1];
    *((_OWORD *)v10 + 2) = *a3;
    *((_OWORD *)v10 + 3) = v11;
    sub_100018E60(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_100065348(uint64_t a1)
{
}

uint64_t *sub_100065350(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  char v6 = sub_1000653D8(a1, a2, &v12, &v11, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x40uLL);
    long long v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    sub_100018E60(a1, (uint64_t)v12, v8, v7);
  }
  return v7;
}

uint64_t *sub_1000653D8(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        int v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    unsigned int v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unsigned int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_100065580(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      int v7 = (uint64_t *)v2;
    }
    else {
      int v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  sub_1000655FC((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t *sub_1000655FC(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_100065670(v6, a2);
  return v3;
}

uint64_t *sub_100065670(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  int v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      int v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      int v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *int v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      int v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      std::string v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      int v7 = *(uint64_t **)(*v7 + 8);
    }
    int v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *int v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        std::string v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        std::string v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }
      else
      {
        int v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      char v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      _OWORD v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      long long v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    int v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    std::string v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    int v7 = *(uint64_t **)v12;
  }
  unsigned int v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    std::string v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    std::string v7[2] = (uint64_t)v20;
    unsigned int v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  char v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  _OWORD v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_1000659F4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_100073CD8(result + 96);
    sub_10007B414(v1 + 80);
    sub_10007CBD4(v1 + 64);
    sub_100079C6C(v1 + 48);
    sub_100076CCC(v1 + 32);
    sub_100078488(v1 + 16);
    sub_1000754E8(v1);
    operator delete();
  }
  return result;
}

uint64_t sub_100065A74(uint64_t result)
{
  if (result)
  {
    sub_10007DF18(result);
    operator delete();
  }
  return result;
}

void sub_100065AB4()
{
}

void sub_100065AE0()
{
}

void sub_100065B0C()
{
}

void sub_100065B38()
{
}

uint64_t sub_100065B64(uint64_t a1, unint64_t a2, void *__s2, int64_t a4, _DWORD *a5)
{
  if (!a2) {
    return 0;
  }
  unint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = a1 + 24 * a2;
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = v9 + 24 * (v8 >> 1);
    int64_t v13 = *(void *)(v12 + 8);
    if (v13 >= a4) {
      size_t v14 = a4;
    }
    else {
      size_t v14 = *(void *)(v12 + 8);
    }
    int v15 = memcmp(*(const void **)v12, __s2, v14);
    if (v15 < 0 || (v13 < a4 ? (BOOL v16 = v15 == 0) : (BOOL v16 = 0), v16))
    {
      unint64_t v11 = v8 + ~v11;
      uint64_t v9 = v12 + 24;
    }
    unint64_t v8 = v11;
  }
  while (v11);
  if (v9 == v10 || *(void *)(v9 + 8) != a4 || a4 >= 1 && *(void **)v9 != __s2 && memcmp(*(const void **)v9, __s2, a4)) {
    return 0;
  }
  *a5 = *(_DWORD *)(v9 + 16);
  return 1;
}

uint64_t sub_100065C5C(uint64_t a1, int *a2, unint64_t a3, int a4)
{
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = &a2[a3];
  int v5 = a2;
  do
  {
    BOOL v6 = &v5[a3 >> 1];
    int v7 = a4;
    if (*v6 != -1) {
      int v7 = *(_DWORD *)(a1 + 24 * *v6 + 16);
    }
    unint64_t v8 = v6 + 1;
    if (v7 >= a4) {
      a3 >>= 1;
    }
    else {
      a3 += ~(a3 >> 1);
    }
    if (v7 < a4) {
      int v5 = v8;
    }
  }
  while (a3);
  if (v5 != v4 && *(_DWORD *)(a1 + 24 * *v5 + 16) == a4) {
    return (unint64_t)((char *)v5 - (char *)a2) >> 2;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100065CDC(uint64_t a1, int *a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      int v8 = *a2++;
      sub_1000520F8(a1 + 24 * v8, a4);
      sub_10006FB0C((uint64_t)sub_100065D80, (uint64_t)a4);
      a4 += 3;
      --v5;
    }
    while (v5);
  }
  return 1;
}

uint64_t sub_100065D5C(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void sub_100065D80(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_100065D94()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000B6760, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000B6760))
  {
    qword_1000B6B88 = 0;
    unk_1000B6B90 = 0;
    qword_1000B6B98 = 0;
    sub_10006FB0C((uint64_t)sub_100065D80, (uint64_t)&qword_1000B6B88);
    atomic_store(1u, byte_1000B6BA0);
    __cxa_guard_release(&qword_1000B6760);
  }
}

void sub_100065E28(_Unwind_Exception *a1)
{
}

uint64_t sub_100065E40(unint64_t a1)
{
  if (*(char *)(a1 + 23) < 0 && (*(void *)a1 >= a1 ? (BOOL v1 = *(void *)a1 >= a1 + 24) : (BOOL v1 = 1), v1)) {
    return (*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_100065E74(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 96))(a1, *(void *)(a2 + 64), a2);
  *(void *)(a2 + 64) = result;
  return result;
}

uint64_t sub_100065EC4(uint64_t a1, uint64_t a2)
{
  sub_10008A50C((uint64_t)v6, *(void *)a2, 0x7FFFFFFF, -1);
  sub_100051990((uint64_t)v7, (uint64_t)v6, 1);
  v7[58] = *(unsigned char *)(a2 + 8);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 96))(a1, v8, v7);
  int v4 = sub_100050A28((uint64_t)v7, v8);
  *(void *)a2 += v4 - v9;
  return sub_1000519C8((uint64_t)v7);
}

void sub_100065FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1000519C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100065FC0(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, void *a5)
{
  return sub_100065FC8(a1, a2, a3, a5);
}

uint64_t sub_100065FC8(uint64_t result, unsigned int *a2, int a3, void *a4)
{
  if (a3 >= 1)
  {
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    uint64_t v8 = result;
    uint64_t v9 = a3;
    do
    {
      uint64_t result = a2[3];
      uint64_t v10 = *a2;
      unint64_t v11 = (char *)(v8 + v10);
      switch((int)result)
      {
        case 0:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_132;
          }
          break;
        case 1:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_130;
          }
          break;
        case 2:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_71;
          }
          break;
        case 3:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_73;
          }
          break;
        case 4:
        case 13:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_10;
          }
          break;
        case 5:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_132;
          }
          break;
        case 6:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_130;
          }
          break;
        case 7:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_80;
          }
          break;
        case 8:
        case 11:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_137;
          }
          break;
        case 9:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_82;
          }
          break;
        case 10:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_84;
          }
          break;
        case 12:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_86;
          }
          break;
        case 14:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_130;
          }
          break;
        case 15:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_132;
          }
          break;
        case 16:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_93;
          }
          break;
        case 17:
          if ((*(_DWORD *)(v8 + (((unint64_t)a2[2] >> 3) & 0x1FFFFFFC)) >> a2[2])) {
            goto LABEL_96;
          }
          break;
        case 20:
          if (*(double *)v11 != 0.0) {
            goto LABEL_132;
          }
          break;
        case 21:
          if (*(float *)v11 != 0.0) {
            goto LABEL_130;
          }
          break;
        case 22:
          if (*(void *)v11)
          {
LABEL_71:
            unsigned int v16 = a2[1];
            goto LABEL_74;
          }
          break;
        case 23:
          if (*(void *)v11)
          {
LABEL_73:
            unsigned int v16 = a2[1];
            goto LABEL_74;
          }
          break;
        case 24:
        case 33:
          if (*(_DWORD *)v11)
          {
LABEL_10:
            unsigned int v12 = a2[1];
            goto LABEL_15;
          }
          break;
        case 25:
          if (*(void *)v11) {
            goto LABEL_132;
          }
          break;
        case 26:
          if (*(_DWORD *)v11) {
            goto LABEL_130;
          }
          break;
        case 27:
          if (*v11) {
            goto LABEL_80;
          }
          break;
        case 28:
        case 31:
          unint64_t v13 = *(void *)v11 & 0xFFFFFFFFFFFFFFFELL;
          if (*(char *)(v13 + 23) < 0) {
            uint64_t v14 = *(void *)(v13 + 8);
          }
          else {
            uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
          }
          if (v14)
          {
LABEL_137:
            unsigned int v15 = a2[1];
            goto LABEL_138;
          }
          break;
        case 29:
          if (*(void *)v11) {
            goto LABEL_82;
          }
          break;
        case 30:
          if (*(void *)v11) {
LABEL_84:
          }
            uint64_t result = sub_100068BAC((uint64_t *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 32:
          if (*(_DWORD *)v11)
          {
LABEL_86:
            unsigned int v17 = a2[1];
            goto LABEL_87;
          }
          break;
        case 34:
          if (*(_DWORD *)v11) {
            goto LABEL_130;
          }
          break;
        case 35:
          if (*(void *)v11) {
            goto LABEL_132;
          }
          break;
        case 36:
          if (*(_DWORD *)v11)
          {
LABEL_93:
            unsigned int v18 = a2[1];
            goto LABEL_94;
          }
          break;
        case 37:
          if (*(void *)v11)
          {
LABEL_96:
            unsigned int v19 = a2[1];
            goto LABEL_134;
          }
          break;
        case 40:
          uint64_t result = (uint64_t)sub_100067E24((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 41:
          uint64_t result = (uint64_t)sub_100068000((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 42:
          uint64_t result = (uint64_t)sub_100068170((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 43:
          uint64_t result = (uint64_t)sub_100068288((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 44:
        case 53:
          uint64_t result = (uint64_t)sub_1000683A0((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 45:
          uint64_t result = (uint64_t)sub_1000684B8((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 46:
          uint64_t result = (uint64_t)sub_100068628((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 47:
          uint64_t result = (uint64_t)sub_100068804((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 48:
        case 51:
          uint64_t result = (uint64_t)sub_100068974((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 49:
          uint64_t result = (uint64_t)sub_100068B08((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 50:
          uint64_t result = sub_100068C08(v8 + v10, (uint64_t)a2, a4);
          break;
        case 52:
          uint64_t result = (uint64_t)sub_100068C94((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 54:
          uint64_t result = (uint64_t)sub_100068DAC((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 55:
          uint64_t result = (uint64_t)sub_100068F1C((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 56:
          uint64_t result = (uint64_t)sub_10006908C((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 57:
          uint64_t result = (uint64_t)sub_1000691A4((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 60:
          uint64_t result = (uint64_t)sub_100067ED4((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 61:
          uint64_t result = (uint64_t)sub_1000680B0((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 62:
          uint64_t result = (uint64_t)sub_1000681F0((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 63:
          uint64_t result = (uint64_t)sub_100068308((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 64:
        case 73:
          uint64_t result = (uint64_t)sub_100068420((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 65:
          uint64_t result = (uint64_t)sub_100068568((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 66:
          uint64_t result = (uint64_t)sub_1000686D8((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 67:
          uint64_t result = (uint64_t)sub_1000688B4((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 68:
        case 69:
        case 70:
        case 71:
          uint64_t result = sub_1000689FC(v8 + v10, (uint64_t)a2);
          break;
        case 72:
          uint64_t result = (uint64_t)sub_100068D14((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 74:
          uint64_t result = (uint64_t)sub_100068E5C((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 75:
          uint64_t result = (uint64_t)sub_100068FCC((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 76:
          uint64_t result = (uint64_t)sub_10006910C((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 77:
          uint64_t result = (uint64_t)sub_100069224((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 80:
          if (*(_DWORD *)(v8 + a2[2]) == a2[1] >> 3) {
            goto LABEL_132;
          }
          break;
        case 81:
          if (*(_DWORD *)(v8 + a2[2]) == a2[1] >> 3) {
            goto LABEL_130;
          }
          break;
        case 82:
          unsigned int v16 = a2[1];
          if (*(_DWORD *)(v8 + a2[2]) == v16 >> 3) {
            goto LABEL_74;
          }
          break;
        case 83:
          unsigned int v16 = a2[1];
          if (*(_DWORD *)(v8 + a2[2]) == v16 >> 3)
          {
LABEL_74:
            unsigned int v20 = v16;
            sub_10006BA00((char *)&v20, a4);
            uint64_t result = (uint64_t)sub_10006BA9C(v11, a4);
          }
          break;
        case 84:
        case 93:
          unsigned int v12 = a2[1];
          if (*(_DWORD *)(v8 + a2[2]) == v12 >> 3)
          {
LABEL_15:
            unsigned int v20 = v12;
            sub_10006BA00((char *)&v20, a4);
            uint64_t result = (uint64_t)sub_10006BB38(v11, a4);
          }
          break;
        case 85:
          if (*(_DWORD *)(v8 + a2[2]) == a2[1] >> 3) {
            goto LABEL_132;
          }
          break;
        case 86:
          if (*(_DWORD *)(v8 + a2[2]) == a2[1] >> 3) {
            goto LABEL_130;
          }
          break;
        case 87:
          if (*(_DWORD *)(v8 + a2[2]) == a2[1] >> 3) {
LABEL_80:
          }
            uint64_t result = (uint64_t)sub_100068798((char *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 88:
        case 91:
          unsigned int v15 = a2[1];
          if (*(_DWORD *)(v8 + a2[2]) == v15 >> 3)
          {
LABEL_138:
            unsigned int v20 = v15;
            sub_10006BA00((char *)&v20, a4);
            uint64_t result = (uint64_t)sub_10006BBD4(*(void *)v11 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)a4);
          }
          break;
        case 89:
          if (*(_DWORD *)(v8 + a2[2]) == a2[1] >> 3) {
LABEL_82:
          }
            uint64_t result = (uint64_t)sub_100068A94((uint64_t *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 90:
          if (*(_DWORD *)(v8 + a2[2]) == a2[1] >> 3)
          {
            unsigned int v20 = a2[1];
            sub_10006BA00((char *)&v20, a4);
            uint64_t result = sub_10006BD38(*(void *)v11, *((void *)a2 + 2), a4);
          }
          break;
        case 92:
          unsigned int v17 = a2[1];
          if (*(_DWORD *)(v8 + a2[2]) == v17 >> 3)
          {
LABEL_87:
            unsigned int v20 = v17;
            sub_10006BA00((char *)&v20, a4);
            uint64_t result = (uint64_t)sub_10006BA00(v11, a4);
          }
          break;
        case 94:
          if (*(_DWORD *)(v8 + a2[2]) == a2[1] >> 3) {
LABEL_130:
          }
            uint64_t result = (uint64_t)sub_100067F94((int *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 95:
          if (*(_DWORD *)(v8 + a2[2]) == a2[1] >> 3) {
LABEL_132:
          }
            uint64_t result = (uint64_t)sub_100067DB8((uint64_t *)(v8 + v10), (uint64_t)a2, a4);
          break;
        case 96:
          unsigned int v18 = a2[1];
          if (*(_DWORD *)(v8 + a2[2]) == v18 >> 3)
          {
LABEL_94:
            unsigned int v20 = v18;
            sub_10006BA00((char *)&v20, a4);
            uint64_t result = (uint64_t)sub_10006BE18(v11, a4);
          }
          break;
        case 97:
          unsigned int v19 = a2[1];
          if (*(_DWORD *)(v8 + a2[2]) == v19 >> 3)
          {
LABEL_134:
            unsigned int v20 = v19;
            sub_10006BA00((char *)&v20, a4);
            uint64_t result = (uint64_t)sub_10006BEBC(v11, a4);
          }
          break;
        case 100:
          uint64_t result = (*((uint64_t (**)(uint64_t))a2 + 2))(v8);
          break;
        default:
          uint64_t result = sub_100067CEC(result);
          break;
      }
      a2 += 6;
      --v9;
    }
    while (v9);
  }
  return result;
}

int *sub_100066A00(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_100066A30(a1, a2, a3, *(unsigned char *)(a5 + 8), *(int **)a5);
  *(void *)a5 = result;
  return result;
}

int *sub_100066A30(uint64_t a1, uint64_t a2, int a3, unsigned __int8 a4, int *a5)
{
  v79[0] = a5;
  v79[1] = (int *)a4;
  if (a3 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = (unsigned int *)(a2 + 24 * v8);
      unint64_t v11 = (int *)(a1 + *v10);
      switch(v10[3])
      {
        case 0u:
          unint64_t v12 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFFFFFC)) >> v12))
          {
            unsigned int v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v14 = v79[0];
            if (v13 <= 0x7F) {
              goto LABEL_214;
            }
            *(unsigned char *)v79[0] = v13 | 0x80;
            unsigned int v15 = v13 >> 7;
            if (v13 >> 14)
            {
              unsigned int v16 = (void *)((char *)v14 + 2);
              do
              {
                *((unsigned char *)v16 - 1) = v15 | 0x80;
                unsigned int v17 = v15 >> 7;
                unsigned int v16 = (void *)((char *)v16 + 1);
                unsigned int v18 = v15 >> 14;
                v15 >>= 7;
              }
              while (v18);
              goto LABEL_241;
            }
            goto LABEL_230;
          }
          break;
        case 1u:
          unint64_t v19 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v19 >> 3) & 0x1FFFFFFC)) >> v19))
          {
            unsigned int v20 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v21 = v79[0];
            if (v20 <= 0x7F) {
              goto LABEL_211;
            }
            *(unsigned char *)v79[0] = v20 | 0x80;
            unsigned int v22 = v20 >> 7;
            if (v20 >> 14)
            {
              uint64_t v23 = (int *)((char *)v21 + 2);
              do
              {
                *((unsigned char *)v23 - 1) = v22 | 0x80;
                unsigned int v24 = v22 >> 7;
                uint64_t v23 = (int *)((char *)v23 + 1);
                unsigned int v25 = v22 >> 14;
                v22 >>= 7;
              }
              while (v25);
              goto LABEL_237;
            }
            goto LABEL_228;
          }
          break;
        case 2u:
          unint64_t v26 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v26 >> 3) & 0x1FFFFFFC)) >> v26)) {
            goto LABEL_179;
          }
          break;
        case 3u:
          unint64_t v27 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v27 >> 3) & 0x1FFFFFFC)) >> v27)) {
            goto LABEL_179;
          }
          break;
        case 4u:
          unint64_t v28 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v28 >> 3) & 0x1FFFFFFC)) >> v28)) {
            goto LABEL_208;
          }
          break;
        case 5u:
          unint64_t v29 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v29 >> 3) & 0x1FFFFFFC)) >> v29))
          {
            unsigned int v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v14 = v79[0];
            if (v13 <= 0x7F) {
              goto LABEL_214;
            }
            *(unsigned char *)v79[0] = v13 | 0x80;
            unsigned int v15 = v13 >> 7;
            if (v13 >> 14)
            {
              unsigned int v16 = (void *)((char *)v14 + 2);
              do
              {
                *((unsigned char *)v16 - 1) = v15 | 0x80;
                unsigned int v17 = v15 >> 7;
                unsigned int v16 = (void *)((char *)v16 + 1);
                unsigned int v30 = v15 >> 14;
                v15 >>= 7;
              }
              while (v30);
              goto LABEL_241;
            }
            goto LABEL_230;
          }
          break;
        case 6u:
          unint64_t v31 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v31 >> 3) & 0x1FFFFFFC)) >> v31))
          {
            unsigned int v20 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v21 = v79[0];
            if (v20 <= 0x7F) {
              goto LABEL_211;
            }
            *(unsigned char *)v79[0] = v20 | 0x80;
            unsigned int v22 = v20 >> 7;
            if (v20 >> 14)
            {
              uint64_t v23 = (int *)((char *)v21 + 2);
              do
              {
                *((unsigned char *)v23 - 1) = v22 | 0x80;
                unsigned int v24 = v22 >> 7;
                uint64_t v23 = (int *)((char *)v23 + 1);
                unsigned int v32 = v22 >> 14;
                v22 >>= 7;
              }
              while (v32);
              goto LABEL_237;
            }
            goto LABEL_228;
          }
          break;
        case 7u:
          unint64_t v33 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v33 >> 3) & 0x1FFFFFFC)) >> v33))
          {
            unsigned int v34 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v35 = v79[0];
            if (v34 <= 0x7F) {
              goto LABEL_196;
            }
            *(unsigned char *)v79[0] = v34 | 0x80;
            unsigned int v36 = v34 >> 7;
            if (v34 >> 14)
            {
              int v37 = (char *)v35 + 2;
              do
              {
                *(v37 - 1) = v36 | 0x80;
                unsigned int v38 = v36 >> 7;
                ++v37;
                unsigned int v39 = v36 >> 14;
                v36 >>= 7;
              }
              while (v39);
              goto LABEL_233;
            }
            goto LABEL_226;
          }
          break;
        case 8u:
          unint64_t v40 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v40 >> 3) & 0x1FFFFFFC)) >> v40)) {
            goto LABEL_224;
          }
          break;
        case 9u:
          unint64_t v41 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v41 >> 3) & 0x1FFFFFFC)) >> v41)) {
            goto LABEL_200;
          }
          break;
        case 0xAu:
          unint64_t v42 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v42 >> 3) & 0x1FFFFFFC)) >> v42)) {
            goto LABEL_202;
          }
          break;
        case 0xBu:
          unint64_t v43 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v43 >> 3) & 0x1FFFFFFC)) >> v43)) {
            goto LABEL_224;
          }
          break;
        case 0xCu:
          unint64_t v44 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v44 >> 3) & 0x1FFFFFFC)) >> v44)) {
            goto LABEL_206;
          }
          break;
        case 0xDu:
          unint64_t v45 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v45 >> 3) & 0x1FFFFFFC)) >> v45)) {
            goto LABEL_208;
          }
          break;
        case 0xEu:
          unint64_t v46 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v46 >> 3) & 0x1FFFFFFC)) >> v46))
          {
            unsigned int v20 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v21 = v79[0];
            if (v20 <= 0x7F) {
              goto LABEL_211;
            }
            *(unsigned char *)v79[0] = v20 | 0x80;
            unsigned int v22 = v20 >> 7;
            if (v20 >> 14)
            {
              uint64_t v23 = (int *)((char *)v21 + 2);
              do
              {
                *((unsigned char *)v23 - 1) = v22 | 0x80;
                unsigned int v24 = v22 >> 7;
                uint64_t v23 = (int *)((char *)v23 + 1);
                unsigned int v47 = v22 >> 14;
                v22 >>= 7;
              }
              while (v47);
              goto LABEL_237;
            }
            goto LABEL_228;
          }
          break;
        case 0xFu:
          unint64_t v48 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v48 >> 3) & 0x1FFFFFFC)) >> v48))
          {
            unsigned int v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v14 = v79[0];
            if (v13 <= 0x7F) {
              goto LABEL_214;
            }
            *(unsigned char *)v79[0] = v13 | 0x80;
            unsigned int v15 = v13 >> 7;
            if (v13 >> 14)
            {
              unsigned int v16 = (void *)((char *)v14 + 2);
              do
              {
                *((unsigned char *)v16 - 1) = v15 | 0x80;
                unsigned int v17 = v15 >> 7;
                unsigned int v16 = (void *)((char *)v16 + 1);
                unsigned int v49 = v15 >> 14;
                v15 >>= 7;
              }
              while (v49);
              goto LABEL_241;
            }
            goto LABEL_230;
          }
          break;
        case 0x10u:
          unint64_t v50 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v50 >> 3) & 0x1FFFFFFC)) >> v50)) {
            goto LABEL_216;
          }
          break;
        case 0x11u:
          unint64_t v51 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v51 >> 3) & 0x1FFFFFFC)) >> v51)) {
            goto LABEL_218;
          }
          break;
        case 0x14u:
          if (*(double *)v11 != 0.0)
          {
            unsigned int v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v14 = v79[0];
            if (v13 <= 0x7F) {
              goto LABEL_214;
            }
            *(unsigned char *)v79[0] = v13 | 0x80;
            unsigned int v15 = v13 >> 7;
            if (v13 >> 14)
            {
              unsigned int v16 = (void *)((char *)v14 + 2);
              do
              {
                *((unsigned char *)v16 - 1) = v15 | 0x80;
                unsigned int v17 = v15 >> 7;
                unsigned int v16 = (void *)((char *)v16 + 1);
                unsigned int v52 = v15 >> 14;
                v15 >>= 7;
              }
              while (v52);
              goto LABEL_241;
            }
            goto LABEL_230;
          }
          break;
        case 0x15u:
          if (*(float *)v11 != 0.0)
          {
            unsigned int v20 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v21 = v79[0];
            if (v20 <= 0x7F) {
              goto LABEL_211;
            }
            *(unsigned char *)v79[0] = v20 | 0x80;
            unsigned int v22 = v20 >> 7;
            if (v20 >> 14)
            {
              uint64_t v23 = (int *)((char *)v21 + 2);
              do
              {
                *((unsigned char *)v23 - 1) = v22 | 0x80;
                unsigned int v24 = v22 >> 7;
                uint64_t v23 = (int *)((char *)v23 + 1);
                unsigned int v53 = v22 >> 14;
                v22 >>= 7;
              }
              while (v53);
              goto LABEL_237;
            }
            goto LABEL_228;
          }
          break;
        case 0x16u:
          if (*(void *)v11) {
            goto LABEL_179;
          }
          break;
        case 0x17u:
          if (*(void *)v11) {
            goto LABEL_179;
          }
          break;
        case 0x18u:
          if (*v11) {
            goto LABEL_208;
          }
          break;
        case 0x19u:
          if (*(void *)v11)
          {
            unsigned int v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v14 = v79[0];
            if (v13 <= 0x7F) {
              goto LABEL_214;
            }
            *(unsigned char *)v79[0] = v13 | 0x80;
            unsigned int v15 = v13 >> 7;
            if (v13 >> 14)
            {
              unsigned int v16 = (void *)((char *)v14 + 2);
              do
              {
                *((unsigned char *)v16 - 1) = v15 | 0x80;
                unsigned int v17 = v15 >> 7;
                unsigned int v16 = (void *)((char *)v16 + 1);
                unsigned int v54 = v15 >> 14;
                v15 >>= 7;
              }
              while (v54);
              goto LABEL_241;
            }
            goto LABEL_230;
          }
          break;
        case 0x1Au:
          if (*v11)
          {
            unsigned int v20 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v21 = v79[0];
            if (v20 <= 0x7F) {
              goto LABEL_211;
            }
            *(unsigned char *)v79[0] = v20 | 0x80;
            unsigned int v22 = v20 >> 7;
            if (v20 >> 14)
            {
              uint64_t v23 = (int *)((char *)v21 + 2);
              do
              {
                *((unsigned char *)v23 - 1) = v22 | 0x80;
                unsigned int v24 = v22 >> 7;
                uint64_t v23 = (int *)((char *)v23 + 1);
                unsigned int v55 = v22 >> 14;
                v22 >>= 7;
              }
              while (v55);
              goto LABEL_237;
            }
            goto LABEL_228;
          }
          break;
        case 0x1Bu:
          if (*(unsigned char *)v11)
          {
            unsigned int v34 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v35 = v79[0];
            if (v34 <= 0x7F) {
              goto LABEL_196;
            }
            *(unsigned char *)v79[0] = v34 | 0x80;
            unsigned int v36 = v34 >> 7;
            if (v34 >> 14)
            {
              int v37 = (char *)v35 + 2;
              do
              {
                *(v37 - 1) = v36 | 0x80;
                unsigned int v38 = v36 >> 7;
                ++v37;
                unsigned int v56 = v36 >> 14;
                v36 >>= 7;
              }
              while (v56);
              goto LABEL_233;
            }
            goto LABEL_226;
          }
          break;
        case 0x1Cu:
          unint64_t v57 = *(void *)v11 & 0xFFFFFFFFFFFFFFFELL;
          if (*(char *)(v57 + 23) < 0)
          {
            if (*(void *)(v57 + 8)) {
              goto LABEL_224;
            }
          }
          else if (*(unsigned char *)(v57 + 23))
          {
            goto LABEL_224;
          }
          break;
        case 0x1Du:
          if (*(void *)v11) {
            goto LABEL_200;
          }
          break;
        case 0x1Eu:
          if (*(void *)v11) {
            goto LABEL_202;
          }
          break;
        case 0x1Fu:
          unint64_t v58 = *(void *)v11 & 0xFFFFFFFFFFFFFFFELL;
          if (*(char *)(v58 + 23) < 0)
          {
            if (*(void *)(v58 + 8)) {
              goto LABEL_224;
            }
          }
          else if (*(unsigned char *)(v58 + 23))
          {
            goto LABEL_224;
          }
          break;
        case 0x20u:
          if (*v11) {
            goto LABEL_206;
          }
          break;
        case 0x21u:
          if (*v11) {
            goto LABEL_208;
          }
          break;
        case 0x22u:
          if (*v11)
          {
            unsigned int v20 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v21 = v79[0];
            if (v20 <= 0x7F) {
              goto LABEL_211;
            }
            *(unsigned char *)v79[0] = v20 | 0x80;
            unsigned int v22 = v20 >> 7;
            if (v20 >> 14)
            {
              uint64_t v23 = (int *)((char *)v21 + 2);
              do
              {
                *((unsigned char *)v23 - 1) = v22 | 0x80;
                unsigned int v24 = v22 >> 7;
                uint64_t v23 = (int *)((char *)v23 + 1);
                unsigned int v59 = v22 >> 14;
                v22 >>= 7;
              }
              while (v59);
              goto LABEL_237;
            }
            goto LABEL_228;
          }
          break;
        case 0x23u:
          if (*(void *)v11)
          {
            unsigned int v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v14 = v79[0];
            if (v13 <= 0x7F) {
              goto LABEL_214;
            }
            *(unsigned char *)v79[0] = v13 | 0x80;
            unsigned int v15 = v13 >> 7;
            if (v13 >> 14)
            {
              unsigned int v16 = (void *)((char *)v14 + 2);
              do
              {
                *((unsigned char *)v16 - 1) = v15 | 0x80;
                unsigned int v17 = v15 >> 7;
                unsigned int v16 = (void *)((char *)v16 + 1);
                unsigned int v60 = v15 >> 14;
                v15 >>= 7;
              }
              while (v60);
              goto LABEL_241;
            }
            goto LABEL_230;
          }
          break;
        case 0x24u:
          if (*v11) {
            goto LABEL_216;
          }
          break;
        case 0x25u:
          if (*(void *)v11) {
            goto LABEL_218;
          }
          break;
        case 0x28u:
          sub_1000692BC(v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x29u:
          sub_1000694B0(v11, a2 + 24 * v8, v79);
          break;
        case 0x2Au:
          sub_10006970C((unint64_t *)v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x2Bu:
          sub_1000698F0((unint64_t *)v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x2Cu:
        case 0x35u:
          sub_100069B3C(v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x2Du:
          sub_100069D20(v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x2Eu:
          sub_100069F14(v11, a2 + 24 * v8, v79);
          break;
        case 0x2Fu:
          sub_10006A108(v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x30u:
        case 0x33u:
          sub_10006A38C((char *)v11, a2 + 24 * v8, (char **)v79);
          break;
        case 0x31u:
          sub_10006A5EC((uint64_t)v11, a2 + 24 * v8, v79);
          break;
        case 0x32u:
          sub_10006A78C((uint64_t)v11, a2 + 24 * v8, v79);
          break;
        case 0x34u:
          sub_10006A8C4((unsigned int *)v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x36u:
          sub_10006AAA8(v11, a2 + 24 * v8, v79);
          break;
        case 0x37u:
          sub_10006AC9C(v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x38u:
          sub_10006AF18(v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x39u:
          sub_10006B18C(v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x3Cu:
          sub_100069388((uint64_t)v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x3Du:
          sub_10006957C(v11, a2 + 24 * v8, v79);
          break;
        case 0x3Eu:
          sub_1000697D0(v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x3Fu:
          sub_1000699B4(v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x40u:
        case 0x49u:
          sub_100069C00(v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x41u:
          sub_100069DEC((uint64_t)v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x42u:
          sub_100069FE0(v11, a2 + 24 * v8, v79);
          break;
        case 0x43u:
          sub_10006A1D4((uint64_t)v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x44u:
        case 0x45u:
        case 0x46u:
        case 0x47u:
          sub_10006A45C((uint64_t)v11, a2 + 24 * v8);
          break;
        case 0x48u:
          sub_10006A988(v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x4Au:
          sub_10006AB74(v11, a2 + 24 * v8, v79);
          break;
        case 0x4Bu:
          sub_10006AD68((uint64_t)v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x4Cu:
          sub_10006AFE0(v11, a2 + 24 * v8, v79);
          break;
        case 0x4Du:
          sub_10006B254(v11, a2 + 24 * v8, v79);
          break;
        case 0x50u:
          uint64_t v61 = a2 + 24 * v8;
          unsigned int v13 = *(_DWORD *)(v61 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v61 + 8)) == v13 >> 3)
          {
            uint64_t v14 = v79[0];
            if (v13 <= 0x7F) {
              goto LABEL_214;
            }
            *(unsigned char *)v79[0] = v13 | 0x80;
            unsigned int v15 = v13 >> 7;
            if (v13 >> 14)
            {
              unsigned int v16 = (void *)((char *)v14 + 2);
              do
              {
                *((unsigned char *)v16 - 1) = v15 | 0x80;
                unsigned int v17 = v15 >> 7;
                unsigned int v16 = (void *)((char *)v16 + 1);
                unsigned int v62 = v15 >> 14;
                v15 >>= 7;
              }
              while (v62);
              goto LABEL_241;
            }
            goto LABEL_230;
          }
          break;
        case 0x51u:
          uint64_t v63 = a2 + 24 * v8;
          unsigned int v20 = *(_DWORD *)(v63 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v63 + 8)) == v20 >> 3)
          {
            uint64_t v21 = v79[0];
            if (v20 <= 0x7F) {
              goto LABEL_211;
            }
            *(unsigned char *)v79[0] = v20 | 0x80;
            unsigned int v22 = v20 >> 7;
            if (v20 >> 14)
            {
              uint64_t v23 = (int *)((char *)v21 + 2);
              do
              {
                *((unsigned char *)v23 - 1) = v22 | 0x80;
                unsigned int v24 = v22 >> 7;
                uint64_t v23 = (int *)((char *)v23 + 1);
                unsigned int v64 = v22 >> 14;
                v22 >>= 7;
              }
              while (v64);
              goto LABEL_237;
            }
            goto LABEL_228;
          }
          break;
        case 0x52u:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
            goto LABEL_179;
          }
          break;
        case 0x53u:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
LABEL_179:
          }
            sub_1000696A4((unint64_t *)v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x54u:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
            goto LABEL_208;
          }
          break;
        case 0x55u:
          uint64_t v65 = a2 + 24 * v8;
          unsigned int v13 = *(_DWORD *)(v65 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v65 + 8)) == v13 >> 3)
          {
            uint64_t v14 = v79[0];
            if (v13 <= 0x7F) {
              goto LABEL_214;
            }
            *(unsigned char *)v79[0] = v13 | 0x80;
            unsigned int v15 = v13 >> 7;
            if (v13 >> 14)
            {
              unsigned int v16 = (void *)((char *)v14 + 2);
              do
              {
                *((unsigned char *)v16 - 1) = v15 | 0x80;
                unsigned int v17 = v15 >> 7;
                unsigned int v16 = (void *)((char *)v16 + 1);
                unsigned int v66 = v15 >> 14;
                v15 >>= 7;
              }
              while (v66);
              goto LABEL_241;
            }
            goto LABEL_230;
          }
          break;
        case 0x56u:
          uint64_t v67 = a2 + 24 * v8;
          unsigned int v20 = *(_DWORD *)(v67 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v67 + 8)) == v20 >> 3)
          {
            uint64_t v21 = v79[0];
            if (v20 <= 0x7F) {
              goto LABEL_211;
            }
            *(unsigned char *)v79[0] = v20 | 0x80;
            unsigned int v22 = v20 >> 7;
            if (v20 >> 14)
            {
              uint64_t v23 = (int *)((char *)v21 + 2);
              do
              {
                *((unsigned char *)v23 - 1) = v22 | 0x80;
                unsigned int v24 = v22 >> 7;
                uint64_t v23 = (int *)((char *)v23 + 1);
                unsigned int v68 = v22 >> 14;
                v22 >>= 7;
              }
              while (v68);
              goto LABEL_237;
            }
            goto LABEL_228;
          }
          break;
        case 0x57u:
          uint64_t v69 = a2 + 24 * v8;
          unsigned int v34 = *(_DWORD *)(v69 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v69 + 8)) == v34 >> 3)
          {
            uint64_t v35 = v79[0];
            if (v34 > 0x7F)
            {
              *(unsigned char *)v79[0] = v34 | 0x80;
              unsigned int v36 = v34 >> 7;
              if (v34 >> 14)
              {
                int v37 = (char *)v35 + 2;
                do
                {
                  *(v37 - 1) = v36 | 0x80;
                  unsigned int v38 = v36 >> 7;
                  ++v37;
                  unsigned int v73 = v36 >> 14;
                  v36 >>= 7;
                }
                while (v73);
LABEL_233:
                *(v37 - 1) = v38;
              }
              else
              {
LABEL_226:
                *((unsigned char *)v35 + 1) = v36;
                int v37 = (char *)v35 + 2;
              }
            }
            else
            {
LABEL_196:
              *(unsigned char *)uint64_t v35 = v34;
              int v37 = (char *)v35 + 1;
            }
            *int v37 = *(unsigned char *)v11;
            uint64_t v74 = (int *)(v37 + 1);
            goto LABEL_243;
          }
          break;
        case 0x58u:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
            goto LABEL_224;
          }
          break;
        case 0x59u:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
LABEL_200:
          }
            sub_10006A4F4((uint64_t *)v11, a2 + 24 * v8, v79);
          break;
        case 0x5Au:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
LABEL_202:
          }
            sub_10006A720((uint64_t *)v11, a2 + 24 * v8, v79);
          break;
        case 0x5Bu:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
LABEL_224:
          }
            sub_10006A2FC(v11, a2 + 24 * v8, (char **)v79);
          break;
        case 0x5Cu:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
LABEL_206:
          }
            sub_10006A85C((unsigned int *)v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x5Du:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
LABEL_208:
          }
            sub_100069AD4(v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x5Eu:
          uint64_t v70 = a2 + 24 * v8;
          unsigned int v20 = *(_DWORD *)(v70 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v70 + 8)) == v20 >> 3)
          {
            uint64_t v21 = v79[0];
            if (v20 > 0x7F)
            {
              *(unsigned char *)v79[0] = v20 | 0x80;
              unsigned int v22 = v20 >> 7;
              if (v20 >> 14)
              {
                uint64_t v23 = (int *)((char *)v21 + 2);
                do
                {
                  *((unsigned char *)v23 - 1) = v22 | 0x80;
                  unsigned int v24 = v22 >> 7;
                  uint64_t v23 = (int *)((char *)v23 + 1);
                  unsigned int v75 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v75);
LABEL_237:
                *((unsigned char *)v23 - 1) = v24;
              }
              else
              {
LABEL_228:
                *((unsigned char *)v21 + 1) = v22;
                uint64_t v23 = (int *)((char *)v21 + 2);
              }
            }
            else
            {
LABEL_211:
              *(unsigned char *)uint64_t v21 = v20;
              uint64_t v23 = (int *)((char *)v21 + 1);
            }
            *uint64_t v23 = *v11;
            uint64_t v74 = v23 + 1;
            goto LABEL_243;
          }
          break;
        case 0x5Fu:
          uint64_t v71 = a2 + 24 * v8;
          unsigned int v13 = *(_DWORD *)(v71 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v71 + 8)) == v13 >> 3)
          {
            uint64_t v14 = v79[0];
            if (v13 > 0x7F)
            {
              *(unsigned char *)v79[0] = v13 | 0x80;
              unsigned int v15 = v13 >> 7;
              if (v13 >> 14)
              {
                unsigned int v16 = (void *)((char *)v14 + 2);
                do
                {
                  *((unsigned char *)v16 - 1) = v15 | 0x80;
                  unsigned int v17 = v15 >> 7;
                  unsigned int v16 = (void *)((char *)v16 + 1);
                  unsigned int v76 = v15 >> 14;
                  v15 >>= 7;
                }
                while (v76);
LABEL_241:
                *((unsigned char *)v16 - 1) = v17;
              }
              else
              {
LABEL_230:
                *((unsigned char *)v14 + 1) = v15;
                unsigned int v16 = (void *)((char *)v14 + 2);
              }
            }
            else
            {
LABEL_214:
              *(unsigned char *)uint64_t v14 = v13;
              unsigned int v16 = (void *)((char *)v14 + 1);
            }
            void *v16 = *(void *)v11;
            uint64_t v74 = (int *)(v16 + 1);
LABEL_243:
            v79[0] = v74;
          }
          break;
        case 0x60u:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
LABEL_216:
          }
            sub_10006AE90(v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x61u:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
LABEL_218:
          }
            sub_10006B104((uint64_t *)v11, a2 + 24 * v8, (unsigned char **)v79);
          break;
        case 0x64u:
          sub_10008A50C((uint64_t)v78, (uint64_t)v79[0], 0x7FFFFFFF, -1);
          sub_100051990((uint64_t)v80, (uint64_t)v78, 1);
          v80[58] = a4;
          (*(void (**)(uint64_t, void, void, void, unsigned char *))(a2 + 24 * v8 + 16))(a1, *v10, *(unsigned int *)(a2 + 24 * v8 + 4), *(unsigned int *)(a2 + 24 * v8 + 8), v80);
          int v72 = sub_100050A28((uint64_t)v80, v81);
          v79[0] = (int *)((char *)v79[0] + v72 - v82);
          sub_1000519C8((uint64_t)v80);
          break;
        default:
          sub_100067CEC(v10[3]);
          break;
      }
      ++v8;
    }
    while (v8 != v9);
    return v79[0];
  }
  return a5;
}

void sub_100067B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1000519C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100067CEC(int a1)
{
  sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 534);
  uint64_t v2 = sub_100051E74(v6, "Not implemented field number ");
  int v3 = sub_1000523B8(v2, a1);
  sub_100051FB0((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
  return sub_100051FB8((uint64_t)v6);
}

void sub_100067D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100067D70(int a1, int a2)
{
  return (a1 + 20 * a2 - 1);
}

BOOL sub_100067D80(void *a1)
{
  unint64_t v1 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v1 + 23) < 0) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  }
  return v2 == 0;
}

BOOL sub_100067DA8(void *a1)
{
  return *a1 == 0;
}

char *sub_100067DB8(uint64_t *a1, uint64_t a2, void *a3)
{
  int v8 = *(_DWORD *)(a2 + 4);
  uint64_t result = sub_10006BA00((char *)&v8, a3);
  uint64_t v6 = *a1;
  int v7 = (char *)a3[8];
  if (*a3 <= (unint64_t)v7)
  {
    uint64_t result = sub_100051170((uint64_t)a3, v7);
    int v7 = result;
  }
  *(void *)int v7 = v6;
  a3[8] = v7 + 8;
  return result;
}

int *sub_100067E24(int *result, uint64_t a2, void *a3)
{
  if (*result >= 1)
  {
    char v5 = result;
    int v6 = 0;
    do
    {
      int v9 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v9, a3);
      uint64_t result = (int *)sub_10007CA8C(v5, v6);
      uint64_t v7 = *(void *)result;
      int v8 = (char *)a3[8];
      if (*a3 <= (unint64_t)v8)
      {
        uint64_t result = (int *)sub_100051170((uint64_t)a3, v8);
        int v8 = (char *)result;
      }
      *(void *)int v8 = v7;
      a3[8] = v8 + 8;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_100067ED4(int *result, uint64_t a2, void *a3)
{
  if (*result)
  {
    uint64_t v4 = result;
    int v8 = *(_DWORD *)(a2 + 4);
    sub_10006BA00((char *)&v8, a3);
    int v9 = v4[4];
    uint64_t result = (int *)sub_10006BA00((char *)&v9, a3);
    if (*v4 >= 1)
    {
      int v5 = 0;
      do
      {
        uint64_t result = (int *)sub_10007CA8C(v4, v5);
        uint64_t v6 = *(void *)result;
        uint64_t v7 = (char *)a3[8];
        if (*a3 <= (unint64_t)v7)
        {
          uint64_t result = (int *)sub_100051170((uint64_t)a3, v7);
          uint64_t v7 = (char *)result;
        }
        *(void *)uint64_t v7 = v6;
        a3[8] = v7 + 8;
        ++v5;
      }
      while (v5 < *v4);
    }
  }
  return result;
}

char *sub_100067F94(int *a1, uint64_t a2, void *a3)
{
  int v8 = *(_DWORD *)(a2 + 4);
  uint64_t result = sub_10006BA00((char *)&v8, a3);
  int v6 = *a1;
  uint64_t v7 = (char *)a3[8];
  if (*a3 <= (unint64_t)v7)
  {
    uint64_t result = sub_100051170((uint64_t)a3, v7);
    uint64_t v7 = result;
  }
  *(_DWORD *)uint64_t v7 = v6;
  a3[8] = v7 + 4;
  return result;
}

int *sub_100068000(int *result, uint64_t a2, void *a3)
{
  if (*result >= 1)
  {
    int v5 = result;
    int v6 = 0;
    do
    {
      int v9 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v9, a3);
      uint64_t result = (int *)sub_10007B2CC(v5, v6);
      int v7 = *result;
      int v8 = (char *)a3[8];
      if (*a3 <= (unint64_t)v8)
      {
        uint64_t result = (int *)sub_100051170((uint64_t)a3, v8);
        int v8 = (char *)result;
      }
      *(_DWORD *)int v8 = v7;
      a3[8] = v8 + 4;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_1000680B0(int *result, uint64_t a2, void *a3)
{
  if (*result)
  {
    uint64_t v4 = result;
    int v8 = *(_DWORD *)(a2 + 4);
    sub_10006BA00((char *)&v8, a3);
    int v9 = v4[4];
    uint64_t result = (int *)sub_10006BA00((char *)&v9, a3);
    if (*v4 >= 1)
    {
      int v5 = 0;
      do
      {
        uint64_t result = (int *)sub_10007B2CC(v4, v5);
        int v6 = *result;
        int v7 = (char *)a3[8];
        if (*a3 <= (unint64_t)v7)
        {
          uint64_t result = (int *)sub_100051170((uint64_t)a3, v7);
          int v7 = (char *)result;
        }
        *(_DWORD *)int v7 = v6;
        a3[8] = v7 + 4;
        ++v5;
      }
      while (v5 < *v4);
    }
  }
  return result;
}

char *sub_100068170(char *result, uint64_t a2, void *a3)
{
  if (*(int *)result >= 1)
  {
    int v5 = (int *)result;
    int v6 = 0;
    do
    {
      int v8 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v8, a3);
      int v7 = (char *)sub_100078340(v5, v6);
      uint64_t result = sub_10006BA9C(v7, a3);
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

char *sub_1000681F0(char *result, uint64_t a2, void *a3)
{
  if (*(_DWORD *)result)
  {
    uint64_t v4 = (int *)result;
    int v7 = *(_DWORD *)(a2 + 4);
    sub_10006BA00((char *)&v7, a3);
    int v8 = v4[4];
    uint64_t result = sub_10006BA00((char *)&v8, a3);
    if (*v4 >= 1)
    {
      int v5 = 0;
      do
      {
        int v6 = (char *)sub_100078340(v4, v5);
        uint64_t result = sub_10006BA9C(v6, a3);
        ++v5;
      }
      while (v5 < *v4);
    }
  }
  return result;
}

char *sub_100068288(char *result, uint64_t a2, void *a3)
{
  if (*(int *)result >= 1)
  {
    int v5 = (int *)result;
    int v6 = 0;
    do
    {
      int v8 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v8, a3);
      int v7 = (char *)sub_100079B24(v5, v6);
      uint64_t result = sub_10006BA9C(v7, a3);
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

char *sub_100068308(char *result, uint64_t a2, void *a3)
{
  if (*(_DWORD *)result)
  {
    uint64_t v4 = (int *)result;
    int v7 = *(_DWORD *)(a2 + 4);
    sub_10006BA00((char *)&v7, a3);
    int v8 = v4[4];
    uint64_t result = sub_10006BA00((char *)&v8, a3);
    if (*v4 >= 1)
    {
      int v5 = 0;
      do
      {
        int v6 = (char *)sub_100079B24(v4, v5);
        uint64_t result = sub_10006BA9C(v6, a3);
        ++v5;
      }
      while (v5 < *v4);
    }
  }
  return result;
}

char *sub_1000683A0(char *result, uint64_t a2, void *a3)
{
  if (*(int *)result >= 1)
  {
    int v5 = (int *)result;
    int v6 = 0;
    do
    {
      int v8 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v8, a3);
      int v7 = (char *)sub_1000753A0(v5, v6);
      uint64_t result = sub_10006BB38(v7, a3);
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

char *sub_100068420(char *result, uint64_t a2, void *a3)
{
  if (*(_DWORD *)result)
  {
    uint64_t v4 = (int *)result;
    int v7 = *(_DWORD *)(a2 + 4);
    sub_10006BA00((char *)&v7, a3);
    int v8 = v4[4];
    uint64_t result = sub_10006BA00((char *)&v8, a3);
    if (*v4 >= 1)
    {
      int v5 = 0;
      do
      {
        int v6 = (char *)sub_1000753A0(v4, v5);
        uint64_t result = sub_10006BB38(v6, a3);
        ++v5;
      }
      while (v5 < *v4);
    }
  }
  return result;
}

int *sub_1000684B8(int *result, uint64_t a2, void *a3)
{
  if (*result >= 1)
  {
    int v5 = result;
    int v6 = 0;
    do
    {
      int v9 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v9, a3);
      uint64_t result = (int *)sub_100079B24(v5, v6);
      uint64_t v7 = *(void *)result;
      int v8 = (char *)a3[8];
      if (*a3 <= (unint64_t)v8)
      {
        uint64_t result = (int *)sub_100051170((uint64_t)a3, v8);
        int v8 = (char *)result;
      }
      *(void *)int v8 = v7;
      a3[8] = v8 + 8;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_100068568(int *result, uint64_t a2, void *a3)
{
  if (*result)
  {
    uint64_t v4 = result;
    int v8 = *(_DWORD *)(a2 + 4);
    sub_10006BA00((char *)&v8, a3);
    int v9 = v4[4];
    uint64_t result = (int *)sub_10006BA00((char *)&v9, a3);
    if (*v4 >= 1)
    {
      int v5 = 0;
      do
      {
        uint64_t result = (int *)sub_100079B24(v4, v5);
        uint64_t v6 = *(void *)result;
        uint64_t v7 = (char *)a3[8];
        if (*a3 <= (unint64_t)v7)
        {
          uint64_t result = (int *)sub_100051170((uint64_t)a3, v7);
          uint64_t v7 = (char *)result;
        }
        *(void *)uint64_t v7 = v6;
        a3[8] = v7 + 8;
        ++v5;
      }
      while (v5 < *v4);
    }
  }
  return result;
}

int *sub_100068628(int *result, uint64_t a2, void *a3)
{
  if (*result >= 1)
  {
    int v5 = result;
    int v6 = 0;
    do
    {
      int v9 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v9, a3);
      uint64_t result = (int *)sub_100076B84(v5, v6);
      int v7 = *result;
      int v8 = (char *)a3[8];
      if (*a3 <= (unint64_t)v8)
      {
        uint64_t result = (int *)sub_100051170((uint64_t)a3, v8);
        int v8 = (char *)result;
      }
      *(_DWORD *)int v8 = v7;
      a3[8] = v8 + 4;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_1000686D8(int *result, uint64_t a2, void *a3)
{
  if (*result)
  {
    uint64_t v4 = result;
    int v8 = *(_DWORD *)(a2 + 4);
    sub_10006BA00((char *)&v8, a3);
    int v9 = v4[4];
    uint64_t result = (int *)sub_10006BA00((char *)&v9, a3);
    if (*v4 >= 1)
    {
      int v5 = 0;
      do
      {
        uint64_t result = (int *)sub_100076B84(v4, v5);
        int v6 = *result;
        int v7 = (char *)a3[8];
        if (*a3 <= (unint64_t)v7)
        {
          uint64_t result = (int *)sub_100051170((uint64_t)a3, v7);
          int v7 = (char *)result;
        }
        *(_DWORD *)int v7 = v6;
        a3[8] = v7 + 4;
        ++v5;
      }
      while (v5 < *v4);
    }
  }
  return result;
}

char *sub_100068798(char *a1, uint64_t a2, void *a3)
{
  int v8 = *(_DWORD *)(a2 + 4);
  uint64_t result = sub_10006BA00((char *)&v8, a3);
  char v6 = *a1;
  int v7 = (char *)a3[8];
  if (*a3 <= (unint64_t)v7)
  {
    uint64_t result = sub_100051170((uint64_t)a3, v7);
    int v7 = result;
  }
  *int v7 = v6;
  a3[8] = v7 + 1;
  return result;
}

int *sub_100068804(int *result, uint64_t a2, void *a3)
{
  if (*result >= 1)
  {
    int v5 = result;
    int v6 = 0;
    do
    {
      int v9 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v9, a3);
      uint64_t result = (int *)sub_100073B78(v5, v6);
      char v7 = *(unsigned char *)result;
      int v8 = (char *)a3[8];
      if (*a3 <= (unint64_t)v8)
      {
        uint64_t result = (int *)sub_100051170((uint64_t)a3, v8);
        int v8 = (char *)result;
      }
      *int v8 = v7;
      a3[8] = v8 + 1;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_1000688B4(int *result, uint64_t a2, void *a3)
{
  if (*result)
  {
    uint64_t v4 = result;
    int v8 = *(_DWORD *)(a2 + 4);
    sub_10006BA00((char *)&v8, a3);
    int v9 = v4[4];
    uint64_t result = (int *)sub_10006BA00((char *)&v9, a3);
    if (*v4 >= 1)
    {
      int v5 = 0;
      do
      {
        uint64_t result = (int *)sub_100073B78(v4, v5);
        char v6 = *(unsigned char *)result;
        char v7 = (char *)a3[8];
        if (*a3 <= (unint64_t)v7)
        {
          uint64_t result = (int *)sub_100051170((uint64_t)a3, v7);
          char v7 = (char *)result;
        }
        *char v7 = v6;
        a3[8] = v7 + 1;
        ++v5;
      }
      while (v5 < *v4);
    }
  }
  return result;
}

char *sub_100068974(char *result, uint64_t a2, void *a3)
{
  if (*((int *)result + 2) >= 1)
  {
    int v5 = result;
    uint64_t v6 = 0;
    do
    {
      int v9 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v9, a3);
      uint64_t v7 = *((void *)v5 + 2);
      if (v7) {
        uint64_t v8 = v7 + 8;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t result = sub_10006BBD4(*(void *)(v8 + 8 * v6++), (uint64_t)a3);
    }
    while (v6 < *((int *)v5 + 2));
  }
  return result;
}

uint64_t sub_1000689FC(uint64_t a1, uint64_t a2)
{
  sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 509);
  int v3 = sub_100051E74(v9, "Not implemented field number ");
  uint64_t v4 = sub_100052438(v3, *(_DWORD *)(a2 + 4));
  int v5 = sub_100051E74(v4, " with type ");
  uint64_t v6 = sub_100052438(v5, *(_DWORD *)(a2 + 12));
  sub_100051FB0((uint64_t)&v8, (const char **)&v6->__r_.__value_.__l.__data_);
  return sub_100051FB8((uint64_t)v9);
}

void sub_100068A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_100068A94(uint64_t *a1, uint64_t a2, void *a3)
{
  int v7 = *(_DWORD *)(a2 + 4);
  sub_10006BA00((char *)&v7, a3);
  sub_10006BCB4(*a1, *(void *)(a2 + 16), (uint64_t)a3);
  int v8 = *(_DWORD *)(a2 + 4) + 1;
  return sub_10006BA00((char *)&v8, a3);
}

char *sub_100068B08(char *result, uint64_t a2, void *a3)
{
  if (*((int *)result + 2) >= 1)
  {
    int v5 = result;
    uint64_t v6 = 0;
    do
    {
      int v9 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v9, a3);
      uint64_t v7 = *((void *)v5 + 2);
      if (v7) {
        uint64_t v8 = v7 + 8;
      }
      else {
        uint64_t v8 = 0;
      }
      sub_10006BCB4(*(void *)(v8 + 8 * v6), *(void *)(a2 + 16), (uint64_t)a3);
      int v10 = *(_DWORD *)(a2 + 4) + 1;
      uint64_t result = sub_10006BA00((char *)&v10, a3);
      ++v6;
    }
    while (v6 < *((int *)v5 + 2));
  }
  return result;
}

uint64_t sub_100068BAC(uint64_t *a1, uint64_t a2, void *a3)
{
  int v7 = *(_DWORD *)(a2 + 4);
  sub_10006BA00((char *)&v7, a3);
  return sub_10006BD38(*a1, *(void *)(a2 + 16), a3);
}

uint64_t sub_100068C08(uint64_t result, uint64_t a2, void *a3)
{
  if (*(int *)(result + 8) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      int v9 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v9, a3);
      uint64_t v7 = *(void *)(v5 + 16);
      if (v7) {
        uint64_t v8 = v7 + 8;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t result = sub_10006BD38(*(void *)(v8 + 8 * v6++), *(void *)(a2 + 16), a3);
    }
    while (v6 < *(int *)(v5 + 8));
  }
  return result;
}

char *sub_100068C94(char *result, uint64_t a2, void *a3)
{
  if (*(int *)result >= 1)
  {
    uint64_t v5 = (int *)result;
    int v6 = 0;
    do
    {
      int v8 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v8, a3);
      uint64_t v7 = (char *)sub_100076B84(v5, v6);
      uint64_t result = sub_10006BA00(v7, a3);
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

char *sub_100068D14(char *result, uint64_t a2, void *a3)
{
  if (*(_DWORD *)result)
  {
    uint64_t v4 = (int *)result;
    int v7 = *(_DWORD *)(a2 + 4);
    sub_10006BA00((char *)&v7, a3);
    int v8 = v4[4];
    uint64_t result = sub_10006BA00((char *)&v8, a3);
    if (*v4 >= 1)
    {
      int v5 = 0;
      do
      {
        int v6 = (char *)sub_100076B84(v4, v5);
        uint64_t result = sub_10006BA00(v6, a3);
        ++v5;
      }
      while (v5 < *v4);
    }
  }
  return result;
}

int *sub_100068DAC(int *result, uint64_t a2, void *a3)
{
  if (*result >= 1)
  {
    int v5 = result;
    int v6 = 0;
    do
    {
      int v9 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v9, a3);
      uint64_t result = (int *)sub_1000753A0(v5, v6);
      int v7 = *result;
      int v8 = (char *)a3[8];
      if (*a3 <= (unint64_t)v8)
      {
        uint64_t result = (int *)sub_100051170((uint64_t)a3, v8);
        int v8 = (char *)result;
      }
      *(_DWORD *)int v8 = v7;
      a3[8] = v8 + 4;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_100068E5C(int *result, uint64_t a2, void *a3)
{
  if (*result)
  {
    uint64_t v4 = result;
    int v8 = *(_DWORD *)(a2 + 4);
    sub_10006BA00((char *)&v8, a3);
    int v9 = v4[4];
    uint64_t result = (int *)sub_10006BA00((char *)&v9, a3);
    if (*v4 >= 1)
    {
      int v5 = 0;
      do
      {
        uint64_t result = (int *)sub_1000753A0(v4, v5);
        int v6 = *result;
        int v7 = (char *)a3[8];
        if (*a3 <= (unint64_t)v7)
        {
          uint64_t result = (int *)sub_100051170((uint64_t)a3, v7);
          int v7 = (char *)result;
        }
        *(_DWORD *)int v7 = v6;
        a3[8] = v7 + 4;
        ++v5;
      }
      while (v5 < *v4);
    }
  }
  return result;
}

int *sub_100068F1C(int *result, uint64_t a2, void *a3)
{
  if (*result >= 1)
  {
    int v5 = result;
    int v6 = 0;
    do
    {
      int v9 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v9, a3);
      uint64_t result = (int *)sub_100078340(v5, v6);
      uint64_t v7 = *(void *)result;
      int v8 = (char *)a3[8];
      if (*a3 <= (unint64_t)v8)
      {
        uint64_t result = (int *)sub_100051170((uint64_t)a3, v8);
        int v8 = (char *)result;
      }
      *(void *)int v8 = v7;
      a3[8] = v8 + 8;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_100068FCC(int *result, uint64_t a2, void *a3)
{
  if (*result)
  {
    uint64_t v4 = result;
    int v8 = *(_DWORD *)(a2 + 4);
    sub_10006BA00((char *)&v8, a3);
    int v9 = v4[4];
    uint64_t result = (int *)sub_10006BA00((char *)&v9, a3);
    if (*v4 >= 1)
    {
      int v5 = 0;
      do
      {
        uint64_t result = (int *)sub_100078340(v4, v5);
        uint64_t v6 = *(void *)result;
        uint64_t v7 = (char *)a3[8];
        if (*a3 <= (unint64_t)v7)
        {
          uint64_t result = (int *)sub_100051170((uint64_t)a3, v7);
          uint64_t v7 = (char *)result;
        }
        *(void *)uint64_t v7 = v6;
        a3[8] = v7 + 8;
        ++v5;
      }
      while (v5 < *v4);
    }
  }
  return result;
}

char *sub_10006908C(char *result, uint64_t a2, void *a3)
{
  if (*(int *)result >= 1)
  {
    int v5 = (int *)result;
    int v6 = 0;
    do
    {
      int v8 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v8, a3);
      uint64_t v7 = (char *)sub_1000753A0(v5, v6);
      uint64_t result = sub_10006BE18(v7, a3);
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

char *sub_10006910C(char *result, uint64_t a2, void *a3)
{
  if (*(_DWORD *)result)
  {
    uint64_t v4 = (int *)result;
    int v7 = *(_DWORD *)(a2 + 4);
    sub_10006BA00((char *)&v7, a3);
    int v8 = v4[4];
    uint64_t result = sub_10006BA00((char *)&v8, a3);
    if (*v4 >= 1)
    {
      int v5 = 0;
      do
      {
        int v6 = (char *)sub_1000753A0(v4, v5);
        uint64_t result = sub_10006BE18(v6, a3);
        ++v5;
      }
      while (v5 < *v4);
    }
  }
  return result;
}

char *sub_1000691A4(char *result, uint64_t a2, void *a3)
{
  if (*(int *)result >= 1)
  {
    int v5 = (int *)result;
    int v6 = 0;
    do
    {
      int v8 = *(_DWORD *)(a2 + 4);
      sub_10006BA00((char *)&v8, a3);
      int v7 = (char *)sub_100078340(v5, v6);
      uint64_t result = sub_10006BEBC(v7, a3);
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

char *sub_100069224(char *result, uint64_t a2, void *a3)
{
  if (*(_DWORD *)result)
  {
    uint64_t v4 = (int *)result;
    int v7 = *(_DWORD *)(a2 + 4);
    sub_10006BA00((char *)&v7, a3);
    int v8 = v4[4];
    uint64_t result = sub_10006BA00((char *)&v8, a3);
    if (*v4 >= 1)
    {
      int v5 = 0;
      do
      {
        int v6 = (char *)sub_100078340(v4, v5);
        uint64_t result = sub_10006BEBC(v6, a3);
        ++v5;
      }
      while (v5 < *v4);
    }
  }
  return result;
}

int *sub_1000692BC(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result >= 1)
  {
    int v5 = result;
    int v6 = 0;
    int v7 = *a3;
    do
    {
      unsigned int v8 = *(_DWORD *)(a2 + 4);
      if (v8 > 0x7F)
      {
        *int v7 = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          int v9 = v7 + 2;
          do
          {
            *(v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            ++v9;
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *(v9 - 1) = v11;
        }
        else
        {
          v7[1] = v10;
          int v9 = v7 + 2;
        }
      }
      else
      {
        *int v7 = v8;
        int v9 = v7 + 1;
      }
      *a3 = v9;
      uint64_t result = (int *)sub_10007CA8C(v5, v6);
      unsigned int v13 = *a3;
      void *v13 = *(void *)result;
      int v7 = v13 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

uint64_t sub_100069388(uint64_t result, uint64_t a2, unsigned char **a3)
{
  if (*(_DWORD *)result)
  {
    uint64_t v4 = (int *)result;
    unsigned int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *a3;
    if (v5 > 0x7F)
    {
      *int v6 = v5 | 0x80;
      unsigned int v8 = v5 >> 7;
      if (v5 >> 14)
      {
        int v7 = v6 + 2;
        do
        {
          *(v7 - 1) = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          ++v7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v7 - 1) = v9;
      }
      else
      {
        v6[1] = v8;
        int v7 = v6 + 2;
      }
    }
    else
    {
      *int v6 = v5;
      int v7 = v6 + 1;
    }
    unsigned int v11 = *(_DWORD *)(result + 16);
    if (v11 > 0x7F)
    {
      *int v7 = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        unsigned int v12 = v7 + 2;
        do
        {
          *(v12 - 1) = v13 | 0x80;
          unsigned int v14 = v13 >> 7;
          ++v12;
          unsigned int v15 = v13 >> 14;
          v13 >>= 7;
        }
        while (v15);
        *(v12 - 1) = v14;
      }
      else
      {
        v7[1] = v13;
        unsigned int v12 = v7 + 2;
      }
    }
    else
    {
      *int v7 = v11;
      unsigned int v12 = v7 + 1;
    }
    *a3 = v12;
    if (*(int *)result >= 1)
    {
      int v16 = 0;
      do
      {
        uint64_t result = sub_10007CA8C(v4, v16);
        unsigned int v17 = *a3;
        *unsigned int v17 = *(void *)result;
        *a3 = v17 + 1;
        ++v16;
      }
      while (v16 < *v4);
    }
  }
  return result;
}

int *sub_1000694B0(int *result, uint64_t a2, int **a3)
{
  if (*result >= 1)
  {
    unsigned int v5 = result;
    int v6 = 0;
    int v7 = *a3;
    do
    {
      unsigned int v8 = *(_DWORD *)(a2 + 4);
      if (v8 > 0x7F)
      {
        *(unsigned char *)int v7 = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          unsigned int v9 = (int *)((char *)v7 + 2);
          do
          {
            *((unsigned char *)v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            unsigned int v9 = (int *)((char *)v9 + 1);
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *((unsigned char *)v9 - 1) = v11;
        }
        else
        {
          *((unsigned char *)v7 + 1) = v10;
          unsigned int v9 = (int *)((char *)v7 + 2);
        }
      }
      else
      {
        *(unsigned char *)int v7 = v8;
        unsigned int v9 = (int *)((char *)v7 + 1);
      }
      *a3 = v9;
      uint64_t result = (int *)sub_10007B2CC(v5, v6);
      unsigned int v13 = *a3;
      int *v13 = *result;
      int v7 = v13 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_10006957C(int *result, uint64_t a2, int **a3)
{
  if (*result)
  {
    uint64_t v4 = result;
    unsigned int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *a3;
    if (v5 > 0x7F)
    {
      *(unsigned char *)int v6 = v5 | 0x80;
      unsigned int v8 = v5 >> 7;
      if (v5 >> 14)
      {
        int v7 = (char *)v6 + 2;
        do
        {
          *(v7 - 1) = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          ++v7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v7 - 1) = v9;
      }
      else
      {
        *((unsigned char *)v6 + 1) = v8;
        int v7 = (char *)v6 + 2;
      }
    }
    else
    {
      *(unsigned char *)int v6 = v5;
      int v7 = (char *)v6 + 1;
    }
    unsigned int v11 = result[4];
    if (v11 > 0x7F)
    {
      *int v7 = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        unsigned int v12 = (int *)(v7 + 2);
        do
        {
          *((unsigned char *)v12 - 1) = v13 | 0x80;
          unsigned int v14 = v13 >> 7;
          unsigned int v12 = (int *)((char *)v12 + 1);
          unsigned int v15 = v13 >> 14;
          v13 >>= 7;
        }
        while (v15);
        *((unsigned char *)v12 - 1) = v14;
      }
      else
      {
        v7[1] = v13;
        unsigned int v12 = (int *)(v7 + 2);
      }
    }
    else
    {
      *int v7 = v11;
      unsigned int v12 = (int *)(v7 + 1);
    }
    *a3 = v12;
    if (*result >= 1)
    {
      int v16 = 0;
      do
      {
        uint64_t result = (int *)sub_10007B2CC(v4, v16);
        unsigned int v17 = *a3;
        *unsigned int v17 = *result;
        *a3 = v17 + 1;
        ++v16;
      }
      while (v16 < *v4);
    }
  }
  return result;
}

unint64_t *sub_1000696A4(unint64_t *a1, uint64_t a2, unsigned char **a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *a3;
  if (v3 > 0x7F)
  {
    *uint64_t v4 = v3 | 0x80;
    unsigned int v6 = v3 >> 7;
    if (v3 >> 14)
    {
      unsigned int v5 = v4 + 2;
      do
      {
        *(v5 - 1) = v6 | 0x80;
        unsigned int v7 = v6 >> 7;
        ++v5;
        unsigned int v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
      *(v5 - 1) = v7;
    }
    else
    {
      v4[1] = v6;
      unsigned int v5 = v4 + 2;
    }
  }
  else
  {
    *uint64_t v4 = v3;
    unsigned int v5 = v4 + 1;
  }
  *a3 = v5;
  return sub_10006BFC4(a1, a3);
}

unint64_t *sub_10006970C(unint64_t *result, uint64_t a2, unsigned char **a3)
{
  if (*(int *)result >= 1)
  {
    unsigned int v5 = (int *)result;
    int v6 = 0;
    do
    {
      unsigned int v7 = *(_DWORD *)(a2 + 4);
      unsigned int v8 = *a3;
      if (v7 > 0x7F)
      {
        *unsigned int v8 = v7 | 0x80;
        unsigned int v10 = v7 >> 7;
        if (v7 >> 14)
        {
          unsigned int v9 = v8 + 2;
          do
          {
            *(v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            ++v9;
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *(v9 - 1) = v11;
        }
        else
        {
          v8[1] = v10;
          unsigned int v9 = v8 + 2;
        }
      }
      else
      {
        *unsigned int v8 = v7;
        unsigned int v9 = v8 + 1;
      }
      *a3 = v9;
      unsigned int v13 = (unint64_t *)sub_100078340(v5, v6);
      uint64_t result = sub_10006BFC4(v13, a3);
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_1000697D0(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result)
  {
    uint64_t v4 = result;
    unsigned int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *a3;
    if (v5 > 0x7F)
    {
      *int v6 = v5 | 0x80;
      unsigned int v8 = v5 >> 7;
      if (v5 >> 14)
      {
        unsigned int v7 = v6 + 2;
        do
        {
          *(v7 - 1) = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          ++v7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v7 - 1) = v9;
      }
      else
      {
        v6[1] = v8;
        unsigned int v7 = v6 + 2;
      }
    }
    else
    {
      *int v6 = v5;
      unsigned int v7 = v6 + 1;
    }
    unsigned int v11 = result[4];
    if (v11 > 0x7F)
    {
      *unsigned int v7 = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        unsigned int v12 = v7 + 2;
        do
        {
          *(v12 - 1) = v13 | 0x80;
          unsigned int v14 = v13 >> 7;
          ++v12;
          unsigned int v15 = v13 >> 14;
          v13 >>= 7;
        }
        while (v15);
        *(v12 - 1) = v14;
      }
      else
      {
        v7[1] = v13;
        unsigned int v12 = v7 + 2;
      }
    }
    else
    {
      *unsigned int v7 = v11;
      unsigned int v12 = v7 + 1;
    }
    *a3 = v12;
    if (*result >= 1)
    {
      int v16 = 0;
      do
      {
        unsigned int v17 = (unint64_t *)sub_100078340(v4, v16);
        uint64_t result = (int *)sub_10006BFC4(v17, a3);
        ++v16;
      }
      while (v16 < *v4);
    }
  }
  return result;
}

unint64_t *sub_1000698F0(unint64_t *result, uint64_t a2, unsigned char **a3)
{
  if (*(int *)result >= 1)
  {
    unsigned int v5 = (int *)result;
    int v6 = 0;
    do
    {
      unsigned int v7 = *(_DWORD *)(a2 + 4);
      unsigned int v8 = *a3;
      if (v7 > 0x7F)
      {
        *unsigned int v8 = v7 | 0x80;
        unsigned int v10 = v7 >> 7;
        if (v7 >> 14)
        {
          unsigned int v9 = v8 + 2;
          do
          {
            *(v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            ++v9;
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *(v9 - 1) = v11;
        }
        else
        {
          v8[1] = v10;
          unsigned int v9 = v8 + 2;
        }
      }
      else
      {
        *unsigned int v8 = v7;
        unsigned int v9 = v8 + 1;
      }
      *a3 = v9;
      unsigned int v13 = (unint64_t *)sub_100079B24(v5, v6);
      uint64_t result = sub_10006BFC4(v13, a3);
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_1000699B4(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result)
  {
    uint64_t v4 = result;
    unsigned int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *a3;
    if (v5 > 0x7F)
    {
      *int v6 = v5 | 0x80;
      unsigned int v8 = v5 >> 7;
      if (v5 >> 14)
      {
        unsigned int v7 = v6 + 2;
        do
        {
          *(v7 - 1) = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          ++v7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v7 - 1) = v9;
      }
      else
      {
        v6[1] = v8;
        unsigned int v7 = v6 + 2;
      }
    }
    else
    {
      *int v6 = v5;
      unsigned int v7 = v6 + 1;
    }
    unsigned int v11 = result[4];
    if (v11 > 0x7F)
    {
      *unsigned int v7 = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        unsigned int v12 = v7 + 2;
        do
        {
          *(v12 - 1) = v13 | 0x80;
          unsigned int v14 = v13 >> 7;
          ++v12;
          unsigned int v15 = v13 >> 14;
          v13 >>= 7;
        }
        while (v15);
        *(v12 - 1) = v14;
      }
      else
      {
        v7[1] = v13;
        unsigned int v12 = v7 + 2;
      }
    }
    else
    {
      *unsigned int v7 = v11;
      unsigned int v12 = v7 + 1;
    }
    *a3 = v12;
    if (*result >= 1)
    {
      int v16 = 0;
      do
      {
        unsigned int v17 = (unint64_t *)sub_100079B24(v4, v16);
        uint64_t result = (int *)sub_10006BFC4(v17, a3);
        ++v16;
      }
      while (v16 < *v4);
    }
  }
  return result;
}

int *sub_100069AD4(int *a1, uint64_t a2, unsigned char **a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *a3;
  if (v3 > 0x7F)
  {
    *uint64_t v4 = v3 | 0x80;
    unsigned int v6 = v3 >> 7;
    if (v3 >> 14)
    {
      unsigned int v5 = v4 + 2;
      do
      {
        *(v5 - 1) = v6 | 0x80;
        unsigned int v7 = v6 >> 7;
        ++v5;
        unsigned int v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
      *(v5 - 1) = v7;
    }
    else
    {
      v4[1] = v6;
      unsigned int v5 = v4 + 2;
    }
  }
  else
  {
    *uint64_t v4 = v3;
    unsigned int v5 = v4 + 1;
  }
  *a3 = v5;
  return sub_10006C028(a1, a3);
}

int *sub_100069B3C(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result >= 1)
  {
    unsigned int v5 = result;
    int v6 = 0;
    do
    {
      unsigned int v7 = *(_DWORD *)(a2 + 4);
      unsigned int v8 = *a3;
      if (v7 > 0x7F)
      {
        *unsigned int v8 = v7 | 0x80;
        unsigned int v10 = v7 >> 7;
        if (v7 >> 14)
        {
          unsigned int v9 = v8 + 2;
          do
          {
            *(v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            ++v9;
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *(v9 - 1) = v11;
        }
        else
        {
          v8[1] = v10;
          unsigned int v9 = v8 + 2;
        }
      }
      else
      {
        *unsigned int v8 = v7;
        unsigned int v9 = v8 + 1;
      }
      *a3 = v9;
      unsigned int v13 = (int *)sub_1000753A0(v5, v6);
      uint64_t result = sub_10006C028(v13, a3);
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_100069C00(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result)
  {
    uint64_t v4 = result;
    unsigned int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *a3;
    if (v5 > 0x7F)
    {
      *int v6 = v5 | 0x80;
      unsigned int v8 = v5 >> 7;
      if (v5 >> 14)
      {
        unsigned int v7 = v6 + 2;
        do
        {
          *(v7 - 1) = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          ++v7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v7 - 1) = v9;
      }
      else
      {
        v6[1] = v8;
        unsigned int v7 = v6 + 2;
      }
    }
    else
    {
      *int v6 = v5;
      unsigned int v7 = v6 + 1;
    }
    unsigned int v11 = result[4];
    if (v11 > 0x7F)
    {
      *unsigned int v7 = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        unsigned int v12 = v7 + 2;
        do
        {
          *(v12 - 1) = v13 | 0x80;
          unsigned int v14 = v13 >> 7;
          ++v12;
          unsigned int v15 = v13 >> 14;
          v13 >>= 7;
        }
        while (v15);
        *(v12 - 1) = v14;
      }
      else
      {
        v7[1] = v13;
        unsigned int v12 = v7 + 2;
      }
    }
    else
    {
      *unsigned int v7 = v11;
      unsigned int v12 = v7 + 1;
    }
    *a3 = v12;
    if (*result >= 1)
    {
      int v16 = 0;
      do
      {
        unsigned int v17 = (int *)sub_1000753A0(v4, v16);
        uint64_t result = sub_10006C028(v17, a3);
        ++v16;
      }
      while (v16 < *v4);
    }
  }
  return result;
}

int *sub_100069D20(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result >= 1)
  {
    unsigned int v5 = result;
    int v6 = 0;
    unsigned int v7 = *a3;
    do
    {
      unsigned int v8 = *(_DWORD *)(a2 + 4);
      if (v8 > 0x7F)
      {
        *unsigned int v7 = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          unsigned int v9 = v7 + 2;
          do
          {
            *(v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            ++v9;
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *(v9 - 1) = v11;
        }
        else
        {
          v7[1] = v10;
          unsigned int v9 = v7 + 2;
        }
      }
      else
      {
        *unsigned int v7 = v8;
        unsigned int v9 = v7 + 1;
      }
      *a3 = v9;
      uint64_t result = (int *)sub_100079B24(v5, v6);
      unsigned int v13 = *a3;
      void *v13 = *(void *)result;
      unsigned int v7 = v13 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

uint64_t sub_100069DEC(uint64_t result, uint64_t a2, unsigned char **a3)
{
  if (*(_DWORD *)result)
  {
    uint64_t v4 = (int *)result;
    unsigned int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *a3;
    if (v5 > 0x7F)
    {
      *int v6 = v5 | 0x80;
      unsigned int v8 = v5 >> 7;
      if (v5 >> 14)
      {
        unsigned int v7 = v6 + 2;
        do
        {
          *(v7 - 1) = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          ++v7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v7 - 1) = v9;
      }
      else
      {
        v6[1] = v8;
        unsigned int v7 = v6 + 2;
      }
    }
    else
    {
      *int v6 = v5;
      unsigned int v7 = v6 + 1;
    }
    unsigned int v11 = *(_DWORD *)(result + 16);
    if (v11 > 0x7F)
    {
      *unsigned int v7 = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        unsigned int v12 = v7 + 2;
        do
        {
          *(v12 - 1) = v13 | 0x80;
          unsigned int v14 = v13 >> 7;
          ++v12;
          unsigned int v15 = v13 >> 14;
          v13 >>= 7;
        }
        while (v15);
        *(v12 - 1) = v14;
      }
      else
      {
        v7[1] = v13;
        unsigned int v12 = v7 + 2;
      }
    }
    else
    {
      *unsigned int v7 = v11;
      unsigned int v12 = v7 + 1;
    }
    *a3 = v12;
    if (*(int *)result >= 1)
    {
      int v16 = 0;
      do
      {
        uint64_t result = sub_100079B24(v4, v16);
        unsigned int v17 = *a3;
        *unsigned int v17 = *(void *)result;
        *a3 = v17 + 1;
        ++v16;
      }
      while (v16 < *v4);
    }
  }
  return result;
}

int *sub_100069F14(int *result, uint64_t a2, int **a3)
{
  if (*result >= 1)
  {
    unsigned int v5 = result;
    int v6 = 0;
    unsigned int v7 = *a3;
    do
    {
      unsigned int v8 = *(_DWORD *)(a2 + 4);
      if (v8 > 0x7F)
      {
        *(unsigned char *)unsigned int v7 = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          unsigned int v9 = (int *)((char *)v7 + 2);
          do
          {
            *((unsigned char *)v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            unsigned int v9 = (int *)((char *)v9 + 1);
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *((unsigned char *)v9 - 1) = v11;
        }
        else
        {
          *((unsigned char *)v7 + 1) = v10;
          unsigned int v9 = (int *)((char *)v7 + 2);
        }
      }
      else
      {
        *(unsigned char *)unsigned int v7 = v8;
        unsigned int v9 = (int *)((char *)v7 + 1);
      }
      *a3 = v9;
      uint64_t result = (int *)sub_100076B84(v5, v6);
      unsigned int v13 = *a3;
      int *v13 = *result;
      unsigned int v7 = v13 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_100069FE0(int *result, uint64_t a2, int **a3)
{
  if (*result)
  {
    uint64_t v4 = result;
    unsigned int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *a3;
    if (v5 > 0x7F)
    {
      *(unsigned char *)int v6 = v5 | 0x80;
      unsigned int v8 = v5 >> 7;
      if (v5 >> 14)
      {
        unsigned int v7 = (char *)v6 + 2;
        do
        {
          *(v7 - 1) = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          ++v7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v7 - 1) = v9;
      }
      else
      {
        *((unsigned char *)v6 + 1) = v8;
        unsigned int v7 = (char *)v6 + 2;
      }
    }
    else
    {
      *(unsigned char *)int v6 = v5;
      unsigned int v7 = (char *)v6 + 1;
    }
    unsigned int v11 = result[4];
    if (v11 > 0x7F)
    {
      *unsigned int v7 = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        unsigned int v12 = (int *)(v7 + 2);
        do
        {
          *((unsigned char *)v12 - 1) = v13 | 0x80;
          unsigned int v14 = v13 >> 7;
          unsigned int v12 = (int *)((char *)v12 + 1);
          unsigned int v15 = v13 >> 14;
          v13 >>= 7;
        }
        while (v15);
        *((unsigned char *)v12 - 1) = v14;
      }
      else
      {
        v7[1] = v13;
        unsigned int v12 = (int *)(v7 + 2);
      }
    }
    else
    {
      *unsigned int v7 = v11;
      unsigned int v12 = (int *)(v7 + 1);
    }
    *a3 = v12;
    if (*result >= 1)
    {
      int v16 = 0;
      do
      {
        uint64_t result = (int *)sub_100076B84(v4, v16);
        unsigned int v17 = *a3;
        *unsigned int v17 = *result;
        *a3 = v17 + 1;
        ++v16;
      }
      while (v16 < *v4);
    }
  }
  return result;
}

int *sub_10006A108(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result >= 1)
  {
    unsigned int v5 = result;
    int v6 = 0;
    unsigned int v7 = *a3;
    do
    {
      unsigned int v8 = *(_DWORD *)(a2 + 4);
      if (v8 > 0x7F)
      {
        *unsigned int v7 = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          unsigned int v9 = v7 + 2;
          do
          {
            *(v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            ++v9;
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *(v9 - 1) = v11;
        }
        else
        {
          v7[1] = v10;
          unsigned int v9 = v7 + 2;
        }
      }
      else
      {
        *unsigned int v7 = v8;
        unsigned int v9 = v7 + 1;
      }
      *a3 = v9;
      uint64_t result = (int *)sub_100073B78(v5, v6);
      unsigned int v13 = *a3;
      unsigned char *v13 = *(unsigned char *)result;
      unsigned int v7 = v13 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

uint64_t sub_10006A1D4(uint64_t result, uint64_t a2, unsigned char **a3)
{
  if (*(_DWORD *)result)
  {
    uint64_t v4 = (int *)result;
    unsigned int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *a3;
    if (v5 > 0x7F)
    {
      *int v6 = v5 | 0x80;
      unsigned int v8 = v5 >> 7;
      if (v5 >> 14)
      {
        unsigned int v7 = v6 + 2;
        do
        {
          *(v7 - 1) = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          ++v7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v7 - 1) = v9;
      }
      else
      {
        v6[1] = v8;
        unsigned int v7 = v6 + 2;
      }
    }
    else
    {
      *int v6 = v5;
      unsigned int v7 = v6 + 1;
    }
    unsigned int v11 = *(_DWORD *)(result + 16);
    if (v11 > 0x7F)
    {
      *unsigned int v7 = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        unsigned int v12 = v7 + 2;
        do
        {
          *(v12 - 1) = v13 | 0x80;
          unsigned int v14 = v13 >> 7;
          ++v12;
          unsigned int v15 = v13 >> 14;
          v13 >>= 7;
        }
        while (v15);
        *(v12 - 1) = v14;
      }
      else
      {
        v7[1] = v13;
        unsigned int v12 = v7 + 2;
      }
    }
    else
    {
      *unsigned int v7 = v11;
      unsigned int v12 = v7 + 1;
    }
    *a3 = v12;
    if (*(int *)result >= 1)
    {
      int v16 = 0;
      do
      {
        uint64_t result = sub_100073B78(v4, v16);
        unsigned int v17 = *a3;
        *unsigned int v17 = *(unsigned char *)result;
        *a3 = v17 + 1;
        ++v16;
      }
      while (v16 < *v4);
    }
  }
  return result;
}

char *sub_10006A2FC(void *a1, uint64_t a2, char **a3)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  unsigned int v5 = *a3;
  if (v4 > 0x7F)
  {
    char *v5 = v4 | 0x80;
    unsigned int v7 = v4 >> 7;
    if (v4 >> 14)
    {
      int v6 = v5 + 2;
      do
      {
        *(v6 - 1) = v7 | 0x80;
        unsigned int v8 = v7 >> 7;
        ++v6;
        unsigned int v9 = v7 >> 14;
        v7 >>= 7;
      }
      while (v9);
      *(v6 - 1) = v8;
    }
    else
    {
      v5[1] = v7;
      int v6 = v5 + 2;
    }
  }
  else
  {
    char *v5 = v4;
    int v6 = v5 + 1;
  }
  *a3 = v6;
  uint64_t result = sub_1000519CC(*a1 & 0xFFFFFFFFFFFFFFFELL, v6);
  *a3 = result;
  return result;
}

char *sub_10006A38C(char *result, uint64_t a2, char **a3)
{
  if (*((int *)result + 2) >= 1)
  {
    unsigned int v5 = result;
    uint64_t v6 = 0;
    unsigned int v7 = *a3;
    do
    {
      unsigned int v8 = *(_DWORD *)(a2 + 4);
      if (v8 > 0x7F)
      {
        *unsigned int v7 = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          unsigned int v9 = v7 + 2;
          do
          {
            *(v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            ++v9;
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *(v9 - 1) = v11;
        }
        else
        {
          v7[1] = v10;
          unsigned int v9 = v7 + 2;
        }
      }
      else
      {
        *unsigned int v7 = v8;
        unsigned int v9 = v7 + 1;
      }
      *a3 = v9;
      uint64_t v13 = *((void *)v5 + 2);
      if (v13) {
        uint64_t v14 = v13 + 8;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t result = sub_1000519CC(*(void *)(v14 + 8 * v6), v9);
      unsigned int v7 = result;
      *a3 = result;
      ++v6;
    }
    while (v6 < *((int *)v5 + 2));
  }
  return result;
}

uint64_t sub_10006A45C(uint64_t a1, uint64_t a2)
{
  sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 509);
  unsigned int v3 = sub_100051E74(v9, "Not implemented field number ");
  unsigned int v4 = sub_100052438(v3, *(_DWORD *)(a2 + 4));
  unsigned int v5 = sub_100051E74(v4, " with type ");
  uint64_t v6 = sub_100052438(v5, *(_DWORD *)(a2 + 12));
  sub_100051FB0((uint64_t)&v8, (const char **)&v6->__r_.__value_.__l.__data_);
  return sub_100051FB8((uint64_t)v9);
}

void sub_10006A4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006A4F4(uint64_t *a1, uint64_t a2, void *a3)
{
  unsigned int v5 = *(_DWORD *)(a2 + 4);
  uint64_t v6 = (unsigned char *)*a3;
  if (v5 > 0x7F)
  {
    *uint64_t v6 = v5 | 0x80;
    unsigned int v8 = v5 >> 7;
    if (v5 >> 14)
    {
      unsigned int v7 = v6 + 2;
      do
      {
        *(v7 - 1) = v8 | 0x80;
        unsigned int v9 = v8 >> 7;
        ++v7;
        unsigned int v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
      *(v7 - 1) = v9;
    }
    else
    {
      v6[1] = v8;
      unsigned int v7 = v6 + 2;
    }
  }
  else
  {
    *uint64_t v6 = v5;
    unsigned int v7 = v6 + 1;
  }
  *a3 = v7;
  uint64_t result = sub_10006C08C(*a1, *(void *)(a2 + 16), (uint64_t)a3);
  unsigned int v12 = *(_DWORD *)(a2 + 4) + 1;
  uint64_t v13 = (unsigned char *)*a3;
  if (v12 > 0x7F)
  {
    unsigned char *v13 = v12 | 0x80;
    unsigned int v15 = v12 >> 7;
    if (v12 >> 14)
    {
      uint64_t v14 = v13 + 2;
      do
      {
        *(v14 - 1) = v15 | 0x80;
        unsigned int v16 = v15 >> 7;
        ++v14;
        unsigned int v17 = v15 >> 14;
        v15 >>= 7;
      }
      while (v17);
      *(v14 - 1) = v16;
    }
    else
    {
      v13[1] = v15;
      uint64_t v14 = v13 + 2;
    }
  }
  else
  {
    unsigned char *v13 = v12;
    uint64_t v14 = v13 + 1;
  }
  *a3 = v14;
  return result;
}

uint64_t sub_10006A5EC(uint64_t result, uint64_t a2, void *a3)
{
  if (*(int *)(result + 8) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    unsigned int v7 = (unsigned char *)*a3;
    do
    {
      unsigned int v8 = *(_DWORD *)(a2 + 4);
      if (v8 > 0x7F)
      {
        *unsigned int v7 = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          unsigned int v9 = v7 + 2;
          do
          {
            *(v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            ++v9;
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *(v9 - 1) = v11;
        }
        else
        {
          v7[1] = v10;
          unsigned int v9 = v7 + 2;
        }
      }
      else
      {
        *unsigned int v7 = v8;
        unsigned int v9 = v7 + 1;
      }
      *a3 = v9;
      uint64_t v13 = *(void *)(v5 + 16);
      if (v13) {
        uint64_t v14 = v13 + 8;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t result = sub_10006C08C(*(void *)(v14 + 8 * v6), *(void *)(a2 + 16), (uint64_t)a3);
      unsigned int v15 = *(_DWORD *)(a2 + 4) + 1;
      unsigned int v16 = (unsigned char *)*a3;
      if (v15 > 0x7F)
      {
        unsigned char *v16 = v15 | 0x80;
        unsigned int v17 = v15 >> 7;
        if (v15 >> 14)
        {
          unsigned int v7 = v16 + 2;
          do
          {
            *(v7 - 1) = v17 | 0x80;
            unsigned int v18 = v17 >> 7;
            ++v7;
            unsigned int v19 = v17 >> 14;
            v17 >>= 7;
          }
          while (v19);
          *(v7 - 1) = v18;
        }
        else
        {
          v16[1] = v17;
          unsigned int v7 = v16 + 2;
        }
      }
      else
      {
        unsigned char *v16 = v15;
        unsigned int v7 = v16 + 1;
      }
      *a3 = v7;
      ++v6;
    }
    while (v6 < *(int *)(v5 + 8));
  }
  return result;
}

uint64_t sub_10006A720(uint64_t *a1, uint64_t a2, void *a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 4);
  unsigned int v4 = (unsigned char *)*a3;
  if (v3 > 0x7F)
  {
    *unsigned int v4 = v3 | 0x80;
    unsigned int v6 = v3 >> 7;
    if (v3 >> 14)
    {
      uint64_t v5 = v4 + 2;
      do
      {
        *(v5 - 1) = v6 | 0x80;
        unsigned int v7 = v6 >> 7;
        ++v5;
        unsigned int v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
      *(v5 - 1) = v7;
    }
    else
    {
      v4[1] = v6;
      uint64_t v5 = v4 + 2;
    }
  }
  else
  {
    *unsigned int v4 = v3;
    uint64_t v5 = v4 + 1;
  }
  *a3 = v5;
  return sub_10006C0F0(*a1, *(void *)(a2 + 16), (uint64_t)a3);
}

uint64_t sub_10006A78C(uint64_t result, uint64_t a2, void *a3)
{
  if (*(int *)(result + 8) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      unsigned int v7 = *(_DWORD *)(a2 + 4);
      unsigned int v8 = (unsigned char *)*a3;
      if (v7 > 0x7F)
      {
        *unsigned int v8 = v7 | 0x80;
        unsigned int v10 = v7 >> 7;
        if (v7 >> 14)
        {
          unsigned int v9 = v8 + 2;
          do
          {
            *(v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            ++v9;
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *(v9 - 1) = v11;
        }
        else
        {
          v8[1] = v10;
          unsigned int v9 = v8 + 2;
        }
      }
      else
      {
        *unsigned int v8 = v7;
        unsigned int v9 = v8 + 1;
      }
      *a3 = v9;
      uint64_t v13 = *(void *)(v5 + 16);
      if (v13) {
        uint64_t v14 = v13 + 8;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t result = sub_10006C0F0(*(void *)(v14 + 8 * v6++), *(void *)(a2 + 16), (uint64_t)a3);
    }
    while (v6 < *(int *)(v5 + 8));
  }
  return result;
}

unsigned int *sub_10006A85C(unsigned int *a1, uint64_t a2, unsigned char **a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 4);
  unsigned int v4 = *a3;
  if (v3 > 0x7F)
  {
    *unsigned int v4 = v3 | 0x80;
    unsigned int v6 = v3 >> 7;
    if (v3 >> 14)
    {
      uint64_t v5 = v4 + 2;
      do
      {
        *(v5 - 1) = v6 | 0x80;
        unsigned int v7 = v6 >> 7;
        ++v5;
        unsigned int v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
      *(v5 - 1) = v7;
    }
    else
    {
      v4[1] = v6;
      uint64_t v5 = v4 + 2;
    }
  }
  else
  {
    *unsigned int v4 = v3;
    uint64_t v5 = v4 + 1;
  }
  *a3 = v5;
  return sub_10006BF60(a1, a3);
}

unsigned int *sub_10006A8C4(unsigned int *result, uint64_t a2, unsigned char **a3)
{
  if ((int)*result >= 1)
  {
    uint64_t v5 = (int *)result;
    int v6 = 0;
    do
    {
      unsigned int v7 = *(_DWORD *)(a2 + 4);
      unsigned int v8 = *a3;
      if (v7 > 0x7F)
      {
        *unsigned int v8 = v7 | 0x80;
        unsigned int v10 = v7 >> 7;
        if (v7 >> 14)
        {
          unsigned int v9 = v8 + 2;
          do
          {
            *(v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            ++v9;
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *(v9 - 1) = v11;
        }
        else
        {
          v8[1] = v10;
          unsigned int v9 = v8 + 2;
        }
      }
      else
      {
        *unsigned int v8 = v7;
        unsigned int v9 = v8 + 1;
      }
      *a3 = v9;
      uint64_t v13 = (unsigned int *)sub_100076B84(v5, v6);
      uint64_t result = sub_10006BF60(v13, a3);
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_10006A988(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result)
  {
    unsigned int v4 = result;
    unsigned int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *a3;
    if (v5 > 0x7F)
    {
      *int v6 = v5 | 0x80;
      unsigned int v8 = v5 >> 7;
      if (v5 >> 14)
      {
        unsigned int v7 = v6 + 2;
        do
        {
          *(v7 - 1) = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          ++v7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v7 - 1) = v9;
      }
      else
      {
        v6[1] = v8;
        unsigned int v7 = v6 + 2;
      }
    }
    else
    {
      *int v6 = v5;
      unsigned int v7 = v6 + 1;
    }
    unsigned int v11 = result[4];
    if (v11 > 0x7F)
    {
      *unsigned int v7 = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        unsigned int v12 = v7 + 2;
        do
        {
          *(v12 - 1) = v13 | 0x80;
          unsigned int v14 = v13 >> 7;
          ++v12;
          unsigned int v15 = v13 >> 14;
          v13 >>= 7;
        }
        while (v15);
        *(v12 - 1) = v14;
      }
      else
      {
        v7[1] = v13;
        unsigned int v12 = v7 + 2;
      }
    }
    else
    {
      *unsigned int v7 = v11;
      unsigned int v12 = v7 + 1;
    }
    *a3 = v12;
    if (*result >= 1)
    {
      int v16 = 0;
      do
      {
        unsigned int v17 = (unsigned int *)sub_100076B84(v4, v16);
        uint64_t result = (int *)sub_10006BF60(v17, a3);
        ++v16;
      }
      while (v16 < *v4);
    }
  }
  return result;
}

int *sub_10006AAA8(int *result, uint64_t a2, int **a3)
{
  if (*result >= 1)
  {
    unsigned int v5 = result;
    int v6 = 0;
    unsigned int v7 = *a3;
    do
    {
      unsigned int v8 = *(_DWORD *)(a2 + 4);
      if (v8 > 0x7F)
      {
        *(unsigned char *)unsigned int v7 = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          unsigned int v9 = (int *)((char *)v7 + 2);
          do
          {
            *((unsigned char *)v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            unsigned int v9 = (int *)((char *)v9 + 1);
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *((unsigned char *)v9 - 1) = v11;
        }
        else
        {
          *((unsigned char *)v7 + 1) = v10;
          unsigned int v9 = (int *)((char *)v7 + 2);
        }
      }
      else
      {
        *(unsigned char *)unsigned int v7 = v8;
        unsigned int v9 = (int *)((char *)v7 + 1);
      }
      *a3 = v9;
      uint64_t result = (int *)sub_1000753A0(v5, v6);
      unsigned int v13 = *a3;
      int *v13 = *result;
      unsigned int v7 = v13 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_10006AB74(int *result, uint64_t a2, int **a3)
{
  if (*result)
  {
    unsigned int v4 = result;
    unsigned int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *a3;
    if (v5 > 0x7F)
    {
      *(unsigned char *)int v6 = v5 | 0x80;
      unsigned int v8 = v5 >> 7;
      if (v5 >> 14)
      {
        unsigned int v7 = (char *)v6 + 2;
        do
        {
          *(v7 - 1) = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          ++v7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v7 - 1) = v9;
      }
      else
      {
        *((unsigned char *)v6 + 1) = v8;
        unsigned int v7 = (char *)v6 + 2;
      }
    }
    else
    {
      *(unsigned char *)int v6 = v5;
      unsigned int v7 = (char *)v6 + 1;
    }
    unsigned int v11 = result[4];
    if (v11 > 0x7F)
    {
      *unsigned int v7 = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        unsigned int v12 = (int *)(v7 + 2);
        do
        {
          *((unsigned char *)v12 - 1) = v13 | 0x80;
          unsigned int v14 = v13 >> 7;
          unsigned int v12 = (int *)((char *)v12 + 1);
          unsigned int v15 = v13 >> 14;
          v13 >>= 7;
        }
        while (v15);
        *((unsigned char *)v12 - 1) = v14;
      }
      else
      {
        v7[1] = v13;
        unsigned int v12 = (int *)(v7 + 2);
      }
    }
    else
    {
      *unsigned int v7 = v11;
      unsigned int v12 = (int *)(v7 + 1);
    }
    *a3 = v12;
    if (*result >= 1)
    {
      int v16 = 0;
      do
      {
        uint64_t result = (int *)sub_1000753A0(v4, v16);
        unsigned int v17 = *a3;
        *unsigned int v17 = *result;
        *a3 = v17 + 1;
        ++v16;
      }
      while (v16 < *v4);
    }
  }
  return result;
}

int *sub_10006AC9C(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result >= 1)
  {
    unsigned int v5 = result;
    int v6 = 0;
    unsigned int v7 = *a3;
    do
    {
      unsigned int v8 = *(_DWORD *)(a2 + 4);
      if (v8 > 0x7F)
      {
        *unsigned int v7 = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          unsigned int v9 = v7 + 2;
          do
          {
            *(v9 - 1) = v10 | 0x80;
            unsigned int v11 = v10 >> 7;
            ++v9;
            unsigned int v12 = v10 >> 14;
            v10 >>= 7;
          }
          while (v12);
          *(v9 - 1) = v11;
        }
        else
        {
          v7[1] = v10;
          unsigned int v9 = v7 + 2;
        }
      }
      else
      {
        *unsigned int v7 = v8;
        unsigned int v9 = v7 + 1;
      }
      *a3 = v9;
      uint64_t result = (int *)sub_100078340(v5, v6);
      unsigned int v13 = *a3;
      void *v13 = *(void *)result;
      unsigned int v7 = v13 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

uint64_t sub_10006AD68(uint64_t result, uint64_t a2, unsigned char **a3)
{
  if (*(_DWORD *)result)
  {
    unsigned int v4 = (int *)result;
    unsigned int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *a3;
    if (v5 > 0x7F)
    {
      *int v6 = v5 | 0x80;
      unsigned int v8 = v5 >> 7;
      if (v5 >> 14)
      {
        unsigned int v7 = v6 + 2;
        do
        {
          *(v7 - 1) = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          ++v7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v7 - 1) = v9;
      }
      else
      {
        v6[1] = v8;
        unsigned int v7 = v6 + 2;
      }
    }
    else
    {
      *int v6 = v5;
      unsigned int v7 = v6 + 1;
    }
    unsigned int v11 = *(_DWORD *)(result + 16);
    if (v11 > 0x7F)
    {
      *unsigned int v7 = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        unsigned int v12 = v7 + 2;
        do
        {
          *(v12 - 1) = v13 | 0x80;
          unsigned int v14 = v13 >> 7;
          ++v12;
          unsigned int v15 = v13 >> 14;
          v13 >>= 7;
        }
        while (v15);
        *(v12 - 1) = v14;
      }
      else
      {
        v7[1] = v13;
        unsigned int v12 = v7 + 2;
      }
    }
    else
    {
      *unsigned int v7 = v11;
      unsigned int v12 = v7 + 1;
    }
    *a3 = v12;
    if (*(int *)result >= 1)
    {
      int v16 = 0;
      do
      {
        uint64_t result = sub_100078340(v4, v16);
        unsigned int v17 = *a3;
        *unsigned int v17 = *(void *)result;
        *a3 = v17 + 1;
        ++v16;
      }
      while (v16 < *v4);
    }
  }
  return result;
}

unsigned char *sub_10006AE90(int *a1, uint64_t a2, unsigned char **a3)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  unsigned int v5 = *a3;
  if (v4 > 0x7F)
  {
    unsigned char *v5 = v4 | 0x80;
    unsigned int v7 = v4 >> 7;
    if (v4 >> 14)
    {
      int v6 = v5 + 2;
      do
      {
        *(v6 - 1) = v7 | 0x80;
        unsigned int v8 = v7 >> 7;
        ++v6;
        unsigned int v9 = v7 >> 14;
        v7 >>= 7;
      }
      while (v9);
      *(v6 - 1) = v8;
    }
    else
    {
      v5[1] = v7;
      int v6 = v5 + 2;
    }
  }
  else
  {
    unsigned char *v5 = v4;
    int v6 = v5 + 1;
  }
  *a3 = v6;
  uint64_t result = sub_10006C244(a1, v6);
  *a3 = result;
  return result;
}

unsigned char *sub_10006AF18(unsigned char *result, uint64_t a2, unsigned char **a3)
{
  if (*(int *)result >= 1)
  {
    unsigned int v5 = (int *)result;
    int v6 = 0;
    uint64_t result = *a3;
    do
    {
      unsigned int v7 = *(_DWORD *)(a2 + 4);
      if (v7 > 0x7F)
      {
        *uint64_t result = v7 | 0x80;
        unsigned int v9 = v7 >> 7;
        if (v7 >> 14)
        {
          unsigned int v8 = result + 2;
          do
          {
            *(v8 - 1) = v9 | 0x80;
            unsigned int v10 = v9 >> 7;
            ++v8;
            unsigned int v11 = v9 >> 14;
            v9 >>= 7;
          }
          while (v11);
          *(v8 - 1) = v10;
        }
        else
        {
          result[1] = v9;
          unsigned int v8 = result + 2;
        }
      }
      else
      {
        *uint64_t result = v7;
        unsigned int v8 = result + 1;
      }
      *a3 = v8;
      unsigned int v12 = (int *)sub_1000753A0(v5, v6);
      uint64_t result = sub_10006C244(v12, *a3);
      *a3 = result;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_10006AFE0(int *result, uint64_t a2, int **a3)
{
  if (*result)
  {
    unsigned int v4 = result;
    unsigned int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *a3;
    if (v5 > 0x7F)
    {
      *(unsigned char *)int v6 = v5 | 0x80;
      unsigned int v8 = v5 >> 7;
      if (v5 >> 14)
      {
        unsigned int v7 = (char *)v6 + 2;
        do
        {
          *(v7 - 1) = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          ++v7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v7 - 1) = v9;
      }
      else
      {
        *((unsigned char *)v6 + 1) = v8;
        unsigned int v7 = (char *)v6 + 2;
      }
    }
    else
    {
      *(unsigned char *)int v6 = v5;
      unsigned int v7 = (char *)v6 + 1;
    }
    unsigned int v11 = result[4];
    if (v11 > 0x7F)
    {
      *unsigned int v7 = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        unsigned int v12 = (int *)(v7 + 2);
        do
        {
          *((unsigned char *)v12 - 1) = v13 | 0x80;
          unsigned int v14 = v13 >> 7;
          unsigned int v12 = (int *)((char *)v12 + 1);
          unsigned int v15 = v13 >> 14;
          v13 >>= 7;
        }
        while (v15);
        *((unsigned char *)v12 - 1) = v14;
      }
      else
      {
        v7[1] = v13;
        unsigned int v12 = (int *)(v7 + 2);
      }
    }
    else
    {
      *unsigned int v7 = v11;
      unsigned int v12 = (int *)(v7 + 1);
    }
    *a3 = v12;
    if (*result >= 1)
    {
      int v16 = 0;
      do
      {
        unsigned int v17 = (int *)sub_1000753A0(v4, v16);
        uint64_t result = (int *)sub_10006C244(v17, *a3);
        *a3 = result;
        ++v16;
      }
      while (v16 < *v4);
    }
  }
  return result;
}

unsigned char *sub_10006B104(uint64_t *a1, uint64_t a2, unsigned char **a3)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  unsigned int v5 = *a3;
  if (v4 > 0x7F)
  {
    unsigned char *v5 = v4 | 0x80;
    unsigned int v7 = v4 >> 7;
    if (v4 >> 14)
    {
      int v6 = v5 + 2;
      do
      {
        *(v6 - 1) = v7 | 0x80;
        unsigned int v8 = v7 >> 7;
        ++v6;
        unsigned int v9 = v7 >> 14;
        v7 >>= 7;
      }
      while (v9);
      *(v6 - 1) = v8;
    }
    else
    {
      v5[1] = v7;
      int v6 = v5 + 2;
    }
  }
  else
  {
    unsigned char *v5 = v4;
    int v6 = v5 + 1;
  }
  *a3 = v6;
  uint64_t result = sub_10006C2AC(a1, v6);
  *a3 = result;
  return result;
}

unsigned char *sub_10006B18C(unsigned char *result, uint64_t a2, unsigned char **a3)
{
  if (*(int *)result >= 1)
  {
    unsigned int v5 = (int *)result;
    int v6 = 0;
    uint64_t result = *a3;
    do
    {
      unsigned int v7 = *(_DWORD *)(a2 + 4);
      if (v7 > 0x7F)
      {
        *uint64_t result = v7 | 0x80;
        unsigned int v9 = v7 >> 7;
        if (v7 >> 14)
        {
          unsigned int v8 = result + 2;
          do
          {
            *(v8 - 1) = v9 | 0x80;
            unsigned int v10 = v9 >> 7;
            ++v8;
            unsigned int v11 = v9 >> 14;
            v9 >>= 7;
          }
          while (v11);
          *(v8 - 1) = v10;
        }
        else
        {
          result[1] = v9;
          unsigned int v8 = result + 2;
        }
      }
      else
      {
        *uint64_t result = v7;
        unsigned int v8 = result + 1;
      }
      *a3 = v8;
      unsigned int v12 = (uint64_t *)sub_100078340(v5, v6);
      uint64_t result = sub_10006C2AC(v12, *a3);
      *a3 = result;
      ++v6;
    }
    while (v6 < *v5);
  }
  return result;
}

int *sub_10006B254(int *result, uint64_t a2, int **a3)
{
  if (*result)
  {
    unsigned int v4 = result;
    unsigned int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *a3;
    if (v5 > 0x7F)
    {
      *(unsigned char *)int v6 = v5 | 0x80;
      unsigned int v8 = v5 >> 7;
      if (v5 >> 14)
      {
        unsigned int v7 = (char *)v6 + 2;
        do
        {
          *(v7 - 1) = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          ++v7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v7 - 1) = v9;
      }
      else
      {
        *((unsigned char *)v6 + 1) = v8;
        unsigned int v7 = (char *)v6 + 2;
      }
    }
    else
    {
      *(unsigned char *)int v6 = v5;
      unsigned int v7 = (char *)v6 + 1;
    }
    unsigned int v11 = result[4];
    if (v11 > 0x7F)
    {
      *unsigned int v7 = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        unsigned int v12 = (int *)(v7 + 2);
        do
        {
          *((unsigned char *)v12 - 1) = v13 | 0x80;
          unsigned int v14 = v13 >> 7;
          unsigned int v12 = (int *)((char *)v12 + 1);
          unsigned int v15 = v13 >> 14;
          v13 >>= 7;
        }
        while (v15);
        *((unsigned char *)v12 - 1) = v14;
      }
      else
      {
        v7[1] = v13;
        unsigned int v12 = (int *)(v7 + 2);
      }
    }
    else
    {
      *unsigned int v7 = v11;
      unsigned int v12 = (int *)(v7 + 1);
    }
    *a3 = v12;
    if (*result >= 1)
    {
      int v16 = 0;
      do
      {
        unsigned int v17 = (uint64_t *)sub_100078340(v4, v16);
        uint64_t result = (int *)sub_10006C2AC(v17, *a3);
        *a3 = result;
        ++v16;
      }
      while (v16 < *v4);
    }
  }
  return result;
}

char *sub_10006B378(uint64_t a1, unsigned int a2, signed int a3, int a4, uint64_t a5)
{
  uint64_t result = sub_10005FF78(a1 + a2, a3, a4, *(char **)(a5 + 64), (uint64_t *)a5);
  *(void *)(a5 + 64) = result;
  return result;
}

char *sub_10006B3B4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + a2);
  if (v6)
  {
    unsigned int v7 = (uint64_t *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)byte_1000B6BA0, memory_order_acquire) & 1) == 0) {
      sub_100065D94();
    }
    unsigned int v7 = &qword_1000B6B88;
  }
  int v8 = *((char *)v7 + 23);
  if (v8 >= 0) {
    unsigned int v9 = (char *)v7;
  }
  else {
    unsigned int v9 = (char *)*v7;
  }
  if (v8 >= 0) {
    LODWORD(v1sub_10002F6CC(&a9, 0) = *((unsigned __int8 *)v7 + 23);
  }
  else {
    uint64_t v10 = v7[1];
  }
  uint64_t v11 = *(void *)(a5 + 64);
  if (*(void *)a5 - v11 < (int)v10)
  {
    uint64_t result = sub_100051284((uint64_t *)a5, v9, v10, *(void *)(a5 + 64));
  }
  else
  {
    uint64_t v12 = (int)v10;
    memcpy(*(void **)(a5 + 64), v9, (int)v10);
    uint64_t result = (char *)(v11 + v12);
  }
  *(void *)(a5 + 64) = result;
  return result;
}

uint64_t sub_10006B464(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 64))(v2, a1);
  return v2;
}

uint64_t sub_10006B4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 64))(v4, a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2);
  (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v4);
  unsigned int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
  return v5(v4);
}

void sub_10006B63C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006B670(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unsigned int v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if (v6) {
    unsigned int v7 = (uint64_t *)*v7;
  }
  if (v7 != a3)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 722);
    int v8 = sub_100051E74(v13, "CHECK failed: submessage->GetArena() == submessage_arena: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (a1 == a3)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 723);
    unsigned int v9 = sub_100051E74(v13, "CHECK failed: message_arena != submessage_arena: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
    if (!a1)
    {
LABEL_11:
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v4 + 32))(v4, a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 64))(v10, v4);
      return v10;
    }
  }
  else if (!a1)
  {
    goto LABEL_11;
  }
  if (a3) {
    goto LABEL_11;
  }
  sub_10005A444(a1, v4);
  return v4;
}

void sub_10006B7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10006B7E4(_DWORD *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000B6768, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000B6768))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_1000B5AF8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000B6768);
  }
  pthread_t v2 = pthread_self();
  uint64_t v3 = (uint64_t)v2;
  if (qword_1000B6770)
  {
    if (v2 && v2 == (pthread_t)qword_1000B6770) {
      goto LABEL_5;
    }
  }
  else if (!v2)
  {
LABEL_5:
    if (*a1 != 1)
    {
      sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 785);
      uint64_t v4 = sub_100051E74(v6, "CHECK failed: (scc->visit_status.load(std::memory_order_relaxed)) == (SCCInfoBase::kRunning): ");
      sub_100051FB0((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v6);
    }
    return;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)byte_1000B6BA0, memory_order_acquire) & 1) == 0) {
    sub_100065D94();
  }
  std::mutex::lock(&stru_1000B5AF8);
  qword_1000B6770 = v3;
  sub_10006B950(a1);
  qword_1000B6770 = 0;
  std::mutex::unlock(&stru_1000B5AF8);
}

void sub_10006B934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_10006B950(_DWORD *result)
{
  if (*result == -1)
  {
    uint64_t v1 = (uint64_t (**)(void))result;
    *uint64_t result = 1;
    pthread_t v2 = result + 6;
    int v3 = result[1];
    if (v3 >= 1)
    {
      for (uint64_t i = 0; i < v3; ++i)
      {
        if (*(void *)&v2[2 * i])
        {
          sub_10006B950();
          int v3 = *((_DWORD *)v1 + 1);
        }
      }
    }
    uint64_t v5 = v3;
    int v6 = *((_DWORD *)v1 + 2);
    if (v6 >= 1)
    {
      uint64_t v7 = 0;
      int v8 = &v2[2 * v5];
      do
      {
        if (**(void **)&v8[2 * v7])
        {
          sub_10006B950();
          int v6 = *((_DWORD *)v1 + 2);
        }
        ++v7;
      }
      while (v7 < v6);
    }
    uint64_t result = (_DWORD *)v1[2]();
    atomic_store(0, (unsigned int *)v1);
  }
  return result;
}

char *sub_10006BA00(char *result, void *a2)
{
  unsigned int v3 = *(_DWORD *)result;
  uint64_t v4 = (char *)a2[8];
  if (*a2 <= (unint64_t)v4)
  {
    uint64_t result = sub_100051170((uint64_t)a2, v4);
    uint64_t v4 = result;
  }
  if (v3 > 0x7F)
  {
    *uint64_t v4 = v3 | 0x80;
    unsigned int v6 = v3 >> 7;
    if (v3 >> 14)
    {
      uint64_t v5 = v4 + 2;
      do
      {
        *(v5 - 1) = v6 | 0x80;
        unsigned int v7 = v6 >> 7;
        ++v5;
        unsigned int v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
      *(v5 - 1) = v7;
    }
    else
    {
      v4[1] = v6;
      uint64_t v5 = v4 + 2;
    }
  }
  else
  {
    *uint64_t v4 = v3;
    uint64_t v5 = v4 + 1;
  }
  a2[8] = v5;
  return result;
}

char *sub_10006BA9C(char *result, void *a2)
{
  unint64_t v3 = *(void *)result;
  uint64_t v4 = (char *)a2[8];
  if (*a2 <= (unint64_t)v4)
  {
    uint64_t result = sub_100051170((uint64_t)a2, v4);
    uint64_t v4 = result;
  }
  if (v3 > 0x7F)
  {
    *uint64_t v4 = v3 | 0x80;
    unint64_t v6 = v3 >> 7;
    if (v3 >> 14)
    {
      uint64_t v5 = v4 + 2;
      do
      {
        *(v5 - 1) = v6 | 0x80;
        unint64_t v7 = v6 >> 7;
        ++v5;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
      *(v5 - 1) = v7;
    }
    else
    {
      v4[1] = v6;
      uint64_t v5 = v4 + 2;
    }
  }
  else
  {
    *uint64_t v4 = v3;
    uint64_t v5 = v4 + 1;
  }
  a2[8] = v5;
  return result;
}

char *sub_10006BB38(char *result, void *a2)
{
  unint64_t v3 = *(int *)result;
  uint64_t v4 = (char *)a2[8];
  if (*a2 <= (unint64_t)v4)
  {
    uint64_t result = sub_100051170((uint64_t)a2, v4);
    uint64_t v4 = result;
  }
  if (v3 > 0x7F)
  {
    *uint64_t v4 = v3 | 0x80;
    unint64_t v6 = v3 >> 7;
    if (v3 >> 14)
    {
      uint64_t v5 = v4 + 2;
      do
      {
        *(v5 - 1) = v6 | 0x80;
        unint64_t v7 = v6 >> 7;
        ++v5;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
      *(v5 - 1) = v7;
    }
    else
    {
      v4[1] = v6;
      uint64_t v5 = v4 + 2;
    }
  }
  else
  {
    *uint64_t v4 = v3;
    uint64_t v5 = v4 + 1;
  }
  a2[8] = v5;
  return result;
}

char *sub_10006BBD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void **)a1;
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  else {
    LODWORD(v4) = *(unsigned __int8 *)(a1 + 23);
  }
  uint64_t v5 = *(char **)(a2 + 64);
  if (*(void *)a2 <= (unint64_t)v5) {
    uint64_t v5 = sub_100051170(a2, *(char **)(a2 + 64));
  }
  if (v4 > 0x7F)
  {
    char *v5 = v4 | 0x80;
    unsigned int v7 = v4 >> 7;
    if (v4 >> 14)
    {
      unint64_t v6 = v5 + 2;
      do
      {
        *(v6 - 1) = v7 | 0x80;
        unsigned int v8 = v7 >> 7;
        ++v6;
        unsigned int v9 = v7 >> 14;
        v7 >>= 7;
      }
      while (v9);
      *(v6 - 1) = v8;
    }
    else
    {
      v5[1] = v7;
      unint64_t v6 = v5 + 2;
    }
  }
  else
  {
    char *v5 = v4;
    unint64_t v6 = v5 + 1;
  }
  *(void *)(a2 + 64) = v6;
  if (*((char *)v3 + 23) < 0)
  {
    uint64_t v11 = v3;
    unint64_t v3 = (void **)*v3;
    uint64_t v10 = (uint64_t)v11[1];
  }
  else
  {
    uint64_t v10 = *((unsigned __int8 *)v3 + 23);
  }
  uint64_t result = sub_100051654(a2, v3, v10, v6);
  *(void *)(a2 + 64) = result;
  return result;
}

uint64_t sub_10006BCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (*(_DWORD *)a2 - 1);
    uint64_t v5 = *(void *)(a2 + 8) + 24;
    return sub_100065FC8(a1, v5, v4, a3);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 96))(a1, *(void *)(a3 + 64), a3);
    *(void *)(a3 + 64) = result;
  }
  return result;
}

uint64_t sub_10006BD38(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    unint64_t v6 = *(unsigned int **)(a2 + 8);
    int v9 = *(_DWORD *)(a1 + *v6);
    sub_10006BA00((char *)&v9, a3);
    return sub_100065FC8(a1, v6 + 6, (*(_DWORD *)a2 - 1), a3);
  }
  else
  {
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
    sub_10006BA00((char *)&v8, a3);
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void *))(*(void *)a1 + 96))(a1, a3[8], a3);
    a3[8] = result;
  }
  return result;
}

char *sub_10006BE18(char *result, void *a2)
{
  unsigned int v3 = (2 * *(_DWORD *)result) ^ (*(int *)result >> 31);
  uint64_t v4 = (char *)a2[8];
  if (*a2 <= (unint64_t)v4)
  {
    uint64_t result = sub_100051170((uint64_t)a2, v4);
    uint64_t v4 = result;
  }
  if (v3 > 0x7F)
  {
    *uint64_t v4 = v3 | 0x80;
    unsigned int v6 = v3 >> 7;
    if (v3 >> 14)
    {
      uint64_t v5 = v4 + 2;
      do
      {
        *(v5 - 1) = v6 | 0x80;
        unsigned int v7 = v6 >> 7;
        ++v5;
        unsigned int v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
      *(v5 - 1) = v7;
    }
    else
    {
      v4[1] = v6;
      uint64_t v5 = v4 + 2;
    }
  }
  else
  {
    *uint64_t v4 = v3;
    uint64_t v5 = v4 + 1;
  }
  a2[8] = v5;
  return result;
}

char *sub_10006BEBC(char *result, void *a2)
{
  unint64_t v3 = (2 * *(void *)result) ^ (*(uint64_t *)result >> 63);
  uint64_t v4 = (char *)a2[8];
  if (*a2 <= (unint64_t)v4)
  {
    uint64_t result = sub_100051170((uint64_t)a2, v4);
    uint64_t v4 = result;
  }
  if (v3 > 0x7F)
  {
    *uint64_t v4 = v3 | 0x80;
    unint64_t v6 = v3 >> 7;
    if (v3 >> 14)
    {
      uint64_t v5 = v4 + 2;
      do
      {
        *(v5 - 1) = v6 | 0x80;
        unint64_t v7 = v6 >> 7;
        ++v5;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
      *(v5 - 1) = v7;
    }
    else
    {
      v4[1] = v6;
      uint64_t v5 = v4 + 2;
    }
  }
  else
  {
    *uint64_t v4 = v3;
    uint64_t v5 = v4 + 1;
  }
  a2[8] = v5;
  return result;
}

unsigned int *sub_10006BF60(unsigned int *result, unsigned char **a2)
{
  pthread_t v2 = *a2;
  unsigned int v3 = *result;
  if (*result > 0x7F)
  {
    unsigned char *v2 = v3 | 0x80;
    unsigned int v5 = v3 >> 7;
    if (v3 >> 14)
    {
      uint64_t v4 = v2 + 2;
      do
      {
        *(v4 - 1) = v5 | 0x80;
        unsigned int v6 = v5 >> 7;
        ++v4;
        unsigned int v7 = v5 >> 14;
        v5 >>= 7;
      }
      while (v7);
      *(v4 - 1) = v6;
    }
    else
    {
      v2[1] = v5;
      uint64_t v4 = v2 + 2;
    }
  }
  else
  {
    unsigned char *v2 = v3;
    uint64_t v4 = v2 + 1;
  }
  *a2 = v4;
  return result;
}

unint64_t *sub_10006BFC4(unint64_t *result, unsigned char **a2)
{
  pthread_t v2 = *a2;
  unint64_t v3 = *result;
  if (*result > 0x7F)
  {
    unsigned char *v2 = v3 | 0x80;
    unint64_t v5 = v3 >> 7;
    if (v3 >> 14)
    {
      uint64_t v4 = v2 + 2;
      do
      {
        *(v4 - 1) = v5 | 0x80;
        unint64_t v6 = v5 >> 7;
        ++v4;
        unint64_t v7 = v5 >> 14;
        v5 >>= 7;
      }
      while (v7);
      *(v4 - 1) = v6;
    }
    else
    {
      v2[1] = v5;
      uint64_t v4 = v2 + 2;
    }
  }
  else
  {
    unsigned char *v2 = v3;
    uint64_t v4 = v2 + 1;
  }
  *a2 = v4;
  return result;
}

int *sub_10006C028(int *result, unsigned char **a2)
{
  pthread_t v2 = *a2;
  unint64_t v3 = *result;
  if (v3 > 0x7F)
  {
    unsigned char *v2 = v3 | 0x80;
    unint64_t v5 = v3 >> 7;
    if (v3 >> 14)
    {
      uint64_t v4 = v2 + 2;
      do
      {
        *(v4 - 1) = v5 | 0x80;
        unint64_t v6 = v5 >> 7;
        ++v4;
        unint64_t v7 = v5 >> 14;
        v5 >>= 7;
      }
      while (v7);
      *(v4 - 1) = v6;
    }
    else
    {
      v2[1] = v5;
      uint64_t v4 = v2 + 2;
    }
  }
  else
  {
    unsigned char *v2 = v3;
    uint64_t v4 = v2 + 1;
  }
  *a2 = v4;
  return result;
}

uint64_t sub_10006C08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t result = sub_100066A30(a1, *(void *)(a2 + 8) + 24, (*(_DWORD *)a2 - 1), *(unsigned __int8 *)(a3 + 8), *(void *)a3);
    *(void *)a3 = result;
  }
  else
  {
    return sub_100065EC4(a1, a3);
  }
  return result;
}

uint64_t sub_10006C0F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    unint64_t v5 = *(unsigned int **)(a2 + 8);
    unsigned int v6 = *(_DWORD *)(a1 + *v5);
    unint64_t v7 = *(unsigned char **)a3;
    if (v6 > 0x7F)
    {
      *unint64_t v7 = v6 | 0x80;
      unsigned int v12 = v6 >> 7;
      if (v6 >> 14)
      {
        unint64_t v8 = v7 + 2;
        do
        {
          *(v8 - 1) = v12 | 0x80;
          unsigned int v14 = v12 >> 7;
          ++v8;
          unsigned int v15 = v12 >> 14;
          v12 >>= 7;
        }
        while (v15);
        *(v8 - 1) = v14;
      }
      else
      {
        v7[1] = v12;
        unint64_t v8 = v7 + 2;
      }
    }
    else
    {
      *unint64_t v7 = v6;
      unint64_t v8 = v7 + 1;
    }
    *(void *)a3 = v8;
    uint64_t result = sub_100066A30(a1, v5 + 6, (*(_DWORD *)a2 - 1), *(unsigned __int8 *)(a3 + 8), v8);
    *(void *)a3 = result;
  }
  else
  {
    unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
    uint64_t v10 = *(unsigned char **)a3;
    if (v9 > 0x7F)
    {
      unsigned char *v10 = v9 | 0x80;
      unsigned int v13 = v9 >> 7;
      if (v9 >> 14)
      {
        uint64_t v11 = v10 + 2;
        do
        {
          *(v11 - 1) = v13 | 0x80;
          unsigned int v17 = v13 >> 7;
          ++v11;
          unsigned int v18 = v13 >> 14;
          v13 >>= 7;
        }
        while (v18);
        *(v11 - 1) = v17;
      }
      else
      {
        v10[1] = v13;
        uint64_t v11 = v10 + 2;
      }
    }
    else
    {
      unsigned char *v10 = v9;
      uint64_t v11 = v10 + 1;
    }
    *(void *)a3 = v11;
    return sub_100065EC4(a1, a3);
  }
  return result;
}

unsigned char *sub_10006C244(int *a1, unsigned char *a2)
{
  unsigned int v2 = (2 * *a1) ^ (*a1 >> 31);
  if (v2 > 0x7F)
  {
    *a2 = v2 | 0x80;
    unsigned int v4 = v2 >> 7;
    if (v2 >> 14)
    {
      unint64_t v3 = a2 + 2;
      do
      {
        *(v3 - 1) = v4 | 0x80;
        unsigned int v5 = v4 >> 7;
        ++v3;
        unsigned int v6 = v4 >> 14;
        v4 >>= 7;
      }
      while (v6);
      *(v3 - 1) = v5;
    }
    else
    {
      a2[1] = v4;
      return a2 + 2;
    }
  }
  else
  {
    *a2 = v2;
    return a2 + 1;
  }
  return v3;
}

unsigned char *sub_10006C2AC(uint64_t *a1, unsigned char *a2)
{
  unint64_t v2 = (2 * *a1) ^ (*a1 >> 63);
  if (v2 > 0x7F)
  {
    *a2 = v2 | 0x80;
    unint64_t v4 = v2 >> 7;
    if (v2 >> 14)
    {
      unint64_t v3 = a2 + 2;
      do
      {
        *(v3 - 1) = v4 | 0x80;
        unint64_t v5 = v4 >> 7;
        ++v3;
        unint64_t v6 = v4 >> 14;
        v4 >>= 7;
      }
      while (v6);
      *(v3 - 1) = v5;
    }
    else
    {
      a2[1] = v4;
      return a2 + 2;
    }
  }
  else
  {
    *a2 = v2;
    return a2 + 1;
  }
  return v3;
}

uint64_t sub_10006C314(uint64_t a1, std::string::value_type *a2, uint64_t a3)
{
  unint64_t v4 = (std::string *)(a1 + 16);
  return sub_10006C6CC(a3, a2, &v4);
}

void sub_10006C348()
{
  qword_1000B6BB0 = 0;
  unk_1000B6BB8 = 0;
  qword_1000B6BA8 = (uint64_t)off_1000AE3F0;
  qword_1000B6BC0 = 0;
  unk_1000B6BC8 = 0;
}

uint64_t *sub_10006C378()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1000B6BD0, memory_order_acquire) != -1)
  {
    uint64_t v1 = &v2;
    unint64_t v2 = sub_10006C348;
    std::__call_once(&qword_1000B6BD0, &v1, (void (__cdecl *)(void *))sub_10006C85C);
  }
  return &qword_1000B6BA8;
}

uint64_t sub_10006C3E4(uint64_t a1)
{
  *(void *)a1 = off_1000AE3F0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10006C434(uint64_t a1)
{
  *(void *)a1 = off_1000AE3F0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  operator delete();
}

void *sub_10006C4A4@<X0>(void *a1@<X8>)
{
  return sub_10000A1B4(a1, "");
}

void sub_10006C4B4()
{
}

void *sub_10006C504(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    operator new();
  }
  if (*(unsigned char *)(a2 + 24)) {
  uint64_t result = (void *)sub_10004DFA4((void *)a2, 0x28uLL, (uint64_t)sub_10006C838);
  }
  *uint64_t result = off_1000AE3F0;
  result[1] = a2;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t sub_10006C5C8(uint64_t result)
{
  if (*(char *)(result + 39) < 0)
  {
    **(unsigned char **)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  else
  {
    *(unsigned char *)(result + 16) = 0;
    *(unsigned char *)(result + 39) = 0;
  }
  return result;
}

uint64_t sub_10006C5EC()
{
  return 1;
}

std::string *sub_10006C5F4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (std::string *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v3 = a2 + 16;
  uint64_t v4 = v5;
  std::string::size_type v6 = *(void *)(v3 + 8);
  if (*(char *)(v3 + 23) >= 0)
  {
    std::string::size_type v7 = *(unsigned __int8 *)(v3 + 23);
  }
  else
  {
    uint64_t v3 = v4;
    std::string::size_type v7 = v6;
  }
  return std::string::append(v2, (const std::string::value_type *)v3, v7);
}

uint64_t sub_10006C618(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    return *(void *)(a1 + 24);
  }
  else {
    return *(unsigned __int8 *)(a1 + 39);
  }
}

uint64_t sub_10006C630(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    return *(void *)(a1 + 24);
  }
  else {
    return *(unsigned __int8 *)(a1 + 39);
  }
}

char *sub_10006C648(uint64_t a1, char *__dst, uint64_t *a3)
{
  if (*(char *)(a1 + 39) < 0)
  {
    uint64_t v4 = *(char **)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 24);
  }
  else
  {
    uint64_t v4 = (char *)(a1 + 16);
    LODWORD(v5) = *(unsigned __int8 *)(a1 + 39);
  }
  if (*a3 - (uint64_t)__dst < (int)v5)
  {
    return sub_100051284(a3, v4, v5, (unint64_t)__dst);
  }
  else
  {
    uint64_t v6 = (int)v5;
    memcpy(__dst, v4, (int)v5);
    return &__dst[v6];
  }
}

uint64_t sub_10006C6CC(uint64_t a1, std::string::value_type *__s, std::string **a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(int *)(a1 + 28);
  if ((uint64_t)&__s[-v3] > v4) {
    return 0;
  }
  std::string::size_type v7 = __s;
  if ((int)v4 < 17)
  {
LABEL_9:
    uint64_t v5 = v3 + v4;
    std::string::size_type v12 = v3 + v4 - (void)v7;
    if (v3 + v4 < (unint64_t)v7)
    {
      sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 358);
      unsigned int v13 = sub_100051E74(v16, "CHECK failed: end >= ptr: ");
      sub_100051FB0((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v16);
    }
    std::string::append(*a3, v7, v12);
  }
  else
  {
    while (1)
    {
      int v9 = *(_DWORD *)(a1 + 8) - v7 + 16;
      if (v9 < 0)
      {
        sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 351);
        uint64_t v10 = sub_100051E74(v16, "CHECK failed: (chunk_size) >= (0): ");
        sub_100051FB0((uint64_t)&v15, (const char **)&v10->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v16);
      }
      std::string::append(*a3, v7, v9);
      uint64_t v11 = sub_10006FF68(a1);
      if (!v11) {
        return *(void *)a1;
      }
      std::string::size_type v7 = (const std::string::value_type *)(v11 + 1);
      uint64_t v4 = *(int *)(a1 + 28);
      if ((int)v4 < 17)
      {
        uint64_t v3 = *(void *)(a1 + 8);
        goto LABEL_9;
      }
    }
  }
  return v5;
}

void sub_10006C818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006C838(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t sub_10006C85C(uint64_t (***a1)(void))
{
  return (**a1)();
}

unint64_t sub_10006C868(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, void *a5, unint64_t *a6)
{
  unint64_t v6 = a2;
  unint64_t v7 = result;
  if (a3 | a4)
  {
    BOOL v16 = result < a3;
    if (a2 != a4) {
      BOOL v16 = a2 < a4;
    }
    if (v16)
    {
      *a5 = 0;
      a5[1] = 0;
    }
    else
    {
      int v17 = sub_10006CA2C(result, a2);
      uint64_t result = sub_10006CA2C(a3, a4);
      unint64_t v18 = (v17 - result);
      if (v17 - (int)result < 0)
      {
        uint64_t v20 = 0;
        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        int v21 = v18 + 1;
        char v22 = 64 - (v17 - result);
        do
        {
          *((void *)&v23 + 1) = v19;
          *(void *)&long long v23 = v20;
          uint64_t v19 = v23 >> 63;
          v20 *= 2;
          unint64_t v24 = a3 << v18;
          if (v18 <= 0x7F) {
            unint64_t v25 = a3 << v18;
          }
          else {
            unint64_t v25 = 0;
          }
          unint64_t v26 = (a3 >> v22) | (a4 << v18);
          if (!v18)
          {
            unint64_t v26 = a4;
            unint64_t v24 = a3;
          }
          if (v18 > 0x3F) {
            unint64_t v24 = 0;
          }
          else {
            unint64_t v25 = v26;
          }
          BOOL v27 = v7 >= v24;
          BOOL v28 = v6 >= v25;
          unint64_t v29 = v6 - v25;
          int v30 = v28;
          if (v29) {
            BOOL v27 = v30;
          }
          BOOL v28 = v7 >= v24;
          unint64_t v31 = v7 - v24;
          uint64_t v32 = !v28;
          unint64_t v33 = v29 - v32;
          if (v27)
          {
            v20 |= 1uLL;
            unint64_t v7 = v31;
            unint64_t v6 = v33;
          }
          --v18;
          --v21;
          ++v22;
        }
        while (v21 > 0);
      }
      *a5 = v20;
      a5[1] = v19;
    }
    *a6 = v7;
    a6[1] = v6;
  }
  else
  {
    sub_100051E5C((uint64_t)v35, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/int128.cc", 86);
    unint64_t v8 = sub_100051E74(v35, "Division or mod by zero: dividend.hi=");
    int v9 = sub_100052738(v8, v6);
    uint64_t v10 = sub_100051E74(v9, ", lo=");
    uint64_t v11 = sub_100052738(v10, v7);
    sub_100051FB0((uint64_t)&v34, (const char **)&v11->__r_.__value_.__l.__data_);
    return sub_100051FB8((uint64_t)v35);
  }
  return result;
}

void sub_10006CA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10006CA2C(unint64_t a1, unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = HIDWORD(a2);
    if (!HIDWORD(a2)) {
      LODWORD(v2) = a2;
    }
    if (WORD1(v2)) {
      int v3 = (32 * (HIDWORD(a2) != 0)) | 0x10;
    }
    else {
      int v3 = 32 * (HIDWORD(a2) != 0);
    }
    if (WORD1(v2)) {
      LODWORD(v2) = WORD1(v2);
    }
    if (v2 > 0xFF)
    {
      v3 |= 8u;
      LODWORD(v2) = v2 >> 8;
    }
    if (v2 > 0xF)
    {
      v3 |= 4u;
      LOBYTE(v2) = v2 >> 4;
    }
    return v3 + ((0x3333333322221100uLL >> (4 * v2)) & 3) + 64;
  }
  else
  {
    if (!a1)
    {
      sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/int128.cc", 63);
      unint64_t v6 = sub_100051E74(v10, "CHECK failed: (0) != (n): ");
      sub_100051FB0((uint64_t)&v9, (const char **)&v6->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v10);
    }
    unint64_t v7 = HIDWORD(a1);
    if (!HIDWORD(a1)) {
      LODWORD(v7) = a1;
    }
    if (WORD1(v7)) {
      int v8 = (32 * (HIDWORD(a1) != 0)) | 0x10;
    }
    else {
      int v8 = 32 * (HIDWORD(a1) != 0);
    }
    if (WORD1(v7)) {
      LODWORD(v7) = WORD1(v7);
    }
    if (v7 > 0xFF)
    {
      v8 |= 8u;
      LODWORD(v7) = v7 >> 8;
    }
    if (v7 > 0xF)
    {
      v8 |= 4u;
      LOBYTE(v7) = v7 >> 4;
    }
    return ((0x3333333322221100uLL >> (4 * v7)) & 3) + v8;
  }
}

void sub_10006CB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_10006CB98(unint64_t *a1, unint64_t *a2)
{
  long long v5 = 0uLL;
  sub_10006C868(*a1, a1[1], *a2, a2[1], &v5, &v4);
  *(_OWORD *)a1 = v5;
  return a1;
}

unint64_t *sub_10006CBEC(unint64_t *a1, unint64_t *a2)
{
  long long v4 = 0uLL;
  sub_10006C868(*a1, a1[1], *a2, a2[1], &v5, (unint64_t *)&v4);
  *(_OWORD *)a1 = v4;
  return a1;
}

void *sub_10006CC40(uint64_t *a1, long long *a2)
{
  int v4 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  int v5 = v4 & 0x4A;
  if (v5 == 8)
  {
    unint64_t v6 = 0x1000000000000000;
    uint64_t v7 = 15;
  }
  else
  {
    if (v5 == 64) {
      unint64_t v6 = 0x8000000000000000;
    }
    else {
      unint64_t v6 = 0x8AC7230489E80000;
    }
    if (v5 == 64) {
      uint64_t v7 = 21;
    }
    else {
      uint64_t v7 = 19;
    }
  }
  sub_10001752C((uint64_t)v29);
  *(_DWORD *)((char *)&v29[1] + *(void *)(v29[0] - 24)) = *(_DWORD *)((unsigned char *)&v29[1] + *(void *)(v29[0] - 24)) & 0xFFFFBDB5 | v4 & 0x424A;
  long long v28 = *a2;
  v27[0] = 0;
  v27[1] = 0;
  sub_10006C868(v28, *((unint64_t *)&v28 + 1), v6, 0, &v28, v27);
  v26[0] = 0;
  v26[1] = 0;
  sub_10006C868(v28, *((unint64_t *)&v28 + 1), v6, 0, &v28, v26);
  if ((void)v28)
  {
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v29[1] + *(void *)(v29[0] - 24)) &= ~0x200u;
    v25.__r_.__value_.__s.__data_[0] = 48;
    int v8 = sub_10006D144(v29, (char *)&v25);
    *(void *)((char *)v8 + *(void *)(*v8 - 24) + 24) = v7;
    std::ostream::operator<<();
    char v9 = (char *)v29 + *(void *)(v29[0] - 24);
  }
  else
  {
    if (!v26[0]) {
      goto LABEL_14;
    }
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v29[1] + *(void *)(v29[0] - 24)) &= ~0x200u;
    v25.__r_.__value_.__s.__data_[0] = 48;
    uint64_t v10 = sub_10006D144(v29, (char *)&v25);
    char v9 = (char *)v10 + *(void *)(*v10 - 24);
  }
  *((void *)v9 + 3) = v7;
LABEL_14:
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v11 = *a1;
  std::string::size_type v12 = (char *)a1 + *(void *)(*a1 - 24);
  unint64_t v13 = *((void *)v12 + 3);
  *((void *)v12 + 3) = 0;
  std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v25.__r_.__value_.__l.__size_;
  }
  std::string::size_type v15 = v13 - size;
  if (v13 > size)
  {
    int v16 = v4 & 0xB0;
    int v17 = (const std::ios_base *)((char *)a1 + *(void *)(v11 - 24));
    std::ios_base::fmtflags fmtflags = v17[1].__fmtflags_;
    if (v16 == 32)
    {
      if (fmtflags == -1)
      {
        std::ios_base::getloc(v17);
        uint64_t v19 = std::locale::use_facet(&v31, &std::ctype<char>::id);
        std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 32);
        std::locale::~locale(&v31);
        v17[1].__fmtflags_ = fmtflags;
      }
      std::string::append(&v25, v15, fmtflags);
    }
    else
    {
      if (fmtflags == -1)
      {
        std::ios_base::getloc(v17);
        uint64_t v20 = std::locale::use_facet(&v31, &std::ctype<char>::id);
        std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 32);
        std::locale::~locale(&v31);
        v17[1].__fmtflags_ = fmtflags;
      }
      std::string::insert(&v25, 0, v15, fmtflags);
    }
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v21 = &v25;
  }
  else {
    int v21 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = v25.__r_.__value_.__l.__size_;
  }
  long long v23 = sub_100018688(a1, (uint64_t)v21, v22);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v30 < 0) {
    operator delete((void *)v29[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return v23;
}

void sub_10006D0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::locale::~locale((std::locale *)(v22 - 72));
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10002E61C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void *sub_10006D144(void *a1, char *a2)
{
  int v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    int v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_10006D1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_10006D20C(char *__src, int64_t __n, uint64_t a3, char a4)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v13 = 0x7FFFFFFF00000000;
  int v14 = dword_1000B5AE8;
  unsigned int v15 = 0x80000000;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v6 = sub_10006507C((uint64_t)v9, __src, __n);
  if ((*(uint64_t (**)(uint64_t, char *, unsigned char *))(*(void *)a3 + 88))(a3, v6, v9)) {
    BOOL v7 = v13 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (a4 & 2) != 0 || ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3)) {
      return 1;
    }
    sub_10006DA68(a3);
  }
  return 0;
}

uint64_t sub_10006D328(char *__src, int64_t __n, uint64_t a3, char a4)
{
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v12 = 0;
  uint64_t v13 = 1;
  uint64_t v14 = 0x7FFFFFFF00000000;
  int v15 = dword_1000B5AE8;
  unsigned int v16 = 0x80000000;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v6 = sub_10006507C((uint64_t)v9, __src, __n);
  if ((*(uint64_t (**)(uint64_t, char *, unsigned char *))(*(void *)a3 + 88))(a3, v6, v9)) {
    BOOL v7 = v14 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (a4 & 2) != 0 || ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3)) {
      return 1;
    }
    sub_10006DA68(a3);
  }
  return 0;
}

uint64_t sub_10006D44C(uint64_t a1, uint64_t a2, char a3)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v12 = 0x7FFFFFFF00000000;
  int v13 = dword_1000B5AE8;
  unsigned int v14 = 0x80000000;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v5 = sub_100070B4C((uint64_t)v8, a1);
  if ((*(uint64_t (**)(uint64_t, void *, unsigned char *))(*(void *)a2 + 88))(a2, v5, v8)) {
    BOOL v6 = v12 == 1;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    if (a3 & 2) != 0 || ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2)) {
      return 1;
    }
    sub_10006DA68(a2);
  }
  return 0;
}

uint64_t sub_10006D564(uint64_t a1, uint64_t a2, char a3)
{
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v11 = 0;
  uint64_t v12 = 1;
  uint64_t v13 = 0x7FFFFFFF00000000;
  int v14 = dword_1000B5AE8;
  unsigned int v15 = 0x80000000;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v5 = sub_100070B4C((uint64_t)v8, a1);
  if ((*(uint64_t (**)(uint64_t, void *, unsigned char *))(*(void *)a2 + 88))(a2, v5, v8)) {
    BOOL v6 = v13 == 1;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    if (a3 & 2) != 0 || ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2)) {
      return 1;
    }
    sub_10006DA68(a2);
  }
  return 0;
}

unint64_t sub_10006D684(uint64_t a1, int a2, uint64_t a3, char a4)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v12 = 0x7FFFFFFF00000000;
  int v13 = dword_1000B5AE8;
  unsigned int v14 = 0x80000000;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  BOOL v6 = sub_10006FEC8((uint64_t)v8, a1, a2);
  unint64_t result = (*(uint64_t (**)(uint64_t, void *, unsigned char *))(*(void *)a3 + 88))(a3, v6, v8);
  if (result)
  {
    sub_10006D7A8((uint64_t)v8, result);
    if (!v12)
    {
      if (a4 & 2) != 0 || ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3)) {
        return 1;
      }
      sub_10006DA68(a3);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10006D7A8(uint64_t result, unint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = result;
  if (*(void *)(result + 8) + 16 < a2)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 116);
    int v4 = sub_100051E74(v7, "CHECK failed: ptr <= buffer_end_ + kSlopBytes: ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    unint64_t result = sub_100051FB8((uint64_t)v7);
  }
  if (*(void *)(v3 + 16) == v3 + 40) {
    uint64_t v5 = (*(_DWORD *)(v3 + 8) - v2 + 16);
  }
  else {
    uint64_t v5 = (*(_DWORD *)(v3 + 24) + *(_DWORD *)(v3 + 8) - v2);
  }
  if ((int)v5 >= 1)
  {
    unint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 32) + 24))(*(void *)(v3 + 32), v5);
    *(_DWORD *)(v3 + 84) += v5;
  }
  return result;
}

void sub_10006D890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10006D8A8(uint64_t a1, int a2, uint64_t a3, char a4)
{
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v11 = 0;
  uint64_t v12 = 1;
  uint64_t v13 = 0x7FFFFFFF00000000;
  int v14 = dword_1000B5AE8;
  unsigned int v15 = 0x80000000;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v6 = sub_10006FEC8((uint64_t)v8, a1, a2);
  unint64_t result = (*(uint64_t (**)(uint64_t, void *, unsigned char *))(*(void *)a3 + 88))(a3, v6, v8);
  if (result)
  {
    sub_10006D7A8((uint64_t)v8, result);
    if (!v13)
    {
      if (a4 & 2) != 0 || ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3)) {
        return 1;
      }
      sub_10006DA68(a3);
    }
    return 0;
  }
  return result;
}

void *sub_10006D9D4@<X0>(void *a1@<X8>)
{
  return sub_10000A1B4(a1, "(cannot determine missing fields for lite message)");
}

void sub_10006D9E4(unint64_t a1@<X0>, std::string *a2@<X8>)
{
  v4[0] = "MessageLite at 0x";
  v4[1] = 17;
  sub_100084790(v3, a1, 1);
  sub_1000847EC((uint64_t)v4, (uint64_t)v3, a2);
}

uint64_t sub_10006DA68(uint64_t a1)
{
  sub_100051E5C((uint64_t)v6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 133);
  sub_10006DB1C("parse", a1, &__p);
  int v2 = sub_100051EA0(v6, (const std::string::value_type *)&__p);
  sub_100051FB0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return sub_100051FB8((uint64_t)v6);
}

void sub_10006DAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100051FB8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_10006DB1C(const std::string::value_type *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a3, "Can't ");
  std::string::append(a3, a1);
  std::string::append(a3, " message of type \"");
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(&__p, a2);
  if ((v12 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v7 = v12;
  }
  else {
    std::string::size_type v7 = v11;
  }
  std::string::append(a3, p_p, v7);
  if ((char)v12 < 0) {
    operator delete(__p);
  }
  std::string::append(a3, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 56))(&__p, a2);
  if ((v12 & 0x80u) == 0) {
    std::locale v8 = (const std::string::value_type *)&__p;
  }
  else {
    std::locale v8 = (const std::string::value_type *)__p;
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = v11;
  }
  std::string::append(a3, v8, v9);
  if ((char)v12 < 0) {
    operator delete(__p);
  }
}

void sub_10006DC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006DC98(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (a2) {
    sub_10005A444(a2, v3);
  }
  return v3;
}

uint64_t sub_10006DCF4(uint64_t a1, uint64_t a2, char a3)
{
  v14[0] = off_1000AE518;
  v14[1] = a2;
  int v6 = *(_DWORD *)(a2 + 52);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 37);
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  uint64_t v20 = v7;
  uint64_t v21 = 0x7FFFFFFF00000000;
  int v22 = v6;
  unsigned int v23 = 0x80000000;
  long long v24 = 0uLL;
  std::locale v8 = sub_100070B4C((uint64_t)v15, (uint64_t)v14);
  unsigned int v23 = 0;
  long long v24 = *(_OWORD *)(a2 + 64);
  unint64_t v9 = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)a1 + 88))(a1, v8, v15);
  if (v9)
  {
    sub_10006D7A8((uint64_t)v15, v9);
    if (v21 == 1)
    {
      *(unsigned char *)(a2 + 36) = 1;
      if ((a3 & 2) != 0) {
        return 1;
      }
    }
    else
    {
      if (!v21)
      {
        sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 240);
        long long v10 = sub_100051E74(v13, "CHECK failed: ctx.LastTag() != 1: ");
        sub_100051FB0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)v13);
      }
      if (v15[0] < v9 && (!v15[2] || (uint64_t)(v9 - v15[1]) > v16)) {
        return 0;
      }
      *(_DWORD *)(a2 + 32) = v21 + 1;
      if ((a3 & 2) != 0) {
        return 1;
      }
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1)) {
      return 1;
    }
    sub_10006DA68(a1);
  }
  return 0;
}

void sub_10006DEE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006DF0C(uint64_t a1, uint64_t a2)
{
  return sub_10006DCF4(a1, a2, 2);
}

uint64_t sub_10006DF14(uint64_t a1, uint64_t a2)
{
  return sub_10006DCF4(a1, a2, 0);
}

uint64_t sub_10006DF1C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return sub_10006DCF4(a1, a2, 1);
}

uint64_t sub_10006DF80(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return sub_10006DCF4(a1, a2, 3);
}

uint64_t sub_10006DFE4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return sub_10006D44C(a2, a1, 1);
}

uint64_t sub_10006E048(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return sub_10006D44C(a2, a1, 3);
}

uint64_t sub_10006E0AC(uint64_t a1, uint64_t a2)
{
  sub_10008CC9C(&v6, a2, 0xFFFFFFFFLL);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  unsigned int v3 = sub_10006D44C((uint64_t)&v6, a1, 1);
  if (v7[4]) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  int v6 = off_1000AEA78;
  sub_10008ABC4(&v8);
  sub_10008CC98(v7);
  return v4;
}

void sub_10006E164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10006E178((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_10006E178(void *a1)
{
  *a1 = off_1000AEA78;
  int v2 = a1 + 1;
  sub_10008ABC4(a1 + 4);
  sub_10008CC98(v2);
  return a1;
}

uint64_t sub_10006E1CC(uint64_t a1, uint64_t a2)
{
  sub_10008CC9C(&v6, a2, 0xFFFFFFFFLL);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  unsigned int v3 = sub_10006D44C((uint64_t)&v6, a1, 3);
  if (v7[4]) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  int v6 = off_1000AEA78;
  sub_10008ABC4(&v8);
  sub_10008CC98(v7);
  return v4;
}

void sub_10006E284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10006E178((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006E298(uint64_t a1, void *a2)
{
  sub_10008D474(&v6, (uint64_t)a2, -1);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (sub_10006D44C((uint64_t)&v6, a1, 1)) {
    uint64_t v4 = (*((unsigned __int8 *)a2 + *(void *)(*a2 - 24) + 32) >> 1) & 1;
  }
  else {
    uint64_t v4 = 0;
  }
  int v6 = off_1000AEB58;
  sub_10008ABC4(&v8);
  nullsub_16(&v7);
  return v4;
}

void sub_10006E368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10006E37C(void *a1)
{
  *a1 = off_1000AEB58;
  int v2 = a1 + 1;
  sub_10008ABC4(a1 + 3);
  nullsub_16(v2);
  return a1;
}

uint64_t sub_10006E3D0(uint64_t a1, void *a2)
{
  sub_10008D474(&v6, (uint64_t)a2, -1);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (sub_10006D44C((uint64_t)&v6, a1, 3)) {
    uint64_t v4 = (*((unsigned __int8 *)a2 + *(void *)(*a2 - 24) + 32) >> 1) & 1;
  }
  else {
    uint64_t v4 = 0;
  }
  int v6 = off_1000AEB58;
  sub_10008ABC4(&v8);
  nullsub_16(&v7);
  return v4;
}

void sub_10006E4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_10006E4B4(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10006D684(a2, a3, a1, 2);
}

unint64_t sub_10006E4D0(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10006D684(a2, a3, a1, 0);
}

unint64_t sub_10006E4EC(uint64_t a1, uint64_t a2, int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return sub_10006D684(a2, a3, a1, 1);
}

unint64_t sub_10006E560(uint64_t a1, uint64_t a2, int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return sub_10006D684(a2, a3, a1, 3);
}

uint64_t sub_10006E5D8(uint64_t a1, uint64_t *a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  sub_100048934(v5, a2);
  return sub_10006D20C(v5[0], (int64_t)v5[1], a1, 1);
}

uint64_t sub_10006E648(uint64_t a1, uint64_t *a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  sub_100048934(v5, a2);
  return sub_10006D20C(v5[0], (int64_t)v5[1], a1, 3);
}

uint64_t sub_10006E6B4(uint64_t a1, char *a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    sub_10006FF3C();
  }
  int64_t v5 = a3;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return sub_10006D20C(a2, v5, a1, 1);
}

uint64_t sub_10006E730(uint64_t a1, char *a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    sub_10006FF3C();
  }
  int64_t v5 = a3;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return sub_10006D20C(a2, v5, a1, 3);
}

uint64_t sub_10006E7AC(uint64_t a1, uint64_t *a2)
{
  sub_100048934(v4, a2);
  return sub_10006D20C(v4[0], (int64_t)v4[1], a1, 0);
}

uint64_t sub_10006E7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + (*(int (**)(uint64_t))(*(void *)a1 + 80))(a1);
  v10[0] = v4;
  v10[1] = 0;
  v10[6] = 0;
  __int16 v11 = 0;
  char v12 = byte_1000B6B80 & 1;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, v10);
  if (v4 != v5)
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 360);
    int v6 = sub_100051E74(v9, "CHECK failed: target + size == res: ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v9);
  }
  return v5;
}

void sub_10006E910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006E930(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 372);
    uint64_t v4 = sub_100051E74(v9, "CHECK failed: IsInitialized(): ");
    sub_10006DB1C("serialize", a1, &__p);
    uint64_t v5 = sub_100051EA0(v4, (const std::string::value_type *)&__p);
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100051FB8((uint64_t)v9);
  }
  return sub_10006EA3C(a1, a2);
}

void sub_10006EA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100051FB8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10006EA3C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  if (v4 >> 31)
  {
    sub_100051E5C((uint64_t)v23, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 380);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    uint64_t v5 = sub_100051EA0(v23, (const std::string::value_type *)__p);
    int v6 = sub_100051E74(v5, " exceeded maximum protobuf size of 2GB: ");
    char v7 = sub_100052538(v6, v4);
    sub_100051FB0((uint64_t)&v20, (const char **)&v7->__r_.__value_.__l.__data_);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    sub_100051FB8((uint64_t)v23);
    return 0;
  }
  else
  {
    int v9 = sub_100050A28(a2, *(void *)(a2 + 64));
    uint64_t v10 = *(void *)(a2 + 72);
    *(void *)(a2 + 64) = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 96))(a1, *(void *)(a2 + 64), a2);
    int v11 = sub_10006EDAC(a2);
    if ((v11 & 1) == 0
      && v4 != v10 + sub_100050A28(a2, *(void *)(a2 + 64)) - (v9 + *(_DWORD *)(a2 + 72)))
    {
      if (v4 != (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1))
      {
        sub_100051E5C((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 84);
        char v12 = sub_100051E74(v23, "CHECK failed: (byte_size_before_serialization) == (byte_size_after_serialization): ");
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
        uint64_t v13 = sub_100051EA0(v12, (const std::string::value_type *)__p);
        int v14 = sub_100051E74(v13, " was modified concurrently during serialization.");
        sub_100051FB0((uint64_t)&v20, (const char **)&v14->__r_.__value_.__l.__data_);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        sub_100051FB8((uint64_t)v23);
      }
      sub_100051E5C((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 87);
      uint64_t v15 = sub_100051E74(v23, "CHECK failed: (bytes_produced_by_serialization) == (byte_size_before_serialization): ");
      int v16 = sub_100051E74(v15, "Byte size calculation and serialization were inconsistent.  This may indicate a bug in protocol buffers or it may be caused by concurrent modification of ");
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
      long long v17 = sub_100051EA0(v16, (const std::string::value_type *)__p);
      long long v18 = sub_100051E74(v17, ".");
      sub_100051FB0((uint64_t)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      sub_100051FB8((uint64_t)v23);
      sub_100051E5C((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 92);
      uint64_t v19 = sub_100051E74(v23, "This shouldn't be called if all the sizes are equal.");
      sub_100051FB0((uint64_t)__p, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v23);
    }
    return v11 ^ 1u;
  }
}

void sub_10006ED54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100051FB8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10006EDAC(uint64_t a1)
{
  uint64_t v2 = sub_100050E40(a1, *(char **)(a1 + 64));
  *(void *)(a1 + 64) = v2;
  if (!v2)
  {
    sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 1062);
    unsigned int v3 = sub_100051E74(v6, "CHECK failed: cur_: ");
    sub_100051FB0((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v6);
  }
  return *(unsigned __int8 *)(a1 + 56);
}

void sub_10006EE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10006EE3C(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 402);
    unint64_t v4 = sub_100051E74(v9, "CHECK failed: IsInitialized(): ");
    sub_10006DB1C("serialize", a1, &__p);
    char v5 = sub_100051EA0(v4, (const std::string::value_type *)&__p);
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100051FB8((uint64_t)v9);
  }
  return sub_10006EF48(a1, a2);
}

void sub_10006EF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100051FB8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_10006EF48(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  if (v4 >> 31)
  {
    uint64_t v5 = v4;
    sub_100051E5C((uint64_t)v14, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 410);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    int v6 = sub_100051EA0(v14, (const std::string::value_type *)__p);
    char v7 = sub_100051E74(v6, " exceeded maximum protobuf size of 2GB: ");
    char v8 = sub_100052538(v7, v5);
    sub_100051FB0((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    sub_100051FB8((uint64_t)v14);
    return 0;
  }
  else
  {
    v14[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v14[0].__r_.__value_.__r.__words[2];
    v14[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v14[0].__r_.__value_.__r.__words[2];
    uint64_t v15 = a2;
    __int16 v16 = 0;
    char v17 = byte_1000B6B80 & 1;
    uint64_t v10 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    sub_100050DD8((uint64_t)v14, v10);
    return (_BYTE)v16 == 0;
  }
}

void sub_10006F0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100051FB8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F110(uint64_t a1, int a2)
{
  sub_10008D040(v5, a2);
  if (sub_10006EE3C(a1, (uint64_t)v5)) {
    uint64_t v3 = sub_10008B218(v5);
  }
  else {
    uint64_t v3 = 0;
  }
  sub_10008D238(v5);
  return v3;
}

void sub_10006F174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10008D238(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F188(uint64_t a1, int a2)
{
  sub_10008D040(v5, a2);
  if (sub_10006EF48(a1, (uint64_t)v5)) {
    uint64_t v3 = sub_10008B218(v5);
  }
  else {
    uint64_t v3 = 0;
  }
  sub_10008D238(v5);
  return v3;
}

void sub_10006F1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10008D238(va);
  _Unwind_Resume(a1);
}

BOOL sub_10006F200(uint64_t a1, void *a2)
{
  sub_10008D5A8(v5, (uint64_t)a2, -1);
  LODWORD(a1) = sub_10006EE3C(a1, (uint64_t)v5);
  sub_10008D690(v5);
  return a1 && *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) == 0;
}

void sub_10006F280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10008D690((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_10006F294(uint64_t a1, uint64_t a2)
{
  sub_10008D5A8(v5, a2, -1);
  BOOL v3 = sub_10006EF48(a1, (uint64_t)v5);
  sub_10008D690(v5);
  return v3;
}

void sub_10006F2E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10008D690((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_10006F2F8(uint64_t a1, std::string *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 449);
    unint64_t v4 = sub_100051E74(v9, "CHECK failed: IsInitialized(): ");
    sub_10006DB1C("serialize", a1, &__p);
    uint64_t v5 = sub_100051EA0(v4, (const std::string::value_type *)&__p);
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100051FB8((uint64_t)v9);
  }
  return sub_10006F404(a1, a2);
}

void sub_10006F3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100051FB8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_10006F404(uint64_t a1, std::string *a2)
{
  uint64_t v2 = a2;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  uint64_t v6 = v5;
  unint64_t v7 = v5 >> 31;
  if (v5 >> 31)
  {
    sub_100051E5C((uint64_t)v16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 457);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    uint64_t v10 = sub_100051EA0(v16, (const std::string::value_type *)__p);
    char v11 = sub_100051E74(v10, " exceeded maximum protobuf size of 2GB: ");
    char v12 = sub_100052538(v11, v6);
    sub_100051FB0((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    int v9 = v16;
    goto LABEL_12;
  }
  std::string::resize(v2, v5 + size, 0);
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
  }
  *(_OWORD *)&v16[0].__r_.__value_.__l.__data_ = (unint64_t)v2 + size + v6;
  uint64_t v17 = 0;
  __int16 v18 = 0;
  char v19 = byte_1000B6B80 & 1;
  if (v16[0].__r_.__value_.__r.__words[0] != (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1))
  {
    sub_100051E5C((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 360);
    char v8 = sub_100051E74(__p, "CHECK failed: target + size == res: ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    int v9 = __p;
LABEL_12:
    sub_100051FB8((uint64_t)v9);
  }
  return v7 == 0;
}

void sub_10006F5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

BOOL sub_10006F640(uint64_t a1, std::string *a2)
{
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    *a2->__r_.__value_.__l.__data_ = 0;
    a2->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
  }
  return sub_10006F2F8(a1, a2);
}

BOOL sub_10006F664(uint64_t a1, std::string *a2)
{
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    *a2->__r_.__value_.__l.__data_ = 0;
    a2->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
  }
  return sub_10006F404(a1, a2);
}

uint64_t sub_10006F688(uint64_t a1, uint64_t a2, int a3)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 480);
    uint64_t v6 = sub_100051E74(v11, "CHECK failed: IsInitialized(): ");
    sub_10006DB1C("serialize", a1, &__p);
    unint64_t v7 = sub_100051EA0(v6, (const std::string::value_type *)&__p);
    sub_100051FB0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100051FB8((uint64_t)v11);
  }
  return sub_10006F79C(a1, a2, a3);
}

void sub_10006F768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100051FB8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F79C(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  uint64_t v7 = v6;
  if (v6 >> 31)
  {
    sub_100051E5C((uint64_t)v15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 487);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    char v8 = sub_100051EA0(v15, (const std::string::value_type *)__p);
    char v9 = sub_100051E74(v8, " exceeded maximum protobuf size of 2GB: ");
    uint64_t v10 = sub_100052538(v9, v7);
    sub_100051FB0((uint64_t)&v13, (const char **)&v10->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    sub_100051FB8((uint64_t)v15);
    return 0;
  }
  if (v6 > a3) {
    return 0;
  }
  *(_OWORD *)&v15[0].__r_.__value_.__l.__data_ = a2 + v6;
  uint64_t v16 = 0;
  __int16 v17 = 0;
  char v18 = byte_1000B6B80 & 1;
  if (a2 + v6 != (*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(void *)a1 + 96))(a1, a2, v15))
  {
    sub_100051E5C((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 360);
    char v12 = sub_100051E74(__p, "CHECK failed: target + size == res: ");
    sub_100051FB0((uint64_t)&v13, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)__p);
  }
  return 1;
}

void sub_10006F968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

BOOL sub_10006F9B0@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  BOOL result = sub_10006F2F8(a1, (std::string *)a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_10006FA04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10006FA20@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  BOOL result = sub_10006F404(a1, (std::string *)a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_10006FA74(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006FA90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t sub_10006FAB4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, a1);
}

std::string *sub_10006FAE4(std::string *__str, std::string *this)
{
  return std::string::operator=(this, __str);
}

void sub_10006FAF4(uint64_t a1)
{
}

void sub_10006FB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006FC44();
  std::mutex::lock((std::mutex *)(v4 + 24));
  unint64_t v5 = *(void **)(v4 + 8);
  unint64_t v6 = *(void *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = ((uint64_t)v5 - *(void *)v4) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_100004204();
    }
    uint64_t v10 = v6 - *(void *)v4;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      char v12 = (char *)sub_100019218(v4 + 16, v11);
    }
    else {
      char v12 = 0;
    }
    char v13 = &v12[16 * v8];
    char v14 = &v12[16 * v11];
    *(void *)char v13 = a1;
    *((void *)v13 + 1) = a2;
    uint64_t v7 = v13 + 16;
    uint64_t v16 = *(char **)v4;
    uint64_t v15 = *(char **)(v4 + 8);
    if (v15 != *(char **)v4)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      uint64_t v15 = *(char **)v4;
    }
    *(void *)uint64_t v4 = v13;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    void *v5 = a1;
    v5[1] = a2;
    uint64_t v7 = v5 + 2;
  }
  *(void *)(v4 + 8) = v7;
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_10006FC2C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006FC44()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000B5B40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000B5B40))
  {
    operator new();
  }
  return qword_1000B5B38;
}

void sub_10006FCD4(_Unwind_Exception *a1)
{
}

void sub_10006FCEC()
{
  if ((byte_1000B6778 & 1) == 0)
  {
    uint64_t v0 = sub_10006FC44();
    if (v0)
    {
      sub_10006FE20(v0);
      operator delete();
    }
    byte_1000B6778 = 1;
  }
}

uint64_t sub_10006FD3C()
{
  return 0;
}

void sub_10006FD44()
{
}

uint64_t sub_10006FD58(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v5 = sub_10004F7DC(*(void *)(a1 + 8), a2, a3);
  if (v5)
  {
    uint64_t v6 = *a3;
    if ((v6 & 0x80000000) == 0)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      int v8 = *(_DWORD *)(v7 + 8) - *(void *)v7;
      if ((int)v6 <= v8) {
        *(void *)v7 += v6;
      }
      else {
        sub_10004F6C0(v7, v6, v8);
      }
    }
  }
  return v5;
}

uint64_t sub_10006FDC8(uint64_t result, int a2)
{
  **(void **)(result + 8) += -a2;
  return result;
}

uint64_t sub_10006FDE0(uint64_t a1, int a2)
{
  if (a2 < 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(v2 + 8) - *(void *)v2;
  if (v3 < a2) {
    return sub_10004F6C0(v2, a2, v3);
  }
  *(void *)v2 += a2;
  return 1;
}

uint64_t sub_10006FE18()
{
  return 0;
}

uint64_t sub_10006FE20(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  int v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3 - 2;
  if (*(void **)a1 != v3 && v4 > v2)
  {
    do
    {
      uint64_t v6 = (void (*)(void))*v2;
      void *v2 = *v4;
      *uint64_t v4 = v6;
      uint64_t v7 = v2[1];
      v2[1] = v4[1];
      v4[1] = v7;
      v2 += 2;
      v4 -= 2;
    }
    while (v2 < v4);
    uint64_t v2 = *(void **)a1;
    int v3 = *(void **)(a1 + 8);
  }
  while (v2 != v3)
  {
    ((void (*)(void))*v2)(v2[1]);
    v2 += 2;
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  int v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void *sub_10006FEC8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == -1)
  {
    return sub_100070B4C(a1, a2);
  }
  else
  {
    *(_DWORD *)(a1 + 84) = a3;
    BOOL result = sub_100070B4C(a1, a2);
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = result - v6 + a3;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)a1 = v6 + (v7 & (v7 >> 31));
  }
  return result;
}

void sub_10006FF3C()
{
  __assert_rtn("StringPiece", "stringpiece.h", 229, "len >= 0");
}

_OWORD *sub_10006FF68(uint64_t a1)
{
  if (*(int *)(a1 + 28) <= 16)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 158);
    uint64_t v2 = sub_100051E74(v7, "CHECK failed: limit_ > kSlopBytes: ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v7);
  }
  BOOL result = sub_100070030(a1, 0, -1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (result)
  {
    int v5 = *(_DWORD *)(a1 + 28) + result - v4;
    *(_DWORD *)(a1 + 28) = v5;
    v4 += v5 & (v5 >> 31);
  }
  else
  {
    *(_DWORD *)(a1 + 8sub_10002F6CC(&a9, 0) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

void sub_100070018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_100070030(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_OWORD **)(a1 + 16);
  if (!v3) {
    return v3;
  }
  uint64_t v5 = a1 + 40;
  if (v3 != (_OWORD *)(a1 + 40))
  {
    int v6 = *(_DWORD *)(a1 + 24);
    if (v6 <= 16)
    {
      sub_100051E5C((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 105);
      int v7 = sub_100051E74(v33, "CHECK failed: size_ > kSlopBytes: ");
      sub_100051FB0((uint64_t)&__src, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v33);
      int v3 = *(_OWORD **)(a1 + 16);
      int v6 = *(_DWORD *)(a1 + 24);
    }
    *(void *)(a1 + 8) = (char *)v3 + v6 - 16;
    *(void *)(a1 + 16) = v5;
    if (*(void *)(a1 + 72) == 1) {
      *(void *)(a1 + 72) = 2;
    }
    return v3;
  }
  *int v3 = *(_OWORD *)*(void *)(a1 + 8);
  if (*(int *)(a1 + 84) < 1) {
    goto LABEL_46;
  }
  int v8 = a3;
  if (a3 < 0) {
    goto LABEL_39;
  }
  if ((a2 & 0x80000000) != 0)
  {
    sub_100051E5C((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 53);
    unint64_t v11 = sub_100051E74(v33, "CHECK failed: overrun >= 0: ");
    sub_100051FB0((uint64_t)&__src, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v33);
LABEL_14:
    unint64_t v12 = a1 + 56;
    char v13 = (unsigned __int8 *)v3 + (int)a2;
    char v14 = v13;
    while (2)
    {
      int v15 = (char)*v14++;
      int v16 = v15;
      if (v15 < 0)
      {
        int v16 = v16 + (*v14 << 7) - 128;
        if ((char)*v14 < 0)
        {
          char v14 = v13 + 3;
          uint64_t v20 = -21;
          while (1)
          {
            v16 += (*(v14 - 1) - 1) << (v20 + 35);
            if (((char)*(v14 - 1) & 0x80000000) == 0) {
              break;
            }
            ++v14;
            v20 += 7;
            if (!v20) {
              goto LABEL_39;
            }
          }
        }
        else
        {
          char v14 = v13 + 2;
        }
      }
      if ((unint64_t)v14 <= v12)
      {
        if (!v16) {
          goto LABEL_46;
        }
        switch(v16 & 7)
        {
          case 0:
            v33[0].__r_.__value_.__r.__words[0] = 0;
            char v14 = sub_100071708((char *)v14, v33);
            if (!v14) {
              goto LABEL_39;
            }
            goto LABEL_38;
          case 1:
            v14 += 8;
            goto LABEL_38;
          case 2:
            int v18 = *v14;
            if ((char)*v14 < 0)
            {
              uint64_t v19 = sub_100070FAC((uint64_t)v14, v18);
              if (!v19) {
                goto LABEL_39;
              }
            }
            else
            {
              uint64_t v19 = (uint64_t)(v14 + 1);
            }
            if ((uint64_t)(v12 - v19) < v18) {
              goto LABEL_39;
            }
            char v14 = (unsigned __int8 *)(v19 + v18);
LABEL_38:
            char v13 = v14;
            if ((unint64_t)v14 >= v12) {
              goto LABEL_39;
            }
            continue;
          case 3:
            ++v8;
            goto LABEL_38;
          case 4:
            BOOL v17 = __OFSUB__(v8--, 1);
            if (v8 < 0 != v17) {
              goto LABEL_46;
            }
            goto LABEL_38;
          case 5:
            v14 += 4;
            goto LABEL_38;
          default:
            goto LABEL_39;
        }
      }
      goto LABEL_39;
    }
  }
  if (a2 >= 0x11)
  {
    sub_100051E5C((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 54);
    uint64_t v10 = sub_100051E74(v33, "CHECK failed: overrun <= kSlopBytes: ");
    sub_100051FB0((uint64_t)&__src, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v33);
    goto LABEL_39;
  }
  if (a2 != 16) {
    goto LABEL_14;
  }
LABEL_39:
  __src = 0;
  if (!(*(unsigned int (**)(void, void **, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &__src, a1 + 24))
  {
LABEL_45:
    *(_DWORD *)(a1 + 84) = 0;
LABEL_46:
    if (*(void *)(a1 + 72) == 2) {
      *(void *)(a1 + 72) = *(void *)(a1 + 8) - (void)v3;
    }
    *(void *)(a1 + 8) = a1 + 56;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return v3;
  }
  while (1)
  {
    size_t v21 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)(a1 + 84) -= v21;
    if ((int)v21 >= 17)
    {
      unint64_t v27 = *(void *)(a1 + 72);
      unint64_t v26 = (void *)(a1 + 72);
      unint64_t v25 = v27;
      long long v28 = (char *)(v26 - 2);
      unint64_t v29 = __src;
      *((_OWORD *)v26 - 1) = *(_OWORD *)__src;
      *(v26 - 7) = v29;
      goto LABEL_52;
    }
    if ((int)v21 >= 1) {
      break;
    }
    if (v21)
    {
      sub_100051E5C((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 137);
      char v22 = sub_100051E74(v33, "CHECK failed: size_ == 0: ");
      unsigned int v23 = sub_1000523B8(v22, *(_DWORD *)(a1 + 24));
      sub_100051FB0((uint64_t)&v31, (const char **)&v23->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v33);
    }
    if (((*(uint64_t (**)(void, void **, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &__src, a1 + 24) & 1) == 0)goto LABEL_45; {
  }
    }
  memcpy((void *)(a1 + 56), __src, v21);
  unint64_t v30 = *(void *)(a1 + 72);
  unint64_t v26 = (void *)(a1 + 72);
  unint64_t v25 = v30;
  long long v28 = (char *)v3 + v21;
  *(v26 - 7) = v3;
LABEL_52:
  *(v26 - 8) = v28;
  if (v25 > 1) {
    *unint64_t v26 = 1;
  }
  return v3;
}

void sub_100070414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_10007045C(uint64_t a1, signed int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 28);
  if (v3 < a2) {
    return 0;
  }
  signed int v5 = a2;
  if (v3 == a2)
  {
    sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 175);
    int v7 = sub_100051E74(v19, "CHECK failed: overrun != limit_: ");
    sub_100051FB0((uint64_t)&v18, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v19);
    int v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= v5)
  {
    sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 176);
    int v8 = sub_100051E74(v19, "CHECK failed: overrun < limit_: ");
    sub_100051FB0((uint64_t)&v18, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v19);
    int v3 = *(_DWORD *)(a1 + 28);
  }
  if (*(void *)a1 != *(void *)(a1 + 8) + (v3 & (v3 >> 31)))
  {
    sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 181);
    unint64_t v9 = sub_100051E74(v19, "CHECK failed: limit_end_ == buffer_end_ + (std::min)(0, limit_): ");
    sub_100051FB0((uint64_t)&v18, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v19);
    int v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= 0)
  {
    sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 183);
    uint64_t v10 = sub_100051E74(v19, "CHECK failed: limit_ > 0: ");
    sub_100051FB0((uint64_t)&v18, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v19);
  }
  if (*(void *)a1 != *(void *)(a1 + 8))
  {
    sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 184);
    unint64_t v11 = sub_100051E74(v19, "CHECK failed: limit_end_ == buffer_end_: ");
    sub_100051FB0((uint64_t)&v18, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v19);
  }
  while (1)
  {
    if (v5 < 0)
    {
      sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 188);
      unint64_t v12 = sub_100051E74(v19, "CHECK failed: overrun >= 0: ");
      sub_100051FB0((uint64_t)&v18, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v19);
    }
    char v13 = sub_100070030(a1, v5, a3);
    if (!v13) {
      break;
    }
    uint64_t v14 = *(void *)(a1 + 8);
    int v15 = *(_DWORD *)(a1 + 28) + v13 - v14;
    *(_DWORD *)(a1 + 28) = v15;
    BOOL result = (char *)v13 + v5;
    signed int v5 = result - v14;
    if ((int)result - (int)v14 < 0)
    {
      *(void *)a1 = v14 + (v15 & (v15 >> 31));
      return result;
    }
  }
  if (v5) {
    return 0;
  }
  if (*(int *)(a1 + 28) <= 0)
  {
    sub_100051E5C((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 193);
    BOOL v17 = sub_100051E74(v19, "CHECK failed: limit_ > 0: ");
    sub_100051FB0((uint64_t)&v18, (const char **)&v17->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v19);
  }
  BOOL result = *(char **)(a1 + 8);
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8sub_10002F6CC(&a9, 0) = 1;
  return result;
}

void sub_10007070C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_100070754(uint64_t a1, int a2, int a3)
{
  int v5 = *(_DWORD *)(a1 + 8) - a2 + 16;
  while (1)
  {
    BOOL v6 = __OFSUB__(a3, v5);
    a3 -= v5;
    if ((a3 < 0) ^ v6 | (a3 == 0))
    {
      sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      int v7 = sub_100051E74(v10, "CHECK failed: size > chunk_size: ");
      sub_100051FB0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v10);
    }
    if (!*(void *)(a1 + 16) || *(int *)(a1 + 28) < 17) {
      break;
    }
    BOOL result = sub_10006FF68(a1);
    if (!result) {
      return result;
    }
    int v5 = *(_DWORD *)(a1 + 8) - result;
    if (a3 <= v5) {
      return (_OWORD *)((char *)result + a3 + 16);
    }
  }
  return 0;
}

void sub_100070824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_10007083C(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5 = a3;
  BOOL v6 = __s;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (a3 >= 50000000) {
      int v10 = 50000000;
    }
    else {
      int v10 = a3;
    }
    std::string::reserve(this, size + v10);
    uint64_t v8 = *(void *)(a1 + 8);
  }
  int v11 = v8 - v6 + 16;
  while (1)
  {
    BOOL v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      char v13 = sub_100051E74(v16, "CHECK failed: size > chunk_size: ");
      sub_100051FB0((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v16);
    }
    if (!*(void *)(a1 + 16)) {
      break;
    }
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17) {
      break;
    }
    BOOL result = (const std::string::value_type *)sub_10006FF68(a1);
    if (!result) {
      return result;
    }
    BOOL v6 = result + 16;
    int v11 = *(_DWORD *)(a1 + 8) - result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_1000709AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_1000709C4(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5 = a3;
  BOOL v6 = __s;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (a3 >= 50000000) {
      int v10 = 50000000;
    }
    else {
      int v10 = a3;
    }
    std::string::reserve(this, size + v10);
    uint64_t v8 = *(void *)(a1 + 8);
  }
  int v11 = v8 - v6 + 16;
  while (1)
  {
    BOOL v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      char v13 = sub_100051E74(v16, "CHECK failed: size > chunk_size: ");
      sub_100051FB0((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v16);
    }
    if (!*(void *)(a1 + 16)) {
      break;
    }
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17) {
      break;
    }
    BOOL result = (const std::string::value_type *)sub_10006FF68(a1);
    if (!result) {
      return result;
    }
    BOOL v6 = result + 16;
    int v11 = *(_DWORD *)(a1 + 8) - result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_100070B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_100070B2C(unsigned int *result)
{
  *BOOL result = bswap32(*result);
  return result;
}

unint64_t *sub_100070B3C(unint64_t *result)
{
  *BOOL result = bswap64(*result);
  return result;
}

void *sub_100070B4C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  __src = 0;
  unsigned int v7 = 0;
  *(_DWORD *)(a1 + 28) = 0x7FFFFFFF;
  if ((*(unsigned int (**)(uint64_t, void **, unsigned int *))(*(void *)a2 + 16))(a2, &__src, &v7))
  {
    uint64_t v3 = v7;
    *(_DWORD *)(a1 + 84) -= v7;
    if ((int)v3 < 17)
    {
      *(void *)a1 = a1 + 56;
      *(void *)(a1 + 8) = a1 + 56;
      *(void *)(a1 + 16) = a1 + 40;
      uint64_t v4 = (void *)(a1 - (int)v3 + 72);
      memcpy(v4, __src, (int)v3);
    }
    else
    {
      uint64_t v4 = __src;
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) - v3 + 16;
      uint64_t v5 = (uint64_t)v4 + v3 - 16;
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = a1 + 40;
      if (*(void *)(a1 + 72) == 1) {
        *(void *)(a1 + 72) = 2;
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 84) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v4 = (void *)(a1 + 40);
    *(void *)(a1 + 8) = a1 + 40;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = a1 + 40;
  }
  return v4;
}

uint64_t sub_100070C60(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_100070FAC((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = (char *)result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (char *)(a3 + 1);
  }
  int v11 = sub_10003D694(a1, (int)v8, v7);
  int v12 = *(_DWORD *)(a1 + 88);
  BOOL v13 = __OFSUB__(v12--, 1);
  *(_DWORD *)(a1 + 88) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)a2 + 88))(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++*(_DWORD *)(a1 + 88);
  if (*(_DWORD *)(a1 + 80)) {
    return 0;
  }
  int v15 = *(_DWORD *)(a1 + 28) + v14;
  *(_DWORD *)(a1 + 28) = v15;
  *(void *)a1 = *(void *)(a1 + 8) + (v15 & (v15 >> 31));
  return result;
}

void sub_100070D48(int a1, unint64_t a2, std::string *this)
{
  unint64_t v5 = (8 * a1);
  if (v5 < 0x80)
  {
    LOBYTE(v6) = 8 * a1;
  }
  else
  {
    do
    {
      std::string::push_back(this, v5 | 0x80);
      unint64_t v6 = v5 >> 7;
      unint64_t v7 = v5 >> 14;
      v5 >>= 7;
    }
    while (v7);
  }
  std::string::push_back(this, v6);
  if (a2 < 0x80)
  {
    LOBYTE(v8) = a2;
  }
  else
  {
    do
    {
      std::string::push_back(this, a2 | 0x80);
      unint64_t v8 = a2 >> 7;
      unint64_t v9 = a2 >> 14;
      a2 >>= 7;
    }
    while (v9);
  }
  std::string::push_back(this, v8);
}

std::string *sub_100070DF4(int a1, const std::string::value_type *a2, std::string::size_type a3, std::string *this)
{
  unint64_t v7 = (8 * a1) | 2u;
  if (v7 < 0x80)
  {
    LOBYTE(v8) = (8 * a1) | 2;
  }
  else
  {
    do
    {
      std::string::push_back(this, v7 | 0x80);
      unint64_t v8 = v7 >> 7;
      unint64_t v9 = v7 >> 14;
      v7 >>= 7;
    }
    while (v9);
  }
  std::string::push_back(this, v8);
  LOBYTE(v1sub_10002F6CC(&a9, 0) = a3;
  if (a3 >= 0x80)
  {
    std::string::size_type v11 = a3;
    do
    {
      std::string::push_back(this, v11 | 0x80);
      std::string::size_type v10 = v11 >> 7;
      std::string::size_type v12 = v11 >> 14;
      v11 >>= 7;
    }
    while (v12);
  }
  std::string::push_back(this, v10);
  return std::string::append(this, a2, a3);
}

uint64_t sub_100070EB8(uint64_t a1, int a2)
{
  uint64_t result = a1 + 3;
  uint64_t v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 35);
    if ((*(char *)(result - 1) & 0x80000000) == 0) {
      break;
    }
    ++result;
    v4 += 7;
    if (!v4)
    {
      while (*(char *)(a1 + v4 + 5) < 0)
      {
        uint64_t result = 0;
        if (++v4 == 5) {
          return result;
        }
      }
      return a1 + v4 + 6;
    }
  }
  return result;
}

uint64_t sub_100070F20(uint64_t a1, uint64_t a2)
{
  a2 = a2;
  uint64_t result = a1 + 3;
  uint64_t v4 = (char *)(a1 + 2);
  uint64_t v5 = 14;
  while (1)
  {
    int v6 = *v4++;
    a2 += (v6 - 1) << v5;
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    ++result;
    v5 += 7;
    if (v5 == 70) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100070F68(uint64_t a1, int a2)
{
  uint64_t result = a1 + 3;
  uint64_t v4 = (char *)(a1 + 2);
  uint64_t v5 = -21;
  while (1)
  {
    int v6 = *v4++;
    a2 += (v6 - 1) << (v5 + 35);
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    ++result;
    v5 += 7;
    if (!v5) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100070FAC(uint64_t a1, int a2)
{
  uint64_t result = a1 + 2;
  uint64_t v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 28);
    if ((*(char *)(result - 1) & 0x80000000) == 0) {
      break;
    }
    ++result;
    v4 += 7;
    if (!v4)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 4);
      uint64_t v6 = a1 + 5;
      if (a2 + (v5 << 28) - 0x10000000 > 0x7FFFFFEF) {
        uint64_t v6 = 0;
      }
      if (v5 <= 7) {
        return v6;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10007101C(std::string::value_type *__s, uint64_t a2, std::string *this)
{
  return a2;
}

BOOL sub_100071054(char *a1, int a2, uint64_t a3)
{
  BOOL v4 = sub_100081264(a1, a2);
  if (!v4) {
    sub_100089D80(a3, "parsing");
  }
  return v4;
}

const std::string::value_type *sub_100071098(std::string *this, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (const std::string::value_type *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = (std::string::value_type *)result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_100064C14(a3, v6, v5, this);
}

unsigned __int8 *sub_100071110(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_10007177C(a3, a2, a1);
}

unsigned __int8 *sub_100071120(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_100071A50(a3, a2, a1);
}

unsigned __int8 *sub_100071130(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_100071D24(a3, a2, a1);
}

unsigned __int8 *sub_100071140(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_100071FF8(a3, a2, a1);
}

unsigned __int8 *sub_100071150(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1000722CC(a3, a2, a1);
}

unsigned __int8 *sub_100071160(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1000725AC(a3, a2, a1);
}

unsigned __int8 *sub_100071170(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_10007288C(a3, a2, a1);
}

char *sub_100071184(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_100072B68(a3, v6, v5, a1);
}

char *sub_100071200(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_100072C70(a3, v6, v5, a1);
}

char *sub_10007127C(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_100072D78(a3, v6, v5, a1);
}

char *sub_1000712F8(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_100072E80(a3, v6, v5, a1);
}

char *sub_100071374(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_100072F88(a3, v6, v5, a1);
}

char *sub_1000713F0(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_100073090(a3, v6, v5, a1);
}

char *sub_100071468(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  return sub_100071490((uint64_t)&v4, a2, a3);
}

char *sub_100071490(uint64_t a1, char *a2, uint64_t a3)
{
  std::string::size_type v10 = a2;
  while (1)
  {
    if (sub_10003D228(a3, &v10, *(_DWORD *)(a3 + 92))) {
      return v10;
    }
    int v5 = v10 + 1;
    unsigned int v6 = *v10;
    if (*v10 < 0)
    {
      unsigned int v6 = v6 + (*v5 << 7) - 128;
      if (*v5 < 0)
      {
        int v5 = v10 + 3;
        uint64_t v8 = -21;
        while (1)
        {
          v6 += (*(v5 - 1) - 1) << (v8 + 35);
          if ((*(v5 - 1) & 0x80000000) == 0) {
            break;
          }
          ++v5;
          v8 += 7;
          if (!v8) {
            return 0;
          }
        }
      }
      else
      {
        int v5 = v10 + 2;
      }
    }
    std::string::size_type v10 = v5;
    if (!v6 || (v6 & 7) == 4) {
      break;
    }
    std::string::size_type v10 = (char *)sub_1000715A8(v6, a1);
    if (!v10) {
      return 0;
    }
  }
  *(_DWORD *)(a3 + 8sub_10002F6CC(&a9, 0) = v6 - 1;
  return v5;
}

unsigned __int8 *sub_10007157C(unsigned int a1, std::string *a2, char *a3, int32x2_t *a4)
{
  int v5 = a2;
  return sub_1000715A8(a1, &v5, a3, a4);
}

unsigned __int8 *sub_1000715A8(unint64_t a1, std::string **a2, char *a3, int32x2_t *a4)
{
  unint64_t v4 = a1 >> 3;
  if (!(a1 >> 3)) {
    return 0;
  }
  int v5 = (unsigned __int8 *)a3;
  switch(a1 & 7)
  {
    case 0uLL:
      v11[0].__r_.__value_.__r.__words[0] = 0;
      int v5 = sub_100071708(a3, v11);
      if (v5) {
        sub_100073198(a2, v4, v11[0].__r_.__value_.__r.__words[0]);
      }
      return v5;
    case 1uLL:
      int v5 = (unsigned __int8 *)(a3 + 8);
      sub_100073260((std::string *)a2, v4, *(void *)a3);
      return v5;
    case 2uLL:
      uint64_t v8 = (unsigned __int8 *)sub_10007331C(a2, v4, a3, (uint64_t)a4);
      goto LABEL_10;
    case 3uLL:
      uint64_t v8 = (unsigned __int8 *)sub_100073488(a2, v4, a3, a4);
LABEL_10:
      int v5 = v8;
      break;
    case 4uLL:
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 758);
      unint64_t v7 = sub_100051E74(v11, "Can't happen");
      sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
      break;
    case 5uLL:
      int v5 = (unsigned __int8 *)(a3 + 4);
      sub_1000735B4((std::string *)a2, v4, *(_DWORD *)a3);
      break;
    default:
      return 0;
  }
  return v5;
}

void sub_1000716D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100071708(char *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1 < 0)
  {
    int v4 = a1[1];
    uint64_t v5 = (v2 + (v4 << 7) - 128);
    if ((v4 & 0x80) != 0)
    {
      uint64_t result = (unsigned __int8 *)(a1 + 3);
      uint64_t v6 = 14;
      while (1)
      {
        v5 += (*(result - 1) - 1) << v6;
        if (((char)*(result - 1) & 0x80000000) == 0) {
          break;
        }
        ++result;
        v6 += 7;
        if (v6 == 70)
        {
          uint64_t result = 0;
          uint64_t v5 = 0;
          break;
        }
      }
      *a2 = v5;
    }
    else
    {
      *a2 = v5;
      return (unsigned __int8 *)(a1 + 2);
    }
  }
  else
  {
    *a2 = v2;
    return (unsigned __int8 *)(a1 + 1);
  }
  return result;
}

unsigned __int8 *sub_10007177C(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_1000719A0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_1000719A0(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        std::string::size_type v11 = sub_100051E74(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_1000719A0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_100051E74(&v18, "CHECK failed: (size) > (0): ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_100071978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1000719A0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_100071708((char *)i, &v10);
    if (!i) {
      break;
    }
    int v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_100075018(a3, v7 + 1);
      *(_DWORD *)(sub_100075830((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_100075830((uint64_t)a3) + 4 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_100071A50(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_100071C74(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_100071C74(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        std::string::size_type v11 = sub_100051E74(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_100071C74((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_100051E74(&v18, "CHECK failed: (size) > (0): ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_100071C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100071C74(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_100071708((char *)i, &v10);
    if (!i) {
      break;
    }
    int v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_100076810(a3, v7 + 1);
      *(_DWORD *)(sub_100077014((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_100077014((uint64_t)a3) + 4 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_100071D24(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_100071F48(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_100071F48(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        std::string::size_type v11 = sub_100051E74(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_100071F48((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_100051E74(&v18, "CHECK failed: (size) > (0): ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_100071F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100071F48(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_100071708((char *)i, &v10);
    if (!i) {
      break;
    }
    uint64_t v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_100077FB8(a3, v7 + 1);
      *(void *)(sub_1000787D0((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(void *)(sub_1000787D0((uint64_t)a3) + 8 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_100071FF8(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_10007221C(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_10007221C(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        std::string::size_type v11 = sub_100051E74(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_10007221C((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_100051E74(&v18, "CHECK failed: (size) > (0): ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_1000721F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10007221C(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_100071708((char *)i, &v10);
    if (!i) {
      break;
    }
    uint64_t v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_1000797B0(a3, v7 + 1);
      *(void *)(sub_100079FB4((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(void *)(sub_100079FB4((uint64_t)a3) + 8 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1000722CC(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_1000724F0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_1000724F0(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        std::string::size_type v11 = sub_100051E74(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_1000724F0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_100051E74(&v18, "CHECK failed: (size) > (0): ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_1000724C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1000724F0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_100071708((char *)i, &v10);
    if (!i) {
      break;
    }
    int v6 = -(v10 & 1) ^ (v10 >> 1);
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_100075018(a3, v7 + 1);
      *(_DWORD *)(sub_100075830((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_100075830((uint64_t)a3) + 4 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1000725AC(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_1000727D0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_1000727D0(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        std::string::size_type v11 = sub_100051E74(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_1000727D0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_100051E74(&v18, "CHECK failed: (size) > (0): ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_1000727A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1000727D0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    unint64_t v10 = 0;
    uint64_t i = sub_100071708((char *)i, &v10);
    if (!i) {
      break;
    }
    unint64_t v6 = -(uint64_t)(v10 & 1) ^ (v10 >> 1);
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_100077FB8(a3, v7 + 1);
      *(void *)(sub_1000787D0((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(void *)(sub_1000787D0((uint64_t)a3) + 8 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_10007288C(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_100070FAC((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_100072AB0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_100072AB0(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        std::string::size_type v11 = sub_100051E74(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_100072AB0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_100051E5C((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_100051E74(&v18, "CHECK failed: (size) > (0): ");
        sub_100051FB0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_100051FB8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_100072A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100072AB0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_100071708((char *)i, &v10);
    if (!i) {
      break;
    }
    BOOL v6 = v10 != 0;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_1000737EC(a3, v7 + 1);
      *(unsigned char *)(sub_100074030((uint64_t)a3) + v7) = v6;
    }
    else
    {
      *(unsigned char *)(sub_100074030((uint64_t)a3) + v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

char *sub_100072B68(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_100076810(a4, *a4 + (v5 >> 2));
    std::string::size_type v11 = (void *)sub_1000769E4((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC)) {
      return &v6[v5 & 0xFFFFFFFC];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_100076810(a4, *a4 + (v7 >> 2));
      int v9 = (void *)sub_1000769E4((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFFC;
      BOOL v6 = &result[-(v7 & 3) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 3));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_100072C70(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_100075018(a4, *a4 + (v5 >> 2));
    std::string::size_type v11 = (void *)sub_1000751EC((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC)) {
      return &v6[v5 & 0xFFFFFFFC];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_100075018(a4, *a4 + (v7 >> 2));
      int v9 = (void *)sub_1000751EC((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFFC;
      BOOL v6 = &result[-(v7 & 3) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 3));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_100072D78(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_1000797B0(a4, *a4 + (v5 >> 3));
    std::string::size_type v11 = (void *)sub_100079984((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8)) {
      return &v6[v5 & 0xFFFFFFF8];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_1000797B0(a4, *a4 + (v7 >> 3));
      int v9 = (void *)sub_100079984((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFF8;
      BOOL v6 = &result[-(v7 & 7) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 7));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_100072E80(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_100077FB8(a4, *a4 + (v5 >> 3));
    std::string::size_type v11 = (void *)sub_10007818C((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8)) {
      return &v6[v5 & 0xFFFFFFF8];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_100077FB8(a4, *a4 + (v7 >> 3));
      int v9 = (void *)sub_10007818C((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFF8;
      BOOL v6 = &result[-(v7 & 7) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 7));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_100072F88(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_10007AF58(a4, *a4 + (v5 >> 2));
    std::string::size_type v11 = (void *)sub_10007B12C((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC)) {
      return &v6[v5 & 0xFFFFFFFC];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_10007AF58(a4, *a4 + (v7 >> 2));
      int v9 = (void *)sub_10007B12C((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFFC;
      BOOL v6 = &result[-(v7 & 3) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 3));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_100073090(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_10007C718(a4, *a4 + (v5 >> 3));
    std::string::size_type v11 = (void *)sub_10007C8EC((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8)) {
      return &v6[v5 & 0xFFFFFFF8];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_10007C718(a4, *a4 + (v7 >> 3));
      int v9 = (void *)sub_10007C8EC((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_10006FF68(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFF8;
      BOOL v6 = &result[-(v7 & 7) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 7));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

void sub_100073198(std::string **a1, int a2, unint64_t a3)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unint64_t v6 = (8 * a2);
    if (v6 < 0x80)
    {
      LOBYTE(v7) = 8 * a2;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        unint64_t v7 = v6 >> 7;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    int v9 = *a1;
    if (a3 < 0x80)
    {
      LOBYTE(v1sub_10002F6CC(&a9, 0) = a3;
    }
    else
    {
      do
      {
        std::string::push_back(v9, a3 | 0x80);
        unint64_t v10 = a3 >> 7;
        unint64_t v11 = a3 >> 14;
        a3 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v9, v10);
  }
}

std::string *sub_100073260(std::string *result, int a2, uint64_t a3)
{
  uint64_t v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    int v5 = (std::string **)result;
    unint64_t v6 = (8 * a2) | 1u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 1;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        unint64_t v7 = v6 >> 7;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    uint64_t v9 = a3;
    return std::string::append(*v5, (const std::string::value_type *)&v9, 8uLL);
  }
  return result;
}

const std::string::value_type *sub_10007331C(std::string **a1, int a2, char *a3, uint64_t a4)
{
  int v7 = *a3;
  if (*a3 < 0)
  {
    uint64_t result = (const std::string::value_type *)sub_100070FAC((uint64_t)a3, *a3);
    if (!result) {
      return result;
    }
    unint64_t v8 = (std::string::value_type *)result;
    int v7 = v10;
  }
  else
  {
    unint64_t v8 = a3 + 1;
  }
  unint64_t v11 = *a1;
  if (*a1)
  {
    unint64_t v12 = (8 * a2) | 2u;
    if (v12 < 0x80)
    {
      LOBYTE(v13) = v12;
    }
    else
    {
      do
      {
        std::string::push_back(v11, v12 | 0x80);
        unint64_t v13 = v12 >> 7;
        unint64_t v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
    }
    std::string::push_back(v11, v13);
    unint64_t v15 = v7;
    BOOL v16 = *a1;
    if (v7 < 0x80)
    {
      LOBYTE(v17) = v7;
    }
    else
    {
      do
      {
        std::string::push_back(v16, v15 | 0x80);
        unint64_t v17 = v15 >> 7;
        unint64_t v18 = v15 >> 14;
        v15 >>= 7;
      }
      while (v18);
    }
    std::string::push_back(v16, v17);
    __int16 v19 = *a1;
    return sub_100073644(a4, v8, v7, v19);
  }
  else if (*(void *)(a4 + 8) - (void)v8 + 16 >= v7)
  {
    return &v8[v7];
  }
  else
  {
    return (const std::string::value_type *)sub_100070754(a4, (int)v8, v7);
  }
}

char *sub_100073488(std::string **a1, int a2, char *a3, int32x2_t *a4)
{
  int v7 = *a1;
  int v8 = 8 * a2;
  if (*a1)
  {
    unint64_t v9 = v8 | 3u;
    if (v9 < 0x80)
    {
      LOBYTE(v1sub_10002F6CC(&a9, 0) = v8 | 3;
    }
    else
    {
      do
      {
        std::string::push_back(v7, v9 | 0x80);
        unint64_t v10 = v9 >> 7;
        unint64_t v11 = v9 >> 14;
        v9 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v7, v10);
  }
  int v12 = a4[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a4[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  ++a4[11].i32[1];
  unint64_t v14 = sub_100071490((uint64_t)a1, a3, (uint64_t)a4);
  a4[11] = vadd_s32(a4[11], (int32x2_t)0xFFFFFFFF00000001);
  __int32 v15 = a4[10].i32[0];
  a4[10].i32[0] = 0;
  if (v15 != (v8 | 3) || v14 == 0) {
    return 0;
  }
  unint64_t v17 = v14;
  unint64_t v18 = *a1;
  if (v18)
  {
    unint64_t v19 = v8 | 4u;
    if (v19 < 0x80)
    {
      LOBYTE(v2sub_10002F6CC(&a9, 0) = v8 | 4;
    }
    else
    {
      do
      {
        std::string::push_back(v18, v19 | 0x80);
        unint64_t v20 = v19 >> 7;
        unint64_t v21 = v19 >> 14;
        v19 >>= 7;
      }
      while (v21);
    }
    std::string::push_back(v18, v20);
  }
  return v17;
}

std::string *sub_1000735B4(std::string *result, int a2, int a3)
{
  uint64_t v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    int v5 = (std::string **)result;
    unint64_t v6 = (8 * a2) | 5u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 5;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        unint64_t v7 = v6 >> 7;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    *(_DWORD *)__s = a3;
    return std::string::append(*v5, __s, 4uLL);
  }
  return result;
}

const std::string::value_type *sub_100073644(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  if (*(void *)(a1 + 8) - (void)__s + 16 >= a3)
  {
    uint64_t v6 = a3;
    std::string::append(this, __s, a3);
    return &__s[v6];
  }
  else
  {
    return sub_1000709C4(a1, __s, a3, this);
  }
}

void *sub_1000736B0(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  return result;
}

void *sub_1000736B8(void *result, uint64_t a2)
{
  *uint64_t result = 0;
  result[1] = a2;
  return result;
}

uint64_t sub_1000736C0(uint64_t a1, int *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v4 = *a2;
  if (v4)
  {
    sub_1000737EC((int *)a1, v4);
    sub_1000739C4(a1, *a2);
    if (*(int *)a1 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
      int v5 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    uint64_t v6 = (void *)sub_100074030(a1);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      unint64_t v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    unint64_t v8 = (const void *)sub_100074030((uint64_t)a2);
    memcpy(v6, v8, *a2);
  }
  return a1;
}

void sub_1000737CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000737EC(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_100074030((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_100051E74(v15, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_100051FB0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_100051FB8((uint64_t)v15);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_100074030((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  if (v6)
  {
    uint64_t v11 = (v9 + 15) & 0x1FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
    int v12 = (void *)sub_10004E520(v6, v11);
    }
  }
  else
  {
    int v12 = operator new(v9 + 8);
  }
  *int v12 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v12 + 1;
  sub_100074030((uint64_t)a1);
  if (*a1 >= 1)
  {
    BOOL v13 = (void *)sub_100074030((uint64_t)a1);
    memcpy(v13, v5 + 1, *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_1000739A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000739BC(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_1000739C4(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_100051E74(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1000523B8(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_100051E74(v6, ", ");
    unint64_t v8 = sub_1000523B8(v7, *(_DWORD *)a1);
    sub_100051FB0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_100073A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100073A84(int a1, void *__dst, void *__src, int a4)
{
  return memcpy(__dst, __src, a4);
}

uint64_t sub_100073A98(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100074030((uint64_t)a1) + a2;
}

void sub_100073B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100073B78(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100074030((uint64_t)a1) + a2;
}

void sub_100073C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100073C5C(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_100074030(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    uint64_t v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

void sub_100073CA4(int a1, void *__p)
{
  if (__p)
  {
    if (!*__p) {
      operator delete(__p);
    }
  }
}

uint64_t sub_100073CBC(uint64_t a1)
{
  return sub_100074030(a1) - 8;
}

int *sub_100073CDC(int *a1, int *a2)
{
  if (a1 != a2)
  {
    *a1 = 0;
    sub_10007473C(a1, a2);
  }
  return a1;
}

int *sub_100073D14(int *result, int *a2)
{
  if (a2 != result)
  {
    *uint64_t result = 0;
    return sub_10007473C(result, a2);
  }
  return result;
}

uint64_t sub_100073D28(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_100074030((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_10007473C((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_100073DD4(a1, a2);
  }
  return a1;
}

uint64_t sub_100073DA4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4)) {
    uint64_t v1 = sub_100074030(a1) - 8;
  }
  else {
    uint64_t v1 = a1 + 8;
  }
  return *(void *)v1;
}

__n128 sub_100073DD4(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 == a2)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1459);
    uint64_t v4 = sub_100051E74(v13, "CHECK failed: this != other: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 4)) {
    int v5 = (uint64_t *)(sub_100074030(a1) - 8);
  }
  else {
    int v5 = (uint64_t *)(a1 + 8);
  }
  uint64_t v6 = *v5;
  if (a2->n128_u32[1]) {
    char v7 = (unint64_t *)(sub_100074030((uint64_t)a2) - 8);
  }
  else {
    char v7 = &a2->n128_u64[1];
  }
  if (v6 != *v7)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1460);
    unint64_t v8 = sub_100051E74(v13, "CHECK failed: GetArena() == other->GetArena(): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  unint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a2->n128_u64[0] = v9;
  a2->n128_u64[1] = v10;
  return result;
}

void sub_100073EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100073F00(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_100074030((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_10007473C((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_100073DD4(a1, a2);
  }
  return a1;
}

int *sub_100073F7C(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_100074030((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      uint64_t v6 = (unint64_t *)(sub_100074030((uint64_t)a2) - 8);
    }
    else {
      uint64_t v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_100073DD4((uint64_t)a1, a2);
    }
    else
    {
      *a1 = 0;
      sub_10007473C(a1, (int *)a2);
    }
  }
  return a1;
}

BOOL sub_100074020(_DWORD *a1)
{
  return *a1 == 0;
}

uint64_t sub_100074030(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_100051E74(v5, "CHECK failed: (total_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_1000740A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000740C4(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1308);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1309);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100074030((uint64_t)a1) + a2;
}

void sub_100074184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000741A4(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1315);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1316);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100074030((uint64_t)a1) + a2;
}

void sub_100074264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100074284(_DWORD *a1, int a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1329);
    uint64_t v6 = sub_100051E74(v11, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1330);
    char v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  char v8 = *a3;
  uint64_t result = sub_100074030((uint64_t)a1);
  *(unsigned char *)(result + a2) = v8;
  return result;
}

void sub_100074354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100074374(int *a1, char *a2)
{
  uint64_t v3 = *a1;
  char v4 = *a2;
  if (v3 == a1[1])
  {
    int v5 = v3 + 1;
    sub_1000737EC(a1, v3 + 1);
    uint64_t result = sub_100074030((uint64_t)a1);
    *(unsigned char *)(result + v3) = v4;
  }
  else
  {
    uint64_t result = sub_100074030((uint64_t)a1);
    *(unsigned char *)(result + v3) = v4;
    int v5 = v3 + 1;
  }
  *a1 = v5;
  return result;
}

uint64_t sub_1000743E0(int *a1)
{
  uint64_t v2 = *a1;
  if (v2 == a1[1]) {
    sub_1000737EC(a1, v2 + 1);
  }
  uint64_t result = sub_100074030((uint64_t)a1) + v2;
  *a1 = v2 + 1;
  return result;
}

int *sub_100074434(int *result)
{
  uint64_t v1 = result;
  int v2 = *result;
  if (*result <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1384);
    uint64_t v3 = sub_100051E74(v5, "CHECK failed: (current_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v3->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v5);
    int v2 = *v1;
  }
  int *v1 = v2 - 1;
  return result;
}

void sub_1000744B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1000744C8(int *result, int a2, int a3, unsigned char *a4)
{
  int v6 = a2;
  char v7 = result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1391);
    char v8 = sub_100051E74(v16, "CHECK failed: (start) >= (0): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1392);
  unint64_t v9 = sub_100051E74(v16, "CHECK failed: (num) >= (0): ");
  sub_100051FB0((uint64_t)&v15, (const char **)&v9->__r_.__value_.__l.__data_);
  uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
LABEL_6:
  if (a3 + v6 > *v7)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1393);
    char v10 = sub_100051E74(v16, "CHECK failed: (start + num) <= (this->current_size_): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v10->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
  }
  if (a4 && a3 >= 1)
  {
    uint64_t v11 = a3;
    int v12 = v6;
    do
    {
      uint64_t result = (int *)sub_100073B78(v7, v12);
      *a4++ = *(unsigned char *)result;
      ++v12;
      --v11;
    }
    while (v11);
  }
  if (a3 >= 1)
  {
    for (int i = *v7; a3 + v6 < *v7; ++v6)
    {
      char v14 = (char *)sub_100073B78(v7, a3 + v6);
      uint64_t result = (int *)sub_100074284(v7, v6, v14);
      int i = *v7;
    }
    if (i >= 1) {
      *char v7 = i - a3;
    }
  }
  return result;
}

void sub_100074670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_100074698(int *result, int a2)
{
  uint64_t v3 = result;
  int v4 = *result;
  if (*result < a2)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    int v5 = sub_100051E74(v7, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v7);
    int v4 = *v3;
  }
  if (v4 >= 1) {
    *uint64_t v3 = a2;
  }
  return result;
}

void sub_10007471C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_100074734(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

int *sub_10007473C(int *result, int *a2)
{
  uint64_t v3 = result;
  if (a2 == result)
  {
    sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    int v4 = sub_100051E74(v10, "CHECK failed: (&other) != (this): ");
    sub_100051FB0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_1000737EC(v3, *v3 + *a2);
    sub_1000739C4((uint64_t)v3, *a2);
    char v6 = (void *)sub_100073A98(v3, v5);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_100051E74(v10, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v10);
    }
    char v8 = (const void *)sub_100074030((uint64_t)a2);
    return (int *)memcpy(v6, v8, *a2);
  }
  return result;
}

void sub_100074848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100074868(int *a1, char *a2)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1266);
    int v4 = sub_100051E74(v9, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v9);
  }
  char v5 = *a2;
  uint64_t result = sub_100074030((uint64_t)a1);
  uint64_t v7 = *a1;
  *a1 = v7 + 1;
  *(unsigned char *)(result + v7) = v5;
  return result;
}

void sub_1000748F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100074910(int *a1)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1272);
    int v2 = sub_100051E74(v7, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v7);
  }
  uint64_t v3 = sub_100074030((uint64_t)a1);
  uint64_t v4 = *a1;
  *a1 = v4 + 1;
  return v3 + v4;
}

void sub_100074998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000749B0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t sub_1000749B8(uint64_t result, int a2, unsigned char *a3)
{
  char v5 = (int *)result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1291);
    char v6 = sub_100051E74(v10, "CHECK failed: (new_size) >= (0): ");
    sub_100051FB0((uint64_t)&v9, (const char **)&v6->__r_.__value_.__l.__data_);
    uint64_t result = sub_100051FB8((uint64_t)v10);
  }
  if (*v5 < a2)
  {
    sub_1000737EC(v5, a2);
    uint64_t v7 = (unsigned char *)(sub_100074030((uint64_t)v5) + *v5);
    uint64_t result = sub_100074030((uint64_t)v5);
    if (result + a2 - (uint64_t)v7 >= 1)
    {
      unint64_t v8 = result + a2 - (void)v7 + 1;
      do
      {
        *v7++ = *a3;
        --v8;
      }
      while (v8 > 1);
    }
  }
  int *v5 = a2;
  return result;
}

void sub_100074A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100074AB0(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_100074030((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      char v6 = (unint64_t *)(sub_100074030((uint64_t)a2) - 8);
    }
    else {
      char v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_100073DD4((uint64_t)a1, a2);
    }
    else
    {
      if (a2->n128_u32[1]) {
        uint64_t v7 = (unint64_t *)(sub_100074030((uint64_t)a2) - 8);
      }
      else {
        uint64_t v7 = &a2->n128_u64[1];
      }
      unint64_t v8 = *v7;
      v9.n128_u64[0] = 0;
      v9.n128_u64[1] = v8;
      sub_10007473C((int *)&v9, a1);
      *a1 = 0;
      sub_10007473C(a1, (int *)a2);
      if (&v9 != a2) {
        sub_100073DD4((uint64_t)a2, &v9);
      }
      sub_100073C5C((uint64_t)&v9);
    }
  }
}

void sub_100074BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_100074BD4(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 != a2) {
    *(void *)&double result = sub_100073DD4(a1, a2).n128_u64[0];
  }
  return result;
}

uint64_t sub_100074BE4(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_100074030(a1);
  uint64_t result = sub_100074030(a1);
  char v8 = *(unsigned char *)(v6 + a2);
  *(unsigned char *)(v6 + a2) = *(unsigned char *)(result + a3);
  *(unsigned char *)(result + a3) = v8;
  return result;
}

uint64_t sub_100074C34(int *a1)
{
  return *((void *)a1 + 1) + *a1;
}

uint64_t sub_100074C44(int *a1)
{
  return *((void *)a1 + 1) + *a1;
}

uint64_t sub_100074C58(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_100074C64(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 4);
  if ((int)v1 <= 0) {
    return 0;
  }
  else {
    return v1 + 8;
  }
}

unint64_t sub_100074C78(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 4);
  if ((int)v1 <= 0) {
    unint64_t v2 = 0;
  }
  else {
    unint64_t v2 = v1 + 8;
  }
  if (v2 >> 31)
  {
    sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/message_lite.h", 113);
    uint64_t v3 = sub_100051E74(v6, "CHECK failed: (size) <= (static_cast<size_t>(2147483647)): ");
    sub_100051FB0((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v6);
  }
  return v2;
}

void sub_100074CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100074D0C(int *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = (const void *)(a2 + 1);
  uint64_t v5 = *((void *)a1 + 1);
  int v6 = v2 - v5;
  uint64_t v7 = *a1;
  int v8 = v5 + v6;
  int v9 = v5 + v7 - v4;
  if ((const void *)(v5 + v7) != v4)
  {
    memmove((void *)(v5 + v6), v4, v5 + v7 - (void)v4);
    uint64_t v5 = *((void *)a1 + 1);
    LODWORD(v7) = *a1;
  }
  int v10 = v8 + v9 - v5;
  if ((int)v7 < v10)
  {
    sub_100051E5C((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    uint64_t v11 = sub_100051E74(v14, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v13, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v14);
    LODWORD(v7) = *a1;
  }
  if ((int)v7 >= 1) {
    *a1 = v10;
  }
  return *((void *)a1 + 1) + v6;
}

void sub_100074DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100074DF4(int *a1, void *a2, void *__src)
{
  uint64_t v4 = *((void *)a1 + 1);
  int v5 = a2 - v4;
  if (a2 == __src)
  {
    uint64_t v11 = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    int v7 = (int)a2;
    int v8 = v4 + v6 - __src;
    if ((void *)(v4 + v6) != __src)
    {
      memmove((void *)(v4 + v5), __src, v4 + v6 - (void)__src);
      uint64_t v4 = *((void *)a1 + 1);
      LODWORD(v6) = *a1;
    }
    int v9 = v7 + v8 - v4;
    if ((int)v6 < v9)
    {
      sub_100051E5C((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
      int v10 = sub_100051E74(v14, "CHECK failed: (new_size) <= (current_size_): ");
      sub_100051FB0((uint64_t)&v13, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v14);
      LODWORD(v6) = *a1;
    }
    uint64_t v11 = v5;
    if ((int)v6 >= 1) {
      *a1 = v9;
    }
  }
  return *((void *)a1 + 1) + v11;
}

void sub_100074ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100074EE8(uint64_t a1, int *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v4 = *a2;
  if (v4)
  {
    sub_100075018((int *)a1, v4);
    sub_1000751EC(a1, *a2);
    if (*(int *)a1 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
      int v5 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    uint64_t v6 = (void *)sub_100075830(a1);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      int v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    int v8 = (const void *)sub_100075830((uint64_t)a2);
    memcpy(v6, v8, 4 * *a2);
  }
  return a1;
}

void sub_100074FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100075018(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_100075830((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            int v8 = sub_100051E74(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_100051FB0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_100051FB8((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_100075830((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 4 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0x7FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
    char v13 = (void *)sub_10004E520(v6, v12);
    }
  }
  else
  {
    char v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_100075830((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_100075830((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_1000751D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000751EC(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_100051E74(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1000523B8(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_100051E74(v6, ", ");
    int v8 = sub_1000523B8(v7, *(_DWORD *)a1);
    sub_100051FB0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_100075294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000752AC(int a1, void *__dst, void *__src, int a4)
{
  return memcpy(__dst, __src, 4 * a4);
}

uint64_t sub_1000752C0(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100075830((uint64_t)a1) + 4 * a2;
}

void sub_100075380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000753A0(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100075830((uint64_t)a1) + 4 * a2;
}

void sub_100075460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100075484(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_100075830(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    uint64_t v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_1000754CC(uint64_t a1)
{
  return sub_100075830(a1) - 8;
}

int *sub_1000754EC(int *a1, int *a2)
{
  if (a1 != a2)
  {
    *a1 = 0;
    sub_100075F34(a1, a2);
  }
  return a1;
}

int *sub_100075524(int *result, int *a2)
{
  if (a2 != result)
  {
    *uint64_t result = 0;
    return sub_100075F34(result, a2);
  }
  return result;
}

uint64_t sub_100075538(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_100075830((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_100075F34((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_1000755E4(a1, a2);
  }
  return a1;
}

uint64_t sub_1000755B4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4)) {
    uint64_t v1 = sub_100075830(a1) - 8;
  }
  else {
    uint64_t v1 = a1 + 8;
  }
  return *(void *)v1;
}

__n128 sub_1000755E4(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 == a2)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1459);
    uint64_t v4 = sub_100051E74(v13, "CHECK failed: this != other: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 4)) {
    int v5 = (uint64_t *)(sub_100075830(a1) - 8);
  }
  else {
    int v5 = (uint64_t *)(a1 + 8);
  }
  uint64_t v6 = *v5;
  if (a2->n128_u32[1]) {
    char v7 = (unint64_t *)(sub_100075830((uint64_t)a2) - 8);
  }
  else {
    char v7 = &a2->n128_u64[1];
  }
  if (v6 != *v7)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1460);
    int v8 = sub_100051E74(v13, "CHECK failed: GetArena() == other->GetArena(): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  unint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a2->n128_u64[0] = v9;
  a2->n128_u64[1] = v10;
  return result;
}

void sub_1000756F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100075710(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_100075830((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_100075F34((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_1000755E4(a1, a2);
  }
  return a1;
}

int *sub_10007578C(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_100075830((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      uint64_t v6 = (unint64_t *)(sub_100075830((uint64_t)a2) - 8);
    }
    else {
      uint64_t v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_1000755E4((uint64_t)a1, a2);
    }
    else
    {
      *a1 = 0;
      sub_100075F34(a1, (int *)a2);
    }
  }
  return a1;
}

uint64_t sub_100075830(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_100051E74(v5, "CHECK failed: (total_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_1000758A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000758C4(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1308);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1309);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100075830((uint64_t)a1) + 4 * a2;
}

void sub_100075984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000759A4(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1315);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1316);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100075830((uint64_t)a1) + 4 * a2;
}

void sub_100075A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100075A84(_DWORD *a1, int a2, int *a3)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1329);
    uint64_t v6 = sub_100051E74(v11, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1330);
    char v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  int v8 = *a3;
  uint64_t result = sub_100075830((uint64_t)a1);
  *(_DWORD *)(result + 4 * a2) = v8;
  return result;
}

void sub_100075B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100075B74(int *a1, int *a2)
{
  uint64_t v3 = *a1;
  int v4 = *a2;
  if (v3 == a1[1])
  {
    int v5 = v3 + 1;
    sub_100075018(a1, v3 + 1);
    uint64_t result = sub_100075830((uint64_t)a1);
    *(_DWORD *)(result + 4 * v3) = v4;
  }
  else
  {
    uint64_t result = sub_100075830((uint64_t)a1);
    *(_DWORD *)(result + 4 * v3) = v4;
    int v5 = v3 + 1;
  }
  *a1 = v5;
  return result;
}

uint64_t sub_100075BE0(int *a1)
{
  uint64_t v2 = *a1;
  if (v2 == a1[1]) {
    sub_100075018(a1, v2 + 1);
  }
  uint64_t result = sub_100075830((uint64_t)a1) + 4 * v2;
  *a1 = v2 + 1;
  return result;
}

int *sub_100075C34(int *result)
{
  uint64_t v1 = result;
  int v2 = *result;
  if (*result <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1384);
    uint64_t v3 = sub_100051E74(v5, "CHECK failed: (current_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v3->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v5);
    int v2 = *v1;
  }
  int *v1 = v2 - 1;
  return result;
}

void sub_100075CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_100075CC8(int *result, int a2, int a3, int *a4)
{
  int v6 = a2;
  char v7 = result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1391);
    int v8 = sub_100051E74(v16, "CHECK failed: (start) >= (0): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1392);
  unint64_t v9 = sub_100051E74(v16, "CHECK failed: (num) >= (0): ");
  sub_100051FB0((uint64_t)&v15, (const char **)&v9->__r_.__value_.__l.__data_);
  uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
LABEL_6:
  if (a3 + v6 > *v7)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1393);
    char v10 = sub_100051E74(v16, "CHECK failed: (start + num) <= (this->current_size_): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v10->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
  }
  if (a4 && a3 >= 1)
  {
    uint64_t v11 = a3;
    int v12 = v6;
    do
    {
      uint64_t result = (int *)sub_1000753A0(v7, v12);
      *a4++ = *result;
      ++v12;
      --v11;
    }
    while (v11);
  }
  if (a3 >= 1)
  {
    for (int i = *v7; a3 + v6 < *v7; ++v6)
    {
      char v14 = (int *)sub_1000753A0(v7, a3 + v6);
      uint64_t result = (int *)sub_100075A84(v7, v6, v14);
      int i = *v7;
    }
    if (i >= 1) {
      *char v7 = i - a3;
    }
  }
  return result;
}

void sub_100075E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_100075E98(int *result, int a2)
{
  uint64_t v3 = result;
  int v4 = *result;
  if (*result < a2)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    int v5 = sub_100051E74(v7, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v7);
    int v4 = *v3;
  }
  if (v4 >= 1) {
    *uint64_t v3 = a2;
  }
  return result;
}

void sub_100075F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_100075F34(int *result, int *a2)
{
  uint64_t v3 = result;
  if (a2 == result)
  {
    sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    int v4 = sub_100051E74(v10, "CHECK failed: (&other) != (this): ");
    sub_100051FB0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_100075018(v3, *v3 + *a2);
    sub_1000751EC((uint64_t)v3, *a2);
    char v6 = (void *)sub_1000752C0(v3, v5);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_100051E74(v10, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v10);
    }
    int v8 = (const void *)sub_100075830((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_100076044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100076064(int *a1, int *a2)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1266);
    int v4 = sub_100051E74(v9, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v9);
  }
  int v5 = *a2;
  uint64_t result = sub_100075830((uint64_t)a1);
  uint64_t v7 = *a1;
  *a1 = v7 + 1;
  *(_DWORD *)(result + 4 * v7) = v5;
  return result;
}

void sub_1000760F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007610C(int *a1)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1272);
    int v2 = sub_100051E74(v7, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v7);
  }
  uint64_t v3 = sub_100075830((uint64_t)a1);
  uint64_t v4 = *a1;
  *a1 = v4 + 1;
  return v3 + 4 * v4;
}

void sub_100076194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000761AC(uint64_t result, int a2, _DWORD *a3)
{
  int v5 = (int *)result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1291);
    char v6 = sub_100051E74(v11, "CHECK failed: (new_size) >= (0): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    uint64_t result = sub_100051FB8((uint64_t)v11);
  }
  if (*v5 < a2)
  {
    sub_100075018(v5, a2);
    uint64_t v7 = (_DWORD *)(sub_100075830((uint64_t)v5) + 4 * *v5);
    uint64_t result = sub_100075830((uint64_t)v5);
    uint64_t v8 = result + 4 * a2 - (void)v7;
    if (v8 >= 1)
    {
      unint64_t v9 = ((unint64_t)v8 >> 2) + 1;
      do
      {
        *v7++ = *a3;
        --v9;
      }
      while (v9 > 1);
    }
  }
  int *v5 = a2;
  return result;
}

void sub_100076284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007629C(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_100075830((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      char v6 = (unint64_t *)(sub_100075830((uint64_t)a2) - 8);
    }
    else {
      char v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_1000755E4((uint64_t)a1, a2);
    }
    else
    {
      if (a2->n128_u32[1]) {
        uint64_t v7 = (unint64_t *)(sub_100075830((uint64_t)a2) - 8);
      }
      else {
        uint64_t v7 = &a2->n128_u64[1];
      }
      unint64_t v8 = *v7;
      v9.n128_u64[0] = 0;
      v9.n128_u64[1] = v8;
      sub_100075F34((int *)&v9, a1);
      *a1 = 0;
      sub_100075F34(a1, (int *)a2);
      if (&v9 != a2) {
        sub_1000755E4((uint64_t)a2, &v9);
      }
      sub_100075484((uint64_t)&v9);
    }
  }
}

void sub_1000763AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_1000763C0(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 != a2) {
    *(void *)&double result = sub_1000755E4(a1, a2).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000763D0(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_100075830(a1);
  uint64_t result = sub_100075830(a1);
  int v8 = *(_DWORD *)(v6 + 4 * a2);
  *(_DWORD *)(v6 + 4 * a2) = *(_DWORD *)(result + 4 * a3);
  *(_DWORD *)(result + 4 * a3) = v8;
  return result;
}

uint64_t sub_100076420(int *a1)
{
  return *((void *)a1 + 1) + 4 * *a1;
}

uint64_t sub_100076430(int *a1)
{
  return *((void *)a1 + 1) + 4 * *a1;
}

uint64_t sub_100076444(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 4);
  if ((int)v1 <= 0) {
    return 0;
  }
  else {
    return 4 * v1 + 8;
  }
}

unint64_t sub_10007645C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 4);
  if ((int)v1 <= 0) {
    unint64_t v2 = 0;
  }
  else {
    unint64_t v2 = 4 * v1 + 8;
  }
  if (v2 >> 31)
  {
    sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/message_lite.h", 113);
    uint64_t v3 = sub_100051E74(v6, "CHECK failed: (size) <= (static_cast<size_t>(2147483647)): ");
    sub_100051FB0((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v6);
  }
  return v2;
}

void sub_1000764DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000764F4(int *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 4);
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = a2 - v5;
  uint64_t v7 = *a1;
  int v8 = (unsigned char *)(v5 + 4 * v7);
  uint64_t v9 = v5 + 4 * (int)((unint64_t)v6 >> 2);
  int64_t v10 = v8 - v4;
  if (v8 != v4)
  {
    memmove((void *)(v5 + 4 * (int)((unint64_t)v6 >> 2)), v4, v8 - v4);
    uint64_t v5 = *((void *)a1 + 1);
    LODWORD(v7) = *a1;
  }
  unint64_t v11 = (unint64_t)(v9 + v10 - v5) >> 2;
  if ((int)v7 < (int)v11)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    int v12 = sub_100051E74(v15, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
    LODWORD(v7) = *a1;
  }
  if ((int)v7 >= 1) {
    *a1 = v11;
  }
  return *((void *)a1 + 1) + 4 * (int)(v6 >> 2);
}

void sub_1000765CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000765E4(int *a1, unsigned char *a2, unsigned char *__src)
{
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = (uint64_t)&a2[-v4];
  if (a2 == __src)
  {
    uint64_t v12 = (int)(v5 >> 2);
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (unsigned char *)(v4 + 4 * v6);
    uint64_t v8 = v4 + 4 * (int)((unint64_t)v5 >> 2);
    int64_t v9 = v7 - __src;
    if (v7 != __src)
    {
      memmove((void *)(v4 + 4 * (int)((unint64_t)v5 >> 2)), __src, v7 - __src);
      uint64_t v4 = *((void *)a1 + 1);
      LODWORD(v6) = *a1;
    }
    unint64_t v10 = (unint64_t)(v8 + v9 - v4) >> 2;
    if ((int)v6 < (int)v10)
    {
      sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
      unint64_t v11 = sub_100051E74(v15, "CHECK failed: (new_size) <= (current_size_): ");
      sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v15);
      LODWORD(v6) = *a1;
    }
    uint64_t v12 = (int)(v5 >> 2);
    if ((int)v6 >= 1) {
      *a1 = v10;
    }
  }
  return *((void *)a1 + 1) + 4 * v12;
}

void sub_1000766C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000766E0(uint64_t a1, int *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v4 = *a2;
  if (v4)
  {
    sub_100076810((int *)a1, v4);
    sub_1000769E4(a1, *a2);
    if (*(int *)a1 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
      uint64_t v5 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    uint64_t v6 = (void *)sub_100077014(a1);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      uint64_t v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    uint64_t v8 = (const void *)sub_100077014((uint64_t)a2);
    memcpy(v6, v8, 4 * *a2);
  }
  return a1;
}

void sub_1000767F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100076810(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    uint64_t v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_100077014((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            uint64_t v8 = sub_100051E74(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_100051FB0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_100051FB8((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (void *)(sub_100077014((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 4 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0x7FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
    char v13 = (void *)sub_10004E520(v6, v12);
    }
  }
  else
  {
    char v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_100077014((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_100077014((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_1000769CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000769E4(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    uint64_t v5 = sub_100051E74(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1000523B8(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_100051E74(v6, ", ");
    uint64_t v8 = sub_1000523B8(v7, *(_DWORD *)a1);
    sub_100051FB0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_100076A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100076AA4(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100077014((uint64_t)a1) + 4 * a2;
}

void sub_100076B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100076B84(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100077014((uint64_t)a1) + 4 * a2;
}

void sub_100076C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100076C68(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_100077014(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    uint64_t v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_100076CB0(uint64_t a1)
{
  return sub_100077014(a1) - 8;
}

int *sub_100076CD0(int *a1, int *a2)
{
  if (a1 != a2)
  {
    *a1 = 0;
    sub_100077718(a1, a2);
  }
  return a1;
}

int *sub_100076D08(int *result, int *a2)
{
  if (a2 != result)
  {
    *uint64_t result = 0;
    return sub_100077718(result, a2);
  }
  return result;
}

uint64_t sub_100076D1C(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_100077014((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_100077718((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_100076DC8(a1, a2);
  }
  return a1;
}

uint64_t sub_100076D98(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4)) {
    uint64_t v1 = sub_100077014(a1) - 8;
  }
  else {
    uint64_t v1 = a1 + 8;
  }
  return *(void *)v1;
}

__n128 sub_100076DC8(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 == a2)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1459);
    uint64_t v4 = sub_100051E74(v13, "CHECK failed: this != other: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 4)) {
    uint64_t v5 = (uint64_t *)(sub_100077014(a1) - 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(a1 + 8);
  }
  uint64_t v6 = *v5;
  if (a2->n128_u32[1]) {
    char v7 = (unint64_t *)(sub_100077014((uint64_t)a2) - 8);
  }
  else {
    char v7 = &a2->n128_u64[1];
  }
  if (v6 != *v7)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1460);
    uint64_t v8 = sub_100051E74(v13, "CHECK failed: GetArena() == other->GetArena(): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  unint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a2->n128_u64[0] = v9;
  a2->n128_u64[1] = v10;
  return result;
}

void sub_100076ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100076EF4(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_100077014((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_100077718((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_100076DC8(a1, a2);
  }
  return a1;
}

int *sub_100076F70(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_100077014((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      uint64_t v6 = (unint64_t *)(sub_100077014((uint64_t)a2) - 8);
    }
    else {
      uint64_t v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_100076DC8((uint64_t)a1, a2);
    }
    else
    {
      *a1 = 0;
      sub_100077718(a1, (int *)a2);
    }
  }
  return a1;
}

uint64_t sub_100077014(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_100051E74(v5, "CHECK failed: (total_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_100077088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000770A8(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1308);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1309);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100077014((uint64_t)a1) + 4 * a2;
}

void sub_100077168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100077188(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1315);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1316);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100077014((uint64_t)a1) + 4 * a2;
}

void sub_100077248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100077268(_DWORD *a1, int a2, int *a3)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1329);
    uint64_t v6 = sub_100051E74(v11, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1330);
    char v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  int v8 = *a3;
  uint64_t result = sub_100077014((uint64_t)a1);
  *(_DWORD *)(result + 4 * a2) = v8;
  return result;
}

void sub_100077338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100077358(int *a1, int *a2)
{
  uint64_t v3 = *a1;
  int v4 = *a2;
  if (v3 == a1[1])
  {
    int v5 = v3 + 1;
    sub_100076810(a1, v3 + 1);
    uint64_t result = sub_100077014((uint64_t)a1);
    *(_DWORD *)(result + 4 * v3) = v4;
  }
  else
  {
    uint64_t result = sub_100077014((uint64_t)a1);
    *(_DWORD *)(result + 4 * v3) = v4;
    int v5 = v3 + 1;
  }
  *a1 = v5;
  return result;
}

uint64_t sub_1000773C4(int *a1)
{
  uint64_t v2 = *a1;
  if (v2 == a1[1]) {
    sub_100076810(a1, v2 + 1);
  }
  uint64_t result = sub_100077014((uint64_t)a1) + 4 * v2;
  *a1 = v2 + 1;
  return result;
}

int *sub_100077418(int *result)
{
  uint64_t v1 = result;
  int v2 = *result;
  if (*result <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1384);
    uint64_t v3 = sub_100051E74(v5, "CHECK failed: (current_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v3->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v5);
    int v2 = *v1;
  }
  int *v1 = v2 - 1;
  return result;
}

void sub_100077494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1000774AC(int *result, int a2, int a3, int *a4)
{
  int v6 = a2;
  char v7 = result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1391);
    int v8 = sub_100051E74(v16, "CHECK failed: (start) >= (0): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1392);
  unint64_t v9 = sub_100051E74(v16, "CHECK failed: (num) >= (0): ");
  sub_100051FB0((uint64_t)&v15, (const char **)&v9->__r_.__value_.__l.__data_);
  uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
LABEL_6:
  if (a3 + v6 > *v7)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1393);
    char v10 = sub_100051E74(v16, "CHECK failed: (start + num) <= (this->current_size_): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v10->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
  }
  if (a4 && a3 >= 1)
  {
    uint64_t v11 = a3;
    int v12 = v6;
    do
    {
      uint64_t result = (int *)sub_100076B84(v7, v12);
      *a4++ = *result;
      ++v12;
      --v11;
    }
    while (v11);
  }
  if (a3 >= 1)
  {
    for (int i = *v7; a3 + v6 < *v7; ++v6)
    {
      char v14 = (int *)sub_100076B84(v7, a3 + v6);
      uint64_t result = (int *)sub_100077268(v7, v6, v14);
      int i = *v7;
    }
    if (i >= 1) {
      *char v7 = i - a3;
    }
  }
  return result;
}

void sub_100077654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_10007767C(int *result, int a2)
{
  uint64_t v3 = result;
  int v4 = *result;
  if (*result < a2)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    int v5 = sub_100051E74(v7, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v7);
    int v4 = *v3;
  }
  if (v4 >= 1) {
    *uint64_t v3 = a2;
  }
  return result;
}

void sub_100077700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_100077718(int *result, int *a2)
{
  uint64_t v3 = result;
  if (a2 == result)
  {
    sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    int v4 = sub_100051E74(v10, "CHECK failed: (&other) != (this): ");
    sub_100051FB0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_100076810(v3, *v3 + *a2);
    sub_1000769E4((uint64_t)v3, *a2);
    char v6 = (void *)sub_100076AA4(v3, v5);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_100051E74(v10, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v10);
    }
    int v8 = (const void *)sub_100077014((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_100077828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100077848(int *a1, int *a2)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1266);
    int v4 = sub_100051E74(v9, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v9);
  }
  int v5 = *a2;
  uint64_t result = sub_100077014((uint64_t)a1);
  uint64_t v7 = *a1;
  *a1 = v7 + 1;
  *(_DWORD *)(result + 4 * v7) = v5;
  return result;
}

void sub_1000778D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000778F0(int *a1)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1272);
    int v2 = sub_100051E74(v7, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v7);
  }
  uint64_t v3 = sub_100077014((uint64_t)a1);
  uint64_t v4 = *a1;
  *a1 = v4 + 1;
  return v3 + 4 * v4;
}

void sub_100077978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100077990(uint64_t result, int a2, _DWORD *a3)
{
  int v5 = (int *)result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1291);
    char v6 = sub_100051E74(v11, "CHECK failed: (new_size) >= (0): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    uint64_t result = sub_100051FB8((uint64_t)v11);
  }
  if (*v5 < a2)
  {
    sub_100076810(v5, a2);
    uint64_t v7 = (_DWORD *)(sub_100077014((uint64_t)v5) + 4 * *v5);
    uint64_t result = sub_100077014((uint64_t)v5);
    uint64_t v8 = result + 4 * a2 - (void)v7;
    if (v8 >= 1)
    {
      unint64_t v9 = ((unint64_t)v8 >> 2) + 1;
      do
      {
        *v7++ = *a3;
        --v9;
      }
      while (v9 > 1);
    }
  }
  int *v5 = a2;
  return result;
}

void sub_100077A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100077A80(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_100077014((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      char v6 = (unint64_t *)(sub_100077014((uint64_t)a2) - 8);
    }
    else {
      char v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_100076DC8((uint64_t)a1, a2);
    }
    else
    {
      if (a2->n128_u32[1]) {
        uint64_t v7 = (unint64_t *)(sub_100077014((uint64_t)a2) - 8);
      }
      else {
        uint64_t v7 = &a2->n128_u64[1];
      }
      unint64_t v8 = *v7;
      v9.n128_u64[0] = 0;
      v9.n128_u64[1] = v8;
      sub_100077718((int *)&v9, a1);
      *a1 = 0;
      sub_100077718(a1, (int *)a2);
      if (&v9 != a2) {
        sub_100076DC8((uint64_t)a2, &v9);
      }
      sub_100076C68((uint64_t)&v9);
    }
  }
}

void sub_100077B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_100077BA4(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 != a2) {
    *(void *)&double result = sub_100076DC8(a1, a2).n128_u64[0];
  }
  return result;
}

uint64_t sub_100077BB4(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_100077014(a1);
  uint64_t result = sub_100077014(a1);
  int v8 = *(_DWORD *)(v6 + 4 * a2);
  *(_DWORD *)(v6 + 4 * a2) = *(_DWORD *)(result + 4 * a3);
  *(_DWORD *)(result + 4 * a3) = v8;
  return result;
}

unint64_t sub_100077C04(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 4);
  if ((int)v1 <= 0) {
    unint64_t v2 = 0;
  }
  else {
    unint64_t v2 = 4 * v1 + 8;
  }
  if (v2 >> 31)
  {
    sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/message_lite.h", 113);
    uint64_t v3 = sub_100051E74(v6, "CHECK failed: (size) <= (static_cast<size_t>(2147483647)): ");
    sub_100051FB0((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v6);
  }
  return v2;
}

void sub_100077C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100077C9C(int *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 4);
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = a2 - v5;
  uint64_t v7 = *a1;
  int v8 = (unsigned char *)(v5 + 4 * v7);
  uint64_t v9 = v5 + 4 * (int)((unint64_t)v6 >> 2);
  int64_t v10 = v8 - v4;
  if (v8 != v4)
  {
    memmove((void *)(v5 + 4 * (int)((unint64_t)v6 >> 2)), v4, v8 - v4);
    uint64_t v5 = *((void *)a1 + 1);
    LODWORD(v7) = *a1;
  }
  unint64_t v11 = (unint64_t)(v9 + v10 - v5) >> 2;
  if ((int)v7 < (int)v11)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    int v12 = sub_100051E74(v15, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
    LODWORD(v7) = *a1;
  }
  if ((int)v7 >= 1) {
    *a1 = v11;
  }
  return *((void *)a1 + 1) + 4 * (int)(v6 >> 2);
}

void sub_100077D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100077D8C(int *a1, unsigned char *a2, unsigned char *__src)
{
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = (uint64_t)&a2[-v4];
  if (a2 == __src)
  {
    uint64_t v12 = (int)(v5 >> 2);
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (unsigned char *)(v4 + 4 * v6);
    uint64_t v8 = v4 + 4 * (int)((unint64_t)v5 >> 2);
    int64_t v9 = v7 - __src;
    if (v7 != __src)
    {
      memmove((void *)(v4 + 4 * (int)((unint64_t)v5 >> 2)), __src, v7 - __src);
      uint64_t v4 = *((void *)a1 + 1);
      LODWORD(v6) = *a1;
    }
    unint64_t v10 = (unint64_t)(v8 + v9 - v4) >> 2;
    if ((int)v6 < (int)v10)
    {
      sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
      unint64_t v11 = sub_100051E74(v15, "CHECK failed: (new_size) <= (current_size_): ");
      sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v15);
      LODWORD(v6) = *a1;
    }
    uint64_t v12 = (int)(v5 >> 2);
    if ((int)v6 >= 1) {
      *a1 = v10;
    }
  }
  return *((void *)a1 + 1) + 4 * v12;
}

void sub_100077E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100077E88(uint64_t a1, int *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v4 = *a2;
  if (v4)
  {
    sub_100077FB8((int *)a1, v4);
    sub_10007818C(a1, *a2);
    if (*(int *)a1 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
      uint64_t v5 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    uint64_t v6 = (void *)sub_1000787D0(a1);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      uint64_t v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    uint64_t v8 = (const void *)sub_1000787D0((uint64_t)a2);
    memcpy(v6, v8, 8 * *a2);
  }
  return a1;
}

void sub_100077F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100077FB8(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    uint64_t v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_1000787D0((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            uint64_t v8 = sub_100051E74(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_100051FB0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_100051FB8((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (void *)(sub_1000787D0((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 8 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0xFFFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
    char v13 = (void *)sub_10004E520(v6, v12);
    }
  }
  else
  {
    char v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_1000787D0((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_1000787D0((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_100078174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007818C(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    uint64_t v5 = sub_100051E74(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1000523B8(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_100051E74(v6, ", ");
    uint64_t v8 = sub_1000523B8(v7, *(_DWORD *)a1);
    sub_100051FB0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_100078234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10007824C(int a1, void *__dst, void *__src, int a4)
{
  return memcpy(__dst, __src, 8 * a4);
}

uint64_t sub_100078260(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_1000787D0((uint64_t)a1) + 8 * a2;
}

void sub_100078320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100078340(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_1000787D0((uint64_t)a1) + 8 * a2;
}

void sub_100078400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100078424(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_1000787D0(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    uint64_t v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_10007846C(uint64_t a1)
{
  return sub_1000787D0(a1) - 8;
}

int *sub_10007848C(int *a1, int *a2)
{
  if (a1 != a2)
  {
    *a1 = 0;
    sub_100078ED4(a1, a2);
  }
  return a1;
}

int *sub_1000784C4(int *result, int *a2)
{
  if (a2 != result)
  {
    *uint64_t result = 0;
    return sub_100078ED4(result, a2);
  }
  return result;
}

uint64_t sub_1000784D8(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_1000787D0((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_100078ED4((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_100078584(a1, a2);
  }
  return a1;
}

uint64_t sub_100078554(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4)) {
    uint64_t v1 = sub_1000787D0(a1) - 8;
  }
  else {
    uint64_t v1 = a1 + 8;
  }
  return *(void *)v1;
}

__n128 sub_100078584(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 == a2)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1459);
    uint64_t v4 = sub_100051E74(v13, "CHECK failed: this != other: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 4)) {
    uint64_t v5 = (uint64_t *)(sub_1000787D0(a1) - 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(a1 + 8);
  }
  uint64_t v6 = *v5;
  if (a2->n128_u32[1]) {
    char v7 = (unint64_t *)(sub_1000787D0((uint64_t)a2) - 8);
  }
  else {
    char v7 = &a2->n128_u64[1];
  }
  if (v6 != *v7)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1460);
    uint64_t v8 = sub_100051E74(v13, "CHECK failed: GetArena() == other->GetArena(): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  unint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a2->n128_u64[0] = v9;
  a2->n128_u64[1] = v10;
  return result;
}

void sub_100078690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000786B0(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_1000787D0((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_100078ED4((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_100078584(a1, a2);
  }
  return a1;
}

int *sub_10007872C(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_1000787D0((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      uint64_t v6 = (unint64_t *)(sub_1000787D0((uint64_t)a2) - 8);
    }
    else {
      uint64_t v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_100078584((uint64_t)a1, a2);
    }
    else
    {
      *a1 = 0;
      sub_100078ED4(a1, (int *)a2);
    }
  }
  return a1;
}

uint64_t sub_1000787D0(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_100051E74(v5, "CHECK failed: (total_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_100078844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100078864(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1308);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1309);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_1000787D0((uint64_t)a1) + 8 * a2;
}

void sub_100078924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100078944(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1315);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1316);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_1000787D0((uint64_t)a1) + 8 * a2;
}

void sub_100078A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100078A24(_DWORD *a1, int a2, uint64_t *a3)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1329);
    uint64_t v6 = sub_100051E74(v11, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1330);
    char v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  uint64_t v8 = *a3;
  uint64_t result = sub_1000787D0((uint64_t)a1);
  *(void *)(result + 8 * a2) = v8;
  return result;
}

void sub_100078AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100078B14(int *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  if (v3 == a1[1])
  {
    int v5 = v3 + 1;
    sub_100077FB8(a1, v3 + 1);
    uint64_t result = sub_1000787D0((uint64_t)a1);
    *(void *)(result + 8 * v3) = v4;
  }
  else
  {
    uint64_t result = sub_1000787D0((uint64_t)a1);
    *(void *)(result + 8 * v3) = v4;
    int v5 = v3 + 1;
  }
  *a1 = v5;
  return result;
}

uint64_t sub_100078B80(int *a1)
{
  uint64_t v2 = *a1;
  if (v2 == a1[1]) {
    sub_100077FB8(a1, v2 + 1);
  }
  uint64_t result = sub_1000787D0((uint64_t)a1) + 8 * v2;
  *a1 = v2 + 1;
  return result;
}

int *sub_100078BD4(int *result)
{
  uint64_t v1 = result;
  int v2 = *result;
  if (*result <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1384);
    uint64_t v3 = sub_100051E74(v5, "CHECK failed: (current_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v3->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v5);
    int v2 = *v1;
  }
  int *v1 = v2 - 1;
  return result;
}

void sub_100078C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_100078C68(int *result, int a2, int a3, void *a4)
{
  int v6 = a2;
  char v7 = result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1391);
    uint64_t v8 = sub_100051E74(v16, "CHECK failed: (start) >= (0): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1392);
  unint64_t v9 = sub_100051E74(v16, "CHECK failed: (num) >= (0): ");
  sub_100051FB0((uint64_t)&v15, (const char **)&v9->__r_.__value_.__l.__data_);
  uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
LABEL_6:
  if (a3 + v6 > *v7)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1393);
    char v10 = sub_100051E74(v16, "CHECK failed: (start + num) <= (this->current_size_): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v10->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
  }
  if (a4 && a3 >= 1)
  {
    uint64_t v11 = a3;
    int v12 = v6;
    do
    {
      uint64_t result = (int *)sub_100078340(v7, v12);
      *a4++ = *(void *)result;
      ++v12;
      --v11;
    }
    while (v11);
  }
  if (a3 >= 1)
  {
    for (int i = *v7; a3 + v6 < *v7; ++v6)
    {
      char v14 = (uint64_t *)sub_100078340(v7, a3 + v6);
      uint64_t result = (int *)sub_100078A24(v7, v6, v14);
      int i = *v7;
    }
    if (i >= 1) {
      *char v7 = i - a3;
    }
  }
  return result;
}

void sub_100078E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_100078E38(int *result, int a2)
{
  uint64_t v3 = result;
  int v4 = *result;
  if (*result < a2)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    int v5 = sub_100051E74(v7, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v7);
    int v4 = *v3;
  }
  if (v4 >= 1) {
    *uint64_t v3 = a2;
  }
  return result;
}

void sub_100078EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_100078ED4(int *result, int *a2)
{
  uint64_t v3 = result;
  if (a2 == result)
  {
    sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    int v4 = sub_100051E74(v10, "CHECK failed: (&other) != (this): ");
    sub_100051FB0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_100077FB8(v3, *v3 + *a2);
    sub_10007818C((uint64_t)v3, *a2);
    char v6 = (void *)sub_100078260(v3, v5);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_100051E74(v10, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v10);
    }
    uint64_t v8 = (const void *)sub_1000787D0((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_100078FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100079004(int *a1, uint64_t *a2)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1266);
    int v4 = sub_100051E74(v9, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v9);
  }
  uint64_t v5 = *a2;
  uint64_t result = sub_1000787D0((uint64_t)a1);
  uint64_t v7 = *a1;
  *a1 = v7 + 1;
  *(void *)(result + 8 * v7) = v5;
  return result;
}

void sub_100079094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000790AC(int *a1)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1272);
    int v2 = sub_100051E74(v7, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v7);
  }
  uint64_t v3 = sub_1000787D0((uint64_t)a1);
  uint64_t v4 = *a1;
  *a1 = v4 + 1;
  return v3 + 8 * v4;
}

void sub_100079134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007914C(uint64_t result, int a2, void *a3)
{
  uint64_t v5 = (int *)result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1291);
    char v6 = sub_100051E74(v11, "CHECK failed: (new_size) >= (0): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    uint64_t result = sub_100051FB8((uint64_t)v11);
  }
  if (*v5 < a2)
  {
    sub_100077FB8(v5, a2);
    uint64_t v7 = (void *)(sub_1000787D0((uint64_t)v5) + 8 * *v5);
    uint64_t result = sub_1000787D0((uint64_t)v5);
    uint64_t v8 = result + 8 * a2 - (void)v7;
    if (v8 >= 1)
    {
      unint64_t v9 = ((unint64_t)v8 >> 3) + 1;
      do
      {
        *v7++ = *a3;
        --v9;
      }
      while (v9 > 1);
    }
  }
  int *v5 = a2;
  return result;
}

void sub_100079224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007923C(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_1000787D0((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      char v6 = (unint64_t *)(sub_1000787D0((uint64_t)a2) - 8);
    }
    else {
      char v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_100078584((uint64_t)a1, a2);
    }
    else
    {
      if (a2->n128_u32[1]) {
        uint64_t v7 = (unint64_t *)(sub_1000787D0((uint64_t)a2) - 8);
      }
      else {
        uint64_t v7 = &a2->n128_u64[1];
      }
      unint64_t v8 = *v7;
      v9.n128_u64[0] = 0;
      v9.n128_u64[1] = v8;
      sub_100078ED4((int *)&v9, a1);
      *a1 = 0;
      sub_100078ED4(a1, (int *)a2);
      if (&v9 != a2) {
        sub_100078584((uint64_t)a2, &v9);
      }
      sub_100078424((uint64_t)&v9);
    }
  }
}

void sub_10007934C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_100079360(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 != a2) {
    *(void *)&double result = sub_100078584(a1, a2).n128_u64[0];
  }
  return result;
}

uint64_t sub_100079370(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_1000787D0(a1);
  uint64_t result = sub_1000787D0(a1);
  uint64_t v8 = *(void *)(v6 + 8 * a2);
  *(void *)(v6 + 8 * a2) = *(void *)(result + 8 * a3);
  *(void *)(result + 8 * a3) = v8;
  return result;
}

uint64_t sub_1000793C0(int *a1)
{
  return *((void *)a1 + 1) + 8 * *a1;
}

uint64_t sub_1000793D0(int *a1)
{
  return *((void *)a1 + 1) + 8 * *a1;
}

uint64_t sub_1000793E4(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 4);
  if ((int)v1 <= 0) {
    return 0;
  }
  else {
    return 8 * v1 + 8;
  }
}

unint64_t sub_1000793FC(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 4);
  if ((int)v1 <= 0) {
    unint64_t v2 = 0;
  }
  else {
    unint64_t v2 = 8 * v1 + 8;
  }
  if (v2 >> 31)
  {
    sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/message_lite.h", 113);
    uint64_t v3 = sub_100051E74(v6, "CHECK failed: (size) <= (static_cast<size_t>(2147483647)): ");
    sub_100051FB0((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v6);
  }
  return v2;
}

void sub_10007947C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100079494(int *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 8);
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = a2 - v5;
  uint64_t v7 = *a1;
  uint64_t v8 = (unsigned char *)(v5 + 8 * v7);
  uint64_t v9 = v5 + 8 * (int)((unint64_t)v6 >> 3);
  int64_t v10 = v8 - v4;
  if (v8 != v4)
  {
    memmove((void *)(v5 + 8 * (int)((unint64_t)v6 >> 3)), v4, v8 - v4);
    uint64_t v5 = *((void *)a1 + 1);
    LODWORD(v7) = *a1;
  }
  unint64_t v11 = (unint64_t)(v9 + v10 - v5) >> 3;
  if ((int)v7 < (int)v11)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    int v12 = sub_100051E74(v15, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
    LODWORD(v7) = *a1;
  }
  if ((int)v7 >= 1) {
    *a1 = v11;
  }
  return *((void *)a1 + 1) + 8 * (int)(v6 >> 3);
}

void sub_10007956C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100079584(int *a1, unsigned char *a2, unsigned char *__src)
{
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = (uint64_t)&a2[-v4];
  if (a2 == __src)
  {
    uint64_t v12 = (int)(v5 >> 3);
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (unsigned char *)(v4 + 8 * v6);
    uint64_t v8 = v4 + 8 * (int)((unint64_t)v5 >> 3);
    int64_t v9 = v7 - __src;
    if (v7 != __src)
    {
      memmove((void *)(v4 + 8 * (int)((unint64_t)v5 >> 3)), __src, v7 - __src);
      uint64_t v4 = *((void *)a1 + 1);
      LODWORD(v6) = *a1;
    }
    unint64_t v10 = (unint64_t)(v8 + v9 - v4) >> 3;
    if ((int)v6 < (int)v10)
    {
      sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
      unint64_t v11 = sub_100051E74(v15, "CHECK failed: (new_size) <= (current_size_): ");
      sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v15);
      LODWORD(v6) = *a1;
    }
    uint64_t v12 = (int)(v5 >> 3);
    if ((int)v6 >= 1) {
      *a1 = v10;
    }
  }
  return *((void *)a1 + 1) + 8 * v12;
}

void sub_100079668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100079680(uint64_t a1, int *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v4 = *a2;
  if (v4)
  {
    sub_1000797B0((int *)a1, v4);
    sub_100079984(a1, *a2);
    if (*(int *)a1 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
      uint64_t v5 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    uint64_t v6 = (void *)sub_100079FB4(a1);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      uint64_t v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    uint64_t v8 = (const void *)sub_100079FB4((uint64_t)a2);
    memcpy(v6, v8, 8 * *a2);
  }
  return a1;
}

void sub_100079790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000797B0(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    uint64_t v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_100079FB4((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            uint64_t v8 = sub_100051E74(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_100051FB0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_100051FB8((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (void *)(sub_100079FB4((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 8 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0xFFFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
    char v13 = (void *)sub_10004E520(v6, v12);
    }
  }
  else
  {
    char v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_100079FB4((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_100079FB4((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_10007996C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100079984(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    uint64_t v5 = sub_100051E74(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1000523B8(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_100051E74(v6, ", ");
    uint64_t v8 = sub_1000523B8(v7, *(_DWORD *)a1);
    sub_100051FB0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_100079A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100079A44(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100079FB4((uint64_t)a1) + 8 * a2;
}

void sub_100079B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100079B24(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100079FB4((uint64_t)a1) + 8 * a2;
}

void sub_100079BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100079C08(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_100079FB4(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    uint64_t v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_100079C50(uint64_t a1)
{
  return sub_100079FB4(a1) - 8;
}

int *sub_100079C70(int *a1, int *a2)
{
  if (a1 != a2)
  {
    *a1 = 0;
    sub_10007A6B8(a1, a2);
  }
  return a1;
}

int *sub_100079CA8(int *result, int *a2)
{
  if (a2 != result)
  {
    *uint64_t result = 0;
    return sub_10007A6B8(result, a2);
  }
  return result;
}

uint64_t sub_100079CBC(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_100079FB4((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_10007A6B8((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_100079D68(a1, a2);
  }
  return a1;
}

uint64_t sub_100079D38(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4)) {
    uint64_t v1 = sub_100079FB4(a1) - 8;
  }
  else {
    uint64_t v1 = a1 + 8;
  }
  return *(void *)v1;
}

__n128 sub_100079D68(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 == a2)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1459);
    uint64_t v4 = sub_100051E74(v13, "CHECK failed: this != other: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 4)) {
    uint64_t v5 = (uint64_t *)(sub_100079FB4(a1) - 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(a1 + 8);
  }
  uint64_t v6 = *v5;
  if (a2->n128_u32[1]) {
    char v7 = (unint64_t *)(sub_100079FB4((uint64_t)a2) - 8);
  }
  else {
    char v7 = &a2->n128_u64[1];
  }
  if (v6 != *v7)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1460);
    uint64_t v8 = sub_100051E74(v13, "CHECK failed: GetArena() == other->GetArena(): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  unint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a2->n128_u64[0] = v9;
  a2->n128_u64[1] = v10;
  return result;
}

void sub_100079E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100079E94(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_100079FB4((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_10007A6B8((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_100079D68(a1, a2);
  }
  return a1;
}

int *sub_100079F10(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_100079FB4((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      uint64_t v6 = (unint64_t *)(sub_100079FB4((uint64_t)a2) - 8);
    }
    else {
      uint64_t v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_100079D68((uint64_t)a1, a2);
    }
    else
    {
      *a1 = 0;
      sub_10007A6B8(a1, (int *)a2);
    }
  }
  return a1;
}

uint64_t sub_100079FB4(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_100051E74(v5, "CHECK failed: (total_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_10007A028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A048(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1308);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1309);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100079FB4((uint64_t)a1) + 8 * a2;
}

void sub_10007A108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A128(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1315);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1316);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_100079FB4((uint64_t)a1) + 8 * a2;
}

void sub_10007A1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A208(_DWORD *a1, int a2, uint64_t *a3)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1329);
    uint64_t v6 = sub_100051E74(v11, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1330);
    char v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  uint64_t v8 = *a3;
  uint64_t result = sub_100079FB4((uint64_t)a1);
  *(void *)(result + 8 * a2) = v8;
  return result;
}

void sub_10007A2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A2F8(int *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  if (v3 == a1[1])
  {
    int v5 = v3 + 1;
    sub_1000797B0(a1, v3 + 1);
    uint64_t result = sub_100079FB4((uint64_t)a1);
    *(void *)(result + 8 * v3) = v4;
  }
  else
  {
    uint64_t result = sub_100079FB4((uint64_t)a1);
    *(void *)(result + 8 * v3) = v4;
    int v5 = v3 + 1;
  }
  *a1 = v5;
  return result;
}

uint64_t sub_10007A364(int *a1)
{
  uint64_t v2 = *a1;
  if (v2 == a1[1]) {
    sub_1000797B0(a1, v2 + 1);
  }
  uint64_t result = sub_100079FB4((uint64_t)a1) + 8 * v2;
  *a1 = v2 + 1;
  return result;
}

int *sub_10007A3B8(int *result)
{
  uint64_t v1 = result;
  int v2 = *result;
  if (*result <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1384);
    uint64_t v3 = sub_100051E74(v5, "CHECK failed: (current_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v3->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v5);
    int v2 = *v1;
  }
  int *v1 = v2 - 1;
  return result;
}

void sub_10007A434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_10007A44C(int *result, int a2, int a3, void *a4)
{
  int v6 = a2;
  char v7 = result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1391);
    uint64_t v8 = sub_100051E74(v16, "CHECK failed: (start) >= (0): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1392);
  unint64_t v9 = sub_100051E74(v16, "CHECK failed: (num) >= (0): ");
  sub_100051FB0((uint64_t)&v15, (const char **)&v9->__r_.__value_.__l.__data_);
  uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
LABEL_6:
  if (a3 + v6 > *v7)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1393);
    char v10 = sub_100051E74(v16, "CHECK failed: (start + num) <= (this->current_size_): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v10->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
  }
  if (a4 && a3 >= 1)
  {
    uint64_t v11 = a3;
    int v12 = v6;
    do
    {
      uint64_t result = (int *)sub_100079B24(v7, v12);
      *a4++ = *(void *)result;
      ++v12;
      --v11;
    }
    while (v11);
  }
  if (a3 >= 1)
  {
    for (int i = *v7; a3 + v6 < *v7; ++v6)
    {
      char v14 = (uint64_t *)sub_100079B24(v7, a3 + v6);
      uint64_t result = (int *)sub_10007A208(v7, v6, v14);
      int i = *v7;
    }
    if (i >= 1) {
      *char v7 = i - a3;
    }
  }
  return result;
}

void sub_10007A5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_10007A61C(int *result, int a2)
{
  uint64_t v3 = result;
  int v4 = *result;
  if (*result < a2)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    int v5 = sub_100051E74(v7, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v7);
    int v4 = *v3;
  }
  if (v4 >= 1) {
    *uint64_t v3 = a2;
  }
  return result;
}

void sub_10007A6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_10007A6B8(int *result, int *a2)
{
  uint64_t v3 = result;
  if (a2 == result)
  {
    sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    int v4 = sub_100051E74(v10, "CHECK failed: (&other) != (this): ");
    sub_100051FB0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_1000797B0(v3, *v3 + *a2);
    sub_100079984((uint64_t)v3, *a2);
    char v6 = (void *)sub_100079A44(v3, v5);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_100051E74(v10, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v10);
    }
    uint64_t v8 = (const void *)sub_100079FB4((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_10007A7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A7E8(int *a1, uint64_t *a2)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1266);
    int v4 = sub_100051E74(v9, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v9);
  }
  uint64_t v5 = *a2;
  uint64_t result = sub_100079FB4((uint64_t)a1);
  uint64_t v7 = *a1;
  *a1 = v7 + 1;
  *(void *)(result + 8 * v7) = v5;
  return result;
}

void sub_10007A878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A890(int *a1)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1272);
    int v2 = sub_100051E74(v7, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v7);
  }
  uint64_t v3 = sub_100079FB4((uint64_t)a1);
  uint64_t v4 = *a1;
  *a1 = v4 + 1;
  return v3 + 8 * v4;
}

void sub_10007A918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A930(uint64_t result, int a2, void *a3)
{
  uint64_t v5 = (int *)result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1291);
    char v6 = sub_100051E74(v11, "CHECK failed: (new_size) >= (0): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    uint64_t result = sub_100051FB8((uint64_t)v11);
  }
  if (*v5 < a2)
  {
    sub_1000797B0(v5, a2);
    uint64_t v7 = (void *)(sub_100079FB4((uint64_t)v5) + 8 * *v5);
    uint64_t result = sub_100079FB4((uint64_t)v5);
    uint64_t v8 = result + 8 * a2 - (void)v7;
    if (v8 >= 1)
    {
      unint64_t v9 = ((unint64_t)v8 >> 3) + 1;
      do
      {
        *v7++ = *a3;
        --v9;
      }
      while (v9 > 1);
    }
  }
  int *v5 = a2;
  return result;
}

void sub_10007AA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007AA20(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_100079FB4((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      char v6 = (unint64_t *)(sub_100079FB4((uint64_t)a2) - 8);
    }
    else {
      char v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_100079D68((uint64_t)a1, a2);
    }
    else
    {
      if (a2->n128_u32[1]) {
        uint64_t v7 = (unint64_t *)(sub_100079FB4((uint64_t)a2) - 8);
      }
      else {
        uint64_t v7 = &a2->n128_u64[1];
      }
      unint64_t v8 = *v7;
      v9.n128_u64[0] = 0;
      v9.n128_u64[1] = v8;
      sub_10007A6B8((int *)&v9, a1);
      *a1 = 0;
      sub_10007A6B8(a1, (int *)a2);
      if (&v9 != a2) {
        sub_100079D68((uint64_t)a2, &v9);
      }
      sub_100079C08((uint64_t)&v9);
    }
  }
}

void sub_10007AB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_10007AB44(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 != a2) {
    *(void *)&double result = sub_100079D68(a1, a2).n128_u64[0];
  }
  return result;
}

uint64_t sub_10007AB54(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_100079FB4(a1);
  uint64_t result = sub_100079FB4(a1);
  uint64_t v8 = *(void *)(v6 + 8 * a2);
  *(void *)(v6 + 8 * a2) = *(void *)(result + 8 * a3);
  *(void *)(result + 8 * a3) = v8;
  return result;
}

unint64_t sub_10007ABA4(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 4);
  if ((int)v1 <= 0) {
    unint64_t v2 = 0;
  }
  else {
    unint64_t v2 = 8 * v1 + 8;
  }
  if (v2 >> 31)
  {
    sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/message_lite.h", 113);
    uint64_t v3 = sub_100051E74(v6, "CHECK failed: (size) <= (static_cast<size_t>(2147483647)): ");
    sub_100051FB0((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v6);
  }
  return v2;
}

void sub_10007AC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007AC3C(int *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 8);
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = a2 - v5;
  uint64_t v7 = *a1;
  uint64_t v8 = (unsigned char *)(v5 + 8 * v7);
  uint64_t v9 = v5 + 8 * (int)((unint64_t)v6 >> 3);
  int64_t v10 = v8 - v4;
  if (v8 != v4)
  {
    memmove((void *)(v5 + 8 * (int)((unint64_t)v6 >> 3)), v4, v8 - v4);
    uint64_t v5 = *((void *)a1 + 1);
    LODWORD(v7) = *a1;
  }
  unint64_t v11 = (unint64_t)(v9 + v10 - v5) >> 3;
  if ((int)v7 < (int)v11)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    int v12 = sub_100051E74(v15, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
    LODWORD(v7) = *a1;
  }
  if ((int)v7 >= 1) {
    *a1 = v11;
  }
  return *((void *)a1 + 1) + 8 * (int)(v6 >> 3);
}

void sub_10007AD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007AD2C(int *a1, unsigned char *a2, unsigned char *__src)
{
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = (uint64_t)&a2[-v4];
  if (a2 == __src)
  {
    uint64_t v12 = (int)(v5 >> 3);
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (unsigned char *)(v4 + 8 * v6);
    uint64_t v8 = v4 + 8 * (int)((unint64_t)v5 >> 3);
    int64_t v9 = v7 - __src;
    if (v7 != __src)
    {
      memmove((void *)(v4 + 8 * (int)((unint64_t)v5 >> 3)), __src, v7 - __src);
      uint64_t v4 = *((void *)a1 + 1);
      LODWORD(v6) = *a1;
    }
    unint64_t v10 = (unint64_t)(v8 + v9 - v4) >> 3;
    if ((int)v6 < (int)v10)
    {
      sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
      unint64_t v11 = sub_100051E74(v15, "CHECK failed: (new_size) <= (current_size_): ");
      sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v15);
      LODWORD(v6) = *a1;
    }
    uint64_t v12 = (int)(v5 >> 3);
    if ((int)v6 >= 1) {
      *a1 = v10;
    }
  }
  return *((void *)a1 + 1) + 8 * v12;
}

void sub_10007AE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007AE28(uint64_t a1, int *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v4 = *a2;
  if (v4)
  {
    sub_10007AF58((int *)a1, v4);
    sub_10007B12C(a1, *a2);
    if (*(int *)a1 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
      uint64_t v5 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    uint64_t v6 = (void *)sub_10007B75C(a1);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      uint64_t v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    uint64_t v8 = (const void *)sub_10007B75C((uint64_t)a2);
    memcpy(v6, v8, 4 * *a2);
  }
  return a1;
}

void sub_10007AF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007AF58(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    uint64_t v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_10007B75C((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            uint64_t v8 = sub_100051E74(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_100051FB0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_100051FB8((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (void *)(sub_10007B75C((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 4 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0x7FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
    char v13 = (void *)sub_10004E520(v6, v12);
    }
  }
  else
  {
    char v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_10007B75C((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_10007B75C((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_10007B114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B12C(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    uint64_t v5 = sub_100051E74(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1000523B8(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_100051E74(v6, ", ");
    uint64_t v8 = sub_1000523B8(v7, *(_DWORD *)a1);
    sub_100051FB0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_10007B1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B1EC(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_10007B75C((uint64_t)a1) + 4 * a2;
}

void sub_10007B2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B2CC(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_10007B75C((uint64_t)a1) + 4 * a2;
}

void sub_10007B38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B3B0(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_10007B75C(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    uint64_t v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_10007B3F8(uint64_t a1)
{
  return sub_10007B75C(a1) - 8;
}

int *sub_10007B418(int *a1, int *a2)
{
  if (a1 != a2)
  {
    *a1 = 0;
    sub_10007BE70(a1, a2);
  }
  return a1;
}

int *sub_10007B450(int *result, int *a2)
{
  if (a2 != result)
  {
    *uint64_t result = 0;
    return sub_10007BE70(result, a2);
  }
  return result;
}

uint64_t sub_10007B464(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_10007B75C((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_10007BE70((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_10007B510(a1, a2);
  }
  return a1;
}

uint64_t sub_10007B4E0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4)) {
    uint64_t v1 = sub_10007B75C(a1) - 8;
  }
  else {
    uint64_t v1 = a1 + 8;
  }
  return *(void *)v1;
}

__n128 sub_10007B510(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 == a2)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1459);
    uint64_t v4 = sub_100051E74(v13, "CHECK failed: this != other: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 4)) {
    uint64_t v5 = (uint64_t *)(sub_10007B75C(a1) - 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(a1 + 8);
  }
  uint64_t v6 = *v5;
  if (a2->n128_u32[1]) {
    char v7 = (unint64_t *)(sub_10007B75C((uint64_t)a2) - 8);
  }
  else {
    char v7 = &a2->n128_u64[1];
  }
  if (v6 != *v7)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1460);
    uint64_t v8 = sub_100051E74(v13, "CHECK failed: GetArena() == other->GetArena(): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  unint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a2->n128_u64[0] = v9;
  a2->n128_u64[1] = v10;
  return result;
}

void sub_10007B61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B63C(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_10007B75C((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_10007BE70((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_10007B510(a1, a2);
  }
  return a1;
}

int *sub_10007B6B8(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_10007B75C((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      uint64_t v6 = (unint64_t *)(sub_10007B75C((uint64_t)a2) - 8);
    }
    else {
      uint64_t v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_10007B510((uint64_t)a1, a2);
    }
    else
    {
      *a1 = 0;
      sub_10007BE70(a1, (int *)a2);
    }
  }
  return a1;
}

uint64_t sub_10007B75C(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_100051E74(v5, "CHECK failed: (total_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_10007B7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B7F0(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1308);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1309);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_10007B75C((uint64_t)a1) + 4 * a2;
}

void sub_10007B8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B8D0(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1315);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1316);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_10007B75C((uint64_t)a1) + 4 * a2;
}

void sub_10007B990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B9B0(_DWORD *a1, int a2, int *a3)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1329);
    uint64_t v6 = sub_100051E74(v11, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1330);
    char v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  int v8 = *a3;
  uint64_t result = sub_10007B75C((uint64_t)a1);
  *(_DWORD *)(result + 4 * a2) = v8;
  return result;
}

void sub_10007BA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007BAA8(int *a1, int *a2)
{
  uint64_t v3 = *a1;
  int v4 = *a2;
  if (v3 == a1[1])
  {
    int v5 = v3 + 1;
    sub_10007AF58(a1, v3 + 1);
    uint64_t result = sub_10007B75C((uint64_t)a1);
    *(_DWORD *)(result + 4 * v3) = v4;
  }
  else
  {
    uint64_t result = sub_10007B75C((uint64_t)a1);
    *(_DWORD *)(result + 4 * v3) = v4;
    int v5 = v3 + 1;
  }
  *a1 = v5;
  return result;
}

uint64_t sub_10007BB1C(int *a1)
{
  uint64_t v2 = *a1;
  if (v2 == a1[1]) {
    sub_10007AF58(a1, v2 + 1);
  }
  uint64_t result = sub_10007B75C((uint64_t)a1) + 4 * v2;
  *a1 = v2 + 1;
  return result;
}

int *sub_10007BB70(int *result)
{
  uint64_t v1 = result;
  int v2 = *result;
  if (*result <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1384);
    uint64_t v3 = sub_100051E74(v5, "CHECK failed: (current_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v3->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v5);
    int v2 = *v1;
  }
  int *v1 = v2 - 1;
  return result;
}

void sub_10007BBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_10007BC04(int *result, int a2, int a3, int *a4)
{
  int v6 = a2;
  char v7 = result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1391);
    int v8 = sub_100051E74(v16, "CHECK failed: (start) >= (0): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1392);
  unint64_t v9 = sub_100051E74(v16, "CHECK failed: (num) >= (0): ");
  sub_100051FB0((uint64_t)&v15, (const char **)&v9->__r_.__value_.__l.__data_);
  uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
LABEL_6:
  if (a3 + v6 > *v7)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1393);
    char v10 = sub_100051E74(v16, "CHECK failed: (start + num) <= (this->current_size_): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v10->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
  }
  if (a4 && a3 >= 1)
  {
    uint64_t v11 = a3;
    int v12 = v6;
    do
    {
      uint64_t result = (int *)sub_10007B2CC(v7, v12);
      *a4++ = *result;
      ++v12;
      --v11;
    }
    while (v11);
  }
  if (a3 >= 1)
  {
    for (int i = *v7; a3 + v6 < *v7; ++v6)
    {
      char v14 = (int *)sub_10007B2CC(v7, a3 + v6);
      uint64_t result = (int *)sub_10007B9B0(v7, v6, v14);
      int i = *v7;
    }
    if (i >= 1) {
      *char v7 = i - a3;
    }
  }
  return result;
}

void sub_10007BDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_10007BDD4(int *result, int a2)
{
  uint64_t v3 = result;
  int v4 = *result;
  if (*result < a2)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    int v5 = sub_100051E74(v7, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v7);
    int v4 = *v3;
  }
  if (v4 >= 1) {
    *uint64_t v3 = a2;
  }
  return result;
}

void sub_10007BE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_10007BE70(int *result, int *a2)
{
  uint64_t v3 = result;
  if (a2 == result)
  {
    sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    int v4 = sub_100051E74(v10, "CHECK failed: (&other) != (this): ");
    sub_100051FB0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_10007AF58(v3, *v3 + *a2);
    sub_10007B12C((uint64_t)v3, *a2);
    char v6 = (void *)sub_10007B1EC(v3, v5);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_100051E74(v10, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v10);
    }
    int v8 = (const void *)sub_10007B75C((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_10007BF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007BFA0(int *a1, int *a2)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1266);
    int v4 = sub_100051E74(v9, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v9);
  }
  int v5 = *a2;
  uint64_t result = sub_10007B75C((uint64_t)a1);
  uint64_t v7 = *a1;
  *a1 = v7 + 1;
  *(_DWORD *)(result + 4 * v7) = v5;
  return result;
}

void sub_10007C038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C050(int *a1)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1272);
    int v2 = sub_100051E74(v7, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v7);
  }
  uint64_t v3 = sub_10007B75C((uint64_t)a1);
  uint64_t v4 = *a1;
  *a1 = v4 + 1;
  return v3 + 4 * v4;
}

void sub_10007C0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C0F0(uint64_t result, int a2, _DWORD *a3)
{
  int v5 = (int *)result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1291);
    char v6 = sub_100051E74(v11, "CHECK failed: (new_size) >= (0): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    uint64_t result = sub_100051FB8((uint64_t)v11);
  }
  if (*v5 < a2)
  {
    sub_10007AF58(v5, a2);
    uint64_t v7 = (_DWORD *)(sub_10007B75C((uint64_t)v5) + 4 * *v5);
    uint64_t result = sub_10007B75C((uint64_t)v5);
    uint64_t v8 = result + 4 * a2 - (void)v7;
    if (v8 >= 1)
    {
      unint64_t v9 = ((unint64_t)v8 >> 2) + 1;
      do
      {
        *v7++ = *a3;
        --v9;
      }
      while (v9 > 1);
    }
  }
  int *v5 = a2;
  return result;
}

void sub_10007C1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007C1E0(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_10007B75C((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      char v6 = (unint64_t *)(sub_10007B75C((uint64_t)a2) - 8);
    }
    else {
      char v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_10007B510((uint64_t)a1, a2);
    }
    else
    {
      if (a2->n128_u32[1]) {
        uint64_t v7 = (unint64_t *)(sub_10007B75C((uint64_t)a2) - 8);
      }
      else {
        uint64_t v7 = &a2->n128_u64[1];
      }
      unint64_t v8 = *v7;
      v9.n128_u64[0] = 0;
      v9.n128_u64[1] = v8;
      sub_10007BE70((int *)&v9, a1);
      *a1 = 0;
      sub_10007BE70(a1, (int *)a2);
      if (&v9 != a2) {
        sub_10007B510((uint64_t)a2, &v9);
      }
      sub_10007B3B0((uint64_t)&v9);
    }
  }
}

void sub_10007C2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_10007C304(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 != a2) {
    *(void *)&double result = sub_10007B510(a1, a2).n128_u64[0];
  }
  return result;
}

float sub_10007C314(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_10007B75C(a1);
  uint64_t v7 = sub_10007B75C(a1);
  float result = *(float *)(v6 + 4 * a2);
  *(_DWORD *)(v6 + 4 * a2) = *(_DWORD *)(v7 + 4 * a3);
  *(float *)(v7 + 4 * a3) = result;
  return result;
}

unint64_t sub_10007C364(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 4);
  if ((int)v1 <= 0) {
    unint64_t v2 = 0;
  }
  else {
    unint64_t v2 = 4 * v1 + 8;
  }
  if (v2 >> 31)
  {
    sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/message_lite.h", 113);
    uint64_t v3 = sub_100051E74(v6, "CHECK failed: (size) <= (static_cast<size_t>(2147483647)): ");
    sub_100051FB0((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v6);
  }
  return v2;
}

void sub_10007C3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C3FC(int *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 4);
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = a2 - v5;
  uint64_t v7 = *a1;
  unint64_t v8 = (unsigned char *)(v5 + 4 * v7);
  uint64_t v9 = v5 + 4 * (int)((unint64_t)v6 >> 2);
  int64_t v10 = v8 - v4;
  if (v8 != v4)
  {
    memmove((void *)(v5 + 4 * (int)((unint64_t)v6 >> 2)), v4, v8 - v4);
    uint64_t v5 = *((void *)a1 + 1);
    LODWORD(v7) = *a1;
  }
  unint64_t v11 = (unint64_t)(v9 + v10 - v5) >> 2;
  if ((int)v7 < (int)v11)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    int v12 = sub_100051E74(v15, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
    LODWORD(v7) = *a1;
  }
  if ((int)v7 >= 1) {
    *a1 = v11;
  }
  return *((void *)a1 + 1) + 4 * (int)(v6 >> 2);
}

void sub_10007C4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C4EC(int *a1, unsigned char *a2, unsigned char *__src)
{
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = (uint64_t)&a2[-v4];
  if (a2 == __src)
  {
    uint64_t v12 = (int)(v5 >> 2);
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (unsigned char *)(v4 + 4 * v6);
    uint64_t v8 = v4 + 4 * (int)((unint64_t)v5 >> 2);
    int64_t v9 = v7 - __src;
    if (v7 != __src)
    {
      memmove((void *)(v4 + 4 * (int)((unint64_t)v5 >> 2)), __src, v7 - __src);
      uint64_t v4 = *((void *)a1 + 1);
      LODWORD(v6) = *a1;
    }
    unint64_t v10 = (unint64_t)(v8 + v9 - v4) >> 2;
    if ((int)v6 < (int)v10)
    {
      sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
      unint64_t v11 = sub_100051E74(v15, "CHECK failed: (new_size) <= (current_size_): ");
      sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v15);
      LODWORD(v6) = *a1;
    }
    uint64_t v12 = (int)(v5 >> 2);
    if ((int)v6 >= 1) {
      *a1 = v10;
    }
  }
  return *((void *)a1 + 1) + 4 * v12;
}

void sub_10007C5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C5E8(uint64_t a1, int *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v4 = *a2;
  if (v4)
  {
    sub_10007C718((int *)a1, v4);
    sub_10007C8EC(a1, *a2);
    if (*(int *)a1 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
      uint64_t v5 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    uint64_t v6 = (void *)sub_10007CF1C(a1);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      uint64_t v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v11);
    }
    uint64_t v8 = (const void *)sub_10007CF1C((uint64_t)a2);
    memcpy(v6, v8, 8 * *a2);
  }
  return a1;
}

void sub_10007C6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007C718(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    uint64_t v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_10007CF1C((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            uint64_t v8 = sub_100051E74(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_100051FB0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_100051FB8((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (void *)(sub_10007CF1C((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 8 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0xFFFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
    char v13 = (void *)sub_10004E520(v6, v12);
    }
  }
  else
  {
    char v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_10007CF1C((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_10007CF1C((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_10007C8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C8EC(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    uint64_t v5 = sub_100051E74(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1000523B8(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_100051E74(v6, ", ");
    uint64_t v8 = sub_1000523B8(v7, *(_DWORD *)a1);
    sub_100051FB0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_10007C994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C9AC(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_10007CF1C((uint64_t)a1) + 8 * a2;
}

void sub_10007CA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007CA8C(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_10007CF1C((uint64_t)a1) + 8 * a2;
}

void sub_10007CB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007CB70(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_10007CF1C(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    uint64_t v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_10007CBB8(uint64_t a1)
{
  return sub_10007CF1C(a1) - 8;
}

int *sub_10007CBD8(int *a1, int *a2)
{
  if (a1 != a2)
  {
    *a1 = 0;
    sub_10007D630(a1, a2);
  }
  return a1;
}

int *sub_10007CC10(int *result, int *a2)
{
  if (a2 != result)
  {
    *uint64_t result = 0;
    return sub_10007D630(result, a2);
  }
  return result;
}

uint64_t sub_10007CC24(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_10007CF1C((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_10007D630((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_10007CCD0(a1, a2);
  }
  return a1;
}

uint64_t sub_10007CCA0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4)) {
    uint64_t v1 = sub_10007CF1C(a1) - 8;
  }
  else {
    uint64_t v1 = a1 + 8;
  }
  return *(void *)v1;
}

__n128 sub_10007CCD0(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 == a2)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1459);
    uint64_t v4 = sub_100051E74(v13, "CHECK failed: this != other: ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 4)) {
    uint64_t v5 = (uint64_t *)(sub_10007CF1C(a1) - 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(a1 + 8);
  }
  uint64_t v6 = *v5;
  if (a2->n128_u32[1]) {
    char v7 = (unint64_t *)(sub_10007CF1C((uint64_t)a2) - 8);
  }
  else {
    char v7 = &a2->n128_u64[1];
  }
  if (v6 != *v7)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1460);
    uint64_t v8 = sub_100051E74(v13, "CHECK failed: GetArena() == other->GetArena(): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  unint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a2->n128_u64[0] = v9;
  a2->n128_u64[1] = v10;
  return result;
}

void sub_10007CDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007CDFC(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2->n128_u32[1]) {
    uint64_t v4 = (unint64_t *)(sub_10007CF1C((uint64_t)a2) - 8);
  }
  else {
    uint64_t v4 = &a2->n128_u64[1];
  }
  if (*v4)
  {
    if (a2 != (__n128 *)a1)
    {
      *(_DWORD *)a1 = 0;
      sub_10007D630((int *)a1, (int *)a2);
    }
  }
  else
  {
    sub_10007CCD0(a1, a2);
  }
  return a1;
}

int *sub_10007CE78(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_10007CF1C((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      uint64_t v6 = (unint64_t *)(sub_10007CF1C((uint64_t)a2) - 8);
    }
    else {
      uint64_t v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_10007CCD0((uint64_t)a1, a2);
    }
    else
    {
      *a1 = 0;
      sub_10007D630(a1, (int *)a2);
    }
  }
  return a1;
}

uint64_t sub_10007CF1C(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_100051E74(v5, "CHECK failed: (total_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_10007CF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007CFB0(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1308);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1309);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_10007CF1C((uint64_t)a1) + 8 * a2;
}

void sub_10007D070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D090(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1315);
    char v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1316);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return sub_10007CF1C((uint64_t)a1) + 8 * a2;
}

void sub_10007D150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D170(_DWORD *a1, int a2, uint64_t *a3)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1329);
    uint64_t v6 = sub_100051E74(v11, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  if (*a1 <= a2)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1330);
    char v7 = sub_100051E74(v11, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v11);
  }
  uint64_t v8 = *a3;
  uint64_t result = sub_10007CF1C((uint64_t)a1);
  *(void *)(result + 8 * a2) = v8;
  return result;
}

void sub_10007D248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D268(int *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  if (v3 == a1[1])
  {
    int v5 = v3 + 1;
    sub_10007C718(a1, v3 + 1);
    uint64_t result = sub_10007CF1C((uint64_t)a1);
    *(void *)(result + 8 * v3) = v4;
  }
  else
  {
    uint64_t result = sub_10007CF1C((uint64_t)a1);
    *(void *)(result + 8 * v3) = v4;
    int v5 = v3 + 1;
  }
  *a1 = v5;
  return result;
}

uint64_t sub_10007D2DC(int *a1)
{
  uint64_t v2 = *a1;
  if (v2 == a1[1]) {
    sub_10007C718(a1, v2 + 1);
  }
  uint64_t result = sub_10007CF1C((uint64_t)a1) + 8 * v2;
  *a1 = v2 + 1;
  return result;
}

int *sub_10007D330(int *result)
{
  uint64_t v1 = result;
  int v2 = *result;
  if (*result <= 0)
  {
    sub_100051E5C((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1384);
    uint64_t v3 = sub_100051E74(v5, "CHECK failed: (current_size_) > (0): ");
    sub_100051FB0((uint64_t)&v4, (const char **)&v3->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v5);
    int v2 = *v1;
  }
  int *v1 = v2 - 1;
  return result;
}

void sub_10007D3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_10007D3C4(int *result, int a2, int a3, void *a4)
{
  int v6 = a2;
  char v7 = result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1391);
    uint64_t v8 = sub_100051E74(v16, "CHECK failed: (start) >= (0): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1392);
  unint64_t v9 = sub_100051E74(v16, "CHECK failed: (num) >= (0): ");
  sub_100051FB0((uint64_t)&v15, (const char **)&v9->__r_.__value_.__l.__data_);
  uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
LABEL_6:
  if (a3 + v6 > *v7)
  {
    sub_100051E5C((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1393);
    char v10 = sub_100051E74(v16, "CHECK failed: (start + num) <= (this->current_size_): ");
    sub_100051FB0((uint64_t)&v15, (const char **)&v10->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v16);
  }
  if (a4 && a3 >= 1)
  {
    uint64_t v11 = a3;
    int v12 = v6;
    do
    {
      uint64_t result = (int *)sub_10007CA8C(v7, v12);
      *a4++ = *(void *)result;
      ++v12;
      --v11;
    }
    while (v11);
  }
  if (a3 >= 1)
  {
    for (int i = *v7; a3 + v6 < *v7; ++v6)
    {
      char v14 = (uint64_t *)sub_10007CA8C(v7, a3 + v6);
      uint64_t result = (int *)sub_10007D170(v7, v6, v14);
      int i = *v7;
    }
    if (i >= 1) {
      *char v7 = i - a3;
    }
  }
  return result;
}

void sub_10007D56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_10007D594(int *result, int a2)
{
  uint64_t v3 = result;
  int v4 = *result;
  if (*result < a2)
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    int v5 = sub_100051E74(v7, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v7);
    int v4 = *v3;
  }
  if (v4 >= 1) {
    *uint64_t v3 = a2;
  }
  return result;
}

void sub_10007D618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_10007D630(int *result, int *a2)
{
  uint64_t v3 = result;
  if (a2 == result)
  {
    sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    int v4 = sub_100051E74(v10, "CHECK failed: (&other) != (this): ");
    sub_100051FB0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_100051FB8((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_10007C718(v3, *v3 + *a2);
    sub_10007C8EC((uint64_t)v3, *a2);
    char v6 = (void *)sub_10007C9AC(v3, v5);
    if (*a2 <= 0)
    {
      sub_100051E5C((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_100051E74(v10, "CHECK failed: (index) < (current_size_): ");
      sub_100051FB0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v10);
    }
    uint64_t v8 = (const void *)sub_10007CF1C((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_10007D740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D760(int *a1, uint64_t *a2)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1266);
    int v4 = sub_100051E74(v9, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v9);
  }
  uint64_t v5 = *a2;
  uint64_t result = sub_10007CF1C((uint64_t)a1);
  uint64_t v7 = *a1;
  *a1 = v7 + 1;
  *(void *)(result + 8 * v7) = v5;
  return result;
}

void sub_10007D7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D810(int *a1)
{
  if (*a1 >= a1[1])
  {
    sub_100051E5C((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1272);
    int v2 = sub_100051E74(v7, "CHECK failed: (current_size_) < (total_size_): ");
    sub_100051FB0((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v7);
  }
  uint64_t v3 = sub_10007CF1C((uint64_t)a1);
  uint64_t v4 = *a1;
  *a1 = v4 + 1;
  return v3 + 8 * v4;
}

void sub_10007D898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D8B0(uint64_t result, int a2, void *a3)
{
  uint64_t v5 = (int *)result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1291);
    char v6 = sub_100051E74(v11, "CHECK failed: (new_size) >= (0): ");
    sub_100051FB0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    uint64_t result = sub_100051FB8((uint64_t)v11);
  }
  if (*v5 < a2)
  {
    sub_10007C718(v5, a2);
    uint64_t v7 = (void *)(sub_10007CF1C((uint64_t)v5) + 8 * *v5);
    uint64_t result = sub_10007CF1C((uint64_t)v5);
    uint64_t v8 = result + 8 * a2 - (void)v7;
    if (v8 >= 1)
    {
      unint64_t v9 = ((unint64_t)v8 >> 3) + 1;
      do
      {
        *v7++ = *a3;
        --v9;
      }
      while (v9 > 1);
    }
  }
  int *v5 = a2;
  return result;
}

void sub_10007D988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007D9A0(int *a1, __n128 *a2)
{
  if (a1 != (int *)a2)
  {
    if (a1[1]) {
      uint64_t v4 = (uint64_t *)(sub_10007CF1C((uint64_t)a1) - 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(a1 + 2);
    }
    uint64_t v5 = *v4;
    if (a2->n128_u32[1]) {
      char v6 = (unint64_t *)(sub_10007CF1C((uint64_t)a2) - 8);
    }
    else {
      char v6 = &a2->n128_u64[1];
    }
    if (v5 == *v6)
    {
      sub_10007CCD0((uint64_t)a1, a2);
    }
    else
    {
      if (a2->n128_u32[1]) {
        uint64_t v7 = (unint64_t *)(sub_10007CF1C((uint64_t)a2) - 8);
      }
      else {
        uint64_t v7 = &a2->n128_u64[1];
      }
      unint64_t v8 = *v7;
      v9.n128_u64[0] = 0;
      v9.n128_u64[1] = v8;
      sub_10007D630((int *)&v9, a1);
      *a1 = 0;
      sub_10007D630(a1, (int *)a2);
      if (&v9 != a2) {
        sub_10007CCD0((uint64_t)a2, &v9);
      }
      sub_10007CB70((uint64_t)&v9);
    }
  }
}

void sub_10007DAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_10007DAC4(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 != a2) {
    *(void *)&double result = sub_10007CCD0(a1, a2).n128_u64[0];
  }
  return result;
}

double sub_10007DAD4(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_10007CF1C(a1);
  uint64_t v7 = sub_10007CF1C(a1);
  double result = *(double *)(v6 + 8 * a2);
  *(void *)(v6 + 8 * a2) = *(void *)(v7 + 8 * a3);
  *(double *)(v7 + 8 * a3) = result;
  return result;
}

unint64_t sub_10007DB24(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 4);
  if ((int)v1 <= 0) {
    unint64_t v2 = 0;
  }
  else {
    unint64_t v2 = 8 * v1 + 8;
  }
  if (v2 >> 31)
  {
    sub_100051E5C((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/message_lite.h", 113);
    uint64_t v3 = sub_100051E74(v6, "CHECK failed: (size) <= (static_cast<size_t>(2147483647)): ");
    sub_100051FB0((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v6);
  }
  return v2;
}

void sub_10007DBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007DBBC(int *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 8);
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = a2 - v5;
  uint64_t v7 = *a1;
  unint64_t v8 = (unsigned char *)(v5 + 8 * v7);
  uint64_t v9 = v5 + 8 * (int)((unint64_t)v6 >> 3);
  int64_t v10 = v8 - v4;
  if (v8 != v4)
  {
    memmove((void *)(v5 + 8 * (int)((unint64_t)v6 >> 3)), v4, v8 - v4);
    uint64_t v5 = *((void *)a1 + 1);
    LODWORD(v7) = *a1;
  }
  unint64_t v11 = (unint64_t)(v9 + v10 - v5) >> 3;
  if ((int)v7 < (int)v11)
  {
    sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
    int v12 = sub_100051E74(v15, "CHECK failed: (new_size) <= (current_size_): ");
    sub_100051FB0((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v15);
    LODWORD(v7) = *a1;
  }
  if ((int)v7 >= 1) {
    *a1 = v11;
  }
  return *((void *)a1 + 1) + 8 * (int)(v6 >> 3);
}

void sub_10007DC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007DCAC(int *a1, unsigned char *a2, unsigned char *__src)
{
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = (uint64_t)&a2[-v4];
  if (a2 == __src)
  {
    uint64_t v12 = (int)(v5 >> 3);
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (unsigned char *)(v4 + 8 * v6);
    uint64_t v8 = v4 + 8 * (int)((unint64_t)v5 >> 3);
    int64_t v9 = v7 - __src;
    if (v7 != __src)
    {
      memmove((void *)(v4 + 8 * (int)((unint64_t)v5 >> 3)), __src, v7 - __src);
      uint64_t v4 = *((void *)a1 + 1);
      LODWORD(v6) = *a1;
    }
    unint64_t v10 = (unint64_t)(v8 + v9 - v4) >> 3;
    if ((int)v6 < (int)v10)
    {
      sub_100051E5C((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1609);
      unint64_t v11 = sub_100051E74(v15, "CHECK failed: (new_size) <= (current_size_): ");
      sub_100051FB0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_100051FB8((uint64_t)v15);
      LODWORD(v6) = *a1;
    }
    uint64_t v12 = (int)(v5 >> 3);
    if ((int)v6 >= 1) {
      *a1 = v10;
    }
  }
  return *((void *)a1 + 1) + 8 * v12;
}

void sub_10007DD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10007DDA8(void *result)
{
  *double result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void *sub_10007DDB4(void *result, uint64_t a2)
{
  result[1] = 0;
  result[2] = 0;
  *double result = a2;
  return result;
}

void *sub_10007DDC0(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_100048C9C((uint64_t)a1, a2);
  return a1;
}

void sub_10007DDF0(_Unwind_Exception *a1)
{
  sub_10003D660(v1);
  _Unwind_Resume(a1);
}

void *sub_10007DE08(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_100048C9C((uint64_t)a1, a2);
  return a1;
}

void sub_10007DE38(_Unwind_Exception *a1)
{
  sub_10003D660(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10007DE4C(uint64_t *a1)
{
  sub_10007DE88(a1);
  return sub_10003D660(a1);
}

void sub_10007DE88(void *a1)
{
  unint64_t v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = (uint64_t *)(v2 + 2);
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        uint64_t v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      unint64_t v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t sub_10007DF1C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100048998(a1);
    sub_100048C9C(a1, a2);
  }
  return a1;
}

uint64_t sub_10007DF60(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v4 = result;
    sub_100048998(result);
    return sub_100048C9C(v4, a2);
  }
  return result;
}

void *sub_10007DFAC(void *a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (*a2)
  {
    if (a2 != a1)
    {
      sub_100048998((uint64_t)a1);
      sub_100048C9C((uint64_t)a1, (uint64_t)a2);
    }
  }
  else
  {
    sub_10003D900(a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t sub_10007E014(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_10007E020(void *a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (*a2)
  {
    if (a2 != a1)
    {
      sub_100048998((uint64_t)a1);
      sub_100048C9C((uint64_t)a1, (uint64_t)a2);
    }
  }
  else
  {
    sub_10003D900(a1, (uint64_t)a2);
  }
  return a1;
}

void *sub_10007E088(void *a1, void *a2)
{
  if (a1 != a2)
  {
    if (*a1 == *a2)
    {
      sub_10003D900(a1, (uint64_t)a2);
    }
    else
    {
      sub_100048998((uint64_t)a1);
      sub_100048C9C((uint64_t)a1, (uint64_t)a2);
    }
  }
  return a1;
}

BOOL sub_10007E0F0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 0;
}

uint64_t sub_10007E100(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void *sub_10007E110(uint64_t a1)
{
  return sub_10007E118(a1);
}

void *sub_10007E118(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v3 = *(_DWORD *)(a1 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    if (v3 <= v4)
    {
      sub_10007F4D8((uint64_t *)a1, v4 - v3 + 1);
      uint64_t v2 = *(int **)(a1 + 16);
    }
    goto LABEL_8;
  }
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = *v2;
  if (v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(void **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_8:
  ++*v2;
  uint64_t v6 = *(void *)a1;
  if (!*(void *)a1) {
    operator new();
  }
  if (*(unsigned char *)(v6 + 24)) {
  double result = (void *)sub_10004DFA4((void *)v6, 0x18uLL, (uint64_t)sub_100048840);
  }
  *double result = 0;
  result[1] = 0;
  result[2] = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = result;
  return result;
}

__n128 sub_10007E24C(uint64_t a1, __n128 *a2)
{
  int v4 = *(int **)(a1 + 16);
  if (!v4)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
LABEL_8:
    if (v5 <= v6)
    {
      sub_10007F4D8((uint64_t *)a1, v6 - v5 + 1);
      int v4 = *(int **)(a1 + 16);
    }
    goto LABEL_10;
  }
  int v5 = *(_DWORD *)(a1 + 8);
  int v6 = *v4;
  if (v5 < *v4)
  {
    *(_DWORD *)(a1 + 8) = v5 + 1;
    uint64_t v7 = *(void *)&v4[2 * v5 + 2];
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    __n128 result = *a2;
    *(void *)(v7 + 16) = a2[1].n128_u64[0];
    *(__n128 *)uint64_t v7 = result;
    a2[1].n128_u8[7] = 0;
    a2->n128_u8[0] = 0;
    return result;
  }
  if (v6 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_8;
  }
LABEL_10:
  ++*v4;
  uint64_t v9 = *(void *)a1;
  if (!*(void *)a1) {
    operator new();
  }
  if (*(unsigned char *)(v9 + 24)) {
  unint64_t v10 = (__n128 *)sub_10004DFA4((void *)v9, 0x18uLL, (uint64_t)sub_100048840);
  }
  __n128 result = *a2;
  v10[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v10 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v12 + 1;
  *(void *)(v11 + 8 * v12 + 8) = v10;
  return result;
}

uint64_t sub_10007E3C4(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1713);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1714);
    int v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_10007E484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007E4A8(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1720);
    int v4 = sub_100051E74(v8, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1721);
    int v5 = sub_100051E74(v8, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_10007E568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007E588(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 8);
  if (v2 <= 0)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1773);
    int v3 = sub_100051E74(v8, "CHECK failed: (current_size_) > (0): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v3->__r_.__value_.__l.__data_);
    __n128 result = sub_100051FB8((uint64_t)v8);
    int v2 = *(_DWORD *)(v1 + 8);
  }
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v2 - 1;
  *(_DWORD *)(v1 + 8) = v5;
  uint64_t v6 = *(void *)(v4 + 8 * v5 + 8);
  if (*(char *)(v6 + 23) < 0)
  {
    **(unsigned char **)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t v6 = 0;
    *(unsigned char *)(v6 + 23) = 0;
  }
  return result;
}

void sub_10007E634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007E64C(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 2209);
    uint64_t v6 = sub_100051E74(v13, "CHECK failed: (start) >= (0): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 2210);
  char v7 = sub_100051E74(v13, "CHECK failed: (num) >= (0): ");
  sub_100051FB0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
  sub_100051FB8((uint64_t)v13);
LABEL_6:
  if (a3 + a2 > *(_DWORD *)(a1 + 8))
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 2211);
    uint64_t v8 = sub_100051E74(v13, "CHECK failed: (start + num) <= (size()): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
  }
  if (a3 >= 1)
  {
    int v9 = a2;
    int v10 = a3;
    do
    {
      sub_10007E7C4(a1, v9++);
      --v10;
    }
    while (v10);
  }
  return sub_10007ECE0(a1, a2, a3, 0);
}

void sub_10007E79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007E7C4(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1734);
    uint64_t v4 = sub_100051E74(v9, "CHECK failed: (index) >= (0): ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    __n128 result = sub_100051FB8((uint64_t)v9);
  }
  if (*(_DWORD *)(v3 + 8) <= a2)
  {
    sub_100051E5C((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1735);
    uint64_t v5 = sub_100051E74(v9, "CHECK failed: (index) < (current_size_): ");
    sub_100051FB0((uint64_t)&v8, (const char **)&v5->__r_.__value_.__l.__data_);
    __n128 result = sub_100051FB8((uint64_t)v9);
  }
  uint64_t v6 = *(void *)(*(void *)(v3 + 16) + 8 * a2 + 8);
  if (v6) {
    BOOL v7 = *(void *)v3 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    operator delete();
  }
  return result;
}

void sub_10007E8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007E8E4(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 8);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (!((v4 < 0) ^ v3 | (v4 == 0))) {
    return sub_10007F4D8((uint64_t *)result, v4);
  }
  return result;
}

uint64_t sub_10007E8F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_10007E900(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return v1 + 8;
  }
  else {
    return 0;
  }
}

double sub_10007E914(void *a1, unint64_t *a2)
{
  if (a1 != a2)
  {
    if (*a2 == *a1) {
      *(void *)&double result = sub_10003D900(a1, (uint64_t)a2).n128_u64[0];
    }
    else {
      sub_10007F7B8(a1, a2);
    }
  }
  return result;
}

double sub_10007E938(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2) {
    *(void *)&double result = sub_10003D900(a1, a2).n128_u64[0];
  }
  return result;
}

uint64_t sub_10007E948(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 16) + 8;
  uint64_t v4 = *(void *)(v3 + 8 * a2);
  *(void *)(v3 + 8 * a2) = *(void *)(v3 + 8 * a3);
  *(void *)(v3 + 8 * a3) = v4;
  return result;
}

uint64_t sub_10007E964(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    uint64_t v2 = v1 + 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return v2 + 8 * *(int *)(a1 + 8);
}

uint64_t sub_10007E980(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    uint64_t v2 = v1 + 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return v2 + 8 * *(int *)(a1 + 8);
}

uint64_t sub_10007E9A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return v1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_10007E9B8(uint64_t a1)
{
  uint64_t v1 = 8 * *(int *)(a1 + 12);
  uint64_t v2 = *(int **)(a1 + 16);
  if (v2)
  {
    if (*v2 >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        v1 += sub_100065E40(*(void *)&v2[2 * v4++ + 2]) + 24;
        uint64_t v2 = *(int **)(a1 + 16);
      }
      while (v4 < *v2);
    }
    v1 += 8;
  }
  return v1;
}

unint64_t sub_10007EA30(uint64_t a1)
{
  unint64_t v1 = 8 * *(int *)(a1 + 12);
  uint64_t v2 = *(int **)(a1 + 16);
  if (v2)
  {
    if (*v2 >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        v1 += sub_100065E40(*(void *)&v2[2 * v4++ + 2]) + 24;
        uint64_t v2 = *(int **)(a1 + 16);
      }
      while (v4 < *v2);
    }
    v1 += 8;
  }
  if (v1 >> 31)
  {
    sub_100051E5C((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/message_lite.h", 113);
    uint64_t v5 = sub_100051E74(v8, "CHECK failed: (size) <= (static_cast<size_t>(2147483647)): ");
    sub_100051FB0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v8);
  }
  return v1;
}

void sub_10007EAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007EB18(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(int **)(result + 16);
  if (!v4)
  {
    int v7 = *(_DWORD *)(result + 8);
    int v5 = *(_DWORD *)(result + 12);
    if (v7 > v5)
    {
      uint64_t v4 = 0;
LABEL_16:
      int v11 = *v4 + 1;
LABEL_17:
      *uint64_t v4 = v11;
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  int v5 = *(_DWORD *)(result + 8);
  int v6 = *(_DWORD *)(result + 12);
  int v7 = v5;
  if (v5 == v6)
  {
LABEL_14:
    double result = sub_10007F4D8((uint64_t *)result, v5 - v7 + 1);
LABEL_15:
    uint64_t v4 = *(int **)(v3 + 16);
    goto LABEL_16;
  }
  uint64_t v8 = *v4;
  if (v8 != v6)
  {
    if (v5 >= (int)v8)
    {
      int v11 = v8 + 1;
      goto LABEL_17;
    }
    *(void *)&v4[2 * v8 + 2] = *(void *)&v4[2 * v5 + 2];
    goto LABEL_15;
  }
  uint64_t v9 = *(void *)&v4[2 * v5 + 2];
  if (v9) {
    BOOL v10 = *(void *)result == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    operator delete();
  }
LABEL_18:
  uint64_t v12 = *(int *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = v12 + 1;
  *(void *)&v4[2 * v12 + 2] = a2;
  return result;
}

uint64_t sub_10007EC1C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 <= 0)
  {
    sub_100051E5C((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 2040);
    uint64_t v3 = sub_100051E74(v13, "CHECK failed: (current_size_) > (0): ");
    sub_100051FB0((uint64_t)&v12, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_100051FB8((uint64_t)v13);
    int v2 = *(_DWORD *)(a1 + 8);
  }
  uint64_t v4 = *(int **)(a1 + 16);
  uint64_t v5 = v2 - 1;
  *(_DWORD *)(a1 + 8) = v5;
  int v6 = &v4[2 * v5];
  uint64_t v9 = *((void *)v6 + 1);
  uint64_t v8 = v6 + 2;
  uint64_t result = v9;
  int v10 = *v4;
  int v11 = *v4 - 1;
  *uint64_t v4 = v11;
  if (v2 < v10) {
    *uint64_t v8 = *(void *)&v4[2 * v11 + 2];
  }
  return result;
}

void sub_10007ECC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007ECE0(uint64_t result, int a2, int a3, uint64_t *a4)
{
  uint64_t v7 = result;
  if (a2 < 0)
  {
    sub_100051E5C((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 2231);
    uint64_t v8 = sub_100051E74(v14, "CHECK failed: (start) >= (0): ");
    sub_100051FB0((uint64_t)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
    uint64_t result = sub_100051FB8((uint64_t)v14);
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  sub_100051E5C((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 2232);
  uint64_t v9 = sub_100051E74(v14, "CHECK failed: (num) >= (0): ");
  sub_100051FB0((uint64_t)&v13, (const char **)&v9->__r_.__value_.__l.__data_);
  uint64_t result = sub_100051FB8((uint64_t)v14);
LABEL_6:
  if (a3 + a2 > *(_DWORD *)(v7 + 8))
  {
    sub_100051E5C((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 2233);
    int v10 = sub_100051E74(v14, "CHECK failed: (start + num) <= (size()): ");
    sub_100051FB0((uint64_t)&v13, (const char **)&v10->__r_.__value_.__l.__data_);
    uint64_t result = sub_100051FB8((uint64_t)v14);
  }
  if (a3 >= 1)
  {
    if (a4)
    {
      uint64_t v11 = a3;
      int v12 = a2;
      if (*(void *)v7)
      {
        sub_10006465C(v7, a2);
        operator new();
      }
      do
      {
        *a4++ = sub_10006465C(v7, v12++);
        --v11;
      }
      while (v11);
    }
    return sub_10007F040(v7, a2, a3);
  }
  return result;
}